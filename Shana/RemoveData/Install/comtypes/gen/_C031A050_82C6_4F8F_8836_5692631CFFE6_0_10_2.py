# -*- coding: mbcs -*-
typelib_path = u'C:\\Program Files (x86)\\ArcGIS\\Engine10.2\\com\\esriGeoprocessing.olb'
_lcid = 0 # change this if required
from ctypes import *
import comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0
from comtypes import GUID
from ctypes import HRESULT
from comtypes import BSTR
from comtypes import helpstring
from comtypes import COMMETHOD
from comtypes import dispid
from comtypes import CoClass
import comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2
import comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2
import comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2
from ctypes.wintypes import VARIANT_BOOL
import comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2
from comtypes.automation import VARIANT
import comtypes.gen._5C54042B_B2ED_4889_8C40_2D89C19DB41D_0_10_2
import comtypes.gen._1CE6AC65_43F5_4529_8FC0_D7ED298E4F1A_0_10_2
from comtypes.automation import IDispatch
import comtypes.gen._28ED84CD_FB06_41A0_9A55_E196441D169A_0_10_2
import comtypes.gen._746F6817_89BB_4490_9829_83CA25FD505A_0_10_2
from comtypes.automation import VARIANT
import comtypes.gen._A7C74158_1062_4664_B404_8694D490FCD1_0_10_2
from comtypes import IUnknown
from comtypes.automation import _midlSAFEARRAY
import comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2
import comtypes.gen._18F2FC71_6B30_45B9_B101_037A8B868B66_0_10_2
import comtypes.gen._8F0541A3_D5BE_4B3F_A8D9_062D5579E19B_0_10_2


class IGpRandomNumberGeneratorObject(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    u'Provides access to the Dispatch RandomGenerator Object.'
    _iid_ = GUID('{9DBDD887-24C3-413C-89FD-B6B5839D0D26}')
    _idlflags_ = ['dual', 'oleautomation']
class IGPRandomNumberGenerator(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing random number generator object.'
    _iid_ = GUID('{F6ADCF0E-13BB-4CD9-B6C6-630FFCC8052B}')
    _idlflags_ = ['oleautomation']
IGpRandomNumberGeneratorObject._methods_ = [
    COMMETHOD([dispid(1), helpstring(u'The RandomNumberGenerator.'), 'propget'], HRESULT, 'RandomNumberGenerator',
              ( ['retval', 'out'], POINTER(POINTER(IGPRandomNumberGenerator)), 'ppRandGen' )),
    COMMETHOD([dispid(1), helpstring(u'The RandomNumberGenerator.'), 'propputref'], HRESULT, 'RandomNumberGenerator',
              ( ['in'], POINTER(IGPRandomNumberGenerator), 'ppRandGen' )),
    COMMETHOD([dispid(2), helpstring(u'Initialize the generator by text string')], HRESULT, 'LoadFromString',
              ( ['in'], BSTR, 'valueText' )),
    COMMETHOD([dispid(3), helpstring(u'Get the string representation of the generator')], HRESULT, 'ExportToString',
              ( ['retval', 'out'], POINTER(BSTR), 'valueText' )),
]
################################################################
## code template for IGpRandomNumberGeneratorObject implementation
##class IGpRandomNumberGeneratorObject_Impl(object):
##    def LoadFromString(self, valueText):
##        u'Initialize the generator by text string'
##        #return 
##
##    def RandomNumberGenerator(self, ppRandGen):
##        u'The RandomNumberGenerator.'
##        #return 
##
##    def ExportToString(self):
##        u'Get the string representation of the generator'
##        #return valueText
##

class IGPZDomainType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing z domain data type object.'
    _iid_ = GUID('{280C60E8-2190-4811-AAA5-6C929EA416E2}')
    _idlflags_ = ['oleautomation']
IGPZDomainType._methods_ = [
]
################################################################
## code template for IGPZDomainType implementation
##class IGPZDomainType_Impl(object):

class GPRasterDataType(CoClass):
    u'Raster Data Type.'
    _reg_clsid_ = GUID('{1E0EAE49-76A6-48FC-8E6B-93A58E594C11}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPRasterDataType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    _iid_ = GUID('{B90C1B62-9479-44DE-A223-E53343CE3AA2}')
    _idlflags_ = ['oleautomation']
GPRasterDataType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPRasterDataType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class GPVirtualTableDomain(CoClass):
    u'Object for filtering out the virtual tables.'
    _reg_clsid_ = GUID('{BE355340-B5A9-4432-B2F4-497A50E05115}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPVirtualTableDomain(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the virtual table domain.'
    _iid_ = GUID('{2FFB73C1-07CE-49CC-BC5C-898991B4EC76}')
    _idlflags_ = ['oleautomation']
GPVirtualTableDomain._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDomain, IGPVirtualTableDomain]

class IGPRasterCatalogLayer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing raster catalog layer object.'
    _iid_ = GUID('{EEB86307-91F0-4A6B-8303-D33EA2B0DB88}')
    _idlflags_ = ['oleautomation']
IGPRasterCatalogLayer._methods_ = [
]
################################################################
## code template for IGPRasterCatalogLayer implementation
##class IGPRasterCatalogLayer_Impl(object):

class IMdVariable3(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to properties/methods of a model variable.'
    _iid_ = GUID('{D581F2CA-E5C6-4AAF-BB56-4A1AF5934128}')
    _idlflags_ = ['oleautomation']
IMdVariable3._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates the layer to use for drawing information.')], HRESULT, 'TemplateLayerFile',
              ( ['retval', 'out'], POINTER(BSTR), 'pLayer' )),
    COMMETHOD(['propput', helpstring(u'Indicates the layer to use for drawing information.')], HRESULT, 'TemplateLayerFile',
              ( ['in'], BSTR, 'pLayer' )),
]
################################################################
## code template for IMdVariable3 implementation
##class IMdVariable3_Impl(object):
##    def _get(self):
##        u'Indicates the layer to use for drawing information.'
##        #return pLayer
##    def _set(self, pLayer):
##        u'Indicates the layer to use for drawing information.'
##    TemplateLayerFile = property(_get, _set, doc = _set.__doc__)
##

class GPFieldInfoType(CoClass):
    u'Geoprocessing Field Info Data Type.'
    _reg_clsid_ = GUID('{0602F3B9-E9F6-49D8-9C54-6E13E47F06C3}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPFieldInfoType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a field info data type.'
    _iid_ = GUID('{EBC60F4A-09E4-4C17-B162-F6AE1F3F2DD1}')
    _idlflags_ = ['oleautomation']
GPFieldInfoType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, IGPFieldInfoType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]


# values for enumeration 'esriMdListType'
esriMdListTypeSingle = 0
esriMdListTypeList = 1
esriMdListTypeSeries = 2
esriMdListType = c_int # enum
class IGPRouteMeasureEventProperties(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the route measure event properties.'
    _iid_ = GUID('{C9381003-455C-424E-A806-2ED4F293D25C}')
    _idlflags_ = ['oleautomation']
IGPRouteMeasureEventProperties._methods_ = [
    COMMETHOD(['propget', helpstring(u'The route id field name.')], HRESULT, 'RouteIDFieldName',
              ( ['retval', 'out'], POINTER(BSTR), 'pFieldName' )),
    COMMETHOD(['propput', helpstring(u'The route id field name.')], HRESULT, 'RouteIDFieldName',
              ( ['in'], BSTR, 'pFieldName' )),
    COMMETHOD(['propget', helpstring(u'The type of property (point or line).')], HRESULT, 'Type',
              ( ['retval', 'out'], POINTER(BSTR), 'pType' )),
    COMMETHOD(['propput', helpstring(u'The type of property (point or line).')], HRESULT, 'Type',
              ( ['in'], BSTR, 'pType' )),
    COMMETHOD(['propget', helpstring(u'The from-measure field name of the event table.')], HRESULT, 'FromMeasureFieldName',
              ( ['retval', 'out'], POINTER(BSTR), 'pFieldName' )),
    COMMETHOD(['propput', helpstring(u'The from-measure field name of the event table.')], HRESULT, 'FromMeasureFieldName',
              ( ['in'], BSTR, 'pFieldName' )),
    COMMETHOD(['propget', helpstring(u'The from-measure field name of the event table.')], HRESULT, 'ToMeasureFieldName',
              ( ['retval', 'out'], POINTER(BSTR), 'pFieldName' )),
    COMMETHOD(['propput', helpstring(u'The from-measure field name of the event table.')], HRESULT, 'ToMeasureFieldName',
              ( ['in'], BSTR, 'pFieldName' )),
]
################################################################
## code template for IGPRouteMeasureEventProperties implementation
##class IGPRouteMeasureEventProperties_Impl(object):
##    def _get(self):
##        u'The from-measure field name of the event table.'
##        #return pFieldName
##    def _set(self, pFieldName):
##        u'The from-measure field name of the event table.'
##    ToMeasureFieldName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The from-measure field name of the event table.'
##        #return pFieldName
##    def _set(self, pFieldName):
##        u'The from-measure field name of the event table.'
##    FromMeasureFieldName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The type of property (point or line).'
##        #return pType
##    def _set(self, pType):
##        u'The type of property (point or line).'
##    Type = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The route id field name.'
##        #return pFieldName
##    def _set(self, pFieldName):
##        u'The route id field name.'
##    RouteIDFieldName = property(_get, _set, doc = _set.__doc__)
##

class IGPMosaicLayerType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing mosaic layer data type object.'
    _iid_ = GUID('{A96CBD40-1557-4BF1-A104-64E38F2879F7}')
    _idlflags_ = ['oleautomation']
IGPMosaicLayerType._methods_ = [
]
################################################################
## code template for IGPMosaicLayerType implementation
##class IGPMosaicLayerType_Impl(object):


# values for enumeration 'esriMdIterationType'
esriMdIterationTypeFixed = 0
esriMdIterationTypeConditional = 1
esriMdIterationType = c_int # enum
class IGPMosaicLayer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing mosaic layer object.'
    _iid_ = GUID('{A4F784E6-B91E-49FA-AEC5-E7F185636352}')
    _idlflags_ = ['oleautomation']
IGPMosaicLayer._methods_ = [
]
################################################################
## code template for IGPMosaicLayer implementation
##class IGPMosaicLayer_Impl(object):

class IMdVariable2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to properties/methods of a model variable.'
    _iid_ = GUID('{A3EC5E23-1FFA-445B-B216-559252A91CFD}')
    _idlflags_ = ['oleautomation']
IMdVariable2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates the layer to use for drawing information.')], HRESULT, 'TemplateLayer',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.ILayer)), 'ppLayer' )),
    COMMETHOD(['propputref', helpstring(u'Indicates the layer to use for drawing information.')], HRESULT, 'TemplateLayer',
              ( ['in'], POINTER(comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.ILayer), 'ppLayer' )),
]
################################################################
## code template for IMdVariable2 implementation
##class IMdVariable2_Impl(object):
##    def TemplateLayer(self, ppLayer):
##        u'Indicates the layer to use for drawing information.'
##        #return 
##

class IGPTopologyLayerType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing topology layer data type object.'
    _iid_ = GUID('{3E3C9490-FD8F-4104-BF7B-1A25FD77F73B}')
    _idlflags_ = ['oleautomation']
IGPTopologyLayerType._methods_ = [
]
################################################################
## code template for IGPTopologyLayerType implementation
##class IGPTopologyLayerType_Impl(object):

class IGPTopologyLayer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing topology layer object.'
    _iid_ = GUID('{B352E934-48A1-4F57-8601-60B5B32AAA3B}')
    _idlflags_ = ['oleautomation']
IGPTopologyLayer._methods_ = [
]
################################################################
## code template for IGPTopologyLayer implementation
##class IGPTopologyLayer_Impl(object):

class IGPCellSizeXY(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing CellSizeXY object.'
    _iid_ = GUID('{A177E2EC-B7E2-45F6-ACC1-558C91049417}')
    _idlflags_ = ['oleautomation']
IGPCellSizeXY._methods_ = [
    COMMETHOD(['propget', helpstring(u'The X.')], HRESULT, 'X',
              ( ['retval', 'out'], POINTER(c_double), 'X' )),
    COMMETHOD(['propput', helpstring(u'The X.')], HRESULT, 'X',
              ( ['in'], c_double, 'X' )),
    COMMETHOD(['propget', helpstring(u'The Y.')], HRESULT, 'Y',
              ( ['retval', 'out'], POINTER(c_double), 'Y' )),
    COMMETHOD(['propput', helpstring(u'The Y.')], HRESULT, 'Y',
              ( ['in'], c_double, 'Y' )),
]
################################################################
## code template for IGPCellSizeXY implementation
##class IGPCellSizeXY_Impl(object):
##    def _get(self):
##        u'The Y.'
##        #return Y
##    def _set(self, Y):
##        u'The Y.'
##    Y = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The X.'
##        #return X
##    def _set(self, X):
##        u'The X.'
##    X = property(_get, _set, doc = _set.__doc__)
##

class IToolboxWorkspace(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to methods on the toolbox workspace object.'
    _iid_ = GUID('{027612F3-7E6B-4FDB-B20E-0CA4CCFA45B4}')
    _idlflags_ = ['oleautomation']
class IEnumGPToolboxName(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to methods on a toolbox name enumeration object.'
    _iid_ = GUID('{E41EC58C-1448-427F-ADB9-79CF7B6F4335}')
    _idlflags_ = ['oleautomation']
class IEnumGPToolbox(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to methods on a toolbox enumeration object.'
    _iid_ = GUID('{DBD67870-ADE5-4B28-A175-B6D6AAD6EBF0}')
    _idlflags_ = ['oleautomation']
class IGPToolbox(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to methods on the toolbox object.'
    _iid_ = GUID('{8DF04717-E331-49D9-980B-1079D4E61E37}')
    _idlflags_ = ['oleautomation']
IToolboxWorkspace._methods_ = [
    COMMETHOD(['propget', helpstring(u'An enumeration of toolbox name objects contained in the workspace.')], HRESULT, 'ToolboxNames',
              ( ['retval', 'out'], POINTER(POINTER(IEnumGPToolboxName)), 'names' )),
    COMMETHOD(['propget', helpstring(u'An enumeration of toolbox objects contained in the workspace.')], HRESULT, 'Toolboxes',
              ( ['retval', 'out'], POINTER(POINTER(IEnumGPToolbox)), 'Toolboxes' )),
    COMMETHOD([helpstring(u'Opens an existing toolbox in the workspace.')], HRESULT, 'OpenToolbox',
              ( ['in'], BSTR, 'Name' ),
              ( ['retval', 'out'], POINTER(POINTER(IGPToolbox)), 'Toolbox' )),
    COMMETHOD([helpstring(u'Creates a new toolbox in the workspace.')], HRESULT, 'CreateToolbox',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Alias' ),
              ( ['retval', 'out'], POINTER(POINTER(IGPToolbox)), 'Toolbox' )),
    COMMETHOD([helpstring(u'Deletes a toolbox from the workspace.')], HRESULT, 'DeleteToolbox',
              ( ['in'], BSTR, 'Name' )),
]
################################################################
## code template for IToolboxWorkspace implementation
##class IToolboxWorkspace_Impl(object):
##    def CreateToolbox(self, Name, Alias):
##        u'Creates a new toolbox in the workspace.'
##        #return Toolbox
##
##    @property
##    def ToolboxNames(self):
##        u'An enumeration of toolbox name objects contained in the workspace.'
##        #return names
##
##    @property
##    def Toolboxes(self):
##        u'An enumeration of toolbox objects contained in the workspace.'
##        #return Toolboxes
##
##    def OpenToolbox(self, Name):
##        u'Opens an existing toolbox in the workspace.'
##        #return Toolbox
##
##    def DeleteToolbox(self, Name):
##        u'Deletes a toolbox from the workspace.'
##        #return 
##

class GPRasterGDBEnvStatistics(CoClass):
    u'GeoProcessor Spatial GDB Environment Compression object.'
    _reg_clsid_ = GUID('{94F81626-002E-4C51-8829-A04C6CB5E8EA}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPRasterGDBEnvStatistics(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to raster GDB environment statistics control.'
    _iid_ = GUID('{AC442D72-92F7-44A7-8675-6FFE8C651228}')
    _idlflags_ = ['oleautomation']
GPRasterGDBEnvStatistics._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPRasterGDBEnvStatistics, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

class GPMDomain(CoClass):
    u'Geoprocessing M Domain object.'
    _reg_clsid_ = GUID('{84259B9E-73C9-462A-BEB1-3BB3051E593A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPMDomain(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing m domain object.'
    _iid_ = GUID('{3BD599E0-7AA7-411D-BA16-270709460F93}')
    _idlflags_ = ['oleautomation']
GPMDomain._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue, IGPMDomain, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

class IGPMDomainType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing m domain data type object.'
    _iid_ = GUID('{A42A2997-F8B2-4EA1-83AA-DFAB257961EC}')
    _idlflags_ = ['oleautomation']
IGPMDomainType._methods_ = [
]
################################################################
## code template for IGPMDomainType implementation
##class IGPMDomainType_Impl(object):

class IGPParameterEdit(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the editable properties/methods of a geoprocessing parameter object.'
    _iid_ = GUID('{41EA73EE-8C7F-4EC8-BF00-1C5B11EF781D}')
    _idlflags_ = ['oleautomation']
class IGPParameterEdit2(IGPParameterEdit):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing parameter object.'
    _iid_ = GUID('{1BA34152-5E03-4DF1-A402-22C7E2A9F869}')
    _idlflags_ = ['oleautomation']
class IGPParameterEdit3(IGPParameterEdit2):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing parameter object.'
    _iid_ = GUID('{5353174C-8A81-4C72-A874-880AC9B7EF3F}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'esriGPParameterDirection'
esriGPParameterDirectionInput = 0
esriGPParameterDirectionOutput = 1
esriGPParameterDirection = c_int # enum

# values for enumeration 'esriGPParameterType'
esriGPParameterTypeRequired = 0
esriGPParameterTypeOptional = 1
esriGPParameterTypeDerived = 2
esriGPParameterType = c_int # enum
IGPParameterEdit._methods_ = [
    COMMETHOD(['propput', helpstring(u'Name of the geoprocessing parameter.')], HRESULT, 'Name',
              ( ['in'], BSTR, 'rhs' )),
    COMMETHOD(['propput', helpstring(u'Display name of the geoprocessing parameter.')], HRESULT, 'DisplayName',
              ( ['in'], BSTR, 'rhs' )),
    COMMETHOD(['propput', helpstring(u'Direction of the geoprocessing parameter.')], HRESULT, 'Direction',
              ( ['in'], esriGPParameterDirection, 'rhs' )),
    COMMETHOD(['propputref', helpstring(u'Data type of the geoprocessing parameter.')], HRESULT, 'DataType',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType), 'rhs' )),
    COMMETHOD(['propput', helpstring(u'Type of the geoprocessing parameter.')], HRESULT, 'ParameterType',
              ( ['in'], esriGPParameterType, 'rhs' )),
    COMMETHOD(['propput', helpstring(u'Enumeration of parameter names the geoprocessing parameter is dependent on.')], HRESULT, 'ParameterDependencies',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IEnumBSTR), 'rhs' )),
    COMMETHOD(['propputref', helpstring(u'Domain of the geoprocessing parameter.')], HRESULT, 'Domain',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDomain), 'rhs' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the ActiveX control for the geoprocessing parameter should be enabled/disabled.')], HRESULT, 'Enabled',
              ( ['in'], VARIANT_BOOL, 'rhs' )),
    COMMETHOD(['propputref', helpstring(u'The current value object of the geoprocessing parameter.')], HRESULT, 'Value',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'rhs' )),
    COMMETHOD(['propput', helpstring(u'The class identifier (CLSID) of the ActiveX control to use to edit the geoprocessing parameter.')], HRESULT, 'ControlCLSID',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IUID), 'rhs' )),
    COMMETHOD(['propput', helpstring(u'The name of the environment value to use as the default value for the geoprocessing parameter.')], HRESULT, 'DefaultEnvironmentName',
              ( ['in'], BSTR, 'rhs' )),
    COMMETHOD(['propput', helpstring(u'The display order of the geoprocessing parameter.')], HRESULT, 'DisplayOrder',
              ( ['in'], c_int, 'rhs' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the parameter value has been explicitly set (by the user).')], HRESULT, 'Altered',
              ( ['in'], VARIANT_BOOL, 'rhs' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the parameter value has been modified since the last time the parameter was validated (i.e., since Validate() was called).')], HRESULT, 'HasBeenValidated',
              ( ['in'], VARIANT_BOOL, 'rhs' )),
    COMMETHOD([helpstring(u'Adds the name of a parameter that this geoprocessing parameter object is dependent on.')], HRESULT, 'AddDependency',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propput', helpstring(u'Category of the geoprocessing parameter.')], HRESULT, 'Category',
              ( ['in'], BSTR, 'rhs' )),
    COMMETHOD(['propputref', helpstring(u'The choice list object of the geoprocessing parameter.')], HRESULT, 'ChoiceList',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPChoiceList), 'rhs' )),
]
################################################################
## code template for IGPParameterEdit implementation
##class IGPParameterEdit_Impl(object):
##    def _set(self, rhs):
##        u'Type of the geoprocessing parameter.'
##    ParameterType = property(fset = _set, doc = _set.__doc__)
##
##    def _set(self, rhs):
##        u'Category of the geoprocessing parameter.'
##    Category = property(fset = _set, doc = _set.__doc__)
##
##    def _set(self, rhs):
##        u'Direction of the geoprocessing parameter.'
##    Direction = property(fset = _set, doc = _set.__doc__)
##
##    def ChoiceList(self, rhs):
##        u'The choice list object of the geoprocessing parameter.'
##        #return 
##
##    def _set(self, rhs):
##        u'Display name of the geoprocessing parameter.'
##    DisplayName = property(fset = _set, doc = _set.__doc__)
##
##    def _set(self, rhs):
##        u'Name of the geoprocessing parameter.'
##    Name = property(fset = _set, doc = _set.__doc__)
##
##    def DataType(self, rhs):
##        u'Data type of the geoprocessing parameter.'
##        #return 
##
##    def _set(self, rhs):
##        u'Indicates whether the ActiveX control for the geoprocessing parameter should be enabled/disabled.'
##    Enabled = property(fset = _set, doc = _set.__doc__)
##
##    def Domain(self, rhs):
##        u'Domain of the geoprocessing parameter.'
##        #return 
##
##    def Value(self, rhs):
##        u'The current value object of the geoprocessing parameter.'
##        #return 
##
##    def AddDependency(self, Name):
##        u'Adds the name of a parameter that this geoprocessing parameter object is dependent on.'
##        #return 
##
##    def _set(self, rhs):
##        u'The class identifier (CLSID) of the ActiveX control to use to edit the geoprocessing parameter.'
##    ControlCLSID = property(fset = _set, doc = _set.__doc__)
##
##    def _set(self, rhs):
##        u'Indicates whether the parameter value has been explicitly set (by the user).'
##    Altered = property(fset = _set, doc = _set.__doc__)
##
##    def _set(self, rhs):
##        u'Enumeration of parameter names the geoprocessing parameter is dependent on.'
##    ParameterDependencies = property(fset = _set, doc = _set.__doc__)
##
##    def _set(self, rhs):
##        u'Indicates whether the parameter value has been modified since the last time the parameter was validated (i.e., since Validate() was called).'
##    HasBeenValidated = property(fset = _set, doc = _set.__doc__)
##
##    def _set(self, rhs):
##        u'The display order of the geoprocessing parameter.'
##    DisplayOrder = property(fset = _set, doc = _set.__doc__)
##
##    def _set(self, rhs):
##        u'The name of the environment value to use as the default value for the geoprocessing parameter.'
##    DefaultEnvironmentName = property(fset = _set, doc = _set.__doc__)
##

IGPParameterEdit2._methods_ = [
    COMMETHOD(['propput', helpstring(u'Indicates whether the parameter is managed.')], HRESULT, 'Managed',
              ( ['in'], VARIANT_BOOL, 'rhs' )),
]
################################################################
## code template for IGPParameterEdit2 implementation
##class IGPParameterEdit2_Impl(object):
##    def _set(self, rhs):
##        u'Indicates whether the parameter is managed.'
##    Managed = property(fset = _set, doc = _set.__doc__)
##

class IGPSchema(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing schema object.'
    _iid_ = GUID('{5E78CE61-0B9F-43E8-84E3-C3F0C9DCE34F}')
    _idlflags_ = ['oleautomation']
IGPParameterEdit3._methods_ = [
    COMMETHOD(['propputref', helpstring(u'Indicates how the output value is to be generated and populated during validate.')], HRESULT, 'Schema',
              ( ['in'], POINTER(IGPSchema), 'rhs' )),
]
################################################################
## code template for IGPParameterEdit3 implementation
##class IGPParameterEdit3_Impl(object):
##    def Schema(self, rhs):
##        u'Indicates how the output value is to be generated and populated during validate.'
##        #return 
##

IGPMDomain._methods_ = [
    COMMETHOD([helpstring(u'Set the measure false origin and units.')], HRESULT, 'SetMFalseOriginAndUnits',
              ( ['in'], c_double, 'falseM' ),
              ( ['in'], c_double, 'mUnits' )),
    COMMETHOD([helpstring(u'Get the measure false origin and units.')], HRESULT, 'GetMFalseOriginAndUnits',
              ( ['out'], POINTER(c_double), 'falseM' ),
              ( ['out'], POINTER(c_double), 'mUnits' )),
    COMMETHOD([helpstring(u'Get the measure domain extent.')], HRESULT, 'GetMDomain',
              ( ['out'], POINTER(c_double), 'outMMin' ),
              ( ['out'], POINTER(c_double), 'outMMax' )),
    COMMETHOD([helpstring(u'Set the measure domain extent.')], HRESULT, 'SetMDomain',
              ( ['in'], c_double, 'inMMin' ),
              ( ['in'], c_double, 'inMMax' )),
    COMMETHOD([helpstring(u'Set the m domain from a spatial reference.')], HRESULT, 'SetMDomainFromSpatialReference',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'pSpRef' )),
    COMMETHOD([helpstring(u'Get the spatial reference of the m domain.')], HRESULT, 'GetSpatialReference',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference)), 'ppSpatialReference' )),
]
################################################################
## code template for IGPMDomain implementation
##class IGPMDomain_Impl(object):
##    def GetSpatialReference(self):
##        u'Get the spatial reference of the m domain.'
##        #return ppSpatialReference
##
##    def SetMFalseOriginAndUnits(self, falseM, mUnits):
##        u'Set the measure false origin and units.'
##        #return 
##
##    def SetMDomainFromSpatialReference(self, pSpRef):
##        u'Set the m domain from a spatial reference.'
##        #return 
##
##    def SetMDomain(self, inMMin, inMMax):
##        u'Set the measure domain extent.'
##        #return 
##
##    def GetMFalseOriginAndUnits(self):
##        u'Get the measure false origin and units.'
##        #return falseM, mUnits
##
##    def GetMDomain(self):
##        u'Get the measure domain extent.'
##        #return outMMin, outMMax
##

class IGPNetworkDatasetLayerType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Network Dataset Layer Type interface'
    _iid_ = GUID('{2A4AE0FC-864E-417A-A3AF-EBD1FEDBCA81}')
    _idlflags_ = ['oleautomation']
IGPNetworkDatasetLayerType._methods_ = [
]
################################################################
## code template for IGPNetworkDatasetLayerType implementation
##class IGPNetworkDatasetLayerType_Impl(object):

class IEnumGPEnvironment(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing environment enumeration object.'
    _iid_ = GUID('{11AB998A-B838-434A-AE5F-BB865236C76D}')
    _idlflags_ = ['oleautomation']
class IGPEnvironment(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the editable properties/methods of a geoprocessing environment object.'
    _iid_ = GUID('{5547046F-7777-4AB6-B52D-A7E76C824C6F}')
    _idlflags_ = ['oleautomation']
IEnumGPEnvironment._methods_ = [
    COMMETHOD([helpstring(u'Returns the next geoprocessing environment in the enumeration.')], HRESULT, 'Next',
              ( ['retval', 'out'], POINTER(POINTER(IGPEnvironment)), 'Name' )),
    COMMETHOD([helpstring(u'Resets the current position of the enumeration.')], HRESULT, 'Reset'),
]
################################################################
## code template for IEnumGPEnvironment implementation
##class IEnumGPEnvironment_Impl(object):
##    def Reset(self):
##        u'Resets the current position of the enumeration.'
##        #return 
##
##    def Next(self):
##        u'Returns the next geoprocessing environment in the enumeration.'
##        #return Name
##

class IGPSchemaCheckImpl(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the private IGPSchemaCheckImpl interface.'
    _iid_ = GUID('{5E4BD402-B643-4358-BFE4-4B4B1E7F84B3}')
    _idlflags_ = ['hidden']
IGPSchemaCheckImpl._methods_ = [
    COMMETHOD(['propget', helpstring(u'The check schema flag.')], HRESULT, 'CheckSchema',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'CheckSchema' )),
    COMMETHOD(['propput', helpstring(u'The check schema flag.')], HRESULT, 'CheckSchema',
              ( ['in'], VARIANT_BOOL, 'CheckSchema' )),
]
################################################################
## code template for IGPSchemaCheckImpl implementation
##class IGPSchemaCheckImpl_Impl(object):
##    def _get(self):
##        u'The check schema flag.'
##        #return CheckSchema
##    def _set(self, CheckSchema):
##        u'The check schema flag.'
##    CheckSchema = property(_get, _set, doc = _set.__doc__)
##

class IGPNetworkDatasetLayer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Network Dataset Layer interface'
    _iid_ = GUID('{2409CB4B-A88B-4D2B-9A10-52F49FDFEE21}')
    _idlflags_ = ['oleautomation']
IGPNetworkDatasetLayer._methods_ = [
]
################################################################
## code template for IGPNetworkDatasetLayer implementation
##class IGPNetworkDatasetLayer_Impl(object):

class GPPointType(CoClass):
    u'Geoprocessing Point Data Type.'
    _reg_clsid_ = GUID('{43CF63E5-CED0-4921-90C4-64283BA1E87C}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPPointType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of the geoprocessing point data type.'
    _iid_ = GUID('{0850E866-D5D4-403C-8DBD-21B5A640E96D}')
    _idlflags_ = ['oleautomation']
GPPointType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, IGPPointType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class IMdDisplayNode(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to properties/methods of a model display node.'
    _iid_ = GUID('{42E93DC0-7581-4362-8D5C-D3F6E7295398}')
    _idlflags_ = ['hidden']

# values for enumeration 'esriModelDiagramNodeShape'
esriModelDiagramNodeShapeRectangle = 0
esriModelDiagramNodeShapeRoundedRectangle = 1
esriModelDiagramNodeShapeEllipse = 2
esriModelDiagramNodeShapePentagon = 3
esriModelDiagramNodeShapeHexagon1 = 4
esriModelDiagramNodeShapeHexagon2 = 5
esriModelDiagramNodeShapeOctagon = 6
esriModelDiagramNodeShapeTriangle = 7
esriModelDiagramNodeShapeTriangleDown = 8
esriModelDiagramNodeShapeTriangleLeft = 9
esriModelDiagramNodeShapeTriangleRight = 10
esriModelDiagramNodeShapeDiamond = 11
esriModelDiagramNodeShapeParallelogram = 12
esriModelDiagramNodeShapeStar = 13
esriModelDiagramNodeShapeCross = 14
esriModelDiagramNodeShape = c_int # enum
IMdDisplayNode._methods_ = [
    COMMETHOD(['propget', helpstring(u'The shape type of the display node object.')], HRESULT, 'Shape',
              ( ['retval', 'out'], POINTER(esriModelDiagramNodeShape), 'pShape' )),
    COMMETHOD(['propput', helpstring(u'The shape type of the display node object.')], HRESULT, 'Shape',
              ( ['in'], esriModelDiagramNodeShape, 'pShape' )),
    COMMETHOD(['propget', helpstring(u'The height of the display node object.')], HRESULT, 'Height',
              ( ['retval', 'out'], POINTER(c_int), 'pHeight' )),
    COMMETHOD(['propput', helpstring(u'The height of the display node object.')], HRESULT, 'Height',
              ( ['in'], c_int, 'pHeight' )),
    COMMETHOD(['propget', helpstring(u'The width of the display node object.')], HRESULT, 'Width',
              ( ['retval', 'out'], POINTER(c_int), 'pWidth' )),
    COMMETHOD(['propput', helpstring(u'The width of the display node object.')], HRESULT, 'Width',
              ( ['in'], c_int, 'pWidth' )),
    COMMETHOD(['propget', helpstring(u'The text font of the display node object.')], HRESULT, 'TextFont',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IFont)), 'ppFont' )),
    COMMETHOD(['propputref', helpstring(u'The text font of the display node object.')], HRESULT, 'TextFont',
              ( ['in'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IFont), 'ppFont' )),
    COMMETHOD(['propget', helpstring(u'The text color of the display node object.')], HRESULT, 'TextColor',
              ( ['retval', 'out'], POINTER(c_int), 'pColor' )),
    COMMETHOD(['propput', helpstring(u'The text color of the display node object.')], HRESULT, 'TextColor',
              ( ['in'], c_int, 'pColor' )),
    COMMETHOD(['propget', helpstring(u'The background color of the display node object.')], HRESULT, 'BackgroundColor',
              ( ['retval', 'out'], POINTER(c_int), 'pColor' )),
    COMMETHOD(['propput', helpstring(u'The background color of the display node object.')], HRESULT, 'BackgroundColor',
              ( ['in'], c_int, 'pColor' )),
    COMMETHOD(['propget', helpstring(u'The outline color of the display node object.')], HRESULT, 'OutlineColor',
              ( ['retval', 'out'], POINTER(c_int), 'pColor' )),
    COMMETHOD(['propput', helpstring(u'The outline color of the display node object.')], HRESULT, 'OutlineColor',
              ( ['in'], c_int, 'pColor' )),
    COMMETHOD(['propget', helpstring(u'The outline width of the display node object.')], HRESULT, 'OutlineWidth',
              ( ['retval', 'out'], POINTER(c_int), 'pWidth' )),
    COMMETHOD(['propput', helpstring(u'The outline width of the display node object.')], HRESULT, 'OutlineWidth',
              ( ['in'], c_int, 'pWidth' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether or not to display a shadow for the node.')], HRESULT, 'ShowShadow',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pShowShadow' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether or not to display a shadow for the node.')], HRESULT, 'ShowShadow',
              ( ['in'], VARIANT_BOOL, 'pShowShadow' )),
]
################################################################
## code template for IMdDisplayNode implementation
##class IMdDisplayNode_Impl(object):
##    def TextFont(self, ppFont):
##        u'The text font of the display node object.'
##        #return 
##
##    def _get(self):
##        u'The height of the display node object.'
##        #return pHeight
##    def _set(self, pHeight):
##        u'The height of the display node object.'
##    Height = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The width of the display node object.'
##        #return pWidth
##    def _set(self, pWidth):
##        u'The width of the display node object.'
##    Width = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The shape type of the display node object.'
##        #return pShape
##    def _set(self, pShape):
##        u'The shape type of the display node object.'
##    Shape = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether or not to display a shadow for the node.'
##        #return pShowShadow
##    def _set(self, pShowShadow):
##        u'Indicates whether or not to display a shadow for the node.'
##    ShowShadow = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The background color of the display node object.'
##        #return pColor
##    def _set(self, pColor):
##        u'The background color of the display node object.'
##    BackgroundColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The outline width of the display node object.'
##        #return pWidth
##    def _set(self, pWidth):
##        u'The outline width of the display node object.'
##    OutlineWidth = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The text color of the display node object.'
##        #return pColor
##    def _set(self, pColor):
##        u'The text color of the display node object.'
##    TextColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The outline color of the display node object.'
##        #return pColor
##    def _set(self, pColor):
##        u'The outline color of the display node object.'
##    OutlineColor = property(_get, _set, doc = _set.__doc__)
##

class IGPTinLayer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing tin layer object.'
    _iid_ = GUID('{E8561189-C2BB-4D89-AC21-89D482F3262E}')
    _idlflags_ = ['oleautomation']
IGPTinLayer._methods_ = [
]
################################################################
## code template for IGPTinLayer implementation
##class IGPTinLayer_Impl(object):

class IGPRasterFormulated(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to IGPRasterFormulated interface.'
    _iid_ = GUID('{B81BA228-6C79-4A69-BB30-BA35BCD9E710}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'esriRasterDistributionEnum'
esriRasterInvalidDistribution = 0
esriRasterIntegerConstant = 1
esriRasterFloatConstant = 2
esriRasterNormalDistribution = 3
esriRasterRandomDistribution = 4
esriRasterDistributionEnum = c_int # enum
IGPRasterFormulated._methods_ = [
    COMMETHOD([helpstring(u'Makes as an integer constant geodata.')], HRESULT, 'Create',
              ( ['in'], esriRasterDistributionEnum, 'Type' ),
              ( ['in', 'optional'], POINTER(VARIANT), 'Value' )),
    COMMETHOD(['propget', helpstring(u'Band count.')], HRESULT, 'BandCount',
              ( ['retval', 'out'], POINTER(c_int), 'BandCount' )),
    COMMETHOD(['propget', helpstring(u'Is integer type.')], HRESULT, 'Type',
              ( ['retval', 'out'], POINTER(esriRasterDistributionEnum), 'Type' )),
    COMMETHOD(['propget', helpstring(u'Indicates if integer or float type.')], HRESULT, 'IsInteger',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsInteger' )),
    COMMETHOD(['propget', helpstring(u'Value.')], HRESULT, 'Value',
              ( ['retval', 'out'], POINTER(VARIANT), 'Value' )),
    COMMETHOD([helpstring(u'Makes a DERasterDataset.')], HRESULT, 'MakeDERasterDataset',
              ( ['in'], BSTR, 'PathName' ),
              ( ['in'], c_double, 'CellSize' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'Extent' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDERasterDataset)), 'outRasterDataset' )),
]
################################################################
## code template for IGPRasterFormulated implementation
##class IGPRasterFormulated_Impl(object):
##    @property
##    def BandCount(self):
##        u'Band count.'
##        #return BandCount
##
##    def Create(self, Type, Value):
##        u'Makes as an integer constant geodata.'
##        #return 
##
##    @property
##    def Value(self):
##        u'Value.'
##        #return Value
##
##    def MakeDERasterDataset(self, PathName, CellSize, Extent):
##        u'Makes a DERasterDataset.'
##        #return outRasterDataset
##
##    @property
##    def Type(self):
##        u'Is integer type.'
##        #return Type
##
##    @property
##    def IsInteger(self):
##        u'Indicates if integer or float type.'
##        #return IsInteger
##

class MdVariable(CoClass):
    u'Model variable object that contains a value object.'
    _reg_clsid_ = GUID('{3A65F387-1E32-452E-9201-A3D104868D06}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IMdElement(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to properties/methods of a model element.'
    _iid_ = GUID('{BF5ADCDD-A477-4CD5-936A-62C939C6D46A}')
    _idlflags_ = ['oleautomation']
class IMdVariable(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to properties/methods of a model variable.'
    _iid_ = GUID('{18B03157-5EA4-46AE-B0B1-F7769C7DAB32}')
    _idlflags_ = ['oleautomation']
class IMdList(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to properties/methods of a model list.'
    _iid_ = GUID('{9C5185C9-DFDD-4452-9F64-5BA4803DBD6F}')
    _idlflags_ = ['oleautomation']
class IGPValueExpression(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to GPExpression objects.'
    _iid_ = GUID('{1AC0728D-8DA6-4592-BCF9-7C3027F51F38}')
    _idlflags_ = ['oleautomation']
MdVariable._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, IMdElement, IMdVariable, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPVariable, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, IMdList, IGPValueExpression]

class IGPParseString2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing parse string object.'
    _iid_ = GUID('{1A39705F-345B-4C6D-B5D5-AAD3F5B4B218}')
    _idlflags_ = ['oleautomation']
IGPParseString2._methods_ = [
    COMMETHOD([helpstring(u'Initializes the geoprocessing parse string object with the string to be parsed and the string used to separate tokens.')], HRESULT, 'Initialize',
              ( ['in'], BSTR, 'String' ),
              ( ['in'], BSTR, 'separator' )),
    COMMETHOD([helpstring(u'Returns the next token parsed from the string.')], HRESULT, 'NextToken',
              ( ['retval', 'out'], POINTER(BSTR), 'token' )),
    COMMETHOD([helpstring(u'Returns the next simple token parsed from the string.')], HRESULT, 'NextSimpleToken',
              ( ['retval', 'out'], POINTER(BSTR), 'token' )),
    COMMETHOD([helpstring(u'Returns whether the next token to be parsed is enclosed in quotation marks.')], HRESULT, 'IsNextTokenQuoted',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'quoted' )),
    COMMETHOD([helpstring(u'Builds a string, one character at a time, returning whether that character is quoted and whether that character is the end of delimited token.')], HRESULT, 'CheckToken',
              ( ['in'], BSTR, 'inChar' ),
              ( ['out'], POINTER(VARIANT_BOOL), 'pInQuote' ),
              ( ['out'], POINTER(VARIANT_BOOL), 'pTokenDone' ),
              ( ['retval', 'out'], POINTER(BSTR), 'pToken' )),
    COMMETHOD([helpstring(u'Returns the remaining string.')], HRESULT, 'RemainingText',
              ( ['retval', 'out'], POINTER(BSTR), 'text' )),
    COMMETHOD([helpstring(u'Returns the next token parsed from the string as a double.')], HRESULT, 'NextDouble',
              ( ['retval', 'out'], POINTER(c_double), 'token' )),
    COMMETHOD([helpstring(u'Returns the next token parsed from the string as a long.')], HRESULT, 'NextLong',
              ( ['retval', 'out'], POINTER(c_int), 'token' )),
    COMMETHOD([helpstring(u'Returns the next token parsed from the string as a boolean.')], HRESULT, 'NextBoolean',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'token' )),
    COMMETHOD([helpstring(u'Returns if the string needs to be quoted.')], HRESULT, 'NeedsQuote',
              ( ['in'], BSTR, 'text' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'token' )),
    COMMETHOD([helpstring(u'Quotes the string if it needs to be quoted.')], HRESULT, 'QuoteString',
              ( ['in'], BSTR, 'text' ),
              ( ['retval', 'out'], POINTER(BSTR), 'token' )),
    COMMETHOD([helpstring(u'Returns the string as a doulbe value.')], HRESULT, 'StringToDouble',
              ( ['in'], BSTR, 'text' ),
              ( ['retval', 'out'], POINTER(c_double), 'token' )),
    COMMETHOD([helpstring(u'Returns the double value as string.')], HRESULT, 'DoubleToString',
              ( ['in'], c_double, 'Value' ),
              ( ['retval', 'out'], POINTER(BSTR), 'token' )),
]
################################################################
## code template for IGPParseString2 implementation
##class IGPParseString2_Impl(object):
##    def DoubleToString(self, Value):
##        u'Returns the double value as string.'
##        #return token
##
##    def CheckToken(self, inChar):
##        u'Builds a string, one character at a time, returning whether that character is quoted and whether that character is the end of delimited token.'
##        #return pInQuote, pTokenDone, pToken
##
##    def NeedsQuote(self, text):
##        u'Returns if the string needs to be quoted.'
##        #return token
##
##    def StringToDouble(self, text):
##        u'Returns the string as a doulbe value.'
##        #return token
##
##    def NextLong(self):
##        u'Returns the next token parsed from the string as a long.'
##        #return token
##
##    def NextSimpleToken(self):
##        u'Returns the next simple token parsed from the string.'
##        #return token
##
##    def NextBoolean(self):
##        u'Returns the next token parsed from the string as a boolean.'
##        #return token
##
##    def RemainingText(self):
##        u'Returns the remaining string.'
##        #return text
##
##    def IsNextTokenQuoted(self):
##        u'Returns whether the next token to be parsed is enclosed in quotation marks.'
##        #return quoted
##
##    def Initialize(self, String, separator):
##        u'Initializes the geoprocessing parse string object with the string to be parsed and the string used to separate tokens.'
##        #return 
##
##    def NextToken(self):
##        u'Returns the next token parsed from the string.'
##        #return token
##
##    def QuoteString(self, text):
##        u'Quotes the string if it needs to be quoted.'
##        #return token
##
##    def NextDouble(self):
##        u'Returns the next token parsed from the string as a double.'
##        #return token
##

class IGPDefaultNameList(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods to manage a list of output dataset names.'
    _iid_ = GUID('{6D214B1D-D469-4EE1-8837-6427C2FFEB14}')
    _idlflags_ = ['oleautomation']
IGPDefaultNameList._methods_ = [
    COMMETHOD([helpstring(u'Removes all names from the list.')], HRESULT, 'RemoveAllOutputNames'),
    COMMETHOD([helpstring(u'Adds the given name to the list.')], HRESULT, 'AddOutputName',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD([helpstring(u'Removes the specified name from the list.')], HRESULT, 'RemoveOutputName',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD([helpstring(u'Returns whether or not the given name exists within the list.')], HRESULT, 'CheckOutputName',
              ( ['in'], BSTR, 'Name' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Exists' )),
]
################################################################
## code template for IGPDefaultNameList implementation
##class IGPDefaultNameList_Impl(object):
##    def RemoveAllOutputNames(self):
##        u'Removes all names from the list.'
##        #return 
##
##    def RemoveOutputName(self, Name):
##        u'Removes the specified name from the list.'
##        #return 
##
##    def AddOutputName(self, Name):
##        u'Adds the given name to the list.'
##        #return 
##
##    def CheckOutputName(self, Name):
##        u'Returns whether or not the given name exists within the list.'
##        #return Exists
##

class IGPFieldInfo2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing field info object.'
    _iid_ = GUID('{8C5EA59E-B50B-4898-8624-5EB777DBEC66}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'esriGPFieldMapMergeRule'
esriGPFieldMapMergeRuleNone = 0
esriGPFieldMapMergeRuleMinimum = 1
esriGPFieldMapMergeRuleMaximum = 2
esriGPFieldMapMergeRuleStandardDeviation = 3
esriGPFieldMapMergeRuleMean = 4
esriGPFieldMapMergeRuleMedian = 5
esriGPFieldMapMergeRuleSum = 6
esriGPFieldMapMergeRuleJoin = 7
esriGPFieldMapMergeRuleFirst = 8
esriGPFieldMapMergeRuleLast = 9
esriGPFieldMapMergeRuleMode = 10
esriGPFieldMapMergeRuleCount = 11
esriGPFieldMapMergeRuleRange = 12
esriGPFieldMapMergeRule = c_int # enum
IGPFieldInfo2._methods_ = [
    COMMETHOD([helpstring(u'Returns the merge rule of the specified field in the field info object.')], HRESULT, 'GetMergeRule',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(esriGPFieldMapMergeRule), 'Merge' )),
    COMMETHOD([helpstring(u'Sets the merge rule of the specified field in the field info object.')], HRESULT, 'SetMergeRule',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], esriGPFieldMapMergeRule, 'Merge' )),
    COMMETHOD([helpstring(u'Returns the join delimiter of the specified field in the field info object.')], HRESULT, 'GetJoinDelimiter',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Delimiter' )),
    COMMETHOD([helpstring(u'Sets the join delimiter of the specified field in the field info object.')], HRESULT, 'SetJoinDelimiter',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Delimiter' )),
    COMMETHOD([helpstring(u'Returns the start and end text positions.')], HRESULT, 'GetTextPos',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(c_int), 'Start' ),
              ( ['out'], POINTER(c_int), 'end' )),
    COMMETHOD([helpstring(u'Sets the start and end text positions.')], HRESULT, 'SetTextPos',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'Start' ),
              ( ['in'], c_int, 'end' )),
]
################################################################
## code template for IGPFieldInfo2 implementation
##class IGPFieldInfo2_Impl(object):
##    def SetTextPos(self, Index, Start, end):
##        u'Sets the start and end text positions.'
##        #return 
##
##    def SetJoinDelimiter(self, Index, Delimiter):
##        u'Sets the join delimiter of the specified field in the field info object.'
##        #return 
##
##    def GetTextPos(self, Index):
##        u'Returns the start and end text positions.'
##        #return Start, end
##
##    def GetMergeRule(self, Index):
##        u'Returns the merge rule of the specified field in the field info object.'
##        #return Merge
##
##    def GetJoinDelimiter(self, Index):
##        u'Returns the join delimiter of the specified field in the field info object.'
##        #return Delimiter
##
##    def SetMergeRule(self, Index, Merge):
##        u'Sets the merge rule of the specified field in the field info object.'
##        #return 
##

class IGPMeasureFieldsDomain(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the measure field domain.'
    _iid_ = GUID('{534ECD71-9C7E-4982-A9C7-0808EB1F7895}')
    _idlflags_ = ['oleautomation']
IGPMeasureFieldsDomain._methods_ = [
]
################################################################
## code template for IGPMeasureFieldsDomain implementation
##class IGPMeasureFieldsDomain_Impl(object):

class ToolboxWorkspaceExtension(CoClass):
    u'Workspace extension to support toolboxes in a geodatabase.'
    _reg_clsid_ = GUID('{4F3ACFF5-E59F-404E-99DB-5DB5D24115F4}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IToolboxWorkspaceExtension(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to methods on a toolbox workspace extension object.'
    _iid_ = GUID('{7ADA6145-66DB-4CC1-BFB0-05DE16751421}')
    _idlflags_ = ['oleautomation']
ToolboxWorkspaceExtension._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspaceExtension, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspaceExtensionControl, IToolboxWorkspaceExtension]

class IGPTinLayerType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing tin layer data type object.'
    _iid_ = GUID('{EDED1A5A-B4B3-4383-8D4A-0C309183292E}')
    _idlflags_ = ['oleautomation']
IGPTinLayerType._methods_ = [
]
################################################################
## code template for IGPTinLayerType implementation
##class IGPTinLayerType_Impl(object):

class IToolboxWorkspaceFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to methods on the toolbox workspace factory object.'
    _iid_ = GUID('{96C1F8EC-CFD4-48F7-8B42-B2B10151BF09}')
    _idlflags_ = ['oleautomation']
IToolboxWorkspaceFactory._methods_ = [
]
################################################################
## code template for IToolboxWorkspaceFactory implementation
##class IToolboxWorkspaceFactory_Impl(object):

class IGPPoint(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing point object.'
    _iid_ = GUID('{A3CD267B-86A1-4ED6-A8DD-5AE09B84F00E}')
    _idlflags_ = ['oleautomation']
IGPPoint._methods_ = [
    COMMETHOD(['propget', helpstring(u'The X coordinate of the point.')], HRESULT, 'X',
              ( ['retval', 'out'], POINTER(c_double), 'X' )),
    COMMETHOD(['propput', helpstring(u'The X coordinate of the point.')], HRESULT, 'X',
              ( ['in'], c_double, 'X' )),
    COMMETHOD(['propget', helpstring(u'The Y coordinate of the point.')], HRESULT, 'Y',
              ( ['retval', 'out'], POINTER(c_double), 'Y' )),
    COMMETHOD(['propput', helpstring(u'The Y coordinate of the point.')], HRESULT, 'Y',
              ( ['in'], c_double, 'Y' )),
    COMMETHOD([helpstring(u'Sets the x/y coordinates of the point.')], HRESULT, 'SetCoords',
              ( ['in'], c_double, 'X' ),
              ( ['in'], c_double, 'Y' )),
]
################################################################
## code template for IGPPoint implementation
##class IGPPoint_Impl(object):
##    def _get(self):
##        u'The Y coordinate of the point.'
##        #return Y
##    def _set(self, Y):
##        u'The Y coordinate of the point.'
##    Y = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The X coordinate of the point.'
##        #return X
##    def _set(self, X):
##        u'The X coordinate of the point.'
##    X = property(_get, _set, doc = _set.__doc__)
##
##    def SetCoords(self, X, Y):
##        u'Sets the x/y coordinates of the point.'
##        #return 
##

class GPCellSizeXY(CoClass):
    u'Geoprocessing value object containing a point geometry.'
    _reg_clsid_ = GUID('{4EB9896A-27B8-4CC2-A0C2-55E40D2E928C}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPCellSizeXY._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue, IGPCellSizeXY, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

class DEToolType(CoClass):
    u'The tool Data Type.'
    _reg_clsid_ = GUID('{34663EB0-0796-47BB-8845-B56523385A7B}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IDEToolType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to properties/methods of a tool data type object.'
    _iid_ = GUID('{5A2C998E-7C4B-43A6-BA0A-855BA0DE660D}')
    _idlflags_ = ['oleautomation']
DEToolType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDEToolType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDEDatasetType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataElementType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class GPTablesDomain(CoClass):
    u'The GpTables domain object.'
    _reg_clsid_ = GUID('{5BDA0002-2574-492E-A397-8255FDFF2D58}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPTablesDomain(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Tables domain.'
    _iid_ = GUID('{15844BBD-AEC1-4315-9BA9-9A95A3644AF9}')
    _idlflags_ = ['oleautomation']
class IGPTablesDomain2(IGPTablesDomain):
    _case_insensitive_ = True
    u'Provides access to the Tables domain.'
    _iid_ = GUID('{79F5EA17-26D0-44BE-9A8B-F3DDA0A32EF1}')
    _idlflags_ = ['oleautomation']
GPTablesDomain._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPTablesDomain, IGPTablesDomain2, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGxFilterInfo, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDomain, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

class IGPTerrainLayerType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing terrain layer data type object.'
    _iid_ = GUID('{48DC9EDE-3B38-4098-B80E-A87228600BD0}')
    _idlflags_ = ['oleautomation']
IGPTerrainLayerType._methods_ = [
]
################################################################
## code template for IGPTerrainLayerType implementation
##class IGPTerrainLayerType_Impl(object):

class IGPEnvelope(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing envelope object.'
    _iid_ = GUID('{3A1F9B59-74E8-41C2-BAE6-58CFB635F061}')
    _idlflags_ = ['oleautomation']
IGPEnvelope._methods_ = [
    COMMETHOD(['propget', helpstring(u'The minimum X value of the geoprocessing envelope.')], HRESULT, 'XMin',
              ( ['retval', 'out'], POINTER(c_double), 'XMin' )),
    COMMETHOD(['propput', helpstring(u'The minimum X value of the geoprocessing envelope.')], HRESULT, 'XMin',
              ( ['in'], c_double, 'XMin' )),
    COMMETHOD(['propget', helpstring(u'The minimum Y value of the geoprocessing envelope.')], HRESULT, 'YMin',
              ( ['retval', 'out'], POINTER(c_double), 'YMin' )),
    COMMETHOD(['propput', helpstring(u'The minimum Y value of the geoprocessing envelope.')], HRESULT, 'YMin',
              ( ['in'], c_double, 'YMin' )),
    COMMETHOD(['propget', helpstring(u'The maximum X value of the geoprocessing envelope.')], HRESULT, 'XMax',
              ( ['retval', 'out'], POINTER(c_double), 'XMax' )),
    COMMETHOD(['propput', helpstring(u'The maximum X value of the geoprocessing envelope.')], HRESULT, 'XMax',
              ( ['in'], c_double, 'XMax' )),
    COMMETHOD(['propget', helpstring(u'The maximum Y value of the geoprocessing envelope.')], HRESULT, 'YMax',
              ( ['retval', 'out'], POINTER(c_double), 'YMax' )),
    COMMETHOD(['propput', helpstring(u'The maximum Y value of the geoprocessing envelope.')], HRESULT, 'YMax',
              ( ['in'], c_double, 'YMax' )),
    COMMETHOD(['propget', helpstring(u'The extent of the geoprocessing envelope.')], HRESULT, 'Extent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'ppExtent' )),
    COMMETHOD(['propputref', helpstring(u'The extent of the geoprocessing envelope.')], HRESULT, 'Extent',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'ppExtent' )),
    COMMETHOD([helpstring(u'Sets the extent of the geoprocessing envelope given the x/y minimum/maximum values.')], HRESULT, 'SetCoords',
              ( ['in'], c_double, 'XMin' ),
              ( ['in'], c_double, 'YMin' ),
              ( ['in'], c_double, 'XMax' ),
              ( ['in'], c_double, 'YMax' )),
]
################################################################
## code template for IGPEnvelope implementation
##class IGPEnvelope_Impl(object):
##    def SetCoords(self, XMin, YMin, XMax, YMax):
##        u'Sets the extent of the geoprocessing envelope given the x/y minimum/maximum values.'
##        #return 
##
##    def _get(self):
##        u'The maximum Y value of the geoprocessing envelope.'
##        #return YMax
##    def _set(self, YMax):
##        u'The maximum Y value of the geoprocessing envelope.'
##    YMax = property(_get, _set, doc = _set.__doc__)
##
##    def Extent(self, ppExtent):
##        u'The extent of the geoprocessing envelope.'
##        #return 
##
##    def _get(self):
##        u'The maximum X value of the geoprocessing envelope.'
##        #return XMax
##    def _set(self, XMax):
##        u'The maximum X value of the geoprocessing envelope.'
##    XMax = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The minimum X value of the geoprocessing envelope.'
##        #return XMin
##    def _set(self, XMin):
##        u'The minimum X value of the geoprocessing envelope.'
##    XMin = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The minimum Y value of the geoprocessing envelope.'
##        #return YMin
##    def _set(self, YMin):
##        u'The minimum Y value of the geoprocessing envelope.'
##    YMin = property(_get, _set, doc = _set.__doc__)
##

class IGeoProcessorEvents3(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to GeoProcessor events3.'
    _iid_ = GUID('{B7D4EF49-8FDD-4A67-88CD-B497E42D5969}')
    _idlflags_ = ['oleautomation']
class IGeoProcessorResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'The Geoprocessor Result. Provides access to the results of tools.'
    _iid_ = GUID('{E6F5ED50-72BB-42AE-B62F-B749185E2792}')
    _idlflags_ = ['oleautomation']
IGeoProcessorEvents3._methods_ = [
    COMMETHOD([helpstring(u'Called when a message has been posted while executing a tool.')], HRESULT, 'OnProgressMessage',
              ( ['in'], POINTER(IGeoProcessorResult), 'result' ),
              ( ['in'], BSTR, 'message' )),
    COMMETHOD([helpstring(u'Called when a message has been posted while executing a tool.')], HRESULT, 'OnProgressShow',
              ( ['in'], POINTER(IGeoProcessorResult), 'result' ),
              ( ['in'], VARIANT_BOOL, 'Show' )),
    COMMETHOD([helpstring(u'Called when a message has been posted while executing a tool.')], HRESULT, 'OnProgressPercentage',
              ( ['in'], POINTER(IGeoProcessorResult), 'result' ),
              ( ['in'], c_double, 'percentage' )),
    COMMETHOD([helpstring(u'Called when a message has been posted while executing a tool.')], HRESULT, 'OnProcessMessages',
              ( ['in'], POINTER(IGeoProcessorResult), 'result' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPMessages), 'pMsgs' )),
    COMMETHOD([helpstring(u'Called immediately prior to the GeoProcessor executing a tool.')], HRESULT, 'PreToolExecute',
              ( ['in'], POINTER(IGeoProcessorResult), 'result' )),
    COMMETHOD([helpstring(u'Called immediately after a tool is executed by the GeoProcessor.')], HRESULT, 'PostToolExecute',
              ( ['in'], POINTER(IGeoProcessorResult), 'result' )),
]
################################################################
## code template for IGeoProcessorEvents3 implementation
##class IGeoProcessorEvents3_Impl(object):
##    def OnProgressMessage(self, result, message):
##        u'Called when a message has been posted while executing a tool.'
##        #return 
##
##    def PreToolExecute(self, result):
##        u'Called immediately prior to the GeoProcessor executing a tool.'
##        #return 
##
##    def OnProgressPercentage(self, result, percentage):
##        u'Called when a message has been posted while executing a tool.'
##        #return 
##
##    def PostToolExecute(self, result):
##        u'Called immediately after a tool is executed by the GeoProcessor.'
##        #return 
##
##    def OnProgressShow(self, result, Show):
##        u'Called when a message has been posted while executing a tool.'
##        #return 
##
##    def OnProcessMessages(self, result, pMsgs):
##        u'Called when a message has been posted while executing a tool.'
##        #return 
##

class IGeoProcessorSettings(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of the GeoProcessor settings.'
    _iid_ = GUID('{E6A5B1C0-C8BE-4F8A-93F7-EA90324B5B33}')
    _idlflags_ = ['oleautomation']
IGeoProcessorSettings._methods_ = [
    COMMETHOD(['propput', helpstring(u'Indicates whether resulting output datasets should be added to the application display.')], HRESULT, 'AddOutputsToMap',
              ( ['in'], VARIANT_BOOL, 'AddToMap' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether resulting output datasets should be added to the application display.')], HRESULT, 'AddOutputsToMap',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'AddToMap' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether output datasets should be overwritten when executing geoprocessing tools.')], HRESULT, 'OverwriteOutput',
              ( ['in'], VARIANT_BOOL, 'OverwriteOutput' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether output datasets should be overwritten when executing geoprocessing tools.')], HRESULT, 'OverwriteOutput',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'OverwriteOutput' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether new map layers are temporary by default.')], HRESULT, 'TemporaryMapLayers',
              ( ['in'], VARIANT_BOOL, 'TemporaryMapLayers' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether new map layers are temporary by default.')], HRESULT, 'TemporaryMapLayers',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'TemporaryMapLayers' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to prompt the user when connecting elements in ModelBuilder if there is more than one possible connection.')], HRESULT, 'ShowModelBuilderPrompts',
              ( ['in'], VARIANT_BOOL, 'showPrompts' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to prompt the user when connecting elements in ModelBuilder if there is more than one possible connection.')], HRESULT, 'ShowModelBuilderPrompts',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'showPrompts' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether or not to log the execution of geoprocessing tools.')], HRESULT, 'LogHistory',
              ( ['in'], VARIANT_BOOL, 'LogHistory' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether or not to log the execution of geoprocessing tools.')], HRESULT, 'LogHistory',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'LogHistory' )),
]
################################################################
## code template for IGeoProcessorSettings implementation
##class IGeoProcessorSettings_Impl(object):
##    def _get(self):
##        u'Indicates whether new map layers are temporary by default.'
##        #return TemporaryMapLayers
##    def _set(self, TemporaryMapLayers):
##        u'Indicates whether new map layers are temporary by default.'
##    TemporaryMapLayers = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether resulting output datasets should be added to the application display.'
##        #return AddToMap
##    def _set(self, AddToMap):
##        u'Indicates whether resulting output datasets should be added to the application display.'
##    AddOutputsToMap = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether or not to log the execution of geoprocessing tools.'
##        #return LogHistory
##    def _set(self, LogHistory):
##        u'Indicates whether or not to log the execution of geoprocessing tools.'
##    LogHistory = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether to prompt the user when connecting elements in ModelBuilder if there is more than one possible connection.'
##        #return showPrompts
##    def _set(self, showPrompts):
##        u'Indicates whether to prompt the user when connecting elements in ModelBuilder if there is more than one possible connection.'
##    ShowModelBuilderPrompts = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether output datasets should be overwritten when executing geoprocessing tools.'
##        #return OverwriteOutput
##    def _set(self, OverwriteOutput):
##        u'Indicates whether output datasets should be overwritten when executing geoprocessing tools.'
##    OverwriteOutput = property(_get, _set, doc = _set.__doc__)
##

class IGPCoordinateSystem(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing coordinate system object.'
    _iid_ = GUID('{3DF8CE99-D13B-4EF0-84EB-CD21CCC45C66}')
    _idlflags_ = ['oleautomation']
IGPCoordinateSystem._methods_ = [
    COMMETHOD(['propget', helpstring(u'The spatial reference of the geoprocessing spatial reference object.')], HRESULT, 'SpatialReference',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference)), 'ppSpatialReference' )),
    COMMETHOD(['propputref', helpstring(u'The spatial reference of the geoprocessing spatial reference object.')], HRESULT, 'SpatialReference',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'ppSpatialReference' )),
]
################################################################
## code template for IGPCoordinateSystem implementation
##class IGPCoordinateSystem_Impl(object):
##    def SpatialReference(self, ppSpatialReference):
##        u'The spatial reference of the geoprocessing spatial reference object.'
##        #return 
##

class IGPLasDatasetLayerType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing LAS dataset layer data type object.'
    _iid_ = GUID('{58D33DBE-8BA4-4D52-8E21-79B454E9A7C1}')
    _idlflags_ = ['oleautomation']
IGPLasDatasetLayerType._methods_ = [
]
################################################################
## code template for IGPLasDatasetLayerType implementation
##class IGPLasDatasetLayerType_Impl(object):

class IGPLasDatasetLayer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing LAS dataset layer object.'
    _iid_ = GUID('{3059B1CD-F5C9-469C-B263-8007669CCDC9}')
    _idlflags_ = ['oleautomation']
IGPLasDatasetLayer._methods_ = [
]
################################################################
## code template for IGPLasDatasetLayer implementation
##class IGPLasDatasetLayer_Impl(object):

class GPToolboxEventsHelper(CoClass):
    u'Helper for working with IGPToolboxEvents.'
    _reg_clsid_ = GUID('{7C4F1B9E-D847-482E-B257-4634CD53D780}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPToolboxEvents(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to toolbox events.'
    _iid_ = GUID('{8EC7E8D8-749A-4E24-B539-0371D8266EE0}')
    _idlflags_ = ['oleautomation']
GPToolboxEventsHelper._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown]
GPToolboxEventsHelper._outgoing_interfaces_ = [IGPToolboxEvents]

class GPFeatureSolutions(CoClass):
    u'Helper object with common geoprocessing feature solutions methods.'
    _reg_clsid_ = GUID('{3EDDE13C-A03A-4D7A-9A10-D90EB42DB625}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPFeatureSolutions(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing feature solutions object.'
    _iid_ = GUID('{AE073A51-0B5B-4BB0-9512-28E63D416D79}')
    _idlflags_ = ['oleautomation']
GPFeatureSolutions._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPFeatureSolutions]

class GPFeatureLayer(CoClass):
    u'Geoprocessing value object containing a feature layer value.'
    _reg_clsid_ = GUID('{0E3D6DF3-8D43-4A0E-8290-8AB86297AB17}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPFeatureLayer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing feature layer object.'
    _iid_ = GUID('{067B4F1A-9064-4C95-AAEA-61598683C1DF}')
    _idlflags_ = ['oleautomation']
class IGPTableView(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing table view object.'
    _iid_ = GUID('{54B87A95-1BD1-42B6-ADDF-6DAB68BA8F56}')
    _idlflags_ = ['oleautomation']
GPFeatureLayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPFeatureLayer, comtypes.gen._1CE6AC65_43F5_4529_8FC0_D7ED298E4F1A_0_10_2.IGPLayer, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDEGeoDataset, IGPTableView, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDescribe, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

class IGPCadastralFabricLayerType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing cadastral fabric layer data type object.'
    _iid_ = GUID('{4E275E65-332D-4136-8DCA-4232B3669D0A}')
    _idlflags_ = ['oleautomation']
IGPCadastralFabricLayerType._methods_ = [
]
################################################################
## code template for IGPCadastralFabricLayerType implementation
##class IGPCadastralFabricLayerType_Impl(object):

class IGPRasterGDBEnvPyramid(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to raster GDB environment pyramid control.'
    _iid_ = GUID('{E85AC7E8-39FF-4EEC-AD54-EDBEE850F2CA}')
    _idlflags_ = ['oleautomation']
class IGPRasterGDBEnvPyramid2(IGPRasterGDBEnvPyramid):
    _case_insensitive_ = True
    u'Provides access to raster GDB environment pyramid control.'
    _iid_ = GUID('{6AFA775E-F7DB-4B9E-A0A2-DC362A61F521}')
    _idlflags_ = ['oleautomation']
class IGPRasterGDBEnvPyramid3(IGPRasterGDBEnvPyramid2):
    _case_insensitive_ = True
    u'Provides access to raster GDB environment pyramid control.'
    _iid_ = GUID('{FE2EA27F-AEE7-45A2-83D8-90FC84A279A8}')
    _idlflags_ = ['oleautomation']
IGPRasterGDBEnvPyramid._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if creating pyramid option.')], HRESULT, 'CreatePyramids',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'bCreate' )),
    COMMETHOD(['propput', helpstring(u'Indicates if creating pyramid option.')], HRESULT, 'CreatePyramids',
              ( ['in'], VARIANT_BOOL, 'bCreate' )),
    COMMETHOD(['propget', helpstring(u'Pyramid levels.')], HRESULT, 'PyramidLevels',
              ( ['retval', 'out'], POINTER(c_int), 'levels' )),
    COMMETHOD(['propput', helpstring(u'Pyramid levels.')], HRESULT, 'PyramidLevels',
              ( ['in'], c_int, 'levels' )),
    COMMETHOD(['propget', helpstring(u'Resampling technique.')], HRESULT, 'ResampleMethod',
              ( ['retval', 'out'], POINTER(comtypes.gen._5C54042B_B2ED_4889_8C40_2D89C19DB41D_0_10_2.esriGeoAnalysisResampleEnum), 'Method' )),
    COMMETHOD(['propput', helpstring(u'Resampling technique.')], HRESULT, 'ResampleMethod',
              ( ['in'], comtypes.gen._5C54042B_B2ED_4889_8C40_2D89C19DB41D_0_10_2.esriGeoAnalysisResampleEnum, 'Method' )),
]
################################################################
## code template for IGPRasterGDBEnvPyramid implementation
##class IGPRasterGDBEnvPyramid_Impl(object):
##    def _get(self):
##        u'Resampling technique.'
##        #return Method
##    def _set(self, Method):
##        u'Resampling technique.'
##    ResampleMethod = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Pyramid levels.'
##        #return levels
##    def _set(self, levels):
##        u'Pyramid levels.'
##    PyramidLevels = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if creating pyramid option.'
##        #return bCreate
##    def _set(self, bCreate):
##        u'Indicates if creating pyramid option.'
##    CreatePyramids = property(_get, _set, doc = _set.__doc__)
##

IGPRasterGDBEnvPyramid2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Pyramid compression type.')], HRESULT, 'PyramidCompressionType',
              ( ['retval', 'out'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriRasterCompressionType), 'compType' )),
    COMMETHOD(['propput', helpstring(u'Pyramid compression type.')], HRESULT, 'PyramidCompressionType',
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriRasterCompressionType, 'compType' )),
    COMMETHOD(['propget', helpstring(u'Compression quality.')], HRESULT, 'PyramidCompressionQuality',
              ( ['retval', 'out'], POINTER(c_int), 'Value' )),
    COMMETHOD(['propput', helpstring(u'Compression quality.')], HRESULT, 'PyramidCompressionQuality',
              ( ['in'], c_int, 'Value' )),
]
################################################################
## code template for IGPRasterGDBEnvPyramid2 implementation
##class IGPRasterGDBEnvPyramid2_Impl(object):
##    def _get(self):
##        u'Compression quality.'
##        #return Value
##    def _set(self, Value):
##        u'Compression quality.'
##    PyramidCompressionQuality = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Pyramid compression type.'
##        #return compType
##    def _set(self, compType):
##        u'Pyramid compression type.'
##    PyramidCompressionType = property(_get, _set, doc = _set.__doc__)
##

IGPRasterGDBEnvPyramid3._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if skipping first pyramid.')], HRESULT, 'PyramidSkipFirst',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'bSkip' )),
    COMMETHOD(['propput', helpstring(u'Indicates if skipping first pyramid.')], HRESULT, 'PyramidSkipFirst',
              ( ['in'], VARIANT_BOOL, 'bSkip' )),
]
################################################################
## code template for IGPRasterGDBEnvPyramid3 implementation
##class IGPRasterGDBEnvPyramid3_Impl(object):
##    def _get(self):
##        u'Indicates if skipping first pyramid.'
##        #return bSkip
##    def _set(self, bSkip):
##        u'Indicates if skipping first pyramid.'
##    PyramidSkipFirst = property(_get, _set, doc = _set.__doc__)
##

class IGPCadastralFabricLayer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing cadastral fabric layer object.'
    _iid_ = GUID('{0EF3EEA5-E903-4415-B6A8-5C1361BF21AF}')
    _idlflags_ = ['oleautomation']
IGPCadastralFabricLayer._methods_ = [
]
################################################################
## code template for IGPCadastralFabricLayer implementation
##class IGPCadastralFabricLayer_Impl(object):

class IGeoProcessorSettings2(IGeoProcessorSettings):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of the GeoProcessor settings.'
    _iid_ = GUID('{3AAFD5AD-F717-4DAC-84CD-05C822328FA2}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'esriGPTimeIntervalType'
esriGPTimeIntervalUnlimited = 0
esriGPTimeIntervalNone = 1
esriGPTimeInterval1Day = 2
esriGPTimeInterval2Days = 3
esriGPTimeInterval3Days = 4
esriGPTimeInterval4Days = 5
esriGPTimeInterval5Days = 6
esriGPTimeInterval1Week = 7
esriGPTimeInterval2Weeks = 8
esriGPTimeInterval3Weeks = 9
esriGPTimeInterval1Month = 10
esriGPTimeInterval2Months = 11
esriGPTimeInterval3Months = 12
esriGPTimeIntervalType = c_int # enum
IGeoProcessorSettings2._methods_ = [
    COMMETHOD(['propput', helpstring(u'This property determine how long to hold on results.')], HRESULT, 'HowLongToKeepResults',
              ( ['in'], esriGPTimeIntervalType, 'timeInterval' )),
    COMMETHOD(['propget', helpstring(u'This property determine how long to hold on results.')], HRESULT, 'HowLongToKeepResults',
              ( ['retval', 'out'], POINTER(esriGPTimeIntervalType), 'timeInterval' )),
]
################################################################
## code template for IGeoProcessorSettings2 implementation
##class IGeoProcessorSettings2_Impl(object):
##    def _get(self):
##        u'This property determine how long to hold on results.'
##        #return timeInterval
##    def _set(self, timeInterval):
##        u'This property determine how long to hold on results.'
##    HowLongToKeepResults = property(_get, _set, doc = _set.__doc__)
##

class IGPCoordinateSystemType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing coordinate system data type object.'
    _iid_ = GUID('{5D426ABE-7358-4066-ADE0-532A80FE833B}')
    _idlflags_ = ['oleautomation']
IGPCoordinateSystemType._methods_ = [
]
################################################################
## code template for IGPCoordinateSystemType implementation
##class IGPCoordinateSystemType_Impl(object):

class IEnumGPToolName(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to methods on a geoprocessing tool name enumeration object.'
    _iid_ = GUID('{25F73C0A-10CD-4EBF-A922-07215E81C864}')
    _idlflags_ = ['oleautomation']
class IEnumGPTool(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to methods on a geoprocessing tool enumeration object.'
    _iid_ = GUID('{A1E6E476-4820-4D92-8DEA-7AF3EAD9A559}')
    _idlflags_ = ['oleautomation']
class IGPTool(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to methods on a geoprocessing tool object.'
    _iid_ = GUID('{252C58FD-4042-4628-A9D0-DE54C158BA55}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'esriGPToolType'
esriGPFunctionTool = 1
esriGPModelTool = 2
esriGPScriptTool = 3
esriGPCustomTool = 4
esriGPServerTool = 5
esriGPPythonScriptTool = 6
esriGPTaskTool = 7
esriGPToolType = c_int # enum
class IGPToolExtension(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to methods on a custom geoprocessing tool extension.'
    _iid_ = GUID('{AD1CB977-D8B6-4D54-8C85-86D6E533649B}')
    _idlflags_ = ['oleautomation']
IGPToolbox._methods_ = [
    COMMETHOD(['propget', helpstring(u'The path name to the toolbox.')], HRESULT, 'PathName',
              ( ['retval', 'out'], POINTER(BSTR), 'Path' )),
    COMMETHOD(['propget', helpstring(u'The alias of the toolbox, used when referencing a tool: name_alias.')], HRESULT, 'Alias',
              ( ['retval', 'out'], POINTER(BSTR), 'Alias' )),
    COMMETHOD(['propget', helpstring(u'An enumeration of all the geoprocessing tool name objects contained within the toolbox.')], HRESULT, 'ToolNames',
              ( ['retval', 'out'], POINTER(POINTER(IEnumGPToolName)), 'names' )),
    COMMETHOD(['propget', helpstring(u'An enumeration of all the geoprocessing tools contained within the toolbox.')], HRESULT, 'Tools',
              ( ['retval', 'out'], POINTER(POINTER(IEnumGPTool)), 'Tools' )),
    COMMETHOD([helpstring(u'Returns a specific tool (by name) within the toolbox.')], HRESULT, 'OpenTool',
              ( ['in'], BSTR, 'Name' ),
              ( ['retval', 'out'], POINTER(POINTER(IGPTool)), 'Tool' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the toolbox has been deleted.')], HRESULT, 'IsDeleted',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'deleted' )),
    COMMETHOD([helpstring(u'Returns whether or not a new tool can be created in the toolbox.')], HRESULT, 'CanCreateTool',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'CanCreateTool' )),
    COMMETHOD([helpstring(u'Creates a new tool in the toolbox.')], HRESULT, 'CreateTool',
              ( ['in'], esriGPToolType, 'Type' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'DisplayName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['in'], BSTR, 'ToolCategory' ),
              ( ['in'], POINTER(IGPToolExtension), 'ToolExtension' ),
              ( ['retval', 'out'], POINTER(POINTER(IGPTool)), 'Tool' )),
    COMMETHOD([helpstring(u'Changes the alias of the toolbox.')], HRESULT, 'AlterAlias',
              ( ['in'], BSTR, 'newAlias' )),
    COMMETHOD(['propget', helpstring(u'The name of the (CHM) file containing help information for this toolbox.')], HRESULT, 'HelpFile',
              ( ['retval', 'out'], POINTER(BSTR), 'File' )),
    COMMETHOD(['propget', helpstring(u'The context identifier of the topic within the help file for this toolbox.')], HRESULT, 'HelpContext',
              ( ['retval', 'out'], POINTER(c_int), 'context' )),
    COMMETHOD([helpstring(u'Sets the help (CHM) file and help context identifier containing help for this toolbox.')], HRESULT, 'AlterHelpInfo',
              ( ['in'], BSTR, 'File' ),
              ( ['in'], c_int, 'context' )),
]
################################################################
## code template for IGPToolbox implementation
##class IGPToolbox_Impl(object):
##    @property
##    def ToolNames(self):
##        u'An enumeration of all the geoprocessing tool name objects contained within the toolbox.'
##        #return names
##
##    def CreateTool(self, Type, Name, DisplayName, Description, ToolCategory, ToolExtension):
##        u'Creates a new tool in the toolbox.'
##        #return Tool
##
##    @property
##    def Alias(self):
##        u'The alias of the toolbox, used when referencing a tool: name_alias.'
##        #return Alias
##
##    @property
##    def PathName(self):
##        u'The path name to the toolbox.'
##        #return Path
##
##    def OpenTool(self, Name):
##        u'Returns a specific tool (by name) within the toolbox.'
##        #return Tool
##
##    def AlterAlias(self, newAlias):
##        u'Changes the alias of the toolbox.'
##        #return 
##
##    @property
##    def HelpFile(self):
##        u'The name of the (CHM) file containing help information for this toolbox.'
##        #return File
##
##    def AlterHelpInfo(self, File, context):
##        u'Sets the help (CHM) file and help context identifier containing help for this toolbox.'
##        #return 
##
##    @property
##    def Tools(self):
##        u'An enumeration of all the geoprocessing tools contained within the toolbox.'
##        #return Tools
##
##    def CanCreateTool(self):
##        u'Returns whether or not a new tool can be created in the toolbox.'
##        #return CanCreateTool
##
##    @property
##    def IsDeleted(self):
##        u'Indicates if the toolbox has been deleted.'
##        #return deleted
##
##    @property
##    def HelpContext(self):
##        u'The context identifier of the topic within the help file for this toolbox.'
##        #return context
##

class IGPFeatureClassDomain(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing feature class domain object.'
    _iid_ = GUID('{ABA2A43C-AEA0-4C46-AF5D-CD47BEA03277}')
    _idlflags_ = ['oleautomation']
IGPFeatureClassDomain._methods_ = [
    COMMETHOD(['propget', helpstring(u'Count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propget', helpstring(u'Shape type.')], HRESULT, 'Type',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.esriGeometryType), 'pType' )),
    COMMETHOD([helpstring(u'Add a shape type.')], HRESULT, 'AddType',
              ( ['in'], comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.esriGeometryType, 'Type' )),
    COMMETHOD([helpstring(u'Remove a shape type.')], HRESULT, 'DeleteType',
              ( ['in'], comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.esriGeometryType, 'Type' )),
    COMMETHOD([helpstring(u'Make list.')], HRESULT, 'MakeList',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'pValue' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'ppValues' )),
    COMMETHOD([helpstring(u'Set index filter.')], HRESULT, 'SetIndexFilter',
              ( ['in'], VARIANT_BOOL, 'filter' ),
              ( ['in'], VARIANT_BOOL, 'Type' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether or not to filter feature classes based on whether or not they have a spatial index.')], HRESULT, 'FilterIndex',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pFilter' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to filter feature classes that have or do not have a spatial index.')], HRESULT, 'FilterIndexType',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pType' )),
    COMMETHOD([helpstring(u'Set HasMs filter.')], HRESULT, 'SetHasMsFilter',
              ( ['in'], VARIANT_BOOL, 'filter' ),
              ( ['in'], VARIANT_BOOL, 'IncludeHasMs' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether or not to filter feature classes based on whether or not they have measures.')], HRESULT, 'FilterHasMs',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pFilterHasMs' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to filter feature classes that have or do not have measures.')], HRESULT, 'IncludeHasMs',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pIncludeHasMs' )),
    COMMETHOD([helpstring(u'Set HasZs filter.')], HRESULT, 'SetHasZsFilter',
              ( ['in'], VARIANT_BOOL, 'filter' ),
              ( ['in'], VARIANT_BOOL, 'IncludeHasZs' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether or not to filter feature classes based on whether or not they have Z values.')], HRESULT, 'FilterHasZs',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pFilterHasZs' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to filter feature classes that have or do not have Z values.')], HRESULT, 'IncludeHasZs',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pIncludeHasZs' )),
    COMMETHOD(['propget', helpstring(u'Count.')], HRESULT, 'FeatureTypeCount',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propget', helpstring(u'Feature class type.')], HRESULT, 'FeatureType',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriFeatureType), 'pType' )),
    COMMETHOD([helpstring(u'Add a feature class type.')], HRESULT, 'AddFeatureType',
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriFeatureType, 'Type' )),
    COMMETHOD([helpstring(u'Remove a feature class type.')], HRESULT, 'DeleteFeatureType',
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriFeatureType, 'Type' )),
]
################################################################
## code template for IGPFeatureClassDomain implementation
##class IGPFeatureClassDomain_Impl(object):
##    @property
##    def Count(self):
##        u'Count.'
##        #return pCount
##
##    @property
##    def FeatureType(self, Index):
##        u'Feature class type.'
##        #return pType
##
##    @property
##    def FeatureTypeCount(self):
##        u'Count.'
##        #return pCount
##
##    def SetIndexFilter(self, filter, Type):
##        u'Set index filter.'
##        #return 
##
##    @property
##    def IncludeHasZs(self):
##        u'Indicates whether to filter feature classes that have or do not have Z values.'
##        #return pIncludeHasZs
##
##    @property
##    def FilterHasZs(self):
##        u'Indicates whether or not to filter feature classes based on whether or not they have Z values.'
##        #return pFilterHasZs
##
##    @property
##    def FilterIndex(self):
##        u'Indicates whether or not to filter feature classes based on whether or not they have a spatial index.'
##        #return pFilter
##
##    def AddFeatureType(self, Type):
##        u'Add a feature class type.'
##        #return 
##
##    def SetHasMsFilter(self, filter, IncludeHasMs):
##        u'Set HasMs filter.'
##        #return 
##
##    @property
##    def FilterHasMs(self):
##        u'Indicates whether or not to filter feature classes based on whether or not they have measures.'
##        #return pFilterHasMs
##
##    def SetHasZsFilter(self, filter, IncludeHasZs):
##        u'Set HasZs filter.'
##        #return 
##
##    def DeleteFeatureType(self, Type):
##        u'Remove a feature class type.'
##        #return 
##
##    @property
##    def IncludeHasMs(self):
##        u'Indicates whether to filter feature classes that have or do not have measures.'
##        #return pIncludeHasMs
##
##    def MakeList(self, pValue):
##        u'Make list.'
##        #return ppValues
##
##    def DeleteType(self, Type):
##        u'Remove a shape type.'
##        #return 
##
##    @property
##    def Type(self, Index):
##        u'Shape type.'
##        #return pType
##
##    @property
##    def FilterIndexType(self):
##        u'Indicates whether to filter feature classes that have or do not have a spatial index.'
##        #return pType
##
##    def AddType(self, Type):
##        u'Add a shape type.'
##        #return 
##


# values for enumeration 'esriModelDiagramGridType'
esriModelDiagramGridTypeLines = 1
esriModelDiagramGridTypePoints = 2
esriModelDiagramGridType = c_int # enum
class IGPGroupLayer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to GPGroupLayer objects.'
    _iid_ = GUID('{5444CBF1-1C46-4589-A5ED-6440079D9362}')
    _idlflags_ = ['oleautomation']
IGPGroupLayer._methods_ = [
]
################################################################
## code template for IGPGroupLayer implementation
##class IGPGroupLayer_Impl(object):

class IGPRepresentationLayerDomain(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing representation layer domain object.'
    _iid_ = GUID('{D077B637-868A-4AC0-9F8E-1A3308560C92}')
    _idlflags_ = ['oleautomation']
IGPRepresentationLayerDomain._methods_ = [
    COMMETHOD(['propget', helpstring(u'Number of shape types to filter valid representations.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propget', helpstring(u'Shape type at a given index.')], HRESULT, 'Type',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.esriGeometryType), 'pType' )),
    COMMETHOD([helpstring(u'Add a new shape type to filter valid representations.')], HRESULT, 'AddType',
              ( ['in'], comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.esriGeometryType, 'Type' )),
    COMMETHOD([helpstring(u'Remove a shape type.')], HRESULT, 'DeleteType',
              ( ['in'], comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.esriGeometryType, 'Type' )),
]
################################################################
## code template for IGPRepresentationLayerDomain implementation
##class IGPRepresentationLayerDomain_Impl(object):
##    @property
##    def Count(self):
##        u'Number of shape types to filter valid representations.'
##        #return pCount
##
##    def DeleteType(self, Type):
##        u'Remove a shape type.'
##        #return 
##
##    @property
##    def Type(self, Index):
##        u'Shape type at a given index.'
##        #return pType
##
##    def AddType(self, Type):
##        u'Add a new shape type to filter valid representations.'
##        #return 
##

class IGPXYDomain(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing xy domain object.'
    _iid_ = GUID('{DA17857C-B50A-47EF-BD28-0FD2B88BA7C8}')
    _idlflags_ = ['oleautomation']
IGPXYDomain._methods_ = [
    COMMETHOD([helpstring(u'Set the xy domain extent.')], HRESULT, 'SetDomain',
              ( ['in'], c_double, 'XMin' ),
              ( ['in'], c_double, 'XMax' ),
              ( ['in'], c_double, 'YMin' ),
              ( ['in'], c_double, 'YMax' )),
    COMMETHOD([helpstring(u'Get the xy domain extent.')], HRESULT, 'GetDomain',
              ( ['out'], POINTER(c_double), 'XMin' ),
              ( ['out'], POINTER(c_double), 'XMax' ),
              ( ['out'], POINTER(c_double), 'YMin' ),
              ( ['out'], POINTER(c_double), 'YMax' )),
    COMMETHOD([helpstring(u'Set the false origin and units.')], HRESULT, 'SetFalseOriginAndUnits',
              ( ['in'], c_double, 'falseX' ),
              ( ['in'], c_double, 'falseY' ),
              ( ['in'], c_double, 'xyUnits' )),
    COMMETHOD([helpstring(u'Get the false origin and units.')], HRESULT, 'GetFalseOriginAndUnits',
              ( ['out'], POINTER(c_double), 'falseX' ),
              ( ['out'], POINTER(c_double), 'falseY' ),
              ( ['out'], POINTER(c_double), 'xyUnits' )),
    COMMETHOD([helpstring(u'Set the xy domain from a spatial reference.')], HRESULT, 'SetDomainFromSpatialReference',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'pSpRef' )),
    COMMETHOD([helpstring(u'Set the xy domain from an extent.')], HRESULT, 'SetDomainFromExtent',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'pExtent' )),
    COMMETHOD([helpstring(u'Get the extent of the xy domain.')], HRESULT, 'GetExtent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'ppExtent' )),
    COMMETHOD([helpstring(u'Get the spatial reference of the xy domain.')], HRESULT, 'GetSpatialReference',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference)), 'ppSpatialReference' )),
]
################################################################
## code template for IGPXYDomain implementation
##class IGPXYDomain_Impl(object):
##    def GetSpatialReference(self):
##        u'Get the spatial reference of the xy domain.'
##        #return ppSpatialReference
##
##    def GetDomain(self):
##        u'Get the xy domain extent.'
##        #return XMin, XMax, YMin, YMax
##
##    def SetDomain(self, XMin, XMax, YMin, YMax):
##        u'Set the xy domain extent.'
##        #return 
##
##    def SetFalseOriginAndUnits(self, falseX, falseY, xyUnits):
##        u'Set the false origin and units.'
##        #return 
##
##    def GetExtent(self):
##        u'Get the extent of the xy domain.'
##        #return ppExtent
##
##    def SetDomainFromSpatialReference(self, pSpRef):
##        u'Set the xy domain from a spatial reference.'
##        #return 
##
##    def SetDomainFromExtent(self, pExtent):
##        u'Set the xy domain from an extent.'
##        #return 
##
##    def GetFalseOriginAndUnits(self):
##        u'Get the false origin and units.'
##        #return falseX, falseY, xyUnits
##

class IGpObjectArray(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    u'Provides access to the properties and methods of a Geoprocessing object array object.'
    _iid_ = GUID('{02876181-9A06-4EF1-943A-15D337C2C90E}')
    _idlflags_ = ['dual', 'oleautomation']
IGpObjectArray._methods_ = [
    COMMETHOD([dispid(1), helpstring(u'The element count of the array.'), 'propget'], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD([dispid(2), helpstring(u'Adds an object to the array.')], HRESULT, 'Add',
              ( ['in'], POINTER(IDispatch), 'pObject' )),
    COMMETHOD([dispid(3), helpstring(u'Returns the object at the given index in the array.')], HRESULT, 'GetObject',
              ( ['in'], c_int, 'Element' ),
              ( ['retval', 'out'], POINTER(POINTER(IDispatch)), 'ppObject' )),
    COMMETHOD([dispid(4), helpstring(u'Sets the current enumeration index (used by the Next method) back to the first element in the array.')], HRESULT, 'Reset'),
    COMMETHOD([dispid(5), helpstring(u'Returns the next object at the current index in the array.')], HRESULT, 'Next',
              ( ['retval', 'out'], POINTER(POINTER(IDispatch)), 'ppObject' )),
    COMMETHOD([dispid(6), helpstring(u'Removes the object at the specified index from the array.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Element' )),
    COMMETHOD([dispid(7), helpstring(u'Removes all objects from the array.')], HRESULT, 'RemoveAll'),
    COMMETHOD([dispid(8), helpstring(u'Adds an object to the array at the specified index.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Element' ),
              ( ['in'], POINTER(IDispatch), 'pObject' )),
    COMMETHOD([dispid(9), helpstring(u'Replaces the object at the specified index in the array.')], HRESULT, 'Replace',
              ( ['in'], c_int, 'Element' ),
              ( ['in'], POINTER(IDispatch), 'pObject' )),
    COMMETHOD([dispid(10), helpstring(u'Assigns the properties of source array to this object.')], HRESULT, 'Clone',
              ( ['in'], POINTER(IGpObjectArray), 'pSrcObj' )),
]
################################################################
## code template for IGpObjectArray implementation
##class IGpObjectArray_Impl(object):
##    @property
##    def Count(self):
##        u'The element count of the array.'
##        #return Count
##
##    def Reset(self):
##        u'Sets the current enumeration index (used by the Next method) back to the first element in the array.'
##        #return 
##
##    def Insert(self, Element, pObject):
##        u'Adds an object to the array at the specified index.'
##        #return 
##
##    def Clone(self, pSrcObj):
##        u'Assigns the properties of source array to this object.'
##        #return 
##
##    def Remove(self, Element):
##        u'Removes the object at the specified index from the array.'
##        #return 
##
##    def Next(self):
##        u'Returns the next object at the current index in the array.'
##        #return ppObject
##
##    def GetObject(self, Element):
##        u'Returns the object at the given index in the array.'
##        #return ppObject
##
##    def Add(self, pObject):
##        u'Adds an object to the array.'
##        #return 
##
##    def Replace(self, Element, pObject):
##        u'Replaces the object at the specified index in the array.'
##        #return 
##
##    def RemoveAll(self):
##        u'Removes all objects from the array.'
##        #return 
##

class IGPFunction(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing function object.'
    _iid_ = GUID('{371DD95A-3B31-4BCB-8429-51C0B7D404EE}')
    _idlflags_ = ['oleautomation']
class IGPParameter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing parameter object.'
    _iid_ = GUID('{40EF6D06-4E62-4B3D-98E6-85F7A0607730}')
    _idlflags_ = ['oleautomation']
class IGPEnvironmentManager(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing environment management object.'
    _iid_ = GUID('{91C2EDF4-6E2C-43F5-B526-E1A94F6615AA}')
    _idlflags_ = ['oleautomation']
IGPFunction._methods_ = [
    COMMETHOD(['propget', helpstring(u'Name of the geoprocessing function.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propget', helpstring(u'Displayed name of the geoprocessing function.')], HRESULT, 'DisplayName',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propget', helpstring(u'The list of parameters accepted by the geoprocessing function.')], HRESULT, 'ParameterInfo',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'params' )),
    COMMETHOD(['propget', helpstring(u'The class identifier (CLSID) of the custom dialog object to use when invoking the geoprocessing function.')], HRESULT, 'DialogCLSID',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IUID)), 'CLSID' )),
    COMMETHOD(['propget', helpstring(u'The function name object of the geoprocessing function.')], HRESULT, 'FullName',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName)), 'Name' )),
    COMMETHOD(['propget', helpstring(u'Name of the (CHM) file containing help information for this function object.')], HRESULT, 'HelpFile',
              ( ['retval', 'out'], POINTER(BSTR), 'File' )),
    COMMETHOD(['propget', helpstring(u'The context identifier of the topic within the help file for this function object.')], HRESULT, 'HelpContext',
              ( ['retval', 'out'], POINTER(c_int), 'context' )),
    COMMETHOD(['propget', helpstring(u'Name of the (XML) file containing the default metadata for this function object.')], HRESULT, 'MetadataFile',
              ( ['retval', 'out'], POINTER(BSTR), 'File' )),
    COMMETHOD([helpstring(u'Returns whether the geoprocessing function has all necessary licenses in order to execute.')], HRESULT, 'IsLicensed',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsLicensed' )),
    COMMETHOD([helpstring(u'Returns the custom renderer to use for the specified parameter.')], HRESULT, 'GetRenderer',
              ( ['in'], POINTER(IGPParameter), 'pParam' ),
              ( ['retval', 'out'], POINTER(VARIANT), 'pRenderer' )),
    COMMETHOD([helpstring(u'Validates the given array of parameter values.')], HRESULT, 'Validate',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'paramvalues' ),
              ( ['in'], VARIANT_BOOL, 'updateValues' ),
              ( ['in'], POINTER(IGPEnvironmentManager), 'envMgr' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPMessages)), 'message' )),
    COMMETHOD([helpstring(u'Executes the geoprocessing function using the given array of parameter values.')], HRESULT, 'Execute',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'paramvalues' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'TrackCancel' ),
              ( ['in'], POINTER(IGPEnvironmentManager), 'envMgr' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPMessages), 'message' )),
]
################################################################
## code template for IGPFunction implementation
##class IGPFunction_Impl(object):
##    def GetRenderer(self, pParam):
##        u'Returns the custom renderer to use for the specified parameter.'
##        #return pRenderer
##
##    @property
##    def ParameterInfo(self):
##        u'The list of parameters accepted by the geoprocessing function.'
##        #return params
##
##    @property
##    def Name(self):
##        u'Name of the geoprocessing function.'
##        #return Name
##
##    @property
##    def DialogCLSID(self):
##        u'The class identifier (CLSID) of the custom dialog object to use when invoking the geoprocessing function.'
##        #return CLSID
##
##    @property
##    def MetadataFile(self):
##        u'Name of the (XML) file containing the default metadata for this function object.'
##        #return File
##
##    def Execute(self, paramvalues, TrackCancel, envMgr, message):
##        u'Executes the geoprocessing function using the given array of parameter values.'
##        #return 
##
##    @property
##    def HelpContext(self):
##        u'The context identifier of the topic within the help file for this function object.'
##        #return context
##
##    @property
##    def HelpFile(self):
##        u'Name of the (CHM) file containing help information for this function object.'
##        #return File
##
##    @property
##    def DisplayName(self):
##        u'Displayed name of the geoprocessing function.'
##        #return Name
##
##    @property
##    def FullName(self):
##        u'The function name object of the geoprocessing function.'
##        #return Name
##
##    def Validate(self, paramvalues, updateValues, envMgr):
##        u'Validates the given array of parameter values.'
##        #return message
##
##    def IsLicensed(self):
##        u'Returns whether the geoprocessing function has all necessary licenses in order to execute.'
##        #return IsLicensed
##

class GPRasterGDBEnvTileSizeType(CoClass):
    u'GeoProcessor Spatial GDB Environment Compression Type object.'
    _reg_clsid_ = GUID('{C3778095-767D-43E1-8764-6E2EB67031CD}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPRasterGDBEnvTileSizeType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to raster IGPRasterGDBEnvTileSizeType.'
    _iid_ = GUID('{B1071EE0-222A-4B8F-A7A9-FAEFFBE572EA}')
    _idlflags_ = ['oleautomation']
GPRasterGDBEnvTileSizeType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPRasterGDBEnvTileSizeType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class GPFieldInfo(CoClass):
    u'Geoprocessing value object describing a set of fields.'
    _reg_clsid_ = GUID('{2ECE5CD7-8567-44C7-A6A3-C86FAF2B5550}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPFieldInfo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing field info object.'
    _iid_ = GUID('{B4893C59-ECE5-4B2D-AB4A-540ABC813789}')
    _idlflags_ = ['oleautomation']
class IGPFieldInfo3(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing field info object.'
    _iid_ = GUID('{ECE4A21B-087A-4586-A554-13FAD0B6CCB3}')
    _idlflags_ = ['oleautomation']
GPFieldInfo._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue, IGPFieldInfo, IGPFieldInfo2, IGPFieldInfo3, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

class GpObjectArray(CoClass):
    u'Geoprocessing Object Array object.'
    _reg_clsid_ = GUID('{6400D6EC-7E55-429B-8806-1F9A7CA21D96}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GpObjectArray._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch, IGpObjectArray]

class GpPointObject(CoClass):
    u'Geoprocessing Point object.'
    _reg_clsid_ = GUID('{8E2E062C-DB4A-47A3-BEF8-571961643923}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGpPointObject(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    u'Provides access to the Dispatch Point Object.'
    _iid_ = GUID('{D667C872-3903-4B29-9EB5-FEBF6739F1B8}')
    _idlflags_ = ['dual', 'oleautomation']
class IGpPointObject2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Dispatch Point Object.'
    _iid_ = GUID('{91EFA0F3-F7B2-42BF-9349-F80572C448A1}')
    _idlflags_ = ['dual', 'oleautomation']
GpPointObject._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch, IGpPointObject, IGpPointObject2]

class GPImportCache(CoClass):
    u'Import pre-rendered tile cache.'
    _reg_clsid_ = GUID('{111FE3A4-4E66-4AF2-A95A-50DD7A7960D1}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPImportCache._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPFunction]

class IGPRasterLayer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing raster layer object.'
    _iid_ = GUID('{9D08ED26-AB4C-45D5-9F4E-32677670F7A0}')
    _idlflags_ = ['oleautomation']
IGPRasterLayer._methods_ = [
    COMMETHOD(['propget', helpstring(u'The field of the raster layer.')], HRESULT, 'Field',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IField)), 'ppField' )),
    COMMETHOD(['propputref', helpstring(u'The field of the raster layer.')], HRESULT, 'Field',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IField), 'ppField' )),
    COMMETHOD(['propget', helpstring(u'The where clause of the raster layer.')], HRESULT, 'WhereClause',
              ( ['retval', 'out'], POINTER(BSTR), 'pWhereClause' )),
    COMMETHOD(['propput', helpstring(u'The where clause of the raster layer.')], HRESULT, 'WhereClause',
              ( ['in'], BSTR, 'pWhereClause' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether or not the raster layer is of integer type.')], HRESULT, 'IsInteger',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsInteger' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether or not the raster layer is of integer type.')], HRESULT, 'IsInteger',
              ( ['in'], VARIANT_BOOL, 'IsInteger' )),
    COMMETHOD(['propget', helpstring(u'The number of bands in the raster layer object.')], HRESULT, 'BandCount',
              ( ['retval', 'out'], POINTER(c_int), 'BandCount' )),
    COMMETHOD(['propput', helpstring(u'The number of bands in the raster layer object.')], HRESULT, 'BandCount',
              ( ['in'], c_int, 'BandCount' )),
    COMMETHOD(['propget', helpstring(u'The pixel width of the raster layer object.')], HRESULT, 'PixelWidth',
              ( ['retval', 'out'], POINTER(c_double), 'PixelWidth' )),
    COMMETHOD(['propput', helpstring(u'The pixel width of the raster layer object.')], HRESULT, 'PixelWidth',
              ( ['in'], c_double, 'PixelWidth' )),
    COMMETHOD(['propget', helpstring(u'The pixel height of the raster layer object.')], HRESULT, 'PixelHeight',
              ( ['retval', 'out'], POINTER(c_double), 'PixelHeight' )),
    COMMETHOD(['propput', helpstring(u'The pixel height of the raster layer object.')], HRESULT, 'PixelHeight',
              ( ['in'], c_double, 'PixelHeight' )),
    COMMETHOD(['propget', helpstring(u'The row count of the raster layer object.')], HRESULT, 'RowCount',
              ( ['retval', 'out'], POINTER(c_int), 'RowCount' )),
    COMMETHOD(['propget', helpstring(u'The number of columns of the raster layer object.')], HRESULT, 'ColumnCount',
              ( ['retval', 'out'], POINTER(c_int), 'ColumnCount' )),
]
################################################################
## code template for IGPRasterLayer implementation
##class IGPRasterLayer_Impl(object):
##    @property
##    def ColumnCount(self):
##        u'The number of columns of the raster layer object.'
##        #return ColumnCount
##
##    def _get(self):
##        u'The where clause of the raster layer.'
##        #return pWhereClause
##    def _set(self, pWhereClause):
##        u'The where clause of the raster layer.'
##    WhereClause = property(_get, _set, doc = _set.__doc__)
##
##    def Field(self, ppField):
##        u'The field of the raster layer.'
##        #return 
##
##    @property
##    def RowCount(self):
##        u'The row count of the raster layer object.'
##        #return RowCount
##
##    def _get(self):
##        u'The pixel width of the raster layer object.'
##        #return PixelWidth
##    def _set(self, PixelWidth):
##        u'The pixel width of the raster layer object.'
##    PixelWidth = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The pixel height of the raster layer object.'
##        #return PixelHeight
##    def _set(self, PixelHeight):
##        u'The pixel height of the raster layer object.'
##    PixelHeight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The number of bands in the raster layer object.'
##        #return BandCount
##    def _set(self, BandCount):
##        u'The number of bands in the raster layer object.'
##    BandCount = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether or not the raster layer is of integer type.'
##        #return IsInteger
##    def _set(self, IsInteger):
##        u'Indicates whether or not the raster layer is of integer type.'
##    IsInteger = property(_get, _set, doc = _set.__doc__)
##

class GPSAGeoDataDomain(CoClass):
    u'Geoprocessor GPSA Geo-data Domain.'
    _reg_clsid_ = GUID('{616F905F-756D-46C1-A5E9-A77076C8C740}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPSAGeoDataDomain(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to GPSA Geo-Data Domain.'
    _iid_ = GUID('{C20FA807-C504-446C-8279-39A9170C8FFE}')
    _idlflags_ = ['oleautomation']
GPSAGeoDataDomain._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPSAGeoDataDomain, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGxFilterInfo, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDomain, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

class GPFieldInfoProperty(CoClass):
    u'Geoprocessing value object describing a field.'
    _reg_clsid_ = GUID('{1D752F2C-4AED-48AA-BCC2-0E6449ECD806}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPFieldInfoProperty(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a field info property object.'
    _iid_ = GUID('{E623FED0-5721-4A2E-A8A9-804E724912F5}')
    _idlflags_ = ['oleautomation']
class IGPFieldInfoProperty2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a field info property object.'
    _iid_ = GUID('{8FB38849-B524-4E75-819C-80E6152B2B9F}')
    _idlflags_ = ['oleautomation']
class IGPFieldInfoProperty3(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a field info property object.'
    _iid_ = GUID('{E68C2D9F-3EB5-4855-A36F-AE254C2B377D}')
    _idlflags_ = ['oleautomation']
GPFieldInfoProperty._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPFieldInfoProperty, IGPFieldInfoProperty2, IGPFieldInfoProperty3, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize]

class IGPServerSync(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the methods of the geoprocessing server.'
    _iid_ = GUID('{5C93D0CC-AED8-4517-BDFF-DE416025FB57}')
    _idlflags_ = ['oleautomation']
class IGPToolInfo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of the tool information.'
    _iid_ = GUID('{E4F9E74D-957A-471E-9C4A-6339FEE513BE}')
    _idlflags_ = ['oleautomation']
class IGPToolInfos(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of the tool information array.'
    _iid_ = GUID('{7B12C4C1-4717-4B73-960D-2F394419D461}')
    _idlflags_ = ['oleautomation']
class IGPValues(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of the values array.'
    _iid_ = GUID('{8705C67F-8519-49C4-ABE3-A4783D45D947}')
    _idlflags_ = ['oleautomation']
class IGPResultOptions(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of the result options.'
    _iid_ = GUID('{4CE28AF5-6030-469C-BD35-6A6D096B4409}')
    _idlflags_ = ['oleautomation']
class IGPResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of the geoprocessing results.'
    _iid_ = GUID('{E848AF8A-5B8B-45F5-B4B1-E3A0D4ADB365}')
    _idlflags_ = ['oleautomation']
IGPServerSync._methods_ = [
    COMMETHOD([helpstring(u'Returns the names of the available tools.')], HRESULT, 'GetToolNames',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray)), 'ppNames' )),
    COMMETHOD([helpstring(u'Returns the tool information of the specified tool name.')], HRESULT, 'GetToolInfo',
              ( ['in'], BSTR, 'ToolName' ),
              ( ['retval', 'out'], POINTER(POINTER(IGPToolInfo)), 'ppInfo' )),
    COMMETHOD([helpstring(u'Returns the tool information of the available tools.')], HRESULT, 'GetToolInfos',
              ( ['retval', 'out'], POINTER(POINTER(IGPToolInfos)), 'ppInfos' )),
    COMMETHOD([helpstring(u'Executes the specified tool with the supplied values and options and returns the results.')], HRESULT, 'Execute',
              ( ['in'], BSTR, 'ToolName' ),
              ( ['in'], POINTER(IGPValues), 'pValues' ),
              ( [], POINTER(IGPResultOptions), 'pOptions' ),
              ( [], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet), 'pEnvValues' ),
              ( ['retval', 'out'], POINTER(POINTER(IGPResult)), 'ppResult' )),
]
################################################################
## code template for IGPServerSync implementation
##class IGPServerSync_Impl(object):
##    def GetToolInfo(self, ToolName):
##        u'Returns the tool information of the specified tool name.'
##        #return ppInfo
##
##    def GetToolNames(self):
##        u'Returns the names of the available tools.'
##        #return ppNames
##
##    def Execute(self, ToolName, pValues, pOptions, pEnvValues):
##        u'Executes the specified tool with the supplied values and options and returns the results.'
##        #return ppResult
##
##    def GetToolInfos(self):
##        u'Returns the tool information of the available tools.'
##        #return ppInfos
##

class IMdDisplayEdge(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to properties/methods of a model display edge.'
    _iid_ = GUID('{8B9CF82F-0F27-4FB1-BF5A-27587726747E}')
    _idlflags_ = ['hidden']

# values for enumeration 'esriModelDiagramEdgeStyle'
esriModelDiagramEdgeStyleSolid = 0
esriModelDiagramEdgeStyleDash = 1
esriModelDiagramEdgeStyleDot = 2
esriModelDiagramEdgeStyleDashDot = 3
esriModelDiagramEdgeStyleDashDotDash = 4
esriModelDiagramEdgeStyle = c_int # enum
IMdDisplayEdge._methods_ = [
    COMMETHOD(['propget', helpstring(u'The color of the display edge object.')], HRESULT, 'Color',
              ( ['retval', 'out'], POINTER(c_int), 'pColor' )),
    COMMETHOD(['propput', helpstring(u'The color of the display edge object.')], HRESULT, 'Color',
              ( ['in'], c_int, 'pColor' )),
    COMMETHOD(['propget', helpstring(u'The width of the display edge object.')], HRESULT, 'Width',
              ( ['retval', 'out'], POINTER(c_int), 'pWidth' )),
    COMMETHOD(['propput', helpstring(u'The width of the display edge object.')], HRESULT, 'Width',
              ( ['in'], c_int, 'pWidth' )),
    COMMETHOD(['propget', helpstring(u'The direction of the display edge object.')], HRESULT, 'Direction',
              ( ['retval', 'out'], POINTER(c_int), 'pDirection' )),
    COMMETHOD(['propput', helpstring(u'The direction of the display edge object.')], HRESULT, 'Direction',
              ( ['in'], c_int, 'pDirection' )),
    COMMETHOD(['propget', helpstring(u'Indicates if non-leveling is enabled for the edge.')], HRESULT, 'NonLeveling',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pNonLeveling' )),
    COMMETHOD(['propput', helpstring(u'Indicates if non-leveling is enabled for the edge.')], HRESULT, 'NonLeveling',
              ( ['in'], VARIANT_BOOL, 'pNonLeveling' )),
    COMMETHOD(['propget', helpstring(u'The style of the display edge object.')], HRESULT, 'Style',
              ( ['retval', 'out'], POINTER(esriModelDiagramEdgeStyle), 'pStyle' )),
    COMMETHOD(['propput', helpstring(u'The style of the display edge object.')], HRESULT, 'Style',
              ( ['in'], esriModelDiagramEdgeStyle, 'pStyle' )),
]
################################################################
## code template for IMdDisplayEdge implementation
##class IMdDisplayEdge_Impl(object):
##    def _get(self):
##        u'The color of the display edge object.'
##        #return pColor
##    def _set(self, pColor):
##        u'The color of the display edge object.'
##    Color = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The width of the display edge object.'
##        #return pWidth
##    def _set(self, pWidth):
##        u'The width of the display edge object.'
##    Width = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The direction of the display edge object.'
##        #return pDirection
##    def _set(self, pDirection):
##        u'The direction of the display edge object.'
##    Direction = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if non-leveling is enabled for the edge.'
##        #return pNonLeveling
##    def _set(self, pNonLeveling):
##        u'Indicates if non-leveling is enabled for the edge.'
##    NonLeveling = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The style of the display edge object.'
##        #return pStyle
##    def _set(self, pStyle):
##        u'The style of the display edge object.'
##    Style = property(_get, _set, doc = _set.__doc__)
##

class GPEnvironmentManager(CoClass):
    u'Environment Manager.'
    _reg_clsid_ = GUID('{2AAF2B97-8381-469B-A2A7-FBD19AE43688}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPVariableManager(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to GPVariableManager objects.'
    _iid_ = GUID('{FA365292-DB48-438A-860C-3CC58BF5B43A}')
    _idlflags_ = ['oleautomation']
GPEnvironmentManager._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPEnvironmentManager, IGPDefaultNameList, IGeoProcessorSettings, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, IGPVariableManager]

class GPServerLP(CoClass):
    u'GP Server LAN Proxy.'
    _reg_clsid_ = GUID('{2A81CFC0-A826-474F-B837-FB9417589B76}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPServer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of the geoprocessing server.'
    _iid_ = GUID('{234F4A93-8516-4247-914C-57C59F1D3F5F}')
    _idlflags_ = ['oleautomation']
class IGPServer2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of the geoprocessing server.'
    _iid_ = GUID('{27909BC6-7AD1-4F5A-8E90-1BB8B95A569F}')
    _idlflags_ = ['oleautomation']
GPServerLP._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._746F6817_89BB_4490_9829_83CA25FD505A_0_10_2.IAGSServerObject2, comtypes.gen._746F6817_89BB_4490_9829_83CA25FD505A_0_10_2.IAGSServerObject, IGPServer, IGPServer2]

class IGpDescribeIndex(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    u'Provides access to the properties of a Geoprocessing Index Description object.'
    _iid_ = GUID('{B6DA9AD5-C907-403A-A1B6-7CF2CCBA0D54}')
    _idlflags_ = ['oleautomation']
class IGpEnumObject(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    u'Provides access to the properties and methods of a Geoprocessing object enumerator object.'
    _iid_ = GUID('{07B214DB-9FAE-4260-ACB1-1DBDEC489352}')
    _idlflags_ = ['oleautomation']
IGpDescribeIndex._methods_ = [
    COMMETHOD(['propget', helpstring(u'Name of the index description.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the index description is sorted in ascending order.')], HRESULT, 'IsAscending',
              ( ['retval', 'out'], POINTER(BSTR), 'IsAscending' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the index description is unique.')], HRESULT, 'IsUnique',
              ( ['retval', 'out'], POINTER(BSTR), 'IsUnique' )),
    COMMETHOD(['propget', helpstring(u'Enumeration of fields in the index description.')], HRESULT, 'Fields',
              ( ['retval', 'out'], POINTER(POINTER(IGpEnumObject)), 'Fields' )),
]
################################################################
## code template for IGpDescribeIndex implementation
##class IGpDescribeIndex_Impl(object):
##    @property
##    def Fields(self):
##        u'Enumeration of fields in the index description.'
##        #return Fields
##
##    @property
##    def Name(self):
##        u'Name of the index description.'
##        #return Name
##
##    @property
##    def IsUnique(self):
##        u'Indicates whether the index description is unique.'
##        #return IsUnique
##
##    @property
##    def IsAscending(self):
##        u'Indicates whether the index description is sorted in ascending order.'
##        #return IsAscending
##

class GpFieldMapObject(CoClass):
    u'Geoprocessing FieldMap object.'
    _reg_clsid_ = GUID('{878AA0CF-3BDE-42D3-B244-0CEAF6C785FF}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGpFieldMapObject(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    u'Provides access to the properties of a Geoprocessing FieldMap object.'
    _iid_ = GUID('{7AFA67B8-09F0-4D5C-AE19-F2B7B3C8A167}')
    _idlflags_ = ['dual', 'oleautomation']
GpFieldMapObject._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch, IGpFieldMapObject]

class GpRandomNumberGeneratorObject(CoClass):
    u'Geoprocessing RandomGenerator object.'
    _reg_clsid_ = GUID('{19E2ACFC-ECC3-43BA-8E08-FCBB21AD39B3}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GpRandomNumberGeneratorObject._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch, IGpRandomNumberGeneratorObject]

IGPRasterGDBEnvTileSizeType._methods_ = [
]
################################################################
## code template for IGPRasterGDBEnvTileSizeType implementation
##class IGPRasterGDBEnvTileSizeType_Impl(object):

class GPToolName(CoClass):
    u'Light-weight object referencing a geoprocessing tool.'
    _reg_clsid_ = GUID('{17E32382-8D63-4438-BBAF-D3C3A66918B0}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPToolName(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to methods on a tool name object.'
    _iid_ = GUID('{3CABEAAF-91A8-4C02-AA2F-95C9E01D1682}')
    _idlflags_ = ['oleautomation']
GPToolName._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDatasetName, IGPToolName, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize]

class GPNetCDFWorkspace(CoClass):
    u'NetCDFWorkspace Access.'
    _reg_clsid_ = GUID('{F6971BE4-C149-4707-BCC7-5FECFBE82AE8}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPNetCDFWorkspace(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    u'Provides access to the NetCDFWorkspace object.'
    _iid_ = GUID('{989FAB73-2AF7-4823-9BE0-5732BF089AA6}')
    _idlflags_ = ['dual', 'oleautomation']
GPNetCDFWorkspace._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch, IGPNetCDFWorkspace]

class IGPCompositeLayerType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to GPCompositeLayerType objects.'
    _iid_ = GUID('{A9AFD68A-E20B-49EF-8842-C754F29B604A}')
    _idlflags_ = ['oleautomation']
IGPCompositeLayerType._methods_ = [
]
################################################################
## code template for IGPCompositeLayerType implementation
##class IGPCompositeLayerType_Impl(object):

class IGPRasterEnvStorageDefAdvanced(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to raster storage def creation Options.'
    _iid_ = GUID('{77DFC4EB-7FFA-4D81-AE70-5A9B3EBF026E}')
    _idlflags_ = ['oleautomation']
IGPRasterEnvStorageDefAdvanced._methods_ = [
    COMMETHOD(['propput', helpstring(u'Creation options.')], HRESULT, 'CreationOptions',
              ( ['in'], BSTR, 'options' )),
    COMMETHOD(['propget', helpstring(u'Creation options.')], HRESULT, 'CreationOptions',
              ( ['retval', 'out'], POINTER(BSTR), 'options' )),
]
################################################################
## code template for IGPRasterEnvStorageDefAdvanced implementation
##class IGPRasterEnvStorageDefAdvanced_Impl(object):
##    def _get(self):
##        u'Creation options.'
##        #return options
##    def _set(self, options):
##        u'Creation options.'
##    CreationOptions = property(_get, _set, doc = _set.__doc__)
##

class GpFieldInfoObject(CoClass):
    u'Geoprocessing Field Info object.'
    _reg_clsid_ = GUID('{24472030-903C-4C0E-8F4E-2B652D6D8F53}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGpFieldInfoObject(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    u'Provides access to the Dispatch Field Info Object.'
    _iid_ = GUID('{B8AA3D79-0605-49A9-B351-647FEA86BC94}')
    _idlflags_ = ['dual', 'oleautomation']
GpFieldInfoObject._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch, IGpFieldInfoObject]

class GPHolder(CoClass):
    u'Utility object used to hold onto a geoprocessing object.'
    _reg_clsid_ = GUID('{602B0005-0AD2-41F1-A831-C640D8586CAD}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPHolder._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown]

class IGPCompositeLayer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to GPCompositeLayer objects.'
    _iid_ = GUID('{0BCC2E79-557E-4070-B876-F3928533830F}')
    _idlflags_ = ['oleautomation']
IGPCompositeLayer._methods_ = [
    COMMETHOD(['propget', helpstring(u'Gets the number of layers.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propget', helpstring(u'Returns a given layer.')], HRESULT, 'Layer',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._1CE6AC65_43F5_4529_8FC0_D7ED298E4F1A_0_10_2.IGPLayer)), 'ppGPLayer' )),
    COMMETHOD([helpstring(u'Add a layer.')], HRESULT, 'Add',
              ( ['in'], POINTER(comtypes.gen._1CE6AC65_43F5_4529_8FC0_D7ED298E4F1A_0_10_2.IGPLayer), 'pGPLayer' )),
    COMMETHOD([helpstring(u'Remove a layer.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Remove all layers.')], HRESULT, 'Clear'),
    COMMETHOD(['propget', helpstring(u'Returns the array of layers.')], HRESULT, 'Children',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'ppChildren' )),
]
################################################################
## code template for IGPCompositeLayer implementation
##class IGPCompositeLayer_Impl(object):
##    @property
##    def Count(self):
##        u'Gets the number of layers.'
##        #return pCount
##
##    @property
##    def Layer(self, Index):
##        u'Returns a given layer.'
##        #return ppGPLayer
##
##    def Clear(self):
##        u'Remove all layers.'
##        #return 
##
##    def Remove(self, Index):
##        u'Remove a layer.'
##        #return 
##
##    def Add(self, pGPLayer):
##        u'Add a layer.'
##        #return 
##
##    @property
##    def Children(self):
##        u'Returns the array of layers.'
##        #return ppChildren
##

IGpPointObject2._methods_ = [
    COMMETHOD([dispid(1), helpstring(u'Does the point have M?'), 'propget'], HRESULT, 'HasM',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'HasM' )),
    COMMETHOD([dispid(1), helpstring(u'Does the point have M?'), 'propput'], HRESULT, 'HasM',
              ( ['in'], VARIANT_BOOL, 'HasM' )),
    COMMETHOD([dispid(2), helpstring(u'Does the point have Z?'), 'propget'], HRESULT, 'HasZ',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'HasZ' )),
    COMMETHOD([dispid(2), helpstring(u'Does the point have Z?'), 'propput'], HRESULT, 'HasZ',
              ( ['in'], VARIANT_BOOL, 'HasZ' )),
]
################################################################
## code template for IGpPointObject2 implementation
##class IGpPointObject2_Impl(object):
##    def _get(self):
##        u'Does the point have M?'
##        #return HasM
##    def _set(self, HasM):
##        u'Does the point have M?'
##    HasM = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Does the point have Z?'
##        #return HasZ
##    def _set(self, HasZ):
##        u'Does the point have Z?'
##    HasZ = property(_get, _set, doc = _set.__doc__)
##

class IGPComHelper(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to properties and methods on a Geoprocessing helper object.'
    _iid_ = GUID('{1E54E6B6-C2B0-470F-B030-D81D9464F3B3}')
    _idlflags_ = ['oleautomation']
IGPComHelper._methods_ = [
    COMMETHOD([helpstring(u'Executes the specified tool.')], HRESULT, 'Execute',
              ( ['in'], BSTR, 'ToolName' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet), 'params' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'TrackCancel' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPMessages)), 'Messages' )),
    COMMETHOD([helpstring(u'Get the parameter name for a given tool and index.')], HRESULT, 'GetParameterName',
              ( ['in'], BSTR, 'ToolName' ),
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(BSTR), 'paramName' )),
    COMMETHOD([helpstring(u'Adds a reference to the specified toolbox to the GeoProcessor.')], HRESULT, 'AddToolbox',
              ( ['in'], BSTR, 'Toolbox' )),
    COMMETHOD([helpstring(u'Removes the reference to the specified toolbox from the GeoProcessor.')], HRESULT, 'RemoveToolbox',
              ( ['in'], BSTR, 'Toolbox' )),
    COMMETHOD(['propget', helpstring(u'The environment manager object associated with the helper.')], HRESULT, 'EnvironmentManager',
              ( ['retval', 'out'], POINTER(POINTER(IGPEnvironmentManager)), 'envMgr' )),
]
################################################################
## code template for IGPComHelper implementation
##class IGPComHelper_Impl(object):
##    def GetParameterName(self, ToolName, Index):
##        u'Get the parameter name for a given tool and index.'
##        #return paramName
##
##    def RemoveToolbox(self, Toolbox):
##        u'Removes the reference to the specified toolbox from the GeoProcessor.'
##        #return 
##
##    def Execute(self, ToolName, params, TrackCancel):
##        u'Executes the specified tool.'
##        #return Messages
##
##    def AddToolbox(self, Toolbox):
##        u'Adds a reference to the specified toolbox to the GeoProcessor.'
##        #return 
##
##    @property
##    def EnvironmentManager(self):
##        u'The environment manager object associated with the helper.'
##        #return envMgr
##

class IGpEnumList(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    u'Provides access to the methods on a list enumeration object.'
    _iid_ = GUID('{BA7BF773-77CE-48CF-8EE3-B541E66E9746}')
    _idlflags_ = ['oleautomation']
class IGpSpRefObject(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    u'Provides access to the Dispatch SpatialReference Object.'
    _iid_ = GUID('{20177B11-E8B3-4610-A492-F00AF2E817D3}')
    _idlflags_ = ['dual', 'oleautomation']
IGPNetCDFWorkspace._methods_ = [
    COMMETHOD([dispid(1), helpstring(u'Initialize the NetCDFWorkspace dispatch object to the properties of the real NetCDFWorkspace object')], HRESULT, 'Initialize',
              ( ['in'], POINTER(comtypes.gen._28ED84CD_FB06_41A0_9A55_E196441D169A_0_10_2.INetCDFWorkspace), 'pNetCDFWorkspace' )),
    COMMETHOD([dispid(2), helpstring(u'The variables of the NetCDFWorkspace')], HRESULT, 'GetVariables',
              ( ['retval', 'out'], POINTER(POINTER(IGpEnumList)), 'ppNames' )),
    COMMETHOD([dispid(3), helpstring(u'The variables of the NetCDFWorkspace by dimension')], HRESULT, 'GetVariablesByDimension',
              ( ['in'], BSTR, 'dimension' ),
              ( ['retval', 'out'], POINTER(POINTER(IGpEnumList)), 'ppNames' )),
    COMMETHOD([dispid(4), helpstring(u'The dimensions of the NetCDFWorkspace')], HRESULT, 'GetDimensions',
              ( ['retval', 'out'], POINTER(POINTER(IGpEnumList)), 'ppNames' )),
    COMMETHOD([dispid(5), helpstring(u'The dimensions of the NetCDFWorkspace by variable')], HRESULT, 'GetDimensionsByVariable',
              ( ['in'], BSTR, 'variable' ),
              ( ['retval', 'out'], POINTER(POINTER(IGpEnumList)), 'ppNames' )),
    COMMETHOD([dispid(6), helpstring(u'The number of dimensions of the NetCDFWorkspace')], HRESULT, 'GetDimensionSize',
              ( ['in'], BSTR, 'dimension' ),
              ( ['retval', 'out'], POINTER(c_int), 'pSize' )),
    COMMETHOD([dispid(7), helpstring(u'The value of a dimension of the NetCDFWorkspace')], HRESULT, 'GetDimensionValue',
              ( ['in'], BSTR, 'dimension' ),
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(VARIANT), 'pValue' )),
    COMMETHOD([dispid(8), helpstring(u'The index of a dimension of the NetCDFWorkspace')], HRESULT, 'GetDimensionIndex',
              ( ['in'], BSTR, 'dimension' ),
              ( ['in'], VARIANT, 'Value' ),
              ( ['retval', 'out'], POINTER(c_int), 'pIndex' )),
    COMMETHOD([dispid(9), helpstring(u'The names of the attributes of the NetCDFWorkspace')], HRESULT, 'GetAttributeNames',
              ( ['in'], BSTR, 'variable' ),
              ( ['retval', 'out'], POINTER(POINTER(IGpEnumList)), 'ppNames' )),
    COMMETHOD([dispid(10), helpstring(u'The value of an attribute of the NetCDFWorkspace')], HRESULT, 'GetAttributeValue',
              ( ['in'], BSTR, 'variable' ),
              ( ['in'], BSTR, 'attribute' ),
              ( ['in'], c_int, 'valueIndex' ),
              ( ['retval', 'out'], POINTER(VARIANT), 'pValue' )),
    COMMETHOD([dispid(11), helpstring(u'The type of a field of the NetCDFWorkspace')], HRESULT, 'GetFieldType',
              ( ['in'], BSTR, 'Name' ),
              ( ['retval', 'out'], POINTER(BSTR), 'pType' )),
    COMMETHOD([dispid(12), helpstring(u'The spatial reference of the NetCDFWorkspace')], HRESULT, 'GetSpatialReference',
              ( ['in'], BSTR, 'variable' ),
              ( ['in'], BSTR, 'xDim' ),
              ( ['in'], BSTR, 'yDim' ),
              ( ['retval', 'out'], POINTER(POINTER(IGpSpRefObject)), 'ppGpSpRefObj' )),
]
################################################################
## code template for IGPNetCDFWorkspace implementation
##class IGPNetCDFWorkspace_Impl(object):
##    def GetSpatialReference(self, variable, xDim, yDim):
##        u'The spatial reference of the NetCDFWorkspace'
##        #return ppGpSpRefObj
##
##    def GetDimensionIndex(self, dimension, Value):
##        u'The index of a dimension of the NetCDFWorkspace'
##        #return pIndex
##
##    def GetDimensionValue(self, dimension, Index):
##        u'The value of a dimension of the NetCDFWorkspace'
##        #return pValue
##
##    def GetVariables(self):
##        u'The variables of the NetCDFWorkspace'
##        #return ppNames
##
##    def GetDimensions(self):
##        u'The dimensions of the NetCDFWorkspace'
##        #return ppNames
##
##    def GetVariablesByDimension(self, dimension):
##        u'The variables of the NetCDFWorkspace by dimension'
##        #return ppNames
##
##    def GetFieldType(self, Name):
##        u'The type of a field of the NetCDFWorkspace'
##        #return pType
##
##    def GetAttributeValue(self, variable, attribute, valueIndex):
##        u'The value of an attribute of the NetCDFWorkspace'
##        #return pValue
##
##    def Initialize(self, pNetCDFWorkspace):
##        u'Initialize the NetCDFWorkspace dispatch object to the properties of the real NetCDFWorkspace object'
##        #return 
##
##    def GetDimensionSize(self, dimension):
##        u'The number of dimensions of the NetCDFWorkspace'
##        #return pSize
##
##    def GetAttributeNames(self, variable):
##        u'The names of the attributes of the NetCDFWorkspace'
##        #return ppNames
##
##    def GetDimensionsByVariable(self, variable):
##        u'The dimensions of the NetCDFWorkspace by variable'
##        #return ppNames
##

class IGPRasterGDBEnvTileSize(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to raster GDB environment tile size control.'
    _iid_ = GUID('{1870EC97-D71C-464E-9E3D-DAD6F97417C9}')
    _idlflags_ = ['oleautomation']
IGPRasterGDBEnvTileSize._methods_ = [
    COMMETHOD(['propget', helpstring(u'Tile width.')], HRESULT, 'TileWidth',
              ( ['retval', 'out'], POINTER(c_int), 'Width' )),
    COMMETHOD(['propput', helpstring(u'Tile width.')], HRESULT, 'TileWidth',
              ( ['in'], c_int, 'Width' )),
    COMMETHOD(['propget', helpstring(u'Tile height.')], HRESULT, 'TileHeight',
              ( ['retval', 'out'], POINTER(c_int), 'Height' )),
    COMMETHOD(['propput', helpstring(u'Tile height.')], HRESULT, 'TileHeight',
              ( ['in'], c_int, 'Height' )),
]
################################################################
## code template for IGPRasterGDBEnvTileSize implementation
##class IGPRasterGDBEnvTileSize_Impl(object):
##    def _get(self):
##        u'Tile width.'
##        #return Width
##    def _set(self, Width):
##        u'Tile width.'
##    TileWidth = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Tile height.'
##        #return Height
##    def _set(self, Height):
##        u'Tile height.'
##    TileHeight = property(_get, _set, doc = _set.__doc__)
##

class IGpDescribeField(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    u'Provides access to the properties of a Geoprocessing Field Description object.'
    _iid_ = GUID('{95C402E9-4FE5-4EB5-9ECB-BD009BC4B039}')
    _idlflags_ = ['dual', 'oleautomation']
IGpDescribeField._methods_ = [
    COMMETHOD([dispid(1), helpstring(u'Name of the field description.'), 'propget'], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD([dispid(1), helpstring(u'Name of the field description.'), 'propput'], HRESULT, 'Name',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD([dispid(2), helpstring(u'Alias name of the field description.'), 'propget'], HRESULT, 'AliasName',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD([dispid(2), helpstring(u'Alias name of the field description.'), 'propput'], HRESULT, 'AliasName',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD([dispid(3), helpstring(u'Domain of the field description.'), 'propget'], HRESULT, 'Domain',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD([dispid(3), helpstring(u'Domain of the field description.'), 'propput'], HRESULT, 'Domain',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD([dispid(4), helpstring(u'Indicates whether the field is editable.'), 'propget'], HRESULT, 'Editable',
              ( ['retval', 'out'], POINTER(BSTR), 'Editable' )),
    COMMETHOD([dispid(4), helpstring(u'Indicates whether the field is editable.'), 'propput'], HRESULT, 'Editable',
              ( ['in'], BSTR, 'Editable' )),
    COMMETHOD([dispid(6), helpstring(u'Indicates whether the field supports NULL values.'), 'propget'], HRESULT, 'IsNullable',
              ( ['retval', 'out'], POINTER(BSTR), 'IsNullable' )),
    COMMETHOD([dispid(6), helpstring(u'Indicates whether the field supports NULL values.'), 'propput'], HRESULT, 'IsNullable',
              ( ['in'], BSTR, 'IsNullable' )),
    COMMETHOD([dispid(7), helpstring(u'Indicates whether the field is required.'), 'propget'], HRESULT, 'Required',
              ( ['retval', 'out'], POINTER(BSTR), 'Required' )),
    COMMETHOD([dispid(7), helpstring(u'Indicates whether the field is required.'), 'propput'], HRESULT, 'Required',
              ( ['in'], BSTR, 'Required' )),
    COMMETHOD([dispid(8), helpstring(u'The length of the field.'), 'propget'], HRESULT, 'Length',
              ( ['retval', 'out'], POINTER(c_int), 'Length' )),
    COMMETHOD([dispid(8), helpstring(u'The length of the field.'), 'propput'], HRESULT, 'Length',
              ( ['in'], c_int, 'Length' )),
    COMMETHOD([dispid(9), helpstring(u'The precision of the field.'), 'propget'], HRESULT, 'Precision',
              ( ['retval', 'out'], POINTER(c_int), 'Precision' )),
    COMMETHOD([dispid(9), helpstring(u'The precision of the field.'), 'propput'], HRESULT, 'Precision',
              ( ['in'], c_int, 'Precision' )),
    COMMETHOD([dispid(10), helpstring(u'The scale of the field.'), 'propget'], HRESULT, 'Scale',
              ( ['retval', 'out'], POINTER(c_int), 'Scale' )),
    COMMETHOD([dispid(10), helpstring(u'The scale of the field.'), 'propput'], HRESULT, 'Scale',
              ( ['in'], c_int, 'Scale' )),
    COMMETHOD([dispid(11), helpstring(u'The data type of the field.'), 'propget'], HRESULT, 'Type',
              ( ['retval', 'out'], POINTER(BSTR), 'Type' )),
    COMMETHOD([dispid(11), helpstring(u'The data type of the field.'), 'propput'], HRESULT, 'Type',
              ( ['in'], BSTR, 'Type' )),
    COMMETHOD([dispid(12), helpstring(u'Set the initial field value.')], HRESULT, 'SetField',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IField), 'Field' )),
    COMMETHOD([dispid(13), helpstring(u'Get the initial field value.')], HRESULT, 'GetField',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IField)), 'Field' )),
    COMMETHOD([dispid(14), helpstring(u'Set the field position.'), 'propput'], HRESULT, 'Position',
              ( ['in'], c_int, 'pos' )),
    COMMETHOD([dispid(14), helpstring(u'Set the field position.'), 'propget'], HRESULT, 'Position',
              ( ['retval', 'out'], POINTER(c_int), 'pos' )),
]
################################################################
## code template for IGpDescribeField implementation
##class IGpDescribeField_Impl(object):
##    def _get(self):
##        u'Domain of the field description.'
##        #return Name
##    def _set(self, Name):
##        u'Domain of the field description.'
##    Domain = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The scale of the field.'
##        #return Scale
##    def _set(self, Scale):
##        u'The scale of the field.'
##    Scale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Name of the field description.'
##        #return Name
##    def _set(self, Name):
##        u'Name of the field description.'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def GetField(self):
##        u'Get the initial field value.'
##        #return Field
##
##    def SetField(self, Field):
##        u'Set the initial field value.'
##        #return 
##
##    def _get(self):
##        u'Indicates whether the field is required.'
##        #return Required
##    def _set(self, Required):
##        u'Indicates whether the field is required.'
##    Required = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether the field is editable.'
##        #return Editable
##    def _set(self, Editable):
##        u'Indicates whether the field is editable.'
##    Editable = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The precision of the field.'
##        #return Precision
##    def _set(self, Precision):
##        u'The precision of the field.'
##    Precision = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The length of the field.'
##        #return Length
##    def _set(self, Length):
##        u'The length of the field.'
##    Length = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Alias name of the field description.'
##        #return Name
##    def _set(self, Name):
##        u'Alias name of the field description.'
##    AliasName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Set the field position.'
##        #return pos
##    def _set(self, pos):
##        u'Set the field position.'
##    Position = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The data type of the field.'
##        #return Type
##    def _set(self, Type):
##        u'The data type of the field.'
##    Type = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether the field supports NULL values.'
##        #return IsNullable
##    def _set(self, IsNullable):
##        u'Indicates whether the field supports NULL values.'
##    IsNullable = property(_get, _set, doc = _set.__doc__)
##

class GpFieldMappingsObject(CoClass):
    u'Geoprocessing FieldMapping object.'
    _reg_clsid_ = GUID('{73D95803-A962-4CE9-BAA2-C02B44062AE4}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGpFieldMappingsObject(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    u'Provides access to the properties of a Geoprocessing FieldMapping object.'
    _iid_ = GUID('{3FDF95A7-B0D6-446A-BE8B-F2D75E801DA8}')
    _idlflags_ = ['dual', 'oleautomation']
GpFieldMappingsObject._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch, IGpFieldMappingsObject]


# values for enumeration 'esriExecutionType'
esriExecutionTypeAsynchronous = 1
esriExecutionTypeSynchronous = 2
esriExecutionType = c_int # enum
IGPServer._methods_ = [
    COMMETHOD([helpstring(u'Returns the names of the available tools.')], HRESULT, 'GetToolNames',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray)), 'names' )),
    COMMETHOD([helpstring(u'Returns the tool information of the available tools.')], HRESULT, 'GetToolInfos',
              ( ['retval', 'out'], POINTER(POINTER(IGPToolInfos)), 'infos' )),
    COMMETHOD([helpstring(u'Returns the tool information of the specified tool name.')], HRESULT, 'GetToolInfo',
              ( ['in'], BSTR, 'ToolName' ),
              ( ['retval', 'out'], POINTER(POINTER(IGPToolInfo)), 'info' )),
    COMMETHOD([helpstring(u'Returns the names of the available tasks.')], HRESULT, 'GetTaskNames',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray)), 'names' )),
    COMMETHOD([helpstring(u'Returns the tool information of the available tasks.')], HRESULT, 'GetTaskInfos',
              ( ['retval', 'out'], POINTER(POINTER(IGPToolInfos)), 'infos' )),
    COMMETHOD([helpstring(u'Indicates if there is an associated map server to draw the results and the name of the map server.')], HRESULT, 'GetResultMapServerName',
              ( ['retval', 'out'], POINTER(BSTR), 'mapServerName' )),
    COMMETHOD([helpstring(u'Executes the specified tool with the supplied values and options and returns the results.')], HRESULT, 'Execute',
              ( ['in'], BSTR, 'ToolName' ),
              ( ['in'], POINTER(IGPValues), 'Values' ),
              ( ['in'], POINTER(IGPResultOptions), 'pOptions' ),
              ( ['retval', 'out'], POINTER(POINTER(IGPResult)), 'ppResult' )),
    COMMETHOD([helpstring(u'Submits the specified tool with the supplied values and options and returns the job id.')], HRESULT, 'SubmitJob',
              ( ['in'], BSTR, 'ToolName' ),
              ( ['in'], POINTER(IGPValues), 'Values' ),
              ( ['retval', 'out'], POINTER(BSTR), 'JobID' )),
    COMMETHOD([helpstring(u'Returns the status of the specified job.')], HRESULT, 'GetJobStatus',
              ( ['in'], BSTR, 'JobID' ),
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriJobStatus), 'Status' )),
    COMMETHOD([helpstring(u'Returns the messages of the specified job.')], HRESULT, 'GetJobMessages',
              ( ['in'], BSTR, 'JobID' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IJobMessages)), 'Messages' )),
    COMMETHOD([helpstring(u'Returns the results of the specified job.')], HRESULT, 'GetJobResult',
              ( ['in'], BSTR, 'JobID' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray), 'ParameterNames' ),
              ( ['in'], POINTER(IGPResultOptions), 'pOptions' ),
              ( ['retval', 'out'], POINTER(POINTER(IGPResult)), 'ppResult' )),
    COMMETHOD([helpstring(u'Cancels the specified job.')], HRESULT, 'CancelJob',
              ( ['in'], BSTR, 'JobID' )),
    COMMETHOD([helpstring(u'Indicates if the geoprocessing server is synchronous or asynchronous.')], HRESULT, 'GetExecutionType',
              ( ['retval', 'out'], POINTER(esriExecutionType), 'Type' )),
    COMMETHOD([helpstring(u'Returns a zip file of the results workspace.')], HRESULT, 'GetResultWorkspace',
              ( ['in'], BSTR, 'JobID' ),
              ( ['in'], comtypes.gen._A7C74158_1062_4664_B404_8694D490FCD1_0_10_2.esriGDSTransportType, 'TransportType' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._A7C74158_1062_4664_B404_8694D490FCD1_0_10_2.IGDSData)), 'ppResultWorkspace' )),
]
################################################################
## code template for IGPServer implementation
##class IGPServer_Impl(object):
##    def SubmitJob(self, ToolName, Values):
##        u'Submits the specified tool with the supplied values and options and returns the job id.'
##        #return JobID
##
##    def GetResultWorkspace(self, JobID, TransportType):
##        u'Returns a zip file of the results workspace.'
##        #return ppResultWorkspace
##
##    def Execute(self, ToolName, Values, pOptions):
##        u'Executes the specified tool with the supplied values and options and returns the results.'
##        #return ppResult
##
##    def GetToolInfo(self, ToolName):
##        u'Returns the tool information of the specified tool name.'
##        #return info
##
##    def GetTaskNames(self):
##        u'Returns the names of the available tasks.'
##        #return names
##
##    def GetTaskInfos(self):
##        u'Returns the tool information of the available tasks.'
##        #return infos
##
##    def GetExecutionType(self):
##        u'Indicates if the geoprocessing server is synchronous or asynchronous.'
##        #return Type
##
##    def GetResultMapServerName(self):
##        u'Indicates if there is an associated map server to draw the results and the name of the map server.'
##        #return mapServerName
##
##    def GetJobMessages(self, JobID):
##        u'Returns the messages of the specified job.'
##        #return Messages
##
##    def GetJobResult(self, JobID, ParameterNames, pOptions):
##        u'Returns the results of the specified job.'
##        #return ppResult
##
##    def CancelJob(self, JobID):
##        u'Cancels the specified job.'
##        #return 
##
##    def GetToolInfos(self):
##        u'Returns the tool information of the available tools.'
##        #return infos
##
##    def GetToolNames(self):
##        u'Returns the names of the available tools.'
##        #return names
##
##    def GetJobStatus(self, JobID):
##        u'Returns the status of the specified job.'
##        #return Status
##

class IMBProgressor(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to properties/methods of a model builder progressor object.'
    _iid_ = GUID('{C9501B13-4A34-4AB1-9E81-85D1804CF68C}')
    _idlflags_ = ['oleautomation']
IMBProgressor._methods_ = [
    COMMETHOD(['propget', helpstring(u'The number of processes to be executed.')], HRESULT, 'ProcessCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propput', helpstring(u'The number of processes to be executed.')], HRESULT, 'ProcessCount',
              ( ['in'], c_int, 'Count' )),
    COMMETHOD([helpstring(u'Increments the current progressor position by one.')], HRESULT, 'StepProcess'),
]
################################################################
## code template for IMBProgressor implementation
##class IMBProgressor_Impl(object):
##    def _get(self):
##        u'The number of processes to be executed.'
##        #return Count
##    def _set(self, Count):
##        u'The number of processes to be executed.'
##    ProcessCount = property(_get, _set, doc = _set.__doc__)
##
##    def StepProcess(self):
##        u'Increments the current progressor position by one.'
##        #return 
##

class IGpCursorRow(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    u'Provides access to the Cursor Row.'
    _iid_ = GUID('{4CA0AC7E-0388-4BF9-AE30-AB5F876CBBEF}')
    _idlflags_ = ['oleautomation']
IGpCursorRow._methods_ = [
    COMMETHOD([helpstring(u'Updates the existing row of the current position of the cursor with the values of this row object.')], HRESULT, 'UpdateRow',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ICursor), 'pCursor' ),
              ( ['in'], c_int, 'cursorCookie' )),
    COMMETHOD([helpstring(u'Inserts a new row into the data source of the given cursor using the values of this row object.')], HRESULT, 'InsertRow',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ICursor), 'pCursor' ),
              ( ['in'], c_int, 'cursorCookie' )),
    COMMETHOD([helpstring(u'Deletes the existing row of the current position of the cursor.')], HRESULT, 'DeleteRow',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ICursor), 'pCursor' ),
              ( ['in'], c_int, 'cursorCookie' )),
    COMMETHOD([helpstring(u'Sets the value of the specified field in the row object.')], HRESULT, 'SetValue',
              ( ['in'], BSTR, 'Field' ),
              ( ['in'], VARIANT, 'Value' )),
    COMMETHOD([helpstring(u'Returns the value of the specified field in the row object.')], HRESULT, 'GetValue',
              ( ['in'], BSTR, 'Field' ),
              ( ['retval', 'out'], POINTER(VARIANT), 'Value' )),
    COMMETHOD([helpstring(u'Sets the value of the specified field to NULL in the row object.')], HRESULT, 'SetNull',
              ( ['in'], BSTR, 'Field' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether or not the value of the specified field in the row object is NULL.')], HRESULT, 'IsNull',
              ( ['in'], BSTR, 'Field' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsNull' )),
    COMMETHOD([helpstring(u'Sets this row object with a new row.')], HRESULT, 'SetRow',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRowBuffer), 'pRowBuffer' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet), 'pRowSet' )),
]
################################################################
## code template for IGpCursorRow implementation
##class IGpCursorRow_Impl(object):
##    def SetValue(self, Field, Value):
##        u'Sets the value of the specified field in the row object.'
##        #return 
##
##    def GetValue(self, Field):
##        u'Returns the value of the specified field in the row object.'
##        #return Value
##
##    def InsertRow(self, pCursor, cursorCookie):
##        u'Inserts a new row into the data source of the given cursor using the values of this row object.'
##        #return 
##
##    @property
##    def IsNull(self, Field):
##        u'Indicates whether or not the value of the specified field in the row object is NULL.'
##        #return IsNull
##
##    def DeleteRow(self, pCursor, cursorCookie):
##        u'Deletes the existing row of the current position of the cursor.'
##        #return 
##
##    def SetNull(self, Field):
##        u'Sets the value of the specified field to NULL in the row object.'
##        #return 
##
##    def SetRow(self, pRowBuffer, pRowSet):
##        u'Sets this row object with a new row.'
##        #return 
##
##    def UpdateRow(self, pCursor, cursorCookie):
##        u'Updates the existing row of the current position of the cursor with the values of this row object.'
##        #return 
##

class GPServerIP(CoClass):
    u'GP Server Message Proxy.'
    _reg_clsid_ = GUID('{02B03067-0726-40D2-B96F-C037D4348041}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPServerIP._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._746F6817_89BB_4490_9829_83CA25FD505A_0_10_2.IAGSServerObject2, comtypes.gen._746F6817_89BB_4490_9829_83CA25FD505A_0_10_2.IAGSServerObject, IGPServer, IGPServer2]

class TaskServicesCatalogPathParser(CoClass):
    u'Ready-To-Use (task) Services Catalog Path Parser.'
    _reg_clsid_ = GUID('{51FE4907-5C24-42D5-ACFE-71F1F69492CF}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
TaskServicesCatalogPathParser._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IParseNameString, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspaceDataElements]

class IGPMultiValueType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of the multi-value data type object.'
    _iid_ = GUID('{A8506F48-20D0-4C06-8E77-628A522C9239}')
    _idlflags_ = ['oleautomation']
IGPMultiValueType._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The data type of value objects accepted by the multi-value data type object.')], HRESULT, 'MemberDataType',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType), 'Type' )),
    COMMETHOD(['propget', helpstring(u'The data type of value objects accepted by the multi-value data type object.')], HRESULT, 'MemberDataType',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType)), 'Type' )),
]
################################################################
## code template for IGPMultiValueType implementation
##class IGPMultiValueType_Impl(object):
##    @property
##    def MemberDataType(self, Type):
##        u'The data type of value objects accepted by the multi-value data type object.'
##        #return 
##

class IGPServerTrackCancel(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    _iid_ = GUID('{E4212B92-2537-4489-83A9-A53EDE41CA8E}')
    _idlflags_ = ['oleautomation']
class IGPServerTrackCancel2(IGPServerTrackCancel):
    _case_insensitive_ = True
    _iid_ = GUID('{979F4C54-02AE-4E8D-A808-62A428E95789}')
    _idlflags_ = ['oleautomation']
IGPServerTrackCancel._methods_ = [
    COMMETHOD([helpstring(u'Initialize the track cancel.')], HRESULT, 'Init',
              ( ['in'], POINTER(IUnknown), 'pJobTracker' )),
    COMMETHOD([helpstring(u'The job messages.')], HRESULT, 'GetJobMessages',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IJobMessages)), 'ppMessages' )),
]
################################################################
## code template for IGPServerTrackCancel implementation
##class IGPServerTrackCancel_Impl(object):
##    def Init(self, pJobTracker):
##        u'Initialize the track cancel.'
##        #return 
##
##    def GetJobMessages(self):
##        u'The job messages.'
##        #return ppMessages
##

IGPServerTrackCancel2._methods_ = [
    COMMETHOD(['propget', helpstring(u'The message level.')], HRESULT, 'MessageLevel',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriJobMessageType), 'MessageLevel' )),
    COMMETHOD(['propput', helpstring(u'The message level.')], HRESULT, 'MessageLevel',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriJobMessageType, 'MessageLevel' )),
]
################################################################
## code template for IGPServerTrackCancel2 implementation
##class IGPServerTrackCancel2_Impl(object):
##    def _get(self):
##        u'The message level.'
##        #return MessageLevel
##    def _set(self, MessageLevel):
##        u'The message level.'
##    MessageLevel = property(_get, _set, doc = _set.__doc__)
##

class IGpCursorRow2(IGpCursorRow):
    _case_insensitive_ = True
    u'Provides access to the Cursor Row.'
    _iid_ = GUID('{07897E4F-0A73-4F20-9C9A-5D31BC612340}')
    _idlflags_ = ['oleautomation']
IGpCursorRow2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Returns if the row is from an insert cursor or not.')], HRESULT, 'IsInsertCursor',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'isInsert' )),
    COMMETHOD([helpstring(u'Returns the OID and GEOMETRY fields of the associated table.')], HRESULT, 'GetOIDandGeomFieldNames',
              ( ['out'], POINTER(BSTR), 'OIDFieldName' ),
              ( ['out'], POINTER(BSTR), 'GeomFieldName' )),
]
################################################################
## code template for IGpCursorRow2 implementation
##class IGpCursorRow2_Impl(object):
##    def GetOIDandGeomFieldNames(self):
##        u'Returns the OID and GEOMETRY fields of the associated table.'
##        #return OIDFieldName, GeomFieldName
##
##    @property
##    def IsInsertCursor(self):
##        u'Returns if the row is from an insert cursor or not.'
##        #return isInsert
##

IGPRasterGDBEnvStatistics._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if calculating statistics option.')], HRESULT, 'CalculateStatistics',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'bCalculate' )),
    COMMETHOD(['propput', helpstring(u'Indicates if calculating statistics option.')], HRESULT, 'CalculateStatistics',
              ( ['in'], VARIANT_BOOL, 'bCalculate' )),
    COMMETHOD(['propget', helpstring(u'X-Skip factor.')], HRESULT, 'XSkipFactor',
              ( ['retval', 'out'], POINTER(c_int), 'skipFactor' )),
    COMMETHOD(['propput', helpstring(u'X-Skip factor.')], HRESULT, 'XSkipFactor',
              ( ['in'], c_int, 'skipFactor' )),
    COMMETHOD(['propget', helpstring(u'Y-Skip factor.')], HRESULT, 'YSkipFactor',
              ( ['retval', 'out'], POINTER(c_int), 'skipFactor' )),
    COMMETHOD(['propput', helpstring(u'Y-Skip factor.')], HRESULT, 'YSkipFactor',
              ( ['in'], c_int, 'skipFactor' )),
    COMMETHOD(['propget', helpstring(u'Value to be ignored.')], HRESULT, 'IgnoreValue',
              ( ['retval', 'out'], POINTER(BSTR), 'IgnoreValue' )),
    COMMETHOD(['propput', helpstring(u'Value to be ignored.')], HRESULT, 'IgnoreValue',
              ( ['in'], BSTR, 'IgnoreValue' )),
]
################################################################
## code template for IGPRasterGDBEnvStatistics implementation
##class IGPRasterGDBEnvStatistics_Impl(object):
##    def _get(self):
##        u'Y-Skip factor.'
##        #return skipFactor
##    def _set(self, skipFactor):
##        u'Y-Skip factor.'
##    YSkipFactor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'X-Skip factor.'
##        #return skipFactor
##    def _set(self, skipFactor):
##        u'X-Skip factor.'
##    XSkipFactor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Value to be ignored.'
##        #return IgnoreValue
##    def _set(self, IgnoreValue):
##        u'Value to be ignored.'
##    IgnoreValue = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if calculating statistics option.'
##        #return bCalculate
##    def _set(self, bCalculate):
##        u'Indicates if calculating statistics option.'
##    CalculateStatistics = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'esriModelDiagramLayoutQuality'
esriModelDiagramLayoutQualityDraft = 0
esriModelDiagramLayoutQualityDefault = 1
esriModelDiagramLayoutQualityProof = 2
esriModelDiagramLayoutQuality = c_int # enum
class IGPMultiValue(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a multi-value object.'
    _iid_ = GUID('{F38C53BD-E600-463C-8440-00EB607F526F}')
    _idlflags_ = ['oleautomation']
IGPMultiValue._methods_ = [
    COMMETHOD(['propget', helpstring(u'The value at the specified index.')], HRESULT, 'Value',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue)), 'ppValue' )),
    COMMETHOD(['propget', helpstring(u'An enumeration of values contained in the multi-value object.')], HRESULT, 'Values',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IEnumGPValue)), 'Values' )),
    COMMETHOD(['propputref', helpstring(u'The data type of value objects accepted by the multi-value object.')], HRESULT, 'MemberDataType',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType), 'Type' )),
    COMMETHOD(['propget', helpstring(u'The data type of value objects accepted by the multi-value object.')], HRESULT, 'MemberDataType',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType)), 'Type' )),
    COMMETHOD(['propget', helpstring(u'The number of values currently contained in the multi-value object.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD([helpstring(u'Adds the given value object to the multi-value object.')], HRESULT, 'AddValue',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'Value' )),
    COMMETHOD([helpstring(u'Inserts the given value object to the multi-value object at the specified index.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'Value' )),
    COMMETHOD([helpstring(u'Removes the given value object from the multi-value object.')], HRESULT, 'RemoveValue',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'Value' )),
    COMMETHOD([helpstring(u'Removes the value object at the given index from the multi-value object.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Replaces the value object at the given index with the given value object.')], HRESULT, 'Replace',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'Value' )),
]
################################################################
## code template for IGPMultiValue implementation
##class IGPMultiValue_Impl(object):
##    @property
##    def Count(self):
##        u'The number of values currently contained in the multi-value object.'
##        #return Count
##
##    def Insert(self, Index, Value):
##        u'Inserts the given value object to the multi-value object at the specified index.'
##        #return 
##
##    @property
##    def Value(self, Index):
##        u'The value at the specified index.'
##        #return ppValue
##
##    def Replace(self, Index, Value):
##        u'Replaces the value object at the given index with the given value object.'
##        #return 
##
##    def AddValue(self, Value):
##        u'Adds the given value object to the multi-value object.'
##        #return 
##
##    @property
##    def Values(self):
##        u'An enumeration of values contained in the multi-value object.'
##        #return Values
##
##    def Remove(self, Index):
##        u'Removes the value object at the given index from the multi-value object.'
##        #return 
##
##    def RemoveValue(self, Value):
##        u'Removes the given value object from the multi-value object.'
##        #return 
##
##    @property
##    def MemberDataType(self, Type):
##        u'The data type of value objects accepted by the multi-value object.'
##        #return 
##

class IGpDispatch(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    u'Provides access to the properties and methods of a Geoprocessor object.'
    _iid_ = GUID('{CCBC8B04-F507-423D-A9B8-20971E86EA86}')
    _idlflags_ = ['oleautomation']
IGpDispatch._methods_ = [
    COMMETHOD(['propget', helpstring(u'The number of returned messages.')], HRESULT, 'MessageCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD([helpstring(u'Gets the return message by index.')], HRESULT, 'GetMessage',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(BSTR), 'message' )),
    COMMETHOD([helpstring(u'Gets the return severity by index.')], HRESULT, 'GetSeverity',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(c_int), 'severity' )),
    COMMETHOD([helpstring(u'Gets the return code by index.')], HRESULT, 'GetReturnCode',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(c_int), 'code' )),
    COMMETHOD([helpstring(u'Gets all the return messages.')], HRESULT, 'GetMessages',
              ( ['in', 'optional'], POINTER(VARIANT), 'severity' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Messages' )),
    COMMETHOD(['propget', helpstring(u'The maximum severity of the return messages.')], HRESULT, 'MaxSeverity',
              ( ['retval', 'out'], POINTER(c_int), 'severity' )),
    COMMETHOD([helpstring(u'Sets the output message.')], HRESULT, 'AddMessage',
              ( ['in'], BSTR, 'message' )),
    COMMETHOD([helpstring(u'Sets the output error message.')], HRESULT, 'AddError',
              ( ['in'], BSTR, 'message' )),
    COMMETHOD([helpstring(u'Sets the output warning message.')], HRESULT, 'AddWarning',
              ( ['in'], BSTR, 'message' )),
    COMMETHOD([helpstring(u'Sets the return message as an output message by index.')], HRESULT, 'AddReturnMessage',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Sets the license level.')], HRESULT, 'SetProduct',
              ( ['in'], BSTR, 'code' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Status' )),
    COMMETHOD([helpstring(u'Check the status of a license code.')], HRESULT, 'CheckProduct',
              ( ['in'], BSTR, 'code' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Status' )),
    COMMETHOD([helpstring(u'Gets the product license info.')], HRESULT, 'ProductInfo',
              ( ['retval', 'out'], POINTER(BSTR), 'Status' )),
    COMMETHOD([helpstring(u'Checks out a product extension.')], HRESULT, 'CheckOutExtension',
              ( ['in'], BSTR, 'extension' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Status' )),
    COMMETHOD([helpstring(u'Checks in a product extension.')], HRESULT, 'CheckInExtension',
              ( ['in'], BSTR, 'extension' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Status' )),
    COMMETHOD([helpstring(u'Checks the status of a product extension.')], HRESULT, 'CheckExtension',
              ( ['in'], BSTR, 'extension' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Status' )),
    COMMETHOD(['propget', helpstring(u'The number of input tool parameters.')], HRESULT, 'ParameterCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD([helpstring(u'Gets given tool parameter as text.')], HRESULT, 'GetParameterAsText',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(BSTR), 'argument' )),
    COMMETHOD([helpstring(u'Sets given tool parameter as text.')], HRESULT, 'SetParameterAsText',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'argument' )),
    COMMETHOD([helpstring(u'Copy given tool parameter to another.')], HRESULT, 'CopyParameter',
              ( ['in'], c_int, 'from' ),
              ( ['in'], c_int, 'to' )),
    COMMETHOD([helpstring(u'Gets list of GeoProcessor Tools.')], HRESULT, 'ListTools',
              ( ['in', 'optional'], POINTER(VARIANT), 'pWildcard' ),
              ( ['retval', 'out'], POINTER(POINTER(IDispatch)), 'ppEnumList' )),
    COMMETHOD([helpstring(u'Gets list of GeoProcessor Environments.')], HRESULT, 'ListEnvironments',
              ( ['in', 'optional'], POINTER(VARIANT), 'pWildcard' ),
              ( ['retval', 'out'], POINTER(POINTER(IDispatch)), 'ppEnumList' )),
    COMMETHOD([helpstring(u'Gets list of GeoProcessor Toolboxes.')], HRESULT, 'ListToolboxes',
              ( ['in', 'optional'], POINTER(VARIANT), 'pWildcard' ),
              ( ['retval', 'out'], POINTER(POINTER(IDispatch)), 'ppEnumList' )),
    COMMETHOD(['propput', helpstring(u'Sets the current (default) toolbox.')], HRESULT, 'Toolbox',
              ( ['in'], BSTR, 'Toolbox' )),
    COMMETHOD(['propget', helpstring(u'Sets the current (default) toolbox.')], HRESULT, 'Toolbox',
              ( ['retval', 'out'], POINTER(BSTR), 'Toolbox' )),
    COMMETHOD([helpstring(u'Add the toolbox to the current session.')], HRESULT, 'AddToolbox',
              ( ['in'], BSTR, 'Toolbox' )),
    COMMETHOD([helpstring(u'Remove the toolbox from the current session.')], HRESULT, 'RemoveToolbox',
              ( ['in'], BSTR, 'Toolbox' )),
    COMMETHOD([helpstring(u'Gets the given system environment.')], HRESULT, 'GetSystemEnvironment',
              ( ['in'], BSTR, 'envName' ),
              ( ['retval', 'out'], POINTER(BSTR), 'pEnvironment' )),
    COMMETHOD([helpstring(u'executes the given command line.')], HRESULT, 'Command',
              ( ['in'], BSTR, 'CommandLine' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Results' )),
    COMMETHOD([helpstring(u'Generates the Usage for a given tool.')], HRESULT, 'Usage',
              ( ['in'], BSTR, 'Method' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Usage' )),
    COMMETHOD([helpstring(u'Checks if a data element exists.')], HRESULT, 'Exists',
              ( ['in'], POINTER(VARIANT), 'pInputValue' ),
              ( ['in', 'optional'], POINTER(VARIANT), 'DataType' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Exists' )),
    COMMETHOD([helpstring(u'Refreshes the parent of the specified object in the catalog object associated with the Geoprocessor.')], HRESULT, 'RefreshCatalog',
              ( ['in'], POINTER(VARIANT), 'pInputValue' )),
    COMMETHOD([helpstring(u'Returns a collection of feature classes in the current workspace or optional dataset, based on a query string and type.')], HRESULT, 'ListFeatureClasses',
              ( ['in', 'optional'], POINTER(VARIANT), 'wildCard' ),
              ( ['in', 'optional'], POINTER(VARIANT), 'FeatureType' ),
              ( ['in', 'optional'], POINTER(VARIANT), 'dataset' ),
              ( ['retval', 'out'], POINTER(POINTER(IDispatch)), 'ppEnumList' )),
    COMMETHOD([helpstring(u'Returns a collection of datasets in the current workspace based on a query string and type.')], HRESULT, 'ListDatasets',
              ( ['in', 'optional'], POINTER(VARIANT), 'wildCard' ),
              ( ['in', 'optional'], POINTER(VARIANT), 'FeatureType' ),
              ( ['retval', 'out'], POINTER(POINTER(IDispatch)), 'ppEnumList' )),
    COMMETHOD([helpstring(u'Returns a collection of tables in the current workspace based on a query string and type.')], HRESULT, 'ListTables',
              ( ['in', 'optional'], POINTER(VARIANT), 'wildCard' ),
              ( ['in', 'optional'], POINTER(VARIANT), 'tableType' ),
              ( ['retval', 'out'], POINTER(POINTER(IDispatch)), 'ppEnumList' )),
    COMMETHOD([helpstring(u'Returns a collection of rasters in the current workspace based on a query string and type.')], HRESULT, 'ListRasters',
              ( ['in', 'optional'], POINTER(VARIANT), 'wildCard' ),
              ( ['in', 'optional'], POINTER(VARIANT), 'RasterType' ),
              ( ['retval', 'out'], POINTER(POINTER(IDispatch)), 'ppEnumList' )),
    COMMETHOD([helpstring(u'Returns a collection of workspaces in the current workspace based on a query string and type.')], HRESULT, 'ListWorkspaces',
              ( ['in', 'optional'], POINTER(VARIANT), 'wildCard' ),
              ( ['in', 'optional'], POINTER(VARIANT), 'workspaceType' ),
              ( ['retval', 'out'], POINTER(POINTER(IDispatch)), 'ppEnumList' )),
    COMMETHOD([helpstring(u'Returns a collection of fields in the given table/feature class based on a query string and type.')], HRESULT, 'ListFields',
              ( ['in'], POINTER(VARIANT), 'pInputValue' ),
              ( ['in', 'optional'], POINTER(VARIANT), 'wildCard' ),
              ( ['in', 'optional'], POINTER(VARIANT), 'FieldType' ),
              ( ['retval', 'out'], POINTER(POINTER(IDispatch)), 'ppDescribe' )),
    COMMETHOD([helpstring(u'Returns a collection of indexes in the given table/feature class based on a query string and type.')], HRESULT, 'ListIndexes',
              ( ['in'], POINTER(VARIANT), 'pInputValue' ),
              ( ['in', 'optional'], POINTER(VARIANT), 'wildCard' ),
              ( ['retval', 'out'], POINTER(POINTER(IDispatch)), 'ppDescribe' )),
    COMMETHOD([helpstring(u'Returns a search cursor object against the given table/feature class.')], HRESULT, 'SearchCursor',
              ( ['in'], POINTER(VARIANT), 'pInputValue' ),
              ( ['in', 'optional'], POINTER(VARIANT), 'WhereClause' ),
              ( ['in', 'optional'], POINTER(VARIANT), 'SpRef' ),
              ( ['in', 'optional'], POINTER(VARIANT), 'Fields' ),
              ( ['in', 'optional'], POINTER(VARIANT), 'sortFields' ),
              ( ['retval', 'out'], POINTER(POINTER(IDispatch)), 'ppCursor' )),
    COMMETHOD([helpstring(u'Returns an update cursor object against the given table/feature class.')], HRESULT, 'UpdateCursor',
              ( ['in'], POINTER(VARIANT), 'pInputValue' ),
              ( ['in', 'optional'], POINTER(VARIANT), 'WhereClause' ),
              ( ['in', 'optional'], POINTER(VARIANT), 'SpRef' ),
              ( ['in', 'optional'], POINTER(VARIANT), 'Fields' ),
              ( ['in', 'optional'], POINTER(VARIANT), 'sortFields' ),
              ( ['retval', 'out'], POINTER(POINTER(IDispatch)), 'ppCursor' )),
    COMMETHOD([helpstring(u'Returns an insert cursor object against the given table/feature class.')], HRESULT, 'InsertCursor',
              ( ['in'], POINTER(VARIANT), 'pInputValue' ),
              ( ['in', 'optional'], POINTER(VARIANT), 'SpRef' ),
              ( ['retval', 'out'], POINTER(POINTER(IDispatch)), 'ppCursor' )),
    COMMETHOD([helpstring(u'Returns a descriptor object describing the properties of the specified data element.')], HRESULT, 'Describe',
              ( ['in'], POINTER(VARIANT), 'pInputValue' ),
              ( ['in', 'optional'], POINTER(VARIANT), 'DataType' ),
              ( ['retval', 'out'], POINTER(POINTER(IDispatch)), 'ppDescribe' )),
    COMMETHOD([helpstring(u'Creates a geoprocessing object that can be used in a scripting environment.')], HRESULT, 'CreateObject',
              ( ['in'], POINTER(VARIANT), 'pObjectName' ),
              ( ['in', 'optional'], POINTER(VARIANT), 'pExtraArg' ),
              ( ['retval', 'out'], POINTER(POINTER(IDispatch)), 'ppObject' )),
    COMMETHOD([helpstring(u'Creates a geoprocessing random number generator object that can be used to generate random numbers.')], HRESULT, 'CreateRandomValueGenerator',
              ( ['in'], c_int, 'Seed' ),
              ( ['in'], BSTR, 'distributionType' ),
              ( ['retval', 'out'], POINTER(POINTER(IDispatch)), 'ppObject' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether or not outputs should be overwritten.')], HRESULT, 'OverwriteOutput',
              ( ['in'], VARIANT_BOOL, 'OverwriteOutput' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether or not outputs should be overwritten.')], HRESULT, 'OverwriteOutput',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'OverwriteOutput' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether or not operations are logged or not.')], HRESULT, 'LogHistory',
              ( ['in'], VARIANT_BOOL, 'LogHistory' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether or not operations are logged or not.')], HRESULT, 'LogHistory',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'LogHistory' )),
    COMMETHOD([helpstring(u'Checks a field for compatibility with the workspace.')], HRESULT, 'ValidateFieldName',
              ( ['in'], BSTR, 'inputFieldName' ),
              ( ['in', 'optional'], POINTER(VARIANT), 'Workspace' ),
              ( ['retval', 'out'], POINTER(BSTR), 'outputFieldName' )),
    COMMETHOD([helpstring(u'Checks a table name for compatibility with the workspace.')], HRESULT, 'ValidateTableName',
              ( ['in'], BSTR, 'inputTableName' ),
              ( ['in', 'optional'], POINTER(VARIANT), 'Workspace' ),
              ( ['retval', 'out'], POINTER(BSTR), 'outputTableName' )),
    COMMETHOD([helpstring(u'Qualifies a field name for the workspace and connected user.')], HRESULT, 'QualifyFieldName',
              ( ['in'], BSTR, 'inputFieldName' ),
              ( ['in', 'optional'], POINTER(VARIANT), 'Workspace' ),
              ( ['retval', 'out'], POINTER(BSTR), 'outputFieldName' )),
    COMMETHOD([helpstring(u'Qualifies a table name for the workspace and connected user.')], HRESULT, 'QualifyTableName',
              ( ['in'], BSTR, 'inputTableName' ),
              ( ['in', 'optional'], POINTER(VARIANT), 'Workspace' ),
              ( ['retval', 'out'], POINTER(BSTR), 'outputTableName' )),
    COMMETHOD([helpstring(u'Parses a field name into its constituent parts.')], HRESULT, 'ParseFieldName',
              ( ['in'], BSTR, 'inputFieldName' ),
              ( ['in', 'optional'], POINTER(VARIANT), 'Workspace' ),
              ( ['retval', 'out'], POINTER(BSTR), 'outputParsedName' )),
    COMMETHOD([helpstring(u'Parses a table name into its constituent parts.')], HRESULT, 'ParseTableName',
              ( ['in'], BSTR, 'inputTableName' ),
              ( ['in', 'optional'], POINTER(VARIANT), 'Workspace' ),
              ( ['retval', 'out'], POINTER(BSTR), 'outputParsedName' )),
    COMMETHOD([helpstring(u'Creates a scratch name for the given workspace.')], HRESULT, 'CreateScratchName',
              ( ['in', 'optional'], POINTER(VARIANT), 'Prefix' ),
              ( ['in', 'optional'], POINTER(VARIANT), 'Suffix' ),
              ( ['in', 'optional'], POINTER(VARIANT), 'DataType' ),
              ( ['in', 'optional'], POINTER(VARIANT), 'Workspace' ),
              ( ['retval', 'out'], POINTER(BSTR), 'outputTableName' )),
    COMMETHOD([helpstring(u'Creates a unique name for the given workspace.')], HRESULT, 'CreateUniqueName',
              ( ['in'], BSTR, 'inputTableName' ),
              ( ['in', 'optional'], POINTER(VARIANT), 'Workspace' ),
              ( ['retval', 'out'], POINTER(BSTR), 'outputTableName' )),
    COMMETHOD([helpstring(u'Saves the current GeoProcessor environment settings.')], HRESULT, 'SaveSettings',
              ( ['in'], BSTR, 'FileName' )),
    COMMETHOD([helpstring(u'Loads the current GeoProcessor environment settings.')], HRESULT, 'LoadSettings',
              ( ['in'], BSTR, 'FileName' )),
    COMMETHOD([helpstring(u'Tests if an exclusive schema lock is set on a dataset.')], HRESULT, 'TestSchemaLock',
              ( ['in'], BSTR, 'FileName' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Status' )),
    COMMETHOD([helpstring(u'Clears the value of a given environment.')], HRESULT, 'ClearEnvironment',
              ( ['in'], BSTR, 'env' )),
    COMMETHOD([helpstring(u'Tests if a given environments value is set or not.')], HRESULT, 'ResetEnvironments'),
]
################################################################
## code template for IGpDispatch implementation
##class IGpDispatch_Impl(object):
##    def ListToolboxes(self, pWildcard):
##        u'Gets list of GeoProcessor Toolboxes.'
##        #return ppEnumList
##
##    def AddError(self, message):
##        u'Sets the output error message.'
##        #return 
##
##    def AddMessage(self, message):
##        u'Sets the output message.'
##        #return 
##
##    def RemoveToolbox(self, Toolbox):
##        u'Remove the toolbox from the current session.'
##        #return 
##
##    def CheckExtension(self, extension):
##        u'Checks the status of a product extension.'
##        #return Status
##
##    def _get(self):
##        u'Sets the current (default) toolbox.'
##        #return Toolbox
##    def _set(self, Toolbox):
##        u'Sets the current (default) toolbox.'
##    Toolbox = property(_get, _set, doc = _set.__doc__)
##
##    def RefreshCatalog(self, pInputValue):
##        u'Refreshes the parent of the specified object in the catalog object associated with the Geoprocessor.'
##        #return 
##
##    def AddWarning(self, message):
##        u'Sets the output warning message.'
##        #return 
##
##    def QualifyFieldName(self, inputFieldName, Workspace):
##        u'Qualifies a field name for the workspace and connected user.'
##        #return outputFieldName
##
##    def Usage(self, Method):
##        u'Generates the Usage for a given tool.'
##        #return Usage
##
##    def ListRasters(self, wildCard, RasterType):
##        u'Returns a collection of rasters in the current workspace based on a query string and type.'
##        #return ppEnumList
##
##    def GetReturnCode(self, Index):
##        u'Gets the return code by index.'
##        #return code
##
##    def ValidateTableName(self, inputTableName, Workspace):
##        u'Checks a table name for compatibility with the workspace.'
##        #return outputTableName
##
##    def QualifyTableName(self, inputTableName, Workspace):
##        u'Qualifies a table name for the workspace and connected user.'
##        #return outputTableName
##
##    def ListDatasets(self, wildCard, FeatureType):
##        u'Returns a collection of datasets in the current workspace based on a query string and type.'
##        #return ppEnumList
##
##    def CreateUniqueName(self, inputTableName, Workspace):
##        u'Creates a unique name for the given workspace.'
##        #return outputTableName
##
##    def TestSchemaLock(self, FileName):
##        u'Tests if an exclusive schema lock is set on a dataset.'
##        #return Status
##
##    def SetParameterAsText(self, Index, argument):
##        u'Sets given tool parameter as text.'
##        #return 
##
##    @property
##    def MaxSeverity(self):
##        u'The maximum severity of the return messages.'
##        #return severity
##
##    def CheckInExtension(self, extension):
##        u'Checks in a product extension.'
##        #return Status
##
##    def CheckProduct(self, code):
##        u'Check the status of a license code.'
##        #return Status
##
##    def ProductInfo(self):
##        u'Gets the product license info.'
##        #return Status
##
##    def GetMessages(self, severity):
##        u'Gets all the return messages.'
##        #return Messages
##
##    def LoadSettings(self, FileName):
##        u'Loads the current GeoProcessor environment settings.'
##        #return 
##
##    def AddReturnMessage(self, Index):
##        u'Sets the return message as an output message by index.'
##        #return 
##
##    def GetParameterAsText(self, Index):
##        u'Gets given tool parameter as text.'
##        #return argument
##
##    def ListFields(self, pInputValue, wildCard, FieldType):
##        u'Returns a collection of fields in the given table/feature class based on a query string and type.'
##        #return ppDescribe
##
##    def ParseTableName(self, inputTableName, Workspace):
##        u'Parses a table name into its constituent parts.'
##        #return outputParsedName
##
##    def CreateObject(self, pObjectName, pExtraArg):
##        u'Creates a geoprocessing object that can be used in a scripting environment.'
##        #return ppObject
##
##    @property
##    def MessageCount(self):
##        u'The number of returned messages.'
##        #return Count
##
##    def CheckOutExtension(self, extension):
##        u'Checks out a product extension.'
##        #return Status
##
##    def SaveSettings(self, FileName):
##        u'Saves the current GeoProcessor environment settings.'
##        #return 
##
##    def CreateRandomValueGenerator(self, Seed, distributionType):
##        u'Creates a geoprocessing random number generator object that can be used to generate random numbers.'
##        #return ppObject
##
##    def SetProduct(self, code):
##        u'Sets the license level.'
##        #return Status
##
##    def ParseFieldName(self, inputFieldName, Workspace):
##        u'Parses a field name into its constituent parts.'
##        #return outputParsedName
##
##    def ListFeatureClasses(self, wildCard, FeatureType, dataset):
##        u'Returns a collection of feature classes in the current workspace or optional dataset, based on a query string and type.'
##        #return ppEnumList
##
##    def ValidateFieldName(self, inputFieldName, Workspace):
##        u'Checks a field for compatibility with the workspace.'
##        #return outputFieldName
##
##    def GetMessage(self, Index):
##        u'Gets the return message by index.'
##        #return message
##
##    def Command(self, CommandLine):
##        u'executes the given command line.'
##        #return Results
##
##    def ListTables(self, wildCard, tableType):
##        u'Returns a collection of tables in the current workspace based on a query string and type.'
##        #return ppEnumList
##
##    def SearchCursor(self, pInputValue, WhereClause, SpRef, Fields, sortFields):
##        u'Returns a search cursor object against the given table/feature class.'
##        #return ppCursor
##
##    def InsertCursor(self, pInputValue, SpRef):
##        u'Returns an insert cursor object against the given table/feature class.'
##        #return ppCursor
##
##    def _get(self):
##        u'Indicates whether or not operations are logged or not.'
##        #return LogHistory
##    def _set(self, LogHistory):
##        u'Indicates whether or not operations are logged or not.'
##    LogHistory = property(_get, _set, doc = _set.__doc__)
##
##    def GetSeverity(self, Index):
##        u'Gets the return severity by index.'
##        #return severity
##
##    def ListWorkspaces(self, wildCard, workspaceType):
##        u'Returns a collection of workspaces in the current workspace based on a query string and type.'
##        #return ppEnumList
##
##    def ClearEnvironment(self, env):
##        u'Clears the value of a given environment.'
##        #return 
##
##    def Exists(self, pInputValue, DataType):
##        u'Checks if a data element exists.'
##        #return Exists
##
##    def GetSystemEnvironment(self, envName):
##        u'Gets the given system environment.'
##        #return pEnvironment
##
##    def ListTools(self, pWildcard):
##        u'Gets list of GeoProcessor Tools.'
##        #return ppEnumList
##
##    def ResetEnvironments(self):
##        u'Tests if a given environments value is set or not.'
##        #return 
##
##    def Describe(self, pInputValue, DataType):
##        u'Returns a descriptor object describing the properties of the specified data element.'
##        #return ppDescribe
##
##    def _get(self):
##        u'Indicates whether or not outputs should be overwritten.'
##        #return OverwriteOutput
##    def _set(self, OverwriteOutput):
##        u'Indicates whether or not outputs should be overwritten.'
##    OverwriteOutput = property(_get, _set, doc = _set.__doc__)
##
##    def AddToolbox(self, Toolbox):
##        u'Add the toolbox to the current session.'
##        #return 
##
##    def CopyParameter(self, from, to):
##        u'Copy given tool parameter to another.'
##        #return 
##
##    def ListEnvironments(self, pWildcard):
##        u'Gets list of GeoProcessor Environments.'
##        #return ppEnumList
##
##    def ListIndexes(self, pInputValue, wildCard):
##        u'Returns a collection of indexes in the given table/feature class based on a query string and type.'
##        #return ppDescribe
##
##    @property
##    def ParameterCount(self):
##        u'The number of input tool parameters.'
##        #return Count
##
##    def CreateScratchName(self, Prefix, Suffix, DataType, Workspace):
##        u'Creates a scratch name for the given workspace.'
##        #return outputTableName
##
##    def UpdateCursor(self, pInputValue, WhereClause, SpRef, Fields, sortFields):
##        u'Returns an update cursor object against the given table/feature class.'
##        #return ppCursor
##


# values for enumeration 'esriModelDiagramLevelOrientation'
esriModelDiagramLevelOrientationLeftToRight = 0
esriModelDiagramLevelOrientationBottomToTop = 1
esriModelDiagramLevelOrientationRightToLeft = 2
esriModelDiagramLevelOrientationTopToBottom = 3
esriModelDiagramLevelOrientation = c_int # enum
class IGPTerrainLayer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing terrain layer object.'
    _iid_ = GUID('{B676B9FC-A234-4249-AABC-F7247345C64D}')
    _idlflags_ = ['oleautomation']
IGPTerrainLayer._methods_ = [
]
################################################################
## code template for IGPTerrainLayer implementation
##class IGPTerrainLayer_Impl(object):

class IGPStringHiddenType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of the geoprocessing hidden string data type.'
    _iid_ = GUID('{19FBF4F8-F719-4CC1-AB31-B32889502357}')
    _idlflags_ = ['oleautomation']
IGPStringHiddenType._methods_ = [
]
################################################################
## code template for IGPStringHiddenType implementation
##class IGPStringHiddenType_Impl(object):

class IGPFeatureLayerType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing feature layer data type object.'
    _iid_ = GUID('{34607462-B409-42F6-B020-7849C6FCFB76}')
    _idlflags_ = ['oleautomation']
IGPFeatureLayerType._methods_ = [
]
################################################################
## code template for IGPFeatureLayerType implementation
##class IGPFeatureLayerType_Impl(object):


# values for enumeration 'esriModelDiagramLevelConstraint'
esriModelDiagramLevelConstraintNone = 0
esriModelDiagramLevelConstraintTowardsInput = 1
esriModelDiagramLevelConstraintTowardsOutput = 2
esriModelDiagramLevelConstraint = c_int # enum
class GPImportCacheWorker(CoClass):
    u'Import pre-rendered tile cache worker.'
    _reg_clsid_ = GUID('{29CD3E7A-6191-48E3-A456-83BB15A6C1E4}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPImportCacheWorker._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPFunction]


# values for enumeration 'esriModelDiagramLevelAlignment'
esriModelDiagramLevelAlignmentCenter = 0
esriModelDiagramLevelAlignmentLeft = 1
esriModelDiagramLevelAlignmentRight = 2
esriModelDiagramLevelAlignmentTop = 1
esriModelDiagramLevelAlignmentBottom = 2
esriModelDiagramLevelAlignment = c_int # enum
class IGPFieldMapping(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the field map object.'
    _iid_ = GUID('{7EE8D0E1-D24A-4FC5-9053-678AED37EA8D}')
    _idlflags_ = ['oleautomation']
IGpFieldMappingsObject._methods_ = [
    COMMETHOD([dispid(1), helpstring(u'The true FieldMapping object'), 'propputref'], HRESULT, 'FieldMapping',
              ( ['in'], POINTER(IGPFieldMapping), 'ppFieldMapping' )),
    COMMETHOD([dispid(1), helpstring(u'The true FieldMapping object'), 'propget'], HRESULT, 'FieldMapping',
              ( ['retval', 'out'], POINTER(POINTER(IGPFieldMapping)), 'ppFieldMapping' )),
    COMMETHOD([dispid(2), helpstring(u'Add a table to the mapping object')], HRESULT, 'AddTable',
              ( ['in'], BSTR, 'Table' )),
    COMMETHOD([dispid(3), helpstring(u'Set the workspace for the mapping object'), 'propput'], HRESULT, 'FieldValidationWorkspace',
              ( ['in'], BSTR, 'Workspace' )),
    COMMETHOD([dispid(3), helpstring(u'Set the workspace for the mapping object'), 'propget'], HRESULT, 'FieldValidationWorkspace',
              ( ['retval', 'out'], POINTER(BSTR), 'Workspace' )),
    COMMETHOD([dispid(4), helpstring(u'Get the output fields of the mapping object'), 'propget'], HRESULT, 'Fields',
              ( ['retval', 'out'], POINTER(POINTER(IDispatch)), 'ppFields' )),
    COMMETHOD([dispid(5), helpstring(u'Get the count of fieldmaps within the mapping object'), 'propget'], HRESULT, 'FieldCount',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD([dispid(6), helpstring(u'Remove fieldmaps from the mapping object')], HRESULT, 'RemoveAll'),
    COMMETHOD([dispid(7), helpstring(u'Add a fieldmap to the mapping object')], HRESULT, 'AddFieldMap',
              ( ['in'], POINTER(IDispatch), 'pFieldMap' )),
    COMMETHOD([dispid(8), helpstring(u'Get a fieldmap from the mapping object')], HRESULT, 'GetFieldMap',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IDispatch)), 'ppFieldMap' )),
    COMMETHOD([dispid(9), helpstring(u'Replace a fieldmap within the mapping object')], HRESULT, 'ReplaceFieldMap',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(IDispatch), 'pFieldMap' )),
    COMMETHOD([dispid(10), helpstring(u'Remove a fieldmap from the mapping object')], HRESULT, 'RemoveFieldMap',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([dispid(11), helpstring(u'Find the index of a fieldmap')], HRESULT, 'FindFieldMapIndex',
              ( ['in'], BSTR, 'FieldName' ),
              ( ['retval', 'out'], POINTER(c_int), 'Index' )),
    COMMETHOD([dispid(12), helpstring(u'Initialize the field map by text string')], HRESULT, 'LoadFromString',
              ( ['in'], BSTR, 'valueText' )),
    COMMETHOD([dispid(13), helpstring(u'Get the string representation of the field mappings object')], HRESULT, 'ExportToString',
              ( ['retval', 'out'], POINTER(BSTR), 'valueText' )),
]
################################################################
## code template for IGpFieldMappingsObject implementation
##class IGpFieldMappingsObject_Impl(object):
##    def RemoveFieldMap(self, Index):
##        u'Remove a fieldmap from the mapping object'
##        #return 
##
##    @property
##    def FieldMapping(self, ppFieldMapping):
##        u'The true FieldMapping object'
##        #return 
##
##    def ExportToString(self):
##        u'Get the string representation of the field mappings object'
##        #return valueText
##
##    @property
##    def Fields(self):
##        u'Get the output fields of the mapping object'
##        #return ppFields
##
##    @property
##    def FieldCount(self):
##        u'Get the count of fieldmaps within the mapping object'
##        #return pCount
##
##    def FindFieldMapIndex(self, FieldName):
##        u'Find the index of a fieldmap'
##        #return Index
##
##    def AddTable(self, Table):
##        u'Add a table to the mapping object'
##        #return 
##
##    def RemoveAll(self):
##        u'Remove fieldmaps from the mapping object'
##        #return 
##
##    def ReplaceFieldMap(self, Index, pFieldMap):
##        u'Replace a fieldmap within the mapping object'
##        #return 
##
##    def _get(self):
##        u'Set the workspace for the mapping object'
##        #return Workspace
##    def _set(self, Workspace):
##        u'Set the workspace for the mapping object'
##    FieldValidationWorkspace = property(_get, _set, doc = _set.__doc__)
##
##    def GetFieldMap(self, Index):
##        u'Get a fieldmap from the mapping object'
##        #return ppFieldMap
##
##    def AddFieldMap(self, pFieldMap):
##        u'Add a fieldmap to the mapping object'
##        #return 
##
##    def LoadFromString(self, valueText):
##        u'Initialize the field map by text string'
##        #return 
##

class IGPSpatialReference(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing spatial reference object.'
    _iid_ = GUID('{DC09967A-6A3F-4952-9869-8C6A14537AC8}')
    _idlflags_ = ['oleautomation']
IGPSpatialReference._methods_ = [
    COMMETHOD(['propget', helpstring(u'The spatial reference of the geoprocessing spatial reference object.')], HRESULT, 'SpatialReference',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference)), 'ppSpatialReference' )),
    COMMETHOD(['propputref', helpstring(u'The spatial reference of the geoprocessing spatial reference object.')], HRESULT, 'SpatialReference',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'ppSpatialReference' )),
]
################################################################
## code template for IGPSpatialReference implementation
##class IGPSpatialReference_Impl(object):
##    def SpatialReference(self, ppSpatialReference):
##        u'The spatial reference of the geoprocessing spatial reference object.'
##        #return 
##

class IGPFieldMap(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the sub field map object.'
    _iid_ = GUID('{64DC7625-BB93-4CAD-BBCA-C4BF5E9F6807}')
    _idlflags_ = ['oleautomation']
IGPFieldMapping._methods_ = [
    COMMETHOD([helpstring(u'Initializes the field map object using the field information from the given table/workspace.')], HRESULT, 'Initialize',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'DETables' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspace), 'Workspace' )),
    COMMETHOD(['propget', helpstring(u'Get the mapped fields.')], HRESULT, 'Fields',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFields)), 'Fields' )),
    COMMETHOD([helpstring(u'Remove all of the internal field maps.')], HRESULT, 'RemoveAll'),
    COMMETHOD(['propget', helpstring(u'Get the count of the internal field maps.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD([helpstring(u'Get a specific internal field map.')], HRESULT, 'GetFieldMap',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IGPFieldMap)), 'FieldMap' )),
    COMMETHOD([helpstring(u'Replace a specific internal field map.')], HRESULT, 'ReplaceFieldMap',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(IGPFieldMap), 'FieldMap' )),
    COMMETHOD([helpstring(u'Add an internal field map.')], HRESULT, 'AddFieldMap',
              ( ['in'], POINTER(IGPFieldMap), 'FieldMap' )),
    COMMETHOD([helpstring(u'Add an internal field map.')], HRESULT, 'FindFieldMap',
              ( ['in'], BSTR, 'FieldName' ),
              ( ['retval', 'out'], POINTER(c_int), 'Index' )),
    COMMETHOD([helpstring(u'Remove an internal field map.')], HRESULT, 'RemoveFieldMap',
              ( ['in'], c_int, 'Index' )),
]
################################################################
## code template for IGPFieldMapping implementation
##class IGPFieldMapping_Impl(object):
##    @property
##    def Count(self):
##        u'Get the count of the internal field maps.'
##        #return Count
##
##    def RemoveFieldMap(self, Index):
##        u'Remove an internal field map.'
##        #return 
##
##    def FindFieldMap(self, FieldName):
##        u'Add an internal field map.'
##        #return Index
##
##    @property
##    def Fields(self):
##        u'Get the mapped fields.'
##        #return Fields
##
##    def RemoveAll(self):
##        u'Remove all of the internal field maps.'
##        #return 
##
##    def ReplaceFieldMap(self, Index, FieldMap):
##        u'Replace a specific internal field map.'
##        #return 
##
##    def GetFieldMap(self, Index):
##        u'Get a specific internal field map.'
##        #return FieldMap
##
##    def Initialize(self, DETables, Workspace):
##        u'Initializes the field map object using the field information from the given table/workspace.'
##        #return 
##
##    def AddFieldMap(self, FieldMap):
##        u'Add an internal field map.'
##        #return 
##

IGpFieldMapObject._methods_ = [
    COMMETHOD([dispid(1), helpstring(u'The true FieldMap object'), 'propputref'], HRESULT, 'FieldMap',
              ( ['in'], POINTER(IGPFieldMap), 'ppFieldMap' )),
    COMMETHOD([dispid(1), helpstring(u'The true FieldMap object'), 'propget'], HRESULT, 'FieldMap',
              ( ['retval', 'out'], POINTER(POINTER(IGPFieldMap)), 'ppFieldMap' )),
    COMMETHOD([dispid(2), helpstring(u'Merge rule for the sub-fields.'), 'propput'], HRESULT, 'MergeRule',
              ( ['in'], BSTR, 'rule' )),
    COMMETHOD([dispid(2), helpstring(u'Merge rule for the sub-fields.'), 'propget'], HRESULT, 'MergeRule',
              ( ['retval', 'out'], POINTER(BSTR), 'rule' )),
    COMMETHOD([dispid(3), helpstring(u'Join delimiter for the sub-fields.'), 'propput'], HRESULT, 'JoinDelimiter',
              ( ['in'], BSTR, 'Delimiter' )),
    COMMETHOD([dispid(3), helpstring(u'Join delimiter for the sub-fields.'), 'propget'], HRESULT, 'JoinDelimiter',
              ( ['retval', 'out'], POINTER(BSTR), 'Delimiter' )),
    COMMETHOD([dispid(5), helpstring(u'Get the properties field'), 'propget'], HRESULT, 'OutputField',
              ( ['retval', 'out'], POINTER(POINTER(IDispatch)), 'ppField' )),
    COMMETHOD([dispid(5), helpstring(u'Get the properties field'), 'propput'], HRESULT, 'OutputField',
              ( ['in'], POINTER(IDispatch), 'ppField' )),
    COMMETHOD([dispid(6), helpstring(u'Add a sub-field.')], HRESULT, 'AddInputField',
              ( ['in'], BSTR, 'Table' ),
              ( ['in'], BSTR, 'Field' ),
              ( ['in', 'optional'], POINTER(VARIANT), 'pStartTextValue' ),
              ( ['in', 'optional'], POINTER(VARIANT), 'pEndTextValue' )),
    COMMETHOD([dispid(7), helpstring(u'Get a sub-field table.')], HRESULT, 'GetInputTableName',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(BSTR), 'pTable' )),
    COMMETHOD([dispid(8), helpstring(u'Get a sub-field.')], HRESULT, 'GetInputFieldName',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(BSTR), 'pField' )),
    COMMETHOD([dispid(9), helpstring(u'Get a sub-field start text position.')], HRESULT, 'GetStartTextPosition',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(c_int), 'pStart' )),
    COMMETHOD([dispid(10), helpstring(u'Get a sub-field end text position.')], HRESULT, 'GetEndTextPosition',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(c_int), 'pEnd' )),
    COMMETHOD([dispid(11), helpstring(u'Get the count of sub-fields.'), 'propget'], HRESULT, 'InputFieldCount',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD([dispid(12), helpstring(u'Remove all sub-fields.')], HRESULT, 'RemoveAll'),
    COMMETHOD([dispid(13), helpstring(u'Remove a given sub-field')], HRESULT, 'RemoveInputField',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([dispid(14), helpstring(u'Find a given sub-field')], HRESULT, 'FindInputFieldIndex',
              ( ['in'], BSTR, 'Table' ),
              ( ['in'], BSTR, 'Field' ),
              ( ['retval', 'out'], POINTER(c_int), 'Index' )),
    COMMETHOD([dispid(15), helpstring(u'Set a sub-field start text position.')], HRESULT, 'SetStartTextPosition',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'Start' )),
    COMMETHOD([dispid(16), helpstring(u'Set a sub-field end text position.')], HRESULT, 'SetEndTextPosition',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'end' )),
]
################################################################
## code template for IGpFieldMapObject implementation
##class IGpFieldMapObject_Impl(object):
##    def RemoveInputField(self, Index):
##        u'Remove a given sub-field'
##        #return 
##
##    def FindInputFieldIndex(self, Table, Field):
##        u'Find a given sub-field'
##        #return Index
##
##    def GetInputTableName(self, Index):
##        u'Get a sub-field table.'
##        #return pTable
##
##    def SetStartTextPosition(self, Index, Start):
##        u'Set a sub-field start text position.'
##        #return 
##
##    def GetEndTextPosition(self, Index):
##        u'Get a sub-field end text position.'
##        #return pEnd
##
##    def _get(self):
##        u'Get the properties field'
##        #return ppField
##    def _set(self, ppField):
##        u'Get the properties field'
##    OutputField = property(_get, _set, doc = _set.__doc__)
##
##    def RemoveAll(self):
##        u'Remove all sub-fields.'
##        #return 
##
##    def SetEndTextPosition(self, Index, end):
##        u'Set a sub-field end text position.'
##        #return 
##
##    @property
##    def InputFieldCount(self):
##        u'Get the count of sub-fields.'
##        #return pCount
##
##    @property
##    def FieldMap(self, ppFieldMap):
##        u'The true FieldMap object'
##        #return 
##
##    def _get(self):
##        u'Join delimiter for the sub-fields.'
##        #return Delimiter
##    def _set(self, Delimiter):
##        u'Join delimiter for the sub-fields.'
##    JoinDelimiter = property(_get, _set, doc = _set.__doc__)
##
##    def GetStartTextPosition(self, Index):
##        u'Get a sub-field start text position.'
##        #return pStart
##
##    def AddInputField(self, Table, Field, pStartTextValue, pEndTextValue):
##        u'Add a sub-field.'
##        #return 
##
##    def GetInputFieldName(self, Index):
##        u'Get a sub-field.'
##        #return pField
##
##    def _get(self):
##        u'Merge rule for the sub-fields.'
##        #return rule
##    def _set(self, rule):
##        u'Merge rule for the sub-fields.'
##    MergeRule = property(_get, _set, doc = _set.__doc__)
##

class IGPParameterInfos(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of the parameter information array.'
    _iid_ = GUID('{0785EAB1-F0F7-4CF7-A813-2E67612B0FE4}')
    _idlflags_ = ['oleautomation']
class IGPParameterInfo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of the parameter information.'
    _iid_ = GUID('{CEE0770D-1B0F-40A5-AAD8-57A40B88B13F}')
    _idlflags_ = ['oleautomation']
IGPParameterInfos._methods_ = [
    COMMETHOD(['propget', helpstring(u'The size of the array.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propget', helpstring(u'The parameter at the specified index in the array.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IGPParameterInfo)), 'ppParmInfo' )),
    COMMETHOD([helpstring(u'Adds a parameter to the array.')], HRESULT, 'Add',
              ( ['in'], POINTER(IGPParameterInfo), 'pParmInfo' )),
    COMMETHOD([helpstring(u'Adds a parameter to the array at the specified index.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(IGPParameterInfo), 'pParmInfo' )),
    COMMETHOD([helpstring(u'Removes a parameter from the array.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all parameters from the array.')], HRESULT, 'RemoveAll'),
]
################################################################
## code template for IGPParameterInfos implementation
##class IGPParameterInfos_Impl(object):
##    @property
##    def Count(self):
##        u'The size of the array.'
##        #return pCount
##
##    def Insert(self, Index, pParmInfo):
##        u'Adds a parameter to the array at the specified index.'
##        #return 
##
##    def Remove(self, Index):
##        u'Removes a parameter from the array.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'The parameter at the specified index in the array.'
##        #return ppParmInfo
##
##    def RemoveAll(self):
##        u'Removes all parameters from the array.'
##        #return 
##
##    def Add(self, pParmInfo):
##        u'Adds a parameter to the array.'
##        #return 
##

class IMdModel(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to properties/methods of a model.'
    _iid_ = GUID('{DFAF9812-6B7B-4AC2-AD6B-BBDEF1EDE0E6}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'esriMdElementState'
esriMdElementNotValid = 0
esriMdElementReadyToRun = 1
esriMdElementHasRun = 2
esriMdElementState = c_int # enum

# values for enumeration 'esriMdDirection'
esriMdDirectionInput = 0
esriMdDirectionOutput = 1
esriMdDirection = c_int # enum

# values for enumeration 'esriMdConnectionType'
esriMdConnectionTypeAny = 0
esriMdConnectionTypeParameter = 101
esriMdConnectionTypeEnvironment = 102
esriMdConnectionTypePrecondition = 103
esriMdConnectionTypeFeedback = 104
esriMdConnectionType = c_int # enum
class IEnumMdElement(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to properties/methods of an enumeration of model elements.'
    _iid_ = GUID('{6BBF52E6-80D2-48D9-A8E7-6EEEE9761F24}')
    _idlflags_ = ['oleautomation']
IMdElement._methods_ = [
    COMMETHOD(['propget', helpstring(u'Unique identifier of the model element.')], HRESULT, 'ID',
              ( ['retval', 'out'], POINTER(c_int), 'identifier' )),
    COMMETHOD(['propput', helpstring(u'Unique identifier of the model element.')], HRESULT, 'ID',
              ( ['in'], c_int, 'identifier' )),
    COMMETHOD(['propget', helpstring(u'Name of the model element.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'Name of the model element.')], HRESULT, 'Name',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the model element has been marked for validation/execution.')], HRESULT, 'Marked',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Marked' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the model element has been marked for validation/execution.')], HRESULT, 'Marked',
              ( ['in'], VARIANT_BOOL, 'Marked' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the model element is current (i.e., has been created).')], HRESULT, 'Current',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Current' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the model element is current (i.e., has been created).')], HRESULT, 'Current',
              ( ['in'], VARIANT_BOOL, 'Current' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the model element is valid.')], HRESULT, 'Valid',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Valid' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the model element is valid.')], HRESULT, 'Valid',
              ( ['in'], VARIANT_BOOL, 'Valid' )),
    COMMETHOD(['propget', helpstring(u'The model the model element is contained within.')], HRESULT, 'Model',
              ( ['retval', 'out'], POINTER(POINTER(IMdModel)), 'Model' )),
    COMMETHOD(['propputref', helpstring(u'The model the model element is contained within.')], HRESULT, 'Model',
              ( ['in'], POINTER(IMdModel), 'Model' )),
    COMMETHOD(['propget', helpstring(u'The state of the model element.')], HRESULT, 'State',
              ( ['retval', 'out'], POINTER(esriMdElementState), 'State' )),
    COMMETHOD([helpstring(u'Returns an enumeration of model elements that are dependent on the model element in the given direction and of the given connection type.')], HRESULT, 'GetDependents',
              ( ['in'], esriMdDirection, 'Direction' ),
              ( ['in'], esriMdConnectionType, 'ConnectionType' ),
              ( ['retval', 'out'], POINTER(POINTER(IEnumMdElement)), 'ppElements' )),
    COMMETHOD([helpstring(u'Returns whether or not the model element is dependent on the given model element in the given direction of the given connection type.')], HRESULT, 'IsDependentOn',
              ( ['in'], POINTER(IMdElement), 'pMdElement' ),
              ( ['in'], esriMdDirection, 'Direction' ),
              ( ['in'], esriMdConnectionType, 'ConnectionType' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pDependentOn' )),
    COMMETHOD([helpstring(u'Validates the model element.')], HRESULT, 'Validate',
              ( ['in'], VARIANT_BOOL, 'updateValues' ),
              ( ['in'], POINTER(IGPEnvironmentManager), 'pEnvMgr' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPMessages)), 'Messages' )),
    COMMETHOD([helpstring(u'Returns the messages returned from the last call to Validate().')], HRESULT, 'GetMessages',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPMessages)), 'Messages' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the model element has been altered by the user.')], HRESULT, 'Altered',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Altered' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the model element has been altered by the user.')], HRESULT, 'Altered',
              ( ['in'], VARIANT_BOOL, 'Altered' )),
]
################################################################
## code template for IMdElement implementation
##class IMdElement_Impl(object):
##    def _get(self):
##        u'Indicates if the model element has been altered by the user.'
##        #return Altered
##    def _set(self, Altered):
##        u'Indicates if the model element has been altered by the user.'
##    Altered = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Name of the model element.'
##        #return Name
##    def _set(self, Name):
##        u'Name of the model element.'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the model element has been marked for validation/execution.'
##        #return Marked
##    def _set(self, Marked):
##        u'Indicates if the model element has been marked for validation/execution.'
##    Marked = property(_get, _set, doc = _set.__doc__)
##
##    def IsDependentOn(self, pMdElement, Direction, ConnectionType):
##        u'Returns whether or not the model element is dependent on the given model element in the given direction of the given connection type.'
##        #return pDependentOn
##
##    def _get(self):
##        u'Indicates if the model element is current (i.e., has been created).'
##        #return Current
##    def _set(self, Current):
##        u'Indicates if the model element is current (i.e., has been created).'
##    Current = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def State(self):
##        u'The state of the model element.'
##        #return State
##
##    def _get(self):
##        u'Indicates if the model element is valid.'
##        #return Valid
##    def _set(self, Valid):
##        u'Indicates if the model element is valid.'
##    Valid = property(_get, _set, doc = _set.__doc__)
##
##    def GetMessages(self):
##        u'Returns the messages returned from the last call to Validate().'
##        #return Messages
##
##    def GetDependents(self, Direction, ConnectionType):
##        u'Returns an enumeration of model elements that are dependent on the model element in the given direction and of the given connection type.'
##        #return ppElements
##
##    def Model(self, Model):
##        u'The model the model element is contained within.'
##        #return 
##
##    def _get(self):
##        u'Unique identifier of the model element.'
##        #return identifier
##    def _set(self, identifier):
##        u'Unique identifier of the model element.'
##    ID = property(_get, _set, doc = _set.__doc__)
##
##    def Validate(self, updateValues, pEnvMgr):
##        u'Validates the model element.'
##        #return Messages
##

class GPLine(CoClass):
    u'Geoprocessing value object containing a line geometry.'
    _reg_clsid_ = GUID('{435F80E4-6DB2-476B-B977-B06BFF52F978}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPLine(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing line object.'
    _iid_ = GUID('{16880BE0-EC1E-46BD-9F87-82D1FCBD6009}')
    _idlflags_ = ['oleautomation']
class IGPLine2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing line object.'
    _iid_ = GUID('{1248339D-7B76-4A43-8FE0-752B1BF9D39A}')
    _idlflags_ = ['oleautomation']
GPLine._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue, IGPLine, IGPLine2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

class GPToolboxEvents2Helper(CoClass):
    u'Helper for working with IGPToolboxEvents2.'
    _reg_clsid_ = GUID('{830A2707-ACCF-41ED-B04F-7947A62544DE}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPToolboxEvents2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to toolbox events.'
    _iid_ = GUID('{48870875-7B09-4EA3-A166-B1A499DCA57A}')
    _idlflags_ = ['oleautomation']
GPToolboxEvents2Helper._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown]
GPToolboxEvents2Helper._outgoing_interfaces_ = [IGPToolboxEvents2]

class GPLasDatasetLayerType(CoClass):
    u'Geoprocessing Las Dataset Layer Data Type.'
    _reg_clsid_ = GUID('{3049BD39-6BC1-41FD-BEF4-55015DF0E402}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPLasDatasetLayerType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPLasDatasetLayerType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDEGeoDatasetType, comtypes.gen._1CE6AC65_43F5_4529_8FC0_D7ED298E4F1A_0_10_2.IGPLayerType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGxFilterInfo, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class IGPRasterGDBEnvStatisticsType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to raster IGPRasterGDBEnvStatisticsType.'
    _iid_ = GUID('{6B42B229-54F9-4763-AE0D-75CD1B7D0D6D}')
    _idlflags_ = ['oleautomation']
IGPRasterGDBEnvStatisticsType._methods_ = [
]
################################################################
## code template for IGPRasterGDBEnvStatisticsType implementation
##class IGPRasterGDBEnvStatisticsType_Impl(object):

class GPServerCachingManageMapCacheTilesWorker(CoClass):
    u'Manage pre-rendered tile cache for the Map.'
    _reg_clsid_ = GUID('{EFFAE3C7-D681-428C-9FE4-B28AF7208C0A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPServerCachingManageMapCacheTilesWorker._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPFunction]

class IGPEnvironmentImpl(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the implementation properties/methods of a geoprocessing environment object.'
    _iid_ = GUID('{88F22DF4-DF9C-4EAD-8A22-7878AEA615FE}')
    _idlflags_ = ['oleautomation']
IGPEnvironmentImpl._methods_ = [
    COMMETHOD(['propget', helpstring(u'The parent geoprocessing environment object.')], HRESULT, 'Parent',
              ( ['retval', 'out'], POINTER(POINTER(IGPEnvironment)), 'env' )),
    COMMETHOD(['propputref', helpstring(u'The parent geoprocessing environment object.')], HRESULT, 'Parent',
              ( ['in'], POINTER(IGPEnvironment), 'env' )),
    COMMETHOD([helpstring(u'The value.')], HRESULT, 'GetValue',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue)), 'ppValue' )),
]
################################################################
## code template for IGPEnvironmentImpl implementation
##class IGPEnvironmentImpl_Impl(object):
##    def Parent(self, env):
##        u'The parent geoprocessing environment object.'
##        #return 
##
##    def GetValue(self):
##        u'The value.'
##        #return ppValue
##

class IGPZDomain(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing z domain object.'
    _iid_ = GUID('{61F57F76-AB2E-4EFC-9D2D-BEB6D13E1C54}')
    _idlflags_ = ['oleautomation']
IGPZDomain._methods_ = [
    COMMETHOD([helpstring(u'Set the Z false origin and units.')], HRESULT, 'SetZFalseOriginAndUnits',
              ( ['in'], c_double, 'falseZ' ),
              ( ['in'], c_double, 'zUnits' )),
    COMMETHOD([helpstring(u'Get the Z false origin and units.')], HRESULT, 'GetZFalseOriginAndUnits',
              ( ['out'], POINTER(c_double), 'falseZ' ),
              ( ['out'], POINTER(c_double), 'zUnits' )),
    COMMETHOD([helpstring(u'Get the Z domain extent.')], HRESULT, 'GetZDomain',
              ( ['out'], POINTER(c_double), 'outZMin' ),
              ( ['out'], POINTER(c_double), 'outZMax' )),
    COMMETHOD([helpstring(u'Set the z domain extent.')], HRESULT, 'SetZDomain',
              ( ['in'], c_double, 'inZMin' ),
              ( ['in'], c_double, 'inZMax' )),
    COMMETHOD([helpstring(u'Set the z domain from a spatial reference.')], HRESULT, 'SetZDomainFromSpatialReference',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'pSpRef' )),
    COMMETHOD([helpstring(u'Get the spatial reference of the z domain.')], HRESULT, 'GetSpatialReference',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference)), 'ppSpatialReference' )),
]
################################################################
## code template for IGPZDomain implementation
##class IGPZDomain_Impl(object):
##    def GetSpatialReference(self):
##        u'Get the spatial reference of the z domain.'
##        #return ppSpatialReference
##
##    def GetZDomain(self):
##        u'Get the Z domain extent.'
##        #return outZMin, outZMax
##
##    def SetZDomain(self, inZMin, inZMax):
##        u'Set the z domain extent.'
##        #return 
##
##    def SetZDomainFromSpatialReference(self, pSpRef):
##        u'Set the z domain from a spatial reference.'
##        #return 
##
##    def SetZFalseOriginAndUnits(self, falseZ, zUnits):
##        u'Set the Z false origin and units.'
##        #return 
##
##    def GetZFalseOriginAndUnits(self):
##        u'Get the Z false origin and units.'
##        #return falseZ, zUnits
##

class GPStringType(CoClass):
    u'Geoprocessing String Data Type.'
    _reg_clsid_ = GUID('{33292DAC-A6C4-40E3-89FA-F20FC4EC6EB9}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPStringType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of the geoprocessing string data type.'
    _iid_ = GUID('{5D22430A-6CBF-4C39-AA6A-1B3460AE022D}')
    _idlflags_ = ['oleautomation']
GPStringType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, IGPStringType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class GPDateType(CoClass):
    u'Geoprocessing Date Data Type.'
    _reg_clsid_ = GUID('{753BD649-CAEC-4594-A2A0-3D11070AB800}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPDateType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of the geoprocessing date data type.'
    _iid_ = GUID('{297C9841-95FC-4AC0-9696-DCA85F9379F9}')
    _idlflags_ = ['oleautomation']
GPDateType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, IGPDateType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class GPRasterData(CoClass):
    u'GPRasterData Class'
    _reg_clsid_ = GUID('{A4D40FBD-CFD8-4D8D-94D1-3726C6FF792F}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPRasterData(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    _iid_ = GUID('{D49252E7-FFE3-4FF5-AF8E-789DDF5C27D1}')
    _idlflags_ = ['oleautomation']
GPRasterData._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue, IGPRasterData, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize]

class GPFeatureRecordSetLayer(CoClass):
    u'GPFeatureRecordSetLayer Class'
    _reg_clsid_ = GUID('{1CE6115F-A472-49A1-A228-88F601B3134E}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPFeatureRecordSetLayer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    _iid_ = GUID('{B164C639-9EDB-4E18-8BE3-AF375772E652}')
    _idlflags_ = ['oleautomation']
class IGPLayerDescription(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    _iid_ = GUID('{36C58BCC-44B2-443F-80DB-A6BE31F31E41}')
    _idlflags_ = ['oleautomation']
class IGPFeatureRecordSet(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    _iid_ = GUID('{FF17EC66-8C89-4FBB-882D-483F4DD37065}')
    _idlflags_ = ['oleautomation']
class IGPRecordSet(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    _iid_ = GUID('{23A1155C-92FB-4FCD-871C-A7FFB9B326AB}')
    _idlflags_ = ['oleautomation']
GPFeatureRecordSetLayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue, IGPFeatureRecordSetLayer, IGPLayerDescription, IGPFeatureRecordSet, IGPRecordSet, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize]

class GPExportCache(CoClass):
    u'Export pre-rendered tile cache.'
    _reg_clsid_ = GUID('{B94D3E46-BC76-4CBB-98DD-DFE8E76578F4}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPExportCache._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPFunction]

class GPVariantType(CoClass):
    u'Geoprocessing Variant Data Type.'
    _reg_clsid_ = GUID('{099DDB6D-34D8-476A-B97F-8D41EA6D8602}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPVariantType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of the geoprocessing variant data type.'
    _iid_ = GUID('{DB858B7D-0DEF-40B5-B14E-9E0CE3179C83}')
    _idlflags_ = ['oleautomation']
class IGPBooleanType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of the geoprocessing boolean data type.'
    _iid_ = GUID('{2D048984-3719-4AE2-A8C4-41C3B5732F2C}')
    _idlflags_ = ['oleautomation']
class IGPDoubleType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of the geoprocessing double data type.'
    _iid_ = GUID('{076229BA-A6F2-4CD6-8487-59DF289C3791}')
    _idlflags_ = ['oleautomation']
class IGPLongType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of the geoprocessing long integer data type.'
    _iid_ = GUID('{EAC01FC1-A5F1-4AAB-83A6-C14A12AA3AD7}')
    _idlflags_ = ['oleautomation']
GPVariantType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, IGPVariantType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, IGPBooleanType, IGPDateType, IGPStringType, IGPDoubleType, IGPLongType]

class MdModelEventsHelper(CoClass):
    u'Helper for working with IMdModelEvents.'
    _reg_clsid_ = GUID('{BE4D1CB5-FB58-4E20-BE9F-6ADCFF30FBA7}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IMdModelEvents(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to model events.'
    _iid_ = GUID('{A19A5A0E-CE7E-4FA2-9F0A-A027922EA20B}')
    _idlflags_ = ['oleautomation']
MdModelEventsHelper._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown]
MdModelEventsHelper._outgoing_interfaces_ = [IMdModelEvents]

class GPRasterDataLayerType(CoClass):
    u'Raster Data Layer Data Type.'
    _reg_clsid_ = GUID('{7C798B94-A88D-4EEB-84DA-76E83C75A6F8}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPRasterDataLayerType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    _iid_ = GUID('{50F2D5BD-C4AF-4ED8-B306-939AF734C522}')
    _idlflags_ = ['oleautomation']
GPRasterDataLayerType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPRasterDataLayerType, IGPRasterDataType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class IGPJobServerExe(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of the gp job server.'
    _iid_ = GUID('{54220DE4-3782-4D8A-B231-9BD7BC61B802}')
    _idlflags_ = ['oleautomation']
IGPJobServerExe._methods_ = [
    COMMETHOD([helpstring(u'Executes the server request and returns the server response.')], HRESULT, 'HandleBinaryRequest',
              ( ['in'], POINTER(_midlSAFEARRAY(c_ubyte)), 'request' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' ),
              ( ['retval', 'out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'response' )),
]
################################################################
## code template for IGPJobServerExe implementation
##class IGPJobServerExe_Impl(object):
##    def HandleBinaryRequest(self, request, pTrackCancel):
##        u'Executes the server request and returns the server response.'
##        #return response
##

class GPRasterCatalogLayerType(CoClass):
    u'Geoprocessing Raster Catalog Layer Data Type.'
    _reg_clsid_ = GUID('{30A6D32F-F02E-4107-896C-BDA10F67BA35}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPRasterCatalogLayerType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing raster catalog layer data type object.'
    _iid_ = GUID('{DC9010E2-5D1A-4238-BD6F-A42C9A6EFF2A}')
    _idlflags_ = ['oleautomation']
class IGPTableViewType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing table view data type object.'
    _iid_ = GUID('{8210D3A5-AB1D-4038-A5EC-4B8EC02DEFD3}')
    _idlflags_ = ['oleautomation']
GPRasterCatalogLayerType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPRasterCatalogLayerType, comtypes.gen._1CE6AC65_43F5_4529_8FC0_D7ED298E4F1A_0_10_2.IGPLayerType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDEGeoDatasetType, IGPTableViewType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGxFilterInfo, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class GPMeasureFieldsDomain(CoClass):
    u'Object for filtering acceptable measure fields.'
    _reg_clsid_ = GUID('{C06E2425-30D9-4C9D-8CD3-7FE243B3AFCB}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPFieldDomain(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing field domain object.'
    _iid_ = GUID('{638026F2-F9C4-4A39-A6C6-6932A0D51FE3}')
    _idlflags_ = ['oleautomation']
GPMeasureFieldsDomain._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDomain, IGPFieldDomain, IGPMeasureFieldsDomain]

class GPLongType(CoClass):
    u'Geoprocessing Long Integer Data Type.'
    _reg_clsid_ = GUID('{B680A910-7C41-4F40-A6E7-14B921265D86}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPLongType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, IGPLongType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class GPFeatureRecordSetLayerType(CoClass):
    u'Feature Record Set Layer Data Type.'
    _reg_clsid_ = GUID('{066DB363-BC31-468B-BDD1-D5E68E255041}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPFeatureRecordSetLayerType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    _iid_ = GUID('{D13BBAB1-9601-46D1-9316-861711301E61}')
    _idlflags_ = ['oleautomation']
class IGPFeatureRecordSetType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    _iid_ = GUID('{3573641E-ECF7-4F61-96F4-D795F97728CD}')
    _idlflags_ = ['oleautomation']
class IGPRecordSetType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    _iid_ = GUID('{C3D97E1B-8397-476B-B51B-F20F4AF5F9D3}')
    _idlflags_ = ['oleautomation']
GPFeatureRecordSetLayerType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPFeatureRecordSetLayerType, IGPFeatureRecordSetType, IGPRecordSetType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

IGPToolboxEvents._methods_ = [
    COMMETHOD([helpstring(u'Called when the toolbox is deleted.')], HRESULT, 'OnToolboxDeleted'),
    COMMETHOD([helpstring(u'Called when the toolbox is renamed.')], HRESULT, 'OnToolboxRenamed',
              ( ['in'], BSTR, 'oldName' ),
              ( ['in'], BSTR, 'newName' )),
    COMMETHOD([helpstring(u'Called when a tool is added to the toolbox.')], HRESULT, 'OnToolAdded',
              ( ['in'], POINTER(IGPTool), 'Tool' )),
    COMMETHOD([helpstring(u'Called when a tool is deleted from the toolbox.')], HRESULT, 'OnToolDeleted',
              ( ['in'], POINTER(IGPTool), 'Tool' )),
    COMMETHOD([helpstring(u'Called when a tool is stored to the toolbox.')], HRESULT, 'OnToolStored',
              ( ['in'], POINTER(IGPTool), 'Tool' )),
    COMMETHOD([helpstring(u"Called when a tool's state has changed.")], HRESULT, 'OnToolStateChanged',
              ( ['in'], POINTER(IGPTool), 'Tool' )),
]
################################################################
## code template for IGPToolboxEvents implementation
##class IGPToolboxEvents_Impl(object):
##    def OnToolDeleted(self, Tool):
##        u'Called when a tool is deleted from the toolbox.'
##        #return 
##
##    def OnToolboxDeleted(self):
##        u'Called when the toolbox is deleted.'
##        #return 
##
##    def OnToolboxRenamed(self, oldName, newName):
##        u'Called when the toolbox is renamed.'
##        #return 
##
##    def OnToolStored(self, Tool):
##        u'Called when a tool is stored to the toolbox.'
##        #return 
##
##    def OnToolStateChanged(self, Tool):
##        u"Called when a tool's state has changed."
##        #return 
##
##    def OnToolAdded(self, Tool):
##        u'Called when a tool is added to the toolbox.'
##        #return 
##

class GPAnalysisCellSize(CoClass):
    u'GeoProcessor Analysis CellSize object.'
    _reg_clsid_ = GUID('{D042DFF8-EAA2-4706-B3DE-6E62CFEDA76A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPAnalysisCellSize(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing analysis cellsize object.'
    _iid_ = GUID('{50BB8678-6ABC-4D81-8D32-D74EB37025A3}')
    _idlflags_ = ['oleautomation']
GPAnalysisCellSize._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPAnalysisCellSize, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

class GPESRISyncFeatureServiceReplica(CoClass):
    u'Synchronize Feature Service Replica ASync.'
    _reg_clsid_ = GUID('{42C961B1-60B8-4258-863C-D4D77623871F}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPESRISyncFeatureServiceReplica._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPFunction]

class GPESRICreateFeatureServiceReplica(CoClass):
    u'Creates Feature Service Replica ASync.'
    _reg_clsid_ = GUID('{F1E917EC-2244-4667-9A90-D187D56C9214}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPESRICreateFeatureServiceReplica._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPFunction]

class GPCoordinateSystemType(CoClass):
    u'Geoprocessing Coordinate System Data Type.'
    _reg_clsid_ = GUID('{7C9BDD1E-EAEB-4468-BC61-5572F460DCBC}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPCoordinateSystemType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, IGPCoordinateSystemType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class IGPRasterGDBEnvCompressionType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to raster IGPRasterGDBEnvCompressionType.'
    _iid_ = GUID('{24CE9699-8EB6-487A-9E5C-FCF8CA7FB753}')
    _idlflags_ = ['oleautomation']
IGPRasterGDBEnvCompressionType._methods_ = [
]
################################################################
## code template for IGPRasterGDBEnvCompressionType implementation
##class IGPRasterGDBEnvCompressionType_Impl(object):


# values for enumeration 'esriGPSchemaRasterFormatType'
esriGPSchemaRasterFormatIMG = 0
esriGPSchemaRasterFormatGRID = 1
esriGPSchemaRasterFormatType = c_int # enum
class GPRasterDataLayer(CoClass):
    u'GPRasterDataLayer Class'
    _reg_clsid_ = GUID('{FF917E83-04F9-4328-A336-2CFD3C12D889}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPRasterDataLayer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    _iid_ = GUID('{364EBA4A-5A84-4011-BF6B-B92364A43989}')
    _idlflags_ = ['oleautomation']
GPRasterDataLayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue, IGPRasterDataLayer, IGPLayerDescription, IGPRasterData, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize]

class GPDate(CoClass):
    u'Geoprocessing value object containing a date value.'
    _reg_clsid_ = GUID('{BED6F22B-AD8E-440E-8DD5-B416396B6FD4}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPVariant(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing variant object.'
    _iid_ = GUID('{C872280B-FD3D-497F-931A-BF13ACAED8FD}')
    _idlflags_ = ['oleautomation']
class IGPDate(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing date object.'
    _iid_ = GUID('{4F9669D7-7C2B-46C5-80CF-FB6E275A149B}')
    _idlflags_ = ['oleautomation']
GPDate._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue, IGPVariant, IGPDate, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

class StandaloneCatalogPathParser(CoClass):
    u'Standalone Catalog Path Parser.'
    _reg_clsid_ = GUID('{12D0E49A-BB69-4310-A490-091D135B1920}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
StandaloneCatalogPathParser._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IParseNameString, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspaceDataElements]

class IWPSServer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the available WPS Server properties and methods.'
    _iid_ = GUID('{DC684999-07EF-44BD-84EB-B9F103000C1D}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'esriWPSHttpVerb'
esriWPSGet = 0
esriWPSPost = 1
esriWPSHttpVerb = c_int # enum
IWPSServer._methods_ = [
    COMMETHOD([helpstring(u'Handle a WPS request.')], HRESULT, 'GetData',
              ( ['in'], esriWPSHttpVerb, 'httpVerb' ),
              ( ['in'], BSTR, 'request' ),
              ( ['retval', 'out'], POINTER(BSTR), 'responseUrl' )),
    COMMETHOD([helpstring(u'Handle setting WPS Server parameter.')], HRESULT, 'SetParameter',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Value' )),
]
################################################################
## code template for IWPSServer implementation
##class IWPSServer_Impl(object):
##    def SetParameter(self, Name, Value):
##        u'Handle setting WPS Server parameter.'
##        #return 
##
##    def GetData(self, httpVerb, request):
##        u'Handle a WPS request.'
##        #return responseUrl
##

class GPDataFileType(CoClass):
    u'Data File Type.'
    _reg_clsid_ = GUID('{226BEB3F-98F2-4240-A9CE-3ED7F81DF106}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPDataFileType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    _iid_ = GUID('{8CA643A2-8081-42FE-ADCC-89D4256DCFE6}')
    _idlflags_ = ['oleautomation']
GPDataFileType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPDataFileType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]


# values for enumeration 'esriGPSchemaCellSizeType'
esriGPSchemaCellSizeUnset = -1
esriGPSchemaCellSizeFirstDependency = 0
esriGPSchemaCellSizeMin = 1
esriGPSchemaCellSizeMax = 2
esriGPSchemaCellSizeEnvironment = 3
esriGPSchemaCellSizeAsSpecified = 4
esriGPSchemaCellSizeType = c_int # enum
class GPRasterBuilderType(CoClass):
    u'Raster Builder Data Type.'
    _reg_clsid_ = GUID('{7D879108-039C-4F3A-8457-495AACB0AC63}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPRasterBuilderType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    _iid_ = GUID('{ECE517DC-ECF7-433E-BBD6-2DC0954F2167}')
    _idlflags_ = ['oleautomation']
GPRasterBuilderType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPRasterBuilderType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class IEnumGPDataType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to enumeric GPDataType.'
    _iid_ = GUID('{026A8DF6-199C-41FB-A286-A67230D8371C}')
    _idlflags_ = ['oleautomation']
IEnumGPDataType._methods_ = [
    COMMETHOD([helpstring(u'Returns the next GPDataType in the enumeric object.')], HRESULT, 'Next',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType)), 'ppType' )),
    COMMETHOD([helpstring(u'Resets the enumeric object.')], HRESULT, 'Reset'),
]
################################################################
## code template for IEnumGPDataType implementation
##class IEnumGPDataType_Impl(object):
##    def Reset(self):
##        u'Resets the enumeric object.'
##        #return 
##
##    def Next(self):
##        u'Returns the next GPDataType in the enumeric object.'
##        #return ppType
##

class GPDouble(CoClass):
    u'Geoprocessing value object containing a double value.'
    _reg_clsid_ = GUID('{374C4574-5D6E-4D77-9A67-5489C6BBE932}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPDouble(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing double object.'
    _iid_ = GUID('{0C354808-969D-43D0-89B6-72FA7F1CE56D}')
    _idlflags_ = ['oleautomation']
GPDouble._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue, IGPVariant, IGPDouble, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

class IMdProcess(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to properties/methods of a model process.'
    _iid_ = GUID('{890D0DD1-0F70-4235-9D01-09DE87EC949C}')
    _idlflags_ = ['oleautomation']
class IMdParameter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to properties/methods of a model parameter.'
    _iid_ = GUID('{9411CD59-50B7-4852-8DFF-A0C33F622216}')
    _idlflags_ = ['oleautomation']
IMdProcess._methods_ = [
    COMMETHOD(['propget', helpstring(u'The tool name object of the tool currently associated with the model process.')], HRESULT, 'ToolName',
              ( ['retval', 'out'], POINTER(POINTER(IGPToolName)), 'Name' )),
    COMMETHOD(['propget', helpstring(u'The tool object currently associated with the model process.')], HRESULT, 'Tool',
              ( ['retval', 'out'], POINTER(POINTER(IGPTool)), 'Tool' )),
    COMMETHOD(['propputref', helpstring(u'The tool object currently associated with the model process.')], HRESULT, 'Tool',
              ( ['in'], POINTER(IGPTool), 'Tool' )),
    COMMETHOD(['propget', helpstring(u'The collection of parameter objects used when validating/executing the process.')], HRESULT, 'Parameters',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'params' )),
    COMMETHOD(['propget', helpstring(u'The collection of input parameter objects used when validating/executing the process.')], HRESULT, 'InputParameters',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'params' )),
    COMMETHOD(['propget', helpstring(u'The collection of output parameter objects used when validating/executing the process.')], HRESULT, 'OutputParameters',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'params' )),
    COMMETHOD(['propget', helpstring(u'The parameter object with the specified name.')], HRESULT, 'Parameter',
              ( ['in'], BSTR, 'Name' ),
              ( ['retval', 'out'], POINTER(POINTER(IMdParameter)), 'Value' )),
    COMMETHOD(['propget', helpstring(u'The set of overriding environment values used when validating/executing the process.')], HRESULT, 'EnvironmentManager',
              ( ['retval', 'out'], POINTER(POINTER(IGPEnvironmentManager)), 'ppEnvMgr' )),
    COMMETHOD(['propputref', helpstring(u'The set of overriding environment values used when validating/executing the process.')], HRESULT, 'EnvironmentManager',
              ( ['in'], POINTER(IGPEnvironmentManager), 'ppEnvMgr' )),
    COMMETHOD([helpstring(u'Sets the value of specified process parameter.')], HRESULT, 'SetParameterValue',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'Value' )),
    COMMETHOD([helpstring(u'Returns the value of specified process parameter.')], HRESULT, 'GetParameterValue',
              ( ['in'], BSTR, 'Name' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue)), 'Value' )),
    COMMETHOD([helpstring(u'Executes the current tool associated with the process using the current parameter values.')], HRESULT, 'Execute',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'TrackCancel' ),
              ( ['in'], POINTER(IGPEnvironmentManager), 'pEnvMgr' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPMessages), 'Messages' )),
    COMMETHOD([helpstring(u'Returns whether or not the current tool associated with the process is valid.')], HRESULT, 'IsToolValid',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsValid' )),
    COMMETHOD([helpstring(u'Returns whether or not the current tool associated with the process needs to be repaired (e.g., the tool parameters have changed).')], HRESULT, 'NeedsRepair',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'NeedsRepair' )),
    COMMETHOD([helpstring(u'Updates/repairs the processes collection of parameters to match the tool currently associated with the process.')], HRESULT, 'RepairParameters'),
    COMMETHOD(['propget', helpstring(u'Collection of variables that must be executed prior to executing the process.')], HRESULT, 'Preconditions',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'ppValues' )),
    COMMETHOD(['propputref', helpstring(u'Collection of variables that must be executed prior to executing the process.')], HRESULT, 'Preconditions',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'ppValues' )),
]
################################################################
## code template for IMdProcess implementation
##class IMdProcess_Impl(object):
##    def EnvironmentManager(self, ppEnvMgr):
##        u'The set of overriding environment values used when validating/executing the process.'
##        #return 
##
##    def RepairParameters(self):
##        u'Updates/repairs the processes collection of parameters to match the tool currently associated with the process.'
##        #return 
##
##    @property
##    def Parameters(self):
##        u'The collection of parameter objects used when validating/executing the process.'
##        #return params
##
##    def NeedsRepair(self):
##        u'Returns whether or not the current tool associated with the process needs to be repaired (e.g., the tool parameters have changed).'
##        #return NeedsRepair
##
##    def IsToolValid(self):
##        u'Returns whether or not the current tool associated with the process is valid.'
##        #return IsValid
##
##    def Tool(self, Tool):
##        u'The tool object currently associated with the model process.'
##        #return 
##
##    @property
##    def OutputParameters(self):
##        u'The collection of output parameter objects used when validating/executing the process.'
##        #return params
##
##    def SetParameterValue(self, Name, Value):
##        u'Sets the value of specified process parameter.'
##        #return 
##
##    def GetParameterValue(self, Name):
##        u'Returns the value of specified process parameter.'
##        #return Value
##
##    @property
##    def ToolName(self):
##        u'The tool name object of the tool currently associated with the model process.'
##        #return Name
##
##    def Execute(self, TrackCancel, pEnvMgr, Messages):
##        u'Executes the current tool associated with the process using the current parameter values.'
##        #return 
##
##    @property
##    def InputParameters(self):
##        u'The collection of input parameter objects used when validating/executing the process.'
##        #return params
##
##    def Preconditions(self, ppValues):
##        u'Collection of variables that must be executed prior to executing the process.'
##        #return 
##
##    @property
##    def Parameter(self, Name):
##        u'The parameter object with the specified name.'
##        #return Value
##

class GPServerObjectDescription(CoClass):
    u'GPServerObjectDescription Class.'
    _reg_clsid_ = GUID('{E99B6049-44B2-497C-89FC-86382514FC7B}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPServerObjectDescription._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._746F6817_89BB_4490_9829_83CA25FD505A_0_10_2.IServerObjectDescription]

class GPParameterInfo(CoClass):
    u'GPParameterInfo Class.'
    _reg_clsid_ = GUID('{D3595417-981C-4AB2-94D5-9F973E08B65B}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPParameterInfo._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPParameterInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize]

class GPStringHidden(CoClass):
    u'Geoprocessing value object containing a hidden string value.'
    _reg_clsid_ = GUID('{94CFEB8F-482E-4896-B3FC-5A727ED5DF74}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPStringHidden(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing hidden string object.'
    _iid_ = GUID('{792440F2-D661-4128-8DED-AC32A2219991}')
    _idlflags_ = ['oleautomation']
class IGPString(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing string object.'
    _iid_ = GUID('{FB2CD654-2BF9-45C4-8BF5-F03C3214AB84}')
    _idlflags_ = ['oleautomation']
GPStringHidden._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue, IGPVariant, IGPStringHidden, IGPString, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

class GPMosaicLayer(CoClass):
    u'Geoprocessing Mosaic Layer Value.'
    _reg_clsid_ = GUID('{BF2DB6EA-4517-44CB-A7C4-ADF9F63D4E35}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPMosaicLayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue, IGPMosaicLayer, IGPCompositeLayer, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDescribe, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._1CE6AC65_43F5_4529_8FC0_D7ED298E4F1A_0_10_2.IGPLayer, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDEGeoDataset]

class GPToolInfo(CoClass):
    u'GPToolInfo Class.'
    _reg_clsid_ = GUID('{A8B64980-52F0-417E-812D-3619E1FAFE28}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPToolInfo._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPToolInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize]

class IGPToolboxName(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to methods on a toolbox name object.'
    _iid_ = GUID('{83A52DE6-383A-4F93-8D9D-4354D948EBB1}')
    _idlflags_ = ['oleautomation']
IEnumGPToolboxName._methods_ = [
    COMMETHOD([helpstring(u'Returns the next toolbox name in the enumeration.')], HRESULT, 'Next',
              ( ['retval', 'out'], POINTER(POINTER(IGPToolboxName)), 'Name' )),
    COMMETHOD([helpstring(u'Resets the current position of the enumeration.')], HRESULT, 'Reset'),
]
################################################################
## code template for IEnumGPToolboxName implementation
##class IEnumGPToolboxName_Impl(object):
##    def Reset(self):
##        u'Resets the current position of the enumeration.'
##        #return 
##
##    def Next(self):
##        u'Returns the next toolbox name in the enumeration.'
##        #return Name
##

class GPTopologyLayer(CoClass):
    u'Geoprocessing value object containing a topology layer value.'
    _reg_clsid_ = GUID('{C17D7148-66E8-498D-855B-6C5D352EF69A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPTopologyLayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPTopologyLayer, comtypes.gen._1CE6AC65_43F5_4529_8FC0_D7ED298E4F1A_0_10_2.IGPLayer, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDEGeoDataset, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDescribe, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

class GPLong(CoClass):
    u'Geoprocessing value object containing a long integer value.'
    _reg_clsid_ = GUID('{30ED7F47-12D9-4C9B-BE8B-7A0AE386E574}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPLong(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing long integer object.'
    _iid_ = GUID('{083665C0-3D3D-42B6-B9BD-7D98B03583E7}')
    _idlflags_ = ['oleautomation']
GPLong._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue, IGPVariant, IGPLong, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

IGPToolInfo._methods_ = [
    COMMETHOD(['propget', helpstring(u'The tool name.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'The tool name.')], HRESULT, 'Name',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'The tool display name.')], HRESULT, 'DisplayName',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'The tool display name.')], HRESULT, 'DisplayName',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'The tool category.')], HRESULT, 'Category',
              ( ['retval', 'out'], POINTER(BSTR), 'Category' )),
    COMMETHOD(['propput', helpstring(u'The tool category.')], HRESULT, 'Category',
              ( ['in'], BSTR, 'Category' )),
    COMMETHOD(['propget', helpstring(u'The url to the tool help.')], HRESULT, 'Help',
              ( ['retval', 'out'], POINTER(BSTR), 'helpUrl' )),
    COMMETHOD(['propput', helpstring(u'The url to the tool help.')], HRESULT, 'Help',
              ( ['in'], BSTR, 'helpUrl' )),
    COMMETHOD(['propget', helpstring(u'The tool parameters.')], HRESULT, 'ParameterInfo',
              ( ['retval', 'out'], POINTER(POINTER(IGPParameterInfos)), 'ppParameterInfos' )),
    COMMETHOD(['propputref', helpstring(u'The tool parameters.')], HRESULT, 'ParameterInfo',
              ( ['in'], POINTER(IGPParameterInfos), 'ppParameterInfos' )),
    COMMETHOD(['propget', helpstring(u'The extent of the tool.')], HRESULT, 'Extent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'ppExtent' )),
    COMMETHOD(['propputref', helpstring(u'The extent of the tool.')], HRESULT, 'Extent',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'ppExtent' )),
]
################################################################
## code template for IGPToolInfo implementation
##class IGPToolInfo_Impl(object):
##    def _get(self):
##        u'The tool category.'
##        #return Category
##    def _set(self, Category):
##        u'The tool category.'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    def ParameterInfo(self, ppParameterInfos):
##        u'The tool parameters.'
##        #return 
##
##    def _get(self):
##        u'The tool name.'
##        #return Name
##    def _set(self, Name):
##        u'The tool name.'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def Extent(self, ppExtent):
##        u'The extent of the tool.'
##        #return 
##
##    def _get(self):
##        u'The tool display name.'
##        #return Name
##    def _set(self, Name):
##        u'The tool display name.'
##    DisplayName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The url to the tool help.'
##        #return helpUrl
##    def _set(self, helpUrl):
##        u'The url to the tool help.'
##    Help = property(_get, _set, doc = _set.__doc__)
##

class GPToolInfos(CoClass):
    u'GPToolInfos Class.'
    _reg_clsid_ = GUID('{6C30C082-89EA-4453-9D94-1E6F117BD3C5}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPToolInfos._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPToolInfos, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class GPZDomainType(CoClass):
    u'Geoprocessing Z Domain Data Type.'
    _reg_clsid_ = GUID('{24B10698-DFC8-491D-BE10-ABE71C05EE71}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPZDomainType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, IGPZDomainType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class GPDataFile(CoClass):
    u'GPDataFile Class'
    _reg_clsid_ = GUID('{763035E4-E5C9-4AAF-A60C-65C38ADDB5EF}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPDataFile(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    _iid_ = GUID('{B3397F01-2785-4CA3-9B30-283B88DE8AA0}')
    _idlflags_ = ['oleautomation']
GPDataFile._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue, IGPDataFile, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize]

class GPTableSchema(CoClass):
    u'Geoprocessing Table Schema object.'
    _reg_clsid_ = GUID('{43B03A71-40C2-48D5-8DCD-817DED2BAAEB}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPTableSchema(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing table schema object.'
    _iid_ = GUID('{C0AE4229-E15A-4A16-BE64-35072DA00279}')
    _idlflags_ = ['oleautomation']
GPTableSchema._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPSchema, IGPTableSchema, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize]

class IGPProtectNames(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    _iid_ = GUID('{F3348DB1-2FE4-429F-943B-0BEF6695DE1B}')
    _idlflags_ = ['hidden']
IGPProtectNames._methods_ = [
    COMMETHOD([], HRESULT, 'IsNull'),
]
################################################################
## code template for IGPProtectNames implementation
##class IGPProtectNames_Impl(object):
##    def IsNull(self):
##        '-no docstring-'
##        #return 
##

class GPPolygonType(CoClass):
    u'Geoprocessing Polygon Data Type.'
    _reg_clsid_ = GUID('{213E3C7F-1CC9-4988-8F3F-A28740D1C6FB}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPPolygonType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of the geoprocessing polygon data type.'
    _iid_ = GUID('{82FD09A1-6352-4E65-8F19-33DB67043CD3}')
    _idlflags_ = ['oleautomation']
GPPolygonType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, IGPPolygonType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class GPEnvelope(CoClass):
    u'Geoprocessing value object containing an envelope value.'
    _reg_clsid_ = GUID('{01A9676B-E251-4A40-8544-5E5B65E2983C}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPEnvelope._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue, IGPEnvelope, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

class GPRasterBuilder(CoClass):
    u'GPRasterBuilder Class'
    _reg_clsid_ = GUID('{2FCC620C-1C8C-4A96-A0F9-465B4AA3EA7A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPRasterBuilder(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    _iid_ = GUID('{CEE2318A-EE01-454F-8AAF-ADE9E4DF9AD6}')
    _idlflags_ = ['oleautomation']
GPRasterBuilder._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue, IGPRasterBuilder, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize]

class IProtectNameGeoprocessing(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to dummy methods protecting name correctness.'
    _iid_ = GUID('{4F37BE4D-3CC6-421D-BDE9-F73D48FF5CB9}')
    _idlflags_ = []
IProtectNameGeoprocessing._methods_ = [
    COMMETHOD([], HRESULT, 'ProtectOLE_HANDLE',
              ( [], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE, 'aHandle' )),
    COMMETHOD([], HRESULT, 'ProtectOLE_COLOR',
              ( [], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_COLOR, 'aColor' )),
]
################################################################
## code template for IProtectNameGeoprocessing implementation
##class IProtectNameGeoprocessing_Impl(object):
##    def ProtectOLE_COLOR(self, aColor):
##        '-no docstring-'
##        #return 
##
##    def ProtectOLE_HANDLE(self, aHandle):
##        '-no docstring-'
##        #return 
##

class IGPToolEdit(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to edit methods on a geoprocessing tool object.'
    _iid_ = GUID('{338E5B19-9464-4CE4-A35B-F73184C1926F}')
    _idlflags_ = ['oleautomation']
IGPToolEdit._methods_ = [
    COMMETHOD([helpstring(u'Returns whether or not the tool can be copied.')], HRESULT, 'CanCopy',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'CanCopy' )),
    COMMETHOD([helpstring(u'Copies the tool to a toolbox.')], HRESULT, 'Copy',
              ( ['in'], POINTER(IUnknown), 'destination' ),
              ( ['retval', 'out'], POINTER(POINTER(IGPTool)), 'Copy' )),
]
################################################################
## code template for IGPToolEdit implementation
##class IGPToolEdit_Impl(object):
##    def CanCopy(self):
##        u'Returns whether or not the tool can be copied.'
##        #return CanCopy
##
##    def Copy(self, destination):
##        u'Copies the tool to a toolbox.'
##        #return Copy
##

class GPParameterInfos(CoClass):
    u'GPParameterInfos Class.'
    _reg_clsid_ = GUID('{B5032EDB-25DB-40C3-9BB8-DCA636F810C9}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPParameterInfos._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPParameterInfos, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class DETool(CoClass):
    u'The tool Data Element.'
    _reg_clsid_ = GUID('{8CD1029A-0B56-436B-B4A6-8F9360CD63D9}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IDETool(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to properties/methods of a tool data element object.'
    _iid_ = GUID('{F6DBD22F-9996-4F7C-B794-564899FF16F4}')
    _idlflags_ = ['oleautomation']
DETool._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDETool, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDEDataset, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataElement, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IMetadata, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDescribe]

class IGPToolExtensionFactoryGen(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to methods on a geoprocessing tool extension factory object.'
    _iid_ = GUID('{50544432-54A5-4317-96EF-A8D51AD09A80}')
    _idlflags_ = ['oleautomation']
class IGPToolExtensionGen(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to methods on a custom geoprocessing tool extension.'
    _iid_ = GUID('{EA078957-3CB7-41B6-82BA-2F67F4B2F64F}')
    _idlflags_ = ['oleautomation']
IGPToolExtensionFactoryGen._methods_ = [
    COMMETHOD(['propget', helpstring(u'The CLSID of the tool extension factory class.')], HRESULT, 'CLSID',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IUID)), 'CLSID' )),
    COMMETHOD(['propget', helpstring(u'Name of the tool extension factory class.')], HRESULT, 'ToolExtensionName',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propget', helpstring(u'A 16x16 bitmap to associate with the tool extension.')], HRESULT, 'SmallImage',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE), 'image' )),
    COMMETHOD(['propget', helpstring(u'A 32x32 bitmap to associate with the tool extension.')], HRESULT, 'LargeImage',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE), 'image' )),
    COMMETHOD(['propget', helpstring(u'A 16x16 bitmap to associate with invalid instances of the tool extension.')], HRESULT, 'SmallInvalidImage',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE), 'image' )),
    COMMETHOD(['propget', helpstring(u'A 32x32 bitmap to associate with invalid instances of the tool extension.')], HRESULT, 'LargeInvalidImage',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE), 'image' )),
    COMMETHOD(['propget', helpstring(u'A 16x16 bitmap to associate with unlicensed instances of the tool extension.')], HRESULT, 'SmallUnlicensedImage',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE), 'image' )),
    COMMETHOD(['propget', helpstring(u'A 32x32 bitmap to associate with unlicensed instances of the tool extension.')], HRESULT, 'LargeUnlicensedImage',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE), 'image' )),
    COMMETHOD([helpstring(u'The default tool extension name.')], HRESULT, 'GetDefaultName',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD([helpstring(u'The default tool extension display name.')], HRESULT, 'GetDefaultDisplayName',
              ( ['retval', 'out'], POINTER(BSTR), 'DisplayName' )),
    COMMETHOD([helpstring(u'The default tool extension description.')], HRESULT, 'GetDefaultDescription',
              ( ['retval', 'out'], POINTER(BSTR), 'Description' )),
    COMMETHOD([helpstring(u'Creates a new instance of a tool extension in the given toolbox.')], HRESULT, 'Create',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE, 'Parent' ),
              ( ['in'], POINTER(IGPToolbox), 'destination' ),
              ( ['retval', 'out'], POINTER(POINTER(IGPToolExtensionGen)), 'ToolExtension' )),
    COMMETHOD([helpstring(u'Called immediately following the creation of a new tool extension.')], HRESULT, 'PostCreateTool',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE, 'Parent' ),
              ( ['in'], POINTER(IGPToolExtensionGen), 'ToolExtension' )),
    COMMETHOD([helpstring(u'Returns whether or not the factory supports editing instances of the tool extension.')], HRESULT, 'CanEdit',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'CanEdit' )),
    COMMETHOD([helpstring(u'Invokes a window to edit a tool extension.')], HRESULT, 'Edit',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE, 'Parent' ),
              ( ['in'], POINTER(IGPToolExtensionGen), 'ToolExtension' )),
]
################################################################
## code template for IGPToolExtensionFactoryGen implementation
##class IGPToolExtensionFactoryGen_Impl(object):
##    def GetDefaultName(self):
##        u'The default tool extension name.'
##        #return Name
##
##    @property
##    def SmallUnlicensedImage(self):
##        u'A 16x16 bitmap to associate with unlicensed instances of the tool extension.'
##        #return image
##
##    def PostCreateTool(self, Parent, ToolExtension):
##        u'Called immediately following the creation of a new tool extension.'
##        #return 
##
##    @property
##    def LargeImage(self):
##        u'A 32x32 bitmap to associate with the tool extension.'
##        #return image
##
##    @property
##    def LargeInvalidImage(self):
##        u'A 32x32 bitmap to associate with invalid instances of the tool extension.'
##        #return image
##
##    @property
##    def LargeUnlicensedImage(self):
##        u'A 32x32 bitmap to associate with unlicensed instances of the tool extension.'
##        #return image
##
##    def GetDefaultDescription(self):
##        u'The default tool extension description.'
##        #return Description
##
##    @property
##    def SmallImage(self):
##        u'A 16x16 bitmap to associate with the tool extension.'
##        #return image
##
##    def CanEdit(self):
##        u'Returns whether or not the factory supports editing instances of the tool extension.'
##        #return CanEdit
##
##    @property
##    def SmallInvalidImage(self):
##        u'A 16x16 bitmap to associate with invalid instances of the tool extension.'
##        #return image
##
##    @property
##    def ToolExtensionName(self):
##        u'Name of the tool extension factory class.'
##        #return Name
##
##    def GetDefaultDisplayName(self):
##        u'The default tool extension display name.'
##        #return DisplayName
##
##    def Edit(self, Parent, ToolExtension):
##        u'Invokes a window to edit a tool extension.'
##        #return 
##
##    @property
##    def CLSID(self):
##        u'The CLSID of the tool extension factory class.'
##        #return CLSID
##
##    def Create(self, Parent, destination):
##        u'Creates a new instance of a tool extension in the given toolbox.'
##        #return ToolExtension
##


# values for enumeration 'esriGPSchemaGeometryType'
esriGPSchemaGeometryUnset = -1
esriGPSchemaGeometryFirstDependency = 0
esriGPSchemaGeometryMin = 1
esriGPSchemaGeometryMax = 2
esriGPSchemaGeometryAsSpecified = 3
esriGPSchemaGeometryUnknown = 4
esriGPSchemaGeometryType = c_int # enum
class GPSpatialReference(CoClass):
    u'Geoprocessing value object containing a spatial reference value.'
    _reg_clsid_ = GUID('{503307EA-4131-456B-9B9A-15989534BE4D}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPSpatialReference._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue, IGPSpatialReference, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, IGPCoordinateSystem, IGPXYDomain, IGPZDomain, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPToolTip]

class IDEToolbox(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to properties/methods of a toolbox data element object.'
    _iid_ = GUID('{13898BAB-BAF8-438C-AE88-CC3F3341B270}')
    _idlflags_ = ['oleautomation']
IDEToolbox._methods_ = [
    COMMETHOD(['propget', helpstring(u'The toolbox alias.')], HRESULT, 'Alias',
              ( ['retval', 'out'], POINTER(BSTR), 'Alias' )),
    COMMETHOD(['propput', helpstring(u'The toolbox alias.')], HRESULT, 'Alias',
              ( ['in'], BSTR, 'Alias' )),
]
################################################################
## code template for IDEToolbox implementation
##class IDEToolbox_Impl(object):
##    def _get(self):
##        u'The toolbox alias.'
##        #return Alias
##    def _set(self, Alias):
##        u'The toolbox alias.'
##    Alias = property(_get, _set, doc = _set.__doc__)
##

class GPMDomainType(CoClass):
    u'Geoprocessing M Domain Data Type.'
    _reg_clsid_ = GUID('{F8319703-04D0-4FA7-809D-62367E7AA8DE}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPMDomainType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, IGPMDomainType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class DEToolbox(CoClass):
    u'The toolbox Data Element.'
    _reg_clsid_ = GUID('{FEC66B23-E62A-466F-B11B-A8A8F2C2504C}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IDEToolbox2(IDEToolbox):
    _case_insensitive_ = True
    u'Provides access to properties/methods of a toolbox data element object.'
    _iid_ = GUID('{A6BFA57E-E24F-4488-B12B-0039E32E7C3E}')
    _idlflags_ = ['oleautomation']
DEToolbox._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDEToolbox2, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDEDataset, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataElement, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IMetadata, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDescribe]

class IGeoProcessorResult2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'The Geoprocessor Result. Provides access to the results of tools.'
    _iid_ = GUID('{23C0C81F-421A-44D9-A123-AE12B3C4E282}')
    _idlflags_ = ['oleautomation']
IGeoProcessorResult2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Get the GeoProcessor return value.')], HRESULT, 'ReturnValue',
              ( ['retval', 'out'], POINTER(VARIANT), 'pRetValue' )),
    COMMETHOD(['propget', helpstring(u'Get the job status.')], HRESULT, 'Status',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriJobStatus), 'Status' )),
    COMMETHOD(['propget', helpstring(u'Get the job ID.')], HRESULT, 'ResultID',
              ( ['retval', 'out'], POINTER(BSTR), 'ResultID' )),
    COMMETHOD([helpstring(u'Return the GPMessages object which will be messages.')], HRESULT, 'GetResultMessages',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPMessages)), 'ppMessages' )),
    COMMETHOD(['propget', helpstring(u'Return the number of messages.')], HRESULT, 'MessageCount',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD([helpstring(u'Return the message description by index.')], HRESULT, 'GetMessage',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(BSTR), 'pMessage' )),
    COMMETHOD([helpstring(u'Return the message severity by index.')], HRESULT, 'GetSeverity',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(c_int), 'pSeverity' )),
    COMMETHOD([helpstring(u'Return the message error code (Error Messages Only) by index.')], HRESULT, 'GetReturnCode',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(c_int), 'pCode' )),
    COMMETHOD([helpstring(u'Return all of the message descriptions.')], HRESULT, 'GetMessages',
              ( ['in'], c_int, 'severity' ),
              ( ['retval', 'out'], POINTER(BSTR), 'pMessages' )),
    COMMETHOD(['propget', helpstring(u'Return the maximum severity of the message.')], HRESULT, 'MaxSeverity',
              ( ['retval', 'out'], POINTER(c_int), 'pSeverity' )),
    COMMETHOD(['propget', helpstring(u'Return the number of outputs.')], HRESULT, 'OutputCount',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD([helpstring(u'Return the output by index.')], HRESULT, 'GetOutput',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue)), 'outputValue' )),
    COMMETHOD(['propget', helpstring(u'Return the number of inputs.')], HRESULT, 'InputCount',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD([helpstring(u'Return the input by index.')], HRESULT, 'GetInput',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue)), 'inputValue' )),
    COMMETHOD([helpstring(u'Cancel the job.')], HRESULT, 'Cancel'),
    COMMETHOD([helpstring(u'Delete the job and all associated data.')], HRESULT, 'GetMapImageURL',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'pParamIndexes' ),
              ( ['in'], c_int, 'Height' ),
              ( ['in'], c_int, 'Width' ),
              ( ['in'], c_int, 'resolution' ),
              ( ['retval', 'out'], POINTER(BSTR), 'URL' )),
    COMMETHOD(['propput', helpstring(u'Get the job status.')], HRESULT, 'Status',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriJobStatus, 'Status' )),
    COMMETHOD(['propput', helpstring(u'Get the job ID.')], HRESULT, 'ResultID',
              ( ['in'], BSTR, 'ResultID' )),
    COMMETHOD(['propget', helpstring(u'Set the GeoProcessor process value.')], HRESULT, 'Process',
              ( ['retval', 'out'], POINTER(POINTER(IMdProcess)), 'Process' )),
    COMMETHOD(['propputref', helpstring(u'Set the GeoProcessor process value.')], HRESULT, 'Process',
              ( ['in'], POINTER(IMdProcess), 'Process' )),
    COMMETHOD(['propget', helpstring(u'Get the GeoProcessor return value.')], HRESULT, 'IsCanceled',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsCanceled' )),
    COMMETHOD(['propget', helpstring(u'Get the GeoProcessor ASync status.')], HRESULT, 'IsAsync',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsAsync' )),
]
################################################################
## code template for IGeoProcessorResult2 implementation
##class IGeoProcessorResult2_Impl(object):
##    def _get(self):
##        u'Get the job status.'
##        #return Status
##    def _set(self, Status):
##        u'Get the job status.'
##    Status = property(_get, _set, doc = _set.__doc__)
##
##    def Process(self, Process):
##        u'Set the GeoProcessor process value.'
##        #return 
##
##    @property
##    def IsAsync(self):
##        u'Get the GeoProcessor ASync status.'
##        #return IsAsync
##
##    def GetResultMessages(self):
##        u'Return the GPMessages object which will be messages.'
##        #return ppMessages
##
##    @property
##    def MessageCount(self):
##        u'Return the number of messages.'
##        #return pCount
##
##    @property
##    def MaxSeverity(self):
##        u'Return the maximum severity of the message.'
##        #return pSeverity
##
##    @property
##    def IsCanceled(self):
##        u'Get the GeoProcessor return value.'
##        #return IsCanceled
##
##    @property
##    def OutputCount(self):
##        u'Return the number of outputs.'
##        #return pCount
##
##    def GetInput(self, Index):
##        u'Return the input by index.'
##        #return inputValue
##
##    def GetOutput(self, Index):
##        u'Return the output by index.'
##        #return outputValue
##
##    def GetMessage(self, Index):
##        u'Return the message description by index.'
##        #return pMessage
##
##    def GetMessages(self, severity):
##        u'Return all of the message descriptions.'
##        #return pMessages
##
##    @property
##    def ReturnValue(self):
##        u'Get the GeoProcessor return value.'
##        #return pRetValue
##
##    def Cancel(self):
##        u'Cancel the job.'
##        #return 
##
##    def GetReturnCode(self, Index):
##        u'Return the message error code (Error Messages Only) by index.'
##        #return pCode
##
##    def GetSeverity(self, Index):
##        u'Return the message severity by index.'
##        #return pSeverity
##
##    def _get(self):
##        u'Get the job ID.'
##        #return ResultID
##    def _set(self, ResultID):
##        u'Get the job ID.'
##    ResultID = property(_get, _set, doc = _set.__doc__)
##
##    def GetMapImageURL(self, pParamIndexes, Height, Width, resolution):
##        u'Delete the job and all associated data.'
##        #return URL
##
##    @property
##    def InputCount(self):
##        u'Return the number of inputs.'
##        #return pCount
##

class GPValues(CoClass):
    u'GPValues Class.'
    _reg_clsid_ = GUID('{C0988D01-3C6C-4B1E-AAB4-695BBE84DAB1}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPValues._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPValues, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class GPType(CoClass):
    u'General Geoprocessing Data Type.'
    _reg_clsid_ = GUID('{69AED191-0644-4985-AF1E-F4C4374C4C70}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of the geoprocessing data type.'
    _iid_ = GUID('{EE1EC477-26C6-449D-9A95-C5F7CEF61BA6}')
    _idlflags_ = ['oleautomation']
GPType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, IGPType]

class GPNetworkDatasetLayer(CoClass):
    u'Network Dataset Layer object.'
    _reg_clsid_ = GUID('{C9C873DC-BA4E-47DB-AE78-75ADB28FA99E}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPNetworkDatasetLayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPNetworkDatasetLayer, comtypes.gen._1CE6AC65_43F5_4529_8FC0_D7ED298E4F1A_0_10_2.IGPLayer, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDEGeoDataset, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDescribe, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

IGPEnvironmentManager._methods_ = [
    COMMETHOD(['propget', helpstring(u'Returns the parent environment manager.')], HRESULT, 'Parent',
              ( ['retval', 'out'], POINTER(POINTER(IGPEnvironmentManager)), 'Parent' )),
    COMMETHOD(['propputref', helpstring(u'Returns the parent environment manager.')], HRESULT, 'Parent',
              ( ['in'], POINTER(IGPEnvironmentManager), 'Parent' )),
    COMMETHOD([helpstring(u'Adds the given geoprocessing environment to the environment manager.')], HRESULT, 'AddEnvironment',
              ( ['in'], POINTER(IGPEnvironment), 'env' )),
    COMMETHOD([helpstring(u'Removes the given geoprocessing environment from the environment manager.')], HRESULT, 'RemoveEnvironment',
              ( ['in'], POINTER(IGPEnvironment), 'env' )),
    COMMETHOD([helpstring(u'Substitues the values of the given array of parameters with the current environment values.')], HRESULT, 'SubstituteEnvironments',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'pParams' )),
    COMMETHOD([helpstring(u'Removes all environments from the environment manager.')], HRESULT, 'RemoveEnvironments'),
    COMMETHOD([helpstring(u'Returns the environments of the environment manager as an array.')], HRESULT, 'GetEnvironments',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'envs' )),
    COMMETHOD([helpstring(u'Returns an array of the environments that have been updated locally.')], HRESULT, 'GetLocalEnvironments',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'envs' )),
    COMMETHOD([helpstring(u'Locates and returns the environment with the specified name.')], HRESULT, 'FindEnvironment',
              ( ['in'], BSTR, 'Name' ),
              ( ['retval', 'out'], POINTER(POINTER(IGPEnvironment)), 'env' )),
    COMMETHOD([helpstring(u'Sets the value of the given environment to the given variant.')], HRESULT, 'PutEnvVariant',
              ( ['in'], POINTER(IGPEnvironment), 'env' ),
              ( ['in'], VARIANT, 'Value' )),
    COMMETHOD([helpstring(u'Returns the value of the given environment as a variant.')], HRESULT, 'GetEnvVariant',
              ( ['in'], POINTER(IGPEnvironment), 'env' ),
              ( ['retval', 'out'], POINTER(VARIANT), 'Value' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether all environments or only local environments are persisted.')], HRESULT, 'PersistAll',
              ( ['in'], VARIANT_BOOL, 'rhs' )),
]
################################################################
## code template for IGPEnvironmentManager implementation
##class IGPEnvironmentManager_Impl(object):
##    def RemoveEnvironment(self, env):
##        u'Removes the given geoprocessing environment from the environment manager.'
##        #return 
##
##    def FindEnvironment(self, Name):
##        u'Locates and returns the environment with the specified name.'
##        #return env
##
##    def PutEnvVariant(self, env, Value):
##        u'Sets the value of the given environment to the given variant.'
##        #return 
##
##    def Parent(self, Parent):
##        u'Returns the parent environment manager.'
##        #return 
##
##    def GetEnvironments(self):
##        u'Returns the environments of the environment manager as an array.'
##        #return envs
##
##    def RemoveEnvironments(self):
##        u'Removes all environments from the environment manager.'
##        #return 
##
##    def GetLocalEnvironments(self):
##        u'Returns an array of the environments that have been updated locally.'
##        #return envs
##
##    def SubstituteEnvironments(self, pParams):
##        u'Substitues the values of the given array of parameters with the current environment values.'
##        #return 
##
##    def GetEnvVariant(self, env):
##        u'Returns the value of the given environment as a variant.'
##        #return Value
##
##    def AddEnvironment(self, env):
##        u'Adds the given geoprocessing environment to the environment manager.'
##        #return 
##
##    def _set(self, rhs):
##        u'Indicates whether all environments or only local environments are persisted.'
##    PersistAll = property(fset = _set, doc = _set.__doc__)
##

class GPCompositeDataType(CoClass):
    u'Geoprocessing Composite Data Type.'
    _reg_clsid_ = GUID('{69E51B7D-0E6E-4EF6-8BE8-275EB9281E13}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPCompositeDataType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing composite data type object.'
    _iid_ = GUID('{161BA20A-15B0-4AF8-AA30-67653EEBE69E}')
    _idlflags_ = ['oleautomation']
GPCompositeDataType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, IGPCompositeDataType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGxFilterInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class IGpDescribeGeometry(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    u'Provides access to the properties and methods of the Describe Geometry object.'
    _iid_ = GUID('{27DFFB2E-7B69-4DDE-8ACA-42B14E37C5F0}')
    _idlflags_ = ['oleautomation']
IGpDescribeGeometry._methods_ = [
    COMMETHOD(['propget', helpstring(u'The geometry type of the geometry object.')], HRESULT, 'Type',
              ( ['retval', 'out'], POINTER(BSTR), 'Type' )),
    COMMETHOD(['propget', helpstring(u'The extent of the geometry object.')], HRESULT, 'Extent',
              ( ['retval', 'out'], POINTER(BSTR), 'Extent' )),
    COMMETHOD(['propget', helpstring(u'The centroid of the geometry object; returns label point if centroid is outside.')], HRESULT, 'Centroid',
              ( ['in', 'optional'], POINTER(VARIANT), 'pInside' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Centroid' )),
    COMMETHOD(['propget', helpstring(u'The true centroid of the geometry object.')], HRESULT, 'TrueCentroid',
              ( ['retval', 'out'], POINTER(BSTR), 'Centroid' )),
    COMMETHOD(['propget', helpstring(u'The (inside) label point of the geometry object.')], HRESULT, 'LabelPoint',
              ( ['retval', 'out'], POINTER(BSTR), 'LabelPoint' )),
    COMMETHOD(['propget', helpstring(u'The first point of the geometry object.')], HRESULT, 'FirstPoint',
              ( ['retval', 'out'], POINTER(BSTR), 'FirstPoint' )),
    COMMETHOD(['propget', helpstring(u'The last point of the geometry object.')], HRESULT, 'LastPoint',
              ( ['retval', 'out'], POINTER(BSTR), 'LastPoint' )),
    COMMETHOD(['propget', helpstring(u'The area of the geometry object.')], HRESULT, 'Area',
              ( ['retval', 'out'], POINTER(c_double), 'Area' )),
    COMMETHOD(['propget', helpstring(u'The length of the geometry object.')], HRESULT, 'Length',
              ( ['retval', 'out'], POINTER(c_double), 'Length' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the geometry object contains more than one part.')], HRESULT, 'IsMultipart',
              ( ['retval', 'out'], POINTER(BSTR), 'multipart' )),
    COMMETHOD(['propget', helpstring(u'The number of parts of the geometry object.')], HRESULT, 'PartCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD([helpstring(u'Returns the part of the geometry object at the specified index.')], HRESULT, 'GetPart',
              ( ['in', 'optional'], POINTER(VARIANT), 'part' ),
              ( ['retval', 'out'], POINTER(POINTER(IDispatch)), 'Points' )),
    COMMETHOD([helpstring(u'Sets the geometry property.')], HRESULT, 'GetGeometry',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry)), 'ppGeom' )),
    COMMETHOD(['propget', helpstring(u'The four corners of the most narrow enclosing rectangle.')], HRESULT, 'HullRectangle',
              ( ['retval', 'out'], POINTER(BSTR), 'rectangle' )),
    COMMETHOD(['propget', helpstring(u'The number of points of the geometry object.')], HRESULT, 'PointCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
]
################################################################
## code template for IGpDescribeGeometry implementation
##class IGpDescribeGeometry_Impl(object):
##    @property
##    def PartCount(self):
##        u'The number of parts of the geometry object.'
##        #return Count
##
##    @property
##    def Area(self):
##        u'The area of the geometry object.'
##        #return Area
##
##    @property
##    def TrueCentroid(self):
##        u'The true centroid of the geometry object.'
##        #return Centroid
##
##    @property
##    def LabelPoint(self):
##        u'The (inside) label point of the geometry object.'
##        #return LabelPoint
##
##    @property
##    def LastPoint(self):
##        u'The last point of the geometry object.'
##        #return LastPoint
##
##    @property
##    def PointCount(self):
##        u'The number of points of the geometry object.'
##        #return Count
##
##    @property
##    def IsMultipart(self):
##        u'Indicates whether the geometry object contains more than one part.'
##        #return multipart
##
##    @property
##    def HullRectangle(self):
##        u'The four corners of the most narrow enclosing rectangle.'
##        #return rectangle
##
##    @property
##    def Length(self):
##        u'The length of the geometry object.'
##        #return Length
##
##    @property
##    def Centroid(self, pInside):
##        u'The centroid of the geometry object; returns label point if centroid is outside.'
##        #return Centroid
##
##    @property
##    def Extent(self):
##        u'The extent of the geometry object.'
##        #return Extent
##
##    def GetPart(self, part):
##        u'Returns the part of the geometry object at the specified index.'
##        #return Points
##
##    @property
##    def FirstPoint(self):
##        u'The first point of the geometry object.'
##        #return FirstPoint
##
##    def GetGeometry(self):
##        u'Sets the geometry property.'
##        #return ppGeom
##
##    @property
##    def Type(self):
##        u'The geometry type of the geometry object.'
##        #return Type
##

class GPResultOptions(CoClass):
    u'GPResultOptions Class.'
    _reg_clsid_ = GUID('{07C5B59E-0717-434E-B594-B00A62B630B1}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPResultOptions2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    _iid_ = GUID('{25842766-41A0-43C7-8718-5E74E20B562E}')
    _idlflags_ = ['oleautomation']
GPResultOptions._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPResultOptions, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, IGPResultOptions2]

class IGPToolBackground(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Tool Background Implementation Interface.'
    _iid_ = GUID('{632F8246-0681-4222-9080-48AD9FADADE7}')
    _idlflags_ = ['oleautomation']
IGPToolBackground._methods_ = [
    COMMETHOD(['propget', helpstring(u'Can this tool run in the background.')], HRESULT, 'CanRunInBackground',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pCanRunInBackground' )),
    COMMETHOD(['propput', helpstring(u'Can this tool run in the background.')], HRESULT, 'CanRunInBackground',
              ( ['in'], VARIANT_BOOL, 'pCanRunInBackground' )),
]
################################################################
## code template for IGPToolBackground implementation
##class IGPToolBackground_Impl(object):
##    def _get(self):
##        u'Can this tool run in the background.'
##        #return pCanRunInBackground
##    def _set(self, pCanRunInBackground):
##        u'Can this tool run in the background.'
##    CanRunInBackground = property(_get, _set, doc = _set.__doc__)
##

class IGPCoverageDomain(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing coverage domain object.'
    _iid_ = GUID('{D11E7450-D497-11D5-9341-0080C71A3226}')
    _idlflags_ = ['oleautomation']
class IGPCoverageFeatureClassDomain(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing coverage feature class domain object.'
    _iid_ = GUID('{197512A0-CD81-11D5-9339-0080C71A3226}')
    _idlflags_ = ['oleautomation']
IGPCoverageDomain._methods_ = [
    COMMETHOD(['propget', helpstring(u'Coverage Feature Class Domain.')], HRESULT, 'CoverageFeatureClassDomain',
              ( ['retval', 'out'], POINTER(POINTER(IGPCoverageFeatureClassDomain)), 'ppDomain' )),
    COMMETHOD(['propputref', helpstring(u'Coverage Feature Class Domain.')], HRESULT, 'CoverageFeatureClassDomain',
              ( ['in'], POINTER(IGPCoverageFeatureClassDomain), 'ppDomain' )),
]
################################################################
## code template for IGPCoverageDomain implementation
##class IGPCoverageDomain_Impl(object):
##    def CoverageFeatureClassDomain(self, ppDomain):
##        u'Coverage Feature Class Domain.'
##        #return 
##

class GPLineType(CoClass):
    u'Geoprocessing Line Data Type.'
    _reg_clsid_ = GUID('{A34980AC-1341-497D-81A7-D2595A342F28}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPLineType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of the geoprocessing line data type.'
    _iid_ = GUID('{AC34D3CB-0338-4D16-A1DA-F34887D83466}')
    _idlflags_ = ['oleautomation']
GPLineType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, IGPLineType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class GPNetworkDatasetLayerType(CoClass):
    u'Network Dataset Layer Type object.'
    _reg_clsid_ = GUID('{92694B15-FE2B-4437-9F14-AAB8E3D746BC}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPNetworkDatasetLayerType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPNetworkDatasetLayerType, comtypes.gen._1CE6AC65_43F5_4529_8FC0_D7ED298E4F1A_0_10_2.IGPLayerType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDEGeoDatasetType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGxFilterInfo, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class GPCalculatorExpressionType(CoClass):
    u'Geoprocessing Field Calc Expression Data Type.'
    _reg_clsid_ = GUID('{958E65E6-79DF-4AEF-A8E2-AB3ACEACAE9A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPCalculatorExpressionType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of the geoprocessing Calculator Expression data type.'
    _iid_ = GUID('{55580184-0998-4EE4-B5E9-81CBC6C171C0}')
    _idlflags_ = ['oleautomation']
GPCalculatorExpressionType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, IGPCalculatorExpressionType, IGPStringType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]


# values for enumeration 'esriModelDiagramNodeType'
esriModelDiagramNodeTypeDataset = 0
esriModelDiagramNodeTypeConstant = 1
esriModelDiagramNodeTypeDerivedDataset = 2
esriModelDiagramNodeTypeDerivedConstant = 3
esriModelDiagramNodeTypeTool = 4
esriModelDiagramNodeTypeLabel = 5
esriModelDiagramNodeTypeIterator = 6
esriModelDiagramNodeTypeStop = 7
esriModelDiagramNodeType = c_int # enum
class IMdModelIteration(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to properties/methods of a model iteration.'
    _iid_ = GUID('{843D1AFE-9026-486E-8525-D2C8A256C82D}')
    _idlflags_ = ['oleautomation']
IMdModelIteration._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates model iteration type.')], HRESULT, 'IterationType',
              ( ['retval', 'out'], POINTER(esriMdIterationType), 'Type' )),
    COMMETHOD(['propput', helpstring(u'Indicates model iteration type.')], HRESULT, 'IterationType',
              ( ['in'], esriMdIterationType, 'Type' )),
    COMMETHOD(['propget', helpstring(u'Number of times to iterate the model.')], HRESULT, 'IterationCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propput', helpstring(u'Number of times to iterate the model.')], HRESULT, 'IterationCount',
              ( ['in'], c_int, 'Count' )),
    COMMETHOD(['propget', helpstring(u'Model iteration variable.')], HRESULT, 'IterationVariable',
              ( ['retval', 'out'], POINTER(POINTER(IMdVariable)), 'ppVariable' )),
    COMMETHOD(['propputref', helpstring(u'Model iteration variable.')], HRESULT, 'IterationVariable',
              ( ['in'], POINTER(IMdVariable), 'ppVariable' )),
    COMMETHOD(['propget', helpstring(u'Current model iteration.')], HRESULT, 'CurrentIteration',
              ( ['retval', 'out'], POINTER(c_int), 'iteration' )),
]
################################################################
## code template for IMdModelIteration implementation
##class IMdModelIteration_Impl(object):
##    def _get(self):
##        u'Indicates model iteration type.'
##        #return Type
##    def _set(self, Type):
##        u'Indicates model iteration type.'
##    IterationType = property(_get, _set, doc = _set.__doc__)
##
##    def IterationVariable(self, ppVariable):
##        u'Model iteration variable.'
##        #return 
##
##    def _get(self):
##        u'Number of times to iterate the model.'
##        #return Count
##    def _set(self, Count):
##        u'Number of times to iterate the model.'
##    IterationCount = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def CurrentIteration(self):
##        u'Current model iteration.'
##        #return iteration
##

IGPEnvironment._methods_ = [
    COMMETHOD(['propget', helpstring(u'Name of the geoprocessing environment.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'Name of the geoprocessing environment.')], HRESULT, 'Name',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'Display name of the geoprocessing environment.')], HRESULT, 'DisplayName',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'Display name of the geoprocessing environment.')], HRESULT, 'DisplayName',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'Category of the geoprocessing environment.')], HRESULT, 'Category',
              ( ['retval', 'out'], POINTER(BSTR), 'Category' )),
    COMMETHOD(['propput', helpstring(u'Category of the geoprocessing environment.')], HRESULT, 'Category',
              ( ['in'], BSTR, 'Category' )),
    COMMETHOD(['propget', helpstring(u'Value of the geoprocessing environment.')], HRESULT, 'Value',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue)), 'Value' )),
    COMMETHOD(['propputref', helpstring(u'Value of the geoprocessing environment.')], HRESULT, 'Value',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'Value' )),
    COMMETHOD(['propget', helpstring(u'Domain of the geoprocessing environment.')], HRESULT, 'Domain',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDomain)), 'Domain' )),
    COMMETHOD(['propputref', helpstring(u'Domain of the geoprocessing environment.')], HRESULT, 'Domain',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDomain), 'Domain' )),
    COMMETHOD(['propget', helpstring(u'Data type of acceptable values of the geoprocessing environment.')], HRESULT, 'DataType',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType)), 'DataType' )),
    COMMETHOD(['propputref', helpstring(u'Data type of acceptable values of the geoprocessing environment.')], HRESULT, 'DataType',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType), 'DataType' )),
    COMMETHOD(['propget', helpstring(u'Display order of the geoprocessing environment.')], HRESULT, 'DisplayOrder',
              ( ['retval', 'out'], POINTER(c_int), 'DisplayOrder' )),
    COMMETHOD(['propput', helpstring(u'Display order of the geoprocessing environment.')], HRESULT, 'DisplayOrder',
              ( ['in'], c_int, 'DisplayOrder' )),
    COMMETHOD(['propget', helpstring(u'Class identifier (CLSID) of the ActiveX control to use to edit the geoprocessing environment.')], HRESULT, 'ControlCLSID',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IUID)), 'CLSID' )),
    COMMETHOD(['propput', helpstring(u'Class identifier (CLSID) of the ActiveX control to use to edit the geoprocessing environment.')], HRESULT, 'ControlCLSID',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IUID), 'CLSID' )),
    COMMETHOD(['propget', helpstring(u'Enumeration of environment names the geoprocessing environment is dependent on.')], HRESULT, 'Dependencies',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IEnumBSTR)), 'Dependencies' )),
    COMMETHOD(['propput', helpstring(u'Enumeration of environment names the geoprocessing environment is dependent on.')], HRESULT, 'Dependencies',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IEnumBSTR), 'Dependencies' )),
    COMMETHOD([helpstring(u'Adds the name of an environment that the geoprocessing environment is dependent on.')], HRESULT, 'AddDependency',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'Name of the (XML) file containing the default metadata for this environment object.')], HRESULT, 'MetadataFile',
              ( ['retval', 'out'], POINTER(BSTR), 'File' )),
    COMMETHOD(['propput', helpstring(u'Name of the (XML) file containing the default metadata for this environment object.')], HRESULT, 'MetadataFile',
              ( ['in'], BSTR, 'File' )),
]
################################################################
## code template for IGPEnvironment implementation
##class IGPEnvironment_Impl(object):
##    def _get(self):
##        u'Category of the geoprocessing environment.'
##        #return Category
##    def _set(self, Category):
##        u'Category of the geoprocessing environment.'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    def Domain(self, Domain):
##        u'Domain of the geoprocessing environment.'
##        #return 
##
##    def _get(self):
##        u'Display name of the geoprocessing environment.'
##        #return Name
##    def _set(self, Name):
##        u'Display name of the geoprocessing environment.'
##    DisplayName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Name of the geoprocessing environment.'
##        #return Name
##    def _set(self, Name):
##        u'Name of the geoprocessing environment.'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def DataType(self, DataType):
##        u'Data type of acceptable values of the geoprocessing environment.'
##        #return 
##
##    def _get(self):
##        u'Name of the (XML) file containing the default metadata for this environment object.'
##        #return File
##    def _set(self, File):
##        u'Name of the (XML) file containing the default metadata for this environment object.'
##    MetadataFile = property(_get, _set, doc = _set.__doc__)
##
##    def Value(self, Value):
##        u'Value of the geoprocessing environment.'
##        #return 
##
##    def AddDependency(self, Name):
##        u'Adds the name of an environment that the geoprocessing environment is dependent on.'
##        #return 
##
##    def _get(self):
##        u'Enumeration of environment names the geoprocessing environment is dependent on.'
##        #return Dependencies
##    def _set(self, Dependencies):
##        u'Enumeration of environment names the geoprocessing environment is dependent on.'
##    Dependencies = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Class identifier (CLSID) of the ActiveX control to use to edit the geoprocessing environment.'
##        #return CLSID
##    def _set(self, CLSID):
##        u'Class identifier (CLSID) of the ActiveX control to use to edit the geoprocessing environment.'
##    ControlCLSID = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Display order of the geoprocessing environment.'
##        #return DisplayOrder
##    def _set(self, DisplayOrder):
##        u'Display order of the geoprocessing environment.'
##    DisplayOrder = property(_get, _set, doc = _set.__doc__)
##

class GeoProcessor(CoClass):
    u'GeoProcessor Access.'
    _reg_clsid_ = GUID('{5374EC4C-1AA2-4829-A811-DE624ECEC23F}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGeoProcessor(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'The Geoprocessor. Provides access to toolboxes and tools.'
    _iid_ = GUID('{EFDDE95C-61FC-419D-BE35-E5F18C7DF160}')
    _idlflags_ = ['oleautomation']
class IGeoProcessor2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'The Geoprocessor. Provides access to toolboxes and tools.'
    _iid_ = GUID('{CDAD9319-2080-4C89-91C6-B679AE671975}')
    _idlflags_ = ['oleautomation']
GeoProcessor._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGeoProcessor, IGeoProcessor2]

class GpDescribeField(CoClass):
    u'Geoprocessing DescribeField object.'
    _reg_clsid_ = GUID('{540B9C6B-D49F-4218-B206-67789E19BE07}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GpDescribeField._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch, IGpDescribeField]

class GpSpRefObject(CoClass):
    u'Geoprocessing Spatial Reference object.'
    _reg_clsid_ = GUID('{BAAF3EDA-4828-4F31-9240-091CC27AD380}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GpSpRefObject._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch, IGpSpRefObject]


# values for enumeration 'esriGPSchemaExtentType'
esriGPSchemaExtentUnset = -1
esriGPSchemaExtentFirstDependency = 0
esriGPSchemaExtentIntersection = 1
esriGPSchemaExtentUnion = 2
esriGPSchemaExtentEnvironment = 3
esriGPSchemaExtentAsSpecified = 4
esriGPSchemaExtentType = c_int # enum
IGPRasterDataType._methods_ = [
]
################################################################
## code template for IGPRasterDataType implementation
##class IGPRasterDataType_Impl(object):

class GPXYDomain(CoClass):
    u'Geoprocessing XY Domain object.'
    _reg_clsid_ = GUID('{9776287B-3D47-4DB7-801C-D679D7AA6872}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPXYDomain._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue, IGPXYDomain, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

class GPResult(CoClass):
    u'GPResult Class.'
    _reg_clsid_ = GUID('{E1E4E281-9880-41BD-A226-84280A264071}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPResult._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPResult, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize]

class GPCoverageDomain(CoClass):
    u'Geoprocessing Coverage Domain.'
    _reg_clsid_ = GUID('{56781190-D49B-11D5-9341-0080C71A3226}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPCoverageDomain._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDomain, IGPCoverageDomain, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGxFilterInfo]

class GPParseString(CoClass):
    u'Helper class used to parse strings based upon a token separator.'
    _reg_clsid_ = GUID('{9D1636D7-383A-45C1-B2E8-29AC59127827}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPParseString(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing parse string object.'
    _iid_ = GUID('{05BEBF04-93DB-4B17-97BD-B158792C6625}')
    _idlflags_ = ['oleautomation']
GPParseString._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPParseString, IGPParseString2]

class GpVirtualPathParser(CoClass):
    u'InMemory Path Parser.'
    _reg_clsid_ = GUID('{3F619C99-9F7B-42E3-98C8-8D75A9B7ECD6}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GpVirtualPathParser._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IParseNameString, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspaceDataElements]

IMdModelEvents._methods_ = [
    COMMETHOD([helpstring(u'Called when the execution of a process begins.')], HRESULT, 'OnBeginProcessExecution',
              ( ['in'], POINTER(IMdProcess), 'Process' )),
    COMMETHOD([helpstring(u'Called when the execution of a process ends.')], HRESULT, 'OnEndProcessExecution',
              ( ['in'], POINTER(IMdProcess), 'Process' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPMessages), 'Messages' )),
    COMMETHOD([helpstring(u'Called when the process parameters changed.')], HRESULT, 'OnProcessChanged',
              ( ['in'], POINTER(IMdProcess), 'Process' )),
]
################################################################
## code template for IMdModelEvents implementation
##class IMdModelEvents_Impl(object):
##    def OnBeginProcessExecution(self, Process):
##        u'Called when the execution of a process begins.'
##        #return 
##
##    def OnEndProcessExecution(self, Process, Messages):
##        u'Called when the execution of a process ends.'
##        #return 
##
##    def OnProcessChanged(self, Process):
##        u'Called when the process parameters changed.'
##        #return 
##

IGPLayerDescription._methods_ = [
    COMMETHOD(['propget', helpstring(u'The layer drawing description.')], HRESULT, 'LayerDrawingDescription',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.ILayerDrawingDescription)), 'ppDesc' )),
    COMMETHOD(['propputref', helpstring(u'The layer drawing description.')], HRESULT, 'LayerDrawingDescription',
              ( ['in'], POINTER(comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.ILayerDrawingDescription), 'ppDesc' )),
    COMMETHOD([helpstring(u'Get the layer renderer.')], HRESULT, 'GetRenderer',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppRenderer' )),
]
################################################################
## code template for IGPLayerDescription implementation
##class IGPLayerDescription_Impl(object):
##    def GetRenderer(self):
##        u'Get the layer renderer.'
##        #return ppRenderer
##
##    def LayerDrawingDescription(self, ppDesc):
##        u'The layer drawing description.'
##        #return 
##

class GPArcInfoItemChoiceList(CoClass):
    u'Object for generating ArcInfo item choice list.'
    _reg_clsid_ = GUID('{90024360-658F-4604-8A7C-1F98B80D94EE}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPArcInfoItemChoiceList._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPChoiceList]

class GPFieldChoiceList(CoClass):
    u'Object for generating field choice list.'
    _reg_clsid_ = GUID('{3E103003-9A7A-4CEF-9E86-2F76FC3E58FA}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPFieldChoiceList._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPChoiceList]

class GPGroupLayer(CoClass):
    u'Geoprocessing Group Layer value.'
    _reg_clsid_ = GUID('{10957268-803E-4CB4-BD9C-C2B660B98BDF}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPGroupLayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue, IGPGroupLayer, IGPCompositeLayer, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDescribe, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._1CE6AC65_43F5_4529_8FC0_D7ED298E4F1A_0_10_2.IGPLayer, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDEGeoDataset]

class GPUtilities(CoClass):
    u'Helper object with common geoprocessing utility methods.'
    _reg_clsid_ = GUID('{59E42101-2F33-4B6D-8CEE-EED9D98D1957}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPUtilities(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing utilities object.'
    _iid_ = GUID('{32F06B8F-A395-4F4E-B24F-52BBEF06A036}')
    _idlflags_ = ['oleautomation']
class IGPUtilities2(IGPUtilities):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing utilities object.'
    _iid_ = GUID('{D57E3B9B-5481-4F28-9F31-F0B8756B53B9}')
    _idlflags_ = ['oleautomation']
class IGPUtilities3(IGPUtilities2):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing utilities object.'
    _iid_ = GUID('{EAFC0938-C62E-43D5-B9CA-CB0045155860}')
    _idlflags_ = ['oleautomation']
GPUtilities._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPUtilities, IGPUtilities2, IGPUtilities3, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPMessageManager]

class GPGroupLayerType(CoClass):
    u'Geoprocessing Group Layer Data Type.'
    _reg_clsid_ = GUID('{74E68823-FE6C-4234-9E31-8C51BB144078}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPGroupLayerType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to GPGroupLayerType objects.'
    _iid_ = GUID('{F52F5841-ED18-4AD2-A1FA-0A6A6BCD0B22}')
    _idlflags_ = ['oleautomation']
GPGroupLayerType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, IGPGroupLayerType, IGPCompositeLayerType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._1CE6AC65_43F5_4529_8FC0_D7ED298E4F1A_0_10_2.IGPLayerType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDEGeoDatasetType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGxFilterInfo]

class GPFeatureSolutionsResult(CoClass):
    u'Helper object with common geoprocessing feature solutions results.'
    _reg_clsid_ = GUID('{AD8CFE38-129E-4443-8899-B668F4FE51CB}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPFeatureSolutionsResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing feature solutions results object.'
    _iid_ = GUID('{8B2BF9D3-8B25-4C2E-836B-B047D25D0D1A}')
    _idlflags_ = ['oleautomation']
GPFeatureSolutionsResult._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPFeatureSolutionsResult]

IGPRecordSetType._methods_ = [
]
################################################################
## code template for IGPRecordSetType implementation
##class IGPRecordSetType_Impl(object):

class AGSCatalogPathParser(CoClass):
    u'ArcGIS Server Catalog Path Parser.'
    _reg_clsid_ = GUID('{57169266-9686-4C3A-800B-6A094B4A856F}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
AGSCatalogPathParser._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IParseNameString, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspaceDataElements]

class GPCadastralFabricLayerType(CoClass):
    u'Geoprocessing Cadastral Fabric Layer Data Type.'
    _reg_clsid_ = GUID('{CF42933A-35FA-4C4C-92C4-F6699B95D281}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPCadastralFabricLayerType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, IGPCadastralFabricLayerType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._1CE6AC65_43F5_4529_8FC0_D7ED298E4F1A_0_10_2.IGPLayerType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDEGeoDatasetType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGxFilterInfo]

class GPGdbAnnoDomain(CoClass):
    u'Geoprocessing GeoDatabase Annotation Feature Class Domain.'
    _reg_clsid_ = GUID('{07DB9832-C818-41D3-86D7-138F84B0A33F}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPAnnoDomain(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing annotation feature class domain object.'
    _iid_ = GUID('{753D8941-7034-4234-9A5F-10C1643283D8}')
    _idlflags_ = ['oleautomation']
GPGdbAnnoDomain._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDomain, IGPAnnoDomain, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGxFilterInfo]

IGPToolName._methods_ = [
    COMMETHOD(['propget', helpstring(u'The display name of the tool name object.')], HRESULT, 'DisplayName',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'The display name of the tool name object.')], HRESULT, 'DisplayName',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'The description of the tool name object.')], HRESULT, 'Description',
              ( ['retval', 'out'], POINTER(BSTR), 'Description' )),
    COMMETHOD(['propput', helpstring(u'The description of the tool name object.')], HRESULT, 'Description',
              ( ['in'], BSTR, 'Description' )),
    COMMETHOD(['propget', helpstring(u'The category of the tool name object.')], HRESULT, 'ToolCategory',
              ( ['retval', 'out'], POINTER(BSTR), 'Path' )),
    COMMETHOD(['propput', helpstring(u'The category of the tool name object.')], HRESULT, 'ToolCategory',
              ( ['in'], BSTR, 'Path' )),
    COMMETHOD(['propget', helpstring(u'The tool type of the tool name.')], HRESULT, 'ToolType',
              ( ['retval', 'out'], POINTER(esriGPToolType), 'Type' )),
    COMMETHOD(['propput', helpstring(u'The tool type of the tool name.')], HRESULT, 'ToolType',
              ( ['in'], esriGPToolType, 'Type' )),
    COMMETHOD(['propget', helpstring(u'The toolbox name of the tool name.')], HRESULT, 'ToolboxName',
              ( ['retval', 'out'], POINTER(POINTER(IGPToolboxName)), 'ToolboxName' )),
    COMMETHOD(['propputref', helpstring(u'The toolbox name of the tool name.')], HRESULT, 'ToolboxName',
              ( ['in'], POINTER(IGPToolboxName), 'ToolboxName' )),
    COMMETHOD(['propget', helpstring(u'The CLSID of the dialog object of the tool name.')], HRESULT, 'DialogCLSID',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IUID)), 'ppClsid' )),
    COMMETHOD(['propputref', helpstring(u'The CLSID of the dialog object of the tool name.')], HRESULT, 'DialogCLSID',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IUID), 'ppClsid' )),
]
################################################################
## code template for IGPToolName implementation
##class IGPToolName_Impl(object):
##    def _get(self):
##        u'The display name of the tool name object.'
##        #return Name
##    def _set(self, Name):
##        u'The display name of the tool name object.'
##    DisplayName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The description of the tool name object.'
##        #return Description
##    def _set(self, Description):
##        u'The description of the tool name object.'
##    Description = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The tool type of the tool name.'
##        #return Type
##    def _set(self, Type):
##        u'The tool type of the tool name.'
##    ToolType = property(_get, _set, doc = _set.__doc__)
##
##    def DialogCLSID(self, ppClsid):
##        u'The CLSID of the dialog object of the tool name.'
##        #return 
##
##    def ToolboxName(self, ToolboxName):
##        u'The toolbox name of the tool name.'
##        #return 
##
##    def _get(self):
##        u'The category of the tool name object.'
##        #return Path
##    def _set(self, Path):
##        u'The category of the tool name object.'
##    ToolCategory = property(_get, _set, doc = _set.__doc__)
##

IGPAnalysisCellSize._methods_ = [
]
################################################################
## code template for IGPAnalysisCellSize implementation
##class IGPAnalysisCellSize_Impl(object):

class AGOCatalogPathParser(CoClass):
    u'My Hosted Services Catalog Path Parser.'
    _reg_clsid_ = GUID('{915B1FEA-00CD-4891-861D-07A9E3CAD406}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
AGOCatalogPathParser._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IParseNameString, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspaceDataElements]

class DEUtilities(CoClass):
    u'Data Element Utilities object.'
    _reg_clsid_ = GUID('{F0C2AA3E-B2F1-4208-9843-6A3C70A4680A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IDEUtilities(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Data Element Utilities.'
    _iid_ = GUID('{39FCBA4F-FAD5-4360-A91E-F6C995205676}')
    _idlflags_ = ['oleautomation']
DEUtilities._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDEUtilities]

class GPCompositeDomain(CoClass):
    u'Geoprocessing Composite Domain.'
    _reg_clsid_ = GUID('{F9AE1125-48EF-412D-AB8C-AD917F3D5F8E}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPCompositeDomain(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing composite domain object.'
    _iid_ = GUID('{7B64E034-8B4B-4896-8E9C-2C4D2B4F51F3}')
    _idlflags_ = ['oleautomation']
GPCompositeDomain._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDomain, IGPCompositeDomain, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGxFilterInfo]

class GPTableViewType(CoClass):
    u'Geoprocessing Table view data Type.'
    _reg_clsid_ = GUID('{BEB0C568-681A-49B7-A104-99CF284501F4}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPTableViewType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPTableViewType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGxFilterInfo, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class GPFieldDomain(CoClass):
    u'Geoprocessing Field Domain.'
    _reg_clsid_ = GUID('{D7FFAFF1-5990-4828-8263-AA93C1C0BD6A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPFieldDomain2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing field domain object.'
    _iid_ = GUID('{B94013BD-8E40-4DCF-AC8B-29807F15D3BF}')
    _idlflags_ = ['oleautomation']
GPFieldDomain._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDomain, IGPFieldDomain, IGPFieldDomain2]

class GPArcInfoItemDomain(CoClass):
    u'Geoprocessing ArcInfo Item Domain.'
    _reg_clsid_ = GUID('{01C5FF8C-E01B-4A6D-A965-E7E30249E641}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPArcInfoItemDomain(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing Arc/Info item domain object.'
    _iid_ = GUID('{B271FF3E-9C62-42D1-B640-ACACF61D67C3}')
    _idlflags_ = ['oleautomation']
GPArcInfoItemDomain._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDomain, IGPArcInfoItemDomain]


# values for enumeration 'esriWPSServerMessageCodeEnum'
esriWPSServerMessageCode_SkippedDataset = 92000
esriWPSServerMessageCode_FailedToGenerateTransactionResponse = 92001
esriWPSServerMessageCode_FailedToDeleteLock = 92002
esriWPSServerMessageCode_FailedToDeleteOutstandingTransactionVersions = 92003
esriWPSServerMessageCode_NotLicensed = 92004
esriWPSServerMessageCode_GetRequest = 92005
esriWPSServerMessageCode_PostRequest = 92006
esriWPSServerMessageCode_WPSExceptionReport = 92007
esriWPSServerMessageCode_Debug = 92008
esriWPSServerMessageCode_FailedToReleaseLocks = 92009
esriWPSServerMessageCode_ConstructStart = 92010
esriWPSServerMessageCode_ErrorInvalidAppSchemaNamespace = 92011
esriWPSServerMessageCode_ErrorInvalidAppSchemaPrefix = 92012
esriWPSServerMessageCode_ErrorInvalidDefaultLockExpiration = 92013
esriWPSServerMessageCode_ErrorPublishedWorkspaceIsntVersioned = 92014
esriWPSServerMessageCode_ConstructEnded = 92015
esriWPSServerMessageCode_ErrorInvalid10AxisOrder = 92016
esriWPSServerMessageCode_ErrorInvalid11AxisOrder = 92017
esriWPSServerMessageCode_ErrorInvalidUseSRSNameFormat = 92018
esriWPSServerMessageCode_FailedToReconcileAgainstSelf = 92019
esriWPSServerMessageCode_FailedToStopEditing = 92020
esriWPSServerMessageCode_ServerTooBusyToProcessTransaction = 92021
esriWPSServerMessageCode_FailedToImportTransactionChanges = 92022
esriWPSServerMessageCode_FailedCreatingTransactionResponse = 92023
esriWPSServerMessageCode_TransactionFailedStoppingEditOperation = 92024
esriWPSServerMessageCode_FailedToStartEditing = 92025
esriWPSServerMessageCode_ConflictDetected = 92026
esriWPSServerMessageCodeEnum = c_int # enum
class EnumGPName(CoClass):
    u'Enumeration of multiple geoprocessing name objects.'
    _reg_clsid_ = GUID('{5B0071FC-8D88-49DF-8B40-50E9E190A0F6}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
EnumGPName._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray2, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IEnumGPName]

IGPCompositeDomain._methods_ = [
    COMMETHOD(['propget', helpstring(u'The number of geoprocessing domains in the composite domain.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propget', helpstring(u'The geoprocessing domain at the specified index in the composite domain.')], HRESULT, 'Domain',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDomain)), 'ppDomain' )),
    COMMETHOD([helpstring(u'Adds a geoprocessing domain to the composite domain.')], HRESULT, 'AddDomain',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDomain), 'pDomain' )),
    COMMETHOD([helpstring(u'Removes a geoprocessing domain from the composite domain.')], HRESULT, 'RemoveDomain',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Replaces a geoprocessing domain at the specified index in the composite domain.')], HRESULT, 'ReplaceDomain',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDomain), 'pDomain' )),
]
################################################################
## code template for IGPCompositeDomain implementation
##class IGPCompositeDomain_Impl(object):
##    @property
##    def Count(self):
##        u'The number of geoprocessing domains in the composite domain.'
##        #return pCount
##
##    def RemoveDomain(self, Index):
##        u'Removes a geoprocessing domain from the composite domain.'
##        #return 
##
##    @property
##    def Domain(self, Index):
##        u'The geoprocessing domain at the specified index in the composite domain.'
##        #return ppDomain
##
##    def AddDomain(self, pDomain):
##        u'Adds a geoprocessing domain to the composite domain.'
##        #return 
##
##    def ReplaceDomain(self, Index, pDomain):
##        u'Replaces a geoprocessing domain at the specified index in the composite domain.'
##        #return 
##

class GPCodedValueDomain(CoClass):
    u'Geoprocessing Coded Value Domain.'
    _reg_clsid_ = GUID('{A11E0871-6607-4BD4-87D0-35E0189AEE59}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPCodedValueDomain._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPCodedValueDomain, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDomain, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

IGPRecordSet._methods_ = [
    COMMETHOD(['propget', helpstring(u'The recordset data.')], HRESULT, 'RecordSet',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRecordSet)), 'ppRs' )),
    COMMETHOD(['propputref', helpstring(u'The recordset data.')], HRESULT, 'RecordSet',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRecordSet), 'ppRs' )),
    COMMETHOD(['propget', helpstring(u'The OID field name.')], HRESULT, 'OIDFieldName',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'The OID field name.')], HRESULT, 'OIDFieldName',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'The has transfer limit been reached flag.')], HRESULT, 'ExceededTransferLimit',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'The has transfer limit been reached flag.')], HRESULT, 'ExceededTransferLimit',
              ( ['in'], VARIANT_BOOL, 'flag' )),
]
################################################################
## code template for IGPRecordSet implementation
##class IGPRecordSet_Impl(object):
##    def RecordSet(self, ppRs):
##        u'The recordset data.'
##        #return 
##
##    def _get(self):
##        u'The OID field name.'
##        #return Name
##    def _set(self, Name):
##        u'The OID field name.'
##    OIDFieldName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The has transfer limit been reached flag.'
##        #return flag
##    def _set(self, flag):
##        u'The has transfer limit been reached flag.'
##    ExceededTransferLimit = property(_get, _set, doc = _set.__doc__)
##

class GDSCatalogPathParser(CoClass):
    u'ArcGIS Database Server Catalog Path Parser.'
    _reg_clsid_ = GUID('{DA5118FD-1F9F-435D-812A-687152386809}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GDSCatalogPathParser._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IParseNameString]

IGPFeatureRecordSetType._methods_ = [
]
################################################################
## code template for IGPFeatureRecordSetType implementation
##class IGPFeatureRecordSetType_Impl(object):

class IGPCustomTool(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to methods on a custom geoprocessing tool object.'
    _iid_ = GUID('{BB8CA73D-A50C-4E28-B198-28985A81DBEE}')
    _idlflags_ = ['oleautomation']
IGPCustomTool._methods_ = [
    COMMETHOD(['propget', helpstring(u'The tool extension associated with the tool.')], HRESULT, 'ToolExtension',
              ( ['retval', 'out'], POINTER(POINTER(IGPToolExtension)), 'extension' )),
    COMMETHOD(['propputref', helpstring(u'The tool extension associated with the tool.')], HRESULT, 'ToolExtension',
              ( ['in'], POINTER(IGPToolExtension), 'extension' )),
]
################################################################
## code template for IGPCustomTool implementation
##class IGPCustomTool_Impl(object):
##    def ToolExtension(self, extension):
##        u'The tool extension associated with the tool.'
##        #return 
##

class IGPPoint2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing point object.'
    _iid_ = GUID('{99E58D3F-30DB-4866-80CD-D60C4CB86FEC}')
    _idlflags_ = ['oleautomation']
IGPPoint2._methods_ = [
    COMMETHOD(['propget', helpstring(u'The actual the point object.')], HRESULT, 'Point',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint)), 'Point' )),
    COMMETHOD(['propputref', helpstring(u'The actual the point object.')], HRESULT, 'Point',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'Point' )),
]
################################################################
## code template for IGPPoint2 implementation
##class IGPPoint2_Impl(object):
##    def Point(self, Point):
##        u'The actual the point object.'
##        #return 
##

class GPTableView(CoClass):
    u'Geoprocessing value object containing a table view value.'
    _reg_clsid_ = GUID('{CF0816ED-A6A0-4AC1-B8F1-192B3291A853}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPTableView._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPTableView, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDescribe, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

IGPLong._methods_ = [
    COMMETHOD(['propget', helpstring(u'The value of the geoprocessing value object as a long integer.')], HRESULT, 'Value',
              ( ['retval', 'out'], POINTER(c_int), 'Value' )),
    COMMETHOD(['propput', helpstring(u'The value of the geoprocessing value object as a long integer.')], HRESULT, 'Value',
              ( ['in'], c_int, 'Value' )),
]
################################################################
## code template for IGPLong implementation
##class IGPLong_Impl(object):
##    def _get(self):
##        u'The value of the geoprocessing value object as a long integer.'
##        #return Value
##    def _set(self, Value):
##        u'The value of the geoprocessing value object as a long integer.'
##    Value = property(_get, _set, doc = _set.__doc__)
##

class ProcessLayerFactory(CoClass):
    u'A factory for creating process layers.'
    _reg_clsid_ = GUID('{96FFBDB0-6107-41E8-BAE6-1B3F449F430A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
ProcessLayerFactory._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.ILayerFactory]

class IGPLayerSupport(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to GPLayerSupport properties.'
    _iid_ = GUID('{9029AAC3-EBD3-4FA9-A9F8-8153775C870C}')
    _idlflags_ = ['oleautomation']
IGPLayerSupport._methods_ = [
    COMMETHOD([helpstring(u'Makes a GPLayer from a layer.')], HRESULT, 'MakeGPLayer',
              ( ['in'], POINTER(comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.ILayer), 'pLayer' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._1CE6AC65_43F5_4529_8FC0_D7ED298E4F1A_0_10_2.IGPLayer)), 'ppGPLayer' )),
    COMMETHOD([helpstring(u'Makes a layer from a value.')], HRESULT, 'MakeLayer',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'pValue' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], POINTER(IUnknown), 'pRenderer' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.ILayer)), 'ppLayer' )),
]
################################################################
## code template for IGPLayerSupport implementation
##class IGPLayerSupport_Impl(object):
##    def MakeGPLayer(self, pLayer):
##        u'Makes a GPLayer from a layer.'
##        #return ppGPLayer
##
##    def MakeLayer(self, pValue, Name, pRenderer):
##        u'Makes a layer from a value.'
##        #return ppLayer
##

IGPToolboxName._methods_ = [
    COMMETHOD(['propget', helpstring(u'The path name of the toolbox.')], HRESULT, 'PathName',
              ( ['retval', 'out'], POINTER(BSTR), 'Path' )),
]
################################################################
## code template for IGPToolboxName implementation
##class IGPToolboxName_Impl(object):
##    @property
##    def PathName(self):
##        u'The path name of the toolbox.'
##        #return Path
##

IEnumMdElement._methods_ = [
    COMMETHOD([helpstring(u'Returns the next model element in the enumeration.')], HRESULT, 'Next',
              ( ['retval', 'out'], POINTER(POINTER(IMdElement)), 'Element' )),
    COMMETHOD([helpstring(u'Resets the current position of the enumeration.')], HRESULT, 'Reset'),
]
################################################################
## code template for IEnumMdElement implementation
##class IEnumMdElement_Impl(object):
##    def Reset(self):
##        u'Resets the current position of the enumeration.'
##        #return 
##
##    def Next(self):
##        u'Returns the next model element in the enumeration.'
##        #return Element
##

class IGeoProcessorEvents(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to GeoProcessor events.'
    _iid_ = GUID('{4EFBA2EE-5E4C-4B7A-99C2-9F59E0FB62E4}')
    _idlflags_ = ['oleautomation']
IGeoProcessor2._methods_ = [
    COMMETHOD([helpstring(u'Retrieve the value of an environment by name. The properties of the current Geoprocessing session.')], HRESULT, 'GetEnvironmentValue',
              ( ['in'], BSTR, 'environmentName' ),
              ( ['retval', 'out'], POINTER(VARIANT), 'pvarResult' )),
    COMMETHOD([helpstring(u'Update the value of an environment by name. The properties of the current Geoprocessing session.')], HRESULT, 'SetEnvironmentValue',
              ( ['in'], BSTR, 'environmentName' ),
              ( ['in'], VARIANT, 'Value' )),
    COMMETHOD([helpstring(u'Reset the environments to their initial state.')], HRESULT, 'ResetEnvironments'),
    COMMETHOD([helpstring(u'Execute a tool within the current Geoprocessing session.')], HRESULT, 'Execute',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IVariantArray), 'ipValues' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' ),
              ( ['retval', 'out'], POINTER(POINTER(IGeoProcessorResult)), 'ppResult' )),
    COMMETHOD([helpstring(u'Validate the parameters (input) of a tool within the current Geoprocessing session.')], HRESULT, 'Validate',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IVariantArray), 'ipValues' ),
              ( ['in'], VARIANT_BOOL, 'bUpdateValues' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPMessages)), 'ppMessages' )),
    COMMETHOD([helpstring(u'Open an objector a namestring. Example a DEFeatureClass object will return an IFeatureClass.')], HRESULT, 'Open',
              ( ['in'], VARIANT, 'Value' ),
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppResult' )),
    COMMETHOD([helpstring(u'Make a dataelement from the given value.')], HRESULT, 'GetDataElement',
              ( ['in'], VARIANT, 'inputValue' ),
              ( ['in'], POINTER(VARIANT), 'pDataType' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataElement)), 'ppGpDescribe' )),
    COMMETHOD([helpstring(u'Return the list of tools within the current Geoprocessing session.')], HRESULT, 'ListTools',
              ( ['in'], BSTR, 'wildCard' ),
              ( ['retval', 'out'], POINTER(POINTER(IGpEnumList)), 'ppGpEnumList' )),
    COMMETHOD([helpstring(u'Return the list of environments (properties) within the current Geoprocessing session.')], HRESULT, 'ListEnvironments',
              ( ['in'], BSTR, 'wildCard' ),
              ( ['retval', 'out'], POINTER(POINTER(IGpEnumList)), 'ppGpEnumList' )),
    COMMETHOD([helpstring(u'Return the list of toolboxes within the current Geoprocessing session.')], HRESULT, 'ListToolboxes',
              ( ['in'], BSTR, 'wildCard' ),
              ( ['retval', 'out'], POINTER(POINTER(IGpEnumList)), 'ppGpEnumList' )),
    COMMETHOD([helpstring(u'Add a toolbox to the current Geoprocessing session by catalog path.')], HRESULT, 'AddToolbox',
              ( ['in'], BSTR, 'Toolbox' )),
    COMMETHOD([helpstring(u'Remove a toolbox from the current Geoprocessing session by catalog path.')], HRESULT, 'RemoveToolbox',
              ( ['in'], BSTR, 'Toolbox' )),
    COMMETHOD(['propput', helpstring(u'Set whether resulting output datasets should be added to the application display.')], HRESULT, 'AddOutputsToMap',
              ( ['in'], VARIANT_BOOL, 'AddToMap' )),
    COMMETHOD(['propget', helpstring(u'Set whether resulting output datasets should be added to the application display.')], HRESULT, 'AddOutputsToMap',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'AddToMap' )),
    COMMETHOD(['propput', helpstring(u'Set the overwrite outputs flag within the current Geoprocessing session. True means outputs of tools will be overwritten.')], HRESULT, 'OverwriteOutput',
              ( ['in'], VARIANT_BOOL, 'pOverrideOutput' )),
    COMMETHOD(['propget', helpstring(u'Set the overwrite outputs flag within the current Geoprocessing session. True means outputs of tools will be overwritten.')], HRESULT, 'OverwriteOutput',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pOverrideOutput' )),
    COMMETHOD(['propput', helpstring(u'Set whether new map layers are temporary by default.')], HRESULT, 'TemporaryMapLayers',
              ( ['in'], VARIANT_BOOL, 'TemporaryMapLayers' )),
    COMMETHOD(['propget', helpstring(u'Set whether new map layers are temporary by default.')], HRESULT, 'TemporaryMapLayers',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'TemporaryMapLayers' )),
    COMMETHOD(['propput', helpstring(u'Set whether or not to log the execution of geoprocessing tools.')], HRESULT, 'LogHistory',
              ( ['in'], VARIANT_BOOL, 'LogHistory' )),
    COMMETHOD(['propget', helpstring(u'Set whether or not to log the execution of geoprocessing tools.')], HRESULT, 'LogHistory',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'LogHistory' )),
    COMMETHOD([helpstring(u'Return the GPMessages object which will be messages of the last tool executed.')], HRESULT, 'GetReturnMessages',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPMessages)), 'ppMessages' )),
    COMMETHOD(['propget', helpstring(u'Return the number of messages of the last tool executed.')], HRESULT, 'MessageCount',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD([helpstring(u'Return the message description by index of the last tool executed.')], HRESULT, 'GetMessage',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(BSTR), 'pMessage' )),
    COMMETHOD([helpstring(u'Return the message severity by index of the last tool executed.')], HRESULT, 'GetSeverity',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(c_int), 'pSeverity' )),
    COMMETHOD([helpstring(u'Return the message error code (Error Messages Only) by index of the last tool executed.')], HRESULT, 'GetReturnCode',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(c_int), 'pCode' )),
    COMMETHOD([helpstring(u'Return all of the message descriptions of the last tool executed.')], HRESULT, 'GetMessages',
              ( ['in'], POINTER(VARIANT), 'pSeverity' ),
              ( ['retval', 'out'], POINTER(BSTR), 'pMessages' )),
    COMMETHOD(['propget', helpstring(u'Return the maximum severity of the message of the last tool executed.')], HRESULT, 'MaxSeverity',
              ( ['retval', 'out'], POINTER(c_int), 'pSeverity' )),
    COMMETHOD([helpstring(u'Output an informative message. When running within a script tool, message becomes part of the tool messages, otherwise outputs to console')], HRESULT, 'AddMessage',
              ( ['in'], BSTR, 'message' )),
    COMMETHOD([helpstring(u'Output an error message. When running within a script tool, message becomes part of the tool messages, otherwise outputs to console')], HRESULT, 'AddError',
              ( ['in'], BSTR, 'message' )),
    COMMETHOD([helpstring(u'Output a warning message. When running within a script tool, message becomes part of the tool messages, otherwise outputs to console')], HRESULT, 'AddWarning',
              ( ['in'], BSTR, 'message' )),
    COMMETHOD([helpstring(u'Output message from the last tool executed. When running within a script tool, message becomes part of the tool messages, otherwise outputs to console')], HRESULT, 'AddReturnMessage',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Clear the messages to be returned as tool message when running within a script tool.')], HRESULT, 'ClearMessages'),
    COMMETHOD(['propget', helpstring(u'Return the number of input command line or script tool parameters.')], HRESULT, 'ParameterCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD([helpstring(u'Return the input command line or script tool parameter by index as a GPValue.')], HRESULT, 'GetParameterValue',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(VARIANT), 'pValue' )),
    COMMETHOD([helpstring(u'Set the output script tool parameter by index as a GPValue.')], HRESULT, 'SetParameterValue',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], VARIANT, 'Value' )),
    COMMETHOD([helpstring(u'Test the existence of a given parameter value (GPValue or catalog path) the type of the data is optional.')], HRESULT, 'Exists',
              ( ['in'], VARIANT, 'inputValue' ),
              ( ['in'], POINTER(VARIANT), 'pDataType' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Exists' )),
    COMMETHOD([helpstring(u'Returns the command line usage of a given tool by name.')], HRESULT, 'Usage',
              ( ['in'], BSTR, 'Method' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Usage' )),
    COMMETHOD([helpstring(u'Return the list of feature classes within the current workspace or feature dataset within the workspace.')], HRESULT, 'ListFeatureClasses',
              ( ['in'], BSTR, 'wildCard' ),
              ( ['in'], BSTR, 'FeatureType' ),
              ( ['in'], BSTR, 'dataset' ),
              ( ['retval', 'out'], POINTER(POINTER(IGpEnumList)), 'ppEnumList' )),
    COMMETHOD([helpstring(u'Return the list of feature datasets within the current workspace.')], HRESULT, 'ListDatasets',
              ( ['in'], BSTR, 'wildCard' ),
              ( ['in'], BSTR, 'datasetType' ),
              ( ['retval', 'out'], POINTER(POINTER(IGpEnumList)), 'ppEnumList' )),
    COMMETHOD([helpstring(u'Return the list of workspaces within the current workspace (the workspace can be a folder).')], HRESULT, 'ListWorkspaces',
              ( ['in'], BSTR, 'wildCard' ),
              ( ['in'], BSTR, 'workspaceType' ),
              ( ['retval', 'out'], POINTER(POINTER(IGpEnumList)), 'ppEnumList' )),
    COMMETHOD([helpstring(u'Return the list of tables within the current workspace.')], HRESULT, 'ListTables',
              ( ['in'], BSTR, 'wildCard' ),
              ( ['in'], BSTR, 'tableType' ),
              ( ['retval', 'out'], POINTER(POINTER(IGpEnumList)), 'ppEnumList' )),
    COMMETHOD([helpstring(u'Return the list of rasters within the current workspace.')], HRESULT, 'ListRasters',
              ( ['in'], BSTR, 'wildCard' ),
              ( ['in'], BSTR, 'RasterType' ),
              ( ['retval', 'out'], POINTER(POINTER(IGpEnumList)), 'ppEnumList' )),
    COMMETHOD([helpstring(u'Validate a field name within the given workspace.')], HRESULT, 'ValidateFieldName',
              ( ['in'], BSTR, 'inputFieldName' ),
              ( ['in'], BSTR, 'Workspace' ),
              ( ['retval', 'out'], POINTER(BSTR), 'outputFieldName' )),
    COMMETHOD([helpstring(u'Validate a table or feature class name within the given workspace.')], HRESULT, 'ValidateTableName',
              ( ['in'], BSTR, 'inputTableName' ),
              ( ['in'], BSTR, 'Workspace' ),
              ( ['retval', 'out'], POINTER(BSTR), 'outputTableName' )),
    COMMETHOD([helpstring(u'Qualify a field name within the given workspace.  This will add the connected user and database names.')], HRESULT, 'QualifyFieldName',
              ( ['in'], BSTR, 'inputFieldName' ),
              ( ['in'], BSTR, 'Workspace' ),
              ( ['retval', 'out'], POINTER(BSTR), 'outputFieldName' )),
    COMMETHOD([helpstring(u'Qualify a table name within the given workspace.  This will add the connected user and database names.')], HRESULT, 'QualifyTableName',
              ( ['in'], BSTR, 'inputTableName' ),
              ( ['in'], BSTR, 'Workspace' ),
              ( ['retval', 'out'], POINTER(BSTR), 'outputTableName' )),
    COMMETHOD([helpstring(u'Parse a field name within the given workspace. This will strip the connected user and database names.')], HRESULT, 'ParseFieldName',
              ( ['in'], BSTR, 'inputFieldName' ),
              ( ['in'], BSTR, 'Workspace' ),
              ( ['retval', 'out'], POINTER(BSTR), 'outputParsedName' )),
    COMMETHOD([helpstring(u'Parse a table name within the given workspace. This will strip the connected user and database names.')], HRESULT, 'ParseTableName',
              ( ['in'], BSTR, 'inputTableName' ),
              ( ['in'], BSTR, 'Workspace' ),
              ( ['retval', 'out'], POINTER(BSTR), 'outputParsedName' )),
    COMMETHOD([helpstring(u'Save the current settings (toolboxes, environment values, etc) to a file on disk in XML format.')], HRESULT, 'SaveSettings',
              ( ['in'], BSTR, 'FileName' )),
    COMMETHOD([helpstring(u'Load the current settings (toolboxes, environment values, etc) from a file on disk in XML format.')], HRESULT, 'LoadSettings',
              ( ['in'], BSTR, 'FileName' )),
    COMMETHOD([helpstring(u'Test for the presence of a schema lock (already open for writing) of a given file or dataset.')], HRESULT, 'TestSchemaLock',
              ( ['in'], BSTR, 'FileName' ),
              ( ['retval', 'out'], POINTER(BSTR), 'pStatus' )),
    COMMETHOD([helpstring(u'Register an object to recieve IGeoProcessorEvents.')], HRESULT, 'RegisterGeoProcessorEvents',
              ( ['in'], POINTER(IGeoProcessorEvents), 'pGeoProcessorEvents' )),
    COMMETHOD([helpstring(u'UnRegister an object to stop recieving IGeoProcessorEvents.')], HRESULT, 'UnRegisterGeoProcessorEvents',
              ( ['in'], POINTER(IGeoProcessorEvents), 'pGeoProcessorEvents' )),
    COMMETHOD([helpstring(u'Create a new result object.')], HRESULT, 'CreateResult',
              ( ['in'], BSTR, 'ToolName' ),
              ( ['in'], BSTR, 'JobID' ),
              ( ['retval', 'out'], POINTER(POINTER(IGeoProcessorResult)), 'ppResult' )),
    COMMETHOD([helpstring(u'Is server tool synchronous.')], HRESULT, 'IsSynchronous',
              ( ['in'], BSTR, 'ToolName' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsSynchronous' )),
    COMMETHOD([helpstring(u'Execute a tool within the current Geoprocessing session.')], HRESULT, 'ExecuteASync',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IVariantArray), 'ipValues' ),
              ( ['retval', 'out'], POINTER(POINTER(IGeoProcessorResult)), 'ppResult' )),
    COMMETHOD([helpstring(u'Register an object to recieve IGeoProcessorEvents3.')], HRESULT, 'RegisterGeoProcessorEvents3',
              ( ['in'], POINTER(IGeoProcessorEvents3), 'pGeoProcessorEvents3' )),
    COMMETHOD([helpstring(u'UnRegister an object to stop recieving IGeoProcessorEvents3.')], HRESULT, 'UnRegisterGeoProcessorEvents3',
              ( ['in'], POINTER(IGeoProcessorEvents3), 'pGeoProcessorEvents3' )),
    COMMETHOD([helpstring(u'Check for end of result.')], HRESULT, 'CheckResultStatus',
              ( ['in'], POINTER(IGeoProcessorResult), 'pGPResult' )),
    COMMETHOD(['propput', helpstring(u'Set whether to add results to result view.')], HRESULT, 'AddToResults',
              ( ['in'], VARIANT_BOOL, 'AddToResults' )),
    COMMETHOD(['propget', helpstring(u'Set whether to add results to result view.')], HRESULT, 'AddToResults',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'AddToResults' )),
]
################################################################
## code template for IGeoProcessor2 implementation
##class IGeoProcessor2_Impl(object):
##    def ListToolboxes(self, wildCard):
##        u'Return the list of toolboxes within the current Geoprocessing session.'
##        #return ppGpEnumList
##
##    def AddError(self, message):
##        u'Output an error message. When running within a script tool, message becomes part of the tool messages, otherwise outputs to console'
##        #return 
##
##    def ClearMessages(self):
##        u'Clear the messages to be returned as tool message when running within a script tool.'
##        #return 
##
##    def AddMessage(self, message):
##        u'Output an informative message. When running within a script tool, message becomes part of the tool messages, otherwise outputs to console'
##        #return 
##
##    def RemoveToolbox(self, Toolbox):
##        u'Remove a toolbox from the current Geoprocessing session by catalog path.'
##        #return 
##
##    def _get(self):
##        u'Set whether new map layers are temporary by default.'
##        #return TemporaryMapLayers
##    def _set(self, TemporaryMapLayers):
##        u'Set whether new map layers are temporary by default.'
##    TemporaryMapLayers = property(_get, _set, doc = _set.__doc__)
##
##    def GetDataElement(self, inputValue, pDataType):
##        u'Make a dataelement from the given value.'
##        #return ppGpDescribe
##
##    def AddWarning(self, message):
##        u'Output a warning message. When running within a script tool, message becomes part of the tool messages, otherwise outputs to console'
##        #return 
##
##    def QualifyFieldName(self, inputFieldName, Workspace):
##        u'Qualify a field name within the given workspace.  This will add the connected user and database names.'
##        #return outputFieldName
##
##    def Usage(self, Method):
##        u'Returns the command line usage of a given tool by name.'
##        #return Usage
##
##    def CreateResult(self, ToolName, JobID):
##        u'Create a new result object.'
##        #return ppResult
##
##    def GetEnvironmentValue(self, environmentName):
##        u'Retrieve the value of an environment by name. The properties of the current Geoprocessing session.'
##        #return pvarResult
##
##    def GetReturnCode(self, Index):
##        u'Return the message error code (Error Messages Only) by index of the last tool executed.'
##        #return pCode
##
##    def ValidateTableName(self, inputTableName, Workspace):
##        u'Validate a table or feature class name within the given workspace.'
##        #return outputTableName
##
##    def QualifyTableName(self, inputTableName, Workspace):
##        u'Qualify a table name within the given workspace.  This will add the connected user and database names.'
##        #return outputTableName
##
##    def ListDatasets(self, wildCard, datasetType):
##        u'Return the list of feature datasets within the current workspace.'
##        #return ppEnumList
##
##    def TestSchemaLock(self, FileName):
##        u'Test for the presence of a schema lock (already open for writing) of a given file or dataset.'
##        #return pStatus
##
##    @property
##    def MaxSeverity(self):
##        u'Return the maximum severity of the message of the last tool executed.'
##        #return pSeverity
##
##    def UnRegisterGeoProcessorEvents(self, pGeoProcessorEvents):
##        u'UnRegister an object to stop recieving IGeoProcessorEvents.'
##        #return 
##
##    def SetParameterValue(self, Index, Value):
##        u'Set the output script tool parameter by index as a GPValue.'
##        #return 
##
##    def IsSynchronous(self, ToolName):
##        u'Is server tool synchronous.'
##        #return IsSynchronous
##
##    def GetMessages(self, pSeverity):
##        u'Return all of the message descriptions of the last tool executed.'
##        #return pMessages
##
##    def LoadSettings(self, FileName):
##        u'Load the current settings (toolboxes, environment values, etc) from a file on disk in XML format.'
##        #return 
##
##    def AddReturnMessage(self, Index):
##        u'Output message from the last tool executed. When running within a script tool, message becomes part of the tool messages, otherwise outputs to console'
##        #return 
##
##    def GetSeverity(self, Index):
##        u'Return the message severity by index of the last tool executed.'
##        #return pSeverity
##
##    def _get(self):
##        u'Set whether resulting output datasets should be added to the application display.'
##        #return AddToMap
##    def _set(self, AddToMap):
##        u'Set whether resulting output datasets should be added to the application display.'
##    AddOutputsToMap = property(_get, _set, doc = _set.__doc__)
##
##    def UnRegisterGeoProcessorEvents3(self, pGeoProcessorEvents3):
##        u'UnRegister an object to stop recieving IGeoProcessorEvents3.'
##        #return 
##
##    def ParseTableName(self, inputTableName, Workspace):
##        u'Parse a table name within the given workspace. This will strip the connected user and database names.'
##        #return outputParsedName
##
##    def Execute(self, Name, ipValues, pTrackCancel):
##        u'Execute a tool within the current Geoprocessing session.'
##        #return ppResult
##
##    @property
##    def MessageCount(self):
##        u'Return the number of messages of the last tool executed.'
##        #return pCount
##
##    def RegisterGeoProcessorEvents3(self, pGeoProcessorEvents3):
##        u'Register an object to recieve IGeoProcessorEvents3.'
##        #return 
##
##    def SaveSettings(self, FileName):
##        u'Save the current settings (toolboxes, environment values, etc) to a file on disk in XML format.'
##        #return 
##
##    def ParseFieldName(self, inputFieldName, Workspace):
##        u'Parse a field name within the given workspace. This will strip the connected user and database names.'
##        #return outputParsedName
##
##    def ListFeatureClasses(self, wildCard, FeatureType, dataset):
##        u'Return the list of feature classes within the current workspace or feature dataset within the workspace.'
##        #return ppEnumList
##
##    def ValidateFieldName(self, inputFieldName, Workspace):
##        u'Validate a field name within the given workspace.'
##        #return outputFieldName
##
##    def GetMessage(self, Index):
##        u'Return the message description by index of the last tool executed.'
##        #return pMessage
##
##    def ListTables(self, wildCard, tableType):
##        u'Return the list of tables within the current workspace.'
##        #return ppEnumList
##
##    def _get(self):
##        u'Set whether to add results to result view.'
##        #return AddToResults
##    def _set(self, AddToResults):
##        u'Set whether to add results to result view.'
##    AddToResults = property(_get, _set, doc = _set.__doc__)
##
##    def GetReturnMessages(self):
##        u'Return the GPMessages object which will be messages of the last tool executed.'
##        #return ppMessages
##
##    def _get(self):
##        u'Set whether or not to log the execution of geoprocessing tools.'
##        #return LogHistory
##    def _set(self, LogHistory):
##        u'Set whether or not to log the execution of geoprocessing tools.'
##    LogHistory = property(_get, _set, doc = _set.__doc__)
##
##    def Validate(self, Name, ipValues, bUpdateValues):
##        u'Validate the parameters (input) of a tool within the current Geoprocessing session.'
##        #return ppMessages
##
##    def ListWorkspaces(self, wildCard, workspaceType):
##        u'Return the list of workspaces within the current workspace (the workspace can be a folder).'
##        #return ppEnumList
##
##    def Exists(self, inputValue, pDataType):
##        u'Test the existence of a given parameter value (GPValue or catalog path) the type of the data is optional.'
##        #return Exists
##
##    def ExecuteASync(self, Name, ipValues):
##        u'Execute a tool within the current Geoprocessing session.'
##        #return ppResult
##
##    def ListTools(self, wildCard):
##        u'Return the list of tools within the current Geoprocessing session.'
##        #return ppGpEnumList
##
##    @property
##    def ParameterCount(self):
##        u'Return the number of input command line or script tool parameters.'
##        #return Count
##
##    def ResetEnvironments(self):
##        u'Reset the environments to their initial state.'
##        #return 
##
##    def CheckResultStatus(self, pGPResult):
##        u'Check for end of result.'
##        #return 
##
##    def GetParameterValue(self, Index):
##        u'Return the input command line or script tool parameter by index as a GPValue.'
##        #return pValue
##
##    def _get(self):
##        u'Set the overwrite outputs flag within the current Geoprocessing session. True means outputs of tools will be overwritten.'
##        #return pOverrideOutput
##    def _set(self, pOverrideOutput):
##        u'Set the overwrite outputs flag within the current Geoprocessing session. True means outputs of tools will be overwritten.'
##    OverwriteOutput = property(_get, _set, doc = _set.__doc__)
##
##    def AddToolbox(self, Toolbox):
##        u'Add a toolbox to the current Geoprocessing session by catalog path.'
##        #return 
##
##    def SetEnvironmentValue(self, environmentName, Value):
##        u'Update the value of an environment by name. The properties of the current Geoprocessing session.'
##        #return 
##
##    def ListEnvironments(self, wildCard):
##        u'Return the list of environments (properties) within the current Geoprocessing session.'
##        #return ppGpEnumList
##
##    def RegisterGeoProcessorEvents(self, pGeoProcessorEvents):
##        u'Register an object to recieve IGeoProcessorEvents.'
##        #return 
##
##    def Open(self, Value):
##        u'Open an objector a namestring. Example a DEFeatureClass object will return an IFeatureClass.'
##        #return ppResult
##
##    def ListRasters(self, wildCard, RasterType):
##        u'Return the list of rasters within the current workspace.'
##        #return ppEnumList
##

class IEnumFieldType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to enumeric esriFieldTypes.'
    _iid_ = GUID('{6BE153C4-4451-4180-80AB-8D79DB63AC04}')
    _idlflags_ = ['oleautomation']
class IEnumGeometryType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to enumeric esriGeometryTypes.'
    _iid_ = GUID('{B2151E46-0E8D-4CD7-9078-E9BAB1F39FCF}')
    _idlflags_ = ['oleautomation']
IGPSAGeoDataDomain._methods_ = [
    COMMETHOD(['propget', helpstring(u'GPDataType count.')], HRESULT, 'DataTypeCount',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propget', helpstring(u'GPDataType at an index.')], HRESULT, 'DataType',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType)), 'Type' )),
    COMMETHOD([helpstring(u'Adds a GPDataType.')], HRESULT, 'AddDataType',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType), 'Type' )),
    COMMETHOD([helpstring(u'Removes a GPDataType.')], HRESULT, 'RemoveDataType',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType), 'Type' )),
    COMMETHOD([helpstring(u'Clears a GPDataType.')], HRESULT, 'ClearDataType'),
    COMMETHOD(['propget', helpstring(u'All GPDataTypes.')], HRESULT, 'DataTypes',
              ( ['retval', 'out'], POINTER(POINTER(IEnumGPDataType)), 'types' )),
    COMMETHOD(['propget', helpstring(u'Field type count.')], HRESULT, 'FieldTypeCount',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propget', helpstring(u'Field type at an index.')], HRESULT, 'FieldType',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriFieldType), 'Type' )),
    COMMETHOD([helpstring(u'Adds an esriFieldType.')], HRESULT, 'AddFieldType',
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriFieldType, 'Type' )),
    COMMETHOD([helpstring(u'Removes an esriFieldType.')], HRESULT, 'RemoveFieldType',
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriFieldType, 'Type' )),
    COMMETHOD([helpstring(u'Clears a esriFieldType.')], HRESULT, 'ClearFieldType'),
    COMMETHOD(['propget', helpstring(u'All esriFieldTypes.')], HRESULT, 'FieldTypes',
              ( ['retval', 'out'], POINTER(POINTER(IEnumFieldType)), 'types' )),
    COMMETHOD(['propget', helpstring(u'Geometry type count.')], HRESULT, 'GeometryTypeCount',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propget', helpstring(u'Geometry type at an index.')], HRESULT, 'GeometryType',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.esriGeometryType), 'Type' )),
    COMMETHOD([helpstring(u'Adds an esriGeometryType.')], HRESULT, 'AddGeometryType',
              ( ['in'], comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.esriGeometryType, 'Type' )),
    COMMETHOD([helpstring(u'Removes an esriGeometryType.')], HRESULT, 'RemoveGeometryType',
              ( ['in'], comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.esriGeometryType, 'Type' )),
    COMMETHOD([helpstring(u'Clears a esriGeometryTypes.')], HRESULT, 'ClearGeometryType'),
    COMMETHOD(['propget', helpstring(u'All esriGeometryTypes.')], HRESULT, 'GeometryTypes',
              ( ['retval', 'out'], POINTER(POINTER(IEnumGeometryType)), 'types' )),
    COMMETHOD([helpstring(u'Validates a GPDataType.')], HRESULT, 'ValidateDataType',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType), 'Type' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'ok' )),
    COMMETHOD([helpstring(u'Validate an esriFieldType.')], HRESULT, 'ValidateFieldType',
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriFieldType, 'Type' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'ok' )),
    COMMETHOD([helpstring(u'Validates an esriGeometryType.')], HRESULT, 'ValidateGeometryType',
              ( ['in'], comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.esriGeometryType, 'Type' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'ok' )),
    COMMETHOD([helpstring(u'Selects Fields in a DETable.')], HRESULT, 'SelectFields',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDETable), 'pDETable' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'ppFields' )),
    COMMETHOD([helpstring(u'Selects DEGeoDatasets from a workspace path.')], HRESULT, 'SelectFromWorkspace',
              ( ['in'], BSTR, 'workspacepath' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'ppDEGeoDatasets' )),
    COMMETHOD([helpstring(u'Selects DEGeoDatasets from an Array.')], HRESULT, 'SelectFromArray',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'DEGeoDatasets' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'ppDEGeoDatasets' )),
    COMMETHOD([helpstring(u'Sets raster data.')], HRESULT, 'SetRasterData',
              ( ['in'], VARIANT_BOOL, 'integerOnly' ),
              ( ['in'], VARIANT_BOOL, 'allowFormulated' )),
    COMMETHOD([helpstring(u'Sets feature data.')], HRESULT, 'SetFeatureData'),
    COMMETHOD([helpstring(u'Sets point-type feature data.')], HRESULT, 'SetPointFeatureData'),
    COMMETHOD([helpstring(u'Sets polyline feature data.')], HRESULT, 'SetLineFeatureData'),
    COMMETHOD([helpstring(u'Sets polygon feature data.')], HRESULT, 'SetAreaFeatureData'),
    COMMETHOD([helpstring(u'Sets numeric field types.')], HRESULT, 'SetNumericFieldTypes',
              ( ['in'], VARIANT_BOOL, 'integerOnly' ),
              ( ['in'], VARIANT_BOOL, 'allowOID' )),
    COMMETHOD(['propput', helpstring(u'Indicates if checking field in Validation.')], HRESULT, 'CheckField',
              ( ['in'], VARIANT_BOOL, 'bUse' )),
    COMMETHOD(['propget', helpstring(u'Indicates if checking field in Validation.')], HRESULT, 'CheckField',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'bUse' )),
    COMMETHOD(['propput', helpstring(u'Defualt field name.')], HRESULT, 'DefaultFieldName',
              ( ['in'], BSTR, 'FieldName' )),
    COMMETHOD(['propget', helpstring(u'Defualt field name.')], HRESULT, 'DefaultFieldName',
              ( ['retval', 'out'], POINTER(BSTR), 'FieldName' )),
]
################################################################
## code template for IGPSAGeoDataDomain implementation
##class IGPSAGeoDataDomain_Impl(object):
##    def AddDataType(self, Type):
##        u'Adds a GPDataType.'
##        #return 
##
##    @property
##    def FieldTypes(self):
##        u'All esriFieldTypes.'
##        #return types
##
##    def SelectFromWorkspace(self, workspacepath):
##        u'Selects DEGeoDatasets from a workspace path.'
##        #return ppDEGeoDatasets
##
##    def SetFeatureData(self):
##        u'Sets feature data.'
##        #return 
##
##    def ClearGeometryType(self):
##        u'Clears a esriGeometryTypes.'
##        #return 
##
##    def _get(self):
##        u'Indicates if checking field in Validation.'
##        #return bUse
##    def _set(self, bUse):
##        u'Indicates if checking field in Validation.'
##    CheckField = property(_get, _set, doc = _set.__doc__)
##
##    def ValidateFieldType(self, Type):
##        u'Validate an esriFieldType.'
##        #return ok
##
##    def SetNumericFieldTypes(self, integerOnly, allowOID):
##        u'Sets numeric field types.'
##        #return 
##
##    def SetPointFeatureData(self):
##        u'Sets point-type feature data.'
##        #return 
##
##    def _get(self):
##        u'Defualt field name.'
##        #return FieldName
##    def _set(self, FieldName):
##        u'Defualt field name.'
##    DefaultFieldName = property(_get, _set, doc = _set.__doc__)
##
##    def RemoveDataType(self, Type):
##        u'Removes a GPDataType.'
##        #return 
##
##    def SetRasterData(self, integerOnly, allowFormulated):
##        u'Sets raster data.'
##        #return 
##
##    def SelectFields(self, pDETable):
##        u'Selects Fields in a DETable.'
##        #return ppFields
##
##    def ValidateDataType(self, Type):
##        u'Validates a GPDataType.'
##        #return ok
##
##    @property
##    def GeometryType(self, Index):
##        u'Geometry type at an index.'
##        #return Type
##
##    @property
##    def DataTypes(self):
##        u'All GPDataTypes.'
##        #return types
##
##    def ClearDataType(self):
##        u'Clears a GPDataType.'
##        #return 
##
##    def AddGeometryType(self, Type):
##        u'Adds an esriGeometryType.'
##        #return 
##
##    def ClearFieldType(self):
##        u'Clears a esriFieldType.'
##        #return 
##
##    @property
##    def DataTypeCount(self):
##        u'GPDataType count.'
##        #return pCount
##
##    def RemoveFieldType(self, Type):
##        u'Removes an esriFieldType.'
##        #return 
##
##    def RemoveGeometryType(self, Type):
##        u'Removes an esriGeometryType.'
##        #return 
##
##    def SetLineFeatureData(self):
##        u'Sets polyline feature data.'
##        #return 
##
##    @property
##    def DataType(self, Index):
##        u'GPDataType at an index.'
##        #return Type
##
##    @property
##    def FieldType(self, Index):
##        u'Field type at an index.'
##        #return Type
##
##    @property
##    def GeometryTypes(self):
##        u'All esriGeometryTypes.'
##        #return types
##
##    @property
##    def FieldTypeCount(self):
##        u'Field type count.'
##        #return pCount
##
##    def SelectFromArray(self, DEGeoDatasets):
##        u'Selects DEGeoDatasets from an Array.'
##        #return ppDEGeoDatasets
##
##    def SetAreaFeatureData(self):
##        u'Sets polygon feature data.'
##        #return 
##
##    def ValidateGeometryType(self, Type):
##        u'Validates an esriGeometryType.'
##        #return ok
##
##    def AddFieldType(self, Type):
##        u'Adds an esriFieldType.'
##        #return 
##
##    @property
##    def GeometryTypeCount(self):
##        u'Geometry type count.'
##        #return pCount
##

class ProcessLayer(CoClass):
    u'A collection of process layers that behaves like a single layer.'
    _reg_clsid_ = GUID('{D6E92E16-E656-4119-B8E1-88576F6833E6}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IProcessLayer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of the process layer object.'
    _iid_ = GUID('{787B8668-36FB-452A-A96C-6FF2D2B0F038}')
    _idlflags_ = ['oleautomation']
ProcessLayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IProcessLayer, comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.ICompositeLayer, comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.ILayer, comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.ILayer2, comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.ILayerPosition, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeoDataset, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.IIdentify, comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.IIdentify2, comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.ILayerInfo, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayAdmin, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayAdmin2, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IMapLevel, comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.ISymbolLevels, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IConnectionPointContainer, comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.IPublishLayer, comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.ILayerDrawingProperties, comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.ILayerExtensions, comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.ILayerGeneralProperties, comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.ILayerMasking, comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.ILayerSymbologyExtents]
ProcessLayer._outgoing_interfaces_ = [comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.ILayerEvents]

class GPCodedValueDomainProperty(CoClass):
    u'Geoprocessing Coded Value Domain Property.'
    _reg_clsid_ = GUID('{6DF90B4F-A916-46B4-9C20-FEC253A68D90}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPCodedValueDomainProperty(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing coded value domain property object.'
    _iid_ = GUID('{FBC0991D-8905-4B86-9010-9AFC8CCEE75B}')
    _idlflags_ = ['oleautomation']
GPCodedValueDomainProperty._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPCodedValueDomainProperty, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize]

class GPLinearUnitType(CoClass):
    u'Geoprocessing Linear Unit Data Type.'
    _reg_clsid_ = GUID('{6FCFE362-9E99-487E-867D-BBE96365AF8F}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPLinearUnitType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing linear unit data type object.'
    _iid_ = GUID('{527F97B9-605C-4F1D-9298-2F44C74C5838}')
    _idlflags_ = ['oleautomation']
GPLinearUnitType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, IGPLinearUnitType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class IGPRouteIDFieldsDomain(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the route ID field domain.'
    _iid_ = GUID('{57C07454-958C-492C-A97E-BD490C815A5A}')
    _idlflags_ = ['oleautomation']
IGPRouteIDFieldsDomain._methods_ = [
]
################################################################
## code template for IGPRouteIDFieldsDomain implementation
##class IGPRouteIDFieldsDomain_Impl(object):

class EnumGPEnvironment(CoClass):
    u'Enumeration of multiple geoprocessing environment objects.'
    _reg_clsid_ = GUID('{38AA0DE8-A116-447A-8E5D-FF145338567A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
EnumGPEnvironment._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray2, IEnumGPEnvironment]

class IGPFileSupport(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing file support object.'
    _iid_ = GUID('{59742448-EB0E-4830-9742-D4FD721D1971}')
    _idlflags_ = ['oleautomation']
IGPFileSupport._methods_ = [
    COMMETHOD(['propget', helpstring(u'The number of file descriptions.')], HRESULT, 'FileTypeCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The extension of the file type.')], HRESULT, 'FileTypeExtension',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(BSTR), 'extension' )),
    COMMETHOD(['propget', helpstring(u'The description of the file type.')], HRESULT, 'FileTypeDescription',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Description' )),
    COMMETHOD(['propget', helpstring(u'The path to the image file of the file type.')], HRESULT, 'FileTypeImagePath',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Path' )),
]
################################################################
## code template for IGPFileSupport implementation
##class IGPFileSupport_Impl(object):
##    @property
##    def FileTypeCount(self):
##        u'The number of file descriptions.'
##        #return Count
##
##    @property
##    def FileTypeDescription(self, Index):
##        u'The description of the file type.'
##        #return Description
##
##    @property
##    def FileTypeExtension(self, Index):
##        u'The extension of the file type.'
##        #return extension
##
##    @property
##    def FileTypeImagePath(self, Index):
##        u'The path to the image file of the file type.'
##        #return Path
##

class GPGenerateMapServerCacheTilingScheme(CoClass):
    u'Generate Map Server Cache Tiling Scheme.'
    _reg_clsid_ = GUID('{EF165D0A-963C-4B5E-989D-D2E1A45F44A7}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPGenerateMapServerCacheTilingScheme._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPFunction]

IGPRasterData._methods_ = [
    COMMETHOD(['propget', helpstring(u'The embedded data.')], HRESULT, 'Data',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._A7C74158_1062_4664_B404_8694D490FCD1_0_10_2.IGDSData)), 'ppData' )),
    COMMETHOD(['propputref', helpstring(u'The embedded data.')], HRESULT, 'Data',
              ( ['in'], POINTER(comtypes.gen._A7C74158_1062_4664_B404_8694D490FCD1_0_10_2.IGDSData), 'ppData' )),
    COMMETHOD(['propget', helpstring(u'The embedded data format.')], HRESULT, 'Format',
              ( ['retval', 'out'], POINTER(BSTR), 'Format' )),
    COMMETHOD(['propput', helpstring(u'The embedded data format.')], HRESULT, 'Format',
              ( ['in'], BSTR, 'Format' )),
]
################################################################
## code template for IGPRasterData implementation
##class IGPRasterData_Impl(object):
##    def Data(self, ppData):
##        u'The embedded data.'
##        #return 
##
##    def _get(self):
##        u'The embedded data format.'
##        #return Format
##    def _set(self, Format):
##        u'The embedded data format.'
##    Format = property(_get, _set, doc = _set.__doc__)
##

class IGPRasterGDBEnvCompression(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to raster GDB environment compression control.'
    _iid_ = GUID('{ED8E191F-4A97-4D3C-9CD3-C66BFD1DB20C}')
    _idlflags_ = ['oleautomation']
IGPRasterGDBEnvCompression._methods_ = [
    COMMETHOD(['propget', helpstring(u'Compression type.')], HRESULT, 'CompressionType',
              ( ['retval', 'out'], POINTER(comtypes.gen._5C54042B_B2ED_4889_8C40_2D89C19DB41D_0_10_2.esriRasterGDBCompressionEnum), 'compType' )),
    COMMETHOD(['propput', helpstring(u'Compression type.')], HRESULT, 'CompressionType',
              ( ['in'], comtypes.gen._5C54042B_B2ED_4889_8C40_2D89C19DB41D_0_10_2.esriRasterGDBCompressionEnum, 'compType' )),
    COMMETHOD(['propget', helpstring(u'Compression quality.')], HRESULT, 'CompressionQuality',
              ( ['retval', 'out'], POINTER(c_int), 'Value' )),
    COMMETHOD(['propput', helpstring(u'Compression quality.')], HRESULT, 'CompressionQuality',
              ( ['in'], c_int, 'Value' )),
]
################################################################
## code template for IGPRasterGDBEnvCompression implementation
##class IGPRasterGDBEnvCompression_Impl(object):
##    def _get(self):
##        u'Compression type.'
##        #return compType
##    def _set(self, compType):
##        u'Compression type.'
##    CompressionType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Compression quality.'
##        #return Value
##    def _set(self, Value):
##        u'Compression quality.'
##    CompressionQuality = property(_get, _set, doc = _set.__doc__)
##

class GPLinearUnit(CoClass):
    u'Geoprocessing value object containing a linear unit value.'
    _reg_clsid_ = GUID('{842DE5C7-80FB-4C41-8621-69DEAD3CC024}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPLinearUnit(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing linear unit object.'
    _iid_ = GUID('{0EE02101-1597-473C-B77D-1EDFD547ACE5}')
    _idlflags_ = ['oleautomation']
class IGPLinearUnit2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing linear unit object.'
    _iid_ = GUID('{ACAF2C1B-97CB-45F5-99B1-3F0B0A7216E2}')
    _idlflags_ = ['oleautomation']
GPLinearUnit._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue, IGPLinearUnit, IGPLinearUnit2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

class GPRangeDomain(CoClass):
    u'Geoprocessing Range Domain.'
    _reg_clsid_ = GUID('{5B2241C0-A61C-11D5-931D-0080C71A3226}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPRangeDomain._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRangeDomain, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDomain, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

class IGPSQLExpression(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing SQL expression object.'
    _iid_ = GUID('{D38E3342-9F19-4044-A138-32497B35D011}')
    _idlflags_ = ['oleautomation']
IGPSQLExpression._methods_ = [
]
################################################################
## code template for IGPSQLExpression implementation
##class IGPSQLExpression_Impl(object):

class GPCadAnnoDomain(CoClass):
    u'Geoprocessing CAD Annotation Feature Class Domain.'
    _reg_clsid_ = GUID('{C78F0CD6-A4C2-4EAE-A1A9-BC805D135C62}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPCadAnnoDomain._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDomain, IGPAnnoDomain, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGxFilterInfo]

class MdParameter(CoClass):
    u'Model parameter object that references a model variable or contains a value object.'
    _reg_clsid_ = GUID('{9ABF7449-72EF-4F12-A547-5EDA6161B52D}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPParameter2(IGPParameter):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing parameter object.'
    _iid_ = GUID('{3A5BCFF9-9178-4CFE-9CD9-20B7593CB17F}')
    _idlflags_ = ['oleautomation']
class IGPParameter3(IGPParameter2):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing parameter object.'
    _iid_ = GUID('{ED520462-7C5F-4EEE-BCDD-8A82A7174A91}')
    _idlflags_ = ['oleautomation']
MdParameter._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, IGPParameter, IGPParameterEdit, IMdParameter, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, IGPParameter2, IGPParameterEdit2, IGPParameter3, IGPParameterEdit3]

class GPCoverageFeatureClassDomain(CoClass):
    u'Geoprocessing Coverage Feature Class Domain.'
    _reg_clsid_ = GUID('{3FE7B260-CE52-11D5-933A-0080C71A3226}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPCoverageFeatureClassDomain._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDomain, IGPCoverageFeatureClassDomain]

IGPLinearUnitType._methods_ = [
]
################################################################
## code template for IGPLinearUnitType implementation
##class IGPLinearUnitType_Impl(object):

IGPLinearUnit._methods_ = [
    COMMETHOD(['propget', helpstring(u'Gets the value, as a double, of the linear unit.')], HRESULT, 'Value',
              ( ['retval', 'out'], POINTER(c_double), 'pValue' )),
    COMMETHOD(['propput', helpstring(u'Gets the value, as a double, of the linear unit.')], HRESULT, 'Value',
              ( ['in'], c_double, 'pValue' )),
    COMMETHOD(['propget', helpstring(u'Gets the type of linear unit.')], HRESULT, 'Units',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits), 'pUnits' )),
    COMMETHOD(['propput', helpstring(u'Gets the type of linear unit.')], HRESULT, 'Units',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits, 'pUnits' )),
    COMMETHOD([helpstring(u'Converts the current value to the specified linear unit type.')], HRESULT, 'ConvertValue',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits, 'Units' ),
              ( ['retval', 'out'], POINTER(c_double), 'pValue' )),
]
################################################################
## code template for IGPLinearUnit implementation
##class IGPLinearUnit_Impl(object):
##    def _get(self):
##        u'Gets the type of linear unit.'
##        #return pUnits
##    def _set(self, pUnits):
##        u'Gets the type of linear unit.'
##    Units = property(_get, _set, doc = _set.__doc__)
##
##    def ConvertValue(self, Units):
##        u'Converts the current value to the specified linear unit type.'
##        #return pValue
##
##    def _get(self):
##        u'Gets the value, as a double, of the linear unit.'
##        #return pValue
##    def _set(self, pValue):
##        u'Gets the value, as a double, of the linear unit.'
##    Value = property(_get, _set, doc = _set.__doc__)
##

class GPCreateTiles(CoClass):
    u'Create a set of tiles for chunking.'
    _reg_clsid_ = GUID('{B2C861D1-5957-4BF9-AF30-870B4D61A5FF}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPCreateTiles(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Create a set of tiles for chunking.'
    _iid_ = GUID('{FCE175FA-BC70-4973-9A8D-15B1ED8435A1}')
    _idlflags_ = ['oleautomation']
GPCreateTiles._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPCreateTiles]

class GPTest(CoClass):
    u'GPTest Object.'
    _reg_clsid_ = GUID('{0DF6991C-DB2B-452C-83C2-D10ADBAF3A98}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPTest(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of the GPTest object.'
    _iid_ = GUID('{029325C4-ED3B-4F7E-A172-1984A828C90B}')
    _idlflags_ = ['oleautomation']
GPTest._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPTest]

class GPCompositeLayerType(CoClass):
    u'Geoprocessing Composite Layer Data Type.'
    _reg_clsid_ = GUID('{F2670EEF-BA0C-45E1-8EC1-402686C2F6C4}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPCompositeLayerType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, IGPCompositeLayerType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._1CE6AC65_43F5_4529_8FC0_D7ED298E4F1A_0_10_2.IGPLayerType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDEGeoDatasetType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGxFilterInfo]

class IGPArealUnit(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing areal unit object.'
    _iid_ = GUID('{C3E5E514-0FD9-4E5C-8B07-E9F838113F76}')
    _idlflags_ = ['oleautomation']
IGPArealUnit._methods_ = [
    COMMETHOD(['propget', helpstring(u'Gets the value, as a double, of the areal unit.')], HRESULT, 'Value',
              ( ['retval', 'out'], POINTER(c_double), 'pValue' )),
    COMMETHOD(['propput', helpstring(u'Gets the value, as a double, of the areal unit.')], HRESULT, 'Value',
              ( ['in'], c_double, 'pValue' )),
    COMMETHOD(['propget', helpstring(u'Gets the type of areal unit.')], HRESULT, 'Units',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriAreaUnits), 'pUnits' )),
    COMMETHOD(['propput', helpstring(u'Gets the type of areal unit.')], HRESULT, 'Units',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriAreaUnits, 'pUnits' )),
    COMMETHOD([helpstring(u'Converts the current value to the specified areal unit type.')], HRESULT, 'ConvertValue',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriAreaUnits, 'Units' ),
              ( ['retval', 'out'], POINTER(c_double), 'pValue' )),
]
################################################################
## code template for IGPArealUnit implementation
##class IGPArealUnit_Impl(object):
##    def _get(self):
##        u'Gets the type of areal unit.'
##        #return pUnits
##    def _set(self, pUnits):
##        u'Gets the type of areal unit.'
##    Units = property(_get, _set, doc = _set.__doc__)
##
##    def ConvertValue(self, Units):
##        u'Converts the current value to the specified areal unit type.'
##        #return pValue
##
##    def _get(self):
##        u'Gets the value, as a double, of the areal unit.'
##        #return pValue
##    def _set(self, pValue):
##        u'Gets the value, as a double, of the areal unit.'
##    Value = property(_get, _set, doc = _set.__doc__)
##

class IGPArealUnitType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing areal unit data type object.'
    _iid_ = GUID('{8C355351-41B8-4DBF-B742-19BA4A9C3655}')
    _idlflags_ = ['oleautomation']
IGPArealUnitType._methods_ = [
]
################################################################
## code template for IGPArealUnitType implementation
##class IGPArealUnitType_Impl(object):

class GPArealUnit(CoClass):
    u'Geoprocessing value object containing a areal unit value.'
    _reg_clsid_ = GUID('{62C28A96-B84E-49F8-ACF5-0B1B5A87EF08}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPArealUnit._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue, IGPArealUnit, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

class IMdModelIteration2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to properties/methods of a model iteration.'
    _iid_ = GUID('{D9DE210B-7457-42B3-A71D-F75905582C48}')
    _idlflags_ = ['oleautomation']
IMdModelIteration2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates model iteration type.')], HRESULT, 'IterationType',
              ( ['retval', 'out'], POINTER(esriMdIterationType), 'Type' )),
    COMMETHOD(['propput', helpstring(u'Indicates model iteration type.')], HRESULT, 'IterationType',
              ( ['in'], esriMdIterationType, 'Type' )),
    COMMETHOD(['propget', helpstring(u'Number of times to iterate the model.')], HRESULT, 'IterationCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propput', helpstring(u'Number of times to iterate the model.')], HRESULT, 'IterationCount',
              ( ['in'], c_int, 'Count' )),
    COMMETHOD(['propget', helpstring(u'Model iteration element.')], HRESULT, 'IterationElement',
              ( ['retval', 'out'], POINTER(POINTER(IMdElement)), 'ppElement' )),
    COMMETHOD(['propputref', helpstring(u'Model iteration element.')], HRESULT, 'IterationElement',
              ( ['in'], POINTER(IMdElement), 'ppElement' )),
    COMMETHOD(['propget', helpstring(u'Current model iteration.')], HRESULT, 'CurrentIteration',
              ( ['retval', 'out'], POINTER(c_int), 'iteration' )),
]
################################################################
## code template for IMdModelIteration2 implementation
##class IMdModelIteration2_Impl(object):
##    def _get(self):
##        u'Indicates model iteration type.'
##        #return Type
##    def _set(self, Type):
##        u'Indicates model iteration type.'
##    IterationType = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def CurrentIteration(self):
##        u'Current model iteration.'
##        #return iteration
##
##    def IterationElement(self, ppElement):
##        u'Model iteration element.'
##        #return 
##
##    def _get(self):
##        u'Number of times to iterate the model.'
##        #return Count
##    def _set(self, Count):
##        u'Number of times to iterate the model.'
##    IterationCount = property(_get, _set, doc = _set.__doc__)
##

class ExportWebMap(CoClass):
    u'Export WebMap to a specified format based on potential layout provided.'
    _reg_clsid_ = GUID('{64194667-A362-4E40-9F6A-C636255DF601}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPFunction2(IGPFunction):
    _case_insensitive_ = True
    u'Provides access to methods on a geoprocessing function tool object.'
    _iid_ = GUID('{2CB3B43D-0077-449E-BB2D-EAF5C054B330}')
    _idlflags_ = ['oleautomation']
ExportWebMap._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPFunction, IGPFunction2]

IEnumGPToolName._methods_ = [
    COMMETHOD([helpstring(u'Returns the next tool name in the enumeration.')], HRESULT, 'Next',
              ( ['retval', 'out'], POINTER(POINTER(IGPToolName)), 'Name' )),
    COMMETHOD([helpstring(u'Resets the current position of the enumeration.')], HRESULT, 'Reset'),
]
################################################################
## code template for IEnumGPToolName implementation
##class IEnumGPToolName_Impl(object):
##    def Reset(self):
##        u'Resets the current position of the enumeration.'
##        #return 
##
##    def Next(self):
##        u'Returns the next tool name in the enumeration.'
##        #return Name
##

class IGPRouteDomain(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the route feature class domain.'
    _iid_ = GUID('{5AB46A55-C6C5-40E4-A3A7-D062CD9055C9}')
    _idlflags_ = ['oleautomation']
IGPRouteDomain._methods_ = [
]
################################################################
## code template for IGPRouteDomain implementation
##class IGPRouteDomain_Impl(object):

IGPTest._methods_ = [
    COMMETHOD([helpstring(u'GetDataTypeNames.')], HRESULT, 'GetDataTypeNameObjects',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'gpNames' )),
    COMMETHOD([helpstring(u'GetFunctionNameObjects.')], HRESULT, 'GetFunctionNameObjects',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'gpNames' )),
]
################################################################
## code template for IGPTest implementation
##class IGPTest_Impl(object):
##    def GetDataTypeNameObjects(self):
##        u'GetDataTypeNames.'
##        #return gpNames
##
##    def GetFunctionNameObjects(self):
##        u'GetFunctionNameObjects.'
##        #return gpNames
##

class GPRandomNumberGenerator(CoClass):
    u'Geoprocessing value object for producing Random Number Generator values.'
    _reg_clsid_ = GUID('{A5C6674B-BCA6-46C8-8205-B5B958EEAEB9}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPRandomNumberGenerator._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue, IGPRandomNumberGenerator, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

class GPWorkspaceDomain(CoClass):
    u'Geoprocessing Workspace Domain.'
    _reg_clsid_ = GUID('{0238381E-083F-4D29-933D-09B46ECCCF73}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPWorkspaceDomain(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing workspace object.'
    _iid_ = GUID('{7FEEBBDF-AF2E-4FE1-B28A-DB6BF5B9C869}')
    _idlflags_ = ['oleautomation']
GPWorkspaceDomain._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDomain, IGPWorkspaceDomain, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGxFilterInfo]

class IGPFunctionFactory2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing function factory object.'
    _iid_ = GUID('{4276D696-3298-4BB2-8C2D-8E54BE477644}')
    _idlflags_ = ['oleautomation']
IGPFunctionFactory2._methods_ = [
    COMMETHOD([helpstring(u'Release the functions cached by the geoprocessing function factory.')], HRESULT, 'ReleaseInternals'),
]
################################################################
## code template for IGPFunctionFactory2 implementation
##class IGPFunctionFactory2_Impl(object):
##    def ReleaseInternals(self):
##        u'Release the functions cached by the geoprocessing function factory.'
##        #return 
##

IGPType._methods_ = [
]
################################################################
## code template for IGPType implementation
##class IGPType_Impl(object):

IGPVirtualTableDomain._methods_ = [
]
################################################################
## code template for IGPVirtualTableDomain implementation
##class IGPVirtualTableDomain_Impl(object):

IGPTool._methods_ = [
    COMMETHOD(['propget', helpstring(u'The name of the tool.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'DisplayName' )),
    COMMETHOD(['propput', helpstring(u'The name of the tool.')], HRESULT, 'Name',
              ( ['in'], BSTR, 'DisplayName' )),
    COMMETHOD(['propget', helpstring(u'The display name of the tool.')], HRESULT, 'DisplayName',
              ( ['retval', 'out'], POINTER(BSTR), 'DisplayName' )),
    COMMETHOD(['propput', helpstring(u'The display name of the tool.')], HRESULT, 'DisplayName',
              ( ['in'], BSTR, 'DisplayName' )),
    COMMETHOD(['propget', helpstring(u'The description of the tool.')], HRESULT, 'Description',
              ( ['retval', 'out'], POINTER(BSTR), 'Description' )),
    COMMETHOD(['propput', helpstring(u'The description of the tool.')], HRESULT, 'Description',
              ( ['in'], BSTR, 'Description' )),
    COMMETHOD(['propget', helpstring(u'The tool category.')], HRESULT, 'ToolCategory',
              ( ['retval', 'out'], POINTER(BSTR), 'Category' )),
    COMMETHOD(['propput', helpstring(u'The tool category.')], HRESULT, 'ToolCategory',
              ( ['in'], BSTR, 'Category' )),
    COMMETHOD(['propget', helpstring(u'The toolbox of the tool.')], HRESULT, 'Toolbox',
              ( ['retval', 'out'], POINTER(POINTER(IGPToolbox)), 'Toolbox' )),
    COMMETHOD(['propget', helpstring(u'The type of tool.')], HRESULT, 'ToolType',
              ( ['retval', 'out'], POINTER(esriGPToolType), 'Type' )),
    COMMETHOD([helpstring(u'Returns whether the tool is capable of being executed/edited.')], HRESULT, 'IsValid',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Valid' )),
    COMMETHOD([helpstring(u'Returns whether the tool is part of the current product.')], HRESULT, 'IsLicensedForProduct',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsLicensed' )),
    COMMETHOD([helpstring(u'Returns whether the tool is licensed to be executed.')], HRESULT, 'IsLicensed',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsLicensed' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the tool has been deleted.')], HRESULT, 'IsDeleted',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'deleted' )),
    COMMETHOD([helpstring(u'Returns whether or not the properties of the tool can be modified.')], HRESULT, 'CanAlter',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'CanAlter' )),
    COMMETHOD([helpstring(u'Returns whether or not the source (i.e., definition) of the tool can be modified.')], HRESULT, 'CanEditSource',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'CanEdit' )),
    COMMETHOD(['propget', helpstring(u'The set of parameters required to execute the tool.')], HRESULT, 'ParameterInfo',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'params' )),
    COMMETHOD(['propget', helpstring(u'The class identifier of the custom dialog to use for this tool.')], HRESULT, 'DialogCLSID',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IUID)), 'CLSID' )),
    COMMETHOD([helpstring(u'Stores the current state of the tool to the toolbox.')], HRESULT, 'Store'),
    COMMETHOD([helpstring(u'Validates the given set of values.')], HRESULT, 'Validate',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'paramvalues' ),
              ( ['in'], VARIANT_BOOL, 'updateValues' ),
              ( ['in'], POINTER(IGPEnvironmentManager), 'pEnvMgr' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPMessages)), 'Messages' )),
    COMMETHOD([helpstring(u'Executes the tool with the given set of values.')], HRESULT, 'Execute',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'paramvalues' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'TrackCancel' ),
              ( ['in'], POINTER(IGPEnvironmentManager), 'pEnvMgr' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPMessages), 'Messages' )),
    COMMETHOD([helpstring(u"Presents a modal dialog to edit the tool's properties.")], HRESULT, 'EditProperties',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE, 'hParent' ),
              ( ['in'], POINTER(IGPEnvironmentManager), 'GPEnvMgr' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'ok' )),
    COMMETHOD([helpstring(u'Returns the renderer associated with the specified parameter.')], HRESULT, 'GetRenderer',
              ( ['in'], POINTER(IGPParameter), 'pParam' ),
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppRenderer' )),
    COMMETHOD(['propget', helpstring(u'The path of the tool object.')], HRESULT, 'PathName',
              ( ['retval', 'out'], POINTER(BSTR), 'PathName' )),
    COMMETHOD(['propget', helpstring(u'Indicates if path names are stored relative to the tool/toolbox.')], HRESULT, 'RelativePaths',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'relPaths' )),
    COMMETHOD(['propput', helpstring(u'Indicates if path names are stored relative to the tool/toolbox.')], HRESULT, 'RelativePaths',
              ( ['in'], VARIANT_BOOL, 'relPaths' )),
    COMMETHOD(['propget', helpstring(u'Name of the (CHM) file containing help information for this tool.')], HRESULT, 'HelpFile',
              ( ['retval', 'out'], POINTER(BSTR), 'File' )),
    COMMETHOD(['propput', helpstring(u'Name of the (CHM) file containing help information for this tool.')], HRESULT, 'HelpFile',
              ( ['in'], BSTR, 'File' )),
    COMMETHOD(['propget', helpstring(u'The context identifier of the topic within the help file for this tool.')], HRESULT, 'HelpContext',
              ( ['retval', 'out'], POINTER(c_int), 'context' )),
    COMMETHOD(['propput', helpstring(u'The context identifier of the topic within the help file for this tool.')], HRESULT, 'HelpContext',
              ( ['in'], c_int, 'context' )),
]
################################################################
## code template for IGPTool implementation
##class IGPTool_Impl(object):
##    def _get(self):
##        u'The display name of the tool.'
##        #return DisplayName
##    def _set(self, DisplayName):
##        u'The display name of the tool.'
##    DisplayName = property(_get, _set, doc = _set.__doc__)
##
##    def Execute(self, paramvalues, TrackCancel, pEnvMgr, Messages):
##        u'Executes the tool with the given set of values.'
##        #return 
##
##    def _get(self):
##        u'Indicates if path names are stored relative to the tool/toolbox.'
##        #return relPaths
##    def _set(self, relPaths):
##        u'Indicates if path names are stored relative to the tool/toolbox.'
##    RelativePaths = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The context identifier of the topic within the help file for this tool.'
##        #return context
##    def _set(self, context):
##        u'The context identifier of the topic within the help file for this tool.'
##    HelpContext = property(_get, _set, doc = _set.__doc__)
##
##    def IsLicensedForProduct(self):
##        u'Returns whether the tool is part of the current product.'
##        #return IsLicensed
##
##    def _get(self):
##        u'The tool category.'
##        #return Category
##    def _set(self, Category):
##        u'The tool category.'
##    ToolCategory = property(_get, _set, doc = _set.__doc__)
##
##    def Store(self):
##        u'Stores the current state of the tool to the toolbox.'
##        #return 
##
##    def _get(self):
##        u'The description of the tool.'
##        #return Description
##    def _set(self, Description):
##        u'The description of the tool.'
##    Description = property(_get, _set, doc = _set.__doc__)
##
##    def CanAlter(self):
##        u'Returns whether or not the properties of the tool can be modified.'
##        #return CanAlter
##
##    def IsLicensed(self):
##        u'Returns whether the tool is licensed to be executed.'
##        #return IsLicensed
##
##    def Validate(self, paramvalues, updateValues, pEnvMgr):
##        u'Validates the given set of values.'
##        #return Messages
##
##    @property
##    def IsDeleted(self):
##        u'Indicates if the tool has been deleted.'
##        #return deleted
##
##    def GetRenderer(self, pParam):
##        u'Returns the renderer associated with the specified parameter.'
##        #return ppRenderer
##
##    def _get(self):
##        u'The name of the tool.'
##        #return DisplayName
##    def _set(self, DisplayName):
##        u'The name of the tool.'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def CanEditSource(self):
##        u'Returns whether or not the source (i.e., definition) of the tool can be modified.'
##        #return CanEdit
##
##    def _get(self):
##        u'Name of the (CHM) file containing help information for this tool.'
##        #return File
##    def _set(self, File):
##        u'Name of the (CHM) file containing help information for this tool.'
##    HelpFile = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Toolbox(self):
##        u'The toolbox of the tool.'
##        #return Toolbox
##
##    @property
##    def ParameterInfo(self):
##        u'The set of parameters required to execute the tool.'
##        #return params
##
##    @property
##    def ToolType(self):
##        u'The type of tool.'
##        #return Type
##
##    @property
##    def DialogCLSID(self):
##        u'The class identifier of the custom dialog to use for this tool.'
##        #return CLSID
##
##    def IsValid(self):
##        u'Returns whether the tool is capable of being executed/edited.'
##        #return Valid
##
##    def EditProperties(self, hParent, GPEnvMgr):
##        u"Presents a modal dialog to edit the tool's properties."
##        #return ok
##
##    @property
##    def PathName(self):
##        u'The path of the tool object.'
##        #return PathName
##

IEnumGPTool._methods_ = [
    COMMETHOD([helpstring(u'Returns the next tool in the enumeration.')], HRESULT, 'Next',
              ( ['retval', 'out'], POINTER(POINTER(IGPTool)), 'Tool' )),
    COMMETHOD([helpstring(u'Resets the current position of the enumeration.')], HRESULT, 'Reset'),
]
################################################################
## code template for IEnumGPTool implementation
##class IEnumGPTool_Impl(object):
##    def Reset(self):
##        u'Resets the current position of the enumeration.'
##        #return 
##
##    def Next(self):
##        u'Returns the next tool in the enumeration.'
##        #return Tool
##

class IGPCustomToolHelper(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to methods on a custom tool helper object.'
    _iid_ = GUID('{90DD4F44-D116-4906-B69A-747AFC24C7BD}')
    _idlflags_ = ['oleautomation']
IGPToolExtensionGen._methods_ = [
    COMMETHOD(['propget', helpstring(u'The factory object associated with this tool extension.')], HRESULT, 'ToolExtensionFactory',
              ( ['retval', 'out'], POINTER(POINTER(IGPToolExtensionFactoryGen)), 'factory' )),
    COMMETHOD(['propget', helpstring(u'The custom tool helper object associated with the tool extension.')], HRESULT, 'CustomToolHelper',
              ( ['retval', 'out'], POINTER(POINTER(IGPCustomToolHelper)), 'helper' )),
    COMMETHOD(['propputref', helpstring(u'The custom tool helper object associated with the tool extension.')], HRESULT, 'CustomToolHelper',
              ( [], POINTER(IGPCustomToolHelper), 'helper' )),
    COMMETHOD(['propget', helpstring(u'The CLSID of a custom dialog class to enter/edit parameter values for custom tools associated with this tool extension.')], HRESULT, 'DialogCLSID',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IUID)), 'CLSID' )),
    COMMETHOD(['propget', helpstring(u'The parameters required to execute the custom tool associated with this tool extension.')], HRESULT, 'ParameterInfo',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'params' )),
    COMMETHOD([helpstring(u'Returns whether or not the tool extension is can be executed.')], HRESULT, 'IsValid',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Valid' )),
    COMMETHOD([helpstring(u'Returns whether or not the tool extension can be executed within the current application product.')], HRESULT, 'IsLicensedForProduct',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsLicensed' )),
    COMMETHOD([helpstring(u'Returns whether or not the tool extension has all necessary product licenses to be executed.')], HRESULT, 'IsLicensed',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsLicensed' )),
    COMMETHOD([helpstring(u'Returns whether or not the source for the tool extension can be edited.')], HRESULT, 'CanEditSource',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'CanEdit' )),
    COMMETHOD([helpstring(u'Returns a custom renderer for a given parameter.')], HRESULT, 'GetRenderer',
              ( ['in'], POINTER(IGPParameter), 'pParam' ),
              ( ['retval', 'out'], POINTER(VARIANT), 'pRenderer' )),
    COMMETHOD([helpstring(u'Validates the given set of values.')], HRESULT, 'Validate',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'paramvalues' ),
              ( ['in'], VARIANT_BOOL, 'updateValues' ),
              ( ['in'], POINTER(IGPEnvironmentManager), 'pEnvMgr' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPMessages)), 'Messages' )),
    COMMETHOD([helpstring(u'Executes the tool extension given the set of parameter values.')], HRESULT, 'Execute',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'paramvalues' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'TrackCancel' ),
              ( ['in'], POINTER(IGPEnvironmentManager), 'pEnvMgr' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPMessages), 'Messages' )),
    COMMETHOD([helpstring(u'Updates the given metadata property set with the current tool extension properties.')], HRESULT, 'SynchronizeMetadata',
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriMetadataSyncAction, 'action' ),
              ( ['in'], c_int, 'Interval' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet), 'Metadata' )),
]
################################################################
## code template for IGPToolExtensionGen implementation
##class IGPToolExtensionGen_Impl(object):
##    def GetRenderer(self, pParam):
##        u'Returns a custom renderer for a given parameter.'
##        #return pRenderer
##
##    @property
##    def ParameterInfo(self):
##        u'The parameters required to execute the custom tool associated with this tool extension.'
##        #return params
##
##    @property
##    def DialogCLSID(self):
##        u'The CLSID of a custom dialog class to enter/edit parameter values for custom tools associated with this tool extension.'
##        #return CLSID
##
##    @property
##    def ToolExtensionFactory(self):
##        u'The factory object associated with this tool extension.'
##        #return factory
##
##    def CanEditSource(self):
##        u'Returns whether or not the source for the tool extension can be edited.'
##        #return CanEdit
##
##    def Execute(self, paramvalues, TrackCancel, pEnvMgr, Messages):
##        u'Executes the tool extension given the set of parameter values.'
##        #return 
##
##    def CustomToolHelper(self, helper):
##        u'The custom tool helper object associated with the tool extension.'
##        #return 
##
##    def IsLicensed(self):
##        u'Returns whether or not the tool extension has all necessary product licenses to be executed.'
##        #return IsLicensed
##
##    def IsValid(self):
##        u'Returns whether or not the tool extension is can be executed.'
##        #return Valid
##
##    def IsLicensedForProduct(self):
##        u'Returns whether or not the tool extension can be executed within the current application product.'
##        #return IsLicensed
##
##    def Validate(self, paramvalues, updateValues, pEnvMgr):
##        u'Validates the given set of values.'
##        #return Messages
##
##    def SynchronizeMetadata(self, action, Interval, Metadata):
##        u'Updates the given metadata property set with the current tool extension properties.'
##        #return 
##

class WPSServer(CoClass):
    u'The WPS Server Object Extension.'
    _reg_clsid_ = GUID('{41E1075D-43BC-4101-97BC-8E25EE8F0E48}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
WPSServer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._18F2FC71_6B30_45B9_B101_037A8B868B66_0_10_2.IServerObjectExtension, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IObjectConstruct, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IObjectActivate, IWPSServer, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IWebRequestHandler]

class GPCovAnnoDomain(CoClass):
    u'Geoprocessing Coverage Annotation Feature Class Domain.'
    _reg_clsid_ = GUID('{B5C0DBCB-9953-4E01-A753-88C7EC07AF4F}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPCovAnnoDomain._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDomain, IGPAnnoDomain, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGxFilterInfo]

class GPFeatureClassDomain(CoClass):
    u'Geoprocessing Feature Class Domain.'
    _reg_clsid_ = GUID('{652EC5FF-1772-49AB-B7C7-439143D44D56}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPFeatureClassDomain._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDomain, IGPFeatureClassDomain, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGxFilterInfo]

class DataElementDomain(CoClass):
    u'Geoprocessing Data Element Domain.'
    _reg_clsid_ = GUID('{B6F39D28-C6F6-45B4-A60C-2601A11BE4BD}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IDataElementDomain(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a data element domain object.'
    _iid_ = GUID('{5082C43E-0803-44AB-B978-68B79F6CE509}')
    _idlflags_ = ['oleautomation']
DataElementDomain._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDomain, IDataElementDomain]


# values for enumeration 'esriGPFieldInfoSplitRule'
esriGPFieldInfoSplitRuleNone = 0
esriGPFieldInfoSplitRuleRatio = 1
esriGPFieldInfoSplitRule = c_int # enum
class GPCalculatorExpression(CoClass):
    u'Geoprocessing value object containing a Field Calc Expression.'
    _reg_clsid_ = GUID('{952C38A0-4CEF-488A-8C99-7D19B6F74F91}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPCalculatorExpression(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing Calculator Expression object.'
    _iid_ = GUID('{3CC47863-AB2E-437F-97C6-F6A44814DC94}')
    _idlflags_ = ['oleautomation']
GPCalculatorExpression._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue, IGPString, IGPCalculatorExpression, IGPVariant, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

class GPFieldInfoDomain(CoClass):
    u'Geoprocessing Field Info Domain.'
    _reg_clsid_ = GUID('{2B22284F-A24C-4FBF-813B-09B0627CDC19}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPFieldInfoDomain(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing field info domain object.'
    _iid_ = GUID('{692C5207-76E2-494E-B1A2-13A79C6E1F73}')
    _idlflags_ = ['oleautomation']
GPFieldInfoDomain._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDomain, IGPFieldInfoDomain]

class IGPModelTool(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to methods on a geoprocessing model tool object.'
    _iid_ = GUID('{EDD3B6B7-BA3C-473A-891C-D4F793EA4756}')
    _idlflags_ = ['oleautomation']
class IMdDiagramProperties(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to properties/methods of a model diagram properties object.'
    _iid_ = GUID('{46D9FDB4-21C9-46A7-8440-0234D1EBE62B}')
    _idlflags_ = ['hidden']
class IEnumMdVariable(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to properties/methods of an enumeration of model variables.'
    _iid_ = GUID('{7569F892-EA75-4F8D-8478-D23596534B8D}')
    _idlflags_ = ['oleautomation']
IGPModelTool._methods_ = [
    COMMETHOD(['propget', helpstring(u'The model object associated with the tool.')], HRESULT, 'Model',
              ( ['retval', 'out'], POINTER(POINTER(IMdModel)), 'Model' )),
    COMMETHOD(['propputref', helpstring(u'The model object associated with the tool.')], HRESULT, 'Model',
              ( ['in'], POINTER(IMdModel), 'Model' )),
    COMMETHOD(['propget', helpstring(u'The diagram properties object associated with the tool.')], HRESULT, 'DiagramProperties',
              ( ['retval', 'out'], POINTER(POINTER(IMdDiagramProperties)), 'DiagramProperties' )),
    COMMETHOD(['propputref', helpstring(u'The diagram properties object associated with the tool.')], HRESULT, 'DiagramProperties',
              ( ['in'], POINTER(IMdDiagramProperties), 'DiagramProperties' )),
    COMMETHOD([helpstring(u'Adds a parameter to the model tool.')], HRESULT, 'AddParameter',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD([helpstring(u'Removes a parameter from the model tool.')], HRESULT, 'RemoveParameter',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD([helpstring(u'Finds a parameter in the model tool.')], HRESULT, 'FindParameter',
              ( ['in'], BSTR, 'Name' ),
              ( ['retval', 'out'], POINTER(POINTER(IGPParameter)), 'ppParameter' )),
    COMMETHOD([helpstring(u'Finds a parameter in the model tool.')], HRESULT, 'GenerateDefaultParameters'),
    COMMETHOD([helpstring(u'Rename element.')], HRESULT, 'RenameElement',
              ( ['in'], BSTR, 'oldName' ),
              ( ['in'], BSTR, 'newName' )),
    COMMETHOD([helpstring(u'Clear parameters.')], HRESULT, 'ClearParameters'),
    COMMETHOD([helpstring(u'Delete intermediate data.')], HRESULT, 'DeleteIntermediateData'),
    COMMETHOD([helpstring(u'Get intermediate variables.')], HRESULT, 'GetIntermediateVariables',
              ( ['retval', 'out'], POINTER(POINTER(IEnumMdVariable)), 'ppEnumVariable' )),
]
################################################################
## code template for IGPModelTool implementation
##class IGPModelTool_Impl(object):
##    def DeleteIntermediateData(self):
##        u'Delete intermediate data.'
##        #return 
##
##    def ClearParameters(self):
##        u'Clear parameters.'
##        #return 
##
##    def DiagramProperties(self, DiagramProperties):
##        u'The diagram properties object associated with the tool.'
##        #return 
##
##    def FindParameter(self, Name):
##        u'Finds a parameter in the model tool.'
##        #return ppParameter
##
##    def GenerateDefaultParameters(self):
##        u'Finds a parameter in the model tool.'
##        #return 
##
##    def AddParameter(self, Name):
##        u'Adds a parameter to the model tool.'
##        #return 
##
##    def RenameElement(self, oldName, newName):
##        u'Rename element.'
##        #return 
##
##    def Model(self, Model):
##        u'The model object associated with the tool.'
##        #return 
##
##    def GetIntermediateVariables(self):
##        u'Get intermediate variables.'
##        #return ppEnumVariable
##
##    def RemoveParameter(self, Name):
##        u'Removes a parameter from the model tool.'
##        #return 
##

class IMapCacheTileManager(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to methods that manage map server cache tiles.'
    _iid_ = GUID('{C1261B98-E523-4644-987F-C36BEA9D81F9}')
    _idlflags_ = ['oleautomation']
IMapCacheTileManager._methods_ = [
    COMMETHOD(['propget', helpstring(u'Server machine name.')], HRESULT, 'Host',
              ( ['retval', 'out'], POINTER(BSTR), 'pHost' )),
    COMMETHOD(['propput', helpstring(u'Server machine name.')], HRESULT, 'Host',
              ( ['in'], BSTR, 'pHost' )),
    COMMETHOD(['propget', helpstring(u'Service name.')], HRESULT, 'Service',
              ( ['retval', 'out'], POINTER(BSTR), 'pService' )),
    COMMETHOD(['propput', helpstring(u'Service name.')], HRESULT, 'Service',
              ( ['in'], BSTR, 'pService' )),
    COMMETHOD(['propget', helpstring(u'Dataframe name.')], HRESULT, 'Dataframe',
              ( ['retval', 'out'], POINTER(BSTR), 'pDataframe' )),
    COMMETHOD(['propput', helpstring(u'Dataframe name.')], HRESULT, 'Dataframe',
              ( ['in'], BSTR, 'pDataframe' )),
    COMMETHOD([helpstring(u'Enable local caching')], HRESULT, 'EnableLocalCaching',
              ( ['in'], VARIANT_BOOL, 'localCaching' )),
    COMMETHOD([helpstring(u'Import cache.')], HRESULT, 'Manage',
              ( ['in'], BSTR, 'LayerName' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'pLevels' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'pGeometry' ),
              ( [], comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.esriMapCacheUpdateMode, 'Mode' ),
              ( ['in'], c_int, 'numThreads' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPMessages), 'pGPMessages' )),
]
################################################################
## code template for IMapCacheTileManager implementation
##class IMapCacheTileManager_Impl(object):
##    def _get(self):
##        u'Server machine name.'
##        #return pHost
##    def _set(self, pHost):
##        u'Server machine name.'
##    Host = property(_get, _set, doc = _set.__doc__)
##
##    def Manage(self, LayerName, pLevels, pGeometry, Mode, numThreads, pTrackCancel, pGPMessages):
##        u'Import cache.'
##        #return 
##
##    def _get(self):
##        u'Dataframe name.'
##        #return pDataframe
##    def _set(self, pDataframe):
##        u'Dataframe name.'
##    Dataframe = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Service name.'
##        #return pService
##    def _set(self, pService):
##        u'Service name.'
##    Service = property(_get, _set, doc = _set.__doc__)
##
##    def EnableLocalCaching(self, localCaching):
##        u'Enable local caching'
##        #return 
##

class IGPScriptTool2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to methods on a geoprocessing script tool object.'
    _iid_ = GUID('{ADA6B529-E9E7-4CF1-875F-BFB55C666B76}')
    _idlflags_ = ['oleautomation']
IGPScriptTool2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates whether to run the script inproc or not.')], HRESULT, 'RunInProc',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'inProc' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to run the script inproc or not.')], HRESULT, 'RunInProc',
              ( ['in'], VARIANT_BOOL, 'inProc' )),
    COMMETHOD(['propget', helpstring(u'Validation code block.')], HRESULT, 'CodeBlock',
              ( ['retval', 'out'], POINTER(BSTR), 'CodeBlock' )),
    COMMETHOD(['propput', helpstring(u'Validation code block.')], HRESULT, 'CodeBlock',
              ( ['in'], BSTR, 'CodeBlock' )),
    COMMETHOD([helpstring(u'Internal validation of GetParameterInfo.')], HRESULT, 'TestGetParameterInfo',
              ( ['retval', 'out'], POINTER(BSTR), 'pErrMsg' )),
    COMMETHOD(['propget', helpstring(u'Product code.')], HRESULT, 'ProductCode',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriProductCode), 'ProductCode' )),
    COMMETHOD(['propput', helpstring(u'Product code.')], HRESULT, 'ProductCode',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriProductCode, 'ProductCode' )),
    COMMETHOD(['propget', helpstring(u'Extension code.')], HRESULT, 'ExtensionCode',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriProductCode), 'ExtensionCode' )),
    COMMETHOD(['propput', helpstring(u'Extension code.')], HRESULT, 'ExtensionCode',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriProductCode, 'ExtensionCode' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to use the extension code.')], HRESULT, 'UseExtensionCode',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'UseExtensionCode' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to use the extension code.')], HRESULT, 'UseExtensionCode',
              ( ['in'], VARIANT_BOOL, 'UseExtensionCode' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the product and/or extension code is set.')], HRESULT, 'ProductAndExtensionCodes',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'productAndExtension' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the product and/or extension code is set.')], HRESULT, 'ProductAndExtensionCodes',
              ( ['in'], VARIANT_BOOL, 'productAndExtension' )),
    COMMETHOD(['propget', helpstring(u'Layer for Symbology.')], HRESULT, 'SymbologyLayer',
              ( ['in'], BSTR, 'parameterName' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Layer' )),
    COMMETHOD(['propput', helpstring(u'Layer for Symbology.')], HRESULT, 'SymbologyLayer',
              ( ['in'], BSTR, 'parameterName' ),
              ( ['in'], BSTR, 'Layer' )),
]
################################################################
## code template for IGPScriptTool2 implementation
##class IGPScriptTool2_Impl(object):
##    def _get(self):
##        u'Product code.'
##        #return ProductCode
##    def _set(self, ProductCode):
##        u'Product code.'
##    ProductCode = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the product and/or extension code is set.'
##        #return productAndExtension
##    def _set(self, productAndExtension):
##        u'Indicates if the product and/or extension code is set.'
##    ProductAndExtensionCodes = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Extension code.'
##        #return ExtensionCode
##    def _set(self, ExtensionCode):
##        u'Extension code.'
##    ExtensionCode = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether to run the script inproc or not.'
##        #return inProc
##    def _set(self, inProc):
##        u'Indicates whether to run the script inproc or not.'
##    RunInProc = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, parameterName):
##        u'Layer for Symbology.'
##        #return Layer
##    def _set(self, parameterName, Layer):
##        u'Layer for Symbology.'
##    SymbologyLayer = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether to use the extension code.'
##        #return UseExtensionCode
##    def _set(self, UseExtensionCode):
##        u'Indicates whether to use the extension code.'
##    UseExtensionCode = property(_get, _set, doc = _set.__doc__)
##
##    def TestGetParameterInfo(self):
##        u'Internal validation of GetParameterInfo.'
##        #return pErrMsg
##
##    def _get(self):
##        u'Validation code block.'
##        #return CodeBlock
##    def _set(self, CodeBlock):
##        u'Validation code block.'
##    CodeBlock = property(_get, _set, doc = _set.__doc__)
##

class GPValueTable(CoClass):
    u'Geoprocessing value object containing two-dimensional array of geoprocessing value objects.'
    _reg_clsid_ = GUID('{98A7A0CD-3282-44CD-90B7-4F39CDB85B84}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPValueTable(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a value table object.'
    _iid_ = GUID('{270E32AD-B10D-4DE0-8664-688062BA1846}')
    _idlflags_ = ['oleautomation']
GPValueTable._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue, IGPValueTable, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, IGPValueExpression]

class DEGeoDatasetType(CoClass):
    u'GeoDataset Data Element Data Type.'
    _reg_clsid_ = GUID('{7F964ACD-0FEE-4A5C-882D-3591FE2AD780}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
DEGeoDatasetType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDEGeoDatasetType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDEDatasetType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataElementType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGxFilterInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class GPTinLayerType(CoClass):
    u'Geoprocessing Tin Layer Data Type.'
    _reg_clsid_ = GUID('{90EFF706-1A9D-448A-80A5-BAFA22319101}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPTinLayerType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPTinLayerType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDEGeoDatasetType, comtypes.gen._1CE6AC65_43F5_4529_8FC0_D7ED298E4F1A_0_10_2.IGPLayerType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGxFilterInfo, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class GPFileDomain(CoClass):
    u'Geoprocessing File Domain.'
    _reg_clsid_ = GUID('{3EDC8E3A-FF87-47E1-AF34-09BB4CB22DA9}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPFileDomain(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing file domain object.'
    _iid_ = GUID('{137CBD70-2B0B-4549-AA65-B0490D774EA0}')
    _idlflags_ = ['oleautomation']
GPFileDomain._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDomain, IGPFileDomain, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGxFilterInfo]

class GPZDomain(CoClass):
    u'Geoprocessing Z Domain object.'
    _reg_clsid_ = GUID('{44F4FE86-8870-4375-A9C2-96AEBB9DE3BC}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPZDomain._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue, IGPZDomain, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

class GPConvertCacheStorageFormatWorker(CoClass):
    u'Convert storage format of pre-rendered tile cache for the MapServer.'
    _reg_clsid_ = GUID('{8F2F3AF5-8691-481B-A4FA-13E343C4F200}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPConvertCacheStorageFormatWorker._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPFunction]

class GPServerCachingValidateMapCacheTiles(CoClass):
    u'Validate pre-rendered tile cache for the Map.'
    _reg_clsid_ = GUID('{1CF3FF42-1C26-42BD-8789-263F14BC4BC4}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPServerCachingValidateMapCacheTiles._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPFunction]

class GPPoint(CoClass):
    u'Geoprocessing value object containing a point geometry.'
    _reg_clsid_ = GUID('{A1E93082-BABE-4D44-8CE3-4637748EDDDD}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPPoint._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue, IGPPoint, IGPPoint2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

IMdList._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates the list type.')], HRESULT, 'ListType',
              ( ['retval', 'out'], POINTER(esriMdListType), 'Type' )),
    COMMETHOD(['propput', helpstring(u'Indicates the list type.')], HRESULT, 'ListType',
              ( ['in'], esriMdListType, 'Type' )),
    COMMETHOD(['propget', helpstring(u'The current index.')], HRESULT, 'CurrentIndex',
              ( ['retval', 'out'], POINTER(c_int), 'Index' )),
    COMMETHOD(['propput', helpstring(u'The current index.')], HRESULT, 'CurrentIndex',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD(['propget', helpstring(u'The list count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The value at the specifed index.')], HRESULT, 'Value',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue)), 'ppValue' )),
    COMMETHOD(['propputref', helpstring(u'The value at the specifed index.')], HRESULT, 'Value',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'ppValue' )),
    COMMETHOD([helpstring(u'Adds a value.')], HRESULT, 'AddValue',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'pValue' )),
    COMMETHOD([helpstring(u'Inserts a value.')], HRESULT, 'InsertValue',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'pValue' )),
    COMMETHOD([helpstring(u'Moves the specified value.')], HRESULT, 'MoveValue',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'Direction' )),
    COMMETHOD([helpstring(u'Removes the specified value.')], HRESULT, 'RemoveValue',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all values.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'The values.')], HRESULT, 'GetValues',
              ( ['in'], VARIANT_BOOL, 'bClone' ),
              ( ['out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'ppValues' ),
              ( ['out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray)), 'ppFlags' )),
    COMMETHOD([helpstring(u'The values.')], HRESULT, 'SetValues',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'pValues' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'pFlags' )),
    COMMETHOD(['propget', helpstring(u'Feedback variable.')], HRESULT, 'FeedbackVariable',
              ( ['retval', 'out'], POINTER(POINTER(IMdVariable)), 'ppVariable' )),
    COMMETHOD(['propputref', helpstring(u'Feedback variable.')], HRESULT, 'FeedbackVariable',
              ( ['in'], POINTER(IMdVariable), 'ppVariable' )),
    COMMETHOD([helpstring(u'Get valence.')], HRESULT, 'GetValence',
              ( ['retval', 'out'], POINTER(c_int), 'valence' )),
    COMMETHOD([helpstring(u'Set valence.')], HRESULT, 'SetValence',
              ( ['in'], c_int, 'valence' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the value has been explicitly set (by the user).')], HRESULT, 'AlteredFlag',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Altered' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the value has been explicitly set (by the user).')], HRESULT, 'AlteredFlag',
              ( ['in'], VARIANT_BOOL, 'Altered' )),
    COMMETHOD([helpstring(u'Indicates whether the value has been explicitly set (by the user).')], HRESULT, 'GetAlteredFlag',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(c_int), 'flag' )),
    COMMETHOD([helpstring(u'Indicates whether the value has been explicitly set (by the user).')], HRESULT, 'SetAlteredFlag',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'flag' )),
]
################################################################
## code template for IMdList implementation
##class IMdList_Impl(object):
##    @property
##    def Count(self):
##        u'The list count.'
##        #return Count
##
##    def SetValues(self, pValues, pFlags):
##        u'The values.'
##        #return 
##
##    def SetValence(self, valence):
##        u'Set valence.'
##        #return 
##
##    def SetAlteredFlag(self, Index, flag):
##        u'Indicates whether the value has been explicitly set (by the user).'
##        #return 
##
##    def FeedbackVariable(self, ppVariable):
##        u'Feedback variable.'
##        #return 
##
##    def GetValence(self):
##        u'Get valence.'
##        #return valence
##
##    def Value(self, Index, ppValue):
##        u'The value at the specifed index.'
##        #return 
##
##    def MoveValue(self, Index, Direction):
##        u'Moves the specified value.'
##        #return 
##
##    def RemoveAll(self):
##        u'Removes all values.'
##        #return 
##
##    def AddValue(self, pValue):
##        u'Adds a value.'
##        #return 
##
##    def GetAlteredFlag(self, Index):
##        u'Indicates whether the value has been explicitly set (by the user).'
##        #return flag
##
##    def _get(self):
##        u'The current index.'
##        #return Index
##    def _set(self, Index):
##        u'The current index.'
##    CurrentIndex = property(_get, _set, doc = _set.__doc__)
##
##    def RemoveValue(self, Index):
##        u'Removes the specified value.'
##        #return 
##
##    def _get(self):
##        u'Indicates the list type.'
##        #return Type
##    def _set(self, Type):
##        u'Indicates the list type.'
##    ListType = property(_get, _set, doc = _set.__doc__)
##
##    def GetValues(self, bClone):
##        u'The values.'
##        #return ppValues, ppFlags
##
##    def _get(self):
##        u'Indicates whether the value has been explicitly set (by the user).'
##        #return Altered
##    def _set(self, Altered):
##        u'Indicates whether the value has been explicitly set (by the user).'
##    AlteredFlag = property(_get, _set, doc = _set.__doc__)
##
##    def InsertValue(self, Index, pValue):
##        u'Inserts a value.'
##        #return 
##

class GPExportCacheWorker(CoClass):
    u'Export pre-rendered tile cache worker.'
    _reg_clsid_ = GUID('{95324251-DC6C-4FB7-9795-5DC875AF6834}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPExportCacheWorker._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPFunction]

IGPFieldDomain._methods_ = [
    COMMETHOD(['propget', helpstring(u'Count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propget', helpstring(u'Field type.')], HRESULT, 'Type',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriFieldType), 'pType' )),
    COMMETHOD([helpstring(u'Add a field type.')], HRESULT, 'AddType',
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriFieldType, 'Type' )),
    COMMETHOD([helpstring(u'Remove a field type.')], HRESULT, 'DeleteType',
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriFieldType, 'Type' )),
    COMMETHOD([helpstring(u'Make list.')], HRESULT, 'MakeList',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'pValue' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'ppValues' )),
    COMMETHOD([helpstring(u'Set index filter.')], HRESULT, 'SetIndexFilter',
              ( ['in'], VARIANT_BOOL, 'filter' ),
              ( ['in'], VARIANT_BOOL, 'Type' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether or not to filter fields based on whether or not they have an index.')], HRESULT, 'FilterIndex',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pFilter' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to filter fields that have or do not have an index.')], HRESULT, 'FilterIndexType',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pType' )),
    COMMETHOD(['propget', helpstring(u'Key field count.')], HRESULT, 'KeyFieldCount',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propget', helpstring(u'Key field.')], HRESULT, 'KeyField',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(BSTR), 'pName' )),
    COMMETHOD([helpstring(u'Add key field.')], HRESULT, 'AddKeyField',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD([helpstring(u'Remove key field.')], HRESULT, 'RemoveKeyField',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD(['propget', helpstring(u'Exclude field count.')], HRESULT, 'ExcludeFieldCount',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propget', helpstring(u'Exclude field.')], HRESULT, 'ExcludeField',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(BSTR), 'pName' )),
    COMMETHOD([helpstring(u'Add exclude field.')], HRESULT, 'AddExcludeField',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD([helpstring(u'Remove exclude field.')], HRESULT, 'RemoveExcludeField',
              ( ['in'], c_int, 'Index' )),
]
################################################################
## code template for IGPFieldDomain implementation
##class IGPFieldDomain_Impl(object):
##    @property
##    def Count(self):
##        u'Count.'
##        #return pCount
##
##    def AddKeyField(self, Name):
##        u'Add key field.'
##        #return 
##
##    @property
##    def KeyField(self, Index):
##        u'Key field.'
##        #return pName
##
##    def SetIndexFilter(self, filter, Type):
##        u'Set index filter.'
##        #return 
##
##    @property
##    def ExcludeField(self, Index):
##        u'Exclude field.'
##        #return pName
##
##    @property
##    def FilterIndex(self):
##        u'Indicates whether or not to filter fields based on whether or not they have an index.'
##        #return pFilter
##
##    def RemoveExcludeField(self, Index):
##        u'Remove exclude field.'
##        #return 
##
##    @property
##    def ExcludeFieldCount(self):
##        u'Exclude field count.'
##        #return pCount
##
##    def RemoveKeyField(self, Index):
##        u'Remove key field.'
##        #return 
##
##    @property
##    def KeyFieldCount(self):
##        u'Key field count.'
##        #return pCount
##
##    def AddExcludeField(self, Name):
##        u'Add exclude field.'
##        #return 
##
##    def MakeList(self, pValue):
##        u'Make list.'
##        #return ppValues
##
##    def DeleteType(self, Type):
##        u'Remove a field type.'
##        #return 
##
##    @property
##    def Type(self, Index):
##        u'Field type.'
##        #return pType
##
##    @property
##    def FilterIndexType(self):
##        u'Indicates whether to filter fields that have or do not have an index.'
##        #return pType
##
##    def AddType(self, Type):
##        u'Add a field type.'
##        #return 
##

IEnumMdVariable._methods_ = [
    COMMETHOD([helpstring(u'Returns the next variable in the enumeration.')], HRESULT, 'Next',
              ( ['retval', 'out'], POINTER(POINTER(IMdVariable)), 'variable' )),
    COMMETHOD([helpstring(u'Resets the current position of the enumeration.')], HRESULT, 'Reset'),
]
################################################################
## code template for IEnumMdVariable implementation
##class IEnumMdVariable_Impl(object):
##    def Reset(self):
##        u'Resets the current position of the enumeration.'
##        #return 
##
##    def Next(self):
##        u'Returns the next variable in the enumeration.'
##        #return variable
##

class GPFeatureSchema(CoClass):
    u'Geoprocessing Feature Schema object.'
    _reg_clsid_ = GUID('{81EA3E6E-11AB-477E-8DE6-44698EDF5DAC}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPFeatureSchema(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing feature schema object.'
    _iid_ = GUID('{C05030D4-B950-4C2E-B30E-E25FB4B9AC12}')
    _idlflags_ = ['oleautomation']
GPFeatureSchema._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPSchema, IGPFeatureSchema, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize]

class GPParameter(CoClass):
    u'Geoprocessing Parameter object.'
    _reg_clsid_ = GUID('{31D06F12-3F00-47F8-A657-3A2E4EA85FE2}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPParameter._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPParameter, IGPParameterEdit, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, IGPParameter2, IGPParameterEdit2, IGPParameter3, IGPParameterEdit3]

class GPPolygon(CoClass):
    u'Geoprocessing value object containing a polygon geometry.'
    _reg_clsid_ = GUID('{EC1B8F0B-DF38-4444-BE03-0116E09537DF}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPPolygon(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing polygon object.'
    _iid_ = GUID('{3F78D6D8-0B9A-4677-AE55-84FF0519549D}')
    _idlflags_ = ['oleautomation']
class IGPPolygon2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing polygon object.'
    _iid_ = GUID('{30C7A043-EEF4-4FE1-BFAE-983DE49586CA}')
    _idlflags_ = ['oleautomation']
GPPolygon._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue, IGPPolygon, IGPPolygon2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

IGPTablesDomain._methods_ = [
    COMMETHOD(['propput', helpstring(u'Indicates whether or not to hide joined layers.')], HRESULT, 'HideJoinedLayers',
              ( ['in'], VARIANT_BOOL, 'hide' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether or not to hide joined layers.')], HRESULT, 'HideJoinedLayers',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'hide' )),
]
################################################################
## code template for IGPTablesDomain implementation
##class IGPTablesDomain_Impl(object):
##    def _get(self):
##        u'Indicates whether or not to hide joined layers.'
##        #return hide
##    def _set(self, hide):
##        u'Indicates whether or not to hide joined layers.'
##    HideJoinedLayers = property(_get, _set, doc = _set.__doc__)
##

IGPTablesDomain2._methods_ = [
    COMMETHOD(['propput', helpstring(u'Indicates whether or not to show only standalone tables.')], HRESULT, 'ShowOnlyStandaloneTables',
              ( ['in'], VARIANT_BOOL, 'bShowOnlyStandaloneTables' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether or not to show only standalone tables.')], HRESULT, 'ShowOnlyStandaloneTables',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'bShowOnlyStandaloneTables' )),
]
################################################################
## code template for IGPTablesDomain2 implementation
##class IGPTablesDomain2_Impl(object):
##    def _get(self):
##        u'Indicates whether or not to show only standalone tables.'
##        #return bShowOnlyStandaloneTables
##    def _set(self, bShowOnlyStandaloneTables):
##        u'Indicates whether or not to show only standalone tables.'
##    ShowOnlyStandaloneTables = property(_get, _set, doc = _set.__doc__)
##

class GPFunctionName(CoClass):
    u'Geoprocessing Function Name object.'
    _reg_clsid_ = GUID('{9A332F42-377F-4213-954B-B68CC8B9CE46}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPFunctionName(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing function name object.'
    _iid_ = GUID('{4CDFD9F9-AE02-460E-AA27-8BD69E06956E}')
    _idlflags_ = ['oleautomation']
GPFunctionName._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPName, IGPFunctionName, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize]

class MdModel(CoClass):
    u'A collection of model variables and processes, used to execute multiple geoprocessing tools in some order.'
    _reg_clsid_ = GUID('{05BF0268-FC85-4649-9FEA-5B61F4A76B46}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
MdModel._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMdModel, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IConnectionPointContainer, IMdModelIteration, IMdModelIteration2]
MdModel._outgoing_interfaces_ = [IMdModelEvents]

class IBStringArray(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of the string array.'
    _iid_ = GUID('{0C39CB39-FD27-49DA-89D2-FC3F017064F9}')
    _idlflags_ = ['oleautomation']
IBStringArray._methods_ = [
    COMMETHOD(['propget', helpstring(u'The size of the array.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The string at the specified index in the array.')], HRESULT, 'String',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(BSTR), 'str' )),
    COMMETHOD([helpstring(u'Adds a string to the array.')], HRESULT, 'AddString',
              ( ['in'], BSTR, 'str' )),
    COMMETHOD([helpstring(u'Adds a string to the array at the specified index.')], HRESULT, 'InsertString',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'str' )),
    COMMETHOD([helpstring(u'Removes a string from the array.')], HRESULT, 'RemoveString',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all strings from the array.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Replaces a string in the array.')], HRESULT, 'ReplaceString',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'str' )),
]
################################################################
## code template for IBStringArray implementation
##class IBStringArray_Impl(object):
##    @property
##    def Count(self):
##        u'The size of the array.'
##        #return Count
##
##    @property
##    def String(self, Index):
##        u'The string at the specified index in the array.'
##        #return str
##
##    def ReplaceString(self, Index, str):
##        u'Replaces a string in the array.'
##        #return 
##
##    def RemoveString(self, Index):
##        u'Removes a string from the array.'
##        #return 
##
##    def RemoveAll(self):
##        u'Removes all strings from the array.'
##        #return 
##
##    def InsertString(self, Index, str):
##        u'Adds a string to the array at the specified index.'
##        #return 
##
##    def AddString(self, str):
##        u'Adds a string to the array.'
##        #return 
##

class GPLayer(CoClass):
    u'Geoprocessing value object containing a layer value.'
    _reg_clsid_ = GUID('{6A47591E-AA16-443E-B50D-D8926659A4E1}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPLayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._1CE6AC65_43F5_4529_8FC0_D7ED298E4F1A_0_10_2.IGPLayer, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDEGeoDataset, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDescribe, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

IGPTableView._methods_ = [
    COMMETHOD(['propget', helpstring(u'The name string.')], HRESULT, 'NameString',
              ( ['retval', 'out'], POINTER(BSTR), 'pNamestring' )),
    COMMETHOD(['propput', helpstring(u'The name string.')], HRESULT, 'NameString',
              ( ['in'], BSTR, 'pNamestring' )),
    COMMETHOD(['propget', helpstring(u'The table of the table view.')], HRESULT, 'DETable',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDETable)), 'ppDETable' )),
    COMMETHOD(['propputref', helpstring(u'The table of the table view.')], HRESULT, 'DETable',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDETable), 'ppDETable' )),
    COMMETHOD(['propget', helpstring(u'The field info of the feature layer.')], HRESULT, 'FieldInfo',
              ( ['retval', 'out'], POINTER(POINTER(IGPFieldInfo)), 'FieldMap' )),
    COMMETHOD(['propputref', helpstring(u'The field info of the feature layer.')], HRESULT, 'FieldInfo',
              ( ['in'], POINTER(IGPFieldInfo), 'FieldMap' )),
    COMMETHOD(['propget', helpstring(u'The where clause of the feature layer.')], HRESULT, 'WhereClause',
              ( ['retval', 'out'], POINTER(BSTR), 'pWhereClause' )),
    COMMETHOD(['propput', helpstring(u'The where clause of the feature layer.')], HRESULT, 'WhereClause',
              ( ['in'], BSTR, 'pWhereClause' )),
    COMMETHOD(['propget', helpstring(u'The selection set of the table view.')], HRESULT, 'FIDSet',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFIDSet)), 'ppFIDSet' )),
    COMMETHOD(['propputref', helpstring(u'The selection set of the table view.')], HRESULT, 'FIDSet',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFIDSet), 'ppFIDSet' )),
    COMMETHOD([helpstring(u'Add on OID to the FIDSet of the feature layer.')], HRESULT, 'AddToFIDSet',
              ( ['in'], c_int, 'oid' )),
]
################################################################
## code template for IGPTableView implementation
##class IGPTableView_Impl(object):
##    def _get(self):
##        u'The where clause of the feature layer.'
##        #return pWhereClause
##    def _set(self, pWhereClause):
##        u'The where clause of the feature layer.'
##    WhereClause = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The name string.'
##        #return pNamestring
##    def _set(self, pNamestring):
##        u'The name string.'
##    NameString = property(_get, _set, doc = _set.__doc__)
##
##    def AddToFIDSet(self, oid):
##        u'Add on OID to the FIDSet of the feature layer.'
##        #return 
##
##    def FIDSet(self, ppFIDSet):
##        u'The selection set of the table view.'
##        #return 
##
##    def DETable(self, ppDETable):
##        u'The table of the table view.'
##        #return 
##
##    def FieldInfo(self, FieldMap):
##        u'The field info of the feature layer.'
##        #return 
##

class GPEncryptedString(CoClass):
    u'Geoprocessing value object containing a string value.'
    _reg_clsid_ = GUID('{B76CD4DB-843B-4723-B174-A0833095F866}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPEncryptedString._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

IGPParameter._methods_ = [
    COMMETHOD(['propget', helpstring(u'Name of the geoprocessing parameter.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propget', helpstring(u'Display name of the geoprocessing parameter.')], HRESULT, 'DisplayName',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propget', helpstring(u'Direction of the geoprocessing parameter.')], HRESULT, 'Direction',
              ( ['retval', 'out'], POINTER(esriGPParameterDirection), 'Direction' )),
    COMMETHOD(['propget', helpstring(u'Data type of the geoprocessing parameter.')], HRESULT, 'DataType',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType)), 'DataType' )),
    COMMETHOD(['propget', helpstring(u'Type of the geoprocessing parameter.')], HRESULT, 'ParameterType',
              ( ['retval', 'out'], POINTER(esriGPParameterType), 'paramtype' )),
    COMMETHOD(['propget', helpstring(u'Enumeration of parameter names the geoprocessing parameter is dependent on.')], HRESULT, 'ParameterDependencies',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IEnumBSTR)), 'Dependencies' )),
    COMMETHOD(['propget', helpstring(u'Domain of the geoprocessing parameter.')], HRESULT, 'Domain',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDomain)), 'Domain' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the ActiveX control for the geoprocessing parameter should be enabled/disabled.')], HRESULT, 'Enabled',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Enabled' )),
    COMMETHOD(['propget', helpstring(u'The current value object of the geoprocessing parameter.')], HRESULT, 'Value',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue)), 'Value' )),
    COMMETHOD(['propget', helpstring(u'The class identifier (CLSID) of the ActiveX control to use to edit the geoprocessing parameter.')], HRESULT, 'ControlCLSID',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IUID)), 'CLSID' )),
    COMMETHOD(['propget', helpstring(u'The name of the environment value to use as the default value for the geoprocessing parameter.')], HRESULT, 'DefaultEnvironmentName',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propget', helpstring(u'The display order of the geoprocessing parameter.')], HRESULT, 'DisplayOrder',
              ( ['retval', 'out'], POINTER(c_int), 'DisplayOrder' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the parameter value has been explicitly set (by the user).')], HRESULT, 'Altered',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Altered' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the parameter value has been modified since the last time the parameter was validated (i.e., since Validate() was called).')], HRESULT, 'HasBeenValidated',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'validated' )),
    COMMETHOD(['propget', helpstring(u'Category of the geoprocessing parameter.')], HRESULT, 'Category',
              ( ['retval', 'out'], POINTER(BSTR), 'Category' )),
    COMMETHOD(['propget', helpstring(u'The choice list object of the geoprocessing parameter.')], HRESULT, 'ChoiceList',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPChoiceList)), 'ChoiceList' )),
]
################################################################
## code template for IGPParameter implementation
##class IGPParameter_Impl(object):
##    @property
##    def ParameterType(self):
##        u'Type of the geoprocessing parameter.'
##        #return paramtype
##
##    @property
##    def Category(self):
##        u'Category of the geoprocessing parameter.'
##        #return Category
##
##    @property
##    def Direction(self):
##        u'Direction of the geoprocessing parameter.'
##        #return Direction
##
##    @property
##    def ChoiceList(self):
##        u'The choice list object of the geoprocessing parameter.'
##        #return ChoiceList
##
##    @property
##    def DisplayName(self):
##        u'Display name of the geoprocessing parameter.'
##        #return Name
##
##    @property
##    def Name(self):
##        u'Name of the geoprocessing parameter.'
##        #return Name
##
##    @property
##    def DataType(self):
##        u'Data type of the geoprocessing parameter.'
##        #return DataType
##
##    @property
##    def Enabled(self):
##        u'Indicates whether the ActiveX control for the geoprocessing parameter should be enabled/disabled.'
##        #return Enabled
##
##    @property
##    def Domain(self):
##        u'Domain of the geoprocessing parameter.'
##        #return Domain
##
##    @property
##    def Value(self):
##        u'The current value object of the geoprocessing parameter.'
##        #return Value
##
##    @property
##    def ControlCLSID(self):
##        u'The class identifier (CLSID) of the ActiveX control to use to edit the geoprocessing parameter.'
##        #return CLSID
##
##    @property
##    def Altered(self):
##        u'Indicates whether the parameter value has been explicitly set (by the user).'
##        #return Altered
##
##    @property
##    def ParameterDependencies(self):
##        u'Enumeration of parameter names the geoprocessing parameter is dependent on.'
##        #return Dependencies
##
##    @property
##    def HasBeenValidated(self):
##        u'Indicates whether the parameter value has been modified since the last time the parameter was validated (i.e., since Validate() was called).'
##        #return validated
##
##    @property
##    def DisplayOrder(self):
##        u'The display order of the geoprocessing parameter.'
##        #return DisplayOrder
##
##    @property
##    def DefaultEnvironmentName(self):
##        u'The name of the environment value to use as the default value for the geoprocessing parameter.'
##        #return Name
##

IGPParameter2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates whether the parameter is managed.')], HRESULT, 'Managed',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Managed' )),
]
################################################################
## code template for IGPParameter2 implementation
##class IGPParameter2_Impl(object):
##    @property
##    def Managed(self):
##        u'Indicates whether the parameter is managed.'
##        #return Managed
##

IGPParameter3._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates how the output value is to be generated and populated during validate.')], HRESULT, 'Schema',
              ( ['retval', 'out'], POINTER(POINTER(IGPSchema)), 'Schema' )),
]
################################################################
## code template for IGPParameter3 implementation
##class IGPParameter3_Impl(object):
##    @property
##    def Schema(self):
##        u'Indicates how the output value is to be generated and populated during validate.'
##        #return Schema
##

IMdDiagramProperties._methods_ = [
    COMMETHOD([helpstring(u'Returns display node.')], HRESULT, 'GetDisplayNode',
              ( ['in'], esriModelDiagramNodeType, 'nodeType' ),
              ( ['retval', 'out'], POINTER(POINTER(IMdDisplayNode)), 'ppDisplayNode' )),
    COMMETHOD([helpstring(u'Sets display node.')], HRESULT, 'SetDisplayNode',
              ( ['in'], esriModelDiagramNodeType, 'nodeType' ),
              ( ['in'], POINTER(IMdDisplayNode), 'pDisplayNode' )),
    COMMETHOD([helpstring(u'Returns display edge.')], HRESULT, 'GetDisplayEdge',
              ( ['in'], esriMdConnectionType, 'edgeType' ),
              ( ['retval', 'out'], POINTER(POINTER(IMdDisplayEdge)), 'ppDisplayEdge' )),
    COMMETHOD([helpstring(u'Sets display edge.')], HRESULT, 'SetDisplayEdge',
              ( ['in'], esriMdConnectionType, 'edgeType' ),
              ( ['in'], POINTER(IMdDisplayEdge), 'pDisplayEdge' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the graph is using variable level spacing.')], HRESULT, 'VariableLevelSpacing',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pVariableLevelSpacing' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the graph is using variable level spacing.')], HRESULT, 'VariableLevelSpacing',
              ( ['in'], VARIANT_BOOL, 'pVariableLevelSpacing' )),
    COMMETHOD(['propget', helpstring(u'The level spacing of the diagram properties object.')], HRESULT, 'LevelSpacing',
              ( ['retval', 'out'], POINTER(c_int), 'pLevelSpacing' )),
    COMMETHOD(['propput', helpstring(u'The level spacing of the diagram properties object.')], HRESULT, 'LevelSpacing',
              ( ['in'], c_int, 'pLevelSpacing' )),
    COMMETHOD(['propget', helpstring(u'The node spacing of the diagram properties object.')], HRESULT, 'NodeSpacing',
              ( ['retval', 'out'], POINTER(c_int), 'pNodeSpacing' )),
    COMMETHOD(['propput', helpstring(u'The node spacing of the diagram properties object.')], HRESULT, 'NodeSpacing',
              ( ['in'], c_int, 'pNodeSpacing' )),
    COMMETHOD(['propget', helpstring(u'The minimum slope percent of the diagram properties object.')], HRESULT, 'MinimumSlopePercent',
              ( ['retval', 'out'], POINTER(c_int), 'pMinimumSlopePercent' )),
    COMMETHOD(['propput', helpstring(u'The minimum slope percent of the diagram properties object.')], HRESULT, 'MinimumSlopePercent',
              ( ['in'], c_int, 'pMinimumSlopePercent' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the graph should use the minimum slope property.')], HRESULT, 'UseMinimumSlope',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pUseMinimumSlope' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the graph should use the minimum slope property.')], HRESULT, 'UseMinimumSlope',
              ( ['in'], VARIANT_BOOL, 'pUseMinimumSlope' )),
    COMMETHOD(['propget', helpstring(u'The layout quality of the diagram properties object.')], HRESULT, 'LayoutQuality',
              ( ['retval', 'out'], POINTER(esriModelDiagramLayoutQuality), 'pLayoutQuality' )),
    COMMETHOD(['propput', helpstring(u'The layout quality of the diagram properties object.')], HRESULT, 'LayoutQuality',
              ( ['in'], esriModelDiagramLayoutQuality, 'pLayoutQuality' )),
    COMMETHOD(['propget', helpstring(u'The level orientation of the diagram properties object.')], HRESULT, 'LevelOrientation',
              ( ['retval', 'out'], POINTER(esriModelDiagramLevelOrientation), 'pLevelOrientation' )),
    COMMETHOD(['propput', helpstring(u'The level orientation of the diagram properties object.')], HRESULT, 'LevelOrientation',
              ( ['in'], esriModelDiagramLevelOrientation, 'pLevelOrientation' )),
    COMMETHOD(['propget', helpstring(u'The level constraint of the diagram properties object.')], HRESULT, 'LevelConstraint',
              ( ['retval', 'out'], POINTER(esriModelDiagramLevelConstraint), 'pLevelConstraint' )),
    COMMETHOD(['propput', helpstring(u'The level constraint of the diagram properties object.')], HRESULT, 'LevelConstraint',
              ( ['in'], esriModelDiagramLevelConstraint, 'pLevelConstraint' )),
    COMMETHOD(['propget', helpstring(u'The level alignment of the diagram properties object.')], HRESULT, 'LevelAlignment',
              ( ['retval', 'out'], POINTER(esriModelDiagramLevelAlignment), 'pLevelAlignment' )),
    COMMETHOD(['propput', helpstring(u'The level alignment of the diagram properties object.')], HRESULT, 'LevelAlignment',
              ( ['in'], esriModelDiagramLevelAlignment, 'pLevelAlignment' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the graph is using orthoginal routing.')], HRESULT, 'OrthogonalRouting',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pOrthogonalRouting' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the graph is using orthoginal routing.')], HRESULT, 'OrthogonalRouting',
              ( ['in'], VARIANT_BOOL, 'pOrthogonalRouting' )),
    COMMETHOD(['propget', helpstring(u'The orthogonal vertical edge spacing of the diagram properties object.')], HRESULT, 'VerticalEdgeSpacing',
              ( ['retval', 'out'], POINTER(c_int), 'pVerticalEdgeSpacing' )),
    COMMETHOD(['propput', helpstring(u'The orthogonal vertical edge spacing of the diagram properties object.')], HRESULT, 'VerticalEdgeSpacing',
              ( ['in'], c_int, 'pVerticalEdgeSpacing' )),
    COMMETHOD(['propget', helpstring(u'The orthogonal horizontal edge spacing of the diagram properties object.')], HRESULT, 'HorizontalEdgeSpacing',
              ( ['retval', 'out'], POINTER(c_int), 'pHorizontalEdgeSpacing' )),
    COMMETHOD(['propput', helpstring(u'The orthogonal horizontal edge spacing of the diagram properties object.')], HRESULT, 'HorizontalEdgeSpacing',
              ( ['in'], c_int, 'pHorizontalEdgeSpacing' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the graph is using orthogonal channel merging.')], HRESULT, 'MergeEdgeChannels',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pMergeEdgeChannels' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the graph is using orthogonal channel merging.')], HRESULT, 'MergeEdgeChannels',
              ( ['in'], VARIANT_BOOL, 'pMergeEdgeChannels' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the graph is using incremental layout.')], HRESULT, 'IncrementalLayout',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pIncrementalLayout' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the graph is using incremental layout.')], HRESULT, 'IncrementalLayout',
              ( ['in'], VARIANT_BOOL, 'pIncrementalLayout' )),
    COMMETHOD(['propget', helpstring(u'Indicates if auto layout is active.')], HRESULT, 'AutoLayout',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pAutoLayout' )),
    COMMETHOD(['propput', helpstring(u'Indicates if auto layout is active.')], HRESULT, 'AutoLayout',
              ( ['in'], VARIANT_BOOL, 'pAutoLayout' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether or not to show a grid on the diagram.')], HRESULT, 'ShowGrid',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pShowGrid' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether or not to show a grid on the diagram.')], HRESULT, 'ShowGrid',
              ( ['in'], VARIANT_BOOL, 'pShowGrid' )),
    COMMETHOD(['propget', helpstring(u'The grid type of the diagram properties object.')], HRESULT, 'GridType',
              ( ['retval', 'out'], POINTER(esriModelDiagramGridType), 'pGridType' )),
    COMMETHOD(['propput', helpstring(u'The grid type of the diagram properties object.')], HRESULT, 'GridType',
              ( ['in'], esriModelDiagramGridType, 'pGridType' )),
    COMMETHOD(['propget', helpstring(u'The grid size of the diagram properties object.')], HRESULT, 'GridSize',
              ( ['retval', 'out'], POINTER(c_int), 'pGridSize' )),
    COMMETHOD(['propput', helpstring(u'The grid size of the diagram properties object.')], HRESULT, 'GridSize',
              ( ['in'], c_int, 'pGridSize' )),
    COMMETHOD(['propget', helpstring(u'Indicates if reduce crossings is active.')], HRESULT, 'ReduceCrossings',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pReduceCrossings' )),
    COMMETHOD(['propput', helpstring(u'Indicates if reduce crossings is active.')], HRESULT, 'ReduceCrossings',
              ( ['in'], VARIANT_BOOL, 'pReduceCrossings' )),
    COMMETHOD(['propget', helpstring(u'Indicates if respect flow is active.')], HRESULT, 'RespectFlow',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pRespectFlow' )),
    COMMETHOD(['propput', helpstring(u'Indicates if respect flow is active.')], HRESULT, 'RespectFlow',
              ( ['in'], VARIANT_BOOL, 'pRespectFlow' )),
    COMMETHOD(['propget', helpstring(u'The selected color of the diagram properties object.')], HRESULT, 'SelectedColor',
              ( ['retval', 'out'], POINTER(c_int), 'pSelectedColor' )),
    COMMETHOD(['propput', helpstring(u'The selected color of the diagram properties object.')], HRESULT, 'SelectedColor',
              ( ['in'], c_int, 'pSelectedColor' )),
    COMMETHOD(['propget', helpstring(u'The grid line color of the diagram properties object.')], HRESULT, 'GridLineColor',
              ( ['retval', 'out'], POINTER(c_int), 'pColor' )),
    COMMETHOD(['propput', helpstring(u'The grid line color of the diagram properties object.')], HRESULT, 'GridLineColor',
              ( ['in'], c_int, 'pColor' )),
    COMMETHOD(['propget', helpstring(u'The grid point color of the diagram properties object.')], HRESULT, 'GridPointColor',
              ( ['retval', 'out'], POINTER(c_int), 'pColor' )),
    COMMETHOD(['propput', helpstring(u'The grid point color of the diagram properties object.')], HRESULT, 'GridPointColor',
              ( ['in'], c_int, 'pColor' )),
]
################################################################
## code template for IMdDiagramProperties implementation
##class IMdDiagramProperties_Impl(object):
##    def _get(self):
##        u'The node spacing of the diagram properties object.'
##        #return pNodeSpacing
##    def _set(self, pNodeSpacing):
##        u'The node spacing of the diagram properties object.'
##    NodeSpacing = property(_get, _set, doc = _set.__doc__)
##
##    def GetDisplayNode(self, nodeType):
##        u'Returns display node.'
##        #return ppDisplayNode
##
##    def _get(self):
##        u'Indicates if auto layout is active.'
##        #return pAutoLayout
##    def _set(self, pAutoLayout):
##        u'Indicates if auto layout is active.'
##    AutoLayout = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the graph should use the minimum slope property.'
##        #return pUseMinimumSlope
##    def _set(self, pUseMinimumSlope):
##        u'Indicates if the graph should use the minimum slope property.'
##    UseMinimumSlope = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The orthogonal vertical edge spacing of the diagram properties object.'
##        #return pVerticalEdgeSpacing
##    def _set(self, pVerticalEdgeSpacing):
##        u'The orthogonal vertical edge spacing of the diagram properties object.'
##    VerticalEdgeSpacing = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The grid type of the diagram properties object.'
##        #return pGridType
##    def _set(self, pGridType):
##        u'The grid type of the diagram properties object.'
##    GridType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the graph is using incremental layout.'
##        #return pIncrementalLayout
##    def _set(self, pIncrementalLayout):
##        u'Indicates if the graph is using incremental layout.'
##    IncrementalLayout = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The level spacing of the diagram properties object.'
##        #return pLevelSpacing
##    def _set(self, pLevelSpacing):
##        u'The level spacing of the diagram properties object.'
##    LevelSpacing = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The level alignment of the diagram properties object.'
##        #return pLevelAlignment
##    def _set(self, pLevelAlignment):
##        u'The level alignment of the diagram properties object.'
##    LevelAlignment = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the graph is using variable level spacing.'
##        #return pVariableLevelSpacing
##    def _set(self, pVariableLevelSpacing):
##        u'Indicates if the graph is using variable level spacing.'
##    VariableLevelSpacing = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether or not to show a grid on the diagram.'
##        #return pShowGrid
##    def _set(self, pShowGrid):
##        u'Indicates whether or not to show a grid on the diagram.'
##    ShowGrid = property(_get, _set, doc = _set.__doc__)
##
##    def SetDisplayNode(self, nodeType, pDisplayNode):
##        u'Sets display node.'
##        #return 
##
##    def SetDisplayEdge(self, edgeType, pDisplayEdge):
##        u'Sets display edge.'
##        #return 
##
##    def _get(self):
##        u'Indicates if respect flow is active.'
##        #return pRespectFlow
##    def _set(self, pRespectFlow):
##        u'Indicates if respect flow is active.'
##    RespectFlow = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The selected color of the diagram properties object.'
##        #return pSelectedColor
##    def _set(self, pSelectedColor):
##        u'The selected color of the diagram properties object.'
##    SelectedColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The grid line color of the diagram properties object.'
##        #return pColor
##    def _set(self, pColor):
##        u'The grid line color of the diagram properties object.'
##    GridLineColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the graph is using orthoginal routing.'
##        #return pOrthogonalRouting
##    def _set(self, pOrthogonalRouting):
##        u'Indicates if the graph is using orthoginal routing.'
##    OrthogonalRouting = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The minimum slope percent of the diagram properties object.'
##        #return pMinimumSlopePercent
##    def _set(self, pMinimumSlopePercent):
##        u'The minimum slope percent of the diagram properties object.'
##    MinimumSlopePercent = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the graph is using orthogonal channel merging.'
##        #return pMergeEdgeChannels
##    def _set(self, pMergeEdgeChannels):
##        u'Indicates if the graph is using orthogonal channel merging.'
##    MergeEdgeChannels = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The grid point color of the diagram properties object.'
##        #return pColor
##    def _set(self, pColor):
##        u'The grid point color of the diagram properties object.'
##    GridPointColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The orthogonal horizontal edge spacing of the diagram properties object.'
##        #return pHorizontalEdgeSpacing
##    def _set(self, pHorizontalEdgeSpacing):
##        u'The orthogonal horizontal edge spacing of the diagram properties object.'
##    HorizontalEdgeSpacing = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The level constraint of the diagram properties object.'
##        #return pLevelConstraint
##    def _set(self, pLevelConstraint):
##        u'The level constraint of the diagram properties object.'
##    LevelConstraint = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The grid size of the diagram properties object.'
##        #return pGridSize
##    def _set(self, pGridSize):
##        u'The grid size of the diagram properties object.'
##    GridSize = property(_get, _set, doc = _set.__doc__)
##
##    def GetDisplayEdge(self, edgeType):
##        u'Returns display edge.'
##        #return ppDisplayEdge
##
##    def _get(self):
##        u'The layout quality of the diagram properties object.'
##        #return pLayoutQuality
##    def _set(self, pLayoutQuality):
##        u'The layout quality of the diagram properties object.'
##    LayoutQuality = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if reduce crossings is active.'
##        #return pReduceCrossings
##    def _set(self, pReduceCrossings):
##        u'Indicates if reduce crossings is active.'
##    ReduceCrossings = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The level orientation of the diagram properties object.'
##        #return pLevelOrientation
##    def _set(self, pLevelOrientation):
##        u'The level orientation of the diagram properties object.'
##    LevelOrientation = property(_get, _set, doc = _set.__doc__)
##

class MdProcess(CoClass):
    u'Model process object that represents a specific invokation of a particular geoprocessing tool.'
    _reg_clsid_ = GUID('{3ADA678C-034D-497C-B893-7ED9E40CA9D0}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
MdProcess._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, IMdElement, IMdProcess, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, IGPToolboxEvents]

class IMapCacheTileManagerJobResultHandler(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Processes the results of a MapCacheTileManagerJob'
    _iid_ = GUID('{A83CD34F-ED50-4BF2-B75B-B4D5EFA5DA62}')
    _idlflags_ = ['oleautomation', 'hidden']
IMapCacheTileManagerJobResultHandler._methods_ = [
    COMMETHOD([helpstring(u'Feature class workspace path')], HRESULT, 'GetFeatureClassWorkspacePath',
              ( ['out'], POINTER(BSTR), 'pWorkspace' )),
    COMMETHOD([helpstring(u'Feature class workspace path')], HRESULT, 'SetFeatureClassWorkspacePath',
              ( ['in'], BSTR, 'Workspace' )),
    COMMETHOD([helpstring(u'Messages')], HRESULT, 'GetMessages',
              ( ['out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPMessages)), 'ppMessages' )),
    COMMETHOD([helpstring(u'Messages')], HRESULT, 'SetMessages',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPMessages), 'pMessages' )),
]
################################################################
## code template for IMapCacheTileManagerJobResultHandler implementation
##class IMapCacheTileManagerJobResultHandler_Impl(object):
##    def GetFeatureClassWorkspacePath(self):
##        u'Feature class workspace path'
##        #return pWorkspace
##
##    def GetMessages(self):
##        u'Messages'
##        #return ppMessages
##
##    def SetFeatureClassWorkspacePath(self, Workspace):
##        u'Feature class workspace path'
##        #return 
##
##    def SetMessages(self, pMessages):
##        u'Messages'
##        #return 
##

class GPFieldMapping(CoClass):
    u'Geoprocessing Field Map value object.'
    _reg_clsid_ = GUID('{D9272DB9-F03C-4484-8FD2-8A5047B2CBB6}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPFieldMapping._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue, IGPFieldMapping, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]


# values for enumeration 'esriGPSchemaFieldsType'
esriGPSchemaFieldsUnset = -1
esriGPSchemaFieldsFirstDependency = 0
esriGPSchemaFieldsFirstDependencyFIDs = 1
esriGPSchemaFieldsAll = 2
esriGPSchemaFieldsAllNoFIDs = 3
esriGPSchemaFieldsAllFIDsOnly = 4
esriGPSchemaFieldsNone = 5
esriGPSchemaFieldsType = c_int # enum
class GPRasterSchema(CoClass):
    u'Geoprocessing Raster Schema object.'
    _reg_clsid_ = GUID('{BFFBE9EB-497B-4A2D-A174-86F04AEAD774}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPRasterSchema(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing raster schema object.'
    _iid_ = GUID('{D16B27A6-7B7D-446F-873B-B92D4040F499}')
    _idlflags_ = ['oleautomation']
GPRasterSchema._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPSchema, IGPRasterSchema, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize]

class GPLayerType(CoClass):
    u'Geoprocessing Layer Data Type.'
    _reg_clsid_ = GUID('{2340AF90-C51E-48B3-87A5-9D55A60FC30F}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPLayerType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._1CE6AC65_43F5_4529_8FC0_D7ED298E4F1A_0_10_2.IGPLayerType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDEGeoDatasetType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGxFilterInfo, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]


# values for enumeration 'esriRandomDistributionType'
esriRandDistributionNone = 0
esriRandDistributionUniform = 1
esriRandDistributionUniformInteger = 2
esriRandDistributionNormal = 3
esriRandDistributionExponential = 4
esriRandDistributionPoisson = 5
esriRandDistributionGamma = 6
esriRandDistributionBinomial = 7
esriRandDistributionGeometric = 8
esriRandDistributionNegativeBinomial = 9
esriRandomDistributionType = c_int # enum
class IGPRandomNumberGeneratorType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing random number generator data type object.'
    _iid_ = GUID('{B151B274-DD68-4CB4-B738-82F9516064F6}')
    _idlflags_ = ['oleautomation']
IGPRandomNumberGeneratorType._methods_ = [
]
################################################################
## code template for IGPRandomNumberGeneratorType implementation
##class IGPRandomNumberGeneratorType_Impl(object):

IGPFieldInfo3._methods_ = [
    COMMETHOD([helpstring(u'Returns the real alias of the specified field in the field info object.')], HRESULT, 'GetAliasName',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Alias' )),
    COMMETHOD([helpstring(u'Sets the real alias of the specified field in the field info object.')], HRESULT, 'SetAliasName',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Alias' )),
]
################################################################
## code template for IGPFieldInfo3 implementation
##class IGPFieldInfo3_Impl(object):
##    def SetAliasName(self, Index, Alias):
##        u'Sets the real alias of the specified field in the field info object.'
##        #return 
##
##    def GetAliasName(self, Index):
##        u'Returns the real alias of the specified field in the field info object.'
##        #return Alias
##

class GPQueryTableFieldsDomain(CoClass):
    u'Object for filtering the acceptable fileds for query tables.'
    _reg_clsid_ = GUID('{9CC43668-43D8-4182-9820-B2D620305BED}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPQueryTableFieldsDomain(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to a query table fields domain.'
    _iid_ = GUID('{A0451804-616B-424A-B762-CB7191DACF1D}')
    _idlflags_ = ['oleautomation']
GPQueryTableFieldsDomain._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDomain, IGPFieldDomain, IGPQueryTableFieldsDomain]

class GPContainerSchema(CoClass):
    u'Geoprocessing Container Schema object.'
    _reg_clsid_ = GUID('{313EE06A-E26B-4F72-AD95-9EC065A7C905}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPContainerSchema(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing container schema object.'
    _iid_ = GUID('{20E9E803-8FB6-426C-B5A9-798897AD3D06}')
    _idlflags_ = ['oleautomation']
GPContainerSchema._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPSchema, IGPContainerSchema, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize]

class IGPStandaloneTableCollection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to GPCompositeLayer tables.'
    _iid_ = GUID('{42C4E289-F938-4ED9-8069-939785862176}')
    _idlflags_ = ['oleautomation']
IGPStandaloneTableCollection._methods_ = [
    COMMETHOD(['propget', helpstring(u'Returns the standalone tables.')], HRESULT, 'Tables',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'ppTables' )),
    COMMETHOD(['propputref', helpstring(u'Returns the standalone tables.')], HRESULT, 'Tables',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'ppTables' )),
]
################################################################
## code template for IGPStandaloneTableCollection implementation
##class IGPStandaloneTableCollection_Impl(object):
##    def Tables(self, ppTables):
##        u'Returns the standalone tables.'
##        #return 
##

IGPSchema._methods_ = [
    COMMETHOD(['propget', helpstring(u'Inidicates if the output value is to be cloned from the input.')], HRESULT, 'CloneDependency',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'CloneDependency' )),
    COMMETHOD(['propput', helpstring(u'Inidicates if the output value is to be cloned from the input.')], HRESULT, 'CloneDependency',
              ( ['in'], VARIANT_BOOL, 'CloneDependency' )),
    COMMETHOD(['propget', helpstring(u'Inidicates if the output catalog path is to be generated from the input.')], HRESULT, 'GenerateOutputCatalogPath',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'generatePath' )),
    COMMETHOD(['propput', helpstring(u'Inidicates if the output catalog path is to be generated from the input.')], HRESULT, 'GenerateOutputCatalogPath',
              ( ['in'], VARIANT_BOOL, 'generatePath' )),
    COMMETHOD([helpstring(u'Populate the value of the output parameter for validate.')], HRESULT, 'PopulateOutputValue',
              ( ['in'], BSTR, 'baseName' ),
              ( ['in'], POINTER(IGPParameter3), 'param' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'params' ),
              ( ['in'], POINTER(IGPEnvironmentManager), 'envMgr' )),
]
################################################################
## code template for IGPSchema implementation
##class IGPSchema_Impl(object):
##    def _get(self):
##        u'Inidicates if the output value is to be cloned from the input.'
##        #return CloneDependency
##    def _set(self, CloneDependency):
##        u'Inidicates if the output value is to be cloned from the input.'
##    CloneDependency = property(_get, _set, doc = _set.__doc__)
##
##    def PopulateOutputValue(self, baseName, param, params, envMgr):
##        u'Populate the value of the output parameter for validate.'
##        #return 
##
##    def _get(self):
##        u'Inidicates if the output catalog path is to be generated from the input.'
##        #return generatePath
##    def _set(self, generatePath):
##        u'Inidicates if the output catalog path is to be generated from the input.'
##    GenerateOutputCatalogPath = property(_get, _set, doc = _set.__doc__)
##

class GPFeatureLayerType(CoClass):
    u'Geoprocessing Feature Layer Data Type.'
    _reg_clsid_ = GUID('{955A71B9-BF2B-47E0-A815-3B6AEE75CD31}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPFeatureLayerType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPFeatureLayerType, comtypes.gen._1CE6AC65_43F5_4529_8FC0_D7ED298E4F1A_0_10_2.IGPLayerType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDEGeoDatasetType, IGPTableViewType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGxFilterInfo, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class IMapCacheTileManagerJob(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Executes in parallel and performs the job.'
    _iid_ = GUID('{EB216031-0392-44F8-A4D7-6FF97BB0BF01}')
    _idlflags_ = ['oleautomation', 'hidden']
IMapCacheTileManagerJob._methods_ = [
    COMMETHOD([helpstring(u'Cancel the current job.')], HRESULT, 'SetTileRangeX',
              ( ['in'], c_int, 'tileXMin' ),
              ( ['in'], c_int, 'tileXMax' )),
    COMMETHOD([helpstring(u'Cancel the current job.')], HRESULT, 'SetTileRangeY',
              ( ['in'], c_int, 'tileYMin' ),
              ( ['in'], c_int, 'tileYMax' )),
    COMMETHOD([helpstring(u'Cancel the current job.')], HRESULT, 'GetTileRangeX',
              ( ['out'], POINTER(c_int), 'pTileXMin' ),
              ( ['out'], POINTER(c_int), 'pTileXMax' )),
    COMMETHOD([helpstring(u'Cancel the current job.')], HRESULT, 'GetTileRangeY',
              ( ['out'], POINTER(c_int), 'pTileYMin' ),
              ( ['out'], POINTER(c_int), 'pTileYMax' )),
    COMMETHOD(['propput', helpstring(u'Cancel the current job.')], HRESULT, 'Level',
              ( ['in'], c_int, 'pLevel' )),
    COMMETHOD(['propget', helpstring(u'Cancel the current job.')], HRESULT, 'Level',
              ( ['retval', 'out'], POINTER(c_int), 'pLevel' )),
    COMMETHOD(['propget', helpstring(u'Cancel the current job.')], HRESULT, 'TileManagerMode',
              ( ['retval', 'out'], POINTER(comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.esriMapCacheUpdateMode), 'pMode' )),
    COMMETHOD(['propput', helpstring(u'Cancel the current job.')], HRESULT, 'TileManagerMode',
              ( ['in'], comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.esriMapCacheUpdateMode, 'pMode' )),
    COMMETHOD(['propget', helpstring(u'Dataframe name.')], HRESULT, 'Dataframe',
              ( ['retval', 'out'], POINTER(BSTR), 'pDataframe' )),
    COMMETHOD(['propput', helpstring(u'Dataframe name.')], HRESULT, 'Dataframe',
              ( ['in'], BSTR, 'pDataframe' )),
    COMMETHOD(['propget', helpstring(u'Layer name.')], HRESULT, 'LayerName',
              ( ['retval', 'out'], POINTER(BSTR), 'pLayerName' )),
    COMMETHOD(['propput', helpstring(u'Layer name.')], HRESULT, 'LayerName',
              ( ['in'], BSTR, 'pLayerName' )),
    COMMETHOD([helpstring(u'Enable local caching.')], HRESULT, 'EnableLocalCaching',
              ( ['in'], VARIANT_BOOL, 'localCaching' )),
    COMMETHOD(['propget', helpstring(u'Cache Extent.')], HRESULT, 'CacheExtent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'ppCacheExtent' )),
    COMMETHOD(['propputref', helpstring(u'Cache Extent.')], HRESULT, 'CacheExtent',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'ppCacheExtent' )),
    COMMETHOD(['propget', helpstring(u'ClipGeometry')], HRESULT, 'ClipGeometry',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry)), 'ppGeometry' )),
    COMMETHOD(['propputref', helpstring(u'ClipGeometry')], HRESULT, 'ClipGeometry',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'ppGeometry' )),
]
################################################################
## code template for IMapCacheTileManagerJob implementation
##class IMapCacheTileManagerJob_Impl(object):
##    def _get(self):
##        u'Cancel the current job.'
##        #return pLevel
##    def _set(self, pLevel):
##        u'Cancel the current job.'
##    Level = property(_get, _set, doc = _set.__doc__)
##
##    def GetTileRangeX(self):
##        u'Cancel the current job.'
##        #return pTileXMin, pTileXMax
##
##    def GetTileRangeY(self):
##        u'Cancel the current job.'
##        #return pTileYMin, pTileYMax
##
##    def EnableLocalCaching(self, localCaching):
##        u'Enable local caching.'
##        #return 
##
##    def _get(self):
##        u'Dataframe name.'
##        #return pDataframe
##    def _set(self, pDataframe):
##        u'Dataframe name.'
##    Dataframe = property(_get, _set, doc = _set.__doc__)
##
##    def ClipGeometry(self, ppGeometry):
##        u'ClipGeometry'
##        #return 
##
##    def _get(self):
##        u'Cancel the current job.'
##        #return pMode
##    def _set(self, pMode):
##        u'Cancel the current job.'
##    TileManagerMode = property(_get, _set, doc = _set.__doc__)
##
##    def CacheExtent(self, ppCacheExtent):
##        u'Cache Extent.'
##        #return 
##
##    def _get(self):
##        u'Layer name.'
##        #return pLayerName
##    def _set(self, pLayerName):
##        u'Layer name.'
##    LayerName = property(_get, _set, doc = _set.__doc__)
##
##    def SetTileRangeX(self, tileXMin, tileXMax):
##        u'Cancel the current job.'
##        #return 
##
##    def SetTileRangeY(self, tileYMin, tileYMax):
##        u'Cancel the current job.'
##        #return 
##

IGPFieldInfoProperty2._methods_ = [
    COMMETHOD(['propget', helpstring(u'FieldInfo Property Merge Rule.')], HRESULT, 'MergeRule',
              ( ['retval', 'out'], POINTER(esriGPFieldMapMergeRule), 'rule' )),
    COMMETHOD(['propput', helpstring(u'FieldInfo Property Merge Rule.')], HRESULT, 'MergeRule',
              ( ['in'], esriGPFieldMapMergeRule, 'rule' )),
    COMMETHOD(['propget', helpstring(u'FieldInfo Property Join Delimiter.')], HRESULT, 'JoinDelimiter',
              ( ['retval', 'out'], POINTER(BSTR), 'Delimiter' )),
    COMMETHOD(['propput', helpstring(u'FieldInfo Property Join Delimiter.')], HRESULT, 'JoinDelimiter',
              ( ['in'], BSTR, 'Delimiter' )),
    COMMETHOD([helpstring(u'Returns the start and end text positions.')], HRESULT, 'GetTextPos',
              ( ['out'], POINTER(c_int), 'Start' ),
              ( ['out'], POINTER(c_int), 'end' )),
    COMMETHOD([helpstring(u'Sets the start and end text positions.')], HRESULT, 'SetTextPos',
              ( ['in'], c_int, 'Start' ),
              ( ['in'], c_int, 'end' )),
]
################################################################
## code template for IGPFieldInfoProperty2 implementation
##class IGPFieldInfoProperty2_Impl(object):
##    def SetTextPos(self, Start, end):
##        u'Sets the start and end text positions.'
##        #return 
##
##    def GetTextPos(self):
##        u'Returns the start and end text positions.'
##        #return Start, end
##
##    def _get(self):
##        u'FieldInfo Property Join Delimiter.'
##        #return Delimiter
##    def _set(self, Delimiter):
##        u'FieldInfo Property Join Delimiter.'
##    JoinDelimiter = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'FieldInfo Property Merge Rule.'
##        #return rule
##    def _set(self, rule):
##        u'FieldInfo Property Merge Rule.'
##    MergeRule = property(_get, _set, doc = _set.__doc__)
##

class GPEnvironment(CoClass):
    u'Geoprocessing Environment object.'
    _reg_clsid_ = GUID('{A422768B-9961-47C5-B42B-D6CC69A805C9}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPEnvironment._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, IGPEnvironment, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize]


# values for enumeration 'esriGPSchemaRasterType'
esriGPSchemaRasterUnset = -1
esriGPSchemaRasterFirstDependency = 0
esriGPSchemaRasterMin = 1
esriGPSchemaRasterMax = 2
esriGPSchemaRasterInteger = 3
esriGPSchemaRasterFloat = 4
esriGPSchemaRasterType = c_int # enum
IGPRasterSchema._methods_ = [
    COMMETHOD(['propget', helpstring(u'Inidicates how the extent property is to be managed.')], HRESULT, 'ExtentRule',
              ( ['retval', 'out'], POINTER(esriGPSchemaExtentType), 'Type' )),
    COMMETHOD(['propput', helpstring(u'Inidicates how the extent property is to be managed.')], HRESULT, 'ExtentRule',
              ( ['in'], esriGPSchemaExtentType, 'Type' )),
    COMMETHOD(['propget', helpstring(u'The extent property.')], HRESULT, 'Extent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'Extent' )),
    COMMETHOD(['propputref', helpstring(u'The extent property.')], HRESULT, 'Extent',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'Extent' )),
    COMMETHOD(['propget', helpstring(u'Inidicates how the cellSize property is to be managed.')], HRESULT, 'CellSizeRule',
              ( ['retval', 'out'], POINTER(esriGPSchemaCellSizeType), 'Type' )),
    COMMETHOD(['propput', helpstring(u'Inidicates how the cellSize property is to be managed.')], HRESULT, 'CellSizeRule',
              ( ['in'], esriGPSchemaCellSizeType, 'Type' )),
    COMMETHOD(['propget', helpstring(u'The cellSize property.')], HRESULT, 'CellSize',
              ( ['retval', 'out'], POINTER(c_double), 'CellSize' )),
    COMMETHOD(['propput', helpstring(u'The cellSize property.')], HRESULT, 'CellSize',
              ( ['in'], c_double, 'CellSize' )),
    COMMETHOD(['propget', helpstring(u'Inidicates how the raster is integer property is to be managed.')], HRESULT, 'RasterRule',
              ( ['retval', 'out'], POINTER(esriGPSchemaRasterType), 'Type' )),
    COMMETHOD(['propput', helpstring(u'Inidicates how the raster is integer property is to be managed.')], HRESULT, 'RasterRule',
              ( ['in'], esriGPSchemaRasterType, 'Type' )),
    COMMETHOD(['propget', helpstring(u'Inidicates how the raster format property is to be managed.')], HRESULT, 'RasterFormatRule',
              ( ['retval', 'out'], POINTER(esriGPSchemaRasterFormatType), 'Type' )),
    COMMETHOD(['propput', helpstring(u'Inidicates how the raster format property is to be managed.')], HRESULT, 'RasterFormatRule',
              ( ['in'], esriGPSchemaRasterFormatType, 'Type' )),
]
################################################################
## code template for IGPRasterSchema implementation
##class IGPRasterSchema_Impl(object):
##    def _get(self):
##        u'Inidicates how the raster is integer property is to be managed.'
##        #return Type
##    def _set(self, Type):
##        u'Inidicates how the raster is integer property is to be managed.'
##    RasterRule = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Inidicates how the cellSize property is to be managed.'
##        #return Type
##    def _set(self, Type):
##        u'Inidicates how the cellSize property is to be managed.'
##    CellSizeRule = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The cellSize property.'
##        #return CellSize
##    def _set(self, CellSize):
##        u'The cellSize property.'
##    CellSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Inidicates how the extent property is to be managed.'
##        #return Type
##    def _set(self, Type):
##        u'Inidicates how the extent property is to be managed.'
##    ExtentRule = property(_get, _set, doc = _set.__doc__)
##
##    def Extent(self, Extent):
##        u'The extent property.'
##        #return 
##
##    def _get(self):
##        u'Inidicates how the raster format property is to be managed.'
##        #return Type
##    def _set(self, Type):
##        u'Inidicates how the raster format property is to be managed.'
##    RasterFormatRule = property(_get, _set, doc = _set.__doc__)
##

IDEUtilities._methods_ = [
    COMMETHOD([helpstring(u'Assign tin properties.')], HRESULT, 'AssignTinProperties',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITin), 'pTin' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataElement), 'pDataElement' )),
    COMMETHOD([helpstring(u'Check if field arrays are equal.')], HRESULT, 'IsEqualArray',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'pObjects1' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'pObjects2' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pEqual' )),
    COMMETHOD(['propput', helpstring(u'Sets the current workspace.')], HRESULT, 'Workspace',
              ( ['in'], BSTR, 'workPath' )),
    COMMETHOD(['propget', helpstring(u'Sets the current workspace.')], HRESULT, 'Workspace',
              ( ['retval', 'out'], POINTER(BSTR), 'workPath' )),
    COMMETHOD(['propget', helpstring(u'Gets the catalog object.')], HRESULT, 'Catalog',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'Catalog' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to refresh catalog parent.')], HRESULT, 'RefreshCatalogParent',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pRefresh' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to refresh catalog parent.')], HRESULT, 'RefreshCatalogParent',
              ( ['in'], VARIANT_BOOL, 'pRefresh' )),
    COMMETHOD([helpstring(u'Makes a data element from path.')], HRESULT, 'MakeDataElement',
              ( ['in'], BSTR, 'catalogPath' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDEBrowseOptions), 'pBrowseOptions' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType), 'pDataType' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataElement)), 'DataElement' )),
    COMMETHOD([helpstring(u'Makes a data element from name object.')], HRESULT, 'MakeDataElementFromNameObject',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName), 'Name' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataElement)), 'DataElement' )),
    COMMETHOD([helpstring(u'Expands a given data element.')], HRESULT, 'ExpandDataElement',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataElement), 'pInDE' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDEBrowseOptions), 'pBrowseOptions' )),
    COMMETHOD([helpstring(u'Returns the dataset for the given data element.')], HRESULT, 'OpenDataset',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataElement), 'pDataElement' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataset)), 'ppDataset' )),
    COMMETHOD([helpstring(u'Returns the layer based upon the given catalog path.')], HRESULT, 'OpenLayerFromLocation',
              ( ['in'], BSTR, 'catalogPath' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.ILayer)), 'ppLayer' )),
    COMMETHOD([helpstring(u'Returns the dataset by catalog path.')], HRESULT, 'OpenDatasetFromLocation',
              ( ['in'], BSTR, 'catalogPath' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType), 'pDataType' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataset)), 'ppDataset' )),
    COMMETHOD([helpstring(u'Refreshs catalog for the parent of the given data element.')], HRESULT, 'RefreshCatalog',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataElement), 'pSourceDataElement' )),
    COMMETHOD([helpstring(u'Deletes the data element.')], HRESULT, 'Delete',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'pGPValue' )),
    COMMETHOD([helpstring(u'Renames the data element.')], HRESULT, 'Rename',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'pSourceGPValue' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'pTargetGPValue' )),
    COMMETHOD([helpstring(u'Copys the data element.')], HRESULT, 'Copy',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'pSourceGPValue' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'pTargetGPValue' )),
    COMMETHOD([helpstring(u'Checks if a data element exists.')], HRESULT, 'Exists',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'pGPValue' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Exists' )),
    COMMETHOD([helpstring(u'Compares a wildcard string against a given value.')], HRESULT, 'CompareWildCard',
              ( ['in'], BSTR, 'wildCard' ),
              ( ['in'], BSTR, 'Data' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'matched' )),
    COMMETHOD([helpstring(u'Gets the name object for data element.')], HRESULT, 'GetNameObject',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataElement), 'pDataElement' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName)), 'ppName' )),
    COMMETHOD([helpstring(u'Gets the name object from a catalog path.')], HRESULT, 'GetNameObjectFromLocation',
              ( ['in'], BSTR, 'locationMoniker' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType), 'pDataType' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName)), 'ppName' )),
    COMMETHOD([helpstring(u'Gets the GxObject from a catalog path.')], HRESULT, 'GetGxObjectFromLocation',
              ( ['in'], BSTR, 'catalogPath' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType), 'pDataType' ),
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppGxObject' )),
    COMMETHOD([helpstring(u'Returns the name of a catalog path.')], HRESULT, 'ParseName',
              ( [], BSTR, 'catalogPath' ),
              ( [], POINTER(BSTR), 'pName' )),
    COMMETHOD([helpstring(u'Returns the container of a catalog path.')], HRESULT, 'ParseContainer',
              ( [], BSTR, 'catalogPath' ),
              ( [], POINTER(BSTR), 'pContainer' )),
    COMMETHOD([helpstring(u'Release the internal objects used prior to releasing this DEUtilities object.')], HRESULT, 'ReleaseInternals'),
    COMMETHOD([helpstring(u'Gets the GxObject for a data element.')], HRESULT, 'GetGxObject',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataElement), 'pDataTlement' ),
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppGxObject' )),
    COMMETHOD([helpstring(u'Returns an array of GxObjects for a catalog path.')], HRESULT, 'GetGxObjects',
              ( ['in'], BSTR, 'catalogPath' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'ppObjects' )),
    COMMETHOD([helpstring(u'Returns an array of data elements for a catalog path.')], HRESULT, 'MakeDataElements',
              ( ['in'], BSTR, 'catalogPath' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDEBrowseOptions), 'pBrowseOptions' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'ppObjects' )),
]
################################################################
## code template for IDEUtilities implementation
##class IDEUtilities_Impl(object):
##    def MakeDataElements(self, catalogPath, pBrowseOptions):
##        u'Returns an array of data elements for a catalog path.'
##        #return ppObjects
##
##    def ReleaseInternals(self):
##        u'Release the internal objects used prior to releasing this DEUtilities object.'
##        #return 
##
##    def RefreshCatalog(self, pSourceDataElement):
##        u'Refreshs catalog for the parent of the given data element.'
##        #return 
##
##    def CompareWildCard(self, wildCard, Data):
##        u'Compares a wildcard string against a given value.'
##        #return matched
##
##    def GetNameObject(self, pDataElement):
##        u'Gets the name object for data element.'
##        #return ppName
##
##    def MakeDataElementFromNameObject(self, Name):
##        u'Makes a data element from name object.'
##        #return DataElement
##
##    def OpenDataset(self, pDataElement):
##        u'Returns the dataset for the given data element.'
##        #return ppDataset
##
##    def ParseContainer(self, catalogPath, pContainer):
##        u'Returns the container of a catalog path.'
##        #return 
##
##    def GetGxObject(self, pDataTlement):
##        u'Gets the GxObject for a data element.'
##        #return ppGxObject
##
##    def OpenLayerFromLocation(self, catalogPath):
##        u'Returns the layer based upon the given catalog path.'
##        #return ppLayer
##
##    @property
##    def Catalog(self):
##        u'Gets the catalog object.'
##        #return Catalog
##
##    def GetGxObjectFromLocation(self, catalogPath, pDataType):
##        u'Gets the GxObject from a catalog path.'
##        #return ppGxObject
##
##    def Copy(self, pSourceGPValue, pTargetGPValue):
##        u'Copys the data element.'
##        #return 
##
##    def Rename(self, pSourceGPValue, pTargetGPValue):
##        u'Renames the data element.'
##        #return 
##
##    def IsEqualArray(self, pObjects1, pObjects2):
##        u'Check if field arrays are equal.'
##        #return pEqual
##
##    def GetGxObjects(self, catalogPath):
##        u'Returns an array of GxObjects for a catalog path.'
##        #return ppObjects
##
##    def GetNameObjectFromLocation(self, locationMoniker, pDataType):
##        u'Gets the name object from a catalog path.'
##        #return ppName
##
##    def _get(self):
##        u'Sets the current workspace.'
##        #return workPath
##    def _set(self, workPath):
##        u'Sets the current workspace.'
##    Workspace = property(_get, _set, doc = _set.__doc__)
##
##    def OpenDatasetFromLocation(self, catalogPath, pDataType):
##        u'Returns the dataset by catalog path.'
##        #return ppDataset
##
##    def Delete(self, pGPValue):
##        u'Deletes the data element.'
##        #return 
##
##    def AssignTinProperties(self, pTin, pDataElement):
##        u'Assign tin properties.'
##        #return 
##
##    def Exists(self, pGPValue):
##        u'Checks if a data element exists.'
##        #return Exists
##
##    def ExpandDataElement(self, pInDE, pBrowseOptions):
##        u'Expands a given data element.'
##        #return 
##
##    def _get(self):
##        u'Indicates whether to refresh catalog parent.'
##        #return pRefresh
##    def _set(self, pRefresh):
##        u'Indicates whether to refresh catalog parent.'
##    RefreshCatalogParent = property(_get, _set, doc = _set.__doc__)
##
##    def MakeDataElement(self, catalogPath, pBrowseOptions, pDataType):
##        u'Makes a data element from path.'
##        #return DataElement
##
##    def ParseName(self, catalogPath, pName):
##        u'Returns the name of a catalog path.'
##        #return 
##

class GPSQLExpressionType(CoClass):
    u'Geoprocessing SQL Expression Data Type.'
    _reg_clsid_ = GUID('{BA73590F-5F77-47AF-AA9D-69A1489F5020}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPSQLExpressionType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing SQL expression data type object.'
    _iid_ = GUID('{7EF0F425-14C2-4F4A-A8B9-34932A376081}')
    _idlflags_ = ['oleautomation']
GPSQLExpressionType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPSQLExpressionType, IGPStringType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

IGPFieldDomain2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Enable raster attribute table for Mosaic dataset.')], HRESULT, 'UseRasterFields',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'bVAT' )),
    COMMETHOD(['propput', helpstring(u'Enable raster attribute table for Mosaic dataset.')], HRESULT, 'UseRasterFields',
              ( ['in'], VARIANT_BOOL, 'bVAT' )),
]
################################################################
## code template for IGPFieldDomain2 implementation
##class IGPFieldDomain2_Impl(object):
##    def _get(self):
##        u'Enable raster attribute table for Mosaic dataset.'
##        #return bVAT
##    def _set(self, bVAT):
##        u'Enable raster attribute table for Mosaic dataset.'
##    UseRasterFields = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'esriGPExtentEnum'
esriGPExtentUnknown = 0
esriGPExtentMaxOf = 1
esriGPExtentMinOf = 2
esriGPExtentValue = 3
esriGPExtentEnum = c_int # enum
IGeoProcessorResult._methods_ = [
    COMMETHOD(['propget', helpstring(u'Get the GeoProcessor return value.')], HRESULT, 'ReturnValue',
              ( ['retval', 'out'], POINTER(VARIANT), 'pRetValue' )),
    COMMETHOD(['propget', helpstring(u'Get the job status.')], HRESULT, 'Status',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriJobStatus), 'Status' )),
    COMMETHOD(['propget', helpstring(u'Get the job ID.')], HRESULT, 'ResultID',
              ( ['retval', 'out'], POINTER(BSTR), 'ResultID' )),
    COMMETHOD([helpstring(u'Return the GPMessages object which will be messages.')], HRESULT, 'GetResultMessages',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPMessages)), 'ppMessages' )),
    COMMETHOD(['propget', helpstring(u'Return the number of messages.')], HRESULT, 'MessageCount',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD([helpstring(u'Return the message description by index.')], HRESULT, 'GetMessage',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(BSTR), 'pMessage' )),
    COMMETHOD([helpstring(u'Return the message severity by index.')], HRESULT, 'GetSeverity',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(c_int), 'pSeverity' )),
    COMMETHOD([helpstring(u'Return the message error code (Error Messages Only) by index.')], HRESULT, 'GetReturnCode',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(c_int), 'pCode' )),
    COMMETHOD([helpstring(u'Return all of the message descriptions.')], HRESULT, 'GetMessages',
              ( ['in'], c_int, 'severity' ),
              ( ['retval', 'out'], POINTER(BSTR), 'pMessages' )),
    COMMETHOD(['propget', helpstring(u'Return the maximum severity of the message.')], HRESULT, 'MaxSeverity',
              ( ['retval', 'out'], POINTER(c_int), 'pSeverity' )),
    COMMETHOD(['propget', helpstring(u'Return the number of outputs.')], HRESULT, 'OutputCount',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD([helpstring(u'Return the output by index.')], HRESULT, 'GetOutput',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue)), 'outputValue' )),
    COMMETHOD(['propget', helpstring(u'Return the number of inputs.')], HRESULT, 'InputCount',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD([helpstring(u'Return the input by index.')], HRESULT, 'GetInput',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue)), 'inputValue' )),
    COMMETHOD([helpstring(u'Cancel the job.')], HRESULT, 'Cancel'),
    COMMETHOD([helpstring(u'Delete the job and all associated data.')], HRESULT, 'GetMapImageURL',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'pParamIndexes' ),
              ( ['in'], c_int, 'Height' ),
              ( ['in'], c_int, 'Width' ),
              ( ['in'], c_int, 'resolution' ),
              ( ['retval', 'out'], POINTER(BSTR), 'URL' )),
]
################################################################
## code template for IGeoProcessorResult implementation
##class IGeoProcessorResult_Impl(object):
##    @property
##    def Status(self):
##        u'Get the job status.'
##        #return Status
##
##    def GetResultMessages(self):
##        u'Return the GPMessages object which will be messages.'
##        #return ppMessages
##
##    @property
##    def MessageCount(self):
##        u'Return the number of messages.'
##        #return pCount
##
##    @property
##    def MaxSeverity(self):
##        u'Return the maximum severity of the message.'
##        #return pSeverity
##
##    @property
##    def OutputCount(self):
##        u'Return the number of outputs.'
##        #return pCount
##
##    def GetInput(self, Index):
##        u'Return the input by index.'
##        #return inputValue
##
##    def GetOutput(self, Index):
##        u'Return the output by index.'
##        #return outputValue
##
##    def GetMessage(self, Index):
##        u'Return the message description by index.'
##        #return pMessage
##
##    def GetMessages(self, severity):
##        u'Return all of the message descriptions.'
##        #return pMessages
##
##    @property
##    def ReturnValue(self):
##        u'Get the GeoProcessor return value.'
##        #return pRetValue
##
##    def Cancel(self):
##        u'Cancel the job.'
##        #return 
##
##    def GetReturnCode(self, Index):
##        u'Return the message error code (Error Messages Only) by index.'
##        #return pCode
##
##    def GetSeverity(self, Index):
##        u'Return the message severity by index.'
##        #return pSeverity
##
##    @property
##    def ResultID(self):
##        u'Get the job ID.'
##        #return ResultID
##
##    def GetMapImageURL(self, pParamIndexes, Height, Width, resolution):
##        u'Delete the job and all associated data.'
##        #return URL
##
##    @property
##    def InputCount(self):
##        u'Return the number of inputs.'
##        #return pCount
##

class GPDoubleType(CoClass):
    u'Geoprocessing Double Data Type.'
    _reg_clsid_ = GUID('{2F418EF4-0FB4-40DB-9780-B5EE3926143E}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPDoubleType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, IGPDoubleType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class GPMultiValue(CoClass):
    u'Geoprocessing value object that contains multiple geoprocessing value objects.'
    _reg_clsid_ = GUID('{6A34BC94-06B2-481B-B104-6663C4A344EF}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPMultiValue._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue, IGPMultiValue, IGPValueTable, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, IGPValueExpression]

IGPFieldInfoType._methods_ = [
]
################################################################
## code template for IGPFieldInfoType implementation
##class IGPFieldInfoType_Impl(object):

IGPStringType._methods_ = [
]
################################################################
## code template for IGPStringType implementation
##class IGPStringType_Impl(object):

class GPDeleteMapServerCache(CoClass):
    u'Delete pre-rendered tile cache for the MapServer.'
    _reg_clsid_ = GUID('{D9BD0F46-BC3B-40B7-9FF8-93C521A589BF}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPDeleteMapServerCache._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPFunction]

class GPVariable(CoClass):
    u'Geoprocessing Variable object.'
    _reg_clsid_ = GUID('{17944F95-855A-4645-BB4F-B903F19CDEAB}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPVariable._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPVariable, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

IGPFieldInfoProperty3._methods_ = [
    COMMETHOD(['propget', helpstring(u'FieldInfo Property Real Alias.')], HRESULT, 'RealAlias',
              ( ['retval', 'out'], POINTER(BSTR), 'Alias' )),
    COMMETHOD(['propput', helpstring(u'FieldInfo Property Real Alias.')], HRESULT, 'RealAlias',
              ( ['in'], BSTR, 'Alias' )),
]
################################################################
## code template for IGPFieldInfoProperty3 implementation
##class IGPFieldInfoProperty3_Impl(object):
##    def _get(self):
##        u'FieldInfo Property Real Alias.'
##        #return Alias
##    def _set(self, Alias):
##        u'FieldInfo Property Real Alias.'
##    RealAlias = property(_get, _set, doc = _set.__doc__)
##

class GPTopologyLayerType(CoClass):
    u'Geoprocessing Topology Layer Data Type.'
    _reg_clsid_ = GUID('{327A7B2F-2F90-443D-98BD-56670F3F6492}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPTopologyLayerType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPTopologyLayerType, comtypes.gen._1CE6AC65_43F5_4529_8FC0_D7ED298E4F1A_0_10_2.IGPLayerType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDEGeoDatasetType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGxFilterInfo, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class GPRasterCatalogLayer(CoClass):
    u'Geoprocessing value object containing a raster catalog value.'
    _reg_clsid_ = GUID('{608F0FF1-DFEC-4881-A651-2BC5CE5ACD73}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPRasterCatalogLayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPRasterCatalogLayer, comtypes.gen._1CE6AC65_43F5_4529_8FC0_D7ED298E4F1A_0_10_2.IGPLayer, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDEGeoDataset, IGPTableView, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDescribe, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

IDEToolbox2._methods_ = [
    COMMETHOD(['propget', helpstring(u'The display name of the toolbox.')], HRESULT, 'DisplayName',
              ( ['retval', 'out'], POINTER(BSTR), 'DisplayName' )),
    COMMETHOD(['propput', helpstring(u'The display name of the toolbox.')], HRESULT, 'DisplayName',
              ( ['in'], BSTR, 'DisplayName' )),
    COMMETHOD(['propget', helpstring(u'The name of the (CHM) file containing help information for this toolbox.')], HRESULT, 'HelpFile',
              ( ['retval', 'out'], POINTER(BSTR), 'File' )),
    COMMETHOD(['propput', helpstring(u'The name of the (CHM) file containing help information for this toolbox.')], HRESULT, 'HelpFile',
              ( ['in'], BSTR, 'File' )),
    COMMETHOD(['propget', helpstring(u'The context identifier of the topic within the help file for this toolbox.')], HRESULT, 'HelpContext',
              ( ['retval', 'out'], POINTER(c_int), 'context' )),
    COMMETHOD(['propput', helpstring(u'The context identifier of the topic within the help file for this toolbox.')], HRESULT, 'HelpContext',
              ( ['in'], c_int, 'context' )),
]
################################################################
## code template for IDEToolbox2 implementation
##class IDEToolbox2_Impl(object):
##    def _get(self):
##        u'The display name of the toolbox.'
##        #return DisplayName
##    def _set(self, DisplayName):
##        u'The display name of the toolbox.'
##    DisplayName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The context identifier of the topic within the help file for this toolbox.'
##        #return context
##    def _set(self, context):
##        u'The context identifier of the topic within the help file for this toolbox.'
##    HelpContext = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The name of the (CHM) file containing help information for this toolbox.'
##        #return File
##    def _set(self, File):
##        u'The name of the (CHM) file containing help information for this toolbox.'
##    HelpFile = property(_get, _set, doc = _set.__doc__)
##

class IDEToolboxType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to properties/methods of a toolbox data type object.'
    _iid_ = GUID('{76B6944D-DE77-456D-A205-8DFD98FBEC75}')
    _idlflags_ = ['oleautomation']
IDEToolboxType._methods_ = [
]
################################################################
## code template for IDEToolboxType implementation
##class IDEToolboxType_Impl(object):

class GPBoolean(CoClass):
    u'Geoprocessing value object containing a boolean value.'
    _reg_clsid_ = GUID('{66E9D559-5E0E-45B4-ADA8-D7C207BA6B49}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPBoolean(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing boolean object.'
    _iid_ = GUID('{E13E9563-F187-483B-AF21-C3CC03735FA3}')
    _idlflags_ = ['oleautomation']
GPBoolean._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPBoolean, IGPVariant, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

class GPVariant(CoClass):
    u'Geoprocessing value object containing a variant value.'
    _reg_clsid_ = GUID('{5B82FF5E-3115-40E4-BAC8-E62105CA2811}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPVariant._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPVariant, IGPBoolean, IGPString, IGPDate, IGPDouble, IGPLong, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

IDETool._methods_ = [
]
################################################################
## code template for IDETool implementation
##class IDETool_Impl(object):


# values for enumeration 'esriRandomNumberGeneratorType'
esriRNGStandardCRand = 0
esriRNGAlgorithmACM599 = 1
esriRNGMersenneTwister = 2
esriRandomNumberGeneratorType = c_int # enum
IDEToolType._methods_ = [
]
################################################################
## code template for IDEToolType implementation
##class IDEToolType_Impl(object):

class IGPFunctionFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing function factory object.'
    _iid_ = GUID('{669E0215-B827-4130-9014-DF1A53C68805}')
    _idlflags_ = ['oleautomation']
IGPFunctionFactory._methods_ = [
    COMMETHOD(['propget', helpstring(u'The class identifier (CLSID) of the geoprocessing function factory.')], HRESULT, 'CLSID',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IUID)), 'CLSID' )),
    COMMETHOD(['propget', helpstring(u'Name of the geoprocessing function factory.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propget', helpstring(u'Alias of the geoprocessing function factory.')], HRESULT, 'Alias',
              ( ['retval', 'out'], POINTER(BSTR), 'Alias' )),
    COMMETHOD([helpstring(u'Returns the geoprocessing function object with the given name.')], HRESULT, 'GetFunction',
              ( ['in'], BSTR, 'Name' ),
              ( ['retval', 'out'], POINTER(POINTER(IGPFunction)), 'Function' )),
    COMMETHOD([helpstring(u'Returns the geoprocessing function name object with the given name.')], HRESULT, 'GetFunctionName',
              ( ['in'], BSTR, 'Name' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPName)), 'functionname' )),
    COMMETHOD([helpstring(u'Returns an enumeration of function name objects of all the geoprocessing functions managed by this function factory.')], HRESULT, 'GetFunctionNames',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IEnumGPName)), 'functionnames' )),
    COMMETHOD([helpstring(u'Returns an enumeration of the geoprocessing environments that the geoprocessing functions managed by this function factory use.')], HRESULT, 'GetFunctionEnvironments',
              ( ['retval', 'out'], POINTER(POINTER(IEnumGPEnvironment)), 'Environments' )),
]
################################################################
## code template for IGPFunctionFactory implementation
##class IGPFunctionFactory_Impl(object):
##    @property
##    def Name(self):
##        u'Name of the geoprocessing function factory.'
##        #return Name
##
##    def GetFunction(self, Name):
##        u'Returns the geoprocessing function object with the given name.'
##        #return Function
##
##    @property
##    def Alias(self):
##        u'Alias of the geoprocessing function factory.'
##        #return Alias
##
##    @property
##    def CLSID(self):
##        u'The class identifier (CLSID) of the geoprocessing function factory.'
##        #return CLSID
##
##    def GetFunctionName(self, Name):
##        u'Returns the geoprocessing function name object with the given name.'
##        #return functionname
##
##    def GetFunctionNames(self):
##        u'Returns an enumeration of function name objects of all the geoprocessing functions managed by this function factory.'
##        #return functionnames
##
##    def GetFunctionEnvironments(self):
##        u'Returns an enumeration of the geoprocessing environments that the geoprocessing functions managed by this function factory use.'
##        #return Environments
##

class GPEncryptedStringType(CoClass):
    u'Geoprocessing String Data Type.'
    _reg_clsid_ = GUID('{73C211E5-05CE-4FE9-9E97-E3BE55EEC797}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPEncryptedStringType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, IGPStringType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

IGPLineType._methods_ = [
]
################################################################
## code template for IGPLineType implementation
##class IGPLineType_Impl(object):


# values for enumeration 'esriGPFieldInfoMergeRule'
esriGPFieldInfoMergeRuleNone = 0
esriGPFieldInfoMergeRuleMinimum = 1
esriGPFieldInfoMergeRuleMaximum = 2
esriGPFieldInfoMergeRuleMedian = 3
esriGPFieldInfoMergeRuleMean = 4
esriGPFieldInfoMergeRuleStandard = 5
esriGPFieldInfoMergeRuleDeviation = 6
esriGPFieldInfoMergeRuleSum = 7
esriGPFieldInfoMergeRule = c_int # enum
class IGpValueTableObject2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    u'Provides access to the Dispatch Value Table Object.'
    _iid_ = GUID('{1F3F1579-8C0C-46DD-B408-09DEA1166AA7}')
    _idlflags_ = ['dual', 'oleautomation']
IGpValueTableObject2._methods_ = [
    COMMETHOD([dispid(1), helpstring(u'Get a value.')], HRESULT, 'GetTrueValue',
              ( ['in'], c_int, 'rowIndex' ),
              ( ['in'], c_int, 'columnIndex' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue)), 'ppValue' )),
]
################################################################
## code template for IGpValueTableObject2 implementation
##class IGpValueTableObject2_Impl(object):
##    def GetTrueValue(self, rowIndex, columnIndex):
##        u'Get a value.'
##        #return ppValue
##

class IGPEncryptedStringType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of the geoprocessing string data type.'
    _iid_ = GUID('{EF84FD93-931B-4FA3-B616-94ED2AADE8C3}')
    _idlflags_ = ['oleautomation']
IGPEncryptedStringType._methods_ = [
]
################################################################
## code template for IGPEncryptedStringType implementation
##class IGPEncryptedStringType_Impl(object):

class IGPTask(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to properties/methods of a task object.'
    _iid_ = GUID('{F25FA93F-27FF-4698-889D-115904E429AB}')
    _idlflags_ = ['oleautomation']
IGPTask._methods_ = [
    COMMETHOD([helpstring(u'Initialize the task.')], HRESULT, 'Init',
              ( ['in'], POINTER(IMdProcess), 'Process' )),
    COMMETHOD([helpstring(u'Initialize the task.')], HRESULT, 'InitPackage',
              ( ['in'], POINTER(IMdProcess), 'Process' )),
    COMMETHOD(['propget', helpstring(u'The task mode.')], HRESULT, 'Mode',
              ( ['retval', 'out'], POINTER(c_int), 'Mode' )),
    COMMETHOD(['propget', helpstring(u'The task process.')], HRESULT, 'Process',
              ( ['retval', 'out'], POINTER(POINTER(IMdProcess)), 'Process' )),
    COMMETHOD(['propputref', helpstring(u'The task process.')], HRESULT, 'Process',
              ( ['in'], POINTER(IMdProcess), 'Process' )),
    COMMETHOD(['propget', helpstring(u'The parameter mapping associated with the task.')], HRESULT, 'ParameterMapping',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet)), 'ParameterMapping' )),
    COMMETHOD([helpstring(u'Get the parameter info.')], HRESULT, 'GetParameterInfo',
              ( ['in'], BSTR, 'Name' ),
              ( ['out'], POINTER(VARIANT_BOOL), 'Visible' ),
              ( ['out'], POINTER(POINTER(IGPParameter)), 'ppParameter' ),
              ( ['out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDomain)), 'ppDomain' )),
    COMMETHOD([helpstring(u'Set the parameter info.')], HRESULT, 'SetParameterInfo',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'Visible' ),
              ( ['in'], POINTER(IGPParameter), 'pParameter' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDomain), 'pDomain' )),
    COMMETHOD([helpstring(u'Get the parameter renderer.')], HRESULT, 'GetRenderer',
              ( ['in'], BSTR, 'Name' ),
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppRenderer' )),
    COMMETHOD([helpstring(u'Set the parameter renderer.')], HRESULT, 'SetRenderer',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], POINTER(IUnknown), 'pRenderer' )),
    COMMETHOD(['propget', helpstring(u'Set the parameter renderer.')], HRESULT, 'HasWorkspace',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pHasWorkspace' )),
    COMMETHOD(['propput', helpstring(u'Set the parameter renderer.')], HRESULT, 'HasWorkspace',
              ( ['in'], VARIANT_BOOL, 'pHasWorkspace' )),
    COMMETHOD([helpstring(u'Get the parameter description.')], HRESULT, 'GetParameterDescription',
              ( ['in'], BSTR, 'Name' ),
              ( ['retval', 'out'], POINTER(BSTR), 'desc' )),
    COMMETHOD([helpstring(u'Set the parameter description.')], HRESULT, 'SetParameterDescription',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'desc' )),
]
################################################################
## code template for IGPTask implementation
##class IGPTask_Impl(object):
##    def GetRenderer(self, Name):
##        u'Get the parameter renderer.'
##        #return ppRenderer
##
##    def InitPackage(self, Process):
##        u'Initialize the task.'
##        #return 
##
##    def Process(self, Process):
##        u'The task process.'
##        #return 
##
##    def _get(self):
##        u'Set the parameter renderer.'
##        #return pHasWorkspace
##    def _set(self, pHasWorkspace):
##        u'Set the parameter renderer.'
##    HasWorkspace = property(_get, _set, doc = _set.__doc__)
##
##    def SetParameterDescription(self, Name, desc):
##        u'Set the parameter description.'
##        #return 
##
##    @property
##    def ParameterMapping(self):
##        u'The parameter mapping associated with the task.'
##        #return ParameterMapping
##
##    def Init(self, Process):
##        u'Initialize the task.'
##        #return 
##
##    @property
##    def Mode(self):
##        u'The task mode.'
##        #return Mode
##
##    def SetRenderer(self, Name, pRenderer):
##        u'Set the parameter renderer.'
##        #return 
##
##    def SetParameterInfo(self, Name, Visible, pParameter, pDomain):
##        u'Set the parameter info.'
##        #return 
##
##    def GetParameterDescription(self, Name):
##        u'Get the parameter description.'
##        #return desc
##
##    def GetParameterInfo(self, Name):
##        u'Get the parameter info.'
##        #return Visible, ppParameter, ppDomain
##

class GeoProcessorResult(CoClass):
    u'GeoProcessorResult Access.'
    _reg_clsid_ = GUID('{867650FA-BD08-49F9-BA7A-BD4CEA917D78}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GeoProcessorResult._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGeoProcessorResult, IGeoProcessorResult2]


# values for enumeration 'esriGPSchemaFeatureType'
esriGPSchemaFeatureUnset = -1
esriGPSchemaFeatureFirstDependency = 0
esriGPSchemaFeatureAsSpecified = 1
esriGPSchemaFeatureUnknown = 2
esriGPSchemaFeatureType = c_int # enum
IGPFeatureSchema._methods_ = [
    COMMETHOD(['propget', helpstring(u'Inidicates how the FeatureType property is to be managed.')], HRESULT, 'FeatureTypeRule',
              ( ['retval', 'out'], POINTER(esriGPSchemaFeatureType), 'Type' )),
    COMMETHOD(['propput', helpstring(u'Inidicates how the FeatureType property is to be managed.')], HRESULT, 'FeatureTypeRule',
              ( ['in'], esriGPSchemaFeatureType, 'Type' )),
    COMMETHOD(['propget', helpstring(u'The FeatureType.')], HRESULT, 'FeatureType',
              ( ['retval', 'out'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriFeatureType), 'Type' )),
    COMMETHOD(['propput', helpstring(u'The FeatureType.')], HRESULT, 'FeatureType',
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriFeatureType, 'Type' )),
    COMMETHOD(['propget', helpstring(u'Inidicates how the GeometryType property is to be managed.')], HRESULT, 'GeometryTypeRule',
              ( ['retval', 'out'], POINTER(esriGPSchemaGeometryType), 'Type' )),
    COMMETHOD(['propput', helpstring(u'Inidicates how the GeometryType property is to be managed.')], HRESULT, 'GeometryTypeRule',
              ( ['in'], esriGPSchemaGeometryType, 'Type' )),
    COMMETHOD(['propget', helpstring(u'The GeometryType.')], HRESULT, 'GeometryType',
              ( ['retval', 'out'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.esriGeometryType), 'Type' )),
    COMMETHOD(['propput', helpstring(u'The GeometryType.')], HRESULT, 'GeometryType',
              ( ['in'], comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.esriGeometryType, 'Type' )),
    COMMETHOD(['propget', helpstring(u'Inidicates how the fields property is to be managed.')], HRESULT, 'FieldsRule',
              ( ['retval', 'out'], POINTER(esriGPSchemaFieldsType), 'Type' )),
    COMMETHOD(['propput', helpstring(u'Inidicates how the fields property is to be managed.')], HRESULT, 'FieldsRule',
              ( ['in'], esriGPSchemaFieldsType, 'Type' )),
    COMMETHOD(['propget', helpstring(u'Inidicates additional fields for the fields property.')], HRESULT, 'AdditionalFields',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFields)), 'Fields' )),
    COMMETHOD(['propputref', helpstring(u'Inidicates additional fields for the fields property.')], HRESULT, 'AdditionalFields',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFields), 'Fields' )),
    COMMETHOD(['propget', helpstring(u'Inidicates how the extent property is to be managed.')], HRESULT, 'ExtentRule',
              ( ['retval', 'out'], POINTER(esriGPSchemaExtentType), 'Type' )),
    COMMETHOD(['propput', helpstring(u'Inidicates how the extent property is to be managed.')], HRESULT, 'ExtentRule',
              ( ['in'], esriGPSchemaExtentType, 'Type' )),
    COMMETHOD(['propget', helpstring(u'The extent property.')], HRESULT, 'Extent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'Extent' )),
    COMMETHOD(['propputref', helpstring(u'The extent property.')], HRESULT, 'Extent',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'Extent' )),
]
################################################################
## code template for IGPFeatureSchema implementation
##class IGPFeatureSchema_Impl(object):
##    def _get(self):
##        u'The FeatureType.'
##        #return Type
##    def _set(self, Type):
##        u'The FeatureType.'
##    FeatureType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Inidicates how the GeometryType property is to be managed.'
##        #return Type
##    def _set(self, Type):
##        u'Inidicates how the GeometryType property is to be managed.'
##    GeometryTypeRule = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Inidicates how the extent property is to be managed.'
##        #return Type
##    def _set(self, Type):
##        u'Inidicates how the extent property is to be managed.'
##    ExtentRule = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Inidicates how the fields property is to be managed.'
##        #return Type
##    def _set(self, Type):
##        u'Inidicates how the fields property is to be managed.'
##    FieldsRule = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The GeometryType.'
##        #return Type
##    def _set(self, Type):
##        u'The GeometryType.'
##    GeometryType = property(_get, _set, doc = _set.__doc__)
##
##    def Extent(self, Extent):
##        u'The extent property.'
##        #return 
##
##    def _get(self):
##        u'Inidicates how the FeatureType property is to be managed.'
##        #return Type
##    def _set(self, Type):
##        u'Inidicates how the FeatureType property is to be managed.'
##    FeatureTypeRule = property(_get, _set, doc = _set.__doc__)
##
##    def AdditionalFields(self, Fields):
##        u'Inidicates additional fields for the fields property.'
##        #return 
##

class GPString(CoClass):
    u'Geoprocessing value object containing a string value.'
    _reg_clsid_ = GUID('{6A348533-B667-4A05-ABB0-0024110D17F0}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPString._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue, IGPVariant, IGPString, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

class IGPMultiValueDataTypeName(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a multi-value data type name object.'
    _iid_ = GUID('{831A514C-6083-404A-8C74-37C9D047ECA8}')
    _idlflags_ = ['oleautomation']
IGPMultiValueDataTypeName._methods_ = [
    COMMETHOD(['propget', helpstring(u'The data type name of the multi-value data type name.')], HRESULT, 'MemberDataTypeName',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataTypeName)), 'Name' )),
    COMMETHOD(['propputref', helpstring(u'The data type name of the multi-value data type name.')], HRESULT, 'MemberDataTypeName',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataTypeName), 'Name' )),
]
################################################################
## code template for IGPMultiValueDataTypeName implementation
##class IGPMultiValueDataTypeName_Impl(object):
##    def MemberDataTypeName(self, Name):
##        u'The data type name of the multi-value data type name.'
##        #return 
##

class IGPFieldMappingType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the field map data type.'
    _iid_ = GUID('{CB2FB2EE-20E7-4EF6-9AE6-45FC43AA71E9}')
    _idlflags_ = ['oleautomation']
IGPFieldMappingType._methods_ = [
]
################################################################
## code template for IGPFieldMappingType implementation
##class IGPFieldMappingType_Impl(object):

class GPRouteMeasureEventPropertiesType(CoClass):
    u'Geoprocessing route measure event properties data type.'
    _reg_clsid_ = GUID('{5714BB1D-9C50-4EBE-8885-B7E3DBD301FC}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPRouteMeasureEventPropertiesType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the route measure event property type.'
    _iid_ = GUID('{6FB2F5F7-8024-4C83-91D6-CF804A14AED3}')
    _idlflags_ = ['oleautomation']
GPRouteMeasureEventPropertiesType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, IGPRouteMeasureEventPropertiesType]

IGPBoolean._methods_ = [
    COMMETHOD(['propget', helpstring(u'The value of the geoprocessing value object as a boolean.')], HRESULT, 'Value',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Value' )),
    COMMETHOD(['propput', helpstring(u'The value of the geoprocessing value object as a boolean.')], HRESULT, 'Value',
              ( ['in'], VARIANT_BOOL, 'Value' )),
]
################################################################
## code template for IGPBoolean implementation
##class IGPBoolean_Impl(object):
##    def _get(self):
##        u'The value of the geoprocessing value object as a boolean.'
##        #return Value
##    def _set(self, Value):
##        u'The value of the geoprocessing value object as a boolean.'
##    Value = property(_get, _set, doc = _set.__doc__)
##

class ToolboxWorkspaceFactory(CoClass):
    u'Workspace Factory used to open toolbox workspaces.'
    _reg_clsid_ = GUID('{E9231B31-2A34-4729-8DE2-12CF39674B1B}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
ToolboxWorkspaceFactory._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspaceFactory, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspaceFactory2, IToolboxWorkspaceFactory, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]

IGPStringHidden._methods_ = [
    COMMETHOD(['propget', helpstring(u'The value of the geoprocessing value object as a string.')], HRESULT, 'Value',
              ( ['retval', 'out'], POINTER(BSTR), 'Value' )),
    COMMETHOD(['propput', helpstring(u'The value of the geoprocessing value object as a string.')], HRESULT, 'Value',
              ( ['in'], BSTR, 'Value' )),
]
################################################################
## code template for IGPStringHidden implementation
##class IGPStringHidden_Impl(object):
##    def _get(self):
##        u'The value of the geoprocessing value object as a string.'
##        #return Value
##    def _set(self, Value):
##        u'The value of the geoprocessing value object as a string.'
##    Value = property(_get, _set, doc = _set.__doc__)
##

class IGPRasterGDBEnvPyramidType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to raster IGPRasterGDBEnvPyramidType.'
    _iid_ = GUID('{8FABEEED-8600-49D8-AFD1-F4511559A22B}')
    _idlflags_ = ['oleautomation']
IGPRasterGDBEnvPyramidType._methods_ = [
]
################################################################
## code template for IGPRasterGDBEnvPyramidType implementation
##class IGPRasterGDBEnvPyramidType_Impl(object):

IGPFieldMap._methods_ = [
    COMMETHOD([helpstring(u'Remove all of the mapped fields.')], HRESULT, 'RemoveAll'),
    COMMETHOD(['propget', helpstring(u'Get the count of mapped fields.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'Get the mapped fields.')], HRESULT, 'Fields',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFields)), 'Fields' )),
    COMMETHOD(['propget', helpstring(u'Get the main field.')], HRESULT, 'OutputField',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IField)), 'Field' )),
    COMMETHOD(['propputref', helpstring(u'Get the main field.')], HRESULT, 'OutputField',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IField), 'Field' )),
    COMMETHOD(['propget', helpstring(u'Get the merge rule.')], HRESULT, 'MergeRule',
              ( ['retval', 'out'], POINTER(esriGPFieldMapMergeRule), 'rule' )),
    COMMETHOD(['propput', helpstring(u'Get the merge rule.')], HRESULT, 'MergeRule',
              ( ['in'], esriGPFieldMapMergeRule, 'rule' )),
    COMMETHOD(['propget', helpstring(u'Get the join delimiter.')], HRESULT, 'JoinDelimiter',
              ( ['retval', 'out'], POINTER(BSTR), 'Delimiter' )),
    COMMETHOD(['propput', helpstring(u'Get the join delimiter.')], HRESULT, 'JoinDelimiter',
              ( ['in'], BSTR, 'Delimiter' )),
    COMMETHOD([helpstring(u'Add an internal mapped field.')], HRESULT, 'AddInputField',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDETable), 'Table' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IField), 'Field' ),
              ( ['in'], c_int, 'startPos' ),
              ( ['in'], c_int, 'endPos' )),
    COMMETHOD([helpstring(u'Find an internal mapped field.')], HRESULT, 'FindInputField',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDETable), 'Table' ),
              ( ['in'], BSTR, 'FieldName' ),
              ( ['retval', 'out'], POINTER(c_int), 'Index' )),
    COMMETHOD([helpstring(u'Remove an internal mapped field.')], HRESULT, 'RemoveField',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Get an internal mapped field.')], HRESULT, 'GetField',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IField)), 'Field' )),
    COMMETHOD([helpstring(u'Get an internal mapped field table.')], HRESULT, 'GetTable',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDETable)), 'Table' )),
    COMMETHOD([helpstring(u'Get the start and end text positions.')], HRESULT, 'GetTextPos',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(c_int), 'Start' ),
              ( ['out'], POINTER(c_int), 'end' )),
    COMMETHOD([helpstring(u'Set the start and end text positions.')], HRESULT, 'SetTextPos',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'Start' ),
              ( ['in'], c_int, 'end' )),
]
################################################################
## code template for IGPFieldMap implementation
##class IGPFieldMap_Impl(object):
##    @property
##    def Count(self):
##        u'Get the count of mapped fields.'
##        #return Count
##
##    def AddInputField(self, Table, Field, startPos, endPos):
##        u'Add an internal mapped field.'
##        #return 
##
##    def RemoveField(self, Index):
##        u'Remove an internal mapped field.'
##        #return 
##
##    def GetField(self, Index):
##        u'Get an internal mapped field.'
##        #return Field
##
##    @property
##    def Fields(self):
##        u'Get the mapped fields.'
##        #return Fields
##
##    def SetTextPos(self, Index, Start, end):
##        u'Set the start and end text positions.'
##        #return 
##
##    def OutputField(self, Field):
##        u'Get the main field.'
##        #return 
##
##    def RemoveAll(self):
##        u'Remove all of the mapped fields.'
##        #return 
##
##    def GetTextPos(self, Index):
##        u'Get the start and end text positions.'
##        #return Start, end
##
##    def _get(self):
##        u'Get the join delimiter.'
##        #return Delimiter
##    def _set(self, Delimiter):
##        u'Get the join delimiter.'
##    JoinDelimiter = property(_get, _set, doc = _set.__doc__)
##
##    def GetTable(self, Index):
##        u'Get an internal mapped field table.'
##        #return Table
##
##    def FindInputField(self, Table, FieldName):
##        u'Find an internal mapped field.'
##        #return Index
##
##    def _get(self):
##        u'Get the merge rule.'
##        #return rule
##    def _set(self, rule):
##        u'Get the merge rule.'
##    MergeRule = property(_get, _set, doc = _set.__doc__)
##

class IGpDescribeData(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    u'Provides access to the properties of a GpDescribeData object.'
    _iid_ = GUID('{A558ACF8-B612-4FEA-A2F4-9BF1760653DA}')
    _idlflags_ = ['dual', 'oleautomation']
IGpDescribeData._methods_ = [
    COMMETHOD([dispid(1), helpstring(u'Returns information about a given data element.')], HRESULT, 'Describe',
              ( ['in'], BSTR, 'Method' ),
              ( ['retval', 'out'], POINTER(VARIANT), 'Value' )),
]
################################################################
## code template for IGpDescribeData implementation
##class IGpDescribeData_Impl(object):
##    def Describe(self, Method):
##        u'Returns information about a given data element.'
##        #return Value
##

IGPString._methods_ = [
    COMMETHOD(['propget', helpstring(u'The value of the geoprocessing value object as a string.')], HRESULT, 'Value',
              ( ['retval', 'out'], POINTER(BSTR), 'Value' )),
    COMMETHOD(['propput', helpstring(u'The value of the geoprocessing value object as a string.')], HRESULT, 'Value',
              ( ['in'], BSTR, 'Value' )),
]
################################################################
## code template for IGPString implementation
##class IGPString_Impl(object):
##    def _get(self):
##        u'The value of the geoprocessing value object as a string.'
##        #return Value
##    def _set(self, Value):
##        u'The value of the geoprocessing value object as a string.'
##    Value = property(_get, _set, doc = _set.__doc__)
##

class GPBooleanType(CoClass):
    u'Geoprocessing Boolean Data Type.'
    _reg_clsid_ = GUID('{2C90766B-5023-4672-853C-54D4A658AFFE}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPBooleanType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, IGPBooleanType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class IGPToolExtensionFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to methods on a geoprocessing tool extension factory object.'
    _iid_ = GUID('{F0A6E875-EC4E-4B83-8599-77B04766D717}')
    _idlflags_ = ['oleautomation']
IGPToolExtension._methods_ = [
    COMMETHOD(['propget', helpstring(u'The factory object associated with this tool extension.')], HRESULT, 'ToolExtensionFactory',
              ( ['retval', 'out'], POINTER(POINTER(IGPToolExtensionFactory)), 'factory' )),
    COMMETHOD(['propget', helpstring(u'The custom tool helper object associated with the tool extension.')], HRESULT, 'CustomToolHelper',
              ( ['retval', 'out'], POINTER(POINTER(IGPCustomToolHelper)), 'helper' )),
    COMMETHOD(['propputref', helpstring(u'The custom tool helper object associated with the tool extension.')], HRESULT, 'CustomToolHelper',
              ( [], POINTER(IGPCustomToolHelper), 'helper' )),
    COMMETHOD(['propget', helpstring(u'The CLSID of a custom dialog class to enter/edit parameter values for custom tools associated with this tool extension.')], HRESULT, 'DialogCLSID',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IUID)), 'CLSID' )),
    COMMETHOD(['propget', helpstring(u'The parameters required to execute the custom tool associated with this tool extension.')], HRESULT, 'ParameterInfo',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'params' )),
    COMMETHOD([helpstring(u'Returns whether or not the tool extension is can be executed.')], HRESULT, 'IsValid',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Valid' )),
    COMMETHOD([helpstring(u'Returns whether or not the tool extension can be executed within the current application product.')], HRESULT, 'IsLicensedForProduct',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsLicensed' )),
    COMMETHOD([helpstring(u'Returns whether or not the tool extension has all necessary product licenses to be executed.')], HRESULT, 'IsLicensed',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsLicensed' )),
    COMMETHOD([helpstring(u'Returns whether or not the source for the tool extension can be edited.')], HRESULT, 'CanEditSource',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'CanEdit' )),
    COMMETHOD([helpstring(u'Returns a custom renderer for a given parameter.')], HRESULT, 'GetRenderer',
              ( ['in'], POINTER(IGPParameter), 'pParam' ),
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppRenderer' )),
    COMMETHOD([helpstring(u'Validates the given set of values.')], HRESULT, 'Validate',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'paramvalues' ),
              ( ['in'], VARIANT_BOOL, 'updateValues' ),
              ( ['in'], POINTER(IGPEnvironmentManager), 'pEnvMgr' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPMessages)), 'Messages' )),
    COMMETHOD([helpstring(u'Executes the tool extension given the set of parameter values.')], HRESULT, 'Execute',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'paramvalues' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'TrackCancel' ),
              ( ['in'], POINTER(IGPEnvironmentManager), 'pEnvMgr' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPMessages), 'Messages' )),
    COMMETHOD([helpstring(u'Updates the given metadata property set with the current tool extension properties.')], HRESULT, 'SynchronizeMetadata',
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriMetadataSyncAction, 'action' ),
              ( ['in'], c_int, 'Interval' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet), 'Metadata' )),
]
################################################################
## code template for IGPToolExtension implementation
##class IGPToolExtension_Impl(object):
##    def GetRenderer(self, pParam):
##        u'Returns a custom renderer for a given parameter.'
##        #return ppRenderer
##
##    @property
##    def ParameterInfo(self):
##        u'The parameters required to execute the custom tool associated with this tool extension.'
##        #return params
##
##    @property
##    def DialogCLSID(self):
##        u'The CLSID of a custom dialog class to enter/edit parameter values for custom tools associated with this tool extension.'
##        #return CLSID
##
##    @property
##    def ToolExtensionFactory(self):
##        u'The factory object associated with this tool extension.'
##        #return factory
##
##    def CanEditSource(self):
##        u'Returns whether or not the source for the tool extension can be edited.'
##        #return CanEdit
##
##    def Execute(self, paramvalues, TrackCancel, pEnvMgr, Messages):
##        u'Executes the tool extension given the set of parameter values.'
##        #return 
##
##    def CustomToolHelper(self, helper):
##        u'The custom tool helper object associated with the tool extension.'
##        #return 
##
##    def IsLicensed(self):
##        u'Returns whether or not the tool extension has all necessary product licenses to be executed.'
##        #return IsLicensed
##
##    def IsValid(self):
##        u'Returns whether or not the tool extension is can be executed.'
##        #return Valid
##
##    def IsLicensedForProduct(self):
##        u'Returns whether or not the tool extension can be executed within the current application product.'
##        #return IsLicensed
##
##    def Validate(self, paramvalues, updateValues, pEnvMgr):
##        u'Validates the given set of values.'
##        #return Messages
##
##    def SynchronizeMetadata(self, action, Interval, Metadata):
##        u'Updates the given metadata property set with the current tool extension properties.'
##        #return 
##

IGPRouteMeasureEventPropertiesType._methods_ = [
]
################################################################
## code template for IGPRouteMeasureEventPropertiesType implementation
##class IGPRouteMeasureEventPropertiesType_Impl(object):

class IGPScriptTool(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to methods on a geoprocessing script tool object.'
    _iid_ = GUID('{03AE1E9C-9F57-44FF-87AD-1910ACD6B3CF}')
    _idlflags_ = ['oleautomation']
IGPScriptTool._methods_ = [
    COMMETHOD(['propget', helpstring(u'The name of the script file associated with the tool.')], HRESULT, 'FileName',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'The name of the script file associated with the tool.')], HRESULT, 'FileName',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propputref', helpstring(u'The parameters associated with the tool.')], HRESULT, 'ParameterInfo',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'rhs' )),
    COMMETHOD(['propget', helpstring(u'The environments associated with the tool.')], HRESULT, 'Environments',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'Environments' )),
    COMMETHOD(['propputref', helpstring(u'The environments associated with the tool.')], HRESULT, 'Environments',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'Environments' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether or not to display a command window when executing.')], HRESULT, 'ShowCommandWindow',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'showWindow' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether or not to display a command window when executing.')], HRESULT, 'ShowCommandWindow',
              ( ['in'], VARIANT_BOOL, 'showWindow' )),
]
################################################################
## code template for IGPScriptTool implementation
##class IGPScriptTool_Impl(object):
##    def _get(self):
##        u'Indicates whether or not to display a command window when executing.'
##        #return showWindow
##    def _set(self, showWindow):
##        u'Indicates whether or not to display a command window when executing.'
##    ShowCommandWindow = property(_get, _set, doc = _set.__doc__)
##
##    def ParameterInfo(self, rhs):
##        u'The parameters associated with the tool.'
##        #return 
##
##    def Environments(self, Environments):
##        u'The environments associated with the tool.'
##        #return 
##
##    def _get(self):
##        u'The name of the script file associated with the tool.'
##        #return Name
##    def _set(self, Name):
##        u'The name of the script file associated with the tool.'
##    FileName = property(_get, _set, doc = _set.__doc__)
##

class GPTinLayer(CoClass):
    u'Geoprocessing value object containing a tin layer value.'
    _reg_clsid_ = GUID('{1FF73FB6-1D74-4722-A785-DFA1F8327AB5}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPTinLayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPTinLayer, comtypes.gen._1CE6AC65_43F5_4529_8FC0_D7ED298E4F1A_0_10_2.IGPLayer, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDEGeoDataset, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDescribe, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]


# values for enumeration 'esriGPServerMessageCodeEnum'
esriGPServerMessageCode_InitSucceeded = 20002
esriGPServerMessageCode_InitFailed = 20003
esriGPServerMessageCode_JobCatalogInitSucceeded = 20004
esriGPServerMessageCode_JobCatalogInitFailed = 20005
esriGPServerMessageCode_ConstructSucceeded = 20006
esriGPServerMessageCode_ConstructFailed = 20007
esriGPServerMessageCode_SubmitJobSucceeded = 20008
esriGPServerMessageCode_SubmitJobFailed = 20009
esriGPServerMessageCode_ExecuteFailed = 20010
esriGPServerMessageCode_AddCfgFailed = 20013
esriGPServerMessageCode_StartCfgFailed = 20014
esriGPServerMessageCode_StopCfgFailed = 20015
esriGPServerMessageCode_DeleteCfgFailed = 20016
esriGPServerMessageCode_JobsDirNotFound = 20017
esriGPServerMessageCode_NotLicensed = 20018
esriGPServerMessageCode_OutputDirNotFound = 20019
esriGPServerMessageCode_CreateDirFailed = 20020
esriGPServerMessageCode_TransferDirFailed = 20021
esriGPServerMessageCode_ExecuteTime = 20022
esriGPServerMessageCode_LoadTime = 20023
esriGPServerMessageCode_SaveTime = 20024
esriGPServerMessageCode_Debug = 20025
esriGPServerMessageCode_OutputDirNotExist = 20026
esriGPServerMessageCode_OutputDirCreateFailed = 20027
esriGPServerMessageCode_JobsDirNotExist = 20028
esriGPServerMessageCode_JobsDirRenameFailed = 20029
esriGPServerMessageCode_OpenGeoprocessingResultFailed = 20030
esriGPServerMessageCode_InvalidLayer = 20031
esriGPServerMessageCode_CreateMSDFailed = 20032
esriGPServerMessageCodeEnum = c_int # enum
IGPVariant._methods_ = [
    COMMETHOD(['propget', helpstring(u'The value of the geoprocessing value object as a variant.')], HRESULT, 'Variant',
              ( ['retval', 'out'], POINTER(VARIANT), 'Value' )),
    COMMETHOD(['propput', helpstring(u'The value of the geoprocessing value object as a variant.')], HRESULT, 'Variant',
              ( ['in'], VARIANT, 'Value' )),
]
################################################################
## code template for IGPVariant implementation
##class IGPVariant_Impl(object):
##    def _get(self):
##        u'The value of the geoprocessing value object as a variant.'
##        #return Value
##    def _set(self, Value):
##        u'The value of the geoprocessing value object as a variant.'
##    Variant = property(_get, _set, doc = _set.__doc__)
##

IGpEnumList._methods_ = [
    COMMETHOD([helpstring(u'Resets the enumeration so the next returned string is the first.')], HRESULT, 'Reset'),
    COMMETHOD([helpstring(u'Returns the next string in the list.')], HRESULT, 'Next',
              ( ['retval', 'out'], POINTER(BSTR), 'pName' )),
]
################################################################
## code template for IGpEnumList implementation
##class IGpEnumList_Impl(object):
##    def Reset(self):
##        u'Resets the enumeration so the next returned string is the first.'
##        #return 
##
##    def Next(self):
##        u'Returns the next string in the list.'
##        #return pName
##

IGPToolExtensionFactory._methods_ = [
    COMMETHOD(['propget', helpstring(u'The CLSID of the tool extension factory class.')], HRESULT, 'CLSID',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IUID)), 'CLSID' )),
    COMMETHOD(['propget', helpstring(u'Name of the tool extension factory class.')], HRESULT, 'ToolExtensionName',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propget', helpstring(u'A 16x16 bitmap to associate with the tool extension.')], HRESULT, 'SmallImage',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE), 'image' )),
    COMMETHOD(['propget', helpstring(u'A 32x32 bitmap to associate with the tool extension.')], HRESULT, 'LargeImage',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE), 'image' )),
    COMMETHOD(['propget', helpstring(u'A 16x16 bitmap to associate with invalid instances of the tool extension.')], HRESULT, 'SmallInvalidImage',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE), 'image' )),
    COMMETHOD(['propget', helpstring(u'A 32x32 bitmap to associate with invalid instances of the tool extension.')], HRESULT, 'LargeInvalidImage',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE), 'image' )),
    COMMETHOD(['propget', helpstring(u'A 16x16 bitmap to associate with unlicensed instances of the tool extension.')], HRESULT, 'SmallUnlicensedImage',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE), 'image' )),
    COMMETHOD(['propget', helpstring(u'A 32x32 bitmap to associate with unlicensed instances of the tool extension.')], HRESULT, 'LargeUnlicensedImage',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE), 'image' )),
    COMMETHOD([helpstring(u'Creates a new instance of a tool extension in the given toolbox.')], HRESULT, 'Create',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE, 'Parent' ),
              ( ['in'], POINTER(IGPToolbox), 'destination' ),
              ( ['out'], POINTER(BSTR), 'defaultName' ),
              ( ['out'], POINTER(BSTR), 'defaultDisplayName' ),
              ( ['out'], POINTER(BSTR), 'defaultDescription' ),
              ( ['retval', 'out'], POINTER(POINTER(IGPToolExtension)), 'ToolExtension' )),
    COMMETHOD([helpstring(u'Called immediately following the creation of a new tool extension.')], HRESULT, 'PostCreateTool',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE, 'Parent' ),
              ( ['in'], POINTER(IGPToolExtension), 'ToolExtension' )),
    COMMETHOD([helpstring(u'Returns whether or not the factory supports editing instances of the tool extension.')], HRESULT, 'CanEdit',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'CanEdit' )),
    COMMETHOD([helpstring(u'Invokes a window to edit a tool extension.')], HRESULT, 'Edit',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE, 'Parent' ),
              ( ['in'], POINTER(IGPToolExtension), 'ToolExtension' )),
]
################################################################
## code template for IGPToolExtensionFactory implementation
##class IGPToolExtensionFactory_Impl(object):
##    @property
##    def SmallUnlicensedImage(self):
##        u'A 16x16 bitmap to associate with unlicensed instances of the tool extension.'
##        #return image
##
##    def PostCreateTool(self, Parent, ToolExtension):
##        u'Called immediately following the creation of a new tool extension.'
##        #return 
##
##    @property
##    def LargeImage(self):
##        u'A 32x32 bitmap to associate with the tool extension.'
##        #return image
##
##    @property
##    def LargeInvalidImage(self):
##        u'A 32x32 bitmap to associate with invalid instances of the tool extension.'
##        #return image
##
##    @property
##    def LargeUnlicensedImage(self):
##        u'A 32x32 bitmap to associate with unlicensed instances of the tool extension.'
##        #return image
##
##    @property
##    def SmallImage(self):
##        u'A 16x16 bitmap to associate with the tool extension.'
##        #return image
##
##    def CanEdit(self):
##        u'Returns whether or not the factory supports editing instances of the tool extension.'
##        #return CanEdit
##
##    @property
##    def SmallInvalidImage(self):
##        u'A 16x16 bitmap to associate with invalid instances of the tool extension.'
##        #return image
##
##    @property
##    def ToolExtensionName(self):
##        u'Name of the tool extension factory class.'
##        #return Name
##
##    def Edit(self, Parent, ToolExtension):
##        u'Invokes a window to edit a tool extension.'
##        #return 
##
##    @property
##    def CLSID(self):
##        u'The CLSID of the tool extension factory class.'
##        #return CLSID
##
##    def Create(self, Parent, destination):
##        u'Creates a new instance of a tool extension in the given toolbox.'
##        #return defaultName, defaultDisplayName, defaultDescription, ToolExtension
##

class GPMultiValueTypeName(CoClass):
    u'Geoprocessing Multi-Value Data Type Name.'
    _reg_clsid_ = GUID('{35DE3370-678E-40FB-9B7E-FFAF08224B99}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPMultiValueTypeName._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPName, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataTypeName, IGPMultiValueDataTypeName, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize]

class IGPExtent(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing extent object.'
    _iid_ = GUID('{AC621F7A-3033-4321-B1E3-C86A8E3E026F}')
    _idlflags_ = ['oleautomation']
IGPExtent._methods_ = [
    COMMETHOD([helpstring(u'Sets the type and values of extent.')], HRESULT, 'SetExtent',
              ( ['in'], esriGPExtentEnum, 'envType' ),
              ( ['in', 'optional'], POINTER(VARIANT), 'extentProvider' ),
              ( ['in', 'optional'], POINTER(VARIANT), 'snapRasterData' )),
    COMMETHOD([helpstring(u'Gets the type and values of extent.')], HRESULT, 'GetExtent',
              ( ['out'], POINTER(esriGPExtentEnum), 'envType' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'Extent' )),
]
################################################################
## code template for IGPExtent implementation
##class IGPExtent_Impl(object):
##    def SetExtent(self, envType, extentProvider, snapRasterData):
##        u'Sets the type and values of extent.'
##        #return 
##
##    def GetExtent(self):
##        u'Gets the type and values of extent.'
##        #return envType, Extent
##

IGPFeatureRecordSet._methods_ = [
    COMMETHOD(['propget', helpstring(u'The shape field name.')], HRESULT, 'ShapeFieldName',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'The shape field name.')], HRESULT, 'ShapeFieldName',
              ( ['in'], BSTR, 'Name' )),
]
################################################################
## code template for IGPFeatureRecordSet implementation
##class IGPFeatureRecordSet_Impl(object):
##    def _get(self):
##        u'The shape field name.'
##        #return Name
##    def _set(self, Name):
##        u'The shape field name.'
##    ShapeFieldName = property(_get, _set, doc = _set.__doc__)
##

class GPTerrainLayerType(CoClass):
    u'Geoprocessing Terrain Layer Data Type.'
    _reg_clsid_ = GUID('{CBD7604F-3625-4511-ACB0-6912690DFEE1}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPTerrainLayerType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPTerrainLayerType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDEGeoDatasetType, comtypes.gen._1CE6AC65_43F5_4529_8FC0_D7ED298E4F1A_0_10_2.IGPLayerType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGxFilterInfo, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class IGPEnvelopeType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of the geoprocessing envelope data type.'
    _iid_ = GUID('{FAF326B9-859C-4E21-9005-4A0018974E94}')
    _idlflags_ = ['oleautomation']
IGPEnvelopeType._methods_ = [
]
################################################################
## code template for IGPEnvelopeType implementation
##class IGPEnvelopeType_Impl(object):

class IGPLayersAndTablesDomain(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the GpLayers and Tables domain.'
    _iid_ = GUID('{A875E6F9-613D-4E85-9F7A-6B9422F5B062}')
    _idlflags_ = ['oleautomation']
IGPLayersAndTablesDomain._methods_ = [
    COMMETHOD(['propput', helpstring(u'Indicates whether or not to hide layers on disk.')], HRESULT, 'HideDELayer',
              ( ['in'], VARIANT_BOOL, 'hide' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether or not to hide layers on disk.')], HRESULT, 'HideDELayer',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'hide' )),
]
################################################################
## code template for IGPLayersAndTablesDomain implementation
##class IGPLayersAndTablesDomain_Impl(object):
##    def _get(self):
##        u'Indicates whether or not to hide layers on disk.'
##        #return hide
##    def _set(self, hide):
##        u'Indicates whether or not to hide layers on disk.'
##    HideDELayer = property(_get, _set, doc = _set.__doc__)
##

class GPRasterFormulatedType(CoClass):
    u'Geoprocessor GP RasterFormulated object Type.'
    _reg_clsid_ = GUID('{3F0B0C21-F0E9-48F0-BE22-72A4A405BF8A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPRasterFormulatedType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to IGPRasterFormulatedType interface.'
    _iid_ = GUID('{BF871DE9-C102-42E7-AFFF-4C84E47BFAAA}')
    _idlflags_ = ['oleautomation']
GPRasterFormulatedType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPRasterFormulatedType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDEGeoDatasetType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class GPUpdateMapServerCacheScales(CoClass):
    u'Update Map Server Cache Tiling Scales.'
    _reg_clsid_ = GUID('{C876A3E1-10ED-4840-833F-74450246E240}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPUpdateMapServerCacheScales._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPFunction]

IGPFunction2._methods_ = [
    COMMETHOD([helpstring(u'Pre validates the given set of values.')], HRESULT, 'UpdateParameters',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'paramvalues' ),
              ( ['in'], POINTER(IGPEnvironmentManager), 'pEnvMgr' )),
    COMMETHOD([helpstring(u'Post validates the given set of values.')], HRESULT, 'UpdateMessages',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'paramvalues' ),
              ( ['in'], POINTER(IGPEnvironmentManager), 'pEnvMgr' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPMessages), 'Messages' )),
]
################################################################
## code template for IGPFunction2 implementation
##class IGPFunction2_Impl(object):
##    def UpdateMessages(self, paramvalues, pEnvMgr, Messages):
##        u'Post validates the given set of values.'
##        #return 
##
##    def UpdateParameters(self, paramvalues, pEnvMgr):
##        u'Pre validates the given set of values.'
##        #return 
##

class GPArealUnitType(CoClass):
    u'Geoprocessing Areal Unit Data Type.'
    _reg_clsid_ = GUID('{9D28E204-B2AE-4576-B06B-91938B49732E}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPArealUnitType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, IGPArealUnitType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

IGPFeatureSolutions._methods_ = [
    COMMETHOD([], HRESULT, 'FindDangles',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClass), 'pInputFC' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ISelectionSet), 'pInputSS' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'pOtherFCs' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'pOtherSSs' ),
              ( ['in'], c_double, 'distance' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' ),
              ( ['out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'ppResults' )),
    COMMETHOD([], HRESULT, 'FindPseudos',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClass), 'pInputFC' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ISelectionSet), 'pInputSS' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'pInputFields' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' ),
              ( ['out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'ppResults' )),
    COMMETHOD([], HRESULT, 'FindOrphans',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClass), 'pInputFC' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ISelectionSet), 'pInputSS' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'pOtherFCs' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'pOtherSSs' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' ),
              ( ['out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'ppResults' )),
]
################################################################
## code template for IGPFeatureSolutions implementation
##class IGPFeatureSolutions_Impl(object):
##    def FindDangles(self, pInputFC, pInputSS, pOtherFCs, pOtherSSs, distance, pTrackCancel):
##        '-no docstring-'
##        #return ppResults
##
##    def FindPseudos(self, pInputFC, pInputSS, pInputFields, pTrackCancel):
##        '-no docstring-'
##        #return ppResults
##
##    def FindOrphans(self, pInputFC, pInputSS, pOtherFCs, pOtherSSs, pTrackCancel):
##        '-no docstring-'
##        #return ppResults
##

IGPFunctionName._methods_ = [
    COMMETHOD(['propget', helpstring(u'The minimum product required to use the function associated with this name object.')], HRESULT, 'MinimumProduct',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriProductCode), 'product' )),
    COMMETHOD(['propput', helpstring(u'The minimum product required to use the function associated with this name object.')], HRESULT, 'MinimumProduct',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriProductCode, 'product' )),
    COMMETHOD(['propget', helpstring(u'The extension, if any, required to use the function associated with this name object.')], HRESULT, 'RequiredExtension',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriLicenseExtensionCode), 'extension' )),
    COMMETHOD(['propput', helpstring(u'The extension, if any, required to use the function associated with this name object.')], HRESULT, 'RequiredExtension',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriLicenseExtensionCode, 'extension' )),
    COMMETHOD(['propget', helpstring(u'Name of the (CHM) file containing help information for this function associated with this name object.')], HRESULT, 'HelpFile',
              ( ['retval', 'out'], POINTER(BSTR), 'File' )),
    COMMETHOD(['propput', helpstring(u'Name of the (CHM) file containing help information for this function associated with this name object.')], HRESULT, 'HelpFile',
              ( ['in'], BSTR, 'File' )),
    COMMETHOD(['propget', helpstring(u'The context identifier of the topic within the help file for this function associated with this name object.')], HRESULT, 'HelpContext',
              ( ['retval', 'out'], POINTER(c_int), 'context' )),
    COMMETHOD(['propput', helpstring(u'The context identifier of the topic within the help file for this function associated with this name object.')], HRESULT, 'HelpContext',
              ( ['in'], c_int, 'context' )),
]
################################################################
## code template for IGPFunctionName implementation
##class IGPFunctionName_Impl(object):
##    def _get(self):
##        u'The extension, if any, required to use the function associated with this name object.'
##        #return extension
##    def _set(self, extension):
##        u'The extension, if any, required to use the function associated with this name object.'
##    RequiredExtension = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The context identifier of the topic within the help file for this function associated with this name object.'
##        #return context
##    def _set(self, context):
##        u'The context identifier of the topic within the help file for this function associated with this name object.'
##    HelpContext = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Name of the (CHM) file containing help information for this function associated with this name object.'
##        #return File
##    def _set(self, File):
##        u'Name of the (CHM) file containing help information for this function associated with this name object.'
##    HelpFile = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The minimum product required to use the function associated with this name object.'
##        #return product
##    def _set(self, product):
##        u'The minimum product required to use the function associated with this name object.'
##    MinimumProduct = property(_get, _set, doc = _set.__doc__)
##

IGPDouble._methods_ = [
    COMMETHOD(['propget', helpstring(u'The value of the geoprocessing value object as a double.')], HRESULT, 'Value',
              ( ['retval', 'out'], POINTER(c_double), 'Value' )),
    COMMETHOD(['propput', helpstring(u'The value of the geoprocessing value object as a double.')], HRESULT, 'Value',
              ( ['in'], c_double, 'Value' )),
]
################################################################
## code template for IGPDouble implementation
##class IGPDouble_Impl(object):
##    def _get(self):
##        u'The value of the geoprocessing value object as a double.'
##        #return Value
##    def _set(self, Value):
##        u'The value of the geoprocessing value object as a double.'
##    Value = property(_get, _set, doc = _set.__doc__)
##

IGPDate._methods_ = [
    COMMETHOD(['propget', helpstring(u'The value of the geoprocessing value object as a date.')], HRESULT, 'Value',
              ( ['retval', 'out'], POINTER(VARIANT), 'Value' )),
    COMMETHOD(['propput', helpstring(u'The value of the geoprocessing value object as a date.')], HRESULT, 'Value',
              ( ['in'], VARIANT, 'Value' )),
]
################################################################
## code template for IGPDate implementation
##class IGPDate_Impl(object):
##    def _get(self):
##        u'The value of the geoprocessing value object as a date.'
##        #return Value
##    def _set(self, Value):
##        u'The value of the geoprocessing value object as a date.'
##    Value = property(_get, _set, doc = _set.__doc__)
##

IGPValues._methods_ = [
    COMMETHOD(['propget', helpstring(u'The size of the array.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propget', helpstring(u'The value at the specified index in the array.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue)), 'ppGPValue' )),
    COMMETHOD([helpstring(u'Adds a value to the array.')], HRESULT, 'Add',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'pGPValue' )),
    COMMETHOD([helpstring(u'Adds a value to the array at the specified index.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'pGPValue' )),
    COMMETHOD([helpstring(u'Removes a value from the array.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all values from the array.')], HRESULT, 'RemoveAll'),
]
################################################################
## code template for IGPValues implementation
##class IGPValues_Impl(object):
##    @property
##    def Count(self):
##        u'The size of the array.'
##        #return pCount
##
##    def Insert(self, Index, pGPValue):
##        u'Adds a value to the array at the specified index.'
##        #return 
##
##    def Remove(self, Index):
##        u'Removes a value from the array.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'The value at the specified index in the array.'
##        #return ppGPValue
##
##    def RemoveAll(self):
##        u'Removes all values from the array.'
##        #return 
##
##    def Add(self, pGPValue):
##        u'Adds a value to the array.'
##        #return 
##

class GPServer(CoClass):
    u'GP Server Class.'
    _reg_clsid_ = GUID('{E3D37962-5BDF-424A-8B2D-DD31C540CE26}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPServer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPServer, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IObjectConstruct, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IRequestHandler, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IRequestHandler2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IObjectActivate, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILogSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, comtypes.gen._18F2FC71_6B30_45B9_B101_037A8B868B66_0_10_2.IServerObject, comtypes.gen._18F2FC71_6B30_45B9_B101_037A8B868B66_0_10_2.IServerObjectExtensionManager, IGPServer2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IRESTRequestHandler]

class GPTerrainLayer(CoClass):
    u'Geoprocessing value object containing a terrain layer value.'
    _reg_clsid_ = GUID('{ADEFCF2A-9695-4422-82FC-906F44FC49F6}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPTerrainLayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPTerrainLayer, comtypes.gen._1CE6AC65_43F5_4529_8FC0_D7ED298E4F1A_0_10_2.IGPLayer, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDEGeoDataset, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDescribe, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

class GPServerConfigurationFactory(CoClass):
    u'GP Server Configuration Factory Class.'
    _reg_clsid_ = GUID('{2367266A-53D4-4C91-B752-4A16845D4308}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPServerConfigurationFactory._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._18F2FC71_6B30_45B9_B101_037A8B868B66_0_10_2.IConfigurationFactory, comtypes.gen._18F2FC71_6B30_45B9_B101_037A8B868B66_0_10_2.IConfigurationFactory3]

IGPCreateTiles._methods_ = [
    COMMETHOD([helpstring(u'Creates a set of tiles based upon the array of input datasets.')], HRESULT, 'CreateTiles',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'pInputs' )),
    COMMETHOD([helpstring(u'Creates a set of tiles based upon the array of input datasets increased by a given percentage.')], HRESULT, 'CreateTilesByPercentage',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'pInputs' ),
              ( ['in'], c_double, 'ratio' )),
    COMMETHOD([helpstring(u'Resets the enumeration of tiles.')], HRESULT, 'Reset'),
    COMMETHOD([helpstring(u'Returns the next tile.')], HRESULT, 'GetNextTile',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'ppTileEnv' )),
]
################################################################
## code template for IGPCreateTiles implementation
##class IGPCreateTiles_Impl(object):
##    def CreateTiles(self, pInputs):
##        u'Creates a set of tiles based upon the array of input datasets.'
##        #return 
##
##    def Reset(self):
##        u'Resets the enumeration of tiles.'
##        #return 
##
##    def GetNextTile(self):
##        u'Returns the next tile.'
##        #return ppTileEnv
##
##    def CreateTilesByPercentage(self, pInputs, ratio):
##        u'Creates a set of tiles based upon the array of input datasets increased by a given percentage.'
##        #return 
##

class IGPINFOExpressionType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing INFO expression data type object.'
    _iid_ = GUID('{F7E53E0F-EE61-43E0-9C6C-F2AC4F170A40}')
    _idlflags_ = ['oleautomation']
IGPINFOExpressionType._methods_ = [
]
################################################################
## code template for IGPINFOExpressionType implementation
##class IGPINFOExpressionType_Impl(object):

class GPServerSync(CoClass):
    u'GP ServerSync Class.'
    _reg_clsid_ = GUID('{A6DA33B7-4804-4116-B54D-A72D77DD4081}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPServerSync._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPServerSync, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IObjectConstruct, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IRequestHandler, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IRequestHandler2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IObjectActivate, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILogSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, comtypes.gen._18F2FC71_6B30_45B9_B101_037A8B868B66_0_10_2.IServerObject, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IRESTRequestHandler]

class GPValueTableType(CoClass):
    u'Geoprocessing Value Table Data Type.'
    _reg_clsid_ = GUID('{50E9D14F-745A-490A-BFE3-F79A19AA3E22}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPValueTableType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of the value table data type.'
    _iid_ = GUID('{2FA954BA-3399-4C5F-9202-9EE91C54B764}')
    _idlflags_ = ['oleautomation']
GPValueTableType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, IGPValueTableType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

IGPValueTable._methods_ = [
    COMMETHOD(['propget', helpstring(u'The number of data types/columns of the value table.')], HRESULT, 'DataTypeCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The data type object of the given column index.')], HRESULT, 'DataType',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType)), 'ppDataType' )),
    COMMETHOD([helpstring(u'Adds the data type as a column to the value table.')], HRESULT, 'AddDataType',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType), 'pDataType' )),
    COMMETHOD([helpstring(u'Removes the given column from the value table.')], HRESULT, 'RemoveDataType',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD(['propget', helpstring(u'The number of rows in the value table.')], HRESULT, 'RecordCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD([helpstring(u'Returns the value of the given row/column.')], HRESULT, 'GetValue',
              ( ['in'], c_int, 'row' ),
              ( ['in'], c_int, 'col' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue)), 'ppValue' )),
    COMMETHOD([helpstring(u'Sets the vlaue of the given row/column.')], HRESULT, 'SetValue',
              ( ['in'], c_int, 'row' ),
              ( ['in'], c_int, 'col' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'ppValue' )),
    COMMETHOD([helpstring(u'Adds a record to the value table.')], HRESULT, 'AddRecord',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'pValues' )),
    COMMETHOD([helpstring(u'Inserts a record in the value table at the specified index.')], HRESULT, 'InsertRecord',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'pValues' )),
    COMMETHOD([helpstring(u'Replaces the record in the value table at the specified index.')], HRESULT, 'ReplaceRecord',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'pValues' )),
    COMMETHOD([helpstring(u'Removes the specified record from the value table.')], HRESULT, 'RemoveRecord',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Returns the array of values of the specified record in the value table.')], HRESULT, 'GetRecord',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'ppValues' )),
    COMMETHOD([helpstring(u'Removes the given value from the value table.')], HRESULT, 'RemoveValue',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'pValue' )),
]
################################################################
## code template for IGPValueTable implementation
##class IGPValueTable_Impl(object):
##    def ReplaceRecord(self, Index, pValues):
##        u'Replaces the record in the value table at the specified index.'
##        #return 
##
##    def SetValue(self, row, col, ppValue):
##        u'Sets the vlaue of the given row/column.'
##        #return 
##
##    @property
##    def RecordCount(self):
##        u'The number of rows in the value table.'
##        #return Count
##
##    @property
##    def DataTypeCount(self):
##        u'The number of data types/columns of the value table.'
##        #return Count
##
##    def AddDataType(self, pDataType):
##        u'Adds the data type as a column to the value table.'
##        #return 
##
##    def RemoveValue(self, pValue):
##        u'Removes the given value from the value table.'
##        #return 
##
##    def GetValue(self, row, col):
##        u'Returns the value of the given row/column.'
##        #return ppValue
##
##    @property
##    def DataType(self, Index):
##        u'The data type object of the given column index.'
##        #return ppDataType
##
##    def RemoveRecord(self, Index):
##        u'Removes the specified record from the value table.'
##        #return 
##
##    def RemoveDataType(self, Index):
##        u'Removes the given column from the value table.'
##        #return 
##
##    def InsertRecord(self, Index, pValues):
##        u'Inserts a record in the value table at the specified index.'
##        #return 
##
##    def GetRecord(self, Index):
##        u'Returns the array of values of the specified record in the value table.'
##        #return ppValues
##
##    def AddRecord(self, pValues):
##        u'Adds a record to the value table.'
##        #return 
##

class GPEnvelopeType(CoClass):
    u'Geoprocessing Envelope Data Type.'
    _reg_clsid_ = GUID('{537CE430-2F16-4E6B-862E-72304F451499}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPEnvelopeType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, IGPEnvelopeType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class GPRandomNumberGeneratorType(CoClass):
    u'Geoprocessing Random Number Generator Data Type.'
    _reg_clsid_ = GUID('{9639CDBB-49CE-45F7-BFC4-62103D450810}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPRandomNumberGeneratorType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, IGPRandomNumberGeneratorType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

IGPParseString._methods_ = [
    COMMETHOD([helpstring(u'Initializes the geoprocessing parse string object with the string to be parsed and the string used to separate tokens.')], HRESULT, 'Initialize',
              ( ['in'], BSTR, 'String' ),
              ( ['in'], BSTR, 'separator' )),
    COMMETHOD([helpstring(u'Returns the next token parsed from the string.')], HRESULT, 'NextToken',
              ( ['retval', 'out'], POINTER(BSTR), 'token' )),
    COMMETHOD([helpstring(u'Returns the next simple token parsed from the string.')], HRESULT, 'NextSimpleToken',
              ( ['retval', 'out'], POINTER(BSTR), 'token' )),
    COMMETHOD([helpstring(u'Returns whether the next token to be parsed is enclosed in quotation marks.')], HRESULT, 'IsNextTokenQuoted',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'quoted' )),
    COMMETHOD([helpstring(u'Builds a string, one character at a time, returning whether that character is quoted and whether that character is the end of delimited token.')], HRESULT, 'CheckToken',
              ( ['in'], BSTR, 'inChar' ),
              ( ['out'], POINTER(VARIANT_BOOL), 'pInQuote' ),
              ( ['out'], POINTER(VARIANT_BOOL), 'pTokenDone' ),
              ( ['retval', 'out'], POINTER(BSTR), 'pToken' )),
]
################################################################
## code template for IGPParseString implementation
##class IGPParseString_Impl(object):
##    def Initialize(self, String, separator):
##        u'Initializes the geoprocessing parse string object with the string to be parsed and the string used to separate tokens.'
##        #return 
##
##    def NextToken(self):
##        u'Returns the next token parsed from the string.'
##        #return token
##
##    def CheckToken(self, inChar):
##        u'Builds a string, one character at a time, returning whether that character is quoted and whether that character is the end of delimited token.'
##        #return pInQuote, pTokenDone, pToken
##
##    def IsNextTokenQuoted(self):
##        u'Returns whether the next token to be parsed is enclosed in quotation marks.'
##        #return quoted
##
##    def NextSimpleToken(self):
##        u'Returns the next simple token parsed from the string.'
##        #return token
##

class GPLasDatasetLayer(CoClass):
    u'Geoprocessing value object containing a LAS dataset layer value.'
    _reg_clsid_ = GUID('{F83945EE-CB37-4AC7-98EC-F25446A90A5D}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPLasDatasetLayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPLasDatasetLayer, comtypes.gen._1CE6AC65_43F5_4529_8FC0_D7ED298E4F1A_0_10_2.IGPLayer, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDEGeoDataset, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDescribe, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersionSupportGEN]

class GPServerTrackCancel(CoClass):
    u'GP Server Track Cancel Class.'
    _reg_clsid_ = GUID('{F6FAB3C2-2427-4F83-8A20-CAC94B817975}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPServerTrackCancel._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IProgressor, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStepProgressor, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPMessagesCallback, IGPServerTrackCancel, IGPServerTrackCancel2]

IGPFieldInfo._methods_ = [
    COMMETHOD([helpstring(u'Initializes the field info object using the field information from the given table/workspace.')], HRESULT, 'Initialize',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDETable), 'Table' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDEWorkspace), 'Workspace' )),
    COMMETHOD([helpstring(u'Merges the field information from the given table data element into the field info object.')], HRESULT, 'Merge',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDETable), 'Table' )),
    COMMETHOD([helpstring(u'Removes all the fields from the field info object.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Add a field to the field info object.')], HRESULT, 'AddField',
              ( ['in'], c_int, 'fieldIndex' ),
              ( ['in'], BSTR, 'FieldName' ),
              ( ['in'], BSTR, 'newFieldName' ),
              ( ['in'], VARIANT_BOOL, 'Visible' ),
              ( ['in'], esriGPFieldInfoSplitRule, 'split' )),
    COMMETHOD(['propget', helpstring(u'The number of fields in the field info object.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD([helpstring(u'Returns the name of the specified field in the field info object.')], HRESULT, 'GetFieldName',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD([helpstring(u'Returns the field index of the specified field in the field info object.')], HRESULT, 'GetFieldIndex',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(c_int), 'fieldIndex' )),
    COMMETHOD([helpstring(u'Returns whether there is an error with the specified field in the field info object.')], HRESULT, 'GetNamingError',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'error' )),
    COMMETHOD([helpstring(u'Returns the new name of the specified field in the field info object.')], HRESULT, 'GetNewName',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD([helpstring(u'Returns the split rule of the specified field in the field info object.')], HRESULT, 'GetSplitRule',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(esriGPFieldInfoSplitRule), 'split' )),
    COMMETHOD([helpstring(u'Returns the visibility of the specified field in the field info object.')], HRESULT, 'GetVisible',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Visible' )),
    COMMETHOD([helpstring(u'Sets the name of the specified field in the field info object.')], HRESULT, 'SetFieldName',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD([helpstring(u'Sets the name of the specified field in the field info object.')], HRESULT, 'SetFieldIndex',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'fieldIndex' )),
    COMMETHOD([helpstring(u'Sets whether there is an error with the specified field in the field info object.')], HRESULT, 'SetNamingError',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], VARIANT_BOOL, 'error' )),
    COMMETHOD([helpstring(u'Sets the new name of the specified field in the field info object.')], HRESULT, 'SetNewName',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD([helpstring(u'Sets the split rule of the specified field in the field info object.')], HRESULT, 'SetSplitRule',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], esriGPFieldInfoSplitRule, 'split' )),
    COMMETHOD([helpstring(u'Sets the visibility of the specified field in the field info object.')], HRESULT, 'SetVisible',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], VARIANT_BOOL, 'Visible' )),
    COMMETHOD([helpstring(u'Removes the given field from the field info object.')], HRESULT, 'RemoveField',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Returns the index of the field in the field info object matching given the field name.')], HRESULT, 'FindFieldByName',
              ( ['in'], BSTR, 'FieldName' ),
              ( ['retval', 'out'], POINTER(c_int), 'Index' )),
    COMMETHOD([helpstring(u'Returns the index of the field in the field info object matching given the field new name.')], HRESULT, 'FindFieldByNewName',
              ( ['in'], BSTR, 'FieldName' ),
              ( ['retval', 'out'], POINTER(c_int), 'Index' )),
    COMMETHOD([helpstring(u'Returns the index of the field in the field info object matching given the field index.')], HRESULT, 'FindFieldByIndex',
              ( ['in'], c_int, 'fieldIndex' ),
              ( ['retval', 'out'], POINTER(c_int), 'Index' )),
]
################################################################
## code template for IGPFieldInfo implementation
##class IGPFieldInfo_Impl(object):
##    @property
##    def Count(self):
##        u'The number of fields in the field info object.'
##        #return Count
##
##    def GetNewName(self, Index):
##        u'Returns the new name of the specified field in the field info object.'
##        #return Name
##
##    def FindFieldByNewName(self, FieldName):
##        u'Returns the index of the field in the field info object matching given the field new name.'
##        #return Index
##
##    def SetNewName(self, Index, Name):
##        u'Sets the new name of the specified field in the field info object.'
##        #return 
##
##    def AddField(self, fieldIndex, FieldName, newFieldName, Visible, split):
##        u'Add a field to the field info object.'
##        #return 
##
##    def SetNamingError(self, Index, error):
##        u'Sets whether there is an error with the specified field in the field info object.'
##        #return 
##
##    def GetFieldIndex(self, Index):
##        u'Returns the field index of the specified field in the field info object.'
##        #return fieldIndex
##
##    def FindFieldByName(self, FieldName):
##        u'Returns the index of the field in the field info object matching given the field name.'
##        #return Index
##
##    def RemoveField(self, Index):
##        u'Removes the given field from the field info object.'
##        #return 
##
##    def FindFieldByIndex(self, fieldIndex):
##        u'Returns the index of the field in the field info object matching given the field index.'
##        #return Index
##
##    def GetFieldName(self, Index):
##        u'Returns the name of the specified field in the field info object.'
##        #return Name
##
##    def SetFieldName(self, Index, Name):
##        u'Sets the name of the specified field in the field info object.'
##        #return 
##
##    def RemoveAll(self):
##        u'Removes all the fields from the field info object.'
##        #return 
##
##    def Merge(self, Table):
##        u'Merges the field information from the given table data element into the field info object.'
##        #return 
##
##    def GetSplitRule(self, Index):
##        u'Returns the split rule of the specified field in the field info object.'
##        #return split
##
##    def SetFieldIndex(self, Index, fieldIndex):
##        u'Sets the name of the specified field in the field info object.'
##        #return 
##
##    def SetSplitRule(self, Index, split):
##        u'Sets the split rule of the specified field in the field info object.'
##        #return 
##
##    def Initialize(self, Table, Workspace):
##        u'Initializes the field info object using the field information from the given table/workspace.'
##        #return 
##
##    def GetNamingError(self, Index):
##        u'Returns whether there is an error with the specified field in the field info object.'
##        #return error
##
##    def SetVisible(self, Index, Visible):
##        u'Sets the visibility of the specified field in the field info object.'
##        #return 
##
##    def GetVisible(self, Index):
##        u'Returns the visibility of the specified field in the field info object.'
##        #return Visible
##

IGPCustomToolHelper._methods_ = [
    COMMETHOD(['propget', helpstring(u'The custom tool object associated with the helper object.')], HRESULT, 'CustomTool',
              ( ['retval', 'out'], POINTER(POINTER(IGPCustomTool)), 'Tool' )),
]
################################################################
## code template for IGPCustomToolHelper implementation
##class IGPCustomToolHelper_Impl(object):
##    @property
##    def CustomTool(self):
##        u'The custom tool object associated with the helper object.'
##        #return Tool
##

IGeoProcessorEvents._methods_ = [
    COMMETHOD([helpstring(u'Called when a message has been posted while executing a tool.')], HRESULT, 'OnMessageAdded',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPMessage), 'message' )),
    COMMETHOD([helpstring(u'Called immediately prior to the GeoProcessor executing a tool.')], HRESULT, 'PreToolExecute',
              ( ['in'], POINTER(IGPTool), 'Tool' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'Values' ),
              ( ['in'], c_int, 'processID' )),
    COMMETHOD([helpstring(u'Called immediately after a tool is executed by the GeoProcessor.')], HRESULT, 'PostToolExecute',
              ( ['in'], POINTER(IGPTool), 'Tool' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'Values' ),
              ( ['in'], HRESULT, 'result' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPMessages), 'Messages' )),
    COMMETHOD([helpstring(u'Called when a toolbox is added or removed from the GeoProcessor.')], HRESULT, 'ToolboxChange'),
]
################################################################
## code template for IGeoProcessorEvents implementation
##class IGeoProcessorEvents_Impl(object):
##    def OnMessageAdded(self, message):
##        u'Called when a message has been posted while executing a tool.'
##        #return 
##
##    def ToolboxChange(self):
##        u'Called when a toolbox is added or removed from the GeoProcessor.'
##        #return 
##
##    def PreToolExecute(self, Tool, Values, processID):
##        u'Called immediately prior to the GeoProcessor executing a tool.'
##        #return 
##
##    def PostToolExecute(self, Tool, Values, result, Messages):
##        u'Called immediately after a tool is executed by the GeoProcessor.'
##        #return 
##

class IGeoProcessorEvents2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to GeoProcessor events2.'
    _iid_ = GUID('{9FE51CC2-BDFE-4F72-B4CB-6DC4E5D9C94D}')
    _idlflags_ = ['oleautomation']
IGeoProcessorEvents2._methods_ = [
    COMMETHOD([helpstring(u'Called when a message has been posted while executing a tool.')], HRESULT, 'OnMessageAdded',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPMessage), 'message' )),
    COMMETHOD([helpstring(u'Called immediately prior to the GeoProcessor executing a tool.')], HRESULT, 'PreToolExecute',
              ( ['in'], POINTER(IMdProcess), 'Process' )),
    COMMETHOD([helpstring(u'Called immediately after a tool is executed by the GeoProcessor.')], HRESULT, 'PostToolExecute',
              ( ['in'], HRESULT, 'result' ),
              ( ['in'], POINTER(IMdProcess), 'Process' )),
    COMMETHOD([helpstring(u'Called when a toolbox is added or removed from the GeoProcessor.')], HRESULT, 'ToolboxChange'),
]
################################################################
## code template for IGeoProcessorEvents2 implementation
##class IGeoProcessorEvents2_Impl(object):
##    def OnMessageAdded(self, message):
##        u'Called when a message has been posted while executing a tool.'
##        #return 
##
##    def ToolboxChange(self):
##        u'Called when a toolbox is added or removed from the GeoProcessor.'
##        #return 
##
##    def PreToolExecute(self, Process):
##        u'Called immediately prior to the GeoProcessor executing a tool.'
##        #return 
##
##    def PostToolExecute(self, result, Process):
##        u'Called immediately after a tool is executed by the GeoProcessor.'
##        #return 
##

IGPRasterCatalogLayerType._methods_ = [
]
################################################################
## code template for IGPRasterCatalogLayerType implementation
##class IGPRasterCatalogLayerType_Impl(object):

class GPServerCachingDeleteMapCache(CoClass):
    u'Delete pre-rendered tile cache for the MapServer.'
    _reg_clsid_ = GUID('{24620C31-DAB4-403D-8D1B-6B582D938C4A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPServerCachingDeleteMapCache._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPFunction]

IGPRasterFormulatedType._methods_ = [
]
################################################################
## code template for IGPRasterFormulatedType implementation
##class IGPRasterFormulatedType_Impl(object):

class IGPAnalysisCellSizeType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of the geoprocessing analysis cellsize data type.'
    _iid_ = GUID('{9C1CC19E-910A-49BF-B74B-38896D343B0D}')
    _idlflags_ = ['oleautomation']
IGPAnalysisCellSizeType._methods_ = [
    COMMETHOD(['propget', helpstring(u'The current GPSAGeoDataDomain.')], HRESULT, 'Domain',
              ( ['retval', 'out'], POINTER(POINTER(IGPSAGeoDataDomain)), 'ppDomain' )),
    COMMETHOD(['propputref', helpstring(u'The current GPSAGeoDataDomain.')], HRESULT, 'Domain',
              ( ['in'], POINTER(IGPSAGeoDataDomain), 'ppDomain' )),
]
################################################################
## code template for IGPAnalysisCellSizeType implementation
##class IGPAnalysisCellSizeType_Impl(object):
##    def Domain(self, ppDomain):
##        u'The current GPSAGeoDataDomain.'
##        #return 
##

class IGPRAFieldDomain(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to IGPRAFieldDomain interface.'
    _iid_ = GUID('{2F135584-7063-4772-9F1C-144461876D2A}')
    _idlflags_ = ['oleautomation']
IGPRAFieldDomain._methods_ = [
    COMMETHOD(['propputref', helpstring(u'Dependent value object.')], HRESULT, 'DependValue',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'rhs' )),
]
################################################################
## code template for IGPRAFieldDomain implementation
##class IGPRAFieldDomain_Impl(object):
##    def DependValue(self, rhs):
##        u'Dependent value object.'
##        #return 
##

IGPGroupLayerType._methods_ = [
]
################################################################
## code template for IGPGroupLayerType implementation
##class IGPGroupLayerType_Impl(object):

IProcessLayer._methods_ = [
    COMMETHOD(['propputref', helpstring(u'Sets the process.')], HRESULT, 'Process',
              ( ['in'], POINTER(IMdProcess), 'ppProcess' )),
    COMMETHOD(['propget', helpstring(u'Sets the process.')], HRESULT, 'Process',
              ( ['retval', 'out'], POINTER(POINTER(IMdProcess)), 'ppProcess' )),
    COMMETHOD([helpstring(u'Refresh layers.')], HRESULT, 'RefreshLayers',
              ( [], POINTER(comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.IActiveView), 'pActiveView' ),
              ( [], VARIANT_BOOL, 'bConnect' ),
              ( [], POINTER(VARIANT_BOOL), 'pContentsChanged' )),
]
################################################################
## code template for IProcessLayer implementation
##class IProcessLayer_Impl(object):
##    @property
##    def Process(self, ppProcess):
##        u'Sets the process.'
##        #return 
##
##    def RefreshLayers(self, pActiveView, bConnect, pContentsChanged):
##        u'Refresh layers.'
##        #return 
##

IGPFeatureSolutionsResult._methods_ = [
    COMMETHOD(['propputref', helpstring(u'Sets the point.')], HRESULT, 'Point',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'Point' )),
    COMMETHOD(['propget', helpstring(u'Sets the point.')], HRESULT, 'Point',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint)), 'Point' )),
    COMMETHOD(['propput', helpstring(u'Sets the first OID.')], HRESULT, 'FirstOID',
              ( ['in'], c_int, 'FirstOID' )),
    COMMETHOD(['propget', helpstring(u'Sets the first OID.')], HRESULT, 'FirstOID',
              ( ['retval', 'out'], POINTER(c_int), 'FirstOID' )),
    COMMETHOD(['propput', helpstring(u'Sets the second OID.')], HRESULT, 'SecondOID',
              ( ['in'], c_int, 'SecondOID' )),
    COMMETHOD(['propget', helpstring(u'Sets the second OID.')], HRESULT, 'SecondOID',
              ( ['retval', 'out'], POINTER(c_int), 'SecondOID' )),
]
################################################################
## code template for IGPFeatureSolutionsResult implementation
##class IGPFeatureSolutionsResult_Impl(object):
##    def _get(self):
##        u'Sets the first OID.'
##        #return FirstOID
##    def _set(self, FirstOID):
##        u'Sets the first OID.'
##    FirstOID = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Sets the second OID.'
##        #return SecondOID
##    def _set(self, SecondOID):
##        u'Sets the second OID.'
##    SecondOID = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Point(self, Point):
##        u'Sets the point.'
##        #return 
##

class IGPSpatialReferenceType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing spatial reference data type object.'
    _iid_ = GUID('{09E0ACF5-0DB8-4744-9B9F-6FC383426F71}')
    _idlflags_ = ['oleautomation']
IGPSpatialReferenceType._methods_ = [
]
################################################################
## code template for IGPSpatialReferenceType implementation
##class IGPSpatialReferenceType_Impl(object):

class GPRAFieldDomain(CoClass):
    u"GP Raster Field Domain - Additional handling of shapefile's integer fields."
    _reg_clsid_ = GUID('{4B6CA858-5716-4AC3-A2EE-70EE2D29C1BD}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPRAFieldDomain._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDomain, IGPFieldDomain, IGPFieldDomain2, IGPRAFieldDomain]

IGPUtilities._methods_ = [
    COMMETHOD([helpstring(u'Performs a validation of the parameters to a GPTool.')], HRESULT, 'InternalValidate',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'pParameters' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'pParamValues' ),
              ( ['in'], VARIANT_BOOL, 'updateValues' ),
              ( ['in'], VARIANT_BOOL, 'honorDerivedFlag' ),
              ( ['in'], POINTER(IGPEnvironmentManager), 'pEnvMgr' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPMessages)), 'ppMessages' )),
    COMMETHOD([helpstring(u'Performs a validation of the a single parameter to a GPTool.')], HRESULT, 'InternalValidateValue',
              ( ['in'], POINTER(IGPParameter), 'pParameter' ),
              ( ['in'], POINTER(IUnknown), 'pValue' ),
              ( ['in'], VARIANT_BOOL, 'updateValue' ),
              ( ['in'], VARIANT_BOOL, 'honorDerivedFlag' ),
              ( ['in'], POINTER(IGPEnvironmentManager), 'pEnvMgr' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPMessage), 'pMessage' )),
    COMMETHOD([helpstring(u'Tests if a given message within an array of messages is bad.')], HRESULT, 'IsBadMessage',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPMessages), 'pMessages' ),
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pBadMsg' )),
    COMMETHOD([helpstring(u'Generates the default output value and sets its path to an unique name.')], HRESULT, 'GenerateDefaultOutputValue',
              ( ['in'], POINTER(IGPEnvironmentManager), 'pEnvMgr' ),
              ( ['in'], BSTR, 'functionname' ),
              ( ['in'], POINTER(IGPParameter), 'pOutputParam' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'pInputValue' ),
              ( ['in'], BSTR, 'extension' ),
              ( ['in'], c_int, 'outputFileBaseLimit' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue)), 'ppOutputValue' )),
    COMMETHOD([helpstring(u'Qualify the catalog path of the given value with the GDBs database and user names.')], HRESULT, 'QualifyOutputDataElement',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'pValue' )),
    COMMETHOD([helpstring(u'Qualify the catalog path with the GDBs database and user names.')], HRESULT, 'QualifyOutputCatalogPath',
              ( ['in'], BSTR, 'catalogPath' ),
              ( ['retval', 'out'], POINTER(BSTR), 'pQualifiedCatalogPath' )),
    COMMETHOD([helpstring(u'Returns the unqualified path by striping the GDBs database and user names.')], HRESULT, 'GetUnQualifiedCatalogPath',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'pValue' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Path' )),
    COMMETHOD(['propput', helpstring(u'Sets the path to the current workspace.')], HRESULT, 'Workspace',
              ( ['in'], BSTR, 'workPath' )),
    COMMETHOD(['propget', helpstring(u'Sets the path to the current workspace.')], HRESULT, 'Workspace',
              ( ['retval', 'out'], POINTER(BSTR), 'workPath' )),
    COMMETHOD(['propget', helpstring(u'Returns the catalog object shared between geoprocessing operations.')], HRESULT, 'Catalog',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'Catalog' )),
    COMMETHOD(['propget', helpstring(u'Returns whether catalog objects, used by the shared catalog object, are refreshed during geoprocessing operations.')], HRESULT, 'RefreshCatalogParent',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pRefresh' )),
    COMMETHOD(['propput', helpstring(u'Returns whether catalog objects, used by the shared catalog object, are refreshed during geoprocessing operations.')], HRESULT, 'RefreshCatalogParent',
              ( ['in'], VARIANT_BOOL, 'pRefresh' )),
    COMMETHOD([helpstring(u'Returns a data element object from the catalog object specified by the given path, data type, and expand options.')], HRESULT, 'MakeDataElement',
              ( ['in'], BSTR, 'catalogPath' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType), 'pDataType' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDEBrowseOptions), 'pExpandOptions' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataElement)), 'DataElement' )),
    COMMETHOD([helpstring(u'Creates a new data element object from the given name object.')], HRESULT, 'MakeDataElementFromNameObject',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName), 'Name' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataElement)), 'DataElement' )),
    COMMETHOD([helpstring(u'Expands the properties of the given data element according to the given expand options.')], HRESULT, 'ExpandDataElement',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataElement), 'pInDE' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDEBrowseOptions), 'pExpandOptions' )),
    COMMETHOD([helpstring(u'Creates a new data element object from the catalog object specified by the given path, data type, and optional workspace.')], HRESULT, 'CreateDataElement',
              ( ['in'], BSTR, 'catalogPath' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType), 'pDataType' ),
              ( ['in'], BSTR, 'optionalWorkspace' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataElement)), 'DataElement' )),
    COMMETHOD([helpstring(u'Creates a geoprocessing feature layer object from the catalog path.')], HRESULT, 'CreateFeatureLayer',
              ( ['in'], BSTR, 'catalogPath' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue)), 'Value' )),
    COMMETHOD([helpstring(u'Opens a raster dataset object from the given catalog path.')], HRESULT, 'OpenRasterDatasetFromString',
              ( ['in'], BSTR, 'catalogPath' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterDataset)), 'ppRD' )),
    COMMETHOD([helpstring(u'Opens a feature class from the given catalog path.')], HRESULT, 'OpenFeatureClassFromString',
              ( ['in'], BSTR, 'catalogPath' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClass)), 'ppFC' )),
    COMMETHOD([helpstring(u'Opens a table from the given catalog path.')], HRESULT, 'OpenTableFromString',
              ( ['in'], BSTR, 'catalogPath' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable)), 'ppTable' )),
    COMMETHOD([helpstring(u'Opens a raster layer object from the given catalog path.')], HRESULT, 'OpenRasterLayerFromString',
              ( ['in'], BSTR, 'catalogPath' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.IRasterLayer)), 'ppRL' )),
    COMMETHOD([helpstring(u'Opens a feature layer from the given catalog path.')], HRESULT, 'OpenFeatureLayerFromString',
              ( ['in'], BSTR, 'catalogPath' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.IFeatureLayer)), 'ppFL' )),
    COMMETHOD([helpstring(u'Creates a feature class name object from the given catalog path.')], HRESULT, 'CreateFeatureClassName',
              ( ['in'], BSTR, 'catalogPath' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName)), 'ppName' )),
    COMMETHOD([helpstring(u'Creates a raster dataset name object from the given catalog path.')], HRESULT, 'CreateRasterDatasetName',
              ( ['in'], BSTR, 'catalogPath' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName)), 'ppName' )),
    COMMETHOD([helpstring(u'Creates a raster catalog name object from the given catalog path.')], HRESULT, 'CreateRasterCatalogName',
              ( ['in'], BSTR, 'catalogPath' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName)), 'ppName' )),
    COMMETHOD([helpstring(u'Creates a table name object from the given catalog path.')], HRESULT, 'CreateTableName',
              ( ['in'], BSTR, 'catalogPath' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName)), 'ppName' )),
    COMMETHOD([helpstring(u'Opens the dataset object specified by the given geoprocessing value object.')], HRESULT, 'OpenDataset',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'pValue' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataset)), 'ppDataset' )),
    COMMETHOD([helpstring(u'Opens the dataset object from the given catalog path.')], HRESULT, 'OpenDatasetFromLocation',
              ( ['in'], BSTR, 'catalogPath' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataset)), 'ppDataset' )),
    COMMETHOD([helpstring(u'Adds the given geoprocessing value object to the application display.')], HRESULT, 'AddToMap',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'pGPValue' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'temporary' ),
              ( ['in'], POINTER(IUnknown), 'pUnkRenderer' )),
    COMMETHOD([helpstring(u'Refreshes the parent within the catalog of the given data element.')], HRESULT, 'RefreshCatalog',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataElement), 'pSourceDataElement' )),
    COMMETHOD([helpstring(u'Exports the given feature class to a new feature class.')], HRESULT, 'ExportFeatureClass',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataElement), 'pSourceDataElement' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataElement), 'pTargetDataElement' )),
    COMMETHOD([helpstring(u'Deletes the object referred to by the given geoprocessing value object.')], HRESULT, 'Delete',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'pGPValue' )),
    COMMETHOD([helpstring(u'Renames the object referred to by the given geoprocessing value object.')], HRESULT, 'Rename',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'pSourceGPValue' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'pTargetGPValue' )),
    COMMETHOD([helpstring(u'Copies the object referred to by the given geoprocessing value object.')], HRESULT, 'Copy',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'pSourceGPValue' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'pTargetGPValue' )),
    COMMETHOD([helpstring(u'Returns whether the object referred to by the given geoprocessing value object exists.')], HRESULT, 'Exists',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'pGPValue' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Exists' )),
    COMMETHOD([helpstring(u'Returns whether the given string satisfies the given wildcard string.')], HRESULT, 'CompareWildCard',
              ( ['in'], BSTR, 'wildCard' ),
              ( ['in'], BSTR, 'Data' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'matched' )),
    COMMETHOD([helpstring(u'Returns a name object corresponding to the object referred to by the given data element.')], HRESULT, 'GetNameObject',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataElement), 'pDataElement' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName)), 'ppName' )),
    COMMETHOD([helpstring(u'Returns a name object corresponding to the object by the location moniker.')], HRESULT, 'GetNameObjectFromLocation',
              ( ['in'], BSTR, 'locationMoniker' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName)), 'ppName' )),
    COMMETHOD([helpstring(u'Returns the catalog object from the given catalog path.')], HRESULT, 'GetGxObjectFromLocation',
              ( ['in'], BSTR, 'catalogPath' ),
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppGxObject' )),
    COMMETHOD([helpstring(u'Returns whether the given field exists within the given geoprocessing value object.')], HRESULT, 'FieldExists',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'pGPValue' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IField), 'pField' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pExists' )),
    COMMETHOD([helpstring(u'Returns the field object with the specified name in the given geoprocessing value object.')], HRESULT, 'FindField',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'pGPValue' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IField)), 'ppField' )),
    COMMETHOD([helpstring(u'Returns an enumeration of the current layers in the application.')], HRESULT, 'GetMapLayers',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.IEnumLayer)), 'ppLayers' )),
    COMMETHOD([helpstring(u'Returns a layer with the given name.')], HRESULT, 'FindMapLayer',
              ( ['in'], BSTR, 'Name' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.ILayer)), 'ppLayer' )),
    COMMETHOD([helpstring(u'Returns a layer and geoprocessing layer with the given name.')], HRESULT, 'FindMapLayer2',
              ( ['in'], BSTR, 'Name' ),
              ( ['out'], POINTER(POINTER(comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.ILayer)), 'ppLayer' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._1CE6AC65_43F5_4529_8FC0_D7ED298E4F1A_0_10_2.IGPLayer)), 'ppGPLayer' )),
    COMMETHOD([helpstring(u'Returns an enumeration of current geoprocessing layers.')], HRESULT, 'GetGPLayers',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IEnumGPValue)), 'ppValues' )),
    COMMETHOD([helpstring(u'Creates a geoprocessing layer object from the given catalog path and of the given geoprocessing data type.')], HRESULT, 'MakeGPLayer',
              ( ['in'], BSTR, 'catalogPath' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType), 'pDataType' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._1CE6AC65_43F5_4529_8FC0_D7ED298E4F1A_0_10_2.IGPLayer)), 'ppGPLayer' )),
    COMMETHOD([helpstring(u'Locates a geoprocessing environment with the given name in the given array.')], HRESULT, 'GetEnvironment',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'pEnvironments' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['retval', 'out'], POINTER(POINTER(IGPEnvironment)), 'ppEnvironment' )),
    COMMETHOD([helpstring(u'Adds a layer object to the geoprocessing utility object.')], HRESULT, 'AddInternalLayer',
              ( ['in'], POINTER(comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.ILayer), 'pLayer' )),
    COMMETHOD([helpstring(u'Adds a layer object and geoprocessing layer object to the geoprocessing utility object.')], HRESULT, 'AddInternalLayer2',
              ( ['in'], POINTER(comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.ILayer), 'pLayer' ),
              ( ['in'], POINTER(comtypes.gen._1CE6AC65_43F5_4529_8FC0_D7ED298E4F1A_0_10_2.IGPLayer), 'pGPLayer' )),
    COMMETHOD([helpstring(u'Creates a geoprocessing layer object based on the given layer object.')], HRESULT, 'MakeGPLayerFromLayer',
              ( ['in'], POINTER(comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.ILayer), 'pLayer' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._1CE6AC65_43F5_4529_8FC0_D7ED298E4F1A_0_10_2.IGPLayer)), 'ppGPLayer' )),
    COMMETHOD([helpstring(u'Returns a name object corresponding to the parent object of the specified catalog path.')], HRESULT, 'CreateParentFromCatalogPath',
              ( ['in'], BSTR, 'catalogPath' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName)), 'ppName' )),
    COMMETHOD([helpstring(u'Returns the geoprocessing value object from the given parameter, variable, or value object.')], HRESULT, 'UnpackGPValue',
              ( ['in'], POINTER(IUnknown), 'pInput' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue)), 'ppValue' )),
    COMMETHOD([helpstring(u'Returns the raster dataset specified by the given geoprocessing value object.')], HRESULT, 'DecodeRasterLayer',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'pValue' ),
              ( ['out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterDataset)), 'ppRD' )),
    COMMETHOD([helpstring(u'Returns the feature class and query filter specified by the given geoprocessing value object.')], HRESULT, 'DecodeFeatureLayer',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'pValue' ),
              ( ['out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClass)), 'ppFC' ),
              ( ['out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter)), 'ppQF' )),
    COMMETHOD([helpstring(u'Returns the table and query filter specified by the given geoprocessing value object.')], HRESULT, 'DecodeTableView',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'pValue' ),
              ( ['out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable)), 'ppTable' ),
              ( ['out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter)), 'ppQF' )),
    COMMETHOD([helpstring(u'Returns the layer object specified by the given geoprocessing value object.')], HRESULT, 'DecodeLayer',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'pValue' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.ILayer)), 'ppLayer' )),
    COMMETHOD([helpstring(u'Returns the standalone table object specified by the given geoprocessing value object.')], HRESULT, 'DecodeStandaloneTable',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'pValue' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.IStandaloneTable)), 'ppStandaloneTable' )),
    COMMETHOD([helpstring(u'Returns the table data element specified by the given geoprocessing value object.')], HRESULT, 'DecodeDETable',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'pValue' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDETable)), 'ppDETable' )),
    COMMETHOD([helpstring(u'Releases all internal objects used prior to releasing this GPUtilities object.')], HRESULT, 'ReleaseInternals'),
    COMMETHOD([helpstring(u'Returns an enumeration of standalone tables in the current map.')], HRESULT, 'GetMapTables',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IEnumTable)), 'ppTables' )),
    COMMETHOD([helpstring(u'Locates a table with the specified name.')], HRESULT, 'FindMapTable',
              ( ['in'], BSTR, 'Name' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable)), 'ppTable' )),
    COMMETHOD([helpstring(u'Locates a table with the specified name and returns the table and geoprocessing table view objects.')], HRESULT, 'FindMapTable2',
              ( ['in'], BSTR, 'Name' ),
              ( ['out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable)), 'ppTable' ),
              ( ['retval', 'out'], POINTER(POINTER(IGPTableView)), 'ppGPTableView' )),
    COMMETHOD([helpstring(u'Returns an enumeration of geoprocessing table views.')], HRESULT, 'GetGPTableViews',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IEnumGPValue)), 'ppValues' )),
    COMMETHOD([helpstring(u'Returns test if a geoprocessing table views is in fact a table and not from a layer.')], HRESULT, 'IsGPTableView',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'pValue' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pResult' )),
    COMMETHOD([helpstring(u'Returns a geoprocessing table view object corresponding to the given catalog path and of the specified geoprocessing data type.')], HRESULT, 'MakeGPTableView',
              ( ['in'], BSTR, 'catalogPath' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType), 'pDataType' ),
              ( ['retval', 'out'], POINTER(POINTER(IGPTableView)), 'ppGPTableView' )),
    COMMETHOD([helpstring(u"Adds the given table to the utility object's list of tables.")], HRESULT, 'AddInternalTable',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable), 'pTable' )),
    COMMETHOD([helpstring(u"Adds the given table to the utility object's list of tables.")], HRESULT, 'AddInternalTable2',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable), 'pTable' ),
              ( ['in'], POINTER(IGPTableView), 'pGPTableView' )),
    COMMETHOD([helpstring(u'Returns a new geoprocessing table view object from the given table object.')], HRESULT, 'MakeGPTableViewFromTable',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable), 'pTable' ),
              ( ['retval', 'out'], POINTER(POINTER(IGPTableView)), 'ppGPTableView' )),
    COMMETHOD([helpstring(u'Returns a collection of field objects contained in the given geoprocessing value object.')], HRESULT, 'GetFields',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'pValue' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFields)), 'ppFields' )),
    COMMETHOD([helpstring(u'Returns whether datasets can be added to the current application display.')], HRESULT, 'CanAddToMap',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pCanAddToMap' )),
    COMMETHOD([helpstring(u'Generates a new spatial reference object.')], HRESULT, 'GenerateSpRef',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'pInputTables' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable), 'pOverlayTable' ),
              ( ['in'], c_double, 'growExtentBy' ),
              ( ['out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference)), 'ppSpRef' ),
              ( ['out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'ppExtent' ),
              ( ['out'], POINTER(VARIANT_BOOL), 'pHasMs' ),
              ( ['out'], POINTER(c_double), 'pMMin' ),
              ( ['out'], POINTER(c_double), 'pMMax' ),
              ( ['out'], POINTER(VARIANT_BOOL), 'pHasZs' ),
              ( ['out'], POINTER(c_double), 'pZMin' ),
              ( ['out'], POINTER(c_double), 'pZMax' )),
    COMMETHOD([helpstring(u'Calculates and sets the grid index sizes on the given geometry definition object.')], HRESULT, 'SetGridIndex',
              ( ['in'], POINTER(IGPEnvironmentManager), 'pEnvMgr' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'pInputTables' ),
              ( ['in'], c_double, 'spatialIndex1' ),
              ( ['in'], c_double, 'spatialIndex2' ),
              ( ['in'], c_double, 'spatialIndex3' ),
              ( ['in'], POINTER(IUnknown), 'pUnk' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeometryDef), 'pGeometryDef' )),
    COMMETHOD([helpstring(u'Returns whether the given object is a dataset.')], HRESULT, 'IsDatasetType',
              ( ['in'], POINTER(IUnknown), 'pUnknown' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pIsDataset' )),
    COMMETHOD([helpstring(u'Removes the data/layers specified by the geoprocessing value object and/or name.')], HRESULT, 'RemoveFromMap',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'pGPValue' ),
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD([helpstring(u'Returns whether the given variable or parameter is derived.')], HRESULT, 'IsDerived',
              ( ['in'], POINTER(IUnknown), 'pInput' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pDerived' )),
    COMMETHOD([helpstring(u'Refreshes the applications active view.')], HRESULT, 'RefreshView'),
    COMMETHOD([helpstring(u'Sets the given geoprocessing value into the given parameter/variable.')], HRESULT, 'PackGPValue',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'pValue' ),
              ( ['in'], POINTER(IUnknown), 'pInput' )),
    COMMETHOD([helpstring(u'Creates a geoprocessing value object of the given data type from the given string.')], HRESULT, 'CreateParameterValue',
              ( ['in'], BSTR, 'text' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType), 'pDataType' ),
              ( ['in'], esriGPParameterDirection, 'Direction' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue)), 'ppValue' )),
    COMMETHOD([helpstring(u'Verifies that the data referenced by the given geoprocessing value object exists.')], HRESULT, 'ValidateExists',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'pGPValue' ),
              ( ['in'], VARIANT_BOOL, 'checkDerived' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Exists' )),
    COMMETHOD([helpstring(u'Returns the catalog object corresponding to the given data element.')], HRESULT, 'GetGxObject',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataElement), 'pDataElement' ),
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppGxObject' )),
    COMMETHOD([helpstring(u'Returns an array of all catalog objects which correspond to the catalog path.')], HRESULT, 'GetGxObjects',
              ( ['in'], BSTR, 'catalogPath' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'ppObjects' )),
    COMMETHOD([helpstring(u'Get data elements from catalog path.')], HRESULT, 'MakeDataElements',
              ( ['in'], BSTR, 'catalogPath' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDEBrowseOptions), 'pBrowseOptions' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'ppObjects' )),
    COMMETHOD([helpstring(u'Returns an enumeration of geoprocessing data.')], HRESULT, 'GetGPMapData',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IEnumGPValue)), 'ppValues' )),
    COMMETHOD([helpstring(u'Generate an GPValue from an Arc Object.')], HRESULT, 'MakeGPValueFromObject',
              ( ['in'], POINTER(IUnknown), 'pUnk' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue)), 'ppGPValue' )),
    COMMETHOD([helpstring(u'Removes all of the GPValues returned from MakeGPValueFromObject.')], HRESULT, 'RemoveInternalValues'),
    COMMETHOD([helpstring(u'Removes the internal layer.')], HRESULT, 'RemoveInternalLayer',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD([helpstring(u'Removes the internal table.')], HRESULT, 'RemoveInternalTable',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD([helpstring(u'Returns the raster specified by the given geoprocessing value object.')], HRESULT, 'DecodeRaster',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'pValue' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster)), 'ppRaster' )),
    COMMETHOD([helpstring(u'Creates the spatial reference from both a source and environment.')], HRESULT, 'GetGPSpRefEnv',
              ( ['in'], POINTER(IGPEnvironmentManager), 'pEnvMgr' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'pSrcSpRef' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'pNewExtent' ),
              ( ['in'], c_double, 'newMMin' ),
              ( ['in'], c_double, 'newMMax' ),
              ( ['in'], c_double, 'newZMin' ),
              ( ['in'], c_double, 'newZMax' ),
              ( ['in'], POINTER(IUnknown), 'pWkspFDS' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference)), 'ppSpRef' )),
    COMMETHOD([helpstring(u'Removes the internal layer.')], HRESULT, 'RemoveInternalLayerEx',
              ( ['in'], POINTER(comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.ILayer), 'pLayer' )),
    COMMETHOD([helpstring(u'Removes the internal table.')], HRESULT, 'RemoveInternalTableEx',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable), 'pTable' )),
]
################################################################
## code template for IGPUtilities implementation
##class IGPUtilities_Impl(object):
##    def OpenFeatureClassFromString(self, catalogPath):
##        u'Opens a feature class from the given catalog path.'
##        #return ppFC
##
##    def QualifyOutputCatalogPath(self, catalogPath):
##        u'Qualify the catalog path with the GDBs database and user names.'
##        #return pQualifiedCatalogPath
##
##    def GetEnvironment(self, pEnvironments, Name):
##        u'Locates a geoprocessing environment with the given name in the given array.'
##        #return ppEnvironment
##
##    def RefreshCatalog(self, pSourceDataElement):
##        u'Refreshes the parent within the catalog of the given data element.'
##        #return 
##
##    def FieldExists(self, pGPValue, pField):
##        u'Returns whether the given field exists within the given geoprocessing value object.'
##        #return pExists
##
##    def GetGPTableViews(self):
##        u'Returns an enumeration of geoprocessing table views.'
##        #return ppValues
##
##    def CreateRasterDatasetName(self, catalogPath):
##        u'Creates a raster dataset name object from the given catalog path.'
##        #return ppName
##
##    def QualifyOutputDataElement(self, pValue):
##        u'Qualify the catalog path of the given value with the GDBs database and user names.'
##        #return 
##
##    def GetGPMapData(self):
##        u'Returns an enumeration of geoprocessing data.'
##        #return ppValues
##
##    def MakeGPValueFromObject(self, pUnk):
##        u'Generate an GPValue from an Arc Object.'
##        #return ppGPValue
##
##    def AddToMap(self, pGPValue, Name, temporary, pUnkRenderer):
##        u'Adds the given geoprocessing value object to the application display.'
##        #return 
##
##    def GetGPLayers(self):
##        u'Returns an enumeration of current geoprocessing layers.'
##        #return ppValues
##
##    def FindField(self, pGPValue, Name):
##        u'Returns the field object with the specified name in the given geoprocessing value object.'
##        #return ppField
##
##    def DecodeDETable(self, pValue):
##        u'Returns the table data element specified by the given geoprocessing value object.'
##        #return ppDETable
##
##    def CreateParameterValue(self, text, pDataType, Direction):
##        u'Creates a geoprocessing value object of the given data type from the given string.'
##        #return ppValue
##
##    def GetUnQualifiedCatalogPath(self, pValue):
##        u'Returns the unqualified path by striping the GDBs database and user names.'
##        #return Path
##
##    def AddInternalTable(self, pTable):
##        u"Adds the given table to the utility object's list of tables."
##        #return 
##
##    def RemoveInternalValues(self):
##        u'Removes all of the GPValues returned from MakeGPValueFromObject.'
##        #return 
##
##    def ExpandDataElement(self, pInDE, pExpandOptions):
##        u'Expands the properties of the given data element according to the given expand options.'
##        #return 
##
##    def AddInternalLayer2(self, pLayer, pGPLayer):
##        u'Adds a layer object and geoprocessing layer object to the geoprocessing utility object.'
##        #return 
##
##    def DecodeTableView(self, pValue):
##        u'Returns the table and query filter specified by the given geoprocessing value object.'
##        #return ppTable, ppQF
##
##    def GetFields(self, pValue):
##        u'Returns a collection of field objects contained in the given geoprocessing value object.'
##        #return ppFields
##
##    def DecodeRasterLayer(self, pValue):
##        u'Returns the raster dataset specified by the given geoprocessing value object.'
##        #return ppRD
##
##    def RemoveFromMap(self, pGPValue, Name):
##        u'Removes the data/layers specified by the geoprocessing value object and/or name.'
##        #return 
##
##    def ReleaseInternals(self):
##        u'Releases all internal objects used prior to releasing this GPUtilities object.'
##        #return 
##
##    def RefreshView(self):
##        u'Refreshes the applications active view.'
##        #return 
##
##    def FindMapTable(self, Name):
##        u'Locates a table with the specified name.'
##        #return ppTable
##
##    def IsDatasetType(self, pUnknown):
##        u'Returns whether the given object is a dataset.'
##        #return pIsDataset
##
##    def SetGridIndex(self, pEnvMgr, pInputTables, spatialIndex1, spatialIndex2, spatialIndex3, pUnk, pGeometryDef):
##        u'Calculates and sets the grid index sizes on the given geometry definition object.'
##        #return 
##
##    def GetMapTables(self):
##        u'Returns an enumeration of standalone tables in the current map.'
##        #return ppTables
##
##    def GetGxObject(self, pDataElement):
##        u'Returns the catalog object corresponding to the given data element.'
##        #return ppGxObject
##
##    def IsGPTableView(self, pValue):
##        u'Returns test if a geoprocessing table views is in fact a table and not from a layer.'
##        #return pResult
##
##    def CreateRasterCatalogName(self, catalogPath):
##        u'Creates a raster catalog name object from the given catalog path.'
##        #return ppName
##
##    def FindMapLayer(self, Name):
##        u'Returns a layer with the given name.'
##        #return ppLayer
##
##    @property
##    def Catalog(self):
##        u'Returns the catalog object shared between geoprocessing operations.'
##        #return Catalog
##
##    def UnpackGPValue(self, pInput):
##        u'Returns the geoprocessing value object from the given parameter, variable, or value object.'
##        #return ppValue
##
##    def OpenDatasetFromLocation(self, catalogPath):
##        u'Opens the dataset object from the given catalog path.'
##        #return ppDataset
##
##    def CreateDataElement(self, catalogPath, pDataType, optionalWorkspace):
##        u'Creates a new data element object from the catalog object specified by the given path, data type, and optional workspace.'
##        #return DataElement
##
##    def GetMapLayers(self):
##        u'Returns an enumeration of the current layers in the application.'
##        #return ppLayers
##
##    def ValidateExists(self, pGPValue, checkDerived):
##        u'Verifies that the data referenced by the given geoprocessing value object exists.'
##        #return Exists
##
##    def InternalValidate(self, pParameters, pParamValues, updateValues, honorDerivedFlag, pEnvMgr):
##        u'Performs a validation of the parameters to a GPTool.'
##        #return ppMessages
##
##    def GetNameObjectFromLocation(self, locationMoniker):
##        u'Returns a name object corresponding to the object by the location moniker.'
##        #return ppName
##
##    def OpenTableFromString(self, catalogPath):
##        u'Opens a table from the given catalog path.'
##        #return ppTable
##
##    def RemoveInternalLayer(self, Name):
##        u'Removes the internal layer.'
##        #return 
##
##    def _get(self):
##        u'Sets the path to the current workspace.'
##        #return workPath
##    def _set(self, workPath):
##        u'Sets the path to the current workspace.'
##    Workspace = property(_get, _set, doc = _set.__doc__)
##
##    def PackGPValue(self, pValue, pInput):
##        u'Sets the given geoprocessing value into the given parameter/variable.'
##        #return 
##
##    def Delete(self, pGPValue):
##        u'Deletes the object referred to by the given geoprocessing value object.'
##        #return 
##
##    def Rename(self, pSourceGPValue, pTargetGPValue):
##        u'Renames the object referred to by the given geoprocessing value object.'
##        #return 
##
##    def Exists(self, pGPValue):
##        u'Returns whether the object referred to by the given geoprocessing value object exists.'
##        #return Exists
##
##    def RemoveInternalLayerEx(self, pLayer):
##        u'Removes the internal layer.'
##        #return 
##
##    def RemoveInternalTable(self, Name):
##        u'Removes the internal table.'
##        #return 
##
##    def _get(self):
##        u'Returns whether catalog objects, used by the shared catalog object, are refreshed during geoprocessing operations.'
##        #return pRefresh
##    def _set(self, pRefresh):
##        u'Returns whether catalog objects, used by the shared catalog object, are refreshed during geoprocessing operations.'
##    RefreshCatalogParent = property(_get, _set, doc = _set.__doc__)
##
##    def MakeDataElements(self, catalogPath, pBrowseOptions):
##        u'Get data elements from catalog path.'
##        #return ppObjects
##
##    def DecodeStandaloneTable(self, pValue):
##        u'Returns the standalone table object specified by the given geoprocessing value object.'
##        #return ppStandaloneTable
##
##    def InternalValidateValue(self, pParameter, pValue, updateValue, honorDerivedFlag, pEnvMgr, pMessage):
##        u'Performs a validation of the a single parameter to a GPTool.'
##        #return 
##
##    def FindMapLayer2(self, Name):
##        u'Returns a layer and geoprocessing layer with the given name.'
##        #return ppLayer, ppGPLayer
##
##    def CreateParentFromCatalogPath(self, catalogPath):
##        u'Returns a name object corresponding to the parent object of the specified catalog path.'
##        #return ppName
##
##    def CompareWildCard(self, wildCard, Data):
##        u'Returns whether the given string satisfies the given wildcard string.'
##        #return matched
##
##    def GetNameObject(self, pDataElement):
##        u'Returns a name object corresponding to the object referred to by the given data element.'
##        #return ppName
##
##    def AddInternalLayer(self, pLayer):
##        u'Adds a layer object to the geoprocessing utility object.'
##        #return 
##
##    def MakeGPLayer(self, catalogPath, pDataType):
##        u'Creates a geoprocessing layer object from the given catalog path and of the given geoprocessing data type.'
##        #return ppGPLayer
##
##    def OpenDataset(self, pValue):
##        u'Opens the dataset object specified by the given geoprocessing value object.'
##        #return ppDataset
##
##    def IsDerived(self, pInput):
##        u'Returns whether the given variable or parameter is derived.'
##        #return pDerived
##
##    def RemoveInternalTableEx(self, pTable):
##        u'Removes the internal table.'
##        #return 
##
##    def OpenFeatureLayerFromString(self, catalogPath):
##        u'Opens a feature layer from the given catalog path.'
##        #return ppFL
##
##    def CreateTableName(self, catalogPath):
##        u'Creates a table name object from the given catalog path.'
##        #return ppName
##
##    def MakeGPLayerFromLayer(self, pLayer):
##        u'Creates a geoprocessing layer object based on the given layer object.'
##        #return ppGPLayer
##
##    def MakeDataElementFromNameObject(self, Name):
##        u'Creates a new data element object from the given name object.'
##        #return DataElement
##
##    def IsBadMessage(self, pMessages, Index):
##        u'Tests if a given message within an array of messages is bad.'
##        #return pBadMsg
##
##    def OpenRasterDatasetFromString(self, catalogPath):
##        u'Opens a raster dataset object from the given catalog path.'
##        #return ppRD
##
##    def GetGxObjectFromLocation(self, catalogPath):
##        u'Returns the catalog object from the given catalog path.'
##        #return ppGxObject
##
##    def GenerateSpRef(self, pInputTables, pOverlayTable, growExtentBy):
##        u'Generates a new spatial reference object.'
##        #return ppSpRef, ppExtent, pHasMs, pMMin, pMMax, pHasZs, pZMin, pZMax
##
##    def OpenRasterLayerFromString(self, catalogPath):
##        u'Opens a raster layer object from the given catalog path.'
##        #return ppRL
##
##    def FindMapTable2(self, Name):
##        u'Locates a table with the specified name and returns the table and geoprocessing table view objects.'
##        #return ppTable, ppGPTableView
##
##    def GenerateDefaultOutputValue(self, pEnvMgr, functionname, pOutputParam, pInputValue, extension, outputFileBaseLimit):
##        u'Generates the default output value and sets its path to an unique name.'
##        #return ppOutputValue
##
##    def ExportFeatureClass(self, pSourceDataElement, pTargetDataElement):
##        u'Exports the given feature class to a new feature class.'
##        #return 
##
##    def DecodeFeatureLayer(self, pValue):
##        u'Returns the feature class and query filter specified by the given geoprocessing value object.'
##        #return ppFC, ppQF
##
##    def Copy(self, pSourceGPValue, pTargetGPValue):
##        u'Copies the object referred to by the given geoprocessing value object.'
##        #return 
##
##    def MakeGPTableView(self, catalogPath, pDataType):
##        u'Returns a geoprocessing table view object corresponding to the given catalog path and of the specified geoprocessing data type.'
##        #return ppGPTableView
##
##    def GetGxObjects(self, catalogPath):
##        u'Returns an array of all catalog objects which correspond to the catalog path.'
##        #return ppObjects
##
##    def DecodeRaster(self, pValue):
##        u'Returns the raster specified by the given geoprocessing value object.'
##        #return ppRaster
##
##    def GetGPSpRefEnv(self, pEnvMgr, pSrcSpRef, pNewExtent, newMMin, newMMax, newZMin, newZMax, pWkspFDS):
##        u'Creates the spatial reference from both a source and environment.'
##        #return ppSpRef
##
##    def CreateFeatureClassName(self, catalogPath):
##        u'Creates a feature class name object from the given catalog path.'
##        #return ppName
##
##    def MakeGPTableViewFromTable(self, pTable):
##        u'Returns a new geoprocessing table view object from the given table object.'
##        #return ppGPTableView
##
##    def CanAddToMap(self):
##        u'Returns whether datasets can be added to the current application display.'
##        #return pCanAddToMap
##
##    def AddInternalTable2(self, pTable, pGPTableView):
##        u"Adds the given table to the utility object's list of tables."
##        #return 
##
##    def CreateFeatureLayer(self, catalogPath):
##        u'Creates a geoprocessing feature layer object from the catalog path.'
##        #return Value
##
##    def MakeDataElement(self, catalogPath, pDataType, pExpandOptions):
##        u'Returns a data element object from the catalog object specified by the given path, data type, and expand options.'
##        #return DataElement
##
##    def DecodeLayer(self, pValue):
##        u'Returns the layer object specified by the given geoprocessing value object.'
##        #return ppLayer
##

IGPUtilities2._methods_ = [
    COMMETHOD([helpstring(u'Returns the dataset of the given value.')], HRESULT, 'Open',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'pValue' ),
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppDataset' )),
    COMMETHOD([helpstring(u'Saves a layer to a given location on disk.')], HRESULT, 'SaveLayer',
              ( ['in'], BSTR, 'catalogPath' ),
              ( ['in'], POINTER(comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.ILayer), 'pLayer' )),
    COMMETHOD([helpstring(u'Get active view.')], HRESULT, 'GetActiveView',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.IActiveView)), 'ppActiveView' )),
    COMMETHOD([helpstring(u'Gets the map associated with the application.')], HRESULT, 'GetMap',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.IMap)), 'ppMap' )),
    COMMETHOD([helpstring(u'Gets the basic map associated with the application.')], HRESULT, 'GetBasicMap',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.IBasicMap)), 'ppMap' )),
    COMMETHOD([helpstring(u'Indicates if the program is running in an ArcGIS applicaiton.')], HRESULT, 'InApplication',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pInApplication' )),
    COMMETHOD([helpstring(u'Creates appropriate layer for the value.')], HRESULT, 'MakeLayer',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'pValue' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], POINTER(IUnknown), 'pUnkRenderer' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.ILayer)), 'ppLayer' )),
    COMMETHOD([helpstring(u'Gets the status bar associated with the application.')], HRESULT, 'GetStatusBar',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStatusBar)), 'ppStatusBar' )),
    COMMETHOD([helpstring(u'Start edit operation within the application.')], HRESULT, 'StartEditOperation',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspaceEdit), 'pWorkspace' ),
              ( ['in'], VARIANT_BOOL, 'bHasPrivateEditSession' )),
    COMMETHOD([helpstring(u'Abort edit operation within the application.')], HRESULT, 'AbortEditOperation',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspaceEdit), 'pWorkspace' )),
    COMMETHOD([helpstring(u'Stop edit operation within the application.')], HRESULT, 'StopEditOperation',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspaceEdit), 'pWorkspace' ),
              ( ['in'], BSTR, 'operationLabel' )),
    COMMETHOD(['propputref', helpstring(u'Sets the Variable Manager.')], HRESULT, 'VariableManager',
              ( ['in'], POINTER(IGPVariableManager), 'ppVariableManager' )),
    COMMETHOD(['propget', helpstring(u'Sets the Variable Manager.')], HRESULT, 'VariableManager',
              ( ['retval', 'out'], POINTER(POINTER(IGPVariableManager)), 'ppVariableManager' )),
    COMMETHOD([helpstring(u'Generate the matching geographic transform domain from an input spatial reference to an output spatial reference.')], HRESULT, 'GenerateGeographicTransformDomain',
              ( ['in'], POINTER(IUnknown), 'iUnk' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPCodedValueDomain), 'pGTDomain' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'pInSR' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'pOutSR' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPMessages), 'pMessages' )),
    COMMETHOD([helpstring(u'Gets the set of geographic transformations.')], HRESULT, 'GetGTOperationSet',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'pGTs' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'pInSR' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'pOutSR' ),
              ( ['in'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ICompositeGeoTransformation)), 'ppGTs' )),
    COMMETHOD([helpstring(u'Gets the type and value of extent of the given value.')], HRESULT, 'GetExtent',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'pValue' ),
              ( ['out'], POINTER(esriGPExtentEnum), 'envType' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'Extent' )),
    COMMETHOD([helpstring(u'Creates the spatial reference from both a source and environment.')], HRESULT, 'GetGPSpRefEnvEx',
              ( ['in'], POINTER(IGPEnvironmentManager), 'pEnvMgr' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'pSrcSpRef' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'pTgtSpRef' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'pNewExtent' ),
              ( ['in'], c_double, 'newMMin' ),
              ( ['in'], c_double, 'newMMax' ),
              ( ['in'], c_double, 'newZMin' ),
              ( ['in'], c_double, 'newZMax' ),
              ( ['in'], POINTER(IUnknown), 'pWkspFDS' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference)), 'ppSpRef' )),
    COMMETHOD([helpstring(u'Creates a toolbox at the given location for a function factory of a given alias.')], HRESULT, 'CreateToolboxFromFactory',
              ( ['in'], BSTR, 'Alias' ),
              ( ['in'], BSTR, 'location' ),
              ( ['in'], BSTR, 'ToolboxName' )),
    COMMETHOD([helpstring(u'Sets the internal map used by the geoprocessor.')], HRESULT, 'SetInternalMap',
              ( ['in'], POINTER(comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.IMap), 'pMap' )),
    COMMETHOD([helpstring(u'Get default layer name for given value.')], HRESULT, 'GetLayerName',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'pValue' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['retval', 'out'], POINTER(BSTR), 'pName' )),
    COMMETHOD([helpstring(u'Removes all internal layers and tables.')], HRESULT, 'RemoveInternalData'),
    COMMETHOD([helpstring(u'Get the virtual workspace.')], HRESULT, 'GetInMemoryWorkspace',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspace)), 'ppWorkspace' )),
    COMMETHOD([helpstring(u'Clear the virtual workspace.')], HRESULT, 'ClearInMemoryWorkspace'),
    COMMETHOD([helpstring(u'Returns the dataset of the given value.')], HRESULT, 'OpenFromString',
              ( ['in'], BSTR, 'NameString' ),
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppDataset' )),
    COMMETHOD([helpstring(u'Starts an edit session if needed.')], HRESULT, 'SetupEditSession',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IClass), 'pTable' )),
    COMMETHOD([helpstring(u'Cleans up any edit session.')], HRESULT, 'CleanupEditSession',
              ( ['in'], VARIANT_BOOL, 'abort' )),
    COMMETHOD([helpstring(u'Removes the data/layers specified by the geoprocessing value object from the map.')], HRESULT, 'RemoveFromMapEx',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'pGPValue' )),
    COMMETHOD([helpstring(u'Adds the given geoprocessing value object to the application display.')], HRESULT, 'AddToMapEx',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'pGPValue' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT_BOOL, 'temporary' ),
              ( ['in'], POINTER(IUnknown), 'pUnkRenderer' ),
              ( ['in'], VARIANT_BOOL, 'Visible' )),
]
################################################################
## code template for IGPUtilities2 implementation
##class IGPUtilities2_Impl(object):
##    def RemoveInternalData(self):
##        u'Removes all internal layers and tables.'
##        #return 
##
##    def GenerateGeographicTransformDomain(self, iUnk, pGTDomain, pInSR, pOutSR, pMessages):
##        u'Generate the matching geographic transform domain from an input spatial reference to an output spatial reference.'
##        #return 
##
##    def StartEditOperation(self, pWorkspace, bHasPrivateEditSession):
##        u'Start edit operation within the application.'
##        #return 
##
##    def GetGTOperationSet(self, pGTs, pInSR, pOutSR, ppGTs):
##        u'Gets the set of geographic transformations.'
##        #return 
##
##    def StopEditOperation(self, pWorkspace, operationLabel):
##        u'Stop edit operation within the application.'
##        #return 
##
##    def SetupEditSession(self, pTable):
##        u'Starts an edit session if needed.'
##        #return 
##
##    def GetGPSpRefEnvEx(self, pEnvMgr, pSrcSpRef, pTgtSpRef, pNewExtent, newMMin, newMMax, newZMin, newZMax, pWkspFDS):
##        u'Creates the spatial reference from both a source and environment.'
##        #return ppSpRef
##
##    def InApplication(self):
##        u'Indicates if the program is running in an ArcGIS applicaiton.'
##        #return pInApplication
##
##    def RemoveFromMapEx(self, pGPValue):
##        u'Removes the data/layers specified by the geoprocessing value object from the map.'
##        #return 
##
##    def GetMap(self):
##        u'Gets the map associated with the application.'
##        #return ppMap
##
##    def AbortEditOperation(self, pWorkspace):
##        u'Abort edit operation within the application.'
##        #return 
##
##    def GetExtent(self, pValue):
##        u'Gets the type and value of extent of the given value.'
##        #return envType, Extent
##
##    def CreateToolboxFromFactory(self, Alias, location, ToolboxName):
##        u'Creates a toolbox at the given location for a function factory of a given alias.'
##        #return 
##
##    def OpenFromString(self, NameString):
##        u'Returns the dataset of the given value.'
##        #return ppDataset
##
##    def SetInternalMap(self, pMap):
##        u'Sets the internal map used by the geoprocessor.'
##        #return 
##
##    def GetLayerName(self, pValue, Name):
##        u'Get default layer name for given value.'
##        #return pName
##
##    def MakeLayer(self, pValue, Name, pUnkRenderer):
##        u'Creates appropriate layer for the value.'
##        #return ppLayer
##
##    def GetBasicMap(self):
##        u'Gets the basic map associated with the application.'
##        #return ppMap
##
##    def CleanupEditSession(self, abort):
##        u'Cleans up any edit session.'
##        #return 
##
##    def ClearInMemoryWorkspace(self):
##        u'Clear the virtual workspace.'
##        #return 
##
##    def SaveLayer(self, catalogPath, pLayer):
##        u'Saves a layer to a given location on disk.'
##        #return 
##
##    def AddToMapEx(self, pGPValue, Name, temporary, pUnkRenderer, Visible):
##        u'Adds the given geoprocessing value object to the application display.'
##        #return 
##
##    def GetActiveView(self):
##        u'Get active view.'
##        #return ppActiveView
##
##    @property
##    def VariableManager(self, ppVariableManager):
##        u'Sets the Variable Manager.'
##        #return 
##
##    def GetInMemoryWorkspace(self):
##        u'Get the virtual workspace.'
##        #return ppWorkspace
##
##    def GetStatusBar(self):
##        u'Gets the status bar associated with the application.'
##        #return ppStatusBar
##
##    def Open(self, pValue):
##        u'Returns the dataset of the given value.'
##        #return ppDataset
##

IGPUtilities3._methods_ = [
    COMMETHOD([helpstring(u'Returns the layer based upon the given catalog path.')], HRESULT, 'OpenLayerFromLocation',
              ( ['in'], BSTR, 'catalogPath' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.ILayer)), 'ppLayer' )),
]
################################################################
## code template for IGPUtilities3 implementation
##class IGPUtilities3_Impl(object):
##    def OpenLayerFromLocation(self, catalogPath):
##        u'Returns the layer based upon the given catalog path.'
##        #return ppLayer
##

class EnumBSTR(CoClass):
    u'Enumeration of multiple strings.'
    _reg_clsid_ = GUID('{583CADF9-039F-4E85-A7C1-E234193A7151}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
EnumBSTR._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IBStringArray, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IEnumBSTR]

class IGPXYDomainType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing xy domain data type object.'
    _iid_ = GUID('{5F55C51B-BB3B-44B9-AFC6-73D012458D4B}')
    _idlflags_ = ['oleautomation']
IGPXYDomainType._methods_ = [
]
################################################################
## code template for IGPXYDomainType implementation
##class IGPXYDomainType_Impl(object):

class GPINFOExpression(CoClass):
    u'Geoprocessing value object containing an INFO expression value.'
    _reg_clsid_ = GUID('{32A265A6-78D2-49A5-A65B-572973A7B6A0}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPINFOExpression(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing INFO expression object.'
    _iid_ = GUID('{2F475D0B-BCD8-4ECD-9DE9-B54D6C875A3C}')
    _idlflags_ = ['oleautomation']
GPINFOExpression._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPINFOExpression, IGPString, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue, IGPVariant, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

class GPCompositeLayer(CoClass):
    u'Geoprocessing Composite Layer Value.'
    _reg_clsid_ = GUID('{22994B51-C6BA-41FF-ABE6-549615441E3F}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPCompositeLayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue, IGPCompositeLayer, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDescribe, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._1CE6AC65_43F5_4529_8FC0_D7ED298E4F1A_0_10_2.IGPLayer, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDEGeoDataset]

class GPSAGeoDataType(CoClass):
    u'Geoprocessor GPSAGeoData object Type.'
    _reg_clsid_ = GUID('{1ECB7EA1-271A-4DAD-861C-DA32D045F913}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPSAGeoDataType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to IGPSAGeoDataType interface.'
    _iid_ = GUID('{4CE720E4-8F20-4F20-97E8-88F73539C4DC}')
    _idlflags_ = ['oleautomation']
GPSAGeoDataType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPSAGeoDataType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDEGeoDatasetType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGxFilterInfo, comtypes.gen._1CE6AC65_43F5_4529_8FC0_D7ED298E4F1A_0_10_2.IGPLayerType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class GPDatasetDomain(CoClass):
    u'Geoprocessing Dataset Domain.'
    _reg_clsid_ = GUID('{507CDA98-CEFD-4BFC-BF14-21A41B773E2D}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPDatasetDomain(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing dataset domain object.'
    _iid_ = GUID('{98FD17FD-0943-4513-B097-5AF3D06B6B39}')
    _idlflags_ = ['oleautomation']
GPDatasetDomain._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDomain, IGPDatasetDomain, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGxFilterInfo]

class GPSQLExpression(CoClass):
    u'Geoprocessing value object containing a SQL expression value.'
    _reg_clsid_ = GUID('{F966FB74-EA71-41C7-A848-8D26A71DB91A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPSQLExpression._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPSQLExpression, IGPString, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue, IGPVariant, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

IGPCompositeDataType._methods_ = [
    COMMETHOD(['propget', helpstring(u'The number of acceptable data types the composite data type will accept.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propget', helpstring(u'The data type object at the given index.')], HRESULT, 'DataType',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType)), 'ppType' )),
    COMMETHOD([helpstring(u'Adds the given data type to the list of acceptable data types in the composite data type.')], HRESULT, 'AddDataType',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType), 'pType' )),
    COMMETHOD([helpstring(u'Removes the given data type from the list of acceptable data types in the composite data type.')], HRESULT, 'RemoveDataType',
              ( ['in'], c_int, 'Index' )),
]
################################################################
## code template for IGPCompositeDataType implementation
##class IGPCompositeDataType_Impl(object):
##    @property
##    def Count(self):
##        u'The number of acceptable data types the composite data type will accept.'
##        #return pCount
##
##    @property
##    def DataType(self, Index):
##        u'The data type object at the given index.'
##        #return ppType
##
##    def AddDataType(self, pType):
##        u'Adds the given data type to the list of acceptable data types in the composite data type.'
##        #return 
##
##    def RemoveDataType(self, Index):
##        u'Removes the given data type from the list of acceptable data types in the composite data type.'
##        #return 
##

class GPRasterLayer(CoClass):
    u'Geoprocessing value object containing a raster layer value.'
    _reg_clsid_ = GUID('{89312279-B7E6-4787-BE93-9B25CD94D768}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPRasterLayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPRasterLayer, comtypes.gen._1CE6AC65_43F5_4529_8FC0_D7ED298E4F1A_0_10_2.IGPLayer, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDEGeoDataset, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDescribe, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

class GPINFOExpressionType(CoClass):
    u'Geoprocessing INFO Expression Data Type.'
    _reg_clsid_ = GUID('{B5F37D3B-59A9-45DD-8F9C-C3D8BD226D79}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPINFOExpressionType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPINFOExpressionType, IGPStringType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

IGeoProcessor._methods_ = [
    COMMETHOD([helpstring(u'Retrieve the value of an environment by name. The properties of the current Geoprocessing session.')], HRESULT, 'GetEnvironmentValue',
              ( ['in'], BSTR, 'environmentName' ),
              ( ['retval', 'out'], POINTER(VARIANT), 'pvarResult' )),
    COMMETHOD([helpstring(u'Update the value of an environment by name. The properties of the current Geoprocessing session.')], HRESULT, 'SetEnvironmentValue',
              ( ['in'], BSTR, 'environmentName' ),
              ( ['in'], VARIANT, 'Value' )),
    COMMETHOD([helpstring(u'Reset the environments to their initial state.')], HRESULT, 'ResetEnvironments'),
    COMMETHOD([helpstring(u'Execute a tool within the current Geoprocessing session.')], HRESULT, 'Execute',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IVariantArray), 'ipValues' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' ),
              ( ['retval', 'out'], POINTER(POINTER(IGeoProcessorResult)), 'ppResult' )),
    COMMETHOD([helpstring(u'Validate the parameters (input) of a tool within the current Geoprocessing session.')], HRESULT, 'Validate',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IVariantArray), 'ipValues' ),
              ( ['in'], VARIANT_BOOL, 'bUpdateValues' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPMessages)), 'ppMessages' )),
    COMMETHOD([helpstring(u'Open an objector a namestring. Example a DEFeatureClass object will return an IFeatureClass.')], HRESULT, 'Open',
              ( ['in'], VARIANT, 'Value' ),
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppResult' )),
    COMMETHOD([helpstring(u'Make a dataelement from the given value.')], HRESULT, 'GetDataElement',
              ( ['in'], VARIANT, 'inputValue' ),
              ( ['in'], POINTER(VARIANT), 'pDataType' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataElement)), 'ppGpDescribe' )),
    COMMETHOD([helpstring(u'Return the list of tools within the current Geoprocessing session.')], HRESULT, 'ListTools',
              ( ['in'], BSTR, 'wildCard' ),
              ( ['retval', 'out'], POINTER(POINTER(IGpEnumList)), 'ppGpEnumList' )),
    COMMETHOD([helpstring(u'Return the list of environments (properties) within the current Geoprocessing session.')], HRESULT, 'ListEnvironments',
              ( ['in'], BSTR, 'wildCard' ),
              ( ['retval', 'out'], POINTER(POINTER(IGpEnumList)), 'ppGpEnumList' )),
    COMMETHOD([helpstring(u'Return the list of toolboxes within the current Geoprocessing session.')], HRESULT, 'ListToolboxes',
              ( ['in'], BSTR, 'wildCard' ),
              ( ['retval', 'out'], POINTER(POINTER(IGpEnumList)), 'ppGpEnumList' )),
    COMMETHOD([helpstring(u'Add a toolbox to the current Geoprocessing session by catalog path.')], HRESULT, 'AddToolbox',
              ( ['in'], BSTR, 'Toolbox' )),
    COMMETHOD([helpstring(u'Remove a toolbox from the current Geoprocessing session by catalog path.')], HRESULT, 'RemoveToolbox',
              ( ['in'], BSTR, 'Toolbox' )),
    COMMETHOD(['propput', helpstring(u'Set whether resulting output datasets should be added to the application display.')], HRESULT, 'AddOutputsToMap',
              ( ['in'], VARIANT_BOOL, 'AddToMap' )),
    COMMETHOD(['propget', helpstring(u'Set whether resulting output datasets should be added to the application display.')], HRESULT, 'AddOutputsToMap',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'AddToMap' )),
    COMMETHOD(['propput', helpstring(u'Set the overwrite outputs flag within the current Geoprocessing session. True means outputs of tools will be overwritten.')], HRESULT, 'OverwriteOutput',
              ( ['in'], VARIANT_BOOL, 'pOverrideOutput' )),
    COMMETHOD(['propget', helpstring(u'Set the overwrite outputs flag within the current Geoprocessing session. True means outputs of tools will be overwritten.')], HRESULT, 'OverwriteOutput',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pOverrideOutput' )),
    COMMETHOD(['propput', helpstring(u'Set whether new map layers are temporary by default.')], HRESULT, 'TemporaryMapLayers',
              ( ['in'], VARIANT_BOOL, 'TemporaryMapLayers' )),
    COMMETHOD(['propget', helpstring(u'Set whether new map layers are temporary by default.')], HRESULT, 'TemporaryMapLayers',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'TemporaryMapLayers' )),
    COMMETHOD(['propput', helpstring(u'Set whether or not to log the execution of geoprocessing tools.')], HRESULT, 'LogHistory',
              ( ['in'], VARIANT_BOOL, 'LogHistory' )),
    COMMETHOD(['propget', helpstring(u'Set whether or not to log the execution of geoprocessing tools.')], HRESULT, 'LogHistory',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'LogHistory' )),
    COMMETHOD([helpstring(u'Return the GPMessages object which will be messages of the last tool executed.')], HRESULT, 'GetReturnMessages',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPMessages)), 'ppMessages' )),
    COMMETHOD(['propget', helpstring(u'Return the number of messages of the last tool executed.')], HRESULT, 'MessageCount',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD([helpstring(u'Return the message description by index of the last tool executed.')], HRESULT, 'GetMessage',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(BSTR), 'pMessage' )),
    COMMETHOD([helpstring(u'Return the message severity by index of the last tool executed.')], HRESULT, 'GetSeverity',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(c_int), 'pSeverity' )),
    COMMETHOD([helpstring(u'Return the message error code (Error Messages Only) by index of the last tool executed.')], HRESULT, 'GetReturnCode',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(c_int), 'pCode' )),
    COMMETHOD([helpstring(u'Return all of the message descriptions of the last tool executed.')], HRESULT, 'GetMessages',
              ( ['in'], POINTER(VARIANT), 'pSeverity' ),
              ( ['retval', 'out'], POINTER(BSTR), 'pMessages' )),
    COMMETHOD(['propget', helpstring(u'Return the maximum severity of the message of the last tool executed.')], HRESULT, 'MaxSeverity',
              ( ['retval', 'out'], POINTER(c_int), 'pSeverity' )),
    COMMETHOD([helpstring(u'Output an informative message. When running within a script tool, message becomes part of the tool messages, otherwise outputs to console')], HRESULT, 'AddMessage',
              ( ['in'], BSTR, 'message' )),
    COMMETHOD([helpstring(u'Output an error message. When running within a script tool, message becomes part of the tool messages, otherwise outputs to console')], HRESULT, 'AddError',
              ( ['in'], BSTR, 'message' )),
    COMMETHOD([helpstring(u'Output a warning message. When running within a script tool, message becomes part of the tool messages, otherwise outputs to console')], HRESULT, 'AddWarning',
              ( ['in'], BSTR, 'message' )),
    COMMETHOD([helpstring(u'Output message from the last tool executed. When running within a script tool, message becomes part of the tool messages, otherwise outputs to console')], HRESULT, 'AddReturnMessage',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Clear the messages to be returned as tool message when running within a script tool.')], HRESULT, 'ClearMessages'),
    COMMETHOD(['propget', helpstring(u'Return the number of input command line or script tool parameters.')], HRESULT, 'ParameterCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD([helpstring(u'Return the input command line or script tool parameter by index as a GPValue.')], HRESULT, 'GetParameterValue',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(VARIANT), 'pValue' )),
    COMMETHOD([helpstring(u'Set the output script tool parameter by index as a GPValue.')], HRESULT, 'SetParameterValue',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], VARIANT, 'Value' )),
    COMMETHOD([helpstring(u'Test the existence of a given parameter value (GPValue or catalog path) the type of the data is optional.')], HRESULT, 'Exists',
              ( ['in'], VARIANT, 'inputValue' ),
              ( ['in'], POINTER(VARIANT), 'pDataType' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Exists' )),
    COMMETHOD([helpstring(u'Returns the command line usage of a given tool by name.')], HRESULT, 'Usage',
              ( ['in'], BSTR, 'Method' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Usage' )),
    COMMETHOD([helpstring(u'Return the list of feature classes within the current workspace or feature dataset within the workspace.')], HRESULT, 'ListFeatureClasses',
              ( ['in'], BSTR, 'wildCard' ),
              ( ['in'], BSTR, 'FeatureType' ),
              ( ['in'], BSTR, 'dataset' ),
              ( ['retval', 'out'], POINTER(POINTER(IGpEnumList)), 'ppEnumList' )),
    COMMETHOD([helpstring(u'Return the list of feature datasets within the current workspace.')], HRESULT, 'ListDatasets',
              ( ['in'], BSTR, 'wildCard' ),
              ( ['in'], BSTR, 'datasetType' ),
              ( ['retval', 'out'], POINTER(POINTER(IGpEnumList)), 'ppEnumList' )),
    COMMETHOD([helpstring(u'Return the list of workspaces within the current workspace (the workspace can be a folder).')], HRESULT, 'ListWorkspaces',
              ( ['in'], BSTR, 'wildCard' ),
              ( ['in'], BSTR, 'workspaceType' ),
              ( ['retval', 'out'], POINTER(POINTER(IGpEnumList)), 'ppEnumList' )),
    COMMETHOD([helpstring(u'Return the list of tables within the current workspace.')], HRESULT, 'ListTables',
              ( ['in'], BSTR, 'wildCard' ),
              ( ['in'], BSTR, 'tableType' ),
              ( ['retval', 'out'], POINTER(POINTER(IGpEnumList)), 'ppEnumList' )),
    COMMETHOD([helpstring(u'Return the list of rasters within the current workspace.')], HRESULT, 'ListRasters',
              ( ['in'], BSTR, 'wildCard' ),
              ( ['in'], BSTR, 'RasterType' ),
              ( ['retval', 'out'], POINTER(POINTER(IGpEnumList)), 'ppEnumList' )),
    COMMETHOD([helpstring(u'Validate a field name within the given workspace.')], HRESULT, 'ValidateFieldName',
              ( ['in'], BSTR, 'inputFieldName' ),
              ( ['in'], BSTR, 'Workspace' ),
              ( ['retval', 'out'], POINTER(BSTR), 'outputFieldName' )),
    COMMETHOD([helpstring(u'Validate a table or feature class name within the given workspace.')], HRESULT, 'ValidateTableName',
              ( ['in'], BSTR, 'inputTableName' ),
              ( ['in'], BSTR, 'Workspace' ),
              ( ['retval', 'out'], POINTER(BSTR), 'outputTableName' )),
    COMMETHOD([helpstring(u'Qualify a field name within the given workspace.  This will add the connected user and database names.')], HRESULT, 'QualifyFieldName',
              ( ['in'], BSTR, 'inputFieldName' ),
              ( ['in'], BSTR, 'Workspace' ),
              ( ['retval', 'out'], POINTER(BSTR), 'outputFieldName' )),
    COMMETHOD([helpstring(u'Qualify a table name within the given workspace.  This will add the connected user and database names.')], HRESULT, 'QualifyTableName',
              ( ['in'], BSTR, 'inputTableName' ),
              ( ['in'], BSTR, 'Workspace' ),
              ( ['retval', 'out'], POINTER(BSTR), 'outputTableName' )),
    COMMETHOD([helpstring(u'Parse a field name within the given workspace. This will strip the connected user and database names.')], HRESULT, 'ParseFieldName',
              ( ['in'], BSTR, 'inputFieldName' ),
              ( ['in'], BSTR, 'Workspace' ),
              ( ['retval', 'out'], POINTER(BSTR), 'outputParsedName' )),
    COMMETHOD([helpstring(u'Parse a table name within the given workspace. This will strip the connected user and database names.')], HRESULT, 'ParseTableName',
              ( ['in'], BSTR, 'inputTableName' ),
              ( ['in'], BSTR, 'Workspace' ),
              ( ['retval', 'out'], POINTER(BSTR), 'outputParsedName' )),
    COMMETHOD([helpstring(u'Save the current settings (toolboxes, environment values, etc) to a file on disk in XML format.')], HRESULT, 'SaveSettings',
              ( ['in'], BSTR, 'FileName' )),
    COMMETHOD([helpstring(u'Load the current settings (toolboxes, environment values, etc) from a file on disk in XML format.')], HRESULT, 'LoadSettings',
              ( ['in'], BSTR, 'FileName' )),
    COMMETHOD([helpstring(u'Test for the presence of a schema lock (already open for writing) of a given file or dataset.')], HRESULT, 'TestSchemaLock',
              ( ['in'], BSTR, 'FileName' ),
              ( ['retval', 'out'], POINTER(BSTR), 'pStatus' )),
    COMMETHOD([helpstring(u'Register an object to recieve IGeoProcessorEvents.')], HRESULT, 'RegisterGeoProcessorEvents',
              ( ['in'], POINTER(IGeoProcessorEvents), 'pGeoProcessorEvents' )),
    COMMETHOD([helpstring(u'UnRegister an object to stop recieving IGeoProcessorEvents.')], HRESULT, 'UnRegisterGeoProcessorEvents',
              ( ['in'], POINTER(IGeoProcessorEvents), 'pGeoProcessorEvents' )),
    COMMETHOD([helpstring(u'Create a new result object.')], HRESULT, 'CreateResult',
              ( ['in'], BSTR, 'ToolName' ),
              ( ['in'], BSTR, 'JobID' ),
              ( ['retval', 'out'], POINTER(POINTER(IGeoProcessorResult)), 'ppResult' )),
    COMMETHOD([helpstring(u'Is server tool synchronous.')], HRESULT, 'IsSynchronous',
              ( ['in'], BSTR, 'ToolName' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsSynchronous' )),
]
################################################################
## code template for IGeoProcessor implementation
##class IGeoProcessor_Impl(object):
##    def ListToolboxes(self, wildCard):
##        u'Return the list of toolboxes within the current Geoprocessing session.'
##        #return ppGpEnumList
##
##    def AddError(self, message):
##        u'Output an error message. When running within a script tool, message becomes part of the tool messages, otherwise outputs to console'
##        #return 
##
##    def ClearMessages(self):
##        u'Clear the messages to be returned as tool message when running within a script tool.'
##        #return 
##
##    def AddMessage(self, message):
##        u'Output an informative message. When running within a script tool, message becomes part of the tool messages, otherwise outputs to console'
##        #return 
##
##    def RemoveToolbox(self, Toolbox):
##        u'Remove a toolbox from the current Geoprocessing session by catalog path.'
##        #return 
##
##    def _get(self):
##        u'Set whether new map layers are temporary by default.'
##        #return TemporaryMapLayers
##    def _set(self, TemporaryMapLayers):
##        u'Set whether new map layers are temporary by default.'
##    TemporaryMapLayers = property(_get, _set, doc = _set.__doc__)
##
##    def GetDataElement(self, inputValue, pDataType):
##        u'Make a dataelement from the given value.'
##        #return ppGpDescribe
##
##    def AddWarning(self, message):
##        u'Output a warning message. When running within a script tool, message becomes part of the tool messages, otherwise outputs to console'
##        #return 
##
##    def QualifyFieldName(self, inputFieldName, Workspace):
##        u'Qualify a field name within the given workspace.  This will add the connected user and database names.'
##        #return outputFieldName
##
##    def Usage(self, Method):
##        u'Returns the command line usage of a given tool by name.'
##        #return Usage
##
##    def CreateResult(self, ToolName, JobID):
##        u'Create a new result object.'
##        #return ppResult
##
##    def GetEnvironmentValue(self, environmentName):
##        u'Retrieve the value of an environment by name. The properties of the current Geoprocessing session.'
##        #return pvarResult
##
##    def GetReturnCode(self, Index):
##        u'Return the message error code (Error Messages Only) by index of the last tool executed.'
##        #return pCode
##
##    def ValidateTableName(self, inputTableName, Workspace):
##        u'Validate a table or feature class name within the given workspace.'
##        #return outputTableName
##
##    def QualifyTableName(self, inputTableName, Workspace):
##        u'Qualify a table name within the given workspace.  This will add the connected user and database names.'
##        #return outputTableName
##
##    def ListDatasets(self, wildCard, datasetType):
##        u'Return the list of feature datasets within the current workspace.'
##        #return ppEnumList
##
##    def TestSchemaLock(self, FileName):
##        u'Test for the presence of a schema lock (already open for writing) of a given file or dataset.'
##        #return pStatus
##
##    @property
##    def MaxSeverity(self):
##        u'Return the maximum severity of the message of the last tool executed.'
##        #return pSeverity
##
##    def UnRegisterGeoProcessorEvents(self, pGeoProcessorEvents):
##        u'UnRegister an object to stop recieving IGeoProcessorEvents.'
##        #return 
##
##    def SetParameterValue(self, Index, Value):
##        u'Set the output script tool parameter by index as a GPValue.'
##        #return 
##
##    def IsSynchronous(self, ToolName):
##        u'Is server tool synchronous.'
##        #return IsSynchronous
##
##    def GetMessages(self, pSeverity):
##        u'Return all of the message descriptions of the last tool executed.'
##        #return pMessages
##
##    def LoadSettings(self, FileName):
##        u'Load the current settings (toolboxes, environment values, etc) from a file on disk in XML format.'
##        #return 
##
##    def AddReturnMessage(self, Index):
##        u'Output message from the last tool executed. When running within a script tool, message becomes part of the tool messages, otherwise outputs to console'
##        #return 
##
##    def GetSeverity(self, Index):
##        u'Return the message severity by index of the last tool executed.'
##        #return pSeverity
##
##    def _get(self):
##        u'Set whether resulting output datasets should be added to the application display.'
##        #return AddToMap
##    def _set(self, AddToMap):
##        u'Set whether resulting output datasets should be added to the application display.'
##    AddOutputsToMap = property(_get, _set, doc = _set.__doc__)
##
##    def ParseTableName(self, inputTableName, Workspace):
##        u'Parse a table name within the given workspace. This will strip the connected user and database names.'
##        #return outputParsedName
##
##    def Execute(self, Name, ipValues, pTrackCancel):
##        u'Execute a tool within the current Geoprocessing session.'
##        #return ppResult
##
##    @property
##    def MessageCount(self):
##        u'Return the number of messages of the last tool executed.'
##        #return pCount
##
##    def SaveSettings(self, FileName):
##        u'Save the current settings (toolboxes, environment values, etc) to a file on disk in XML format.'
##        #return 
##
##    def ParseFieldName(self, inputFieldName, Workspace):
##        u'Parse a field name within the given workspace. This will strip the connected user and database names.'
##        #return outputParsedName
##
##    def ListFeatureClasses(self, wildCard, FeatureType, dataset):
##        u'Return the list of feature classes within the current workspace or feature dataset within the workspace.'
##        #return ppEnumList
##
##    def ValidateFieldName(self, inputFieldName, Workspace):
##        u'Validate a field name within the given workspace.'
##        #return outputFieldName
##
##    def GetMessage(self, Index):
##        u'Return the message description by index of the last tool executed.'
##        #return pMessage
##
##    def ListTables(self, wildCard, tableType):
##        u'Return the list of tables within the current workspace.'
##        #return ppEnumList
##
##    def GetReturnMessages(self):
##        u'Return the GPMessages object which will be messages of the last tool executed.'
##        #return ppMessages
##
##    def _get(self):
##        u'Set whether or not to log the execution of geoprocessing tools.'
##        #return LogHistory
##    def _set(self, LogHistory):
##        u'Set whether or not to log the execution of geoprocessing tools.'
##    LogHistory = property(_get, _set, doc = _set.__doc__)
##
##    def Validate(self, Name, ipValues, bUpdateValues):
##        u'Validate the parameters (input) of a tool within the current Geoprocessing session.'
##        #return ppMessages
##
##    def ListWorkspaces(self, wildCard, workspaceType):
##        u'Return the list of workspaces within the current workspace (the workspace can be a folder).'
##        #return ppEnumList
##
##    def Exists(self, inputValue, pDataType):
##        u'Test the existence of a given parameter value (GPValue or catalog path) the type of the data is optional.'
##        #return Exists
##
##    def ListTools(self, wildCard):
##        u'Return the list of tools within the current Geoprocessing session.'
##        #return ppGpEnumList
##
##    @property
##    def ParameterCount(self):
##        u'Return the number of input command line or script tool parameters.'
##        #return Count
##
##    def ResetEnvironments(self):
##        u'Reset the environments to their initial state.'
##        #return 
##
##    def GetParameterValue(self, Index):
##        u'Return the input command line or script tool parameter by index as a GPValue.'
##        #return pValue
##
##    def _get(self):
##        u'Set the overwrite outputs flag within the current Geoprocessing session. True means outputs of tools will be overwritten.'
##        #return pOverrideOutput
##    def _set(self, pOverrideOutput):
##        u'Set the overwrite outputs flag within the current Geoprocessing session. True means outputs of tools will be overwritten.'
##    OverwriteOutput = property(_get, _set, doc = _set.__doc__)
##
##    def AddToolbox(self, Toolbox):
##        u'Add a toolbox to the current Geoprocessing session by catalog path.'
##        #return 
##
##    def SetEnvironmentValue(self, environmentName, Value):
##        u'Update the value of an environment by name. The properties of the current Geoprocessing session.'
##        #return 
##
##    def ListEnvironments(self, wildCard):
##        u'Return the list of environments (properties) within the current Geoprocessing session.'
##        #return ppGpEnumList
##
##    def RegisterGeoProcessorEvents(self, pGeoProcessorEvents):
##        u'Register an object to recieve IGeoProcessorEvents.'
##        #return 
##
##    def Open(self, Value):
##        u'Open an objector a namestring. Example a DEFeatureClass object will return an IFeatureClass.'
##        #return ppResult
##
##    def ListRasters(self, wildCard, RasterType):
##        u'Return the list of rasters within the current workspace.'
##        #return ppEnumList
##

IGpPointObject._methods_ = [
    COMMETHOD([dispid(1), helpstring(u'The X coordinate.'), 'propget'], HRESULT, 'X',
              ( ['retval', 'out'], POINTER(c_double), 'X' )),
    COMMETHOD([dispid(1), helpstring(u'The X coordinate.'), 'propput'], HRESULT, 'X',
              ( ['in'], c_double, 'X' )),
    COMMETHOD([dispid(2), helpstring(u'The Y coordinate.'), 'propget'], HRESULT, 'Y',
              ( ['retval', 'out'], POINTER(c_double), 'Y' )),
    COMMETHOD([dispid(2), helpstring(u'The Y coordinate.'), 'propput'], HRESULT, 'Y',
              ( ['in'], c_double, 'Y' )),
    COMMETHOD([dispid(3), helpstring(u'The M coordinate.'), 'propget'], HRESULT, 'M',
              ( ['retval', 'out'], POINTER(c_double), 'M' )),
    COMMETHOD([dispid(3), helpstring(u'The M coordinate.'), 'propput'], HRESULT, 'M',
              ( ['in'], c_double, 'M' )),
    COMMETHOD([dispid(4), helpstring(u'The Z coordinate.'), 'propget'], HRESULT, 'Z',
              ( ['retval', 'out'], POINTER(c_double), 'Z' )),
    COMMETHOD([dispid(4), helpstring(u'The Z coordinate.'), 'propput'], HRESULT, 'Z',
              ( ['in'], c_double, 'Z' )),
    COMMETHOD([dispid(5), helpstring(u'The ID coordinate.'), 'propget'], HRESULT, 'ID',
              ( ['retval', 'out'], POINTER(c_int), 'ID' )),
    COMMETHOD([dispid(5), helpstring(u'The ID coordinate.'), 'propput'], HRESULT, 'ID',
              ( ['in'], c_int, 'ID' )),
    COMMETHOD([dispid(6), helpstring(u'Set point attributes to that of the given point geometry object.')], HRESULT, 'SetPoint',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'pPoint' )),
    COMMETHOD([dispid(7), helpstring(u'Clones the point object.')], HRESULT, 'Clone',
              ( ['in'], POINTER(IGpPointObject), 'pSrcObj' )),
]
################################################################
## code template for IGpPointObject implementation
##class IGpPointObject_Impl(object):
##    def SetPoint(self, pPoint):
##        u'Set point attributes to that of the given point geometry object.'
##        #return 
##
##    def _get(self):
##        u'The M coordinate.'
##        #return M
##    def _set(self, M):
##        u'The M coordinate.'
##    M = property(_get, _set, doc = _set.__doc__)
##
##    def Clone(self, pSrcObj):
##        u'Clones the point object.'
##        #return 
##
##    def _get(self):
##        u'The Y coordinate.'
##        #return Y
##    def _set(self, Y):
##        u'The Y coordinate.'
##    Y = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The X coordinate.'
##        #return X
##    def _set(self, X):
##        u'The X coordinate.'
##    X = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The Z coordinate.'
##        #return Z
##    def _set(self, Z):
##        u'The Z coordinate.'
##    Z = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The ID coordinate.'
##        #return ID
##    def _set(self, ID):
##        u'The ID coordinate.'
##    ID = property(_get, _set, doc = _set.__doc__)
##

class GPRecordSetType(CoClass):
    u'Record Set Data Type.'
    _reg_clsid_ = GUID('{8E899C4E-B519-4ADD-AE4F-A16DF1E16075}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPRecordSetType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPRecordSetType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

IEnumGPToolbox._methods_ = [
    COMMETHOD([helpstring(u'Returns the next toolbox in the enumeration.')], HRESULT, 'Next',
              ( ['retval', 'out'], POINTER(POINTER(IGPToolbox)), 'Tool' )),
    COMMETHOD([helpstring(u'Resets the current position of the enumeration.')], HRESULT, 'Reset'),
]
################################################################
## code template for IEnumGPToolbox implementation
##class IEnumGPToolbox_Impl(object):
##    def Reset(self):
##        u'Resets the current position of the enumeration.'
##        #return 
##
##    def Next(self):
##        u'Returns the next toolbox in the enumeration.'
##        #return Tool
##

class GPRecordSet(CoClass):
    u'GPRecordSet Class'
    _reg_clsid_ = GUID('{38DB67C2-EBC1-461A-8729-011BB7DBAF0C}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPRecordSet._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue, IGPRecordSet, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize]

IGPPolygon._methods_ = [
    COMMETHOD(['propget', helpstring(u'The number of points in the polygon.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD([helpstring(u'Returns the point at the given index.')], HRESULT, 'GetPoint',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IGPPoint)), 'Point' )),
    COMMETHOD([helpstring(u'Adds a point to the polygon.')], HRESULT, 'AddPoint',
              ( ['in'], POINTER(IGPPoint), 'Point' )),
    COMMETHOD([helpstring(u'Returns the x/y coordinates of the point at the given index.')], HRESULT, 'GetCoords',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(c_double), 'X' ),
              ( ['out'], POINTER(c_double), 'Y' )),
    COMMETHOD([helpstring(u'Adds a point to the polygon given the x/y coordinates.')], HRESULT, 'AddCoords',
              ( ['in'], c_double, 'X' ),
              ( ['in'], c_double, 'Y' )),
]
################################################################
## code template for IGPPolygon implementation
##class IGPPolygon_Impl(object):
##    @property
##    def Count(self):
##        u'The number of points in the polygon.'
##        #return Count
##
##    def AddPoint(self, Point):
##        u'Adds a point to the polygon.'
##        #return 
##
##    def AddCoords(self, X, Y):
##        u'Adds a point to the polygon given the x/y coordinates.'
##        #return 
##
##    def GetPoint(self, Index):
##        u'Returns the point at the given index.'
##        #return Point
##
##    def GetCoords(self, Index):
##        u'Returns the x/y coordinates of the point at the given index.'
##        #return X, Y
##

IGPLinearUnit2._methods_ = [
    COMMETHOD([helpstring(u'Sets the type of linear unit to be used as the default when the linear unit control is displayed.')], HRESULT, 'SetDefaultUnits',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits, 'Units' )),
]
################################################################
## code template for IGPLinearUnit2 implementation
##class IGPLinearUnit2_Impl(object):
##    def SetDefaultUnits(self, Units):
##        u'Sets the type of linear unit to be used as the default when the linear unit control is displayed.'
##        #return 
##

class GPRasterFormulated(CoClass):
    u'Geoprocessor GP RasterFormulated object.'
    _reg_clsid_ = GUID('{FFA58E93-059A-435F-AF2B-5A348A882C29}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPRasterFormulated._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPRasterFormulated, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDEGeoDataset, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

class GPRouteMeasureEventProperties(CoClass):
    u'Geoprocessing route measure event properties value object.'
    _reg_clsid_ = GUID('{35527F95-BB45-4BCE-A813-EA1369E735BC}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPRouteMeasureEventProperties._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, IGPRouteMeasureEventProperties]

IGPCodedValueDomainProperty._methods_ = [
    COMMETHOD(['propget', helpstring(u'CodedValue Domain Property Name.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'CodedValue Domain Property Name.')], HRESULT, 'Name',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'CodedValue Domain Property Value.')], HRESULT, 'Value',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue)), 'Value' )),
    COMMETHOD(['propputref', helpstring(u'CodedValue Domain Property Value.')], HRESULT, 'Value',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'Value' )),
]
################################################################
## code template for IGPCodedValueDomainProperty implementation
##class IGPCodedValueDomainProperty_Impl(object):
##    def _get(self):
##        u'CodedValue Domain Property Name.'
##        #return Name
##    def _set(self, Name):
##        u'CodedValue Domain Property Name.'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def Value(self, Value):
##        u'CodedValue Domain Property Value.'
##        #return 
##

class GPJobServer(CoClass):
    u'GP Job Server Class.'
    _reg_clsid_ = GUID('{79DB0749-8845-40F6-8B9A-53402F2F6344}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPJobServer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IObjectConstruct, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IRequestHandler, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IRequestHandler2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IObjectActivate, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILogSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, comtypes.gen._18F2FC71_6B30_45B9_B101_037A8B868B66_0_10_2.IServerObject, IGPJobServerExe, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IRESTRequestHandler]

IGPPolygon2._methods_ = [
    COMMETHOD(['propget', helpstring(u'The actual the polygon object.')], HRESULT, 'Polygon',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPolygon)), 'Polygon' )),
    COMMETHOD(['propputref', helpstring(u'The actual the polygon object.')], HRESULT, 'Polygon',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPolygon), 'Polygon' )),
]
################################################################
## code template for IGPPolygon2 implementation
##class IGPPolygon2_Impl(object):
##    def Polygon(self, Polygon):
##        u'The actual the polygon object.'
##        #return 
##

class GPRouteIDFieldsDomain(CoClass):
    u'Object for filtering acceptable route ID fields.'
    _reg_clsid_ = GUID('{4A4F70B0-913C-4A82-A33F-E190FFA409EA}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPRouteIDFieldsDomain._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDomain, IGPFieldDomain, IGPRouteIDFieldsDomain]

class GPRasterGDBEnvCompression(CoClass):
    u'GeoProcessor Spatial GDB Environment Compression object.'
    _reg_clsid_ = GUID('{21AFA897-84AE-411F-9BF9-140448E3B070}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPRasterGDBEnvCompression._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPRasterGDBEnvCompression, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

class DEType(CoClass):
    u'Data Element Data Type.'
    _reg_clsid_ = GUID('{7949875A-9A3F-4FB5-B4F3-388739153422}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
DEType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataElementType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGxFilterInfo, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

IDataElementDomain._methods_ = [
    COMMETHOD(['propget', helpstring(u'Count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propget', helpstring(u'Data element type.')], HRESULT, 'Type',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(BSTR), 'pType' )),
    COMMETHOD([helpstring(u'Add a data element type.')], HRESULT, 'AddType',
              ( ['in'], BSTR, 'Type' )),
    COMMETHOD([helpstring(u'Remove a data element type.')], HRESULT, 'DeleteType',
              ( ['in'], BSTR, 'Type' )),
    COMMETHOD([helpstring(u'Make list.')], HRESULT, 'MakeList',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'pValue' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'ppValues' )),
]
################################################################
## code template for IDataElementDomain implementation
##class IDataElementDomain_Impl(object):
##    @property
##    def Count(self):
##        u'Count.'
##        #return pCount
##
##    def MakeList(self, pValue):
##        u'Make list.'
##        #return ppValues
##
##    def DeleteType(self, Type):
##        u'Remove a data element type.'
##        #return 
##
##    @property
##    def Type(self, Index):
##        u'Data element type.'
##        #return pType
##
##    def AddType(self, Type):
##        u'Add a data element type.'
##        #return 
##

class GPSpatialReferenceType(CoClass):
    u'Geoprocessing Spatial Reference Data Type.'
    _reg_clsid_ = GUID('{B58872AC-834D-443C-B05A-E4CBDEA4E3A1}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPSpatialReferenceType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, IGPSpatialReferenceType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, IGPCoordinateSystemType, IGPXYDomainType, IGPZDomainType]

IMdParameter._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The value of the parameter object.')], HRESULT, 'Value',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'rhs' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the model parameter has been marked for validation/execution.')], HRESULT, 'Marked',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Marked' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the model parameter has been marked for validation/execution.')], HRESULT, 'Marked',
              ( ['in'], VARIANT_BOOL, 'Marked' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the model parameter is valid.')], HRESULT, 'Valid',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Valid' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the model parameter is valid.')], HRESULT, 'Valid',
              ( ['in'], VARIANT_BOOL, 'Valid' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the model parameter is current (i.e., has been created).')], HRESULT, 'Current',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Current' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the model parameter is current (i.e., has been created).')], HRESULT, 'Current',
              ( ['in'], VARIANT_BOOL, 'Current' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the model parameter is a derived value.')], HRESULT, 'Derived',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Derived' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the model parameter is a derived value.')], HRESULT, 'Derived',
              ( ['in'], VARIANT_BOOL, 'Derived' )),
    COMMETHOD([helpstring(u'Initializes the model parameter using the given parameter as a template.')], HRESULT, 'Init',
              ( ['in'], POINTER(IGPParameter), 'definition' )),
    COMMETHOD([helpstring(u'Validates the current value of the model parameter.')], HRESULT, 'Validate',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPMessage)), 'message' )),
]
################################################################
## code template for IMdParameter implementation
##class IMdParameter_Impl(object):
##    def _get(self):
##        u'Indicates if the model parameter is a derived value.'
##        #return Derived
##    def _set(self, Derived):
##        u'Indicates if the model parameter is a derived value.'
##    Derived = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the model parameter has been marked for validation/execution.'
##        #return Marked
##    def _set(self, Marked):
##        u'Indicates if the model parameter has been marked for validation/execution.'
##    Marked = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the model parameter is current (i.e., has been created).'
##        #return Current
##    def _set(self, Current):
##        u'Indicates if the model parameter is current (i.e., has been created).'
##    Current = property(_get, _set, doc = _set.__doc__)
##
##    def Init(self, definition):
##        u'Initializes the model parameter using the given parameter as a template.'
##        #return 
##
##    def _get(self):
##        u'Indicates if the model parameter is valid.'
##        #return Valid
##    def _set(self, Valid):
##        u'Indicates if the model parameter is valid.'
##    Valid = property(_get, _set, doc = _set.__doc__)
##
##    def Value(self, rhs):
##        u'The value of the parameter object.'
##        #return 
##
##    def Validate(self):
##        u'Validates the current value of the model parameter.'
##        #return message
##

class DEDatasetType(CoClass):
    u'Dataset Data Element Data Type.'
    _reg_clsid_ = GUID('{F01AFA4E-875B-4E31-AEBF-184F924724BF}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
DEDatasetType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDEDatasetType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataElementType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGxFilterInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class GPLayersAndTablesDomain(CoClass):
    u'The GpLayers and Tables domain object.'
    _reg_clsid_ = GUID('{ECE7A40D-C09C-4DA1-BE5D-1A6D17FE6A82}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPLayersAndTablesDomain._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPLayersAndTablesDomain, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGxFilterInfo, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDomain, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

IGPFeatureLayer._methods_ = [
    COMMETHOD(['propget', helpstring(u'The feature class of the feature layer.')], HRESULT, 'DEFeatureClass',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDEFeatureClass)), 'ppDEFeatureClass' )),
    COMMETHOD(['propputref', helpstring(u'The feature class of the feature layer.')], HRESULT, 'DEFeatureClass',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDEFeatureClass), 'ppDEFeatureClass' )),
    COMMETHOD(['propget', helpstring(u'The field info of the feature layer.')], HRESULT, 'FieldInfo',
              ( ['retval', 'out'], POINTER(POINTER(IGPFieldInfo)), 'FieldMap' )),
    COMMETHOD(['propputref', helpstring(u'The field info of the feature layer.')], HRESULT, 'FieldInfo',
              ( ['in'], POINTER(IGPFieldInfo), 'FieldMap' )),
    COMMETHOD(['propget', helpstring(u'The selection set of the feature layer.')], HRESULT, 'FIDSet',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFIDSet)), 'ppFIDSet' )),
    COMMETHOD(['propputref', helpstring(u'The selection set of the feature layer.')], HRESULT, 'FIDSet',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFIDSet), 'ppFIDSet' )),
    COMMETHOD(['propget', helpstring(u'The where clause of the feature layer.')], HRESULT, 'WhereClause',
              ( ['retval', 'out'], POINTER(BSTR), 'pWhereClause' )),
    COMMETHOD(['propput', helpstring(u'The where clause of the feature layer.')], HRESULT, 'WhereClause',
              ( ['in'], BSTR, 'pWhereClause' )),
    COMMETHOD([helpstring(u'Add on OID to the FIDSet of the feature layer.')], HRESULT, 'AddToFIDSet',
              ( ['in'], c_int, 'oid' )),
]
################################################################
## code template for IGPFeatureLayer implementation
##class IGPFeatureLayer_Impl(object):
##    def FieldInfo(self, FieldMap):
##        u'The field info of the feature layer.'
##        #return 
##
##    def AddToFIDSet(self, oid):
##        u'Add on OID to the FIDSet of the feature layer.'
##        #return 
##
##    def _get(self):
##        u'The where clause of the feature layer.'
##        #return pWhereClause
##    def _set(self, pWhereClause):
##        u'The where clause of the feature layer.'
##    WhereClause = property(_get, _set, doc = _set.__doc__)
##
##    def DEFeatureClass(self, ppDEFeatureClass):
##        u'The feature class of the feature layer.'
##        #return 
##
##    def FIDSet(self, ppFIDSet):
##        u'The selection set of the feature layer.'
##        #return 
##

IGPVariableManager._methods_ = [
    COMMETHOD([helpstring(u'Adds a variable.')], HRESULT, 'Add',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPVariable), 'pVariable' )),
    COMMETHOD([helpstring(u'Removes a variable.')], HRESULT, 'Remove',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD([helpstring(u'Removes all variables.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Finds a variable.')], HRESULT, 'Find',
              ( ['in'], BSTR, 'Name' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPVariable)), 'ppVariable' )),
    COMMETHOD(['propget', helpstring(u'Returns an array of all of the variables.')], HRESULT, 'Variables',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'ppVariables' )),
]
################################################################
## code template for IGPVariableManager implementation
##class IGPVariableManager_Impl(object):
##    def RemoveAll(self):
##        u'Removes all variables.'
##        #return 
##
##    @property
##    def Variables(self):
##        u'Returns an array of all of the variables.'
##        #return ppVariables
##
##    def Add(self, pVariable):
##        u'Adds a variable.'
##        #return 
##
##    def Find(self, Name):
##        u'Finds a variable.'
##        #return ppVariable
##
##    def Remove(self, Name):
##        u'Removes a variable.'
##        #return 
##

class GPFieldMappingType(CoClass):
    u'Geoprocessing Field Map Data Type.'
    _reg_clsid_ = GUID('{92AD7ED4-25DE-45BC-B460-BEE20AFF7769}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPFieldMappingType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, IGPFieldMappingType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class GPToolboxName(CoClass):
    u'Light-weight object referencing a geoprocessing toolbox.'
    _reg_clsid_ = GUID('{FDF8DEB2-EB91-479D-A410-854BA8EF6349}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPToolboxName._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDatasetName, IGPToolboxName, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ISQLPrivilege, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDatasetName2]

class IGPUtilities4(IGPUtilities3):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing utilities object.'
    _iid_ = GUID('{BF7053F9-A5A4-4128-A85F-7459B1DD46CD}')
    _idlflags_ = ['oleautomation']
IGPUtilities4._methods_ = [
    COMMETHOD([helpstring(u'Returns the search cursor for the value object.')], HRESULT, 'GetSearchCursor',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'pValue' ),
              ( ['in'], VARIANT_BOOL, 'recycling' ),
              ( ['in'], POINTER(IGPEnvironmentManager), 'pEnvMgr' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ICursor)), 'ppCursor' )),
    COMMETHOD([helpstring(u'Returns the update cursor for the value object.')], HRESULT, 'GetUpdateCursor',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'pValue' ),
              ( ['in'], VARIANT_BOOL, 'recycling' ),
              ( ['in'], POINTER(IGPEnvironmentManager), 'pEnvMgr' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ICursor)), 'ppCursor' )),
    COMMETHOD([helpstring(u'Returns the selection set for the value object.')], HRESULT, 'GetSelectionSet',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'pValue' ),
              ( ['in'], POINTER(IUnknown), 'pEnvMgr_Extent' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ISelectionSet)), 'ppSelSet' )),
]
################################################################
## code template for IGPUtilities4 implementation
##class IGPUtilities4_Impl(object):
##    def GetSearchCursor(self, pValue, recycling, pEnvMgr):
##        u'Returns the search cursor for the value object.'
##        #return ppCursor
##
##    def GetUpdateCursor(self, pValue, recycling, pEnvMgr):
##        u'Returns the update cursor for the value object.'
##        #return ppCursor
##
##    def GetSelectionSet(self, pValue, pEnvMgr_Extent):
##        u'Returns the selection set for the value object.'
##        #return ppSelSet
##

IGPLine._methods_ = [
    COMMETHOD(['propget', helpstring(u'The number of points in the line.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD([helpstring(u'Returns the point at the given index.')], HRESULT, 'GetPoint',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IGPPoint)), 'Point' )),
    COMMETHOD([helpstring(u'Adds a point to the line.')], HRESULT, 'AddPoint',
              ( ['in'], POINTER(IGPPoint), 'Point' )),
    COMMETHOD([helpstring(u'Returns the x/y coordinates of the point at the given index.')], HRESULT, 'GetCoords',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(c_double), 'X' ),
              ( ['out'], POINTER(c_double), 'Y' )),
    COMMETHOD([helpstring(u'Adds a point to the line given the x/y coordinates.')], HRESULT, 'AddCoords',
              ( ['in'], c_double, 'X' ),
              ( ['in'], c_double, 'Y' )),
]
################################################################
## code template for IGPLine implementation
##class IGPLine_Impl(object):
##    @property
##    def Count(self):
##        u'The number of points in the line.'
##        #return Count
##
##    def AddPoint(self, Point):
##        u'Adds a point to the line.'
##        #return 
##
##    def AddCoords(self, X, Y):
##        u'Adds a point to the line given the x/y coordinates.'
##        #return 
##
##    def GetPoint(self, Index):
##        u'Returns the point at the given index.'
##        #return Point
##
##    def GetCoords(self, Index):
##        u'Returns the x/y coordinates of the point at the given index.'
##        #return X, Y
##

class GPRasterGDBEnvCompressionType(CoClass):
    u'GeoProcessor Spatial GDB Environment Compression Type object.'
    _reg_clsid_ = GUID('{3A6E3231-E3E8-4827-B8BD-49E17B43D1A9}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPRasterGDBEnvCompressionType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPRasterGDBEnvCompressionType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

IGPFieldInfoDomain._methods_ = [
    COMMETHOD(['propget', helpstring(u'Coded Value Domain.')], HRESULT, 'CodedValueDomain',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPCodedValueDomain)), 'ppDomain' )),
    COMMETHOD(['propputref', helpstring(u'Coded Value Domain.')], HRESULT, 'CodedValueDomain',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPCodedValueDomain), 'ppDomain' )),
]
################################################################
## code template for IGPFieldInfoDomain implementation
##class IGPFieldInfoDomain_Impl(object):
##    def CodedValueDomain(self, ppDomain):
##        u'Coded Value Domain.'
##        #return 
##

class GPExtentType(CoClass):
    u'Geoprocessing Extent Data Type.'
    _reg_clsid_ = GUID('{A523C978-BE34-4E9E-9439-71F483F4538F}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPExtentType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of the geoprocessing extent data type.'
    _iid_ = GUID('{30B15674-DF53-43CF-B2E4-1419E13CB31B}')
    _idlflags_ = ['oleautomation']
GPExtentType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPExtentType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class GPUpdateMapServerCache(CoClass):
    u'Update pre-rendered tile cache for the MapServer.'
    _reg_clsid_ = GUID('{7F8CE87F-9BD2-40F8-8DBB-2224C51222A0}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPUpdateMapServerCache._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPFunction]

class GPRasterGDBEnvPyramid(CoClass):
    u'GeoProcessor Spatial GDB Environment Compression object.'
    _reg_clsid_ = GUID('{23FB67CA-72AD-4A7B-B4AC-3705C1C5D6CF}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPRasterGDBEnvPyramid._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPRasterGDBEnvPyramid3, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

IGPWorkspaceDomain._methods_ = [
    COMMETHOD(['propget', helpstring(u'Count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propget', helpstring(u'Workspace type.')], HRESULT, 'Type',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriWorkspaceType), 'pType' )),
    COMMETHOD([helpstring(u'Add a workspace type.')], HRESULT, 'AddType',
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriWorkspaceType, 'Type' )),
    COMMETHOD([helpstring(u'Remove a workspace type.')], HRESULT, 'DeleteType',
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriWorkspaceType, 'Type' )),
    COMMETHOD([helpstring(u'Make list.')], HRESULT, 'MakeList',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'pValue' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'ppValues' )),
]
################################################################
## code template for IGPWorkspaceDomain implementation
##class IGPWorkspaceDomain_Impl(object):
##    @property
##    def Count(self):
##        u'Count.'
##        #return pCount
##
##    def MakeList(self, pValue):
##        u'Make list.'
##        #return ppValues
##
##    def DeleteType(self, Type):
##        u'Remove a workspace type.'
##        #return 
##
##    @property
##    def Type(self, Index):
##        u'Workspace type.'
##        #return pType
##
##    def AddType(self, Type):
##        u'Add a workspace type.'
##        #return 
##

IEnumGeometryType._methods_ = [
    COMMETHOD([helpstring(u'Returns the next esriGeometryType in the enumeric object.')], HRESULT, 'Next',
              ( ['retval', 'out'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.esriGeometryType), 'pType' )),
    COMMETHOD([helpstring(u'Resets the enumeric object.')], HRESULT, 'Reset'),
]
################################################################
## code template for IEnumGeometryType implementation
##class IEnumGeometryType_Impl(object):
##    def Reset(self):
##        u'Resets the enumeric object.'
##        #return 
##
##    def Next(self):
##        u'Returns the next esriGeometryType in the enumeric object.'
##        #return pType
##

class GPRasterGDBEnvStatisticsType(CoClass):
    u'GeoProcessor Spatial GDB Environment Compression Type object.'
    _reg_clsid_ = GUID('{35907611-034A-4CA4-A707-4F98ED961EFA}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPRasterGDBEnvStatisticsType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPRasterGDBEnvStatisticsType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

IGPINFOExpression._methods_ = [
]
################################################################
## code template for IGPINFOExpression implementation
##class IGPINFOExpression_Impl(object):

IGPCalculatorExpression._methods_ = [
]
################################################################
## code template for IGPCalculatorExpression implementation
##class IGPCalculatorExpression_Impl(object):

IGpFieldInfoObject._methods_ = [
    COMMETHOD([dispid(1), helpstring(u'Add a field.')], HRESULT, 'AddField',
              ( ['in'], BSTR, 'FieldName' ),
              ( ['in'], BSTR, 'newFieldName' ),
              ( ['in'], BSTR, 'Visible' ),
              ( ['in'], BSTR, 'SplitRule' )),
    COMMETHOD([dispid(2), helpstring(u'The number of fields.'), 'propget'], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD([dispid(3), helpstring(u'Get the field name by index.')], HRESULT, 'GetFieldName',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD([dispid(4), helpstring(u'Get the new field name by index.')], HRESULT, 'GetNewName',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD([dispid(5), helpstring(u'Get the split rule by index.')], HRESULT, 'GetSplitRule',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(BSTR), 'rule' )),
    COMMETHOD([dispid(6), helpstring(u'Get the visible flag by index.')], HRESULT, 'GetVisible',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Visible' )),
    COMMETHOD([dispid(7), helpstring(u'Set the field name by index.')], HRESULT, 'SetFieldName',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD([dispid(8), helpstring(u'Set the new field name by index.')], HRESULT, 'SetNewName',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD([dispid(9), helpstring(u'Set the split rule by index.')], HRESULT, 'SetSplitRule',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'rule' )),
    COMMETHOD([dispid(10), helpstring(u'Set the visible flag by index.')], HRESULT, 'SetVisible',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Visible' )),
    COMMETHOD([dispid(11), helpstring(u'Remove a field.')], HRESULT, 'RemoveField',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([dispid(12), helpstring(u'Find a field index by name.')], HRESULT, 'FindFieldByName',
              ( ['in'], BSTR, 'FieldName' ),
              ( ['retval', 'out'], POINTER(c_int), 'Index' )),
    COMMETHOD([dispid(13), helpstring(u'Find a field index by new name.')], HRESULT, 'FindFieldByNewName',
              ( ['in'], BSTR, 'FieldName' ),
              ( ['retval', 'out'], POINTER(c_int), 'Index' )),
    COMMETHOD([dispid(14), helpstring(u'Load the Value Table from a string.')], HRESULT, 'LoadFromString',
              ( ['in'], BSTR, 'Value' )),
    COMMETHOD([dispid(15), helpstring(u'Export the Value Table to a string.')], HRESULT, 'ExportToString',
              ( ['retval', 'out'], POINTER(BSTR), 'Value' )),
]
################################################################
## code template for IGpFieldInfoObject implementation
##class IGpFieldInfoObject_Impl(object):
##    @property
##    def Count(self):
##        u'The number of fields.'
##        #return Count
##
##    def GetNewName(self, Index):
##        u'Get the new field name by index.'
##        #return Name
##
##    def ExportToString(self):
##        u'Export the Value Table to a string.'
##        #return Value
##
##    def SetNewName(self, Index, Name):
##        u'Set the new field name by index.'
##        #return 
##
##    def AddField(self, FieldName, newFieldName, Visible, SplitRule):
##        u'Add a field.'
##        #return 
##
##    def FindFieldByName(self, FieldName):
##        u'Find a field index by name.'
##        #return Index
##
##    def RemoveField(self, Index):
##        u'Remove a field.'
##        #return 
##
##    def GetFieldName(self, Index):
##        u'Get the field name by index.'
##        #return Name
##
##    def FindFieldByNewName(self, FieldName):
##        u'Find a field index by new name.'
##        #return Index
##
##    def GetVisible(self, Index):
##        u'Get the visible flag by index.'
##        #return Visible
##
##    def SetFieldName(self, Index, Name):
##        u'Set the field name by index.'
##        #return 
##
##    def GetSplitRule(self, Index):
##        u'Get the split rule by index.'
##        #return rule
##
##    def SetSplitRule(self, Index, rule):
##        u'Set the split rule by index.'
##        #return 
##
##    def LoadFromString(self, Value):
##        u'Load the Value Table from a string.'
##        #return 
##
##    def SetVisible(self, Index, Visible):
##        u'Set the visible flag by index.'
##        #return 
##

class GPXYDomainType(CoClass):
    u'Geoprocessing XY Domain Data Type.'
    _reg_clsid_ = GUID('{2CE48D8A-83E0-47B4-A979-636C46DB9C4B}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPXYDomainType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, IGPXYDomainType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

IMdVariable._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if the variable should be added to the application display.')], HRESULT, 'AddToDisplay',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'AddToDisplay' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the variable should be added to the application display.')], HRESULT, 'AddToDisplay',
              ( ['in'], VARIANT_BOOL, 'AddToDisplay' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the data specified by the variable is considered intermediate data.')], HRESULT, 'Intermediate',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Intermediate' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the data specified by the variable is considered intermediate data.')], HRESULT, 'Intermediate',
              ( ['in'], VARIANT_BOOL, 'Intermediate' )),
]
################################################################
## code template for IMdVariable implementation
##class IMdVariable_Impl(object):
##    def _get(self):
##        u'Indicates if the variable should be added to the application display.'
##        #return AddToDisplay
##    def _set(self, AddToDisplay):
##        u'Indicates if the variable should be added to the application display.'
##    AddToDisplay = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the data specified by the variable is considered intermediate data.'
##        #return Intermediate
##    def _set(self, Intermediate):
##        u'Indicates if the data specified by the variable is considered intermediate data.'
##    Intermediate = property(_get, _set, doc = _set.__doc__)
##

IGPDatasetDomain._methods_ = [
    COMMETHOD(['propget', helpstring(u'Count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propget', helpstring(u'Dataset type.')], HRESULT, 'Type',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriDatasetType), 'pType' )),
    COMMETHOD([helpstring(u'Add a dataset type.')], HRESULT, 'AddType',
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriDatasetType, 'Type' )),
    COMMETHOD([helpstring(u'Remove a dataset type.')], HRESULT, 'DeleteType',
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriDatasetType, 'Type' )),
    COMMETHOD([helpstring(u'Make list.')], HRESULT, 'MakeList',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'pValue' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'ppValues' )),
    COMMETHOD([helpstring(u'Set versioned filter.')], HRESULT, 'SetVersionedFilter',
              ( ['in'], VARIANT_BOOL, 'filter' ),
              ( ['in'], VARIANT_BOOL, 'Type' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether or not to filter datasets based on whether or not they are versioned.')], HRESULT, 'FilterVersioned',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pFilter' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to filter versioned or non-versioned datasets.')], HRESULT, 'FilterVersionedType',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pType' )),
    COMMETHOD([helpstring(u'Set can filter.')], HRESULT, 'SetCanVersionFilter',
              ( ['in'], VARIANT_BOOL, 'filter' ),
              ( ['in'], VARIANT_BOOL, 'Type' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether or not to filter datasets based on whether or not they can be versioned.')], HRESULT, 'FilterCanVersion',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pFilter' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to filter datasets that can or can not be versioned.')], HRESULT, 'FilterCanVersionType',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pType' )),
]
################################################################
## code template for IGPDatasetDomain implementation
##class IGPDatasetDomain_Impl(object):
##    @property
##    def Count(self):
##        u'Count.'
##        #return pCount
##
##    @property
##    def FilterCanVersionType(self):
##        u'Indicates whether to filter datasets that can or can not be versioned.'
##        #return pType
##
##    def SetCanVersionFilter(self, filter, Type):
##        u'Set can filter.'
##        #return 
##
##    @property
##    def FilterCanVersion(self):
##        u'Indicates whether or not to filter datasets based on whether or not they can be versioned.'
##        #return pFilter
##
##    @property
##    def FilterVersionedType(self):
##        u'Indicates whether to filter versioned or non-versioned datasets.'
##        #return pType
##
##    def SetVersionedFilter(self, filter, Type):
##        u'Set versioned filter.'
##        #return 
##
##    def MakeList(self, pValue):
##        u'Make list.'
##        #return ppValues
##
##    def DeleteType(self, Type):
##        u'Remove a dataset type.'
##        #return 
##
##    @property
##    def Type(self, Index):
##        u'Dataset type.'
##        #return pType
##
##    @property
##    def FilterVersioned(self):
##        u'Indicates whether or not to filter datasets based on whether or not they are versioned.'
##        #return pFilter
##
##    def AddType(self, Type):
##        u'Add a dataset type.'
##        #return 
##

class GPExtent(CoClass):
    u'Geoprocessing value object containing an extent value.'
    _reg_clsid_ = GUID('{754F9CDC-EE51-412A-97EA-E573077C559F}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPExtent._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPExtent, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

class GPManageMapServerCacheTiles(CoClass):
    u'Manage pre-rendered tile cache for the MapServer.'
    _reg_clsid_ = GUID('{FA92F2CF-A38E-4999-BBF5-901C1AC1570D}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPManageMapServerCacheTiles._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPFunction]

class GpValueTableObject(CoClass):
    u'Geoprocessing Value Table object.'
    _reg_clsid_ = GUID('{028F4A55-E40A-4EF4-BF01-DBD60F8A1D72}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGpValueTableObject(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    u'Provides access to the Dispatch Value Table Object.'
    _iid_ = GUID('{527B0A11-811D-474C-B34E-919B560E72C0}')
    _idlflags_ = ['dual', 'oleautomation']
GpValueTableObject._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch, IGpValueTableObject, IGpValueTableObject2]

IGPFileDomain._methods_ = [
    COMMETHOD(['propget', helpstring(u'Count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propget', helpstring(u'File type.')], HRESULT, 'Type',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(BSTR), 'pType' )),
    COMMETHOD([helpstring(u'Add a data element type.')], HRESULT, 'AddType',
              ( ['in'], BSTR, 'Type' )),
    COMMETHOD([helpstring(u'Remove a data element type.')], HRESULT, 'DeleteType',
              ( ['in'], BSTR, 'Type' )),
    COMMETHOD([helpstring(u'Make list.')], HRESULT, 'MakeList',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'pValue' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'ppValues' )),
]
################################################################
## code template for IGPFileDomain implementation
##class IGPFileDomain_Impl(object):
##    @property
##    def Count(self):
##        u'Count.'
##        #return pCount
##
##    def MakeList(self, pValue):
##        u'Make list.'
##        #return ppValues
##
##    def DeleteType(self, Type):
##        u'Remove a data element type.'
##        #return 
##
##    @property
##    def Type(self, Index):
##        u'File type.'
##        #return pType
##
##    def AddType(self, Type):
##        u'Add a data element type.'
##        #return 
##

IGPResultOptions._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if the result features should be densified.')], HRESULT, 'DensifyFeatures',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pVal' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the result features should be densified.')], HRESULT, 'DensifyFeatures',
              ( ['in'], VARIANT_BOOL, 'pVal' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the result files should be returned embedded or referenced by url.')], HRESULT, 'TransportType',
              ( ['retval', 'out'], POINTER(comtypes.gen._A7C74158_1062_4664_B404_8694D490FCD1_0_10_2.esriGDSTransportType), 'TransportType' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the result files should be returned embedded or referenced by url.')], HRESULT, 'TransportType',
              ( ['in'], comtypes.gen._A7C74158_1062_4664_B404_8694D490FCD1_0_10_2.esriGDSTransportType, 'TransportType' )),
]
################################################################
## code template for IGPResultOptions implementation
##class IGPResultOptions_Impl(object):
##    def _get(self):
##        u'Indicates if the result files should be returned embedded or referenced by url.'
##        #return TransportType
##    def _set(self, TransportType):
##        u'Indicates if the result files should be returned embedded or referenced by url.'
##    TransportType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the result features should be densified.'
##        #return pVal
##    def _set(self, pVal):
##        u'Indicates if the result features should be densified.'
##    DensifyFeatures = property(_get, _set, doc = _set.__doc__)
##

IGPResultOptions2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if the result features should be densified.')], HRESULT, 'DensifyFeatures',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pVal' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the result features should be densified.')], HRESULT, 'DensifyFeatures',
              ( ['in'], VARIANT_BOOL, 'pVal' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the result files should be returned embedded or referenced by url.')], HRESULT, 'TransportType',
              ( ['retval', 'out'], POINTER(comtypes.gen._A7C74158_1062_4664_B404_8694D490FCD1_0_10_2.esriGDSTransportType), 'TransportType' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the result files should be returned embedded or referenced by url.')], HRESULT, 'TransportType',
              ( ['in'], comtypes.gen._A7C74158_1062_4664_B404_8694D490FCD1_0_10_2.esriGDSTransportType, 'TransportType' )),
    COMMETHOD(['propget', helpstring(u'The spatial reference of result geodatasets.')], HRESULT, 'SpatialReference',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference)), 'ppSpRef' )),
    COMMETHOD(['propputref', helpstring(u'The spatial reference of result geodatasets.')], HRESULT, 'SpatialReference',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'ppSpRef' )),
    COMMETHOD(['propget', helpstring(u'The format of results.')], HRESULT, 'Format',
              ( ['retval', 'out'], POINTER(BSTR), 'Format' )),
    COMMETHOD(['propput', helpstring(u'The format of results.')], HRESULT, 'Format',
              ( ['in'], BSTR, 'Format' )),
    COMMETHOD(['propget', helpstring(u'The format properties of results.')], HRESULT, 'FormatProperties',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet)), 'ppProperties' )),
    COMMETHOD(['propputref', helpstring(u'The format properties of results.')], HRESULT, 'FormatProperties',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet), 'ppProperties' )),
]
################################################################
## code template for IGPResultOptions2 implementation
##class IGPResultOptions2_Impl(object):
##    def _get(self):
##        u'Indicates if the result files should be returned embedded or referenced by url.'
##        #return TransportType
##    def _set(self, TransportType):
##        u'Indicates if the result files should be returned embedded or referenced by url.'
##    TransportType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The format of results.'
##        #return Format
##    def _set(self, Format):
##        u'The format of results.'
##    Format = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the result features should be densified.'
##        #return pVal
##    def _set(self, pVal):
##        u'Indicates if the result features should be densified.'
##    DensifyFeatures = property(_get, _set, doc = _set.__doc__)
##
##    def FormatProperties(self, ppProperties):
##        u'The format properties of results.'
##        #return 
##
##    def SpatialReference(self, ppSpRef):
##        u'The spatial reference of result geodatasets.'
##        #return 
##

IGPDateType._methods_ = [
]
################################################################
## code template for IGPDateType implementation
##class IGPDateType_Impl(object):

IGPCoverageFeatureClassDomain._methods_ = [
    COMMETHOD(['propget', helpstring(u'Count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propget', helpstring(u'Coverage feature class type.')], HRESULT, 'Type',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(comtypes.gen._1CE6AC65_43F5_4529_8FC0_D7ED298E4F1A_0_10_2.esriCoverageFeatureClassType), 'pType' )),
    COMMETHOD([helpstring(u'Add a coverage feature class type.')], HRESULT, 'AddType',
              ( ['in'], comtypes.gen._1CE6AC65_43F5_4529_8FC0_D7ED298E4F1A_0_10_2.esriCoverageFeatureClassType, 'Type' )),
    COMMETHOD([helpstring(u'Remove a coverage feature class type.')], HRESULT, 'DeleteType',
              ( ['in'], comtypes.gen._1CE6AC65_43F5_4529_8FC0_D7ED298E4F1A_0_10_2.esriCoverageFeatureClassType, 'Type' )),
    COMMETHOD([helpstring(u'Make list.')], HRESULT, 'MakeList',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'pValue' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'ppValues' )),
    COMMETHOD([helpstring(u'Set topology filter.')], HRESULT, 'SetTopologyFilter',
              ( ['in'], VARIANT_BOOL, 'filter' ),
              ( ['in'], comtypes.gen._1CE6AC65_43F5_4529_8FC0_D7ED298E4F1A_0_10_2.esriFeatureClassTopology, 'Type' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether or not to filter feature classes based on their topology type.')], HRESULT, 'FilterTopology',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pFilter' )),
    COMMETHOD(['propget', helpstring(u'Topology filter type.')], HRESULT, 'FilterTopologyType',
              ( ['retval', 'out'], POINTER(comtypes.gen._1CE6AC65_43F5_4529_8FC0_D7ED298E4F1A_0_10_2.esriFeatureClassTopology), 'pType' )),
]
################################################################
## code template for IGPCoverageFeatureClassDomain implementation
##class IGPCoverageFeatureClassDomain_Impl(object):
##    @property
##    def Count(self):
##        u'Count.'
##        #return pCount
##
##    @property
##    def Type(self, Index):
##        u'Coverage feature class type.'
##        #return pType
##
##    @property
##    def FilterTopology(self):
##        u'Indicates whether or not to filter feature classes based on their topology type.'
##        #return pFilter
##
##    @property
##    def FilterTopologyType(self):
##        u'Topology filter type.'
##        #return pType
##
##    def MakeList(self, pValue):
##        u'Make list.'
##        #return ppValues
##
##    def DeleteType(self, Type):
##        u'Remove a coverage feature class type.'
##        #return 
##
##    def SetTopologyFilter(self, filter, Type):
##        u'Set topology filter.'
##        #return 
##
##    def AddType(self, Type):
##        u'Add a coverage feature class type.'
##        #return 
##

IGPArcInfoItemDomain._methods_ = [
    COMMETHOD(['propget', helpstring(u'Count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propget', helpstring(u'Item type.')], HRESULT, 'Type',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(comtypes.gen._1CE6AC65_43F5_4529_8FC0_D7ED298E4F1A_0_10_2.esriArcInfoItemType), 'pType' )),
    COMMETHOD([helpstring(u'Add an item type.')], HRESULT, 'AddType',
              ( ['in'], comtypes.gen._1CE6AC65_43F5_4529_8FC0_D7ED298E4F1A_0_10_2.esriArcInfoItemType, 'Type' )),
    COMMETHOD([helpstring(u'Remove an item type.')], HRESULT, 'DeleteType',
              ( ['in'], comtypes.gen._1CE6AC65_43F5_4529_8FC0_D7ED298E4F1A_0_10_2.esriArcInfoItemType, 'Type' )),
    COMMETHOD([helpstring(u'Make list.')], HRESULT, 'MakeList',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'pValue' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'ppValues' )),
    COMMETHOD(['propget', helpstring(u'Coverage Feature Class Type.')], HRESULT, 'CoverageFeatureClassType',
              ( ['retval', 'out'], POINTER(comtypes.gen._1CE6AC65_43F5_4529_8FC0_D7ED298E4F1A_0_10_2.esriCoverageFeatureClassType), 'pType' )),
    COMMETHOD(['propput', helpstring(u'Coverage Feature Class Type.')], HRESULT, 'CoverageFeatureClassType',
              ( ['in'], comtypes.gen._1CE6AC65_43F5_4529_8FC0_D7ED298E4F1A_0_10_2.esriCoverageFeatureClassType, 'pType' )),
    COMMETHOD([helpstring(u'Set index filter.')], HRESULT, 'SetIndexFilter',
              ( ['in'], VARIANT_BOOL, 'filter' ),
              ( ['in'], VARIANT_BOOL, 'Type' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether or not to filter items based on whether or not they have an index.')], HRESULT, 'FilterIndex',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pFilter' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to filter items that have or do not have an index.')], HRESULT, 'FilterIndexType',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pType' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether or not to show redefined items.')], HRESULT, 'ShowRedefined',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Show' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether or not to show redefined items.')], HRESULT, 'ShowRedefined',
              ( ['in'], VARIANT_BOOL, 'Show' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether or not to show pseudo items.')], HRESULT, 'ShowPseudo',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Show' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether or not to show pseudo items.')], HRESULT, 'ShowPseudo',
              ( ['in'], VARIANT_BOOL, 'Show' )),
]
################################################################
## code template for IGPArcInfoItemDomain implementation
##class IGPArcInfoItemDomain_Impl(object):
##    @property
##    def Count(self):
##        u'Count.'
##        #return pCount
##
##    def SetIndexFilter(self, filter, Type):
##        u'Set index filter.'
##        #return 
##
##    @property
##    def Type(self, Index):
##        u'Item type.'
##        #return pType
##
##    def _get(self):
##        u'Indicates whether or not to show pseudo items.'
##        #return Show
##    def _set(self, Show):
##        u'Indicates whether or not to show pseudo items.'
##    ShowPseudo = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether or not to show redefined items.'
##        #return Show
##    def _set(self, Show):
##        u'Indicates whether or not to show redefined items.'
##    ShowRedefined = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def FilterIndex(self):
##        u'Indicates whether or not to filter items based on whether or not they have an index.'
##        #return pFilter
##
##    def MakeList(self, pValue):
##        u'Make list.'
##        #return ppValues
##
##    def DeleteType(self, Type):
##        u'Remove an item type.'
##        #return 
##
##    def _get(self):
##        u'Coverage Feature Class Type.'
##        #return pType
##    def _set(self, pType):
##        u'Coverage Feature Class Type.'
##    CoverageFeatureClassType = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def FilterIndexType(self):
##        u'Indicates whether to filter items that have or do not have an index.'
##        #return pType
##
##    def AddType(self, Type):
##        u'Add an item type.'
##        #return 
##

class IGPToolCommandHelper(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties and methods of a Geoprocessing Tool Command Helper object.'
    _iid_ = GUID('{86D8CAA9-6035-4AC9-9CDC-6C9ED6EAFCEA}')
    _idlflags_ = ['oleautomation']
class IGPToolCommandHelper2(IGPToolCommandHelper):
    _case_insensitive_ = True
    u'Provides access to the properties and methods of a Geoprocessing Tool Command Helper object.'
    _iid_ = GUID('{17C54FD8-0273-4688-A878-0E16E0E32C19}')
    _idlflags_ = ['oleautomation']
IGPToolCommandHelper._methods_ = [
    COMMETHOD([helpstring(u'Associates the command object with a particular tool to be executed when the command is invoked.')], HRESULT, 'SetTool',
              ( ['in'], POINTER(IGPTool), 'Tool' )),
    COMMETHOD([helpstring(u'Associates the command object with a particular tool to be executed when the command is invoked.')], HRESULT, 'SetToolByName',
              ( ['in'], BSTR, 'Toolbox' ),
              ( ['in'], BSTR, 'Tool' )),
    COMMETHOD(['propget', helpstring(u'The geoprocessing tool currently associated with the command.')], HRESULT, 'Tool',
              ( ['retval', 'out'], POINTER(POINTER(IGPTool)), 'Tool' )),
    COMMETHOD([helpstring(u'Invokes the tool currently associated with the command.')], HRESULT, 'Invoke',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'Parameters' )),
]
################################################################
## code template for IGPToolCommandHelper implementation
##class IGPToolCommandHelper_Impl(object):
##    def SetTool(self, Tool):
##        u'Associates the command object with a particular tool to be executed when the command is invoked.'
##        #return 
##
##    @property
##    def Tool(self):
##        u'The geoprocessing tool currently associated with the command.'
##        #return Tool
##
##    def SetToolByName(self, Toolbox, Tool):
##        u'Associates the command object with a particular tool to be executed when the command is invoked.'
##        #return 
##
##    def Invoke(self, Parameters):
##        u'Invokes the tool currently associated with the command.'
##        #return 
##

IGPToolCommandHelper2._methods_ = [
    COMMETHOD([helpstring(u'Invokes the tool with a modal dialog currently associated with the command.')], HRESULT, 'InvokeModal',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE, 'hWndParent' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'Parameters' ),
              ( ['out'], POINTER(VARIANT_BOOL), 'pOK' ),
              ( ['out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPMessages)), 'ppMessages' )),
]
################################################################
## code template for IGPToolCommandHelper2 implementation
##class IGPToolCommandHelper2_Impl(object):
##    def InvokeModal(self, hWndParent, Parameters):
##        u'Invokes the tool with a modal dialog currently associated with the command.'
##        #return pOK, ppMessages
##

IGPValueTableType._methods_ = [
    COMMETHOD(['propget', helpstring(u'The number of data types/columns of the value table data type.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The data type object of the given column index.')], HRESULT, 'DataType',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType)), 'ppDataType' )),
    COMMETHOD(['propget', helpstring(u'The width of the given column of the value table data type.')], HRESULT, 'Width',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(c_int), 'pWidth' )),
    COMMETHOD(['propget', helpstring(u'The display name of the given column of the value table data type.')], HRESULT, 'DisplayName',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(BSTR), 'pDisplayName' )),
    COMMETHOD([helpstring(u'Adds the given data type to the value table data type.')], HRESULT, 'AddDataType',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType), 'pDataType' ),
              ( ['in'], BSTR, 'DisplayName' ),
              ( ['in'], c_int, 'Width' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IUID), 'CLSID' )),
    COMMETHOD([helpstring(u'Removes the data type/column at the given index from the value table data type.')], HRESULT, 'RemoveDataType',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD(['propget', helpstring(u'The class identifier (CLSID) of the ActiveX control for the data type at the given index in the value table data type.')], HRESULT, 'ControlCLSID',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IUID)), 'CLSID' )),
]
################################################################
## code template for IGPValueTableType implementation
##class IGPValueTableType_Impl(object):
##    @property
##    def Count(self):
##        u'The number of data types/columns of the value table data type.'
##        #return Count
##
##    @property
##    def DisplayName(self, Index):
##        u'The display name of the given column of the value table data type.'
##        #return pDisplayName
##
##    @property
##    def DataType(self, Index):
##        u'The data type object of the given column index.'
##        #return ppDataType
##
##    def AddDataType(self, pDataType, DisplayName, Width, CLSID):
##        u'Adds the given data type to the value table data type.'
##        #return 
##
##    @property
##    def ControlCLSID(self, Index):
##        u'The class identifier (CLSID) of the ActiveX control for the data type at the given index in the value table data type.'
##        #return CLSID
##
##    @property
##    def Width(self, Index):
##        u'The width of the given column of the value table data type.'
##        #return pWidth
##
##    def RemoveDataType(self, Index):
##        u'Removes the data type/column at the given index from the value table data type.'
##        #return 
##

class IEnumMdProcess(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to properties/methods of an enumeration of model processes.'
    _iid_ = GUID('{57C5C4F9-1566-4DBE-983A-C71D4CE965EA}')
    _idlflags_ = ['oleautomation']
IMdModel._methods_ = [
    COMMETHOD(['propget', helpstring(u'Name of the model.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'Name of the model.')], HRESULT, 'Name',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD([helpstring(u'Adds the given element to the model.')], HRESULT, 'AddElement',
              ( ['in'], POINTER(IMdElement), 'Element' )),
    COMMETHOD([helpstring(u'Adds the collection of elements to the model.')], HRESULT, 'AddElements',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'Elements' )),
    COMMETHOD([helpstring(u'Returns the model element with the given name.')], HRESULT, 'GetElement',
              ( ['in'], BSTR, 'Name' ),
              ( ['retval', 'out'], POINTER(POINTER(IMdElement)), 'Element' )),
    COMMETHOD([helpstring(u'Returns the model element with the given identifier.')], HRESULT, 'GetElementByID',
              ( ['in'], c_int, 'identifier' ),
              ( ['retval', 'out'], POINTER(POINTER(IMdElement)), 'Element' )),
    COMMETHOD([helpstring(u'Returns all of the model elements in the model.')], HRESULT, 'GetElements',
              ( ['retval', 'out'], POINTER(POINTER(IEnumMdElement)), 'Elements' )),
    COMMETHOD([helpstring(u'Returns all of the variables in the model.')], HRESULT, 'GetVariables',
              ( ['retval', 'out'], POINTER(POINTER(IEnumMdVariable)), 'variable' )),
    COMMETHOD([helpstring(u'Returns all of the processes in the model.')], HRESULT, 'GetProcesses',
              ( ['retval', 'out'], POINTER(POINTER(IEnumMdProcess)), 'processes' )),
    COMMETHOD([helpstring(u'Removes the given element from the model.')], HRESULT, 'DeleteElement',
              ( ['in'], POINTER(IMdElement), 'Element' )),
    COMMETHOD([helpstring(u'Removes all model elements from the model.')], HRESULT, 'Empty'),
    COMMETHOD([helpstring(u'Validates all model elements in the model.')], HRESULT, 'Validate',
              ( ['in'], VARIANT_BOOL, 'Reset' ),
              ( ['in'], POINTER(IGPEnvironmentManager), 'pEnvMgr' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPMessages)), 'Messages' )),
    COMMETHOD([helpstring(u'Executes all the processes in the model.')], HRESULT, 'Execute',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'TrackCancel' ),
              ( ['in'], VARIANT_BOOL, 'Reset' ),
              ( ['in'], POINTER(IGPEnvironmentManager), 'pEnvMgr' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPMessages), 'Messages' ),
              ( ['in'], VARIANT_BOOL, 'stopOnFirstFailure' )),
    COMMETHOD([helpstring(u'Executes a single process in the model.')], HRESULT, 'ExecuteProcess',
              ( ['in'], POINTER(IMdProcess), 'pMdProcess' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'TrackCancel' ),
              ( ['in'], VARIANT_BOOL, 'Reset' ),
              ( ['in'], POINTER(IGPEnvironmentManager), 'pEnvMgr' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPMessages), 'Messages' ),
              ( ['in'], VARIANT_BOOL, 'stopOnFirstFailure' )),
    COMMETHOD([helpstring(u'Returns all the model elements in the model in sorted order.')], HRESULT, 'SortElements',
              ( ['retval', 'out'], POINTER(POINTER(IEnumMdElement)), 'ppElements' )),
    COMMETHOD([helpstring(u'Returns all the model elements dependent on the given model element in the given direction.')], HRESULT, 'TraceDependents',
              ( ['in'], POINTER(IMdElement), 'pMdElement' ),
              ( ['in'], esriMdDirection, 'Direction' ),
              ( ['in'], c_int, 'depth' ),
              ( ['retval', 'out'], POINTER(POINTER(IEnumMdElement)), 'ppElements' )),
    COMMETHOD([helpstring(u'Returns all the model elements dependent on the given model element in the given direction of the given connection type.')], HRESULT, 'FindDependents',
              ( ['in'], POINTER(IMdElement), 'pMdElement' ),
              ( ['in'], esriMdDirection, 'Direction' ),
              ( ['in'], esriMdConnectionType, 'ConnectionType' ),
              ( ['retval', 'out'], POINTER(POINTER(IEnumMdElement)), 'ppElements' )),
    COMMETHOD([helpstring(u'Merges the given enumeration of model elements, commonly from another model, into the current model.')], HRESULT, 'MergeElements',
              ( ['in'], POINTER(IEnumMdElement), 'pElements' )),
    COMMETHOD([helpstring(u'Returns whether or not the model already contains a model element by the given name.')], HRESULT, 'VerifyUniqueElementName',
              ( ['in'], BSTR, 'Name' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pUnique' )),
    COMMETHOD([helpstring(u'Returns whether or not the given model element can be added to the model.')], HRESULT, 'CanAddElement',
              ( ['in'], POINTER(IMdElement), 'pElement' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pCanAdd' )),
    COMMETHOD(['propget', helpstring(u'The set of overriding environment values used when validating/executing the model.')], HRESULT, 'EnvironmentManager',
              ( ['retval', 'out'], POINTER(POINTER(IGPEnvironmentManager)), 'ppEnvMgr' )),
    COMMETHOD(['propputref', helpstring(u'The set of overriding environment values used when validating/executing the model.')], HRESULT, 'EnvironmentManager',
              ( ['in'], POINTER(IGPEnvironmentManager), 'ppEnvMgr' )),
    COMMETHOD([helpstring(u'Returns whether or not all the model elements in the model are valid.')], HRESULT, 'IsValid',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsValid' )),
    COMMETHOD([helpstring(u'Returns whether or not all the processes in the model are licensed.')], HRESULT, 'IsLicensed',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsLicensed' )),
    COMMETHOD([helpstring(u'Removes the connection/dependency between two model elements.')], HRESULT, 'DisconnectElements',
              ( ['in'], POINTER(IMdElement), 'pFromElement' ),
              ( ['in'], POINTER(IMdElement), 'pToElement' ),
              ( ['in'], esriMdConnectionType, 'ConnectionType' )),
    COMMETHOD([helpstring(u'Generates a new unique name that may be used for adding a new model element to the model.')], HRESULT, 'CreateUniqueElementName',
              ( ['in'], BSTR, 'Name' ),
              ( ['retval', 'out'], POINTER(BSTR), 'pName' )),
]
################################################################
## code template for IMdModel implementation
##class IMdModel_Impl(object):
##    def EnvironmentManager(self, ppEnvMgr):
##        u'The set of overriding environment values used when validating/executing the model.'
##        #return 
##
##    def VerifyUniqueElementName(self, Name):
##        u'Returns whether or not the model already contains a model element by the given name.'
##        #return pUnique
##
##    def ExecuteProcess(self, pMdProcess, TrackCancel, Reset, pEnvMgr, Messages, stopOnFirstFailure):
##        u'Executes a single process in the model.'
##        #return 
##
##    def SortElements(self):
##        u'Returns all the model elements in the model in sorted order.'
##        #return ppElements
##
##    def GetElements(self):
##        u'Returns all of the model elements in the model.'
##        #return Elements
##
##    def AddElements(self, Elements):
##        u'Adds the collection of elements to the model.'
##        #return 
##
##    def Empty(self):
##        u'Removes all model elements from the model.'
##        #return 
##
##    def FindDependents(self, pMdElement, Direction, ConnectionType):
##        u'Returns all the model elements dependent on the given model element in the given direction of the given connection type.'
##        #return ppElements
##
##    def TraceDependents(self, pMdElement, Direction, depth):
##        u'Returns all the model elements dependent on the given model element in the given direction.'
##        #return ppElements
##
##    def GetElementByID(self, identifier):
##        u'Returns the model element with the given identifier.'
##        #return Element
##
##    def DeleteElement(self, Element):
##        u'Removes the given element from the model.'
##        #return 
##
##    def DisconnectElements(self, pFromElement, pToElement, ConnectionType):
##        u'Removes the connection/dependency between two model elements.'
##        #return 
##
##    def IsLicensed(self):
##        u'Returns whether or not all the processes in the model are licensed.'
##        #return IsLicensed
##
##    def Validate(self, Reset, pEnvMgr):
##        u'Validates all model elements in the model.'
##        #return Messages
##
##    def AddElement(self, Element):
##        u'Adds the given element to the model.'
##        #return 
##
##    def Execute(self, TrackCancel, Reset, pEnvMgr, Messages, stopOnFirstFailure):
##        u'Executes all the processes in the model.'
##        #return 
##
##    def _get(self):
##        u'Name of the model.'
##        #return Name
##    def _set(self, Name):
##        u'Name of the model.'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def GetElement(self, Name):
##        u'Returns the model element with the given name.'
##        #return Element
##
##    def MergeElements(self, pElements):
##        u'Merges the given enumeration of model elements, commonly from another model, into the current model.'
##        #return 
##
##    def CanAddElement(self, pElement):
##        u'Returns whether or not the given model element can be added to the model.'
##        #return pCanAdd
##
##    def CreateUniqueElementName(self, Name):
##        u'Generates a new unique name that may be used for adding a new model element to the model.'
##        #return pName
##
##    def GetProcesses(self):
##        u'Returns all of the processes in the model.'
##        #return processes
##
##    def IsValid(self):
##        u'Returns whether or not all the model elements in the model are valid.'
##        #return IsValid
##
##    def GetVariables(self):
##        u'Returns all of the variables in the model.'
##        #return variable
##

IGPServer2._methods_ = [
    COMMETHOD([helpstring(u'Returns the names of the available tools.')], HRESULT, 'GetToolNames',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray)), 'names' )),
    COMMETHOD([helpstring(u'Returns the tool information of the available tools.')], HRESULT, 'GetToolInfos',
              ( ['retval', 'out'], POINTER(POINTER(IGPToolInfos)), 'infos' )),
    COMMETHOD([helpstring(u'Returns the tool information of the specified tool name.')], HRESULT, 'GetToolInfo',
              ( ['in'], BSTR, 'ToolName' ),
              ( ['retval', 'out'], POINTER(POINTER(IGPToolInfo)), 'info' )),
    COMMETHOD([helpstring(u'Returns the names of the available tasks.')], HRESULT, 'GetTaskNames',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray)), 'names' )),
    COMMETHOD([helpstring(u'Returns the tool information of the available tasks.')], HRESULT, 'GetTaskInfos',
              ( ['retval', 'out'], POINTER(POINTER(IGPToolInfos)), 'infos' )),
    COMMETHOD([helpstring(u'Indicates if there is an associated map server to draw the results and the name of the map server.')], HRESULT, 'GetResultMapServerName',
              ( ['retval', 'out'], POINTER(BSTR), 'mapServerName' )),
    COMMETHOD([helpstring(u'Executes the specified tool with the supplied values and options and returns the results.')], HRESULT, 'Execute',
              ( ['in'], BSTR, 'ToolName' ),
              ( ['in'], POINTER(IGPValues), 'Values' ),
              ( ['in'], POINTER(IGPResultOptions), 'options' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet), 'envValues' ),
              ( ['retval', 'out'], POINTER(POINTER(IGPResult)), 'result' )),
    COMMETHOD([helpstring(u'Submits the specified tool with the supplied values and options and returns the job id.')], HRESULT, 'SubmitJob',
              ( ['in'], BSTR, 'ToolName' ),
              ( ['in'], POINTER(IGPValues), 'Values' ),
              ( ['in'], POINTER(IGPResultOptions), 'options' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet), 'envValues' ),
              ( ['retval', 'out'], POINTER(BSTR), 'JobID' )),
    COMMETHOD([helpstring(u'Returns the status of the specified job.')], HRESULT, 'GetJobStatus',
              ( ['in'], BSTR, 'JobID' ),
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriJobStatus), 'Status' )),
    COMMETHOD([helpstring(u'Returns the messages of the specified job.')], HRESULT, 'GetJobMessages',
              ( ['in'], BSTR, 'JobID' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IJobMessages)), 'Messages' )),
    COMMETHOD([helpstring(u'Returns the results of the specified job.')], HRESULT, 'GetJobResult',
              ( ['in'], BSTR, 'JobID' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray), 'ParameterNames' ),
              ( ['in'], POINTER(IGPResultOptions), 'pOptions' ),
              ( ['retval', 'out'], POINTER(POINTER(IGPResult)), 'ppResult' )),
    COMMETHOD([helpstring(u'Cancels the specified job.')], HRESULT, 'CancelJob',
              ( ['in'], BSTR, 'JobID' )),
    COMMETHOD([helpstring(u'Indicates if the geoprocessing server is synchronous or asynchronous.')], HRESULT, 'GetExecutionType',
              ( ['retval', 'out'], POINTER(esriExecutionType), 'Type' )),
    COMMETHOD([helpstring(u'Returns a zip file of the results workspace.')], HRESULT, 'GetResultWorkspace',
              ( ['in'], BSTR, 'JobID' ),
              ( ['in'], comtypes.gen._A7C74158_1062_4664_B404_8694D490FCD1_0_10_2.esriGDSTransportType, 'TransportType' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._A7C74158_1062_4664_B404_8694D490FCD1_0_10_2.IGDSData)), 'ppResultWorkspace' )),
    COMMETHOD([helpstring(u'Returns the tool name for the job.')], HRESULT, 'GetJobToolName',
              ( ['in'], BSTR, 'JobID' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD([helpstring(u'Returns the input values for the job.')], HRESULT, 'GetJobInputValues',
              ( ['in'], BSTR, 'JobID' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray), 'ParameterNames' ),
              ( ['retval', 'out'], POINTER(POINTER(IGPValues)), 'Values' )),
    COMMETHOD([helpstring(u'Returns the result options for the job.')], HRESULT, 'GetJobResultOptions',
              ( ['in'], BSTR, 'JobID' ),
              ( ['retval', 'out'], POINTER(POINTER(IGPResultOptions)), 'options' )),
    COMMETHOD([helpstring(u'Returns the enviornment values for the job.')], HRESULT, 'GetJobEnvironmentValues',
              ( ['in'], BSTR, 'JobID' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet)), 'envValues' )),
    COMMETHOD([helpstring(u'Returns the extent for the job.')], HRESULT, 'GetJobResultMapExtent',
              ( ['in'], BSTR, 'JobID' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'Extent' )),
]
################################################################
## code template for IGPServer2 implementation
##class IGPServer2_Impl(object):
##    def SubmitJob(self, ToolName, Values, options, envValues):
##        u'Submits the specified tool with the supplied values and options and returns the job id.'
##        #return JobID
##
##    def GetResultWorkspace(self, JobID, TransportType):
##        u'Returns a zip file of the results workspace.'
##        #return ppResultWorkspace
##
##    def Execute(self, ToolName, Values, options, envValues):
##        u'Executes the specified tool with the supplied values and options and returns the results.'
##        #return result
##
##    def GetJobInputValues(self, JobID, ParameterNames):
##        u'Returns the input values for the job.'
##        #return Values
##
##    def GetToolInfo(self, ToolName):
##        u'Returns the tool information of the specified tool name.'
##        #return info
##
##    def GetTaskNames(self):
##        u'Returns the names of the available tasks.'
##        #return names
##
##    def GetTaskInfos(self):
##        u'Returns the tool information of the available tasks.'
##        #return infos
##
##    def GetJobResultMapExtent(self, JobID):
##        u'Returns the extent for the job.'
##        #return Extent
##
##    def GetExecutionType(self):
##        u'Indicates if the geoprocessing server is synchronous or asynchronous.'
##        #return Type
##
##    def GetResultMapServerName(self):
##        u'Indicates if there is an associated map server to draw the results and the name of the map server.'
##        #return mapServerName
##
##    def GetJobMessages(self, JobID):
##        u'Returns the messages of the specified job.'
##        #return Messages
##
##    def GetJobResult(self, JobID, ParameterNames, pOptions):
##        u'Returns the results of the specified job.'
##        #return ppResult
##
##    def CancelJob(self, JobID):
##        u'Cancels the specified job.'
##        #return 
##
##    def GetJobToolName(self, JobID):
##        u'Returns the tool name for the job.'
##        #return Name
##
##    def GetToolInfos(self):
##        u'Returns the tool information of the available tools.'
##        #return infos
##
##    def GetToolNames(self):
##        u'Returns the names of the available tools.'
##        #return names
##
##    def GetJobResultOptions(self, JobID):
##        u'Returns the result options for the job.'
##        #return options
##
##    def GetJobEnvironmentValues(self, JobID):
##        u'Returns the enviornment values for the job.'
##        #return envValues
##
##    def GetJobStatus(self, JobID):
##        u'Returns the status of the specified job.'
##        #return Status
##

class DEToolboxType(CoClass):
    u'The toolbox Data Type.'
    _reg_clsid_ = GUID('{1096C79A-C554-4E3A-9898-CC9BDC20FE24}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
DEToolboxType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDEToolboxType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDEDatasetType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataElementType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class GPRasterGDBEnvTileSize(CoClass):
    u'GeoProcessor Spatial GDB Environment Compression object.'
    _reg_clsid_ = GUID('{CE32FFF3-F75F-4915-B9E0-2A6D42E5FB20}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPRasterGDBEnvTileSize._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPRasterGDBEnvTileSize, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

IGPToolInfos._methods_ = [
    COMMETHOD(['propget', helpstring(u'The size of the array.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propget', helpstring(u'The tool at the specified index in the array.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IGPToolInfo)), 'ppInfo' )),
    COMMETHOD([helpstring(u'Adds a tool to the array.')], HRESULT, 'Add',
              ( ['in'], POINTER(IGPToolInfo), 'pInfo' )),
    COMMETHOD([helpstring(u'Adds a tool to the array at the specified index.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(IGPToolInfo), 'pInfo' )),
    COMMETHOD([helpstring(u'Removes a tool from the array.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all tools from the array.')], HRESULT, 'RemoveAll'),
]
################################################################
## code template for IGPToolInfos implementation
##class IGPToolInfos_Impl(object):
##    @property
##    def Count(self):
##        u'The size of the array.'
##        #return pCount
##
##    def Insert(self, Index, pInfo):
##        u'Adds a tool to the array at the specified index.'
##        #return 
##
##    def Remove(self, Index):
##        u'Removes a tool from the array.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'The tool at the specified index in the array.'
##        #return ppInfo
##
##    def RemoveAll(self):
##        u'Removes all tools from the array.'
##        #return 
##
##    def Add(self, pInfo):
##        u'Adds a tool to the array.'
##        #return 
##

IGPRandomNumberGenerator._methods_ = [
    COMMETHOD(['propget', helpstring(u'Gets the value, as a non-negative long, of the seed.')], HRESULT, 'Seed',
              ( ['retval', 'out'], POINTER(c_int), 'pSeed' )),
    COMMETHOD(['propget', helpstring(u'Gets the random number generator type.')], HRESULT, 'Type',
              ( ['retval', 'out'], POINTER(esriRandomNumberGeneratorType), 'Type' )),
    COMMETHOD([helpstring(u'Initializes random generator seed and type.')], HRESULT, 'Initialize',
              ( ['in'], c_int, 'Seed' ),
              ( ['in'], esriRandomNumberGeneratorType, 'Type' )),
    COMMETHOD([helpstring(u'Resets random number generator seed, type stays unchanged.')], HRESULT, 'Reset'),
    COMMETHOD([helpstring(u'Generates the next random number value.')], HRESULT, 'GetValue',
              ( ['in'], BSTR, 'distribution' ),
              ( ['retval', 'out'], POINTER(c_double), 'Value' )),
]
################################################################
## code template for IGPRandomNumberGenerator implementation
##class IGPRandomNumberGenerator_Impl(object):
##    def Initialize(self, Seed, Type):
##        u'Initializes random generator seed and type.'
##        #return 
##
##    def Reset(self):
##        u'Resets random number generator seed, type stays unchanged.'
##        #return 
##
##    @property
##    def Seed(self):
##        u'Gets the value, as a non-negative long, of the seed.'
##        #return pSeed
##
##    @property
##    def Type(self):
##        u'Gets the random number generator type.'
##        #return Type
##
##    def GetValue(self, distribution):
##        u'Generates the next random number value.'
##        #return Value
##

class GPValidateMapServerCacheTiles(CoClass):
    u'Manage pre-rendered tile cache for the MapServer.'
    _reg_clsid_ = GUID('{D92FA6D3-EB38-45E8-8961-CEAA46AC8EF0}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPValidateMapServerCacheTiles._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPFunction]

class WCSCatalogPathParser(CoClass):
    u'ArcGIS WCS Coverage Path Parser.'
    _reg_clsid_ = GUID('{E195A699-7C96-4B48-B4C7-63D3B43C3155}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
WCSCatalogPathParser._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IParseNameString, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspaceDataElements]

class GPAnalysisCellSizeType(CoClass):
    u'GeoProcessor Analysis CellSize Type object.'
    _reg_clsid_ = GUID('{380B3870-C00B-45D1-98B5-7878E42F37B7}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPAnalysisCellSizeType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPAnalysisCellSizeType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class GPServerCachingCreateMapCache(CoClass):
    u'Create pre-rendered tile cache for the MapServer.'
    _reg_clsid_ = GUID('{9A118E96-8704-4263-935E-EDADE2A47433}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPServerCachingCreateMapCache._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPFunction]

class GPExportMapServerCache(CoClass):
    u'Export Map Server Cache.'
    _reg_clsid_ = GUID('{17F1BC9D-E3A1-41AD-AB01-86578485A4D4}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPExportMapServerCache._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPFunction]

IEnumFieldType._methods_ = [
    COMMETHOD([helpstring(u'Returns the next esriFieldType in the enumeric object.')], HRESULT, 'Next',
              ( ['retval', 'out'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriFieldType), 'pType' )),
    COMMETHOD([helpstring(u'Resets the enumeric object.')], HRESULT, 'Reset'),
]
################################################################
## code template for IEnumFieldType implementation
##class IEnumFieldType_Impl(object):
##    def Reset(self):
##        u'Resets the enumeric object.'
##        #return 
##
##    def Next(self):
##        u'Returns the next esriFieldType in the enumeric object.'
##        #return pType
##

class GPImportMapServerCache(CoClass):
    u'Import Map Server Cache.'
    _reg_clsid_ = GUID('{9C243BE3-2116-4304-961A-987165FB3207}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPImportMapServerCache._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPFunction]

IGPFeatureRecordSetLayerType._methods_ = [
]
################################################################
## code template for IGPFeatureRecordSetLayerType implementation
##class IGPFeatureRecordSetLayerType_Impl(object):

class GPRasterGDBEnvPyramidType(CoClass):
    u'GeoProcessor Spatial GDB Environment Compression Type object.'
    _reg_clsid_ = GUID('{59BA607A-071B-44F3-806E-CD4751C49EB9}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPRasterGDBEnvPyramidType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPRasterGDBEnvPyramidType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class GPCreateMapServerCache(CoClass):
    u'Create pre-rendered tile cache for the MapServer.'
    _reg_clsid_ = GUID('{B28D53D5-612A-4C93-9F11-5D4B7B7CF2F5}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPCreateMapServerCache._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPFunction]

class GPGenerateMapServerCache(CoClass):
    u'Generate pre-rendered tile cache for the MapServer.'
    _reg_clsid_ = GUID('{3254C180-5059-4EC7-9AD4-37137FED7CC5}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPGenerateMapServerCache._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPFunction]

IGPFeatureRecordSetLayer._methods_ = [
]
################################################################
## code template for IGPFeatureRecordSetLayer implementation
##class IGPFeatureRecordSetLayer_Impl(object):

class Library(object):
    u'Esri Geoprocessing Object Library 10.2'
    name = u'esriGeoprocessing'
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)

class GPStringHiddenType(CoClass):
    u'Geoprocessing Hidden String Data Type.'
    _reg_clsid_ = GUID('{714A5D46-D45A-4745-B9AF-C9112D3C68A3}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPStringHiddenType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, IGPStringHiddenType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class GpDispatch(CoClass):
    u'Utility object used to execute geoprocessing tools.'
    _reg_clsid_ = GUID('{A80DA45D-2AE6-4E4A-A4B8-A33F00EECF4E}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GpDispatch._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPComHelper]

IGPRasterDataLayerType._methods_ = [
]
################################################################
## code template for IGPRasterDataLayerType implementation
##class IGPRasterDataLayerType_Impl(object):

class IGPToolboxFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to methods on the toolbox factory object.'
    _iid_ = GUID('{9FECEE68-4F57-4ADC-91D4-5681234EF14D}')
    _idlflags_ = ['oleautomation']
IGPToolboxFactory._methods_ = [
    COMMETHOD([helpstring(u'Opens the specified toolbox from a file.')], HRESULT, 'OpenFromFile',
              ( ['in'], BSTR, 'Path' ),
              ( ['retval', 'out'], POINTER(POINTER(IGPToolbox)), 'Toolbox' )),
    COMMETHOD([helpstring(u'Creates a new toolbox.')], HRESULT, 'Create',
              ( ['in'], BSTR, 'Path' ),
              ( ['retval', 'out'], POINTER(POINTER(IGPToolbox)), 'Toolbox' )),
]
################################################################
## code template for IGPToolboxFactory implementation
##class IGPToolboxFactory_Impl(object):
##    def Create(self, Path):
##        u'Creates a new toolbox.'
##        #return Toolbox
##
##    def OpenFromFile(self, Path):
##        u'Opens the specified toolbox from a file.'
##        #return Toolbox
##

class GPCoordinateSystem(CoClass):
    u'Geoprocessing value object containing a coordinate system value.'
    _reg_clsid_ = GUID('{B3E1D7ED-A8D6-44A7-A911-817C361B574C}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPCoordinateSystem._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue, IGPCoordinateSystem, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPToolTip]

IGPRasterDataLayer._methods_ = [
]
################################################################
## code template for IGPRasterDataLayer implementation
##class IGPRasterDataLayer_Impl(object):

IGPPointType._methods_ = [
]
################################################################
## code template for IGPPointType implementation
##class IGPPointType_Impl(object):

IGpEnumObject._methods_ = [
    COMMETHOD([helpstring(u'Resets the enumeration so the next returned string is the first.')], HRESULT, 'Reset'),
    COMMETHOD([helpstring(u'Returns the next object in the enumeration sequence.')], HRESULT, 'Next',
              ( ['retval', 'out'], POINTER(POINTER(IDispatch)), 'ppObject' )),
    COMMETHOD([helpstring(u'Creates and returns a new cursor row object.')], HRESULT, 'NewRow',
              ( ['retval', 'out'], POINTER(POINTER(IDispatch)), 'ppObject' )),
    COMMETHOD([helpstring(u'Sets the fields to be used when creating cursors.')], HRESULT, 'SetFields',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFields), 'Fields' ),
              ( ['in'], BSTR, 'wildCard' ),
              ( ['in'], BSTR, 'FieldType' )),
    COMMETHOD([helpstring(u'Sets the indexes to be used when creating cursors.')], HRESULT, 'SetIndexes',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IIndexes), 'indexes' ),
              ( ['in'], BSTR, 'wildCard' )),
    COMMETHOD([helpstring(u'Initializes the enumeration of rows based upon the given cursor.')], HRESULT, 'SetCursor',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ICursor), 'cursor' ),
              ( ['in'], c_int, 'cursorCookie' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFields), 'Fields' ),
              ( ['in'], POINTER(IGPFieldInfo), 'FieldInfo' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRowBuffer), 'pRowBuffer' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet), 'pRowSet' ),
              ( ['in'], VARIANT_BOOL, 'update' ),
              ( ['in'], c_int, 'updateType' ),
              ( ['in'], comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.esriGeometryType, 'Type' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'pSpRef' ),
              ( ['in'], VARIANT_BOOL, 'HasM' ),
              ( ['in'], VARIANT_BOOL, 'HasZ' ),
              ( ['in'], c_double, 'defaultZ' )),
    COMMETHOD([helpstring(u'Updates the row associated with the given cursor row.')], HRESULT, 'UpdateRow',
              ( ['in'], POINTER(IDispatch), 'row' )),
    COMMETHOD([helpstring(u'Inserts the row associated with the given cursor row.')], HRESULT, 'InsertRow',
              ( ['in'], POINTER(IDispatch), 'row' )),
    COMMETHOD([helpstring(u'Inserts the row associated with the given cursor row.')], HRESULT, 'DeleteRow',
              ( ['in'], POINTER(IDispatch), 'row' )),
]
################################################################
## code template for IGpEnumObject implementation
##class IGpEnumObject_Impl(object):
##    def Reset(self):
##        u'Resets the enumeration so the next returned string is the first.'
##        #return 
##
##    def NewRow(self):
##        u'Creates and returns a new cursor row object.'
##        #return ppObject
##
##    def SetIndexes(self, indexes, wildCard):
##        u'Sets the indexes to be used when creating cursors.'
##        #return 
##
##    def SetFields(self, Fields, wildCard, FieldType):
##        u'Sets the fields to be used when creating cursors.'
##        #return 
##
##    def Next(self):
##        u'Returns the next object in the enumeration sequence.'
##        #return ppObject
##
##    def InsertRow(self, row):
##        u'Inserts the row associated with the given cursor row.'
##        #return 
##
##    def DeleteRow(self, row):
##        u'Inserts the row associated with the given cursor row.'
##        #return 
##
##    def UpdateRow(self, row):
##        u'Updates the row associated with the given cursor row.'
##        #return 
##
##    def SetCursor(self, cursor, cursorCookie, Fields, FieldInfo, pRowBuffer, pRowSet, update, updateType, Type, pSpRef, HasM, HasZ, defaultZ):
##        u'Initializes the enumeration of rows based upon the given cursor.'
##        #return 
##

IGPDataFileType._methods_ = [
]
################################################################
## code template for IGPDataFileType implementation
##class IGPDataFileType_Impl(object):

class GPESRIAvailableFonts(CoClass):
    u'Reports the available fonts on the server'
    _reg_clsid_ = GUID('{01E4C3C7-E793-443A-8237-4D455BE6EE6D}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPESRIAvailableFonts._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPFunction]

class IGPRasterLayerType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing raster layer data type object.'
    _iid_ = GUID('{B2297CCA-6E6D-4C7B-B20B-53F457FB85AC}')
    _idlflags_ = ['oleautomation']
IGPRasterLayerType._methods_ = [
]
################################################################
## code template for IGPRasterLayerType implementation
##class IGPRasterLayerType_Impl(object):

IGPDataFile._methods_ = [
    COMMETHOD(['propget', helpstring(u'The embedded data.')], HRESULT, 'Data',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._A7C74158_1062_4664_B404_8694D490FCD1_0_10_2.IGDSData)), 'ppData' )),
    COMMETHOD(['propputref', helpstring(u'The embedded data.')], HRESULT, 'Data',
              ( ['in'], POINTER(comtypes.gen._A7C74158_1062_4664_B404_8694D490FCD1_0_10_2.IGDSData), 'ppData' )),
    COMMETHOD(['propget', helpstring(u'The embedded data file.')], HRESULT, 'File',
              ( ['retval', 'out'], POINTER(BSTR), 'File' )),
    COMMETHOD(['propput', helpstring(u'The embedded data file.')], HRESULT, 'File',
              ( ['in'], BSTR, 'File' )),
    COMMETHOD(['propget', helpstring(u'The embedded dataset name.')], HRESULT, 'DatasetName',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'The embedded dataset name.')], HRESULT, 'DatasetName',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'The embedded dataset type.')], HRESULT, 'DataType',
              ( ['retval', 'out'], POINTER(BSTR), 'Type' )),
    COMMETHOD(['propput', helpstring(u'The embedded dataset type.')], HRESULT, 'DataType',
              ( ['in'], BSTR, 'Type' )),
]
################################################################
## code template for IGPDataFile implementation
##class IGPDataFile_Impl(object):
##    def _get(self):
##        u'The embedded dataset type.'
##        #return Type
##    def _set(self, Type):
##        u'The embedded dataset type.'
##    DataType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The embedded dataset name.'
##        #return Name
##    def _set(self, Name):
##        u'The embedded dataset name.'
##    DatasetName = property(_get, _set, doc = _set.__doc__)
##
##    def Data(self, ppData):
##        u'The embedded data.'
##        #return 
##
##    def _get(self):
##        u'The embedded data file.'
##        #return File
##    def _set(self, File):
##        u'The embedded data file.'
##    File = property(_get, _set, doc = _set.__doc__)
##

class GPNumericDomain(CoClass):
    u'Geoprocessing Numeric Domain object.'
    _reg_clsid_ = GUID('{ADDDE180-3922-48F7-87C8-342FFAE41161}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPNumericDomain(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of a geoprocessing numeric domain object.'
    _iid_ = GUID('{8314B3A2-0001-450B-A503-7B152D2A6E28}')
    _idlflags_ = ['oleautomation']
GPNumericDomain._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDomain, IGPNumericDomain, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

IGPToolboxEvents2._methods_ = [
    COMMETHOD([helpstring(u'Called when the display name of the toolbox is modified.')], HRESULT, 'OnToolboxDisplayNameAltered',
              ( ['in'], BSTR, 'oldName' ),
              ( ['in'], BSTR, 'newName' )),
]
################################################################
## code template for IGPToolboxEvents2 implementation
##class IGPToolboxEvents2_Impl(object):
##    def OnToolboxDisplayNameAltered(self, oldName, newName):
##        u'Called when the display name of the toolbox is modified.'
##        #return 
##

class IGPToolbox2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to methods on the toolbox object.'
    _iid_ = GUID('{2FEACD0B-9351-4C88-B424-C39F1DBF3230}')
    _idlflags_ = ['oleautomation']
IGPToolbox2._methods_ = [
    COMMETHOD(['propget', helpstring(u'The path name of the toolbox.')], HRESULT, 'PathName',
              ( ['retval', 'out'], POINTER(BSTR), 'Path' )),
    COMMETHOD(['propget', helpstring(u'The alias of the toolbox.')], HRESULT, 'Alias',
              ( ['retval', 'out'], POINTER(BSTR), 'Alias' )),
    COMMETHOD(['propget', helpstring(u'An enumeration of all the geoprocessing tool name objects contained within the toolbox.')], HRESULT, 'ToolNames',
              ( ['retval', 'out'], POINTER(POINTER(IEnumGPToolName)), 'names' )),
    COMMETHOD(['propget', helpstring(u'An enumeration of all the geoprocessing tools contained within the toolbox.')], HRESULT, 'Tools',
              ( ['retval', 'out'], POINTER(POINTER(IEnumGPTool)), 'Tools' )),
    COMMETHOD([helpstring(u'Returns a specific tool (by name) within the toolbox.')], HRESULT, 'OpenTool',
              ( ['in'], BSTR, 'Name' ),
              ( ['retval', 'out'], POINTER(POINTER(IGPTool)), 'Tool' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the toolbox has been deleted.')], HRESULT, 'IsDeleted',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'deleted' )),
    COMMETHOD([helpstring(u'Returns whether or not a new tool can be created in the toolbox.')], HRESULT, 'CanCreateTool',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'CanCreateTool' )),
    COMMETHOD([helpstring(u'Creates a new tool in the toolbox.')], HRESULT, 'CreateTool',
              ( ['in'], esriGPToolType, 'Type' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'DisplayName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['in'], BSTR, 'ToolCategory' ),
              ( ['in'], POINTER(IGPToolExtension), 'ToolExtension' ),
              ( ['retval', 'out'], POINTER(POINTER(IGPTool)), 'Tool' )),
    COMMETHOD([helpstring(u'Alters the alias of the toolbox.')], HRESULT, 'AlterAlias',
              ( ['in'], BSTR, 'newAlias' )),
    COMMETHOD(['propget', helpstring(u'Name of the (CHM) file containing help information for this toolbox.')], HRESULT, 'HelpFile',
              ( ['retval', 'out'], POINTER(BSTR), 'File' )),
    COMMETHOD(['propget', helpstring(u'The context identifier of the topic within the help file for this toolbox.')], HRESULT, 'HelpContext',
              ( ['retval', 'out'], POINTER(c_int), 'context' )),
    COMMETHOD([helpstring(u'Sets the help (CHM) file and help context identifier containing help for this toolbox.')], HRESULT, 'AlterHelpInfo',
              ( ['in'], BSTR, 'File' ),
              ( ['in'], c_int, 'context' )),
    COMMETHOD(['propget', helpstring(u'The display name of the toolbox.')], HRESULT, 'DisplayName',
              ( ['retval', 'out'], POINTER(BSTR), 'DisplayName' )),
    COMMETHOD([helpstring(u'Returns whether or not the display name property can be modified.')], HRESULT, 'CanAlterDisplayName',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'CanAlterDisplayName' )),
    COMMETHOD([helpstring(u'Modifies the display name property of the toolbox.')], HRESULT, 'AlterDisplayName',
              ( ['in'], BSTR, 'newDisplayName' )),
]
################################################################
## code template for IGPToolbox2 implementation
##class IGPToolbox2_Impl(object):
##    def CanAlterDisplayName(self):
##        u'Returns whether or not the display name property can be modified.'
##        #return CanAlterDisplayName
##
##    @property
##    def DisplayName(self):
##        u'The display name of the toolbox.'
##        #return DisplayName
##
##    def AlterDisplayName(self, newDisplayName):
##        u'Modifies the display name property of the toolbox.'
##        #return 
##
##    @property
##    def ToolNames(self):
##        u'An enumeration of all the geoprocessing tool name objects contained within the toolbox.'
##        #return names
##
##    def CreateTool(self, Type, Name, DisplayName, Description, ToolCategory, ToolExtension):
##        u'Creates a new tool in the toolbox.'
##        #return Tool
##
##    @property
##    def Alias(self):
##        u'The alias of the toolbox.'
##        #return Alias
##
##    @property
##    def PathName(self):
##        u'The path name of the toolbox.'
##        #return Path
##
##    def OpenTool(self, Name):
##        u'Returns a specific tool (by name) within the toolbox.'
##        #return Tool
##
##    def AlterAlias(self, newAlias):
##        u'Alters the alias of the toolbox.'
##        #return 
##
##    @property
##    def HelpFile(self):
##        u'Name of the (CHM) file containing help information for this toolbox.'
##        #return File
##
##    def AlterHelpInfo(self, File, context):
##        u'Sets the help (CHM) file and help context identifier containing help for this toolbox.'
##        #return 
##
##    @property
##    def Tools(self):
##        u'An enumeration of all the geoprocessing tools contained within the toolbox.'
##        #return Tools
##
##    def CanCreateTool(self):
##        u'Returns whether or not a new tool can be created in the toolbox.'
##        #return CanCreateTool
##
##    @property
##    def IsDeleted(self):
##        u'Indicates if the toolbox has been deleted.'
##        #return deleted
##
##    @property
##    def HelpContext(self):
##        u'The context identifier of the topic within the help file for this toolbox.'
##        #return context
##

class IGPExportWebMapExtensionImpl(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides the server connections information to the ExportWebMap tool extension.'
    _iid_ = GUID('{E6842100-BC1C-4F44-9690-25EA099D4608}')
    _idlflags_ = []
IGPExportWebMapExtensionImpl._methods_ = [
    COMMETHOD([helpstring(u'Returns the names of the available tools.')], HRESULT, 'PutServerConnections',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'pServerConnections' )),
    COMMETHOD([helpstring(u'Returns the names of the available tools.')], HRESULT, 'GetServerConnections',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'ppServerConnections' )),
]
################################################################
## code template for IGPExportWebMapExtensionImpl implementation
##class IGPExportWebMapExtensionImpl_Impl(object):
##    def GetServerConnections(self):
##        u'Returns the names of the available tools.'
##        #return ppServerConnections
##
##    def PutServerConnections(self, pServerConnections):
##        u'Returns the names of the available tools.'
##        #return 
##

class GPRepresentationLayerDomain(CoClass):
    u'Geoprocessing Representation Layer Domain.'
    _reg_clsid_ = GUID('{821ACB85-5063-48A3-B2D5-3A95F1C8C73D}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPRepresentationLayerDomain._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDomain, IGPRepresentationLayerDomain, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersionSupportGEN]

IGPDoubleType._methods_ = [
]
################################################################
## code template for IGPDoubleType implementation
##class IGPDoubleType_Impl(object):

IGPRasterBuilderType._methods_ = [
]
################################################################
## code template for IGPRasterBuilderType implementation
##class IGPRasterBuilderType_Impl(object):

class GPRouteMeasureEventDomain(CoClass):
    u'Object for filtering the acceptable measure fields for event locations.'
    _reg_clsid_ = GUID('{5B7D4CF9-95E0-4990-AD6E-D25EF89BAEA8}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPRouteMeasureEventDomain(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the route measure event table domain.'
    _iid_ = GUID('{66012F93-3A04-4C17-A7DB-79E76EB1837B}')
    _idlflags_ = ['oleautomation']
GPRouteMeasureEventDomain._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDomain, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGxFilterInfo, IGPRouteMeasureEventDomain]

IGPSAGeoDataType._methods_ = [
    COMMETHOD(['propget', helpstring(u'GPSAGeoDataDomain.')], HRESULT, 'Domain',
              ( ['retval', 'out'], POINTER(POINTER(IGPSAGeoDataDomain)), 'ppDomain' )),
    COMMETHOD(['propputref', helpstring(u'GPSAGeoDataDomain.')], HRESULT, 'Domain',
              ( ['in'], POINTER(IGPSAGeoDataDomain), 'ppDomain' )),
]
################################################################
## code template for IGPSAGeoDataType implementation
##class IGPSAGeoDataType_Impl(object):
##    def Domain(self, ppDomain):
##        u'GPSAGeoDataDomain.'
##        #return 
##

IGPRasterBuilder._methods_ = [
    COMMETHOD(['propget', helpstring(u'The embedded raster builder.')], HRESULT, 'RasterType',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._8F0541A3_D5BE_4B3F_A8D9_062D5579E19B_0_10_2.IRasterType)), 'ppRasterType' )),
    COMMETHOD(['propputref', helpstring(u'The embedded raster builder.')], HRESULT, 'RasterType',
              ( ['in'], POINTER(comtypes.gen._8F0541A3_D5BE_4B3F_A8D9_062D5579E19B_0_10_2.IRasterType), 'ppRasterType' )),
]
################################################################
## code template for IGPRasterBuilder implementation
##class IGPRasterBuilder_Impl(object):
##    def RasterType(self, ppRasterType):
##        u'The embedded raster builder.'
##        #return 
##

class GPServerCachingFunctionFactory(CoClass):
    _reg_clsid_ = GUID('{14DBF4FC-B5F0-4517-A0E4-CC646F62F238}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPServerCachingFunctionFactory._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPFunctionFactory]

class IMdElementDialogSupport(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to support methods on the element dialog.'
    _iid_ = GUID('{14E33F2B-0CCF-48C8-A393-3CFD49766933}')
    _idlflags_ = ['oleautomation']
IMdElementDialogSupport._methods_ = [
    COMMETHOD(['propget', helpstring(u'The overriding stylesheet to use to display the dialog for this object.')], HRESULT, 'Stylesheet',
              ( ['retval', 'out'], POINTER(BSTR), 'Stylesheet' )),
    COMMETHOD(['propput', helpstring(u'The overriding stylesheet to use to display the dialog for this object.')], HRESULT, 'Stylesheet',
              ( ['in'], BSTR, 'Stylesheet' )),
]
################################################################
## code template for IMdElementDialogSupport implementation
##class IMdElementDialogSupport_Impl(object):
##    def _get(self):
##        u'The overriding stylesheet to use to display the dialog for this object.'
##        #return Stylesheet
##    def _set(self, Stylesheet):
##        u'The overriding stylesheet to use to display the dialog for this object.'
##    Stylesheet = property(_get, _set, doc = _set.__doc__)
##

class GPServerProxyHelper(CoClass):
    u'GP Server Helper Class.'
    _reg_clsid_ = GUID('{BA0DF3E4-BEF2-4810-BA83-D4D2E795E0FE}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPServerProxyHelper._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown]

class GPManageMapCacheScales(CoClass):
    u'Manage pre-rendered tile cache scales for the Map.'
    _reg_clsid_ = GUID('{E51A1749-7DBE-4A23-A972-F001D16E7EB0}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPManageMapCacheScales._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPFunction]

IGPSQLExpressionType._methods_ = [
]
################################################################
## code template for IGPSQLExpressionType implementation
##class IGPSQLExpressionType_Impl(object):

class GPCellSizeXYType(CoClass):
    u'Geoprocessing Point Data Type.'
    _reg_clsid_ = GUID('{63DC53EE-FE9F-44AA-9802-CD4B99380B5B}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPCellSizeXYType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of the geoprocessing CellSizeXY data type.'
    _iid_ = GUID('{656C078A-CA46-4A19-A6E8-015D25E84A12}')
    _idlflags_ = ['oleautomation']
GPCellSizeXYType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, IGPCellSizeXYType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

IGPNumericDomain._methods_ = [
    COMMETHOD(['propput', helpstring(u'Defines if empty is allowed.')], HRESULT, 'AllowEmpty',
              ( ['in'], VARIANT_BOOL, 'AllowEmpty' )),
    COMMETHOD(['propget', helpstring(u'Defines if empty is allowed.')], HRESULT, 'AllowEmpty',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'AllowEmpty' )),
    COMMETHOD(['propput', helpstring(u'Sets the lower limit value of the numeric domain object.')], HRESULT, 'LowLimit',
              ( ['in'], c_double, 'LowLimit' )),
    COMMETHOD(['propget', helpstring(u'Sets the lower limit value of the numeric domain object.')], HRESULT, 'LowLimit',
              ( ['retval', 'out'], POINTER(c_double), 'LowLimit' )),
    COMMETHOD(['propput', helpstring(u'Defines the LowLimitInclusive property.')], HRESULT, 'LowLimitInclusive',
              ( ['in'], VARIANT_BOOL, 'bInclusive' )),
    COMMETHOD(['propget', helpstring(u'Defines the LowLimitInclusive property.')], HRESULT, 'LowLimitInclusive',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'bInclusive' )),
    COMMETHOD([helpstring(u'Defines the HighLimit property.')], HRESULT, 'SetHighLimit',
              ( ['in'], VARIANT_BOOL, 'allowHighLimit' ),
              ( [], c_double, 'HighLimit' )),
    COMMETHOD([helpstring(u'Returns the HighLimit property.')], HRESULT, 'GetHighLimit',
              ( ['out'], POINTER(VARIANT_BOOL), 'allowHighLimit' ),
              ( ['retval', 'out'], POINTER(c_double), 'HighLimit' )),
]
################################################################
## code template for IGPNumericDomain implementation
##class IGPNumericDomain_Impl(object):
##    def SetHighLimit(self, allowHighLimit, HighLimit):
##        u'Defines the HighLimit property.'
##        #return 
##
##    def _get(self):
##        u'Sets the lower limit value of the numeric domain object.'
##        #return LowLimit
##    def _set(self, LowLimit):
##        u'Sets the lower limit value of the numeric domain object.'
##    LowLimit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Defines if empty is allowed.'
##        #return AllowEmpty
##    def _set(self, AllowEmpty):
##        u'Defines if empty is allowed.'
##    AllowEmpty = property(_get, _set, doc = _set.__doc__)
##
##    def GetHighLimit(self):
##        u'Returns the HighLimit property.'
##        #return allowHighLimit, HighLimit
##
##    def _get(self):
##        u'Defines the LowLimitInclusive property.'
##        #return bInclusive
##    def _set(self, bInclusive):
##        u'Defines the LowLimitInclusive property.'
##    LowLimitInclusive = property(_get, _set, doc = _set.__doc__)
##

class GPSuggestDefaultScales(CoClass):
    u'Suggest pre-rendered tile cache scales for the Map.'
    _reg_clsid_ = GUID('{6059DC33-1484-4638-B010-96BF0CC29A10}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPSuggestDefaultScales._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPFunction]

class GPFieldMap(CoClass):
    u'Geoprocessing Field Map object describing an entry within the Field Map.'
    _reg_clsid_ = GUID('{DECF43A7-578A-48CA-BCA2-4B11148E2009}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPFieldMap._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPFieldMap, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

class GPServerCachingManageMapCacheTiles(CoClass):
    u'Manage pre-rendered tile cache for the Map.'
    _reg_clsid_ = GUID('{146C00E9-448D-4D2A-977E-B22B9C6A446B}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPServerCachingManageMapCacheTiles._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPFunction]

IToolboxWorkspaceExtension._methods_ = [
]
################################################################
## code template for IToolboxWorkspaceExtension implementation
##class IToolboxWorkspaceExtension_Impl(object):

IGPCellSizeXYType._methods_ = [
]
################################################################
## code template for IGPCellSizeXYType implementation
##class IGPCellSizeXYType_Impl(object):

class GPRouteDomain(CoClass):
    u'Object for filtering route feature classes.'
    _reg_clsid_ = GUID('{193FFF2F-C923-430B-879F-50BF65F61703}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPRouteDomain._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDomain, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGxFilterInfo, IGPRouteDomain]

IGPLongType._methods_ = [
]
################################################################
## code template for IGPLongType implementation
##class IGPLongType_Impl(object):

class IMBImport(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to ModelBuilder Import Interface.'
    _iid_ = GUID('{88363696-DDED-496D-951F-0504894A1119}')
    _idlflags_ = []
IMBImport._methods_ = [
    COMMETHOD([helpstring(u'Loads ArcView 3 ModelBuilder model.')], HRESULT, 'ImportXMD',
              ( ['in'], BSTR, 'File' ),
              ( ['retval', 'out'], POINTER(POINTER(IMdModel)), 'ppModel' )),
    COMMETHOD([helpstring(u'Loads ArcView 3 ModelBuilder metadata.')], HRESULT, 'ImportMetadata',
              ( ['in'], BSTR, 'File' ),
              ( ['in'], POINTER(IMdModel), 'pModel' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet), 'pMetadata' )),
]
################################################################
## code template for IMBImport implementation
##class IMBImport_Impl(object):
##    def ImportXMD(self, File):
##        u'Loads ArcView 3 ModelBuilder model.'
##        #return ppModel
##
##    def ImportMetadata(self, File, pModel, pMetadata):
##        u'Loads ArcView 3 ModelBuilder metadata.'
##        #return 
##

IGPVariantType._methods_ = [
]
################################################################
## code template for IGPVariantType implementation
##class IGPVariantType_Impl(object):

class GPServerFunctionFactory(CoClass):
    _reg_clsid_ = GUID('{F8AC2C04-DEEC-43F4-86EF-246F91F12856}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPServerFunctionFactory._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPFunctionFactory]

IGPBooleanType._methods_ = [
]
################################################################
## code template for IGPBooleanType implementation
##class IGPBooleanType_Impl(object):

IGPLine2._methods_ = [
    COMMETHOD(['propget', helpstring(u'The actual the polyline object.')], HRESULT, 'Polyline',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPolyline)), 'Polyline' )),
    COMMETHOD(['propputref', helpstring(u'The actual the polyline object.')], HRESULT, 'Polyline',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPolyline), 'Polyline' )),
]
################################################################
## code template for IGPLine2 implementation
##class IGPLine2_Impl(object):
##    def Polyline(self, Polyline):
##        u'The actual the polyline object.'
##        #return 
##

IGPTableViewType._methods_ = [
]
################################################################
## code template for IGPTableViewType implementation
##class IGPTableViewType_Impl(object):

IGPCalculatorExpressionType._methods_ = [
]
################################################################
## code template for IGPCalculatorExpressionType implementation
##class IGPCalculatorExpressionType_Impl(object):

IGPParameterInfo._methods_ = [
    COMMETHOD(['propget', helpstring(u'The parameter name.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'The parameter name.')], HRESULT, 'Name',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'The parameter display name.')], HRESULT, 'DisplayName',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'The parameter display name.')], HRESULT, 'DisplayName',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'The parameter category.')], HRESULT, 'Category',
              ( ['retval', 'out'], POINTER(BSTR), 'Category' )),
    COMMETHOD(['propput', helpstring(u'The parameter category.')], HRESULT, 'Category',
              ( ['in'], BSTR, 'Category' )),
    COMMETHOD(['propget', helpstring(u'The parameter data type.')], HRESULT, 'DataType',
              ( ['retval', 'out'], POINTER(BSTR), 'Type' )),
    COMMETHOD(['propput', helpstring(u'The parameter data type.')], HRESULT, 'DataType',
              ( ['in'], BSTR, 'Type' )),
    COMMETHOD(['propget', helpstring(u'The parameter direction.')], HRESULT, 'Direction',
              ( ['retval', 'out'], POINTER(esriGPParameterDirection), 'Direction' )),
    COMMETHOD(['propput', helpstring(u'The parameter direction.')], HRESULT, 'Direction',
              ( ['in'], esriGPParameterDirection, 'Direction' )),
    COMMETHOD(['propget', helpstring(u'The parameter type.')], HRESULT, 'ParameterType',
              ( ['retval', 'out'], POINTER(esriGPParameterType), 'paramtype' )),
    COMMETHOD(['propput', helpstring(u'The parameter type.')], HRESULT, 'ParameterType',
              ( ['in'], esriGPParameterType, 'paramtype' )),
    COMMETHOD(['propget', helpstring(u'The parameter choice list.')], HRESULT, 'ChoiceList',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray)), 'ppChoiceList' )),
    COMMETHOD(['propputref', helpstring(u'The parameter choice list.')], HRESULT, 'ChoiceList',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray), 'ppChoiceList' )),
    COMMETHOD(['propget', helpstring(u'The parameter value.')], HRESULT, 'Value',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue)), 'ppValue' )),
    COMMETHOD(['propputref', helpstring(u'The parameter value.')], HRESULT, 'Value',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'ppValue' )),
]
################################################################
## code template for IGPParameterInfo implementation
##class IGPParameterInfo_Impl(object):
##    def _get(self):
##        u'The parameter category.'
##        #return Category
##    def _set(self, Category):
##        u'The parameter category.'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The parameter type.'
##        #return paramtype
##    def _set(self, paramtype):
##        u'The parameter type.'
##    ParameterType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The parameter direction.'
##        #return Direction
##    def _set(self, Direction):
##        u'The parameter direction.'
##    Direction = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The parameter display name.'
##        #return Name
##    def _set(self, Name):
##        u'The parameter display name.'
##    DisplayName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The parameter name.'
##        #return Name
##    def _set(self, Name):
##        u'The parameter name.'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The parameter data type.'
##        #return Type
##    def _set(self, Type):
##        u'The parameter data type.'
##    DataType = property(_get, _set, doc = _set.__doc__)
##
##    def Value(self, ppValue):
##        u'The parameter value.'
##        #return 
##
##    def ChoiceList(self, ppChoiceList):
##        u'The parameter choice list.'
##        #return 
##

class GPServerCachingValidateMapCacheTilesWorker(CoClass):
    u'Validate pre-rendered tile cache for the Map.'
    _reg_clsid_ = GUID('{6984F70D-97FC-4738-983D-0876F031C3A3}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPServerCachingValidateMapCacheTilesWorker._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPFunction]

class IGPToolInfo2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties/methods of the tool information.'
    _iid_ = GUID('{B77F9FEB-2937-4BD0-B4A7-0E1D3F6317D8}')
    _idlflags_ = ['oleautomation']
IGPToolInfo2._methods_ = [
    COMMETHOD(['propget', helpstring(u'The tool description.')], HRESULT, 'Description',
              ( ['retval', 'out'], POINTER(BSTR), 'Description' )),
    COMMETHOD(['propput', helpstring(u'The tool description.')], HRESULT, 'Description',
              ( ['in'], BSTR, 'Description' )),
]
################################################################
## code template for IGPToolInfo2 implementation
##class IGPToolInfo2_Impl(object):
##    def _get(self):
##        u'The tool description.'
##        #return Description
##    def _set(self, Description):
##        u'The tool description.'
##    Description = property(_get, _set, doc = _set.__doc__)
##

class GPMultiValueType(CoClass):
    u'Geoprocessing Multi-Value Data Type.'
    _reg_clsid_ = GUID('{E798AAA9-F35B-48A1-8380-83165F8B1CB8}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPMultiValueType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, IGPMultiValueType, IGPValueTableType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

IGPAnnoDomain._methods_ = [
]
################################################################
## code template for IGPAnnoDomain implementation
##class IGPAnnoDomain_Impl(object):

IGpSpRefObject._methods_ = [
    COMMETHOD([dispid(1), helpstring(u'The type of the spatial reference.'), 'propget'], HRESULT, 'Type',
              ( ['retval', 'out'], POINTER(BSTR), 'Type' )),
    COMMETHOD([dispid(1), helpstring(u'The type of the spatial reference.'), 'propput'], HRESULT, 'Type',
              ( ['in'], BSTR, 'Type' )),
    COMMETHOD([dispid(2), helpstring(u'The name of this spatial reference component.'), 'propget'], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD([dispid(2), helpstring(u'The name of this spatial reference component.'), 'propput'], HRESULT, 'Name',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD([dispid(3), helpstring(u'The alias of this spatial reference component.'), 'propget'], HRESULT, 'Alias',
              ( ['retval', 'out'], POINTER(BSTR), 'Alias' )),
    COMMETHOD([dispid(3), helpstring(u'The alias of this spatial reference component.'), 'propput'], HRESULT, 'Alias',
              ( ['in'], BSTR, 'Alias' )),
    COMMETHOD([dispid(4), helpstring(u'The abbreviated name of this spatial reference component.'), 'propget'], HRESULT, 'Abbreviation',
              ( ['retval', 'out'], POINTER(BSTR), 'Abbreviation' )),
    COMMETHOD([dispid(4), helpstring(u'The abbreviated name of this spatial reference component.'), 'propput'], HRESULT, 'Abbreviation',
              ( ['in'], BSTR, 'Abbreviation' )),
    COMMETHOD([dispid(5), helpstring(u'The comment string of this spatial reference component.'), 'propget'], HRESULT, 'Remarks',
              ( ['retval', 'out'], POINTER(BSTR), 'Remarks' )),
    COMMETHOD([dispid(5), helpstring(u'The comment string of this spatial reference component.'), 'propput'], HRESULT, 'Remarks',
              ( ['in'], BSTR, 'Remarks' )),
    COMMETHOD([dispid(6), helpstring(u'The factory code of the spatial reference.'), 'propget'], HRESULT, 'FactoryCode',
              ( ['retval', 'out'], POINTER(c_int), 'code' )),
    COMMETHOD([dispid(6), helpstring(u'The factory code of the spatial reference.'), 'propput'], HRESULT, 'FactoryCode',
              ( ['in'], c_int, 'code' )),
    COMMETHOD([dispid(7), helpstring(u'Indicates whether or not (x,y) precision information has been defined.'), 'propget'], HRESULT, 'HasXYPrecision',
              ( ['retval', 'out'], POINTER(BSTR), 'HasXYPrecision' )),
    COMMETHOD([dispid(8), helpstring(u'Indicates whether or not z-value precision information has been defined.'), 'propget'], HRESULT, 'HasZPrecision',
              ( ['retval', 'out'], POINTER(BSTR), 'HasZPrecision' )),
    COMMETHOD([dispid(9), helpstring(u'Indicates whether or not m-value precision information has been defined.'), 'propget'], HRESULT, 'HasMPrecision',
              ( ['retval', 'out'], POINTER(BSTR), 'HasMPrecision' )),
    COMMETHOD([dispid(10), helpstring(u'The false origin and units.'), 'propget'], HRESULT, 'FalseOriginAndUnits',
              ( ['retval', 'out'], POINTER(BSTR), 'Results' )),
    COMMETHOD([dispid(11), helpstring(u'The Z false origin and units.'), 'propget'], HRESULT, 'ZFalseOriginAndUnits',
              ( ['retval', 'out'], POINTER(BSTR), 'Results' )),
    COMMETHOD([dispid(12), helpstring(u'The measure false origin and units.'), 'propget'], HRESULT, 'MFalseOriginAndUnits',
              ( ['retval', 'out'], POINTER(BSTR), 'Results' )),
    COMMETHOD([dispid(13), helpstring(u'The extent of the X/Y domain.'), 'propget'], HRESULT, 'Domain',
              ( ['retval', 'out'], POINTER(BSTR), 'Results' )),
    COMMETHOD([dispid(14), helpstring(u'The extent of the Z domain.'), 'propget'], HRESULT, 'ZDomain',
              ( ['retval', 'out'], POINTER(BSTR), 'Results' )),
    COMMETHOD([dispid(15), helpstring(u'The extent of the measure domain.'), 'propget'], HRESULT, 'MDomain',
              ( ['retval', 'out'], POINTER(BSTR), 'Results' )),
    COMMETHOD([dispid(16), helpstring(u'The usage notes of a projected coordinate system.'), 'propget'], HRESULT, 'Usage',
              ( ['retval', 'out'], POINTER(BSTR), 'Usage' )),
    COMMETHOD([dispid(17), helpstring(u'The central meridian (Lambda0) of a projected coordinate system.'), 'propget'], HRESULT, 'CentralMeridian',
              ( ['retval', 'out'], POINTER(c_double), 'CentralMeridian' )),
    COMMETHOD([dispid(17), helpstring(u'The central meridian (Lambda0) of a projected coordinate system.'), 'propput'], HRESULT, 'CentralMeridian',
              ( ['in'], c_double, 'CentralMeridian' )),
    COMMETHOD([dispid(18), helpstring(u'The central meridian (Lambda0) of a projected coordinate system in degrees.'), 'propget'], HRESULT, 'CentralMeridianInDegrees',
              ( ['retval', 'out'], POINTER(c_double), 'CentralMeridian' )),
    COMMETHOD([dispid(18), helpstring(u'The central meridian (Lambda0) of a projected coordinate system in degrees.'), 'propput'], HRESULT, 'CentralMeridianInDegrees',
              ( ['in'], c_double, 'CentralMeridian' )),
    COMMETHOD([dispid(19), helpstring(u'The longitude of origin (Lambda0) of a projected coordinate system.'), 'propget'], HRESULT, 'LongitudeOfOrigin',
              ( ['retval', 'out'], POINTER(c_double), 'LongitudeOfOrigin' )),
    COMMETHOD([dispid(19), helpstring(u'The longitude of origin (Lambda0) of a projected coordinate system.'), 'propput'], HRESULT, 'LongitudeOfOrigin',
              ( ['in'], c_double, 'LongitudeOfOrigin' )),
    COMMETHOD([dispid(20), helpstring(u'The latitude of the first point (Phi 1) of a projected coordinate system.'), 'propget'], HRESULT, 'LatitudeOf1st',
              ( ['retval', 'out'], POINTER(c_double), 'standardLongitude1' )),
    COMMETHOD([dispid(20), helpstring(u'The latitude of the first point (Phi 1) of a projected coordinate system.'), 'propput'], HRESULT, 'LatitudeOf1st',
              ( ['in'], c_double, 'standardLongitude1' )),
    COMMETHOD([dispid(21), helpstring(u'The latitude of the second point (Phi 2) of a projected coordinate system.'), 'propget'], HRESULT, 'LatitudeOf2nd',
              ( ['retval', 'out'], POINTER(c_double), 'LatitudeOf2nd' )),
    COMMETHOD([dispid(21), helpstring(u'The latitude of the second point (Phi 2) of a projected coordinate system.'), 'propput'], HRESULT, 'LatitudeOf2nd',
              ( ['in'], c_double, 'LatitudeOf2nd' )),
    COMMETHOD([dispid(22), helpstring(u'The false easting (X0) of a projected coordinate system.'), 'propget'], HRESULT, 'FalseEasting',
              ( ['retval', 'out'], POINTER(c_double), 'FalseEasting' )),
    COMMETHOD([dispid(22), helpstring(u'The false easting (X0) of a projected coordinate system.'), 'propput'], HRESULT, 'FalseEasting',
              ( ['in'], c_double, 'FalseEasting' )),
    COMMETHOD([dispid(23), helpstring(u'The false northing (Y0) of a projected coordinate system.'), 'propget'], HRESULT, 'FalseNorthing',
              ( ['retval', 'out'], POINTER(c_double), 'FalseNorthing' )),
    COMMETHOD([dispid(23), helpstring(u'The false northing (Y0) of a projected coordinate system.'), 'propput'], HRESULT, 'FalseNorthing',
              ( ['in'], c_double, 'FalseNorthing' )),
    COMMETHOD([dispid(24), helpstring(u'The central parallel (Phi 0) of a projected coordinate system.'), 'propget'], HRESULT, 'CentralParallel',
              ( ['retval', 'out'], POINTER(c_double), 'CentralParallel' )),
    COMMETHOD([dispid(24), helpstring(u'The central parallel (Phi 0) of a projected coordinate system.'), 'propput'], HRESULT, 'CentralParallel',
              ( ['in'], c_double, 'CentralParallel' )),
    COMMETHOD([dispid(25), helpstring(u'The first parallel (Phi 1) of a projected coordinate system.'), 'propget'], HRESULT, 'StandardParallel1',
              ( ['retval', 'out'], POINTER(c_double), 'StandardParallel1' )),
    COMMETHOD([dispid(25), helpstring(u'The first parallel (Phi 1) of a projected coordinate system.'), 'propput'], HRESULT, 'StandardParallel1',
              ( ['in'], c_double, 'StandardParallel1' )),
    COMMETHOD([dispid(26), helpstring(u'The second parallel (Phi 2) of a projected coordinate system.'), 'propget'], HRESULT, 'StandardParallel2',
              ( ['retval', 'out'], POINTER(c_double), 'StandardParallel2' )),
    COMMETHOD([dispid(26), helpstring(u'The second parallel (Phi 2) of a projected coordinate system.'), 'propput'], HRESULT, 'StandardParallel2',
              ( ['in'], c_double, 'StandardParallel2' )),
    COMMETHOD([dispid(27), helpstring(u'The longitude of the first point (Lambda 1) of a projected coordinate system.'), 'propget'], HRESULT, 'LongitudeOf1st',
              ( ['retval', 'out'], POINTER(c_double), 'LongitudeOf1st' )),
    COMMETHOD([dispid(27), helpstring(u'The longitude of the first point (Lambda 1) of a projected coordinate system.'), 'propput'], HRESULT, 'LongitudeOf1st',
              ( ['in'], c_double, 'LongitudeOf1st' )),
    COMMETHOD([dispid(28), helpstring(u'The longitude of the second point (Lambda 2) of a projected coordinate system.'), 'propget'], HRESULT, 'LongitudeOf2nd',
              ( ['retval', 'out'], POINTER(c_double), 'LongitudeOf2nd' )),
    COMMETHOD([dispid(28), helpstring(u'The longitude of the second point (Lambda 2) of a projected coordinate system.'), 'propput'], HRESULT, 'LongitudeOf2nd',
              ( ['in'], c_double, 'LongitudeOf2nd' )),
    COMMETHOD([dispid(29), helpstring(u'The scale factor (K0) of a projected coordinate system.'), 'propget'], HRESULT, 'ScaleFactor',
              ( ['retval', 'out'], POINTER(c_double), 'ScaleFactor' )),
    COMMETHOD([dispid(29), helpstring(u'The scale factor (K0) of a projected coordinate system.'), 'propput'], HRESULT, 'ScaleFactor',
              ( ['in'], c_double, 'ScaleFactor' )),
    COMMETHOD([dispid(30), helpstring(u'The azimuth of a projected coordinate system.'), 'propget'], HRESULT, 'Azimuth',
              ( ['retval', 'out'], POINTER(c_double), 'Azimuth' )),
    COMMETHOD([dispid(30), helpstring(u'The azimuth of a projected coordinate system.'), 'propput'], HRESULT, 'Azimuth',
              ( ['in'], c_double, 'Azimuth' )),
    COMMETHOD([dispid(31), helpstring(u'The semi-major axis length of this spheroid.'), 'propget'], HRESULT, 'SemiMajorAxis',
              ( ['retval', 'out'], POINTER(c_double), 'axis' )),
    COMMETHOD([dispid(31), helpstring(u'The semi-major axis length of this spheroid.'), 'propput'], HRESULT, 'SemiMajorAxis',
              ( ['in'], c_double, 'axis' )),
    COMMETHOD([dispid(32), helpstring(u'The semi-minor axis length of this spheroid.'), 'propget'], HRESULT, 'SemiMinorAxis',
              ( ['retval', 'out'], POINTER(c_double), 'axis' )),
    COMMETHOD([dispid(32), helpstring(u'The semi-minor axis length of this spheroid.'), 'propput'], HRESULT, 'SemiMinorAxis',
              ( ['in'], c_double, 'axis' )),
    COMMETHOD([dispid(33), helpstring(u'The flattening ratio of this spheroid.'), 'propget'], HRESULT, 'Flattening',
              ( ['retval', 'out'], POINTER(c_double), 'Flattening' )),
    COMMETHOD([dispid(33), helpstring(u'The flattening ratio of this spheroid.'), 'propput'], HRESULT, 'Flattening',
              ( ['in'], c_double, 'Flattening' )),
    COMMETHOD([dispid(34), helpstring(u'The longitude value of this prime meridian.'), 'propget'], HRESULT, 'Longitude',
              ( ['retval', 'out'], POINTER(c_double), 'Longitude' )),
    COMMETHOD([dispid(35), helpstring(u'The radians per angular unit.'), 'propget'], HRESULT, 'RadiansPerUnit',
              ( ['retval', 'out'], POINTER(c_double), 'RadiansPerUnit' )),
    COMMETHOD([dispid(36), helpstring(u'The classification of a map projection.'), 'propget'], HRESULT, 'Classification',
              ( ['retval', 'out'], POINTER(BSTR), 'Classification' )),
    COMMETHOD([dispid(110), helpstring(u'Get the false origin and units.')], HRESULT, 'SetFalseOriginAndUnits',
              ( ['in'], c_double, 'falseX' ),
              ( ['in'], c_double, 'falseY' ),
              ( ['in'], c_double, 'xyUnits' )),
    COMMETHOD([dispid(111), helpstring(u'Get the Z false origin and units.')], HRESULT, 'SetZFalseOriginAndUnits',
              ( ['in'], c_double, 'falseZ' ),
              ( ['in'], c_double, 'zUnits' )),
    COMMETHOD([dispid(112), helpstring(u'Get the measure false origin and units.')], HRESULT, 'SetMFalseOriginAndUnits',
              ( ['in'], c_double, 'falseM' ),
              ( ['in'], c_double, 'mUnits' )),
    COMMETHOD([dispid(113), helpstring(u'Get the domain extent.')], HRESULT, 'SetDomain',
              ( ['in'], c_double, 'XMin' ),
              ( ['in'], c_double, 'YMin' ),
              ( ['in'], c_double, 'XMax' ),
              ( ['in'], c_double, 'YMax' )),
    COMMETHOD([dispid(114), helpstring(u'Get the Z domain extent.')], HRESULT, 'SetZDomain',
              ( ['in'], c_double, 'ZMin' ),
              ( ['in'], c_double, 'ZMax' )),
    COMMETHOD([dispid(115), helpstring(u'Get the measure domain extent.')], HRESULT, 'SetMDomain',
              ( ['in'], c_double, 'MMin' ),
              ( ['in'], c_double, 'MMax' )),
    COMMETHOD([dispid(34), helpstring(u'The longitude value of this prime meridian.'), 'propput'], HRESULT, 'Longitude',
              ( ['in'], BSTR, 'Longitude' )),
    COMMETHOD([dispid(150), helpstring(u'The projected coordinate system name.'), 'propput'], HRESULT, 'PCSName',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD([dispid(150), helpstring(u'The projected coordinate system name.'), 'propget'], HRESULT, 'PCSName',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD([dispid(151), helpstring(u'The projected coordinate system code.'), 'propput'], HRESULT, 'PCSCode',
              ( ['in'], c_int, 'code' )),
    COMMETHOD([dispid(151), helpstring(u'The projected coordinate system code.'), 'propget'], HRESULT, 'PCSCode',
              ( ['retval', 'out'], POINTER(c_int), 'code' )),
    COMMETHOD([dispid(152), helpstring(u'The geographic coordinate system name.'), 'propput'], HRESULT, 'GCSName',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD([dispid(152), helpstring(u'The geographic coordinate system name.'), 'propget'], HRESULT, 'GCSName',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD([dispid(153), helpstring(u'The geographic coordinate system code.'), 'propput'], HRESULT, 'GCSCode',
              ( ['in'], c_int, 'code' )),
    COMMETHOD([dispid(153), helpstring(u'The geographic coordinate system code.'), 'propget'], HRESULT, 'GCSCode',
              ( ['retval', 'out'], POINTER(c_int), 'code' )),
    COMMETHOD([dispid(154), helpstring(u'The spheroid name.'), 'propput'], HRESULT, 'SpheroidName',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD([dispid(154), helpstring(u'The spheroid name.'), 'propget'], HRESULT, 'SpheroidName',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD([dispid(155), helpstring(u'The spheroid code.'), 'propput'], HRESULT, 'SpheroidCode',
              ( ['in'], c_int, 'code' )),
    COMMETHOD([dispid(155), helpstring(u'The spheroid code.'), 'propget'], HRESULT, 'SpheroidCode',
              ( ['retval', 'out'], POINTER(c_int), 'code' )),
    COMMETHOD([dispid(156), helpstring(u'The projection name.'), 'propput'], HRESULT, 'ProjectionName',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD([dispid(156), helpstring(u'The projection name.'), 'propget'], HRESULT, 'ProjectionName',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD([dispid(157), helpstring(u'The projection code.'), 'propput'], HRESULT, 'ProjectionCode',
              ( ['in'], c_int, 'code' )),
    COMMETHOD([dispid(157), helpstring(u'The projection code.'), 'propget'], HRESULT, 'ProjectionCode',
              ( ['retval', 'out'], POINTER(c_int), 'code' )),
    COMMETHOD([dispid(158), helpstring(u'The datum name.'), 'propput'], HRESULT, 'DatumName',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD([dispid(158), helpstring(u'The datum name.'), 'propget'], HRESULT, 'DatumName',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD([dispid(159), helpstring(u'The datum code.'), 'propput'], HRESULT, 'DatumCode',
              ( ['in'], c_int, 'code' )),
    COMMETHOD([dispid(159), helpstring(u'The datum code.'), 'propget'], HRESULT, 'DatumCode',
              ( ['retval', 'out'], POINTER(c_int), 'code' )),
    COMMETHOD([dispid(160), helpstring(u'The prime meridian name.'), 'propput'], HRESULT, 'PrimeMeridianName',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD([dispid(160), helpstring(u'The prime meridian name.'), 'propget'], HRESULT, 'PrimeMeridianName',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD([dispid(162), helpstring(u'The prime meridian code.'), 'propput'], HRESULT, 'PrimeMeridianCode',
              ( ['in'], c_int, 'code' )),
    COMMETHOD([dispid(162), helpstring(u'The prime meridian code.'), 'propget'], HRESULT, 'PrimeMeridianCode',
              ( ['retval', 'out'], POINTER(c_int), 'code' )),
    COMMETHOD([dispid(163), helpstring(u'The angular unit name.'), 'propput'], HRESULT, 'AngularUnitName',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD([dispid(163), helpstring(u'The angular unit name.'), 'propget'], HRESULT, 'AngularUnitName',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD([dispid(164), helpstring(u'The angular unit code.'), 'propput'], HRESULT, 'AngularUnitCode',
              ( ['in'], c_int, 'code' )),
    COMMETHOD([dispid(164), helpstring(u'The angular unit code.'), 'propget'], HRESULT, 'AngularUnitCode',
              ( ['retval', 'out'], POINTER(c_int), 'code' )),
    COMMETHOD([dispid(165), helpstring(u'The linear unit name.'), 'propput'], HRESULT, 'LinearUnitName',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD([dispid(165), helpstring(u'The linear unit name.'), 'propget'], HRESULT, 'LinearUnitName',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD([dispid(166), helpstring(u'The linear unit code.'), 'propput'], HRESULT, 'LinearUnitCode',
              ( ['in'], c_int, 'code' )),
    COMMETHOD([dispid(166), helpstring(u'The linear unit code.'), 'propget'], HRESULT, 'LinearUnitCode',
              ( ['retval', 'out'], POINTER(c_int), 'code' )),
    COMMETHOD([dispid(50), helpstring(u'Create the spatial reference from a projection file.')], HRESULT, 'CreateFromFile',
              ( ['in'], BSTR, 'prjFile' )),
    COMMETHOD([dispid(51), helpstring(u'Create the spatial reference using the currently set properties.')], HRESULT, 'Create'),
    COMMETHOD([dispid(52), helpstring(u'The spatial reference object.'), 'propputref'], HRESULT, 'SpatialReference',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'ppSpRef' )),
    COMMETHOD([dispid(52), helpstring(u'The spatial reference object.'), 'propget'], HRESULT, 'SpatialReference',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference)), 'ppSpRef' )),
    COMMETHOD([dispid(53), helpstring(u'The XYTolerance property.'), 'propput'], HRESULT, 'XYTolerance',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(53), helpstring(u'The XYTolerance property.'), 'propget'], HRESULT, 'XYTolerance',
              ( ['retval', 'out'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(54), helpstring(u'The MTolerance property.'), 'propput'], HRESULT, 'MTolerance',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(54), helpstring(u'The MTolerance property.'), 'propget'], HRESULT, 'MTolerance',
              ( ['retval', 'out'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(55), helpstring(u'The ZTolerance property.'), 'propput'], HRESULT, 'ZTolerance',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(55), helpstring(u'The ZTolerance property.'), 'propget'], HRESULT, 'ZTolerance',
              ( ['retval', 'out'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(56), helpstring(u'The XYResolution property.'), 'propput'], HRESULT, 'XYResolution',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(56), helpstring(u'The XYResolution property.'), 'propget'], HRESULT, 'XYResolution',
              ( ['retval', 'out'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(57), helpstring(u'The MResolution property.'), 'propput'], HRESULT, 'MResolution',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(57), helpstring(u'The MResolution property.'), 'propget'], HRESULT, 'MResolution',
              ( ['retval', 'out'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(58), helpstring(u'The ZResolution property.'), 'propput'], HRESULT, 'ZResolution',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD([dispid(58), helpstring(u'The ZResolution property.'), 'propget'], HRESULT, 'ZResolution',
              ( ['retval', 'out'], POINTER(c_double), 'Value' )),
    COMMETHOD([dispid(59), helpstring(u'The HighPrecision property.'), 'propput'], HRESULT, 'IsHighPrecision',
              ( ['in'], BSTR, 'Value' )),
    COMMETHOD([dispid(59), helpstring(u'The HighPrecision property.'), 'propget'], HRESULT, 'IsHighPrecision',
              ( ['retval', 'out'], POINTER(BSTR), 'Value' )),
]
################################################################
## code template for IGpSpRefObject implementation
##class IGpSpRefObject_Impl(object):
##    def CreateFromFile(self, prjFile):
##        u'Create the spatial reference from a projection file.'
##        #return 
##
##    @property
##    def HasXYPrecision(self):
##        u'Indicates whether or not (x,y) precision information has been defined.'
##        #return HasXYPrecision
##
##    def _get(self):
##        u'The first parallel (Phi 1) of a projected coordinate system.'
##        #return StandardParallel1
##    def _set(self, StandardParallel1):
##        u'The first parallel (Phi 1) of a projected coordinate system.'
##    StandardParallel1 = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The projected coordinate system code.'
##        #return code
##    def _set(self, code):
##        u'The projected coordinate system code.'
##    PCSCode = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The second parallel (Phi 2) of a projected coordinate system.'
##        #return StandardParallel2
##    def _set(self, StandardParallel2):
##        u'The second parallel (Phi 2) of a projected coordinate system.'
##    StandardParallel2 = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def FalseOriginAndUnits(self):
##        u'The false origin and units.'
##        #return Results
##
##    def _get(self):
##        u'The factory code of the spatial reference.'
##        #return code
##    def _set(self, code):
##        u'The factory code of the spatial reference.'
##    FactoryCode = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The longitude of the first point (Lambda 1) of a projected coordinate system.'
##        #return LongitudeOf1st
##    def _set(self, LongitudeOf1st):
##        u'The longitude of the first point (Lambda 1) of a projected coordinate system.'
##    LongitudeOf1st = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SpatialReference(self, ppSpRef):
##        u'The spatial reference object.'
##        #return 
##
##    @property
##    def HasZPrecision(self):
##        u'Indicates whether or not z-value precision information has been defined.'
##        #return HasZPrecision
##
##    def _get(self):
##        u'The flattening ratio of this spheroid.'
##        #return Flattening
##    def _set(self, Flattening):
##        u'The flattening ratio of this spheroid.'
##    Flattening = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The linear unit name.'
##        #return Name
##    def _set(self, Name):
##        u'The linear unit name.'
##    LinearUnitName = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Usage(self):
##        u'The usage notes of a projected coordinate system.'
##        #return Usage
##
##    def _get(self):
##        u'The prime meridian code.'
##        #return code
##    def _set(self, code):
##        u'The prime meridian code.'
##    PrimeMeridianCode = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def RadiansPerUnit(self):
##        u'The radians per angular unit.'
##        #return RadiansPerUnit
##
##    def _get(self):
##        u'The type of the spatial reference.'
##        #return Type
##    def _set(self, Type):
##        u'The type of the spatial reference.'
##    Type = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The central parallel (Phi 0) of a projected coordinate system.'
##        #return CentralParallel
##    def _set(self, CentralParallel):
##        u'The central parallel (Phi 0) of a projected coordinate system.'
##    CentralParallel = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The XYTolerance property.'
##        #return Value
##    def _set(self, Value):
##        u'The XYTolerance property.'
##    XYTolerance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The spheroid name.'
##        #return Name
##    def _set(self, Name):
##        u'The spheroid name.'
##    SpheroidName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The HighPrecision property.'
##        #return Value
##    def _set(self, Value):
##        u'The HighPrecision property.'
##    IsHighPrecision = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The ZResolution property.'
##        #return Value
##    def _set(self, Value):
##        u'The ZResolution property.'
##    ZResolution = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def HasMPrecision(self):
##        u'Indicates whether or not m-value precision information has been defined.'
##        #return HasMPrecision
##
##    def _get(self):
##        u'The false easting (X0) of a projected coordinate system.'
##        #return FalseEasting
##    def _set(self, FalseEasting):
##        u'The false easting (X0) of a projected coordinate system.'
##    FalseEasting = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The projected coordinate system name.'
##        #return Name
##    def _set(self, Name):
##        u'The projected coordinate system name.'
##    PCSName = property(_get, _set, doc = _set.__doc__)
##
##    def SetZDomain(self, ZMin, ZMax):
##        u'Get the Z domain extent.'
##        #return 
##
##    def _get(self):
##        u'The spheroid code.'
##        #return code
##    def _set(self, code):
##        u'The spheroid code.'
##    SpheroidCode = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The semi-minor axis length of this spheroid.'
##        #return axis
##    def _set(self, axis):
##        u'The semi-minor axis length of this spheroid.'
##    SemiMinorAxis = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The prime meridian name.'
##        #return Name
##    def _set(self, Name):
##        u'The prime meridian name.'
##    PrimeMeridianName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The comment string of this spatial reference component.'
##        #return Remarks
##    def _set(self, Remarks):
##        u'The comment string of this spatial reference component.'
##    Remarks = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The longitude of the second point (Lambda 2) of a projected coordinate system.'
##        #return LongitudeOf2nd
##    def _set(self, LongitudeOf2nd):
##        u'The longitude of the second point (Lambda 2) of a projected coordinate system.'
##    LongitudeOf2nd = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The latitude of the second point (Phi 2) of a projected coordinate system.'
##        #return LatitudeOf2nd
##    def _set(self, LatitudeOf2nd):
##        u'The latitude of the second point (Phi 2) of a projected coordinate system.'
##    LatitudeOf2nd = property(_get, _set, doc = _set.__doc__)
##
##    def Create(self):
##        u'Create the spatial reference using the currently set properties.'
##        #return 
##
##    def _get(self):
##        u'The latitude of the first point (Phi 1) of a projected coordinate system.'
##        #return standardLongitude1
##    def _set(self, standardLongitude1):
##        u'The latitude of the first point (Phi 1) of a projected coordinate system.'
##    LatitudeOf1st = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def ZDomain(self):
##        u'The extent of the Z domain.'
##        #return Results
##
##    def _get(self):
##        u'The projection code.'
##        #return code
##    def _set(self, code):
##        u'The projection code.'
##    ProjectionCode = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def MFalseOriginAndUnits(self):
##        u'The measure false origin and units.'
##        #return Results
##
##    def _get(self):
##        u'The name of this spatial reference component.'
##        #return Name
##    def _set(self, Name):
##        u'The name of this spatial reference component.'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The angular unit name.'
##        #return Name
##    def _set(self, Name):
##        u'The angular unit name.'
##    AngularUnitName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The semi-major axis length of this spheroid.'
##        #return axis
##    def _set(self, axis):
##        u'The semi-major axis length of this spheroid.'
##    SemiMajorAxis = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The MResolution property.'
##        #return Value
##    def _set(self, Value):
##        u'The MResolution property.'
##    MResolution = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The longitude value of this prime meridian.'
##        #return Longitude
##    def _set(self, Longitude):
##        u'The longitude value of this prime meridian.'
##    Longitude = property(_get, _set, doc = _set.__doc__)
##
##    def SetDomain(self, XMin, YMin, XMax, YMax):
##        u'Get the domain extent.'
##        #return 
##
##    def _get(self):
##        u'The angular unit code.'
##        #return code
##    def _set(self, code):
##        u'The angular unit code.'
##    AngularUnitCode = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def ZFalseOriginAndUnits(self):
##        u'The Z false origin and units.'
##        #return Results
##
##    def _get(self):
##        u'The projection name.'
##        #return Name
##    def _set(self, Name):
##        u'The projection name.'
##    ProjectionName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The azimuth of a projected coordinate system.'
##        #return Azimuth
##    def _set(self, Azimuth):
##        u'The azimuth of a projected coordinate system.'
##    Azimuth = property(_get, _set, doc = _set.__doc__)
##
##    def SetMFalseOriginAndUnits(self, falseM, mUnits):
##        u'Get the measure false origin and units.'
##        #return 
##
##    @property
##    def MDomain(self):
##        u'The extent of the measure domain.'
##        #return Results
##
##    def _get(self):
##        u'The XYResolution property.'
##        #return Value
##    def _set(self, Value):
##        u'The XYResolution property.'
##    XYResolution = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The linear unit code.'
##        #return code
##    def _set(self, code):
##        u'The linear unit code.'
##    LinearUnitCode = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Domain(self):
##        u'The extent of the X/Y domain.'
##        #return Results
##
##    @property
##    def Classification(self):
##        u'The classification of a map projection.'
##        #return Classification
##
##    def _get(self):
##        u'The alias of this spatial reference component.'
##        #return Alias
##    def _set(self, Alias):
##        u'The alias of this spatial reference component.'
##    Alias = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The MTolerance property.'
##        #return Value
##    def _set(self, Value):
##        u'The MTolerance property.'
##    MTolerance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The geographic coordinate system code.'
##        #return code
##    def _set(self, code):
##        u'The geographic coordinate system code.'
##    GCSCode = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The false northing (Y0) of a projected coordinate system.'
##        #return FalseNorthing
##    def _set(self, FalseNorthing):
##        u'The false northing (Y0) of a projected coordinate system.'
##    FalseNorthing = property(_get, _set, doc = _set.__doc__)
##
##    def SetFalseOriginAndUnits(self, falseX, falseY, xyUnits):
##        u'Get the false origin and units.'
##        #return 
##
##    def _get(self):
##        u'The geographic coordinate system name.'
##        #return Name
##    def _set(self, Name):
##        u'The geographic coordinate system name.'
##    GCSName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The abbreviated name of this spatial reference component.'
##        #return Abbreviation
##    def _set(self, Abbreviation):
##        u'The abbreviated name of this spatial reference component.'
##    Abbreviation = property(_get, _set, doc = _set.__doc__)
##
##    def SetZFalseOriginAndUnits(self, falseZ, zUnits):
##        u'Get the Z false origin and units.'
##        #return 
##
##    def _get(self):
##        u'The central meridian (Lambda0) of a projected coordinate system.'
##        #return CentralMeridian
##    def _set(self, CentralMeridian):
##        u'The central meridian (Lambda0) of a projected coordinate system.'
##    CentralMeridian = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The central meridian (Lambda0) of a projected coordinate system in degrees.'
##        #return CentralMeridian
##    def _set(self, CentralMeridian):
##        u'The central meridian (Lambda0) of a projected coordinate system in degrees.'
##    CentralMeridianInDegrees = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The datum name.'
##        #return Name
##    def _set(self, Name):
##        u'The datum name.'
##    DatumName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The ZTolerance property.'
##        #return Value
##    def _set(self, Value):
##        u'The ZTolerance property.'
##    ZTolerance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The datum code.'
##        #return code
##    def _set(self, code):
##        u'The datum code.'
##    DatumCode = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The scale factor (K0) of a projected coordinate system.'
##        #return ScaleFactor
##    def _set(self, ScaleFactor):
##        u'The scale factor (K0) of a projected coordinate system.'
##    ScaleFactor = property(_get, _set, doc = _set.__doc__)
##
##    def SetMDomain(self, MMin, MMax):
##        u'Get the measure domain extent.'
##        #return 
##
##    def _get(self):
##        u'The longitude of origin (Lambda0) of a projected coordinate system.'
##        #return LongitudeOfOrigin
##    def _set(self, LongitudeOfOrigin):
##        u'The longitude of origin (Lambda0) of a projected coordinate system.'
##    LongitudeOfOrigin = property(_get, _set, doc = _set.__doc__)
##

class GPQueryTableIDsDomain(CoClass):
    u'Object for filtering the acceptable ID field for query tables.'
    _reg_clsid_ = GUID('{74F6B060-5EB6-4851-8FFD-8B188A845F37}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
class IGPQueryTableIDsDomain(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the query table ID field domain.'
    _iid_ = GUID('{78A0084B-3F2A-4519-BD82-1919EE1FB385}')
    _idlflags_ = ['oleautomation']
GPQueryTableIDsDomain._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDomain, IGPFieldDomain, IGPQueryTableIDsDomain]

IEnumMdProcess._methods_ = [
    COMMETHOD([helpstring(u'Returns the next process in the enumeration.')], HRESULT, 'Next',
              ( ['retval', 'out'], POINTER(POINTER(IMdProcess)), 'Process' )),
    COMMETHOD([helpstring(u'Resets the current position of the enumeration.')], HRESULT, 'Reset'),
]
################################################################
## code template for IEnumMdProcess implementation
##class IEnumMdProcess_Impl(object):
##    def Reset(self):
##        u'Resets the current position of the enumeration.'
##        #return 
##
##    def Next(self):
##        u'Returns the next process in the enumeration.'
##        #return Process
##

class IGPToolbox3(IGPToolbox2):
    _case_insensitive_ = True
    u'Provides access to methods on the toolbox object.'
    _iid_ = GUID('{6A0904B7-5705-4AB6-A6CD-652D9D0C9E8D}')
    _idlflags_ = ['oleautomation']
IGPToolbox3._methods_ = [
    COMMETHOD(['propget', helpstring(u'The description of the toolbox.')], HRESULT, 'Description',
              ( ['retval', 'out'], POINTER(BSTR), 'toolboxDesc' )),
    COMMETHOD(['propput', helpstring(u'The description of the toolbox.')], HRESULT, 'Description',
              ( ['in'], BSTR, 'toolboxDesc' )),
]
################################################################
## code template for IGPToolbox3 implementation
##class IGPToolbox3_Impl(object):
##    def _get(self):
##        u'The description of the toolbox.'
##        #return toolboxDesc
##    def _set(self, toolboxDesc):
##        u'The description of the toolbox.'
##    Description = property(_get, _set, doc = _set.__doc__)
##

class GPMosaicLayerType(CoClass):
    u'Geoprocessing Mosaic Layer Data Type.'
    _reg_clsid_ = GUID('{EC9EE977-81D4-4BBF-B6FF-42445FFB6A37}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPMosaicLayerType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, IGPMosaicLayerType, IGPCompositeLayerType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._1CE6AC65_43F5_4529_8FC0_D7ED298E4F1A_0_10_2.IGPLayerType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDEGeoDatasetType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGxFilterInfo]

IGPExtentType._methods_ = [
]
################################################################
## code template for IGPExtentType implementation
##class IGPExtentType_Impl(object):

class IGPCustomToolGen(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to methods on a custom geoprocessing tool object.'
    _iid_ = GUID('{5628D7E4-D193-4CE3-A55E-9C94B66C4181}')
    _idlflags_ = ['oleautomation']
IGPCustomToolGen._methods_ = [
    COMMETHOD(['propget', helpstring(u'The tool extension associated with the tool.')], HRESULT, 'ToolExtensionGen',
              ( ['retval', 'out'], POINTER(POINTER(IGPToolExtensionGen)), 'extension' )),
]
################################################################
## code template for IGPCustomToolGen implementation
##class IGPCustomToolGen_Impl(object):
##    @property
##    def ToolExtensionGen(self):
##        u'The tool extension associated with the tool.'
##        #return extension
##

IGPContainerSchema._methods_ = [
    COMMETHOD(['propget', helpstring(u'Inidicates additional children for the children property.')], HRESULT, 'AdditionalChildren',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'Children' )),
    COMMETHOD(['propputref', helpstring(u'Inidicates additional children for the children property.')], HRESULT, 'AdditionalChildren',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'Children' )),
]
################################################################
## code template for IGPContainerSchema implementation
##class IGPContainerSchema_Impl(object):
##    def AdditionalChildren(self, Children):
##        u'Inidicates additional children for the children property.'
##        #return 
##

IGPRouteMeasureEventDomain._methods_ = [
]
################################################################
## code template for IGPRouteMeasureEventDomain implementation
##class IGPRouteMeasureEventDomain_Impl(object):

IGPQueryTableFieldsDomain._methods_ = [
]
################################################################
## code template for IGPQueryTableFieldsDomain implementation
##class IGPQueryTableFieldsDomain_Impl(object):

class GPReportCacheStatus(CoClass):
    u'Report status information for cached services'
    _reg_clsid_ = GUID('{949AA15C-CAE6-43CA-9E3B-44D1AEFB825B}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPReportCacheStatus._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPFunction]

IGPResult._methods_ = [
    COMMETHOD(['propget', helpstring(u'The result values.')], HRESULT, 'Values',
              ( ['retval', 'out'], POINTER(POINTER(IGPValues)), 'ppValues' )),
    COMMETHOD(['propputref', helpstring(u'The result values.')], HRESULT, 'Values',
              ( ['in'], POINTER(IGPValues), 'ppValues' )),
    COMMETHOD(['propget', helpstring(u'The result messages.')], HRESULT, 'Messages',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IJobMessages)), 'ppMessages' )),
    COMMETHOD(['propputref', helpstring(u'The result messages.')], HRESULT, 'Messages',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IJobMessages), 'ppMessages' )),
]
################################################################
## code template for IGPResult implementation
##class IGPResult_Impl(object):
##    def Messages(self, ppMessages):
##        u'The result messages.'
##        #return 
##
##    def Values(self, ppValues):
##        u'The result values.'
##        #return 
##

IGPTableSchema._methods_ = [
    COMMETHOD(['propget', helpstring(u'Inidicates how the fields property is to be managed.')], HRESULT, 'FieldsRule',
              ( ['retval', 'out'], POINTER(esriGPSchemaFieldsType), 'Type' )),
    COMMETHOD(['propput', helpstring(u'Inidicates how the fields property is to be managed.')], HRESULT, 'FieldsRule',
              ( ['in'], esriGPSchemaFieldsType, 'Type' )),
    COMMETHOD(['propget', helpstring(u'Inidicates additional fields for the fields property.')], HRESULT, 'AdditionalFields',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFields)), 'Fields' )),
    COMMETHOD(['propputref', helpstring(u'Inidicates additional fields for the fields property.')], HRESULT, 'AdditionalFields',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFields), 'Fields' )),
]
################################################################
## code template for IGPTableSchema implementation
##class IGPTableSchema_Impl(object):
##    def _get(self):
##        u'Inidicates how the fields property is to be managed.'
##        #return Type
##    def _set(self, Type):
##        u'Inidicates how the fields property is to be managed.'
##    FieldsRule = property(_get, _set, doc = _set.__doc__)
##
##    def AdditionalFields(self, Fields):
##        u'Inidicates additional fields for the fields property.'
##        #return 
##

class GPConvertMapServerCacheStorageFormat(CoClass):
    u'Convert map cache storage format.'
    _reg_clsid_ = GUID('{450C82A0-C274-4038-8FD8-EB0018867820}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPConvertMapServerCacheStorageFormat._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPFunction]

class GPConvertCacheStorageFormat(CoClass):
    u'Convert storage format of pre-rendered tile cache for the MapServer.'
    _reg_clsid_ = GUID('{0C640E26-3472-427C-BFD0-887643D742D8}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPConvertCacheStorageFormat._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPFunction]

IGPPolygonType._methods_ = [
]
################################################################
## code template for IGPPolygonType implementation
##class IGPPolygonType_Impl(object):

class GPCadastralFabricLayer(CoClass):
    u'Geoprocessing Cadastral Fabric Layer Value.'
    _reg_clsid_ = GUID('{6F5D8DFB-A04B-4741-8823-90EF1C56FDF1}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPCadastralFabricLayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue, IGPCadastralFabricLayer, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDescribe, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._1CE6AC65_43F5_4529_8FC0_D7ED298E4F1A_0_10_2.IGPLayer, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDEGeoDataset]

class IGPFunctionTool(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to methods on a geoprocessing function tool object.'
    _iid_ = GUID('{A2596611-BD07-49A3-8E62-1DB89C8A30AF}')
    _idlflags_ = ['oleautomation']
IGPFunctionTool._methods_ = [
    COMMETHOD(['propget', helpstring(u'The function object associated with the tool.')], HRESULT, 'Function',
              ( ['retval', 'out'], POINTER(POINTER(IGPFunction)), 'Function' )),
    COMMETHOD(['propputref', helpstring(u'The function object associated with the tool.')], HRESULT, 'Function',
              ( ['in'], POINTER(IGPFunction), 'Function' )),
]
################################################################
## code template for IGPFunctionTool implementation
##class IGPFunctionTool_Impl(object):
##    def Function(self, Function):
##        u'The function object associated with the tool.'
##        #return 
##

IGPQueryTableIDsDomain._methods_ = [
]
################################################################
## code template for IGPQueryTableIDsDomain implementation
##class IGPQueryTableIDsDomain_Impl(object):

class GPRasterLayerType(CoClass):
    u'Geoprocessing Raster Layer Data Type.'
    _reg_clsid_ = GUID('{31C46933-B2CF-4226-A708-B798DA44EA51}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C031A050-82C6-4F8F-8836-5692631CFFE6}', 10, 2)
GPRasterLayerType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGPRasterLayerType, comtypes.gen._1CE6AC65_43F5_4529_8FC0_D7ED298E4F1A_0_10_2.IGPLayerType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDEGeoDatasetType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGxFilterInfo, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

IGpValueTableObject._methods_ = [
    COMMETHOD([dispid(1), helpstring(u'The number of columns.')], HRESULT, 'SetColumns',
              ( ['in'], c_int, 'nColumns' )),
    COMMETHOD([dispid(2), helpstring(u'The number of rows.'), 'propget'], HRESULT, 'RowCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD([dispid(3), helpstring(u'The number of columns.'), 'propget'], HRESULT, 'ColumnCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD([dispid(4), helpstring(u'Add a row.')], HRESULT, 'AddRow',
              ( ['in'], POINTER(VARIANT), 'row' )),
    COMMETHOD([dispid(5), helpstring(u'Get a row.')], HRESULT, 'GetRow',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(BSTR), 'row' )),
    COMMETHOD([dispid(6), helpstring(u'Get a value.')], HRESULT, 'GetValue',
              ( ['in'], c_int, 'rowIndex' ),
              ( ['in'], c_int, 'columnIndex' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Value' )),
    COMMETHOD([dispid(7), helpstring(u'Load the Value Table from a string.')], HRESULT, 'LoadFromString',
              ( ['in'], BSTR, 'Value' )),
    COMMETHOD([dispid(8), helpstring(u'Export the Value Table to a string.')], HRESULT, 'ExportToString',
              ( ['retval', 'out'], POINTER(BSTR), 'Value' )),
    COMMETHOD([dispid(9), helpstring(u'Remove a row.')], HRESULT, 'RemoveRow',
              ( ['in'], c_int, 'rowIndex' )),
    COMMETHOD([dispid(10), helpstring(u'Set a given row with a new value.')], HRESULT, 'SetRow',
              ( ['in'], c_int, 'rowIndex' ),
              ( ['in'], POINTER(VARIANT), 'Value' )),
    COMMETHOD([dispid(11), helpstring(u'Set a given column value.')], HRESULT, 'SetValue',
              ( ['in'], c_int, 'rowIndex' ),
              ( ['in'], c_int, 'columnIndex' ),
              ( ['in'], POINTER(VARIANT), 'Value' )),
    COMMETHOD([dispid(13), helpstring(u'Populate a given ValueTable with the values from this one.')], HRESULT, 'Populate',
              ( ['in'], POINTER(IGPValueTable), 'pGpValueTable' )),
]
################################################################
## code template for IGpValueTableObject implementation
##class IGpValueTableObject_Impl(object):
##    @property
##    def ColumnCount(self):
##        u'The number of columns.'
##        #return Count
##
##    def SetValue(self, rowIndex, columnIndex, Value):
##        u'Set a given column value.'
##        #return 
##
##    def ExportToString(self):
##        u'Export the Value Table to a string.'
##        #return Value
##
##    def Populate(self, pGpValueTable):
##        u'Populate a given ValueTable with the values from this one.'
##        #return 
##
##    def RemoveRow(self, rowIndex):
##        u'Remove a row.'
##        #return 
##
##    def GetRow(self, Index):
##        u'Get a row.'
##        #return row
##
##    def GetValue(self, rowIndex, columnIndex):
##        u'Get a value.'
##        #return Value
##
##    @property
##    def RowCount(self):
##        u'The number of rows.'
##        #return Count
##
##    def SetColumns(self, nColumns):
##        u'The number of columns.'
##        #return 
##
##    def AddRow(self, row):
##        u'Add a row.'
##        #return 
##
##    def LoadFromString(self, Value):
##        u'Load the Value Table from a string.'
##        #return 
##
##    def SetRow(self, rowIndex, Value):
##        u'Set a given row with a new value.'
##        #return 
##

IGPValueExpression._methods_ = [
    COMMETHOD(['propget', helpstring(u'Gets the resolved state.')], HRESULT, 'Resolved',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pResolved' )),
    COMMETHOD(['propput', helpstring(u'Gets the resolved state.')], HRESULT, 'Resolved',
              ( ['in'], VARIANT_BOOL, 'pResolved' )),
    COMMETHOD([helpstring(u'Resolves a given variable value.')], HRESULT, 'ResolveValue',
              ( ['in'], POINTER(IGPVariableManager), 'pVariableManager' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue)), 'ppValue' )),
    COMMETHOD([helpstring(u'Returns a string array of the variable names.')], HRESULT, 'GetVariableNames',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray)), 'ppNames' )),
    COMMETHOD(['propget', helpstring(u'Returns an array of variables.')], HRESULT, 'Variables',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'ppVariables' )),
    COMMETHOD(['propputref', helpstring(u'Returns an array of variables.')], HRESULT, 'Variables',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'ppVariables' )),
    COMMETHOD([helpstring(u'Gets the text value of the variable value.')], HRESULT, 'GetAsText',
              ( ['in'], POINTER(IGPVariableManager), 'pVariableManager' ),
              ( ['retval', 'out'], POINTER(BSTR), 'pText' )),
]
################################################################
## code template for IGPValueExpression implementation
##class IGPValueExpression_Impl(object):
##    def _get(self):
##        u'Gets the resolved state.'
##        #return pResolved
##    def _set(self, pResolved):
##        u'Gets the resolved state.'
##    Resolved = property(_get, _set, doc = _set.__doc__)
##
##    def GetAsText(self, pVariableManager):
##        u'Gets the text value of the variable value.'
##        #return pText
##
##    def Variables(self, ppVariables):
##        u'Returns an array of variables.'
##        #return 
##
##    def ResolveValue(self, pVariableManager):
##        u'Resolves a given variable value.'
##        #return ppValue
##
##    def GetVariableNames(self):
##        u'Returns a string array of the variable names.'
##        #return ppNames
##

IGPFieldInfoProperty._methods_ = [
    COMMETHOD(['propget', helpstring(u'FieldInfo Property Index.')], HRESULT, 'Index',
              ( ['retval', 'out'], POINTER(c_int), 'Index' )),
    COMMETHOD(['propput', helpstring(u'FieldInfo Property Index.')], HRESULT, 'Index',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD(['propget', helpstring(u'FieldInfo Property Name.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'FieldInfo Property Name.')], HRESULT, 'Name',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'FieldInfo Property Alias.')], HRESULT, 'Alias',
              ( ['retval', 'out'], POINTER(BSTR), 'Alias' )),
    COMMETHOD(['propput', helpstring(u'FieldInfo Property Alias.')], HRESULT, 'Alias',
              ( ['in'], BSTR, 'Alias' )),
    COMMETHOD(['propget', helpstring(u'FieldInfo Property Split Rule.')], HRESULT, 'SplitRule',
              ( ['retval', 'out'], POINTER(esriGPFieldInfoSplitRule), 'rule' )),
    COMMETHOD(['propput', helpstring(u'FieldInfo Property Split Rule.')], HRESULT, 'SplitRule',
              ( ['in'], esriGPFieldInfoSplitRule, 'rule' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether or not the field is visible.')], HRESULT, 'Visible',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Visible' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether or not the field is visible.')], HRESULT, 'Visible',
              ( ['in'], VARIANT_BOOL, 'Visible' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether or not the field info property has an error.')], HRESULT, 'HasError',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'error' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether or not the field info property has an error.')], HRESULT, 'HasError',
              ( ['in'], VARIANT_BOOL, 'error' )),
]
################################################################
## code template for IGPFieldInfoProperty implementation
##class IGPFieldInfoProperty_Impl(object):
##    def _get(self):
##        u'FieldInfo Property Index.'
##        #return Index
##    def _set(self, Index):
##        u'FieldInfo Property Index.'
##    Index = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether or not the field info property has an error.'
##        #return error
##    def _set(self, error):
##        u'Indicates whether or not the field info property has an error.'
##    HasError = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'FieldInfo Property Name.'
##        #return Name
##    def _set(self, Name):
##        u'FieldInfo Property Name.'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'FieldInfo Property Alias.'
##        #return Alias
##    def _set(self, Alias):
##        u'FieldInfo Property Alias.'
##    Alias = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether or not the field is visible.'
##        #return Visible
##    def _set(self, Visible):
##        u'Indicates whether or not the field is visible.'
##    Visible = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'FieldInfo Property Split Rule.'
##        #return rule
##    def _set(self, rule):
##        u'FieldInfo Property Split Rule.'
##    SplitRule = property(_get, _set, doc = _set.__doc__)
##

__all__ = ['GPMeasureFieldsDomain', 'IGPValues',
           'IGPCompositeDataType', 'IGPFieldInfo3', 'IGPFieldInfo2',
           'IMdElement', 'GPRasterSchema', 'IGPRasterCatalogLayer',
           'GpValueTableObject', 'esriGPTimeInterval4Days',
           'esriModelDiagramLevelAlignmentLeft',
           'esriModelDiagramLevelOrientationLeftToRight',
           'esriGPServerMessageCode_ExecuteTime',
           'IGPLasDatasetLayer', 'IGPQueryTableFieldsDomain',
           'esriModelDiagramLayoutQualityProof',
           'esriModelDiagramEdgeStyleDashDotDash', 'GPUtilities',
           'GpPointObject', 'GPCodedValueDomain',
           'GPSQLExpressionType', 'GpFieldMapObject', 'IMdVariable',
           'IGPRasterDataLayerType', 'GPToolboxName',
           'esriGPFieldInfoMergeRuleMinimum', 'IGPZDomainType',
           'esriRandDistributionPoisson', 'GPFileDomain',
           'IGPToolExtensionFactoryGen', 'IEnumGPDataType',
           'GPAnalysisCellSize', 'GPFieldDomain',
           'IGpDescribeGeometry', 'GPParameter',
           'GpFieldMappingsObject', 'IGPToolBackground',
           'esriGPScriptTool',
           'esriGPServerMessageCode_OutputDirCreateFailed',
           'GPTerrainLayerType', 'IGPRasterEnvStorageDefAdvanced',
           'GPGroupLayerType', 'GPTableView', 'GPRouteDomain',
           'IGPRasterBuilderType', 'MdModelEventsHelper',
           'GPTerrainLayer', 'GPArcInfoItemChoiceList',
           'IGPRasterSchema', 'IGPToolExtensionGen',
           'IGPVariableManager', 'esriGPFieldMapMergeRuleLast',
           'GPStringType', 'GPGenerateMapServerCacheTilingScheme',
           'esriModelDiagramNodeShapePentagon', 'IGpSpRefObject',
           'IGPRecordSet', 'IGPStandaloneTableCollection',
           'IGpValueTableObject2', 'esriGPSchemaExtentUnset',
           'IEnumGPToolboxName', 'IGPTableView', 'GPImportCache',
           'IGPScriptTool', 'esriRNGStandardCRand',
           'esriGPSchemaExtentType', 'IGPVirtualTableDomain',
           'IMdVariable2', 'IMdVariable3', 'IGPStringType',
           'GPRecordSet', 'GPFieldMappingType', 'IDEToolboxType',
           'IGPToolboxEvents2', 'IGPCustomTool', 'GPZDomain',
           'esriGPFieldInfoSplitRule',
           'esriModelDiagramNodeShapeTriangle',
           'esriRandDistributionBinomial', 'IGPServerTrackCancel2',
           'esriExecutionType', 'esriGPSchemaCellSizeMin',
           'IGPSAGeoDataType', 'esriGPFieldInfoMergeRuleNone',
           'esriGPModelTool', 'esriModelDiagramLevelAlignmentRight',
           'esriModelDiagramNodeTypeIterator', 'IGPArealUnitType',
           'GPTinLayerType', 'esriGPExtentEnum',
           'esriGPParameterDirection', 'esriGPTimeIntervalType',
           'IGPGroupLayer', 'ExportWebMap', 'GPDate',
           'esriGPTimeInterval2Weeks', 'IGPToolCommandHelper2',
           'esriRandomNumberGeneratorType',
           'esriGPFieldMapMergeRuleMaximum',
           'esriModelDiagramGridTypeLines',
           'esriGPFieldMapMergeRuleMinimum', 'DEToolboxType',
           'IDEToolType', 'esriGPTimeInterval1Week',
           'GPCompositeDomain', 'IGPResult', 'IGPTablesDomain',
           'GPServerFunctionFactory', 'GPResult',
           'esriWPSServerMessageCode_FailedToReconcileAgainstSelf',
           'IGPToolbox2', 'GPCellSizeXYType',
           'esriModelDiagramNodeShapeTriangleDown', 'GPServerSync',
           'esriModelDiagramEdgeStyleDot', 'IGPRasterLayerType',
           'IGPTableViewType', 'GPFeatureLayerType',
           'IGPCodedValueDomainProperty', 'esriMdElementNotValid',
           'GPServer', 'IGPRasterGDBEnvPyramid',
           'esriGPFieldInfoMergeRuleMean',
           'esriGPSchemaGeometryUnset', 'IGPParameterEdit2',
           'IGPParameterEdit3', 'IDEToolbox', 'IGPRasterDataType',
           'IGPEnvironmentImpl', 'GPToolInfos', 'IGPMosaicLayerType',
           'esriGPSchemaRasterType', 'GPFieldInfoType', 'IGPToolEdit',
           'IGPDateType', 'esriGPSchemaRasterUnset',
           'esriGPSchemaRasterFormatType', 'GPServerTrackCancel',
           'esriGPSchemaCellSizeFirstDependency', 'GPMDomainType',
           'IGPUtilities4', 'GPFeatureClassDomain',
           'esriGPFieldMapMergeRuleMean', 'GpSpRefObject', 'IMdList',
           'GPToolInfo', 'IGPRepresentationLayerDomain',
           'GPServerProxyHelper', 'GPLasDatasetLayer',
           'GPRepresentationLayerDomain', 'esriModelDiagramNodeType',
           'GPTest', 'esriGPTimeInterval3Weeks',
           'GPRasterGDBEnvStatistics', 'IToolboxWorkspaceExtension',
           'GPRasterGDBEnvCompressionType', 'IGPLong',
           'GPINFOExpression', 'esriGPSchemaExtentFirstDependency',
           'esriGPParameterDirectionInput', 'esriWPSGet',
           'GPFieldChoiceList', 'GPServerConfigurationFactory',
           'esriGPFieldMapMergeRule',
           'esriGPServerMessageCode_CreateMSDFailed',
           'IGPDefaultNameList', 'IGPFeatureSolutions',
           'GPRasterDataType', 'IGPParameterInfos', 'GPMDomain',
           'GPLayerType', 'IGPFunctionName', 'IMdParameter',
           'GPRasterGDBEnvPyramid', 'GPRasterCatalogLayer',
           'esriGPServerMessageCode_JobCatalogInitFailed',
           'GPArealUnitType', 'GPStringHiddenType',
           'IGPRouteMeasureEventDomain', 'GPSAGeoDataType',
           'GPConvertCacheStorageFormat', 'GPMultiValueTypeName',
           'esriGPServerMessageCode_DeleteCfgFailed',
           'IGPMultiValueDataTypeName', 'GPMultiValue',
           'esriGPSchemaGeometryMin',
           'esriWPSServerMessageCode_ErrorInvalid10AxisOrder',
           'IGeoProcessorEvents3', 'esriRandDistributionNone',
           'IGPMeasureFieldsDomain', 'esriGPSchemaFieldsAllFIDsOnly',
           'IGPType', 'IGPLayerDescription', 'GPVirtualTableDomain',
           'esriMdElementState', 'IGPRasterCatalogLayerType',
           'IGPModelTool', 'IGPCadastralFabricLayer',
           'IGPINFOExpressionType', 'GPFeatureLayer',
           'IGeoProcessorSettings2', 'IGPLinearUnitType', 'GPExtent',
           'GPParameterInfo', 'IEnumMdElement', 'GPRasterLayer',
           'esriExecutionTypeSynchronous',
           'esriGPSchemaFieldsAllNoFIDs',
           'esriGPFieldMapMergeRuleMedian', 'esriGPTimeInterval5Days',
           'esriGPParameterType', 'IGPResultOptions2',
           'esriRasterDistributionEnum',
           'esriModelDiagramNodeTypeConstant',
           'GPNetworkDatasetLayerType',
           'esriGPFieldMapMergeRuleCount', 'IGPCoordinateSystemType',
           'IGPToolInfo', 'IGPFeatureRecordSetLayer',
           'GPUpdateMapServerCache', 'IGPRasterGDBEnvPyramid2',
           'IGPRasterGDBEnvPyramid3', 'GPCreateMapServerCache',
           'IGPVariant', 'GPCadAnnoDomain',
           'esriModelDiagramNodeShapeTriangleRight', 'IGPLine2',
           'GPRouteMeasureEventPropertiesType', 'IGpPointObject2',
           'GPLasDatasetLayerType',
           'esriModelDiagramNodeShapeRoundedRectangle',
           'GPDoubleType', 'IGPExportWebMapExtensionImpl',
           'GPMosaicLayer', 'esriGPServerMessageCode_SaveTime',
           'IGeoProcessor', 'esriModelDiagramNodeTypeDataset',
           'GPCovAnnoDomain', 'esriRasterInvalidDistribution',
           'IGPToolExtension', 'IGPLinearUnit',
           'IMdDiagramProperties', 'GPESRISyncFeatureServiceReplica',
           'IGPFeatureRecordSetLayerType', 'GPRecordSetType',
           'esriWPSPost', 'esriModelDiagramEdgeStyle',
           'GPRandomNumberGenerator', 'esriRNGMersenneTwister',
           'IGeoProcessorSettings', 'EnumGPEnvironment', 'GPLongType',
           'esriModelDiagramNodeShapeCross',
           'esriModelDiagramLevelOrientationBottomToTop',
           'GPRasterDataLayer', 'esriModelDiagramNodeShape',
           'IGPArcInfoItemDomain', 'GeoProcessorResult',
           'esriGPFieldInfoSplitRuleRatio', 'IMdDisplayNode',
           'esriMdElementHasRun',
           'esriGPServerMessageCode_OutputDirNotFound',
           'IGPFieldInfo', 'IGpEnumList', 'GPServerIP',
           'IGPAnalysisCellSize', 'IGeoProcessorResult2',
           'IGPVariantType', 'GPFieldInfo',
           'esriMdConnectionTypeEnvironment', 'IGpPointObject',
           'AGOCatalogPathParser', 'IGPBoolean',
           'esriWPSServerMessageCode_WPSExceptionReport',
           'esriGPSchemaFeatureFirstDependency', 'GPLine',
           'esriGPFieldInfoMergeRuleStandard',
           'GPValidateMapServerCacheTiles', 'GPEncryptedString',
           'GPStringHidden', 'IGPToolName', 'GPRangeDomain',
           'GPPointType', 'MdVariable', 'esriRasterIntegerConstant',
           'esriMdListType', 'esriRasterFloatConstant', 'IDETool',
           'esriGPServerMessageCode_AddCfgFailed', 'IGPRAFieldDomain',
           'IGPToolInfo2', 'DEToolbox',
           'esriWPSServerMessageCode_ErrorInvalidDefaultLockExpiration',
           'GPMosaicLayerType', 'IGPValueTableType',
           'esriGPFieldInfoMergeRuleMaximum', 'IGpDescribeIndex',
           'GPSpatialReference', 'esriGPSchemaCellSizeMax',
           'IMBImport', 'GPCompositeLayerType', 'GPXYDomainType',
           'GPRasterBuilder', 'IMdModel',
           'esriMdConnectionTypePrecondition', 'IGPTool',
           'IDEToolbox2', 'IGPFunctionFactory2',
           'esriGPSchemaFieldsFirstDependency',
           'esriGPServerMessageCode_SubmitJobFailed',
           'IGPCompositeLayer', 'IGPFeatureLayerType',
           'esriGPSchemaFeatureAsSpecified', 'IGPToolInfos',
           'GPFunctionName', 'esriModelDiagramNodeShapeStar',
           'IGPTerrainLayer', 'esriGPServerMessageCode_StopCfgFailed',
           'GPRasterGDBEnvCompression', 'IGPProtectNames',
           'IGpDescribeField', 'IGeoProcessorEvents',
           'esriGPSchemaCellSizeAsSpecified',
           'esriRandDistributionNegativeBinomial', 'GPParameterInfos',
           'IGPLongType', 'GPServerCachingManageMapCacheTiles',
           'GPCompositeLayer', 'IGPRasterGDBEnvPyramidType',
           'IGPPoint2', 'IGPFeatureSchema',
           'esriGPServerMessageCode_SubmitJobSucceeded',
           'IGPCadastralFabricLayerType',
           'esriGPServerMessageCode_InvalidLayer',
           'GPCalculatorExpressionType', 'IGPCustomToolGen',
           'GPServerCachingCreateMapCache', 'GPNetCDFWorkspace',
           'GPMultiValueType', 'esriModelDiagramNodeShapeDiamond',
           'GPManageMapServerCacheTiles',
           'esriGPParameterTypeRequired', 'IGPZDomain',
           'IGPEnvironmentManager', 'IGPScriptTool2',
           'GPCoordinateSystemType', 'GPTinLayer', 'IGPLinearUnit2',
           'GPRasterDataLayerType', 'IGPRouteMeasureEventProperties',
           'IGPAnnoDomain', 'IProcessLayer', 'GpDescribeField',
           'IGPContainerSchema', 'GPFieldInfoProperty',
           'esriGPExtentValue', 'esriGPSchemaGeometryFirstDependency',
           'IGPToolboxFactory', 'IGPFunction', 'IGPEnvelope',
           'GPTablesDomain', 'GPLong', 'GPResultOptions',
           'esriWPSServerMessageCode_FailedToStartEditing',
           'GPConvertCacheStorageFormatWorker', 'IEnumGPTool',
           'esriGPServerMessageCode_OpenGeoprocessingResultFailed',
           'esriGPParameterTypeDerived', 'GPRasterGDBEnvTileSizeType',
           'IGpFieldMappingsObject', 'GPGenerateMapServerCache',
           'esriGPSchemaFeatureType', 'IGPTopologyLayer',
           'esriGPServerMessageCodeEnum',
           'GPServerCachingValidateMapCacheTilesWorker',
           'IGPFeatureRecordSet', 'esriGPFieldInfoMergeRuleSum',
           'esriMdIterationType',
           'esriGPServerMessageCode_CreateDirFailed',
           'IGPRouteDomain',
           'esriGPFieldMapMergeRuleStandardDeviation',
           'IGPWorkspaceDomain', 'IGPPolygonType',
           'esriModelDiagramLevelOrientation', 'IGPCoordinateSystem',
           'IGPFeatureSolutionsResult',
           'esriWPSServerMessageCode_FailedToStopEditing',
           'GPImportCacheWorker', 'esriGPSchemaExtentAsSpecified',
           'esriMdListTypeList', 'GPValues',
           'esriGPServerMessageCode_TransferDirFailed',
           'IProtectNameGeoprocessing', 'GPJobServer',
           'StandaloneCatalogPathParser',
           'GPRandomNumberGeneratorType',
           'esriMdIterationTypeConditional', 'esriGPSchemaRasterMax',
           'WPSServer', 'GPVariantType', 'IGPFieldInfoProperty',
           'IGPArealUnit', 'GPSpatialReferenceType',
           'esriGPExtentMinOf',
           'esriGPServerMessageCode_StartCfgFailed',
           'esriModelDiagramNodeShapeParallelogram', 'IGPValueTable',
           'esriWPSServerMessageCode_FailedToDeleteOutstandingTransactionVersions',
           'GPHolder', 'IGpFieldMapObject',
           'IGPCalculatorExpressionType',
           'esriGPSchemaRasterFirstDependency',
           'GPQueryTableFieldsDomain', 'IGPString', 'IGPServer2',
           'esriWPSServerMessageCode_ErrorInvalidAppSchemaNamespace',
           'esriGPServerMessageCode_ConstructFailed',
           'IGPFieldDomain', 'IGPDoubleType', 'MdParameter',
           'IGPLineType', 'IGPCustomToolHelper', 'IGPStringHidden',
           'IToolboxWorkspaceFactory',
           'esriGPServerMessageCode_InitSucceeded',
           'esriModelDiagramNodeTypeStop',
           'esriWPSServerMessageCode_GetRequest',
           'esriGPServerMessageCode_ConstructSucceeded',
           'esriModelDiagramNodeTypeTool', 'IGPToolboxEvents',
           'IGPParseString2', 'ToolboxWorkspaceFactory',
           'esriGPSchemaFieldsNone', 'IGPParameterInfo',
           'esriRandomDistributionType',
           'esriModelDiagramNodeShapeHexagon1', 'GPCreateTiles',
           'esriModelDiagramNodeShapeHexagon2', 'GPDatasetDomain',
           'esriModelDiagramNodeShapeOctagon', 'IGPMDomainType',
           'GPToolName', 'GPFeatureSolutions', 'IGpCursorRow2',
           'IGPRasterLayer', 'GPUpdateMapServerCacheScales',
           'GPLinearUnitType', 'GPFieldInfoDomain',
           'IGPFieldMappingType', 'esriGPPythonScriptTool',
           'IGPToolbox3', 'GPDateType', 'IGPServer', 'IGPPointType',
           'IGPNumericDomain', 'esriMdConnectionType',
           'esriGPToolType', 'GeoProcessor', 'esriGPTimeIntervalNone',
           'IGPStringHiddenType', 'EnumGPName', 'IEnumMdVariable',
           'DEGeoDatasetType', 'GPRasterGDBEnvPyramidType',
           'IEnumGPToolbox', 'IGPSchemaCheckImpl',
           'esriModelDiagramLevelAlignmentCenter',
           'GPEnvironmentManager', 'WCSCatalogPathParser',
           'GPServerCachingDeleteMapCache', 'IGPPoint',
           'IGPRasterGDBEnvCompression',
           'GPServerCachingValidateMapCacheTiles',
           'IMapCacheTileManagerJobResultHandler',
           'IGPRasterFormulatedType', 'GPSuggestDefaultScales',
           'GPRasterGDBEnvStatisticsType',
           'GPESRICreateFeatureServiceReplica', 'IGPParameter2',
           'IGPParameter3', 'GPCadastralFabricLayerType',
           'IGPLasDatasetLayerType', 'GpVirtualPathParser',
           'esriGPTimeInterval2Days', 'esriRasterRandomDistribution',
           'IGPCompositeLayerType', 'esriWPSServerMessageCodeEnum',
           'GPRasterFormulatedType', 'IGPJobServerExe',
           'IGPRasterGDBEnvStatistics',
           'esriModelDiagramLevelAlignment',
           'esriModelDiagramNodeShapeRectangle',
           'GPArcInfoItemDomain', 'IGPFieldMapping', 'IGPFieldMap',
           'GPEnvelope', 'IGeoProcessor2', 'GpDispatch',
           'GPRasterData', 'esriWPSServerMessageCode_NotLicensed',
           'IEnumGPEnvironment', 'esriGPServerMessageCode_Debug',
           'GPZDomainType', 'esriGPFunctionTool',
           'IGPValueExpression', 'IGeoProcessorEvents2',
           'esriGPServerMessageCode_NotLicensed', 'IGPFileDomain',
           'IGPSpatialReferenceType', 'GPValueTableType',
           'GPTableViewType', 'esriGPFieldInfoSplitRuleNone',
           'GPServerCachingFunctionFactory',
           'esriMdConnectionTypeAny', 'AGSCatalogPathParser',
           'esriGPTimeInterval2Months',
           'esriWPSServerMessageCode_ErrorInvalid11AxisOrder',
           'GPCoverageDomain', 'esriModelDiagramEdgeStyleSolid',
           'IGPFieldInfoProperty2', 'IGPFieldInfoProperty3',
           'esriGPParameterTypeOptional', 'IMdModelIteration2',
           'IGPParameter', 'GPDeleteMapServerCache', 'IGPSchema',
           'DataElementDomain', 'esriWPSServerMessageCode_Debug',
           'IGPBooleanType', 'IGPCellSizeXY', 'IGPToolbox',
           'GPExportCacheWorker', 'IGPDataFileType',
           'IGPRasterBuilder', 'IGPFieldDomain2', 'IGPCellSizeXYType',
           'IGPUtilities', 'IGPRasterGDBEnvTileSizeType',
           'GPContainerSchema', 'IGPEnvelopeType', 'GPValueTable',
           'esriWPSServerMessageCode_ErrorInvalidUseSRSNameFormat',
           'IGPSQLExpressionType', 'IDEUtilities',
           'IGPMultiValueType', 'GPCodedValueDomainProperty',
           'esriWPSServerMessageCode_PostRequest', 'GPPoint',
           'esriGPParameterDirectionOutput', 'GPRasterGDBEnvTileSize',
           'esriGPSchemaGeometryType',
           'esriModelDiagramNodeTypeLabel',
           'esriModelDiagramLayoutQualityDefault',
           'GPFeatureRecordSetLayerType', 'IGPMDomain',
           'IGPFeatureLayer', 'MdProcess', 'IGpObjectArray',
           'GPDataFileType', 'esriModelDiagramNodeShapeTriangleLeft',
           'esriWPSServerMessageCode_ConstructEnded', 'IGPServerSync',
           'IGPComHelper', 'esriGPFieldMapMergeRuleFirst',
           'IGPTopologyLayerType', 'IGPSQLExpression', 'IGPTest',
           'IGPRasterGDBEnvCompressionType', 'IGPGroupLayerType',
           'IGPFunction2', 'IGPRasterDataLayer', 'IGPCompositeDomain',
           'esriModelDiagramEdgeStyleDash', 'GPEncryptedStringType',
           'esriModelDiagramLevelOrientationRightToLeft',
           'esriGPServerMessageCode_OutputDirNotExist',
           'esriGPSchemaFeatureUnset', 'IGPRandomNumberGeneratorType',
           'esriModelDiagramEdgeStyleDashDot', 'GPFieldMapping',
           'esriGPSchemaFieldsType', 'IGPUtilities2',
           'esriRandDistributionGamma', 'esriGPServerTool',
           'GPFeatureRecordSetLayer', 'GPBoolean', 'IGPTinLayerType',
           'IGPAnalysisCellSizeType',
           'GPServerCachingManageMapCacheTilesWorker',
           'esriGPFieldMapMergeRuleRange', 'DEUtilities',
           'GPSQLExpression',
           'esriWPSServerMessageCode_TransactionFailedStoppingEditOperation',
           'esriModelDiagramLevelAlignmentBottom', 'GPFeatureSchema',
           'GPNetworkDatasetLayer', 'GPBooleanType',
           'esriGPServerMessageCode_InitFailed',
           'GPCalculatorExpression', 'IMdModelEvents',
           'GPCoordinateSystem', 'IGPParseString',
           'GPAnalysisCellSizeType',
           'esriModelDiagramNodeTypeDerivedConstant',
           'esriMdDirectionInput', 'IGPFieldInfoDomain',
           'esriGPSchemaExtentEnvironment', 'IGpValueTableObject',
           'esriRandDistributionNormal', 'IGPParameterEdit',
           'esriGPServerMessageCode_JobCatalogInitSucceeded',
           'IGPServerTrackCancel', 'GPPolygon',
           'esriRandDistributionExponential',
           'esriRandDistributionUniformInteger',
           'esriGPSchemaExtentIntersection', 'IGPRecordSetType',
           'IGPNetworkDatasetLayer', 'IGPToolExtensionFactory',
           'IGPTerrainLayerType', 'GPType', 'IMapCacheTileManager',
           'esriGPFieldMapMergeRuleSum', 'IWPSServer',
           'esriGPTimeInterval3Months', 'IGPEncryptedStringType',
           'GPParseString', 'IGPExtent', 'IGPRasterData',
           'IGPResultOptions', 'esriGPSchemaCellSizeUnset',
           'GPESRIAvailableFonts', 'esriGPSchemaFieldsAll',
           'IGPDataFile', 'GPGroupLayer',
           'esriModelDiagramGridTypePoints', 'GPEnvelopeType',
           'IMdModelIteration', 'esriMdDirectionOutput',
           'IToolboxWorkspace', 'IGPPolygon', 'GpFieldInfoObject',
           'GPRasterFormulated', 'IGPRouteIDFieldsDomain',
           'IGPNetCDFWorkspace', 'IGPDate', 'esriMdListTypeSingle',
           'GPWorkspaceDomain', 'GPExportMapServerCache',
           'esriGPFieldMapMergeRuleJoin', 'GPRouteIDFieldsDomain',
           'esriModelDiagramLevelAlignmentTop', 'GPVariant',
           'esriWPSServerMessageCode_FailedToDeleteLock',
           'IMdElementDialogSupport', 'GPExportCache',
           'GPTopologyLayer', 'GPToolboxEventsHelper',
           'esriGPSchemaExtentUnion', 'GPCadastralFabricLayer',
           'esriMdListTypeSeries', 'IGPFileSupport', 'EnumBSTR',
           'esriGPSchemaRasterInteger', 'GPServerObjectDescription',
           'esriRandDistributionUniform',
           'esriGPFieldInfoMergeRuleDeviation', 'GPString',
           'esriModelDiagramGridType', 'GPImportMapServerCache',
           'IGPQueryTableIDsDomain', 'GpRandomNumberGeneratorObject',
           'esriModelDiagramLevelConstraint',
           'esriMdElementReadyToRun', 'IGeoProcessorResult',
           'GPRAFieldDomain', 'esriGPExtentMaxOf', 'IGPXYDomainType',
           'GPCoverageFeatureClassDomain', 'GPCellSizeXY',
           'GPExtentType', 'GPVariable',
           'esriRasterNormalDistribution', 'IGPINFOExpression',
           'esriWPSServerMessageCode_ErrorPublishedWorkspaceIsntVersioned',
           'TaskServicesCatalogPathParser', 'IGpDescribeData',
           'GPServerLP', 'esriRandDistributionGeometric',
           'IGPFeatureRecordSetType', 'IGPLayersAndTablesDomain',
           'esriGPTimeInterval1Day',
           'esriWPSServerMessageCode_ConstructStart', 'GPFieldMap',
           'esriGPTaskTool', 'esriGPFieldMapMergeRuleMode',
           'esriGPSchemaRasterMin', 'IEnumGeometryType',
           'GDSCatalogPathParser',
           'esriModelDiagramLevelConstraintTowardsOutput',
           'ProcessLayer', 'IGPRasterGDBEnvTileSize',
           'esriGPSchemaRasterFormatIMG', 'IGPXYDomain',
           'IGPTableSchema', 'IGPMosaicLayer',
           'esriGPServerMessageCode_JobsDirNotExist',
           'GPRasterCatalogLayerType', 'IGPToolboxName',
           'esriGPTimeInterval1Month', 'GPDataFile', 'IGpCursorRow',
           'esriGPServerMessageCode_LoadTime',
           'IGPRandomNumberGenerator', 'IGPFeatureClassDomain',
           'IGPRasterGDBEnvStatisticsType', 'IGPTinLayer',
           'esriGPCustomTool', 'esriModelDiagramLayoutQuality',
           'esriMdIterationTypeFixed',
           'esriGPServerMessageCode_JobsDirNotFound', 'GPLinearUnit',
           'esriGPServerMessageCode_JobsDirRenameFailed',
           'DEDatasetType', 'esriGPTimeIntervalUnlimited',
           'GPCompositeDataType', 'esriGPSchemaCellSizeEnvironment',
           'GPConvertMapServerCacheStorageFormat',
           'esriGPSchemaGeometryUnknown', 'GPSAGeoDataDomain',
           'esriWPSServerMessageCode_FailedToReleaseLocks', 'IGPLine',
           'IGpDispatch', 'esriGPSchemaGeometryAsSpecified',
           'GPGdbAnnoDomain', 'IGPTablesDomain2',
           'GPRouteMeasureEventDomain',
           'esriModelDiagramNodeTypeDerivedDataset',
           'IGPSAGeoDataDomain', 'IGPMultiValue', 'GPRasterLayerType',
           'IMdDisplayEdge', 'ProcessLayerFactory', 'IGPTask',
           'GPLineType', 'IGPRasterFormulated',
           'esriModelDiagramLevelOrientationTopToBottom',
           'IGPUtilities3',
           'esriModelDiagramLevelConstraintTowardsInput',
           'esriGPExtentUnknown', 'IEnumFieldType',
           'esriWPSServerMessageCode_SkippedDataset', 'IGpEnumObject',
           'IBStringArray', 'GPEnvironment', 'IGPExtentType',
           'IGpRandomNumberGeneratorObject', 'esriWPSHttpVerb',
           'esriGPFieldInfoMergeRuleMedian',
           'esriGPServerMessageCode_ExecuteFailed', 'IMBProgressor',
           'esriGPSchemaCellSizeType', 'ToolboxWorkspaceExtension',
           'esriMdDirection', 'esriGPSchemaRasterFloat',
           'esriWPSServerMessageCode_FailedCreatingTransactionResponse',
           'esriExecutionTypeAsynchronous', 'IGPPolygon2',
           'esriWPSServerMessageCode_ServerTooBusyToProcessTransaction',
           'GPPolygonType', 'esriMdConnectionTypeFeedback',
           'GPReportCacheStatus', 'esriGPFieldInfoMergeRule',
           'DEType', 'IMapCacheTileManagerJob',
           'esriModelDiagramLevelConstraintNone', 'GPXYDomain',
           'GPQueryTableIDsDomain', 'DETool', 'IGPCoverageDomain',
           'IGPDatasetDomain', 'esriModelDiagramNodeShapeEllipse',
           'IEnumMdProcess', 'GPArealUnit', 'GPManageMapCacheScales',
           'esriGPSchemaFieldsFirstDependencyFIDs',
           'esriGPTimeInterval3Days', 'GPLayer', 'MdModel',
           'GPINFOExpressionType', 'IGPToolCommandHelper',
           'esriMdConnectionTypeParameter',
           'esriWPSServerMessageCode_FailedToGenerateTransactionResponse',
           'GPTopologyLayerType', 'IGPFieldInfoType',
           'esriModelDiagramLayoutQualityDraft',
           'GPRouteMeasureEventProperties', 'esriRNGAlgorithmACM599',
           'IGPSpatialReference',
           'esriWPSServerMessageCode_ErrorInvalidAppSchemaPrefix',
           'IGpFieldInfoObject', 'IGPCalculatorExpression',
           'IGPNetworkDatasetLayerType', 'GPToolboxEvents2Helper',
           'esriGPSchemaGeometryMax', 'IGPCreateTiles',
           'IGPFunctionFactory', 'esriGPSchemaRasterFormatGRID',
           'GpObjectArray', 'IDataElementDomain', 'IGPLayerSupport',
           'GPNumericDomain', 'GPDouble', 'IGPEnvironment',
           'IGPDouble', 'esriGPSchemaFieldsUnset', 'DEToolType',
           'esriGPFieldMapMergeRuleNone', 'GPRasterBuilderType',
           'GPTableSchema', 'IMdProcess',
           'esriWPSServerMessageCode_ConflictDetected',
           'IGPCoverageFeatureClassDomain',
           'IGPRouteMeasureEventPropertiesType',
           'esriWPSServerMessageCode_FailedToImportTransactionChanges',
           'IGPFunctionTool', 'GPLayersAndTablesDomain',
           'IEnumGPToolName', 'GPFeatureSolutionsResult',
           'esriGPSchemaFeatureUnknown']
from comtypes import _check_version; _check_version('501')
