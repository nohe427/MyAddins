# -*- coding: mbcs -*-
typelib_path = u'C:\\Program Files (x86)\\ArcGIS\\Engine10.2\\com\\esriCarto.olb'
_lcid = 0 # change this if required
from ctypes import *
from comtypes import GUID
from comtypes import CoClass
import comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0
import comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2
from comtypes import BSTR
from ctypes import HRESULT
import comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2
import comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2
from ctypes.wintypes import VARIANT_BOOL
from comtypes import helpstring
from comtypes import COMMETHOD
from comtypes import dispid
import comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2
import comtypes.gen._8F0541A3_D5BE_4B3F_A8D9_062D5579E19B_0_10_2
import comtypes.gen._18F2FC71_6B30_45B9_B101_037A8B868B66_0_10_2
import comtypes.gen._746F6817_89BB_4490_9829_83CA25FD505A_0_10_2
from comtypes.automation import VARIANT
from comtypes import IUnknown
from comtypes.automation import VARIANT
from comtypes.automation import _midlSAFEARRAY
import comtypes.gen._7DB92CEC_CB65_420A_8737_FCD0722FD436_0_10_2
UINT_PTR = c_ulong
import comtypes.gen._4ECCA6E2_B16B_4ACA_BD17_E74CAE4C150A_0_10_2
import comtypes.gen._A7C74158_1062_4664_B404_8694D490FCD1_0_10_2
import comtypes.gen._7BA654FE_F55E_4EE5_8CF2_FAEFFBC04A61_0_10_2
import comtypes.gen._1CE6AC65_43F5_4529_8FC0_D7ED298E4F1A_0_10_2


class FeatureServerInfo(CoClass):
    _reg_clsid_ = GUID('{9A1BB0F2-140A-44DE-81D5-5CB502FB67FA}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IFeatureServerInfo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the available properties of a feature server info object.'
    _iid_ = GUID('{F39468B2-CDEA-444B-9F3C-234CC561EA32}')
    _idlflags_ = ['oleautomation']
FeatureServerInfo._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IFeatureServerInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class TableEditResults(CoClass):
    u'TableEditResult'
    _reg_clsid_ = GUID('{739ABE52-66F8-483F-8034-CB44A3694DD7}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class ITableEditResults(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    _iid_ = GUID('{F561FF0E-4D09-4E51-A2D9-E201EB02543E}')
    _idlflags_ = ['oleautomation']
TableEditResults._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ITableEditResults, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class esriGpsDgpsInfo(Structure):
    _recordinfo_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2, 0L, '{2A573822-6F80-4255-8161-72DDDACC2ED0}')
esriGpsDgpsInfo._fields_ = [
    ('age', c_double),
    ('stationID', c_int),
    ('ageValid', c_short),
    ('idValid', c_short),
]
assert sizeof(esriGpsDgpsInfo) == 16, sizeof(esriGpsDgpsInfo)
assert alignment(esriGpsDgpsInfo) == 8, alignment(esriGpsDgpsInfo)

# values for enumeration 'esriGpsStopBits'
esriGpsStopBits1 = 0
esriGpsStopBits15 = 1
esriGpsStopBits2 = 2
esriGpsStopBits = c_int # enum

# values for enumeration 'esriGpsBaudRate'
esriGpsBaudRate300 = 300
esriGpsBaudRate600 = 600
esriGpsBaudRate1200 = 1200
esriGpsBaudRate2400 = 2400
esriGpsBaudRate4800 = 4800
esriGpsBaudRate9600 = 9600
esriGpsBaudRate14400 = 14400
esriGpsBaudRate19200 = 19200
esriGpsBaudRate38400 = 1
esriGpsBaudRate56000 = 2
esriGpsBaudRate57600 = 3
esriGpsBaudRate115200 = 4
esriGpsBaudRate = c_int # enum

# values for enumeration 'esriGpsParity'
esriGpsParityNone = 0
esriGpsParityOdd = 1
esriGpsParityEven = 2
esriGpsParityMark = 3
esriGpsParitySpace = 4
esriGpsParity = c_int # enum

# values for enumeration 'esriGpsConnectionError'
esriGpsConnectionErrorNone = 0
esriGpsConnectionErrorCommportInUse = 1
esriGpsConnectionErrorCommportNotSupported = 2
esriGpsConnectionErrorInApplication = 3
esriGpsConnectionErrorUnableToCommunicateToDevice = 4
esriGpsConnectionErrorInsufficientData = 5
esriGpsConnectionError = c_int # enum
class IMapServerInfo4(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the available properties of a map server info object.'
    _iid_ = GUID('{C1A99E4D-3441-4D75-808D-E8F24DCBCBB5}')
    _idlflags_ = ['oleautomation']
class IMapLayerInfos(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Map Layer Info Collection Interface.'
    _iid_ = GUID('{28F77A6E-3413-4CCF-9E76-B5EEBE75A02F}')
    _idlflags_ = ['oleautomation']
class IMapServerBookmarks(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Map Server Bookmarks Interface.'
    _iid_ = GUID('{E5D450FD-7430-4FA3-830B-1FE1D99FD217}')
    _idlflags_ = ['oleautomation']
class IMapDescription(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the available properties of a map description object.'
    _iid_ = GUID('{4A81AFFE-0883-4062-8536-85AB858A10A5}')
    _idlflags_ = ['oleautomation']
class IStandaloneTableInfos(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Table Descriptions Interface.'
    _iid_ = GUID('{A70B447E-2FCE-45DF-A7F5-917454D0D7D4}')
    _idlflags_ = ['oleautomation']
class IStandaloneTableDescriptions(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Table Descriptions Interface.'
    _iid_ = GUID('{906ADEB7-70BF-43AF-9EE5-FD0F741796EA}')
    _idlflags_ = ['oleautomation']
IMapServerInfo4._methods_ = [
    COMMETHOD(['propget', helpstring(u'The name of the map (data frame).')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propget', helpstring(u'The description of the map (data frame). This property is set in the General tab of the Data Frame Properties dialog.')], HRESULT, 'Description',
              ( ['retval', 'out'], POINTER(BSTR), 'desc' )),
    COMMETHOD(['propget', helpstring(u'The full extent of the map (data frame).')], HRESULT, 'FullExtent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'Extent' )),
    COMMETHOD(['propget', helpstring(u'The current extent of the map (data frame).')], HRESULT, 'Extent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'Extent' )),
    COMMETHOD(['propget', helpstring(u'A collection of Map Layer Info objects, each containing information about a layer in the map (data frame).')], HRESULT, 'MapLayerInfos',
              ( ['retval', 'out'], POINTER(POINTER(IMapLayerInfos)), 'layerInfos' )),
    COMMETHOD(['propget', helpstring(u'The background color of the map (data frame).')], HRESULT, 'BackgroundColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propget', helpstring(u'The published bookmarks for the map.')], HRESULT, 'Bookmarks',
              ( ['retval', 'out'], POINTER(POINTER(IMapServerBookmarks)), 'Bookmarks' )),
    COMMETHOD(['propget', helpstring(u'The default map settings.')], HRESULT, 'DefaultMapDescription',
              ( ['retval', 'out'], POINTER(POINTER(IMapDescription)), 'mapDesc' )),
    COMMETHOD(['propget', helpstring(u'The units for the map (data frame).')], HRESULT, 'MapUnits',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits), 'Units' )),
    COMMETHOD(['propget', helpstring(u'Background symbol of the map (data frame).')], HRESULT, 'BackgroundSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IFillSymbol)), 'FillSymbol' )),
    COMMETHOD(['propget', helpstring(u'Copyright information associated with the layer.')], HRESULT, 'CopyrightText',
              ( ['retval', 'out'], POINTER(BSTR), 'copyright' )),
    COMMETHOD(['propget', helpstring(u'Standalone tables infromation in a given map.')], HRESULT, 'StandaloneTableInfos',
              ( ['retval', 'out'], POINTER(POINTER(IStandaloneTableInfos)), 'TablesInfos' )),
    COMMETHOD(['propget', helpstring(u'Standalone tables descriptions that can passed in to other methods.')], HRESULT, 'StandaloneTableDescriptions',
              ( ['retval', 'out'], POINTER(POINTER(IStandaloneTableDescriptions)), 'TableDescriptions' )),
    COMMETHOD(['propget', helpstring(u'Indicates if this server supports per-request modification to layer properties.')], HRESULT, 'SupportsDynamicLayers',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'SupportsDynamicLayers' )),
    COMMETHOD(['propget', helpstring(u'The minimum visible scale for the service.')], HRESULT, 'MinScale',
              ( ['retval', 'out'], POINTER(c_double), 'Scale' )),
    COMMETHOD(['propget', helpstring(u'The maximum visible scale for the service.')], HRESULT, 'MaxScale',
              ( ['retval', 'out'], POINTER(c_double), 'Scale' )),
]
################################################################
## code template for IMapServerInfo4 implementation
##class IMapServerInfo4_Impl(object):
##    @property
##    def Name(self):
##        u'The name of the map (data frame).'
##        #return Name
##
##    @property
##    def SupportsDynamicLayers(self):
##        u'Indicates if this server supports per-request modification to layer properties.'
##        #return SupportsDynamicLayers
##
##    @property
##    def StandaloneTableInfos(self):
##        u'Standalone tables infromation in a given map.'
##        #return TablesInfos
##
##    @property
##    def DefaultMapDescription(self):
##        u'The default map settings.'
##        #return mapDesc
##
##    @property
##    def MapUnits(self):
##        u'The units for the map (data frame).'
##        #return Units
##
##    @property
##    def MaxScale(self):
##        u'The maximum visible scale for the service.'
##        #return Scale
##
##    @property
##    def CopyrightText(self):
##        u'Copyright information associated with the layer.'
##        #return copyright
##
##    @property
##    def BackgroundSymbol(self):
##        u'Background symbol of the map (data frame).'
##        #return FillSymbol
##
##    @property
##    def MapLayerInfos(self):
##        u'A collection of Map Layer Info objects, each containing information about a layer in the map (data frame).'
##        #return layerInfos
##
##    @property
##    def StandaloneTableDescriptions(self):
##        u'Standalone tables descriptions that can passed in to other methods.'
##        #return TableDescriptions
##
##    @property
##    def BackgroundColor(self):
##        u'The background color of the map (data frame).'
##        #return Color
##
##    @property
##    def FullExtent(self):
##        u'The full extent of the map (data frame).'
##        #return Extent
##
##    @property
##    def Bookmarks(self):
##        u'The published bookmarks for the map.'
##        #return Bookmarks
##
##    @property
##    def Extent(self):
##        u'The current extent of the map (data frame).'
##        #return Extent
##
##    @property
##    def MinScale(self):
##        u'The minimum visible scale for the service.'
##        #return Scale
##
##    @property
##    def Description(self):
##        u'The description of the map (data frame). This property is set in the General tab of the Data Frame Properties dialog.'
##        #return desc
##

class DataObjectGroup(CoClass):
    u'DataObject Group.'
    _reg_clsid_ = GUID('{63A0F726-0151-4507-A64A-2498DD8C7E60}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IDataObjectGroup(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'DataObjectGroup'
    _iid_ = GUID('{CAC8E0B4-9A73-4089-8B02-5848DDC2A80A}')
    _idlflags_ = ['oleautomation']
DataObjectGroup._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDataObjectGroup, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class ISelectionEnvironment(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the selection environment.'
    _iid_ = GUID('{E3875B6F-D9F5-11D1-ADD4-080009EC732A}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'esriSelectionResultEnum'
esriSelectionResultNew = 0
esriSelectionResultAdd = 1
esriSelectionResultSubtract = 2
esriSelectionResultAnd = 3
esriSelectionResultXOR = 4
esriSelectionResultEnum = c_int # enum
ISelectionEnvironment._methods_ = [
    COMMETHOD(['propget', helpstring(u'Selection method used for points.')], HRESULT, 'PointSelectionMethod',
              ( ['retval', 'out'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriSpatialRelEnum), 'Method' )),
    COMMETHOD(['propput', helpstring(u'Selection method used for points.')], HRESULT, 'PointSelectionMethod',
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriSpatialRelEnum, 'Method' )),
    COMMETHOD(['propget', helpstring(u'Distance used for selecting points by proximity.')], HRESULT, 'PointSearchDistance',
              ( ['retval', 'out'], POINTER(c_double), 'Distance' )),
    COMMETHOD(['propput', helpstring(u'Distance used for selecting points by proximity.')], HRESULT, 'PointSearchDistance',
              ( ['in'], c_double, 'Distance' )),
    COMMETHOD(['propget', helpstring(u'Selection method used for lines.')], HRESULT, 'LinearSelectionMethod',
              ( ['retval', 'out'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriSpatialRelEnum), 'Method' )),
    COMMETHOD(['propput', helpstring(u'Selection method used for lines.')], HRESULT, 'LinearSelectionMethod',
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriSpatialRelEnum, 'Method' )),
    COMMETHOD(['propget', helpstring(u'Distance used for selecting lines by proximity.')], HRESULT, 'LinearSearchDistance',
              ( ['retval', 'out'], POINTER(c_double), 'Distance' )),
    COMMETHOD(['propput', helpstring(u'Distance used for selecting lines by proximity.')], HRESULT, 'LinearSearchDistance',
              ( ['in'], c_double, 'Distance' )),
    COMMETHOD(['propget', helpstring(u'Selection method used for areas.')], HRESULT, 'AreaSelectionMethod',
              ( ['retval', 'out'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriSpatialRelEnum), 'Method' )),
    COMMETHOD(['propput', helpstring(u'Selection method used for areas.')], HRESULT, 'AreaSelectionMethod',
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriSpatialRelEnum, 'Method' )),
    COMMETHOD(['propget', helpstring(u'Distance used for selecting areas by proximity.')], HRESULT, 'AreaSearchDistance',
              ( ['retval', 'out'], POINTER(c_double), 'Distance' )),
    COMMETHOD(['propput', helpstring(u'Distance used for selecting areas by proximity.')], HRESULT, 'AreaSearchDistance',
              ( ['in'], c_double, 'Distance' )),
    COMMETHOD(['propget', helpstring(u'Combination method for the selection results.')], HRESULT, 'CombinationMethod',
              ( ['retval', 'out'], POINTER(esriSelectionResultEnum), 'Method' )),
    COMMETHOD(['propput', helpstring(u'Combination method for the selection results.')], HRESULT, 'CombinationMethod',
              ( ['in'], esriSelectionResultEnum, 'Method' )),
    COMMETHOD(['propget', helpstring(u'Search tolerance in device units.')], HRESULT, 'SearchTolerance',
              ( ['retval', 'out'], POINTER(c_int), 'Tolerance' )),
    COMMETHOD(['propput', helpstring(u'Search tolerance in device units.')], HRESULT, 'SearchTolerance',
              ( ['in'], c_int, 'Tolerance' )),
    COMMETHOD(['propget', helpstring(u'Default selection color.')], HRESULT, 'DefaultColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propputref', helpstring(u'Default selection color.')], HRESULT, 'DefaultColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
]
################################################################
## code template for ISelectionEnvironment implementation
##class ISelectionEnvironment_Impl(object):
##    def _get(self):
##        u'Distance used for selecting lines by proximity.'
##        #return Distance
##    def _set(self, Distance):
##        u'Distance used for selecting lines by proximity.'
##    LinearSearchDistance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Combination method for the selection results.'
##        #return Method
##    def _set(self, Method):
##        u'Combination method for the selection results.'
##    CombinationMethod = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Distance used for selecting areas by proximity.'
##        #return Distance
##    def _set(self, Distance):
##        u'Distance used for selecting areas by proximity.'
##    AreaSearchDistance = property(_get, _set, doc = _set.__doc__)
##
##    def DefaultColor(self, Color):
##        u'Default selection color.'
##        #return 
##
##    def _get(self):
##        u'Distance used for selecting points by proximity.'
##        #return Distance
##    def _set(self, Distance):
##        u'Distance used for selecting points by proximity.'
##    PointSearchDistance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Selection method used for lines.'
##        #return Method
##    def _set(self, Method):
##        u'Selection method used for lines.'
##    LinearSelectionMethod = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Selection method used for points.'
##        #return Method
##    def _set(self, Method):
##        u'Selection method used for points.'
##    PointSelectionMethod = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Search tolerance in device units.'
##        #return Tolerance
##    def _set(self, Tolerance):
##        u'Search tolerance in device units.'
##    SearchTolerance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Selection method used for areas.'
##        #return Method
##    def _set(self, Method):
##        u'Selection method used for areas.'
##    AreaSelectionMethod = property(_get, _set, doc = _set.__doc__)
##

class TableIdentity(CoClass):
    _reg_clsid_ = GUID('{6B333F9A-7D86-4514-804C-0CB1CC648CD0}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class ITableIdentity(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Table Identity'
    _iid_ = GUID('{BC701C47-4BA9-443E-BB5A-8E1EFD89BA2A}')
    _idlflags_ = ['oleautomation']
TableIdentity._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ITableIdentity, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class ITOCClass(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the TOC Class interface.'
    _iid_ = GUID('{60717BE3-7FCF-43A1-A1D8-1B645571EACB}')
    _idlflags_ = ['oleautomation']
ITOCClass._methods_ = [
    COMMETHOD(['propget', helpstring(u'The label text for the TOC class.')], HRESULT, 'Label',
              ( ['retval', 'out'], POINTER(BSTR), 'Label' )),
    COMMETHOD(['propget', helpstring(u'The description text for the TOC class.')], HRESULT, 'Description',
              ( ['retval', 'out'], POINTER(BSTR), 'desc' )),
    COMMETHOD(['propget', helpstring(u'The symbol patch image.')], HRESULT, 'SymbolPatchImage',
              ( ['in'], BSTR, 'fileType' ),
              ( ['retval', 'out'], POINTER(BSTR), 'patchPath' )),
]
################################################################
## code template for ITOCClass implementation
##class ITOCClass_Impl(object):
##    @property
##    def SymbolPatchImage(self, fileType):
##        u'The symbol patch image.'
##        #return patchPath
##
##    @property
##    def Description(self):
##        u'The description text for the TOC class.'
##        #return desc
##
##    @property
##    def Label(self):
##        u'The label text for the TOC class.'
##        #return Label
##

class IMapCache(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to Map spatial cache.'
    _iid_ = GUID('{6E57310F-C58D-4E49-B106-E52FCB51C55A}')
    _idlflags_ = ['oleautomation']
IMapCache._methods_ = [
    COMMETHOD([helpstring(u'Build the spatial cache.')], HRESULT, 'BuildCache'),
    COMMETHOD(['propput', helpstring(u'The maximum scale for the cache to be built.')], HRESULT, 'MaxScale',
              ( ['in'], c_double, 'pMaxScale' )),
    COMMETHOD(['propget', helpstring(u'The maximum scale for the cache to be built.')], HRESULT, 'MaxScale',
              ( ['retval', 'out'], POINTER(c_double), 'pMaxScale' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether a map cache can be created.')], HRESULT, 'Cacheable',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Cacheable' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the autocache is active.')], HRESULT, 'AutoCacheActive',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'active' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the autocache is active.')], HRESULT, 'AutoCacheActive',
              ( ['in'], VARIANT_BOOL, 'active' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether there is a scale limit.')], HRESULT, 'ScaleLimit',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'limited' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether there is a scale limit.')], HRESULT, 'ScaleLimit',
              ( ['in'], VARIANT_BOOL, 'limited' )),
    COMMETHOD(['propget', helpstring(u'Current cache extent.')], HRESULT, 'CacheExtent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'ppEnvelope' )),
    COMMETHOD([helpstring(u'Empty the map cache.')], HRESULT, 'EmptyCache'),
    COMMETHOD([helpstring(u'Refresh the autocache.')], HRESULT, 'RefreshAutoCache'),
]
################################################################
## code template for IMapCache implementation
##class IMapCache_Impl(object):
##    def _get(self):
##        u'Indicates whether there is a scale limit.'
##        #return limited
##    def _set(self, limited):
##        u'Indicates whether there is a scale limit.'
##    ScaleLimit = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Cacheable(self):
##        u'Indicates whether a map cache can be created.'
##        #return Cacheable
##
##    def EmptyCache(self):
##        u'Empty the map cache.'
##        #return 
##
##    def _get(self):
##        u'The maximum scale for the cache to be built.'
##        #return pMaxScale
##    def _set(self, pMaxScale):
##        u'The maximum scale for the cache to be built.'
##    MaxScale = property(_get, _set, doc = _set.__doc__)
##
##    def BuildCache(self):
##        u'Build the spatial cache.'
##        #return 
##
##    def _get(self):
##        u'Indicates whether the autocache is active.'
##        #return active
##    def _set(self, active):
##        u'Indicates whether the autocache is active.'
##    AutoCacheActive = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def CacheExtent(self):
##        u'Current cache extent.'
##        #return ppEnvelope
##
##    def RefreshAutoCache(self):
##        u'Refresh the autocache.'
##        #return 
##

class IEnumMap(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the map enumerator.'
    _iid_ = GUID('{0F1FC15B-083F-11D1-869E-0000F8751720}')
    _idlflags_ = ['oleautomation']
class IMap(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the map.'
    _iid_ = GUID('{E6BDAA75-4D35-11D0-98BE-00805F7CED21}')
    _idlflags_ = ['oleautomation']
IEnumMap._methods_ = [
    COMMETHOD([helpstring(u'Returns the next map.')], HRESULT, 'Next',
              ( ['retval', 'out'], POINTER(POINTER(IMap)), 'Map' )),
    COMMETHOD([helpstring(u'Resets the enumerator.')], HRESULT, 'Reset'),
]
################################################################
## code template for IEnumMap implementation
##class IEnumMap_Impl(object):
##    def Reset(self):
##        u'Resets the enumerator.'
##        #return 
##
##    def Next(self):
##        u'Returns the next map.'
##        #return Map
##

class IPositionTrails(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that display trails of previous positions on the map.'
    _iid_ = GUID('{89C655C1-59E2-417E-954A-667B7A14C68E}')
    _idlflags_ = ['oleautomation']
IPositionTrails._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if marker symbols shows previous positions. Defaults to false.')], HRESULT, 'ShowMarkerTrails',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pShow' )),
    COMMETHOD(['propput', helpstring(u'Indicates if marker symbols shows previous positions. Defaults to false.')], HRESULT, 'ShowMarkerTrails',
              ( ['in'], VARIANT_BOOL, 'pShow' )),
    COMMETHOD(['propget', helpstring(u'A color ramp to use for displaying the marker trails.')], HRESULT, 'MarkerTrailColorRamp',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColorRamp)), 'ppRamp' )),
    COMMETHOD(['propputref', helpstring(u'A color ramp to use for displaying the marker trails.')], HRESULT, 'MarkerTrailColorRamp',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColorRamp), 'ppRamp' )),
    COMMETHOD(['propget', helpstring(u'The number of marker symbols to show as a trail.')], HRESULT, 'MarkerTrailCount',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propput', helpstring(u'The number of marker symbols to show as a trail.')], HRESULT, 'MarkerTrailCount',
              ( ['in'], c_int, 'pCount' )),
    COMMETHOD(['propget', helpstring(u'The distance, in map units, of the distance between marker trails.')], HRESULT, 'MarkerTrailDistance',
              ( ['retval', 'out'], POINTER(c_double), 'pDistance' )),
    COMMETHOD(['propput', helpstring(u'The distance, in map units, of the distance between marker trails.')], HRESULT, 'MarkerTrailDistance',
              ( ['in'], c_double, 'pDistance' )),
    COMMETHOD(['propget', helpstring(u'The marker symbol to use for a marker trail.')], HRESULT, 'MarkerTrailSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IMarkerSymbol)), 'ppSymbol' )),
    COMMETHOD(['propputref', helpstring(u'The marker symbol to use for a marker trail.')], HRESULT, 'MarkerTrailSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IMarkerSymbol), 'ppSymbol' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the linear trail of the previous positions should be visible. Defaults to false.')], HRESULT, 'ShowLinearTrail',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pShow' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the linear trail of the previous positions should be visible. Defaults to false.')], HRESULT, 'ShowLinearTrail',
              ( ['in'], VARIANT_BOOL, 'pShow' )),
    COMMETHOD(['propget', helpstring(u'The line symbol to use for a linear trail.')], HRESULT, 'LinearTrailSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ILineSymbol)), 'ppSymbol' )),
    COMMETHOD(['propputref', helpstring(u'The line symbol to use for a linear trail.')], HRESULT, 'LinearTrailSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ILineSymbol), 'ppSymbol' )),
    COMMETHOD(['propget', helpstring(u'The distance, in map units, of the linear trail behind the current position.')], HRESULT, 'LinearTrailDistance',
              ( ['retval', 'out'], POINTER(c_double), 'pDistance' )),
    COMMETHOD(['propput', helpstring(u'The distance, in map units, of the linear trail behind the current position.')], HRESULT, 'LinearTrailDistance',
              ( ['in'], c_double, 'pDistance' )),
]
################################################################
## code template for IPositionTrails implementation
##class IPositionTrails_Impl(object):
##    def _get(self):
##        u'Indicates if marker symbols shows previous positions. Defaults to false.'
##        #return pShow
##    def _set(self, pShow):
##        u'Indicates if marker symbols shows previous positions. Defaults to false.'
##    ShowMarkerTrails = property(_get, _set, doc = _set.__doc__)
##
##    def MarkerTrailSymbol(self, ppSymbol):
##        u'The marker symbol to use for a marker trail.'
##        #return 
##
##    def MarkerTrailColorRamp(self, ppRamp):
##        u'A color ramp to use for displaying the marker trails.'
##        #return 
##
##    def LinearTrailSymbol(self, ppSymbol):
##        u'The line symbol to use for a linear trail.'
##        #return 
##
##    def _get(self):
##        u'Indicates if the linear trail of the previous positions should be visible. Defaults to false.'
##        #return pShow
##    def _set(self, pShow):
##        u'Indicates if the linear trail of the previous positions should be visible. Defaults to false.'
##    ShowLinearTrail = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The distance, in map units, of the linear trail behind the current position.'
##        #return pDistance
##    def _set(self, pDistance):
##        u'The distance, in map units, of the linear trail behind the current position.'
##    LinearTrailDistance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The distance, in map units, of the distance between marker trails.'
##        #return pDistance
##    def _set(self, pDistance):
##        u'The distance, in map units, of the distance between marker trails.'
##    MarkerTrailDistance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The number of marker symbols to show as a trail.'
##        #return pCount
##    def _set(self, pCount):
##        u'The number of marker symbols to show as a trail.'
##    MarkerTrailCount = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'esriMapDocumentType'
esriMapDocumentTypeMxd = 0
esriMapDocumentTypePmf = 1
esriMapDocumentTypeLyr = 2
esriMapDocumentTypeUnknown = 3
esriMapDocumentType = c_int # enum

# values for enumeration 'esriGlobeDocumentType'
esriGlobeDocumentTypeGmx = 0
esriGlobeDocumentTypePmf = 1
esriGlobeDocumentTypeLyr = 2
esriGlobeDocumentTypeUnknown = 3
esriGlobeDocumentType = c_int # enum
class MosaicLayer(CoClass):
    u'The layer implementation of the Mosaic Dataset.'
    _reg_clsid_ = GUID('{3452FCB8-D10C-44E4-B971-8C53DB39D517}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class ILayer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that work with all layers.'
    _iid_ = GUID('{34C20002-4D3C-11D0-92D8-00805F7C28B0}')
    _idlflags_ = ['oleautomation']
class IMosaicLayer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the Mosaic layer.'
    _iid_ = GUID('{EF80DA8F-686B-4D8E-87ED-C2213273632F}')
    _idlflags_ = ['oleautomation']
class ICompositeLayer2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control whether a layer is expanded in the TOC.'
    _iid_ = GUID('{88130D17-5762-453A-96CF-8E7503FA1AA0}')
    _idlflags_ = ['oleautomation']
class IDataLayer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the data source properties of a layer.'
    _iid_ = GUID('{6CA416B1-E160-11D2-9F4E-00C04F6BC78E}')
    _idlflags_ = ['oleautomation']
class IDataLayer2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to additional members that control the data source properties of a layer.'
    _iid_ = GUID('{E9D11F65-6936-4408-B69F-D91552EB9C4A}')
    _idlflags_ = ['oleautomation']
class ITimeData(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to time related properties of a layer.'
    _iid_ = GUID('{008331D0-1225-4FE7-AD19-C3431625D337}')
    _idlflags_ = ['oleautomation']
class ITimeData2(ITimeData):
    _case_insensitive_ = True
    u'Provides access to time related properties of a layer.'
    _iid_ = GUID('{6308F920-D4EF-4E5F-B0FC-7A63ED132B27}')
    _idlflags_ = ['oleautomation']
class ITimeTableDefinition(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to time related properties of a layer.'
    _iid_ = GUID('{9F45DF65-DE39-4A88-B174-B2AD3D3020A8}')
    _idlflags_ = ['oleautomation']
class ITimeDataDisplay(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to time animation related properties of a layer.'
    _iid_ = GUID('{F12874C3-3358-40A5-8E32-C824DD1D75FA}')
    _idlflags_ = ['oleautomation']
class ILayerInfo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that return layer images.'
    _iid_ = GUID('{274419E1-0F5C-11D3-9BFD-00C04F5B951E}')
    _idlflags_ = ['oleautomation']
class IAttributeTable(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the base table.'
    _iid_ = GUID('{07F3186C-AF91-4AD6-BF67-11167D0F8F60}')
    _idlflags_ = ['oleautomation']
class ITableDefinition(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that define a subset of the rows from the underlying table.'
    _iid_ = GUID('{7E078FF6-4B77-414E-90A9-8BB352DD1608}')
    _idlflags_ = ['oleautomation']
class ICompositeLayer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that work with a collection of layers that behaves like a single layer.'
    _iid_ = GUID('{BA119BC4-939A-11D2-A2F4-080009B6F22B}')
    _idlflags_ = ['oleautomation']
class IIdentify(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that identify features.'
    _iid_ = GUID('{83033A90-D19F-11D2-8CD0-00C04F5B951E}')
    _idlflags_ = ['oleautomation']
class IIdentify2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that set the current scale of the display.'
    _iid_ = GUID('{0483DC2F-8726-4640-98CD-5888FF1A4FA4}')
    _idlflags_ = ['oleautomation']
class ILayer2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to additional members that work with all layers.'
    _iid_ = GUID('{599DEE2E-2182-4E54-8A86-725145C9D989}')
    _idlflags_ = ['oleautomation']
class ILayerDrawingProperties(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control layer drawing properties.'
    _iid_ = GUID('{251C3E11-F119-11D2-9F5E-00C04F6BC78E}')
    _idlflags_ = ['oleautomation']
class ILayerEffects(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control layer effects.'
    _iid_ = GUID('{09998199-1FB8-11D3-AB4E-000000000000}')
    _idlflags_ = ['oleautomation']
class ILayerExtensions(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the extensions of a layer.'
    _iid_ = GUID('{BB6A78CA-9C28-4F75-899F-DFF65174082C}')
    _idlflags_ = ['oleautomation']
class ILayerGeneralProperties(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to layer general properties.'
    _iid_ = GUID('{2425B413-1FFC-4407-B9F0-B4AC9ED50BDE}')
    _idlflags_ = ['oleautomation']
class ILayerMasking(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to means to mask layers with other layers.'
    _iid_ = GUID('{536427DA-5354-491D-AE92-ABEBAA8BB05B}')
    _idlflags_ = ['oleautomation']
class ILayerPosition(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u"Provides access to members that control a layer's default position in the map interface."
    _iid_ = GUID('{C0DC8820-E10F-4285-AAB1-6C6B685DBB84}')
    _idlflags_ = ['oleautomation']
class ILayerSymbologyExtents(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to layer extents based on the symbology.'
    _iid_ = GUID('{02CBDA2F-D2E8-4B28-AF9C-71CB096213E1}')
    _idlflags_ = ['oleautomation']
class IPublishLayer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u"Provides access to a layer's capability for being published with the ArcGIS Publisher extension."
    _iid_ = GUID('{7453C805-9D64-44A6-BF2F-73E477DCE18F}')
    _idlflags_ = ['oleautomation']
MosaicLayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILayer, IMosaicLayer, ICompositeLayer2, IDataLayer, IDataLayer2, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeoDataset, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, ITimeData, ITimeData2, ITimeTableDefinition, ITimeDataDisplay, ILayerInfo, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataset, IAttributeTable, ITableDefinition, ICompositeLayer, IIdentify, IIdentify2, ILayer2, ILayerDrawingProperties, ILayerEffects, ILayerExtensions, ILayerGeneralProperties, ILayerMasking, ILayerPosition, ILayerSymbologyExtents, IPublishLayer, comtypes.gen._8F0541A3_D5BE_4B3F_A8D9_062D5579E19B_0_10_2.IRasterDataManagementEvents, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayAdmin, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayAdmin2, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayFilterManager, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspaceEditEvents, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClassID, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IConnectionPointContainer]

class IMosaicSubLayer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the members of Mosaic Layer.'
    _iid_ = GUID('{DB9C050E-7F02-437A-8B68-A5EF242BD8D4}')
    _idlflags_ = ['oleautomation']
IMosaicSubLayer._methods_ = [
    COMMETHOD(['propget', helpstring(u'The parent mosaic layer of this sublayer.')], HRESULT, 'Parent',
              ( ['retval', 'out'], POINTER(POINTER(IMosaicLayer)), 'ppParent' )),
    COMMETHOD(['propputref', helpstring(u'The parent mosaic layer of this sublayer.')], HRESULT, 'Parent',
              ( ['in'], POINTER(IMosaicLayer), 'ppParent' )),
    COMMETHOD(['propget', helpstring(u'The layer identifier. This is used to uniquely identify the sub-layer contained within a Mosaic Layer.')], HRESULT, 'Identifier',
              ( ['retval', 'out'], POINTER(BSTR), 'pIdentifier' )),
    COMMETHOD(['propput', helpstring(u'The layer identifier. This is used to uniquely identify the sub-layer contained within a Mosaic Layer.')], HRESULT, 'Identifier',
              ( ['in'], BSTR, 'pIdentifier' )),
    COMMETHOD(['propget', helpstring(u"The complete name of the sub-layer is the name of the sub-layer qualified with its parent Mosaic Layer's name.")], HRESULT, 'CompleteName',
              ( ['retval', 'out'], POINTER(BSTR), 'pCompleteName' )),
]
################################################################
## code template for IMosaicSubLayer implementation
##class IMosaicSubLayer_Impl(object):
##    @property
##    def CompleteName(self):
##        u"The complete name of the sub-layer is the name of the sub-layer qualified with its parent Mosaic Layer's name."
##        #return pCompleteName
##
##    def _get(self):
##        u'The layer identifier. This is used to uniquely identify the sub-layer contained within a Mosaic Layer.'
##        #return pIdentifier
##    def _set(self, pIdentifier):
##        u'The layer identifier. This is used to uniquely identify the sub-layer contained within a Mosaic Layer.'
##    Identifier = property(_get, _set, doc = _set.__doc__)
##
##    def Parent(self, ppParent):
##        u'The parent mosaic layer of this sublayer.'
##        #return 
##

class IRelatedRecordSet(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the RelatedRecordSet members.'
    _iid_ = GUID('{CB15D999-15D4-4D34-AE80-4AA9619078EC}')
    _idlflags_ = ['oleautomation']
class IRelatedRecordGroups(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the RelatedRecordGroup Collection Interface.'
    _iid_ = GUID('{CBD3C9A8-E89C-447B-A2AA-8B4593604930}')
    _idlflags_ = ['oleautomation']
IRelatedRecordSet._methods_ = [
    COMMETHOD(['propget', helpstring(u'Fields of the values in the RelatedRecordGroups.')], HRESULT, 'RelatedRecordFields',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFields)), 'ppFields' )),
    COMMETHOD(['propget', helpstring(u'Groups of records that are related to each row id.')], HRESULT, 'RelatedRecordGroups',
              ( ['retval', 'out'], POINTER(POINTER(IRelatedRecordGroups)), 'recordGroups' )),
]
################################################################
## code template for IRelatedRecordSet implementation
##class IRelatedRecordSet_Impl(object):
##    @property
##    def RelatedRecordGroups(self):
##        u'Groups of records that are related to each row id.'
##        #return recordGroups
##
##    @property
##    def RelatedRecordFields(self):
##        u'Fields of the values in the RelatedRecordGroups.'
##        #return ppFields
##


# values for enumeration 'ESRITPCStylusType'
ETPC_Ball = 0
ETPC_Chisel = 1
ESRITPCStylusType = c_int # enum

# values for enumeration 'esriJPIPServerMessageCodeEnum'
esriJPIPServerMessageCode_Failed = 83001
esriJPIPServerMessageCode_NotLicensed = 83002
esriJPIPServerMessageCode_Started = 83003
esriJPIPServerMessageCode_Initialized = 83004
esriJPIPServerMessageCodeEnum = c_int # enum
class IRealTimeLog(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members for logging real-time data.'
    _iid_ = GUID('{32C1C986-1DF2-482F-9A7F-39D2E134E528}')
    _idlflags_ = ['oleautomation']
IRealTimeLog._methods_ = [
    COMMETHOD(['propget', helpstring(u'The feature class used to log positions.')], HRESULT, 'LogFile',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClass)), 'ppFeatureClass' )),
    COMMETHOD(['propputref', helpstring(u'The feature class used to log positions.')], HRESULT, 'LogFile',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClass), 'ppFeatureClass' )),
    COMMETHOD(['propget', helpstring(u'The time, in seconds, between storing positions in the log file. Defaults to 5 seconds.')], HRESULT, 'LogRate',
              ( ['retval', 'out'], POINTER(c_double), 'pRate' )),
    COMMETHOD(['propput', helpstring(u'The time, in seconds, between storing positions in the log file. Defaults to 5 seconds.')], HRESULT, 'LogRate',
              ( ['in'], c_double, 'pRate' )),
    COMMETHOD(['propget', helpstring(u'The minimum distance between points before they are logged. Overrides the log rate, if the minimum distance has not been traveled.')], HRESULT, 'MinimumLogDistance',
              ( ['retval', 'out'], POINTER(c_double), 'pDistance' )),
    COMMETHOD(['propput', helpstring(u'The minimum distance between points before they are logged. Overrides the log rate, if the minimum distance has not been traveled.')], HRESULT, 'MinimumLogDistance',
              ( ['in'], c_double, 'pDistance' )),
    COMMETHOD(['propget', helpstring(u'The minimum deflection angle to use when deciding when to log points.')], HRESULT, 'MinimumLogDeflectionAngle',
              ( ['retval', 'out'], POINTER(c_double), 'pAngle' )),
    COMMETHOD(['propput', helpstring(u'The minimum deflection angle to use when deciding when to log points.')], HRESULT, 'MinimumLogDeflectionAngle',
              ( ['in'], c_double, 'pAngle' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the log rate is used for sampling data.')], HRESULT, 'UseLogRate',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pUse' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the log rate is used for sampling data.')], HRESULT, 'UseLogRate',
              ( ['in'], VARIANT_BOOL, 'pUse' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the minimum log rate is used for sampling data.')], HRESULT, 'UseMinimumLogDistance',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pUse' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the minimum log rate is used for sampling data.')], HRESULT, 'UseMinimumLogDistance',
              ( ['in'], VARIANT_BOOL, 'pUse' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the minimum log deflection angle is used for sampling data.')], HRESULT, 'UseMinimumLogDeflectionAngle',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pUse' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the minimum log deflection angle is used for sampling data.')], HRESULT, 'UseMinimumLogDeflectionAngle',
              ( ['in'], VARIANT_BOOL, 'pUse' )),
    COMMETHOD([helpstring(u'Start logging to the current log file.')], HRESULT, 'StartLogging'),
    COMMETHOD([helpstring(u'Stop logging to the current log file.')], HRESULT, 'StopLogging'),
    COMMETHOD(['propget', helpstring(u'Indicates if the data is being logged.')], HRESULT, 'IsLogging',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pLogging' )),
    COMMETHOD([helpstring(u'Stamp current position values to the selected log file.')], HRESULT, 'StampGpsPosition'),
    COMMETHOD(['propput', helpstring(u'Indicates if positions are logged if the signal is lost.')], HRESULT, 'LogEstimatedPosition',
              ( ['in'], VARIANT_BOOL, 'pLogEstimated' )),
    COMMETHOD(['propget', helpstring(u'Indicates if positions are logged if the signal is lost.')], HRESULT, 'LogEstimatedPosition',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pLogEstimated' )),
]
################################################################
## code template for IRealTimeLog implementation
##class IRealTimeLog_Impl(object):
##    def StartLogging(self):
##        u'Start logging to the current log file.'
##        #return 
##
##    def _get(self):
##        u'The time, in seconds, between storing positions in the log file. Defaults to 5 seconds.'
##        #return pRate
##    def _set(self, pRate):
##        u'The time, in seconds, between storing positions in the log file. Defaults to 5 seconds.'
##    LogRate = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the log rate is used for sampling data.'
##        #return pUse
##    def _set(self, pUse):
##        u'Indicates if the log rate is used for sampling data.'
##    UseLogRate = property(_get, _set, doc = _set.__doc__)
##
##    def StampGpsPosition(self):
##        u'Stamp current position values to the selected log file.'
##        #return 
##
##    def _get(self):
##        u'Indicates if positions are logged if the signal is lost.'
##        #return pLogEstimated
##    def _set(self, pLogEstimated):
##        u'Indicates if positions are logged if the signal is lost.'
##    LogEstimatedPosition = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the minimum log rate is used for sampling data.'
##        #return pUse
##    def _set(self, pUse):
##        u'Indicates if the minimum log rate is used for sampling data.'
##    UseMinimumLogDistance = property(_get, _set, doc = _set.__doc__)
##
##    def StopLogging(self):
##        u'Stop logging to the current log file.'
##        #return 
##
##    def _get(self):
##        u'The minimum deflection angle to use when deciding when to log points.'
##        #return pAngle
##    def _set(self, pAngle):
##        u'The minimum deflection angle to use when deciding when to log points.'
##    MinimumLogDeflectionAngle = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def IsLogging(self):
##        u'Indicates if the data is being logged.'
##        #return pLogging
##
##    def _get(self):
##        u'The minimum distance between points before they are logged. Overrides the log rate, if the minimum distance has not been traveled.'
##        #return pDistance
##    def _set(self, pDistance):
##        u'The minimum distance between points before they are logged. Overrides the log rate, if the minimum distance has not been traveled.'
##    MinimumLogDistance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the minimum log deflection angle is used for sampling data.'
##        #return pUse
##    def _set(self, pUse):
##        u'Indicates if the minimum log deflection angle is used for sampling data.'
##    UseMinimumLogDeflectionAngle = property(_get, _set, doc = _set.__doc__)
##
##    def LogFile(self, ppFeatureClass):
##        u'The feature class used to log positions.'
##        #return 
##

class IMapServerTimeInfo2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to core objects contained within the map document.'
    _iid_ = GUID('{EF4D782C-E696-4916-A8FE-72BA5652CACC}')
    _idlflags_ = ['oleautomation']
IMapServerTimeInfo2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates whether the service is being updated frequently with new data.')], HRESULT, 'HasLiveData',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'HasLiveData' )),
    COMMETHOD(['propget', helpstring(u'TimeExtent of interest that the map as been authored.')], HRESULT, 'FullTimeExtent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITimeExtent)), 'TimeExtent' )),
    COMMETHOD(['propget', helpstring(u'The recommended default time interval to be used to animate the layer/table in the service.')], HRESULT, 'DefaultTimeInterval',
              ( ['retval', 'out'], POINTER(c_double), 'Interval' )),
    COMMETHOD(['propget', helpstring(u'The recommended default time interval units to be used to animate the layer/table in the service.')], HRESULT, 'DefaultTimeIntervalUnits',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriTimeUnits), 'Units' )),
    COMMETHOD(['propget', helpstring(u'The recommended time window expressed in the same units as the time interval for the service.')], HRESULT, 'DefaultTimeWindow',
              ( ['retval', 'out'], POINTER(c_double), 'duration' )),
]
################################################################
## code template for IMapServerTimeInfo2 implementation
##class IMapServerTimeInfo2_Impl(object):
##    @property
##    def DefaultTimeIntervalUnits(self):
##        u'The recommended default time interval units to be used to animate the layer/table in the service.'
##        #return Units
##
##    @property
##    def FullTimeExtent(self):
##        u'TimeExtent of interest that the map as been authored.'
##        #return TimeExtent
##
##    @property
##    def DefaultTimeInterval(self):
##        u'The recommended default time interval to be used to animate the layer/table in the service.'
##        #return Interval
##
##    @property
##    def HasLiveData(self):
##        u'Indicates whether the service is being updated frequently with new data.'
##        #return HasLiveData
##
##    @property
##    def DefaultTimeWindow(self):
##        u'The recommended time window expressed in the same units as the time interval for the service.'
##        #return duration
##

class WMTSLayer(CoClass):
    u'Provides programmatic access to WMTS layer.'
    _reg_clsid_ = GUID('{61C743A1-8317-416A-8317-10964DADC6AD}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class ILayerEvents(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to events that occur when layer visibility changes.'
    _iid_ = GUID('{BDA426B2-A692-11D2-A300-080009B6F22B}')
    _idlflags_ = ['oleautomation']
class IWMTSLayer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties of WMTS Layer.'
    _iid_ = GUID('{E817A24C-BA3E-4D03-892A-7B6EAA2A3128}')
    _idlflags_ = []
class IDisplayTable(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that work with the display table associated with a standalone table.'
    _iid_ = GUID('{CCE71A6D-6135-46CD-BBED-616A74831B30}')
    _idlflags_ = ['oleautomation']
class ILegendInfo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control legend information provided by a renderer.'
    _iid_ = GUID('{167C5EA1-AF20-11D1-8817-080009EC732A}')
    _idlflags_ = ['oleautomation']
class ISecureLayer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u"Provides functionality to control access to a layer's contents."
    _iid_ = GUID('{D047A6A9-D445-4921-A1E9-72D8B8A2813A}')
    _idlflags_ = ['oleautomation']
class ISecureLayer2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u"Provides access to control and test a layer's content related to authentication."
    _iid_ = GUID('{67F66590-D48D-4C8D-B6C4-7E5F9FB009C7}')
    _idlflags_ = ['oleautomation']
WMTSLayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IWMTSLayer, ILayer, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeoDataset, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, ILayerDrawingProperties, ILayerEffects, ILayerInfo, ILayerGeneralProperties, ILayerExtensions, IDisplayTable, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataset, IDataLayer, ILegendInfo, ILayerPosition, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayAdmin2, IPublishLayer, ISecureLayer, ISecureLayer2]
WMTSLayer._outgoing_interfaces_ = [ILayerEvents]

class IJPIPServer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to JPIP Server properties and methods.'
    _iid_ = GUID('{8D2DFD82-8BF5-42E1-982C-4D9EDD4F1E34}')
    _idlflags_ = ['oleautomation']
IJPIPServer._methods_ = [
    COMMETHOD(['propget', helpstring(u'The JPIP service URL.')], HRESULT, 'URL',
              ( ['retval', 'out'], POINTER(BSTR), 'pURL' )),
]
################################################################
## code template for IJPIPServer implementation
##class IJPIPServer_Impl(object):
##    @property
##    def URL(self):
##        u'The JPIP service URL.'
##        #return pURL
##

class IUniqueValueInfo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides members to decribe unique value class for a unique value renderer.'
    _iid_ = GUID('{789E4C0D-560A-45DF-AB1F-467E19388B9B}')
    _idlflags_ = []
IUniqueValueInfo._methods_ = [
    COMMETHOD(['propget', helpstring(u'Unique value class count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propput', helpstring(u'Unique value class count.')], HRESULT, 'Count',
              ( ['in'], c_int, 'Count' )),
    COMMETHOD(['propget', helpstring(u'Unique value class label.')], HRESULT, 'Value',
              ( ['retval', 'out'], POINTER(BSTR), 'classLabel' )),
    COMMETHOD(['propput', helpstring(u'Unique value class label.')], HRESULT, 'Value',
              ( ['in'], BSTR, 'classLabel' )),
    COMMETHOD(['propget', helpstring(u'Unique value class label.')], HRESULT, 'Label',
              ( ['retval', 'out'], POINTER(BSTR), 'classLabel' )),
    COMMETHOD(['propput', helpstring(u'Unique value class label.')], HRESULT, 'Label',
              ( ['in'], BSTR, 'classLabel' )),
    COMMETHOD(['propget', helpstring(u'Class description.')], HRESULT, 'Description',
              ( ['retval', 'out'], POINTER(BSTR), 'symbolDescription' )),
    COMMETHOD(['propput', helpstring(u'Class description.')], HRESULT, 'Description',
              ( ['in'], BSTR, 'symbolDescription' )),
    COMMETHOD(['propget', helpstring(u'Symbol used for rendering the class.')], HRESULT, 'Symbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol)), 'Symbol' )),
    COMMETHOD(['propput', helpstring(u'Symbol used for rendering the class.')], HRESULT, 'Symbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol), 'Symbol' )),
]
################################################################
## code template for IUniqueValueInfo implementation
##class IUniqueValueInfo_Impl(object):
##    def _get(self):
##        u'Unique value class count.'
##        #return Count
##    def _set(self, Count):
##        u'Unique value class count.'
##    Count = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Symbol used for rendering the class.'
##        #return Symbol
##    def _set(self, Symbol):
##        u'Symbol used for rendering the class.'
##    Symbol = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Class description.'
##        #return symbolDescription
##    def _set(self, symbolDescription):
##        u'Class description.'
##    Description = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Unique value class label.'
##        #return classLabel
##    def _set(self, classLabel):
##        u'Unique value class label.'
##    Value = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Unique value class label.'
##        #return classLabel
##    def _set(self, classLabel):
##        u'Unique value class label.'
##    Label = property(_get, _set, doc = _set.__doc__)
##

class JPIPServer(CoClass):
    u'The JPIP Server Object Extension.'
    _reg_clsid_ = GUID('{A2D96CA9-DEC0-4488-9969-847DB6C64C39}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
JPIPServer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IJPIPServer, comtypes.gen._18F2FC71_6B30_45B9_B101_037A8B868B66_0_10_2.IServerObjectExtension, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IObjectConstruct, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILogSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IObjectActivate]

class IWMSGroupLayer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the WMS group layer.'
    _iid_ = GUID('{D43D9A73-FF6C-4A19-B36A-D7ECBE61962A}')
    _idlflags_ = ['oleautomation']
class IWMSLayer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the WMS sub layer.'
    _iid_ = GUID('{005F592A-327B-44A4-AEEB-409D2F866F47}')
    _idlflags_ = ['oleautomation']
class IEnumLayer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that allow iteration through a set of layers.'
    _iid_ = GUID('{95D967B0-4EEA-11D0-98BE-00805F7CED21}')
    _idlflags_ = ['oleautomation']
IWMSGroupLayer._methods_ = [
    COMMETHOD(['propget', helpstring(u'Associated WMSServiceDescription.')], HRESULT, 'WMSServiceDescription',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._746F6817_89BB_4490_9829_83CA25FD505A_0_10_2.IWMSServiceDescription)), 'ServiceDescription' )),
    COMMETHOD([helpstring(u'Creates a new WMSLayer for the given WMSLayerDescription.')], HRESULT, 'CreateWMSLayer',
              ( ['in'], POINTER(comtypes.gen._746F6817_89BB_4490_9829_83CA25FD505A_0_10_2.IWMSLayerDescription), 'pWMSLayerDescription' ),
              ( ['retval', 'out'], POINTER(POINTER(IWMSLayer)), 'NewWMSLayer' )),
    COMMETHOD([helpstring(u'Creates an empty WMSGroupLayer with the given name.')], HRESULT, 'CreateWMSGroupLayer',
              ( ['in'], BSTR, 'groupName' ),
              ( ['retval', 'out'], POINTER(POINTER(IWMSGroupLayer)), 'ppNewWMSGroupLayer' )),
    COMMETHOD([helpstring(u'Creates a new WMSGroupLayer for the given WMSLayerDescription recursively including all the sub layers.')], HRESULT, 'CreateWMSGroupLayers',
              ( ['in'], POINTER(comtypes.gen._746F6817_89BB_4490_9829_83CA25FD505A_0_10_2.IWMSLayerDescription), 'WMSGroupLayerDescription' ),
              ( ['retval', 'out'], POINTER(POINTER(IWMSGroupLayer)), 'NewWMSGroupLayer' )),
    COMMETHOD([helpstring(u'Inserts the given WMS Layers at the given position. Only layers created by this WMS group layer or its parent layers are valid.')], HRESULT, 'InsertLayers',
              ( ['in'], POINTER(IEnumLayer), 'WMSLayers' ),
              ( ['in'], c_int, 'insertPosition' )),
    COMMETHOD([helpstring(u'Inserts the given WMS Layer at the given position. Only layer created by this WMS group layer or its parent layers are valid.')], HRESULT, 'InsertLayer',
              ( ['in'], POINTER(ILayer), 'WMSLayer' ),
              ( ['in'], c_int, 'insertPosition' )),
    COMMETHOD([helpstring(u'Moves the given layer to the given position within the group layer.')], HRESULT, 'MoveLayer',
              ( ['in'], POINTER(ILayer), 'WMSLayer' ),
              ( ['in'], c_int, 'toPosition' )),
    COMMETHOD([helpstring(u'Adds the given WMS Layer at the given position. Only layer created by this WMS group layer or its parent layers are valid.')], HRESULT, 'Add',
              ( ['in'], POINTER(ILayer), 'WMSLayer' )),
    COMMETHOD([helpstring(u'Deletes the given layer if it exists.')], HRESULT, 'Delete',
              ( ['in'], POINTER(ILayer), 'pWMSLayer' )),
    COMMETHOD([helpstring(u'Deletes all the sub layers.')], HRESULT, 'Clear'),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer is expanded or collapsed.')], HRESULT, 'Expanded',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pValid' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the layer is expanded or collapsed.')], HRESULT, 'Expanded',
              ( ['in'], VARIANT_BOOL, 'pValid' )),
    COMMETHOD(['propget', helpstring(u'Number of sub layers.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'pLayerCount' )),
    COMMETHOD(['propget', helpstring(u'Sub layer at the given index.')], HRESULT, 'Layer',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(ILayer)), 'WMSLayer' )),
]
################################################################
## code template for IWMSGroupLayer implementation
##class IWMSGroupLayer_Impl(object):
##    @property
##    def Count(self):
##        u'Number of sub layers.'
##        #return pLayerCount
##
##    @property
##    def Layer(self, Index):
##        u'Sub layer at the given index.'
##        #return WMSLayer
##
##    def _get(self):
##        u'Indicates if the layer is expanded or collapsed.'
##        #return pValid
##    def _set(self, pValid):
##        u'Indicates if the layer is expanded or collapsed.'
##    Expanded = property(_get, _set, doc = _set.__doc__)
##
##    def CreateWMSGroupLayers(self, WMSGroupLayerDescription):
##        u'Creates a new WMSGroupLayer for the given WMSLayerDescription recursively including all the sub layers.'
##        #return NewWMSGroupLayer
##
##    def InsertLayer(self, WMSLayer, insertPosition):
##        u'Inserts the given WMS Layer at the given position. Only layer created by this WMS group layer or its parent layers are valid.'
##        #return 
##
##    def Clear(self):
##        u'Deletes all the sub layers.'
##        #return 
##
##    @property
##    def WMSServiceDescription(self):
##        u'Associated WMSServiceDescription.'
##        #return ServiceDescription
##
##    def Add(self, WMSLayer):
##        u'Adds the given WMS Layer at the given position. Only layer created by this WMS group layer or its parent layers are valid.'
##        #return 
##
##    def MoveLayer(self, WMSLayer, toPosition):
##        u'Moves the given layer to the given position within the group layer.'
##        #return 
##
##    def CreateWMSLayer(self, pWMSLayerDescription):
##        u'Creates a new WMSLayer for the given WMSLayerDescription.'
##        #return NewWMSLayer
##
##    def CreateWMSGroupLayer(self, groupName):
##        u'Creates an empty WMSGroupLayer with the given name.'
##        #return ppNewWMSGroupLayer
##
##    def InsertLayers(self, WMSLayers, insertPosition):
##        u'Inserts the given WMS Layers at the given position. Only layers created by this WMS group layer or its parent layers are valid.'
##        #return 
##
##    def Delete(self, pWMSLayer):
##        u'Deletes the given layer if it exists.'
##        #return 
##

class IRealTimeFeedSimulator(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the members of a real-time feed simulator.'
    _iid_ = GUID('{A062C77E-53E6-4A6A-8E22-14C7A73540FE}')
    _idlflags_ = ['oleautomation']
class IFeatureLayer(ILayer):
    _case_insensitive_ = True
    u'Provides access to members that control common aspects of a feature layer.'
    _iid_ = GUID('{40A9E885-5533-11D0-98BE-00805F7CED21}')
    _idlflags_ = ['oleautomation']
IRealTimeFeedSimulator._methods_ = [
    COMMETHOD(['propget', helpstring(u'The feature layer used to simulate the real-time feed. This must be a point or line feature layer.')], HRESULT, 'FeatureLayer',
              ( ['retval', 'out'], POINTER(POINTER(IFeatureLayer)), 'ppSimulationData' )),
    COMMETHOD(['propputref', helpstring(u'The feature layer used to simulate the real-time feed. This must be a point or line feature layer.')], HRESULT, 'FeatureLayer',
              ( ['in'], POINTER(IFeatureLayer), 'ppSimulationData' )),
    COMMETHOD(['propget', helpstring(u'Indicates if a fixed time interval is used. If false, use a data-driven time interval. Defaults to true.')], HRESULT, 'FixedTime',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pFixed' )),
    COMMETHOD(['propput', helpstring(u'Indicates if a fixed time interval is used. If false, use a data-driven time interval. Defaults to true.')], HRESULT, 'FixedTime',
              ( ['in'], VARIANT_BOOL, 'pFixed' )),
    COMMETHOD(['propget', helpstring(u'The time increment, in seconds, for the simulated feed. Defaults to 5 seconds.')], HRESULT, 'TimeIncrement',
              ( ['retval', 'out'], POINTER(c_double), 'pIncrement' )),
    COMMETHOD(['propput', helpstring(u'The time increment, in seconds, for the simulated feed. Defaults to 5 seconds.')], HRESULT, 'TimeIncrement',
              ( ['in'], c_double, 'pIncrement' )),
    COMMETHOD(['propget', helpstring(u"The name of the field used for a data-driven time interval. Defaults to 'TIME'.")], HRESULT, 'TimeField',
              ( ['retval', 'out'], POINTER(BSTR), 'pFieldName' )),
    COMMETHOD(['propput', helpstring(u"The name of the field used for a data-driven time interval. Defaults to 'TIME'.")], HRESULT, 'TimeField',
              ( ['in'], BSTR, 'pFieldName' )),
    COMMETHOD(['propget', helpstring(u'A factor used to adjust the data-driven time interval. The factor is multiplied by each value in the TimeField. Defaults to 1.0.')], HRESULT, 'TimeFactor',
              ( ['retval', 'out'], POINTER(c_double), 'pFactor' )),
    COMMETHOD(['propput', helpstring(u'A factor used to adjust the data-driven time interval. The factor is multiplied by each value in the TimeField. Defaults to 1.0.')], HRESULT, 'TimeFactor',
              ( ['in'], c_double, 'pFactor' )),
]
################################################################
## code template for IRealTimeFeedSimulator implementation
##class IRealTimeFeedSimulator_Impl(object):
##    def _get(self):
##        u'Indicates if a fixed time interval is used. If false, use a data-driven time interval. Defaults to true.'
##        #return pFixed
##    def _set(self, pFixed):
##        u'Indicates if a fixed time interval is used. If false, use a data-driven time interval. Defaults to true.'
##    FixedTime = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u"The name of the field used for a data-driven time interval. Defaults to 'TIME'."
##        #return pFieldName
##    def _set(self, pFieldName):
##        u"The name of the field used for a data-driven time interval. Defaults to 'TIME'."
##    TimeField = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The time increment, in seconds, for the simulated feed. Defaults to 5 seconds.'
##        #return pIncrement
##    def _set(self, pIncrement):
##        u'The time increment, in seconds, for the simulated feed. Defaults to 5 seconds.'
##    TimeIncrement = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'A factor used to adjust the data-driven time interval. The factor is multiplied by each value in the TimeField. Defaults to 1.0.'
##        #return pFactor
##    def _set(self, pFactor):
##        u'A factor used to adjust the data-driven time interval. The factor is multiplied by each value in the TimeField. Defaults to 1.0.'
##    TimeFactor = property(_get, _set, doc = _set.__doc__)
##
##    def FeatureLayer(self, ppSimulationData):
##        u'The feature layer used to simulate the real-time feed. This must be a point or line feature layer.'
##        #return 
##

class ISpatialBookmark(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a spatial bookmark.'
    _iid_ = GUID('{EE53528B-41C9-11D1-880A-080009EC732A}')
    _idlflags_ = ['oleautomation']
class IFeatureBookmark(ISpatialBookmark):
    _case_insensitive_ = True
    u'Provides access to members that control a feature bookmark.'
    _iid_ = GUID('{3036D35F-EDE5-11D0-87FE-080009EC732A}')
    _idlflags_ = ['oleautomation']
ISpatialBookmark._methods_ = [
    COMMETHOD(['propget', helpstring(u'Type of the bookmark.')], HRESULT, 'BookmarkType',
              ( ['retval', 'out'], POINTER(BSTR), 'Type' )),
    COMMETHOD(['propget', helpstring(u'Name of the bookmark.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'Name of the bookmark.')], HRESULT, 'Name',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD([helpstring(u'Zooms to the bookmark.')], HRESULT, 'ZoomTo',
              ( ['in'], POINTER(IMap), 'Map' )),
]
################################################################
## code template for ISpatialBookmark implementation
##class ISpatialBookmark_Impl(object):
##    def ZoomTo(self, Map):
##        u'Zooms to the bookmark.'
##        #return 
##
##    @property
##    def BookmarkType(self):
##        u'Type of the bookmark.'
##        #return Type
##
##    def _get(self):
##        u'Name of the bookmark.'
##        #return Name
##    def _set(self, Name):
##        u'Name of the bookmark.'
##    Name = property(_get, _set, doc = _set.__doc__)
##

IFeatureBookmark._methods_ = [
    COMMETHOD(['propget', helpstring(u'Feature id.')], HRESULT, 'FeatureId',
              ( ['retval', 'out'], POINTER(c_int), 'FID' )),
    COMMETHOD(['propput', helpstring(u'Feature id.')], HRESULT, 'FeatureId',
              ( ['in'], c_int, 'FID' )),
    COMMETHOD(['propget', helpstring(u'Feature class.')], HRESULT, 'FeatureClass',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClass)), 'FeatureClass' )),
    COMMETHOD(['propput', helpstring(u'Feature class.')], HRESULT, 'FeatureClass',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClass), 'FeatureClass' )),
    COMMETHOD([helpstring(u'Pans to the feature on the map display.')], HRESULT, 'PanTo',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' )),
    COMMETHOD([helpstring(u'Flashes the feature on the map display.')], HRESULT, 'Flash',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' )),
    COMMETHOD([helpstring(u'Draws the feature on the map display.')], HRESULT, 'Draw',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' )),
]
################################################################
## code template for IFeatureBookmark implementation
##class IFeatureBookmark_Impl(object):
##    def _get(self):
##        u'Feature id.'
##        #return FID
##    def _set(self, FID):
##        u'Feature id.'
##    FeatureId = property(_get, _set, doc = _set.__doc__)
##
##    def Flash(self, Display):
##        u'Flashes the feature on the map display.'
##        #return 
##
##    def PanTo(self, Display):
##        u'Pans to the feature on the map display.'
##        #return 
##
##    def Draw(self, Display):
##        u'Draws the feature on the map display.'
##        #return 
##
##    def _get(self):
##        u'Feature class.'
##        #return FeatureClass
##    def _set(self, FeatureClass):
##        u'Feature class.'
##    FeatureClass = property(_get, _set, doc = _set.__doc__)
##

class IMapServerObjects3(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to core objects contained within the map document.'
    _iid_ = GUID('{FBF3935D-72DA-43A3-AFC0-56F124E30773}')
    _idlflags_ = ['oleautomation']
class IPageLayout(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the Page Layout.'
    _iid_ = GUID('{DD94D76A-836D-11D0-87EC-080009EC732A}')
    _idlflags_ = ['oleautomation']
class IImageDisplay(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Image Display Interface.'
    _iid_ = GUID('{725221DE-7D6B-462D-9CDF-1FE22EE39EB6}')
    _idlflags_ = ['oleautomation']
IMapServerObjects3._methods_ = [
    COMMETHOD(['propget', helpstring(u'The layer specified by the map name and standalone table ID. If the mapName is blank, the default map (active data frame) will be assumed.')], HRESULT, 'StandaloneTableID',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable), 'pTable' ),
              ( ['retval', 'out'], POINTER(c_int), 'ID' )),
    COMMETHOD(['propget', helpstring(u'The table specified by the map name and table ID. If the mapName is blank, the default map (active data frame) will be assumed.')], HRESULT, 'StandaloneTable',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], c_int, 'StandaloneTableID' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable)), 'standaloneTableObject' )),
    COMMETHOD(['propget', helpstring(u'The layer specified by the map name and layer ID. If the mapName is blank, the default map (active data frame) will be assumed.')], HRESULT, 'LayerID',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], POINTER(ILayer), 'pLayer' ),
              ( ['retval', 'out'], POINTER(c_int), 'ID' )),
    COMMETHOD(['propget', helpstring(u'The map corresponding to the specified map name. Pass in a blank string for mapName to get the default map (active data frame).')], HRESULT, 'Map',
              ( ['in'], BSTR, 'MapName' ),
              ( ['retval', 'out'], POINTER(POINTER(IMap)), 'mapObject' )),
    COMMETHOD(['propget', helpstring(u'The layer specified by the map name and layer ID. If the mapName is blank, the default map (active data frame) will be assumed.')], HRESULT, 'Layer',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], c_int, 'LayerID' ),
              ( ['retval', 'out'], POINTER(POINTER(ILayer)), 'layerObject' )),
    COMMETHOD(['propget', helpstring(u'The page layout object for the current map document.')], HRESULT, 'PageLayout',
              ( ['retval', 'out'], POINTER(POINTER(IPageLayout)), 'pageLayoutObject' )),
    COMMETHOD(['propget', helpstring(u'The thumbnail stored in the map document.')], HRESULT, 'Thumbnail',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IPictureDisp)), 'Picture' )),
    COMMETHOD([helpstring(u'Updates the server info based on the current state of the underlying fine-grained objects.')], HRESULT, 'RefreshServerObjects'),
    COMMETHOD([helpstring(u'Applies the current state of the map description to the map server object.')], HRESULT, 'ApplyMapDescription',
              ( ['in'], POINTER(IMapDescription), 'MapDescription' ),
              ( ['in'], POINTER(IImageDisplay), 'mapDisplay' )),
]
################################################################
## code template for IMapServerObjects3 implementation
##class IMapServerObjects3_Impl(object):
##    @property
##    def Map(self, MapName):
##        u'The map corresponding to the specified map name. Pass in a blank string for mapName to get the default map (active data frame).'
##        #return mapObject
##
##    @property
##    def Layer(self, MapName, LayerID):
##        u'The layer specified by the map name and layer ID. If the mapName is blank, the default map (active data frame) will be assumed.'
##        #return layerObject
##
##    @property
##    def StandaloneTableID(self, MapName, pTable):
##        u'The layer specified by the map name and standalone table ID. If the mapName is blank, the default map (active data frame) will be assumed.'
##        #return ID
##
##    @property
##    def PageLayout(self):
##        u'The page layout object for the current map document.'
##        #return pageLayoutObject
##
##    def RefreshServerObjects(self):
##        u'Updates the server info based on the current state of the underlying fine-grained objects.'
##        #return 
##
##    def ApplyMapDescription(self, MapDescription, mapDisplay):
##        u'Applies the current state of the map description to the map server object.'
##        #return 
##
##    @property
##    def LayerID(self, MapName, pLayer):
##        u'The layer specified by the map name and layer ID. If the mapName is blank, the default map (active data frame) will be assumed.'
##        #return ID
##
##    @property
##    def StandaloneTable(self, MapName, StandaloneTableID):
##        u'The table specified by the map name and table ID. If the mapName is blank, the default map (active data frame) will be assumed.'
##        #return standaloneTableObject
##
##    @property
##    def Thumbnail(self):
##        u'The thumbnail stored in the map document.'
##        #return Picture
##


# values for enumeration 'esriBasicOverposterWeight'
esriNoWeight = 0
esriLowWeight = 1
esriMediumWeight = 2
esriHighWeight = 3
esriBasicOverposterWeight = c_int # enum

# values for enumeration 'dimError'
DIM_E_CONSTRUCTOR_TOOFEW_VERTICES = -2147220991
DIM_E_CONSTRUCTOR_TOOMANY_VERTICES = -2147220990
DIM_E_UNSUPPORTED_VERSION = -2147220989
dimError = c_int # enum
class ILegend2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to additional members that control a legend.'
    _iid_ = GUID('{15ABE7F6-49E8-4012-BE72-D14E5A755ACE}')
    _idlflags_ = ['oleautomation']
class ILegendFormat(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control formatting information for a legend.'
    _iid_ = GUID('{52AA5BC1-CB21-11D0-87F9-080009EC732A}')
    _idlflags_ = ['oleautomation']
class ILegendItem(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control how a layer appears in a legend.  Can be stored in a style.'
    _iid_ = GUID('{52AA5BC0-CB21-11D0-87F9-080009EC732A}')
    _idlflags_ = ['oleautomation']
ILegend2._methods_ = [
    COMMETHOD(['propget', helpstring(u'The parent map.')], HRESULT, 'Map',
              ( ['retval', 'out'], POINTER(POINTER(IMap)), 'Map' )),
    COMMETHOD(['propputref', helpstring(u'The parent map.')], HRESULT, 'Map',
              ( ['in'], POINTER(IMap), 'Map' )),
    COMMETHOD(['propget', helpstring(u'Name of the map surround.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'Name of the map surround.')], HRESULT, 'Name',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'Icon used to represent the map surround.')], HRESULT, 'Icon',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE), 'hIcon' )),
    COMMETHOD([helpstring(u'Returns the bounds of the map surround.')], HRESULT, 'QueryBounds',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'oldBounds' ),
              ( [], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'newBounds' )),
    COMMETHOD([helpstring(u'Adjusts the map surround to fit the bounds.  The changed argument indicates whether the size of the map surround was changed.')], HRESULT, 'FitToBounds',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'Bounds' ),
              ( ['out'], POINTER(VARIANT_BOOL), 'changed' )),
    COMMETHOD([helpstring(u'Used to batch operations together to minimize notifications.')], HRESULT, 'DelayEvents',
              ( ['in'], VARIANT_BOOL, 'delay' )),
    COMMETHOD([helpstring(u'Makes sure the latest updates are refected the next time the Map Surround is drawn.')], HRESULT, 'Refresh'),
    COMMETHOD([helpstring(u'Draws the map surround into the specified display bounds.')], HRESULT, 'Draw',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'TrackCancel' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'Bounds' )),
    COMMETHOD(['propget', helpstring(u'The formatting options for the legend (can be stored in the style gallery).')], HRESULT, 'Format',
              ( ['retval', 'out'], POINTER(POINTER(ILegendFormat)), 'LegendFormat' )),
    COMMETHOD(['propputref', helpstring(u'The formatting options for the legend (can be stored in the style gallery).')], HRESULT, 'Format',
              ( ['in'], POINTER(ILegendFormat), 'LegendFormat' )),
    COMMETHOD(['propget', helpstring(u'Title.')], HRESULT, 'Title',
              ( ['retval', 'out'], POINTER(BSTR), 'Title' )),
    COMMETHOD(['propput', helpstring(u'Title.')], HRESULT, 'Title',
              ( ['in'], BSTR, 'Title' )),
    COMMETHOD(['propget', helpstring(u'Indicates if a new item should be added when a new layer is added to the map.')], HRESULT, 'AutoAdd',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'AutoAdd' )),
    COMMETHOD(['propput', helpstring(u'Indicates if a new item should be added when a new layer is added to the map.')], HRESULT, 'AutoAdd',
              ( ['in'], VARIANT_BOOL, 'AutoAdd' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the legend items should be kept in the same order as the layers.')], HRESULT, 'AutoReorder',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'AutoReorder' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the legend items should be kept in the same order as the layers.')], HRESULT, 'AutoReorder',
              ( ['in'], VARIANT_BOOL, 'AutoReorder' )),
    COMMETHOD(['propget', helpstring(u'Indicates if items should be shown only when associated layers are visible.')], HRESULT, 'AutoVisibility',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'AutoVisibility' )),
    COMMETHOD(['propput', helpstring(u'Indicates if items should be shown only when associated layers are visible.')], HRESULT, 'AutoVisibility',
              ( ['in'], VARIANT_BOOL, 'AutoVisibility' )),
    COMMETHOD(['propget', helpstring(u'Reserved for future use.')], HRESULT, 'FlowRight',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Reserved for future use.')], HRESULT, 'FlowRight',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Number of items in the legend.')], HRESULT, 'ItemCount',
              ( ['retval', 'out'], POINTER(c_int), 'numItems' )),
    COMMETHOD(['propget', helpstring(u'The specified item from the legend.')], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(ILegendItem)), 'Item' )),
    COMMETHOD([helpstring(u'Adds a new item to the legend (to the end of the  list).')], HRESULT, 'AddItem',
              ( ['in'], POINTER(ILegendItem), 'Item' )),
    COMMETHOD([helpstring(u'Inserts a new item into the legend (at the location specified by index).')], HRESULT, 'InsertItem',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(ILegendItem), 'Item' )),
    COMMETHOD([helpstring(u'Removes the specified item from the legend.')], HRESULT, 'RemoveItem',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all items from the legend.')], HRESULT, 'ClearItems'),
    COMMETHOD(['propget', helpstring(u'The default legend item for the specified layer.')], HRESULT, 'DefaultLegendItem',
              ( ['in'], POINTER(ILayer), 'Layer' ),
              ( ['retval', 'out'], POINTER(POINTER(ILegendItem)), 'Item' )),
    COMMETHOD(['propget', helpstring(u'Indicates if symbols are scaled for the layer.')], HRESULT, 'ScaleSymbols',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Scale' )),
    COMMETHOD(['propput', helpstring(u'Indicates if symbols are scaled for the layer.')], HRESULT, 'ScaleSymbols',
              ( ['in'], VARIANT_BOOL, 'Scale' )),
    COMMETHOD([helpstring(u'Adjust the item settings so that the legend contains the specified number of columns.')], HRESULT, 'AdjustColumns',
              ( ['in'], c_int, 'Columns' )),
]
################################################################
## code template for ILegend2 implementation
##class ILegend2_Impl(object):
##    def _get(self):
##        u'Indicates if a new item should be added when a new layer is added to the map.'
##        #return AutoAdd
##    def _set(self, AutoAdd):
##        u'Indicates if a new item should be added when a new layer is added to the map.'
##    AutoAdd = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Title.'
##        #return Title
##    def _set(self, Title):
##        u'Title.'
##    Title = property(_get, _set, doc = _set.__doc__)
##
##    def DelayEvents(self, delay):
##        u'Used to batch operations together to minimize notifications.'
##        #return 
##
##    def _get(self):
##        u'Indicates if the legend items should be kept in the same order as the layers.'
##        #return AutoReorder
##    def _set(self, AutoReorder):
##        u'Indicates if the legend items should be kept in the same order as the layers.'
##    AutoReorder = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def DefaultLegendItem(self, Layer):
##        u'The default legend item for the specified layer.'
##        #return Item
##
##    def Map(self, Map):
##        u'The parent map.'
##        #return 
##
##    def Draw(self, Display, TrackCancel, Bounds):
##        u'Draws the map surround into the specified display bounds.'
##        #return 
##
##    def Format(self, LegendFormat):
##        u'The formatting options for the legend (can be stored in the style gallery).'
##        #return 
##
##    def AdjustColumns(self, Columns):
##        u'Adjust the item settings so that the legend contains the specified number of columns.'
##        #return 
##
##    @property
##    def ItemCount(self):
##        u'Number of items in the legend.'
##        #return numItems
##
##    @property
##    def Icon(self):
##        u'Icon used to represent the map surround.'
##        #return hIcon
##
##    def _get(self):
##        u'Name of the map surround.'
##        #return Name
##    def _set(self, Name):
##        u'Name of the map surround.'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def ClearItems(self):
##        u'Removes all items from the legend.'
##        #return 
##
##    def _get(self):
##        u'Reserved for future use.'
##        #return flag
##    def _set(self, flag):
##        u'Reserved for future use.'
##    FlowRight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if symbols are scaled for the layer.'
##        #return Scale
##    def _set(self, Scale):
##        u'Indicates if symbols are scaled for the layer.'
##    ScaleSymbols = property(_get, _set, doc = _set.__doc__)
##
##    def Refresh(self):
##        u'Makes sure the latest updates are refected the next time the Map Surround is drawn.'
##        #return 
##
##    @property
##    def Item(self, Index):
##        u'The specified item from the legend.'
##        #return Item
##
##    def FitToBounds(self, Display, Bounds):
##        u'Adjusts the map surround to fit the bounds.  The changed argument indicates whether the size of the map surround was changed.'
##        #return changed
##
##    def InsertItem(self, Index, Item):
##        u'Inserts a new item into the legend (at the location specified by index).'
##        #return 
##
##    def AddItem(self, Item):
##        u'Adds a new item to the legend (to the end of the  list).'
##        #return 
##
##    def RemoveItem(self, Index):
##        u'Removes the specified item from the legend.'
##        #return 
##
##    def QueryBounds(self, Display, oldBounds, newBounds):
##        u'Returns the bounds of the map surround.'
##        #return 
##
##    def _get(self):
##        u'Indicates if items should be shown only when associated layers are visible.'
##        #return AutoVisibility
##    def _set(self, AutoVisibility):
##        u'Indicates if items should be shown only when associated layers are visible.'
##    AutoVisibility = property(_get, _set, doc = _set.__doc__)
##

class IDataSourceHelperStandaloneTable(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that help repair/replace data sources at the Table Level.'
    _iid_ = GUID('{5C5A6B80-F0A3-4478-B8D6-4EEA1A1A121A}')
    _idlflags_ = ['oleautomation']
class IStandaloneTable(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a standalone table.'
    _iid_ = GUID('{FFC6B179-E3EC-11D3-A096-00C04F6BC626}')
    _idlflags_ = ['oleautomation']
IDataSourceHelperStandaloneTable._methods_ = [
    COMMETHOD([helpstring(u"Replaces the specified standalone table's IName with the given IName.")], HRESULT, 'ReplaceName',
              ( ['in'], POINTER(IStandaloneTable), 'pStandaloneTable' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName), 'pName' ),
              ( ['in'], VARIANT_BOOL, 'validate' )),
    COMMETHOD([helpstring(u"Replaces the table's workspace path name with the given workspace path name; Also does find and replace of parts of the workspace path name.")], HRESULT, 'FindAndReplaceWorkspaceNamePath',
              ( ['in'], POINTER(IStandaloneTable), 'pStandaloneTable' ),
              ( ['in'], BSTR, 'oldWorkspaceName' ),
              ( ['in'], BSTR, 'newWorkspaceName' ),
              ( ['in'], VARIANT_BOOL, 'validate' )),
]
################################################################
## code template for IDataSourceHelperStandaloneTable implementation
##class IDataSourceHelperStandaloneTable_Impl(object):
##    def ReplaceName(self, pStandaloneTable, pName, validate):
##        u"Replaces the specified standalone table's IName with the given IName."
##        #return 
##
##    def FindAndReplaceWorkspaceNamePath(self, pStandaloneTable, oldWorkspaceName, newWorkspaceName, validate):
##        u"Replaces the table's workspace path name with the given workspace path name; Also does find and replace of parts of the workspace path name."
##        #return 
##

class IMapServerGroupLayer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to map server sublayers.'
    _iid_ = GUID('{C2BB4D11-0DFD-4E0F-BEDC-3091E6D6D11E}')
    _idlflags_ = ['oleautomation']
IMapServerGroupLayer._methods_ = [
    COMMETHOD([helpstring(u'Shows/ hides the layers given layer ids.')], HRESULT, 'ShowLayers',
              ( ['in'], VARIANT_BOOL, 'Show' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'layerIds' )),
    COMMETHOD(['propget', helpstring(u'Number of layers in the collection.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'LayerCount' )),
    COMMETHOD(['propget', helpstring(u'Layer in the collection at the specified index.')], HRESULT, 'Layer',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(ILayer)), 'Layer' )),
]
################################################################
## code template for IMapServerGroupLayer implementation
##class IMapServerGroupLayer_Impl(object):
##    @property
##    def Count(self):
##        u'Number of layers in the collection.'
##        #return LayerCount
##
##    @property
##    def Layer(self, Index):
##        u'Layer in the collection at the specified index.'
##        #return Layer
##
##    def ShowLayers(self, Show, layerIds):
##        u'Shows/ hides the layers given layer ids.'
##        #return 
##

class IAnnotateMap(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the Labeling (annotation) of a map.'
    _iid_ = GUID('{8C439003-14EC-11D2-A27E-080009B6F22B}')
    _idlflags_ = ['oleautomation']
class IAnnotateProperties(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Indicator interface for annotation properties.'
    _iid_ = GUID('{01004141-0D1C-11D2-A26F-080009B6F22B}')
    _idlflags_ = ['oleautomation']
class IAnnotateMapProperties(IAnnotateProperties):
    _case_insensitive_ = True
    u'Provides access to members that control the annotate map properties.'
    _iid_ = GUID('{027F41B3-0F77-11D2-A270-080009B6F22B}')
    _idlflags_ = ['oleautomation']
IAnnotateMap._methods_ = [
    COMMETHOD(['propget', helpstring(u'Name of the engine that will create the labels ( annotation).')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propget', helpstring(u'The UID that is expected for feature layer properties.')], HRESULT, 'FeatureLayerPropertiesID',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IUID)), 'uid' )),
    COMMETHOD([helpstring(u'Labels feature layers based on the properties given.')], HRESULT, 'Label',
              ( ['in'], POINTER(IAnnotateMapProperties), 'annoMapCmdProps' ),
              ( ['in'], POINTER(IMap), 'Map' ),
              ( ['in', 'optional'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'TrackCancel', 0 )),
    COMMETHOD([helpstring(u'Draws labels for feature layers based on the properties given.')], HRESULT, 'Draw',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], POINTER(IAnnotateMapProperties), 'annoMapCmdProps' ),
              ( ['in'], POINTER(IMap), 'Map' ),
              ( ['in', 'optional'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'TrackCancel', 0 )),
]
################################################################
## code template for IAnnotateMap implementation
##class IAnnotateMap_Impl(object):
##    def Draw(self, Display, annoMapCmdProps, Map, TrackCancel):
##        u'Draws labels for feature layers based on the properties given.'
##        #return 
##
##    def Label(self, annoMapCmdProps, Map, TrackCancel):
##        u'Labels feature layers based on the properties given.'
##        #return 
##
##    @property
##    def Name(self):
##        u'Name of the engine that will create the labels ( annotation).'
##        #return Name
##
##    @property
##    def FeatureLayerPropertiesID(self):
##        u'The UID that is expected for feature layer properties.'
##        #return uid
##

class IBackground(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control frame backgrounds.'
    _iid_ = GUID('{E4240309-DD41-11D2-B868-00600802E603}')
    _idlflags_ = ['oleautomation']
class ISymbolBackground(IBackground):
    _case_insensitive_ = True
    u'Provides access to members that control the SymbolBackground object.'
    _iid_ = GUID('{4FD8CBB7-E13B-11D2-B868-00600802E603}')
    _idlflags_ = ['oleautomation']
IBackground._methods_ = [
    COMMETHOD(['propget', helpstring(u'Name of the frame background.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'Name of the frame background.')], HRESULT, 'Name',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'Gap between the frame background and the subject in points.')], HRESULT, 'Gap',
              ( ['retval', 'out'], POINTER(c_double), 'Gap' )),
    COMMETHOD(['propput', helpstring(u'Gap between the frame background and the subject in points.')], HRESULT, 'Gap',
              ( ['in'], c_double, 'Gap' )),
    COMMETHOD([helpstring(u'Bounding rectangle of the geometry including area covered by the border.')], HRESULT, 'QueryBounds',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'Geometry' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'Bounds' )),
    COMMETHOD([helpstring(u'Geometry used to draw the frame background.')], HRESULT, 'GetGeometry',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'Shape' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry)), 'Geometry' )),
    COMMETHOD([helpstring(u'Draws the background into the given display object.')], HRESULT, 'Draw',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'Geometry' )),
]
################################################################
## code template for IBackground implementation
##class IBackground_Impl(object):
##    def Draw(self, Display, Geometry):
##        u'Draws the background into the given display object.'
##        #return 
##
##    def GetGeometry(self, Display, Shape):
##        u'Geometry used to draw the frame background.'
##        #return Geometry
##
##    def QueryBounds(self, Display, Geometry, Bounds):
##        u'Bounding rectangle of the geometry including area covered by the border.'
##        #return 
##
##    def _get(self):
##        u'Name of the frame background.'
##        #return Name
##    def _set(self, Name):
##        u'Name of the frame background.'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Gap between the frame background and the subject in points.'
##        #return Gap
##    def _set(self, Gap):
##        u'Gap between the frame background and the subject in points.'
##    Gap = property(_get, _set, doc = _set.__doc__)
##

ISymbolBackground._methods_ = [
    COMMETHOD(['propget', helpstring(u'Symbol used to draw the background.')], HRESULT, 'FillSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IFillSymbol)), 'Symbol' )),
    COMMETHOD(['propput', helpstring(u'Symbol used to draw the background.')], HRESULT, 'FillSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IFillSymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'Amount of corner rounding.  0 = fully square.  100 = fully round.')], HRESULT, 'CornerRounding',
              ( ['retval', 'out'], POINTER(c_short), 'rounding' )),
    COMMETHOD(['propput', helpstring(u'Amount of corner rounding.  0 = fully square.  100 = fully round.')], HRESULT, 'CornerRounding',
              ( ['in'], c_short, 'rounding' )),
]
################################################################
## code template for ISymbolBackground implementation
##class ISymbolBackground_Impl(object):
##    def _get(self):
##        u'Amount of corner rounding.  0 = fully square.  100 = fully round.'
##        #return rounding
##    def _set(self, rounding):
##        u'Amount of corner rounding.  0 = fully square.  100 = fully round.'
##    CornerRounding = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Symbol used to draw the background.'
##        #return Symbol
##    def _set(self, Symbol):
##        u'Symbol used to draw the background.'
##    FillSymbol = property(_get, _set, doc = _set.__doc__)
##

class ICalcRendererValues(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that are used to calculate the renderer statistics required for some uses of a ChartRenderer.'
    _iid_ = GUID('{4B62F73E-0502-11D4-9F7C-00C04F6BC709}')
    _idlflags_ = ['oleautomation']
class ICalcRendererValues2(ICalcRendererValues):
    _case_insensitive_ = True
    u'Provides access to members that are used to calculate the renderer statistics required for some uses of a ChartRenderer.'
    _iid_ = GUID('{B5E535A7-A9CE-4678-B554-E2E96B634B53}')
    _idlflags_ = ['oleautomation']
class IFeatureRenderer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control functionality common to all feature renderers.'
    _iid_ = GUID('{40A9E884-5533-11D0-98BE-00805F7CED21}')
    _idlflags_ = ['oleautomation']
ICalcRendererValues._methods_ = [
    COMMETHOD([helpstring(u'Sets data for calculation.')], HRESULT, 'SetData',
              ( ['in'], POINTER(IFeatureLayer), 'Layer' ),
              ( ['in'], POINTER(IFeatureRenderer), 'Renderer' )),
    COMMETHOD([helpstring(u'Calculates minimum and maximum values.')], HRESULT, 'CalcMinMax',
              ( ['out'], POINTER(c_double), 'MinValue' ),
              ( ['out'], POINTER(c_double), 'maxValue' )),
    COMMETHOD([helpstring(u'Sets object to state where values will be recalculated.')], HRESULT, 'SetDirty'),
    COMMETHOD([helpstring(u'Manually sets minimum and maximum values.')], HRESULT, 'SetMinMax',
              ( [], c_double, 'MinValue' ),
              ( [], c_double, 'maxValue' )),
    COMMETHOD([helpstring(u'Gets totals for all fields.')], HRESULT, 'GetFieldTotals',
              ( ['retval', 'out'], POINTER(VARIANT), 'doubleArrayTotals' )),
]
################################################################
## code template for ICalcRendererValues implementation
##class ICalcRendererValues_Impl(object):
##    def SetDirty(self):
##        u'Sets object to state where values will be recalculated.'
##        #return 
##
##    def CalcMinMax(self):
##        u'Calculates minimum and maximum values.'
##        #return MinValue, maxValue
##
##    def SetMinMax(self, MinValue, maxValue):
##        u'Manually sets minimum and maximum values.'
##        #return 
##
##    def GetFieldTotals(self):
##        u'Gets totals for all fields.'
##        #return doubleArrayTotals
##
##    def SetData(self, Layer, Renderer):
##        u'Sets data for calculation.'
##        #return 
##

ICalcRendererValues2._methods_ = [
    COMMETHOD([helpstring(u'Calculates minimum and maximum values.')], HRESULT, 'CalcMinMaxExt',
              ( ['in'], VARIANT_BOOL, 'positiveValuesOnly' ),
              ( ['out'], POINTER(c_double), 'MinValue' ),
              ( ['out'], POINTER(c_double), 'maxValue' )),
]
################################################################
## code template for ICalcRendererValues2 implementation
##class ICalcRendererValues2_Impl(object):
##    def CalcMinMaxExt(self, positiveValuesOnly):
##        u'Calculates minimum and maximum values.'
##        #return MinValue, maxValue
##

class IExportInfoGenerator(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that help generate export information.'
    _iid_ = GUID('{520C94FD-8858-4EAD-B72A-CB36515BDAEE}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'esriViewDrawPhase'
esriViewNone = 0
esriViewBackground = 1
esriViewGeography = 2
esriViewGeoSelection = 4
esriViewGraphics = 8
esriViewGraphicSelection = 16
esriViewForeground = 32
esriViewInitialized = 64
esriViewAll = 255
esriViewDrawPhase = c_int # enum
IExportInfoGenerator._methods_ = [
    COMMETHOD([helpstring(u'Generates export information about text that is starting to draw.')], HRESULT, 'BeginText',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'pDisplay' ),
              ( ['in'], c_int, 'Type' ),
              ( ['in'], c_int, 'Kerning' ),
              ( ['in'], c_double, 'Tracking' ),
              ( ['in'], c_double, 'WidthScale' ),
              ( ['in'], c_double, 'WordSpace' ),
              ( ['in'], c_double, 'LineLeading' ),
              ( ['in'], BSTR, 'Text' )),
    COMMETHOD([helpstring(u'Generates export information that a started text has ended.')], HRESULT, 'EndText',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'pDisplay' )),
    COMMETHOD([helpstring(u'Generates export information for a CMYK-color.')], HRESULT, 'SetCmykColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'pDisplay' ),
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_COLOR, 'cmykColor' ),
              ( [], VARIANT_BOOL, 'SpotColor' ),
              ( [], c_int, 'ColorType' )),
    COMMETHOD([helpstring(u'Generates export information that a layer is starting to draw. Adds the comment to the information.')], HRESULT, 'BeginLayer',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'pDisplay' ),
              ( ['in'], BSTR, 'Comment' )),
    COMMETHOD([helpstring(u'Generates export information that a layer is starting to draw. Adds the layer name to the information.')], HRESULT, 'BeginLayerWithName',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'pDisplay' ),
              ( ['in'], POINTER(ILayer), 'pLayer' )),
    COMMETHOD([helpstring(u'Generates export information that a layer is starting to draw. Adds the layer name and draw phase to the information.')], HRESULT, 'BeginLayerWithNameAndPhase',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'pDisplay' ),
              ( ['in'], POINTER(ILayer), 'pLayer' ),
              ( ['in'], esriViewDrawPhase, 'viewDrawPhase' )),
    COMMETHOD([helpstring(u'Generates export information that a layer finished to draw.')], HRESULT, 'EndLayer',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'pDisplay' )),
    COMMETHOD([helpstring(u'Generates export information that a group is starting to draw.')], HRESULT, 'BeginGroup',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'pDisplay' ),
              ( ['in'], BSTR, 'Comment' )),
    COMMETHOD([helpstring(u'Generates export information that a group finished to draw.')], HRESULT, 'EndGroup',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'pDisplay' )),
    COMMETHOD([helpstring(u'Generates export information that a map is starting to draw.')], HRESULT, 'BeginMap',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'pDisplay' ),
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE, 'hDC' ),
              ( ['in'], POINTER(IMap), 'pMap' )),
    COMMETHOD([helpstring(u'Generates export information that a map finished to draw.')], HRESULT, 'EndMap',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE, 'hDC' )),
    COMMETHOD([helpstring(u'Generates export information that a page layout is starting to draw.')], HRESULT, 'BeginPageLayout',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE, 'hDC' ),
              ( ['in'], c_int, 'FocusMap' )),
    COMMETHOD([helpstring(u'Generates export information that a page layout finished to draw.')], HRESULT, 'EndPageLayout',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE, 'hDC' )),
]
################################################################
## code template for IExportInfoGenerator implementation
##class IExportInfoGenerator_Impl(object):
##    def BeginLayerWithName(self, pDisplay, pLayer):
##        u'Generates export information that a layer is starting to draw. Adds the layer name to the information.'
##        #return 
##
##    def BeginText(self, pDisplay, Type, Kerning, Tracking, WidthScale, WordSpace, LineLeading, Text):
##        u'Generates export information about text that is starting to draw.'
##        #return 
##
##    def BeginLayer(self, pDisplay, Comment):
##        u'Generates export information that a layer is starting to draw. Adds the comment to the information.'
##        #return 
##
##    def EndLayer(self, pDisplay):
##        u'Generates export information that a layer finished to draw.'
##        #return 
##
##    def EndGroup(self, pDisplay):
##        u'Generates export information that a group finished to draw.'
##        #return 
##
##    def EndText(self, pDisplay):
##        u'Generates export information that a started text has ended.'
##        #return 
##
##    def BeginGroup(self, pDisplay, Comment):
##        u'Generates export information that a group is starting to draw.'
##        #return 
##
##    def EndMap(self, hDC):
##        u'Generates export information that a map finished to draw.'
##        #return 
##
##    def BeginMap(self, pDisplay, hDC, pMap):
##        u'Generates export information that a map is starting to draw.'
##        #return 
##
##    def BeginLayerWithNameAndPhase(self, pDisplay, pLayer, viewDrawPhase):
##        u'Generates export information that a layer is starting to draw. Adds the layer name and draw phase to the information.'
##        #return 
##
##    def BeginPageLayout(self, hDC, FocusMap):
##        u'Generates export information that a page layout is starting to draw.'
##        #return 
##
##    def SetCmykColor(self, pDisplay, cmykColor, SpotColor, ColorType):
##        u'Generates export information for a CMYK-color.'
##        #return 
##
##    def EndPageLayout(self, hDC):
##        u'Generates export information that a page layout finished to draw.'
##        #return 
##

class RasterDiscreteColorRenderer(CoClass):
    u'A raster discrete color renderer.'
    _reg_clsid_ = GUID('{AC874573-D778-4421-B9C6-14557D8BD692}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IRasterDiscreteColorRenderer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to methods that control a raster discrete color renderer.'
    _iid_ = GUID('{7EDA4F65-67E5-4BAB-9916-80AEA4A414C0}')
    _idlflags_ = []
class IRasterRenderer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to methods that define a generic raster renderer.'
    _iid_ = GUID('{6F5322D1-3790-11D2-8D26-0000F8780535}')
    _idlflags_ = ['oleautomation']
class IRasterRenderer2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to additional RasterRenderer methods.'
    _iid_ = GUID('{36695416-2A62-4F24-A97C-5B60F40CF311}')
    _idlflags_ = ['oleautomation']
class IRasterRendererInfo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to methods that define a generic raster renderer.'
    _iid_ = GUID('{2546FEB5-7334-41C7-9160-0B15BA62C809}')
    _idlflags_ = ['oleautomation']
class IRasterDisplayProps(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the raster display properties.'
    _iid_ = GUID('{A6A46058-92F3-11D3-ABA5-0008C73FCA1C}')
    _idlflags_ = ['oleautomation']
class IDisplayTableExchange(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to methods that control the renderer display table.'
    _iid_ = GUID('{56448E92-9EF7-11D4-B286-00508BCDC7C8}')
    _idlflags_ = []
class IRasterRendererColorRamp(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the color ramp of a renderer.'
    _iid_ = GUID('{04402B9E-6136-4BA4-A5F7-50FDBC245D9C}')
    _idlflags_ = ['oleautomation']
class IRasterRendererUpdate(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control updating raster renderers.'
    _iid_ = GUID('{76877C54-C010-4550-A202-BC882196AF40}')
    _idlflags_ = []
RasterDiscreteColorRenderer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterDiscreteColorRenderer, IRasterRenderer, IRasterRenderer2, IRasterRendererInfo, IRasterDisplayProps, IIdentify, ILegendInfo, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayAdmin, IDisplayTableExchange, IRasterRendererColorRamp, IRasterRendererUpdate, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize]

class IHTMLPopupInfo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the HTML popup tool.'
    _iid_ = GUID('{742678BC-AFF5-41DA-A523-36A8BD4E2C8B}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'esriHTMLPopupStyle'
esriHTMLPopupStyleTwoColumnTable = 0
esriHTMLPopupStyleRedirectedHTML = 1
esriHTMLPopupStyleXSLStylesheet = 2
esriHTMLPopupStyle = c_int # enum
IHTMLPopupInfo._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if this layer currently responds to the HTML Popup tool.')], HRESULT, 'HTMLPopupEnabled',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pEnabled' )),
    COMMETHOD(['propput', helpstring(u'Indicates if this layer currently responds to the HTML Popup tool.')], HRESULT, 'HTMLPopupEnabled',
              ( ['in'], VARIANT_BOOL, 'pEnabled' )),
    COMMETHOD(['propget', helpstring(u'Indicates the content formating style for the HTML Popup tool.')], HRESULT, 'HTMLPresentationStyle',
              ( ['retval', 'out'], POINTER(esriHTMLPopupStyle), 'pStyle' )),
    COMMETHOD(['propput', helpstring(u'Indicates the content formating style for the HTML Popup tool.')], HRESULT, 'HTMLPresentationStyle',
              ( ['in'], esriHTMLPopupStyle, 'pStyle' )),
    COMMETHOD(['propget', helpstring(u'Indicates if Field name column will be output to the HTML Popup tool.')], HRESULT, 'HTMLHideFieldNameColumn',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pHide' )),
    COMMETHOD(['propput', helpstring(u'Indicates if Field name column will be output to the HTML Popup tool.')], HRESULT, 'HTMLHideFieldNameColumn',
              ( ['in'], VARIANT_BOOL, 'pHide' )),
    COMMETHOD(['propget', helpstring(u'Indicates the fieldname of the layer that contains the HTML redirect URL values.')], HRESULT, 'HTMLRedirectField',
              ( ['retval', 'out'], POINTER(BSTR), 'pField' )),
    COMMETHOD(['propput', helpstring(u'Indicates the fieldname of the layer that contains the HTML redirect URL values.')], HRESULT, 'HTMLRedirectField',
              ( ['in'], BSTR, 'pField' )),
    COMMETHOD(['propget', helpstring(u'Indicates the text to precede the HTMLRedirectField value for the redirect URL.')], HRESULT, 'HTMLRedirectFieldPrefix',
              ( ['retval', 'out'], POINTER(BSTR), 'pPrefix' )),
    COMMETHOD(['propput', helpstring(u'Indicates the text to precede the HTMLRedirectField value for the redirect URL.')], HRESULT, 'HTMLRedirectFieldPrefix',
              ( ['in'], BSTR, 'pPrefix' )),
    COMMETHOD(['propget', helpstring(u'Indicates the text to follow the HTMLRedirectField value for the redirect URL.')], HRESULT, 'HTMLRedirectFieldSuffix',
              ( ['retval', 'out'], POINTER(BSTR), 'pSufix' )),
    COMMETHOD(['propput', helpstring(u'Indicates the text to follow the HTMLRedirectField value for the redirect URL.')], HRESULT, 'HTMLRedirectFieldSuffix',
              ( ['in'], BSTR, 'pSufix' )),
    COMMETHOD(['propget', helpstring(u'Indicates the content of the XSL stylesheet to parse the feature attributes through.')], HRESULT, 'HTMLXSLStylesheet',
              ( ['retval', 'out'], POINTER(BSTR), 'pStyleSheet' )),
    COMMETHOD(['propput', helpstring(u'Indicates the content of the XSL stylesheet to parse the feature attributes through.')], HRESULT, 'HTMLXSLStylesheet',
              ( ['in'], BSTR, 'pStyleSheet' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to use coded values (rather than literal stored values) for feature values.')], HRESULT, 'HTMLUseCodedDomainValues',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pCodedValues' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to use coded values (rather than literal stored values) for feature values.')], HRESULT, 'HTMLUseCodedDomainValues',
              ( ['in'], VARIANT_BOOL, 'pCodedValues' )),
    COMMETHOD(['propget', helpstring(u'The content is the XML text for the input feature.')], HRESULT, 'HTMLOutput',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeature), 'pFeature' ),
              ( ['retval', 'out'], POINTER(BSTR), 'pHtml' )),
]
################################################################
## code template for IHTMLPopupInfo implementation
##class IHTMLPopupInfo_Impl(object):
##    def _get(self):
##        u'Indicates the text to precede the HTMLRedirectField value for the redirect URL.'
##        #return pPrefix
##    def _set(self, pPrefix):
##        u'Indicates the text to precede the HTMLRedirectField value for the redirect URL.'
##    HTMLRedirectFieldPrefix = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether to use coded values (rather than literal stored values) for feature values.'
##        #return pCodedValues
##    def _set(self, pCodedValues):
##        u'Indicates whether to use coded values (rather than literal stored values) for feature values.'
##    HTMLUseCodedDomainValues = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates the fieldname of the layer that contains the HTML redirect URL values.'
##        #return pField
##    def _set(self, pField):
##        u'Indicates the fieldname of the layer that contains the HTML redirect URL values.'
##    HTMLRedirectField = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates the content of the XSL stylesheet to parse the feature attributes through.'
##        #return pStyleSheet
##    def _set(self, pStyleSheet):
##        u'Indicates the content of the XSL stylesheet to parse the feature attributes through.'
##    HTMLXSLStylesheet = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates the content formating style for the HTML Popup tool.'
##        #return pStyle
##    def _set(self, pStyle):
##        u'Indicates the content formating style for the HTML Popup tool.'
##    HTMLPresentationStyle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates the text to follow the HTMLRedirectField value for the redirect URL.'
##        #return pSufix
##    def _set(self, pSufix):
##        u'Indicates the text to follow the HTMLRedirectField value for the redirect URL.'
##    HTMLRedirectFieldSuffix = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if Field name column will be output to the HTML Popup tool.'
##        #return pHide
##    def _set(self, pHide):
##        u'Indicates if Field name column will be output to the HTML Popup tool.'
##    HTMLHideFieldNameColumn = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if this layer currently responds to the HTML Popup tool.'
##        #return pEnabled
##    def _set(self, pEnabled):
##        u'Indicates if this layer currently responds to the HTML Popup tool.'
##    HTMLPopupEnabled = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def HTMLOutput(self, pFeature):
##        u'The content is the XML text for the input feature.'
##        #return pHtml
##

class IBubbleSeriesProperties(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control bubble series.'
    _iid_ = GUID('{5F6A90CB-4CB1-4799-ACD8-8BAAE27FC2FB}')
    _idlflags_ = ['oleautomation']
class IDataGraphTSymbolProperties(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control properties of the symbols for line graph, scatter plot, or box plot.'
    _iid_ = GUID('{70369858-A2A3-49B5-B9E8-E7CB9CF2FFC4}')
    _idlflags_ = ['oleautomation']
IBubbleSeriesProperties._methods_ = [
    COMMETHOD(['propget', helpstring(u'Properties of the bubble symbol.')], HRESULT, 'SymbolProperties',
              ( ['retval', 'out'], POINTER(POINTER(IDataGraphTSymbolProperties)), 'ppSymbolProps' )),
    COMMETHOD(['propget', helpstring(u'Transparency level.')], HRESULT, 'Transparency',
              ( ['retval', 'out'], POINTER(c_int), 'pValue' )),
    COMMETHOD(['propput', helpstring(u'Transparency level.')], HRESULT, 'Transparency',
              ( ['in'], c_int, 'pValue' )),
    COMMETHOD(['propget', helpstring(u'Properties of normalized Radius.')], HRESULT, 'NormalizedRadius',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'bNormalized' )),
    COMMETHOD(['propput', helpstring(u'Properties of normalized Radius.')], HRESULT, 'NormalizedRadius',
              ( ['in'], VARIANT_BOOL, 'bNormalized' )),
    COMMETHOD([helpstring(u'Set normalized radius min max (percent of Y values).')], HRESULT, 'SetNormalizedRadiusMinMax',
              ( ['in'], c_double, 'minval' ),
              ( ['in'], c_double, 'maxval' )),
    COMMETHOD([helpstring(u'Get normalized radius min max (percent of Y values).')], HRESULT, 'GetNormalizedRadiusMinMax',
              ( ['out'], POINTER(c_double), 'minval' ),
              ( ['out'], POINTER(c_double), 'maxval' )),
]
################################################################
## code template for IBubbleSeriesProperties implementation
##class IBubbleSeriesProperties_Impl(object):
##    def _get(self):
##        u'Properties of normalized Radius.'
##        #return bNormalized
##    def _set(self, bNormalized):
##        u'Properties of normalized Radius.'
##    NormalizedRadius = property(_get, _set, doc = _set.__doc__)
##
##    def SetNormalizedRadiusMinMax(self, minval, maxval):
##        u'Set normalized radius min max (percent of Y values).'
##        #return 
##
##    @property
##    def SymbolProperties(self):
##        u'Properties of the bubble symbol.'
##        #return ppSymbolProps
##
##    def GetNormalizedRadiusMinMax(self):
##        u'Get normalized radius min max (percent of Y values).'
##        #return minval, maxval
##
##    def _get(self):
##        u'Transparency level.'
##        #return pValue
##    def _set(self, pValue):
##        u'Transparency level.'
##    Transparency = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'esriMaplexLinePlacementMethod'
esriMaplexCenteredHorizontalOnLine = 0
esriMaplexCenteredStraightOnLine = 1
esriMaplexCenteredCurvedOnLine = 2
esriMaplexCenteredPerpendicularOnLine = 3
esriMaplexOffsetHorizontalFromLine = 4
esriMaplexOffsetStraightFromLine = 5
esriMaplexOffsetCurvedFromLine = 6
esriMaplexOffsetPerpendicularFromLine = 7
esriMaplexLinePlacementMethod = c_int # enum
class MobileServer(CoClass):
    u'The Mobile Server Object Extension provides functionality for Mobile clients.'
    _reg_clsid_ = GUID('{4C4F3311-D5AF-42DA-8C0A-47D0A0B18193}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IMobileServer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the available Mobile Server Object Extension properties and methods.'
    _iid_ = GUID('{13662C4A-8457-460B-A825-9717D2E2FC22}')
    _idlflags_ = ['oleautomation']
MobileServer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._18F2FC71_6B30_45B9_B101_037A8B868B66_0_10_2.IServerObjectExtension, comtypes.gen._18F2FC71_6B30_45B9_B101_037A8B868B66_0_10_2.IServerObject, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IObjectConstruct, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILogSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IRequestHandler2, IMobileServer, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]

ILayerExtensions._methods_ = [
    COMMETHOD(['propget', helpstring(u'Number of extensions.')], HRESULT, 'ExtensionCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The extension at the specified index.')], HRESULT, 'Extension',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ext' )),
    COMMETHOD([helpstring(u'Adds a new extension.')], HRESULT, 'AddExtension',
              ( ['in'], POINTER(IUnknown), 'ext' )),
    COMMETHOD([helpstring(u'Removes the specified extension.')], HRESULT, 'RemoveExtension',
              ( ['in'], c_int, 'Index' )),
]
################################################################
## code template for ILayerExtensions implementation
##class ILayerExtensions_Impl(object):
##    def AddExtension(self, ext):
##        u'Adds a new extension.'
##        #return 
##
##    def RemoveExtension(self, Index):
##        u'Removes the specified extension.'
##        #return 
##
##    @property
##    def ExtensionCount(self):
##        u'Number of extensions.'
##        #return Count
##
##    @property
##    def Extension(self, Index):
##        u'The extension at the specified index.'
##        #return ext
##

class IFDOGraphicsContainer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the FDO Graphics Container.'
    _iid_ = GUID('{2F9B6441-ED80-498F-B13F-EA057E7F9832}')
    _idlflags_ = ['oleautomation']
class IElement(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the Element.'
    _iid_ = GUID('{9B001319-9ED7-11D0-859E-0800091A2A72}')
    _idlflags_ = ['oleautomation']
class IAnnotationFeature(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the annotation feature.'
    _iid_ = GUID('{E3676992-C682-11D2-8A2A-006097AFF44E}')
    _idlflags_ = ['oleautomation']
class IGroupElement(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the Group element.'
    _iid_ = GUID('{803577D1-F8A3-11D0-83AF-080009B996CC}')
    _idlflags_ = ['oleautomation']
IFDOGraphicsContainer._methods_ = [
    COMMETHOD([helpstring(u'Add a new graphic element to the layer.')], HRESULT, 'AddElement',
              ( ['in'], POINTER(IElement), 'Element' ),
              ( ['in'], c_int, 'zorder' ),
              ( ['out'], POINTER(POINTER(IAnnotationFeature)), 'newAnnotationFeature' )),
    COMMETHOD([helpstring(u'Move the element from the group to the container.')], HRESULT, 'MoveElementFromGroup',
              ( ['in'], POINTER(IGroupElement), 'group' ),
              ( ['in'], POINTER(IElement), 'Element' ),
              ( ['in'], c_int, 'zorder' ),
              ( ['out'], POINTER(POINTER(IAnnotationFeature)), 'newAnnotationFeature' )),
]
################################################################
## code template for IFDOGraphicsContainer implementation
##class IFDOGraphicsContainer_Impl(object):
##    def MoveElementFromGroup(self, group, Element, zorder):
##        u'Move the element from the group to the container.'
##        #return newAnnotationFeature
##
##    def AddElement(self, Element, zorder):
##        u'Add a new graphic element to the layer.'
##        #return newAnnotationFeature
##

class IAnnotationSublayer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties of an annotation sublayer.'
    _iid_ = GUID('{DBCA59AC-6771-4408-8F48-C7D53389440C}')
    _idlflags_ = ['oleautomation']
class IAnnotationLayer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the annotation layer.'
    _iid_ = GUID('{4AEDC069-B599-424B-A374-49602ABAD308}')
    _idlflags_ = ['oleautomation']
IAnnotationSublayer._methods_ = [
    COMMETHOD(['propget', helpstring(u'The annotation class ID which is represented by this sublayer.')], HRESULT, 'AnnotationClassID',
              ( ['retval', 'out'], POINTER(c_int), 'classID' )),
    COMMETHOD(['propput', helpstring(u'The annotation class ID which is represented by this sublayer.')], HRESULT, 'AnnotationClassID',
              ( ['in'], c_int, 'classID' )),
    COMMETHOD(['propget', helpstring(u'The parent annotation layer of this sublayer.')], HRESULT, 'Parent',
              ( ['retval', 'out'], POINTER(POINTER(IAnnotationLayer)), 'Parent' )),
]
################################################################
## code template for IAnnotationSublayer implementation
##class IAnnotationSublayer_Impl(object):
##    @property
##    def Parent(self):
##        u'The parent annotation layer of this sublayer.'
##        #return Parent
##
##    def _get(self):
##        u'The annotation class ID which is represented by this sublayer.'
##        #return classID
##    def _set(self, classID):
##        u'The annotation class ID which is represented by this sublayer.'
##    AnnotationClassID = property(_get, _set, doc = _set.__doc__)
##

class IRasterLayerExport(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control exporting from a Raster Layer.'
    _iid_ = GUID('{70499F74-2ACB-4B69-BD88-1975644BAB29}')
    _idlflags_ = ['oleautomation']
class IRasterLayerExport2(IRasterLayerExport):
    _case_insensitive_ = True
    u'Provides access to members that control exporting from a Raster Layer.'
    _iid_ = GUID('{FE4896BC-9A91-4D34-B356-7EDE3B0475CE}')
    _idlflags_ = ['oleautomation']
class IRasterLayer(ILayer):
    _case_insensitive_ = True
    u'Provides access to members that create or modify a raster layer.'
    _iid_ = GUID('{D02371C7-35F7-11D2-B1F2-00C04F8EDEFF}')
    _idlflags_ = ['oleautomation']
IRasterLayerExport._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The raster layer to be exported.')], HRESULT, 'RasterLayer',
              ( ['in'], POINTER(IRasterLayer), 'rhs' )),
    COMMETHOD(['propput', helpstring(u'The extent of the raster to be exported.')], HRESULT, 'Extent',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'rhs' )),
    COMMETHOD([helpstring(u'Sets the number of columns and rows of the exported raster.')], HRESULT, 'SetSize',
              ( ['in'], c_int, 'cx' ),
              ( ['in'], c_int, 'cy' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to force exported raster to be RGB.')], HRESULT, 'Force2RGB',
              ( ['in'], VARIANT_BOOL, 'rhs' )),
    COMMETHOD(['propputref', helpstring(u'The coordinate system of the exported raster.')], HRESULT, 'SpatialReference',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'rhs' )),
    COMMETHOD([helpstring(u'Executes the raster layer exporting.')], HRESULT, 'Export',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspace), 'pWorkspace' ),
              ( ['in'], BSTR, 'newname' ),
              ( ['in'], BSTR, 'Format' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterDataset)), 'ppDataset' )),
]
################################################################
## code template for IRasterLayerExport implementation
##class IRasterLayerExport_Impl(object):
##    def _set(self, rhs):
##        u'Indicates whether to force exported raster to be RGB.'
##    Force2RGB = property(fset = _set, doc = _set.__doc__)
##
##    def RasterLayer(self, rhs):
##        u'The raster layer to be exported.'
##        #return 
##
##    def SpatialReference(self, rhs):
##        u'The coordinate system of the exported raster.'
##        #return 
##
##    def Export(self, pWorkspace, newname, Format):
##        u'Executes the raster layer exporting.'
##        #return ppDataset
##
##    def _set(self, rhs):
##        u'The extent of the raster to be exported.'
##    Extent = property(fset = _set, doc = _set.__doc__)
##
##    def SetSize(self, cx, cy):
##        u'Sets the number of columns and rows of the exported raster.'
##        #return 
##

IRasterLayerExport2._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The raster storage definition for exported raster dataset.')], HRESULT, 'StorageDef',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterStorageDef), 'rhs' )),
]
################################################################
## code template for IRasterLayerExport2 implementation
##class IRasterLayerExport2_Impl(object):
##    def StorageDef(self, rhs):
##        u'The raster storage definition for exported raster dataset.'
##        #return 
##

ILayer2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Layer name.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'Layer name.')], HRESULT, 'Name',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer is currently valid.')], HRESULT, 'Valid',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Valid' )),
    COMMETHOD(['propget', helpstring(u'The default area of interest for the layer.')], HRESULT, 'AreaOfInterest',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'aoi' )),
    COMMETHOD(['propget', helpstring(u'Minimum scale (representative fraction) at which the layer will display.')], HRESULT, 'MinimumScale',
              ( ['retval', 'out'], POINTER(c_double), 'MinScale' )),
    COMMETHOD(['propput', helpstring(u'Minimum scale (representative fraction) at which the layer will display.')], HRESULT, 'MinimumScale',
              ( ['in'], c_double, 'MinScale' )),
    COMMETHOD(['propget', helpstring(u'Maximum scale (representative fraction) at which the layer will display.')], HRESULT, 'MaximumScale',
              ( ['retval', 'out'], POINTER(c_double), 'MaxScale' )),
    COMMETHOD(['propput', helpstring(u'Maximum scale (representative fraction) at which the layer will display.')], HRESULT, 'MaximumScale',
              ( ['in'], c_double, 'MaxScale' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer is currently visible.')], HRESULT, 'Visible',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Visible' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the layer is currently visible.')], HRESULT, 'Visible',
              ( ['in'], VARIANT_BOOL, 'Visible' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer shows map tips.')], HRESULT, 'ShowTips',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Show' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the layer shows map tips.')], HRESULT, 'ShowTips',
              ( ['in'], VARIANT_BOOL, 'Show' )),
    COMMETHOD(['propget', helpstring(u'Map tip text at the specified location.')], HRESULT, 'TipText',
              ( ['in'], c_double, 'x' ),
              ( ['in'], c_double, 'y' ),
              ( ['in'], c_double, 'Tolerance' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Text' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer needs its own display cache.')], HRESULT, 'Cached',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Cached' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the layer needs its own display cache.')], HRESULT, 'Cached',
              ( ['in'], VARIANT_BOOL, 'Cached' )),
    COMMETHOD(['propget', helpstring(u'Supported draw phases.')], HRESULT, 'SupportedDrawPhases',
              ( ['retval', 'out'], POINTER(c_int), 'drawPhases' )),
    COMMETHOD(['propputref', helpstring(u'Spatial reference for the layer.')], HRESULT, 'SpatialReference',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'rhs' )),
    COMMETHOD([helpstring(u'Draws the layer to the specified display for the given draw phase.')], HRESULT, 'Draw',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriDrawPhase, 'DrawPhase' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'TrackCancel' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the minimum and maximum scale range values are read-only.')], HRESULT, 'ScaleRangeReadOnly',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'The default area of interest for the layer.')], HRESULT, 'AreaOfInterest',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'aoi' )),
]
################################################################
## code template for ILayer2 implementation
##class ILayer2_Impl(object):
##    def Draw(self, DrawPhase, Display, TrackCancel):
##        u'Draws the layer to the specified display for the given draw phase.'
##        #return 
##
##    def _get(self):
##        u'Layer name.'
##        #return Name
##    def _set(self, Name):
##        u'Layer name.'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Maximum scale (representative fraction) at which the layer will display.'
##        #return MaxScale
##    def _set(self, MaxScale):
##        u'Maximum scale (representative fraction) at which the layer will display.'
##    MaximumScale = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def TipText(self, x, y, Tolerance):
##        u'Map tip text at the specified location.'
##        #return Text
##
##    def _get(self):
##        u'Minimum scale (representative fraction) at which the layer will display.'
##        #return MinScale
##    def _set(self, MinScale):
##        u'Minimum scale (representative fraction) at which the layer will display.'
##    MinimumScale = property(_get, _set, doc = _set.__doc__)
##
##    def SpatialReference(self, rhs):
##        u'Spatial reference for the layer.'
##        #return 
##
##    def _get(self):
##        u'Indicates if the layer is currently visible.'
##        #return Visible
##    def _set(self, Visible):
##        u'Indicates if the layer is currently visible.'
##    Visible = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Valid(self):
##        u'Indicates if the layer is currently valid.'
##        #return Valid
##
##    def _get(self):
##        u'The default area of interest for the layer.'
##        #return aoi
##    def _set(self, aoi):
##        u'The default area of interest for the layer.'
##    AreaOfInterest = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SupportedDrawPhases(self):
##        u'Supported draw phases.'
##        #return drawPhases
##
##    def _get(self):
##        u'Indicates if the layer needs its own display cache.'
##        #return Cached
##    def _set(self, Cached):
##        u'Indicates if the layer needs its own display cache.'
##    Cached = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def ScaleRangeReadOnly(self):
##        u'Indicates if the minimum and maximum scale range values are read-only.'
##        #return flag
##
##    def _get(self):
##        u'Indicates if the layer shows map tips.'
##        #return Show
##    def _set(self, Show):
##        u'Indicates if the layer shows map tips.'
##    ShowTips = property(_get, _set, doc = _set.__doc__)
##

class IMapOverposter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the Labeling (annotation) of a map.'
    _iid_ = GUID('{7CF1A834-DCA5-40DF-9FA0-544FA3B09EFF}')
    _idlflags_ = ['oleautomation']
class IOverposterProperties(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control label placement.'
    _iid_ = GUID('{E265C5B5-4513-4BB9-B280-27B03AAE5957}')
    _idlflags_ = ['oleautomation']
IMapOverposter._methods_ = [
    COMMETHOD(['propget', helpstring(u'The overposter the map will use for labeling.')], HRESULT, 'OverposterProperties',
              ( ['retval', 'out'], POINTER(POINTER(IOverposterProperties)), 'OverposterProperties' )),
    COMMETHOD(['propputref', helpstring(u'The overposter the map will use for labeling.')], HRESULT, 'OverposterProperties',
              ( ['in'], POINTER(IOverposterProperties), 'OverposterProperties' )),
]
################################################################
## code template for IMapOverposter implementation
##class IMapOverposter_Impl(object):
##    def OverposterProperties(self, OverposterProperties):
##        u'The overposter the map will use for labeling.'
##        #return 
##

class MobileLayerInfo(CoClass):
    u'This is depricated at 10.0:  The Mobile Layer Info coclass provides read-only information about a layer in a map.'
    _reg_clsid_ = GUID('{69D4C88E-1158-41EB-8111-4ABEFB32F633}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IMobileLayerInfo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'This is depricated at 10.0:  Provides access to some of the available properties of a Mobile layer info object.'
    _iid_ = GUID('{65F701B2-9BC9-4E79-9DC1-E62B9C3F7927}')
    _idlflags_ = ['oleautomation']
MobileLayerInfo._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMobileLayerInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class IFDOAttributeConversion(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the  attribute conversion to a FDO graphics layer.'
    _iid_ = GUID('{5A5FE792-9637-49A7-B97A-209931B15C3C}')
    _idlflags_ = ['oleautomation']
IFDOAttributeConversion._methods_ = [
    COMMETHOD([helpstring(u'Sets up attribute conversion parameters for batch conversion.')], HRESULT, 'SetupAttributeConversion2',
              ( ['in'], c_int, 'numAttributes' ),
              ( ['in'], VARIANT, 'inputCols' ),
              ( ['in'], VARIANT, 'outputCols' )),
]
################################################################
## code template for IFDOAttributeConversion implementation
##class IFDOAttributeConversion_Impl(object):
##    def SetupAttributeConversion2(self, numAttributes, inputCols, outputCols):
##        u'Sets up attribute conversion parameters for batch conversion.'
##        #return 
##

class AnnotateMap(CoClass):
    u'A renderer for labeling feature layers in a map.'
    _reg_clsid_ = GUID('{8C439002-14EC-11D2-A27E-080009B6F22B}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IAnnotateMap2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the Labeling (annotation) of a map.'
    _iid_ = GUID('{B3B6436F-87E8-42A9-98A7-0F301FC302FD}')
    _idlflags_ = ['oleautomation']
class IAnnotationErrorEvents(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to events that occur when errors occur with the annotation objects.'
    _iid_ = GUID('{A066D11D-9D0C-11D3-9FD5-00C04F6BC6A5}')
    _idlflags_ = ['oleautomation']
AnnotateMap._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IAnnotateMap, IAnnotateMap2, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IConnectionPointContainer, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]
AnnotateMap._outgoing_interfaces_ = [IAnnotationErrorEvents]

class IDotDensityRenderer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the drawing of varying densities of dots within polygon features to represent different quantities.'
    _iid_ = GUID('{9C7776B7-0421-11D4-9F7C-00C04F6BC709}')
    _idlflags_ = ['oleautomation']
class IDotDensityRenderer2(IDotDensityRenderer):
    _case_insensitive_ = True
    u'Provides access to members that control the drawing of varying densities of dots within polygon features to represent different quantities.'
    _iid_ = GUID('{F4F653C0-FCA7-4A4C-83EB-D5B6C625E2CE}')
    _idlflags_ = ['oleautomation']
IDotDensityRenderer._methods_ = [
    COMMETHOD(['propget', helpstring(u'The dot density symbol.')], HRESULT, 'DotDensitySymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDotDensityFillSymbol)), 'Symbol' )),
    COMMETHOD(['propputref', helpstring(u'The dot density symbol.')], HRESULT, 'DotDensitySymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDotDensityFillSymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'Value of each dot.')], HRESULT, 'DotValue',
              ( ['retval', 'out'], POINTER(c_double), 'Value' )),
    COMMETHOD(['propput', helpstring(u'Value of each dot.')], HRESULT, 'DotValue',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD(['propget', helpstring(u'Control layer used for masking.')], HRESULT, 'ControlLayer',
              ( ['retval', 'out'], POINTER(POINTER(IFeatureLayer)), 'Layer' )),
    COMMETHOD(['propputref', helpstring(u'Control layer used for masking.')], HRESULT, 'ControlLayer',
              ( ['in'], POINTER(IFeatureLayer), 'Layer' )),
    COMMETHOD(['propget', helpstring(u'Color scheme, (user interface property only).')], HRESULT, 'ColorScheme',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'Color scheme, (user interface property only).')], HRESULT, 'ColorScheme',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD([helpstring(u'Creates the legend. Call after all properties are set.')], HRESULT, 'CreateLegend'),
    COMMETHOD(['propput', helpstring(u'Indicates if dot size is preserved when zooming (the alternative is that density is preserved).')], HRESULT, 'MaintainSize',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates if dot size is preserved when zooming (the alternative is that density is preserved).')], HRESULT, 'MaintainSize',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
]
################################################################
## code template for IDotDensityRenderer implementation
##class IDotDensityRenderer_Impl(object):
##    def _get(self):
##        u'Color scheme, (user interface property only).'
##        #return Name
##    def _set(self, Name):
##        u'Color scheme, (user interface property only).'
##    ColorScheme = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Value of each dot.'
##        #return Value
##    def _set(self, Value):
##        u'Value of each dot.'
##    DotValue = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if dot size is preserved when zooming (the alternative is that density is preserved).'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if dot size is preserved when zooming (the alternative is that density is preserved).'
##    MaintainSize = property(_get, _set, doc = _set.__doc__)
##
##    def ControlLayer(self, Layer):
##        u'Control layer used for masking.'
##        #return 
##
##    def DotDensitySymbol(self, Symbol):
##        u'The dot density symbol.'
##        #return 
##
##    def CreateLegend(self):
##        u'Creates the legend. Call after all properties are set.'
##        #return 
##


# values for enumeration 'esriMaintainDensityBy'
esriMaintainDensityByDotSize = 0
esriMaintainDensityByDotValue = 1
esriMaintainDensityBy = c_int # enum
IDotDensityRenderer2._methods_ = [
    COMMETHOD(['propput', helpstring(u'Indicates if density is preserved by dot size or dot value.')], HRESULT, 'MaintainDensityBy',
              ( ['in'], esriMaintainDensityBy, 'eMaintainDensityBy' )),
    COMMETHOD(['propget', helpstring(u'Indicates if density is preserved by dot size or dot value.')], HRESULT, 'MaintainDensityBy',
              ( ['retval', 'out'], POINTER(esriMaintainDensityBy), 'eMaintainDensityBy' )),
]
################################################################
## code template for IDotDensityRenderer2 implementation
##class IDotDensityRenderer2_Impl(object):
##    def _get(self):
##        u'Indicates if density is preserved by dot size or dot value.'
##        #return eMaintainDensityBy
##    def _set(self, eMaintainDensityBy):
##        u'Indicates if density is preserved by dot size or dot value.'
##    MaintainDensityBy = property(_get, _set, doc = _set.__doc__)
##

class RasterCatalogRendererPickerDefault(CoClass):
    u'A chooser for picking raster renderer for a raster catalog.'
    _reg_clsid_ = GUID('{F8CB579B-108A-4493-8915-26A0D039D549}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IRasterCatalogRendererPicker(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to methods that choose appropriate raster renderers for a RasterCatalog.'
    _iid_ = GUID('{9F6D682C-1E2E-4B27-A1FB-37C64CD136F9}')
    _idlflags_ = ['oleautomation']
RasterCatalogRendererPickerDefault._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterCatalogRendererPicker]

class IStandaloneTableCollection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the standalone table collection.'
    _iid_ = GUID('{3C2ACEAA-E3DC-11D3-A096-00C04F6BC626}')
    _idlflags_ = ['oleautomation']
IStandaloneTableCollection._methods_ = [
    COMMETHOD(['propget', helpstring(u'Number of standalone tables.')], HRESULT, 'StandaloneTableCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The standalone table at the given index.')], HRESULT, 'StandaloneTable',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IStandaloneTable)), 'Table' )),
    COMMETHOD([helpstring(u'Adds a standalone table to the collection.')], HRESULT, 'AddStandaloneTable',
              ( ['in'], POINTER(IStandaloneTable), 'Table' )),
    COMMETHOD([helpstring(u'Removes the standalone table from the collection.')], HRESULT, 'RemoveStandaloneTable',
              ( ['in'], POINTER(IStandaloneTable), 'Table' )),
    COMMETHOD([helpstring(u'Removes all standalone tables from the collection.')], HRESULT, 'RemoveAllStandaloneTables'),
]
################################################################
## code template for IStandaloneTableCollection implementation
##class IStandaloneTableCollection_Impl(object):
##    @property
##    def StandaloneTable(self, Index):
##        u'The standalone table at the given index.'
##        #return Table
##
##    def AddStandaloneTable(self, Table):
##        u'Adds a standalone table to the collection.'
##        #return 
##
##    @property
##    def StandaloneTableCount(self):
##        u'Number of standalone tables.'
##        #return Count
##
##    def RemoveAllStandaloneTables(self):
##        u'Removes all standalone tables from the collection.'
##        #return 
##
##    def RemoveStandaloneTable(self, Table):
##        u'Removes the standalone table from the collection.'
##        #return 
##

class IDataGraphTGeneralProperties(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control general data graph properties.'
    _iid_ = GUID('{8AA61CE1-0D6C-40EB-ACD2-499D4D580E2E}')
    _idlflags_ = ['oleautomation']
IDataGraphTGeneralProperties._methods_ = [
    COMMETHOD(['propget', helpstring(u'Title of the graph.')], HRESULT, 'Title',
              ( ['retval', 'out'], POINTER(BSTR), 'Title' )),
    COMMETHOD(['propput', helpstring(u'Title of the graph.')], HRESULT, 'Title',
              ( ['in'], BSTR, 'Title' )),
    COMMETHOD(['propget', helpstring(u'Subtitle of the graph.')], HRESULT, 'SubTitle',
              ( ['retval', 'out'], POINTER(BSTR), 'SubTitle' )),
    COMMETHOD(['propput', helpstring(u'Subtitle of the graph.')], HRESULT, 'SubTitle',
              ( ['in'], BSTR, 'SubTitle' )),
    COMMETHOD(['propget', helpstring(u'Footer of the graph.')], HRESULT, 'Footer',
              ( ['retval', 'out'], POINTER(BSTR), 'Footer' )),
    COMMETHOD(['propput', helpstring(u'Footer of the graph.')], HRESULT, 'Footer',
              ( ['in'], BSTR, 'Footer' )),
    COMMETHOD(['propget', helpstring(u'Indicates if graph is rendered in 3-D.')], HRESULT, 'Show3D',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'b' )),
    COMMETHOD(['propput', helpstring(u'Indicates if graph is rendered in 3-D.')], HRESULT, 'Show3D',
              ( ['in'], VARIANT_BOOL, 'b' )),
]
################################################################
## code template for IDataGraphTGeneralProperties implementation
##class IDataGraphTGeneralProperties_Impl(object):
##    def _get(self):
##        u'Indicates if graph is rendered in 3-D.'
##        #return b
##    def _set(self, b):
##        u'Indicates if graph is rendered in 3-D.'
##    Show3D = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Footer of the graph.'
##        #return Footer
##    def _set(self, Footer):
##        u'Footer of the graph.'
##    Footer = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Subtitle of the graph.'
##        #return SubTitle
##    def _set(self, SubTitle):
##        u'Subtitle of the graph.'
##    SubTitle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Title of the graph.'
##        #return Title
##    def _set(self, Title):
##        u'Title of the graph.'
##    Title = property(_get, _set, doc = _set.__doc__)
##

class IHorizontalLegendItem(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that work with legend item arrangement.'
    _iid_ = GUID('{8A7A1786-79B2-11D2-87D5-0000F8751720}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'esriLegendItemArrangement'
esriPatchLabelDescription = 0
esriPatchDescriptionLabel = 1
esriLabelPatchDescription = 2
esriLabelDescriptionPatch = 3
esriDescriptionPatchLabel = 4
esriDescriptionLabelPatch = 5
esriLegendItemArrangement = c_int # enum
IHorizontalLegendItem._methods_ = [
    COMMETHOD(['propget', helpstring(u'Legend item arrangement.')], HRESULT, 'Arrangement',
              ( ['retval', 'out'], POINTER(esriLegendItemArrangement), 'Arrangement' )),
    COMMETHOD(['propput', helpstring(u'Legend item arrangement.')], HRESULT, 'Arrangement',
              ( ['in'], esriLegendItemArrangement, 'Arrangement' )),
]
################################################################
## code template for IHorizontalLegendItem implementation
##class IHorizontalLegendItem_Impl(object):
##    def _get(self):
##        u'Legend item arrangement.'
##        #return Arrangement
##    def _set(self, Arrangement):
##        u'Legend item arrangement.'
##    Arrangement = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'esriRasterUniqueRendererKeyTypesEnum'
esriRasterUniqueRendererKeyError = 0
esriRasterUniqueRendererKeyDouble = 1
esriRasterUniqueRendererKeyString = 2
esriRasterUniqueRendererKeyTypesEnum = c_int # enum
class ITilesTable(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Wrapper object to encapsulate a cache tiles containenr table.'
    _iid_ = GUID('{504DD827-F109-44C3-AA3E-5059219E2AC5}')
    _idlflags_ = []
ITilesTable._methods_ = [
    COMMETHOD([helpstring(u'Create the table.')], HRESULT, 'Create',
              ( ['in'], BSTR, 'levelCacheDir' ),
              ( ['in'], BSTR, 'Format' ),
              ( ['in'], c_int, 'txStart' ),
              ( ['in'], c_int, 'txEnd' ),
              ( ['in'], c_int, 'tyStart' ),
              ( ['in'], c_int, 'tyEnd' )),
    COMMETHOD([helpstring(u'Delete the table.')], HRESULT, 'Delete',
              ( ['in'], BSTR, 'levelCacheDir' ),
              ( ['in'], BSTR, 'Format' ),
              ( ['in'], c_int, 'ty' ),
              ( ['in'], c_int, 'tx' )),
    COMMETHOD([helpstring(u'Open the table.')], HRESULT, 'Open',
              ( ['in'], BSTR, 'levelCacheDir' ),
              ( ['in'], c_int, 'ty' ),
              ( ['in'], c_int, 'tx' ),
              ( ['in'], VARIANT_BOOL, 'forReadOnly' )),
    COMMETHOD([helpstring(u'Close the table.')], HRESULT, 'Close'),
    COMMETHOD([helpstring(u'Get the row in the table corresponding to the given tileX and tileY')], HRESULT, 'GetOffset',
              ( ['in'], c_int, 'ty' ),
              ( ['in'], c_int, 'tx' ),
              ( ['retval', 'out'], POINTER(c_int), 'pOffset' )),
    COMMETHOD([helpstring(u'Insert the tile into the table.')], HRESULT, 'InsertTile',
              ( ['in'], c_int, 'ty' ),
              ( ['in'], c_int, 'tx' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStream), 'pStream' ),
              ( ['retval', 'out'], POINTER(c_int), 'pOffset' )),
    COMMETHOD([helpstring(u'Query specific tile from the table.')], HRESULT, 'QueryTile',
              ( ['in'], c_int, 'ty' ),
              ( ['in'], c_int, 'tx' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStream)), 'ppStream' )),
    COMMETHOD([helpstring(u'Update Tile.')], HRESULT, 'UpdateTile',
              ( ['in'], c_int, 'ty' ),
              ( ['in'], c_int, 'tx' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStream), 'pStream' )),
    COMMETHOD([helpstring(u'Is table locked')], HRESULT, 'IsLocked',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsLocked' )),
    COMMETHOD([helpstring(u'Get Tile Count')], HRESULT, 'GetTileCount',
              ( ['retval', 'out'], POINTER(c_int), 'pTileCount' )),
    COMMETHOD([helpstring(u'Table Exists')], HRESULT, 'Exists',
              ( ['in'], BSTR, 'layerCacheDir' ),
              ( ['in'], c_int, 'ty' ),
              ( ['in'], c_int, 'tx' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pExists' )),
]
################################################################
## code template for ITilesTable implementation
##class ITilesTable_Impl(object):
##    def GetOffset(self, ty, tx):
##        u'Get the row in the table corresponding to the given tileX and tileY'
##        #return pOffset
##
##    def UpdateTile(self, ty, tx, pStream):
##        u'Update Tile.'
##        #return 
##
##    def Exists(self, layerCacheDir, ty, tx):
##        u'Table Exists'
##        #return pExists
##
##    def QueryTile(self, ty, tx):
##        u'Query specific tile from the table.'
##        #return ppStream
##
##    def Create(self, levelCacheDir, Format, txStart, txEnd, tyStart, tyEnd):
##        u'Create the table.'
##        #return 
##
##    def GetTileCount(self):
##        u'Get Tile Count'
##        #return pTileCount
##
##    def IsLocked(self):
##        u'Is table locked'
##        #return IsLocked
##
##    def InsertTile(self, ty, tx, pStream):
##        u'Insert the tile into the table.'
##        #return pOffset
##
##    def Close(self):
##        u'Close the table.'
##        #return 
##
##    def Open(self, levelCacheDir, ty, tx, forReadOnly):
##        u'Open the table.'
##        #return 
##
##    def Delete(self, levelCacheDir, Format, ty, tx):
##        u'Delete the table.'
##        #return 
##

class IActiveViewEvents(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to events that occur when the state of the active view changes.'
    _iid_ = GUID('{E79C5940-52DD-11D0-98BE-00805F7CED21}')
    _idlflags_ = ['oleautomation']
class IActiveView(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the active view - the main application window.'
    _iid_ = GUID('{DD94D76B-836D-11D0-87EC-080009EC732A}')
    _idlflags_ = ['oleautomation']
IActiveViewEvents._methods_ = [
    COMMETHOD([helpstring(u'Fired when the contents of the view changes.')], HRESULT, 'ContentsChanged'),
    COMMETHOD([helpstring(u'Fired when the contents of the view is cleared.')], HRESULT, 'ContentsCleared'),
    COMMETHOD([helpstring(u'Fired when an item is added to the view.')], HRESULT, 'ItemAdded',
              ( ['in'], VARIANT, 'Item' )),
    COMMETHOD([helpstring(u'Fired when an item is deleted from the view.')], HRESULT, 'ItemDeleted',
              ( ['in'], VARIANT, 'Item' )),
    COMMETHOD([helpstring(u'Fired when a view item is reordered.')], HRESULT, 'ItemReordered',
              ( ['in'], VARIANT, 'Item' ),
              ( ['in'], c_int, 'toIndex' )),
    COMMETHOD([helpstring(u'Call this function to fire the selection changed event.')], HRESULT, 'SelectionChanged'),
    COMMETHOD([helpstring(u'Fired when view is refreshed before draw happens.')], HRESULT, 'ViewRefreshed',
              ( ['in'], POINTER(IActiveView), 'View' ),
              ( ['in'], esriViewDrawPhase, 'phase' ),
              ( ['in'], VARIANT, 'Data' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'envelope' )),
    COMMETHOD([helpstring(u'Fired after the specified phase is drawn.')], HRESULT, 'AfterDraw',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], esriViewDrawPhase, 'phase' )),
    COMMETHOD([helpstring(u'Fired after an individual view item is drawn.  Example: view items include layers in a map or elements in a page layout.')], HRESULT, 'AfterItemDraw',
              ( ['in'], c_short, 'Index' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( [], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriDrawPhase, 'phase' )),
    COMMETHOD([helpstring(u'Fired when a new map is made active.')], HRESULT, 'FocusMapChanged'),
    COMMETHOD([helpstring(u'Fired when the spatial reference is changed.')], HRESULT, 'SpatialReferenceChanged'),
]
################################################################
## code template for IActiveViewEvents implementation
##class IActiveViewEvents_Impl(object):
##    def ContentsCleared(self):
##        u'Fired when the contents of the view is cleared.'
##        #return 
##
##    def ItemDeleted(self, Item):
##        u'Fired when an item is deleted from the view.'
##        #return 
##
##    def AfterDraw(self, Display, phase):
##        u'Fired after the specified phase is drawn.'
##        #return 
##
##    def ViewRefreshed(self, View, phase, Data, envelope):
##        u'Fired when view is refreshed before draw happens.'
##        #return 
##
##    def FocusMapChanged(self):
##        u'Fired when a new map is made active.'
##        #return 
##
##    def ItemReordered(self, Item, toIndex):
##        u'Fired when a view item is reordered.'
##        #return 
##
##    def ContentsChanged(self):
##        u'Fired when the contents of the view changes.'
##        #return 
##
##    def SelectionChanged(self):
##        u'Call this function to fire the selection changed event.'
##        #return 
##
##    def ItemAdded(self, Item):
##        u'Fired when an item is added to the view.'
##        #return 
##
##    def AfterItemDraw(self, Index, Display, phase):
##        u'Fired after an individual view item is drawn.  Example: view items include layers in a map or elements in a page layout.'
##        #return 
##
##    def SpatialReferenceChanged(self):
##        u'Fired when the spatial reference is changed.'
##        #return 
##

class IDotDensityUIRenderer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that work with additional renderer properties which appear on the user interface.'
    _iid_ = GUID('{90E8800D-148D-11D4-9F7D-00C04F6BC709}')
    _idlflags_ = ['oleautomation']
IDotDensityUIRenderer._methods_ = [
    COMMETHOD(['propget', helpstring(u'Minimum density.')], HRESULT, 'MinDensity',
              ( ['retval', 'out'], POINTER(c_double), 'Value' )),
    COMMETHOD(['propput', helpstring(u'Minimum density.')], HRESULT, 'MinDensity',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD(['propget', helpstring(u'Area in map units of the polygon with minimum density.')], HRESULT, 'MinDensityArea',
              ( ['retval', 'out'], POINTER(c_double), 'Value' )),
    COMMETHOD(['propput', helpstring(u'Area in map units of the polygon with minimum density.')], HRESULT, 'MinDensityArea',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD(['propget', helpstring(u'Mean density.')], HRESULT, 'MeanDensity',
              ( ['retval', 'out'], POINTER(c_double), 'Value' )),
    COMMETHOD(['propput', helpstring(u'Mean density.')], HRESULT, 'MeanDensity',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD(['propget', helpstring(u'Mean area in map units.')], HRESULT, 'MeanArea',
              ( ['retval', 'out'], POINTER(c_double), 'Value' )),
    COMMETHOD(['propput', helpstring(u'Mean area in map units.')], HRESULT, 'MeanArea',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD(['propget', helpstring(u'Maximum density.')], HRESULT, 'MaxDensity',
              ( ['retval', 'out'], POINTER(c_double), 'Value' )),
    COMMETHOD(['propput', helpstring(u'Maximum density.')], HRESULT, 'MaxDensity',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD(['propget', helpstring(u'Area in map units of the polygon with maximum density.')], HRESULT, 'MaxDensityArea',
              ( ['retval', 'out'], POINTER(c_double), 'Value' )),
    COMMETHOD(['propput', helpstring(u'Area in map units of the polygon with maximum density.')], HRESULT, 'MaxDensityArea',
              ( ['in'], c_double, 'Value' )),
]
################################################################
## code template for IDotDensityUIRenderer implementation
##class IDotDensityUIRenderer_Impl(object):
##    def _get(self):
##        u'Mean area in map units.'
##        #return Value
##    def _set(self, Value):
##        u'Mean area in map units.'
##    MeanArea = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Area in map units of the polygon with minimum density.'
##        #return Value
##    def _set(self, Value):
##        u'Area in map units of the polygon with minimum density.'
##    MinDensityArea = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Area in map units of the polygon with maximum density.'
##        #return Value
##    def _set(self, Value):
##        u'Area in map units of the polygon with maximum density.'
##    MaxDensityArea = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Maximum density.'
##        #return Value
##    def _set(self, Value):
##        u'Maximum density.'
##    MaxDensity = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Minimum density.'
##        #return Value
##    def _set(self, Value):
##        u'Minimum density.'
##    MinDensity = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Mean density.'
##        #return Value
##    def _set(self, Value):
##        u'Mean density.'
##    MeanDensity = property(_get, _set, doc = _set.__doc__)
##

class IDataSortSeriesProperties(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control sorting of the graph data.'
    _iid_ = GUID('{E4A4F9CF-C407-4C30-943F-1BBC23F728CF}')
    _idlflags_ = ['oleautomation']
IDataSortSeriesProperties._methods_ = [
    COMMETHOD([helpstring(u'Add a sorting field and type.')], HRESULT, 'AddSortingField',
              ( ['in'], BSTR, 'strField' ),
              ( ['in'], VARIANT_BOOL, 'bAscending' ),
              ( ['in', 'out'], POINTER(c_int), 'idx' )),
    COMMETHOD([helpstring(u'Get a sorting field and type.')], HRESULT, 'GetSortingField',
              ( ['in'], c_int, 'idx' ),
              ( ['out'], POINTER(BSTR), 'strField' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'bAscending' )),
    COMMETHOD([helpstring(u'Remove the sorting field.')], HRESULT, 'RemoveSortingField',
              ( ['in'], c_int, 'idx' )),
    COMMETHOD(['propget', helpstring(u'Number of sorting fields.')], HRESULT, 'SortingFieldsCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
]
################################################################
## code template for IDataSortSeriesProperties implementation
##class IDataSortSeriesProperties_Impl(object):
##    def AddSortingField(self, strField, bAscending):
##        u'Add a sorting field and type.'
##        #return idx
##
##    def GetSortingField(self, idx):
##        u'Get a sorting field and type.'
##        #return strField, bAscending
##
##    def RemoveSortingField(self, idx):
##        u'Remove the sorting field.'
##        #return 
##
##    @property
##    def SortingFieldsCount(self):
##        u'Number of sorting fields.'
##        #return Count
##

class IOverposter4(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that place labels for features using conflict detection.'
    _iid_ = GUID('{655EF2F1-880A-34BB-1DFA-7E00AF2E442A}')
    _idlflags_ = ['oleautomation']
class IOverposterLayerProperties(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the placement of labels or symbols on top of features (barriers).'
    _iid_ = GUID('{3141F2F7-38E2-11D1-8809-080009EC732A}')
    _idlflags_ = ['oleautomation']
IOverposter4._methods_ = [
    COMMETHOD([helpstring(u'Adds a class to the overposter and specifies its properties.')], HRESULT, 'AddClass',
              ( ['in'], POINTER(IOverposterLayerProperties), 'props' ),
              ( [], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol), 'Symbol' ),
              ( ['retval', 'out'], POINTER(c_int), 'ClassIndex' )),
]
################################################################
## code template for IOverposter4 implementation
##class IOverposter4_Impl(object):
##    def AddClass(self, props, Symbol):
##        u'Adds a class to the overposter and specifies its properties.'
##        #return ClassIndex
##

class IPolarSeriesProperties(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control polar series.'
    _iid_ = GUID('{7A761088-7684-4545-A553-2EDDE236194D}')
    _idlflags_ = ['oleautomation']
IPolarSeriesProperties._methods_ = [
    COMMETHOD(['propget', helpstring(u'Properties of the symbol.')], HRESULT, 'SymbolProperties',
              ( ['retval', 'out'], POINTER(POINTER(IDataGraphTSymbolProperties)), 'ppSymbolProps' )),
    COMMETHOD(['propget', helpstring(u'Transparency level.')], HRESULT, 'Transparency',
              ( ['retval', 'out'], POINTER(c_int), 'pValue' )),
    COMMETHOD(['propput', helpstring(u'Transparency level.')], HRESULT, 'Transparency',
              ( ['in'], c_int, 'pValue' )),
    COMMETHOD(['propput', helpstring(u'Circled ')], HRESULT, 'Circled',
              ( ['in'], VARIANT_BOOL, 'b' )),
    COMMETHOD(['propget', helpstring(u'Circled ')], HRESULT, 'Circled',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'b' )),
    COMMETHOD(['propput', helpstring(u'Circle closed ')], HRESULT, 'CircleClosed',
              ( ['in'], VARIANT_BOOL, 'b' )),
    COMMETHOD(['propget', helpstring(u'Circle closed ')], HRESULT, 'CircleClosed',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'b' )),
]
################################################################
## code template for IPolarSeriesProperties implementation
##class IPolarSeriesProperties_Impl(object):
##    def _get(self):
##        u'Circle closed '
##        #return b
##    def _set(self, b):
##        u'Circle closed '
##    CircleClosed = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SymbolProperties(self):
##        u'Properties of the symbol.'
##        #return ppSymbolProps
##
##    def _get(self):
##        u'Transparency level.'
##        #return pValue
##    def _set(self, pValue):
##        u'Transparency level.'
##    Transparency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Circled '
##        #return b
##    def _set(self, b):
##        u'Circled '
##    Circled = property(_get, _set, doc = _set.__doc__)
##

class IWCSServer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the available WCS Server properties and methods.'
    _iid_ = GUID('{FF427E9D-BAC4-4572-A3E3-BF0B36AC9C17}')
    _idlflags_ = ['oleautomation']
IWCSServer._methods_ = [
    COMMETHOD(['propget', helpstring(u'Handle WCS request.')], HRESULT, 'Data',
              ( ['in'], BSTR, 'sRequest' ),
              ( ['out'], POINTER(BSTR), 'pMimeType' ),
              ( ['retval', 'out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'ppResponse' )),
    COMMETHOD([helpstring(u'Handle setting WCS Server parameters.')], HRESULT, 'SetParameters',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Value' )),
]
################################################################
## code template for IWCSServer implementation
##class IWCSServer_Impl(object):
##    def SetParameters(self, Name, Value):
##        u'Handle setting WCS Server parameters.'
##        #return 
##
##    @property
##    def Data(self, sRequest):
##        u'Handle WCS request.'
##        #return pMimeType, ppResponse
##

class IQueryByLayer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the QueryByLayer interface.'
    _iid_ = GUID('{B353CFBB-0F64-4D00-904A-6EECD3FA5D4C}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'esriLayerSelectionMethod'
esriLayerSelectIntersect = 0
esriLayerSelectWithinADistance = 1
esriLayerSelectCompletelyContains = 2
esriLayerSelectCompletelyWithin = 3
esriLayerSelectHaveTheirCenterIn = 4
esriLayerSelectShareALineSegmentWith = 5
esriLayerSelectBoundaryTouches = 6
esriLayerSelectAreIdenticalTo = 7
esriLayerSelectCrossedByTheOutlineOf = 8
esriLayerSelectContains = 9
esriLayerSelectContainedBy = 10
esriLayerSelectionMethod = c_int # enum
IQueryByLayer._methods_ = [
    COMMETHOD(['propputref', helpstring(u'Provides access to the methods and properties of QueryByLayer.')], HRESULT, 'FromLayer',
              ( ['in'], POINTER(IFeatureLayer), 'rhs' )),
    COMMETHOD(['propputref', helpstring(u'The layer features will be selected from.')], HRESULT, 'ByLayer',
              ( ['in'], POINTER(IFeatureLayer), 'rhs' )),
    COMMETHOD(['propput', helpstring(u'The input layer that contains features to base the selection on.')], HRESULT, 'LayerSelectionMethod',
              ( ['in'], esriLayerSelectionMethod, 'rhs' )),
    COMMETHOD(['propput', helpstring(u'The type of selection method to be performed.')], HRESULT, 'BufferDistance',
              ( ['in'], c_double, 'rhs' )),
    COMMETHOD(['propput', helpstring(u'The buffer units.')], HRESULT, 'BufferUnits',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits, 'rhs' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether selected features will be used.')], HRESULT, 'UseSelectedFeatures',
              ( ['in'], VARIANT_BOOL, 'rhs' )),
    COMMETHOD(['propput', helpstring(u'The result type of the selection where it can be specified that the selection adds to a current selection etc.')], HRESULT, 'ResultType',
              ( ['in'], esriSelectionResultEnum, 'rhs' )),
    COMMETHOD([helpstring(u'Selects the features based on the input parameters and returns a selection set.')], HRESULT, 'Select',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ISelectionSet)), 'Selection' )),
]
################################################################
## code template for IQueryByLayer implementation
##class IQueryByLayer_Impl(object):
##    def _set(self, rhs):
##        u'The input layer that contains features to base the selection on.'
##    LayerSelectionMethod = property(fset = _set, doc = _set.__doc__)
##
##    def FromLayer(self, rhs):
##        u'Provides access to the methods and properties of QueryByLayer.'
##        #return 
##
##    def ByLayer(self, rhs):
##        u'The layer features will be selected from.'
##        #return 
##
##    def _set(self, rhs):
##        u'The result type of the selection where it can be specified that the selection adds to a current selection etc.'
##    ResultType = property(fset = _set, doc = _set.__doc__)
##
##    def _set(self, rhs):
##        u'The buffer units.'
##    BufferUnits = property(fset = _set, doc = _set.__doc__)
##
##    def _set(self, rhs):
##        u'The type of selection method to be performed.'
##    BufferDistance = property(fset = _set, doc = _set.__doc__)
##
##    def _set(self, rhs):
##        u'Indicates whether selected features will be used.'
##    UseSelectedFeatures = property(fset = _set, doc = _set.__doc__)
##
##    def Select(self):
##        u'Selects the features based on the input parameters and returns a selection set.'
##        #return Selection
##


# values for enumeration 'acShieldSymbolType'
acInterstateShieldSymbol = 0
acUSRoadShieldSymbol = 1
acRectangleShieldSymbol = 2
acOvalShieldSymbol = 3
acMexicanShieldSymbol = 4
acShieldSymbolType = c_int # enum
class IDataGraphTLegendProperties(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control graph legend properties.'
    _iid_ = GUID('{9134B30D-F03D-4B18-8CF6-C8A402E7FD0C}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'esriDataGraphTLegendAlignment'
esriDataGraphTLegendLeft = 0
esriDataGraphTLegendRight = 1
esriDataGraphTLegendTop = 2
esriDataGraphTLegendBottom = 3
esriDataGraphTLegendAlignment = c_int # enum

# values for enumeration 'esriDataGraphTLegendTextSyle'
esriDataGraphTLegendTextPlain = 0
esriDataGraphTLegendTextLeftValue = 1
esriDataGraphTLegendTextRightValue = 2
esriDataGraphTLegendTextLeftPercent = 3
esriDataGraphTLegendTextRightPercent = 4
esriDataGraphTLegendTextXValue = 5
esriDataGraphTLegendTextValue = 6
esriDataGraphTLegendTextPercent = 7
esriDataGraphTLegendTextXAndValue = 8
esriDataGraphTLegendTextXAndPercent = 9
esriDataGraphTLegendTextSyle = c_int # enum
IDataGraphTLegendProperties._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if graph legend is visible.')], HRESULT, 'Visible',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'b' )),
    COMMETHOD(['propput', helpstring(u'Indicates if graph legend is visible.')], HRESULT, 'Visible',
              ( ['in'], VARIANT_BOOL, 'b' )),
    COMMETHOD(['propget', helpstring(u'Title of the legend.')], HRESULT, 'Title',
              ( ['retval', 'out'], POINTER(BSTR), 'Title' )),
    COMMETHOD(['propput', helpstring(u'Title of the legend.')], HRESULT, 'Title',
              ( ['in'], BSTR, 'Title' )),
    COMMETHOD(['propget', helpstring(u'Options in arranging graph legend.')], HRESULT, 'Alignment',
              ( ['retval', 'out'], POINTER(esriDataGraphTLegendAlignment), 'pAlignment' )),
    COMMETHOD(['propput', helpstring(u'Options in arranging graph legend.')], HRESULT, 'Alignment',
              ( ['in'], esriDataGraphTLegendAlignment, 'pAlignment' )),
    COMMETHOD(['propget', helpstring(u'Options in representing values and labels in graph legend.')], HRESULT, 'TextStyle',
              ( ['retval', 'out'], POINTER(esriDataGraphTLegendTextSyle), 'Style' )),
    COMMETHOD(['propput', helpstring(u'Options in representing values and labels in graph legend.')], HRESULT, 'TextStyle',
              ( ['in'], esriDataGraphTLegendTextSyle, 'Style' )),
]
################################################################
## code template for IDataGraphTLegendProperties implementation
##class IDataGraphTLegendProperties_Impl(object):
##    def _get(self):
##        u'Options in representing values and labels in graph legend.'
##        #return Style
##    def _set(self, Style):
##        u'Options in representing values and labels in graph legend.'
##    TextStyle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if graph legend is visible.'
##        #return b
##    def _set(self, b):
##        u'Indicates if graph legend is visible.'
##    Visible = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Options in arranging graph legend.'
##        #return pAlignment
##    def _set(self, pAlignment):
##        u'Options in arranging graph legend.'
##    Alignment = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Title of the legend.'
##        #return Title
##    def _set(self, Title):
##        u'Title of the legend.'
##    Title = property(_get, _set, doc = _set.__doc__)
##

class IDataObjectTables(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Data Tables.'
    _iid_ = GUID('{F40ACAF4-7AE6-4AE5-A3D3-2FE1B16823FC}')
    _idlflags_ = ['oleautomation']
class IDataObjectTable(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Data Table'
    _iid_ = GUID('{72EE5F8A-F039-48DA-B057-E61C7B6382DA}')
    _idlflags_ = ['oleautomation']
IDataObjectTables._methods_ = [
    COMMETHOD(['propget', helpstring(u'Data table count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The DataObjectTable at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IDataObjectTable)), 'DataObjectTable' )),
    COMMETHOD([helpstring(u'Removes the DataObjectTable at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all DataObjectTable elements.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Adds a DataObjectTable.')], HRESULT, 'Add',
              ( ['in'], POINTER(IDataObjectTable), 'DataObjectTable' )),
    COMMETHOD([helpstring(u'Adds a DataObjectTable at the specified position.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(IDataObjectTable), 'DataObjectTable' )),
]
################################################################
## code template for IDataObjectTables implementation
##class IDataObjectTables_Impl(object):
##    @property
##    def Count(self):
##        u'Data table count.'
##        #return Count
##
##    def Insert(self, Index, DataObjectTable):
##        u'Adds a DataObjectTable at the specified position.'
##        #return 
##
##    def Remove(self, Index):
##        u'Removes the DataObjectTable at the specified position.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'The DataObjectTable at the specified position.'
##        #return DataObjectTable
##
##    def RemoveAll(self):
##        u'Removes all DataObjectTable elements.'
##        #return 
##
##    def Add(self, DataObjectTable):
##        u'Adds a DataObjectTable.'
##        #return 
##

class IRenderedThumbnailBuilder(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a rendered thumbnail builder.'
    _iid_ = GUID('{D0382058-8672-41A2-B037-1FC728B4ED6A}')
    _idlflags_ = ['oleautomation']
IRenderedThumbnailBuilder._methods_ = [
    COMMETHOD(['propget', helpstring(u'The raster renderer used for conversion.')], HRESULT, 'RasterRenderer',
              ( ['retval', 'out'], POINTER(POINTER(IRasterRenderer)), 'ppRenderer' )),
    COMMETHOD(['propputref', helpstring(u'The raster renderer used for conversion.')], HRESULT, 'RasterRenderer',
              ( ['in'], POINTER(IRasterRenderer), 'ppRenderer' )),
]
################################################################
## code template for IRenderedThumbnailBuilder implementation
##class IRenderedThumbnailBuilder_Impl(object):
##    def RasterRenderer(self, ppRenderer):
##        u'The raster renderer used for conversion.'
##        #return 
##


# values for enumeration 'esriRasterStretchTypesEnum'
esriRasterStretch_NONE = 0
esriRasterStretch_DefaultFromSource = 1
esriRasterStretch_Custom = 2
esriRasterStretch_StandardDeviations = 3
esriRasterStretch_HistogramEqualize = 4
esriRasterStretch_MinimumMaximum = 5
esriRasterStretch_HistogramSpecification = 6
esriRasterStretch_PercentMinimumMaximum = 7
esriRasterStretch_ESRI = 8
esriRasterStretch_Count = 9
esriRasterStretchTypesEnum = c_int # enum
IRasterRendererInfo._methods_ = [
    COMMETHOD(['propget', helpstring(u'The name of the raster renderer.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'pName' )),
    COMMETHOD(['propget', helpstring(u'The description of the raster renderer.')], HRESULT, 'Description',
              ( ['retval', 'out'], POINTER(BSTR), 'pDescription' )),
]
################################################################
## code template for IRasterRendererInfo implementation
##class IRasterRendererInfo_Impl(object):
##    @property
##    def Name(self):
##        u'The name of the raster renderer.'
##        #return pName
##
##    @property
##    def Description(self):
##        u'The description of the raster renderer.'
##        #return pDescription
##

class IRasterRendererUniqueValues(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control unique values.'
    _iid_ = GUID('{58E9FBFF-C3AD-4BAA-9258-AA3902E73BC9}')
    _idlflags_ = ['oleautomation']
IRasterRendererUniqueValues._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The list of unique values.')], HRESULT, 'UniqueValues',
              ( ['in'], POINTER(comtypes.gen._8F0541A3_D5BE_4B3F_A8D9_062D5579E19B_0_10_2.IUniqueValues), 'ppUniqueValues' )),
    COMMETHOD(['propget', helpstring(u'The list of unique values.')], HRESULT, 'UniqueValues',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._8F0541A3_D5BE_4B3F_A8D9_062D5579E19B_0_10_2.IUniqueValues)), 'ppUniqueValues' )),
]
################################################################
## code template for IRasterRendererUniqueValues implementation
##class IRasterRendererUniqueValues_Impl(object):
##    @property
##    def UniqueValues(self, ppUniqueValues):
##        u'The list of unique values.'
##        #return 
##

class IHTMLPopupIdentify(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that consume the HTML popup tool content.'
    _iid_ = GUID('{095CDD1A-FE17-4719-9072-15F303F82E69}')
    _idlflags_ = ['oleautomation']
IHTMLPopupIdentify._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if this layer currently responds to the HTML Popup tool.')], HRESULT, 'HTMLPopupEnabled',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pEnabled' )),
    COMMETHOD(['propget', helpstring(u'Indicates the content formating style for the HTML Popup tool.')], HRESULT, 'HTMLPresentationStyle',
              ( ['retval', 'out'], POINTER(esriHTMLPopupStyle), 'pStyle' )),
    COMMETHOD([helpstring(u'The content is the XML text at the specified point.')], HRESULT, 'HTMLIdentify',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'pPoint' ),
              ( ['in'], c_double, 'Tolerance' ),
              ( ['retval', 'out'], POINTER(BSTR), 'pHtml' )),
    COMMETHOD([helpstring(u'The tooltip at the specified point.')], HRESULT, 'HTMLTipText',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'pPoint' ),
              ( ['in'], c_double, 'Tolerance' ),
              ( ['retval', 'out'], POINTER(BSTR), 'pTipText' )),
]
################################################################
## code template for IHTMLPopupIdentify implementation
##class IHTMLPopupIdentify_Impl(object):
##    def HTMLTipText(self, pPoint, Tolerance):
##        u'The tooltip at the specified point.'
##        #return pTipText
##
##    @property
##    def HTMLPopupEnabled(self):
##        u'Indicates if this layer currently responds to the HTML Popup tool.'
##        #return pEnabled
##
##    @property
##    def HTMLPresentationStyle(self):
##        u'Indicates the content formating style for the HTML Popup tool.'
##        #return pStyle
##
##    def HTMLIdentify(self, pPoint, Tolerance):
##        u'The content is the XML text at the specified point.'
##        #return pHtml
##

class InkGraphic(CoClass):
    u'Ink Graphic Object.'
    _reg_clsid_ = GUID('{F42249E8-6280-4CE2-A779-45691B68274A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IInkGraphic(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the InkGraphic object.'
    _iid_ = GUID('{9A36B19B-2258-4046-BDE3-0D4F647E9C37}')
    _idlflags_ = ['oleautomation']
class IBoundsProperties(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control Bounds Properties.'
    _iid_ = GUID('{7AD72C5D-EB8A-11D3-9314-00600802E603}')
    _idlflags_ = ['oleautomation']
class IElementProperties(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the Element Properties.'
    _iid_ = GUID('{86F32B61-7667-11D2-A2D3-080009B6F22B}')
    _idlflags_ = ['oleautomation']
class IElementProperties2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control More Element Properties.'
    _iid_ = GUID('{7D019A0D-F450-48FE-8A78-A2F0CB8EF3A4}')
    _idlflags_ = ['oleautomation']
class IElementProperties3(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control More Element Properties.'
    _iid_ = GUID('{7D019A0E-F450-48FE-8A78-A2F0CB8EF3A4}')
    _idlflags_ = ['oleautomation']
class IElementShutdown(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the IElementShutdown interface.'
    _iid_ = GUID('{36313019-58B7-4509-89D8-0F573B69FD18}')
    _idlflags_ = ['oleautomation']
class IGraphicElement(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the Graphic Element object.'
    _iid_ = GUID('{C5C980F9-145E-11D3-9F88-00C04F6BC6A5}')
    _idlflags_ = ['oleautomation']
InkGraphic._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IInkGraphic, IBoundsProperties, IElement, IElementProperties, IElementProperties2, IElementProperties3, IElementShutdown, IGraphicElement, comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ITransform2D, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]

class IGraphicsContainer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the Graphics Container.'
    _iid_ = GUID('{D09411D1-4BB4-11D1-B6CC-080009B996CC}')
    _idlflags_ = ['oleautomation']
class ISelection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a collection of selectable objects.'
    _iid_ = GUID('{B1A1CA6D-A96C-11D1-8745-0000F8751720}')
    _idlflags_ = ['oleautomation']
class IExtentStack(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the extent stack.'
    _iid_ = GUID('{8FD414A3-403F-11D2-A2A9-080009B6F22B}')
    _idlflags_ = ['oleautomation']
IActiveView._methods_ = [
    COMMETHOD(['propget', helpstring(u'The full extent rectangle.')], HRESULT, 'FullExtent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'Extent' )),
    COMMETHOD(['propput', helpstring(u'The full extent rectangle.')], HRESULT, 'FullExtent',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'Extent' )),
    COMMETHOD(['propget', helpstring(u'The visible extent rectangle.')], HRESULT, 'Extent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'Extent' )),
    COMMETHOD(['propput', helpstring(u'The visible extent rectangle.')], HRESULT, 'Extent',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'Extent' )),
    COMMETHOD(['propget', helpstring(u'The screen display used by the view.')], HRESULT, 'ScreenDisplay',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IScreenDisplay)), 'screen' )),
    COMMETHOD(['propget', helpstring(u'The active graphics container.')], HRESULT, 'GraphicsContainer',
              ( ['retval', 'out'], POINTER(POINTER(IGraphicsContainer)), 'GraphicsContainer' )),
    COMMETHOD(['propget', helpstring(u'The map that tools and controls act on.')], HRESULT, 'FocusMap',
              ( ['retval', 'out'], POINTER(POINTER(IMap)), 'activeMap' )),
    COMMETHOD(['propputref', helpstring(u'The map that tools and controls act on.')], HRESULT, 'FocusMap',
              ( ['in'], POINTER(IMap), 'activeMap' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the focus map is activated.')], HRESULT, 'IsMapActivated',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsMapActivated' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the focus map is activated.')], HRESULT, 'IsMapActivated',
              ( ['in'], VARIANT_BOOL, 'IsMapActivated' )),
    COMMETHOD(['propget', helpstring(u'The selection.')], HRESULT, 'Selection',
              ( ['retval', 'out'], POINTER(POINTER(ISelection)), 'Selection' )),
    COMMETHOD(['propputref', helpstring(u'The selection.')], HRESULT, 'Selection',
              ( ['in'], POINTER(ISelection), 'Selection' )),
    COMMETHOD(['propget', helpstring(u'The tip text to display at the given location.')], HRESULT, 'TipText',
              ( ['in'], c_double, 'x' ),
              ( ['in'], c_double, 'y' ),
              ( ['retval', 'out'], POINTER(BSTR), 'TipText' )),
    COMMETHOD(['propget', helpstring(u'The device rectangle to export.')], HRESULT, 'ExportFrame',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.tagRECT), 'ExportFrame' )),
    COMMETHOD(['propget', helpstring(u'Indicates if scrollbars are visible.')], HRESULT, 'ShowScrollBars',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'ShowScrollBars' )),
    COMMETHOD(['propput', helpstring(u'Indicates if scrollbars are visible.')], HRESULT, 'ShowScrollBars',
              ( ['in'], VARIANT_BOOL, 'ShowScrollBars' )),
    COMMETHOD(['propget', helpstring(u'Indicates if rulers are visible.')], HRESULT, 'ShowRulers',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'ShowRulers' )),
    COMMETHOD(['propput', helpstring(u'Indicates if rulers are visible.')], HRESULT, 'ShowRulers',
              ( ['in'], VARIANT_BOOL, 'ShowRulers' )),
    COMMETHOD(['propget', helpstring(u'Indicates if selection is visible.')], HRESULT, 'ShowSelection',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'ShowRulers' )),
    COMMETHOD(['propput', helpstring(u'Indicates if selection is visible.')], HRESULT, 'ShowSelection',
              ( ['in'], VARIANT_BOOL, 'ShowRulers' )),
    COMMETHOD(['propget', helpstring(u'The extent stack.')], HRESULT, 'ExtentStack',
              ( ['retval', 'out'], POINTER(POINTER(IExtentStack)), 'ExtentStack' )),
    COMMETHOD(['propget', helpstring(u'The screen cache ID that is used to draw the specified phase. ')], HRESULT, 'ScreenCacheID',
              ( ['in'], esriViewDrawPhase, 'phase' ),
              ( ['in'], POINTER(IUnknown), 'Data' ),
              ( ['retval', 'out'], POINTER(c_short), 'cacheID' )),
    COMMETHOD([helpstring(u'Returns any maps present in the view at the given location.  Return value may be zero if there are no maps or the coordinate is not over a map.')], HRESULT, 'HitTestMap',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'Location' ),
              ( ['retval', 'out'], POINTER(POINTER(IMap)), 'Map' )),
    COMMETHOD([helpstring(u'Indicates if view is active or not.')], HRESULT, 'IsActive',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsActive' )),
    COMMETHOD([helpstring(u'Gives this view control of the specified window.')], HRESULT, 'Activate',
              ( [], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE, 'hWnd' )),
    COMMETHOD([helpstring(u'Another view takes over the associated window.')], HRESULT, 'Deactivate'),
    COMMETHOD([helpstring(u'Draws the view to the specified device context.')], HRESULT, 'Draw',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE, 'hDC' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'TrackCancel' )),
    COMMETHOD([helpstring(u'Renders the view to the specified DC.')], HRESULT, 'Output',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE, 'hDC' ),
              ( ['in'], c_int, 'Dpi' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.tagRECT), 'pixelBounds' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'VisibleBounds' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'TrackCancel' )),
    COMMETHOD([helpstring(u'Causes the entire view to draw.')], HRESULT, 'Refresh'),
    COMMETHOD([helpstring(u'Draws the specified view phase.  Use an envelope of zero to draw the entire phase.')], HRESULT, 'PartialRefresh',
              ( ['in'], esriViewDrawPhase, 'phase' ),
              ( ['in'], POINTER(IUnknown), 'Data' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'envelope' )),
    COMMETHOD([helpstring(u'Empties the view contents.')], HRESULT, 'Clear'),
    COMMETHOD([helpstring(u'Called by application when printer changes.')], HRESULT, 'PrinterChanged',
              ( ['in'], POINTER(comtypes.gen._7DB92CEC_CB65_420A_8737_FCD0722FD436_0_10_2.IPrinter), 'Printer' )),
    COMMETHOD([helpstring(u'Called by clients when view objects are modified.')], HRESULT, 'ContentsChanged'),
    COMMETHOD([helpstring(u"Call from your application's message loop to enable automatic resizing and keyboard accelerators.")], HRESULT, 'OnMessage',
              ( ['in'], c_ulong, 'msg' ),
              ( ['in'], UINT_PTR, 'wParam' ),
              ( ['in'], comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.LONG_PTR, 'lParam' )),
    COMMETHOD([helpstring(u'Called when a context menu should be displayed at the given xy location. Return menu that should be displayed.')], HRESULT, 'GetContextMenu',
              ( ['in'], c_double, 'x' ),
              ( ['in'], c_double, 'y' ),
              ( ['out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IUID)), 'clsidMenu' )),
]
################################################################
## code template for IActiveView implementation
##class IActiveView_Impl(object):
##    def FocusMap(self, activeMap):
##        u'The map that tools and controls act on.'
##        #return 
##
##    @property
##    def ExtentStack(self):
##        u'The extent stack.'
##        #return ExtentStack
##
##    @property
##    def TipText(self, x, y):
##        u'The tip text to display at the given location.'
##        #return TipText
##
##    def Deactivate(self):
##        u'Another view takes over the associated window.'
##        #return 
##
##    def GetContextMenu(self, x, y):
##        u'Called when a context menu should be displayed at the given xy location. Return menu that should be displayed.'
##        #return clsidMenu
##
##    def HitTestMap(self, Location):
##        u'Returns any maps present in the view at the given location.  Return value may be zero if there are no maps or the coordinate is not over a map.'
##        #return Map
##
##    @property
##    def ScreenCacheID(self, phase, Data):
##        u'The screen cache ID that is used to draw the specified phase. '
##        #return cacheID
##
##    def Draw(self, hDC, TrackCancel):
##        u'Draws the view to the specified device context.'
##        #return 
##
##    @property
##    def ScreenDisplay(self):
##        u'The screen display used by the view.'
##        #return screen
##
##    def _get(self):
##        u'Indicates if the focus map is activated.'
##        #return IsMapActivated
##    def _set(self, IsMapActivated):
##        u'Indicates if the focus map is activated.'
##    IsMapActivated = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if scrollbars are visible.'
##        #return ShowScrollBars
##    def _set(self, ShowScrollBars):
##        u'Indicates if scrollbars are visible.'
##    ShowScrollBars = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The visible extent rectangle.'
##        #return Extent
##    def _set(self, Extent):
##        u'The visible extent rectangle.'
##    Extent = property(_get, _set, doc = _set.__doc__)
##
##    def OnMessage(self, msg, wParam, lParam):
##        u"Call from your application's message loop to enable automatic resizing and keyboard accelerators."
##        #return 
##
##    @property
##    def GraphicsContainer(self):
##        u'The active graphics container.'
##        #return GraphicsContainer
##
##    def PrinterChanged(self, Printer):
##        u'Called by application when printer changes.'
##        #return 
##
##    def Clear(self):
##        u'Empties the view contents.'
##        #return 
##
##    def ContentsChanged(self):
##        u'Called by clients when view objects are modified.'
##        #return 
##
##    def Refresh(self):
##        u'Causes the entire view to draw.'
##        #return 
##
##    def Selection(self, Selection):
##        u'The selection.'
##        #return 
##
##    def _get(self):
##        u'Indicates if rulers are visible.'
##        #return ShowRulers
##    def _set(self, ShowRulers):
##        u'Indicates if rulers are visible.'
##    ShowRulers = property(_get, _set, doc = _set.__doc__)
##
##    def Output(self, hDC, Dpi, pixelBounds, VisibleBounds, TrackCancel):
##        u'Renders the view to the specified DC.'
##        #return 
##
##    def Activate(self, hWnd):
##        u'Gives this view control of the specified window.'
##        #return 
##
##    @property
##    def ExportFrame(self):
##        u'The device rectangle to export.'
##        #return ExportFrame
##
##    def PartialRefresh(self, phase, Data, envelope):
##        u'Draws the specified view phase.  Use an envelope of zero to draw the entire phase.'
##        #return 
##
##    def _get(self):
##        u'Indicates if selection is visible.'
##        #return ShowRulers
##    def _set(self, ShowRulers):
##        u'Indicates if selection is visible.'
##    ShowSelection = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The full extent rectangle.'
##        #return Extent
##    def _set(self, Extent):
##        u'The full extent rectangle.'
##    FullExtent = property(_get, _set, doc = _set.__doc__)
##
##    def IsActive(self):
##        u'Indicates if view is active or not.'
##        #return IsActive
##

class IMaplexRotationProperties(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the placement of rotated labels.'
    _iid_ = GUID('{20664808-77AF-65E1-FAEF-18E6F9EC732A}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'esriLabelRotationType'
esriRotateLabelGeographic = 0
esriRotateLabelArithmetic = 1
esriRotateLabelRadians = 2
esriRotateLabelAV3 = 3
esriLabelRotationType = c_int # enum
IMaplexRotationProperties._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates whether to rotate a label by attribute.')], HRESULT, 'Enable',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to rotate a label by attribute.')], HRESULT, 'Enable',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Defines the format the rotation field in.')], HRESULT, 'RotationType',
              ( ['retval', 'out'], POINTER(esriLabelRotationType), 'Type' )),
    COMMETHOD(['propput', helpstring(u'Defines the format the rotation field in.')], HRESULT, 'RotationType',
              ( ['in'], esriLabelRotationType, 'Type' )),
    COMMETHOD(['propget', helpstring(u'The attribute field that contains the label angle.')], HRESULT, 'RotationField',
              ( ['retval', 'out'], POINTER(BSTR), 'Field' )),
    COMMETHOD(['propput', helpstring(u'The attribute field that contains the label angle.')], HRESULT, 'RotationField',
              ( ['in'], BSTR, 'Field' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to draw the label perpendicular to the angle.')], HRESULT, 'PerpendicularToAngle',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to draw the label perpendicular to the angle.')], HRESULT, 'PerpendicularToAngle',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to draw the label aligned to the angle (no flip).')], HRESULT, 'AlignLabelToAngle',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to draw the label aligned to the angle (no flip).')], HRESULT, 'AlignLabelToAngle',
              ( ['in'], VARIANT_BOOL, 'flag' )),
]
################################################################
## code template for IMaplexRotationProperties implementation
##class IMaplexRotationProperties_Impl(object):
##    def _get(self):
##        u'Indicates whether to draw the label perpendicular to the angle.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether to draw the label perpendicular to the angle.'
##    PerpendicularToAngle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether to draw the label aligned to the angle (no flip).'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether to draw the label aligned to the angle (no flip).'
##    AlignLabelToAngle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether to rotate a label by attribute.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether to rotate a label by attribute.'
##    Enable = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The attribute field that contains the label angle.'
##        #return Field
##    def _set(self, Field):
##        u'The attribute field that contains the label angle.'
##    RotationField = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Defines the format the rotation field in.'
##        #return Type
##    def _set(self, Type):
##        u'Defines the format the rotation field in.'
##    RotationType = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'esriMobileServerMessageCodeEnum'
esriMobileServerMessageCode_MissingParameter = 11001
esriMobileServerMessageCode_InvalidParameter = 11002
esriMobileServerMessageCode_NotLicensed = 11003
esriMobileServerMessageCode_ImportFromMemoryFailure = 11004
esriMobileServerMessageCode_InvalidServerObject = 11005
esriMobileServerMessageCode_ObjectInitializationFailure = 11006
esriMobileServerMessageCode_ErrorProcessingRequest = 11007
esriMobileServerMessageCode_FindFailure = 11008
esriMobileServerMessageCode_GetBinaryFailure = 11009
esriMobileServerMessageCode_AttachToMemoryFailure = 11010
esriMobileServerMessageCode_ConstructStart = 11011
esriMobileServerMessageCode_ConstructFinish = 11012
esriMobileServerMessageCode_ExtInitSuccess = 11013
esriMobileServerMessageCode_ExtInitFailure = 11014
esriMobileServerMessageCode_SchemaLayerExtractFail = 11015
esriMobileServerMessageCode_InvalidRequest = 11016
esriMobileServerMessageCode_GetSchemaRequestError = 11017
esriMobileServerMessageCode_RequestReadFailure = 11018
esriMobileServerMessageCode_InvalidClientChecksum = 11019
esriMobileServerMessageCode_FatalServerError = 11020
esriMobileServerMessageCode_UnsupportedRequestName = 11021
esriMobileServerMessageCode_DBFieldMappingMismatch = 11022
esriMobileServerMessageCode_UseOfInvalidPointer = 11023
esriMobileServerMessageCode_NoExistingChecksumForVersion = 11024
esriMobileServerMessageCode_SettingDefaultClientVersion = 11025
esriMobileServerMessageCode_ClientServerVersions = 11026
esriMobileServerMessageCode_ClientVersionUnderBaseline = 11027
esriMobileServerMessageCode_ClientVersionReduction = 11028
esriMobileServerMessageCode_FlushUpdatesFailure = 11029
esriMobileServerMessageCode_GetFeatureCountFailure = 11030
esriMobileServerMessageCode_GetFeaturesFailure = 11031
esriMobileServerMessageCode_DownloadFeaturesFailure = 11032
esriMobileServerMessageCode_GetRasterTilesFailure = 11033
esriMobileServerMessageCode_CreateVersionFailure = 11034
esriMobileServerMessageCode_CloseVersionFailure = 11035
esriMobileServerMessageCode_UploadFeaturesFailure = 11036
esriMobileServerMessageCode_ServerVersionReduction = 11037
esriMobileServerMessageCode_SpatialReferenceDefault = 11038
esriMobileServerMessageCode_InvalidProperty = 11039
esriMobileServerMessageCode_FailedToSyncAttachInfos = 11040
esriMobileServerMessageCode_UnderlyingError = 11042
esriMobileServerMessageCode_DeleteCountMismatch = 11043
esriMobileServerMessageCode_InvalidLayerIndex = 11044
esriMobileServerMessageCode_InvalidFeatureLayer = 11045
esriMobileServerMessageCode_FailedToGetFeatureCursor = 11046
esriMobileServerMessageCode_FailedRetrievingSyncItems = 11047
esriMobileServerMessageCode_InvalidRasterLayer = 11048
esriMobileServerMessageCode_InvalidLayerCount = 11049
esriMobileServerMessageCode_LayerNotEditable = 11050
esriMobileServerMessageCode_FailedToGetVersionFeatureClass = 11051
esriMobileServerMessageCode_InvalidWorkspaceIndex = 11052
esriMobileServerMessageCode_InvalidVersionedWorkspace = 11053
esriMobileServerMessageCode_VersionAlreadyExists = 11054
esriMobileServerMessageCode_InvalidParentVersion = 11055
esriMobileServerMessageCode_FailedToCreateVersion = 11056
esriMobileServerMessageCode_InvalidChildVersion = 11057
esriMobileServerMessageCode_FailedToStartEditingWorkspace = 11058
esriMobileServerMessageCode_RequestedVersionNotFound = 11059
esriMobileServerMessageCode_InvalidDecomposedQuery = 11060
esriMobileServerMessageCode_FailedToCompressToJPEG = 11061
esriMobileServerMessageCode_FileNotFound = 11062
esriMobileServerMessageCode_FileAccessDenied = 11063
esriMobileServerMessageCode_FileInvalid = 11064
esriMobileServerMessageCode_DirectoryNotFound = 11065
esriMobileServerMessageCode_DirectoryAccessDenied = 11066
esriMobileServerMessageCode_DirectoryInvalid = 11067
esriMobileServerMessageCode_FileInvalidOrAccessDenied = 11068
esriMobileServerMessageCode_DirectoryInvalidOrAccessDenied = 11069
esriMobileServerMessageCode_InvalidServerEnvironment = 11070
esriMobileServerMessageCode_InvalidURLUseMIME = 11071
esriMobileServerMessageCode_ExportMapImageFailed = 11072
esriMobileServerMessageCode_PrepareMapServerFailed = 11073
esriMobileServerMessageCode_InvalidWorkspace = 11074
esriMobileServerMessageCode_DownloadAttachmentsFailure = 11075
esriMobileServerMessageCode_NoOutputDirectory = 11076
esriMobileServerMessageCode_InvalidExtentType = 11077
esriMobileServerMessageCode_NoRasterSupport = 11078
esriMobileServerMessageCode_CoreClassCreateFail = 11079
esriMobileServerMessageCode_FailedToCreateSchema = 11080
esriMobileServerMessageCode_FailedToAddField = 11081
esriMobileServerMessageCode_FailedToOpen = 11082
esriMobileServerMessageCode_InvalidExtent = 11083
esriMobileServerMessageCode_FailedToCreateDataPackage = 11084
esriMobileServerMessageCode_InvalidSpatialQueryFilter = 11085
esriMobileServerMessageCode_FailedToConvert = 11086
esriMobileServerMessageCode_SynchronizeFeatureStats = 11087
esriMobileServerMessageCode_FailedToGetRelatedAttachmentTable = 11088
esriMobileServerMessageCode_FailedToGetAttachmentInfo = 11089
esriMobileServerMessageCode_FailedToGetAttachmentData = 11090
esriMobileServerMessageCode_SynchronizeAttachmentStats = 11091
esriMobileServerMessageCode_SynchronizeAttachmentRate = 11092
esriMobileServerMessageCode_SynchronizeAttachmentInfosStats = 11093
esriMobileServerMessageCode_ImportChangesStats = 11094
esriMobileServerMessageCode_DeleteUploadDirFailure = 11095
esriMobileServerMessageCode_RowUpdateFailure = 11096
esriMobileServerMessageCode_FailedToCommitDataPackage = 11097
esriMobileServerMessageCode_InvalidGIDIndex = 11098
esriMobileServerMessageCode_InvalidVariantType = 11099
esriMobileServerMessageCode_ImportAttachmentsStats = 11100
esriMobileServerMessageCode_FailedParseParams = 11101
esriMobileServerMessageCode_FailedParseParam = 11102
esriMobileServerMessageCode_FailedParseReqParam = 11103
esriMobileServerMessageCode_FailedGenRep = 11104
esriMobileServerMessageCode_NoInserverConn = 11105
esriMobileServerMessageCode_NoArcGISServerConn = 11106
esriMobileServerMessageCode_FailedToCreateUploadsClient = 11107
esriMobileServerMessageCode_UploadedItemNotFound = 11108
esriMobileServerMessageCode_FailedToPopulateFDR = 11109
esriMobileServerMessageCode_FailedToSyncFeatures = 11110
esriMobileServerMessageCode_FailedToPopulateADR = 11111
esriMobileServerMessageCode_FailedToSyncAttach = 11112
esriMobileServerMessageCode_InvalidPolyGeometry = 11113
esriMobileServerMessageCode_FailedToRetrieveGIDs = 11114
esriMobileServerMessageCode_FailedToRetrieveRowsByGUID = 11115
esriMobileServerMessageCode_FailedToSetRowValues = 11116
esriMobileServerMessageCode_FailedToRetrieveCursor = 11117
esriMobileServerMessageCode_FailedToEstablishItem = 11118
esriMobileServerMessageCode_FailedToInitialize = 11119
esriMobileServerMessageCode_InvalidPointer = 11120
esriMobileServerMessageCode_FailedToOpenEvaluateDataPackage = 11121
esriMobileServerMessageCode_MobileSyncDebug = 11900
esriMobileServerMessageCodeEnum = c_int # enum
class MapServerRelationship(CoClass):
    u'The Map Server Relationship coclass contains information about a relationship if one exists.'
    _reg_clsid_ = GUID('{CDD2606D-6223-419E-ABC5-37DC9F83E0AE}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IMapServerRelationship(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Map Server Relationship Interface.'
    _iid_ = GUID('{74F78603-A0A0-4078-B653-17D733FE95FD}')
    _idlflags_ = ['oleautomation']
MapServerRelationship._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMapServerRelationship, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersionSupportGEN]


# values for enumeration 'esriRasterStretchStatsTypeEnum'
esriRasterStretchStats_AreaOfView = 0
esriRasterStretchStats_Dataset = 1
esriRasterStretchStats_GlobalStats = 2
esriRasterStretchStatsTypeEnum = c_int # enum
class IHTMLPopupInfo2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the HTML popup tool.'
    _iid_ = GUID('{8A038CDB-0430-40D9-B8CE-8B055F11D511}')
    _idlflags_ = ['oleautomation']
IHTMLPopupInfo2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates that all data for attachments will be retrieved.')], HRESULT, 'HTMLDownloadAttachmentData',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pDownloadAttachmentData' )),
    COMMETHOD(['propput', helpstring(u'Indicates that all data for attachments will be retrieved.')], HRESULT, 'HTMLDownloadAttachmentData',
              ( ['in'], VARIANT_BOOL, 'pDownloadAttachmentData' )),
    COMMETHOD([helpstring(u'The content is the XML text for the input feature, pOptions is an optional parameter.')], HRESULT, 'HTMLOutput',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeature), 'pFeature' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet), 'pOptions' ),
              ( ['retval', 'out'], POINTER(BSTR), 'pHtml' )),
]
################################################################
## code template for IHTMLPopupInfo2 implementation
##class IHTMLPopupInfo2_Impl(object):
##    def HTMLOutput(self, pFeature, pOptions):
##        u'The content is the XML text for the input feature, pOptions is an optional parameter.'
##        #return pHtml
##
##    def _get(self):
##        u'Indicates that all data for attachments will be retrieved.'
##        #return pDownloadAttachmentData
##    def _set(self, pDownloadAttachmentData):
##        u'Indicates that all data for attachments will be retrieved.'
##    HTMLDownloadAttachmentData = property(_get, _set, doc = _set.__doc__)
##

class IRasterItemDescriptions(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties of a list of raster item descriptions for adding a raster.'
    _iid_ = GUID('{8304AF31-EE94-43CB-8FBB-F3E1FF096B18}')
    _idlflags_ = ['oleautomation']
class IRasterItemDescription(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties of a raster item description for adding a raster.'
    _iid_ = GUID('{E7A23083-B9BB-41BF-9253-C148B0AB033E}')
    _idlflags_ = ['oleautomation']
IRasterItemDescriptions._methods_ = [
    COMMETHOD(['propget', helpstring(u'The raster item description count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propget', helpstring(u'The raster item description at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IRasterItemDescription)), 'pItemDescription' )),
    COMMETHOD([helpstring(u'Removes the raster item description at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all raster item descriptions.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Adds a raster item description.')], HRESULT, 'Add',
              ( ['in'], POINTER(IRasterItemDescription), 'pItemDescription' )),
    COMMETHOD([helpstring(u'Adds a raster item description at the specified position.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(IRasterItemDescription), 'pItemDescription' )),
]
################################################################
## code template for IRasterItemDescriptions implementation
##class IRasterItemDescriptions_Impl(object):
##    @property
##    def Count(self):
##        u'The raster item description count.'
##        #return pCount
##
##    def Insert(self, Index, pItemDescription):
##        u'Adds a raster item description at the specified position.'
##        #return 
##
##    def Remove(self, Index):
##        u'Removes the raster item description at the specified position.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'The raster item description at the specified position.'
##        #return pItemDescription
##
##    def RemoveAll(self):
##        u'Removes all raster item descriptions.'
##        #return 
##
##    def Add(self, pItemDescription):
##        u'Adds a raster item description.'
##        #return 
##

class IVerticalLegendItem(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that work with legend item arrangement.'
    _iid_ = GUID('{8A7A1787-79B2-11D2-87D5-0000F8751720}')
    _idlflags_ = ['oleautomation']
IVerticalLegendItem._methods_ = [
    COMMETHOD(['propget', helpstring(u'Legend item arrangement.')], HRESULT, 'Arrangement',
              ( ['retval', 'out'], POINTER(esriLegendItemArrangement), 'Arrangement' )),
    COMMETHOD(['propput', helpstring(u'Legend item arrangement.')], HRESULT, 'Arrangement',
              ( ['in'], esriLegendItemArrangement, 'Arrangement' )),
]
################################################################
## code template for IVerticalLegendItem implementation
##class IVerticalLegendItem_Impl(object):
##    def _get(self):
##        u'Legend item arrangement.'
##        #return Arrangement
##    def _set(self, Arrangement):
##        u'Legend item arrangement.'
##    Arrangement = property(_get, _set, doc = _set.__doc__)
##

class IGeoReferenceEvents(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to events that occur when the state of the layer changes.'
    _iid_ = GUID('{BC2E6ACB-EE59-4B6D-91CE-4E1743D403B3}')
    _idlflags_ = ['oleautomation']
IGeoReferenceEvents._methods_ = [
    COMMETHOD([helpstring(u'Fired when the layer has a change to the georeference.')], HRESULT, 'GeoReferenceModified'),
    COMMETHOD([helpstring(u'Fired when the layer has a change to the georeference.')], HRESULT, 'GeoReferenceReset'),
]
################################################################
## code template for IGeoReferenceEvents implementation
##class IGeoReferenceEvents_Impl(object):
##    def GeoReferenceReset(self):
##        u'Fired when the layer has a change to the georeference.'
##        #return 
##
##    def GeoReferenceModified(self):
##        u'Fired when the layer has a change to the georeference.'
##        #return 
##

class IImageServiceInfo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties of an image service.'
    _iid_ = GUID('{BFCD28A7-B02F-4C5D-AA7E-D0BA474D5192}')
    _idlflags_ = ['oleautomation']
class IImageServiceInfo2(IImageServiceInfo):
    _case_insensitive_ = True
    u'Provides access to the properties of an image service.'
    _iid_ = GUID('{E569C393-70B6-497C-B999-BB246D00A8B7}')
    _idlflags_ = ['oleautomation']
class IImageServiceInfo3(IImageServiceInfo2):
    _case_insensitive_ = True
    u'Provides access to the properties of an image service.'
    _iid_ = GUID('{021909FC-59E7-4082-900C-5BBEF737C92C}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'esriImageServiceDataType'
esriImageServiceDataTypeGeneric = 0
esriImageServiceDataTypeRGB = 1
esriImageServiceDataTypeElevation = 2
esriImageServiceDataTypeThematic = 3
esriImageServiceDataTypeProcessed = 4
esriImageServiceDataType = c_int # enum

# values for enumeration 'esriImageServiceSourceType'
esriImageServiceSourceTypeDataset = 0
esriImageServiceSourceTypeLayer = 1
esriImageServiceSourceTypeCatalog = 2
esriImageServiceSourceTypeMosaicDataset = 3
esriImageServiceSourceType = c_int # enum
IImageServiceInfo._methods_ = [
    COMMETHOD(['propget', helpstring(u'The name of the image service.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'pName' )),
    COMMETHOD(['propget', helpstring(u'The description of the image service.')], HRESULT, 'Description',
              ( ['retval', 'out'], POINTER(BSTR), 'pDescrition' )),
    COMMETHOD(['propget', helpstring(u'The spatial reference of the image service.')], HRESULT, 'SpatialReference',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference)), 'ppSpatialReference' )),
    COMMETHOD(['propget', helpstring(u'The extent of the image service.')], HRESULT, 'Extent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'pExtent' )),
    COMMETHOD([helpstring(u'Gets the pxiel size of the image service, in its native units.')], HRESULT, 'GetPixelSize',
              ( ['out'], POINTER(c_double), 'pDx' ),
              ( ['out'], POINTER(c_double), 'pDy' )),
    COMMETHOD([helpstring(u'Gets the statistics of a given band.')], HRESULT, 'GetStatistics',
              ( ['in'], c_int, 'iBand' ),
              ( ['out'], POINTER(c_double), 'pMin' ),
              ( ['out'], POINTER(c_double), 'pMax' ),
              ( ['out'], POINTER(c_double), 'pMean' ),
              ( ['out'], POINTER(c_double), 'pStdv' )),
    COMMETHOD(['propget', helpstring(u'The number of bands.')], HRESULT, 'BandCount',
              ( ['retval', 'out'], POINTER(c_int), 'pBandCount' )),
    COMMETHOD(['propget', helpstring(u'The pixel type of the image service.')], HRESULT, 'PixelType',
              ( ['retval', 'out'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.rstPixelType), 'pPixelType' )),
    COMMETHOD(['propget', helpstring(u'The NoData (background) value of the image service.')], HRESULT, 'NoData',
              ( ['retval', 'out'], POINTER(VARIANT), 'pNoData' )),
    COMMETHOD(['propget', helpstring(u'The maximum visible pixel size.')], HRESULT, 'MaximumPixelSize',
              ( ['retval', 'out'], POINTER(c_double), 'pMaxPixelSize' )),
    COMMETHOD(['propget', helpstring(u'The minimum visible pixel size.')], HRESULT, 'MinimumPixelSize',
              ( ['retval', 'out'], POINTER(c_double), 'pMinPixelSize' )),
    COMMETHOD(['propget', helpstring(u'Copyright information associated with the image service.')], HRESULT, 'CopyrightText',
              ( ['retval', 'out'], POINTER(BSTR), 'pCopyright' )),
    COMMETHOD(['propput', helpstring(u'Copyright information associated with the image service.')], HRESULT, 'CopyrightText',
              ( ['in'], BSTR, 'pCopyright' )),
    COMMETHOD(['propget', helpstring(u'The data type of the image service.')], HRESULT, 'ServiceDataType',
              ( ['retval', 'out'], POINTER(esriImageServiceDataType), 'pDataType' )),
    COMMETHOD(['propput', helpstring(u'The data type of the image service.')], HRESULT, 'ServiceDataType',
              ( ['in'], esriImageServiceDataType, 'pDataType' )),
    COMMETHOD(['propput', helpstring(u'The default service properties.')], HRESULT, 'DefaultServiceProperties',
              ( ['in'], BSTR, 'pServiceProperties' )),
    COMMETHOD(['propget', helpstring(u'The default service properties.')], HRESULT, 'DefaultServiceProperties',
              ( ['retval', 'out'], POINTER(BSTR), 'pServiceProperties' )),
    COMMETHOD(['propget', helpstring(u'The maximum number of colums this service supports.')], HRESULT, 'MaxNCols',
              ( ['retval', 'out'], POINTER(c_int), 'pMaxNCols' )),
    COMMETHOD(['propget', helpstring(u'The maximum number of rows this service supports.')], HRESULT, 'MaxNRows',
              ( ['retval', 'out'], POINTER(c_int), 'pMaxNRows' )),
    COMMETHOD(['propget', helpstring(u'The image service data source type.')], HRESULT, 'ServiceSourceType',
              ( ['retval', 'out'], POINTER(esriImageServiceSourceType), 'pServiceSourceType' )),
    COMMETHOD(['propput', helpstring(u'The image service data source type.')], HRESULT, 'ServiceSourceType',
              ( ['in'], esriImageServiceSourceType, 'pServiceSourceType' )),
]
################################################################
## code template for IImageServiceInfo implementation
##class IImageServiceInfo_Impl(object):
##    @property
##    def MaximumPixelSize(self):
##        u'The maximum visible pixel size.'
##        #return pMaxPixelSize
##
##    @property
##    def NoData(self):
##        u'The NoData (background) value of the image service.'
##        #return pNoData
##
##    def _get(self):
##        u'Copyright information associated with the image service.'
##        #return pCopyright
##    def _set(self, pCopyright):
##        u'Copyright information associated with the image service.'
##    CopyrightText = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        u'The name of the image service.'
##        #return pName
##
##    @property
##    def MinimumPixelSize(self):
##        u'The minimum visible pixel size.'
##        #return pMinPixelSize
##
##    def GetStatistics(self, iBand):
##        u'Gets the statistics of a given band.'
##        #return pMin, pMax, pMean, pStdv
##
##    @property
##    def PixelType(self):
##        u'The pixel type of the image service.'
##        #return pPixelType
##
##    def GetPixelSize(self):
##        u'Gets the pxiel size of the image service, in its native units.'
##        #return pDx, pDy
##
##    @property
##    def MaxNRows(self):
##        u'The maximum number of rows this service supports.'
##        #return pMaxNRows
##
##    @property
##    def SpatialReference(self):
##        u'The spatial reference of the image service.'
##        #return ppSpatialReference
##
##    @property
##    def MaxNCols(self):
##        u'The maximum number of colums this service supports.'
##        #return pMaxNCols
##
##    def _get(self):
##        u'The default service properties.'
##        #return pServiceProperties
##    def _set(self, pServiceProperties):
##        u'The default service properties.'
##    DefaultServiceProperties = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Extent(self):
##        u'The extent of the image service.'
##        #return pExtent
##
##    @property
##    def BandCount(self):
##        u'The number of bands.'
##        #return pBandCount
##
##    def _get(self):
##        u'The image service data source type.'
##        #return pServiceSourceType
##    def _set(self, pServiceSourceType):
##        u'The image service data source type.'
##    ServiceSourceType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The data type of the image service.'
##        #return pDataType
##    def _set(self, pDataType):
##        u'The data type of the image service.'
##    ServiceDataType = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Description(self):
##        u'The description of the image service.'
##        #return pDescrition
##

IImageServiceInfo2._methods_ = [
    COMMETHOD(['propget', helpstring(u'The list of visible field names.')], HRESULT, 'AllowedFields',
              ( ['retval', 'out'], POINTER(BSTR), 'pAllowedFields' )),
    COMMETHOD(['propput', helpstring(u'The list of visible field names.')], HRESULT, 'AllowedFields',
              ( ['in'], BSTR, 'pAllowedFields' )),
    COMMETHOD(['propget', helpstring(u'The list of allowed client controllable transmition compressions.')], HRESULT, 'AllowedCompressions',
              ( ['retval', 'out'], POINTER(BSTR), 'pAllowedCompressions' )),
    COMMETHOD(['propput', helpstring(u'The list of allowed client controllable transmition compressions.')], HRESULT, 'AllowedCompressions',
              ( ['in'], BSTR, 'pAllowedCompressions' )),
    COMMETHOD(['propget', helpstring(u'The list of allowed client controllable mosaic methods.')], HRESULT, 'AllowedMosaicMethods',
              ( ['retval', 'out'], POINTER(BSTR), 'pAllowedMethods' )),
    COMMETHOD(['propput', helpstring(u'The list of allowed client controllable mosaic methods.')], HRESULT, 'AllowedMosaicMethods',
              ( ['in'], BSTR, 'pAllowedMethods' )),
    COMMETHOD(['propget', helpstring(u'The level of item metadata details.')], HRESULT, 'AllowedItemMetadata',
              ( ['retval', 'out'], POINTER(BSTR), 'pLOD' )),
    COMMETHOD(['propput', helpstring(u'The level of item metadata details.')], HRESULT, 'AllowedItemMetadata',
              ( ['in'], BSTR, 'pLOD' )),
    COMMETHOD(['propget', helpstring(u'The maximum number of records returned for query results.')], HRESULT, 'MaxRecordCount',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propput', helpstring(u'The maximum number of records returned for query results.')], HRESULT, 'MaxRecordCount',
              ( ['in'], c_int, 'pCount' )),
    COMMETHOD(['propget', helpstring(u'The maximum number of images allowed for download.')], HRESULT, 'MaxDownloadImageCount',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propput', helpstring(u'The maximum number of images allowed for download.')], HRESULT, 'MaxDownloadImageCount',
              ( ['in'], c_int, 'pCount' )),
    COMMETHOD(['propget', helpstring(u'The maximum number of images allowed for mosaic.')], HRESULT, 'MaxMosaicImageCount',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propput', helpstring(u'The maximum number of images allowed for mosaic.')], HRESULT, 'MaxMosaicImageCount',
              ( ['in'], c_int, 'pCount' )),
    COMMETHOD(['propput', helpstring(u'The maximum number of colums this service supports.')], HRESULT, 'MaxNCols',
              ( ['in'], c_int, 'rhs' )),
    COMMETHOD(['propput', helpstring(u'The maximum number of rows this service supports.')], HRESULT, 'MaxNRows',
              ( ['in'], c_int, 'rhs' )),
    COMMETHOD(['propget', helpstring(u'The default transmission compression, None, LZ77, JPEG.')], HRESULT, 'DefaultCompression',
              ( ['retval', 'out'], POINTER(BSTR), 'pCompression' )),
    COMMETHOD(['propput', helpstring(u'The default transmission compression, None, LZ77, JPEG.')], HRESULT, 'DefaultCompression',
              ( ['in'], BSTR, 'pCompression' )),
    COMMETHOD(['propget', helpstring(u'The default transmission compression quality (1-100).')], HRESULT, 'DefaultCompressionQuality',
              ( ['retval', 'out'], POINTER(c_int), 'pQuality' )),
    COMMETHOD(['propput', helpstring(u'The default transmission compression quality (1-100).')], HRESULT, 'DefaultCompressionQuality',
              ( ['in'], c_int, 'pQuality' )),
    COMMETHOD(['propget', helpstring(u'The default resampling method.')], HRESULT, 'DefaultResamplingMethod',
              ( ['retval', 'out'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.rstResamplingTypes), 'pResamplingMethod' )),
    COMMETHOD(['propput', helpstring(u'The default resampling method.')], HRESULT, 'DefaultResamplingMethod',
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.rstResamplingTypes, 'pResamplingMethod' )),
    COMMETHOD(['propget', helpstring(u'The default mosaic method.')], HRESULT, 'DefaultMosaicMethod',
              ( ['retval', 'out'], POINTER(comtypes.gen._8F0541A3_D5BE_4B3F_A8D9_062D5579E19B_0_10_2.esriMosaicMethod), 'pMosaicMethod' )),
    COMMETHOD(['propput', helpstring(u'The default mosaic method.')], HRESULT, 'DefaultMosaicMethod',
              ( ['in'], comtypes.gen._8F0541A3_D5BE_4B3F_A8D9_062D5579E19B_0_10_2.esriMosaicMethod, 'pMosaicMethod' )),
    COMMETHOD(['propget', helpstring(u'Indicates if output can be generated in BSQ pixel interleave format.')], HRESULT, 'SupportBSQ',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pBSQ' )),
    COMMETHOD(['propput', helpstring(u'Indicates if output can be generated in BSQ pixel interleave format.')], HRESULT, 'SupportBSQ',
              ( ['in'], VARIANT_BOOL, 'pBSQ' )),
    COMMETHOD(['propget', helpstring(u'Indicates if time is supported.')], HRESULT, 'SupportsTime',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'supports' )),
    COMMETHOD(['propput', helpstring(u'Indicates if time is supported.')], HRESULT, 'SupportsTime',
              ( ['in'], VARIANT_BOOL, 'supports' )),
    COMMETHOD(['propget', helpstring(u'The start time field name.')], HRESULT, 'StartTimeFieldName',
              ( ['retval', 'out'], POINTER(BSTR), 'pFieldName' )),
    COMMETHOD(['propput', helpstring(u'The start time field name.')], HRESULT, 'StartTimeFieldName',
              ( ['in'], BSTR, 'pFieldName' )),
    COMMETHOD(['propget', helpstring(u'The end time field name.')], HRESULT, 'EndTimeFieldName',
              ( ['retval', 'out'], POINTER(BSTR), 'pFieldName' )),
    COMMETHOD(['propput', helpstring(u'The end time field name.')], HRESULT, 'EndTimeFieldName',
              ( ['in'], BSTR, 'pFieldName' )),
    COMMETHOD(['propget', helpstring(u'The time value format.')], HRESULT, 'TimeValueFormat',
              ( ['retval', 'out'], POINTER(BSTR), 'pTimeFormat' )),
    COMMETHOD(['propput', helpstring(u'The time value format.')], HRESULT, 'TimeValueFormat',
              ( ['in'], BSTR, 'pTimeFormat' )),
    COMMETHOD(['propget', helpstring(u'The time reference.')], HRESULT, 'TimeReference',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITimeReference)), 'ppTimeReference' )),
    COMMETHOD(['propputref', helpstring(u'The time reference.')], HRESULT, 'TimeReference',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITimeReference), 'ppTimeReference' )),
    COMMETHOD(['propget', helpstring(u'The time extent.')], HRESULT, 'TimeExtent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITimeExtent)), 'ppTimeExtent' )),
    COMMETHOD(['propputref', helpstring(u'The time extent.')], HRESULT, 'TimeExtent',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITimeExtent), 'ppTimeExtent' )),
]
################################################################
## code template for IImageServiceInfo2 implementation
##class IImageServiceInfo2_Impl(object):
##    def _get(self):
##        u'The maximum number of records returned for query results.'
##        #return pCount
##    def _set(self, pCount):
##        u'The maximum number of records returned for query results.'
##    MaxRecordCount = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The maximum number of images allowed for mosaic.'
##        #return pCount
##    def _set(self, pCount):
##        u'The maximum number of images allowed for mosaic.'
##    MaxMosaicImageCount = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The time value format.'
##        #return pTimeFormat
##    def _set(self, pTimeFormat):
##        u'The time value format.'
##    TimeValueFormat = property(_get, _set, doc = _set.__doc__)
##
##    def TimeReference(self, ppTimeReference):
##        u'The time reference.'
##        #return 
##
##    def _get(self):
##        u'The maximum number of images allowed for download.'
##        #return pCount
##    def _set(self, pCount):
##        u'The maximum number of images allowed for download.'
##    MaxDownloadImageCount = property(_get, _set, doc = _set.__doc__)
##
##    def TimeExtent(self, ppTimeExtent):
##        u'The time extent.'
##        #return 
##
##    def _get(self):
##        u'Indicates if output can be generated in BSQ pixel interleave format.'
##        #return pBSQ
##    def _set(self, pBSQ):
##        u'Indicates if output can be generated in BSQ pixel interleave format.'
##    SupportBSQ = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The default resampling method.'
##        #return pResamplingMethod
##    def _set(self, pResamplingMethod):
##        u'The default resampling method.'
##    DefaultResamplingMethod = property(_get, _set, doc = _set.__doc__)
##
##    def _set(self, rhs):
##        u'The maximum number of colums this service supports.'
##    MaxNCols = property(fset = _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The list of visible field names.'
##        #return pAllowedFields
##    def _set(self, pAllowedFields):
##        u'The list of visible field names.'
##    AllowedFields = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The default transmission compression quality (1-100).'
##        #return pQuality
##    def _set(self, pQuality):
##        u'The default transmission compression quality (1-100).'
##    DefaultCompressionQuality = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if time is supported.'
##        #return supports
##    def _set(self, supports):
##        u'Indicates if time is supported.'
##    SupportsTime = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The level of item metadata details.'
##        #return pLOD
##    def _set(self, pLOD):
##        u'The level of item metadata details.'
##    AllowedItemMetadata = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The start time field name.'
##        #return pFieldName
##    def _set(self, pFieldName):
##        u'The start time field name.'
##    StartTimeFieldName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The end time field name.'
##        #return pFieldName
##    def _set(self, pFieldName):
##        u'The end time field name.'
##    EndTimeFieldName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The list of allowed client controllable transmition compressions.'
##        #return pAllowedCompressions
##    def _set(self, pAllowedCompressions):
##        u'The list of allowed client controllable transmition compressions.'
##    AllowedCompressions = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The default mosaic method.'
##        #return pMosaicMethod
##    def _set(self, pMosaicMethod):
##        u'The default mosaic method.'
##    DefaultMosaicMethod = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The default transmission compression, None, LZ77, JPEG.'
##        #return pCompression
##    def _set(self, pCompression):
##        u'The default transmission compression, None, LZ77, JPEG.'
##    DefaultCompression = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The list of allowed client controllable mosaic methods.'
##        #return pAllowedMethods
##    def _set(self, pAllowedMethods):
##        u'The list of allowed client controllable mosaic methods.'
##    AllowedMosaicMethods = property(_get, _set, doc = _set.__doc__)
##
##    def _set(self, rhs):
##        u'The maximum number of rows this service supports.'
##    MaxNRows = property(fset = _set, doc = _set.__doc__)
##

class IRasterFunctionInfos(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties of a list of raster function info.'
    _iid_ = GUID('{DF6C613A-9D6D-4207-A603-98714D60A317}')
    _idlflags_ = ['oleautomation']
class IRasterTypeInfos(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties of a list of raster type infos.'
    _iid_ = GUID('{8A248164-DE10-40BA-AB38-F324B65C8C65}')
    _idlflags_ = ['oleautomation']
IImageServiceInfo3._methods_ = [
    COMMETHOD(['propget', helpstring(u'The histogram of a given band.')], HRESULT, 'Histograms',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._8F0541A3_D5BE_4B3F_A8D9_062D5579E19B_0_10_2.IRasterHistograms)), 'ppHistograms' )),
    COMMETHOD(['propget', helpstring(u'The raster colormap.')], HRESULT, 'Colormap',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterColormap)), 'ppColormap' )),
    COMMETHOD([helpstring(u'Get the histogram of a given band.')], HRESULT, 'GetHistogram',
              ( ['in'], c_int, 'iBand' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._8F0541A3_D5BE_4B3F_A8D9_062D5579E19B_0_10_2.IRasterHistogram)), 'ppHistogram' )),
    COMMETHOD(['propget', helpstring(u'The list of available server raster functions.')], HRESULT, 'RasterFunctions',
              ( ['retval', 'out'], POINTER(POINTER(IRasterFunctionInfos)), 'ppFunctionInfos' )),
    COMMETHOD(['propputref', helpstring(u'The list of available server raster functions.')], HRESULT, 'RasterFunctions',
              ( ['in'], POINTER(IRasterFunctionInfos), 'ppFunctionInfos' )),
    COMMETHOD(['propget', helpstring(u'The list of allowed raster type names for adding rasters.')], HRESULT, 'RasterTypes',
              ( ['retval', 'out'], POINTER(POINTER(IRasterTypeInfos)), 'ppTypeInfos' )),
    COMMETHOD(['propputref', helpstring(u'The list of allowed raster type names for adding rasters.')], HRESULT, 'RasterTypes',
              ( ['in'], POINTER(IRasterTypeInfos), 'ppTypeInfos' )),
    COMMETHOD(['propget', helpstring(u'The list of available mensuration capabilities.')], HRESULT, 'MensurationCapabilities',
              ( ['retval', 'out'], POINTER(BSTR), 'pCapabilities' )),
    COMMETHOD(['propput', helpstring(u'The list of available mensuration capabilities.')], HRESULT, 'MensurationCapabilities',
              ( ['in'], BSTR, 'pCapabilities' )),
    COMMETHOD(['propget', helpstring(u'Indicates if a raster attribute table exists.')], HRESULT, 'HasRasterAttributeTable',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pHasTable' )),
    COMMETHOD(['propput', helpstring(u'Indicates if a raster attribute table exists.')], HRESULT, 'HasRasterAttributeTable',
              ( ['in'], VARIANT_BOOL, 'pHasTable' )),
    COMMETHOD(['propget', helpstring(u'The minimum visible scale for the service.')], HRESULT, 'MinScale',
              ( ['retval', 'out'], POINTER(c_double), 'Scale' )),
    COMMETHOD(['propput', helpstring(u'The minimum visible scale for the service.')], HRESULT, 'MinScale',
              ( ['in'], c_double, 'Scale' )),
    COMMETHOD(['propget', helpstring(u'The maximum visible scale for the service.')], HRESULT, 'MaxScale',
              ( ['retval', 'out'], POINTER(c_double), 'Scale' )),
    COMMETHOD(['propput', helpstring(u'The maximum visible scale for the service.')], HRESULT, 'MaxScale',
              ( ['in'], c_double, 'Scale' )),
    COMMETHOD(['propput', helpstring(u'The minimum visible pixel size for the service.')], HRESULT, 'MinimumPixelSize',
              ( ['in'], c_double, 'rhs' )),
    COMMETHOD(['propput', helpstring(u'The maximum visible pixel size for the service.')], HRESULT, 'MaximumPixelSize',
              ( ['in'], c_double, 'rhs' )),
]
################################################################
## code template for IImageServiceInfo3 implementation
##class IImageServiceInfo3_Impl(object):
##    def _set(self, rhs):
##        u'The maximum visible pixel size for the service.'
##    MaximumPixelSize = property(fset = _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The list of available mensuration capabilities.'
##        #return pCapabilities
##    def _set(self, pCapabilities):
##        u'The list of available mensuration capabilities.'
##    MensurationCapabilities = property(_get, _set, doc = _set.__doc__)
##
##    def RasterTypes(self, ppTypeInfos):
##        u'The list of allowed raster type names for adding rasters.'
##        #return 
##
##    def _set(self, rhs):
##        u'The minimum visible pixel size for the service.'
##    MinimumPixelSize = property(fset = _set, doc = _set.__doc__)
##
##    @property
##    def Histograms(self):
##        u'The histogram of a given band.'
##        #return ppHistograms
##
##    def _get(self):
##        u'The maximum visible scale for the service.'
##        #return Scale
##    def _set(self, Scale):
##        u'The maximum visible scale for the service.'
##    MaxScale = property(_get, _set, doc = _set.__doc__)
##
##    def GetHistogram(self, iBand):
##        u'Get the histogram of a given band.'
##        #return ppHistogram
##
##    def _get(self):
##        u'Indicates if a raster attribute table exists.'
##        #return pHasTable
##    def _set(self, pHasTable):
##        u'Indicates if a raster attribute table exists.'
##    HasRasterAttributeTable = property(_get, _set, doc = _set.__doc__)
##
##    def RasterFunctions(self, ppFunctionInfos):
##        u'The list of available server raster functions.'
##        #return 
##
##    def _get(self):
##        u'The minimum visible scale for the service.'
##        #return Scale
##    def _set(self, Scale):
##        u'The minimum visible scale for the service.'
##    MinScale = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Colormap(self):
##        u'The raster colormap.'
##        #return ppColormap
##

class INestedLegendItem(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that work with nested legend items.'
    _iid_ = GUID('{3B09454D-C9D1-11D3-92FB-00600802E603}')
    _idlflags_ = ['oleautomation']
INestedLegendItem._methods_ = [
    COMMETHOD(['propput', helpstring(u'Symbol used to draw outlines.')], HRESULT, 'OutlineSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IFillSymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'Symbol used to draw outlines.')], HRESULT, 'OutlineSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IFillSymbol)), 'Symbol' )),
    COMMETHOD(['propput', helpstring(u'Symbol used to draw the leader lines.')], HRESULT, 'LeaderSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ILineSymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'Symbol used to draw the leader lines.')], HRESULT, 'LeaderSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ILineSymbol)), 'Symbol' )),
    COMMETHOD(['propput', helpstring(u'Distance that the leaders extend past the circles (points).')], HRESULT, 'LeaderOverhang',
              ( ['in'], c_double, 'LeaderOverhang' )),
    COMMETHOD(['propget', helpstring(u'Distance that the leaders extend past the circles (points).')], HRESULT, 'LeaderOverhang',
              ( ['retval', 'out'], POINTER(c_double), 'LeaderOverhang' )),
    COMMETHOD(['propput', helpstring(u'Indicates if text automatically sizes to fit the markers.')], HRESULT, 'AutoLayout',
              ( ['in'], VARIANT_BOOL, 'AutoLayout' )),
    COMMETHOD(['propget', helpstring(u'Indicates if text automatically sizes to fit the markers.')], HRESULT, 'AutoLayout',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'AutoLayout' )),
    COMMETHOD(['propput', helpstring(u'Indicates if only the first and last markers are labeled.')], HRESULT, 'LabelEnds',
              ( ['in'], VARIANT_BOOL, 'LabelEnds' )),
    COMMETHOD(['propget', helpstring(u'Indicates if only the first and last markers are labeled.')], HRESULT, 'LabelEnds',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'LabelEnds' )),
    COMMETHOD(['propput', helpstring(u'Indicates if only the marker outlines are drawn.')], HRESULT, 'ShowOutlines',
              ( ['in'], VARIANT_BOOL, 'ShowOutlines' )),
    COMMETHOD(['propget', helpstring(u'Indicates if only the marker outlines are drawn.')], HRESULT, 'ShowOutlines',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'ShowOutlines' )),
    COMMETHOD(['propget', helpstring(u'Horizontal alignment of markers.')], HRESULT, 'HorizontalAlignment',
              ( ['retval', 'out'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.esriTextHorizontalAlignment), 'horizAlignment' )),
    COMMETHOD(['propput', helpstring(u'Horizontal alignment of markers.')], HRESULT, 'HorizontalAlignment',
              ( ['in'], comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.esriTextHorizontalAlignment, 'horizAlignment' )),
]
################################################################
## code template for INestedLegendItem implementation
##class INestedLegendItem_Impl(object):
##    def _get(self):
##        u'Symbol used to draw the leader lines.'
##        #return Symbol
##    def _set(self, Symbol):
##        u'Symbol used to draw the leader lines.'
##    LeaderSymbol = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if only the first and last markers are labeled.'
##        #return LabelEnds
##    def _set(self, LabelEnds):
##        u'Indicates if only the first and last markers are labeled.'
##    LabelEnds = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Distance that the leaders extend past the circles (points).'
##        #return LeaderOverhang
##    def _set(self, LeaderOverhang):
##        u'Distance that the leaders extend past the circles (points).'
##    LeaderOverhang = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Horizontal alignment of markers.'
##        #return horizAlignment
##    def _set(self, horizAlignment):
##        u'Horizontal alignment of markers.'
##    HorizontalAlignment = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if text automatically sizes to fit the markers.'
##        #return AutoLayout
##    def _set(self, AutoLayout):
##        u'Indicates if text automatically sizes to fit the markers.'
##    AutoLayout = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if only the marker outlines are drawn.'
##        #return ShowOutlines
##    def _set(self, ShowOutlines):
##        u'Indicates if only the marker outlines are drawn.'
##    ShowOutlines = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Symbol used to draw outlines.'
##        #return Symbol
##    def _set(self, Symbol):
##        u'Symbol used to draw outlines.'
##    OutlineSymbol = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'esriRasterSelectionMaskOp'
esriRasterSelectionMaskSET = 0
esriRasterSelectionMaskCLEAR = 1
esriRasterSelectionMaskINVERT = 2
esriRasterSelectionMaskCOPY = 3
esriRasterSelectionMaskAND = 4
esriRasterSelectionMaskOp = c_int # enum
class IMapCacheStorageFormatConvertor(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to methods that convert cache format.'
    _iid_ = GUID('{60E74BEA-9935-4116-93FE-90D007BF979D}')
    _idlflags_ = ['oleautomation']
IMapCacheStorageFormatConvertor._methods_ = [
    COMMETHOD(['propget', helpstring(u'The source cache location.')], HRESULT, 'TileCachePath',
              ( ['retval', 'out'], POINTER(BSTR), 'ppCacheLocation' )),
    COMMETHOD(['propput', helpstring(u'The source cache location.')], HRESULT, 'TileCachePath',
              ( ['in'], BSTR, 'ppCacheLocation' )),
    COMMETHOD(['propget', helpstring(u'The target cache location.')], HRESULT, 'CompressedCachePath',
              ( ['retval', 'out'], POINTER(BSTR), 'ppTargetCacheLocation' )),
    COMMETHOD(['propput', helpstring(u'The target cache location.')], HRESULT, 'CompressedCachePath',
              ( ['in'], BSTR, 'ppTargetCacheLocation' )),
    COMMETHOD(['propget', helpstring(u'The target cache location.')], HRESULT, 'CacheExtent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'ppExtent' )),
    COMMETHOD(['propputref', helpstring(u'The target cache location.')], HRESULT, 'CacheExtent',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'ppExtent' )),
    COMMETHOD([helpstring(u'The target cache location.')], HRESULT, 'Compress',
              ( ['in'], c_int, 'numThreads' ),
              ( ['in'], BSTR, 'LayerName' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' ),
              ( ['in'], VARIANT_BOOL, 'Overwrite' )),
    COMMETHOD([helpstring(u'The target cache location.')], HRESULT, 'Decompress',
              ( ['in'], c_int, 'numThreads' ),
              ( ['in'], BSTR, 'LayerName' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' ),
              ( ['in'], VARIANT_BOOL, 'Overwrite' )),
    COMMETHOD(['propget', helpstring(u'Server machine name.')], HRESULT, 'Host',
              ( ['retval', 'out'], POINTER(BSTR), 'pHost' )),
    COMMETHOD(['propput', helpstring(u'Server machine name.')], HRESULT, 'Host',
              ( ['in'], BSTR, 'pHost' )),
    COMMETHOD(['propget', helpstring(u'Service name.')], HRESULT, 'Service',
              ( ['retval', 'out'], POINTER(BSTR), 'pService' )),
    COMMETHOD(['propput', helpstring(u'Service name.')], HRESULT, 'Service',
              ( ['in'], BSTR, 'pService' )),
    COMMETHOD(['propget', helpstring(u'Dataframe name.')], HRESULT, 'Dataframe',
              ( ['retval', 'out'], POINTER(BSTR), 'pDataframe' )),
    COMMETHOD(['propput', helpstring(u'Dataframe name.')], HRESULT, 'Dataframe',
              ( ['in'], BSTR, 'pDataframe' )),
    COMMETHOD(['propget', helpstring(u'Packet Size')], HRESULT, 'PacketSize',
              ( ['retval', 'out'], POINTER(c_int), 'pPacketSize' )),
    COMMETHOD(['propput', helpstring(u'Packet Size')], HRESULT, 'PacketSize',
              ( ['in'], c_int, 'pPacketSize' )),
]
################################################################
## code template for IMapCacheStorageFormatConvertor implementation
##class IMapCacheStorageFormatConvertor_Impl(object):
##    def _get(self):
##        u'Service name.'
##        #return pService
##    def _set(self, pService):
##        u'Service name.'
##    Service = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The target cache location.'
##        #return ppTargetCacheLocation
##    def _set(self, ppTargetCacheLocation):
##        u'The target cache location.'
##    CompressedCachePath = property(_get, _set, doc = _set.__doc__)
##
##    def Compress(self, numThreads, LayerName, pTrackCancel, Overwrite):
##        u'The target cache location.'
##        #return 
##
##    def _get(self):
##        u'Dataframe name.'
##        #return pDataframe
##    def _set(self, pDataframe):
##        u'Dataframe name.'
##    Dataframe = property(_get, _set, doc = _set.__doc__)
##
##    def Decompress(self, numThreads, LayerName, pTrackCancel, Overwrite):
##        u'The target cache location.'
##        #return 
##
##    def _get(self):
##        u'Server machine name.'
##        #return pHost
##    def _set(self, pHost):
##        u'Server machine name.'
##    Host = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Packet Size'
##        #return pPacketSize
##    def _set(self, pPacketSize):
##        u'Packet Size'
##    PacketSize = property(_get, _set, doc = _set.__doc__)
##
##    def CacheExtent(self, ppExtent):
##        u'The target cache location.'
##        #return 
##
##    def _get(self):
##        u'The source cache location.'
##        #return ppCacheLocation
##    def _set(self, ppCacheLocation):
##        u'The source cache location.'
##    TileCachePath = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'esriRasterSelectionMaskFileFormat'
esriMaskTiffUncompress = 0
esriMaskImagineUncompress = 1
esriRasterSelectionMaskFileFormat = c_int # enum
class WMSImageServer(CoClass):
    u'The WMS Server Object Extension for Image Service.'
    _reg_clsid_ = GUID('{9C25963A-8AAF-466D-80CB-84851A6C321D}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IWMSServer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the available WMS Server properties and methods.'
    _iid_ = GUID('{155C04DB-D9B2-4F31-9254-6D43CAA54BBA}')
    _idlflags_ = ['oleautomation']
WMSImageServer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._18F2FC71_6B30_45B9_B101_037A8B868B66_0_10_2.IServerObjectExtension, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IObjectConstruct, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IObjectActivate, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILogSupport, IWMSServer, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IWebRequestHandler, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]

class LegendGroups(CoClass):
    u'A collection of LegendGroup objects.'
    _reg_clsid_ = GUID('{93942EB3-2CD2-4BFE-9937-380EC7D06E1F}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class ILegendGroups(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Legend Groups Interface.'
    _iid_ = GUID('{5115C4F3-E87B-45F3-9E11-0CDE2AEF2BEF}')
    _idlflags_ = ['oleautomation']
LegendGroups._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILegendGroups, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

class IRotateOperation(comtypes.gen._4ECCA6E2_B16B_4ACA_BD17_E74CAE4C150A_0_10_2.IOperation):
    _case_insensitive_ = True
    u'Provides access to members that control the Rotate Operation.'
    _iid_ = GUID('{C6431185-806C-11D1-8723-0000F8751720}')
    _idlflags_ = ['oleautomation']
IRotateOperation._methods_ = [
    COMMETHOD(['propput', helpstring(u'The name of this operation, i.e., description of the kind of Rotate.')], HRESULT, 'Name',
              ( [], BSTR, 'rhs' )),
    COMMETHOD(['propput', helpstring(u'The view that is being Rotated.')], HRESULT, 'ActiveView',
              ( [], POINTER(IActiveView), 'rhs' )),
    COMMETHOD(['propput', helpstring(u'The previous rotation.')], HRESULT, 'PreviousRotation',
              ( [], c_double, 'rhs' )),
    COMMETHOD(['propput', helpstring(u'The new rotation.')], HRESULT, 'Rotation',
              ( [], c_double, 'rhs' )),
    COMMETHOD(['propput', helpstring(u'Indicates if refresh happens.')], HRESULT, 'Refresh',
              ( [], VARIANT_BOOL, 'rhs' )),
]
################################################################
## code template for IRotateOperation implementation
##class IRotateOperation_Impl(object):
##    def _set(self, rhs):
##        u'The new rotation.'
##    Rotation = property(fset = _set, doc = _set.__doc__)
##
##    def _set(self, rhs):
##        u'The view that is being Rotated.'
##    ActiveView = property(fset = _set, doc = _set.__doc__)
##
##    def _set(self, rhs):
##        u'The name of this operation, i.e., description of the kind of Rotate.'
##    Name = property(fset = _set, doc = _set.__doc__)
##
##    def _set(self, rhs):
##        u'Indicates if refresh happens.'
##    Refresh = property(fset = _set, doc = _set.__doc__)
##
##    def _set(self, rhs):
##        u'The previous rotation.'
##    PreviousRotation = property(fset = _set, doc = _set.__doc__)
##

class IRowIdentifyObject(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the row used by the identify object.'
    _iid_ = GUID('{061BDED1-1486-11D4-9FEC-00C04F6BC78E}')
    _idlflags_ = ['oleautomation']
IRowIdentifyObject._methods_ = [
    COMMETHOD(['propput', helpstring(u'The row used by the identify object.')], HRESULT, 'Row',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRow), 'Row' )),
    COMMETHOD(['propget', helpstring(u'The row used by the identify object.')], HRESULT, 'Row',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRow)), 'Row' )),
]
################################################################
## code template for IRowIdentifyObject implementation
##class IRowIdentifyObject_Impl(object):
##    def _get(self):
##        u'The row used by the identify object.'
##        #return Row
##    def _set(self, Row):
##        u'The row used by the identify object.'
##    Row = property(_get, _set, doc = _set.__doc__)
##

class RasterStretchColorRampRenderer(CoClass):
    u'A renderer with a color ramp for rasters with continuous values.'
    _reg_clsid_ = GUID('{A301A3B2-74D7-11D2-9F29-00C04F8ED1D7}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IRasterStretchColorRampRenderer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the color ramp of a contrast stretch.'
    _iid_ = GUID('{A301A3B1-74D7-11D2-9F29-00C04F8ED1D7}')
    _idlflags_ = ['oleautomation']
class IGlobeRasterStretch(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to specify if the renderer is an ArcMap Layer Renderer or ArcGlobe.'
    _iid_ = GUID('{B055B13E-CEB8-406F-A179-1E838F51E30B}')
    _idlflags_ = ['oleautomation']
class IRasterStretch(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members which control contrast stretching.'
    _iid_ = GUID('{48BB9988-8250-11D3-ABA2-0008C73FCA1C}')
    _idlflags_ = ['oleautomation']
class IRasterStretch2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members which control stretch.'
    _iid_ = GUID('{51EE1518-7261-4FDD-99C7-B4E35CFC7DA0}')
    _idlflags_ = ['oleautomation']
class IRasterStretch3(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members which control stretch.'
    _iid_ = GUID('{30F1C42E-4A45-4564-8F08-76A2CD42F661}')
    _idlflags_ = ['oleautomation']
class IRasterStretchMinMax(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to min/max members which control contrast stretching.'
    _iid_ = GUID('{CA38A249-94FE-45D0-9403-D3A8A3911943}')
    _idlflags_ = ['oleautomation']
class IRasterRendererClassInfo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members which contain info about renderer classes.'
    _iid_ = GUID('{0F3E50D0-3194-11D4-A66C-0008C7DF8989}')
    _idlflags_ = ['oleautomation']
class IColorChannelMapping(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to methods that control the mapping of bands to RGB color channels.'
    _iid_ = GUID('{8D12E222-2507-41B5-A21C-5A56A031705B}')
    _idlflags_ = ['oleautomation']
class IHillShadeInfo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to methods that control hill shading.'
    _iid_ = GUID('{0A6F1D1A-9A84-40C9-BA10-B5BF139F06FF}')
    _idlflags_ = ['oleautomation']
class IRasterStretchAdvancedLabels(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides additional labels.'
    _iid_ = GUID('{75A23444-CEDF-4609-B92C-8D45617EBD3A}')
    _idlflags_ = []
RasterStretchColorRampRenderer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterStretchColorRampRenderer, IGlobeRasterStretch, IRasterStretch, IRasterStretch2, IRasterStretch3, IRasterStretchMinMax, IRasterRenderer, IRasterRenderer2, IRasterRendererInfo, IRasterRendererColorRamp, IRasterDisplayProps, IIdentify, ILegendInfo, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayAdmin, IRasterRendererClassInfo, IColorChannelMapping, IHillShadeInfo, IDisplayTableExchange, IRasterStretchAdvancedLabels, IRasterRendererUpdate, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize]

class ImageInset(CoClass):
    u'A map surround for displaying an inset.'
    _reg_clsid_ = GUID('{D4F32594-65B5-45DC-BC6F-B3464B1D8373}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IMapSurround(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the map surround.'
    _iid_ = GUID('{FE3115E9-ED6C-11D0-8683-0000F8751720}')
    _idlflags_ = ['oleautomation']
class IMapInset(IMapSurround):
    _case_insensitive_ = True
    u'Provides access to members that control the inset map surrounds.'
    _iid_ = GUID('{6DFAE8F1-ECAA-11D0-8682-0000F8751720}')
    _idlflags_ = ['oleautomation']
class IMapInset2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the inset map surrounds.'
    _iid_ = GUID('{6DFAE8F2-ECAA-11D0-8682-0000F8751720}')
    _idlflags_ = ['oleautomation']
class IQuerySize(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to means to getting the size of an element.'
    _iid_ = GUID('{4D582692-C52A-4287-9FCF-D6286C4775AF}')
    _idlflags_ = ['oleautomation']
class IImageInset(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the image inset map surrounds.'
    _iid_ = GUID('{FB062447-5C5D-494E-8A87-02261E7F87A9}')
    _idlflags_ = ['oleautomation']
class IMapSurroundEvents(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to events that occur when the state of the map surrounds changes.'
    _iid_ = GUID('{0DCA8F87-AFA7-11D2-87FB-0000F8751720}')
    _idlflags_ = ['oleautomation']
ImageInset._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMapInset, IMapInset2, IMapSurround, IQuerySize, IBoundsProperties, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IConnectionPointContainer, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, IImageInset]
ImageInset._outgoing_interfaces_ = [IMapSurroundEvents]

class IAnnotationFeature2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the annotation feature.'
    _iid_ = GUID('{6053616B-2212-469E-BC40-C7285F48DCE2}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'esriAnnotationStatus'
esriAnnoStatusPlaced = 0
esriAnnoStatusUnplaced = 1
esriAnnotationStatus = c_int # enum
IAnnotationFeature2._methods_ = [
    COMMETHOD(['propget', helpstring(u'The annotation element for the feature.')], HRESULT, 'Annotation',
              ( ['retval', 'out'], POINTER(POINTER(IElement)), 'Element' )),
    COMMETHOD(['propput', helpstring(u'The annotation element for the feature.')], HRESULT, 'Annotation',
              ( ['in'], POINTER(IElement), 'Element' )),
    COMMETHOD(['propput', helpstring(u'Feature ID.')], HRESULT, 'LinkedFeatureID',
              ( ['in'], c_int, 'FID' )),
    COMMETHOD(['propget', helpstring(u'Feature ID.')], HRESULT, 'LinkedFeatureID',
              ( ['retval', 'out'], POINTER(c_int), 'FID' )),
    COMMETHOD(['propput', helpstring(u'Label Class ID.')], HRESULT, 'AnnotationClassID',
              ( ['in'], c_int, 'AnnotationClassID' )),
    COMMETHOD(['propget', helpstring(u'Label Class ID.')], HRESULT, 'AnnotationClassID',
              ( ['retval', 'out'], POINTER(c_int), 'AnnotationClassID' )),
    COMMETHOD(['propput', helpstring(u'The current status of the annotation.')], HRESULT, 'Status',
              ( ['in'], esriAnnotationStatus, 'Status' )),
    COMMETHOD(['propget', helpstring(u'The current status of the annotation.')], HRESULT, 'Status',
              ( ['retval', 'out'], POINTER(esriAnnotationStatus), 'Status' )),
]
################################################################
## code template for IAnnotationFeature2 implementation
##class IAnnotationFeature2_Impl(object):
##    def _get(self):
##        u'The current status of the annotation.'
##        #return Status
##    def _set(self, Status):
##        u'The current status of the annotation.'
##    Status = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Feature ID.'
##        #return FID
##    def _set(self, FID):
##        u'Feature ID.'
##    LinkedFeatureID = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The annotation element for the feature.'
##        #return Element
##    def _set(self, Element):
##        u'The annotation element for the feature.'
##    Annotation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Label Class ID.'
##        #return AnnotationClassID
##    def _set(self, AnnotationClassID):
##        u'Label Class ID.'
##    AnnotationClassID = property(_get, _set, doc = _set.__doc__)
##

IElementProperties._methods_ = [
    COMMETHOD(['propget', helpstring(u'Name of the element.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'Name of the element.')], HRESULT, 'Name',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'Type of the element.')], HRESULT, 'Type',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'Type of the element.')], HRESULT, 'Type',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'Indicates if transform is applied to symbols and other parts of element. False = only apply transform to geometry.')], HRESULT, 'AutoTransform',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'AutoTransform' )),
    COMMETHOD(['propput', helpstring(u'Indicates if transform is applied to symbols and other parts of element. False = only apply transform to geometry.')], HRESULT, 'AutoTransform',
              ( ['in'], VARIANT_BOOL, 'AutoTransform' )),
    COMMETHOD(['propget', helpstring(u'Custom property.')], HRESULT, 'CustomProperty',
              ( ['retval', 'out'], POINTER(VARIANT), 'CustomProperty' )),
    COMMETHOD(['propput', helpstring(u'Custom property.')], HRESULT, 'CustomProperty',
              ( ['in'], VARIANT, 'CustomProperty' )),
]
################################################################
## code template for IElementProperties implementation
##class IElementProperties_Impl(object):
##    def _get(self):
##        u'Custom property.'
##        #return CustomProperty
##    def _set(self, CustomProperty):
##        u'Custom property.'
##    CustomProperty = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Type of the element.'
##        #return Name
##    def _set(self, Name):
##        u'Type of the element.'
##    Type = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Name of the element.'
##        #return Name
##    def _set(self, Name):
##        u'Name of the element.'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if transform is applied to symbols and other parts of element. False = only apply transform to geometry.'
##        #return AutoTransform
##    def _set(self, AutoTransform):
##        u'Indicates if transform is applied to symbols and other parts of element. False = only apply transform to geometry.'
##    AutoTransform = property(_get, _set, doc = _set.__doc__)
##

ILayerEffects._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if the layer supports transparency.')], HRESULT, 'SupportsTransparency',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'supported' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer supports contrast changes.')], HRESULT, 'SupportsContrastChange',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'supported' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer supports brightness changes.')], HRESULT, 'SupportsBrightnessChange',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'supported' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the layer supports interactive effects changes.')], HRESULT, 'SupportsInteractive',
              ( ['in'], VARIANT_BOOL, 'supported' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer supports interactive effects changes.')], HRESULT, 'SupportsInteractive',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'supported' )),
    COMMETHOD(['propget', helpstring(u'Layer transparency in percent (0-100).')], HRESULT, 'Transparency',
              ( ['retval', 'out'], POINTER(c_short), 'alpha' )),
    COMMETHOD(['propput', helpstring(u'Layer transparency in percent (0-100).')], HRESULT, 'Transparency',
              ( ['in'], c_short, 'alpha' )),
    COMMETHOD(['propget', helpstring(u'Layer contrast in percent (-100 - 100).')], HRESULT, 'Contrast',
              ( ['retval', 'out'], POINTER(c_short), 'ContrastValue' )),
    COMMETHOD(['propput', helpstring(u'Layer contrast in percent (-100 - 100).')], HRESULT, 'Contrast',
              ( ['in'], c_short, 'ContrastValue' )),
    COMMETHOD(['propget', helpstring(u'Layer brightness in percent (-100 - 100).')], HRESULT, 'Brightness',
              ( ['retval', 'out'], POINTER(c_short), 'BrightnessValue' )),
    COMMETHOD(['propput', helpstring(u'Layer brightness in percent (-100 - 100).')], HRESULT, 'Brightness',
              ( ['in'], c_short, 'BrightnessValue' )),
]
################################################################
## code template for ILayerEffects implementation
##class ILayerEffects_Impl(object):
##    @property
##    def SupportsBrightnessChange(self):
##        u'Indicates if the layer supports brightness changes.'
##        #return supported
##
##    def _get(self):
##        u'Layer brightness in percent (-100 - 100).'
##        #return BrightnessValue
##    def _set(self, BrightnessValue):
##        u'Layer brightness in percent (-100 - 100).'
##    Brightness = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SupportsContrastChange(self):
##        u'Indicates if the layer supports contrast changes.'
##        #return supported
##
##    @property
##    def SupportsTransparency(self):
##        u'Indicates if the layer supports transparency.'
##        #return supported
##
##    def _get(self):
##        u'Indicates if the layer supports interactive effects changes.'
##        #return supported
##    def _set(self, supported):
##        u'Indicates if the layer supports interactive effects changes.'
##    SupportsInteractive = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Layer transparency in percent (0-100).'
##        #return alpha
##    def _set(self, alpha):
##        u'Layer transparency in percent (0-100).'
##    Transparency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Layer contrast in percent (-100 - 100).'
##        #return ContrastValue
##    def _set(self, ContrastValue):
##        u'Layer contrast in percent (-100 - 100).'
##    Contrast = property(_get, _set, doc = _set.__doc__)
##

class DynamicMapEvents(CoClass):
    u'Map events. Note: this class only provides access to the IDynamicMapEvents outbound interface.'
    _reg_clsid_ = GUID('{8953E049-9B51-46F6-B7A0-4B0D3AD6258B}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
DynamicMapEvents._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown]
DynamicMapEvents._outgoing_interfaces_ = [comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDynamicMapEvents]

class MapEvents3(CoClass):
    u'Map events. Note: this class only provides access to the IMapEvents3 outbound interface.'
    _reg_clsid_ = GUID('{8949E874-DA17-436B-A88C-F16ECB4EE1C9}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IMapEvents3(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to events that occur when the state of the map changes.'
    _iid_ = GUID('{C1BA2686-83AC-4D40-8BBB-548D3F220808}')
    _idlflags_ = ['oleautomation']
MapEvents3._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown]
MapEvents3._outgoing_interfaces_ = [IMapEvents3]


# values for enumeration 'esriMaplexMultiPartOption'
esriMaplexOneLabelPerFeature = 0
esriMaplexOneLabelPerPart = 1
esriMaplexOneLabelPerSegment = 2
esriMaplexMultiPartOption = c_int # enum
class IMapGrid(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a map grid.'
    _iid_ = GUID('{03762C8B-F4D0-11D1-ADE8-080009EC732A}')
    _idlflags_ = ['oleautomation']
class IGridLabel(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the way a map grid is labeled.'
    _iid_ = GUID('{CE41C501-9DF9-11D2-AADE-000000000000}')
    _idlflags_ = ['oleautomation']
class IMapGridBorder(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the map grid border.'
    _iid_ = GUID('{AC81ECF9-9EE4-11D2-AADF-000000000000}')
    _idlflags_ = ['oleautomation']
class IFrameElement(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the Frame element object.'
    _iid_ = GUID('{9B00131A-9ED7-11D0-859E-0800091A2A72}')
    _idlflags_ = ['oleautomation']
class IMapFrame(IFrameElement):
    _case_insensitive_ = True
    u'Provides access to the members that control the map element object.'
    _iid_ = GUID('{9B00131B-9ED7-11D0-859E-0800091A2A72}')
    _idlflags_ = ['oleautomation']
IMapGrid._methods_ = [
    COMMETHOD(['propget', helpstring(u'The name of the map grid.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'gridName' )),
    COMMETHOD(['propput', helpstring(u'The name of the map grid.')], HRESULT, 'Name',
              ( ['in'], BSTR, 'gridName' )),
    COMMETHOD(['propget', helpstring(u'The symbol used to draw grid lines - null will draw no lines.')], HRESULT, 'LineSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ILineSymbol)), 'Symbol' )),
    COMMETHOD(['propput', helpstring(u'The symbol used to draw grid lines - null will draw no lines.')], HRESULT, 'LineSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ILineSymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'The symbol used to draw tick marks at the grid interval intersections - null will draw no tick marks.')], HRESULT, 'TickMarkSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IMarkerSymbol)), 'Symbol' )),
    COMMETHOD(['propput', helpstring(u'The symbol used to draw tick marks at the grid interval intersections - null will draw no tick marks.')], HRESULT, 'TickMarkSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IMarkerSymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'The label format for map grid labels.')], HRESULT, 'LabelFormat',
              ( ['retval', 'out'], POINTER(POINTER(IGridLabel)), 'Format' )),
    COMMETHOD(['propput', helpstring(u'The label format for map grid labels.')], HRESULT, 'LabelFormat',
              ( ['in'], POINTER(IGridLabel), 'Format' )),
    COMMETHOD(['propget', helpstring(u'The line symbol used to draw the major ticks.')], HRESULT, 'TickLineSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ILineSymbol)), 'Symbol' )),
    COMMETHOD(['propput', helpstring(u'The line symbol used to draw the major ticks.')], HRESULT, 'TickLineSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ILineSymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'The length of the major ticks in points.')], HRESULT, 'TickLength',
              ( ['retval', 'out'], POINTER(c_double), 'lengthPoints' )),
    COMMETHOD(['propput', helpstring(u'The length of the major ticks in points.')], HRESULT, 'TickLength',
              ( ['in'], c_double, 'lengthPoints' )),
    COMMETHOD(['propget', helpstring(u'The number of subticks to draw between the major ticks.')], HRESULT, 'SubTickCount',
              ( ['retval', 'out'], POINTER(c_short), 'Count' )),
    COMMETHOD(['propput', helpstring(u'The number of subticks to draw between the major ticks.')], HRESULT, 'SubTickCount',
              ( ['in'], c_short, 'Count' )),
    COMMETHOD(['propget', helpstring(u'The symbol used to draw the subtick lines.')], HRESULT, 'SubTickLineSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ILineSymbol)), 'Symbol' )),
    COMMETHOD(['propput', helpstring(u'The symbol used to draw the subtick lines.')], HRESULT, 'SubTickLineSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ILineSymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'The length of the subticks in points.')], HRESULT, 'SubTickLength',
              ( ['retval', 'out'], POINTER(c_double), 'lengthPoints' )),
    COMMETHOD(['propput', helpstring(u'The length of the subticks in points.')], HRESULT, 'SubTickLength',
              ( ['in'], c_double, 'lengthPoints' )),
    COMMETHOD(['propget', helpstring(u'The map grid border.')], HRESULT, 'Border',
              ( ['retval', 'out'], POINTER(POINTER(IMapGridBorder)), 'gridBorder' )),
    COMMETHOD(['propput', helpstring(u'The map grid border.')], HRESULT, 'Border',
              ( ['in'], POINTER(IMapGridBorder), 'gridBorder' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the map grid is visible.')], HRESULT, 'Visible',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Visible' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the map grid is visible.')], HRESULT, 'Visible',
              ( ['in'], VARIANT_BOOL, 'Visible' )),
    COMMETHOD([helpstring(u'Returns the visibility of the labels along all four sides of the map grid.')], HRESULT, 'QueryLabelVisibility',
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'leftVis' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'topVis' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'rightVis' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'bottomVis' )),
    COMMETHOD([helpstring(u'Sets the visibility of the labels along all four sides of the map grid.')], HRESULT, 'SetLabelVisibility',
              ( ['in'], VARIANT_BOOL, 'leftVis' ),
              ( ['in'], VARIANT_BOOL, 'topVis' ),
              ( ['in'], VARIANT_BOOL, 'rightVis' ),
              ( ['in'], VARIANT_BOOL, 'bottomVis' )),
    COMMETHOD([helpstring(u'Returns the visibility of the ticks along all four sides of the map grid.')], HRESULT, 'QueryTickVisibility',
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'leftVis' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'topVis' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'rightVis' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'bottomVis' )),
    COMMETHOD([helpstring(u'Sets the visibility of the ticks along all four sides of the map grid.')], HRESULT, 'SetTickVisibility',
              ( ['in'], VARIANT_BOOL, 'leftVis' ),
              ( ['in'], VARIANT_BOOL, 'topVis' ),
              ( ['in'], VARIANT_BOOL, 'rightVis' ),
              ( ['in'], VARIANT_BOOL, 'bottomVis' )),
    COMMETHOD([helpstring(u'Returns the visibility of the subticks along all four sides of the map grid.')], HRESULT, 'QuerySubTickVisibility',
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'leftVis' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'topVis' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'rightVis' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'bottomVis' )),
    COMMETHOD([helpstring(u'Sets the visibility of the subticks along all four sides of the map grid.')], HRESULT, 'SetSubTickVisibility',
              ( ['in'], VARIANT_BOOL, 'leftVis' ),
              ( ['in'], VARIANT_BOOL, 'topVis' ),
              ( ['in'], VARIANT_BOOL, 'rightVis' ),
              ( ['in'], VARIANT_BOOL, 'bottomVis' )),
    COMMETHOD([helpstring(u'Sets the properties of the map grid to default values.')], HRESULT, 'SetDefaults',
              ( ['in'], POINTER(IMapFrame), 'pMapFrame' )),
    COMMETHOD([helpstring(u'Generates graphic elements corresponding to the grid lines and stores them in the specified graphics container.')], HRESULT, 'GenerateGraphics',
              ( ['in'], POINTER(IMapFrame), 'pMapFrame' ),
              ( ['in'], POINTER(IGraphicsContainer), 'GraphicsContainer' )),
    COMMETHOD([helpstring(u'Prepares the map grid for output to a device.')], HRESULT, 'PrepareForOutput',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE, 'hDC' ),
              ( ['in'], c_int, 'Dpi' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.tagRECT), 'pixelBounds' ),
              ( ['in'], POINTER(IMapFrame), 'pMapFrame' )),
    COMMETHOD([helpstring(u'Draws the map grid for a map frame to the given display.')], HRESULT, 'Draw',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], POINTER(IMapFrame), 'pMapFrame' )),
    COMMETHOD(['propget', helpstring(u'The width (in display units) of the portion of the grid that is outside of the frame.')], HRESULT, 'ExteriorWidth',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'pDisplay' ),
              ( ['in'], POINTER(IMapFrame), 'pMapFrame' ),
              ( ['retval', 'out'], POINTER(c_double), 'pWidth' )),
]
################################################################
## code template for IMapGrid implementation
##class IMapGrid_Impl(object):
##    def _get(self):
##        u'The length of the subticks in points.'
##        #return lengthPoints
##    def _set(self, lengthPoints):
##        u'The length of the subticks in points.'
##    SubTickLength = property(_get, _set, doc = _set.__doc__)
##
##    def SetLabelVisibility(self, leftVis, topVis, rightVis, bottomVis):
##        u'Sets the visibility of the labels along all four sides of the map grid.'
##        #return 
##
##    def _get(self):
##        u'The length of the major ticks in points.'
##        #return lengthPoints
##    def _set(self, lengthPoints):
##        u'The length of the major ticks in points.'
##    TickLength = property(_get, _set, doc = _set.__doc__)
##
##    def QueryTickVisibility(self):
##        u'Returns the visibility of the ticks along all four sides of the map grid.'
##        #return leftVis, topVis, rightVis, bottomVis
##
##    def SetTickVisibility(self, leftVis, topVis, rightVis, bottomVis):
##        u'Sets the visibility of the ticks along all four sides of the map grid.'
##        #return 
##
##    def Draw(self, Display, pMapFrame):
##        u'Draws the map grid for a map frame to the given display.'
##        #return 
##
##    def PrepareForOutput(self, hDC, Dpi, pixelBounds, pMapFrame):
##        u'Prepares the map grid for output to a device.'
##        #return 
##
##    def _get(self):
##        u'The symbol used to draw the subtick lines.'
##        #return Symbol
##    def _set(self, Symbol):
##        u'The symbol used to draw the subtick lines.'
##    SubTickLineSymbol = property(_get, _set, doc = _set.__doc__)
##
##    def GenerateGraphics(self, pMapFrame, GraphicsContainer):
##        u'Generates graphic elements corresponding to the grid lines and stores them in the specified graphics container.'
##        #return 
##
##    def _get(self):
##        u'The name of the map grid.'
##        #return gridName
##    def _set(self, gridName):
##        u'The name of the map grid.'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def SetSubTickVisibility(self, leftVis, topVis, rightVis, bottomVis):
##        u'Sets the visibility of the subticks along all four sides of the map grid.'
##        #return 
##
##    def QueryLabelVisibility(self):
##        u'Returns the visibility of the labels along all four sides of the map grid.'
##        #return leftVis, topVis, rightVis, bottomVis
##
##    @property
##    def ExteriorWidth(self, pDisplay, pMapFrame):
##        u'The width (in display units) of the portion of the grid that is outside of the frame.'
##        #return pWidth
##
##    def _get(self):
##        u'The label format for map grid labels.'
##        #return Format
##    def _set(self, Format):
##        u'The label format for map grid labels.'
##    LabelFormat = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The number of subticks to draw between the major ticks.'
##        #return Count
##    def _set(self, Count):
##        u'The number of subticks to draw between the major ticks.'
##    SubTickCount = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the map grid is visible.'
##        #return Visible
##    def _set(self, Visible):
##        u'Indicates if the map grid is visible.'
##    Visible = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The line symbol used to draw the major ticks.'
##        #return Symbol
##    def _set(self, Symbol):
##        u'The line symbol used to draw the major ticks.'
##    TickLineSymbol = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The symbol used to draw grid lines - null will draw no lines.'
##        #return Symbol
##    def _set(self, Symbol):
##        u'The symbol used to draw grid lines - null will draw no lines.'
##    LineSymbol = property(_get, _set, doc = _set.__doc__)
##
##    def SetDefaults(self, pMapFrame):
##        u'Sets the properties of the map grid to default values.'
##        #return 
##
##    def _get(self):
##        u'The symbol used to draw tick marks at the grid interval intersections - null will draw no tick marks.'
##        #return Symbol
##    def _set(self, Symbol):
##        u'The symbol used to draw tick marks at the grid interval intersections - null will draw no tick marks.'
##    TickMarkSymbol = property(_get, _set, doc = _set.__doc__)
##
##    def QuerySubTickVisibility(self):
##        u'Returns the visibility of the subticks along all four sides of the map grid.'
##        #return leftVis, topVis, rightVis, bottomVis
##
##    def _get(self):
##        u'The map grid border.'
##        #return gridBorder
##    def _set(self, gridBorder):
##        u'The map grid border.'
##    Border = property(_get, _set, doc = _set.__doc__)
##

class IIMSGlobeConnection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to methods that describe the ims connection within and globe client communicating with ims.'
    _iid_ = GUID('{9A9B9D78-DDDE-4543-B103-5646A6CF3976}')
    _idlflags_ = ['oleautomation']
IIMSGlobeConnection._methods_ = [
    COMMETHOD([helpstring(u'Makes a request to the IMS Server.')], HRESULT, 'MakeRequest',
              ( ['in'], BSTR, 'strDataString' ),
              ( ['retval', 'out'], POINTER(BSTR), 'response' )),
    COMMETHOD([helpstring(u'Make a request for binary data.')], HRESULT, 'MakeRequestBinary',
              ( ['in'], BSTR, 'strDataString' ),
              ( ['in'], VARIANT_BOOL, 'bAllocateData' ),
              ( ['out'], POINTER(c_void_p), 'Data' ),
              ( ['out'], POINTER(c_int), 'Size' )),
    COMMETHOD(['propput', helpstring(u'The Url for the request.')], HRESULT, 'URL',
              ( ['in'], BSTR, 'pURL' )),
    COMMETHOD(['propget', helpstring(u'The Url for the request.')], HRESULT, 'URL',
              ( ['retval', 'out'], POINTER(BSTR), 'pURL' )),
    COMMETHOD(['propput', helpstring(u'The service name for the request.')], HRESULT, 'ServiceName',
              ( ['in'], BSTR, 'pName' )),
    COMMETHOD(['propget', helpstring(u'The service name for the request.')], HRESULT, 'ServiceName',
              ( ['retval', 'out'], POINTER(BSTR), 'pName' )),
]
################################################################
## code template for IIMSGlobeConnection implementation
##class IIMSGlobeConnection_Impl(object):
##    def _get(self):
##        u'The Url for the request.'
##        #return pURL
##    def _set(self, pURL):
##        u'The Url for the request.'
##    URL = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The service name for the request.'
##        #return pName
##    def _set(self, pName):
##        u'The service name for the request.'
##    ServiceName = property(_get, _set, doc = _set.__doc__)
##
##    def MakeRequest(self, strDataString):
##        u'Makes a request to the IMS Server.'
##        #return response
##
##    def MakeRequestBinary(self, strDataString, bAllocateData):
##        u'Make a request for binary data.'
##        #return Data, Size
##

class ScaleLine(CoClass):
    u'A map surround for displaying a scale line.'
    _reg_clsid_ = GUID('{6589F140-F7F7-11D2-B872-00600802E603}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IScaleBar(IMapSurround):
    _case_insensitive_ = True
    u'Provides access to members that control the scalebar map surrounds.'
    _iid_ = GUID('{6DFAE8E2-ECAA-11D0-8682-0000F8751720}')
    _idlflags_ = ['oleautomation']
class IScaleBar2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the scalebar map surrounds.'
    _iid_ = GUID('{D1658F8E-BE62-4A78-88D3-07170F09120C}')
    _idlflags_ = ['oleautomation']
class IScaleLine(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a line scale bar.'
    _iid_ = GUID('{6DFAE8E3-ECAA-11D0-8682-0000F8751720}')
    _idlflags_ = ['oleautomation']
class IScaleMarks(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the scale bar mark properties.'
    _iid_ = GUID('{6DFAE8E7-ECAA-11D0-8682-0000F8751720}')
    _idlflags_ = ['oleautomation']
class IGraphicsComposite(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control objects that are composed of graphic elements.'
    _iid_ = GUID('{969CDE4A-82D4-11D2-87DD-0000F8751720}')
    _idlflags_ = ['oleautomation']
ScaleLine._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IScaleBar, IScaleBar2, IScaleLine, IScaleMarks, IMapSurround, IQuerySize, IBoundsProperties, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITransformEvents, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IConnectionPointContainer, IGraphicsComposite, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySupport]
ScaleLine._outgoing_interfaces_ = [IMapSurroundEvents]

class IDynamicLegendClass(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Dynamic information for a legend class.'
    _iid_ = GUID('{19479DCB-5EC5-4F51-82AC-8083EE14BA23}')
    _idlflags_ = ['oleautomation']
IDynamicLegendClass._methods_ = [
    COMMETHOD(['propget', helpstring(u'Count of the times the legend class appears in the visible map extent.   Initialized using IDynamicLegendLayer.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propput', helpstring(u'Count of the times the legend class appears in the visible map extent.   Initialized using IDynamicLegendLayer.')], HRESULT, 'Count',
              ( ['in'], c_int, 'Count' )),
]
################################################################
## code template for IDynamicLegendClass implementation
##class IDynamicLegendClass_Impl(object):
##    def _get(self):
##        u'Count of the times the legend class appears in the visible map extent.   Initialized using IDynamicLegendLayer.'
##        #return Count
##    def _set(self, Count):
##        u'Count of the times the legend class appears in the visible map extent.   Initialized using IDynamicLegendLayer.'
##    Count = property(_get, _set, doc = _set.__doc__)
##

class IFeatureSelectionRenderer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control functionality common to all feature selection renderers.'
    _iid_ = GUID('{A0439F35-1298-48C4-B536-985AC09F8E30}')
    _idlflags_ = ['oleautomation']
IFeatureSelectionRenderer._methods_ = [
    COMMETHOD(['propput', helpstring(u'Selection color.')], HRESULT, 'SelectionColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'Selection color.')], HRESULT, 'SelectionColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
]
################################################################
## code template for IFeatureSelectionRenderer implementation
##class IFeatureSelectionRenderer_Impl(object):
##    def _get(self):
##        u'Selection color.'
##        #return Color
##    def _set(self, Color):
##        u'Selection color.'
##    SelectionColor = property(_get, _set, doc = _set.__doc__)
##

class SteppedScaleLine(CoClass):
    u'A map surround for displaying a stepped scale line.'
    _reg_clsid_ = GUID('{6589F141-F7F7-11D2-B872-00600802E603}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
SteppedScaleLine._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IScaleBar, IScaleBar2, IScaleLine, IScaleMarks, IMapSurround, IQuerySize, IBoundsProperties, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITransformEvents, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IConnectionPointContainer, IGraphicsComposite, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySupport]
SteppedScaleLine._outgoing_interfaces_ = [IMapSurroundEvents]


# values for enumeration 'esriMaplexStrategyIdentifier'
esriMaplexStrategyStacking = 0
esriMaplexStrategyOverrun = 1
esriMaplexStrategyFontCompression = 2
esriMaplexStrategyFontReduction = 3
esriMaplexStrategyAbbreviation = 4
esriMaplexStrategyIdentifier = c_int # enum
class DataObjectTable(CoClass):
    u'DataObjectTable co-class.'
    _reg_clsid_ = GUID('{B05961C0-F5B5-4C12-A167-6AB84FD78BAD}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IMapTableTimeInfo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to time properties of a MapLayerInfo.'
    _iid_ = GUID('{3BB80BF2-3E29-4B85-B6D6-551ABE327EAF}')
    _idlflags_ = ['oleautomation']
DataObjectTable._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDataObjectTable, IMapTableTimeInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class SingleDivisionScaleBar(CoClass):
    u'A map surround for displaying a single division scale bar.'
    _reg_clsid_ = GUID('{6589F146-F7F7-11D2-B872-00600802E603}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class ISingleFillScaleBar(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a scale bar that uses a single fill symbol to draw bar.'
    _iid_ = GUID('{6DFAE8E4-ECAA-11D0-8682-0000F8751720}')
    _idlflags_ = ['oleautomation']
SingleDivisionScaleBar._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IScaleBar, IScaleBar2, ISingleFillScaleBar, IScaleMarks, IMapSurround, IQuerySize, IBoundsProperties, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITransformEvents, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IConnectionPointContainer, IGraphicsComposite, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize]
SingleDivisionScaleBar._outgoing_interfaces_ = [IMapSurroundEvents]


# values for enumeration 'esriT3DOrientationPlane'
esriT3DPlaneXY = 0
esriT3DPlaneXZ = 1
esriT3DPlaneYZ = 2
esriT3DOrientationPlane = c_int # enum
class HollowScaleBar(CoClass):
    u'A map surround for displaying a hollow scale bar.'
    _reg_clsid_ = GUID('{6589F143-F7F7-11D2-B872-00600802E603}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IDoubleFillScaleBar(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a scale bar that uses two fill symbols to draw bar.'
    _iid_ = GUID('{6DFAE8E5-ECAA-11D0-8682-0000F8751720}')
    _idlflags_ = ['oleautomation']
HollowScaleBar._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IScaleBar, IScaleBar2, IDoubleFillScaleBar, IScaleMarks, IMapSurround, IQuerySize, IBoundsProperties, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITransformEvents, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IConnectionPointContainer, IGraphicsComposite, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize]
HollowScaleBar._outgoing_interfaces_ = [IMapSurroundEvents]

class ITimeDimensionDefinition(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to properties that define time based on multi-dimensional data.'
    _iid_ = GUID('{F1F9CC71-5F24-4176-9BA4-9D8AF7195A3E}')
    _idlflags_ = ['oleautomation']
ITimeDimensionDefinition._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates whether the data is multi-dimensional.')], HRESULT, 'MultiDimensional',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'isMultidimensional' )),
    COMMETHOD(['propget', helpstring(u'Returns the name of the dimension that represents time.')], HRESULT, 'TimeDimensionName',
              ( ['retval', 'out'], POINTER(BSTR), 'FieldName' )),
    COMMETHOD(['propput', helpstring(u'Returns the name of the dimension that represents time.')], HRESULT, 'TimeDimensionName',
              ( ['in'], BSTR, 'FieldName' )),
    COMMETHOD(['propget', helpstring(u'Returns the format of the dimension that represents time.')], HRESULT, 'TimeDimensionFormat',
              ( ['retval', 'out'], POINTER(BSTR), 'Format' )),
    COMMETHOD(['propput', helpstring(u'Returns the format of the dimension that represents time.')], HRESULT, 'TimeDimensionFormat',
              ( ['in'], BSTR, 'Format' )),
    COMMETHOD(['propget', helpstring(u'Time reference for the data.')], HRESULT, 'TimeReference',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITimeReference)), 'nativeTimeReference' )),
    COMMETHOD(['propputref', helpstring(u'Time reference for the data.')], HRESULT, 'TimeReference',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITimeReference), 'nativeTimeReference' )),
]
################################################################
## code template for ITimeDimensionDefinition implementation
##class ITimeDimensionDefinition_Impl(object):
##    @property
##    def MultiDimensional(self):
##        u'Indicates whether the data is multi-dimensional.'
##        #return isMultidimensional
##
##    def _get(self):
##        u'Returns the format of the dimension that represents time.'
##        #return Format
##    def _set(self, Format):
##        u'Returns the format of the dimension that represents time.'
##    TimeDimensionFormat = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Returns the name of the dimension that represents time.'
##        #return FieldName
##    def _set(self, FieldName):
##        u'Returns the name of the dimension that represents time.'
##    TimeDimensionName = property(_get, _set, doc = _set.__doc__)
##
##    def TimeReference(self, nativeTimeReference):
##        u'Time reference for the data.'
##        #return 
##

class IMSSymbolImporter(CoClass):
    u'Creates symbols defined in ArcXML.'
    _reg_clsid_ = GUID('{0A97A894-D811-11D3-9FF4-00C04F6BC6A5}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IIMSSymbolImporter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to create ARCIMS symbols based on ArcXML.'
    _iid_ = GUID('{0A97A893-D811-11D3-9FF4-00C04F6BC6A5}')
    _idlflags_ = ['oleautomation']
IMSSymbolImporter._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IIMSSymbolImporter]


# values for enumeration 'esriAnchorPointEnum'
esriTopLeftCorner = 0
esriTopMidPoint = 1
esriTopRightCorner = 2
esriLeftMidPoint = 3
esriCenterPoint = 4
esriRightMidPoint = 5
esriBottomLeftCorner = 6
esriBottomMidPoint = 7
esriBottomRightCorner = 8
esriAnchorPointEnum = c_int # enum
IElementProperties3._methods_ = [
    COMMETHOD(['propget', helpstring(u'Name of the element.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'Name of the element.')], HRESULT, 'Name',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'Type of the element.')], HRESULT, 'Type',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'Type of the element.')], HRESULT, 'Type',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'Indicates if transform is applied to symbols and other parts of element. False = only apply transform to geometry.')], HRESULT, 'AutoTransform',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'AutoTransform' )),
    COMMETHOD(['propput', helpstring(u'Indicates if transform is applied to symbols and other parts of element. False = only apply transform to geometry.')], HRESULT, 'AutoTransform',
              ( ['in'], VARIANT_BOOL, 'AutoTransform' )),
    COMMETHOD(['propget', helpstring(u'Custom property.')], HRESULT, 'CustomProperty',
              ( ['retval', 'out'], POINTER(VARIANT), 'CustomProperty' )),
    COMMETHOD(['propput', helpstring(u'Custom property.')], HRESULT, 'CustomProperty',
              ( ['in'], VARIANT, 'CustomProperty' )),
    COMMETHOD([helpstring(u'Indicates if the element can be rotated.')], HRESULT, 'CanRotate',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'CanRotate' )),
    COMMETHOD(['propget', helpstring(u'Reference scale of the element.')], HRESULT, 'ReferenceScale',
              ( ['retval', 'out'], POINTER(c_double), 'ReferenceScale' )),
    COMMETHOD(['propput', helpstring(u'Reference scale of the element.')], HRESULT, 'ReferenceScale',
              ( ['in'], c_double, 'ReferenceScale' )),
    COMMETHOD(['propget', helpstring(u'Anchor point of the element.')], HRESULT, 'AnchorPoint',
              ( ['retval', 'out'], POINTER(esriAnchorPointEnum), 'AnchorPoint' )),
    COMMETHOD(['propput', helpstring(u'Anchor point of the element.')], HRESULT, 'AnchorPoint',
              ( ['in'], esriAnchorPointEnum, 'AnchorPoint' )),
    COMMETHOD(['propget', helpstring(u'Spatial reference of the container.')], HRESULT, 'SpatialReference',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference)), 'spatialRef' )),
    COMMETHOD(['propputref', helpstring(u'Spatial reference of the container.')], HRESULT, 'SpatialReference',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'spatialRef' )),
]
################################################################
## code template for IElementProperties3 implementation
##class IElementProperties3_Impl(object):
##    def CanRotate(self):
##        u'Indicates if the element can be rotated.'
##        #return CanRotate
##
##    def _get(self):
##        u'Anchor point of the element.'
##        #return AnchorPoint
##    def _set(self, AnchorPoint):
##        u'Anchor point of the element.'
##    AnchorPoint = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Name of the element.'
##        #return Name
##    def _set(self, Name):
##        u'Name of the element.'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Custom property.'
##        #return CustomProperty
##    def _set(self, CustomProperty):
##        u'Custom property.'
##    CustomProperty = property(_get, _set, doc = _set.__doc__)
##
##    def SpatialReference(self, spatialRef):
##        u'Spatial reference of the container.'
##        #return 
##
##    def _get(self):
##        u'Type of the element.'
##        #return Name
##    def _set(self, Name):
##        u'Type of the element.'
##    Type = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Reference scale of the element.'
##        #return ReferenceScale
##    def _set(self, ReferenceScale):
##        u'Reference scale of the element.'
##    ReferenceScale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if transform is applied to symbols and other parts of element. False = only apply transform to geometry.'
##        #return AutoTransform
##    def _set(self, AutoTransform):
##        u'Indicates if transform is applied to symbols and other parts of element. False = only apply transform to geometry.'
##    AutoTransform = property(_get, _set, doc = _set.__doc__)
##

class Scalebar(CoClass):
    u'Obsolete scale bar coclass.  Exists to preserve document format.'
    _reg_clsid_ = GUID('{7A3F91DB-B9E3-11D1-8756-0000F8751720}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
Scalebar._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMapSurround, IQuerySize, IBoundsProperties, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IConnectionPointContainer, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class MapServerIdentifyResults(CoClass):
    u'A collection of Map Server Identify Result objects.'
    _reg_clsid_ = GUID('{7630E616-3FC0-4994-A96A-D26FB0A65B6B}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IMapServerIdentifyResults(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Map Server Identify Results Interface.'
    _iid_ = GUID('{531780B5-8B37-440E-A305-D27B960C75B7}')
    _idlflags_ = ['oleautomation']
MapServerIdentifyResults._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMapServerIdentifyResults, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

class IMSGlobeXMLParser(CoClass):
    u'IMS Globe Sub Service.'
    _reg_clsid_ = GUID('{541E17B2-82C2-44A8-818E-EE6CB38201AE}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IIMSGlobeXMLParser(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to xml parsing functionality.'
    _iid_ = GUID('{5B035109-B690-49BC-97C8-0F5F36E7A7BA}')
    _idlflags_ = ['oleautomation']
IMSGlobeXMLParser._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IIMSGlobeXMLParser]

class IMSGlobeConnection(CoClass):
    u'IMS Globe connection File.'
    _reg_clsid_ = GUID('{5523673E-FB83-4EEC-AF1C-68065F6F16F1}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
IMSGlobeConnection._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IIMSGlobeConnection]

class SQLSyntaxInfo(CoClass):
    u'The SQL Syntax Info coclass supplies information about SQL functionality.'
    _reg_clsid_ = GUID('{DBCEAA1E-C6F3-430E-99C4-6E57F5A88B3B}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class ISQLSyntaxInfo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the SQL Syntax Info Interface.'
    _iid_ = GUID('{0A5F737C-5707-4AEE-BD01-023C4FE1673C}')
    _idlflags_ = ['oleautomation']
SQLSyntaxInfo._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ISQLSyntaxInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

class IClassBreakInfo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides members to decribe class break for a class break renderer.'
    _iid_ = GUID('{C7065E3C-C37D-41F9-9AED-04564F5069D5}')
    _idlflags_ = []
IClassBreakInfo._methods_ = [
    COMMETHOD(['propget', helpstring(u'Class break class label.')], HRESULT, 'ClassMinimumValue',
              ( ['retval', 'out'], POINTER(c_double), 'Value' )),
    COMMETHOD(['propput', helpstring(u'Class break class label.')], HRESULT, 'ClassMinimumValue',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD(['propget', helpstring(u'Class break class label.')], HRESULT, 'ClassMaximumValue',
              ( ['retval', 'out'], POINTER(c_double), 'Value' )),
    COMMETHOD(['propput', helpstring(u'Class break class label.')], HRESULT, 'ClassMaximumValue',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD(['propget', helpstring(u'Class break class label.')], HRESULT, 'Label',
              ( ['retval', 'out'], POINTER(BSTR), 'classLabel' )),
    COMMETHOD(['propput', helpstring(u'Class break class label.')], HRESULT, 'Label',
              ( ['in'], BSTR, 'classLabel' )),
    COMMETHOD(['propget', helpstring(u'Class break class description.')], HRESULT, 'Description',
              ( ['retval', 'out'], POINTER(BSTR), 'symbolDescription' )),
    COMMETHOD(['propput', helpstring(u'Class break class description.')], HRESULT, 'Description',
              ( ['in'], BSTR, 'symbolDescription' )),
    COMMETHOD(['propget', helpstring(u'Symbol used for rendering the class.')], HRESULT, 'Symbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol)), 'Symbol' )),
    COMMETHOD(['propput', helpstring(u'Symbol used for rendering the class.')], HRESULT, 'Symbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol), 'Symbol' )),
]
################################################################
## code template for IClassBreakInfo implementation
##class IClassBreakInfo_Impl(object):
##    def _get(self):
##        u'Symbol used for rendering the class.'
##        #return Symbol
##    def _set(self, Symbol):
##        u'Symbol used for rendering the class.'
##    Symbol = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Class break class label.'
##        #return Value
##    def _set(self, Value):
##        u'Class break class label.'
##    ClassMaximumValue = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Class break class description.'
##        #return symbolDescription
##    def _set(self, symbolDescription):
##        u'Class break class description.'
##    Description = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Class break class label.'
##        #return Value
##    def _set(self, Value):
##        u'Class break class label.'
##    ClassMinimumValue = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Class break class label.'
##        #return classLabel
##    def _set(self, classLabel):
##        u'Class break class label.'
##    Label = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'esriGridAxisEnum'
esriGridAxisNone = 0
esriGridAxisTop = 1
esriGridAxisBottom = 2
esriGridAxisLeft = 3
esriGridAxisRight = 4
esriGridAxisEnum = c_int # enum
IGridLabel._methods_ = [
    COMMETHOD(['propget', helpstring(u'The display name for the type of grid label.')], HRESULT, 'DisplayName',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propget', helpstring(u'Indicates if this grid label can be used with the specified map grid.')], HRESULT, 'Applies',
              ( ['in'], POINTER(IMapGrid), 'grid' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Applies' )),
    COMMETHOD(['propget', helpstring(u'The interface to an object that can be edited with a property sheet. The object is either the grid label itself or a single editable property.')], HRESULT, 'EditObject',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppObject' )),
    COMMETHOD(['propput', helpstring(u'The interface to an object that can be edited with a property sheet. The object is either the grid label itself or a single editable property.')], HRESULT, 'EditObject',
              ( ['in'], POINTER(IUnknown), 'ppObject' )),
    COMMETHOD(['propget', helpstring(u'The font used by the grid label.')], HRESULT, 'Font',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IFontDisp)), 'Font' )),
    COMMETHOD(['propput', helpstring(u'The font used by the grid label.')], HRESULT, 'Font',
              ( ['in'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IFontDisp), 'Font' )),
    COMMETHOD(['propget', helpstring(u'The color of the grid label.')], HRESULT, 'Color',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'The color of the grid label.')], HRESULT, 'Color',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'The offset of the grid label from the border in points.')], HRESULT, 'LabelOffset',
              ( ['retval', 'out'], POINTER(c_double), 'offsetPoints' )),
    COMMETHOD(['propput', helpstring(u'The offset of the grid label from the border in points.')], HRESULT, 'LabelOffset',
              ( ['in'], c_double, 'offsetPoints' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the grid label is horizontal (true) or vertical (false) on the specified axis.')], HRESULT, 'LabelAlignment',
              ( ['in'], esriGridAxisEnum, 'axis' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Horizontal' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the grid label is horizontal (true) or vertical (false) on the specified axis.')], HRESULT, 'LabelAlignment',
              ( ['in'], esriGridAxisEnum, 'axis' ),
              ( ['in'], VARIANT_BOOL, 'Horizontal' )),
    COMMETHOD([helpstring(u"Determines the extent of a label's text on the specified grid axis.")], HRESULT, 'QueryTextExtent',
              ( ['in'], c_double, 'LabelValue' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'Location' ),
              ( ['in'], esriGridAxisEnum, 'axis' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( [], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'Extent' )),
    COMMETHOD([helpstring(u'Draws a label on the specified grid axis.')], HRESULT, 'Draw',
              ( ['in'], c_double, 'LabelValue' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'Location' ),
              ( ['in'], esriGridAxisEnum, 'axis' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' )),
    COMMETHOD([helpstring(u'Draws a preview of the grid label into the specified hdc.')], HRESULT, 'Preview',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE, 'hDC' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.tagRECT), 'rectangle' )),
]
################################################################
## code template for IGridLabel implementation
##class IGridLabel_Impl(object):
##    def Draw(self, LabelValue, Location, axis, Display):
##        u'Draws a label on the specified grid axis.'
##        #return 
##
##    def Preview(self, hDC, rectangle):
##        u'Draws a preview of the grid label into the specified hdc.'
##        #return 
##
##    @property
##    def DisplayName(self):
##        u'The display name for the type of grid label.'
##        #return Name
##
##    def _get(self):
##        u'The color of the grid label.'
##        #return Color
##    def _set(self, Color):
##        u'The color of the grid label.'
##    Color = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The interface to an object that can be edited with a property sheet. The object is either the grid label itself or a single editable property.'
##        #return ppObject
##    def _set(self, ppObject):
##        u'The interface to an object that can be edited with a property sheet. The object is either the grid label itself or a single editable property.'
##    EditObject = property(_get, _set, doc = _set.__doc__)
##
##    def QueryTextExtent(self, LabelValue, Location, axis, Display, Extent):
##        u"Determines the extent of a label's text on the specified grid axis."
##        #return 
##
##    @property
##    def Applies(self, grid):
##        u'Indicates if this grid label can be used with the specified map grid.'
##        #return Applies
##
##    def _get(self):
##        u'The offset of the grid label from the border in points.'
##        #return offsetPoints
##    def _set(self, offsetPoints):
##        u'The offset of the grid label from the border in points.'
##    LabelOffset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The font used by the grid label.'
##        #return Font
##    def _set(self, Font):
##        u'The font used by the grid label.'
##    Font = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, axis):
##        u'Indicates if the grid label is horizontal (true) or vertical (false) on the specified axis.'
##        #return Horizontal
##    def _set(self, axis, Horizontal):
##        u'Indicates if the grid label is horizontal (true) or vertical (false) on the specified axis.'
##    LabelAlignment = property(_get, _set, doc = _set.__doc__)
##

class SimpleNetworkRenderer(CoClass):
    u'A simple renderer used to display network dataset junctions, edges, and turns.'
    _reg_clsid_ = GUID('{1C30BFD1-DB91-48F1-B3C1-6A2FEB0C7104}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class ISimpleNetworkRenderer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control drawing network junctions, edges, or turns with one symbol.'
    _iid_ = GUID('{F2574DB7-7F19-4A19-B8F4-138530FF6122}')
    _idlflags_ = ['oleautomation']
class INetworkRenderer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control functions common to all Network renderers.'
    _iid_ = GUID('{C33E3D68-BA60-4A02-856A-EEC35F80D77C}')
    _idlflags_ = ['oleautomation']
class INetworkEdgeRenderer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the display properties of the renderer.'
    _iid_ = GUID('{4BD03700-90BF-4658-8B95-1351FF49027C}')
    _idlflags_ = ['oleautomation']
class INetworkEdgeRenderer2(INetworkEdgeRenderer):
    _case_insensitive_ = True
    u'Provides access to members that control the display properties of the renderer.'
    _iid_ = GUID('{D2622CB5-E2EE-42A3-B0DE-FEDE451F1762}')
    _idlflags_ = ['oleautomation']
class INetworkSourceRenderer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the display properties of the sources consumed by the renderer.'
    _iid_ = GUID('{B7D4910A-F568-4BC6-8D42-215B4F14DADC}')
    _idlflags_ = ['oleautomation']
SimpleNetworkRenderer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ISimpleNetworkRenderer, INetworkRenderer, INetworkEdgeRenderer, INetworkEdgeRenderer2, ILegendInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySupport, INetworkSourceRenderer]

class AlternatingScaleBar(CoClass):
    u'A map surround for displaying a single alternating scale bar.'
    _reg_clsid_ = GUID('{6589F147-F7F7-11D2-B872-00600802E603}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
AlternatingScaleBar._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IScaleBar, IScaleBar2, IDoubleFillScaleBar, IScaleMarks, IMapSurround, IQuerySize, IBoundsProperties, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IConnectionPointContainer, IGraphicsComposite, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySupport, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITransformEvents, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize]
AlternatingScaleBar._outgoing_interfaces_ = [IMapSurroundEvents]

IBoundsProperties._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if the bounds has a fixed aspect ratio.')], HRESULT, 'FixedAspectRatio',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the bounds has a fixed aspect ratio.')], HRESULT, 'FixedAspectRatio',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates if size is determined by some other property like the symbol.')], HRESULT, 'FixedSize',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
]
################################################################
## code template for IBoundsProperties implementation
##class IBoundsProperties_Impl(object):
##    @property
##    def FixedSize(self):
##        u'Indicates if size is determined by some other property like the symbol.'
##        #return flag
##
##    def _get(self):
##        u'Indicates if the bounds has a fixed aspect ratio.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if the bounds has a fixed aspect ratio.'
##    FixedAspectRatio = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'esriOverposterPointPlacementMethod'
esriAroundPoint = 0
esriOnTopPoint = 1
esriSpecifiedAngles = 2
esriRotationField = 3
esriOverposterPointPlacementMethod = c_int # enum
class IMSSubFeatureLayer(CoClass):
    u'A collection of IMS features as a sublayer of an IMSMapLayer.'
    _reg_clsid_ = GUID('{BD14549F-6A3C-4056-BBF3-16677FF32332}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IIMSSubLayer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the IMS sub layer.'
    _iid_ = GUID('{D090AA89-C2F1-11D3-9FEF-00C04F6BC6A5}')
    _idlflags_ = ['oleautomation']
class IFeatureSelection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control feature selection.'
    _iid_ = GUID('{9336A280-C9A3-11D1-847E-0000F875B9C6}')
    _idlflags_ = ['oleautomation']
class ILayerFields(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u"Provides access to members that work with a layer's fields."
    _iid_ = GUID('{A2BAAE2B-969B-11D2-AE77-080009EC732A}')
    _idlflags_ = ['oleautomation']
class IFeatureLayerSelectionEvents(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to events that occur when the selection changes.'
    _iid_ = GUID('{B97617BE-5A52-11D3-9F6C-00C04F6BC886}')
    _idlflags_ = ['oleautomation']
class IHyperlinkContainer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that manage all the hyperlinks of a layer.'
    _iid_ = GUID('{D1A02A0B-2113-11D3-9F98-00C04F6BC78E}')
    _idlflags_ = ['oleautomation']
class IHotlinkContainer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that manage all the hotlinks of a layer (e.g. field based hyperlinks or those that that call macros).'
    _iid_ = GUID('{D1A02A0C-2113-11D3-9F98-00C04F6BC78E}')
    _idlflags_ = ['oleautomation']
class IHotlinkMacro(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a hyperlink that calls a macro.'
    _iid_ = GUID('{D7EE3484-004D-11D4-9FE7-00C04F6BC78E}')
    _idlflags_ = ['oleautomation']
class IHotlinkExpression(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u"Provides access to members that work with a layer's hyperlink expression."
    _iid_ = GUID('{6FB88442-C7D2-4355-92C0-E96A577636D2}')
    _idlflags_ = ['oleautomation']
class IRelationshipClassCollection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that return the memory relationship classes defined for standalone tables or layers in ArcMap.'
    _iid_ = GUID('{741D6114-FB6B-11D3-ADF5-00C04FA33A15}')
    _idlflags_ = ['oleautomation']
class IRelationshipClassCollectionEdit(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that add and remove memory relationship classes from a standalone table or layer.'
    _iid_ = GUID('{B725DE95-FF76-11D3-A0B5-00C04F6BC626}')
    _idlflags_ = ['oleautomation']
class ISelectionLayerDefinition(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that are used to create a selection layer from an existing selection layer.'
    _iid_ = GUID('{863E18BB-9B3E-4EEE-AC2D-F891E8ED8FD9}')
    _idlflags_ = ['oleautomation']
class IFeatureGeometryAccess(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the methods that indicate the access to the geomtry.'
    _iid_ = GUID('{ADDF1B83-7D75-49C6-A587-73A0ABA90E99}')
    _idlflags_ = ['oleautomation']
class IHTMLPopupIdentify2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that consume the HTML popup tool content.'
    _iid_ = GUID('{8CC24376-C6E0-4AE0-8561-17FA049AEE03}')
    _idlflags_ = ['oleautomation']
class IDisplayString(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u"Provides access to members that work with a layer's display expression."
    _iid_ = GUID('{8D090ACB-8C9E-4343-A3CC-F9DA9BE3C401}')
    _idlflags_ = ['oleautomation']
IMSSubFeatureLayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IIMSSubLayer, IFeatureLayer, ILayer, IFeatureSelection, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeoDataset, ILayerFields, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITableFields, IIdentify, IDataLayer, ILayerDrawingProperties, ILayerInfo, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayAdmin, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayFilterManager, IHyperlinkContainer, IHotlinkContainer, IHotlinkMacro, IHotlinkExpression, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataset, IRelationshipClassCollection, IRelationshipClassCollectionEdit, IDisplayTable, ISelectionLayerDefinition, IPublishLayer, ILayerGeneralProperties, IFeatureGeometryAccess, IHTMLPopupInfo, IHTMLPopupInfo2, IHTMLPopupIdentify, IHTMLPopupIdentify2, IDisplayString, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersionSupportGEN]
IMSSubFeatureLayer._outgoing_interfaces_ = [ILayerEvents, IFeatureLayerSelectionEvents]

class RelateDescription(CoClass):
    u'A colcass that describes a relate for QueryRelatedRows.'
    _reg_clsid_ = GUID('{B1353E90-50D2-42FA-B9A6-519BAF66A951}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IRelateDescription(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the RelateDescription Interface.'
    _iid_ = GUID('{BADFD2ED-2776-4B21-879A-B99B2EA582A6}')
    _idlflags_ = ['oleautomation']
RelateDescription._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRelateDescription, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

class IMapServerRESTLayer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the available properties of a map server rest layer object.'
    _iid_ = GUID('{086DE767-1216-4EF6-813F-2D01AE4D9360}')
    _idlflags_ = ['oleautomation']
IMapServerRESTLayer._methods_ = [
    COMMETHOD([helpstring(u'Connects to a MapService using a REST URL.')], HRESULT, 'Connect',
              ( ['in'], BSTR, 'restUrl' )),
    COMMETHOD(['propget', helpstring(u'Whether to render the MapService with a transparent background.')], HRESULT, 'TransparentBackground',
              ( ['out'], POINTER(VARIANT_BOOL), 'TransparentBackground' )),
]
################################################################
## code template for IMapServerRESTLayer implementation
##class IMapServerRESTLayer_Impl(object):
##    @property
##    def TransparentBackground(self):
##        u'Whether to render the MapService with a transparent background.'
##        #return TransparentBackground
##
##    def Connect(self, restUrl):
##        u'Connects to a MapService using a REST URL.'
##        #return 
##

class IPointPlacementPriorities(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control placement position priorities for point labels.'
    _iid_ = GUID('{261A4371-D9D5-11D2-A806-CC9F870BCD5A}')
    _idlflags_ = ['oleautomation']
IPointPlacementPriorities._methods_ = [
    COMMETHOD(['propget', helpstring(u'Label position priority for above and to the left (0-9).')], HRESULT, 'AboveLeft',
              ( ['retval', 'out'], POINTER(c_int), 'Priority' )),
    COMMETHOD(['propput', helpstring(u'Label position priority for above and to the left (0-9).')], HRESULT, 'AboveLeft',
              ( ['in'], c_int, 'Priority' )),
    COMMETHOD(['propget', helpstring(u'Label position priority for above and center (0-9).')], HRESULT, 'AboveCenter',
              ( ['retval', 'out'], POINTER(c_int), 'Priority' )),
    COMMETHOD(['propput', helpstring(u'Label position priority for above and center (0-9).')], HRESULT, 'AboveCenter',
              ( ['in'], c_int, 'Priority' )),
    COMMETHOD(['propget', helpstring(u'Label position priority for above and to the right (0-9).')], HRESULT, 'AboveRight',
              ( ['retval', 'out'], POINTER(c_int), 'Priority' )),
    COMMETHOD(['propput', helpstring(u'Label position priority for above and to the right (0-9).')], HRESULT, 'AboveRight',
              ( ['in'], c_int, 'Priority' )),
    COMMETHOD(['propget', helpstring(u'Label position priority for center and to the right (0-9).')], HRESULT, 'CenterRight',
              ( ['retval', 'out'], POINTER(c_int), 'Priority' )),
    COMMETHOD(['propput', helpstring(u'Label position priority for center and to the right (0-9).')], HRESULT, 'CenterRight',
              ( ['in'], c_int, 'Priority' )),
    COMMETHOD(['propget', helpstring(u'Label position priority for below and to the right (0-9).')], HRESULT, 'BelowRight',
              ( ['retval', 'out'], POINTER(c_int), 'Priority' )),
    COMMETHOD(['propput', helpstring(u'Label position priority for below and to the right (0-9).')], HRESULT, 'BelowRight',
              ( ['in'], c_int, 'Priority' )),
    COMMETHOD(['propget', helpstring(u'Label position priority for below and center (0-9).')], HRESULT, 'BelowCenter',
              ( ['retval', 'out'], POINTER(c_int), 'Priority' )),
    COMMETHOD(['propput', helpstring(u'Label position priority for below and center (0-9).')], HRESULT, 'BelowCenter',
              ( ['in'], c_int, 'Priority' )),
    COMMETHOD(['propget', helpstring(u'Label position priority for below and to the left (0-9).')], HRESULT, 'BelowLeft',
              ( ['retval', 'out'], POINTER(c_int), 'Priority' )),
    COMMETHOD(['propput', helpstring(u'Label position priority for below and to the left (0-9).')], HRESULT, 'BelowLeft',
              ( ['in'], c_int, 'Priority' )),
    COMMETHOD(['propget', helpstring(u'Label position priority for center and to the left (0-9).')], HRESULT, 'CenterLeft',
              ( ['retval', 'out'], POINTER(c_int), 'Priority' )),
    COMMETHOD(['propput', helpstring(u'Label position priority for center and to the left (0-9).')], HRESULT, 'CenterLeft',
              ( ['in'], c_int, 'Priority' )),
]
################################################################
## code template for IPointPlacementPriorities implementation
##class IPointPlacementPriorities_Impl(object):
##    def _get(self):
##        u'Label position priority for above and to the right (0-9).'
##        #return Priority
##    def _set(self, Priority):
##        u'Label position priority for above and to the right (0-9).'
##    AboveRight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Label position priority for above and to the left (0-9).'
##        #return Priority
##    def _set(self, Priority):
##        u'Label position priority for above and to the left (0-9).'
##    AboveLeft = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Label position priority for below and to the left (0-9).'
##        #return Priority
##    def _set(self, Priority):
##        u'Label position priority for below and to the left (0-9).'
##    BelowLeft = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Label position priority for center and to the right (0-9).'
##        #return Priority
##    def _set(self, Priority):
##        u'Label position priority for center and to the right (0-9).'
##    CenterRight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Label position priority for above and center (0-9).'
##        #return Priority
##    def _set(self, Priority):
##        u'Label position priority for above and center (0-9).'
##    AboveCenter = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Label position priority for center and to the left (0-9).'
##        #return Priority
##    def _set(self, Priority):
##        u'Label position priority for center and to the left (0-9).'
##    CenterLeft = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Label position priority for below and center (0-9).'
##        #return Priority
##    def _set(self, Priority):
##        u'Label position priority for below and center (0-9).'
##    BelowCenter = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Label position priority for below and to the right (0-9).'
##        #return Priority
##    def _set(self, Priority):
##        u'Label position priority for below and to the right (0-9).'
##    BelowRight = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'acMarkerType'
acCircleMarker = 0
acTriangleMarker = 1
acSquareMarker = 2
acCrossMarker = 3
acStarMarker = 4
acMarkerType = c_int # enum
class IMapServerData(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to map features and their values.'
    _iid_ = GUID('{ADDAEF3B-870A-4E9D-9AB0-242A72C3F812}')
    _idlflags_ = ['oleautomation']
IMapServerData._methods_ = [
    COMMETHOD([helpstring(u'Returns the value of a given feature as a string.')], HRESULT, 'GetFeatureValue',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], c_int, 'LayerID' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeature), 'Feature' ),
              ( ['in'], BSTR, 'FieldName' ),
              ( ['retval', 'out'], POINTER(BSTR), 'fieldValue' )),
    COMMETHOD([helpstring(u'Returns a feature, given the feature ID and layer.')], HRESULT, 'GetFeature',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], c_int, 'LayerID' ),
              ( ['in'], c_int, 'FeatureId' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeature)), 'Feature' )),
]
################################################################
## code template for IMapServerData implementation
##class IMapServerData_Impl(object):
##    def GetFeature(self, MapName, LayerID, FeatureId):
##        u'Returns a feature, given the feature ID and layer.'
##        #return Feature
##
##    def GetFeatureValue(self, MapName, LayerID, Feature, FieldName):
##        u'Returns the value of a given feature as a string.'
##        #return fieldValue
##

class DoubleAlternatingScaleBar(CoClass):
    u'A map surround for displaying a double alternating scale bar.'
    _reg_clsid_ = GUID('{6589F148-F7F7-11D2-B872-00600802E603}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
DoubleAlternatingScaleBar._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IScaleBar, IScaleBar2, IDoubleFillScaleBar, IScaleMarks, IMapSurround, IQuerySize, IBoundsProperties, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IConnectionPointContainer, IGraphicsComposite, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySupport, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITransformEvents, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]
DoubleAlternatingScaleBar._outgoing_interfaces_ = [IMapSurroundEvents]

IGraphicElement._methods_ = [
    COMMETHOD(['propget', helpstring(u'Spatial reference of the map.')], HRESULT, 'SpatialReference',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference)), 'spatialRef' )),
    COMMETHOD(['propputref', helpstring(u'Spatial reference of the map.')], HRESULT, 'SpatialReference',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'spatialRef' )),
]
################################################################
## code template for IGraphicElement implementation
##class IGraphicElement_Impl(object):
##    def SpatialReference(self, spatialRef):
##        u'Spatial reference of the map.'
##        #return 
##

class IACCalloutMarkerSymbol(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control ArcIMS callout marker symbol.'
    _iid_ = GUID('{58C9F9EF-622F-4F7A-A64B-EC3EA34B2FE2}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'acFontStyle'
acRegularFont = 0
acBoldFont = 1
acItalicFont = 2
acUnderlineFont = 3
acOutlineFont = 4
acBoldItalicFont = 5
acFontStyle = c_int # enum
IACCalloutMarkerSymbol._methods_ = [
    COMMETHOD(['propget', helpstring(u'The font name.')], HRESULT, 'Font',
              ( ['retval', 'out'], POINTER(BSTR), 'Font' )),
    COMMETHOD(['propput', helpstring(u'The font name.')], HRESULT, 'Font',
              ( ['in'], BSTR, 'Font' )),
    COMMETHOD(['propget', helpstring(u'The font style.')], HRESULT, 'FontStyle',
              ( ['retval', 'out'], POINTER(acFontStyle), 'FontStyle' )),
    COMMETHOD(['propput', helpstring(u'The font style.')], HRESULT, 'FontStyle',
              ( ['in'], acFontStyle, 'FontStyle' )),
    COMMETHOD(['propget', helpstring(u'The font size.')], HRESULT, 'FontSize',
              ( ['retval', 'out'], POINTER(c_int), 'FontSize' )),
    COMMETHOD(['propput', helpstring(u'The font size.')], HRESULT, 'FontSize',
              ( ['in'], c_int, 'FontSize' )),
    COMMETHOD(['propget', helpstring(u'The font color.')], HRESULT, 'FontColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'The font color.')], HRESULT, 'FontColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the outline is used.')], HRESULT, 'Outline',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the outline is used.')], HRESULT, 'Outline',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'The outline color.')], HRESULT, 'OutlineColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'The outline color.')], HRESULT, 'OutlineColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the glow is used.')], HRESULT, 'Glowing',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the glow is used.')], HRESULT, 'Glowing',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'The glowing color.')], HRESULT, 'GlowingColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'The glowing color.')], HRESULT, 'GlowingColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the shadow is used.')], HRESULT, 'Shadow',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the shadow is used.')], HRESULT, 'Shadow',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'The shadow color.')], HRESULT, 'ShadowColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'The shadow color.')], HRESULT, 'ShadowColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'The back color.')], HRESULT, 'BackColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'The back color.')], HRESULT, 'BackColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'The boundary color.')], HRESULT, 'BoundaryColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'The boundary color.')], HRESULT, 'BoundaryColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'The distance between the point and the callout.')], HRESULT, 'Interval',
              ( ['retval', 'out'], POINTER(c_int), 'Interval' )),
    COMMETHOD(['propput', helpstring(u'The distance between the point and the callout.')], HRESULT, 'Interval',
              ( ['in'], c_int, 'Interval' )),
]
################################################################
## code template for IACCalloutMarkerSymbol implementation
##class IACCalloutMarkerSymbol_Impl(object):
##    def _get(self):
##        u'The font style.'
##        #return FontStyle
##    def _set(self, FontStyle):
##        u'The font style.'
##    FontStyle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the outline is used.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if the outline is used.'
##    Outline = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The distance between the point and the callout.'
##        #return Interval
##    def _set(self, Interval):
##        u'The distance between the point and the callout.'
##    Interval = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The shadow color.'
##        #return Color
##    def _set(self, Color):
##        u'The shadow color.'
##    ShadowColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The boundary color.'
##        #return Color
##    def _set(self, Color):
##        u'The boundary color.'
##    BoundaryColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the glow is used.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if the glow is used.'
##    Glowing = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The font size.'
##        #return FontSize
##    def _set(self, FontSize):
##        u'The font size.'
##    FontSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The glowing color.'
##        #return Color
##    def _set(self, Color):
##        u'The glowing color.'
##    GlowingColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The back color.'
##        #return Color
##    def _set(self, Color):
##        u'The back color.'
##    BackColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The font color.'
##        #return Color
##    def _set(self, Color):
##        u'The font color.'
##    FontColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the shadow is used.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if the shadow is used.'
##    Shadow = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The font name.'
##        #return Font
##    def _set(self, Font):
##        u'The font name.'
##    Font = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The outline color.'
##        #return Color
##    def _set(self, Color):
##        u'The outline color.'
##    OutlineColor = property(_get, _set, doc = _set.__doc__)
##

IMapSurround._methods_ = [
    COMMETHOD(['propget', helpstring(u'The parent map.')], HRESULT, 'Map',
              ( ['retval', 'out'], POINTER(POINTER(IMap)), 'Map' )),
    COMMETHOD(['propputref', helpstring(u'The parent map.')], HRESULT, 'Map',
              ( ['in'], POINTER(IMap), 'Map' )),
    COMMETHOD(['propget', helpstring(u'Name of the map surround.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'Name of the map surround.')], HRESULT, 'Name',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'Icon used to represent the map surround.')], HRESULT, 'Icon',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE), 'hIcon' )),
    COMMETHOD([helpstring(u'Returns the bounds of the map surround.')], HRESULT, 'QueryBounds',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'oldBounds' ),
              ( [], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'newBounds' )),
    COMMETHOD([helpstring(u'Adjusts the map surround to fit the bounds.  The changed argument indicates whether the size of the map surround was changed.')], HRESULT, 'FitToBounds',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'Bounds' ),
              ( ['out'], POINTER(VARIANT_BOOL), 'changed' )),
    COMMETHOD([helpstring(u'Used to batch operations together to minimize notifications.')], HRESULT, 'DelayEvents',
              ( ['in'], VARIANT_BOOL, 'delay' )),
    COMMETHOD([helpstring(u'Makes sure the latest updates are refected the next time the Map Surround is drawn.')], HRESULT, 'Refresh'),
    COMMETHOD([helpstring(u'Draws the map surround into the specified display bounds.')], HRESULT, 'Draw',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'TrackCancel' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'Bounds' )),
]
################################################################
## code template for IMapSurround implementation
##class IMapSurround_Impl(object):
##    def Map(self, Map):
##        u'The parent map.'
##        #return 
##
##    def Draw(self, Display, TrackCancel, Bounds):
##        u'Draws the map surround into the specified display bounds.'
##        #return 
##
##    def _get(self):
##        u'Name of the map surround.'
##        #return Name
##    def _set(self, Name):
##        u'Name of the map surround.'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def Refresh(self):
##        u'Makes sure the latest updates are refected the next time the Map Surround is drawn.'
##        #return 
##
##    def FitToBounds(self, Display, Bounds):
##        u'Adjusts the map surround to fit the bounds.  The changed argument indicates whether the size of the map surround was changed.'
##        #return changed
##
##    def DelayEvents(self, delay):
##        u'Used to batch operations together to minimize notifications.'
##        #return 
##
##    def QueryBounds(self, Display, oldBounds, newBounds):
##        u'Returns the bounds of the map surround.'
##        #return 
##
##    @property
##    def Icon(self):
##        u'Icon used to represent the map surround.'
##        #return hIcon
##


# values for enumeration 'esriScaleBarPos'
esriScaleBarAbove = 0
esriScaleBarBeforeLabels = 1
esriScaleBarAfterLabels = 2
esriScaleBarBeforeBar = 3
esriScaleBarAfterBar = 4
esriScaleBarBelow = 5
esriScaleBarAboveLeft = 6
esriScaleBarAboveRight = 7
esriScaleBarAboveEnds = 8
esriScaleBarBeforeAndAfterLabels = 9
esriScaleBarBeforeAndAfterBar = 10
esriScaleBarBelowLeft = 11
esriScaleBarBelowRight = 12
esriScaleBarBelowEnds = 13
esriScaleBarPos = c_int # enum

# values for enumeration 'esriScaleBarFrequency'
esriScaleBarNone = 0
esriScaleBarOne = 1
esriScaleBarMajorDivisions = 2
esriScaleBarDivisions = 3
esriScaleBarDivisionsAndFirstMidpoint = 4
esriScaleBarDivisionsAndFirstSubdivisions = 5
esriScaleBarDivisionsAndSubdivisions = 6
esriScaleBarFrequency = c_int # enum

# values for enumeration 'esriVertPosEnum'
esriAbove = 0
esriTop = 1
esriOn = 2
esriBottom = 3
esriBelow = 4
esriVertPosEnum = c_int # enum

# values for enumeration 'esriScaleBarResizeHint'
esriScaleBarFixed = 0
esriScaleBarAutoDivision = 1
esriScaleBarAutoDivisions = 2
esriScaleBarAutoDivisionAndDivisions = 3
esriScaleBarResizeHint = c_int # enum
IScaleBar._methods_ = [
    COMMETHOD(['propget', helpstring(u'Number of units in one major division.')], HRESULT, 'Division',
              ( ['retval', 'out'], POINTER(c_double), 'Units' )),
    COMMETHOD(['propput', helpstring(u'Number of units in one major division.')], HRESULT, 'Division',
              ( ['in'], c_double, 'Units' )),
    COMMETHOD(['propget', helpstring(u'Total number of divisions (including those before zero).')], HRESULT, 'Divisions',
              ( ['retval', 'out'], POINTER(c_short), 'Count' )),
    COMMETHOD(['propput', helpstring(u'Total number of divisions (including those before zero).')], HRESULT, 'Divisions',
              ( ['in'], c_short, 'Count' )),
    COMMETHOD(['propget', helpstring(u'Number of divisions to the left of zero.')], HRESULT, 'DivisionsBeforeZero',
              ( ['retval', 'out'], POINTER(c_short), 'Count' )),
    COMMETHOD(['propput', helpstring(u'Number of divisions to the left of zero.')], HRESULT, 'DivisionsBeforeZero',
              ( ['in'], c_short, 'Count' )),
    COMMETHOD(['propget', helpstring(u'Number of subdivisions per major division.')], HRESULT, 'Subdivisions',
              ( ['retval', 'out'], POINTER(c_short), 'Units' )),
    COMMETHOD(['propput', helpstring(u'Number of subdivisions per major division.')], HRESULT, 'Subdivisions',
              ( ['in'], c_short, 'Units' )),
    COMMETHOD(['propget', helpstring(u'The units reported.')], HRESULT, 'Units',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits), 'Units' )),
    COMMETHOD(['propput', helpstring(u'The units reported.')], HRESULT, 'Units',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits, 'Units' )),
    COMMETHOD(['propget', helpstring(u'The unit label.')], HRESULT, 'UnitLabel',
              ( ['retval', 'out'], POINTER(BSTR), 'UnitLabel' )),
    COMMETHOD(['propput', helpstring(u'The unit label.')], HRESULT, 'UnitLabel',
              ( ['in'], BSTR, 'UnitLabel' )),
    COMMETHOD(['propget', helpstring(u'Vertical positioning of the unit label.')], HRESULT, 'UnitLabelPosition',
              ( ['retval', 'out'], POINTER(esriScaleBarPos), 'position' )),
    COMMETHOD(['propput', helpstring(u'Vertical positioning of the unit label.')], HRESULT, 'UnitLabelPosition',
              ( ['in'], esriScaleBarPos, 'position' )),
    COMMETHOD(['propget', helpstring(u'Gap between the scale bar and the unit label in points (1/72 inch).')], HRESULT, 'UnitLabelGap',
              ( ['retval', 'out'], POINTER(c_double), 'points' )),
    COMMETHOD(['propput', helpstring(u'Gap between the scale bar and the unit label in points (1/72 inch).')], HRESULT, 'UnitLabelGap',
              ( ['in'], c_double, 'points' )),
    COMMETHOD(['propget', helpstring(u'Unit label symbol.')], HRESULT, 'UnitLabelSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol)), 'Symbol' )),
    COMMETHOD(['propput', helpstring(u'Unit label symbol.')], HRESULT, 'UnitLabelSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'The label style indicating which marks are labeled.')], HRESULT, 'LabelFrequency',
              ( ['retval', 'out'], POINTER(esriScaleBarFrequency), 'LabelFrequency' )),
    COMMETHOD(['propput', helpstring(u'The label style indicating which marks are labeled.')], HRESULT, 'LabelFrequency',
              ( ['in'], esriScaleBarFrequency, 'LabelFrequency' )),
    COMMETHOD(['propget', helpstring(u'Number format.')], HRESULT, 'NumberFormat',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.INumberFormat)), 'Format' )),
    COMMETHOD(['propput', helpstring(u'Number format.')], HRESULT, 'NumberFormat',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.INumberFormat), 'Format' )),
    COMMETHOD(['propget', helpstring(u'Vertical positioning of the mark labels.')], HRESULT, 'LabelPosition',
              ( ['retval', 'out'], POINTER(esriVertPosEnum), 'position' )),
    COMMETHOD(['propput', helpstring(u'Vertical positioning of the mark labels.')], HRESULT, 'LabelPosition',
              ( ['in'], esriVertPosEnum, 'position' )),
    COMMETHOD(['propget', helpstring(u'Vertical gap between the bar and the labels in points (1/72 inch).')], HRESULT, 'LabelGap',
              ( ['retval', 'out'], POINTER(c_double), 'points' )),
    COMMETHOD(['propput', helpstring(u'Vertical gap between the bar and the labels in points (1/72 inch).')], HRESULT, 'LabelGap',
              ( ['in'], c_double, 'points' )),
    COMMETHOD(['propget', helpstring(u'Symbol used to draw the labels.')], HRESULT, 'LabelSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol)), 'Symbol' )),
    COMMETHOD(['propput', helpstring(u'Symbol used to draw the labels.')], HRESULT, 'LabelSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'Color used to draw the bar.')], HRESULT, 'BarColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'Color used to draw the bar.')], HRESULT, 'BarColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'Height of the bar in points (1/72 inch).')], HRESULT, 'BarHeight',
              ( ['retval', 'out'], POINTER(c_double), 'points' )),
    COMMETHOD(['propput', helpstring(u'Height of the bar in points (1/72 inch).')], HRESULT, 'BarHeight',
              ( ['in'], c_double, 'points' )),
    COMMETHOD(['propget', helpstring(u'Indicates what happens when scale bar is resized.')], HRESULT, 'ResizeHint',
              ( ['retval', 'out'], POINTER(esriScaleBarResizeHint), 'hint' )),
    COMMETHOD(['propput', helpstring(u'Indicates what happens when scale bar is resized.')], HRESULT, 'ResizeHint',
              ( ['in'], esriScaleBarResizeHint, 'hint' )),
    COMMETHOD([helpstring(u'Sets division and units based on map.')], HRESULT, 'UseMapSettings'),
]
################################################################
## code template for IScaleBar implementation
##class IScaleBar_Impl(object):
##    def _get(self):
##        u'Number of units in one major division.'
##        #return Units
##    def _set(self, Units):
##        u'Number of units in one major division.'
##    Division = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Number of divisions to the left of zero.'
##        #return Count
##    def _set(self, Count):
##        u'Number of divisions to the left of zero.'
##    DivisionsBeforeZero = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The unit label.'
##        #return UnitLabel
##    def _set(self, UnitLabel):
##        u'The unit label.'
##    UnitLabel = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Number format.'
##        #return Format
##    def _set(self, Format):
##        u'Number format.'
##    NumberFormat = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Total number of divisions (including those before zero).'
##        #return Count
##    def _set(self, Count):
##        u'Total number of divisions (including those before zero).'
##    Divisions = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Symbol used to draw the labels.'
##        #return Symbol
##    def _set(self, Symbol):
##        u'Symbol used to draw the labels.'
##    LabelSymbol = property(_get, _set, doc = _set.__doc__)
##
##    def UseMapSettings(self):
##        u'Sets division and units based on map.'
##        #return 
##
##    def _get(self):
##        u'The label style indicating which marks are labeled.'
##        #return LabelFrequency
##    def _set(self, LabelFrequency):
##        u'The label style indicating which marks are labeled.'
##    LabelFrequency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Height of the bar in points (1/72 inch).'
##        #return points
##    def _set(self, points):
##        u'Height of the bar in points (1/72 inch).'
##    BarHeight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Color used to draw the bar.'
##        #return Color
##    def _set(self, Color):
##        u'Color used to draw the bar.'
##    BarColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Number of subdivisions per major division.'
##        #return Units
##    def _set(self, Units):
##        u'Number of subdivisions per major division.'
##    Subdivisions = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates what happens when scale bar is resized.'
##        #return hint
##    def _set(self, hint):
##        u'Indicates what happens when scale bar is resized.'
##    ResizeHint = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Vertical positioning of the mark labels.'
##        #return position
##    def _set(self, position):
##        u'Vertical positioning of the mark labels.'
##    LabelPosition = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Vertical gap between the bar and the labels in points (1/72 inch).'
##        #return points
##    def _set(self, points):
##        u'Vertical gap between the bar and the labels in points (1/72 inch).'
##    LabelGap = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The units reported.'
##        #return Units
##    def _set(self, Units):
##        u'The units reported.'
##    Units = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Gap between the scale bar and the unit label in points (1/72 inch).'
##        #return points
##    def _set(self, points):
##        u'Gap between the scale bar and the unit label in points (1/72 inch).'
##    UnitLabelGap = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Vertical positioning of the unit label.'
##        #return position
##    def _set(self, position):
##        u'Vertical positioning of the unit label.'
##    UnitLabelPosition = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Unit label symbol.'
##        #return Symbol
##    def _set(self, Symbol):
##        u'Unit label symbol.'
##    UnitLabelSymbol = property(_get, _set, doc = _set.__doc__)
##

class IClassBreakInfos(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the ClassBreakInfos Interface.'
    _iid_ = GUID('{5514A065-FFD6-4FB6-AC43-0D6CB9D8E1FB}')
    _idlflags_ = []
IClassBreakInfos._methods_ = [
    COMMETHOD(['propget', helpstring(u'The number of class breaks.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The class break info at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IClassBreakInfo)), 'ppClassBreakInfo' )),
    COMMETHOD([helpstring(u'Removes the class break info at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all class break infos.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Adds a class break info.')], HRESULT, 'Add',
              ( ['in'], POINTER(IClassBreakInfo), 'pClassBreakInfo' )),
    COMMETHOD([helpstring(u'Adds a class break info at the specified position.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(IClassBreakInfo), 'pClassBreakInfo' )),
]
################################################################
## code template for IClassBreakInfos implementation
##class IClassBreakInfos_Impl(object):
##    @property
##    def Count(self):
##        u'The number of class breaks.'
##        #return Count
##
##    def Insert(self, Index, pClassBreakInfo):
##        u'Adds a class break info at the specified position.'
##        #return 
##
##    def Remove(self, Index):
##        u'Removes the class break info at the specified position.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'The class break info at the specified position.'
##        #return ppClassBreakInfo
##
##    def RemoveAll(self):
##        u'Removes all class break infos.'
##        #return 
##
##    def Add(self, pClassBreakInfo):
##        u'Adds a class break info.'
##        #return 
##

class TinLayerFactory(CoClass):
    u'The TIN Layer Factory is used to help look for TINs on disk.'
    _reg_clsid_ = GUID('{CE2D91A2-1DB9-4D7A-A6AD-304383550320}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class ILayerFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the creation of layers through a factory.'
    _iid_ = GUID('{CC6D3D71-48B4-11D0-92D7-00805F7C28B0}')
    _idlflags_ = ['oleautomation']
TinLayerFactory._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILayerFactory]

class IRenderingRule(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a rendering rule.'
    _iid_ = GUID('{5CF4CA77-AAEF-4153-9C45-060DDD812670}')
    _idlflags_ = ['oleautomation']
IRenderingRule._methods_ = [
    COMMETHOD(['propget', helpstring(u'The rendering rule name.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'pName' )),
    COMMETHOD(['propput', helpstring(u'The rendering rule name.')], HRESULT, 'Name',
              ( ['in'], BSTR, 'pName' )),
    COMMETHOD(['propget', helpstring(u'The rendering rule description.')], HRESULT, 'Description',
              ( ['retval', 'out'], POINTER(BSTR), 'pDescription' )),
    COMMETHOD(['propput', helpstring(u'The rendering rule description.')], HRESULT, 'Description',
              ( ['in'], BSTR, 'pDescription' )),
    COMMETHOD(['propget', helpstring(u'The raster function.')], HRESULT, 'Function',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._8F0541A3_D5BE_4B3F_A8D9_062D5579E19B_0_10_2.IRasterFunction)), 'ppFunction' )),
    COMMETHOD(['propputref', helpstring(u'The raster function.')], HRESULT, 'Function',
              ( ['in'], POINTER(comtypes.gen._8F0541A3_D5BE_4B3F_A8D9_062D5579E19B_0_10_2.IRasterFunction), 'ppFunction' )),
    COMMETHOD(['propget', helpstring(u'The raster function arguments.')], HRESULT, 'Arguments',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._8F0541A3_D5BE_4B3F_A8D9_062D5579E19B_0_10_2.IRasterFunctionArguments)), 'ppArguments' )),
    COMMETHOD(['propputref', helpstring(u'The raster function arguments.')], HRESULT, 'Arguments',
              ( ['in'], POINTER(comtypes.gen._8F0541A3_D5BE_4B3F_A8D9_062D5579E19B_0_10_2.IRasterFunctionArguments), 'ppArguments' )),
    COMMETHOD(['propget', helpstring(u'The raster function variable name.')], HRESULT, 'VariableName',
              ( ['retval', 'out'], POINTER(BSTR), 'pVariableName' )),
    COMMETHOD(['propput', helpstring(u'The raster function variable name.')], HRESULT, 'VariableName',
              ( ['in'], BSTR, 'pVariableName' )),
    COMMETHOD(['propget', helpstring(u'The raster renderer.')], HRESULT, 'Renderer',
              ( ['retval', 'out'], POINTER(POINTER(IRasterRenderer)), 'ppRenderer' )),
    COMMETHOD(['propputref', helpstring(u'The raster renderer.')], HRESULT, 'Renderer',
              ( ['in'], POINTER(IRasterRenderer), 'ppRenderer' )),
]
################################################################
## code template for IRenderingRule implementation
##class IRenderingRule_Impl(object):
##    def Function(self, ppFunction):
##        u'The raster function.'
##        #return 
##
##    def _get(self):
##        u'The rendering rule name.'
##        #return pName
##    def _set(self, pName):
##        u'The rendering rule name.'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def Renderer(self, ppRenderer):
##        u'The raster renderer.'
##        #return 
##
##    def _get(self):
##        u'The rendering rule description.'
##        #return pDescription
##    def _set(self, pDescription):
##        u'The rendering rule description.'
##    Description = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The raster function variable name.'
##        #return pVariableName
##    def _set(self, pVariableName):
##        u'The raster function variable name.'
##    VariableName = property(_get, _set, doc = _set.__doc__)
##
##    def Arguments(self, ppArguments):
##        u'The raster function arguments.'
##        #return 
##

class CircleElement(CoClass):
    u'The Graphic Element to display Circles.'
    _reg_clsid_ = GUID('{974111DB-C5D2-11D2-9F28-00C04F6BC8DD}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class ICircleElement(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Indicator interface that identifies a Circle element.'
    _iid_ = GUID('{974111D8-C5D2-11D2-9F28-00C04F6BC8DD}')
    _idlflags_ = ['oleautomation']
class IFillShapeElement(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the Fill Shape element.'
    _iid_ = GUID('{3E150C0D-19F5-11D3-9F9E-00C04F6BC8DD}')
    _idlflags_ = ['oleautomation']
CircleElement._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IElement, IElementProperties, IElementProperties2, IElementProperties3, ICircleElement, IFillShapeElement, IGraphicElement, IBoundsProperties, comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ITransform2D, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize]


# values for enumeration 'esriServerPolygonLabelPlacementType'
esriServerPolygonPlacementAlwaysHorizontal = 0
esriServerPolygonLabelPlacementType = c_int # enum
class ITinIdentifyObj(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to query TIN.'
    _iid_ = GUID('{24D49FBD-DE5C-11D2-9F31-00C04F6BC5F4}')
    _idlflags_ = ['oleautomation', 'restricted']
ITinIdentifyObj._methods_ = [
    COMMETHOD(['propput', helpstring(u'The Feature property as IFeature.')], HRESULT, 'Feature',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeature), 'rhs' )),
    COMMETHOD(['propput', helpstring(u'The Location property as IPoint.')], HRESULT, 'Location',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'rhs' )),
]
################################################################
## code template for ITinIdentifyObj implementation
##class ITinIdentifyObj_Impl(object):
##    def _set(self, rhs):
##        u'The Feature property as IFeature.'
##    Feature = property(fset = _set, doc = _set.__doc__)
##
##    def _set(self, rhs):
##        u'The Location property as IPoint.'
##    Location = property(fset = _set, doc = _set.__doc__)
##


# values for enumeration 'esriLabelWhichFeatures'
esriAllFeatures = 0
esriVisibleFeatures = 1
esriSelectedFeatures = 2
esriLabelWhichFeatures = c_int # enum
class IStatisticsRequest(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to properties describing a request for statistics from a Map Server.'
    _iid_ = GUID('{E43D2F45-4A4C-4F90-BABF-F5084386B48A}')
    _idlflags_ = ['oleautomation']
class IStatisticDescriptions(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'StatisticDescription Array'
    _iid_ = GUID('{A74E5F38-B5DA-44DA-B558-28AA4E3DC06B}')
    _idlflags_ = ['oleautomation']
IStatisticsRequest._methods_ = [
    COMMETHOD(['propget', helpstring(u'The array of descriptions for individual statistics.')], HRESULT, 'StatisticDescriptions',
              ( ['retval', 'out'], POINTER(POINTER(IStatisticDescriptions)), 'ppStats' )),
    COMMETHOD(['propputref', helpstring(u'The array of descriptions for individual statistics.')], HRESULT, 'StatisticDescriptions',
              ( ['in'], POINTER(IStatisticDescriptions), 'ppStats' )),
    COMMETHOD(['propget', helpstring(u'Comma-separated list of ORDER BY fields (with ASC or DESC specifiers).')], HRESULT, 'OrderByFields',
              ( ['retval', 'out'], POINTER(BSTR), 'OrderByFields' )),
    COMMETHOD(['propput', helpstring(u'Comma-separated list of ORDER BY fields (with ASC or DESC specifiers).')], HRESULT, 'OrderByFields',
              ( ['in'], BSTR, 'OrderByFields' )),
    COMMETHOD(['propget', helpstring(u'Comma-separated list of GROUP BY fields.')], HRESULT, 'GroupByFields',
              ( ['retval', 'out'], POINTER(BSTR), 'GroupByFields' )),
    COMMETHOD(['propput', helpstring(u'Comma-separated list of GROUP BY fields.')], HRESULT, 'GroupByFields',
              ( ['in'], BSTR, 'GroupByFields' )),
]
################################################################
## code template for IStatisticsRequest implementation
##class IStatisticsRequest_Impl(object):
##    def _get(self):
##        u'Comma-separated list of ORDER BY fields (with ASC or DESC specifiers).'
##        #return OrderByFields
##    def _set(self, OrderByFields):
##        u'Comma-separated list of ORDER BY fields (with ASC or DESC specifiers).'
##    OrderByFields = property(_get, _set, doc = _set.__doc__)
##
##    def StatisticDescriptions(self, ppStats):
##        u'The array of descriptions for individual statistics.'
##        #return 
##
##    def _get(self):
##        u'Comma-separated list of GROUP BY fields.'
##        #return GroupByFields
##    def _set(self, GroupByFields):
##        u'Comma-separated list of GROUP BY fields.'
##    GroupByFields = property(_get, _set, doc = _set.__doc__)
##

class IMapServerLayout(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that serve layout components of maps.'
    _iid_ = GUID('{545329C0-300B-46F3-9FB3-71F30ECFDE62}')
    _idlflags_ = ['oleautomation']
class IPageDescription(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the available properties of a page description object.'
    _iid_ = GUID('{20DA6E47-DD79-4B33-ABC0-171C4BE6C615}')
    _idlflags_ = ['oleautomation']
class IImageDescription(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Image Description Interface.'
    _iid_ = GUID('{0F1F22EB-8DA5-498B-9B84-7CE2EFA14B94}')
    _idlflags_ = ['oleautomation']
class IImageResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Image Result Interface.'
    _iid_ = GUID('{BE47D208-D27A-4048-A118-C9167662DB74}')
    _idlflags_ = ['oleautomation']
class ILayoutImage(IImageResult):
    _case_insensitive_ = True
    u'Provides access to the Layout Image Interface.'
    _iid_ = GUID('{904BA065-AF13-40F4-A661-79B7BCFB989A}')
    _idlflags_ = ['oleautomation']
class ILegend(IMapSurround):
    _case_insensitive_ = True
    u'Provides access to members that control a legend.'
    _iid_ = GUID('{3141F307-38E2-11D1-8809-080009EC732A}')
    _idlflags_ = ['oleautomation']
class INorthArrow(IMapSurround):
    _case_insensitive_ = True
    u'Provides access to members that control the north arrow.'
    _iid_ = GUID('{7A3F91F1-B9E3-11D1-8756-0000F8751720}')
    _idlflags_ = ['oleautomation']
IMapServerLayout._methods_ = [
    COMMETHOD(['propget', helpstring(u'The default page settings.')], HRESULT, 'DefaultPageDescription',
              ( ['retval', 'out'], POINTER(POINTER(IPageDescription)), 'pageDesc' )),
    COMMETHOD([helpstring(u"Generates an image of the layout, based on the given page description object, and writes the image to a specified file on disk. Supported file types are: 'bmp', 'jpg', 'tif', 'png'/'png8', 'png24', 'emf', 'ps', 'pdf', 'ai', 'gif', and 'svg'/'svgz'.")], HRESULT, 'ExportLayout',
              ( ['in'], POINTER(IPageDescription), 'pageDesc' ),
              ( ['in'], POINTER(IImageDescription), 'imageDesc' ),
              ( ['retval', 'out'], POINTER(POINTER(ILayoutImage)), 'LayoutImage' )),
    COMMETHOD([helpstring(u'Exports a legend to an image file.  The client can create the legend object and set its desired properties appropriately.  If legend is Nothing/Null, a default legend will be generated.')], HRESULT, 'ExportLegend',
              ( ['in'], POINTER(ILegend), 'Legend' ),
              ( ['in'], POINTER(IMapDescription), 'mapDesc' ),
              ( ['in'], POINTER(IImageDisplay), 'pMapDisplay' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'BackgroundColor' ),
              ( ['in'], POINTER(IImageDescription), 'imageDesc' ),
              ( ['retval', 'out'], POINTER(POINTER(IImageResult)), 'ImageResult' )),
    COMMETHOD([helpstring(u'Exports a scale bar to an image file.  The client can create the scaleBar object and set its desired properties appropriately.  If scaleBar is Nothing/Null, a default scale bar will be generated.')], HRESULT, 'ExportScaleBar',
              ( ['in'], POINTER(IScaleBar), 'Scalebar' ),
              ( ['in'], POINTER(IMapDescription), 'mapDesc' ),
              ( ['in'], POINTER(IImageDisplay), 'pMapDisplay' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'BackgroundColor' ),
              ( ['in'], POINTER(IImageDescription), 'imageDesc' ),
              ( ['retval', 'out'], POINTER(POINTER(IImageResult)), 'ImageResult' )),
    COMMETHOD([helpstring(u'Exports a north arrow to an image file.  The client can create the arrow object and set its desired properties appropriately.  If arrow is Nothing/Null, a default north arrow will be generated.')], HRESULT, 'ExportNorthArrow',
              ( ['in'], POINTER(INorthArrow), 'arrow' ),
              ( ['in'], POINTER(IMapDescription), 'mapDesc' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'BackgroundColor' ),
              ( ['in'], POINTER(IImageDescription), 'imageDesc' ),
              ( ['retval', 'out'], POINTER(POINTER(IImageResult)), 'ImageResult' )),
    COMMETHOD([helpstring(u'Converts a screen location to a page coordinate.')], HRESULT, 'ToPagePoints',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'pageExtent' ),
              ( ['in'], POINTER(IImageDisplay), 'pageDisplay' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'screenXValues' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'screenYValues' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPointCollection)), 'pagePoints' )),
    COMMETHOD([helpstring(u'Converts a page coordinate to a screen location.')], HRESULT, 'FromPagePoints',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'pageExtent' ),
              ( ['in'], POINTER(IImageDisplay), 'pageDisplay' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPointCollection), 'pagePoints' ),
              ( ['in', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray)), 'screenXValues' ),
              ( ['in', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray)), 'screenYValues' )),
]
################################################################
## code template for IMapServerLayout implementation
##class IMapServerLayout_Impl(object):
##    def ToPagePoints(self, pageExtent, pageDisplay, screenXValues, screenYValues):
##        u'Converts a screen location to a page coordinate.'
##        #return pagePoints
##
##    def ExportScaleBar(self, Scalebar, mapDesc, pMapDisplay, BackgroundColor, imageDesc):
##        u'Exports a scale bar to an image file.  The client can create the scaleBar object and set its desired properties appropriately.  If scaleBar is Nothing/Null, a default scale bar will be generated.'
##        #return ImageResult
##
##    def ExportLegend(self, Legend, mapDesc, pMapDisplay, BackgroundColor, imageDesc):
##        u'Exports a legend to an image file.  The client can create the legend object and set its desired properties appropriately.  If legend is Nothing/Null, a default legend will be generated.'
##        #return ImageResult
##
##    def ExportNorthArrow(self, arrow, mapDesc, BackgroundColor, imageDesc):
##        u'Exports a north arrow to an image file.  The client can create the arrow object and set its desired properties appropriately.  If arrow is Nothing/Null, a default north arrow will be generated.'
##        #return ImageResult
##
##    def FromPagePoints(self, pageExtent, pageDisplay, pagePoints):
##        u'Converts a page coordinate to a screen location.'
##        #return screenXValues, screenYValues
##
##    @property
##    def DefaultPageDescription(self):
##        u'The default page settings.'
##        #return pageDesc
##
##    def ExportLayout(self, pageDesc, imageDesc):
##        u"Generates an image of the layout, based on the given page description object, and writes the image to a specified file on disk. Supported file types are: 'bmp', 'jpg', 'tif', 'png'/'png8', 'png24', 'emf', 'ps', 'pdf', 'ai', 'gif', and 'svg'/'svgz'."
##        #return LayoutImage
##

class IMaplexOverposterLayerProperties3(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the placement of labels for a layer.'
    _iid_ = GUID('{F4430BC2-B50A-FF92-BC02-E5EE071AF333}')
    _idlflags_ = ['oleautomation']
IMaplexOverposterLayerProperties3._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates whether labels should avoid holes in polygons.')], HRESULT, 'AvoidPolygonHoles',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether labels should avoid holes in polygons.')], HRESULT, 'AvoidPolygonHoles',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to allow single sided boundary labeling.')], HRESULT, 'BoundaryLabelingAllowSingleSided',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to allow single sided boundary labeling.')], HRESULT, 'BoundaryLabelingAllowSingleSided',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to allow holes in boundary labeling.')], HRESULT, 'BoundaryLabelingAllowHoles',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to allow holes in boundary labeling.')], HRESULT, 'BoundaryLabelingAllowHoles',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether single sided boundary label is centered on line.')], HRESULT, 'BoundaryLabelingSingleSidedOnLine',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether single sided boundary label is centered on line.')], HRESULT, 'BoundaryLabelingSingleSidedOnLine',
              ( ['in'], VARIANT_BOOL, 'flag' )),
]
################################################################
## code template for IMaplexOverposterLayerProperties3 implementation
##class IMaplexOverposterLayerProperties3_Impl(object):
##    def _get(self):
##        u'Indicates whether to allow holes in boundary labeling.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether to allow holes in boundary labeling.'
##    BoundaryLabelingAllowHoles = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether labels should avoid holes in polygons.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether labels should avoid holes in polygons.'
##    AvoidPolygonHoles = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether to allow single sided boundary labeling.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether to allow single sided boundary labeling.'
##    BoundaryLabelingAllowSingleSided = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether single sided boundary label is centered on line.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether single sided boundary label is centered on line.'
##    BoundaryLabelingSingleSidedOnLine = property(_get, _set, doc = _set.__doc__)
##

IRasterDisplayProps._methods_ = [
    COMMETHOD(['propput', helpstring(u'Contrast value for a raster.')], HRESULT, 'ContrastValue',
              ( ['in'], c_int, 'iValue' )),
    COMMETHOD(['propget', helpstring(u'Contrast value for a raster.')], HRESULT, 'ContrastValue',
              ( ['retval', 'out'], POINTER(c_int), 'iValue' )),
    COMMETHOD(['propput', helpstring(u'Brightness value for a raster.')], HRESULT, 'BrightnessValue',
              ( ['in'], c_int, 'pValue' )),
    COMMETHOD(['propget', helpstring(u'Brightness value for a raster.')], HRESULT, 'BrightnessValue',
              ( ['retval', 'out'], POINTER(c_int), 'pValue' )),
    COMMETHOD(['propput', helpstring(u'Transparency value for a raster.')], HRESULT, 'TransparencyValue',
              ( ['in'], c_int, 'pValue' )),
    COMMETHOD(['propget', helpstring(u'Transparency value for a raster.')], HRESULT, 'TransparencyValue',
              ( ['retval', 'out'], POINTER(c_int), 'pValue' )),
    COMMETHOD(['propget', helpstring(u'Nodata color for a raster.')], HRESULT, 'NoDataColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'ppColor' )),
    COMMETHOD(['propputref', helpstring(u'Nodata color for a raster.')], HRESULT, 'NoDataColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'ppColor' )),
]
################################################################
## code template for IRasterDisplayProps implementation
##class IRasterDisplayProps_Impl(object):
##    def _get(self):
##        u'Transparency value for a raster.'
##        #return pValue
##    def _set(self, pValue):
##        u'Transparency value for a raster.'
##    TransparencyValue = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Brightness value for a raster.'
##        #return pValue
##    def _set(self, pValue):
##        u'Brightness value for a raster.'
##    BrightnessValue = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Contrast value for a raster.'
##        #return iValue
##    def _set(self, iValue):
##        u'Contrast value for a raster.'
##    ContrastValue = property(_get, _set, doc = _set.__doc__)
##
##    def NoDataColor(self, ppColor):
##        u'Nodata color for a raster.'
##        #return 
##

class IMapTableSubtypeInfos(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'MapTableSubtypeInfo Array.'
    _iid_ = GUID('{711D6190-4843-421E-96C0-E855E59850A1}')
    _idlflags_ = ['oleautomation']
class IMapTableSubtypeInfo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to MapTableSubtypeInfo members.'
    _iid_ = GUID('{BD18550B-ADFB-4FD4-BA80-C26814B5F3FE}')
    _idlflags_ = ['oleautomation']
IMapTableSubtypeInfos._methods_ = [
    COMMETHOD(['propget', helpstring(u'The MapTableSubtypeInfo count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The MapTableSubtypeInfo at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IMapTableSubtypeInfo)), 'ppMapTableSubtypeInfo' )),
    COMMETHOD([helpstring(u'Removes the MapTableSubtypeInfo at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all MapTableSubtypeInfo.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Adds a MapTableSubtypeInfo.')], HRESULT, 'Add',
              ( ['in'], POINTER(IMapTableSubtypeInfo), 'pMapTableSubtypeInfo' )),
    COMMETHOD([helpstring(u'Adds a MapTableSubtypeInfo info at the specified position.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(IMapTableSubtypeInfo), 'pMapTableSubtypeInfo' )),
]
################################################################
## code template for IMapTableSubtypeInfos implementation
##class IMapTableSubtypeInfos_Impl(object):
##    @property
##    def Count(self):
##        u'The MapTableSubtypeInfo count.'
##        #return Count
##
##    def Insert(self, Index, pMapTableSubtypeInfo):
##        u'Adds a MapTableSubtypeInfo info at the specified position.'
##        #return 
##
##    def Remove(self, Index):
##        u'Removes the MapTableSubtypeInfo at the specified position.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'The MapTableSubtypeInfo at the specified position.'
##        #return ppMapTableSubtypeInfo
##
##    def RemoveAll(self):
##        u'Removes all MapTableSubtypeInfo.'
##        #return 
##
##    def Add(self, pMapTableSubtypeInfo):
##        u'Adds a MapTableSubtypeInfo.'
##        #return 
##

class IRasterRendererMaker(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that can determine the default display of a raster dataset.'
    _iid_ = GUID('{7C84E06A-C743-11D4-B290-00508BCDC7C8}')
    _idlflags_ = ['oleautomation']
IRasterRendererMaker._methods_ = [
    COMMETHOD([helpstring(u'Returns the raster renderer which should be used for the default display of the input raster.')], HRESULT, 'CreateDefaultRasterRenderer',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' ),
              ( ['retval', 'out'], POINTER(POINTER(IRasterRenderer)), 'ppRasterRenderer' )),
    COMMETHOD(['propget', helpstring(u'Controls the order in which renderer makers are selected.  Higher priority renderer makers are called first.')], HRESULT, 'Priority',
              ( ['retval', 'out'], POINTER(c_int), 'Value' )),
]
################################################################
## code template for IRasterRendererMaker implementation
##class IRasterRendererMaker_Impl(object):
##    @property
##    def Priority(self):
##        u'Controls the order in which renderer makers are selected.  Higher priority renderer makers are called first.'
##        #return Value
##
##    def CreateDefaultRasterRenderer(self, pRaster):
##        u'Returns the raster renderer which should be used for the default display of the input raster.'
##        #return ppRasterRenderer
##

class TinElevationRenderer(CoClass):
    u'TIN elevation renderer component.'
    _reg_clsid_ = GUID('{EBB7311B-99F8-11D2-81ED-00104BC4CD03}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class ITinColorRampRenderer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that draw TIN features based on a continuous attribute like elevation, slope, or aspect.'
    _iid_ = GUID('{91FB1B61-8944-11D2-81EC-00104BC4CD03}')
    _idlflags_ = ['oleautomation']
class ITinRenderer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control functions common to all TIN renderers.'
    _iid_ = GUID('{466DB6CD-80A6-11D2-81EB-00104BC4CD03}')
    _idlflags_ = ['oleautomation']
class ITerrainRenderer(ITinRenderer):
    _case_insensitive_ = True
    u'Provides access to members that control functions common to all Terrain renderers.'
    _iid_ = GUID('{1F991990-0063-419D-9C83-56AA729C77C4}')
    _idlflags_ = ['oleautomation']
class IDatasetRenderer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control functions common to all dataset renderers.'
    _iid_ = GUID('{2AA7619B-3861-402E-BCED-3BA50C62758F}')
    _idlflags_ = ['oleautomation']
class ITinIllumination(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that determine whether shading is turned on or off for a TIN face renderer.'
    _iid_ = GUID('{4536D29B-9E81-11D2-81ED-00104BC4CD03}')
    _idlflags_ = ['oleautomation']
class IClassBreaksUIProperties(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control some user interface properties of a ClassBreaksRenderer.  The properties set through this interface do NOT affect what is drawn on the map.'
    _iid_ = GUID('{427788F2-31FE-11D2-AAF0-00C04FA334B3}')
    _idlflags_ = ['oleautomation']
class IDataSampling(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the data sampling properties of a renderer.'
    _iid_ = GUID('{4EAB5690-8F9C-11D2-AB21-00C04FA334B3}')
    _idlflags_ = ['oleautomation']
TinElevationRenderer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ITinColorRampRenderer, ITinRenderer, ITerrainRenderer, IDatasetRenderer, ITinIllumination, ILegendInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, IClassBreaksUIProperties, IDataSampling]

class IGridHatch(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the hatch marks along the meridians and parallels of a grid.'
    _iid_ = GUID('{12700210-876C-4559-9FCF-AAB238008832}')
    _idlflags_ = ['oleautomation']
IGridHatch._methods_ = [
    COMMETHOD(['propget', helpstring(u'The interval (in grid units) along the X axis for the grid hatches.')], HRESULT, 'HatchIntervalX',
              ( ['retval', 'out'], POINTER(c_double), 'Interval' )),
    COMMETHOD(['propput', helpstring(u'The interval (in grid units) along the X axis for the grid hatches.')], HRESULT, 'HatchIntervalX',
              ( ['in'], c_double, 'Interval' )),
    COMMETHOD(['propget', helpstring(u'The interval (in grid units) along the Y axis for the grid hatches.')], HRESULT, 'HatchIntervalY',
              ( ['retval', 'out'], POINTER(c_double), 'Interval' )),
    COMMETHOD(['propput', helpstring(u'The interval (in grid units) along the Y axis for the grid hatches.')], HRESULT, 'HatchIntervalY',
              ( ['in'], c_double, 'Interval' )),
    COMMETHOD(['propget', helpstring(u'The line symbol used to draw the grid hatches.')], HRESULT, 'HatchLineSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ILineSymbol)), 'Symbol' )),
    COMMETHOD(['propput', helpstring(u'The line symbol used to draw the grid hatches.')], HRESULT, 'HatchLineSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ILineSymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'The marker symbol used to draw markers at grid hatch locations.')], HRESULT, 'HatchMarkerSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IMarkerSymbol)), 'Symbol' )),
    COMMETHOD(['propput', helpstring(u'The marker symbol used to draw markers at grid hatch locations.')], HRESULT, 'HatchMarkerSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IMarkerSymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'The length (in points) of the grid hatches.')], HRESULT, 'HatchLength',
              ( ['retval', 'out'], POINTER(c_double), 'Length' )),
    COMMETHOD(['propput', helpstring(u'The length (in points) of the grid hatches.')], HRESULT, 'HatchLength',
              ( ['in'], c_double, 'Length' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the direction of the hatches is from the prime meridian and equator.  False if the hatch mark should straddle the grid line.')], HRESULT, 'HatchDirectional',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'isDirectional' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the direction of the hatches is from the prime meridian and equator.  False if the hatch mark should straddle the grid line.')], HRESULT, 'HatchDirectional',
              ( ['in'], VARIANT_BOOL, 'isDirectional' )),
]
################################################################
## code template for IGridHatch implementation
##class IGridHatch_Impl(object):
##    def _get(self):
##        u'Indicates if the direction of the hatches is from the prime meridian and equator.  False if the hatch mark should straddle the grid line.'
##        #return isDirectional
##    def _set(self, isDirectional):
##        u'Indicates if the direction of the hatches is from the prime meridian and equator.  False if the hatch mark should straddle the grid line.'
##    HatchDirectional = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The interval (in grid units) along the Y axis for the grid hatches.'
##        #return Interval
##    def _set(self, Interval):
##        u'The interval (in grid units) along the Y axis for the grid hatches.'
##    HatchIntervalY = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The interval (in grid units) along the X axis for the grid hatches.'
##        #return Interval
##    def _set(self, Interval):
##        u'The interval (in grid units) along the X axis for the grid hatches.'
##    HatchIntervalX = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The marker symbol used to draw markers at grid hatch locations.'
##        #return Symbol
##    def _set(self, Symbol):
##        u'The marker symbol used to draw markers at grid hatch locations.'
##    HatchMarkerSymbol = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The line symbol used to draw the grid hatches.'
##        #return Symbol
##    def _set(self, Symbol):
##        u'The line symbol used to draw the grid hatches.'
##    HatchLineSymbol = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The length (in points) of the grid hatches.'
##        #return Length
##    def _set(self, Length):
##        u'The length (in points) of the grid hatches.'
##    HatchLength = property(_get, _set, doc = _set.__doc__)
##

class ITerrainLayer(ILayer):
    _case_insensitive_ = True
    u'Provides access to members that control a Terrain layer.'
    _iid_ = GUID('{5A0F220D-614F-4C72-AFF2-7EA0BE2C8513}')
    _idlflags_ = ['oleautomation']
ILayer._methods_ = [
    COMMETHOD(['propget', helpstring(u'Layer name.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'Layer name.')], HRESULT, 'Name',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer is currently valid.')], HRESULT, 'Valid',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Valid' )),
    COMMETHOD(['propget', helpstring(u'The default area of interest for the layer.')], HRESULT, 'AreaOfInterest',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'aoi' )),
    COMMETHOD(['propget', helpstring(u'Minimum scale (representative fraction) at which the layer will display.')], HRESULT, 'MinimumScale',
              ( ['retval', 'out'], POINTER(c_double), 'MinScale' )),
    COMMETHOD(['propput', helpstring(u'Minimum scale (representative fraction) at which the layer will display.')], HRESULT, 'MinimumScale',
              ( ['in'], c_double, 'MinScale' )),
    COMMETHOD(['propget', helpstring(u'Maximum scale (representative fraction) at which the layer will display.')], HRESULT, 'MaximumScale',
              ( ['retval', 'out'], POINTER(c_double), 'MaxScale' )),
    COMMETHOD(['propput', helpstring(u'Maximum scale (representative fraction) at which the layer will display.')], HRESULT, 'MaximumScale',
              ( ['in'], c_double, 'MaxScale' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer is currently visible.')], HRESULT, 'Visible',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Visible' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the layer is currently visible.')], HRESULT, 'Visible',
              ( ['in'], VARIANT_BOOL, 'Visible' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer shows map tips.')], HRESULT, 'ShowTips',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Show' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the layer shows map tips.')], HRESULT, 'ShowTips',
              ( ['in'], VARIANT_BOOL, 'Show' )),
    COMMETHOD(['propget', helpstring(u'Map tip text at the specified location.')], HRESULT, 'TipText',
              ( ['in'], c_double, 'x' ),
              ( ['in'], c_double, 'y' ),
              ( ['in'], c_double, 'Tolerance' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Text' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer needs its own display cache.')], HRESULT, 'Cached',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Cached' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the layer needs its own display cache.')], HRESULT, 'Cached',
              ( ['in'], VARIANT_BOOL, 'Cached' )),
    COMMETHOD(['propget', helpstring(u'Supported draw phases.')], HRESULT, 'SupportedDrawPhases',
              ( ['retval', 'out'], POINTER(c_int), 'drawPhases' )),
    COMMETHOD(['propputref', helpstring(u'Spatial reference for the layer.')], HRESULT, 'SpatialReference',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'rhs' )),
    COMMETHOD([helpstring(u'Draws the layer to the specified display for the given draw phase.')], HRESULT, 'Draw',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriDrawPhase, 'DrawPhase' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'TrackCancel' )),
]
################################################################
## code template for ILayer implementation
##class ILayer_Impl(object):
##    def Draw(self, DrawPhase, Display, TrackCancel):
##        u'Draws the layer to the specified display for the given draw phase.'
##        #return 
##
##    def _get(self):
##        u'Layer name.'
##        #return Name
##    def _set(self, Name):
##        u'Layer name.'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Maximum scale (representative fraction) at which the layer will display.'
##        #return MaxScale
##    def _set(self, MaxScale):
##        u'Maximum scale (representative fraction) at which the layer will display.'
##    MaximumScale = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def TipText(self, x, y, Tolerance):
##        u'Map tip text at the specified location.'
##        #return Text
##
##    def _get(self):
##        u'Minimum scale (representative fraction) at which the layer will display.'
##        #return MinScale
##    def _set(self, MinScale):
##        u'Minimum scale (representative fraction) at which the layer will display.'
##    MinimumScale = property(_get, _set, doc = _set.__doc__)
##
##    def SpatialReference(self, rhs):
##        u'Spatial reference for the layer.'
##        #return 
##
##    def _get(self):
##        u'Indicates if the layer is currently visible.'
##        #return Visible
##    def _set(self, Visible):
##        u'Indicates if the layer is currently visible.'
##    Visible = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Valid(self):
##        u'Indicates if the layer is currently valid.'
##        #return Valid
##
##    @property
##    def AreaOfInterest(self):
##        u'The default area of interest for the layer.'
##        #return aoi
##
##    @property
##    def SupportedDrawPhases(self):
##        u'Supported draw phases.'
##        #return drawPhases
##
##    def _get(self):
##        u'Indicates if the layer needs its own display cache.'
##        #return Cached
##    def _set(self, Cached):
##        u'Indicates if the layer needs its own display cache.'
##    Cached = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the layer shows map tips.'
##        #return Show
##    def _set(self, Show):
##        u'Indicates if the layer shows map tips.'
##    ShowTips = property(_get, _set, doc = _set.__doc__)
##

ITerrainLayer._methods_ = [
    COMMETHOD(['propget', helpstring(u'The Terrain used to define the layer.')], HRESULT, 'Terrain',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._7BA654FE_F55E_4EE5_8CF2_FAEFFBC04A61_0_10_2.ITerrain)), 'ppTerrain' )),
    COMMETHOD(['propputref', helpstring(u'The Terrain used to define the layer.')], HRESULT, 'Terrain',
              ( ['in'], POINTER(comtypes.gen._7BA654FE_F55E_4EE5_8CF2_FAEFFBC04A61_0_10_2.ITerrain), 'ppTerrain' )),
    COMMETHOD([helpstring(u'Gets current surface.')], HRESULT, 'GetCurrentSurface',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ISurface)), 'ppSurface' )),
    COMMETHOD(['propget', helpstring(u'The number of renderers.')], HRESULT, 'RendererCount',
              ( ['retval', 'out'], POINTER(c_int), 'pRendererCount' )),
    COMMETHOD([helpstring(u'Gets the nth renderer.')], HRESULT, 'GetRenderer',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(ITinRenderer)), 'ppRenderer' )),
    COMMETHOD([helpstring(u'Add a renderer to the end of the group.')], HRESULT, 'AddRenderer',
              ( ['in'], POINTER(ITinRenderer), 'pRenderer' )),
    COMMETHOD([helpstring(u'Insert a renderer at given index.')], HRESULT, 'InsertRenderer',
              ( ['in'], POINTER(ITinRenderer), 'pRenderer' ),
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Remove a renderer from the group.')], HRESULT, 'DeleteRenderer',
              ( ['in'], POINTER(ITinRenderer), 'pRenderer' )),
    COMMETHOD([helpstring(u'Remove all the renderers from the group.')], HRESULT, 'ClearRenderers'),
    COMMETHOD(['propget', helpstring(u'The primary display field.')], HRESULT, 'DisplayField',
              ( ['retval', 'out'], POINTER(BSTR), 'pFieldName' )),
    COMMETHOD(['propput', helpstring(u'The primary display field.')], HRESULT, 'DisplayField',
              ( ['in'], BSTR, 'pFieldName' )),
    COMMETHOD(['propget', helpstring(u'Indicates if symbols are scaled for this layer.')], HRESULT, 'ScaleSymbols',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbScale' )),
    COMMETHOD(['propput', helpstring(u'Indicates if symbols are scaled for this layer.')], HRESULT, 'ScaleSymbols',
              ( ['in'], VARIANT_BOOL, 'pbScale' )),
    COMMETHOD(['propget', helpstring(u'Indicates if Overview Terrain should be used when zoom to full.')], HRESULT, 'UseOverviewTerrain',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbUseOverviewTerrain' )),
    COMMETHOD(['propput', helpstring(u'Indicates if Overview Terrain should be used when zoom to full.')], HRESULT, 'UseOverviewTerrain',
              ( ['in'], VARIANT_BOOL, 'pbUseOverviewTerrain' )),
    COMMETHOD(['propget', helpstring(u'Indicates if LOR should be updated when scale changed.')], HRESULT, 'AutoLOR',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbAutoLOR' )),
    COMMETHOD(['propput', helpstring(u'Indicates if LOR should be updated when scale changed.')], HRESULT, 'AutoLOR',
              ( ['in'], VARIANT_BOOL, 'pbAutoLOR' )),
    COMMETHOD(['propget', helpstring(u'Indicates if current surface resolution honors the scale/resolution relationship in the pyramin definition.')], HRESULT, 'PyramidHonored',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbHonored' )),
    COMMETHOD(['propget', helpstring(u'Indicates the resolution to be used when AutoLOR is false.')], HRESULT, 'TargetResolution',
              ( ['retval', 'out'], POINTER(c_double), 'pResolution' )),
    COMMETHOD(['propput', helpstring(u'Indicates the resolution to be used when AutoLOR is false.')], HRESULT, 'TargetResolution',
              ( ['in'], c_double, 'pResolution' )),
    COMMETHOD(['propget', helpstring(u'Indicates the current resolution.')], HRESULT, 'CurrentResolution',
              ( ['retval', 'out'], POINTER(c_double), 'pResolution' )),
    COMMETHOD(['propget', helpstring(u'Indicates if TOC should display resolution.')], HRESULT, 'ShowResolution',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbShow' )),
    COMMETHOD(['propput', helpstring(u'Indicates if TOC should display resolution.')], HRESULT, 'ShowResolution',
              ( ['in'], VARIANT_BOOL, 'pbShow' )),
    COMMETHOD(['propget', helpstring(u'Indicates if current surface should be updated based on scale change.')], HRESULT, 'LockCurrentSurface',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbLock' )),
    COMMETHOD(['propput', helpstring(u'Indicates if current surface should be updated based on scale change.')], HRESULT, 'LockCurrentSurface',
              ( ['in'], VARIANT_BOOL, 'pbLock' )),
    COMMETHOD(['propget', helpstring(u'Indicates if Point Budget should be used for rendering performance.')], HRESULT, 'UsePointBudget',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbUsePointBudget' )),
    COMMETHOD(['propput', helpstring(u'Indicates if Point Budget should be used for rendering performance.')], HRESULT, 'UsePointBudget',
              ( ['in'], VARIANT_BOOL, 'pbUsePointBudget' )),
    COMMETHOD(['propget', helpstring(u'Indicates the Point Budget.')], HRESULT, 'PointBudget',
              ( ['retval', 'out'], POINTER(c_int), 'pPointBudget' )),
    COMMETHOD(['propput', helpstring(u'Indicates the Point Budget.')], HRESULT, 'PointBudget',
              ( ['in'], c_int, 'pPointBudget' )),
    COMMETHOD(['propget', helpstring(u'Indicates the resolution that analysis tools will be enabled.')], HRESULT, 'AnalysisToolsResolution',
              ( ['retval', 'out'], POINTER(c_double), 'pAnalysisResolution' )),
    COMMETHOD(['propput', helpstring(u'Indicates the resolution that analysis tools will be enabled.')], HRESULT, 'AnalysisToolsResolution',
              ( ['in'], c_double, 'pAnalysisResolution' )),
]
################################################################
## code template for ITerrainLayer implementation
##class ITerrainLayer_Impl(object):
##    def GetCurrentSurface(self):
##        u'Gets current surface.'
##        #return ppSurface
##
##    def GetRenderer(self, Index):
##        u'Gets the nth renderer.'
##        #return ppRenderer
##
##    def _get(self):
##        u'Indicates if current surface should be updated based on scale change.'
##        #return pbLock
##    def _set(self, pbLock):
##        u'Indicates if current surface should be updated based on scale change.'
##    LockCurrentSurface = property(_get, _set, doc = _set.__doc__)
##
##    def InsertRenderer(self, pRenderer, Index):
##        u'Insert a renderer at given index.'
##        #return 
##
##    @property
##    def RendererCount(self):
##        u'The number of renderers.'
##        #return pRendererCount
##
##    def _get(self):
##        u'Indicates the resolution that analysis tools will be enabled.'
##        #return pAnalysisResolution
##    def _set(self, pAnalysisResolution):
##        u'Indicates the resolution that analysis tools will be enabled.'
##    AnalysisToolsResolution = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if TOC should display resolution.'
##        #return pbShow
##    def _set(self, pbShow):
##        u'Indicates if TOC should display resolution.'
##    ShowResolution = property(_get, _set, doc = _set.__doc__)
##
##    def Terrain(self, ppTerrain):
##        u'The Terrain used to define the layer.'
##        #return 
##
##    def DeleteRenderer(self, pRenderer):
##        u'Remove a renderer from the group.'
##        #return 
##
##    def _get(self):
##        u'Indicates if LOR should be updated when scale changed.'
##        #return pbAutoLOR
##    def _set(self, pbAutoLOR):
##        u'Indicates if LOR should be updated when scale changed.'
##    AutoLOR = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if symbols are scaled for this layer.'
##        #return pbScale
##    def _set(self, pbScale):
##        u'Indicates if symbols are scaled for this layer.'
##    ScaleSymbols = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def CurrentResolution(self):
##        u'Indicates the current resolution.'
##        #return pResolution
##
##    def _get(self):
##        u'Indicates the Point Budget.'
##        #return pPointBudget
##    def _set(self, pPointBudget):
##        u'Indicates the Point Budget.'
##    PointBudget = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates the resolution to be used when AutoLOR is false.'
##        #return pResolution
##    def _set(self, pResolution):
##        u'Indicates the resolution to be used when AutoLOR is false.'
##    TargetResolution = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def PyramidHonored(self):
##        u'Indicates if current surface resolution honors the scale/resolution relationship in the pyramin definition.'
##        #return pbHonored
##
##    def ClearRenderers(self):
##        u'Remove all the renderers from the group.'
##        #return 
##
##    def _get(self):
##        u'Indicates if Point Budget should be used for rendering performance.'
##        #return pbUsePointBudget
##    def _set(self, pbUsePointBudget):
##        u'Indicates if Point Budget should be used for rendering performance.'
##    UsePointBudget = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if Overview Terrain should be used when zoom to full.'
##        #return pbUseOverviewTerrain
##    def _set(self, pbUseOverviewTerrain):
##        u'Indicates if Overview Terrain should be used when zoom to full.'
##    UseOverviewTerrain = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The primary display field.'
##        #return pFieldName
##    def _set(self, pFieldName):
##        u'The primary display field.'
##    DisplayField = property(_get, _set, doc = _set.__doc__)
##
##    def AddRenderer(self, pRenderer):
##        u'Add a renderer to the end of the group.'
##        #return 
##

class ISubtypeInfos(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Subtype Information Array.'
    _iid_ = GUID('{0B8FDA6E-2FF1-45F6-B2F1-B4E9F4BE86B8}')
    _idlflags_ = ['oleautomation']
IMapTableSubtypeInfo._methods_ = [
    COMMETHOD(['propget', helpstring(u'The table identifier. This ID is used throughout to uniquely identify the layer for all requests.')], HRESULT, 'TableID',
              ( ['retval', 'out'], POINTER(c_int), 'TableID' )),
    COMMETHOD(['propget', helpstring(u'Name of the Subtype Field.')], HRESULT, 'SubtypeFieldName',
              ( ['retval', 'out'], POINTER(BSTR), 'SubtypeFieldName' )),
    COMMETHOD(['propget', helpstring(u'Array of Subtype Information.')], HRESULT, 'SubtypeInfos',
              ( ['retval', 'out'], POINTER(POINTER(ISubtypeInfos)), 'ppSubtypeInfos' )),
]
################################################################
## code template for IMapTableSubtypeInfo implementation
##class IMapTableSubtypeInfo_Impl(object):
##    @property
##    def TableID(self):
##        u'The table identifier. This ID is used throughout to uniquely identify the layer for all requests.'
##        #return TableID
##
##    @property
##    def SubtypeInfos(self):
##        u'Array of Subtype Information.'
##        #return ppSubtypeInfos
##
##    @property
##    def SubtypeFieldName(self):
##        u'Name of the Subtype Field.'
##        #return SubtypeFieldName
##

class IOverposterOptions2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to overposter options.'
    _iid_ = GUID('{6745DE4A-83B1-4F1B-717E-FF3ED195AA42}')
    _idlflags_ = ['oleautomation']
IOverposterOptions2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates whether to pause the drawing of labels.')], HRESULT, 'PauseLabeling',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to pause the drawing of labels.')], HRESULT, 'PauseLabeling',
              ( ['in'], VARIANT_BOOL, 'flag' )),
]
################################################################
## code template for IOverposterOptions2 implementation
##class IOverposterOptions2_Impl(object):
##    def _get(self):
##        u'Indicates whether to pause the drawing of labels.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether to pause the drawing of labels.'
##    PauseLabeling = property(_get, _set, doc = _set.__doc__)
##

class IElementCollection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the Graphics element collection.'
    _iid_ = GUID('{CE8F3971-E9BE-11D1-A232-080009B6F22B}')
    _idlflags_ = ['oleautomation']
class IEnumElement(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the Element enumerator object.'
    _iid_ = GUID('{DD94D769-836D-11D0-87EC-080009EC732A}')
    _idlflags_ = ['oleautomation']
IGraphicsContainer._methods_ = [
    COMMETHOD([helpstring(u'Returns the next graphic in the container.')], HRESULT, 'Next',
              ( ['retval', 'out'], POINTER(POINTER(IElement)), 'Element' )),
    COMMETHOD([helpstring(u'Reset internal cursor so that Next returns the first element.')], HRESULT, 'Reset'),
    COMMETHOD([helpstring(u'Add a new graphic element to the layer.')], HRESULT, 'AddElement',
              ( ['in'], POINTER(IElement), 'Element' ),
              ( ['in'], c_int, 'zorder' )),
    COMMETHOD([helpstring(u'Add new graphic elements to the layer.')], HRESULT, 'AddElements',
              ( ['in'], POINTER(IElementCollection), 'Elements' ),
              ( ['in'], c_int, 'zorder' )),
    COMMETHOD([helpstring(u'Delete the given element.')], HRESULT, 'DeleteElement',
              ( ['in'], POINTER(IElement), 'Element' )),
    COMMETHOD([helpstring(u'Delete all the elements.')], HRESULT, 'DeleteAllElements'),
    COMMETHOD([helpstring(u'Move the element from the container to the group.')], HRESULT, 'MoveElementToGroup',
              ( ['in'], POINTER(IElement), 'Element' ),
              ( ['in'], POINTER(IGroupElement), 'group' )),
    COMMETHOD([helpstring(u'Move the element from the group to the container.')], HRESULT, 'MoveElementFromGroup',
              ( ['in'], POINTER(IGroupElement), 'group' ),
              ( ['in'], POINTER(IElement), 'Element' ),
              ( ['in'], c_int, 'zorder' )),
    COMMETHOD([helpstring(u'Returns the elements at the given coordinate.')], HRESULT, 'LocateElements',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'point' ),
              ( ['in'], c_double, 'Tolerance' ),
              ( ['retval', 'out'], POINTER(POINTER(IEnumElement)), 'Elements' )),
    COMMETHOD([helpstring(u'Returns the elements inside the given envelope.')], HRESULT, 'LocateElementsByEnvelope',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'envelope' ),
              ( ['retval', 'out'], POINTER(POINTER(IEnumElement)), 'Elements' )),
    COMMETHOD([helpstring(u'Find the frame that contains the specified object.')], HRESULT, 'FindFrame',
              ( ['in'], VARIANT, 'frameObject' ),
              ( ['retval', 'out'], POINTER(POINTER(IFrameElement)), 'frame' )),
    COMMETHOD([helpstring(u"The graphic element's properties have changed.")], HRESULT, 'UpdateElement',
              ( ['in'], POINTER(IElement), 'Element' )),
    COMMETHOD([helpstring(u'Private order object.  Used to undo ordering operations.')], HRESULT, 'GetElementOrder',
              ( ['in'], POINTER(IEnumElement), 'Elements' ),
              ( ['retval', 'out'], POINTER(VARIANT), 'order' )),
    COMMETHOD([helpstring(u'Private order object.  Used to undo ordering operations.')], HRESULT, 'PutElementOrder',
              ( ['in'], VARIANT, 'order' )),
    COMMETHOD([helpstring(u'Make the specified elements draw in front of all other elements.')], HRESULT, 'BringToFront',
              ( ['in'], POINTER(IEnumElement), 'Elements' )),
    COMMETHOD([helpstring(u'Make the specified elements draw behind all other elements.')], HRESULT, 'SendToBack',
              ( ['in'], POINTER(IEnumElement), 'Elements' )),
    COMMETHOD([helpstring(u'Move the specified elements one step closer to the bottom of the stack of elements.')], HRESULT, 'SendBackward',
              ( ['in'], POINTER(IEnumElement), 'Elements' )),
    COMMETHOD([helpstring(u'Move the specified elements one step closer to the top of the stack of elements.')], HRESULT, 'BringForward',
              ( ['in'], POINTER(IEnumElement), 'Elements' )),
]
################################################################
## code template for IGraphicsContainer implementation
##class IGraphicsContainer_Impl(object):
##    def Reset(self):
##        u'Reset internal cursor so that Next returns the first element.'
##        #return 
##
##    def BringToFront(self, Elements):
##        u'Make the specified elements draw in front of all other elements.'
##        #return 
##
##    def SendBackward(self, Elements):
##        u'Move the specified elements one step closer to the bottom of the stack of elements.'
##        #return 
##
##    def LocateElements(self, point, Tolerance):
##        u'Returns the elements at the given coordinate.'
##        #return Elements
##
##    def LocateElementsByEnvelope(self, envelope):
##        u'Returns the elements inside the given envelope.'
##        #return Elements
##
##    def FindFrame(self, frameObject):
##        u'Find the frame that contains the specified object.'
##        #return frame
##
##    def GetElementOrder(self, Elements):
##        u'Private order object.  Used to undo ordering operations.'
##        #return order
##
##    def UpdateElement(self, Element):
##        u"The graphic element's properties have changed."
##        #return 
##
##    def MoveElementToGroup(self, Element, group):
##        u'Move the element from the container to the group.'
##        #return 
##
##    def AddElement(self, Element, zorder):
##        u'Add a new graphic element to the layer.'
##        #return 
##
##    def PutElementOrder(self, order):
##        u'Private order object.  Used to undo ordering operations.'
##        #return 
##
##    def DeleteElement(self, Element):
##        u'Delete the given element.'
##        #return 
##
##    def DeleteAllElements(self):
##        u'Delete all the elements.'
##        #return 
##
##    def BringForward(self, Elements):
##        u'Move the specified elements one step closer to the top of the stack of elements.'
##        #return 
##
##    def MoveElementFromGroup(self, group, Element, zorder):
##        u'Move the element from the group to the container.'
##        #return 
##
##    def Next(self):
##        u'Returns the next graphic in the container.'
##        #return Element
##
##    def AddElements(self, Elements, zorder):
##        u'Add new graphic elements to the layer.'
##        #return 
##
##    def SendToBack(self, Elements):
##        u'Make the specified elements draw behind all other elements.'
##        #return 
##

class IEditOperation(comtypes.gen._4ECCA6E2_B16B_4ACA_BD17_E74CAE4C150A_0_10_2.IOperation):
    _case_insensitive_ = True
    u'Indicator interface that identifies an operation as an edit operation.'
    _iid_ = GUID('{68F3A204-5DEE-11D2-8901-00805F1525F4}')
    _idlflags_ = ['oleautomation']
class IElementOperation(IEditOperation):
    _case_insensitive_ = True
    u'Provides access to members that control Element Operations.'
    _iid_ = GUID('{4B96A442-FA41-11D0-83AF-080009B996CC}')
    _idlflags_ = ['oleautomation']
IEditOperation._methods_ = [
]
################################################################
## code template for IEditOperation implementation
##class IEditOperation_Impl(object):

IElementOperation._methods_ = [
    COMMETHOD(['propput', helpstring(u'The name of the operation.')], HRESULT, 'Name',
              ( ['in'], BSTR, 'rhs' )),
    COMMETHOD(['propputref', helpstring(u'The element(s) being updated.')], HRESULT, 'Elements',
              ( ['in'], POINTER(IEnumElement), 'rhs' )),
]
################################################################
## code template for IElementOperation implementation
##class IElementOperation_Impl(object):
##    def Elements(self, rhs):
##        u'The element(s) being updated.'
##        #return 
##
##    def _set(self, rhs):
##        u'The name of the operation.'
##    Name = property(fset = _set, doc = _set.__doc__)
##

IDoubleFillScaleBar._methods_ = [
    COMMETHOD(['propget', helpstring(u'Symbol used to draw the bar.')], HRESULT, 'FillSymbol1',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IFillSymbol)), 'Symbol' )),
    COMMETHOD(['propput', helpstring(u'Symbol used to draw the bar.')], HRESULT, 'FillSymbol1',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IFillSymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'Symbol used to draw the bar.')], HRESULT, 'FillSymbol2',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IFillSymbol)), 'Symbol' )),
    COMMETHOD(['propput', helpstring(u'Symbol used to draw the bar.')], HRESULT, 'FillSymbol2',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IFillSymbol), 'Symbol' )),
]
################################################################
## code template for IDoubleFillScaleBar implementation
##class IDoubleFillScaleBar_Impl(object):
##    def _get(self):
##        u'Symbol used to draw the bar.'
##        #return Symbol
##    def _set(self, Symbol):
##        u'Symbol used to draw the bar.'
##    FillSymbol2 = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Symbol used to draw the bar.'
##        #return Symbol
##    def _set(self, Symbol):
##        u'Symbol used to draw the bar.'
##    FillSymbol1 = property(_get, _set, doc = _set.__doc__)
##

class IServerSymbolOutputOptions(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to properties on ServerSymbolOutputOptions.'
    _iid_ = GUID('{77D42E66-ABA1-410F-AD90-DA4F2B5D4A24}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'esriServerPictureOutputType'
esriServerPictureOutputAsPNG = 0
esriServerPictureOutputAsPNGInMime = 1
esriServerPictureOutputAsIPicture = 2
esriServerPictureOutputType = c_int # enum
IServerSymbolOutputOptions._methods_ = [
    COMMETHOD(['propget', helpstring(u'Picture output type for symbols that contain pictures.')], HRESULT, 'PictureOutputType',
              ( ['retval', 'out'], POINTER(esriServerPictureOutputType), 'PictureOutputType' )),
    COMMETHOD(['propput', helpstring(u'Picture output type for symbols that contain pictures.')], HRESULT, 'PictureOutputType',
              ( ['in'], esriServerPictureOutputType, 'PictureOutputType' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether label expressions need to be converted.')], HRESULT, 'ConvertLabelExpressions',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Convert' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether label expressions need to be converted.')], HRESULT, 'ConvertLabelExpressions',
              ( ['in'], VARIANT_BOOL, 'Convert' )),
]
################################################################
## code template for IServerSymbolOutputOptions implementation
##class IServerSymbolOutputOptions_Impl(object):
##    def _get(self):
##        u'Picture output type for symbols that contain pictures.'
##        #return PictureOutputType
##    def _set(self, PictureOutputType):
##        u'Picture output type for symbols that contain pictures.'
##    PictureOutputType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether label expressions need to be converted.'
##        #return Convert
##    def _set(self, Convert):
##        u'Indicates whether label expressions need to be converted.'
##    ConvertLabelExpressions = property(_get, _set, doc = _set.__doc__)
##

class IEditResults(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Array of EditResult elements.'
    _iid_ = GUID('{40B954C7-4D46-4E59-AEEB-A86EB3B9A150}')
    _idlflags_ = ['oleautomation']
class IEditResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Edit Result.'
    _iid_ = GUID('{8954AAB5-0ACB-4410-B3C3-0E7E35257A17}')
    _idlflags_ = ['oleautomation']
IEditResults._methods_ = [
    COMMETHOD(['propget', helpstring(u'The EditResult elements count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The EditResult at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IEditResult)), 'EditResult' )),
    COMMETHOD([helpstring(u'Removes the EditResult at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all EditResults.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Adds an EditResult.')], HRESULT, 'Add',
              ( ['in'], POINTER(IEditResult), 'EditResult' )),
    COMMETHOD([helpstring(u'Adds an EditResult at the specified position.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(IEditResult), 'EditResult' )),
]
################################################################
## code template for IEditResults implementation
##class IEditResults_Impl(object):
##    @property
##    def Count(self):
##        u'The EditResult elements count.'
##        #return Count
##
##    def Insert(self, Index, EditResult):
##        u'Adds an EditResult at the specified position.'
##        #return 
##
##    def Remove(self, Index):
##        u'Removes the EditResult at the specified position.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'The EditResult at the specified position.'
##        #return EditResult
##
##    def RemoveAll(self):
##        u'Removes all EditResults.'
##        #return 
##
##    def Add(self, EditResult):
##        u'Adds an EditResult.'
##        #return 
##

class IRasterDefaultsEnv(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the default raster environment.'
    _iid_ = GUID('{FB89A39B-C08E-11D2-9F43-00C04F8ED21A}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'esriRasterPyramidOptEnum'
esriRasterPyramidAlwaysPrompt = 0
esriRasterPyramidAlwaysBuild = 1
esriRasterPyramidNeverBuild = 2
esriRasterPyramidOptEnum = c_int # enum
class IRasterFormatInfo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that provide basic information about a raster format.'
    _iid_ = GUID('{4D6B1FF0-C144-11D2-9F43-00C04F8ED21A}')
    _idlflags_ = ['oleautomation']
IRasterDefaultsEnv._methods_ = [
    COMMETHOD(['propget', helpstring(u'Default pyramid creation option.')], HRESULT, 'PyramidCreateOpt',
              ( ['retval', 'out'], POINTER(esriRasterPyramidOptEnum), 'opt' )),
    COMMETHOD(['propput', helpstring(u'Default pyramid creation option.')], HRESULT, 'PyramidCreateOpt',
              ( ['in'], esriRasterPyramidOptEnum, 'opt' )),
    COMMETHOD([helpstring(u'Default zero indexed bands for a 3 band raster.')], HRESULT, 'Query3BandRGB',
              ( ['out'], POINTER(c_int), 'redIndex' ),
              ( ['out'], POINTER(c_int), 'greenIndex' ),
              ( ['out'], POINTER(c_int), 'blueIndex' )),
    COMMETHOD([helpstring(u'Default zero indexed bands for a 3 band raster.')], HRESULT, 'Set3BandRGB',
              ( ['in'], c_int, 'redIndex' ),
              ( ['in'], c_int, 'greenIndex' ),
              ( ['in'], c_int, 'blueIndex' )),
    COMMETHOD([helpstring(u'Default zero indexed bands for a 4 or more band raster.')], HRESULT, 'Query4BandRGB',
              ( ['out'], POINTER(c_int), 'redIndex' ),
              ( ['out'], POINTER(c_int), 'greenIndex' ),
              ( ['out'], POINTER(c_int), 'blueIndex' )),
    COMMETHOD([helpstring(u'Default zero indexed bands for a 4 or more band raster.')], HRESULT, 'Set4BandRGB',
              ( ['in'], c_int, 'redIndex' ),
              ( ['in'], c_int, 'greenIndex' ),
              ( ['in'], c_int, 'blueIndex' )),
    COMMETHOD(['propget', helpstring(u'Indicates if extension checking is on.')], HRESULT, 'UseExtChecking',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'useExts' )),
    COMMETHOD(['propput', helpstring(u'Indicates if extension checking is on.')], HRESULT, 'UseExtChecking',
              ( ['in'], VARIANT_BOOL, 'useExts' )),
    COMMETHOD(['propget', helpstring(u'Number of supported raster formats.')], HRESULT, 'NumFormats',
              ( ['retval', 'out'], POINTER(c_int), 'pNumFormats' )),
    COMMETHOD(['propget', helpstring(u'Information about the format indicated by index i.')], HRESULT, 'Format',
              ( ['in'], c_int, 'i' ),
              ( ['retval', 'out'], POINTER(POINTER(IRasterFormatInfo)), 'pRasterFormatInfo' )),
]
################################################################
## code template for IRasterDefaultsEnv implementation
##class IRasterDefaultsEnv_Impl(object):
##    @property
##    def Format(self, i):
##        u'Information about the format indicated by index i.'
##        #return pRasterFormatInfo
##
##    def _get(self):
##        u'Indicates if extension checking is on.'
##        #return useExts
##    def _set(self, useExts):
##        u'Indicates if extension checking is on.'
##    UseExtChecking = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def NumFormats(self):
##        u'Number of supported raster formats.'
##        #return pNumFormats
##
##    def Set4BandRGB(self, redIndex, greenIndex, blueIndex):
##        u'Default zero indexed bands for a 4 or more band raster.'
##        #return 
##
##    def Query4BandRGB(self):
##        u'Default zero indexed bands for a 4 or more band raster.'
##        #return redIndex, greenIndex, blueIndex
##
##    def Set3BandRGB(self, redIndex, greenIndex, blueIndex):
##        u'Default zero indexed bands for a 3 band raster.'
##        #return 
##
##    def _get(self):
##        u'Default pyramid creation option.'
##        #return opt
##    def _set(self, opt):
##        u'Default pyramid creation option.'
##    PyramidCreateOpt = property(_get, _set, doc = _set.__doc__)
##
##    def Query3BandRGB(self):
##        u'Default zero indexed bands for a 3 band raster.'
##        #return redIndex, greenIndex, blueIndex
##

class ImageServerObjectDescription(CoClass):
    u'Server object description for the ImageServer object.'
    _reg_clsid_ = GUID('{14182D40-B69D-4925-BD5A-687F177D27A2}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
ImageServerObjectDescription._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._746F6817_89BB_4490_9829_83CA25FD505A_0_10_2.IServerObjectDescription]

class ITableEditResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    _iid_ = GUID('{473354F5-19F9-4581-99F5-7194FAB610A5}')
    _idlflags_ = ['oleautomation']
ITableEditResult._methods_ = [
    COMMETHOD(['propget', helpstring(u'Results of Object Adds')], HRESULT, 'AddResults',
              ( ['retval', 'out'], POINTER(POINTER(IEditResults)), 'AddResults' )),
    COMMETHOD(['propget', helpstring(u'Results of Object Deletes')], HRESULT, 'DeleteResults',
              ( ['retval', 'out'], POINTER(POINTER(IEditResults)), 'DeleteResults' )),
    COMMETHOD(['propget', helpstring(u'Table ID.')], HRESULT, 'LayerOrTableID',
              ( ['retval', 'out'], POINTER(c_int), 'LayerOrTableID' )),
    COMMETHOD(['propget', helpstring(u'Results of Object Updates')], HRESULT, 'UpdateResults',
              ( ['retval', 'out'], POINTER(POINTER(IEditResults)), 'UpdateResults' )),
]
################################################################
## code template for ITableEditResult implementation
##class ITableEditResult_Impl(object):
##    @property
##    def LayerOrTableID(self):
##        u'Table ID.'
##        #return LayerOrTableID
##
##    @property
##    def AddResults(self):
##        u'Results of Object Adds'
##        #return AddResults
##
##    @property
##    def DeleteResults(self):
##        u'Results of Object Deletes'
##        #return DeleteResults
##
##    @property
##    def UpdateResults(self):
##        u'Results of Object Updates'
##        #return UpdateResults
##

class IRasterDefaultsEnv2(IRasterDefaultsEnv):
    _case_insensitive_ = True
    u'Provides access to members that control the default raster environment.'
    _iid_ = GUID('{E5191E5E-4D03-45D9-94A4-9E2D8C5C9AED}')
    _idlflags_ = ['oleautomation']
class IRasterDefaultsEnv3(IRasterDefaultsEnv2):
    _case_insensitive_ = True
    u'Provides access to members that control the default raster environment.'
    _iid_ = GUID('{BBCE4F14-F0DA-4CBF-8196-0E380B34CCBB}')
    _idlflags_ = ['oleautomation']
class IRasterDefaultsEnv4(IRasterDefaultsEnv3):
    _case_insensitive_ = True
    u'Provides access to members that control the default raster environment.'
    _iid_ = GUID('{4DCD6E47-90A1-4341-A90B-52AB6DF2FFA4}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'esriRasterRenderingModeEnum'
esriRasterRenderingBlockMode = 0
esriRasterRenderingTopToBottomMode = 1
esriRasterRenderingFullMode = 2
esriRasterRenderingModeEnum = c_int # enum
IRasterDefaultsEnv2._methods_ = [
    COMMETHOD(['propput', helpstring(u'Default rendering mode.')], HRESULT, 'RenderingMode',
              ( ['in'], esriRasterRenderingModeEnum, 'pRenderingMode' )),
    COMMETHOD(['propget', helpstring(u'Default rendering mode.')], HRESULT, 'RenderingMode',
              ( ['retval', 'out'], POINTER(esriRasterRenderingModeEnum), 'pRenderingMode' )),
    COMMETHOD(['propput', helpstring(u'Default resampling for display.')], HRESULT, 'Resampling',
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.rstResamplingTypes, 'pDefaultResampling' )),
    COMMETHOD(['propget', helpstring(u'Default resampling for display.')], HRESULT, 'Resampling',
              ( ['retval', 'out'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.rstResamplingTypes), 'pDefaultResampling' )),
    COMMETHOD(['propput', helpstring(u'Default proxy file path.')], HRESULT, 'ProxyFilePath',
              ( ['in'], BSTR, 'pProxyFilePath' )),
    COMMETHOD(['propget', helpstring(u'Default proxy file path.')], HRESULT, 'ProxyFilePath',
              ( ['retval', 'out'], POINTER(BSTR), 'pProxyFilePath' )),
    COMMETHOD(['propput', helpstring(u'Default maximum table size.')], HRESULT, 'MaxTableSize',
              ( ['in'], c_int, 'pMaxTableSize' )),
    COMMETHOD(['propget', helpstring(u'Default maximum table size.')], HRESULT, 'MaxTableSize',
              ( ['retval', 'out'], POINTER(c_int), 'pMaxTableSize' )),
    COMMETHOD([helpstring(u'Updates the registry with all changes to the raster environment in the current session.')], HRESULT, 'UpdateAll'),
]
################################################################
## code template for IRasterDefaultsEnv2 implementation
##class IRasterDefaultsEnv2_Impl(object):
##    def UpdateAll(self):
##        u'Updates the registry with all changes to the raster environment in the current session.'
##        #return 
##
##    def _get(self):
##        u'Default proxy file path.'
##        #return pProxyFilePath
##    def _set(self, pProxyFilePath):
##        u'Default proxy file path.'
##    ProxyFilePath = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Default rendering mode.'
##        #return pRenderingMode
##    def _set(self, pRenderingMode):
##        u'Default rendering mode.'
##    RenderingMode = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Default maximum table size.'
##        #return pMaxTableSize
##    def _set(self, pMaxTableSize):
##        u'Default maximum table size.'
##    MaxTableSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Default resampling for display.'
##        #return pDefaultResampling
##    def _set(self, pDefaultResampling):
##        u'Default resampling for display.'
##    Resampling = property(_get, _set, doc = _set.__doc__)
##

IRasterDefaultsEnv3._methods_ = [
    COMMETHOD(['propput', helpstring(u'The maximum attribute table size that can be built.')], HRESULT, 'MaximumBuildAttributeTableSize',
              ( ['in'], c_int, 'pSize' )),
    COMMETHOD(['propget', helpstring(u'The maximum attribute table size that can be built.')], HRESULT, 'MaximumBuildAttributeTableSize',
              ( ['retval', 'out'], POINTER(c_int), 'pSize' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the world file should overrides the raster dataset internal georeferencing.')], HRESULT, 'FavorWorldFile',
              ( ['in'], VARIANT_BOOL, 'pFavor' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the world file should overrides the raster dataset internal georeferencing.')], HRESULT, 'FavorWorldFile',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pFavor' )),
    COMMETHOD(['propget', helpstring(u'Indicates if raster catalogs can be assumed to be homogeneous.')], HRESULT, 'AssumeHomogeneousCatalog',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pHomogeneous' )),
    COMMETHOD(['propput', helpstring(u'Indicates if raster catalogs can be assumed to be homogeneous.')], HRESULT, 'AssumeHomogeneousCatalog',
              ( ['in'], VARIANT_BOOL, 'pHomogeneous' )),
]
################################################################
## code template for IRasterDefaultsEnv3 implementation
##class IRasterDefaultsEnv3_Impl(object):
##    def _get(self):
##        u'The maximum attribute table size that can be built.'
##        #return pSize
##    def _set(self, pSize):
##        u'The maximum attribute table size that can be built.'
##    MaximumBuildAttributeTableSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the world file should overrides the raster dataset internal georeferencing.'
##        #return pFavor
##    def _set(self, pFavor):
##        u'Indicates if the world file should overrides the raster dataset internal georeferencing.'
##    FavorWorldFile = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if raster catalogs can be assumed to be homogeneous.'
##        #return pHomogeneous
##    def _set(self, pHomogeneous):
##        u'Indicates if raster catalogs can be assumed to be homogeneous.'
##    AssumeHomogeneousCatalog = property(_get, _set, doc = _set.__doc__)
##

IRasterDefaultsEnv4._methods_ = [
    COMMETHOD(['propput', helpstring(u'Indicates if the subdataset selection dialog should pop up.')], HRESULT, 'AskSubdatasetSelection',
              ( ['in'], VARIANT_BOOL, 'pAsk' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the subdataset selection dialog should pop up.')], HRESULT, 'AskSubdatasetSelection',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pAsk' )),
    COMMETHOD(['propput', helpstring(u'Indicates if displaying raster datasets with contrast stretching as default.')], HRESULT, 'DisplayWithContrastStretch',
              ( ['in'], VARIANT_BOOL, 'pStretch' )),
    COMMETHOD(['propget', helpstring(u'Indicates if displaying raster datasets with contrast stretching as default.')], HRESULT, 'DisplayWithContrastStretch',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pStretch' )),
    COMMETHOD(['propput', helpstring(u'The maximum number of rasters for color matching.')], HRESULT, 'MaximumRastersColorMatching',
              ( ['in'], c_int, 'pSize' )),
    COMMETHOD(['propget', helpstring(u'The maximum number of rasters for color matching.')], HRESULT, 'MaximumRastersColorMatching',
              ( ['retval', 'out'], POINTER(c_int), 'pSize' )),
]
################################################################
## code template for IRasterDefaultsEnv4 implementation
##class IRasterDefaultsEnv4_Impl(object):
##    def _get(self):
##        u'The maximum number of rasters for color matching.'
##        #return pSize
##    def _set(self, pSize):
##        u'The maximum number of rasters for color matching.'
##    MaximumRastersColorMatching = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if displaying raster datasets with contrast stretching as default.'
##        #return pStretch
##    def _set(self, pStretch):
##        u'Indicates if displaying raster datasets with contrast stretching as default.'
##    DisplayWithContrastStretch = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the subdataset selection dialog should pop up.'
##        #return pAsk
##    def _set(self, pAsk):
##        u'Indicates if the subdataset selection dialog should pop up.'
##    AskSubdatasetSelection = property(_get, _set, doc = _set.__doc__)
##

class ImageServerIP(CoClass):
    u'Image Server Message Proxy.'
    _reg_clsid_ = GUID('{BD3E4F96-3886-4670-AEF4-A94DC5FE6146}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IImageServer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control an image server.'
    _iid_ = GUID('{10A6F247-A053-4BB1-AAF3-503EF365E10E}')
    _idlflags_ = ['oleautomation']
class IImageServer2(IImageServer):
    _case_insensitive_ = True
    u'Provides access to members that control an image server.'
    _iid_ = GUID('{D9BF0BF1-2AC8-49F5-94CB-6B5182C6297F}')
    _idlflags_ = ['oleautomation']
class IImageServer3(IImageServer2):
    _case_insensitive_ = True
    u'Provides access to members that control an image server object (SO).'
    _iid_ = GUID('{D27B4A93-5DD5-47E0-9551-951010C342AD}')
    _idlflags_ = ['oleautomation']
class ITiledImageServer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that serve tiled maps.'
    _iid_ = GUID('{10BFD112-33D2-4986-997A-F2B6069E45B8}')
    _idlflags_ = ['oleautomation']
ImageServerIP._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._746F6817_89BB_4490_9829_83CA25FD505A_0_10_2.IAGSServerObject, comtypes.gen._746F6817_89BB_4490_9829_83CA25FD505A_0_10_2.IAGSServerObject2, IImageServer, IImageServer2, IImageServer3, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, ITiledImageServer]

class GraphicFeatureLayer(CoClass):
    u'GraphicFeatureLayer co-class.'
    _reg_clsid_ = GUID('{08210B73-9B82-413F-9835-275CD74B7472}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IGraphicFeatureLayer(IDataObjectTable):
    _case_insensitive_ = True
    u'Graphic Feature Layer'
    _iid_ = GUID('{D932A966-DAD8-4D0E-8807-DEAD0DAE0AAC}')
    _idlflags_ = ['oleautomation']
GraphicFeatureLayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGraphicFeatureLayer, IMapTableTimeInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class IMapTableSourceDescription(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the available properties of a Map Table Source Description object.'
    _iid_ = GUID('{AD819691-952F-404D-A8B7-3F14BFCD3200}')
    _idlflags_ = ['oleautomation']
IMapTableSourceDescription._methods_ = [
    COMMETHOD(['propget', helpstring(u'The table ID. This is a unique ID for the layer, and is used to identify one of the existing tables.')], HRESULT, 'MapTableID',
              ( ['retval', 'out'], POINTER(c_int), 'MapTableID' )),
    COMMETHOD(['propput', helpstring(u'The table ID. This is a unique ID for the layer, and is used to identify one of the existing tables.')], HRESULT, 'MapTableID',
              ( ['in'], c_int, 'MapTableID' )),
    COMMETHOD(['propget', helpstring(u'Version name. Used to change data source of existing table or layer.')], HRESULT, 'VersionName',
              ( ['retval', 'out'], POINTER(BSTR), 'pVersionName' )),
    COMMETHOD(['propput', helpstring(u'Version name. Used to change data source of existing table or layer.')], HRESULT, 'VersionName',
              ( ['in'], BSTR, 'pVersionName' )),
]
################################################################
## code template for IMapTableSourceDescription implementation
##class IMapTableSourceDescription_Impl(object):
##    def _get(self):
##        u'Version name. Used to change data source of existing table or layer.'
##        #return pVersionName
##    def _set(self, pVersionName):
##        u'Version name. Used to change data source of existing table or layer.'
##    VersionName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The table ID. This is a unique ID for the layer, and is used to identify one of the existing tables.'
##        #return MapTableID
##    def _set(self, MapTableID):
##        u'The table ID. This is a unique ID for the layer, and is used to identify one of the existing tables.'
##    MapTableID = property(_get, _set, doc = _set.__doc__)
##

class IDMSGridLabel(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the DMS Grid Label.'
    _iid_ = GUID('{CE41C503-9DF9-11D2-AADE-000000000000}')
    _idlflags_ = ['oleautomation']
class IDMSGridLabel2(IDMSGridLabel):
    _case_insensitive_ = True
    u'Provides access to members that control the additional properties of DMS grid labels.'
    _iid_ = GUID('{A2068CED-CA6D-49D1-BE32-0273ED984217}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'esriDMSGridLabelType'
esriDMSGridLabelStandard = 0
esriDMSGridLabelStacked = 1
esriDMSGridLabelDD = 2
esriDMSGridLabelDM = 3
esriDMSGridLabelDS = 4
esriDMSGridLabelType = c_int # enum
IDMSGridLabel._methods_ = [
    COMMETHOD(['propget', helpstring(u'The type of the DMS grid label.')], HRESULT, 'LabelType',
              ( ['retval', 'out'], POINTER(esriDMSGridLabelType), 'LabelType' )),
    COMMETHOD(['propput', helpstring(u'The type of the DMS grid label.')], HRESULT, 'LabelType',
              ( ['in'], esriDMSGridLabelType, 'LabelType' )),
    COMMETHOD(['propget', helpstring(u'The format with which the latitudes and longitudes are displayed.')], HRESULT, 'LatLonFormat',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILatLonFormat)), 'Format' )),
    COMMETHOD(['propput', helpstring(u'The format with which the latitudes and longitudes are displayed.')], HRESULT, 'LatLonFormat',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILatLonFormat), 'Format' )),
    COMMETHOD(['propget', helpstring(u'Indicates if zero minutes are shown.')], HRESULT, 'ShowZeroMinutes',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Show' )),
    COMMETHOD(['propput', helpstring(u'Indicates if zero minutes are shown.')], HRESULT, 'ShowZeroMinutes',
              ( ['in'], VARIANT_BOOL, 'Show' )),
    COMMETHOD(['propget', helpstring(u'Indicates if zero seconds are shown.')], HRESULT, 'ShowZeroSeconds',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Show' )),
    COMMETHOD(['propput', helpstring(u'Indicates if zero seconds are shown.')], HRESULT, 'ShowZeroSeconds',
              ( ['in'], VARIANT_BOOL, 'Show' )),
    COMMETHOD(['propget', helpstring(u'The font used to display the minutes.')], HRESULT, 'MinutesFont',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IFontDisp)), 'Font' )),
    COMMETHOD(['propput', helpstring(u'The font used to display the minutes.')], HRESULT, 'MinutesFont',
              ( ['in'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IFontDisp), 'Font' )),
    COMMETHOD(['propget', helpstring(u'The color used to display the minutes.')], HRESULT, 'MinutesColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'The color used to display the minutes.')], HRESULT, 'MinutesColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'The font used to display the seconds.')], HRESULT, 'SecondsFont',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IFontDisp)), 'Font' )),
    COMMETHOD(['propput', helpstring(u'The font used to display the seconds.')], HRESULT, 'SecondsFont',
              ( ['in'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IFontDisp), 'Font' )),
    COMMETHOD(['propget', helpstring(u'The color used to display the seconds.')], HRESULT, 'SecondsColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'The color used to display the seconds.')], HRESULT, 'SecondsColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
]
################################################################
## code template for IDMSGridLabel implementation
##class IDMSGridLabel_Impl(object):
##    def _get(self):
##        u'The type of the DMS grid label.'
##        #return LabelType
##    def _set(self, LabelType):
##        u'The type of the DMS grid label.'
##    LabelType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The color used to display the seconds.'
##        #return Color
##    def _set(self, Color):
##        u'The color used to display the seconds.'
##    SecondsColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The font used to display the minutes.'
##        #return Font
##    def _set(self, Font):
##        u'The font used to display the minutes.'
##    MinutesFont = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The color used to display the minutes.'
##        #return Color
##    def _set(self, Color):
##        u'The color used to display the minutes.'
##    MinutesColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if zero seconds are shown.'
##        #return Show
##    def _set(self, Show):
##        u'Indicates if zero seconds are shown.'
##    ShowZeroSeconds = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The format with which the latitudes and longitudes are displayed.'
##        #return Format
##    def _set(self, Format):
##        u'The format with which the latitudes and longitudes are displayed.'
##    LatLonFormat = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The font used to display the seconds.'
##        #return Font
##    def _set(self, Font):
##        u'The font used to display the seconds.'
##    SecondsFont = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if zero minutes are shown.'
##        #return Show
##    def _set(self, Show):
##        u'Indicates if zero minutes are shown.'
##    ShowZeroMinutes = property(_get, _set, doc = _set.__doc__)
##

IDMSGridLabel2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if the DMS labels should be abbreviated when the value is not a whole degree.')], HRESULT, 'AbbreviateLabels',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'abbrev' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the DMS labels should be abbreviated when the value is not a whole degree.')], HRESULT, 'AbbreviateLabels',
              ( ['in'], VARIANT_BOOL, 'abbrev' )),
    COMMETHOD(['propget', helpstring(u'The font size used to display the minutes.')], HRESULT, 'MinutesFontSize',
              ( ['retval', 'out'], POINTER(c_double), 'Size' )),
    COMMETHOD(['propput', helpstring(u'The font size used to display the minutes.')], HRESULT, 'MinutesFontSize',
              ( ['in'], c_double, 'Size' )),
    COMMETHOD(['propget', helpstring(u'The font size used to display the seconds.')], HRESULT, 'SecondsFontSize',
              ( ['retval', 'out'], POINTER(c_double), 'Size' )),
    COMMETHOD(['propput', helpstring(u'The font size used to display the seconds.')], HRESULT, 'SecondsFontSize',
              ( ['in'], c_double, 'Size' )),
]
################################################################
## code template for IDMSGridLabel2 implementation
##class IDMSGridLabel2_Impl(object):
##    def _get(self):
##        u'The font size used to display the minutes.'
##        #return Size
##    def _set(self, Size):
##        u'The font size used to display the minutes.'
##    MinutesFontSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The font size used to display the seconds.'
##        #return Size
##    def _set(self, Size):
##        u'The font size used to display the seconds.'
##    SecondsFontSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the DMS labels should be abbreviated when the value is not a whole degree.'
##        #return abbrev
##    def _set(self, abbrev):
##        u'Indicates if the DMS labels should be abbreviated when the value is not a whole degree.'
##    AbbreviateLabels = property(_get, _set, doc = _set.__doc__)
##

class IPrivateServerObjectLANProxy(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a private Server LAN proxy.'
    _iid_ = GUID('{29188F1B-E78F-49BD-854E-B2D680F03843}')
    _idlflags_ = []
IPrivateServerObjectLANProxy._methods_ = [
    COMMETHOD([helpstring(u'Initializes using a private server.')], HRESULT, 'Init',
              ( ['in'], VARIANT_BOOL, 'isPooled' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], POINTER(comtypes.gen._18F2FC71_6B30_45B9_B101_037A8B868B66_0_10_2.IServer), 'pServer' ),
              ( ['in'], BSTR, 'namespace2Use' )),
]
################################################################
## code template for IPrivateServerObjectLANProxy implementation
##class IPrivateServerObjectLANProxy_Impl(object):
##    def Init(self, isPooled, Name, pServer, namespace2Use):
##        u'Initializes using a private server.'
##        #return 
##

class IMapServerInit(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that support initializing a map server.'
    _iid_ = GUID('{56E179E3-974E-41A7-836B-C9A60EF6301B}')
    _idlflags_ = ['oleautomation']
IMapServerInit._methods_ = [
    COMMETHOD([helpstring(u'Initializes the map server with an mxd or pmf file stored at the specified path.  The path must be accessible to the server machine.')], HRESULT, 'Connect',
              ( ['in'], BSTR, 'FilePath' )),
    COMMETHOD([helpstring(u'An alternative to calling Connect(). This method synthesizes a map document with a single layer based on the given IDataset object and initializes the map server for processing.')], HRESULT, 'StartWithData',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataset), 'pDataset' )),
    COMMETHOD([helpstring(u'Clears out all of the map objects in memory.  The client must call one of the Start methods again before attempting any other operations.')], HRESULT, 'Stop'),
    COMMETHOD(['propput', helpstring(u'The physical directory for output files.')], HRESULT, 'PhysicalOutputDirectory',
              ( ['in'], BSTR, 'dirPath' )),
    COMMETHOD(['propget', helpstring(u'The physical directory for output files.')], HRESULT, 'PhysicalOutputDirectory',
              ( ['retval', 'out'], POINTER(BSTR), 'dirPath' )),
    COMMETHOD(['propput', helpstring(u'The virtual directory for output files.')], HRESULT, 'VirtualOutputDirectory',
              ( ['in'], BSTR, 'dirPath' )),
    COMMETHOD(['propget', helpstring(u'The virtual directory for output files.')], HRESULT, 'VirtualOutputDirectory',
              ( ['retval', 'out'], POINTER(BSTR), 'dirPath' )),
    COMMETHOD(['propget', helpstring(u'The map document path.')], HRESULT, 'FilePath',
              ( ['retval', 'out'], POINTER(BSTR), 'FilePath' )),
    COMMETHOD(['propget', helpstring(u'The maximum number of records returned for query results (Identify, Find, QueryFeatureData, and QueryHyperlinks).')], HRESULT, 'MaxRecordCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propput', helpstring(u'The maximum number of records returned for query results (Identify, Find, QueryFeatureData, and QueryHyperlinks).')], HRESULT, 'MaxRecordCount',
              ( ['in'], c_int, 'Count' )),
    COMMETHOD(['propget', helpstring(u'The maximum number of records buffered on the server for display.')], HRESULT, 'MaxBufferCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propput', helpstring(u'The maximum number of records buffered on the server for display.')], HRESULT, 'MaxBufferCount',
              ( ['in'], c_int, 'Count' )),
    COMMETHOD(['propget', helpstring(u'The maximum width in pixels of an image request.')], HRESULT, 'MaxImageWidth',
              ( ['retval', 'out'], POINTER(c_int), 'Width' )),
    COMMETHOD(['propput', helpstring(u'The maximum width in pixels of an image request.')], HRESULT, 'MaxImageWidth',
              ( ['in'], c_int, 'Width' )),
    COMMETHOD(['propget', helpstring(u'The maximum height in pixels of an image request.')], HRESULT, 'MaxImageHeight',
              ( ['retval', 'out'], POINTER(c_int), 'Height' )),
    COMMETHOD(['propput', helpstring(u'The maximum height in pixels of an image request.')], HRESULT, 'MaxImageHeight',
              ( ['in'], c_int, 'Height' )),
]
################################################################
## code template for IMapServerInit implementation
##class IMapServerInit_Impl(object):
##    def _get(self):
##        u'The maximum number of records returned for query results (Identify, Find, QueryFeatureData, and QueryHyperlinks).'
##        #return Count
##    def _set(self, Count):
##        u'The maximum number of records returned for query results (Identify, Find, QueryFeatureData, and QueryHyperlinks).'
##    MaxRecordCount = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def FilePath(self):
##        u'The map document path.'
##        #return FilePath
##
##    def StartWithData(self, pDataset):
##        u'An alternative to calling Connect(). This method synthesizes a map document with a single layer based on the given IDataset object and initializes the map server for processing.'
##        #return 
##
##    def _get(self):
##        u'The maximum width in pixels of an image request.'
##        #return Width
##    def _set(self, Width):
##        u'The maximum width in pixels of an image request.'
##    MaxImageWidth = property(_get, _set, doc = _set.__doc__)
##
##    def Stop(self):
##        u'Clears out all of the map objects in memory.  The client must call one of the Start methods again before attempting any other operations.'
##        #return 
##
##    def _get(self):
##        u'The physical directory for output files.'
##        #return dirPath
##    def _set(self, dirPath):
##        u'The physical directory for output files.'
##    PhysicalOutputDirectory = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The maximum number of records buffered on the server for display.'
##        #return Count
##    def _set(self, Count):
##        u'The maximum number of records buffered on the server for display.'
##    MaxBufferCount = property(_get, _set, doc = _set.__doc__)
##
##    def Connect(self, FilePath):
##        u'Initializes the map server with an mxd or pmf file stored at the specified path.  The path must be accessible to the server machine.'
##        #return 
##
##    def _get(self):
##        u'The virtual directory for output files.'
##        #return dirPath
##    def _set(self, dirPath):
##        u'The virtual directory for output files.'
##    VirtualOutputDirectory = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The maximum height in pixels of an image request.'
##        #return Height
##    def _set(self, Height):
##        u'The maximum height in pixels of an image request.'
##    MaxImageHeight = property(_get, _set, doc = _set.__doc__)
##

class TableEditResult(CoClass):
    u'TableEditResult'
    _reg_clsid_ = GUID('{C45AEC7C-3331-41A8-BB55-3C7F738CEF27}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
TableEditResult._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ITableEditResult, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]

ITableEditResults._methods_ = [
    COMMETHOD(['propget', helpstring(u'TableEditResult elements count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'TableEditResult element at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(ITableEditResult)), 'TableEditResult' )),
    COMMETHOD([helpstring(u'Removes the TableEditResult at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all TableEditResult elements.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Adds a TableEditResult element.')], HRESULT, 'Add',
              ( ['in'], POINTER(ITableEditResult), 'TableEditResult' )),
    COMMETHOD([helpstring(u'Adds a TableEditResult at the specified position.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(ITableEditResult), 'TableEditResult' )),
]
################################################################
## code template for ITableEditResults implementation
##class ITableEditResults_Impl(object):
##    @property
##    def Count(self):
##        u'TableEditResult elements count.'
##        #return Count
##
##    def Insert(self, Index, TableEditResult):
##        u'Adds a TableEditResult at the specified position.'
##        #return 
##
##    def Remove(self, Index):
##        u'Removes the TableEditResult at the specified position.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'TableEditResult element at the specified position.'
##        #return TableEditResult
##
##    def RemoveAll(self):
##        u'Removes all TableEditResult elements.'
##        #return 
##
##    def Add(self, TableEditResult):
##        u'Adds a TableEditResult element.'
##        #return 
##

class IGridInteriorLabels(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the interior labels on a grid.'
    _iid_ = GUID('{A8BDC097-2002-4E08-BD4B-401599A58FA4}')
    _idlflags_ = ['oleautomation']
IGridInteriorLabels._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if interior labels should be displayed.')], HRESULT, 'ShowInteriorLabels',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Show' )),
    COMMETHOD(['propput', helpstring(u'Indicates if interior labels should be displayed.')], HRESULT, 'ShowInteriorLabels',
              ( ['in'], VARIANT_BOOL, 'Show' )),
    COMMETHOD(['propget', helpstring(u'The interval along the X axis between interior labels.')], HRESULT, 'InteriorLabelIntervalX',
              ( ['retval', 'out'], POINTER(c_double), 'Interval' )),
    COMMETHOD(['propput', helpstring(u'The interval along the X axis between interior labels.')], HRESULT, 'InteriorLabelIntervalX',
              ( ['in'], c_double, 'Interval' )),
    COMMETHOD(['propget', helpstring(u'The interval along the Y axis between interior labels.')], HRESULT, 'InteriorLabelIntervalY',
              ( ['retval', 'out'], POINTER(c_double), 'Interval' )),
    COMMETHOD(['propput', helpstring(u'The interval along the Y axis between interior labels.')], HRESULT, 'InteriorLabelIntervalY',
              ( ['in'], c_double, 'Interval' )),
]
################################################################
## code template for IGridInteriorLabels implementation
##class IGridInteriorLabels_Impl(object):
##    def _get(self):
##        u'Indicates if interior labels should be displayed.'
##        #return Show
##    def _set(self, Show):
##        u'Indicates if interior labels should be displayed.'
##    ShowInteriorLabels = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The interval along the Y axis between interior labels.'
##        #return Interval
##    def _set(self, Interval):
##        u'The interval along the Y axis between interior labels.'
##    InteriorLabelIntervalY = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The interval along the X axis between interior labels.'
##        #return Interval
##    def _set(self, Interval):
##        u'The interval along the X axis between interior labels.'
##    InteriorLabelIntervalX = property(_get, _set, doc = _set.__doc__)
##

class RepresentationRuleStyleGalleryClass(CoClass):
    u'Use to create new Representation Rule items.'
    _reg_clsid_ = GUID('{D335A2E1-9C05-4198-9D23-36AE5492A4B1}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
RepresentationRuleStyleGalleryClass._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IStyleGalleryClass, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IStyleGalleryClass2]

class IRasterUniqueValueRenderer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that relate to the unique value rendering of rasters.'
    _iid_ = GUID('{279369A8-57DA-11D2-AAB1-00C04FA33416}')
    _idlflags_ = ['oleautomation']
IRasterUniqueValueRenderer._methods_ = [
    COMMETHOD(['propput', helpstring(u'Indicates whether the default unique value renderer is currently active.')], HRESULT, 'UseDefaultSymbol',
              ( ['in'], VARIANT_BOOL, 'pFlag' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the default unique value renderer is currently active.')], HRESULT, 'UseDefaultSymbol',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pFlag' )),
    COMMETHOD(['propputref', helpstring(u'Default unique value renderer.')], HRESULT, 'DefaultSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol), 'ppSymbol' )),
    COMMETHOD(['propget', helpstring(u'Default unique value renderer.')], HRESULT, 'DefaultSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol)), 'ppSymbol' )),
    COMMETHOD(['propput', helpstring(u'Default label for the unique value renderer.')], HRESULT, 'DefaultLabel',
              ( ['in'], BSTR, 'pLabel' )),
    COMMETHOD(['propget', helpstring(u'Default label for the unique value renderer.')], HRESULT, 'DefaultLabel',
              ( ['retval', 'out'], POINTER(BSTR), 'pLabel' )),
    COMMETHOD(['propput', helpstring(u'Currently active renderer field.')], HRESULT, 'Field',
              ( ['in'], BSTR, 'pField' )),
    COMMETHOD(['propget', helpstring(u'Currently active renderer field.')], HRESULT, 'Field',
              ( ['retval', 'out'], POINTER(BSTR), 'pField' )),
    COMMETHOD(['propput', helpstring(u'Current renderer color scheme.')], HRESULT, 'ColorScheme',
              ( ['in'], BSTR, 'pName' )),
    COMMETHOD(['propget', helpstring(u'Current renderer color scheme.')], HRESULT, 'ColorScheme',
              ( ['retval', 'out'], POINTER(BSTR), 'pName' )),
    COMMETHOD(['propput', helpstring(u'Number of headings used by the renderer.')], HRESULT, 'HeadingCount',
              ( ['in'], c_int, 'pCount' )),
    COMMETHOD(['propget', helpstring(u'Number of headings used by the renderer.')], HRESULT, 'HeadingCount',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propput', helpstring(u'One heading in the heading list based on its index.')], HRESULT, 'Heading',
              ( ['in'], c_int, 'iHeading' ),
              ( ['in'], BSTR, 'pHeading' )),
    COMMETHOD(['propget', helpstring(u'One heading in the heading list based on its index.')], HRESULT, 'Heading',
              ( ['in'], c_int, 'iHeading' ),
              ( ['retval', 'out'], POINTER(BSTR), 'pHeading' )),
    COMMETHOD(['propput', helpstring(u'Number of classes in the specified heading.')], HRESULT, 'ClassCount',
              ( ['in'], c_int, 'iHeading' ),
              ( ['in'], c_int, 'pCount' )),
    COMMETHOD(['propget', helpstring(u'Number of classes in the specified heading.')], HRESULT, 'ClassCount',
              ( ['in'], c_int, 'iHeading' ),
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propput', helpstring(u'Symbol for a particular class in the specified heading.')], HRESULT, 'Symbol',
              ( ['in'], c_int, 'iHeading' ),
              ( ['in'], c_int, 'iClass' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol), 'pSymbol' )),
    COMMETHOD(['propget', helpstring(u'Symbol for a particular class in the specified heading.')], HRESULT, 'Symbol',
              ( ['in'], c_int, 'iHeading' ),
              ( ['in'], c_int, 'iClass' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol)), 'pSymbol' )),
    COMMETHOD(['propput', helpstring(u'Label for a particular class in the specified heading.')], HRESULT, 'Label',
              ( ['in'], c_int, 'iHeading' ),
              ( ['in'], c_int, 'iClass' ),
              ( ['in'], BSTR, 'pLabel' )),
    COMMETHOD(['propget', helpstring(u'Label for a particular class in the specified heading.')], HRESULT, 'Label',
              ( ['in'], c_int, 'iHeading' ),
              ( ['in'], c_int, 'iClass' ),
              ( ['retval', 'out'], POINTER(BSTR), 'pLabel' )),
    COMMETHOD(['propput', helpstring(u'Description for a particular class in the specified heading.')], HRESULT, 'Description',
              ( ['in'], c_int, 'iHeading' ),
              ( ['in'], c_int, 'iClass' ),
              ( ['in'], BSTR, 'pDescription' )),
    COMMETHOD(['propget', helpstring(u'Description for a particular class in the specified heading.')], HRESULT, 'Description',
              ( ['in'], c_int, 'iHeading' ),
              ( ['in'], c_int, 'iClass' ),
              ( ['retval', 'out'], POINTER(BSTR), 'pDescription' )),
    COMMETHOD([helpstring(u'Adds a value to a particular class in the specified heading.')], HRESULT, 'AddValue',
              ( ['in'], c_int, 'iHeading' ),
              ( ['in'], c_int, 'iClass' ),
              ( ['in'], VARIANT, 'Value' )),
    COMMETHOD([helpstring(u'Removes a value from a particular class in the specified heading.')], HRESULT, 'RemoveValues',
              ( ['in'], c_int, 'iHeading' ),
              ( ['in'], c_int, 'iClass' )),
    COMMETHOD(['propget', helpstring(u'Number of values in a particular class in the specified heading.')], HRESULT, 'ValueCount',
              ( ['in'], c_int, 'iHeading' ),
              ( ['in'], c_int, 'iClass' ),
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propget', helpstring(u'Value of a particular class in the specified heading based on its index.')], HRESULT, 'Value',
              ( ['in'], c_int, 'iHeading' ),
              ( ['in'], c_int, 'iClass' ),
              ( ['in'], c_int, 'iValue' ),
              ( ['retval', 'out'], POINTER(VARIANT), 'Value' )),
]
################################################################
## code template for IRasterUniqueValueRenderer implementation
##class IRasterUniqueValueRenderer_Impl(object):
##    def _get(self):
##        u'Number of headings used by the renderer.'
##        #return pCount
##    def _set(self, pCount):
##        u'Number of headings used by the renderer.'
##    HeadingCount = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, iHeading, iClass):
##        u'Description for a particular class in the specified heading.'
##        #return pDescription
##    def _set(self, iHeading, iClass, pDescription):
##        u'Description for a particular class in the specified heading.'
##    Description = property(_get, _set, doc = _set.__doc__)
##
##    def RemoveValues(self, iHeading, iClass):
##        u'Removes a value from a particular class in the specified heading.'
##        #return 
##
##    def _get(self):
##        u'Current renderer color scheme.'
##        #return pName
##    def _set(self, pName):
##        u'Current renderer color scheme.'
##    ColorScheme = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, iHeading, iClass):
##        u'Symbol for a particular class in the specified heading.'
##        #return pSymbol
##    def _set(self, iHeading, iClass, pSymbol):
##        u'Symbol for a particular class in the specified heading.'
##    Symbol = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, iHeading):
##        u'Number of classes in the specified heading.'
##        #return pCount
##    def _set(self, iHeading, pCount):
##        u'Number of classes in the specified heading.'
##    ClassCount = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def DefaultSymbol(self, ppSymbol):
##        u'Default unique value renderer.'
##        #return 
##
##    def _get(self, iHeading, iClass):
##        u'Label for a particular class in the specified heading.'
##        #return pLabel
##    def _set(self, iHeading, iClass, pLabel):
##        u'Label for a particular class in the specified heading.'
##    Label = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether the default unique value renderer is currently active.'
##        #return pFlag
##    def _set(self, pFlag):
##        u'Indicates whether the default unique value renderer is currently active.'
##    UseDefaultSymbol = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Currently active renderer field.'
##        #return pField
##    def _set(self, pField):
##        u'Currently active renderer field.'
##    Field = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def ValueCount(self, iHeading, iClass):
##        u'Number of values in a particular class in the specified heading.'
##        #return pCount
##
##    @property
##    def Value(self, iHeading, iClass, iValue):
##        u'Value of a particular class in the specified heading based on its index.'
##        #return Value
##
##    def AddValue(self, iHeading, iClass, Value):
##        u'Adds a value to a particular class in the specified heading.'
##        #return 
##
##    def _get(self):
##        u'Default label for the unique value renderer.'
##        #return pLabel
##    def _set(self, pLabel):
##        u'Default label for the unique value renderer.'
##    DefaultLabel = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, iHeading):
##        u'One heading in the heading list based on its index.'
##        #return pHeading
##    def _set(self, iHeading, pHeading):
##        u'One heading in the heading list based on its index.'
##    Heading = property(_get, _set, doc = _set.__doc__)
##

class IGraphicFeatureServer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members of Graphic Feature Server.'
    _iid_ = GUID('{3DF5BCFD-5945-4DD6-BDD1-5C3357B8209C}')
    _idlflags_ = ['oleautomation']
class IDataObjects(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Data Object Array with Spatial Reference'
    _iid_ = GUID('{705DE0F9-26CF-4A02-85A6-6C99BAFE1AA9}')
    _idlflags_ = ['oleautomation']
class ITableEdits(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    _iid_ = GUID('{8A60574A-B56B-460D-9EF1-95359293BFAC}')
    _idlflags_ = ['oleautomation']
class IGraphicFeatureLayers(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Graphic Feature Layers'
    _iid_ = GUID('{BE67627F-4B0B-414F-BF8D-0CC0A2D6B648}')
    _idlflags_ = ['oleautomation']
class IGFSTableDescriptions(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the GFS Table Descriptions Interface.'
    _iid_ = GUID('{16A9A81B-B235-4C73-B6AE-A918BF06854D}')
    _idlflags_ = ['oleautomation']
class IServiceDataOptions(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Service Data Options.'
    _iid_ = GUID('{2F7852C1-7BDA-42B9-8A94-91186592A69A}')
    _idlflags_ = ['oleautomation']
class IServiceData(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Service Data'
    _iid_ = GUID('{193975EA-18D5-4D47-B474-483218226989}')
    _idlflags_ = ['oleautomation']
IGraphicFeatureServer._methods_ = [
    COMMETHOD([], HRESULT, 'Add',
              ( ['in'], c_int, 'LayerOrTableID' ),
              ( ['in'], POINTER(IDataObjects), 'DataObjects' ),
              ( ['retval', 'out'], POINTER(POINTER(IEditResults)), 'EditResults' )),
    COMMETHOD([], HRESULT, 'AddAttachments',
              ( ['in'], c_int, 'LayerOrTableID' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IAttachmentDataArray), 'attachmentDataArray' ),
              ( ['retval', 'out'], POINTER(POINTER(IEditResults)), 'EditResults' )),
    COMMETHOD([], HRESULT, 'ApplyEdits',
              ( ['in'], POINTER(ITableEdits), 'TableEdits' ),
              ( ['retval', 'out'], POINTER(POINTER(ITableEditResults)), 'TableEditResults' )),
    COMMETHOD([], HRESULT, 'Delete',
              ( ['in'], c_int, 'LayerOrTableID' ),
              ( ['in'], BSTR, 'DefinitionExpression' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'queryFilter' )),
    COMMETHOD([], HRESULT, 'DeleteAttachments',
              ( ['in'], c_int, 'LayerOrTableID' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'idsOfAttachmentsToDelete' ),
              ( ['retval', 'out'], POINTER(POINTER(IEditResults)), 'EditResults' )),
    COMMETHOD([], HRESULT, 'DeleteByID',
              ( ['in'], c_int, 'LayerOrTableID' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'idsOfObjectsToDelete' ),
              ( ['retval', 'out'], POINTER(POINTER(IEditResults)), 'EditResults' )),
    COMMETHOD([], HRESULT, 'GetCount',
              ( ['in'], c_int, 'LayerOrTableID' ),
              ( ['in'], BSTR, 'DefinitionExpression' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'queryFilter' ),
              ( ['retval', 'out'], POINTER(c_int), 'numObjects' )),
    COMMETHOD([helpstring(u'Yields layers.')], HRESULT, 'GetLayers',
              ( ['in'], POINTER(IServerSymbolOutputOptions), 'symbolOutputOptions' ),
              ( ['retval', 'out'], POINTER(POINTER(IGraphicFeatureLayers)), 'GraphicFeatureLayers' )),
    COMMETHOD([], HRESULT, 'GetServiceObjectCount',
              ( ['in'], POINTER(IGFSTableDescriptions), 'layerOrTableDescriptions' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'Geometry' ),
              ( ['retval', 'out'], POINTER(c_int), 'numObjects' )),
    COMMETHOD([helpstring(u'Yields tables/layers.')], HRESULT, 'GetTables',
              ( ['in'], POINTER(IServerSymbolOutputOptions), 'symbolOutputOptions' ),
              ( ['in'], VARIANT_BOOL, 'ignoreLayers' ),
              ( ['retval', 'out'], POINTER(POINTER(IDataObjectTables)), 'DataObjectTables' )),
    COMMETHOD([], HRESULT, 'Query',
              ( ['in'], c_int, 'LayerOrTableID' ),
              ( ['in'], BSTR, 'DefinitionExpression' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'queryFilter' ),
              ( ['in'], POINTER(IServiceDataOptions), 'ServiceDataOptions' ),
              ( ['retval', 'out'], POINTER(POINTER(IServiceData)), 'ServiceData' )),
    COMMETHOD([], HRESULT, 'QueryAttachmentData',
              ( ['in'], c_int, 'LayerOrTableID' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'attachmentIDs' ),
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriTransportType, 'TransportType' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IAttachmentDataArray)), 'attachmentData' )),
    COMMETHOD([], HRESULT, 'QueryAttachmentInfos',
              ( ['in'], c_int, 'LayerOrTableID' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'objectIDs' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IAttachmentInfoArray)), 'attachmentInfos' )),
    COMMETHOD([], HRESULT, 'QueryFromService',
              ( ['in'], POINTER(IGFSTableDescriptions), 'layerOrTableDescriptions' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'Geometry' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'outSR' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITimeReference), 'outTR' ),
              ( ['in'], POINTER(IServiceDataOptions), 'ServiceDataOptions' ),
              ( ['retval', 'out'], POINTER(POINTER(IServiceData)), 'ServiceData' )),
    COMMETHOD([], HRESULT, 'QueryIDs',
              ( ['in'], c_int, 'LayerOrTableID' ),
              ( ['in'], BSTR, 'DefinitionExpression' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'queryFilter' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray)), 'objectIDs' )),
    COMMETHOD([helpstring(u'Returns the html as text that can be used in popups.')], HRESULT, 'QueryHTMLPopups',
              ( ['in'], c_int, 'LayerOrTableID' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'objectIDs' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray)), 'HTMLTextArray' )),
    COMMETHOD([], HRESULT, 'QueryRelatedObjects',
              ( ['in'], c_int, 'sourceLayerOrTableID' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'objectIDsInSource' ),
              ( ['in'], c_int, 'RelationshipID' ),
              ( ['in'], BSTR, 'targetDefinitionExpression' ),
              ( ['in'], BSTR, 'targetTableProps' ),
              ( ['in'], VARIANT_BOOL, 'groupBySourceOIDs' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'outSR' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITimeReference), 'outTR' ),
              ( ['in'], POINTER(IServiceDataOptions), 'ServiceDataOptions' ),
              ( ['retval', 'out'], POINTER(POINTER(IServiceData)), 'ServiceData' )),
    COMMETHOD([helpstring(u'Updates dataobjects.')], HRESULT, 'Update',
              ( ['in'], c_int, 'LayerOrTableID' ),
              ( ['in'], POINTER(IDataObjects), 'DataObjects' ),
              ( ['retval', 'out'], POINTER(POINTER(IEditResults)), 'EditResults' )),
    COMMETHOD([helpstring(u'Updates Attachments.')], HRESULT, 'UpdateAttachments',
              ( ['in'], c_int, 'LayerOrTableID' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IAttachmentDataArray), 'attachmentDataArray' ),
              ( ['retval', 'out'], POINTER(POINTER(IEditResults)), 'EditResults' )),
]
################################################################
## code template for IGraphicFeatureServer implementation
##class IGraphicFeatureServer_Impl(object):
##    def QueryIDs(self, LayerOrTableID, DefinitionExpression, queryFilter):
##        '-no docstring-'
##        #return objectIDs
##
##    def DeleteByID(self, LayerOrTableID, idsOfObjectsToDelete):
##        '-no docstring-'
##        #return EditResults
##
##    def DeleteAttachments(self, LayerOrTableID, idsOfAttachmentsToDelete):
##        '-no docstring-'
##        #return EditResults
##
##    def QueryAttachmentData(self, LayerOrTableID, attachmentIDs, TransportType):
##        '-no docstring-'
##        #return attachmentData
##
##    def ApplyEdits(self, TableEdits):
##        '-no docstring-'
##        #return TableEditResults
##
##    def GetLayers(self, symbolOutputOptions):
##        u'Yields layers.'
##        #return GraphicFeatureLayers
##
##    def QueryHTMLPopups(self, LayerOrTableID, objectIDs):
##        u'Returns the html as text that can be used in popups.'
##        #return HTMLTextArray
##
##    def QueryAttachmentInfos(self, LayerOrTableID, objectIDs):
##        '-no docstring-'
##        #return attachmentInfos
##
##    def Update(self, LayerOrTableID, DataObjects):
##        u'Updates dataobjects.'
##        #return EditResults
##
##    def Add(self, LayerOrTableID, DataObjects):
##        '-no docstring-'
##        #return EditResults
##
##    def AddAttachments(self, LayerOrTableID, attachmentDataArray):
##        '-no docstring-'
##        #return EditResults
##
##    def GetServiceObjectCount(self, layerOrTableDescriptions, Geometry):
##        '-no docstring-'
##        #return numObjects
##
##    def QueryFromService(self, layerOrTableDescriptions, Geometry, outSR, outTR, ServiceDataOptions):
##        '-no docstring-'
##        #return ServiceData
##
##    def UpdateAttachments(self, LayerOrTableID, attachmentDataArray):
##        u'Updates Attachments.'
##        #return EditResults
##
##    def Query(self, LayerOrTableID, DefinitionExpression, queryFilter, ServiceDataOptions):
##        '-no docstring-'
##        #return ServiceData
##
##    def GetCount(self, LayerOrTableID, DefinitionExpression, queryFilter):
##        '-no docstring-'
##        #return numObjects
##
##    def QueryRelatedObjects(self, sourceLayerOrTableID, objectIDsInSource, RelationshipID, targetDefinitionExpression, targetTableProps, groupBySourceOIDs, outSR, outTR, ServiceDataOptions):
##        '-no docstring-'
##        #return ServiceData
##
##    def GetTables(self, symbolOutputOptions, ignoreLayers):
##        u'Yields tables/layers.'
##        #return DataObjectTables
##
##    def Delete(self, LayerOrTableID, DefinitionExpression, queryFilter):
##        '-no docstring-'
##        #return 
##

class IMapServer2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that serve maps.'
    _iid_ = GUID('{A96FC7C0-57F7-4FC1-993A-4913B2CED0ED}')
    _idlflags_ = ['oleautomation']
class IMapServerInfo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the available properties of a map server info object.'
    _iid_ = GUID('{47DD2772-2F22-44DF-919B-0D16D8672626}')
    _idlflags_ = ['oleautomation']
class IMapImage(IImageResult):
    _case_insensitive_ = True
    u'Provides access to the Map Image Interface.'
    _iid_ = GUID('{8A77BEA2-5541-4ADE-93BC-D5CBA56034C8}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'esriFindOption'
esriFindAllLayers = -1
esriFindVisibleLayers = -2
esriFindOption = c_int # enum
class IMapServerFindResults(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Map Server Find Results Interface.'
    _iid_ = GUID('{D624AD5E-AC10-42BC-8177-324105923C7E}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'esriIdentifyOption'
esriIdentifyAllLayers = -1
esriIdentifyVisibleLayers = -2
esriIdentifyTopmost = -3
esriIdentifyTopOneWithHTMLPopup = -4
esriIdentifyVisibleWithHTMLPopup = -5
esriIdentifyOption = c_int # enum
class IMapServerHyperlinks(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Map Server Hyperlinks Interface.'
    _iid_ = GUID('{A2BF2FDC-3B52-42C4-B4BD-2AE828D14AB7}')
    _idlflags_ = ['oleautomation']
class IMapServerLegendPatch(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Map Server Legend Patch Interface.'
    _iid_ = GUID('{E8807B4F-A2ED-43CB-954F-73B7ECD94422}')
    _idlflags_ = ['oleautomation']
class IImageType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Image Type Interface.'
    _iid_ = GUID('{EC27718B-0FA5-40E1-9685-376E49E93CB5}')
    _idlflags_ = ['oleautomation']
class IMapServerLegendInfos(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Map Server Legend Infos Interface.'
    _iid_ = GUID('{DFCFDC82-AF78-49BF-9F48-272730AE82FF}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'esriImageReturnType'
esriImageReturnURL = 0
esriImageReturnMimeData = 1
esriImageReturnType = c_int # enum
class ILayerDescription(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the available properties of a layer description object.'
    _iid_ = GUID('{F763BDBE-8EF9-4DA8-9628-DBE8EE4EB6DE}')
    _idlflags_ = ['oleautomation']
class IQueryResultOptions(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to methods that control query results.'
    _iid_ = GUID('{FF6AAC5F-1424-4DBA-A813-B6B795A716DD}')
    _idlflags_ = ['oleautomation']
class IQueryResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to query results.'
    _iid_ = GUID('{70D47B05-6014-4693-B030-878B6C31FB02}')
    _idlflags_ = ['oleautomation']
IMapServer2._methods_ = [
    COMMETHOD(['propget', helpstring(u"A set of name-value pairs for properties set for the map document (mxd only). These properties are string values set in the map document's Map Properties dialog and include: Title, Subject, Author, Category, Keywords and Comments.")], HRESULT, 'DocumentInfo',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet)), 'props' )),
    COMMETHOD(['propget', helpstring(u'The number of maps (data frames) in the document.')], HRESULT, 'MapCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'Name of the map (data frame) as indicated by the index. The first beginning with 0.')], HRESULT, 'MapName',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(BSTR), 'MapName' )),
    COMMETHOD(['propget', helpstring(u"Name of the document's active map (data frame).")], HRESULT, 'DefaultMapName',
              ( ['retval', 'out'], POINTER(BSTR), 'MapName' )),
    COMMETHOD([helpstring(u'Returns information about a map (data frame).')], HRESULT, 'GetServerInfo',
              ( ['in'], BSTR, 'MapName' ),
              ( ['retval', 'out'], POINTER(POINTER(IMapServerInfo)), 'serverInfo' )),
    COMMETHOD([helpstring(u"Generates an image of the map, based on the given map description, and writes the image to a specified file on disk. Supported file types are: 'bmp', 'jpg', 'tif', 'png'/'png8', 'png24', 'emf', 'ps', 'pdf', 'ai', 'gif', and 'svg'/'svgz'.")], HRESULT, 'ExportMapImage',
              ( ['in'], POINTER(IMapDescription), 'mapDesc' ),
              ( ['in'], POINTER(IImageDescription), 'imageDesc' ),
              ( ['retval', 'out'], POINTER(POINTER(IMapImage)), 'MapImage' )),
    COMMETHOD([helpstring(u'Returns a collection of Map Server Find Result objects that contain the given search string. If LayerIDs is Nothing/Null or empty, all layers are searched.')], HRESULT, 'Find',
              ( ['in'], POINTER(IMapDescription), 'mapDesc' ),
              ( ['in'], POINTER(IImageDisplay), 'MapImage' ),
              ( ['in'], BSTR, 'searchString' ),
              ( ['in'], VARIANT_BOOL, 'Contains' ),
              ( ['in'], BSTR, 'searchFields' ),
              ( ['in'], esriFindOption, 'option' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'layerIds' ),
              ( ['retval', 'out'], POINTER(POINTER(IMapServerFindResults)), 'findResults' )),
    COMMETHOD([helpstring(u'Returns a collection of Map Server Identify Result objects at the given location. If LayerIDs is Nothing/Null or empty, all layers are searched.')], HRESULT, 'Identify',
              ( ['in'], POINTER(IMapDescription), 'mapDesc' ),
              ( ['in'], POINTER(IImageDisplay), 'MapImage' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'searchShape' ),
              ( ['in'], c_int, 'Tolerance' ),
              ( ['in'], esriIdentifyOption, 'option' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'layerIds' ),
              ( ['retval', 'out'], POINTER(POINTER(IMapServerIdentifyResults)), 'identifyResult' )),
    COMMETHOD([helpstring(u'Returns the count of the features that meet the query filter selection criteria for the specified layer.')], HRESULT, 'QueryFeatureCount',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], c_int, 'LayerID' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'Filter' ),
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD([helpstring(u'Returns the IDs of the features that meet the query filter selection criteria for the specified layer.')], HRESULT, 'QueryFeatureIDs',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], c_int, 'LayerID' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'Filter' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFIDSet)), 'FIDs' )),
    COMMETHOD([helpstring(u'Returns a record set of features that meet the query filter selection criteria for the specified layer.')], HRESULT, 'QueryFeatureData',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], c_int, 'LayerID' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'Filter' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRecordSet)), 'recordSet' )),
    COMMETHOD([helpstring(u'Returns a collection of Map Server Hyperlink objects for the specified layers. Only hyperlinks of visible layers are returned. If LayerIDs is Nothing/Null or empty, all layers are searched.')], HRESULT, 'QueryHyperlinks',
              ( ['in'], POINTER(IMapDescription), 'mapDesc' ),
              ( ['in'], POINTER(IImageDisplay), 'MapImage' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'layerIds' ),
              ( ['retval', 'out'], POINTER(POINTER(IMapServerHyperlinks)), 'hyperlinks' )),
    COMMETHOD([helpstring(u'Computes the scale of the specified map, at the given map extent, for an image with the given size.')], HRESULT, 'ComputeScale',
              ( ['in'], POINTER(IMapDescription), 'mapDesc' ),
              ( ['in'], POINTER(IImageDisplay), 'mapDisplay' ),
              ( ['retval', 'out'], POINTER(c_double), 'Scale' )),
    COMMETHOD([helpstring(u'Computes the distance between two points on the specified map. The result is in the map units of the specified map.')], HRESULT, 'ComputeDistance',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'fromPoint' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'toPoint' ),
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits, 'Units' ),
              ( ['retval', 'out'], POINTER(c_double), 'Distance' )),
    COMMETHOD([helpstring(u'Converts a screen location to a map coordinate.')], HRESULT, 'ToMapPoints',
              ( ['in'], POINTER(IMapDescription), 'MapDescription' ),
              ( ['in'], POINTER(IImageDisplay), 'mapDisplay' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'screenXValues' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'screenYValues' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPointCollection)), 'mapPoints' )),
    COMMETHOD([helpstring(u'Converts a map coordinate to a screen location.')], HRESULT, 'FromMapPoints',
              ( ['in'], POINTER(IMapDescription), 'MapDescription' ),
              ( ['in'], POINTER(IImageDisplay), 'mapDisplay' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPointCollection), 'mapPoints' ),
              ( ['in', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray)), 'screenXValues' ),
              ( ['in', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray)), 'screenYValues' )),
    COMMETHOD([helpstring(u'Returns a collection of Map Server Legend Info objects for the specified layers. If layerIDs is Nothing/Null or empty, legend information for all layers is returned.')], HRESULT, 'GetLegendInfo',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'layerIds' ),
              ( ['in'], POINTER(IMapServerLegendPatch), 'patch' ),
              ( ['in'], POINTER(IImageType), 'imgType' ),
              ( ['retval', 'out'], POINTER(POINTER(IMapServerLegendInfos)), 'legendInfos' )),
    COMMETHOD([helpstring(u'Returns the SQL syntax information for the specified layer.')], HRESULT, 'GetSQLSyntaxInfo',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], c_int, 'LayerID' ),
              ( ['retval', 'out'], POINTER(POINTER(ISQLSyntaxInfo)), 'sqlInfo' )),
    COMMETHOD([helpstring(u'The supported image return types for the map server.  A value of esriImageReturnMimeData means that only MIME data is supported.  Otherwise, either MIME data or URLs are supported.')], HRESULT, 'GetSupportedImageReturnTypes',
              ( ['retval', 'out'], POINTER(esriImageReturnType), 'retType' )),
    COMMETHOD([helpstring(u'Exports a scale bar to an image file.  The client can create the scaleBar object and set its desired properties appropriately.  If scaleBar is Nothing/Null, a default scale bar will be generated.')], HRESULT, 'ExportScaleBar',
              ( ['in'], POINTER(IScaleBar), 'Scalebar' ),
              ( ['in'], POINTER(IMapDescription), 'mapDesc' ),
              ( ['in'], POINTER(IImageDisplay), 'pMapDisplay' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'BackgroundColor' ),
              ( ['in'], POINTER(IImageDescription), 'imageDesc' ),
              ( ['retval', 'out'], POINTER(POINTER(IImageResult)), 'ImageResult' )),
    COMMETHOD([helpstring(u'Returns the count of the features that meet the query filter selection criteria for the specified layer.')], HRESULT, 'QueryFeatureCount2',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], POINTER(ILayerDescription), 'pLayerDescription' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'Filter' ),
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD([helpstring(u'Returns the IDs of the features that meet the query filter selection criteria for the specified layer.')], HRESULT, 'QueryFeatureIDs2',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], POINTER(ILayerDescription), 'pLayerDesciscription' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'Filter' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFIDSet)), 'FIDs' )),
    COMMETHOD([helpstring(u'Returns a record set of features that meet the query filter selection criteria for the specified layer.')], HRESULT, 'QueryFeatureData2',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], POINTER(ILayerDescription), 'pLayerDesciscription' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'Filter' ),
              ( ['in'], POINTER(IQueryResultOptions), 'options' ),
              ( ['retval', 'out'], POINTER(POINTER(IQueryResult)), 'QueryResult' )),
    COMMETHOD(['propget', helpstring(u'A set of name-value pairs for properties set for the MapServer Service Configuration Restrictions.')], HRESULT, 'ServiceConfigurationInfo',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet)), 'PropertySet' )),
]
################################################################
## code template for IMapServer2 implementation
##class IMapServer2_Impl(object):
##    def GetLegendInfo(self, MapName, layerIds, patch, imgType):
##        u'Returns a collection of Map Server Legend Info objects for the specified layers. If layerIDs is Nothing/Null or empty, legend information for all layers is returned.'
##        #return legendInfos
##
##    def GetServerInfo(self, MapName):
##        u'Returns information about a map (data frame).'
##        #return serverInfo
##
##    def ComputeDistance(self, MapName, fromPoint, toPoint, Units):
##        u'Computes the distance between two points on the specified map. The result is in the map units of the specified map.'
##        #return Distance
##
##    def QueryHyperlinks(self, mapDesc, MapImage, layerIds):
##        u'Returns a collection of Map Server Hyperlink objects for the specified layers. Only hyperlinks of visible layers are returned. If LayerIDs is Nothing/Null or empty, all layers are searched.'
##        #return hyperlinks
##
##    def QueryFeatureIDs(self, MapName, LayerID, Filter):
##        u'Returns the IDs of the features that meet the query filter selection criteria for the specified layer.'
##        #return FIDs
##
##    def FromMapPoints(self, MapDescription, mapDisplay, mapPoints):
##        u'Converts a map coordinate to a screen location.'
##        #return screenXValues, screenYValues
##
##    def ExportScaleBar(self, Scalebar, mapDesc, pMapDisplay, BackgroundColor, imageDesc):
##        u'Exports a scale bar to an image file.  The client can create the scaleBar object and set its desired properties appropriately.  If scaleBar is Nothing/Null, a default scale bar will be generated.'
##        #return ImageResult
##
##    @property
##    def DefaultMapName(self):
##        u"Name of the document's active map (data frame)."
##        #return MapName
##
##    @property
##    def MapCount(self):
##        u'The number of maps (data frames) in the document.'
##        #return Count
##
##    def QueryFeatureData(self, MapName, LayerID, Filter):
##        u'Returns a record set of features that meet the query filter selection criteria for the specified layer.'
##        #return recordSet
##
##    @property
##    def DocumentInfo(self):
##        u"A set of name-value pairs for properties set for the map document (mxd only). These properties are string values set in the map document's Map Properties dialog and include: Title, Subject, Author, Category, Keywords and Comments."
##        #return props
##
##    @property
##    def ServiceConfigurationInfo(self):
##        u'A set of name-value pairs for properties set for the MapServer Service Configuration Restrictions.'
##        #return PropertySet
##
##    def ExportMapImage(self, mapDesc, imageDesc):
##        u"Generates an image of the map, based on the given map description, and writes the image to a specified file on disk. Supported file types are: 'bmp', 'jpg', 'tif', 'png'/'png8', 'png24', 'emf', 'ps', 'pdf', 'ai', 'gif', and 'svg'/'svgz'."
##        #return MapImage
##
##    @property
##    def MapName(self, Index):
##        u'Name of the map (data frame) as indicated by the index. The first beginning with 0.'
##        #return MapName
##
##    def QueryFeatureData2(self, MapName, pLayerDesciscription, Filter, options):
##        u'Returns a record set of features that meet the query filter selection criteria for the specified layer.'
##        #return QueryResult
##
##    def GetSupportedImageReturnTypes(self):
##        u'The supported image return types for the map server.  A value of esriImageReturnMimeData means that only MIME data is supported.  Otherwise, either MIME data or URLs are supported.'
##        #return retType
##
##    def QueryFeatureCount2(self, MapName, pLayerDescription, Filter):
##        u'Returns the count of the features that meet the query filter selection criteria for the specified layer.'
##        #return Count
##
##    def QueryFeatureCount(self, MapName, LayerID, Filter):
##        u'Returns the count of the features that meet the query filter selection criteria for the specified layer.'
##        #return Count
##
##    def Find(self, mapDesc, MapImage, searchString, Contains, searchFields, option, layerIds):
##        u'Returns a collection of Map Server Find Result objects that contain the given search string. If LayerIDs is Nothing/Null or empty, all layers are searched.'
##        #return findResults
##
##    def ComputeScale(self, mapDesc, mapDisplay):
##        u'Computes the scale of the specified map, at the given map extent, for an image with the given size.'
##        #return Scale
##
##    def Identify(self, mapDesc, MapImage, searchShape, Tolerance, option, layerIds):
##        u'Returns a collection of Map Server Identify Result objects at the given location. If LayerIDs is Nothing/Null or empty, all layers are searched.'
##        #return identifyResult
##
##    def QueryFeatureIDs2(self, MapName, pLayerDesciscription, Filter):
##        u'Returns the IDs of the features that meet the query filter selection criteria for the specified layer.'
##        #return FIDs
##
##    def ToMapPoints(self, MapDescription, mapDisplay, screenXValues, screenYValues):
##        u'Converts a screen location to a map coordinate.'
##        #return mapPoints
##
##    def GetSQLSyntaxInfo(self, MapName, LayerID):
##        u'Returns the SQL syntax information for the specified layer.'
##        #return sqlInfo
##

class IDMSGridLabel3(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the DMS Grid Label.'
    _iid_ = GUID('{30052758-07DA-41DB-9469-B72F14E7A07B}')
    _idlflags_ = ['oleautomation']
IDMSGridLabel3._methods_ = [
    COMMETHOD(['propget', helpstring(u'The type of the DMS grid label.')], HRESULT, 'LabelType',
              ( ['retval', 'out'], POINTER(esriDMSGridLabelType), 'LabelType' )),
    COMMETHOD(['propput', helpstring(u'The type of the DMS grid label.')], HRESULT, 'LabelType',
              ( ['in'], esriDMSGridLabelType, 'LabelType' )),
    COMMETHOD(['propget', helpstring(u'The format with which the latitudes and longitudes are displayed.')], HRESULT, 'LatLonFormat',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILatLonFormat)), 'Format' )),
    COMMETHOD(['propput', helpstring(u'The format with which the latitudes and longitudes are displayed.')], HRESULT, 'LatLonFormat',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILatLonFormat), 'Format' )),
    COMMETHOD(['propget', helpstring(u'Indicates if zero minutes are shown.')], HRESULT, 'ShowZeroMinutes',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Show' )),
    COMMETHOD(['propput', helpstring(u'Indicates if zero minutes are shown.')], HRESULT, 'ShowZeroMinutes',
              ( ['in'], VARIANT_BOOL, 'Show' )),
    COMMETHOD(['propget', helpstring(u'Indicates if zero seconds are shown.')], HRESULT, 'ShowZeroSeconds',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Show' )),
    COMMETHOD(['propput', helpstring(u'Indicates if zero seconds are shown.')], HRESULT, 'ShowZeroSeconds',
              ( ['in'], VARIANT_BOOL, 'Show' )),
    COMMETHOD(['propget', helpstring(u'The font used to display the minutes.')], HRESULT, 'MinutesFont',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IFontDisp)), 'Font' )),
    COMMETHOD(['propput', helpstring(u'The font used to display the minutes.')], HRESULT, 'MinutesFont',
              ( ['in'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IFontDisp), 'Font' )),
    COMMETHOD(['propget', helpstring(u'The color used to display the minutes.')], HRESULT, 'MinutesColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'The color used to display the minutes.')], HRESULT, 'MinutesColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'The font used to display the seconds.')], HRESULT, 'SecondsFont',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IFontDisp)), 'Font' )),
    COMMETHOD(['propput', helpstring(u'The font used to display the seconds.')], HRESULT, 'SecondsFont',
              ( ['in'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IFontDisp), 'Font' )),
    COMMETHOD(['propget', helpstring(u'The color used to display the seconds.')], HRESULT, 'SecondsColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'The color used to display the seconds.')], HRESULT, 'SecondsColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the DMS labels should be abbreviated when the value is not a whole degree.')], HRESULT, 'AbbreviateLabels',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'abbrev' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the DMS labels should be abbreviated when the value is not a whole degree.')], HRESULT, 'AbbreviateLabels',
              ( ['in'], VARIANT_BOOL, 'abbrev' )),
    COMMETHOD(['propget', helpstring(u'The font size used to display the minutes.')], HRESULT, 'MinutesFontSize',
              ( ['retval', 'out'], POINTER(c_double), 'Size' )),
    COMMETHOD(['propput', helpstring(u'The font size used to display the minutes.')], HRESULT, 'MinutesFontSize',
              ( ['in'], c_double, 'Size' )),
    COMMETHOD(['propget', helpstring(u'The font size used to display the seconds.')], HRESULT, 'SecondsFontSize',
              ( ['retval', 'out'], POINTER(c_double), 'Size' )),
    COMMETHOD(['propput', helpstring(u'The font size used to display the seconds.')], HRESULT, 'SecondsFontSize',
              ( ['in'], c_double, 'Size' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the DMS labels should show the minus sign (if format is not showing direction).')], HRESULT, 'ShowMinusSign',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'showMinus' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the DMS labels should show the minus sign (if format is not showing direction).')], HRESULT, 'ShowMinusSign',
              ( ['in'], VARIANT_BOOL, 'showMinus' )),
]
################################################################
## code template for IDMSGridLabel3 implementation
##class IDMSGridLabel3_Impl(object):
##    def _get(self):
##        u'The type of the DMS grid label.'
##        #return LabelType
##    def _set(self, LabelType):
##        u'The type of the DMS grid label.'
##    LabelType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the DMS labels should be abbreviated when the value is not a whole degree.'
##        #return abbrev
##    def _set(self, abbrev):
##        u'Indicates if the DMS labels should be abbreviated when the value is not a whole degree.'
##    AbbreviateLabels = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the DMS labels should show the minus sign (if format is not showing direction).'
##        #return showMinus
##    def _set(self, showMinus):
##        u'Indicates if the DMS labels should show the minus sign (if format is not showing direction).'
##    ShowMinusSign = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The color used to display the seconds.'
##        #return Color
##    def _set(self, Color):
##        u'The color used to display the seconds.'
##    SecondsColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The font used to display the minutes.'
##        #return Font
##    def _set(self, Font):
##        u'The font used to display the minutes.'
##    MinutesFont = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The color used to display the minutes.'
##        #return Color
##    def _set(self, Color):
##        u'The color used to display the minutes.'
##    MinutesColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if zero seconds are shown.'
##        #return Show
##    def _set(self, Show):
##        u'Indicates if zero seconds are shown.'
##    ShowZeroSeconds = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The format with which the latitudes and longitudes are displayed.'
##        #return Format
##    def _set(self, Format):
##        u'The format with which the latitudes and longitudes are displayed.'
##    LatLonFormat = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The font size used to display the minutes.'
##        #return Size
##    def _set(self, Size):
##        u'The font size used to display the minutes.'
##    MinutesFontSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The font used to display the seconds.'
##        #return Font
##    def _set(self, Font):
##        u'The font used to display the seconds.'
##    SecondsFont = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if zero minutes are shown.'
##        #return Show
##    def _set(self, Show):
##        u'Indicates if zero minutes are shown.'
##    ShowZeroMinutes = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The font size used to display the seconds.'
##        #return Size
##    def _set(self, Size):
##        u'The font size used to display the seconds.'
##    SecondsFontSize = property(_get, _set, doc = _set.__doc__)
##

class IImageServerObjectLANProxy(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control ImageServer LAN proxy.'
    _iid_ = GUID('{9D7C52D5-E5F1-41DF-AFED-570B42B11989}')
    _idlflags_ = []
IImageServerObjectLANProxy._methods_ = [
    COMMETHOD(['propget', helpstring(u'The AIS Service URL.')], HRESULT, 'ServiceURL',
              ( ['retval', 'out'], POINTER(BSTR), 'pServiceURL' )),
    COMMETHOD([helpstring(u'Initializes using a private server.')], HRESULT, 'Init',
              ( ['in'], VARIANT_BOOL, 'isPooled' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], POINTER(comtypes.gen._18F2FC71_6B30_45B9_B101_037A8B868B66_0_10_2.IServer), 'pServer' ),
              ( ['in'], BSTR, 'namespace2Use' )),
]
################################################################
## code template for IImageServerObjectLANProxy implementation
##class IImageServerObjectLANProxy_Impl(object):
##    def Init(self, isPooled, Name, pServer, namespace2Use):
##        u'Initializes using a private server.'
##        #return 
##
##    @property
##    def ServiceURL(self):
##        u'The AIS Service URL.'
##        #return pServiceURL
##

IMapInset._methods_ = [
    COMMETHOD(['propget', helpstring(u'The relative position of the inset to the associated map (used when the inset is live). The zoom amount is applied to this rectangle to determine the visible bounds that is actually drawn.')], HRESULT, 'MapBounds',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'Bounds' )),
    COMMETHOD(['propput', helpstring(u'The relative position of the inset to the associated map (used when the inset is live). The zoom amount is applied to this rectangle to determine the visible bounds that is actually drawn.')], HRESULT, 'MapBounds',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'Bounds' )),
    COMMETHOD(['propget', helpstring(u'The map extent shown by the inset (used when the inset is not live).')], HRESULT, 'VisibleBounds',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'VisibleBounds' )),
    COMMETHOD(['propput', helpstring(u'The map extent shown by the inset (used when the inset is not live).')], HRESULT, 'VisibleBounds',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'VisibleBounds' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the inset shows a live view of the underlying map.  False means a snapshot of the underlying map is taken at the time the flag is changed.')], HRESULT, 'IsLive',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsLive' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the inset shows a live view of the underlying map.  False means a snapshot of the underlying map is taken at the time the flag is changed.')], HRESULT, 'IsLive',
              ( ['in'], VARIANT_BOOL, 'IsLive' )),
    COMMETHOD(['propget', helpstring(u'Indicates if ZoomScale or ZoomPercent is being used.  The one specified last is being used.')], HRESULT, 'UsingZoomScale',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'UsingZoomScale' )),
    COMMETHOD(['propget', helpstring(u'Zoom amount as a percentage.  100 means show the underlying map at normal size.')], HRESULT, 'ZoomPercent',
              ( ['retval', 'out'], POINTER(c_double), 'percent' )),
    COMMETHOD(['propput', helpstring(u'Zoom amount as a percentage.  100 means show the underlying map at normal size.')], HRESULT, 'ZoomPercent',
              ( ['in'], c_double, 'percent' )),
    COMMETHOD(['propget', helpstring(u'The zoom amount as an absolute Scale (i.e., 1:20000).')], HRESULT, 'ZoomScale',
              ( ['retval', 'out'], POINTER(c_double), 'Scale' )),
    COMMETHOD(['propput', helpstring(u'The zoom amount as an absolute Scale (i.e., 1:20000).')], HRESULT, 'ZoomScale',
              ( ['in'], c_double, 'Scale' )),
    COMMETHOD(['propget', helpstring(u'Description reflecting the current settings of the MapInset.')], HRESULT, 'Description',
              ( ['retval', 'out'], POINTER(BSTR), 'Title' )),
    COMMETHOD([helpstring(u'Calculates the visible bounds by applying the zoom or scale parameter to MapBounds (used when snapshot is false).')], HRESULT, 'CalculateVisibleBounds'),
]
################################################################
## code template for IMapInset implementation
##class IMapInset_Impl(object):
##    @property
##    def UsingZoomScale(self):
##        u'Indicates if ZoomScale or ZoomPercent is being used.  The one specified last is being used.'
##        #return UsingZoomScale
##
##    def _get(self):
##        u'The relative position of the inset to the associated map (used when the inset is live). The zoom amount is applied to this rectangle to determine the visible bounds that is actually drawn.'
##        #return Bounds
##    def _set(self, Bounds):
##        u'The relative position of the inset to the associated map (used when the inset is live). The zoom amount is applied to this rectangle to determine the visible bounds that is actually drawn.'
##    MapBounds = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Description(self):
##        u'Description reflecting the current settings of the MapInset.'
##        #return Title
##
##    def _get(self):
##        u'The zoom amount as an absolute Scale (i.e., 1:20000).'
##        #return Scale
##    def _set(self, Scale):
##        u'The zoom amount as an absolute Scale (i.e., 1:20000).'
##    ZoomScale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Zoom amount as a percentage.  100 means show the underlying map at normal size.'
##        #return percent
##    def _set(self, percent):
##        u'Zoom amount as a percentage.  100 means show the underlying map at normal size.'
##    ZoomPercent = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the inset shows a live view of the underlying map.  False means a snapshot of the underlying map is taken at the time the flag is changed.'
##        #return IsLive
##    def _set(self, IsLive):
##        u'Indicates if the inset shows a live view of the underlying map.  False means a snapshot of the underlying map is taken at the time the flag is changed.'
##    IsLive = property(_get, _set, doc = _set.__doc__)
##
##    def CalculateVisibleBounds(self):
##        u'Calculates the visible bounds by applying the zoom or scale parameter to MapBounds (used when snapshot is false).'
##        #return 
##
##    def _get(self):
##        u'The map extent shown by the inset (used when the inset is not live).'
##        #return VisibleBounds
##    def _set(self, VisibleBounds):
##        u'The map extent shown by the inset (used when the inset is not live).'
##    VisibleBounds = property(_get, _set, doc = _set.__doc__)
##

class IScaleText2(IMapSurround):
    _case_insensitive_ = True
    u'Provides access to members that control the scale text.'
    _iid_ = GUID('{A2FE2D0C-BD0E-452F-B903-C6A80FFC94E6}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'esriScaleTextStyleEnum'
esriScaleTextAbsolute = 0
esriScaleTextRelative = 1
esriScaleTextCustom = 2
esriScaleTextStyleEnum = c_int # enum
IScaleText2._methods_ = [
    COMMETHOD(['propget', helpstring(u'The scale text.')], HRESULT, 'Text',
              ( ['retval', 'out'], POINTER(BSTR), 'Text' )),
    COMMETHOD(['propput', helpstring(u'Symbol of the scale text.')], HRESULT, 'Symbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'Symbol of the scale text.')], HRESULT, 'Symbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol)), 'Symbol' )),
    COMMETHOD(['propput', helpstring(u'Style of the scale text.')], HRESULT, 'Style',
              ( ['in'], esriScaleTextStyleEnum, 'Style' )),
    COMMETHOD(['propget', helpstring(u'Style of the scale text.')], HRESULT, 'Style',
              ( ['retval', 'out'], POINTER(esriScaleTextStyleEnum), 'Style' )),
    COMMETHOD(['propput', helpstring(u'Format of the scale text. Style must be set to custom.')], HRESULT, 'Format',
              ( ['in'], BSTR, 'Format' )),
    COMMETHOD(['propget', helpstring(u'Format of the scale text. Style must be set to custom.')], HRESULT, 'Format',
              ( ['retval', 'out'], POINTER(BSTR), 'Format' )),
    COMMETHOD(['propput', helpstring(u'Page units of the scale text. Style must be set to custom.')], HRESULT, 'PageUnits',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits, 'Units' )),
    COMMETHOD(['propget', helpstring(u'Page units of the scale text. Style must be set to custom.')], HRESULT, 'PageUnits',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits), 'Units' )),
    COMMETHOD(['propput', helpstring(u'Map units of the scale text. Style must be set to custom.')], HRESULT, 'MapUnits',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits, 'Units' )),
    COMMETHOD(['propget', helpstring(u'Map units of the scale text. Style must be set to custom.')], HRESULT, 'MapUnits',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits), 'Units' )),
    COMMETHOD(['propput', helpstring(u'Page unit label of the scale text. Style must be set to relative.')], HRESULT, 'PageUnitLabel',
              ( ['in'], BSTR, 'Label' )),
    COMMETHOD(['propget', helpstring(u'Page unit label of the scale text. Style must be set to relative.')], HRESULT, 'PageUnitLabel',
              ( ['retval', 'out'], POINTER(BSTR), 'Label' )),
    COMMETHOD(['propput', helpstring(u'Map unit label of the scale text. Style must be set to relative.')], HRESULT, 'MapUnitLabel',
              ( ['in'], BSTR, 'Label' )),
    COMMETHOD(['propget', helpstring(u'Map unit label of the scale text. Style must be set to relative.')], HRESULT, 'MapUnitLabel',
              ( ['retval', 'out'], POINTER(BSTR), 'Label' )),
    COMMETHOD(['propput', helpstring(u'Number formatting.')], HRESULT, 'NumberFormat',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.INumberFormat), 'Format' )),
    COMMETHOD(['propget', helpstring(u'Number formatting.')], HRESULT, 'NumberFormat',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.INumberFormat)), 'Format' )),
    COMMETHOD(['propput', helpstring(u"Character(s) used to separate '1' from the scale in an absolute scale, i.e., the ':' in 1:20000.  Also used for 'equals' in relative scale texts.")], HRESULT, 'Separator',
              ( ['in'], BSTR, 'Separator' )),
    COMMETHOD(['propget', helpstring(u"Character(s) used to separate '1' from the scale in an absolute scale, i.e., the ':' in 1:20000.  Also used for 'equals' in relative scale texts.")], HRESULT, 'Separator',
              ( ['retval', 'out'], POINTER(BSTR), 'Separator' )),
]
################################################################
## code template for IScaleText2 implementation
##class IScaleText2_Impl(object):
##    def _get(self):
##        u'Style of the scale text.'
##        #return Style
##    def _set(self, Style):
##        u'Style of the scale text.'
##    Style = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Number formatting.'
##        #return Format
##    def _set(self, Format):
##        u'Number formatting.'
##    NumberFormat = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Format of the scale text. Style must be set to custom.'
##        #return Format
##    def _set(self, Format):
##        u'Format of the scale text. Style must be set to custom.'
##    Format = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Text(self):
##        u'The scale text.'
##        #return Text
##
##    def _get(self):
##        u'Symbol of the scale text.'
##        #return Symbol
##    def _set(self, Symbol):
##        u'Symbol of the scale text.'
##    Symbol = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Map units of the scale text. Style must be set to custom.'
##        #return Units
##    def _set(self, Units):
##        u'Map units of the scale text. Style must be set to custom.'
##    MapUnits = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u"Character(s) used to separate '1' from the scale in an absolute scale, i.e., the ':' in 1:20000.  Also used for 'equals' in relative scale texts."
##        #return Separator
##    def _set(self, Separator):
##        u"Character(s) used to separate '1' from the scale in an absolute scale, i.e., the ':' in 1:20000.  Also used for 'equals' in relative scale texts."
##    Separator = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Map unit label of the scale text. Style must be set to relative.'
##        #return Label
##    def _set(self, Label):
##        u'Map unit label of the scale text. Style must be set to relative.'
##    MapUnitLabel = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Page units of the scale text. Style must be set to custom.'
##        #return Units
##    def _set(self, Units):
##        u'Page units of the scale text. Style must be set to custom.'
##    PageUnits = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Page unit label of the scale text. Style must be set to relative.'
##        #return Label
##    def _set(self, Label):
##        u'Page unit label of the scale text. Style must be set to relative.'
##    PageUnitLabel = property(_get, _set, doc = _set.__doc__)
##

class ITiledMapServer3(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that serve tiled maps.'
    _iid_ = GUID('{6C3D86D9-E02D-403F-94C2-427C5CF78C19}')
    _idlflags_ = ['oleautomation']
class ICacheStorageInfo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that provides cache storage info.'
    _iid_ = GUID('{EB364386-BE9E-4FF0-B4EB-1033467A5287}')
    _idlflags_ = ['oleautomation']
ITiledMapServer3._methods_ = [
    COMMETHOD([helpstring(u'Gets the cache storage information.')], HRESULT, 'GetCacheStorageInfo',
              ( ['in'], BSTR, 'MapName' ),
              ( ['retval', 'out'], POINTER(POINTER(ICacheStorageInfo)), 'ppCacheStorageInfo' )),
]
################################################################
## code template for ITiledMapServer3 implementation
##class ITiledMapServer3_Impl(object):
##    def GetCacheStorageInfo(self, MapName):
##        u'Gets the cache storage information.'
##        #return ppCacheStorageInfo
##

IServiceData._methods_ = [
    COMMETHOD(['propget', helpstring(u'Binary data representing result.')], HRESULT, 'EmbeddedData',
              ( ['retval', 'out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'Data' )),
    COMMETHOD(['propget', helpstring(u'Not modified boolean.')], HRESULT, 'NotModified',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'NotModified' )),
    COMMETHOD(['propget', helpstring(u'Object in native format.')], HRESULT, 'Object',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'objectUnknown' )),
    COMMETHOD(['propget', helpstring(u'Response ETag.')], HRESULT, 'ResponseETag',
              ( ['retval', 'out'], POINTER(BSTR), 'ResponseETag' )),
    COMMETHOD(['propget', helpstring(u'Service Data Options')], HRESULT, 'ServiceDataOptions',
              ( ['retval', 'out'], POINTER(POINTER(IServiceDataOptions)), 'ServiceDataOptions' )),
    COMMETHOD(['propget', helpstring(u"Result location's uri.")], HRESULT, 'URI',
              ( ['retval', 'out'], POINTER(BSTR), 'URI' )),
]
################################################################
## code template for IServiceData implementation
##class IServiceData_Impl(object):
##    @property
##    def ResponseETag(self):
##        u'Response ETag.'
##        #return ResponseETag
##
##    @property
##    def Object(self):
##        u'Object in native format.'
##        #return objectUnknown
##
##    @property
##    def URI(self):
##        u"Result location's uri."
##        #return URI
##
##    @property
##    def NotModified(self):
##        u'Not modified boolean.'
##        #return NotModified
##
##    @property
##    def EmbeddedData(self):
##        u'Binary data representing result.'
##        #return Data
##
##    @property
##    def ServiceDataOptions(self):
##        u'Service Data Options'
##        #return ServiceDataOptions
##

class AnnotationFeatureClassDescription(CoClass):
    u'An Esri annotation feature class description.'
    _reg_clsid_ = GUID('{9089ABBB-12A7-11D3-9FA1-00C04F6BC626}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
AnnotationFeatureClassDescription._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IObjectClassDescription, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClassDescription]

class IIndexGridTabStyle(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u"Provides access to members that control the way an index grid's labels are drawn."
    _iid_ = GUID('{CE41C50A-9DF9-11D2-AADE-000000000000}')
    _idlflags_ = ['oleautomation']
IIndexGridTabStyle._methods_ = [
    COMMETHOD(['propget', helpstring(u'The foreground color of the tab.')], HRESULT, 'ForegroundColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'The foreground color of the tab.')], HRESULT, 'ForegroundColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'The outline color of the tab.')], HRESULT, 'OutlineColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'The outline color of the tab.')], HRESULT, 'OutlineColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'The thickness of the tab in points.')], HRESULT, 'Thickness',
              ( ['retval', 'out'], POINTER(c_double), 'thicknessPts' )),
    COMMETHOD(['propput', helpstring(u'The thickness of the tab in points.')], HRESULT, 'Thickness',
              ( ['in'], c_double, 'thicknessPts' )),
    COMMETHOD([helpstring(u'Sets up the tab for drawing.')], HRESULT, 'PrepareDraw',
              ( ['in'], BSTR, 'LabelValue' ),
              ( ['in'], c_double, 'tabWidthPage' ),
              ( ['in'], esriGridAxisEnum, 'axis' )),
]
################################################################
## code template for IIndexGridTabStyle implementation
##class IIndexGridTabStyle_Impl(object):
##    def PrepareDraw(self, LabelValue, tabWidthPage, axis):
##        u'Sets up the tab for drawing.'
##        #return 
##
##    def _get(self):
##        u'The foreground color of the tab.'
##        #return Color
##    def _set(self, Color):
##        u'The foreground color of the tab.'
##    ForegroundColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The thickness of the tab in points.'
##        #return thicknessPts
##    def _set(self, thicknessPts):
##        u'The thickness of the tab in points.'
##    Thickness = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The outline color of the tab.'
##        #return Color
##    def _set(self, Color):
##        u'The outline color of the tab.'
##    OutlineColor = property(_get, _set, doc = _set.__doc__)
##

class IImageServerProxyImpl(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to implementation of image server proxy object.'
    _iid_ = GUID('{C050F7CC-621D-4CAD-B6B6-8FA3A40260DF}')
    _idlflags_ = []
IImageServerProxyImpl._methods_ = [
    COMMETHOD([helpstring(u'Gets a tile for a given tile location; returns expiration date/time, if available; also, returns possible reason why tile fetching has failed.')], HRESULT, 'GetImageTileEx',
              ( ['in'], c_int, 'Level' ),
              ( ['in'], c_int, 'Row' ),
              ( ['in'], c_int, 'Column' ),
              ( ['in'], c_int, 'CacheFormat' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'ppData' ),
              ( ['out'], POINTER(c_double), 'pExpiryDateTime' ),
              ( ['out'], POINTER(comtypes.gen._8F0541A3_D5BE_4B3F_A8D9_062D5579E19B_0_10_2.esriTileState), 'pTileState' )),
]
################################################################
## code template for IImageServerProxyImpl implementation
##class IImageServerProxyImpl_Impl(object):
##    def GetImageTileEx(self, Level, Row, Column, CacheFormat):
##        u'Gets a tile for a given tile location; returns expiration date/time, if available; also, returns possible reason why tile fetching has failed.'
##        #return ppData, pExpiryDateTime, pTileState
##

class ICad3DRenderMode(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the Render Mode type for Cad drawing.'
    _iid_ = GUID('{475F9178-7E05-11D4-A1D1-444553547777}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'esriCad3DRenderMode'
esriCad3DRenderWireFrame = 0
esriCad3DRenderFlatFilled = 1
esriCad3DRenderHiddenLine = 2
esriCad3DRenderFlatShaded = 3
esriCad3DRenderGouraudShaded = 4
esriCad3DRenderMode = c_int # enum
ICad3DRenderMode._methods_ = [
    COMMETHOD(['propget', helpstring(u'Render mode type for Cad drawing.')], HRESULT, 'Cad3DRenderMode',
              ( ['retval', 'out'], POINTER(esriCad3DRenderMode), 'mode' )),
    COMMETHOD(['propput', helpstring(u'Render mode type for Cad drawing.')], HRESULT, 'Cad3DRenderMode',
              ( ['in'], esriCad3DRenderMode, 'mode' )),
]
################################################################
## code template for ICad3DRenderMode implementation
##class ICad3DRenderMode_Impl(object):
##    def _get(self):
##        u'Render mode type for Cad drawing.'
##        #return mode
##    def _set(self, mode):
##        u'Render mode type for Cad drawing.'
##    Cad3DRenderMode = property(_get, _set, doc = _set.__doc__)
##

class MultithreadedCommander(CoClass):
    u'A multithreaded image processor (commander).'
    _reg_clsid_ = GUID('{2656E528-9246-44E7-9FD4-C2AE1BC748D4}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
MultithreadedCommander._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown]

class IGridLadderLabels(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the ladder label properties of a grid.'
    _iid_ = GUID('{8941E7DE-7345-4366-9FAC-108F1A685427}')
    _idlflags_ = ['oleautomation']
IGridLadderLabels._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if ladder labels should be displayed.')], HRESULT, 'ShowLadderLabels',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Show' )),
    COMMETHOD(['propput', helpstring(u'Indicates if ladder labels should be displayed.')], HRESULT, 'ShowLadderLabels',
              ( ['in'], VARIANT_BOOL, 'Show' )),
    COMMETHOD(['propget', helpstring(u'The fonst used to display ladder labels.')], HRESULT, 'LadderLabelFont',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IFontDisp)), 'Font' )),
    COMMETHOD(['propput', helpstring(u'The fonst used to display ladder labels.')], HRESULT, 'LadderLabelFont',
              ( ['in'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IFontDisp), 'Font' )),
    COMMETHOD(['propget', helpstring(u'The font size used to display ladder labels.')], HRESULT, 'LadderLabelSize',
              ( ['retval', 'out'], POINTER(c_double), 'Size' )),
    COMMETHOD(['propput', helpstring(u'The font size used to display ladder labels.')], HRESULT, 'LadderLabelSize',
              ( ['in'], c_double, 'Size' )),
    COMMETHOD(['propget', helpstring(u'The color of the ladder labels.')], HRESULT, 'LadderLabelColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'The color of the ladder labels.')], HRESULT, 'LadderLabelColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'The number of ladder label rows.')], HRESULT, 'LadderLabelRowCount',
              ( ['retval', 'out'], POINTER(c_int), 'RowCount' )),
    COMMETHOD(['propput', helpstring(u'The number of ladder label rows.')], HRESULT, 'LadderLabelRowCount',
              ( ['in'], c_int, 'RowCount' )),
    COMMETHOD(['propget', helpstring(u'The number of ladder label columns.')], HRESULT, 'LadderLabelColumnCount',
              ( ['retval', 'out'], POINTER(c_int), 'ColumnCount' )),
    COMMETHOD(['propput', helpstring(u'The number of ladder label columns.')], HRESULT, 'LadderLabelColumnCount',
              ( ['in'], c_int, 'ColumnCount' )),
    COMMETHOD(['propget', helpstring(u'Indicates if only the outer ladder labels should be shown.')], HRESULT, 'ShowOuterLabelsOnly',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Show' )),
    COMMETHOD(['propput', helpstring(u'Indicates if only the outer ladder labels should be shown.')], HRESULT, 'ShowOuterLabelsOnly',
              ( ['in'], VARIANT_BOOL, 'Show' )),
]
################################################################
## code template for IGridLadderLabels implementation
##class IGridLadderLabels_Impl(object):
##    def _get(self):
##        u'Indicates if only the outer ladder labels should be shown.'
##        #return Show
##    def _set(self, Show):
##        u'Indicates if only the outer ladder labels should be shown.'
##    ShowOuterLabelsOnly = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The number of ladder label columns.'
##        #return ColumnCount
##    def _set(self, ColumnCount):
##        u'The number of ladder label columns.'
##    LadderLabelColumnCount = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The font size used to display ladder labels.'
##        #return Size
##    def _set(self, Size):
##        u'The font size used to display ladder labels.'
##    LadderLabelSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The color of the ladder labels.'
##        #return Color
##    def _set(self, Color):
##        u'The color of the ladder labels.'
##    LadderLabelColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The number of ladder label rows.'
##        #return RowCount
##    def _set(self, RowCount):
##        u'The number of ladder label rows.'
##    LadderLabelRowCount = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The fonst used to display ladder labels.'
##        #return Font
##    def _set(self, Font):
##        u'The fonst used to display ladder labels.'
##    LadderLabelFont = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if ladder labels should be displayed.'
##        #return Show
##    def _set(self, Show):
##        u'Indicates if ladder labels should be displayed.'
##    ShowLadderLabels = property(_get, _set, doc = _set.__doc__)
##

class ITileDescription(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the TileDescription.'
    _iid_ = GUID('{492ADDB4-AE87-464A-AB78-9812CFC8D37F}')
    _idlflags_ = []

# values for enumeration 'esriImageFormat'
esriImageNone = -1
esriImageBMP = 0
esriImageJPG = 1
esriImageDIB = 2
esriImageTIFF = 3
esriImagePNG = 4
esriImagePNG24 = 5
esriImageEMF = 6
esriImagePS = 7
esriImagePDF = 8
esriImageAI = 9
esriImageGIF = 10
esriImageSVG = 11
esriImageSVGZ = 12
esriImagePNG32 = 13
esriImageJPGPNG = 14
esriImageOptimalPNG = 15
esriImageFormat = c_int # enum
ITileDescription._methods_ = [
    COMMETHOD(['propget', helpstring(u'Tile width in pixels.')], HRESULT, 'TileWidth',
              ( ['retval', 'out'], POINTER(c_int), 'Width' )),
    COMMETHOD(['propput', helpstring(u'Tile width in pixels.')], HRESULT, 'TileWidth',
              ( [], c_int, 'Width' )),
    COMMETHOD(['propget', helpstring(u'Tile height in pixels.')], HRESULT, 'TileHeight',
              ( ['retval', 'out'], POINTER(c_int), 'Height' )),
    COMMETHOD(['propput', helpstring(u'Tile height in pixels.')], HRESULT, 'TileHeight',
              ( ['in'], c_int, 'Height' )),
    COMMETHOD(['propget', helpstring(u'Sub tile count in x direction.')], HRESULT, 'TileCountX',
              ( ['retval', 'out'], POINTER(c_int), 'tileCount' )),
    COMMETHOD(['propput', helpstring(u'Sub tile count in x direction.')], HRESULT, 'TileCountX',
              ( ['in'], c_int, 'tileCount' )),
    COMMETHOD(['propget', helpstring(u'Tile count in y direction.')], HRESULT, 'TileCountY',
              ( ['retval', 'out'], POINTER(c_int), 'tileCount' )),
    COMMETHOD(['propput', helpstring(u'Tile count in y direction.')], HRESULT, 'TileCountY',
              ( ['in'], c_int, 'tileCount' )),
    COMMETHOD(['propget', helpstring(u'DPI to perform output with.')], HRESULT, 'Dpi',
              ( ['retval', 'out'], POINTER(c_double), 'Dpi' )),
    COMMETHOD(['propput', helpstring(u'DPI to perform output with.')], HRESULT, 'Dpi',
              ( ['in'], c_double, 'Dpi' )),
    COMMETHOD(['propget', helpstring(u'Image format for the tile.')], HRESULT, 'ImageFormat',
              ( ['retval', 'out'], POINTER(esriImageFormat), 'ImageFormat' )),
    COMMETHOD(['propput', helpstring(u'Image format for the tile.')], HRESULT, 'ImageFormat',
              ( ['in'], esriImageFormat, 'ImageFormat' )),
    COMMETHOD(['propget', helpstring(u'Quality for image formats.')], HRESULT, 'Quality',
              ( ['retval', 'out'], POINTER(c_short), 'Quality' )),
    COMMETHOD(['propput', helpstring(u'Quality for image formats.')], HRESULT, 'Quality',
              ( ['in'], c_short, 'Quality' )),
]
################################################################
## code template for ITileDescription implementation
##class ITileDescription_Impl(object):
##    def _get(self):
##        u'Tile height in pixels.'
##        #return Height
##    def _set(self, Height):
##        u'Tile height in pixels.'
##    TileHeight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Tile width in pixels.'
##        #return Width
##    def _set(self, Width):
##        u'Tile width in pixels.'
##    TileWidth = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Image format for the tile.'
##        #return ImageFormat
##    def _set(self, ImageFormat):
##        u'Image format for the tile.'
##    ImageFormat = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Tile count in y direction.'
##        #return tileCount
##    def _set(self, tileCount):
##        u'Tile count in y direction.'
##    TileCountY = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Sub tile count in x direction.'
##        #return tileCount
##    def _set(self, tileCount):
##        u'Sub tile count in x direction.'
##    TileCountX = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Quality for image formats.'
##        #return Quality
##    def _set(self, Quality):
##        u'Quality for image formats.'
##    Quality = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'DPI to perform output with.'
##        #return Dpi
##    def _set(self, Dpi):
##        u'DPI to perform output with.'
##    Dpi = property(_get, _set, doc = _set.__doc__)
##

class IMaplexDictionary(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a Maplex dictionary.'
    _iid_ = GUID('{20664808-0A3A-1EAC-91D3-F3EF422A61A5}')
    _idlflags_ = ['oleautomation']
class IMaplexDictionaryEntry(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a single entry in a Maplex dictionary.'
    _iid_ = GUID('{20664808-0AC0-1EA9-9DD3-FAA1142A71F2}')
    _idlflags_ = ['oleautomation']
IMaplexDictionary._methods_ = [
    COMMETHOD(['propget', helpstring(u'The name of the dictionary.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'The name of the dictionary.')], HRESULT, 'Name',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'The number of entries in the dictionary.')], HRESULT, 'EntryCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD([helpstring(u'Adds an entry to the dictionary.')], HRESULT, 'AddEntry',
              ( ['in'], POINTER(IMaplexDictionaryEntry), 'dicEntry' )),
    COMMETHOD([helpstring(u'Gets an entry from the dictionary.')], HRESULT, 'GetEntry',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IMaplexDictionaryEntry)), 'dicEntry' )),
    COMMETHOD([helpstring(u'Removes all entries from the dictionary.')], HRESULT, 'Clear'),
]
################################################################
## code template for IMaplexDictionary implementation
##class IMaplexDictionary_Impl(object):
##    def GetEntry(self, Index):
##        u'Gets an entry from the dictionary.'
##        #return dicEntry
##
##    def Clear(self):
##        u'Removes all entries from the dictionary.'
##        #return 
##
##    @property
##    def EntryCount(self):
##        u'The number of entries in the dictionary.'
##        #return Count
##
##    def _get(self):
##        u'The name of the dictionary.'
##        #return Name
##    def _set(self, Name):
##        u'The name of the dictionary.'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def AddEntry(self, dicEntry):
##        u'Adds an entry to the dictionary.'
##        #return 
##

class DummyGraduatedMarkerLayer(CoClass):
    u'A dummy layer used to display legend items in the style gallery (Singleton).'
    _reg_clsid_ = GUID('{238CCD1A-7FBC-11D2-87DC-0000F8751720}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
DummyGraduatedMarkerLayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILayer, ILegendInfo]


# values for enumeration 'annoError'
ANNO_E_UNSUPPORTED_VERSION = -2147220991
ANNO_E_NULL_NOT_SUPPORTED = -2147220990
ANNO_E_FONT_NOT_FOUND = -2147220989
ANNO_E_INVALID_FONT_SIZE = -2147220988
ANNO_E_INVALID_ANGLE = -2147220987
ANNO_E_NO_SYM_OVERRIDE = -2147220986
ANNO_E_INVALID_SYM_ID = -2147220985
annoError = c_int # enum
class MarginSnap(CoClass):
    u'Snap to margins agent.'
    _reg_clsid_ = GUID('{FC27FAB2-DB88-11D1-8778-0000F8751720}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IGraphicSnap(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control snapping graphics.'
    _iid_ = GUID('{56FD87F5-DDCE-11D1-8778-0000F8751720}')
    _idlflags_ = ['oleautomation']
class IPageLayoutSnap(IGraphicSnap):
    _case_insensitive_ = True
    u'Provides access to members that control snap agents that are used with PageLayout.'
    _iid_ = GUID('{FC27FAAF-DB88-11D1-8778-0000F8751720}')
    _idlflags_ = ['oleautomation']
MarginSnap._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IPageLayoutSnap, IGraphicSnap, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

class DummyLayer(CoClass):
    u'A dummy layer used to display legend items in the style gallery (Singleton).'
    _reg_clsid_ = GUID('{238CCD19-7FBC-11D2-87DC-0000F8751720}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
DummyLayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILayer, ILegendInfo]

class LayerEventsHelper(CoClass):
    _reg_clsid_ = GUID('{D9AF98BD-916F-11D3-9F50-00C04F6BC979}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
LayerEventsHelper._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown]
LayerEventsHelper._outgoing_interfaces_ = [ILayerEvents]

class IBarrierCollection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a collection of objects that act as barriers to label placement.'
    _iid_ = GUID('{01C12B92-A3FB-11D2-A2FE-080009B6F22B}')
    _idlflags_ = ['oleautomation']
IBarrierCollection._methods_ = [
    COMMETHOD([helpstring(u'Adds the specified item to the collection.')], HRESULT, 'Add',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometryCollection), 'Barriers' ),
              ( ['in'], esriBasicOverposterWeight, 'Weight' )),
    COMMETHOD(['propget', helpstring(u'The number of items in the collection.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD([helpstring(u'Returns the item in the collection at the specified index.')], HRESULT, 'QueryItem',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometryCollection)), 'barrier' ),
              ( ['out', 'optional'], POINTER(esriBasicOverposterWeight), 'Weight', 0 )),
    COMMETHOD([helpstring(u'Removes all the items in the collection.')], HRESULT, 'Clear'),
]
################################################################
## code template for IBarrierCollection implementation
##class IBarrierCollection_Impl(object):
##    @property
##    def Count(self):
##        u'The number of items in the collection.'
##        #return Count
##
##    def QueryItem(self, Index):
##        u'Returns the item in the collection at the specified index.'
##        #return barrier, Weight
##
##    def Add(self, Barriers, Weight):
##        u'Adds the specified item to the collection.'
##        #return 
##
##    def Clear(self):
##        u'Removes all the items in the collection.'
##        #return 
##

class IMapServerBookmark(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Map Server Bookmark Interface.'
    _iid_ = GUID('{D1E87C49-0BFB-41C3-A646-DB0A99BC3EB8}')
    _idlflags_ = ['oleautomation']
IMapServerBookmark._methods_ = [
    COMMETHOD(['propget', helpstring(u'Name of the bookmark.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
]
################################################################
## code template for IMapServerBookmark implementation
##class IMapServerBookmark_Impl(object):
##    @property
##    def Name(self):
##        u'Name of the bookmark.'
##        #return Name
##

class LayerFactoryHelper(CoClass):
    u'Helper class to create layers from names.'
    _reg_clsid_ = GUID('{CC527851-CEE4-11D5-A9E6-00104BB6FC1C}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class ILayerFactoryHelper(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members used to create layers from names.'
    _iid_ = GUID('{CC527850-CEE4-11D5-A9E6-00104BB6FC1C}')
    _idlflags_ = ['oleautomation']
LayerFactoryHelper._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILayerFactoryHelper]

class IRasterClassifyColorRampRenderer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that relate to the classified rendering of rasters.'
    _iid_ = GUID('{4DE26F22-A01F-11D2-AAE7-00C04FA33416}')
    _idlflags_ = ['oleautomation']
IRasterClassifyColorRampRenderer._methods_ = [
    COMMETHOD(['propget', helpstring(u'Field this renderer is using.')], HRESULT, 'ClassField',
              ( ['retval', 'out'], POINTER(BSTR), 'Field' )),
    COMMETHOD(['propput', helpstring(u'Field this renderer is using.')], HRESULT, 'ClassField',
              ( ['in'], BSTR, 'Field' )),
    COMMETHOD(['propget', helpstring(u'Normalization field this renderer is using.')], HRESULT, 'NormField',
              ( ['retval', 'out'], POINTER(BSTR), 'Field' )),
    COMMETHOD(['propput', helpstring(u'Normalization field this renderer is using.')], HRESULT, 'NormField',
              ( ['in'], BSTR, 'Field' )),
    COMMETHOD(['propget', helpstring(u'Number of classes.')], HRESULT, 'ClassCount',
              ( ['retval', 'out'], POINTER(c_int), 'Value' )),
    COMMETHOD(['propput', helpstring(u'Number of classes.')], HRESULT, 'ClassCount',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD(['propget', helpstring(u'Break at the index.')], HRESULT, 'Break',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(c_double), 'Value' )),
    COMMETHOD(['propput', helpstring(u'Break at the index.')], HRESULT, 'Break',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_double, 'Value' )),
    COMMETHOD(['propget', helpstring(u'Symbol representing the class at the index.')], HRESULT, 'Symbol',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol)), 'Symbol' )),
    COMMETHOD(['propput', helpstring(u'Symbol representing the class at the index.')], HRESULT, 'Symbol',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'Label for the class at the given index.')], HRESULT, 'Label',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Label' )),
    COMMETHOD(['propput', helpstring(u'Label for the class at the given index.')], HRESULT, 'Label',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Label' )),
    COMMETHOD(['propget', helpstring(u'Description for the class at the given index.')], HRESULT, 'Description',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Description' )),
    COMMETHOD(['propput', helpstring(u'Description for the class at the given index.')], HRESULT, 'Description',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Description' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the sort direction for the class labels is ascending.')], HRESULT, 'SortClassesAscending',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Ascending' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the sort direction for the class labels is ascending.')], HRESULT, 'SortClassesAscending',
              ( ['in'], VARIANT_BOOL, 'Ascending' )),
]
################################################################
## code template for IRasterClassifyColorRampRenderer implementation
##class IRasterClassifyColorRampRenderer_Impl(object):
##    def _get(self):
##        u'Indicates if the sort direction for the class labels is ascending.'
##        #return Ascending
##    def _set(self, Ascending):
##        u'Indicates if the sort direction for the class labels is ascending.'
##    SortClassesAscending = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, Index):
##        u'Description for the class at the given index.'
##        #return Description
##    def _set(self, Index, Description):
##        u'Description for the class at the given index.'
##    Description = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Number of classes.'
##        #return Value
##    def _set(self, Value):
##        u'Number of classes.'
##    ClassCount = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, Index):
##        u'Symbol representing the class at the index.'
##        #return Symbol
##    def _set(self, Index, Symbol):
##        u'Symbol representing the class at the index.'
##    Symbol = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Normalization field this renderer is using.'
##        #return Field
##    def _set(self, Field):
##        u'Normalization field this renderer is using.'
##    NormField = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, Index):
##        u'Label for the class at the given index.'
##        #return Label
##    def _set(self, Index, Label):
##        u'Label for the class at the given index.'
##    Label = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, Index):
##        u'Break at the index.'
##        #return Value
##    def _set(self, Index, Value):
##        u'Break at the index.'
##    Break = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Field this renderer is using.'
##        #return Field
##    def _set(self, Field):
##        u'Field this renderer is using.'
##    ClassField = property(_get, _set, doc = _set.__doc__)
##

class IFDOGraphicsLayer2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control properties of an annotation layer.'
    _iid_ = GUID('{8321C2C6-72F9-48A6-BFCB-67EFD7597564}')
    _idlflags_ = ['oleautomation']
IFDOGraphicsLayer2._methods_ = [
    COMMETHOD([helpstring(u'Begins a batch process for adding elements to a graphics layer.')], HRESULT, 'BeginAddElements'),
    COMMETHOD([helpstring(u'Sets up attribute conversion parameters for batch conversion.')], HRESULT, 'SetupAttributeConversion',
              ( ['in'], c_int, 'numAttributes' ),
              ( ['in'], POINTER(c_int), 'inputCols' ),
              ( ['in'], POINTER(c_int), 'outputCols' )),
    COMMETHOD([helpstring(u'Adds a feature and its corresponding element to a graphics layer.')], HRESULT, 'DoAddFeature',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeature), 'pFeature' ),
              ( ['in'], POINTER(IElement), 'pElement' ),
              ( ['in'], c_int, 'zorder' )),
    COMMETHOD([helpstring(u'Adds a batch of elements to a graphics layer.')], HRESULT, 'DoAddElements',
              ( ['in'], POINTER(IElementCollection), 'pElements' ),
              ( ['in'], c_int, 'zorder' )),
    COMMETHOD([helpstring(u'Ends the batch process for adding elements to a graphics layer.')], HRESULT, 'EndAddElements'),
    COMMETHOD([helpstring(u'Adds a feature and its corresponding element to a graphics layer.')], HRESULT, 'DoAddNullElement',
              ( ['in'], c_int, 'FeatureId' )),
]
################################################################
## code template for IFDOGraphicsLayer2 implementation
##class IFDOGraphicsLayer2_Impl(object):
##    def EndAddElements(self):
##        u'Ends the batch process for adding elements to a graphics layer.'
##        #return 
##
##    def DoAddNullElement(self, FeatureId):
##        u'Adds a feature and its corresponding element to a graphics layer.'
##        #return 
##
##    def SetupAttributeConversion(self, numAttributes, inputCols, outputCols):
##        u'Sets up attribute conversion parameters for batch conversion.'
##        #return 
##
##    def DoAddElements(self, pElements, zorder):
##        u'Adds a batch of elements to a graphics layer.'
##        #return 
##
##    def DoAddFeature(self, pFeature, pElement, zorder):
##        u'Adds a feature and its corresponding element to a graphics layer.'
##        #return 
##
##    def BeginAddElements(self):
##        u'Begins a batch process for adding elements to a graphics layer.'
##        #return 
##

class IACSymbol(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control ArcIMS symbols.'
    _iid_ = GUID('{C6C1B35E-90DA-4B32-93DD-71465F502CCE}')
    _idlflags_ = ['oleautomation']
IACSymbol._methods_ = [
    COMMETHOD(['propget', helpstring(u'The transparency in percent (0-100).')], HRESULT, 'Transparency',
              ( ['retval', 'out'], POINTER(c_double), 'trans' )),
    COMMETHOD(['propput', helpstring(u'The transparency in percent (0-100).')], HRESULT, 'Transparency',
              ( ['in'], c_double, 'trans' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the antialias is ON or OFF.')], HRESULT, 'Antialiasing',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the antialias is ON or OFF.')], HRESULT, 'Antialiasing',
              ( ['in'], VARIANT_BOOL, 'flag' )),
]
################################################################
## code template for IACSymbol implementation
##class IACSymbol_Impl(object):
##    def _get(self):
##        u'Indicates if the antialias is ON or OFF.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if the antialias is ON or OFF.'
##    Antialiasing = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The transparency in percent (0-100).'
##        #return trans
##    def _set(self, trans):
##        u'The transparency in percent (0-100).'
##    Transparency = property(_get, _set, doc = _set.__doc__)
##

class IMapSurroundFrame(IFrameElement):
    _case_insensitive_ = True
    u'Provides access to the members that control the map surround element interface.'
    _iid_ = GUID('{9B00131C-9ED7-11D0-859E-0800091A2A72}')
    _idlflags_ = ['oleautomation']
class IBorder(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control frame borders.'
    _iid_ = GUID('{E4240307-DD41-11D2-B868-00600802E603}')
    _idlflags_ = ['oleautomation']
IFrameElement._methods_ = [
    COMMETHOD(['propget', helpstring(u'Object framed by this element.')], HRESULT, 'Object',
              ( ['retval', 'out'], POINTER(VARIANT), 'framedObject' )),
    COMMETHOD(['propget', helpstring(u'Frame border used by this element.')], HRESULT, 'Border',
              ( ['retval', 'out'], POINTER(POINTER(IBorder)), 'Border' )),
    COMMETHOD(['propput', helpstring(u'Frame border used by this element.')], HRESULT, 'Border',
              ( ['in'], POINTER(IBorder), 'Border' )),
    COMMETHOD(['propget', helpstring(u'Frame background used by this element.')], HRESULT, 'Background',
              ( ['retval', 'out'], POINTER(POINTER(IBackground)), 'Background' )),
    COMMETHOD(['propput', helpstring(u'Frame background used by this element.')], HRESULT, 'Background',
              ( ['in'], POINTER(IBackground), 'Background' )),
    COMMETHOD(['propget', helpstring(u'Small bitmap representation of this element.')], HRESULT, 'Thumbnail',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE), 'bitmapHandle' )),
    COMMETHOD(['propget', helpstring(u'Indicates if this element is in draft mode, i.e., draws fast.')], HRESULT, 'DraftMode',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'DraftMode' )),
    COMMETHOD(['propput', helpstring(u'Indicates if this element is in draft mode, i.e., draws fast.')], HRESULT, 'DraftMode',
              ( ['in'], VARIANT_BOOL, 'DraftMode' )),
]
################################################################
## code template for IFrameElement implementation
##class IFrameElement_Impl(object):
##    @property
##    def Object(self):
##        u'Object framed by this element.'
##        #return framedObject
##
##    def _get(self):
##        u'Frame border used by this element.'
##        #return Border
##    def _set(self, Border):
##        u'Frame border used by this element.'
##    Border = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Thumbnail(self):
##        u'Small bitmap representation of this element.'
##        #return bitmapHandle
##
##    def _get(self):
##        u'Frame background used by this element.'
##        #return Background
##    def _set(self, Background):
##        u'Frame background used by this element.'
##    Background = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if this element is in draft mode, i.e., draws fast.'
##        #return DraftMode
##    def _set(self, DraftMode):
##        u'Indicates if this element is in draft mode, i.e., draws fast.'
##    DraftMode = property(_get, _set, doc = _set.__doc__)
##

IMapSurroundFrame._methods_ = [
    COMMETHOD(['propget', helpstring(u'The map surround displayed by this frame element.')], HRESULT, 'MapSurround',
              ( ['retval', 'out'], POINTER(POINTER(IMapSurround)), 'MapSurround' )),
    COMMETHOD(['propputref', helpstring(u'The map surround displayed by this frame element.')], HRESULT, 'MapSurround',
              ( ['in'], POINTER(IMapSurround), 'MapSurround' )),
    COMMETHOD(['propget', helpstring(u"The frame element of the map associated with this object's map surround.")], HRESULT, 'MapFrame',
              ( ['retval', 'out'], POINTER(POINTER(IMapFrame)), 'MapFrame' )),
    COMMETHOD(['propputref', helpstring(u"The frame element of the map associated with this object's map surround.")], HRESULT, 'MapFrame',
              ( ['in'], POINTER(IMapFrame), 'MapFrame' )),
]
################################################################
## code template for IMapSurroundFrame implementation
##class IMapSurroundFrame_Impl(object):
##    def MapFrame(self, MapFrame):
##        u"The frame element of the map associated with this object's map surround."
##        #return 
##
##    def MapSurround(self, MapSurround):
##        u'The map surround displayed by this frame element.'
##        #return 
##


# values for enumeration 'esriSymbolOverrideEnum'
esriSymbolOverrideXOffset = 1
esriSymbolOverrideYOffset = 2
esriSymbolOverrideHorzAlignment = 4
esriSymbolOverrideVertAlignment = 8
esriSymbolOverrideFlipAngle = 16
esriSymbolOverrideSize = 64
esriSymbolOverrideColor = 128
esriSymbolOverrideCharSpacing = 512
esriSymbolOverrideCharWidth = 1024
esriSymbolOverrideWordSpacing = 2048
esriSymbolOverrideLeading = 4096
esriSymbolOverrideBold = 8192
esriSymbolOverrideItalic = 16384
esriSymbolOverrideUnderline = 32768
esriSymbolOverrideBackground = 65536
esriSymbolOverrideFontName = 131072
esriSymbolOverrideEnum = c_int # enum
class IACLayer2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the ArcIMS layer.'
    _iid_ = GUID('{24ED5084-5A20-47E8-8CBA-D5D36541C7AE}')
    _idlflags_ = ['oleautomation']
IACLayer2._methods_ = [
    COMMETHOD(['propget', helpstring(u'The layer name.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'The layer name.')], HRESULT, 'Name',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'The name of the layer that the ArcIMS Server hands out.')], HRESULT, 'OriginalName',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'The name of the layer that the ArcIMS Server hands out.')], HRESULT, 'OriginalName',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'The layer id.')], HRESULT, 'ID',
              ( ['retval', 'out'], POINTER(BSTR), 'ID' )),
    COMMETHOD(['propput', helpstring(u'The layer id.')], HRESULT, 'ID',
              ( ['in'], BSTR, 'ID' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer is currently visible.')], HRESULT, 'Visible',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Visible' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the layer is currently visible.')], HRESULT, 'Visible',
              ( ['in'], VARIANT_BOOL, 'Visible' )),
    COMMETHOD(['propget', helpstring(u'Minimum scale at which the layer will display.')], HRESULT, 'MinScale',
              ( ['retval', 'out'], POINTER(c_double), 'Scale' )),
    COMMETHOD(['propput', helpstring(u'Minimum scale at which the layer will display.')], HRESULT, 'MinScale',
              ( ['in'], c_double, 'Scale' )),
    COMMETHOD(['propget', helpstring(u'Maximum scale at which the layer will display.')], HRESULT, 'MaxScale',
              ( ['retval', 'out'], POINTER(c_double), 'Scale' )),
    COMMETHOD(['propput', helpstring(u'Maximum scale at which the layer will display.')], HRESULT, 'MaxScale',
              ( ['in'], c_double, 'Scale' )),
    COMMETHOD(['propget', helpstring(u'The layer def axl.')], HRESULT, 'LayerDefAxl',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'layerDefElement' )),
    COMMETHOD(['propget', helpstring(u'The extent of the layer.')], HRESULT, 'Extent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'envelope' )),
    COMMETHOD(['propget', helpstring(u'The native spatial reference of the data.')], HRESULT, 'NativeSpatialReference',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference)), 'SpatialReference' )),
    COMMETHOD(['propget', helpstring(u'The parent layer id.')], HRESULT, 'ParentLayerID',
              ( ['retval', 'out'], POINTER(BSTR), 'ID' )),
    COMMETHOD(['propput', helpstring(u'The parent layer id.')], HRESULT, 'ParentLayerID',
              ( ['in'], BSTR, 'ID' )),
]
################################################################
## code template for IACLayer2 implementation
##class IACLayer2_Impl(object):
##    def _get(self):
##        u'The layer name.'
##        #return Name
##    def _set(self, Name):
##        u'The layer name.'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def LayerDefAxl(self):
##        u'The layer def axl.'
##        #return layerDefElement
##
##    def _get(self):
##        u'Maximum scale at which the layer will display.'
##        #return Scale
##    def _set(self, Scale):
##        u'Maximum scale at which the layer will display.'
##    MaxScale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The parent layer id.'
##        #return ID
##    def _set(self, ID):
##        u'The parent layer id.'
##    ParentLayerID = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the layer is currently visible.'
##        #return Visible
##    def _set(self, Visible):
##        u'Indicates if the layer is currently visible.'
##    Visible = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Extent(self):
##        u'The extent of the layer.'
##        #return envelope
##
##    def _get(self):
##        u'The name of the layer that the ArcIMS Server hands out.'
##        #return Name
##    def _set(self, Name):
##        u'The name of the layer that the ArcIMS Server hands out.'
##    OriginalName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Minimum scale at which the layer will display.'
##        #return Scale
##    def _set(self, Scale):
##        u'Minimum scale at which the layer will display.'
##    MinScale = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def NativeSpatialReference(self):
##        u'The native spatial reference of the data.'
##        #return SpatialReference
##
##    def _get(self):
##        u'The layer id.'
##        #return ID
##    def _set(self, ID):
##        u'The layer id.'
##    ID = property(_get, _set, doc = _set.__doc__)
##

class IShadow(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control frame drop shadows.'
    _iid_ = GUID('{A9258348-1753-4B99-820A-FCF74429ABC1}')
    _idlflags_ = ['oleautomation']
class ISymbolShadow(IShadow):
    _case_insensitive_ = True
    u'Provides access to members that control the SymbolBorder object.'
    _iid_ = GUID('{19B9EDD2-FD44-4A45-B25C-9B76FC7045C2}')
    _idlflags_ = ['oleautomation']
IShadow._methods_ = [
    COMMETHOD(['propget', helpstring(u'Name of the drop shadow.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'Name of the drop shadow.')], HRESULT, 'Name',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'Horizontal offset between the drop shadow and the subject in points.')], HRESULT, 'HorizontalSpacing',
              ( ['retval', 'out'], POINTER(c_double), 'points' )),
    COMMETHOD(['propput', helpstring(u'Horizontal offset between the drop shadow and the subject in points.')], HRESULT, 'HorizontalSpacing',
              ( ['in'], c_double, 'points' )),
    COMMETHOD(['propget', helpstring(u'Vertical offset between the drop shadow and the subject in points.')], HRESULT, 'VerticalSpacing',
              ( ['retval', 'out'], POINTER(c_double), 'points' )),
    COMMETHOD(['propput', helpstring(u'Vertical offset between the drop shadow and the subject in points.')], HRESULT, 'VerticalSpacing',
              ( ['in'], c_double, 'points' )),
    COMMETHOD([helpstring(u'Bounding rectangle of the geometry including the area covered by the border.')], HRESULT, 'QueryBounds',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'Geometry' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'Bounds' )),
    COMMETHOD([helpstring(u'Geometry used to draw the drop shadow.')], HRESULT, 'GetGeometry',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'Shape' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry)), 'Geometry' )),
    COMMETHOD([helpstring(u'Draws the drop shadow into the given display object.')], HRESULT, 'Draw',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'Geometry' )),
]
################################################################
## code template for IShadow implementation
##class IShadow_Impl(object):
##    def Draw(self, Display, Geometry):
##        u'Draws the drop shadow into the given display object.'
##        #return 
##
##    def _get(self):
##        u'Name of the drop shadow.'
##        #return Name
##    def _set(self, Name):
##        u'Name of the drop shadow.'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Horizontal offset between the drop shadow and the subject in points.'
##        #return points
##    def _set(self, points):
##        u'Horizontal offset between the drop shadow and the subject in points.'
##    HorizontalSpacing = property(_get, _set, doc = _set.__doc__)
##
##    def GetGeometry(self, Display, Shape):
##        u'Geometry used to draw the drop shadow.'
##        #return Geometry
##
##    def _get(self):
##        u'Vertical offset between the drop shadow and the subject in points.'
##        #return points
##    def _set(self, points):
##        u'Vertical offset between the drop shadow and the subject in points.'
##    VerticalSpacing = property(_get, _set, doc = _set.__doc__)
##
##    def QueryBounds(self, Display, Geometry, Bounds):
##        u'Bounding rectangle of the geometry including the area covered by the border.'
##        #return 
##

ISymbolShadow._methods_ = [
    COMMETHOD(['propget', helpstring(u'Symbol used to draw the shadow.')], HRESULT, 'FillSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IFillSymbol)), 'Symbol' )),
    COMMETHOD(['propput', helpstring(u'Symbol used to draw the shadow.')], HRESULT, 'FillSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IFillSymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'Amount of corner rounding.  0 = fully square.  100 = fully round.')], HRESULT, 'CornerRounding',
              ( ['retval', 'out'], POINTER(c_short), 'rounding' )),
    COMMETHOD(['propput', helpstring(u'Amount of corner rounding.  0 = fully square.  100 = fully round.')], HRESULT, 'CornerRounding',
              ( ['in'], c_short, 'rounding' )),
]
################################################################
## code template for ISymbolShadow implementation
##class ISymbolShadow_Impl(object):
##    def _get(self):
##        u'Amount of corner rounding.  0 = fully square.  100 = fully round.'
##        #return rounding
##    def _set(self, rounding):
##        u'Amount of corner rounding.  0 = fully square.  100 = fully round.'
##    CornerRounding = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Symbol used to draw the shadow.'
##        #return Symbol
##    def _set(self, Symbol):
##        u'Symbol used to draw the shadow.'
##    FillSymbol = property(_get, _set, doc = _set.__doc__)
##

IAnnotationLayer._methods_ = [
    COMMETHOD([helpstring(u'Begins a batch process for adding elements to a graphics layer.')], HRESULT, 'BeginAddElements'),
    COMMETHOD([helpstring(u'Sets up attribute conversion parameters for batch conversion.')], HRESULT, 'SetupAttributeConversion',
              ( ['in'], c_int, 'numAttributes' ),
              ( ['in'], POINTER(c_int), 'inputCols' ),
              ( ['in'], POINTER(c_int), 'outputCols' )),
    COMMETHOD([helpstring(u'Adds a feature and its corresponding element to a graphics layer.')], HRESULT, 'DoAddFeature',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeature), 'pFeature' ),
              ( ['in'], POINTER(IElement), 'pElement' ),
              ( ['in'], c_int, 'zorder' ),
              ( ['in'], c_int, 'AnnotationClassID' ),
              ( ['in'], esriAnnotationStatus, 'Status' )),
    COMMETHOD([helpstring(u'Adds a batch of elements to a graphics layer.')], HRESULT, 'DoAddElements',
              ( ['in'], POINTER(IElementCollection), 'pElements' ),
              ( ['in'], c_int, 'zorder' )),
    COMMETHOD([helpstring(u'Ends the batch process for adding elements to a graphics layer.')], HRESULT, 'EndAddElements'),
    COMMETHOD([helpstring(u'Adds a feature and its corresponding element to a graphics layer.')], HRESULT, 'DoAddNullElement',
              ( ['in'], c_int, 'FeatureId' ),
              ( ['in'], c_int, 'AnnotationClassID' ),
              ( ['in'], esriAnnotationStatus, 'Status' )),
    COMMETHOD(['propget', helpstring(u'Indicates if unplaced annotation is going to draw.')], HRESULT, 'DrawUnplacedAnnotation',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if unplaced annotation is going to draw.')], HRESULT, 'DrawUnplacedAnnotation',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates the color with which unplaced annotation is drawn.')], HRESULT, 'UnplacedAnnotationColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propputref', helpstring(u'Indicates the color with which unplaced annotation is drawn.')], HRESULT, 'UnplacedAnnotationColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'The errors and the file and path of the GL*.log file which stores error information when Add is called in batch (using BeginAddElements and EndAddElements).')], HRESULT, 'AddErrorInfo',
              ( ['out'], POINTER(BSTR), 'errors' ),
              ( ['out'], POINTER(BSTR), 'FilePath' )),
]
################################################################
## code template for IAnnotationLayer implementation
##class IAnnotationLayer_Impl(object):
##    def EndAddElements(self):
##        u'Ends the batch process for adding elements to a graphics layer.'
##        #return 
##
##    def DoAddNullElement(self, FeatureId, AnnotationClassID, Status):
##        u'Adds a feature and its corresponding element to a graphics layer.'
##        #return 
##
##    @property
##    def AddErrorInfo(self):
##        u'The errors and the file and path of the GL*.log file which stores error information when Add is called in batch (using BeginAddElements and EndAddElements).'
##        #return errors, FilePath
##
##    def _get(self):
##        u'Indicates if unplaced annotation is going to draw.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if unplaced annotation is going to draw.'
##    DrawUnplacedAnnotation = property(_get, _set, doc = _set.__doc__)
##
##    def UnplacedAnnotationColor(self, Color):
##        u'Indicates the color with which unplaced annotation is drawn.'
##        #return 
##
##    def SetupAttributeConversion(self, numAttributes, inputCols, outputCols):
##        u'Sets up attribute conversion parameters for batch conversion.'
##        #return 
##
##    def DoAddElements(self, pElements, zorder):
##        u'Adds a batch of elements to a graphics layer.'
##        #return 
##
##    def DoAddFeature(self, pFeature, pElement, zorder, AnnotationClassID, Status):
##        u'Adds a feature and its corresponding element to a graphics layer.'
##        #return 
##
##    def BeginAddElements(self):
##        u'Begins a batch process for adding elements to a graphics layer.'
##        #return 
##

class IOverview2(IMapSurround):
    _case_insensitive_ = True
    u'Provides access to members that control the overview.'
    _iid_ = GUID('{1BD83797-6DBC-43D1-A642-19A22185ACAC}')
    _idlflags_ = ['oleautomation']
IOverview2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Fill symbol used to display the area of interest.')], HRESULT, 'AoiFillSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IFillSymbol)), 'Symbol' )),
    COMMETHOD(['propput', helpstring(u'Fill symbol used to display the area of interest.')], HRESULT, 'AoiFillSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IFillSymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'Overlay grid layer for the overview.')], HRESULT, 'OverlayGridLayer',
              ( ['retval', 'out'], POINTER(POINTER(ILayer)), 'Layer' )),
    COMMETHOD(['propput', helpstring(u'Overlay grid layer for the overview.')], HRESULT, 'OverlayGridLayer',
              ( ['in'], POINTER(ILayer), 'Layer' )),
    COMMETHOD(['propget', helpstring(u"Text symbol used to label overlay grid cells with the layer's display field.")], HRESULT, 'OverlayGridLabelSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol)), 'Symbol' )),
    COMMETHOD(['propput', helpstring(u"Text symbol used to label overlay grid cells with the layer's display field.")], HRESULT, 'OverlayGridLabelSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol), 'Symbol' )),
    COMMETHOD([helpstring(u'Sets the extent of the associated map to the specified overlay grid cell.')], HRESULT, 'SetOverlayGridCell',
              ( ['in'], c_int, 'gridLayerFid' )),
    COMMETHOD([helpstring(u"Updates the display of the overview based upon the associated map's current settings.")], HRESULT, 'UpdateDisplay',
              ( ['in'], c_int, 'windowWidth' ),
              ( ['in'], c_int, 'windowHeight' )),
    COMMETHOD(['propget', helpstring(u'Background color of the overview.')], HRESULT, 'BackgroundColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'Background color of the overview.')], HRESULT, 'BackgroundColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
]
################################################################
## code template for IOverview2 implementation
##class IOverview2_Impl(object):
##    def _get(self):
##        u"Text symbol used to label overlay grid cells with the layer's display field."
##        #return Symbol
##    def _set(self, Symbol):
##        u"Text symbol used to label overlay grid cells with the layer's display field."
##    OverlayGridLabelSymbol = property(_get, _set, doc = _set.__doc__)
##
##    def SetOverlayGridCell(self, gridLayerFid):
##        u'Sets the extent of the associated map to the specified overlay grid cell.'
##        #return 
##
##    def _get(self):
##        u'Overlay grid layer for the overview.'
##        #return Layer
##    def _set(self, Layer):
##        u'Overlay grid layer for the overview.'
##    OverlayGridLayer = property(_get, _set, doc = _set.__doc__)
##
##    def UpdateDisplay(self, windowWidth, windowHeight):
##        u"Updates the display of the overview based upon the associated map's current settings."
##        #return 
##
##    def _get(self):
##        u'Background color of the overview.'
##        #return Color
##    def _set(self, Color):
##        u'Background color of the overview.'
##    BackgroundColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Fill symbol used to display the area of interest.'
##        #return Symbol
##    def _set(self, Symbol):
##        u'Fill symbol used to display the area of interest.'
##    AoiFillSymbol = property(_get, _set, doc = _set.__doc__)
##

class EngineWMSMapLayerFactory(CoClass):
    u'Provides programmatic access to a WMS map layer factory.'
    _reg_clsid_ = GUID('{84993C13-4858-44E5-B410-AFE9DD2BE88C}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
EngineWMSMapLayerFactory._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILayerFactory, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]

class IIndexQuery(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the index created with IFeatureIndex.'
    _iid_ = GUID('{59F60295-C1FB-11D2-9F23-00C04F6BC886}')
    _idlflags_ = ['oleautomation']
IIndexQuery._methods_ = [
    COMMETHOD([helpstring(u'Finds the nearest feature in index to the input shape.')], HRESULT, 'NearestFeature',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'pShape' ),
              ( ['out'], POINTER(c_int), 'pClosestFeatureFID' ),
              ( ['out'], POINTER(c_double), 'pDistance' )),
    COMMETHOD(['propget', helpstring(u'Finds all features that the input shape lies within.')], HRESULT, 'Within',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'pShape' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureCursor)), 'ppFeatureCursor' )),
]
################################################################
## code template for IIndexQuery implementation
##class IIndexQuery_Impl(object):
##    def NearestFeature(self, pShape):
##        u'Finds the nearest feature in index to the input shape.'
##        #return pClosestFeatureFID, pDistance
##
##    @property
##    def Within(self, pShape):
##        u'Finds all features that the input shape lies within.'
##        #return ppFeatureCursor
##

class IEnumRasterUniqueValueColor(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that enumerate row indexes in descriptor table for chosen class.'
    _iid_ = GUID('{FAFDB8B5-5FE3-11D2-9F24-00C04F8ED1D7}')
    _idlflags_ = ['oleautomation']
IEnumRasterUniqueValueColor._methods_ = [
    COMMETHOD(['propget', helpstring(u'Number of classes.')], HRESULT, 'nClasses',
              ( ['retval', 'out'], POINTER(c_int), 'nClasses' )),
    COMMETHOD([helpstring(u'Class for getting indices.')], HRESULT, 'set_Class',
              ( [], c_int, 'iClass' )),
    COMMETHOD([helpstring(u'Next index for current class in the enumeration sequence.')], HRESULT, 'Next',
              ( ['out'], POINTER(c_int), 'Index' )),
    COMMETHOD([helpstring(u'Resets the enumeration sequence to the beginning.')], HRESULT, 'Reset'),
    COMMETHOD(['restricted', helpstring(u'Retrieves esriRasterUniqueRendererKeyTypesEnum.'), 'propget'], HRESULT, 'KeyType',
              ( ['retval', 'out'], POINTER(esriRasterUniqueRendererKeyTypesEnum), 'eKeyType' )),
    COMMETHOD(['propget', helpstring(u'Double key for current class.')], HRESULT, 'DoubleKey',
              ( ['retval', 'out'], POINTER(c_double), 'DoubleKey' )),
    COMMETHOD(['propget', helpstring(u'String key for current class.')], HRESULT, 'StringKey',
              ( ['retval', 'out'], POINTER(BSTR), 'bstrKey' )),
]
################################################################
## code template for IEnumRasterUniqueValueColor implementation
##class IEnumRasterUniqueValueColor_Impl(object):
##    def Reset(self):
##        u'Resets the enumeration sequence to the beginning.'
##        #return 
##
##    @property
##    def KeyType(self):
##        u'Retrieves esriRasterUniqueRendererKeyTypesEnum.'
##        #return eKeyType
##
##    def Next(self):
##        u'Next index for current class in the enumeration sequence.'
##        #return Index
##
##    def set_Class(self, iClass):
##        u'Class for getting indices.'
##        #return 
##
##    @property
##    def DoubleKey(self):
##        u'Double key for current class.'
##        #return DoubleKey
##
##    @property
##    def nClasses(self):
##        u'Number of classes.'
##        #return nClasses
##
##    @property
##    def StringKey(self):
##        u'String key for current class.'
##        #return bstrKey
##

class IGraphicsLayer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the Graphics Layer.'
    _iid_ = GUID('{34B2EF81-F4AC-11D1-A245-080009B6F22B}')
    _idlflags_ = ['oleautomation']
IMap._methods_ = [
    COMMETHOD(['propget', helpstring(u'Name of the map.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'Name of the map.')], HRESULT, 'Name',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'Description of the map.')], HRESULT, 'Description',
              ( ['retval', 'out'], POINTER(BSTR), 'descr' )),
    COMMETHOD(['propput', helpstring(u'Description of the map.')], HRESULT, 'Description',
              ( ['in'], BSTR, 'descr' )),
    COMMETHOD(['propput', helpstring(u'Area of interest for the map.')], HRESULT, 'AreaOfInterest',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'rhs' )),
    COMMETHOD(['propget', helpstring(u'Number of layers in the map.')], HRESULT, 'LayerCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The layer at the given index.')], HRESULT, 'Layer',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(ILayer)), 'Layer' )),
    COMMETHOD(['propget', helpstring(u'The layers in the map of the type specified in the uid.  If recursive is true it will return layers in group layers.')], HRESULT, 'Layers',
              ( ['in', 'optional'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IUID), 'uid', 0 ),
              ( ['in', 'optional'], VARIANT_BOOL, 'recursive', True ),
              ( ['retval', 'out'], POINTER(POINTER(IEnumLayer)), 'Layers' )),
    COMMETHOD(['propget', helpstring(u'Number of map surrounds associated with the map.')], HRESULT, 'MapSurroundCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The map surround at the given index.')], HRESULT, 'MapSurround',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IMapSurround)), 'MapSurround' )),
    COMMETHOD(['propget', helpstring(u'The units for the map.')], HRESULT, 'MapUnits',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits), 'unitsCode' )),
    COMMETHOD(['propput', helpstring(u'The units for the map.')], HRESULT, 'MapUnits',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits, 'unitsCode' )),
    COMMETHOD(['propget', helpstring(u'The distance units for the map.')], HRESULT, 'DistanceUnits',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits), 'unitsCode' )),
    COMMETHOD(['propput', helpstring(u'The distance units for the map.')], HRESULT, 'DistanceUnits',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits, 'unitsCode' )),
    COMMETHOD(['propget', helpstring(u'The spatial reference of the map.')], HRESULT, 'SpatialReference',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference)), 'spatialRef' )),
    COMMETHOD(['propputref', helpstring(u'The spatial reference of the map.')], HRESULT, 'SpatialReference',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'spatialRef' )),
    COMMETHOD(['propget', helpstring(u'The scale of the map as a representative fraction.')], HRESULT, 'MapScale',
              ( ['retval', 'out'], POINTER(c_double), 'scaleRF' )),
    COMMETHOD(['propput', helpstring(u'The scale of the map as a representative fraction.')], HRESULT, 'MapScale',
              ( ['in'], c_double, 'scaleRF' )),
    COMMETHOD(['propget', helpstring(u'The reference scale of the map as a representative fraction.')], HRESULT, 'ReferenceScale',
              ( ['retval', 'out'], POINTER(c_double), 'scaleRF' )),
    COMMETHOD(['propput', helpstring(u'The reference scale of the map as a representative fraction.')], HRESULT, 'ReferenceScale',
              ( ['in'], c_double, 'scaleRF' )),
    COMMETHOD(['propget', helpstring(u'Indicates if map is drawn in a frame rather than on the whole window.')], HRESULT, 'IsFramed',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if map is drawn in a frame rather than on the whole window.')], HRESULT, 'IsFramed',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'A shape that layers in the map are clipped to.')], HRESULT, 'ClipGeometry',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry)), 'ClipGeometry' )),
    COMMETHOD(['propput', helpstring(u'A shape that layers in the map are clipped to.')], HRESULT, 'ClipGeometry',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'ClipGeometry' )),
    COMMETHOD([helpstring(u'Adds a layer to the map.')], HRESULT, 'AddLayer',
              ( ['in'], POINTER(ILayer), 'Layer' )),
    COMMETHOD([helpstring(u'Adds multiple layers to the map, arranging them nicely if specified.')], HRESULT, 'AddLayers',
              ( ['in'], POINTER(IEnumLayer), 'Layers' ),
              ( ['in'], VARIANT_BOOL, 'autoArrange' )),
    COMMETHOD([helpstring(u'Deletes a layer from the map.')], HRESULT, 'DeleteLayer',
              ( ['in'], POINTER(ILayer), 'Layer' )),
    COMMETHOD([helpstring(u'Moves a layer to another position.')], HRESULT, 'MoveLayer',
              ( ['in'], POINTER(ILayer), 'Layer' ),
              ( ['in'], c_int, 'toIndex' )),
    COMMETHOD([helpstring(u'Removes all layers from the map.')], HRESULT, 'ClearLayers'),
    COMMETHOD([helpstring(u'Create and initialize a map surround.  An optional style from the style gallery may be specified.')], HRESULT, 'CreateMapSurround',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IUID), 'clsid' ),
              ( ['in'], POINTER(IMapSurround), 'optionalStyle' ),
              ( ['retval', 'out'], POINTER(POINTER(IMapSurround)), 'MapSurround' )),
    COMMETHOD([helpstring(u'Adds a map surround to the map.')], HRESULT, 'AddMapSurround',
              ( ['in'], POINTER(IMapSurround), 'MapSurround' )),
    COMMETHOD([helpstring(u'Deletes a map surround from the map.')], HRESULT, 'DeleteMapSurround',
              ( ['in'], POINTER(IMapSurround), 'MapSurround' )),
    COMMETHOD([helpstring(u'Removes all map surrounds from the map.')], HRESULT, 'ClearMapSurrounds'),
    COMMETHOD([helpstring(u'Computes the distance between two points on the map and returns the result.')], HRESULT, 'ComputeDistance',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'p1' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'p2' ),
              ( ['retval', 'out'], POINTER(c_double), 'Distance' )),
    COMMETHOD(['propget', helpstring(u'The basic graphics layer.')], HRESULT, 'BasicGraphicsLayer',
              ( ['retval', 'out'], POINTER(POINTER(IGraphicsLayer)), 'GraphicsLayer' )),
    COMMETHOD(['propget', helpstring(u'The active graphics layer.  If no graphic layers exist a basic memory graphics layer will be created.')], HRESULT, 'ActiveGraphicsLayer',
              ( ['retval', 'out'], POINTER(POINTER(ILayer)), 'GraphicsLayer' )),
    COMMETHOD(['propputref', helpstring(u'The active graphics layer.  If no graphic layers exist a basic memory graphics layer will be created.')], HRESULT, 'ActiveGraphicsLayer',
              ( ['in'], POINTER(ILayer), 'GraphicsLayer' )),
    COMMETHOD(['propget', helpstring(u'An optional border drawn around ClipGeometry.')], HRESULT, 'ClipBorder',
              ( ['retval', 'out'], POINTER(POINTER(IBorder)), 'Border' )),
    COMMETHOD(['propput', helpstring(u'An optional border drawn around ClipGeometry.')], HRESULT, 'ClipBorder',
              ( ['in'], POINTER(IBorder), 'Border' )),
    COMMETHOD([helpstring(u'Selects a feature.')], HRESULT, 'SelectFeature',
              ( ['in'], POINTER(ILayer), 'Layer' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeature), 'Feature' )),
    COMMETHOD(['propget', helpstring(u'Number of selected features.')], HRESULT, 'SelectionCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD([helpstring(u'Clears the map selection.')], HRESULT, 'ClearSelection'),
    COMMETHOD(['propget', helpstring(u'The feature selection for the map.')], HRESULT, 'FeatureSelection',
              ( ['retval', 'out'], POINTER(POINTER(ISelection)), 'Selection' )),
    COMMETHOD(['propputref', helpstring(u'The feature selection for the map.')], HRESULT, 'FeatureSelection',
              ( ['in'], POINTER(ISelection), 'Selection' )),
    COMMETHOD([helpstring(u'Selects features in the map given a shape and a selection environment (optional).')], HRESULT, 'SelectByShape',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'Shape' ),
              ( ['in'], POINTER(ISelectionEnvironment), 'env' ),
              ( ['in'], VARIANT_BOOL, 'justOne' )),
    COMMETHOD([helpstring(u'Used to batch operations together to minimize notifications.')], HRESULT, 'DelayEvents',
              ( ['in'], VARIANT_BOOL, 'delay' )),
    COMMETHOD([helpstring(u'Sets the page size for the map (optional).')], HRESULT, 'SetPageSize',
              ( ['in'], c_double, 'widthInches' ),
              ( ['in'], c_double, 'heightInches' )),
    COMMETHOD([helpstring(u'Gets the page size for the map.')], HRESULT, 'GetPageSize',
              ( ['out'], POINTER(c_double), 'widthInches' ),
              ( ['out'], POINTER(c_double), 'heightInches' )),
    COMMETHOD(['propget', helpstring(u'The list of barriers and their weight for labeling.')], HRESULT, 'Barriers',
              ( [], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'pExtent' ),
              ( ['retval', 'out'], POINTER(POINTER(IBarrierCollection)), 'Barriers' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the Map draws using symbol levels.')], HRESULT, 'UseSymbolLevels',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the Map draws using symbol levels.')], HRESULT, 'UseSymbolLevels',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the Map is expanded.')], HRESULT, 'Expanded',
              ( ['in'], VARIANT_BOOL, 'Expanded' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the Map is expanded.')], HRESULT, 'Expanded',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Expanded' )),
    COMMETHOD(['propputref', helpstring(u'The annotation (label) engine the map will use.')], HRESULT, 'AnnotationEngine',
              ( ['in'], POINTER(IAnnotateMap), 'AnnotateMap' )),
    COMMETHOD(['propget', helpstring(u'The annotation (label) engine the map will use.')], HRESULT, 'AnnotationEngine',
              ( ['retval', 'out'], POINTER(POINTER(IAnnotateMap)), 'AnnotateMap' )),
    COMMETHOD([helpstring(u'Forces the full extent to be recalculated.')], HRESULT, 'RecalcFullExtent'),
    COMMETHOD([helpstring(u'Suspends drawing.')], HRESULT, 'DelayDrawing',
              ( ['in'], VARIANT_BOOL, 'delay' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the spatial reference is prevented from being changed.')], HRESULT, 'SpatialReferenceLocked',
              ( ['in'], VARIANT_BOOL, 'Locked' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the spatial reference is prevented from being changed.')], HRESULT, 'SpatialReferenceLocked',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Locked' )),
]
################################################################
## code template for IMap implementation
##class IMap_Impl(object):
##    @property
##    def Layers(self, uid, recursive):
##        u'The layers in the map of the type specified in the uid.  If recursive is true it will return layers in group layers.'
##        #return Layers
##
##    def SetPageSize(self, widthInches, heightInches):
##        u'Sets the page size for the map (optional).'
##        #return 
##
##    def _get(self):
##        u'Indicates if map is drawn in a frame rather than on the whole window.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if map is drawn in a frame rather than on the whole window.'
##    IsFramed = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The units for the map.'
##        #return unitsCode
##    def _set(self, unitsCode):
##        u'The units for the map.'
##    MapUnits = property(_get, _set, doc = _set.__doc__)
##
##    def ComputeDistance(self, p1, p2):
##        u'Computes the distance between two points on the map and returns the result.'
##        #return Distance
##
##    def DeleteMapSurround(self, MapSurround):
##        u'Deletes a map surround from the map.'
##        #return 
##
##    def SpatialReference(self, spatialRef):
##        u'The spatial reference of the map.'
##        #return 
##
##    def CreateMapSurround(self, clsid, optionalStyle):
##        u'Create and initialize a map surround.  An optional style from the style gallery may be specified.'
##        #return MapSurround
##
##    def _set(self, rhs):
##        u'Area of interest for the map.'
##    AreaOfInterest = property(fset = _set, doc = _set.__doc__)
##
##    def DelayEvents(self, delay):
##        u'Used to batch operations together to minimize notifications.'
##        #return 
##
##    def ClearLayers(self):
##        u'Removes all layers from the map.'
##        #return 
##
##    def AddLayer(self, Layer):
##        u'Adds a layer to the map.'
##        #return 
##
##    def _get(self):
##        u'Indicates whether the spatial reference is prevented from being changed.'
##        #return Locked
##    def _set(self, Locked):
##        u'Indicates whether the spatial reference is prevented from being changed.'
##    SpatialReferenceLocked = property(_get, _set, doc = _set.__doc__)
##
##    def GetPageSize(self):
##        u'Gets the page size for the map.'
##        #return widthInches, heightInches
##
##    def RecalcFullExtent(self):
##        u'Forces the full extent to be recalculated.'
##        #return 
##
##    def _get(self):
##        u'Description of the map.'
##        #return descr
##    def _set(self, descr):
##        u'Description of the map.'
##    Description = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SelectionCount(self):
##        u'Number of selected features.'
##        #return Count
##
##    def ClearMapSurrounds(self):
##        u'Removes all map surrounds from the map.'
##        #return 
##
##    @property
##    def LayerCount(self):
##        u'Number of layers in the map.'
##        #return Count
##
##    def AddMapSurround(self, MapSurround):
##        u'Adds a map surround to the map.'
##        #return 
##
##    def ClearSelection(self):
##        u'Clears the map selection.'
##        #return 
##
##    def _get(self):
##        u'Name of the map.'
##        #return Name
##    def _set(self, Name):
##        u'Name of the map.'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def AddLayers(self, Layers, autoArrange):
##        u'Adds multiple layers to the map, arranging them nicely if specified.'
##        #return 
##
##    @property
##    def MapSurround(self, Index):
##        u'The map surround at the given index.'
##        #return MapSurround
##
##    def _get(self):
##        u'Indicates if the Map is expanded.'
##        #return Expanded
##    def _set(self, Expanded):
##        u'Indicates if the Map is expanded.'
##    Expanded = property(_get, _set, doc = _set.__doc__)
##
##    def DelayDrawing(self, delay):
##        u'Suspends drawing.'
##        #return 
##
##    def _get(self):
##        u'Indicates if the Map draws using symbol levels.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if the Map draws using symbol levels.'
##    UseSymbolLevels = property(_get, _set, doc = _set.__doc__)
##
##    def MoveLayer(self, Layer, toIndex):
##        u'Moves a layer to another position.'
##        #return 
##
##    def _get(self):
##        u'The scale of the map as a representative fraction.'
##        #return scaleRF
##    def _set(self, scaleRF):
##        u'The scale of the map as a representative fraction.'
##    MapScale = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def BasicGraphicsLayer(self):
##        u'The basic graphics layer.'
##        #return GraphicsLayer
##
##    @property
##    def MapSurroundCount(self):
##        u'Number of map surrounds associated with the map.'
##        #return Count
##
##    @property
##    def Barriers(self, pExtent):
##        u'The list of barriers and their weight for labeling.'
##        #return Barriers
##
##    @property
##    def Layer(self, Index):
##        u'The layer at the given index.'
##        #return Layer
##
##    def DeleteLayer(self, Layer):
##        u'Deletes a layer from the map.'
##        #return 
##
##    def _get(self):
##        u'The distance units for the map.'
##        #return unitsCode
##    def _set(self, unitsCode):
##        u'The distance units for the map.'
##    DistanceUnits = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'A shape that layers in the map are clipped to.'
##        #return ClipGeometry
##    def _set(self, ClipGeometry):
##        u'A shape that layers in the map are clipped to.'
##    ClipGeometry = property(_get, _set, doc = _set.__doc__)
##
##    def ActiveGraphicsLayer(self, GraphicsLayer):
##        u'The active graphics layer.  If no graphic layers exist a basic memory graphics layer will be created.'
##        #return 
##
##    def _get(self):
##        u'An optional border drawn around ClipGeometry.'
##        #return Border
##    def _set(self, Border):
##        u'An optional border drawn around ClipGeometry.'
##    ClipBorder = property(_get, _set, doc = _set.__doc__)
##
##    def FeatureSelection(self, Selection):
##        u'The feature selection for the map.'
##        #return 
##
##    @property
##    def AnnotationEngine(self, AnnotateMap):
##        u'The annotation (label) engine the map will use.'
##        #return 
##
##    def SelectByShape(self, Shape, env, justOne):
##        u'Selects features in the map given a shape and a selection environment (optional).'
##        #return 
##
##    def _get(self):
##        u'The reference scale of the map as a representative fraction.'
##        #return scaleRF
##    def _set(self, scaleRF):
##        u'The reference scale of the map as a representative fraction.'
##    ReferenceScale = property(_get, _set, doc = _set.__doc__)
##
##    def SelectFeature(self, Layer, Feature):
##        u'Selects a feature.'
##        #return 
##

class IRasterDataExclusion(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that exclude data values from classification.'
    _iid_ = GUID('{3FE0401E-8806-11D3-A64F-0008C7DF8989}')
    _idlflags_ = ['oleautomation']
IRasterDataExclusion._methods_ = [
    COMMETHOD(['propput', helpstring(u'Array of doubles indicating the excluded values.')], HRESULT, 'ExcludeValues',
              ( ['in'], VARIANT, 'Values' )),
    COMMETHOD(['propget', helpstring(u'Array of doubles indicating the excluded values.')], HRESULT, 'ExcludeValues',
              ( ['retval', 'out'], POINTER(VARIANT), 'Values' )),
    COMMETHOD(['propput', helpstring(u'Array of doubles indicating the excluded ranges.')], HRESULT, 'ExcludeRanges',
              ( ['in'], VARIANT, 'Values' )),
    COMMETHOD(['propget', helpstring(u'Array of doubles indicating the excluded ranges.')], HRESULT, 'ExcludeRanges',
              ( ['retval', 'out'], POINTER(VARIANT), 'Values' )),
    COMMETHOD(['propput', helpstring(u'Indicates if color is shown for the excluded values.')], HRESULT, 'ExcludeShowClass',
              ( ['in'], VARIANT_BOOL, 'Show' )),
    COMMETHOD(['propget', helpstring(u'Indicates if color is shown for the excluded values.')], HRESULT, 'ExcludeShowClass',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Show' )),
    COMMETHOD(['propput', helpstring(u'Color for the excluded values.')], HRESULT, 'ExcludeColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'Color for the excluded values.')], HRESULT, 'ExcludeColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'Label for the excluded values.')], HRESULT, 'ExcludeLabel',
              ( ['in'], BSTR, 'Label' )),
    COMMETHOD(['propget', helpstring(u'Label for the excluded values.')], HRESULT, 'ExcludeLabel',
              ( ['retval', 'out'], POINTER(BSTR), 'Label' )),
    COMMETHOD(['propput', helpstring(u'Description for the excluded values.')], HRESULT, 'ExcludeDescription',
              ( ['in'], BSTR, 'Description' )),
    COMMETHOD(['propget', helpstring(u'Description for the excluded values.')], HRESULT, 'ExcludeDescription',
              ( ['retval', 'out'], POINTER(BSTR), 'Description' )),
]
################################################################
## code template for IRasterDataExclusion implementation
##class IRasterDataExclusion_Impl(object):
##    def _get(self):
##        u'Description for the excluded values.'
##        #return Description
##    def _set(self, Description):
##        u'Description for the excluded values.'
##    ExcludeDescription = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Array of doubles indicating the excluded ranges.'
##        #return Values
##    def _set(self, Values):
##        u'Array of doubles indicating the excluded ranges.'
##    ExcludeRanges = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Label for the excluded values.'
##        #return Label
##    def _set(self, Label):
##        u'Label for the excluded values.'
##    ExcludeLabel = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Array of doubles indicating the excluded values.'
##        #return Values
##    def _set(self, Values):
##        u'Array of doubles indicating the excluded values.'
##    ExcludeValues = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Color for the excluded values.'
##        #return Color
##    def _set(self, Color):
##        u'Color for the excluded values.'
##    ExcludeColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if color is shown for the excluded values.'
##        #return Show
##    def _set(self, Show):
##        u'Indicates if color is shown for the excluded values.'
##    ExcludeShowClass = property(_get, _set, doc = _set.__doc__)
##

class IGeoReference(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the georeferencing operations.'
    _iid_ = GUID('{E70E1CC1-E5C6-11D3-B9C5-00C0F0567A4A}')
    _idlflags_ = ['oleautomation']
IGeoReference._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if layer can be georeferenced.')], HRESULT, 'CanGeoRef',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'CanGeoRef' )),
    COMMETHOD([helpstring(u'Shift operation of layer.')], HRESULT, 'Shift',
              ( ['in'], c_double, 'deltaX' ),
              ( ['in'], c_double, 'deltaY' )),
    COMMETHOD([helpstring(u'ReScale operation of layer.')], HRESULT, 'ReScale',
              ( ['in'], c_double, 'xScale' ),
              ( ['in'], c_double, 'yScale' )),
    COMMETHOD([helpstring(u'Flip operation of layer.')], HRESULT, 'Flip'),
    COMMETHOD([helpstring(u'Mirror operation of layer.')], HRESULT, 'Mirror'),
    COMMETHOD([helpstring(u'Rotate operation of layer.')], HRESULT, 'Rotate',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'ipPivotPoint' ),
              ( ['in'], c_double, 'Angle' )),
    COMMETHOD([helpstring(u'Transform operation of Raster.')], HRESULT, 'PointsTransform',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPointCollection), 'inPoints' ),
              ( ['in'], VARIANT_BOOL, 'isForward' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPointCollection)), 'outPoints' )),
    COMMETHOD([helpstring(u'Two points adjust operation of layer.')], HRESULT, 'TwoPointsAdjust',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPointCollection), 'fromPoints' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPointCollection), 'toPoints' )),
    COMMETHOD([helpstring(u'Warp operation of layer.')], HRESULT, 'Warp',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPointCollection), 'fromPoints' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPointCollection), 'toPoints' ),
              ( ['in'], c_int, 'order' )),
    COMMETHOD([helpstring(u'Reset operation of layer.')], HRESULT, 'Reset'),
    COMMETHOD([helpstring(u'Save transformation parameters and tie-points.')], HRESULT, 'Register'),
    COMMETHOD([helpstring(u'Save transformed result to a new dataset.')], HRESULT, 'Rectify',
              ( ['in'], BSTR, 'fullpath' ),
              ( ['in'], BSTR, 'Format' )),
    COMMETHOD(['restricted', helpstring(u'Returns output name.')], HRESULT, 'GetOutputName',
              ( ['in'], POINTER(IUnknown), 'Filter' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['retval', 'out'], POINTER(BSTR), 'FullName' )),
    COMMETHOD(['restricted', helpstring(u'Returns output format.')], HRESULT, 'GetOutputFormat',
              ( ['in'], POINTER(IUnknown), 'Filter' ),
              ( ['retval', 'out'], POINTER(BSTR), 'outputFormat' )),
    COMMETHOD(['restricted', helpstring(u'Sets output format filters.')], HRESULT, 'SetOutputFormatFilters',
              ( ['in'], POINTER(IUnknown), 'outputFormatFilters' )),
]
################################################################
## code template for IGeoReference implementation
##class IGeoReference_Impl(object):
##    def Reset(self):
##        u'Reset operation of layer.'
##        #return 
##
##    def Rotate(self, ipPivotPoint, Angle):
##        u'Rotate operation of layer.'
##        #return 
##
##    def Rectify(self, fullpath, Format):
##        u'Save transformed result to a new dataset.'
##        #return 
##
##    def ReScale(self, xScale, yScale):
##        u'ReScale operation of layer.'
##        #return 
##
##    def Shift(self, deltaX, deltaY):
##        u'Shift operation of layer.'
##        #return 
##
##    def Register(self):
##        u'Save transformation parameters and tie-points.'
##        #return 
##
##    def Flip(self):
##        u'Flip operation of layer.'
##        #return 
##
##    def Warp(self, fromPoints, toPoints, order):
##        u'Warp operation of layer.'
##        #return 
##
##    def TwoPointsAdjust(self, fromPoints, toPoints):
##        u'Two points adjust operation of layer.'
##        #return 
##
##    def SetOutputFormatFilters(self, outputFormatFilters):
##        u'Sets output format filters.'
##        #return 
##
##    def GetOutputName(self, Filter, Name):
##        u'Returns output name.'
##        #return FullName
##
##    def PointsTransform(self, inPoints, isForward):
##        u'Transform operation of Raster.'
##        #return outPoints
##
##    def GetOutputFormat(self, Filter):
##        u'Returns output format.'
##        #return outputFormat
##
##    def Mirror(self):
##        u'Mirror operation of layer.'
##        #return 
##
##    @property
##    def CanGeoRef(self):
##        u'Indicates if layer can be georeferenced.'
##        #return CanGeoRef
##

class IFDOGraphicsLayerRead(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the FDO graphics layer read methods.'
    _iid_ = GUID('{5CEAE408-4C0A-437F-9DB3-054D83919850}')
    _idlflags_ = ['oleautomation']
IFDOGraphicsLayerRead._methods_ = [
    COMMETHOD([helpstring(u'Generates graphic elements from the annotation features.  The optional envelope specifies a bounding box.  The display is used for converting from map units.')], HRESULT, 'GenerateGraphics',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'box' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' ),
              ( ['in'], VARIANT_BOOL, 'useGroupSymbolElement' ),
              ( ['retval', 'out'], POINTER(POINTER(IEnumElement)), 'Elements' )),
    COMMETHOD([helpstring(u'Starts a graphics generation process from the annotation features.  The optional envelope specifies a bounding box.  The display is used for converting from map units.')], HRESULT, 'StartGeneratingGraphics',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'box' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], VARIANT_BOOL, 'withAttributes' ),
              ( ['in'], VARIANT_BOOL, 'useGroupSymbolElement' ),
              ( ['in'], VARIANT_BOOL, 'selectedRecordsOnly' )),
    COMMETHOD(['propget', helpstring(u'Generates the next graphic element in the graphics generation loop.  Returns a NULL element after the last annotation feature has been read.  Call only after StartGeneratingGraphics.')], HRESULT, 'NextGraphic',
              ( ['retval', 'out'], POINTER(POINTER(IElement)), 'Element' )),
    COMMETHOD([helpstring(u'Generates the next feature and graphic element in the graphics generation loop.  Returns a NULL feature and element after the last annotation feature has been read.  Call only after StartGeneratingGraphics.')], HRESULT, 'NextFeatureAndGraphic',
              ( ['out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeature)), 'Feature' ),
              ( ['out'], POINTER(POINTER(IElement)), 'Element' )),
]
################################################################
## code template for IFDOGraphicsLayerRead implementation
##class IFDOGraphicsLayerRead_Impl(object):
##    def StartGeneratingGraphics(self, box, Display, withAttributes, useGroupSymbolElement, selectedRecordsOnly):
##        u'Starts a graphics generation process from the annotation features.  The optional envelope specifies a bounding box.  The display is used for converting from map units.'
##        #return 
##
##    @property
##    def NextGraphic(self):
##        u'Generates the next graphic element in the graphics generation loop.  Returns a NULL element after the last annotation feature has been read.  Call only after StartGeneratingGraphics.'
##        #return Element
##
##    def GenerateGraphics(self, box, Display, pTrackCancel, useGroupSymbolElement):
##        u'Generates graphic elements from the annotation features.  The optional envelope specifies a bounding box.  The display is used for converting from map units.'
##        #return Elements
##
##    def NextFeatureAndGraphic(self):
##        u'Generates the next feature and graphic element in the graphics generation loop.  Returns a NULL feature and element after the last annotation feature has been read.  Call only after StartGeneratingGraphics.'
##        #return Feature, Element
##


# values for enumeration 'acFillType'
acSolidFill = 0
acBDiagonalFill = 1
acFDiagonalFill = 2
acCrossFill = 3
acDiagCrossFill = 4
acHorizontalFill = 5
acVerticalFill = 6
acGrayFill = 7
acLightGrayFill = 8
acDarkGrayFill = 9
acFillType = c_int # enum

# values for enumeration 'esriBufferSpatialReferenceType'
esriMapSpatialReference = 0
esriFeatureClassSpatialReference = 1
esriFeatureOptimizedSpatialReference = 2
esriFeatureSetOptimizedSpatialReference = 3
esriOtherSpatialReference = 4
esriBufferSpatialReferenceType = c_int # enum
class IMixedFontGridLabel(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that define the appearance of the secondary group of digits in the grid label.'
    _iid_ = GUID('{CE41C509-9DF9-11D2-AADE-000000000000}')
    _idlflags_ = ['oleautomation']
IMixedFontGridLabel._methods_ = [
    COMMETHOD(['propget', helpstring(u'The number of digits that are displayed in the secondary font and color.')], HRESULT, 'NumGroupedDigits',
              ( ['retval', 'out'], POINTER(c_short), 'numGrouped' )),
    COMMETHOD(['propput', helpstring(u'The number of digits that are displayed in the secondary font and color.')], HRESULT, 'NumGroupedDigits',
              ( ['in'], c_short, 'numGrouped' )),
    COMMETHOD(['propget', helpstring(u'The font used for the second group of digits.')], HRESULT, 'SecondaryFont',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IFontDisp)), 'Font' )),
    COMMETHOD(['propput', helpstring(u'The font used for the second group of digits.')], HRESULT, 'SecondaryFont',
              ( ['in'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IFontDisp), 'Font' )),
    COMMETHOD(['propget', helpstring(u'The color of the second group of digits.')], HRESULT, 'SecondaryColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'The color of the second group of digits.')], HRESULT, 'SecondaryColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
]
################################################################
## code template for IMixedFontGridLabel implementation
##class IMixedFontGridLabel_Impl(object):
##    def _get(self):
##        u'The font used for the second group of digits.'
##        #return Font
##    def _set(self, Font):
##        u'The font used for the second group of digits.'
##    SecondaryFont = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The number of digits that are displayed in the secondary font and color.'
##        #return numGrouped
##    def _set(self, numGrouped):
##        u'The number of digits that are displayed in the secondary font and color.'
##    NumGroupedDigits = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The color of the second group of digits.'
##        #return Color
##    def _set(self, Color):
##        u'The color of the second group of digits.'
##    SecondaryColor = property(_get, _set, doc = _set.__doc__)
##

class IExportSupport(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to export support members.'
    _iid_ = GUID('{F6448010-3CC8-435E-B042-540E9A328F3B}')
    _idlflags_ = ['oleautomation']
class IFeatureExportInfoGenerator(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that help generate export information for features.'
    _iid_ = GUID('{2B13A65C-4E76-4FF5-8DE4-CEC8604BA8E5}')
    _idlflags_ = ['oleautomation']
IExportSupport._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The helper oject to generate export information.')], HRESULT, 'ExportInfo',
              ( ['in'], POINTER(IFeatureExportInfoGenerator), 'rhs' )),
]
################################################################
## code template for IExportSupport implementation
##class IExportSupport_Impl(object):
##    def ExportInfo(self, rhs):
##        u'The helper oject to generate export information.'
##        #return 
##

class WMSGroupLayer(CoClass):
    u'A container for the display of WMS group layers.'
    _reg_clsid_ = GUID('{F677BA62-7CA7-400A-9C59-62930A282CEB}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IIdentifyGroup(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Indicator interface identifying a layer as a top-level group for identify.'
    _iid_ = GUID('{543ECD8A-B231-4FD1-A114-3A69F983933E}')
    _idlflags_ = ['oleautomation']
WMSGroupLayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IWMSGroupLayer, ICompositeLayer, ICompositeLayer2, ILayer, ILayer2, ILayerPosition, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeoDataset, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, IIdentify, IIdentify2, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IConnectionPointContainer, IPublishLayer, ILayerDrawingProperties, ILayerGeneralProperties, IIdentifyGroup]
WMSGroupLayer._outgoing_interfaces_ = [ILayerEvents]


# values for enumeration 'esriMaplexRotationAlignmentType'
esriMaplexRotationAlignmentStraight = 0
esriMaplexRotationAlignmentHorizontal = 1
esriMaplexRotationAlignmentPerpendicular = 2
esriMaplexRotationAlignmentType = c_int # enum
class IAnnotationLayerFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that create/find annotation layers.'
    _iid_ = GUID('{E1474078-0272-46DC-9B51-08E2997F4A43}')
    _idlflags_ = ['oleautomation']
class IAnnotateLayerPropertiesCollection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that work with a collection of annotation settings for a feature layer.'
    _iid_ = GUID('{1D5849F2-0D33-11D2-A26F-080009B6F22B}')
    _idlflags_ = ['oleautomation']
class IGraphicsLayerScale(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the Graphics Layer Scale.'
    _iid_ = GUID('{85C3DAC5-6578-11D3-9FBA-00C04F6BC6A5}')
    _idlflags_ = ['oleautomation']
IAnnotationLayerFactory._methods_ = [
    COMMETHOD([helpstring(u'Creates a new annotation feature class and returns a layer for it.')], HRESULT, 'CreateAnnotationLayer',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureWorkspace), 'Workspace' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureDataset), 'FeatureDataset' ),
              ( ['in'], BSTR, 'annotationClassName' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeometryDef), 'pGeometryDef' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClass), 'pAssociatedFeatureClass' ),
              ( ['in'], POINTER(IAnnotateLayerPropertiesCollection), 'annoLayerProps' ),
              ( ['in'], POINTER(IGraphicsLayerScale), 'ReferenceScale' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbolCollection), 'SymbolCollection' ),
              ( ['in'], VARIANT_BOOL, 'AutoCreate' ),
              ( ['in'], VARIANT_BOOL, 'UpdateOnShapeChange' ),
              ( ['in'], VARIANT_BOOL, 'RequireSymbolID' ),
              ( ['in'], VARIANT_BOOL, 'AllowSymbolOverrides' ),
              ( ['in'], POINTER(IOverposterProperties), 'OverposterProperties' ),
              ( ['in'], BSTR, 'configKeyword' ),
              ( ['retval', 'out'], POINTER(POINTER(IAnnotationLayer)), 'Layer' )),
    COMMETHOD([helpstring(u'Opens an annotation feature class and returns a layer for it.')], HRESULT, 'OpenAnnotationLayer',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureWorkspace), 'Workspace' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureDataset), 'FeatureDataset' ),
              ( ['in'], BSTR, 'annotationClassName' ),
              ( ['retval', 'out'], POINTER(POINTER(IAnnotationLayer)), 'Layer' )),
    COMMETHOD([helpstring(u'Returns the names of existing annotation feature classes.')], HRESULT, 'FindAnnotationFeatureClassNames',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureWorkspace), 'Workspace' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IEnumBSTR)), 'names' )),
]
################################################################
## code template for IAnnotationLayerFactory implementation
##class IAnnotationLayerFactory_Impl(object):
##    def FindAnnotationFeatureClassNames(self, Workspace):
##        u'Returns the names of existing annotation feature classes.'
##        #return names
##
##    def OpenAnnotationLayer(self, Workspace, FeatureDataset, annotationClassName):
##        u'Opens an annotation feature class and returns a layer for it.'
##        #return Layer
##
##    def CreateAnnotationLayer(self, Workspace, FeatureDataset, annotationClassName, pGeometryDef, pAssociatedFeatureClass, annoLayerProps, ReferenceScale, SymbolCollection, AutoCreate, UpdateOnShapeChange, RequireSymbolID, AllowSymbolOverrides, OverposterProperties, configKeyword):
##        u'Creates a new annotation feature class and returns a layer for it.'
##        #return Layer
##


# values for enumeration 'acGeometryType'
acGeometryPoint = 0
acGeometryLine = 1
acGeometryPolygon = 2
acGeometryNull = 3
acGeometryType = c_int # enum
class IFeatureCursorBuffer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the buffering of features.'
    _iid_ = GUID('{A2983336-7E7C-11D2-A084-0000F8775BF9}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'esriBufferType'
esriBufferAll = 0
esriBufferOutside = 1
esriBufferInside = 2
esriBufferOutsideIncludeInside = 3
esriBufferInsideExcludeRing = 4
esriBufferType = c_int # enum
IFeatureCursorBuffer._methods_ = [
    COMMETHOD(['propputref', helpstring(u'Feature cursor of features to buffer (overrides GraphicsLayer).')], HRESULT, 'FeatureCursor',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureCursor), 'rhs' )),
    COMMETHOD([helpstring(u'Graphics layer of elements to buffer (overrides FeatureCursor).')], HRESULT, 'GraphicsLayer',
              ( ['in'], POINTER(IGraphicsLayer), 'pGraphicsLayer' ),
              ( ['in'], VARIANT_BOOL, 'Selected' )),
    COMMETHOD(['propput', helpstring(u'Indicates if overlapping buffered features should be dissolved.')], HRESULT, 'Dissolve',
              ( ['in'], VARIANT_BOOL, 'rhs' )),
    COMMETHOD(['propput', helpstring(u'Constant buffer distance.')], HRESULT, 'ValueDistance',
              ( ['in'], c_double, 'rhs' )),
    COMMETHOD(['propput', helpstring(u'Field specifying distance to buffer on.')], HRESULT, 'FieldDistance',
              ( ['in'], BSTR, 'rhs' )),
    COMMETHOD(['propput', helpstring(u'Multiple rings specifying distance to buffer on.')], HRESULT, 'RingDistance',
              ( ['in'], c_int, 'numberOfRings' ),
              ( ['in'], c_double, 'rhs' )),
    COMMETHOD(['propputref', helpstring(u'Projection of buffered features.')], HRESULT, 'SpatialReference',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'rhs' )),
    COMMETHOD(['propput', helpstring(u'Conversion units, from map units to buffer units.')], HRESULT, 'Units',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits, 'MapUnits' ),
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits, 'rhs' )),
    COMMETHOD(['propput', helpstring(u'Indicates how to buffer polygon features.')], HRESULT, 'PolygonBufferType',
              ( ['in'], esriBufferType, 'rhs' )),
    COMMETHOD(['propputref', helpstring(u'TrackCancel used when buffering.')], HRESULT, 'CancelTrack',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'rhs' )),
    COMMETHOD(['propget', helpstring(u'Enumerator of buffered features.')], HRESULT, 'BufferedGeometry',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnumGeometry)), 'ppEnumGeometry' )),
    COMMETHOD([helpstring(u'Buffers features to a new and existing feature class.')], HRESULT, 'Buffer',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClassName), 'pNewLocationName' )),
]
################################################################
## code template for IFeatureCursorBuffer implementation
##class IFeatureCursorBuffer_Impl(object):
##    def _set(self, rhs):
##        u'Field specifying distance to buffer on.'
##    FieldDistance = property(fset = _set, doc = _set.__doc__)
##
##    def GraphicsLayer(self, pGraphicsLayer, Selected):
##        u'Graphics layer of elements to buffer (overrides FeatureCursor).'
##        #return 
##
##    def _set(self, rhs):
##        u'Constant buffer distance.'
##    ValueDistance = property(fset = _set, doc = _set.__doc__)
##
##    def CancelTrack(self, rhs):
##        u'TrackCancel used when buffering.'
##        #return 
##
##    def _set(self, rhs):
##        u'Indicates how to buffer polygon features.'
##    PolygonBufferType = property(fset = _set, doc = _set.__doc__)
##
##    def _set(self, numberOfRings, rhs):
##        u'Multiple rings specifying distance to buffer on.'
##    RingDistance = property(fset = _set, doc = _set.__doc__)
##
##    def SpatialReference(self, rhs):
##        u'Projection of buffered features.'
##        #return 
##
##    @property
##    def BufferedGeometry(self):
##        u'Enumerator of buffered features.'
##        #return ppEnumGeometry
##
##    def Buffer(self, pNewLocationName):
##        u'Buffers features to a new and existing feature class.'
##        #return 
##
##    def _set(self, MapUnits, rhs):
##        u'Conversion units, from map units to buffer units.'
##    Units = property(fset = _set, doc = _set.__doc__)
##
##    def FeatureCursor(self, rhs):
##        u'Feature cursor of features to buffer (overrides GraphicsLayer).'
##        #return 
##
##    def _set(self, rhs):
##        u'Indicates if overlapping buffered features should be dissolved.'
##    Dissolve = property(fset = _set, doc = _set.__doc__)
##


# values for enumeration 'acCapType'
acRoundCap = 0
acButtCap = 1
acSquareCap = 2
acCapType = c_int # enum

# values for enumeration 'acLineType'
acSolidLine = 0
acDashLine = 1
acDotLine = 2
acDashDotLine = 3
acDashDotDotLine = 4
acLineType = c_int # enum
IIdentifyGroup._methods_ = [
]
################################################################
## code template for IIdentifyGroup implementation
##class IIdentifyGroup_Impl(object):

class IACFeatureLayerAdmin(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to connecting to an ArcIMS feature layer.'
    _iid_ = GUID('{822BC633-EAF0-4BFE-B61D-6D6328F3841F}')
    _idlflags_ = ['oleautomation']
IACFeatureLayerAdmin._methods_ = [
    COMMETHOD([helpstring(u'Connects to the feature layer.')], HRESULT, 'Connect',
              ( ['in'], BSTR, 'LayerInfo' ),
              ( ['in'], POINTER(comtypes.gen._746F6817_89BB_4490_9829_83CA25FD505A_0_10_2.IIMSAxlRequest), 'request' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'spatialRef' ),
              ( ['in'], comtypes.gen._746F6817_89BB_4490_9829_83CA25FD505A_0_10_2.acMapUnits, 'MapUnits' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClass), 'FeatureClass' )),
]
################################################################
## code template for IACFeatureLayerAdmin implementation
##class IACFeatureLayerAdmin_Impl(object):
##    def Connect(self, LayerInfo, request, spatialRef, MapUnits, FeatureClass):
##        u'Connects to the feature layer.'
##        #return 
##

class IRasterClassifyUIProperties(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the classification properties in the UI.'
    _iid_ = GUID('{75F3C010-7A8C-11D3-9C4F-00C04F5AA6ED}')
    _idlflags_ = ['oleautomation']
IRasterClassifyUIProperties._methods_ = [
    COMMETHOD(['propget', helpstring(u'Classification method.')], HRESULT, 'ClassificationMethod',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IUID)), 'ppClsid' )),
    COMMETHOD(['propputref', helpstring(u'Classification method.')], HRESULT, 'ClassificationMethod',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IUID), 'ppClsid' )),
    COMMETHOD(['propget', helpstring(u'Color ramp name.')], HRESULT, 'ColorRamp',
              ( ['retval', 'out'], POINTER(BSTR), 'ColorRamp' )),
    COMMETHOD(['propput', helpstring(u'Color ramp name.')], HRESULT, 'ColorRamp',
              ( ['in'], BSTR, 'ColorRamp' )),
    COMMETHOD(['propget', helpstring(u'Number format for labels.')], HRESULT, 'NumberFormat',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.INumberFormat)), 'Format' )),
    COMMETHOD(['propputref', helpstring(u'Number format for labels.')], HRESULT, 'NumberFormat',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.INumberFormat), 'Format' )),
    COMMETHOD(['propget', helpstring(u'Indicates if gaps between classes are shown.')], HRESULT, 'ShowClassGaps',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'showGaps' )),
    COMMETHOD(['propput', helpstring(u'Indicates if gaps between classes are shown.')], HRESULT, 'ShowClassGaps',
              ( ['in'], VARIANT_BOOL, 'showGaps' )),
    COMMETHOD(['propget', helpstring(u'Deviation interval. Range is 0 to 1, where 0 means no deviation is used.')], HRESULT, 'DeviationInterval',
              ( ['retval', 'out'], POINTER(c_double), 'Interval' )),
    COMMETHOD(['propput', helpstring(u'Deviation interval. Range is 0 to 1, where 0 means no deviation is used.')], HRESULT, 'DeviationInterval',
              ( ['in'], c_double, 'Interval' )),
]
################################################################
## code template for IRasterClassifyUIProperties implementation
##class IRasterClassifyUIProperties_Impl(object):
##    def _get(self):
##        u'Deviation interval. Range is 0 to 1, where 0 means no deviation is used.'
##        #return Interval
##    def _set(self, Interval):
##        u'Deviation interval. Range is 0 to 1, where 0 means no deviation is used.'
##    DeviationInterval = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if gaps between classes are shown.'
##        #return showGaps
##    def _set(self, showGaps):
##        u'Indicates if gaps between classes are shown.'
##    ShowClassGaps = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Color ramp name.'
##        #return ColorRamp
##    def _set(self, ColorRamp):
##        u'Color ramp name.'
##    ColorRamp = property(_get, _set, doc = _set.__doc__)
##
##    def NumberFormat(self, Format):
##        u'Number format for labels.'
##        #return 
##
##    def ClassificationMethod(self, ppClsid):
##        u'Classification method.'
##        #return 
##

IAnnotationFeature._methods_ = [
    COMMETHOD(['propget', helpstring(u'The annotation element for the feature.')], HRESULT, 'Annotation',
              ( ['retval', 'out'], POINTER(POINTER(IElement)), 'Element' )),
    COMMETHOD(['propput', helpstring(u'The annotation element for the feature.')], HRESULT, 'Annotation',
              ( ['in'], POINTER(IElement), 'Element' )),
    COMMETHOD(['propput', helpstring(u'Feature ID.')], HRESULT, 'LinkedFeatureID',
              ( ['in'], c_int, 'FID' )),
    COMMETHOD(['propget', helpstring(u'Feature ID.')], HRESULT, 'LinkedFeatureID',
              ( ['retval', 'out'], POINTER(c_int), 'FID' )),
]
################################################################
## code template for IAnnotationFeature implementation
##class IAnnotationFeature_Impl(object):
##    def _get(self):
##        u'Feature ID.'
##        #return FID
##    def _set(self, FID):
##        u'Feature ID.'
##    LinkedFeatureID = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The annotation element for the feature.'
##        #return Element
##    def _set(self, Element):
##        u'The annotation element for the feature.'
##    Annotation = property(_get, _set, doc = _set.__doc__)
##

class MapServerFindResult(CoClass):
    u"The Map Server Find Result coclass provides information about a 'find result'."
    _reg_clsid_ = GUID('{DF9ADEE0-54B2-43D7-90BF-B2CB9BCC3735}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IMapServerFindResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Map Server Find Result Interface.'
    _iid_ = GUID('{6EC9D9F9-5E0F-4067-9783-07B162C3B868}')
    _idlflags_ = ['oleautomation']
MapServerFindResult._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMapServerFindResult, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

class MapServerIdentifyResult(CoClass):
    u"The Map Server Identify Result coclass provides information about an 'identify result'."
    _reg_clsid_ = GUID('{8AEC469A-6795-454A-9C0B-E47D6DCC6C95}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IMapServerIdentifyResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Map Server Identify Result Interface.'
    _iid_ = GUID('{6FA7FC12-C195-4F24-A0D6-7FC0CC84EB01}')
    _idlflags_ = ['oleautomation']
class IMapServerIdentifyResult2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Map Server Identify Result Interface.'
    _iid_ = GUID('{D1EC29D0-F8EC-4F6E-8D6C-34101FAB98DE}')
    _idlflags_ = ['oleautomation']
MapServerIdentifyResult._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMapServerIdentifyResult, IMapServerIdentifyResult2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersionSupportGEN]

class ILayerFile(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the reading and writing of layer document files.'
    _iid_ = GUID('{58478051-486A-4093-A620-A558AF78BAF5}')
    _idlflags_ = ['oleautomation']
ILayerFile._methods_ = [
    COMMETHOD(['propget', helpstring(u'The name of the layer file that the LayerFile coclass is linked to.')], HRESULT, 'Filename',
              ( ['retval', 'out'], POINTER(BSTR), 'sFile' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the file is a valid layer file.')], HRESULT, 'IsLayerFile',
              ( ['in'], BSTR, 'sFile' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsLayerFile' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer file is present.')], HRESULT, 'IsPresent',
              ( ['in'], BSTR, 'sFile' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsPresent' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer file is read only.')], HRESULT, 'IsReadOnly',
              ( ['in'], BSTR, 'sFile' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsReadOnly' )),
    COMMETHOD(['propget', helpstring(u'The Layer object. If no layer object is stored in the layer file this returns NULL.')], HRESULT, 'Layer',
              ( ['retval', 'out'], POINTER(POINTER(ILayer)), 'ppLayer' )),
    COMMETHOD(['propget', helpstring(u'The thumbnail stored in the layer file. If this is empty E_FAIL is returned.')], HRESULT, 'Thumbnail',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IPicture)), 'ppPicture' )),
    COMMETHOD([helpstring(u'Creates and opens a new layer File in preparation for the contents to be retrieve or updated.')], HRESULT, 'New',
              ( ['in'], BSTR, 'sFile' )),
    COMMETHOD([helpstring(u'Open the layer file in preparation for the contents to be retrieved or updated.')], HRESULT, 'Open',
              ( ['in'], BSTR, 'sFile' )),
    COMMETHOD([helpstring(u'Close the layer file.')], HRESULT, 'Close'),
    COMMETHOD([helpstring(u'Replace the contents of the layer file.')], HRESULT, 'ReplaceContents',
              ( ['in'], POINTER(ILayer), 'pLayer' )),
    COMMETHOD([helpstring(u'Save the contents of the layer file to the bound file.')], HRESULT, 'Save'),
    COMMETHOD([helpstring(u'Save the contents of the layer file to the specified file name.')], HRESULT, 'SaveAs',
              ( ['in'], BSTR, 'sFile' )),
]
################################################################
## code template for ILayerFile implementation
##class ILayerFile_Impl(object):
##    def ReplaceContents(self, pLayer):
##        u'Replace the contents of the layer file.'
##        #return 
##
##    @property
##    def IsLayerFile(self, sFile):
##        u'Indicates if the file is a valid layer file.'
##        #return IsLayerFile
##
##    def SaveAs(self, sFile):
##        u'Save the contents of the layer file to the specified file name.'
##        #return 
##
##    @property
##    def IsPresent(self, sFile):
##        u'Indicates if the layer file is present.'
##        #return IsPresent
##
##    @property
##    def Layer(self):
##        u'The Layer object. If no layer object is stored in the layer file this returns NULL.'
##        #return ppLayer
##
##    @property
##    def Filename(self):
##        u'The name of the layer file that the LayerFile coclass is linked to.'
##        #return sFile
##
##    @property
##    def IsReadOnly(self, sFile):
##        u'Indicates if the layer file is read only.'
##        #return IsReadOnly
##
##    def Close(self):
##        u'Close the layer file.'
##        #return 
##
##    def New(self, sFile):
##        u'Creates and opens a new layer File in preparation for the contents to be retrieve or updated.'
##        #return 
##
##    def Save(self):
##        u'Save the contents of the layer file to the bound file.'
##        #return 
##
##    def Open(self, sFile):
##        u'Open the layer file in preparation for the contents to be retrieved or updated.'
##        #return 
##
##    @property
##    def Thumbnail(self):
##        u'The thumbnail stored in the layer file. If this is empty E_FAIL is returned.'
##        #return ppPicture
##

class LineSymbolStyleGalleryClass(CoClass):
    u'Use to create new Line Symbol items.'
    _reg_clsid_ = GUID('{C2EAB0A2-9C06-11D1-A1C6-080009B6F22B}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
LineSymbolStyleGalleryClass._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IStyleGalleryClass, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IStyleGalleryClass2]

class MarkerSymbolStyleGalleryClass(CoClass):
    u'Use to create new Marker Symbol items.'
    _reg_clsid_ = GUID('{C2EAB0A3-9C06-11D1-A1C6-080009B6F22B}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
MarkerSymbolStyleGalleryClass._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IStyleGalleryClass, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IStyleGalleryClass2]

IGraphicsLayerScale._methods_ = [
    COMMETHOD(['propget', helpstring(u'Reference scale of the layer as a representative fraction.')], HRESULT, 'ReferenceScale',
              ( ['retval', 'out'], POINTER(c_double), 'pScaleRF' )),
    COMMETHOD(['propput', helpstring(u'Reference scale of the layer as a representative fraction.')], HRESULT, 'ReferenceScale',
              ( ['in'], c_double, 'pScaleRF' )),
    COMMETHOD(['propget', helpstring(u'Units the reference scale is in.')], HRESULT, 'Units',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits), 'Units' )),
    COMMETHOD(['propput', helpstring(u'Units the reference scale is in.')], HRESULT, 'Units',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits, 'Units' )),
]
################################################################
## code template for IGraphicsLayerScale implementation
##class IGraphicsLayerScale_Impl(object):
##    def _get(self):
##        u'Units the reference scale is in.'
##        #return Units
##    def _set(self, Units):
##        u'Units the reference scale is in.'
##    Units = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Reference scale of the layer as a representative fraction.'
##        #return pScaleRF
##    def _set(self, pScaleRF):
##        u'Reference scale of the layer as a representative fraction.'
##    ReferenceScale = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'acGradientFillType'
acBDiagonalGradientFill = 0
acFDiagonalGradientFill = 1
acHorizontalGradientFill = 2
acVerticalGradientFill = 3
acGradientFillType = c_int # enum
class IGraphicsContainerSelect(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control graphic container selection.'
    _iid_ = GUID('{D09411D2-4BB4-11D1-B6CC-080009B996CC}')
    _idlflags_ = ['oleautomation']
IGraphicsContainerSelect._methods_ = [
    COMMETHOD([helpstring(u'Selects the specified element.')], HRESULT, 'SelectElement',
              ( ['in'], POINTER(IElement), 'Element' )),
    COMMETHOD([helpstring(u'Selects the specified elements.')], HRESULT, 'SelectElements',
              ( ['in'], POINTER(IEnumElement), 'Elements' )),
    COMMETHOD([helpstring(u'Selects all elements.')], HRESULT, 'SelectAllElements'),
    COMMETHOD([helpstring(u'Unselects the specified element.')], HRESULT, 'UnselectElement',
              ( ['in'], POINTER(IElement), 'Element' )),
    COMMETHOD([helpstring(u'Unselects the specified elements.')], HRESULT, 'UnselectElements',
              ( ['in'], POINTER(IEnumElement), 'Elements' )),
    COMMETHOD([helpstring(u'Unselects all elements.')], HRESULT, 'UnselectAllElements'),
    COMMETHOD(['propget', helpstring(u'The selected elements.')], HRESULT, 'SelectedElements',
              ( ['retval', 'out'], POINTER(POINTER(IEnumElement)), 'Elements' )),
    COMMETHOD(['propget', helpstring(u'The number of selected elements.')], HRESULT, 'ElementSelectionCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD([helpstring(u'Returns the nth selected element.  Use Selection count to get the number of selected elements.')], HRESULT, 'SelectedElement',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IElement)), 'Element' )),
    COMMETHOD([helpstring(u'Returns the tracker for the nth selected element.  Use Selection count to get the number of selected elements.')], HRESULT, 'SelectionTracker',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISelectionTracker)), 'tracker' )),
    COMMETHOD([helpstring(u'Indicates if the element is selected.')], HRESULT, 'ElementSelected',
              ( ['in'], POINTER(IElement), 'Element' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'ElementSelected' )),
    COMMETHOD(['propget', helpstring(u'Dominant element.')], HRESULT, 'DominantElement',
              ( ['retval', 'out'], POINTER(POINTER(IElement)), 'dominantItem' )),
    COMMETHOD(['propputref', helpstring(u'Dominant element.')], HRESULT, 'DominantElement',
              ( ['in'], POINTER(IElement), 'dominantItem' )),
    COMMETHOD(['propget', helpstring(u'The bounds of the selection.')], HRESULT, 'SelectionBounds',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'Bounds' )),
]
################################################################
## code template for IGraphicsContainerSelect implementation
##class IGraphicsContainerSelect_Impl(object):
##    def SelectedElement(self, Index):
##        u'Returns the nth selected element.  Use Selection count to get the number of selected elements.'
##        #return Element
##
##    def UnselectElement(self, Element):
##        u'Unselects the specified element.'
##        #return 
##
##    def SelectElement(self, Element):
##        u'Selects the specified element.'
##        #return 
##
##    @property
##    def SelectionBounds(self, Display):
##        u'The bounds of the selection.'
##        #return Bounds
##
##    def SelectAllElements(self):
##        u'Selects all elements.'
##        #return 
##
##    @property
##    def SelectedElements(self):
##        u'The selected elements.'
##        #return Elements
##
##    @property
##    def ElementSelectionCount(self):
##        u'The number of selected elements.'
##        #return Count
##
##    def ElementSelected(self, Element):
##        u'Indicates if the element is selected.'
##        #return ElementSelected
##
##    def UnselectElements(self, Elements):
##        u'Unselects the specified elements.'
##        #return 
##
##    def SelectionTracker(self, Index):
##        u'Returns the tracker for the nth selected element.  Use Selection count to get the number of selected elements.'
##        #return tracker
##
##    def DominantElement(self, dominantItem):
##        u'Dominant element.'
##        #return 
##
##    def SelectElements(self, Elements):
##        u'Selects the specified elements.'
##        #return 
##
##    def UnselectAllElements(self):
##        u'Unselects all elements.'
##        #return 
##

class TextSymbolStyleGalleryClass(CoClass):
    u'Use to create new Text Symbol items.'
    _reg_clsid_ = GUID('{C2EAB0A4-9C06-11D1-A1C6-080009B6F22B}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
TextSymbolStyleGalleryClass._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IStyleGalleryClass, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IStyleGalleryClass2]

class IGroupElement2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the Group element.'
    _iid_ = GUID('{980E4829-83F1-42DD-A1BD-1B30A1824DE2}')
    _idlflags_ = ['oleautomation']
IGroupElement2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Elements in the group.')], HRESULT, 'Elements',
              ( ['retval', 'out'], POINTER(POINTER(IEnumElement)), 'Elements' )),
    COMMETHOD(['propputref', helpstring(u'Elements in the group.')], HRESULT, 'Elements',
              ( ['in'], POINTER(IEnumElement), 'Elements' )),
    COMMETHOD(['propget', helpstring(u'Number of elements in the group.')], HRESULT, 'ElementCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'Element at the given index of the group.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IElement)), 'Element' )),
    COMMETHOD([helpstring(u'Adds the given element to the group.')], HRESULT, 'AddElement',
              ( ['in'], POINTER(IElement), 'Element' )),
    COMMETHOD([helpstring(u'Removes the given element from the group.')], HRESULT, 'DeleteElement',
              ( ['in'], POINTER(IElement), 'Element' )),
    COMMETHOD([helpstring(u'Removes all elements from the group.')], HRESULT, 'ClearElements'),
    COMMETHOD([helpstring(u'Let the group know that there has been a change in one or more of the sub-elements.')], HRESULT, 'Refresh'),
]
################################################################
## code template for IGroupElement2 implementation
##class IGroupElement2_Impl(object):
##    def ClearElements(self):
##        u'Removes all elements from the group.'
##        #return 
##
##    def Elements(self, Elements):
##        u'Elements in the group.'
##        #return 
##
##    def Refresh(self):
##        u'Let the group know that there has been a change in one or more of the sub-elements.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'Element at the given index of the group.'
##        #return Element
##
##    @property
##    def ElementCount(self):
##        u'Number of elements in the group.'
##        #return Count
##
##    def DeleteElement(self, Element):
##        u'Removes the given element from the group.'
##        #return 
##
##    def AddElement(self, Element):
##        u'Adds the given element to the group.'
##        #return 
##


# values for enumeration 'esriGlobeDocumentVersionInfo'
esriGlobeDocumentVersionInfoSuccess = 0
esriGlobeDocumentVersionInfoFail = 1
esriGlobeDocumentVersionInfoUnknown = 2
esriGlobeDocumentVersionInfo = c_int # enum
class LegendItemStyleGalleryClass(CoClass):
    u'Use to create new Legend items.'
    _reg_clsid_ = GUID('{61F8CCCE-1813-11D2-87A2-0000F8751720}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
LegendItemStyleGalleryClass._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IStyleGalleryClass, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IStyleGalleryClass2]

class CenterAndScale(CoClass):
    u'The Center And Scale coclass allows you to change the spatial extent of a map by specifying the center and scale.'
    _reg_clsid_ = GUID('{47AE7B9A-6744-4E44-8580-83ECBEA95F51}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IMapArea(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Map Area Interface.'
    _iid_ = GUID('{0220F7A0-AE3D-4CD3-B990-349AFD102789}')
    _idlflags_ = ['oleautomation']
class ICenterAndScale(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Center And Scale Map Area Interface.'
    _iid_ = GUID('{2A76D265-278E-4521-99AE-37C31F23B968}')
    _idlflags_ = ['oleautomation']
CenterAndScale._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMapArea, ICenterAndScale, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

class NorthArrowStyleGalleryClass(CoClass):
    u'Use to create new North Arrow symbols.'
    _reg_clsid_ = GUID('{61F8CCCC-1813-11D2-87A2-0000F8751720}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
NorthArrowStyleGalleryClass._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IStyleGalleryClass, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IStyleGalleryClass2]

class EngineIMSLayerFactory(CoClass):
    u'IMS Layer Factory.'
    _reg_clsid_ = GUID('{BC182F70-3976-4FC0-AB87-B1C3D8BC9F4A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
EngineIMSLayerFactory._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILayerFactory]

class IACMap(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to mebers that control the ArcIMS map service.'
    _iid_ = GUID('{74E45210-DFE6-11D3-9FF7-00C04F6BC6A5}')
    _idlflags_ = ['oleautomation']
class IACLayer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the ArcIMS layer.'
    _iid_ = GUID('{74E45211-DFE6-11D3-9FF7-00C04F6BC6A5}')
    _idlflags_ = ['oleautomation']
IACMap._methods_ = [
    COMMETHOD([helpstring(u'Sends an Axl request.')], HRESULT, 'SendAxlRequest',
              ( ['in'], BSTR, 'axl' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'TrackCancel' ),
              ( ['in'], VARIANT_BOOL, 'showConnectingAVI' ),
              ( ['in'], VARIANT_BOOL, 'processMessages' ),
              ( ['retval', 'out'], POINTER(BSTR), 'response' )),
    COMMETHOD([helpstring(u'Sends an Axl query request.')], HRESULT, 'SendAxlQueryRequest',
              ( ['in'], BSTR, 'axl' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'TrackCancel' ),
              ( ['in'], VARIANT_BOOL, 'showConnectingAVI' ),
              ( ['in'], VARIANT_BOOL, 'processMessages' ),
              ( ['retval', 'out'], POINTER(BSTR), 'response' )),
    COMMETHOD(['propget', helpstring(u'The background color.')], HRESULT, 'BackgroundColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'The background color.')], HRESULT, 'BackgroundColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'The transparent color.')], HRESULT, 'TransparentColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'The transparent color.')], HRESULT, 'TransparentColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD([helpstring(u'The new image location as an URL.')], HRESULT, 'RequestImage',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'pExtent' ),
              ( ['in'], c_double, 'Dpi' ),
              ( ['in'], c_int, 'Width' ),
              ( ['in'], c_int, 'Height' ),
              ( ['in'], VARIANT_BOOL, 'ScaleSymbols' ),
              ( ['retval', 'out'], POINTER(BSTR), 'imageURL' )),
    COMMETHOD([helpstring(u'The new image location as an URL.  Call ImageRequestXml first.')], HRESULT, 'RequestImageWithXml',
              ( ['in'], BSTR, 'xml' ),
              ( ['retval', 'out'], POINTER(BSTR), 'imageURL' )),
    COMMETHOD(['propget', helpstring(u'The xml to request an image.')], HRESULT, 'ImageRequestXml',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'pExtent' ),
              ( ['in'], c_double, 'Dpi' ),
              ( ['in'], c_int, 'Width' ),
              ( ['in'], c_int, 'Height' ),
              ( ['in'], VARIANT_BOOL, 'ScaleSymbols' ),
              ( ['retval', 'out'], POINTER(BSTR), 'xml' )),
    COMMETHOD(['propget', helpstring(u'The number of layers in the ArcIMS service.')], HRESULT, 'LayerCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The layer at the given index.')], HRESULT, 'Layer',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IACLayer)), 'Layer' )),
    COMMETHOD([helpstring(u'Moves a layer to another position.')], HRESULT, 'MoveLayer',
              ( ['in'], POINTER(IACLayer), 'Layer' ),
              ( ['in'], c_int, 'toIndex' )),
    COMMETHOD(['propputref', helpstring(u'The spatial reference of the ArcIMS service.')], HRESULT, 'SpatialReference',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'rhs' )),
    COMMETHOD(['propget', helpstring(u'The native spatial reference of the data.')], HRESULT, 'NativeSpatialReference',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference)), 'SpatialReference' )),
    COMMETHOD(['propget', helpstring(u'The area of interest for the ArcIMS service.')], HRESULT, 'AreaOfInterest',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'envelope' )),
    COMMETHOD(['propget', helpstring(u'The map units for the ArcIMS service.')], HRESULT, 'MapUnits',
              ( ['retval', 'out'], POINTER(comtypes.gen._746F6817_89BB_4490_9829_83CA25FD505A_0_10_2.acMapUnits), 'MapUnits' )),
    COMMETHOD(['propget', helpstring(u'The maximum number of pixels allowed for an image print request.')], HRESULT, 'MaxPrintPixels',
              ( ['retval', 'out'], POINTER(c_int), 'pMaxPrintPixels' )),
]
################################################################
## code template for IACMap implementation
##class IACMap_Impl(object):
##    @property
##    def ImageRequestXml(self, pExtent, Dpi, Width, Height, ScaleSymbols):
##        u'The xml to request an image.'
##        #return xml
##
##    def SendAxlQueryRequest(self, axl, TrackCancel, showConnectingAVI, processMessages):
##        u'Sends an Axl query request.'
##        #return response
##
##    def SendAxlRequest(self, axl, TrackCancel, showConnectingAVI, processMessages):
##        u'Sends an Axl request.'
##        #return response
##
##    def _get(self):
##        u'The background color.'
##        #return Color
##    def _set(self, Color):
##        u'The background color.'
##    BackgroundColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The transparent color.'
##        #return Color
##    def _set(self, Color):
##        u'The transparent color.'
##    TransparentColor = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def MapUnits(self):
##        u'The map units for the ArcIMS service.'
##        #return MapUnits
##
##    @property
##    def Layer(self, Index):
##        u'The layer at the given index.'
##        #return Layer
##
##    def SpatialReference(self, rhs):
##        u'The spatial reference of the ArcIMS service.'
##        #return 
##
##    def MoveLayer(self, Layer, toIndex):
##        u'Moves a layer to another position.'
##        #return 
##
##    @property
##    def AreaOfInterest(self):
##        u'The area of interest for the ArcIMS service.'
##        #return envelope
##
##    @property
##    def MaxPrintPixels(self):
##        u'The maximum number of pixels allowed for an image print request.'
##        #return pMaxPrintPixels
##
##    def RequestImageWithXml(self, xml):
##        u'The new image location as an URL.  Call ImageRequestXml first.'
##        #return imageURL
##
##    @property
##    def LayerCount(self):
##        u'The number of layers in the ArcIMS service.'
##        #return Count
##
##    @property
##    def NativeSpatialReference(self):
##        u'The native spatial reference of the data.'
##        #return SpatialReference
##
##    def RequestImage(self, pExtent, Dpi, Width, Height, ScaleSymbols):
##        u'The new image location as an URL.'
##        #return imageURL
##

class IAOIBookmark(ISpatialBookmark):
    _case_insensitive_ = True
    u'Provides access to members that control an AOI bookmark.'
    _iid_ = GUID('{EE53528D-41C9-11D1-880A-080009EC732A}')
    _idlflags_ = ['oleautomation']
IAOIBookmark._methods_ = [
    COMMETHOD(['propget', helpstring(u'Location of the bookmark.')], HRESULT, 'Location',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'Location' )),
    COMMETHOD(['propputref', helpstring(u'Location of the bookmark.')], HRESULT, 'Location',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'Location' )),
]
################################################################
## code template for IAOIBookmark implementation
##class IAOIBookmark_Impl(object):
##    def Location(self, Location):
##        u'Location of the bookmark.'
##        #return 
##

class IACSimpleLineSymbol(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control ArcIMS simple line symbol.'
    _iid_ = GUID('{DA11971D-3DA1-4230-B119-82F95CC3A98A}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'acJoinType'
acRoundJoin = 0
acMiterJoin = 1
acBevelJoin = 2
acJoinType = c_int # enum
IACSimpleLineSymbol._methods_ = [
    COMMETHOD(['propget', helpstring(u'The line symbol width in pixels.')], HRESULT, 'Width',
              ( ['retval', 'out'], POINTER(c_int), 'Width' )),
    COMMETHOD(['propput', helpstring(u'The line symbol width in pixels.')], HRESULT, 'Width',
              ( ['in'], c_int, 'Width' )),
    COMMETHOD(['propget', helpstring(u'The line color.')], HRESULT, 'Color',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'The line color.')], HRESULT, 'Color',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'Indicates if labels can overlap this symbol.')], HRESULT, 'Overlap',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if labels can overlap this symbol.')], HRESULT, 'Overlap',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'The line type.')], HRESULT, 'LineType',
              ( ['retval', 'out'], POINTER(acLineType), 'Type' )),
    COMMETHOD(['propput', helpstring(u'The line type.')], HRESULT, 'LineType',
              ( ['in'], acLineType, 'Type' )),
    COMMETHOD(['propget', helpstring(u'The line cap type.')], HRESULT, 'CapType',
              ( ['retval', 'out'], POINTER(acCapType), 'Type' )),
    COMMETHOD(['propput', helpstring(u'The line cap type.')], HRESULT, 'CapType',
              ( ['in'], acCapType, 'Type' )),
    COMMETHOD(['propget', helpstring(u'The line join type.')], HRESULT, 'JoinType',
              ( ['retval', 'out'], POINTER(acJoinType), 'Type' )),
    COMMETHOD(['propput', helpstring(u'The line join type.')], HRESULT, 'JoinType',
              ( ['in'], acJoinType, 'Type' )),
]
################################################################
## code template for IACSimpleLineSymbol implementation
##class IACSimpleLineSymbol_Impl(object):
##    def _get(self):
##        u'The line color.'
##        #return Color
##    def _set(self, Color):
##        u'The line color.'
##    Color = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if labels can overlap this symbol.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if labels can overlap this symbol.'
##    Overlap = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The line join type.'
##        #return Type
##    def _set(self, Type):
##        u'The line join type.'
##    JoinType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The line symbol width in pixels.'
##        #return Width
##    def _set(self, Width):
##        u'The line symbol width in pixels.'
##    Width = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The line type.'
##        #return Type
##    def _set(self, Type):
##        u'The line type.'
##    LineType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The line cap type.'
##        #return Type
##    def _set(self, Type):
##        u'The line cap type.'
##    CapType = property(_get, _set, doc = _set.__doc__)
##

class IMapDescription2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the available properties of a map description object.'
    _iid_ = GUID('{EEA2FCEB-F704-4DE2-B2CF-289D1788CDAB}')
    _idlflags_ = ['oleautomation']
class ILayerDescriptions(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Layer Descriptions Interface.'
    _iid_ = GUID('{825BA060-417B-4E88-BDAF-329C17411C5C}')
    _idlflags_ = ['oleautomation']
class IGraphicElements(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the Graphic Elements object.'
    _iid_ = GUID('{35F37B7C-F2D0-485D-B0C5-AD260EF67132}')
    _idlflags_ = ['oleautomation']
IMapDescription2._methods_ = [
    COMMETHOD(['propget', helpstring(u'The name of the map (data frame).')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'The name of the map (data frame).')], HRESULT, 'Name',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'The display area of the map (data frame).')], HRESULT, 'MapArea',
              ( ['retval', 'out'], POINTER(POINTER(IMapArea)), 'area' )),
    COMMETHOD(['propput', helpstring(u'The display area of the map (data frame).')], HRESULT, 'MapArea',
              ( ['in'], POINTER(IMapArea), 'area' )),
    COMMETHOD(['propget', helpstring(u'A collection of Layer Description objects, each describing a layer within the map (data frame).')], HRESULT, 'LayerDescriptions',
              ( ['retval', 'out'], POINTER(POINTER(ILayerDescriptions)), 'LayerDescriptions' )),
    COMMETHOD(['propput', helpstring(u'A collection of Layer Description objects, each describing a layer within the map (data frame).')], HRESULT, 'LayerDescriptions',
              ( ['in'], POINTER(ILayerDescriptions), 'LayerDescriptions' )),
    COMMETHOD(['propget', helpstring(u'The angle/rotation of the map (data frame) in degrees, measured anti-clockwise.')], HRESULT, 'MapRotation',
              ( ['retval', 'out'], POINTER(c_double), 'angleDegrees' )),
    COMMETHOD(['propput', helpstring(u'The angle/rotation of the map (data frame) in degrees, measured anti-clockwise.')], HRESULT, 'MapRotation',
              ( ['in'], c_double, 'angleDegrees' )),
    COMMETHOD(['propget', helpstring(u'The spatial reference of the map (data frame).')], HRESULT, 'SpatialReference',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference)), 'SpatialReference' )),
    COMMETHOD(['propputref', helpstring(u'The spatial reference of the map (data frame).')], HRESULT, 'SpatialReference',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'SpatialReference' )),
    COMMETHOD(['propget', helpstring(u'Custom graphics.')], HRESULT, 'CustomGraphics',
              ( ['retval', 'out'], POINTER(POINTER(IGraphicElements)), 'Elements' )),
    COMMETHOD(['propput', helpstring(u'Custom graphics.')], HRESULT, 'CustomGraphics',
              ( ['in'], POINTER(IGraphicElements), 'Elements' )),
    COMMETHOD(['propget', helpstring(u'The color that is transparent (100 %).')], HRESULT, 'TransparentColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'The color that is transparent (100 %).')], HRESULT, 'TransparentColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'The default selection color.')], HRESULT, 'SelectionColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'The default selection color.')], HRESULT, 'SelectionColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'Background symbol of the Map.')], HRESULT, 'BackgroundSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IFillSymbol)), 'FillSymbol' )),
    COMMETHOD(['propput', helpstring(u'Background symbol of the Map.')], HRESULT, 'BackgroundSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IFillSymbol), 'FillSymbol' )),
]
################################################################
## code template for IMapDescription2 implementation
##class IMapDescription2_Impl(object):
##    def _get(self):
##        u'Custom graphics.'
##        #return Elements
##    def _set(self, Elements):
##        u'Custom graphics.'
##    CustomGraphics = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The name of the map (data frame).'
##        #return Name
##    def _set(self, Name):
##        u'The name of the map (data frame).'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The color that is transparent (100 %).'
##        #return Color
##    def _set(self, Color):
##        u'The color that is transparent (100 %).'
##    TransparentColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'A collection of Layer Description objects, each describing a layer within the map (data frame).'
##        #return LayerDescriptions
##    def _set(self, LayerDescriptions):
##        u'A collection of Layer Description objects, each describing a layer within the map (data frame).'
##    LayerDescriptions = property(_get, _set, doc = _set.__doc__)
##
##    def SpatialReference(self, SpatialReference):
##        u'The spatial reference of the map (data frame).'
##        #return 
##
##    def _get(self):
##        u'Background symbol of the Map.'
##        #return FillSymbol
##    def _set(self, FillSymbol):
##        u'Background symbol of the Map.'
##    BackgroundSymbol = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The default selection color.'
##        #return Color
##    def _set(self, Color):
##        u'The default selection color.'
##    SelectionColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The display area of the map (data frame).'
##        #return area
##    def _set(self, area):
##        u'The display area of the map (data frame).'
##    MapArea = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The angle/rotation of the map (data frame) in degrees, measured anti-clockwise.'
##        #return angleDegrees
##    def _set(self, angleDegrees):
##        u'The angle/rotation of the map (data frame) in degrees, measured anti-clockwise.'
##    MapRotation = property(_get, _set, doc = _set.__doc__)
##

class IACRenderer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Indicator interface that identifies ArcIMS renderers.'
    _iid_ = GUID('{E0969DA1-00F8-4237-AE9A-D7229642B380}')
    _idlflags_ = ['oleautomation']
IACRenderer._methods_ = [
]
################################################################
## code template for IACRenderer implementation
##class IACRenderer_Impl(object):

class IRasterCatalogDisplayProps(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that create or modify a raster catalog.'
    _iid_ = GUID('{27D0E52F-F170-4743-863A-4419FE70832D}')
    _idlflags_ = ['oleautomation']
IRasterCatalogDisplayProps._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates whether to display rasters.')], HRESULT, 'DisplayRasters',
              ( ['retval', 'out'], POINTER(c_int), 'pNum' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to display rasters.')], HRESULT, 'DisplayRasters',
              ( ['in'], c_int, 'pNum' )),
    COMMETHOD(['propget', helpstring(u'The symbol of the layer.')], HRESULT, 'Symbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol)), 'ppSymbol' )),
    COMMETHOD(['propputref', helpstring(u'The symbol of the layer.')], HRESULT, 'Symbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol), 'ppSymbol' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the scale is use to control wireframe/raster display transition.')], HRESULT, 'UseScale',
              ( ['in'], VARIANT_BOOL, 'b' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the scale is use to control wireframe/raster display transition.')], HRESULT, 'UseScale',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'b' )),
    COMMETHOD(['propput', helpstring(u'The scale value to transition between wireframe and raster display.')], HRESULT, 'TransitionScale',
              ( ['in'], c_double, 'Scale' )),
    COMMETHOD(['propget', helpstring(u'The scale value to transition between wireframe and raster display.')], HRESULT, 'TransitionScale',
              ( ['retval', 'out'], POINTER(c_double), 'Scale' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the display should redraw the layer.')], HRESULT, 'RedrawDisplay',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'b' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the display should redraw the layer.')], HRESULT, 'RedrawDisplay',
              ( ['in'], VARIANT_BOOL, 'b' )),
    COMMETHOD(['propget', helpstring(u'The time in millisecond to delay the drawing of each raster.')], HRESULT, 'DelayDraw',
              ( ['retval', 'out'], POINTER(c_int), 'ms' )),
    COMMETHOD(['propput', helpstring(u'The time in millisecond to delay the drawing of each raster.')], HRESULT, 'DelayDraw',
              ( ['in'], c_int, 'ms' )),
    COMMETHOD(['propget', helpstring(u'Resampling method for displaying a raster.')], HRESULT, 'ResamplingType',
              ( ['retval', 'out'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.rstResamplingTypes), 'pResamplingType' )),
    COMMETHOD(['propput', helpstring(u'Resampling method for displaying a raster.')], HRESULT, 'ResamplingType',
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.rstResamplingTypes, 'pResamplingType' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to draw the rasters only.')], HRESULT, 'DrawRastersOnly',
              ( ['in'], VARIANT_BOOL, 'b' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to draw the rasters only.')], HRESULT, 'DrawRastersOnly',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'b' )),
]
################################################################
## code template for IRasterCatalogDisplayProps implementation
##class IRasterCatalogDisplayProps_Impl(object):
##    def _get(self):
##        u'Indicates whether the scale is use to control wireframe/raster display transition.'
##        #return b
##    def _set(self, b):
##        u'Indicates whether the scale is use to control wireframe/raster display transition.'
##    UseScale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The time in millisecond to delay the drawing of each raster.'
##        #return ms
##    def _set(self, ms):
##        u'The time in millisecond to delay the drawing of each raster.'
##    DelayDraw = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The scale value to transition between wireframe and raster display.'
##        #return Scale
##    def _set(self, Scale):
##        u'The scale value to transition between wireframe and raster display.'
##    TransitionScale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether the display should redraw the layer.'
##        #return b
##    def _set(self, b):
##        u'Indicates whether the display should redraw the layer.'
##    RedrawDisplay = property(_get, _set, doc = _set.__doc__)
##
##    def Symbol(self, ppSymbol):
##        u'The symbol of the layer.'
##        #return 
##
##    def _get(self):
##        u'Indicates whether to draw the rasters only.'
##        #return b
##    def _set(self, b):
##        u'Indicates whether to draw the rasters only.'
##    DrawRastersOnly = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether to display rasters.'
##        #return pNum
##    def _set(self, pNum):
##        u'Indicates whether to display rasters.'
##    DisplayRasters = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Resampling method for displaying a raster.'
##        #return pResamplingType
##    def _set(self, pResamplingType):
##        u'Resampling method for displaying a raster.'
##    ResamplingType = property(_get, _set, doc = _set.__doc__)
##

class ScaleTextStyleGalleryClass(CoClass):
    u'Use to create new Scale Text items.'
    _reg_clsid_ = GUID('{61F8CCCF-1813-11D2-87A2-0000F8751720}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
ScaleTextStyleGalleryClass._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IStyleGalleryClass, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IStyleGalleryClass2]

class FeatureExtent(CoClass):
    u'The Feature Extent coclass allows you to zoom to selected features in a layer.'
    _reg_clsid_ = GUID('{E257B2F9-3F37-4EC2-BF16-BF7607569A72}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IFeatureExtent(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Feature Extent Map Area Interface.'
    _iid_ = GUID('{FA56C255-CE10-46D9-AB63-505753DF12A4}')
    _idlflags_ = ['oleautomation']
FeatureExtent._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMapArea, IFeatureExtent, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]


# values for enumeration 'esriMaplexPolygonFeatureType'
esriMaplexPolygonFeature = 0
esriMaplexLandParcelFeature = 1
esriMaplexRiverPolygonFeature = 2
esriMaplexPolygonBoundaryFeature = 3
esriMaplexPolygonFeatureType = c_int # enum
class IGroupElement3(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the Group element.'
    _iid_ = GUID('{980E4829-83F1-42DD-A1BD-1B30A1824DE3}')
    _idlflags_ = ['oleautomation']
IGroupElement3._methods_ = [
    COMMETHOD(['propget', helpstring(u'Elements in the group.')], HRESULT, 'Elements',
              ( ['retval', 'out'], POINTER(POINTER(IEnumElement)), 'Elements' )),
    COMMETHOD(['propputref', helpstring(u'Elements in the group.')], HRESULT, 'Elements',
              ( ['in'], POINTER(IEnumElement), 'Elements' )),
    COMMETHOD(['propget', helpstring(u'Number of elements in the group.')], HRESULT, 'ElementCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'Element at the given index of the group.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IElement)), 'Element' )),
    COMMETHOD([helpstring(u'Adds the given element to the group.')], HRESULT, 'AddElement',
              ( ['in'], POINTER(IElement), 'Element' )),
    COMMETHOD([helpstring(u'Removes the given element from the group.')], HRESULT, 'DeleteElement',
              ( ['in'], POINTER(IElement), 'Element' )),
    COMMETHOD([helpstring(u'Removes all elements from the group.')], HRESULT, 'ClearElements'),
    COMMETHOD([helpstring(u'Let the group know that there has been a change in one or more of the sub-elements.')], HRESULT, 'Refresh'),
    COMMETHOD([helpstring(u'Replace an existing element in the group.')], HRESULT, 'ReplaceElement',
              ( ['in'], POINTER(IElement), 'existingElement' ),
              ( ['in'], POINTER(IElement), 'newElement' )),
]
################################################################
## code template for IGroupElement3 implementation
##class IGroupElement3_Impl(object):
##    def ClearElements(self):
##        u'Removes all elements from the group.'
##        #return 
##
##    def Elements(self, Elements):
##        u'Elements in the group.'
##        #return 
##
##    def Refresh(self):
##        u'Let the group know that there has been a change in one or more of the sub-elements.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'Element at the given index of the group.'
##        #return Element
##
##    @property
##    def ElementCount(self):
##        u'Number of elements in the group.'
##        #return Count
##
##    def DeleteElement(self, Element):
##        u'Removes the given element from the group.'
##        #return 
##
##    def AddElement(self, Element):
##        u'Adds the given element to the group.'
##        #return 
##
##    def ReplaceElement(self, existingElement, newElement):
##        u'Replace an existing element in the group.'
##        #return 
##


# values for enumeration 'esriMaplexGraticuleAlignmentType'
esriMaplexGAStraight = 0
esriMaplexGAStraightNoFlip = 1
esriMaplexGACurved = 2
esriMaplexGACurvedNoFlip = 3
esriMaplexGraticuleAlignmentType = c_int # enum
class PrintAndExport(CoClass):
    u'Print And Export component.'
    _reg_clsid_ = GUID('{569BB216-72A2-4278-92B4-17106EC80DCC}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IPrintAndExport(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Output interface.'
    _iid_ = GUID('{40A1760A-5439-4D26-B29D-0F0827A946F4}')
    _idlflags_ = ['oleautomation']
PrintAndExport._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IPrintAndExport]

class IPageEvents(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to events that occur when the Page changes.'
    _iid_ = GUID('{83BD34E5-CE3B-11D1-876E-0000F8751720}')
    _idlflags_ = ['oleautomation']
IPageEvents._methods_ = [
    COMMETHOD([helpstring(u'Fired when the units used by the page changes.')], HRESULT, 'PageUnitsChanged'),
    COMMETHOD([helpstring(u'Fired when the page size changes.')], HRESULT, 'PageSizeChanged'),
    COMMETHOD([helpstring(u'Fired when the page margins change.')], HRESULT, 'PageMarginsChanged'),
    COMMETHOD([helpstring(u'Fired when the page color changes.')], HRESULT, 'PageColorChanged'),
]
################################################################
## code template for IPageEvents implementation
##class IPageEvents_Impl(object):
##    def PageMarginsChanged(self):
##        u'Fired when the page margins change.'
##        #return 
##
##    def PageColorChanged(self):
##        u'Fired when the page color changes.'
##        #return 
##
##    def PageSizeChanged(self):
##        u'Fired when the page size changes.'
##        #return 
##
##    def PageUnitsChanged(self):
##        u'Fired when the units used by the page changes.'
##        #return 
##

class MapExtent(CoClass):
    u'The Map Extent coclass allows you to change the spatial extent of a map by specifying the new extent.'
    _reg_clsid_ = GUID('{8B80B977-43E9-461F-80DB-8BF9DDD5287E}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IMapExtent(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Map Extent Map Area Interface.'
    _iid_ = GUID('{FD1037C4-34D5-4783-8812-E06EFF6484E7}')
    _idlflags_ = ['oleautomation']
MapExtent._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMapArea, IMapExtent, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

class IAnnotationElement(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control Annotation Features.'
    _iid_ = GUID('{72266121-D4B9-11D2-A800-AF8C10F4C95A}')
    _idlflags_ = ['oleautomation']
IAnnotationElement._methods_ = [
    COMMETHOD(['propget', helpstring(u'The feature associated with this element.')], HRESULT, 'Feature',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeature)), 'Feature' )),
]
################################################################
## code template for IAnnotationElement implementation
##class IAnnotationElement_Impl(object):
##    @property
##    def Feature(self):
##        u'The feature associated with this element.'
##        #return Feature
##

class LabelStyleGalleryClass(CoClass):
    u'Use to create new Label style items.'
    _reg_clsid_ = GUID('{4C90DE79-CB77-11D2-9F34-00C04F6BC6A5}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
LabelStyleGalleryClass._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IStyleGalleryClass, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IStyleGalleryClass2]

class ILayerTablesAndDataMappings(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    _iid_ = GUID('{CC04F497-FF81-4B5B-974E-676597167107}')
    _idlflags_ = ['oleautomation']
class IGFLayerTableDataMappings(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Array of GFLayerTableDataMapping'
    _iid_ = GUID('{D862676C-14DC-4FE8-A1FC-FC9F02C00E2A}')
    _idlflags_ = ['oleautomation']
ILayerTablesAndDataMappings._methods_ = [
    COMMETHOD(['propget'], HRESULT, 'GFLayerTableDataMappings',
              ( ['retval', 'out'], POINTER(POINTER(IGFLayerTableDataMappings)), 'GFLayerTableDataMappings' )),
    COMMETHOD(['propget'], HRESULT, 'Layers',
              ( ['retval', 'out'], POINTER(POINTER(IEnumLayer)), 'Layers' )),
]
################################################################
## code template for ILayerTablesAndDataMappings implementation
##class ILayerTablesAndDataMappings_Impl(object):
##    @property
##    def Layers(self):
##        '-no docstring-'
##        #return Layers
##
##    @property
##    def GFLayerTableDataMappings(self):
##        '-no docstring-'
##        #return GFLayerTableDataMappings
##

class IWMSLayer2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the WMS sub layer.'
    _iid_ = GUID('{27ABB9EC-7A26-4CF8-8BD4-70EC1D274E17}')
    _idlflags_ = ['oleautomation']
IWMSLayer2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Associated WMSLayerDescription.')], HRESULT, 'WMSLayerDescription',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._746F6817_89BB_4490_9829_83CA25FD505A_0_10_2.IWMSLayerDescription)), 'pLayerDescription' )),
    COMMETHOD(['propget', helpstring(u'Associated WMSServiceDescription.')], HRESULT, 'WMSServiceDescription',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._746F6817_89BB_4490_9829_83CA25FD505A_0_10_2.IWMSServiceDescription)), 'ServiceDescription' )),
    COMMETHOD(['propputref', helpstring(u'Active style that will be used for drawing.')], HRESULT, 'Style',
              ( ['in'], POINTER(comtypes.gen._746F6817_89BB_4490_9829_83CA25FD505A_0_10_2.IWMSLayerStyleDescription), 'Style' )),
    COMMETHOD(['propget', helpstring(u'Active style that will be used for drawing.')], HRESULT, 'Style',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._746F6817_89BB_4490_9829_83CA25FD505A_0_10_2.IWMSLayerStyleDescription)), 'Style' )),
]
################################################################
## code template for IWMSLayer2 implementation
##class IWMSLayer2_Impl(object):
##    @property
##    def Style(self, Style):
##        u'Active style that will be used for drawing.'
##        #return 
##
##    @property
##    def WMSServiceDescription(self):
##        u'Associated WMSServiceDescription.'
##        #return ServiceDescription
##
##    @property
##    def WMSLayerDescription(self):
##        u'Associated WMSLayerDescription.'
##        #return pLayerDescription
##


# values for enumeration 'esriMaplexZoneIdentifier'
esriMaplexAboveLeft = 0
esriMaplexAboveCenter = 1
esriMaplexAboveRight = 2
esriMaplexCenterRight = 3
esriMaplexBelowRight = 4
esriMaplexBelowCenter = 5
esriMaplexBelowLeft = 6
esriMaplexCenterLeft = 7
esriMaplexCenter = 8
esriMaplexZoneIdentifier = c_int # enum
class IMapCacheToRasterFunctionArgument(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a map cache to raster function.'
    _iid_ = GUID('{2DD8EB38-C743-41B4-8483-C26950CE1723}')
    _idlflags_ = ['oleautomation']
IMapCacheToRasterFunctionArgument._methods_ = [
    COMMETHOD(['propput', helpstring(u'Set the cache location.')], HRESULT, 'CacheLocation',
              ( ['in'], BSTR, 'pCachePath' )),
    COMMETHOD(['propget', helpstring(u'Set the cache location.')], HRESULT, 'CacheLocation',
              ( ['retval', 'out'], POINTER(BSTR), 'pCachePath' )),
    COMMETHOD(['propputref', helpstring(u'Set the cache extent.')], HRESULT, 'Extent',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'ppEnvelope' )),
    COMMETHOD(['propget', helpstring(u'Set the cache extent.')], HRESULT, 'Extent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'ppEnvelope' )),
    COMMETHOD(['propputref', helpstring(u'Set the cache table.')], HRESULT, 'CacheTable',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable), 'ppCacheTable' )),
    COMMETHOD(['propget', helpstring(u'Set the cache table.')], HRESULT, 'CacheTable',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable)), 'ppCacheTable' )),
    COMMETHOD(['propputref', helpstring(u'Set the cache data table.')], HRESULT, 'CacheDataTable',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable), 'ppCacheDataTable' )),
    COMMETHOD(['propget', helpstring(u'Set the cache data table.')], HRESULT, 'CacheDataTable',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable)), 'ppCacheDataTable' )),
    COMMETHOD(['propputref', helpstring(u'Set the background color.')], HRESULT, 'BackgroundColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'ppBackgroundColor' )),
    COMMETHOD(['propget', helpstring(u'Set the background color.')], HRESULT, 'BackgroundColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'ppBackgroundColor' )),
    COMMETHOD(['propputref', helpstring(u'Set the transparent color.')], HRESULT, 'TransparentColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'ppTransparentColor' )),
    COMMETHOD(['propget', helpstring(u'Set the transparent color.')], HRESULT, 'TransparentColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'ppTransparentColor' )),
]
################################################################
## code template for IMapCacheToRasterFunctionArgument implementation
##class IMapCacheToRasterFunctionArgument_Impl(object):
##    @property
##    def CacheDataTable(self, ppCacheDataTable):
##        u'Set the cache data table.'
##        #return 
##
##    @property
##    def Extent(self, ppEnvelope):
##        u'Set the cache extent.'
##        #return 
##
##    @property
##    def TransparentColor(self, ppTransparentColor):
##        u'Set the transparent color.'
##        #return 
##
##    def _get(self):
##        u'Set the cache location.'
##        #return pCachePath
##    def _set(self, pCachePath):
##        u'Set the cache location.'
##    CacheLocation = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def CacheTable(self, ppCacheTable):
##        u'Set the cache table.'
##        #return 
##
##    @property
##    def BackgroundColor(self, ppBackgroundColor):
##        u'Set the background color.'
##        #return 
##


# values for enumeration 'esriMaplexContourAlignmentType'
esriMaplexUphillAlignment = 0
esriMaplexPageAlignment = 1
esriMaplexContourAlignmentType = c_int # enum

# values for enumeration 'esriMaplexAnchorPointType'
esriMaplexGeometricCenter = 0
esriMaplexErodedCenter = 1
esriMaplexPerimeter = 2
esriMaplexUnclippedGeometricCenter = 3
esriMaplexAnchorPointType = c_int # enum
class ITimeDataCustomUI(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to interface that indicates if a layer has a associated UI of its own.'
    _iid_ = GUID('{221B2DA1-3735-4D7C-94F6-758F65480E22}')
    _idlflags_ = ['oleautomation']
ITimeDataCustomUI._methods_ = [
]
################################################################
## code template for ITimeDataCustomUI implementation
##class ITimeDataCustomUI_Impl(object):

ITimeDataDisplay._methods_ = [
    COMMETHOD(['propput', helpstring(u'Indicates that features will be animated cumilatively.')], HRESULT, 'TimeDataCumulative',
              ( ['in'], VARIANT_BOOL, 'cumilative' )),
    COMMETHOD(['propget', helpstring(u'Indicates that features will be animated cumilatively.')], HRESULT, 'TimeDataCumulative',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'cumilative' )),
    COMMETHOD(['propput', helpstring(u'Returns recommended time interval to be used to animate this layer/ table.')], HRESULT, 'TimeInterval',
              ( ['in'], c_double, 'Interval' )),
    COMMETHOD(['propget', helpstring(u'Returns recommended time interval to be used to animate this layer/ table.')], HRESULT, 'TimeInterval',
              ( ['retval', 'out'], POINTER(c_double), 'Interval' )),
    COMMETHOD(['propput', helpstring(u'Returns recommended time interval units to be used to animate this layer/ table.')], HRESULT, 'TimeIntervalUnits',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriTimeUnits, 'Units' )),
    COMMETHOD(['propget', helpstring(u'Returns recommended time interval units to be used to animate this layer/ table.')], HRESULT, 'TimeIntervalUnits',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriTimeUnits), 'Units' )),
    COMMETHOD(['propput', helpstring(u'Returns time offset that needs to be applied to the data for drawing.')], HRESULT, 'TimeOffset',
              ( ['in'], c_double, 'TimeOffset' )),
    COMMETHOD(['propget', helpstring(u'Returns time offset that needs to be applied to the data for drawing.')], HRESULT, 'TimeOffset',
              ( ['retval', 'out'], POINTER(c_double), 'TimeOffset' )),
    COMMETHOD(['propput', helpstring(u'Returns recommended time interval units to be used to animate this layer/ table.')], HRESULT, 'TimeOffsetUnits',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriTimeUnits, 'Units' )),
    COMMETHOD(['propget', helpstring(u'Returns recommended time interval units to be used to animate this layer/ table.')], HRESULT, 'TimeOffsetUnits',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriTimeUnits), 'Units' )),
]
################################################################
## code template for ITimeDataDisplay implementation
##class ITimeDataDisplay_Impl(object):
##    def _get(self):
##        u'Indicates that features will be animated cumilatively.'
##        #return cumilative
##    def _set(self, cumilative):
##        u'Indicates that features will be animated cumilatively.'
##    TimeDataCumulative = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Returns recommended time interval to be used to animate this layer/ table.'
##        #return Interval
##    def _set(self, Interval):
##        u'Returns recommended time interval to be used to animate this layer/ table.'
##    TimeInterval = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Returns time offset that needs to be applied to the data for drawing.'
##        #return TimeOffset
##    def _set(self, TimeOffset):
##        u'Returns time offset that needs to be applied to the data for drawing.'
##    TimeOffset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Returns recommended time interval units to be used to animate this layer/ table.'
##        #return Units
##    def _set(self, Units):
##        u'Returns recommended time interval units to be used to animate this layer/ table.'
##    TimeOffsetUnits = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Returns recommended time interval units to be used to animate this layer/ table.'
##        #return Units
##    def _set(self, Units):
##        u'Returns recommended time interval units to be used to animate this layer/ table.'
##    TimeIntervalUnits = property(_get, _set, doc = _set.__doc__)
##

class IOverflowGraphicsContainer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the Overflow Graphics Container.'
    _iid_ = GUID('{9C0520C1-A0D8-11D2-A2FE-080009B6F22B}')
    _idlflags_ = ['oleautomation']
IOverflowGraphicsContainer._methods_ = [
    COMMETHOD(['propget', helpstring(u'Element collection.')], HRESULT, 'OverflowElements',
              ( ['retval', 'out'], POINTER(POINTER(IElementCollection)), 'Elements' )),
    COMMETHOD(['propputref', helpstring(u'Element collection.')], HRESULT, 'OverflowElements',
              ( ['in'], POINTER(IElementCollection), 'Elements' )),
    COMMETHOD([helpstring(u'Delete all the element in the collection.')], HRESULT, 'DeleteAllOverflowElements'),
    COMMETHOD([helpstring(u'Delete an element in the collection.')], HRESULT, 'DeleteOverflowElement',
              ( [], POINTER(IElement), 'pElement' )),
    COMMETHOD([helpstring(u'Add an element to the collection.')], HRESULT, 'AddOverflowElement',
              ( [], POINTER(IElement), 'pElement' )),
]
################################################################
## code template for IOverflowGraphicsContainer implementation
##class IOverflowGraphicsContainer_Impl(object):
##    def AddOverflowElement(self, pElement):
##        u'Add an element to the collection.'
##        #return 
##
##    def DeleteOverflowElement(self, pElement):
##        u'Delete an element in the collection.'
##        #return 
##
##    def OverflowElements(self, Elements):
##        u'Element collection.'
##        #return 
##
##    def DeleteAllOverflowElements(self):
##        u'Delete all the element in the collection.'
##        #return 
##

class BorderStyleGalleryClass(CoClass):
    u'Use to create new Border style items.'
    _reg_clsid_ = GUID('{80F4285D-DE21-11D2-B868-00600802E603}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
BorderStyleGalleryClass._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IStyleGalleryClass, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IStyleGalleryClass2]

class IACHashLineSymbol(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control ArcIMS hash line symbol.'
    _iid_ = GUID('{6B0A77C8-A0BA-4541-BCA7-A4417F0CFB97}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'acHashLineType'
acForegroundHashLine = 0
acBackgroundHashLine = 1
acHashLineType = c_int # enum
IACHashLineSymbol._methods_ = [
    COMMETHOD(['propget', helpstring(u'The fill type.')], HRESULT, 'Type',
              ( ['retval', 'out'], POINTER(acHashLineType), 'Type' )),
    COMMETHOD(['propput', helpstring(u'The fill type.')], HRESULT, 'Type',
              ( ['in'], acHashLineType, 'Type' )),
    COMMETHOD(['propget', helpstring(u'The symbol color.')], HRESULT, 'Color',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'The symbol color.')], HRESULT, 'Color',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'The line symbol width in pixels.')], HRESULT, 'Width',
              ( ['retval', 'out'], POINTER(c_int), 'Width' )),
    COMMETHOD(['propput', helpstring(u'The line symbol width in pixels.')], HRESULT, 'Width',
              ( ['in'], c_int, 'Width' )),
    COMMETHOD(['propget', helpstring(u'Indicates if labels can overlap this symbol.')], HRESULT, 'Overlap',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if labels can overlap this symbol.')], HRESULT, 'Overlap',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'The distance between crosshatches.')], HRESULT, 'Interval',
              ( ['retval', 'out'], POINTER(c_int), 'Interval' )),
    COMMETHOD(['propput', helpstring(u'The distance between crosshatches.')], HRESULT, 'Interval',
              ( ['in'], c_int, 'Interval' )),
    COMMETHOD(['propget', helpstring(u'The line thickness.')], HRESULT, 'LineThickness',
              ( ['retval', 'out'], POINTER(c_int), 'Value' )),
    COMMETHOD(['propput', helpstring(u'The line thickness.')], HRESULT, 'LineThickness',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD(['propget', helpstring(u'The tick thickness.')], HRESULT, 'TickThickness',
              ( ['retval', 'out'], POINTER(c_int), 'Value' )),
    COMMETHOD(['propput', helpstring(u'The tick thickness.')], HRESULT, 'TickThickness',
              ( ['in'], c_int, 'Value' )),
]
################################################################
## code template for IACHashLineSymbol implementation
##class IACHashLineSymbol_Impl(object):
##    def _get(self):
##        u'The line thickness.'
##        #return Value
##    def _set(self, Value):
##        u'The line thickness.'
##    LineThickness = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The tick thickness.'
##        #return Value
##    def _set(self, Value):
##        u'The tick thickness.'
##    TickThickness = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The symbol color.'
##        #return Color
##    def _set(self, Color):
##        u'The symbol color.'
##    Color = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The distance between crosshatches.'
##        #return Interval
##    def _set(self, Interval):
##        u'The distance between crosshatches.'
##    Interval = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if labels can overlap this symbol.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if labels can overlap this symbol.'
##    Overlap = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The line symbol width in pixels.'
##        #return Width
##    def _set(self, Width):
##        u'The line symbol width in pixels.'
##    Width = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The fill type.'
##        #return Type
##    def _set(self, Type):
##        u'The fill type.'
##    Type = property(_get, _set, doc = _set.__doc__)
##

class IGroupSymbolElement(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control Group Symbol Elements.'
    _iid_ = GUID('{9E65C825-858C-11D3-9FC6-00C04F6BC6A5}')
    _idlflags_ = ['oleautomation']
IGroupSymbolElement._methods_ = [
    COMMETHOD(['propget', helpstring(u'Symbol ID associated with this element.')], HRESULT, 'SymbolID',
              ( ['retval', 'out'], POINTER(c_int), 'SymbolID' )),
    COMMETHOD(['propput', helpstring(u'Symbol ID associated with this element.')], HRESULT, 'SymbolID',
              ( ['in'], c_int, 'SymbolID' )),
    COMMETHOD(['propput', helpstring(u'The symbol ID associated with this element.')], HRESULT, 'GroupSymbol',
              ( ['in'], c_int, 'SymbolID' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol), 'rhs' )),
    COMMETHOD([helpstring(u'Saves the anno in a compressed format.')], HRESULT, 'ExportToESRIAnno',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStream), 'stream' )),
    COMMETHOD([helpstring(u'Loads the anno in a compressed format.')], HRESULT, 'ImportFromESRIAnno',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStream), 'stream' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'SpatialReference' )),
    COMMETHOD([helpstring(u'Draws the anno in a compressed format.')], HRESULT, 'DrawESRIAnno',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStream), 'stream' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbolCollection), 'SymbolCollection' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'spatialRef' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' )),
    COMMETHOD(['propget', helpstring(u'Text offset along X-axis.')], HRESULT, 'XOffset',
              ( ['retval', 'out'], POINTER(c_double), 'XOffset' )),
    COMMETHOD(['propput', helpstring(u'Text offset along X-axis.')], HRESULT, 'XOffset',
              ( ['in'], c_double, 'XOffset' )),
    COMMETHOD(['propget', helpstring(u'Text offset along Y-axis.')], HRESULT, 'YOffset',
              ( ['retval', 'out'], POINTER(c_double), 'YOffset' )),
    COMMETHOD(['propput', helpstring(u'Text offset along Y-axis.')], HRESULT, 'YOffset',
              ( ['in'], c_double, 'YOffset' )),
    COMMETHOD(['propget', helpstring(u'Vertical alignment style.')], HRESULT, 'VerticalAlignment',
              ( ['retval', 'out'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.esriTextVerticalAlignment), 'vertAlignment' )),
    COMMETHOD(['propput', helpstring(u'Vertical alignment style.')], HRESULT, 'VerticalAlignment',
              ( ['in'], comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.esriTextVerticalAlignment, 'vertAlignment' )),
    COMMETHOD(['propget', helpstring(u'Horizontal alignment style.')], HRESULT, 'HorizontalAlignment',
              ( ['retval', 'out'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.esriTextHorizontalAlignment), 'horizAlignment' )),
    COMMETHOD(['propput', helpstring(u'Horizontal alignment style.')], HRESULT, 'HorizontalAlignment',
              ( ['in'], comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.esriTextHorizontalAlignment, 'horizAlignment' )),
    COMMETHOD(['propget', helpstring(u'Flip angle.')], HRESULT, 'FlipAngle',
              ( ['retval', 'out'], POINTER(c_double), 'FlipAngle' )),
    COMMETHOD(['propput', helpstring(u'Flip angle.')], HRESULT, 'FlipAngle',
              ( ['in'], c_double, 'FlipAngle' )),
    COMMETHOD(['propget', helpstring(u'Callout anchor point.')], HRESULT, 'AnchorPoint',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint)), 'AnchorPoint' )),
    COMMETHOD(['propput', helpstring(u'Callout anchor point.')], HRESULT, 'AnchorPoint',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'AnchorPoint' )),
    COMMETHOD(['propget', helpstring(u'Font size.')], HRESULT, 'Size',
              ( ['retval', 'out'], POINTER(c_double), 'pointSize' )),
    COMMETHOD(['propput', helpstring(u'Font size.')], HRESULT, 'Size',
              ( ['in'], c_double, 'pointSize' )),
    COMMETHOD(['propget', helpstring(u'Font color.')], HRESULT, 'Color',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'Font color.')], HRESULT, 'Color',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'Text path.')], HRESULT, 'TextPath',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextPath)), 'TextPath' )),
    COMMETHOD(['propputref', helpstring(u'Text path.')], HRESULT, 'TextPath',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextPath), 'TextPath' )),
]
################################################################
## code template for IGroupSymbolElement implementation
##class IGroupSymbolElement_Impl(object):
##    def _get(self):
##        u'Callout anchor point.'
##        #return AnchorPoint
##    def _set(self, AnchorPoint):
##        u'Callout anchor point.'
##    AnchorPoint = property(_get, _set, doc = _set.__doc__)
##
##    def ImportFromESRIAnno(self, stream, SpatialReference):
##        u'Loads the anno in a compressed format.'
##        #return 
##
##    def _get(self):
##        u'Flip angle.'
##        #return FlipAngle
##    def _set(self, FlipAngle):
##        u'Flip angle.'
##    FlipAngle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Font color.'
##        #return Color
##    def _set(self, Color):
##        u'Font color.'
##    Color = property(_get, _set, doc = _set.__doc__)
##
##    def _set(self, SymbolID, rhs):
##        u'The symbol ID associated with this element.'
##    GroupSymbol = property(fset = _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Symbol ID associated with this element.'
##        #return SymbolID
##    def _set(self, SymbolID):
##        u'Symbol ID associated with this element.'
##    SymbolID = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Text offset along Y-axis.'
##        #return YOffset
##    def _set(self, YOffset):
##        u'Text offset along Y-axis.'
##    YOffset = property(_get, _set, doc = _set.__doc__)
##
##    def TextPath(self, TextPath):
##        u'Text path.'
##        #return 
##
##    def ExportToESRIAnno(self, stream):
##        u'Saves the anno in a compressed format.'
##        #return 
##
##    def _get(self):
##        u'Vertical alignment style.'
##        #return vertAlignment
##    def _set(self, vertAlignment):
##        u'Vertical alignment style.'
##    VerticalAlignment = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Horizontal alignment style.'
##        #return horizAlignment
##    def _set(self, horizAlignment):
##        u'Horizontal alignment style.'
##    HorizontalAlignment = property(_get, _set, doc = _set.__doc__)
##
##    def DrawESRIAnno(self, stream, SymbolCollection, spatialRef, Display):
##        u'Draws the anno in a compressed format.'
##        #return 
##
##    def _get(self):
##        u'Text offset along X-axis.'
##        #return XOffset
##    def _set(self, XOffset):
##        u'Text offset along X-axis.'
##    XOffset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Font size.'
##        #return pointSize
##    def _set(self, pointSize):
##        u'Font size.'
##    Size = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'esriMaplexLineFeatureType'
esriMaplexLineFeature = 0
esriMaplexStreetFeature = 1
esriMaplexStreetAddressRange = 2
esriMaplexContourFeature = 3
esriMaplexRiverFeature = 4
esriMaplexLineFeatureType = c_int # enum
class BackgroundStyleGalleryClass(CoClass):
    u'Use to create new Background style items.'
    _reg_clsid_ = GUID('{80F4285E-DE21-11D2-B868-00600802E603}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
BackgroundStyleGalleryClass._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IStyleGalleryClass, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IStyleGalleryClass2]

class IIdentifyObjWindow(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the window returned from an object that implements IIdentifyObj.'
    _iid_ = GUID('{702CF60D-FDCF-426A-BBB0-D3EAAC17A634}')
    _idlflags_ = ['oleautomation']
IIdentifyObjWindow._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if the hWnd window handle of an object implementing IIdentifyObj should be used.')], HRESULT, 'UseWindow',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'UseWindow' )),
]
################################################################
## code template for IIdentifyObjWindow implementation
##class IIdentifyObjWindow_Impl(object):
##    @property
##    def UseWindow(self):
##        u'Indicates if the hWnd window handle of an object implementing IIdentifyObj should be used.'
##        #return UseWindow
##

class ShadowStyleGalleryClass(CoClass):
    u'Use to create new Shadow style items.'
    _reg_clsid_ = GUID('{2C24E3AD-BF6A-40B1-B5F0-0A19E9412407}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
ShadowStyleGalleryClass._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IStyleGalleryClass, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IStyleGalleryClass2]

class MapServerRow(CoClass):
    u'The Map Server Row coclass contains information about a row.'
    _reg_clsid_ = GUID('{CCBEB520-A247-4C8D-A5B3-AB159638C3DC}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IMapServerRow(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Map Server Row Interface.'
    _iid_ = GUID('{B60464E3-755A-4B84-A4D7-7ECC9232D26A}')
    _idlflags_ = ['oleautomation']
class IMapServerRow2(IMapServerRow):
    _case_insensitive_ = True
    u'Provides access to the Map Server Row Interface.'
    _iid_ = GUID('{5F96145F-57EC-4B5F-BD4A-504C6385ADED}')
    _idlflags_ = ['oleautomation']
MapServerRow._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMapServerRow, IMapServerRow2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersionSupportGEN]

class IACSimplePolygonSymbol(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control ArcIMS simple polygon symbol.'
    _iid_ = GUID('{32F03709-F43D-4655-AD8E-BE49BB8C7F79}')
    _idlflags_ = ['oleautomation']
IACSimplePolygonSymbol._methods_ = [
    COMMETHOD(['propget', helpstring(u'The fill color.')], HRESULT, 'FillColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'The fill color.')], HRESULT, 'FillColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'The fill type.')], HRESULT, 'FillType',
              ( ['retval', 'out'], POINTER(acFillType), 'Type' )),
    COMMETHOD(['propput', helpstring(u'The fill type.')], HRESULT, 'FillType',
              ( ['in'], acFillType, 'Type' )),
    COMMETHOD(['propget', helpstring(u'The interval of the hatch fill type.')], HRESULT, 'FillInterval',
              ( ['retval', 'out'], POINTER(c_int), 'Interval' )),
    COMMETHOD(['propput', helpstring(u'The interval of the hatch fill type.')], HRESULT, 'FillInterval',
              ( ['in'], c_int, 'Interval' )),
    COMMETHOD(['propget', helpstring(u'The fill transparency coeficient (0.0-1.0).')], HRESULT, 'FillTransparency',
              ( ['retval', 'out'], POINTER(c_double), 'trans' )),
    COMMETHOD(['propput', helpstring(u'The fill transparency coeficient (0.0-1.0).')], HRESULT, 'FillTransparency',
              ( ['in'], c_double, 'trans' )),
    COMMETHOD(['propget', helpstring(u'The outline width in pixels.')], HRESULT, 'BoundaryWidth',
              ( ['retval', 'out'], POINTER(c_int), 'Width' )),
    COMMETHOD(['propput', helpstring(u'The outline width in pixels.')], HRESULT, 'BoundaryWidth',
              ( ['in'], c_int, 'Width' )),
    COMMETHOD(['propget', helpstring(u'The outline color.')], HRESULT, 'BoundaryColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'The outline color.')], HRESULT, 'BoundaryColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'The outline type.')], HRESULT, 'BoundaryLineType',
              ( ['retval', 'out'], POINTER(acLineType), 'Type' )),
    COMMETHOD(['propput', helpstring(u'The outline type.')], HRESULT, 'BoundaryLineType',
              ( ['in'], acLineType, 'Type' )),
    COMMETHOD(['propget', helpstring(u'The outline cap type.')], HRESULT, 'BoundaryCapType',
              ( ['retval', 'out'], POINTER(acCapType), 'Type' )),
    COMMETHOD(['propput', helpstring(u'The outline cap type.')], HRESULT, 'BoundaryCapType',
              ( ['in'], acCapType, 'Type' )),
    COMMETHOD(['propget', helpstring(u'The outline join type.')], HRESULT, 'BoundaryJoinType',
              ( ['retval', 'out'], POINTER(acJoinType), 'Type' )),
    COMMETHOD(['propput', helpstring(u'The outline join type.')], HRESULT, 'BoundaryJoinType',
              ( ['in'], acJoinType, 'Type' )),
    COMMETHOD(['propget', helpstring(u'The transparency transparency coeficient (0.0-1.0).')], HRESULT, 'BoundaryTransparency',
              ( ['retval', 'out'], POINTER(c_double), 'trans' )),
    COMMETHOD(['propput', helpstring(u'The transparency transparency coeficient (0.0-1.0).')], HRESULT, 'BoundaryTransparency',
              ( ['in'], c_double, 'trans' )),
    COMMETHOD(['propget', helpstring(u'Indicates if labels can overlap this symbol.')], HRESULT, 'Overlap',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if labels can overlap this symbol.')], HRESULT, 'Overlap',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer display the boundary or outline.')], HRESULT, 'Boundary',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the layer display the boundary or outline.')], HRESULT, 'Boundary',
              ( ['in'], VARIANT_BOOL, 'flag' )),
]
################################################################
## code template for IACSimplePolygonSymbol implementation
##class IACSimplePolygonSymbol_Impl(object):
##    def _get(self):
##        u'The outline cap type.'
##        #return Type
##    def _set(self, Type):
##        u'The outline cap type.'
##    BoundaryCapType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The outline join type.'
##        #return Type
##    def _set(self, Type):
##        u'The outline join type.'
##    BoundaryJoinType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The interval of the hatch fill type.'
##        #return Interval
##    def _set(self, Interval):
##        u'The interval of the hatch fill type.'
##    FillInterval = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The outline width in pixels.'
##        #return Width
##    def _set(self, Width):
##        u'The outline width in pixels.'
##    BoundaryWidth = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The outline type.'
##        #return Type
##    def _set(self, Type):
##        u'The outline type.'
##    BoundaryLineType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The outline color.'
##        #return Color
##    def _set(self, Color):
##        u'The outline color.'
##    BoundaryColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The transparency transparency coeficient (0.0-1.0).'
##        #return trans
##    def _set(self, trans):
##        u'The transparency transparency coeficient (0.0-1.0).'
##    BoundaryTransparency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The fill transparency coeficient (0.0-1.0).'
##        #return trans
##    def _set(self, trans):
##        u'The fill transparency coeficient (0.0-1.0).'
##    FillTransparency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if labels can overlap this symbol.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if labels can overlap this symbol.'
##    Overlap = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The fill color.'
##        #return Color
##    def _set(self, Color):
##        u'The fill color.'
##    FillColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the layer display the boundary or outline.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if the layer display the boundary or outline.'
##    Boundary = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The fill type.'
##        #return Type
##    def _set(self, Type):
##        u'The fill type.'
##    FillType = property(_get, _set, doc = _set.__doc__)
##

class IRasterCatalogDisplayProps2(IRasterCatalogDisplayProps):
    _case_insensitive_ = True
    u'Provides access to members that create or modify a raster catalog.'
    _iid_ = GUID('{5873C50D-C6ED-4FD3-8835-F04A484D5462}')
    _idlflags_ = ['oleautomation']
IRasterCatalogDisplayProps2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Limits the number of rasters drawn.')], HRESULT, 'LimitsRasterDraw',
              ( ['retval', 'out'], POINTER(c_int), 'pNum' )),
    COMMETHOD(['propput', helpstring(u'Limits the number of rasters drawn.')], HRESULT, 'LimitsRasterDraw',
              ( ['in'], c_int, 'pNum' )),
]
################################################################
## code template for IRasterCatalogDisplayProps2 implementation
##class IRasterCatalogDisplayProps2_Impl(object):
##    def _get(self):
##        u'Limits the number of rasters drawn.'
##        #return pNum
##    def _set(self, pNum):
##        u'Limits the number of rasters drawn.'
##    LimitsRasterDraw = property(_get, _set, doc = _set.__doc__)
##

class IRasterLayerExport3(IRasterLayerExport2):
    _case_insensitive_ = True
    u'Provides access to members that control exporting raster from a layer.'
    _iid_ = GUID('{9AD3E9E5-2FAE-47FA-A7E3-4F3A64176517}')
    _idlflags_ = []
IRasterLayerExport3._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The layer to be exported (e.g. RasterLayer, ImageServerLayer, and etc.)')], HRESULT, 'Layer',
              ( ['in'], POINTER(ILayer), 'rhs' )),
    COMMETHOD(['propput', helpstring(u'The NoData value for exported raster dataset.')], HRESULT, 'NoData',
              ( ['in'], VARIANT, 'rhs' )),
]
################################################################
## code template for IRasterLayerExport3 implementation
##class IRasterLayerExport3_Impl(object):
##    def Layer(self, rhs):
##        u'The layer to be exported (e.g. RasterLayer, ImageServerLayer, and etc.)'
##        #return 
##
##    def _set(self, rhs):
##        u'The NoData value for exported raster dataset.'
##    NoData = property(fset = _set, doc = _set.__doc__)
##

class AreaPatchStyleGalleryClass(CoClass):
    u'Use to create new Area Patch items.'
    _reg_clsid_ = GUID('{38446E33-E3BC-11D2-B868-00600802E603}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
AreaPatchStyleGalleryClass._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IStyleGalleryClass, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IStyleGalleryClass2]

IACLayer._methods_ = [
    COMMETHOD(['propget', helpstring(u'The layer name.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'The layer name.')], HRESULT, 'Name',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'The name of the layer that the ArcIMS Server hands out.')], HRESULT, 'OriginalName',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'The name of the layer that the ArcIMS Server hands out.')], HRESULT, 'OriginalName',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'The layer id.')], HRESULT, 'ID',
              ( ['retval', 'out'], POINTER(BSTR), 'ID' )),
    COMMETHOD(['propput', helpstring(u'The layer id.')], HRESULT, 'ID',
              ( ['in'], BSTR, 'ID' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer is currently visible.')], HRESULT, 'Visible',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Visible' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the layer is currently visible.')], HRESULT, 'Visible',
              ( ['in'], VARIANT_BOOL, 'Visible' )),
    COMMETHOD(['propget', helpstring(u'Minimum scale at which the layer will display.')], HRESULT, 'MinScale',
              ( ['retval', 'out'], POINTER(c_double), 'Scale' )),
    COMMETHOD(['propput', helpstring(u'Minimum scale at which the layer will display.')], HRESULT, 'MinScale',
              ( ['in'], c_double, 'Scale' )),
    COMMETHOD(['propget', helpstring(u'Maximum scale at which the layer will display.')], HRESULT, 'MaxScale',
              ( ['retval', 'out'], POINTER(c_double), 'Scale' )),
    COMMETHOD(['propput', helpstring(u'Maximum scale at which the layer will display.')], HRESULT, 'MaxScale',
              ( ['in'], c_double, 'Scale' )),
    COMMETHOD(['propget', helpstring(u'The layer def axl.')], HRESULT, 'LayerDefAxl',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'layerDefElement' )),
    COMMETHOD(['propget', helpstring(u'The extent of the layer.')], HRESULT, 'Extent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'envelope' )),
    COMMETHOD(['propget', helpstring(u'The native spatial reference of the data.')], HRESULT, 'NativeSpatialReference',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference)), 'SpatialReference' )),
]
################################################################
## code template for IACLayer implementation
##class IACLayer_Impl(object):
##    def _get(self):
##        u'The layer name.'
##        #return Name
##    def _set(self, Name):
##        u'The layer name.'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def LayerDefAxl(self):
##        u'The layer def axl.'
##        #return layerDefElement
##
##    def _get(self):
##        u'Maximum scale at which the layer will display.'
##        #return Scale
##    def _set(self, Scale):
##        u'Maximum scale at which the layer will display.'
##    MaxScale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the layer is currently visible.'
##        #return Visible
##    def _set(self, Visible):
##        u'Indicates if the layer is currently visible.'
##    Visible = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Extent(self):
##        u'The extent of the layer.'
##        #return envelope
##
##    def _get(self):
##        u'The name of the layer that the ArcIMS Server hands out.'
##        #return Name
##    def _set(self, Name):
##        u'The name of the layer that the ArcIMS Server hands out.'
##    OriginalName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Minimum scale at which the layer will display.'
##        #return Scale
##    def _set(self, Scale):
##        u'Minimum scale at which the layer will display.'
##    MinScale = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def NativeSpatialReference(self):
##        u'The native spatial reference of the data.'
##        #return SpatialReference
##
##    def _get(self):
##        u'The layer id.'
##        #return ID
##    def _set(self, ID):
##        u'The layer id.'
##    ID = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'esriMaplexContourLadderType'
esriMaplexNoLadder = 0
esriMaplexStraightLadder = 1
esriMaplexCurvedLadder = 2
esriMaplexContourLadderType = c_int # enum
class LinePatchStyleGalleryClass(CoClass):
    u'Use to create new Line Patch items.'
    _reg_clsid_ = GUID('{38446E34-E3BC-11D2-B868-00600802E603}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
LinePatchStyleGalleryClass._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IStyleGalleryClass, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IStyleGalleryClass2]

class IACRasterShieldSymbol(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control ArcIMS raster shield symbol.'
    _iid_ = GUID('{33282097-F60F-402A-A047-C0EC72DE5186}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'acPrintMode'
acTitleCapsPrintMode = 0
acAllUpperPrintMode = 1
acAllLowerPrintMode = 2
acNoPrintMode = 3
acPrintMode = c_int # enum

# values for enumeration 'acLabelMode'
acFullLabel = 0
acNumericOnlyLabel = 1
acLabelMode = c_int # enum
IACRasterShieldSymbol._methods_ = [
    COMMETHOD(['propget', helpstring(u'The url to access the image.')], HRESULT, 'URL',
              ( ['retval', 'out'], POINTER(BSTR), 'URL' )),
    COMMETHOD(['propput', helpstring(u'The url to access the image.')], HRESULT, 'URL',
              ( ['in'], BSTR, 'URL' )),
    COMMETHOD(['propget', helpstring(u'The path to the image.')], HRESULT, 'Image',
              ( ['retval', 'out'], POINTER(BSTR), 'Path' )),
    COMMETHOD(['propput', helpstring(u'The path to the image.')], HRESULT, 'Image',
              ( ['in'], BSTR, 'Path' )),
    COMMETHOD(['propget', helpstring(u'The font name.')], HRESULT, 'Font',
              ( ['retval', 'out'], POINTER(BSTR), 'Font' )),
    COMMETHOD(['propput', helpstring(u'The font name.')], HRESULT, 'Font',
              ( ['in'], BSTR, 'Font' )),
    COMMETHOD(['propget', helpstring(u'The font style.')], HRESULT, 'FontStyle',
              ( ['retval', 'out'], POINTER(acFontStyle), 'FontStyle' )),
    COMMETHOD(['propput', helpstring(u'The font style.')], HRESULT, 'FontStyle',
              ( ['in'], acFontStyle, 'FontStyle' )),
    COMMETHOD(['propget', helpstring(u'The font size.')], HRESULT, 'FontSize',
              ( ['retval', 'out'], POINTER(c_int), 'FontSize' )),
    COMMETHOD(['propput', helpstring(u'The font size.')], HRESULT, 'FontSize',
              ( ['in'], c_int, 'FontSize' )),
    COMMETHOD(['propget', helpstring(u'The font color.')], HRESULT, 'FontColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'The font color.')], HRESULT, 'FontColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the shadow is used.')], HRESULT, 'Shadow',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the shadow is used.')], HRESULT, 'Shadow',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'The shadow color.')], HRESULT, 'ShadowColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'The shadow color.')], HRESULT, 'ShadowColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'The print mode.')], HRESULT, 'PrintMode',
              ( ['retval', 'out'], POINTER(acPrintMode), 'PrintMode' )),
    COMMETHOD(['propput', helpstring(u'The print mode.')], HRESULT, 'PrintMode',
              ( ['in'], acPrintMode, 'PrintMode' )),
    COMMETHOD(['propget', helpstring(u'The text position on the bitmap.')], HRESULT, 'TextPosition',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint)), 'point' )),
    COMMETHOD(['propput', helpstring(u'The text position on the bitmap.')], HRESULT, 'TextPosition',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'point' )),
    COMMETHOD(['propget', helpstring(u'The label mode.')], HRESULT, 'LabelMode',
              ( ['retval', 'out'], POINTER(acLabelMode), 'LabelMode' )),
    COMMETHOD(['propput', helpstring(u'The label mode.')], HRESULT, 'LabelMode',
              ( ['in'], acLabelMode, 'LabelMode' )),
    COMMETHOD(['propget', helpstring(u'Indicates if a boundary is drawn.')], HRESULT, 'Boundary',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if a boundary is drawn.')], HRESULT, 'Boundary',
              ( ['in'], VARIANT_BOOL, 'flag' )),
]
################################################################
## code template for IACRasterShieldSymbol implementation
##class IACRasterShieldSymbol_Impl(object):
##    def _get(self):
##        u'The text position on the bitmap.'
##        #return point
##    def _set(self, point):
##        u'The text position on the bitmap.'
##    TextPosition = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The font style.'
##        #return FontStyle
##    def _set(self, FontStyle):
##        u'The font style.'
##    FontStyle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The url to access the image.'
##        #return URL
##    def _set(self, URL):
##        u'The url to access the image.'
##    URL = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The path to the image.'
##        #return Path
##    def _set(self, Path):
##        u'The path to the image.'
##    Image = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The shadow color.'
##        #return Color
##    def _set(self, Color):
##        u'The shadow color.'
##    ShadowColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The font size.'
##        #return FontSize
##    def _set(self, FontSize):
##        u'The font size.'
##    FontSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The print mode.'
##        #return PrintMode
##    def _set(self, PrintMode):
##        u'The print mode.'
##    PrintMode = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The font color.'
##        #return Color
##    def _set(self, Color):
##        u'The font color.'
##    FontColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the shadow is used.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if the shadow is used.'
##    Shadow = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The font name.'
##        #return Font
##    def _set(self, Font):
##        u'The font name.'
##    Font = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if a boundary is drawn.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if a boundary is drawn.'
##    Boundary = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The label mode.'
##        #return LabelMode
##    def _set(self, LabelMode):
##        u'The label mode.'
##    LabelMode = property(_get, _set, doc = _set.__doc__)
##

class RepresentationMarkerStyleGalleryClass(CoClass):
    u'Use to create new Representation Marker items.'
    _reg_clsid_ = GUID('{530DA506-85E7-4CC2-91C5-6F59F8CCC37D}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
RepresentationMarkerStyleGalleryClass._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IStyleGalleryClass, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IStyleGalleryClass2]

class IFind(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control finding.'
    _iid_ = GUID('{9FE681E6-BA4E-4729-8301-8F15A1544140}')
    _idlflags_ = ['oleautomation']
IFind._methods_ = [
    COMMETHOD([helpstring(u'Finds the specified search string in the given attribute fields.')], HRESULT, 'Find',
              ( ['in'], BSTR, 'Search' ),
              ( ['in'], VARIANT_BOOL, 'Contains' ),
              ( ['in'], VARIANT, 'Fields' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'TrackCancel' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'ppArrObj' )),
    COMMETHOD(['propget', helpstring(u'The attribute fields.')], HRESULT, 'FindFields',
              ( ['retval', 'out'], POINTER(VARIANT), 'Fields' )),
    COMMETHOD(['propget', helpstring(u'The display field.')], HRESULT, 'FindDisplayField',
              ( ['retval', 'out'], POINTER(BSTR), 'Field' )),
]
################################################################
## code template for IFind implementation
##class IFind_Impl(object):
##    @property
##    def FindFields(self):
##        u'The attribute fields.'
##        #return Fields
##
##    def Find(self, Search, Contains, Fields, TrackCancel):
##        u'Finds the specified search string in the given attribute fields.'
##        #return ppArrObj
##
##    @property
##    def FindDisplayField(self):
##        u'The display field.'
##        #return Field
##

class IIMSMapLayer(ILayer):
    _case_insensitive_ = True
    u'Provides access to members that control the IMS map layer.'
    _iid_ = GUID('{DC8505FF-D521-11D3-9FF4-00C04F6BC6A5}')
    _idlflags_ = ['oleautomation']
IIMSMapLayer._methods_ = [
    COMMETHOD(['propget', helpstring(u'The service.')], HRESULT, 'Connection',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._746F6817_89BB_4490_9829_83CA25FD505A_0_10_2.IIMSServiceDescription)), 'Service' )),
    COMMETHOD([helpstring(u'Connects to the map service with the given server url.')], HRESULT, 'ConnectToService',
              ( ['in'], POINTER(comtypes.gen._746F6817_89BB_4490_9829_83CA25FD505A_0_10_2.IIMSServiceDescription), 'Service' )),
    COMMETHOD([helpstring(u'Change the sublayer order.')], HRESULT, 'MoveSubLayerTo',
              ( ['in'], POINTER(IIMSSubLayer), 'subLayer' ),
              ( ['in'], c_int, 'Index' )),
    COMMETHOD(['propget', helpstring(u'The IMS map.')], HRESULT, 'IMSMap',
              ( ['retval', 'out'], POINTER(POINTER(IACMap)), 'Map' )),
    COMMETHOD(['propput', helpstring(u'The area of interest.')], HRESULT, 'AreaOfInterest',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'rhs' )),
    COMMETHOD([helpstring(u'Clears the cache of images downloaded from the IMS server for drawing.')], HRESULT, 'ClearDrawCache'),
]
################################################################
## code template for IIMSMapLayer implementation
##class IIMSMapLayer_Impl(object):
##    @property
##    def IMSMap(self):
##        u'The IMS map.'
##        #return Map
##
##    def MoveSubLayerTo(self, subLayer, Index):
##        u'Change the sublayer order.'
##        #return 
##
##    @property
##    def Connection(self):
##        u'The service.'
##        #return Service
##
##    def _set(self, rhs):
##        u'The area of interest.'
##    AreaOfInterest = property(fset = _set, doc = _set.__doc__)
##
##    def ConnectToService(self, Service):
##        u'Connects to the map service with the given server url.'
##        #return 
##
##    def ClearDrawCache(self):
##        u'Clears the cache of images downloaded from the IMS server for drawing.'
##        #return 
##

class InvalidArea(CoClass):
    u'Accumulates a region from multiple objects and invalidates this area on the display.'
    _reg_clsid_ = GUID('{A802BA72-D947-11D1-8484-0000F875B9C6}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IInvalidArea2(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IInvalidArea):
    _case_insensitive_ = True
    u'Provides access to members that control the accumulating and manipulating of invalid display areas.'
    _iid_ = GUID('{FCD50E05-696B-49A5-8872-2F43453FCD2F}')
    _idlflags_ = ['oleautomation']
class IInvalidArea3(IInvalidArea2):
    _case_insensitive_ = True
    u'Provides access to members that control the accumulating and manipulating of invalid display areas.'
    _iid_ = GUID('{34DDB0EC-4D41-4747-9507-D32ABE9FEEE8}')
    _idlflags_ = ['oleautomation']
InvalidArea._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IInvalidArea, IInvalidArea2, IInvalidArea3]

class MaplexLabelStackingProperties(CoClass):
    u'Properties that specify the label stacking rules.'
    _reg_clsid_ = GUID('{20664808-41C9-11D1-840A-08ABC9ED731A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IMaplexLabelStackingProperties(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the placement of stacked labels.'
    _iid_ = GUID('{20664808-3A22-12A1-FA09-0A56FF3C731A}')
    _idlflags_ = ['oleautomation']
MaplexLabelStackingProperties._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMaplexLabelStackingProperties, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class ClassBreaksDef(CoClass):
    u'A coclass that describes how to generate class breaks.'
    _reg_clsid_ = GUID('{7C47079E-8160-4DCB-B152-C4BCA5A524D5}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IDataClassificationDef(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the available properties of a DataClassificationDef object.'
    _iid_ = GUID('{3D2D6292-0780-450D-BAE3-90BA2E016F11}')
    _idlflags_ = ['oleautomation']
class IClassBreaksDef(IDataClassificationDef):
    _case_insensitive_ = True
    u'Provides access to the available properties of a ClassBreaksDef object.'
    _iid_ = GUID('{84603A2C-01D3-47CA-8457-4F0557ED5582}')
    _idlflags_ = ['oleautomation']
ClassBreaksDef._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDataClassificationDef, IClassBreaksDef, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersionSupportGEN]

class UniqueValuesDef(CoClass):
    u'A coclass that describes how to generate unique values.'
    _reg_clsid_ = GUID('{654C7924-F603-4EF6-94C5-580F63AED089}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IUniqueValuesDef(IDataClassificationDef):
    _case_insensitive_ = True
    u'Provides access to the available properties of a UniqueValueDef object.'
    _iid_ = GUID('{0B0C0EBF-D4B1-4C58-AD55-4679843701D3}')
    _idlflags_ = ['oleautomation']
UniqueValuesDef._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDataClassificationDef, IUniqueValuesDef, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersionSupportGEN]

class MaplexOverposterLayerProperties(CoClass):
    u'Properties that specify the label placement rules per layer.'
    _reg_clsid_ = GUID('{20664808-41C9-11D1-880A-080009EC732A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IMaplexOverposterLayerProperties(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the placement of labels for a layer.'
    _iid_ = GUID('{20664808-3FE2-1ED1-8109-085679EC732A}')
    _idlflags_ = ['oleautomation']
class IMaplexOverposterLayerProperties2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the placement of labels for a layer.'
    _iid_ = GUID('{45BAFFD2-FDE5-2846-DEA4-256DEFFBB2AA}')
    _idlflags_ = ['oleautomation']
class IMaplexOverposterLayerProperties4(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the placement of labels for a layer.'
    _iid_ = GUID('{FF4540E2-05B1-A27F-7FB2-88F2CECF1B93}')
    _idlflags_ = ['oleautomation']
class IOverposterLayerProperties2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the placement of labels or symbols on top of features (barriers).'
    _iid_ = GUID('{C1E3C2FD-DCC1-4F7E-BE2D-2F989B0B7E6A}')
    _idlflags_ = ['oleautomation']
class ILicensedComponent(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to means to determine if this component is licensed.'
    _iid_ = GUID('{AAA6C7A9-8C4C-4FD6-A81C-8EAEACB0B94A}')
    _idlflags_ = ['oleautomation']
MaplexOverposterLayerProperties._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMaplexOverposterLayerProperties, IMaplexOverposterLayerProperties2, IMaplexOverposterLayerProperties3, IMaplexOverposterLayerProperties4, IOverposterLayerProperties, IOverposterLayerProperties2, ILicensedComponent, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class IHistogramSeriesProperties(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control histogram series.'
    _iid_ = GUID('{A7A7C47D-7B09-47D0-B334-12079A3427B8}')
    _idlflags_ = ['oleautomation']
class IDataGraphTPenProperties(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control properties of the line.'
    _iid_ = GUID('{A4A130E8-45CE-4265-BD2D-25B9399A69F2}')
    _idlflags_ = ['oleautomation']
IHistogramSeriesProperties._methods_ = [
    COMMETHOD(['propget', helpstring(u'Properties of the border of the bar .')], HRESULT, 'LinesPenProperties',
              ( ['retval', 'out'], POINTER(POINTER(IDataGraphTPenProperties)), 'ppPenProps' )),
    COMMETHOD(['propget', helpstring(u'Amount of bins in classifying input values.')], HRESULT, 'BinCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propput', helpstring(u'Amount of bins in classifying input values.')], HRESULT, 'BinCount',
              ( ['in'], c_int, 'Count' )),
    COMMETHOD(['propget', helpstring(u'Transparency level of histogram bars.')], HRESULT, 'Transparency',
              ( ['retval', 'out'], POINTER(c_int), 'Level' )),
    COMMETHOD(['propput', helpstring(u'Transparency level of histogram bars.')], HRESULT, 'Transparency',
              ( ['in'], c_int, 'Level' )),
]
################################################################
## code template for IHistogramSeriesProperties implementation
##class IHistogramSeriesProperties_Impl(object):
##    def _get(self):
##        u'Amount of bins in classifying input values.'
##        #return Count
##    def _set(self, Count):
##        u'Amount of bins in classifying input values.'
##    BinCount = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def LinesPenProperties(self):
##        u'Properties of the border of the bar .'
##        #return ppPenProps
##
##    def _get(self):
##        u'Transparency level of histogram bars.'
##        #return Level
##    def _set(self, Level):
##        u'Transparency level of histogram bars.'
##    Transparency = property(_get, _set, doc = _set.__doc__)
##

class ISubtypeInfo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to Subtype Information.'
    _iid_ = GUID('{82DF7153-956D-46C4-9A0A-27D175E21697}')
    _idlflags_ = ['oleautomation']
ISubtypeInfos._methods_ = [
    COMMETHOD(['propget', helpstring(u'The Subtype info count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The Subtype Info at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(ISubtypeInfo)), 'ppSubtypeInfo' )),
    COMMETHOD([helpstring(u'Removes the Subtype Info at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all Subtype infos.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Adds a Subtype Info.')], HRESULT, 'Add',
              ( ['in'], POINTER(ISubtypeInfo), 'pSubtypeInfo' )),
    COMMETHOD([helpstring(u'Adds a Subtype info info at the specified position.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(ISubtypeInfo), 'pSubtypeInfo' )),
]
################################################################
## code template for ISubtypeInfos implementation
##class ISubtypeInfos_Impl(object):
##    @property
##    def Count(self):
##        u'The Subtype info count.'
##        #return Count
##
##    def Insert(self, Index, pSubtypeInfo):
##        u'Adds a Subtype info info at the specified position.'
##        #return 
##
##    def Remove(self, Index):
##        u'Removes the Subtype Info at the specified position.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'The Subtype Info at the specified position.'
##        #return ppSubtypeInfo
##
##    def RemoveAll(self):
##        u'Removes all Subtype infos.'
##        #return 
##
##    def Add(self, pSubtypeInfo):
##        u'Adds a Subtype Info.'
##        #return 
##

class MobileMapInfo(CoClass):
    u'This is depricated at 10.0:  The Mobile Server Info coclass provides read-only information about a map.'
    _reg_clsid_ = GUID('{5F37A9B4-77B5-4E45-A9FE-FE0651565314}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IMobileMapInfo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'This is depricated at 10.0:  Provides access to the MobileMapInfo.'
    _iid_ = GUID('{63DDDBAC-8588-45E2-820A-3BF2C5A99D27}')
    _idlflags_ = ['oleautomation']
MobileMapInfo._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMobileMapInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class IIdentifyDisplay(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that will identify based on display.'
    _iid_ = GUID('{25188498-8A07-49F1-9FAE-3AEFB14C1778}')
    _idlflags_ = ['oleautomation']
IIdentifyDisplay._methods_ = [
    COMMETHOD([helpstring(u'Identifies objects at the specified location for the given display.')], HRESULT, 'IdentifyEx',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'pDisplay' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'pGeom' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'ppArrObj' )),
]
################################################################
## code template for IIdentifyDisplay implementation
##class IIdentifyDisplay_Impl(object):
##    def IdentifyEx(self, pDisplay, pGeom, pTrackCancel):
##        u'Identifies objects at the specified location for the given display.'
##        #return ppArrObj
##

class NetCDFLayerFactory(CoClass):
    u'A factory for creating NetCDF layers.'
    _reg_clsid_ = GUID('{4CD72C00-A369-421A-9B0C-D2B1CD05D550}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
NetCDFLayerFactory._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILayerFactory]

class MapServerIP(CoClass):
    u'Map Server Message Proxy.'
    _reg_clsid_ = GUID('{334A3D35-5D95-47BD-A641-F4013068171F}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IMapServer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that serve maps.'
    _iid_ = GUID('{12353E37-AB79-48F7-9CB1-56EC9D7EB800}')
    _idlflags_ = ['oleautomation']
class IMapServer3(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that serve maps.'
    _iid_ = GUID('{58A70E5D-F883-4919-B573-CABAF849A7CE}')
    _idlflags_ = ['oleautomation']
class IMapServer4(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that serve maps.'
    _iid_ = GUID('{F1EC368E-D632-4F3F-A595-7742EC824E2B}')
    _idlflags_ = ['oleautomation']
class ITiledMapServer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that serve tiled maps.'
    _iid_ = GUID('{1627CE7E-954F-4013-9969-E726F8084C25}')
    _idlflags_ = ['oleautomation']
class ITiledMapServer2(ITiledMapServer):
    _case_insensitive_ = True
    u'Provides access to members that serve tiled maps.'
    _iid_ = GUID('{B5339959-B276-4485-AC86-15F3A9A40395}')
    _idlflags_ = ['oleautomation']
MapServerIP._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._746F6817_89BB_4490_9829_83CA25FD505A_0_10_2.IAGSServerObject2, comtypes.gen._746F6817_89BB_4490_9829_83CA25FD505A_0_10_2.IAGSServerObject, IMapServer, IMapServer2, IMapServer3, IMapServer4, ITiledMapServer, ITiledMapServer2, ITiledMapServer3]

class ILabelPlacementDescription(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Label Placement Description Interface.'
    _iid_ = GUID('{F5B9D652-BA0D-4E30-961F-C9B3D07478EC}')
    _idlflags_ = ['oleautomation']
ILabelPlacementDescription._methods_ = [
]
################################################################
## code template for ILabelPlacementDescription implementation
##class ILabelPlacementDescription_Impl(object):

class MapServerLegendClass(CoClass):
    u'The Map Server Legend Class coclass contains settings about a legend class.'
    _reg_clsid_ = GUID('{3651FC5F-0EC0-4380-9291-8A0E5CE3EAA6}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IMapServerLegendClass(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Map Server Legend Class Interface.'
    _iid_ = GUID('{0AB95E54-7EBF-4DE8-81EB-F383F21CC9B0}')
    _idlflags_ = ['oleautomation']
MapServerLegendClass._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMapServerLegendClass, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

class IMapServerProxyImpl(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to implementation of map server proxy object.'
    _iid_ = GUID('{3135A572-5E65-4C3C-A044-1F529BF7B0F6}')
    _idlflags_ = []
IMapServerProxyImpl._methods_ = [
    COMMETHOD([helpstring(u'Gets a tile for a given tile location from a given map; returns expiration date/time, if available; also, returns possible reason why tile fetching has failed.')], HRESULT, 'GetMapTileEx',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], c_int, 'Level' ),
              ( ['in'], c_int, 'Row' ),
              ( ['in'], c_int, 'Column' ),
              ( ['in'], c_int, 'CacheFormat' ),
              ( ['out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'Data' ),
              ( ['out'], POINTER(c_double), 'pExpiryDateTime' ),
              ( ['out'], POINTER(comtypes.gen._8F0541A3_D5BE_4B3F_A8D9_062D5579E19B_0_10_2.esriTileState), 'pTileState' )),
]
################################################################
## code template for IMapServerProxyImpl implementation
##class IMapServerProxyImpl_Impl(object):
##    def GetMapTileEx(self, MapName, Level, Row, Column, CacheFormat):
##        u'Gets a tile for a given tile location from a given map; returns expiration date/time, if available; also, returns possible reason why tile fetching has failed.'
##        #return Data, pExpiryDateTime, pTileState
##

class RasterColormapRenderer(CoClass):
    u'A raster colormap renderer.'
    _reg_clsid_ = GUID('{3B8283FA-1BD4-4212-B385-19E77B9E0D3B}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
RasterColormapRenderer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterRenderer, IRasterRenderer2, IRasterRendererInfo, IRasterDisplayProps, IIdentify, ILegendInfo, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayAdmin, IRasterRendererClassInfo, IDisplayTableExchange, IRasterRendererUpdate, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize]

class IImageServerLayer(ILayer):
    _case_insensitive_ = True
    u'Provides access to members that control an image server layer.'
    _iid_ = GUID('{CC22E766-607F-4C98-932E-E1A08A928A33}')
    _idlflags_ = ['oleautomation']
IImageServerLayer._methods_ = [
    COMMETHOD([helpstring(u'Initializes the layer with an image service URL.')], HRESULT, 'Initialize',
              ( ['in'], BSTR, 'ServiceURL' )),
    COMMETHOD(['propget', helpstring(u'The layer\u2019s service URL.')], HRESULT, 'ServiceURL',
              ( ['retval', 'out'], POINTER(BSTR), 'pServiceURL' )),
    COMMETHOD(['propget', helpstring(u'Layer\u2019s data source object.')], HRESULT, 'DataSource',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppDataSource' )),
    COMMETHOD(['propget', helpstring(u'The image service info.')], HRESULT, 'ServiceInfo',
              ( ['retval', 'out'], POINTER(POINTER(IImageServiceInfo)), 'ppServiceInfo' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the image resolution should be displayed in TOC.')], HRESULT, 'ShowResolution',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pShowResolution' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the image resolution should be displayed in TOC.')], HRESULT, 'ShowResolution',
              ( ['in'], VARIANT_BOOL, 'pShowResolution' )),
    COMMETHOD(['propget', helpstring(u'The extent of the dataframe that contains the layer.')], HRESULT, 'DataFrameExtent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'ppExtent' )),
    COMMETHOD(['propput', helpstring(u'The Visible extent of the layer in the data frame.')], HRESULT, 'VisibleExtent',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'ppExtent' )),
    COMMETHOD(['propget', helpstring(u'The Visible extent of the layer in the data frame.')], HRESULT, 'VisibleExtent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'ppExtent' )),
    COMMETHOD(['propget', helpstring(u'The transmission compression.')], HRESULT, 'Compression',
              ( ['retval', 'out'], POINTER(BSTR), 'pCompression' )),
    COMMETHOD(['propput', helpstring(u'The transmission compression.')], HRESULT, 'Compression',
              ( ['in'], BSTR, 'pCompression' )),
    COMMETHOD(['propget', helpstring(u'The transmission compression quality.')], HRESULT, 'CompressionQuality',
              ( ['retval', 'out'], POINTER(c_int), 'pQuality' )),
    COMMETHOD(['propput', helpstring(u'The transmission compression quality.')], HRESULT, 'CompressionQuality',
              ( ['in'], c_int, 'pQuality' )),
    COMMETHOD(['propget', helpstring(u'The assoicated raster.')], HRESULT, 'Raster',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster)), 'ppRaster' )),
    COMMETHOD(['propget', helpstring(u'The assoicated raster renderer.')], HRESULT, 'Renderer',
              ( ['retval', 'out'], POINTER(POINTER(IRasterRenderer)), 'ppRenderer' )),
    COMMETHOD(['propputref', helpstring(u'The assoicated raster renderer.')], HRESULT, 'Renderer',
              ( ['in'], POINTER(IRasterRenderer), 'ppRenderer' )),
]
################################################################
## code template for IImageServerLayer implementation
##class IImageServerLayer_Impl(object):
##    @property
##    def Raster(self):
##        u'The assoicated raster.'
##        #return ppRaster
##
##    def _get(self):
##        u'The transmission compression.'
##        #return pCompression
##    def _set(self, pCompression):
##        u'The transmission compression.'
##    Compression = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def ServiceInfo(self):
##        u'The image service info.'
##        #return ppServiceInfo
##
##    def _get(self):
##        u'Indicates if the image resolution should be displayed in TOC.'
##        #return pShowResolution
##    def _set(self, pShowResolution):
##        u'Indicates if the image resolution should be displayed in TOC.'
##    ShowResolution = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The transmission compression quality.'
##        #return pQuality
##    def _set(self, pQuality):
##        u'The transmission compression quality.'
##    CompressionQuality = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def DataSource(self):
##        u'Layer\u2019s data source object.'
##        #return ppDataSource
##
##    @property
##    def ServiceURL(self):
##        u'The layer\u2019s service URL.'
##        #return pServiceURL
##
##    def _get(self):
##        u'The Visible extent of the layer in the data frame.'
##        #return ppExtent
##    def _set(self, ppExtent):
##        u'The Visible extent of the layer in the data frame.'
##    VisibleExtent = property(_get, _set, doc = _set.__doc__)
##
##    def Initialize(self, ServiceURL):
##        u'Initializes the layer with an image service URL.'
##        #return 
##
##    @property
##    def DataFrameExtent(self):
##        u'The extent of the dataframe that contains the layer.'
##        #return ppExtent
##
##    def Renderer(self, ppRenderer):
##        u'The assoicated raster renderer.'
##        #return 
##

class IProportionalSymbolRenderer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the drawing of varying size symbols for each feature, each sized in proportion to a field value.'
    _iid_ = GUID('{EC45BFA6-8EFC-11D2-AB21-00C04FA334B3}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'esriValueRepresentations'
esriValueRepUnknown = 0
esriValueRepRadius = 1
esriValueRepArea = 2
esriValueRepDistance = 3
esriValueRepWidth = 4
esriValueRepresentations = c_int # enum
IProportionalSymbolRenderer._methods_ = [
    COMMETHOD(['propget', helpstring(u'Value field.')], HRESULT, 'Field',
              ( ['retval', 'out'], POINTER(BSTR), 'Field' )),
    COMMETHOD(['propput', helpstring(u'Value field.')], HRESULT, 'Field',
              ( ['in'], BSTR, 'Field' )),
    COMMETHOD(['propget', helpstring(u'Normalization field.')], HRESULT, 'NormField',
              ( ['retval', 'out'], POINTER(BSTR), 'Field' )),
    COMMETHOD(['propput', helpstring(u'Normalization field.')], HRESULT, 'NormField',
              ( ['in'], BSTR, 'Field' )),
    COMMETHOD(['propput', helpstring(u'Normalized maximum data value.')], HRESULT, 'MaxDataValue',
              ( ['in'], c_double, 'rhs' )),
    COMMETHOD(['propput', helpstring(u'Normalized minimum data value.')], HRESULT, 'MinDataValue',
              ( ['in'], c_double, 'rhs' )),
    COMMETHOD(['propget', helpstring(u'Symbol used to draw feature with the normalized minimum data value.')], HRESULT, 'MinSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol)), 'sym' )),
    COMMETHOD(['propput', helpstring(u'Symbol used to draw feature with the normalized minimum data value.')], HRESULT, 'MinSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol), 'sym' )),
    COMMETHOD(['propget', helpstring(u'Units of the value field.')], HRESULT, 'ValueUnit',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits), 'unit' )),
    COMMETHOD(['propput', helpstring(u'Units of the value field.')], HRESULT, 'ValueUnit',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits, 'unit' )),
    COMMETHOD(['propget', helpstring(u'Representation type of the value field.')], HRESULT, 'ValueRepresentation',
              ( ['retval', 'out'], POINTER(esriValueRepresentations), 'rep' )),
    COMMETHOD(['propput', helpstring(u'Representation type of the value field.')], HRESULT, 'ValueRepresentation',
              ( ['in'], esriValueRepresentations, 'rep' )),
    COMMETHOD(['propget', helpstring(u'Indicates if Flannery Compensation is applied.')], HRESULT, 'FlanneryCompensation',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if Flannery Compensation is applied.')], HRESULT, 'FlanneryCompensation',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Number of symbols displayed in the TOC and legend.')], HRESULT, 'LegendSymbolCount',
              ( ['retval', 'out'], POINTER(c_int), 'num' )),
    COMMETHOD(['propput', helpstring(u'Number of symbols displayed in the TOC and legend.')], HRESULT, 'LegendSymbolCount',
              ( ['in'], c_int, 'num' )),
    COMMETHOD(['propget', helpstring(u'Background fill symbol used when proportional marker symbols are draw on polygon features.')], HRESULT, 'BackgroundSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IFillSymbol)), 'sym' )),
    COMMETHOD(['propput', helpstring(u'Background fill symbol used when proportional marker symbols are draw on polygon features.')], HRESULT, 'BackgroundSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IFillSymbol), 'sym' )),
    COMMETHOD([helpstring(u'Creates the legend. Call after all properties have been set.')], HRESULT, 'CreateLegendSymbols'),
]
################################################################
## code template for IProportionalSymbolRenderer implementation
##class IProportionalSymbolRenderer_Impl(object):
##    def _get(self):
##        u'Units of the value field.'
##        #return unit
##    def _set(self, unit):
##        u'Units of the value field.'
##    ValueUnit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Symbol used to draw feature with the normalized minimum data value.'
##        #return sym
##    def _set(self, sym):
##        u'Symbol used to draw feature with the normalized minimum data value.'
##    MinSymbol = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if Flannery Compensation is applied.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if Flannery Compensation is applied.'
##    FlanneryCompensation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Normalization field.'
##        #return Field
##    def _set(self, Field):
##        u'Normalization field.'
##    NormField = property(_get, _set, doc = _set.__doc__)
##
##    def _set(self, rhs):
##        u'Normalized maximum data value.'
##    MaxDataValue = property(fset = _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Number of symbols displayed in the TOC and legend.'
##        #return num
##    def _set(self, num):
##        u'Number of symbols displayed in the TOC and legend.'
##    LegendSymbolCount = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Background fill symbol used when proportional marker symbols are draw on polygon features.'
##        #return sym
##    def _set(self, sym):
##        u'Background fill symbol used when proportional marker symbols are draw on polygon features.'
##    BackgroundSymbol = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Value field.'
##        #return Field
##    def _set(self, Field):
##        u'Value field.'
##    Field = property(_get, _set, doc = _set.__doc__)
##
##    def _set(self, rhs):
##        u'Normalized minimum data value.'
##    MinDataValue = property(fset = _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Representation type of the value field.'
##        #return rep
##    def _set(self, rep):
##        u'Representation type of the value field.'
##    ValueRepresentation = property(_get, _set, doc = _set.__doc__)
##
##    def CreateLegendSymbols(self):
##        u'Creates the legend. Call after all properties have been set.'
##        #return 
##

class ILevelRenderer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the drawing of symbols for features, where symbols are separated into levels, and each level drawn separately.'
    _iid_ = GUID('{DC3D8097-C1ED-11D2-9F21-00C04F6BC709}')
    _idlflags_ = ['oleautomation']
ILevelRenderer._methods_ = [
    COMMETHOD(['propput', helpstring(u'The current draw level, (set to -1 to draw all levels).')], HRESULT, 'CurrentDrawLevel',
              ( ['in'], c_int, 'rhs' )),
    COMMETHOD(['propget', helpstring(u'Array that contains all levels used by the symbols, (symbols without a level get a level of 0).')], HRESULT, 'LevelArray',
              ( ['retval', 'out'], POINTER(VARIANT), 'levels' )),
]
################################################################
## code template for ILevelRenderer implementation
##class ILevelRenderer_Impl(object):
##    def _set(self, rhs):
##        u'The current draw level, (set to -1 to draw all levels).'
##    CurrentDrawLevel = property(fset = _set, doc = _set.__doc__)
##
##    @property
##    def LevelArray(self):
##        u'Array that contains all levels used by the symbols, (symbols without a level get a level of 0).'
##        #return levels
##

class MapServerObjectDescription(CoClass):
    u'Server object description for the MapServer object.'
    _reg_clsid_ = GUID('{64B34819-F839-497E-8C7D-D980DACD65EC}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
MapServerObjectDescription._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._746F6817_89BB_4490_9829_83CA25FD505A_0_10_2.IServerObjectDescription]

class MaplexRotationProperties(CoClass):
    u'Properties that specify the label rotation rules.'
    _reg_clsid_ = GUID('{20664808-BBA1-CCD2-8967-F453C9ED732A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IMaplexRotationProperties2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the placement of rotated labels.'
    _iid_ = GUID('{DEF4269E-EFFA-B003-28FE-BA19E4EE412A}')
    _idlflags_ = ['oleautomation']
MaplexRotationProperties._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMaplexRotationProperties, IMaplexRotationProperties2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class IPage(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the Page.'
    _iid_ = GUID('{2AB4981F-9406-11D0-87EF-080009EC732A}')
    _idlflags_ = ['oleautomation']
IPrintAndExport._methods_ = [
    COMMETHOD(['propget', helpstring(u'The names of available printers.')], HRESULT, 'PrinterNames',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IEnumBSTR)), 'PrinterNames' )),
    COMMETHOD(['propget', helpstring(u'The row that defines the specified data driven page.')], HRESULT, 'PageRow',
              ( ['in'], POINTER(IActiveView), 'ActiveView' ),
              ( ['in'], BSTR, 'PageName' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRow)), 'PageRow' )),
    COMMETHOD(['propget', helpstring(u'The data driven pages count.')], HRESULT, 'PageCount',
              ( ['in'], POINTER(IActiveView), 'ActiveView' ),
              ( ['retval', 'out'], POINTER(c_int), 'pPageCount' )),
    COMMETHOD([helpstring(u'Print the specified pages.')], HRESULT, 'PrintPages',
              ( ['in'], POINTER(IActiveView), 'pActiveView' ),
              ( ['in'], POINTER(comtypes.gen._7DB92CEC_CB65_420A_8737_FCD0722FD436_0_10_2.IPrinter), 'pPrinter' ),
              ( ['in'], POINTER(IPage), 'pPage' ),
              ( ['in'], POINTER(comtypes.gen._7DB92CEC_CB65_420A_8737_FCD0722FD436_0_10_2.IPrintAndExportPageOptions), 'options' ),
              ( ['in', 'optional'], c_int, 'resRatio', 0 ),
              ( ['in', 'optional'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel', 0 )),
    COMMETHOD([helpstring(u'Print the specified view.')], HRESULT, 'Print',
              ( ['in'], POINTER(IActiveView), 'pActiveView' ),
              ( ['in'], POINTER(comtypes.gen._7DB92CEC_CB65_420A_8737_FCD0722FD436_0_10_2.IPrinter), 'pPrinter' ),
              ( ['in'], POINTER(IPage), 'pPage' ),
              ( ['in', 'optional'], c_int, 'PageID', 1 ),
              ( ['in', 'optional'], c_int, 'resRatio', 0 ),
              ( ['in', 'optional'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel', 0 )),
    COMMETHOD([helpstring(u'Export the specified pages.')], HRESULT, 'ExportPages',
              ( ['in'], POINTER(IActiveView), 'pActiveView' ),
              ( ['in'], POINTER(comtypes.gen._7DB92CEC_CB65_420A_8737_FCD0722FD436_0_10_2.IExportPDF), 'pPDFExport' ),
              ( ['in'], POINTER(comtypes.gen._7DB92CEC_CB65_420A_8737_FCD0722FD436_0_10_2.IPrintAndExportPageOptions), 'options' ),
              ( ['in'], c_double, 'Resolution' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' )),
    COMMETHOD([helpstring(u'Export the specified view.')], HRESULT, 'Export',
              ( ['in'], POINTER(IActiveView), 'pActiveView' ),
              ( ['in'], POINTER(comtypes.gen._7DB92CEC_CB65_420A_8737_FCD0722FD436_0_10_2.IExport), 'pExport' ),
              ( ['in'], c_double, 'Resolution' ),
              ( ['in'], VARIANT_BOOL, 'clip2GraphicExtent' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' )),
]
################################################################
## code template for IPrintAndExport implementation
##class IPrintAndExport_Impl(object):
##    def ExportPages(self, pActiveView, pPDFExport, options, Resolution, pTrackCancel):
##        u'Export the specified pages.'
##        #return 
##
##    @property
##    def PageCount(self, ActiveView):
##        u'The data driven pages count.'
##        #return pPageCount
##
##    def Print(self, pActiveView, pPrinter, pPage, PageID, resRatio, pTrackCancel):
##        u'Print the specified view.'
##        #return 
##
##    def Export(self, pActiveView, pExport, Resolution, clip2GraphicExtent, pTrackCancel):
##        u'Export the specified view.'
##        #return 
##
##    @property
##    def PrinterNames(self):
##        u'The names of available printers.'
##        #return PrinterNames
##
##    @property
##    def PageRow(self, ActiveView, PageName):
##        u'The row that defines the specified data driven page.'
##        #return PageRow
##
##    def PrintPages(self, pActiveView, pPrinter, pPage, options, resRatio, pTrackCancel):
##        u'Print the specified pages.'
##        #return 
##

class IRasterDefaultsEnv5(IRasterDefaultsEnv4):
    _case_insensitive_ = True
    u'Provides access to members that control the default raster environment.'
    _iid_ = GUID('{AF3085CD-39D4-45E3-93D0-1071CB4527CB}')
    _idlflags_ = ['oleautomation']
class IRasterDefaultsEnv6(IRasterDefaultsEnv5):
    _case_insensitive_ = True
    u'Provides access to members that control the default raster environment.'
    _iid_ = GUID('{FD9ACC55-6A35-4888-B3C8-9604887B2FC3}')
    _idlflags_ = ['oleautomation']
class IRasterDefaultsEnv7(IRasterDefaultsEnv6):
    _case_insensitive_ = True
    u'Provides access to members that control the default raster environment.'
    _iid_ = GUID('{D6071D40-E01C-453E-8F3B-A84E0BDA0192}')
    _idlflags_ = ['oleautomation']
class IRasterDefaultsEnv8(IRasterDefaultsEnv7):
    _case_insensitive_ = True
    u'Provides access to members that control the default raster environment.'
    _iid_ = GUID('{BCBED4B5-354F-4B65-811E-91D322B2EDE7}')
    _idlflags_ = ['oleautomation']
class IRasterDefaultsEnv9(IRasterDefaultsEnv8):
    _case_insensitive_ = True
    u'Provides access to members that control the default raster environment.'
    _iid_ = GUID('{55141934-2352-4FA1-9A42-5F13C0B4D9C4}')
    _idlflags_ = ['oleautomation']
IRasterDefaultsEnv5._methods_ = [
    COMMETHOD(['propput', helpstring(u'Indicates if a background value is being used.')], HRESULT, 'DisplayBackground',
              ( ['in'], VARIANT_BOOL, 'b' )),
    COMMETHOD(['propget', helpstring(u'Indicates if a background value is being used.')], HRESULT, 'DisplayBackground',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'b' )),
    COMMETHOD([helpstring(u'background value.')], HRESULT, 'QueryBackgroundValues',
              ( ['out'], POINTER(c_double), 'pRed' ),
              ( ['out'], POINTER(c_double), 'pGreen' ),
              ( ['out'], POINTER(c_double), 'pBlue' )),
    COMMETHOD([helpstring(u'background value.')], HRESULT, 'SetBackgroundValues',
              ( ['in'], c_double, 'Red' ),
              ( ['in'], c_double, 'Green' ),
              ( ['in'], c_double, 'Blue' )),
    COMMETHOD(['propget', helpstring(u'The color of background.')], HRESULT, 'BackgroundColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'ppColor' )),
    COMMETHOD(['propput', helpstring(u'The color of background.')], HRESULT, 'BackgroundColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'ppColor' )),
    COMMETHOD(['propget', helpstring(u'Nodata color for a raster layer.')], HRESULT, 'NoDataColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'ppColor' )),
    COMMETHOD(['propput', helpstring(u'Nodata color for a raster layer.')], HRESULT, 'NoDataColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'ppColor' )),
    COMMETHOD(['propget', helpstring(u'Indicates if newly created TIFF images should be tiled.')], HRESULT, 'CreateTiledTIFF',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pTiled' )),
    COMMETHOD(['propput', helpstring(u'Indicates if newly created TIFF images should be tiled.')], HRESULT, 'CreateTiledTIFF',
              ( ['in'], VARIANT_BOOL, 'pTiled' )),
]
################################################################
## code template for IRasterDefaultsEnv5 implementation
##class IRasterDefaultsEnv5_Impl(object):
##    def _get(self):
##        u'Indicates if a background value is being used.'
##        #return b
##    def _set(self, b):
##        u'Indicates if a background value is being used.'
##    DisplayBackground = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The color of background.'
##        #return ppColor
##    def _set(self, ppColor):
##        u'The color of background.'
##    BackgroundColor = property(_get, _set, doc = _set.__doc__)
##
##    def QueryBackgroundValues(self):
##        u'background value.'
##        #return pRed, pGreen, pBlue
##
##    def _get(self):
##        u'Nodata color for a raster layer.'
##        #return ppColor
##    def _set(self, ppColor):
##        u'Nodata color for a raster layer.'
##    NoDataColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if newly created TIFF images should be tiled.'
##        #return pTiled
##    def _set(self, pTiled):
##        u'Indicates if newly created TIFF images should be tiled.'
##    CreateTiledTIFF = property(_get, _set, doc = _set.__doc__)
##
##    def SetBackgroundValues(self, Red, Green, Blue):
##        u'background value.'
##        #return 
##

IRasterDefaultsEnv6._methods_ = [
    COMMETHOD(['propput', helpstring(u'Indicates if a mosaic layer should be expanded or collapsed by default.')], HRESULT, 'MosaicLayerIsExpanded',
              ( ['in'], VARIANT_BOOL, 'pIsExpanded' )),
    COMMETHOD(['propget', helpstring(u'Indicates if a mosaic layer should be expanded or collapsed by default.')], HRESULT, 'MosaicLayerIsExpanded',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pIsExpanded' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the boundary sub-layer of a mosaic layer is visible by default.')], HRESULT, 'BoundarySubLayerIsVisible',
              ( ['in'], VARIANT_BOOL, 'pIsVisible' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the boundary sub-layer of a mosaic layer is visible by default.')], HRESULT, 'BoundarySubLayerIsVisible',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pIsVisible' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the footprint sub-layer of a mosaic layer is visible by default.')], HRESULT, 'FootprintSubLayerIsVisible',
              ( ['in'], VARIANT_BOOL, 'pIsVisible' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the footprint sub-layer of a mosaic layer is visible by default.')], HRESULT, 'FootprintSubLayerIsVisible',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pIsVisible' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the preview sub-layer of a mosaic layer is visible by default.')], HRESULT, 'PreviewSubLayerIsVisible',
              ( ['in'], VARIANT_BOOL, 'pIsVisible' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the preview sub-layer of a mosaic layer is visible by default.')], HRESULT, 'PreviewSubLayerIsVisible',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pIsVisible' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the seamline sub-layer of a mosaic layer is visible by default.')], HRESULT, 'SeamlineSubLayerIsVisible',
              ( ['in'], VARIANT_BOOL, 'pIsVisible' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the seamline sub-layer of a mosaic layer is visible by default.')], HRESULT, 'SeamlineSubLayerIsVisible',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pIsVisible' )),
]
################################################################
## code template for IRasterDefaultsEnv6 implementation
##class IRasterDefaultsEnv6_Impl(object):
##    def _get(self):
##        u'Indicates if the seamline sub-layer of a mosaic layer is visible by default.'
##        #return pIsVisible
##    def _set(self, pIsVisible):
##        u'Indicates if the seamline sub-layer of a mosaic layer is visible by default.'
##    SeamlineSubLayerIsVisible = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the preview sub-layer of a mosaic layer is visible by default.'
##        #return pIsVisible
##    def _set(self, pIsVisible):
##        u'Indicates if the preview sub-layer of a mosaic layer is visible by default.'
##    PreviewSubLayerIsVisible = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the footprint sub-layer of a mosaic layer is visible by default.'
##        #return pIsVisible
##    def _set(self, pIsVisible):
##        u'Indicates if the footprint sub-layer of a mosaic layer is visible by default.'
##    FootprintSubLayerIsVisible = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if a mosaic layer should be expanded or collapsed by default.'
##        #return pIsExpanded
##    def _set(self, pIsExpanded):
##        u'Indicates if a mosaic layer should be expanded or collapsed by default.'
##    MosaicLayerIsExpanded = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the boundary sub-layer of a mosaic layer is visible by default.'
##        #return pIsVisible
##    def _set(self, pIsVisible):
##        u'Indicates if the boundary sub-layer of a mosaic layer is visible by default.'
##    BoundarySubLayerIsVisible = property(_get, _set, doc = _set.__doc__)
##

IRasterDefaultsEnv7._methods_ = [
    COMMETHOD(['propput', helpstring(u'Indicate stretch type.')], HRESULT, 'StretchType',
              ( ['in'], esriRasterStretchTypesEnum, 'en_stretch' )),
    COMMETHOD(['propget', helpstring(u'Indicate stretch type.')], HRESULT, 'StretchType',
              ( ['retval', 'out'], POINTER(esriRasterStretchTypesEnum), 'en_stretch' )),
    COMMETHOD(['propput', helpstring(u'Standard deviation parameter for the stretch renderer.')], HRESULT, 'StandardDeviationsParam',
              ( ['in'], c_double, 'param' )),
    COMMETHOD(['propget', helpstring(u'Standard deviation parameter for the stretch renderer.')], HRESULT, 'StandardDeviationsParam',
              ( ['retval', 'out'], POINTER(c_double), 'param' )),
    COMMETHOD(['propput', helpstring(u'Indicates if Gamma stretch should be applied.')], HRESULT, 'UseGamma',
              ( ['in'], VARIANT_BOOL, 'pUseGamma' )),
    COMMETHOD(['propget', helpstring(u'Indicates if Gamma stretch should be applied.')], HRESULT, 'UseGamma',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pUseGamma' )),
    COMMETHOD(['propput', helpstring(u'Gamma red value.')], HRESULT, 'GammaRedValue',
              ( ['in'], c_double, 'pRedGamma' )),
    COMMETHOD(['propget', helpstring(u'Gamma red value.')], HRESULT, 'GammaRedValue',
              ( ['retval', 'out'], POINTER(c_double), 'pRedGamma' )),
    COMMETHOD(['propput', helpstring(u'Gamma green value.')], HRESULT, 'GammaGreenValue',
              ( ['in'], c_double, 'pGreenGamma' )),
    COMMETHOD(['propget', helpstring(u'Gamma green value.')], HRESULT, 'GammaGreenValue',
              ( ['retval', 'out'], POINTER(c_double), 'pGreenGamma' )),
    COMMETHOD(['propput', helpstring(u'Gamma blue value.')], HRESULT, 'GammaBlueValue',
              ( ['in'], c_double, 'pBlueGamma' )),
    COMMETHOD(['propget', helpstring(u'Gamma blue value.')], HRESULT, 'GammaBlueValue',
              ( ['retval', 'out'], POINTER(c_double), 'pBlueGamma' )),
    COMMETHOD(['propput', helpstring(u'The minimum (low) percent value.')], HRESULT, 'MinPercent',
              ( ['in'], c_double, 'pPercent' )),
    COMMETHOD(['propget', helpstring(u'The minimum (low) percent value.')], HRESULT, 'MinPercent',
              ( ['retval', 'out'], POINTER(c_double), 'pPercent' )),
    COMMETHOD(['propput', helpstring(u'The maximum (high) percent value.')], HRESULT, 'MaxPercent',
              ( ['in'], c_double, 'pPercent' )),
    COMMETHOD(['propget', helpstring(u'The maximum (high) percent value.')], HRESULT, 'MaxPercent',
              ( ['retval', 'out'], POINTER(c_double), 'pPercent' )),
]
################################################################
## code template for IRasterDefaultsEnv7 implementation
##class IRasterDefaultsEnv7_Impl(object):
##    def _get(self):
##        u'Standard deviation parameter for the stretch renderer.'
##        #return param
##    def _set(self, param):
##        u'Standard deviation parameter for the stretch renderer.'
##    StandardDeviationsParam = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Gamma green value.'
##        #return pGreenGamma
##    def _set(self, pGreenGamma):
##        u'Gamma green value.'
##    GammaGreenValue = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Gamma red value.'
##        #return pRedGamma
##    def _set(self, pRedGamma):
##        u'Gamma red value.'
##    GammaRedValue = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The maximum (high) percent value.'
##        #return pPercent
##    def _set(self, pPercent):
##        u'The maximum (high) percent value.'
##    MaxPercent = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if Gamma stretch should be applied.'
##        #return pUseGamma
##    def _set(self, pUseGamma):
##        u'Indicates if Gamma stretch should be applied.'
##    UseGamma = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Gamma blue value.'
##        #return pBlueGamma
##    def _set(self, pBlueGamma):
##        u'Gamma blue value.'
##    GammaBlueValue = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicate stretch type.'
##        #return en_stretch
##    def _set(self, en_stretch):
##        u'Indicate stretch type.'
##    StretchType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The minimum (low) percent value.'
##        #return pPercent
##    def _set(self, pPercent):
##        u'The minimum (low) percent value.'
##    MinPercent = property(_get, _set, doc = _set.__doc__)
##

IRasterDefaultsEnv8._methods_ = [
    COMMETHOD(['propput', helpstring(u'Indicates if the user specified default settings are to be used for rendering.')], HRESULT, 'RenderingDefaultsEnabled',
              ( ['in'], VARIANT_BOOL, 'pYes' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the user specified default settings are to be used for rendering.')], HRESULT, 'RenderingDefaultsEnabled',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pYes' )),
    COMMETHOD(['propput', helpstring(u"Indicates if the band's spectral information (if available) is to be used to determine the RGB mapping for rendering multi-band raster datasets.")], HRESULT, 'UseBandSpectralInfoForRGBMapping',
              ( ['in'], VARIANT_BOOL, 'pYes' )),
    COMMETHOD(['propget', helpstring(u"Indicates if the band's spectral information (if available) is to be used to determine the RGB mapping for rendering multi-band raster datasets.")], HRESULT, 'UseBandSpectralInfoForRGBMapping',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pYes' )),
    COMMETHOD(['propput', helpstring(u'Indicates if raster type service layers is to draw using the service cache by default (if available) when added to an application.')], HRESULT, 'DisplayServiceCacheByDefault',
              ( ['in'], VARIANT_BOOL, 'pYes' )),
    COMMETHOD(['propget', helpstring(u'Indicates if raster type service layers is to draw using the service cache by default (if available) when added to an application.')], HRESULT, 'DisplayServiceCacheByDefault',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pYes' )),
]
################################################################
## code template for IRasterDefaultsEnv8 implementation
##class IRasterDefaultsEnv8_Impl(object):
##    def _get(self):
##        u"Indicates if the band's spectral information (if available) is to be used to determine the RGB mapping for rendering multi-band raster datasets."
##        #return pYes
##    def _set(self, pYes):
##        u"Indicates if the band's spectral information (if available) is to be used to determine the RGB mapping for rendering multi-band raster datasets."
##    UseBandSpectralInfoForRGBMapping = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the user specified default settings are to be used for rendering.'
##        #return pYes
##    def _set(self, pYes):
##        u'Indicates if the user specified default settings are to be used for rendering.'
##    RenderingDefaultsEnabled = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if raster type service layers is to draw using the service cache by default (if available) when added to an application.'
##        #return pYes
##    def _set(self, pYes):
##        u'Indicates if raster type service layers is to draw using the service cache by default (if available) when added to an application.'
##    DisplayServiceCacheByDefault = property(_get, _set, doc = _set.__doc__)
##

IRasterDefaultsEnv9._methods_ = [
    COMMETHOD(['propput', helpstring(u'Pyramid resampling method.')], HRESULT, 'PyramidResamplingMethod',
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.rstResamplingTypes, 'pYes' )),
    COMMETHOD(['propget', helpstring(u'Pyramid resampling method.')], HRESULT, 'PyramidResamplingMethod',
              ( ['retval', 'out'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.rstResamplingTypes), 'pYes' )),
    COMMETHOD(['propput', helpstring(u'Pyramid compression type.')], HRESULT, 'PyramidCompressionType',
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriRasterCompressionType, 'compressionType' )),
    COMMETHOD(['propget', helpstring(u'Pyramid compression type.')], HRESULT, 'PyramidCompressionType',
              ( ['retval', 'out'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriRasterCompressionType), 'compressionType' )),
    COMMETHOD(['propput', helpstring(u'pyramid compression quality.')], HRESULT, 'PyramidCompressionQuality',
              ( ['in'], c_int, 'Quality' )),
    COMMETHOD(['propget', helpstring(u'pyramid compression quality.')], HRESULT, 'PyramidCompressionQuality',
              ( ['retval', 'out'], POINTER(c_int), 'Quality' )),
]
################################################################
## code template for IRasterDefaultsEnv9 implementation
##class IRasterDefaultsEnv9_Impl(object):
##    def _get(self):
##        u'pyramid compression quality.'
##        #return Quality
##    def _set(self, Quality):
##        u'pyramid compression quality.'
##    PyramidCompressionQuality = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Pyramid compression type.'
##        #return compressionType
##    def _set(self, compressionType):
##        u'Pyramid compression type.'
##    PyramidCompressionType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Pyramid resampling method.'
##        #return pYes
##    def _set(self, pYes):
##        u'Pyramid resampling method.'
##    PyramidResamplingMethod = property(_get, _set, doc = _set.__doc__)
##

class MaplexAnnotationPropertiesConverter(CoClass):
    u'Converts placement properties between the Maplex and standard placement engines.'
    _reg_clsid_ = GUID('{20664808-9015-BDF1-40AF-0CA125A0D2EF}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IAnnotationPropertiesConverter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that convert annotation properties from one type to another.'
    _iid_ = GUID('{3A92DE4F-C31A-11D2-9F34-76BC4E6AC621}')
    _idlflags_ = ['oleautomation']
MaplexAnnotationPropertiesConverter._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IAnnotationPropertiesConverter]

class SelectionEnvironment(CoClass):
    u'Defines the feature selection environment.'
    _reg_clsid_ = GUID('{E3875B71-D9F5-11D1-ADD4-080009EC732A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class ISelectionEnvironmentThreshold(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the selection environment warning threshold.'
    _iid_ = GUID('{B7B1E910-F760-11D3-ADF3-00C04FA33A15}')
    _idlflags_ = ['oleautomation']
class ISelectionEnvironmentStorage(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that controls whether objects save their selections.'
    _iid_ = GUID('{A231C0E1-0BDB-11D4-9FEA-00C04F6BC78E}')
    _idlflags_ = ['oleautomation']
class ISelectionEnvironmentLayer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the behavior of invisible layers when a new selection is made.'
    _iid_ = GUID('{DABAC83C-3313-11D4-9FF4-00C04F6BC78E}')
    _idlflags_ = ['oleautomation']
SelectionEnvironment._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ISelectionEnvironment, ISelectionEnvironmentThreshold, ISelectionEnvironmentStorage, ISelectionEnvironmentLayer, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

class MaplexOffsetAlongLineProperties(CoClass):
    u'Properties that specify the offset along line rules.'
    _reg_clsid_ = GUID('{20664808-4FA1-C1D1-8C0A-08A2C9ED531A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IMaplexOffsetAlongLineProperties(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the placement of labels along a line feature.'
    _iid_ = GUID('{20664808-1A42-1FA1-FCD1-0B532F3C8FFA}')
    _idlflags_ = ['oleautomation']
MaplexOffsetAlongLineProperties._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMaplexOffsetAlongLineProperties, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class IMapServerObjectLANProxy(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control MapServer LAN proxy.'
    _iid_ = GUID('{826A202A-DA00-403F-A18C-C5A7D75774A9}')
    _idlflags_ = []
IMapServerObjectLANProxy._methods_ = [
    COMMETHOD(['propget', helpstring(u'The physical directory for cache files.')], HRESULT, 'PhysicalCacheDirectory',
              ( ['retval', 'out'], POINTER(BSTR), 'pCacheDir' )),
]
################################################################
## code template for IMapServerObjectLANProxy implementation
##class IMapServerObjectLANProxy_Impl(object):
##    @property
##    def PhysicalCacheDirectory(self):
##        u'The physical directory for cache files.'
##        #return pCacheDir
##

class ILookupLegendClass(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u"Provides access to functionality for looking up a renderer's legend class via a feature."
    _iid_ = GUID('{BDB4BF86-8691-4F1C-B009-42E39035F40E}')
    _idlflags_ = ['oleautomation']
ILookupLegendClass._methods_ = [
    COMMETHOD([helpstring(u'Returns the legend group and the legend class indexes for the input feature.')], HRESULT, 'LookupLegendClass',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeature), 'Feature' ),
              ( ['out'], POINTER(c_int), 'legendGroupIdx' ),
              ( ['retval', 'out'], POINTER(c_int), 'legendClassIdx' )),
    COMMETHOD(['propget', helpstring(u'Number of fields.')], HRESULT, 'FieldCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'Field at the specified index.')], HRESULT, 'Field',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
]
################################################################
## code template for ILookupLegendClass implementation
##class ILookupLegendClass_Impl(object):
##    @property
##    def Field(self, Index):
##        u'Field at the specified index.'
##        #return Name
##
##    def LookupLegendClass(self, Feature):
##        u'Returns the legend group and the legend class indexes for the input feature.'
##        #return legendGroupIdx, legendClassIdx
##
##    @property
##    def FieldCount(self):
##        u'Number of fields.'
##        #return Count
##

IMosaicLayer._methods_ = [
    COMMETHOD(['propget', helpstring(u'Filepath of the data source.')], HRESULT, 'FilePath',
              ( ['retval', 'out'], POINTER(BSTR), 'FilePath' )),
    COMMETHOD(['propget', helpstring(u'The Mosaic Dataset referenced by the Mosaic Layer.')], HRESULT, 'MosaicDataset',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._8F0541A3_D5BE_4B3F_A8D9_062D5579E19B_0_10_2.IMosaicDataset)), 'ppMosaicDataset' )),
    COMMETHOD(['propget', helpstring(u'The footprint layer referenced by the Mosaic Layer.')], HRESULT, 'FootprintLayer',
              ( ['retval', 'out'], POINTER(POINTER(IFeatureLayer)), 'ppLayer' )),
    COMMETHOD(['propget', helpstring(u'The Boundary layer referenced by the Mosaic Layer.')], HRESULT, 'BoundaryLayer',
              ( ['retval', 'out'], POINTER(POINTER(IFeatureLayer)), 'ppLayer' )),
    COMMETHOD(['propget', helpstring(u'The preview layer referenced by the Mosaic Layer.')], HRESULT, 'PreviewLayer',
              ( ['retval', 'out'], POINTER(POINTER(IImageServerLayer)), 'ppLayer' )),
    COMMETHOD(['propget', helpstring(u'The seamline layer referenced by the Mosaic Layer.')], HRESULT, 'SeamlineLayer',
              ( ['retval', 'out'], POINTER(POINTER(IFeatureLayer)), 'ppLayer' )),
    COMMETHOD([helpstring(u'Creates the layer from the mosaic dataset')], HRESULT, 'CreateFromMosaicDataset',
              ( ['in'], POINTER(comtypes.gen._8F0541A3_D5BE_4B3F_A8D9_062D5579E19B_0_10_2.IMosaicDataset), 'MosaicDataset' )),
    COMMETHOD([helpstring(u'Creates the layer from a file path to the mosaic dataset')], HRESULT, 'CreateFromFilePath',
              ( ['in'], BSTR, 'FilePath' )),
]
################################################################
## code template for IMosaicLayer implementation
##class IMosaicLayer_Impl(object):
##    @property
##    def FilePath(self):
##        u'Filepath of the data source.'
##        #return FilePath
##
##    @property
##    def SeamlineLayer(self):
##        u'The seamline layer referenced by the Mosaic Layer.'
##        #return ppLayer
##
##    def CreateFromFilePath(self, FilePath):
##        u'Creates the layer from a file path to the mosaic dataset'
##        #return 
##
##    @property
##    def BoundaryLayer(self):
##        u'The Boundary layer referenced by the Mosaic Layer.'
##        #return ppLayer
##
##    @property
##    def PreviewLayer(self):
##        u'The preview layer referenced by the Mosaic Layer.'
##        #return ppLayer
##
##    @property
##    def FootprintLayer(self):
##        u'The footprint layer referenced by the Mosaic Layer.'
##        #return ppLayer
##
##    def CreateFromMosaicDataset(self, MosaicDataset):
##        u'Creates the layer from the mosaic dataset'
##        #return 
##
##    @property
##    def MosaicDataset(self):
##        u'The Mosaic Dataset referenced by the Mosaic Layer.'
##        #return ppMosaicDataset
##

class IMapServerSublayer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the available properties of a map server sublayer object.'
    _iid_ = GUID('{B059B902-5C7A-4287-982E-EF0BC77C6AAB}')
    _idlflags_ = ['oleautomation']
IMapServerSublayer._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if the layer has labels to turn on and off.')], HRESULT, 'HasLabels',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'HasLabels' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the layer should display its dynamic labels.')], HRESULT, 'ShowLabels',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Show' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the layer should display its dynamic labels.')], HRESULT, 'ShowLabels',
              ( ['in'], VARIANT_BOOL, 'Show' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the layer should scale its symbols according to the reference scale.')], HRESULT, 'ScaleSymbols',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'ScaleSymbols' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the layer should scale its symbols according to the reference scale.')], HRESULT, 'ScaleSymbols',
              ( ['in'], VARIANT_BOOL, 'ScaleSymbols' )),
    COMMETHOD(['propget', helpstring(u'The layer description.')], HRESULT, 'LayerDescription',
              ( ['retval', 'out'], POINTER(POINTER(ILayerDescription)), 'layerDesc' )),
]
################################################################
## code template for IMapServerSublayer implementation
##class IMapServerSublayer_Impl(object):
##    def _get(self):
##        u'Indicates whether the layer should display its dynamic labels.'
##        #return Show
##    def _set(self, Show):
##        u'Indicates whether the layer should display its dynamic labels.'
##    ShowLabels = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def LayerDescription(self):
##        u'The layer description.'
##        #return layerDesc
##
##    @property
##    def HasLabels(self):
##        u'Indicates if the layer has labels to turn on and off.'
##        #return HasLabels
##
##    def _get(self):
##        u'Indicates whether the layer should scale its symbols according to the reference scale.'
##        #return ScaleSymbols
##    def _set(self, ScaleSymbols):
##        u'Indicates whether the layer should scale its symbols according to the reference scale.'
##    ScaleSymbols = property(_get, _set, doc = _set.__doc__)
##

class IMaplexOverposterProperties2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that are common to all layers being labeled.'
    _iid_ = GUID('{F4AB3308-76A3-106E-F66E-05DE41F3AA20}')
    _idlflags_ = ['oleautomation']
class IMaplexKeyNumberGroups(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a collection of Maplex Key Numbering Groups.'
    _iid_ = GUID('{6604E878-8EBB-B33C-8E31-7B355FAF1960}')
    _idlflags_ = ['oleautomation']
IMaplexOverposterProperties2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Key numbering groups used by placement.')], HRESULT, 'KeyNumberGroups',
              ( ['retval', 'out'], POINTER(POINTER(IMaplexKeyNumberGroups)), 'groups' )),
    COMMETHOD(['propputref', helpstring(u'Key numbering groups used by placement.')], HRESULT, 'KeyNumberGroups',
              ( ['in'], POINTER(IMaplexKeyNumberGroups), 'groups' )),
]
################################################################
## code template for IMaplexOverposterProperties2 implementation
##class IMaplexOverposterProperties2_Impl(object):
##    def KeyNumberGroups(self, groups):
##        u'Key numbering groups used by placement.'
##        #return 
##

class ITOCGroup(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the TOC Group interface.'
    _iid_ = GUID('{47F5D6E6-F528-4EF8-8511-77CC552518D3}')
    _idlflags_ = ['oleautomation']
ITOCGroup._methods_ = [
    COMMETHOD(['propget', helpstring(u'The group heading.')], HRESULT, 'Heading',
              ( ['retval', 'out'], POINTER(BSTR), 'Heading' )),
    COMMETHOD(['propget', helpstring(u'The group classes.')], HRESULT, 'Classes',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'tocClasses' )),
]
################################################################
## code template for ITOCGroup implementation
##class ITOCGroup_Impl(object):
##    @property
##    def Classes(self):
##        u'The group classes.'
##        #return tocClasses
##
##    @property
##    def Heading(self):
##        u'The group heading.'
##        #return Heading
##

class MaplexLabelStyle(CoClass):
    u'An object that controls label symbol and placement properties.'
    _reg_clsid_ = GUID('{20664808-CBA7-11DA-9F3A-00C34F6B26A5}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class ILabelStyle(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the label symbol and placement properties.'
    _iid_ = GUID('{4C90DE7A-CB77-11D2-9F34-00C04F6BC6A5}')
    _idlflags_ = ['oleautomation']
class ILabelStyle2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the label symbol and placement properties.'
    _iid_ = GUID('{3178EC81-A0A5-4CF0-B055-11DEA12EDC28}')
    _idlflags_ = ['oleautomation']
class IMaplexLabelStyle(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to an indicator interface for a Maplex LabelStyle object.'
    _iid_ = GUID('{20664808-CA77-1AD2-9F24-30C14FFBC6AB}')
    _idlflags_ = ['oleautomation']
MaplexLabelStyle._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILabelStyle, ILabelStyle2, IMaplexLabelStyle, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]


# values for enumeration 'esriMaplexPolygonPlacementMethod'
esriMaplexHorizontalInPolygon = 0
esriMaplexStraightInPolygon = 1
esriMaplexCurvedInPolygon = 2
esriMaplexHorizontalAroundPolygon = 3
esriMaplexRepeatAlongBoundary = 4
esriMaplexCurvedAroundPolygon = 5
esriMaplexPolygonPlacementMethod = c_int # enum
class MapServerLegendGroup(CoClass):
    u'The Map Server Legend Group coclass provides information about a legend group.'
    _reg_clsid_ = GUID('{2C4C91E5-FA4E-4D04-8E30-E5BE24749700}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IMapServerLegendGroup(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Map Server Legend Group Interface.'
    _iid_ = GUID('{57A9D75C-5EE5-4701-BC4C-57A71B0B4C97}')
    _idlflags_ = ['oleautomation']
MapServerLegendGroup._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMapServerLegendGroup, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

class BasicPlacedObject(CoClass):
    u'Placed object handed out by the standard label engine.'
    _reg_clsid_ = GUID('{80753CCF-BE43-4301-AAA0-60A94824B5FB}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IPlacedObject(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members work with symbols that are placed as labels.'
    _iid_ = GUID('{3141F2F2-38E2-11D1-8809-080009EC732A}')
    _idlflags_ = ['oleautomation']
class IPlacedObject2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members work with symbols that are placed as labels.'
    _iid_ = GUID('{BDDFA62B-1810-4E9C-85C3-2C2B50EA70B6}')
    _idlflags_ = ['oleautomation']
class IPlacedObject3(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members work with symbols that are placed as labels.'
    _iid_ = GUID('{2F68DD01-D7E6-4E21-8EF9-14165EF00552}')
    _idlflags_ = ['oleautomation']
BasicPlacedObject._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IPlacedObject, IPlacedObject2, IPlacedObject3]

class RenderedRaster(CoClass):
    u'A raster that is rendered using a renderer.'
    _reg_clsid_ = GUID('{F7DDAC75-9042-4B64-A555-95A1FE85435C}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IRenderedRaster(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that controls a rendered raster.'
    _iid_ = GUID('{7D93E3C6-86FF-48B8-88D5-345049233889}')
    _idlflags_ = []
class IRenderedRaster2(IRenderedRaster):
    _case_insensitive_ = True
    u'Provides access to members that control a rendered Raster.'
    _iid_ = GUID('{8C15BD4C-CECB-4AF1-89A7-A25E3F89E840}')
    _idlflags_ = []
RenderedRaster._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster, IRenderedRaster, IRenderedRaster2, comtypes.gen._8F0541A3_D5BE_4B3F_A8D9_062D5579E19B_0_10_2.IRasterBandCollection, comtypes.gen._8F0541A3_D5BE_4B3F_A8D9_062D5579E19B_0_10_2.IRasterProps, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeoDataset, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ISaveAs, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ISaveAs2, comtypes.gen._8F0541A3_D5BE_4B3F_A8D9_062D5579E19B_0_10_2.IRasterResamplingControl]

class IWCSLayer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that create or modify a raster layer.'
    _iid_ = GUID('{53BC29A0-3A22-4A02-AF4A-028DC4A1C3FB}')
    _idlflags_ = ['oleautomation']
IWCSLayer._methods_ = [
    COMMETHOD([helpstring(u'Creates a WCS layer from given WCS coverage definition.')], HRESULT, 'Create',
              ( ['in'], BSTR, 'ServiceURL' ),
              ( ['in'], BSTR, 'CoverageName' ),
              ( ['in'], BSTR, 'serviceVersion' )),
    COMMETHOD(['propget', helpstring(u'The WCS service URL.')], HRESULT, 'ServiceURL',
              ( ['retval', 'out'], POINTER(BSTR), 'pServerURL' )),
    COMMETHOD(['propget', helpstring(u'The WCS coverage name.')], HRESULT, 'CoverageName',
              ( ['retval', 'out'], POINTER(BSTR), 'pCoverageName' )),
    COMMETHOD(['propget', helpstring(u'The WCS service version.')], HRESULT, 'Version',
              ( ['retval', 'out'], POINTER(BSTR), 'pVersion' )),
    COMMETHOD(['propget', helpstring(u'The request timeout value in seconds.')], HRESULT, 'Timeout',
              ( ['retval', 'out'], POINTER(c_int), 'pTimeout' )),
    COMMETHOD(['propput', helpstring(u'The request timeout value in seconds.')], HRESULT, 'Timeout',
              ( ['in'], c_int, 'pTimeout' )),
    COMMETHOD(['propget', helpstring(u'The request resampling (interpolation) type.')], HRESULT, 'ResamplingType',
              ( ['retval', 'out'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.rstResamplingTypes), 'pResamplingType' )),
    COMMETHOD(['propput', helpstring(u'The request resampling (interpolation) type.')], HRESULT, 'ResamplingType',
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.rstResamplingTypes, 'pResamplingType' )),
    COMMETHOD([helpstring(u'Refreshes layer once any of layer properies has changed.')], HRESULT, 'Refresh'),
]
################################################################
## code template for IWCSLayer implementation
##class IWCSLayer_Impl(object):
##    @property
##    def ServiceURL(self):
##        u'The WCS service URL.'
##        #return pServerURL
##
##    @property
##    def CoverageName(self):
##        u'The WCS coverage name.'
##        #return pCoverageName
##
##    def Create(self, ServiceURL, CoverageName, serviceVersion):
##        u'Creates a WCS layer from given WCS coverage definition.'
##        #return 
##
##    def Refresh(self):
##        u'Refreshes layer once any of layer properies has changed.'
##        #return 
##
##    @property
##    def Version(self):
##        u'The WCS service version.'
##        #return pVersion
##
##    def _get(self):
##        u'The request timeout value in seconds.'
##        #return pTimeout
##    def _set(self, pTimeout):
##        u'The request timeout value in seconds.'
##    Timeout = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The request resampling (interpolation) type.'
##        #return pResamplingType
##    def _set(self, pResamplingType):
##        u'The request resampling (interpolation) type.'
##    ResamplingType = property(_get, _set, doc = _set.__doc__)
##

class ITransparencyRenderer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the drawing of features with varying transparency, where transparency is determined by feature values.'
    _iid_ = GUID('{FB20665D-DB1C-11D2-9F2E-00C04F6BC709}')
    _idlflags_ = ['oleautomation']
ITransparencyRenderer._methods_ = [
    COMMETHOD(['propget', helpstring(u'Transparency field.')], HRESULT, 'TransparencyField',
              ( ['retval', 'out'], POINTER(BSTR), 'FieldName' )),
    COMMETHOD(['propput', helpstring(u'Transparency field.')], HRESULT, 'TransparencyField',
              ( ['in'], BSTR, 'FieldName' )),
]
################################################################
## code template for ITransparencyRenderer implementation
##class ITransparencyRenderer_Impl(object):
##    def _get(self):
##        u'Transparency field.'
##        #return FieldName
##    def _set(self, FieldName):
##        u'Transparency field.'
##    TransparencyField = property(_get, _set, doc = _set.__doc__)
##

class IRasterIdentifyObj(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that identify an object in the raster layer.'
    _iid_ = GUID('{EFD47FDC-DE27-11D2-9FCE-00C04F799F23}')
    _idlflags_ = ['oleautomation']
IRasterIdentifyObj._methods_ = [
    COMMETHOD([helpstring(u'Inserts a property name and value pair to the RasterIdentifyObj.')], HRESULT, 'InsertPropAndValue',
              ( ['in'], BSTR, 'Property' ),
              ( ['in'], BSTR, 'Value' )),
    COMMETHOD(['propget', helpstring(u'Property name.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'bName' )),
    COMMETHOD(['propput', helpstring(u'Property name.')], HRESULT, 'Name',
              ( ['in'], BSTR, 'bName' )),
    COMMETHOD(['propget', helpstring(u'Property value.')], HRESULT, 'MapTip',
              ( ['retval', 'out'], POINTER(BSTR), 'bMapTip' )),
    COMMETHOD(['propput', helpstring(u'Property value.')], HRESULT, 'MapTip',
              ( ['in'], BSTR, 'bMapTip' )),
    COMMETHOD(['propget', helpstring(u'Identified location.')], HRESULT, 'Location',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint)), 'pPoint' )),
    COMMETHOD(['propputref', helpstring(u'Identified location.')], HRESULT, 'Location',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'pPoint' )),
]
################################################################
## code template for IRasterIdentifyObj implementation
##class IRasterIdentifyObj_Impl(object):
##    def InsertPropAndValue(self, Property, Value):
##        u'Inserts a property name and value pair to the RasterIdentifyObj.'
##        #return 
##
##    def _get(self):
##        u'Property value.'
##        #return bMapTip
##    def _set(self, bMapTip):
##        u'Property value.'
##    MapTip = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Property name.'
##        #return bName
##    def _set(self, bName):
##        u'Property name.'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def Location(self, pPoint):
##        u'Identified location.'
##        #return 
##

class IPointLabelPlacementDescription(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Point Label Placement Description Interface.'
    _iid_ = GUID('{194E3DB7-6494-4965-A8A6-FA68156885C7}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'esriServerPointLabelPlacementType'
esriServerPointLabelPlacementAboveCenter = 0
esriServerPointLabelPlacementAboveLeft = 1
esriServerPointLabelPlacementAboveRight = 2
esriServerPointLabelPlacementBelowCenter = 3
esriServerPointLabelPlacementBelowLeft = 4
esriServerPointLabelPlacementBelowRight = 5
esriServerPointLabelPlacementCenterCenter = 6
esriServerPointLabelPlacementCenterLeft = 7
esriServerPointLabelPlacementCenterRight = 8
esriServerPointLabelPlacementType = c_int # enum
IPointLabelPlacementDescription._methods_ = [
    COMMETHOD(['propget', helpstring(u'Point Label Placement Type.')], HRESULT, 'Type',
              ( ['retval', 'out'], POINTER(esriServerPointLabelPlacementType), 'PlacementType' )),
    COMMETHOD(['propput', helpstring(u'Point Label Placement Type.')], HRESULT, 'Type',
              ( ['in'], esriServerPointLabelPlacementType, 'PlacementType' )),
]
################################################################
## code template for IPointLabelPlacementDescription implementation
##class IPointLabelPlacementDescription_Impl(object):
##    def _get(self):
##        u'Point Label Placement Type.'
##        #return PlacementType
##    def _set(self, PlacementType):
##        u'Point Label Placement Type.'
##    Type = property(_get, _set, doc = _set.__doc__)
##

IAnnotationPropertiesConverter._methods_ = [
    COMMETHOD([helpstring(u'Indicates whether the annotation properties can be converted by this object.')], HRESULT, 'CanConvert',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IUID), 'sourceAnnotationPropertiesID' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IUID), 'destinationAnnotationPropertiesID' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'CanConvert' )),
    COMMETHOD([helpstring(u'Converts the source annotation properties into the destination annotation properties.')], HRESULT, 'Convert',
              ( ['in'], comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.esriGeometryType, 'Type' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayTransformation), 'DisplayTransformation' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IUID), 'sourceAnnotationPropertiesID' ),
              ( ['in'], POINTER(IAnnotateLayerPropertiesCollection), 'sourceProps' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IUID), 'destinationAnnotationPropertiesID' ),
              ( ['retval', 'out'], POINTER(POINTER(IAnnotateLayerPropertiesCollection)), 'destinationProps' )),
]
################################################################
## code template for IAnnotationPropertiesConverter implementation
##class IAnnotationPropertiesConverter_Impl(object):
##    def CanConvert(self, sourceAnnotationPropertiesID, destinationAnnotationPropertiesID):
##        u'Indicates whether the annotation properties can be converted by this object.'
##        #return CanConvert
##
##    def Convert(self, Type, DisplayTransformation, sourceAnnotationPropertiesID, sourceProps, destinationAnnotationPropertiesID):
##        u'Converts the source annotation properties into the destination annotation properties.'
##        #return destinationProps
##

class IFieldDomainInfo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Field Domain Information Array.'
    _iid_ = GUID('{004CF931-41EA-49A7-8865-98E03E2FC1DE}')
    _idlflags_ = ['oleautomation']
IFieldDomainInfo._methods_ = [
    COMMETHOD(['propget', helpstring(u'The Field Name.')], HRESULT, 'FieldName',
              ( ['retval', 'out'], POINTER(BSTR), 'pFieldName' )),
    COMMETHOD(['propget', helpstring(u'The Domain.')], HRESULT, 'Domain',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDomain)), 'ppDomain' )),
    COMMETHOD(['propget', helpstring(u"Indicates whether the domain is inherited from the field's.")], HRESULT, 'IsInherited',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pIsInherited' )),
]
################################################################
## code template for IFieldDomainInfo implementation
##class IFieldDomainInfo_Impl(object):
##    @property
##    def Domain(self):
##        u'The Domain.'
##        #return ppDomain
##
##    @property
##    def FieldName(self):
##        u'The Field Name.'
##        #return pFieldName
##
##    @property
##    def IsInherited(self):
##        u"Indicates whether the domain is inherited from the field's."
##        #return pIsInherited
##

class IACMapAdmin(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to connecting to an ArcIMS map service.'
    _iid_ = GUID('{849696AE-8694-4666-B5F1-9137BAD51136}')
    _idlflags_ = ['oleautomation']
IACMapAdmin._methods_ = [
    COMMETHOD([helpstring(u'Connects to the ArcIMS service.')], HRESULT, 'Connect',
              ( ['in'], POINTER(comtypes.gen._746F6817_89BB_4490_9829_83CA25FD505A_0_10_2.IIMSAxlRequest), 'request' )),
]
################################################################
## code template for IACMapAdmin implementation
##class IACMapAdmin_Impl(object):
##    def Connect(self, request):
##        u'Connects to the ArcIMS service.'
##        #return 
##

class IImageResults(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Raster Value Result Array.'
    _iid_ = GUID('{B84BB608-D4FC-48F8-BF31-21C7DE07F411}')
    _idlflags_ = ['oleautomation']
class IImageResult2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Image Result Interface.'
    _iid_ = GUID('{0030CCF7-47B5-45E1-8376-7E96ABFDE9AD}')
    _idlflags_ = ['oleautomation']
IImageResults._methods_ = [
    COMMETHOD(['propget', helpstring(u'The Raster Value Result count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The Raster Value Result at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IImageResult2)), 'ppImageResult' )),
    COMMETHOD([helpstring(u'Removes the Raster Value Result at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all Raster Value Results.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Adds a Raster Value Result.')], HRESULT, 'Add',
              ( ['in'], POINTER(IImageResult2), 'pImageResult' )),
    COMMETHOD([helpstring(u'Adds a Raster Value Result info at the specified position.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(IImageResult2), 'pImageResult' )),
]
################################################################
## code template for IImageResults implementation
##class IImageResults_Impl(object):
##    @property
##    def Count(self):
##        u'The Raster Value Result count.'
##        #return Count
##
##    def Insert(self, Index, pImageResult):
##        u'Adds a Raster Value Result info at the specified position.'
##        #return 
##
##    def Remove(self, Index):
##        u'Removes the Raster Value Result at the specified position.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'The Raster Value Result at the specified position.'
##        #return ppImageResult
##
##    def RemoveAll(self):
##        u'Removes all Raster Value Results.'
##        #return 
##
##    def Add(self, pImageResult):
##        u'Adds a Raster Value Result.'
##        #return 
##


# values for enumeration 'esriT3DAlignment'
esriT3DAlignHorizontal = 0
esriT3DAlignVertical = 1
esriT3DAlignment = c_int # enum
class ILookupSymbol(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u"Provides access to functionality for looking up a renderer's symbol via a feature."
    _iid_ = GUID('{736A377D-A1EB-4CE4-84B9-90F9588374C2}')
    _idlflags_ = ['oleautomation']
ILookupSymbol._methods_ = [
    COMMETHOD([helpstring(u"Returns a reference to the renderer's symbol for the input feature.")], HRESULT, 'LookupSymbol',
              ( ['in'], VARIANT_BOOL, 'firstPass' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeature), 'Feature' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol)), 'Symbol' )),
    COMMETHOD([helpstring(u'Resets temporary options on the symbol (e.g. Rotation).')], HRESULT, 'ResetLookupSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol), 'Symbol' )),
]
################################################################
## code template for ILookupSymbol implementation
##class ILookupSymbol_Impl(object):
##    def ResetLookupSymbol(self, Symbol):
##        u'Resets temporary options on the symbol (e.g. Rotation).'
##        #return 
##
##    def LookupSymbol(self, firstPass, Feature):
##        u"Returns a reference to the renderer's symbol for the input feature."
##        #return Symbol
##

class IEnumDimensionStyle(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that enumerate through Dimension styles.'
    _iid_ = GUID('{C75D45E4-DA88-11D3-80CE-00C04F601565}')
    _idlflags_ = ['oleautomation']
class IDimensionStyle(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the properties of a dimension style.'
    _iid_ = GUID('{AA54768E-EA46-11D3-80D3-00C04F601565}')
    _idlflags_ = ['oleautomation']
IEnumDimensionStyle._methods_ = [
    COMMETHOD([helpstring(u'Resets the enumerator such that a subsequent next returns the first style.')], HRESULT, 'Reset'),
    COMMETHOD([helpstring(u'Returns the next style in the enumeration.')], HRESULT, 'Next',
              ( ['retval', 'out'], POINTER(POINTER(IDimensionStyle)), 'Style' )),
]
################################################################
## code template for IEnumDimensionStyle implementation
##class IEnumDimensionStyle_Impl(object):
##    def Reset(self):
##        u'Resets the enumerator such that a subsequent next returns the first style.'
##        #return 
##
##    def Next(self):
##        u'Returns the next style in the enumeration.'
##        #return Style
##

class IDimensionStyles(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a collection of dimension styles for a dimension feature class.'
    _iid_ = GUID('{81875328-DE54-11D3-80CE-00C04F601565}')
    _idlflags_ = ['oleautomation']
IDimensionStyles._methods_ = [
    COMMETHOD([helpstring(u'Adds a style to the collection.')], HRESULT, 'AddStyle',
              ( ['in'], POINTER(IDimensionStyle), 'Style' )),
    COMMETHOD([helpstring(u'A dimension style.')], HRESULT, 'GetStyle',
              ( ['in'], c_int, 'ID' ),
              ( ['retval', 'out'], POINTER(POINTER(IDimensionStyle)), 'Style' )),
    COMMETHOD([helpstring(u'Find a dimension style by name.')], HRESULT, 'FindStyle',
              ( ['in'], BSTR, 'Name' ),
              ( ['retval', 'out'], POINTER(POINTER(IDimensionStyle)), 'Style' )),
    COMMETHOD([helpstring(u'All the dimension styles in the collection.')], HRESULT, 'GetStyles',
              ( ['retval', 'out'], POINTER(POINTER(IEnumDimensionStyle)), 'enumStyle' )),
    COMMETHOD(['propget', helpstring(u'The ID of the defualt dimension style.')], HRESULT, 'DefaultStyleID',
              ( ['retval', 'out'], POINTER(c_int), 'ID' )),
    COMMETHOD(['propput', helpstring(u'The ID of the defualt dimension style.')], HRESULT, 'DefaultStyleID',
              ( ['in'], c_int, 'ID' )),
    COMMETHOD([helpstring(u'Deletes a dimension style.')], HRESULT, 'DeleteStyle',
              ( ['in'], c_int, 'ID' )),
    COMMETHOD([helpstring(u'Renames a dimension style.')], HRESULT, 'RenameStyle',
              ( ['in'], c_int, 'ID' ),
              ( ['in'], BSTR, 'Name' )),
]
################################################################
## code template for IDimensionStyles implementation
##class IDimensionStyles_Impl(object):
##    def AddStyle(self, Style):
##        u'Adds a style to the collection.'
##        #return 
##
##    def RenameStyle(self, ID, Name):
##        u'Renames a dimension style.'
##        #return 
##
##    def GetStyles(self):
##        u'All the dimension styles in the collection.'
##        #return enumStyle
##
##    def FindStyle(self, Name):
##        u'Find a dimension style by name.'
##        #return Style
##
##    def DeleteStyle(self, ID):
##        u'Deletes a dimension style.'
##        #return 
##
##    def GetStyle(self, ID):
##        u'A dimension style.'
##        #return Style
##
##    def _get(self):
##        u'The ID of the defualt dimension style.'
##        #return ID
##    def _set(self, ID):
##        u'The ID of the defualt dimension style.'
##    DefaultStyleID = property(_get, _set, doc = _set.__doc__)
##

class IMapServerLayer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the available properties of a map server layer object.'
    _iid_ = GUID('{E9B56157-7EB7-4DB3-9958-AFBF3B5E1470}')
    _idlflags_ = ['oleautomation']
IMapServerLayer._methods_ = [
    COMMETHOD([helpstring(u'Connects to map document data frame specified by the location of a map document and the name of a data frame.')], HRESULT, 'LocalConnect',
              ( ['in'], BSTR, 'docLocation' ),
              ( ['in'], BSTR, 'MapName' )),
    COMMETHOD([helpstring(u'Connects to map server object specified by the AGSServerObject name for  a MapServer server object and the name of a data frame.')], HRESULT, 'ServerConnect',
              ( ['in'], POINTER(comtypes.gen._746F6817_89BB_4490_9829_83CA25FD505A_0_10_2.IAGSServerObjectName), 'soName' ),
              ( ['in'], BSTR, 'MapName' )),
    COMMETHOD([helpstring(u'Returns information about a connection to a map server object or to a map document.')], HRESULT, 'GetConnectionInfo',
              ( ['out'], POINTER(POINTER(comtypes.gen._746F6817_89BB_4490_9829_83CA25FD505A_0_10_2.IAGSServerObjectName)), 'soName' ),
              ( ['out'], POINTER(BSTR), 'docLocation' ),
              ( ['out'], POINTER(BSTR), 'MapName' )),
    COMMETHOD([helpstring(u'Clears the cache of images downloaded from the server redraw.')], HRESULT, 'ClearDrawCache'),
    COMMETHOD(['propget', helpstring(u'The background color of a map server layer object.')], HRESULT, 'BackgroundColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propget', helpstring(u'The color that is transparent (100 %).')], HRESULT, 'TransparentColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'The color that is transparent (100 %).')], HRESULT, 'TransparentColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
]
################################################################
## code template for IMapServerLayer implementation
##class IMapServerLayer_Impl(object):
##    def _get(self):
##        u'The color that is transparent (100 %).'
##        #return Color
##    def _set(self, Color):
##        u'The color that is transparent (100 %).'
##    TransparentColor = property(_get, _set, doc = _set.__doc__)
##
##    def LocalConnect(self, docLocation, MapName):
##        u'Connects to map document data frame specified by the location of a map document and the name of a data frame.'
##        #return 
##
##    def GetConnectionInfo(self):
##        u'Returns information about a connection to a map server object or to a map document.'
##        #return soName, docLocation, MapName
##
##    @property
##    def BackgroundColor(self):
##        u'The background color of a map server layer object.'
##        #return Color
##
##    def ServerConnect(self, soName, MapName):
##        u'Connects to map server object specified by the AGSServerObject name for  a MapServer server object and the name of a data frame.'
##        #return 
##
##    def ClearDrawCache(self):
##        u'Clears the cache of images downloaded from the server redraw.'
##        #return 
##

class RasterFormatInfo(CoClass):
    u'Information about raster file formats.'
    _reg_clsid_ = GUID('{4D6B1FEF-C144-11D2-9F43-00C04F8ED21A}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
RasterFormatInfo._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFormatInfo]

class HotLinkExpressionProperties(CoClass):
    u'Maintains the properties for generating a hyperlink string.'
    _reg_clsid_ = GUID('{1B848B0F-5E87-4948-841A-86201FACD925}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IHotLinkExpressionProperties(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties for generating a hyperlink expression.'
    _iid_ = GUID('{E720618B-99A9-46D7-AA6B-507898E1EA90}')
    _idlflags_ = ['oleautomation']
HotLinkExpressionProperties._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IHotLinkExpressionProperties, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class IMapLayerInfo3(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the available properties of a map layer info object.'
    _iid_ = GUID('{2072143F-8B50-49A6-957C-9FC55138459D}')
    _idlflags_ = ['oleautomation']
IMapLayerInfo3._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if the layter has LayerDrawingDescription or not.')], HRESULT, 'HasLayerDrawingDescription',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pHasLayerDrawingDescription' )),
    COMMETHOD(['propget', helpstring(u'Array of strings that contains field alias for each field in Fields property.')], HRESULT, 'FieldAliases',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray)), 'FieldAliases' )),
    COMMETHOD(['propget', helpstring(u'Copyright information associated with the layer.')], HRESULT, 'CopyrightText',
              ( ['retval', 'out'], POINTER(BSTR), 'copyright' )),
    COMMETHOD(['propget', helpstring(u'The layer identifier. This ID is used throughout to uniquely identify the layer for all requests.')], HRESULT, 'ID',
              ( ['retval', 'out'], POINTER(c_int), 'LayerID' )),
    COMMETHOD(['propget', helpstring(u'The name of the layer.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propget', helpstring(u'The description of the layer. This property is set in the General tab of the Layer Properties dialog.')], HRESULT, 'Description',
              ( ['retval', 'out'], POINTER(BSTR), 'desc' )),
    COMMETHOD(['propget', helpstring(u'The layer type.')], HRESULT, 'Type',
              ( ['retval', 'out'], POINTER(BSTR), 'Type' )),
    COMMETHOD(['propget', helpstring(u'The description of the source information for the layer.')], HRESULT, 'SourceDescription',
              ( ['retval', 'out'], POINTER(BSTR), 'desc' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer has labels to turn on and off.')], HRESULT, 'HasLabels',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'HasLabels' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer supports feature selection.')], HRESULT, 'CanSelect',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'CanSelect' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer supports symbol scaling.')], HRESULT, 'CanScaleSymbols',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'canScale' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer supports the Identify operation.')], HRESULT, 'CanIdentify',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'canId' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer supports the Find operation.')], HRESULT, 'CanFind',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'CanFind' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer is a feature layer.')], HRESULT, 'IsFeatureLayer',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsFeatureLayer' )),
    COMMETHOD(['propget', helpstring(u'The minimum visible scale for the layer.')], HRESULT, 'MinScale',
              ( ['retval', 'out'], POINTER(c_double), 'Scale' )),
    COMMETHOD(['propget', helpstring(u'The maximum visible scale for the layer.')], HRESULT, 'MaxScale',
              ( ['retval', 'out'], POINTER(c_double), 'Scale' )),
    COMMETHOD(['propget', helpstring(u'The geographic extent of the layer.')], HRESULT, 'Extent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'Extent' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer has hyperlinks.')], HRESULT, 'HasHyperlinks',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'hasLinks' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer has attributes.')], HRESULT, 'HasAttributes',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'hasAttr' )),
    COMMETHOD(['propget', helpstring(u'Array of attribute fields contained in the layer.')], HRESULT, 'Fields',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFields)), 'Fields' )),
    COMMETHOD(['propget', helpstring(u'Primary display field.')], HRESULT, 'DisplayField',
              ( ['retval', 'out'], POINTER(BSTR), 'FieldName' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer is a composite layer.')], HRESULT, 'IsComposite',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsComposite' )),
    COMMETHOD(['propget', helpstring(u'The list identifying the sublayers if the layer is a composite layer.')], HRESULT, 'SubLayers',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray)), 'layerIds' )),
    COMMETHOD(['propget', helpstring(u'If the layer is a member of a composite layer, this property identifies the parent layer.')], HRESULT, 'ParentLayerID',
              ( ['retval', 'out'], POINTER(c_int), 'LayerID' )),
]
################################################################
## code template for IMapLayerInfo3 implementation
##class IMapLayerInfo3_Impl(object):
##    @property
##    def SourceDescription(self):
##        u'The description of the source information for the layer.'
##        #return desc
##
##    @property
##    def MaxScale(self):
##        u'The maximum visible scale for the layer.'
##        #return Scale
##
##    @property
##    def DisplayField(self):
##        u'Primary display field.'
##        #return FieldName
##
##    @property
##    def CopyrightText(self):
##        u'Copyright information associated with the layer.'
##        #return copyright
##
##    @property
##    def HasAttributes(self):
##        u'Indicates if the layer has attributes.'
##        #return hasAttr
##
##    @property
##    def MinScale(self):
##        u'The minimum visible scale for the layer.'
##        #return Scale
##
##    @property
##    def Type(self):
##        u'The layer type.'
##        #return Type
##
##    @property
##    def Description(self):
##        u'The description of the layer. This property is set in the General tab of the Layer Properties dialog.'
##        #return desc
##
##    @property
##    def IsFeatureLayer(self):
##        u'Indicates if the layer is a feature layer.'
##        #return IsFeatureLayer
##
##    @property
##    def FieldAliases(self):
##        u'Array of strings that contains field alias for each field in Fields property.'
##        #return FieldAliases
##
##    @property
##    def CanIdentify(self):
##        u'Indicates if the layer supports the Identify operation.'
##        #return canId
##
##    @property
##    def HasLabels(self):
##        u'Indicates if the layer has labels to turn on and off.'
##        #return HasLabels
##
##    @property
##    def ParentLayerID(self):
##        u'If the layer is a member of a composite layer, this property identifies the parent layer.'
##        #return LayerID
##
##    @property
##    def SubLayers(self):
##        u'The list identifying the sublayers if the layer is a composite layer.'
##        #return layerIds
##
##    @property
##    def Extent(self):
##        u'The geographic extent of the layer.'
##        #return Extent
##
##    @property
##    def Name(self):
##        u'The name of the layer.'
##        #return Name
##
##    @property
##    def Fields(self):
##        u'Array of attribute fields contained in the layer.'
##        #return Fields
##
##    @property
##    def CanScaleSymbols(self):
##        u'Indicates if the layer supports symbol scaling.'
##        #return canScale
##
##    @property
##    def IsComposite(self):
##        u'Indicates if the layer is a composite layer.'
##        #return IsComposite
##
##    @property
##    def ID(self):
##        u'The layer identifier. This ID is used throughout to uniquely identify the layer for all requests.'
##        #return LayerID
##
##    @property
##    def CanFind(self):
##        u'Indicates if the layer supports the Find operation.'
##        #return CanFind
##
##    @property
##    def HasLayerDrawingDescription(self):
##        u'Indicates if the layter has LayerDrawingDescription or not.'
##        #return pHasLayerDrawingDescription
##
##    @property
##    def CanSelect(self):
##        u'Indicates if the layer supports feature selection.'
##        #return CanSelect
##
##    @property
##    def HasHyperlinks(self):
##        u'Indicates if the layer has hyperlinks.'
##        #return hasLinks
##

class RasterDefaultsEnv(CoClass):
    u'A container for default raster environmental variables.'
    _reg_clsid_ = GUID('{EB0D0573-C109-11D2-9F43-00C04F8ED21A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
RasterDefaultsEnv._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterDefaultsEnv, IRasterDefaultsEnv2, IRasterDefaultsEnv3, IRasterDefaultsEnv4, IRasterDefaultsEnv5, IRasterDefaultsEnv6, IRasterDefaultsEnv7, IRasterDefaultsEnv8, IRasterDefaultsEnv9]

class IBasicOverposterLayerProperties(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the placement of labels relative to features using conflict detection.'
    _iid_ = GUID('{3141F2FB-38E2-11D1-8809-080009EC732A}')
    _idlflags_ = ['oleautomation']
ILabelStyle._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The text symbol used to draw the label.')], HRESULT, 'Symbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol), 'TextSymbol' )),
    COMMETHOD(['propget', helpstring(u'The text symbol used to draw the label.')], HRESULT, 'Symbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol)), 'TextSymbol' )),
    COMMETHOD(['propputref', helpstring(u'The overposter properties, which specify how labels are placed relative to features.')], HRESULT, 'BasicOverposterLayerProperties',
              ( ['in'], POINTER(IBasicOverposterLayerProperties), 'props' )),
    COMMETHOD(['propget', helpstring(u'The overposter properties, which specify how labels are placed relative to features.')], HRESULT, 'BasicOverposterLayerProperties',
              ( ['retval', 'out'], POINTER(POINTER(IBasicOverposterLayerProperties)), 'props' )),
]
################################################################
## code template for ILabelStyle implementation
##class ILabelStyle_Impl(object):
##    @property
##    def Symbol(self, TextSymbol):
##        u'The text symbol used to draw the label.'
##        #return 
##
##    @property
##    def BasicOverposterLayerProperties(self, props):
##        u'The overposter properties, which specify how labels are placed relative to features.'
##        #return 
##

class ILabelEnvironment(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that work with the labeling environment.'
    _iid_ = GUID('{76765B93-CE78-11D2-9F36-00C04F6BC6A5}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'esriLabelEnvLabelStyleMethod'
esriUseFeatureLayerLabelStyle = 0
esriChooseLabelStyle = 1
esriLabelEnvLabelStyleMethod = c_int # enum

# values for enumeration 'esriLabelEnvPlacement'
esriPlaceWhereClick = 0
esriCalculateBestPlacement = 1
esriLabelEnvPlacement = c_int # enum
ILabelEnvironment._methods_ = [
    COMMETHOD(['propput', helpstring(u'The label style method.  This indicates whether the label style comes from the feature layer or the label environment.')], HRESULT, 'LabelStyleMethod',
              ( ['in'], esriLabelEnvLabelStyleMethod, 'Method' )),
    COMMETHOD(['propget', helpstring(u'The label style method.  This indicates whether the label style comes from the feature layer or the label environment.')], HRESULT, 'LabelStyleMethod',
              ( ['retval', 'out'], POINTER(esriLabelEnvLabelStyleMethod), 'Method' )),
    COMMETHOD(['propput', helpstring(u'The label placement method.')], HRESULT, 'Placement',
              ( ['in'], esriLabelEnvPlacement, 'Placement' )),
    COMMETHOD(['propget', helpstring(u'The label placement method.')], HRESULT, 'Placement',
              ( ['retval', 'out'], POINTER(esriLabelEnvPlacement), 'Placement' )),
    COMMETHOD(['propputref', helpstring(u'Label style.')], HRESULT, 'LabelStyle',
              ( ['in'], POINTER(ILabelStyle), 'LabelStyle' )),
    COMMETHOD(['propget', helpstring(u'Label style.')], HRESULT, 'LabelStyle',
              ( ['retval', 'out'], POINTER(POINTER(ILabelStyle)), 'LabelStyle' )),
]
################################################################
## code template for ILabelEnvironment implementation
##class ILabelEnvironment_Impl(object):
##    @property
##    def LabelStyle(self, LabelStyle):
##        u'Label style.'
##        #return 
##
##    def _get(self):
##        u'The label placement method.'
##        #return Placement
##    def _set(self, Placement):
##        u'The label placement method.'
##    Placement = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The label style method.  This indicates whether the label style comes from the feature layer or the label environment.'
##        #return Method
##    def _set(self, Method):
##        u'The label style method.  This indicates whether the label style comes from the feature layer or the label environment.'
##    LabelStyleMethod = property(_get, _set, doc = _set.__doc__)
##

class IAnnotateLayerPropertiesCollection2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that work with a collection of annotation settings for a feature layer.'
    _iid_ = GUID('{2B35E113-9F11-43D5-914F-5C7055DB37BC}')
    _idlflags_ = ['oleautomation']
class IAnnotateLayerProperties(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that work with the display of dynamic labels (text) for a feature layer.'
    _iid_ = GUID('{01004142-0D1C-11D2-A26F-080009B6F22B}')
    _idlflags_ = ['oleautomation']
IAnnotateLayerPropertiesCollection2._methods_ = [
    COMMETHOD([helpstring(u'Adds an item to the collection.')], HRESULT, 'Add',
              ( ['in'], POINTER(IAnnotateLayerProperties), 'Item' ),
              ( ['retval', 'out'], POINTER(c_int), 'ID' )),
    COMMETHOD(['propget', helpstring(u'The number of items in the collection.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD([helpstring(u'Returns the item in the collection at the specified index.')], HRESULT, 'QueryItem',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(POINTER(IAnnotateLayerProperties)), 'Item' ),
              ( ['out'], POINTER(c_int), 'ID' )),
    COMMETHOD([helpstring(u'Removes all the items in the collection.')], HRESULT, 'Clear'),
    COMMETHOD([helpstring(u'Removes the item in the collection with the given id.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'ID' )),
    COMMETHOD([helpstring(u'Sorts the items in the collection.')], HRESULT, 'Sort'),
    COMMETHOD(['propget', helpstring(u'The item in the collection with the given id.')], HRESULT, 'Properties',
              ( ['in'], c_int, 'ID' ),
              ( ['retval', 'out'], POINTER(POINTER(IAnnotateLayerProperties)), 'ppAnnotateLayerProperties' )),
    COMMETHOD([helpstring(u'Replaces the item in the collection with the given id.')], HRESULT, 'Replace',
              ( ['in'], c_int, 'ID' ),
              ( ['in'], POINTER(IAnnotateLayerProperties), 'pAnnotateLayerProperties' )),
]
################################################################
## code template for IAnnotateLayerPropertiesCollection2 implementation
##class IAnnotateLayerPropertiesCollection2_Impl(object):
##    @property
##    def Count(self):
##        u'The number of items in the collection.'
##        #return Count
##
##    def QueryItem(self, Index):
##        u'Returns the item in the collection at the specified index.'
##        #return Item, ID
##
##    def Clear(self):
##        u'Removes all the items in the collection.'
##        #return 
##
##    def Remove(self, ID):
##        u'Removes the item in the collection with the given id.'
##        #return 
##
##    def Replace(self, ID, pAnnotateLayerProperties):
##        u'Replaces the item in the collection with the given id.'
##        #return 
##
##    def Add(self, Item):
##        u'Adds an item to the collection.'
##        #return ID
##
##    def Sort(self):
##        u'Sorts the items in the collection.'
##        #return 
##
##    @property
##    def Properties(self, ID):
##        u'The item in the collection with the given id.'
##        #return ppAnnotateLayerProperties
##

class GFLayerTableDataMappings(CoClass):
    u'GFLayerTableDataMappings co-class.'
    _reg_clsid_ = GUID('{7D96E1B7-F86C-4D30-BB27-AD2F01E9FBC3}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
GFLayerTableDataMappings._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGFLayerTableDataMappings, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

class GraphicFeatures(CoClass):
    u'GraphicFeatures co-class.'
    _reg_clsid_ = GUID('{DE67889D-D193-458C-80A1-79666C23C87B}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IGraphicFeatures(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Array of Graphic Features'
    _iid_ = GUID('{FDFA6B60-BF2B-49EF-80CA-4C00EDDD1596}')
    _idlflags_ = ['oleautomation']
GraphicFeatures._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGraphicFeatures, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

class IPropertyInfo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Information about properties of graphic features.'
    _iid_ = GUID('{C4E2FF58-4B56-4A6D-AF02-8B4F38E14B18}')
    _idlflags_ = ['oleautomation']
IPropertyInfo._methods_ = [
    COMMETHOD(['propget', helpstring(u"Name from the layer's field.")], HRESULT, 'AliasName',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propget', helpstring(u'The default domain of the property.')], HRESULT, 'Domain',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDomain)), 'Domain' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the property is editable.')], HRESULT, 'Editable',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsEditable' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the property can contain null values.')], HRESULT, 'IsNullable',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsNullable' )),
    COMMETHOD(['propget', helpstring(u'Property length.')], HRESULT, 'Length',
              ( ['retval', 'out'], POINTER(c_int), 'Length' )),
    COMMETHOD(['propget', helpstring(u'Property name.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propget', helpstring(u'The type of the property.')], HRESULT, 'Type',
              ( ['retval', 'out'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriFieldType), 'FieldType' )),
]
################################################################
## code template for IPropertyInfo implementation
##class IPropertyInfo_Impl(object):
##    @property
##    def Domain(self):
##        u'The default domain of the property.'
##        #return Domain
##
##    @property
##    def Name(self):
##        u'Property name.'
##        #return Name
##
##    @property
##    def Editable(self):
##        u'Indicates if the property is editable.'
##        #return IsEditable
##
##    @property
##    def Length(self):
##        u'Property length.'
##        #return Length
##
##    @property
##    def AliasName(self):
##        u"Name from the layer's field."
##        #return Name
##
##    @property
##    def Type(self):
##        u'The type of the property.'
##        #return FieldType
##
##    @property
##    def IsNullable(self):
##        u'Indicates if the property can contain null values.'
##        #return IsNullable
##

class ITinSingleSymbolRenderer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that draw tin nodes, edges, or faces with one symbol.'
    _iid_ = GUID('{F12E6DED-384C-11D2-B1F2-00C04F8EDEFF}')
    _idlflags_ = ['oleautomation']
ITinSingleSymbolRenderer._methods_ = [
    COMMETHOD(['propget', helpstring(u'The symbol used to render faces.')], HRESULT, 'Symbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol)), 'Symbol' )),
    COMMETHOD(['propputref', helpstring(u'The symbol used to render faces.')], HRESULT, 'Symbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'The descriptive symbol text.')], HRESULT, 'Label',
              ( ['retval', 'out'], POINTER(BSTR), 'Label' )),
    COMMETHOD(['propput', helpstring(u'The descriptive symbol text.')], HRESULT, 'Label',
              ( ['in'], BSTR, 'Label' )),
    COMMETHOD(['propget', helpstring(u'The description for the label.')], HRESULT, 'Description',
              ( ['retval', 'out'], POINTER(BSTR), 'Text' )),
    COMMETHOD(['propput', helpstring(u'The description for the label.')], HRESULT, 'Description',
              ( ['in'], BSTR, 'Text' )),
]
################################################################
## code template for ITinSingleSymbolRenderer implementation
##class ITinSingleSymbolRenderer_Impl(object):
##    def Symbol(self, Symbol):
##        u'The symbol used to render faces.'
##        #return 
##
##    def _get(self):
##        u'The description for the label.'
##        #return Text
##    def _set(self, Text):
##        u'The description for the label.'
##    Description = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The descriptive symbol text.'
##        #return Label
##    def _set(self, Label):
##        u'The descriptive symbol text.'
##    Label = property(_get, _set, doc = _set.__doc__)
##

class NewDimensionFeedback(CoClass):
    u'A display feedback for creating new dimension features.'
    _reg_clsid_ = GUID('{1FDE0E70-0FE9-11D4-80D7-00C04F601565}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class INewDimensionFeedback(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members to control the display feedback for creating new dimension features.'
    _iid_ = GUID('{A9A790C6-075C-11D4-80D6-00C04F601565}')
    _idlflags_ = ['oleautomation']
NewDimensionFeedback._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayFeedback, INewDimensionFeedback]

IScaleMarks._methods_ = [
    COMMETHOD(['propget', helpstring(u'Symbol used to draw the division marks.')], HRESULT, 'DivisionMarkSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ILineSymbol)), 'Symbol' )),
    COMMETHOD(['propput', helpstring(u'Symbol used to draw the division marks.')], HRESULT, 'DivisionMarkSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ILineSymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'Symbol used to draw the subdivision marks.')], HRESULT, 'SubdivisionMarkSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ILineSymbol)), 'Symbol' )),
    COMMETHOD(['propput', helpstring(u'Symbol used to draw the subdivision marks.')], HRESULT, 'SubdivisionMarkSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ILineSymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'Height of division marks in points (1/72 inch).  Use esriAutoScaleBar to automatically calculate.')], HRESULT, 'DivisionMarkHeight',
              ( ['retval', 'out'], POINTER(c_double), 'points' )),
    COMMETHOD(['propput', helpstring(u'Height of division marks in points (1/72 inch).  Use esriAutoScaleBar to automatically calculate.')], HRESULT, 'DivisionMarkHeight',
              ( ['in'], c_double, 'points' )),
    COMMETHOD(['propget', helpstring(u'Height of subdivision marks in points (1/72 inch).  Use esriAutoScaleBar to automatically calculate.')], HRESULT, 'SubdivisionMarkHeight',
              ( ['retval', 'out'], POINTER(c_double), 'points' )),
    COMMETHOD(['propput', helpstring(u'Height of subdivision marks in points (1/72 inch).  Use esriAutoScaleBar to automatically calculate.')], HRESULT, 'SubdivisionMarkHeight',
              ( ['in'], c_double, 'points' )),
    COMMETHOD(['propget', helpstring(u'Vertical positioning of the marks relative to the bar.')], HRESULT, 'MarkPosition',
              ( ['retval', 'out'], POINTER(esriVertPosEnum), 'position' )),
    COMMETHOD(['propput', helpstring(u'Vertical positioning of the marks relative to the bar.')], HRESULT, 'MarkPosition',
              ( ['in'], esriVertPosEnum, 'position' )),
    COMMETHOD(['propget', helpstring(u'Mark frequency.')], HRESULT, 'MarkFrequency',
              ( ['retval', 'out'], POINTER(esriScaleBarFrequency), 'frequency' )),
    COMMETHOD(['propput', helpstring(u'Mark frequency.')], HRESULT, 'MarkFrequency',
              ( ['in'], esriScaleBarFrequency, 'frequency' )),
]
################################################################
## code template for IScaleMarks implementation
##class IScaleMarks_Impl(object):
##    def _get(self):
##        u'Symbol used to draw the division marks.'
##        #return Symbol
##    def _set(self, Symbol):
##        u'Symbol used to draw the division marks.'
##    DivisionMarkSymbol = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Mark frequency.'
##        #return frequency
##    def _set(self, frequency):
##        u'Mark frequency.'
##    MarkFrequency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Height of subdivision marks in points (1/72 inch).  Use esriAutoScaleBar to automatically calculate.'
##        #return points
##    def _set(self, points):
##        u'Height of subdivision marks in points (1/72 inch).  Use esriAutoScaleBar to automatically calculate.'
##    SubdivisionMarkHeight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Height of division marks in points (1/72 inch).  Use esriAutoScaleBar to automatically calculate.'
##        #return points
##    def _set(self, points):
##        u'Height of division marks in points (1/72 inch).  Use esriAutoScaleBar to automatically calculate.'
##    DivisionMarkHeight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Symbol used to draw the subdivision marks.'
##        #return Symbol
##    def _set(self, Symbol):
##        u'Symbol used to draw the subdivision marks.'
##    SubdivisionMarkSymbol = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Vertical positioning of the marks relative to the bar.'
##        #return position
##    def _set(self, position):
##        u'Vertical positioning of the marks relative to the bar.'
##    MarkPosition = property(_get, _set, doc = _set.__doc__)
##

class DomainInfo(CoClass):
    u'DomainInfo co-class.'
    _reg_clsid_ = GUID('{59090F10-F719-4CD3-AFE8-EB9092CA978B}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IDomainInfo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Domain Info'
    _iid_ = GUID('{35214DC9-58B6-4E08-924D-CCDE21D0C68D}')
    _idlflags_ = ['oleautomation']
DomainInfo._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDomainInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class GFLayerTableDataMapping(CoClass):
    u'GraphicFeature layer/table and underlying dataset name'
    _reg_clsid_ = GUID('{D122D66F-F509-4B66-830F-49E26BBDC56A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IGFLayerTableDataMapping(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    _iid_ = GUID('{EA0E07E3-EF85-4138-8102-73E7FBB70CE3}')
    _idlflags_ = ['oleautomation']
GFLayerTableDataMapping._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGFLayerTableDataMapping, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]

class IMapServerHyperlink(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Map Server Hyperlink Interface.'
    _iid_ = GUID('{3A50D9DE-2BEF-44DB-9E83-D32853EEEBAE}')
    _idlflags_ = ['oleautomation']
IMapServerHyperlink._methods_ = [
    COMMETHOD(['propget', helpstring(u'The geometry of the feature having a hyperlink.')], HRESULT, 'Location',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry)), 'Location' )),
    COMMETHOD(['propputref', helpstring(u'The geometry of the feature having a hyperlink.')], HRESULT, 'Location',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'Location' )),
    COMMETHOD(['propget', helpstring(u'The URL of the hyperlink.')], HRESULT, 'URL',
              ( ['retval', 'out'], POINTER(BSTR), 'URL' )),
    COMMETHOD(['propput', helpstring(u'The URL of the hyperlink.')], HRESULT, 'URL',
              ( ['in'], BSTR, 'URL' )),
]
################################################################
## code template for IMapServerHyperlink implementation
##class IMapServerHyperlink_Impl(object):
##    def _get(self):
##        u'The URL of the hyperlink.'
##        #return URL
##    def _set(self, URL):
##        u'The URL of the hyperlink.'
##    URL = property(_get, _set, doc = _set.__doc__)
##
##    def Location(self, Location):
##        u'The geometry of the feature having a hyperlink.'
##        #return 
##

class ITileCacheInfo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that provide the tile cache info.'
    _iid_ = GUID('{F92F8C28-7EFA-4DA3-A126-5F2D2F117280}')
    _idlflags_ = ['oleautomation']
class ILODInfos(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the LOD Info Collection Interface.'
    _iid_ = GUID('{CCBC4CAD-4C92-43B8-B675-999E6C2D98DC}')
    _idlflags_ = ['oleautomation']
ITileCacheInfo._methods_ = [
    COMMETHOD(['propget', helpstring(u'The tiling spatial reference.')], HRESULT, 'SpatialReference',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference)), 'ppSpatialReference' )),
    COMMETHOD(['propputref', helpstring(u'The tiling spatial reference.')], HRESULT, 'SpatialReference',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'ppSpatialReference' )),
    COMMETHOD(['propget', helpstring(u'The tiling origin.')], HRESULT, 'Origin',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint)), 'ppOrigin' )),
    COMMETHOD(['propput', helpstring(u'The tiling origin.')], HRESULT, 'Origin',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'ppOrigin' )),
    COMMETHOD(['propget', helpstring(u'The number of columns per tile.')], HRESULT, 'TileCols',
              ( ['retval', 'out'], POINTER(c_int), 'pNumTileCols' )),
    COMMETHOD(['propput', helpstring(u'The number of columns per tile.')], HRESULT, 'TileCols',
              ( ['in'], c_int, 'pNumTileCols' )),
    COMMETHOD(['propget', helpstring(u'The number of rows per tile.')], HRESULT, 'TileRows',
              ( ['retval', 'out'], POINTER(c_int), 'pNumTileRows' )),
    COMMETHOD(['propput', helpstring(u'The number of rows per tile.')], HRESULT, 'TileRows',
              ( ['in'], c_int, 'pNumTileRows' )),
    COMMETHOD(['propget', helpstring(u'The tiling DPI.')], HRESULT, 'Dpi',
              ( ['retval', 'out'], POINTER(c_int), 'pDpi' )),
    COMMETHOD(['propput', helpstring(u'The tiling DPI.')], HRESULT, 'Dpi',
              ( ['in'], c_int, 'pDpi' )),
    COMMETHOD(['propget', helpstring(u'The tile cache Levels Of Details.')], HRESULT, 'LODInfos',
              ( ['retval', 'out'], POINTER(POINTER(ILODInfos)), 'ppLODInfos' )),
    COMMETHOD(['propputref', helpstring(u'The tile cache Levels Of Details.')], HRESULT, 'LODInfos',
              ( ['in'], POINTER(ILODInfos), 'ppLODInfos' )),
    COMMETHOD([helpstring(u'Computes resolutions from scales and current DPI.')], HRESULT, 'ComputeResolutions'),
    COMMETHOD([helpstring(u'Computes scales from resolutions and current DPI.')], HRESULT, 'ComputeScales'),
]
################################################################
## code template for ITileCacheInfo implementation
##class ITileCacheInfo_Impl(object):
##    def _get(self):
##        u'The tiling origin.'
##        #return ppOrigin
##    def _set(self, ppOrigin):
##        u'The tiling origin.'
##    Origin = property(_get, _set, doc = _set.__doc__)
##
##    def ComputeScales(self):
##        u'Computes scales from resolutions and current DPI.'
##        #return 
##
##    def _get(self):
##        u'The number of columns per tile.'
##        #return pNumTileCols
##    def _set(self, pNumTileCols):
##        u'The number of columns per tile.'
##    TileCols = property(_get, _set, doc = _set.__doc__)
##
##    def SpatialReference(self, ppSpatialReference):
##        u'The tiling spatial reference.'
##        #return 
##
##    def LODInfos(self, ppLODInfos):
##        u'The tile cache Levels Of Details.'
##        #return 
##
##    def ComputeResolutions(self):
##        u'Computes resolutions from scales and current DPI.'
##        #return 
##
##    def _get(self):
##        u'The number of rows per tile.'
##        #return pNumTileRows
##    def _set(self, pNumTileRows):
##        u'The number of rows per tile.'
##    TileRows = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The tiling DPI.'
##        #return pDpi
##    def _set(self, pDpi):
##        u'The tiling DPI.'
##    Dpi = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'esriServerLineLabelPlacementType'
esriServerLinePlacementAboveAfter = 0
esriServerLinePlacementAboveAlong = 1
esriServerLinePlacementAboveBefore = 2
esriServerLinePlacementAboveStart = 3
esriServerLinePlacementAboveEnd = 4
esriServerLinePlacementBelowAfter = 5
esriServerLinePlacementBelowAlong = 6
esriServerLinePlacementBelowBefore = 7
esriServerLinePlacementBelowStart = 8
esriServerLinePlacementBelowEnd = 9
esriServerLinePlacementCenterAfter = 10
esriServerLinePlacementCenterAlong = 11
esriServerLinePlacementCenterBefore = 12
esriServerLinePlacementCenterStart = 13
esriServerLinePlacementCenterEnd = 14
esriServerLineLabelPlacementType = c_int # enum
class DimensionClassDescription(CoClass):
    u'The class description for dimension feature classes.'
    _reg_clsid_ = GUID('{38C48FE5-BCE6-43DE-81B4-B7C15BB4AE25}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
DimensionClassDescription._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IObjectClassDescription, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClassDescription]

class TemplateInfo(CoClass):
    u'TemplateInfo co-class.'
    _reg_clsid_ = GUID('{20A9425A-D861-45C6-959B-32FDFD45651D}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class ITemplateInfo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'A Template Object'
    _iid_ = GUID('{5A029BB8-DAB1-4BA4-9AB6-E60C4FA11691}')
    _idlflags_ = ['oleautomation']
TemplateInfo._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ITemplateInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class FeatureLayerFactory(CoClass):
    u'A factory for creating layers based on feature classes and layer files.'
    _reg_clsid_ = GUID('{BB4DDF14-F291-45E8-9144-8DC8FB10E2C1}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
FeatureLayerFactory._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILayerFactory]

class IMapAdmin2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to Map administration methods.'
    _iid_ = GUID('{016C393A-7751-40E1-B6E9-F6B454A4493A}')
    _idlflags_ = ['oleautomation']
IMapAdmin2._methods_ = [
    COMMETHOD(['propputref', helpstring(u'Specify the background to use when drawing to destinations other than a frame.')], HRESULT, 'NonFrameBackground',
              ( ['in'], POINTER(IBackground), 'Background' )),
    COMMETHOD(['propget', helpstring(u'Specify the background to use when drawing to destinations other than a frame.')], HRESULT, 'NonFrameBackground',
              ( ['retval', 'out'], POINTER(POINTER(IBackground)), 'Background' )),
    COMMETHOD(['propput', helpstring(u'Specify a boundary to clip to.  Frame uses this to clip to border.')], HRESULT, 'ClipBounds',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'rhs' )),
    COMMETHOD([helpstring(u'Fire AfterDraw(esriViewForeground) event.')], HRESULT, 'FireAfterDraw',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE, 'hDC' )),
    COMMETHOD([helpstring(u'Notifies listeners that a version in the map changed.')], HRESULT, 'FireChangeVersion',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IVersion), 'oldVersion' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IVersion), 'newVersion' )),
    COMMETHOD([helpstring(u"Notifies listeners that the a layer's class has changed.")], HRESULT, 'FireChangeFeatureClass',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClass), 'oldClass' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClass), 'newClass' )),
    COMMETHOD([helpstring(u"Notifies listeners that the a layer's class has changed.")], HRESULT, 'FireChangeTable',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable), 'oldTable' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable), 'newTable' )),
    COMMETHOD([helpstring(u'Check if a complete redraw is needed.')], HRESULT, 'CompleteRedrawNeeded',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD([helpstring(u'Call before using Output to cause graphic selection to be drawn.')], HRESULT, 'ForceGraphicSelectionDraw'),
    COMMETHOD([helpstring(u'Call before using Output to prevent AfterDraw(esriViewForeground) from being fired.')], HRESULT, 'SuppressForegroundDraw'),
]
################################################################
## code template for IMapAdmin2 implementation
##class IMapAdmin2_Impl(object):
##    def FireAfterDraw(self, hDC):
##        u'Fire AfterDraw(esriViewForeground) event.'
##        #return 
##
##    @property
##    def NonFrameBackground(self, Background):
##        u'Specify the background to use when drawing to destinations other than a frame.'
##        #return 
##
##    def _set(self, rhs):
##        u'Specify a boundary to clip to.  Frame uses this to clip to border.'
##    ClipBounds = property(fset = _set, doc = _set.__doc__)
##
##    def FireChangeVersion(self, oldVersion, newVersion):
##        u'Notifies listeners that a version in the map changed.'
##        #return 
##
##    def SuppressForegroundDraw(self):
##        u'Call before using Output to prevent AfterDraw(esriViewForeground) from being fired.'
##        #return 
##
##    def CompleteRedrawNeeded(self):
##        u'Check if a complete redraw is needed.'
##        #return flag
##
##    def FireChangeFeatureClass(self, oldClass, newClass):
##        u"Notifies listeners that the a layer's class has changed."
##        #return 
##
##    def ForceGraphicSelectionDraw(self):
##        u'Call before using Output to cause graphic selection to be drawn.'
##        #return 
##
##    def FireChangeTable(self, oldTable, newTable):
##        u"Notifies listeners that the a layer's class has changed."
##        #return 
##

class IEnumSpatialBookmark(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the spatial bookmark list.'
    _iid_ = GUID('{EE535290-41C9-11D1-880A-080009EC732A}')
    _idlflags_ = ['oleautomation']
IEnumSpatialBookmark._methods_ = [
    COMMETHOD([helpstring(u'Returns the next spatial bookmark.')], HRESULT, 'Next',
              ( ['retval', 'out'], POINTER(POINTER(ISpatialBookmark)), 'bookmark' )),
    COMMETHOD([helpstring(u'Resets the enumerator.')], HRESULT, 'Reset'),
]
################################################################
## code template for IEnumSpatialBookmark implementation
##class IEnumSpatialBookmark_Impl(object):
##    def Reset(self):
##        u'Resets the enumerator.'
##        #return 
##
##    def Next(self):
##        u'Returns the next spatial bookmark.'
##        #return bookmark
##

class ITemplateInfos(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Array of Templates'
    _iid_ = GUID('{5470F9B9-DA16-4265-809C-ABC18AB04499}')
    _idlflags_ = ['oleautomation']
ITemplateInfos._methods_ = [
    COMMETHOD(['propget', helpstring(u'Template Info.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The Template at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(ITemplateInfo)), 'ppTemplateInfo' )),
    COMMETHOD([helpstring(u'Removes Template at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all Graphic Feature Templates.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Adds a Template.')], HRESULT, 'Add',
              ( ['in'], POINTER(ITemplateInfo), 'TemplateInfo' )),
    COMMETHOD([helpstring(u'Adds a Template at the specified position.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(ITemplateInfo), 'TemplateInfo' )),
]
################################################################
## code template for ITemplateInfos implementation
##class ITemplateInfos_Impl(object):
##    @property
##    def Count(self):
##        u'Template Info.'
##        #return Count
##
##    def Insert(self, Index, TemplateInfo):
##        u'Adds a Template at the specified position.'
##        #return 
##
##    def Remove(self, Index):
##        u'Removes Template at the specified position.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'The Template at the specified position.'
##        #return ppTemplateInfo
##
##    def RemoveAll(self):
##        u'Removes all Graphic Feature Templates.'
##        #return 
##
##    def Add(self, TemplateInfo):
##        u'Adds a Template.'
##        #return 
##

class IMaps(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the maps collection.'
    _iid_ = GUID('{DFD9FF9F-3080-11D2-94C9-080009EEBECB}')
    _idlflags_ = ['oleautomation']
IMaps._methods_ = [
    COMMETHOD(['propget', helpstring(u'Number of maps.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The map at the given index.')], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IMap)), 'Map' )),
    COMMETHOD([helpstring(u'Creates a new map.')], HRESULT, 'Create',
              ( ['retval', 'out'], POINTER(POINTER(IMap)), 'Map' )),
    COMMETHOD([helpstring(u'Removes a map from the collection.')], HRESULT, 'Remove',
              ( ['in'], POINTER(IMap), 'Map' )),
    COMMETHOD(['hidden', helpstring(u'Adds a map to the collection.')], HRESULT, 'Add',
              ( ['in'], POINTER(IMap), 'Map' )),
    COMMETHOD([helpstring(u'Removes a map at the specified index.')], HRESULT, 'RemoveAt',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all maps from the collection.')], HRESULT, 'Reset'),
]
################################################################
## code template for IMaps implementation
##class IMaps_Impl(object):
##    @property
##    def Count(self):
##        u'Number of maps.'
##        #return Count
##
##    def Reset(self):
##        u'Removes all maps from the collection.'
##        #return 
##
##    def Create(self):
##        u'Creates a new map.'
##        #return Map
##
##    def Remove(self, Map):
##        u'Removes a map from the collection.'
##        #return 
##
##    @property
##    def Item(self, Index):
##        u'The map at the given index.'
##        #return Map
##
##    def Add(self, Map):
##        u'Adds a map to the collection.'
##        #return 
##
##    def RemoveAt(self, Index):
##        u'Removes a map at the specified index.'
##        #return 
##

class DimensionGraphic(CoClass):
    u'The graphic asscoiated with a DimensionFeature.'
    _reg_clsid_ = GUID('{5FE02662-FB61-11D3-80D3-00C04F601565}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IDimensionGraphic(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a dimension graphic.'
    _iid_ = GUID('{7126D088-FB61-11D3-80D3-00C04F601565}')
    _idlflags_ = ['oleautomation']
DimensionGraphic._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDimensionGraphic]

class ModifyDimensionFeedback(CoClass):
    u'A display feedback for modifying existing dimension features.'
    _reg_clsid_ = GUID('{8923C842-0F36-11D4-80D7-00C04F601565}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IModifyDimensionFeedback(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members to control the display feedback for modifying existing dimension features.'
    _iid_ = GUID('{F278B3A2-0F2C-11D4-80D7-00C04F601565}')
    _idlflags_ = ['oleautomation']
ModifyDimensionFeedback._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayFeedback, IModifyDimensionFeedback]

class TemplateInfos(CoClass):
    u'TemplateInfos co-class.'
    _reg_clsid_ = GUID('{17763802-34AD-4317-AE77-F3D8B174D74E}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
TemplateInfos._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ITemplateInfos, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class FeatureServerConfigurationFactory(CoClass):
    u'FeatureServer Configuration Factory Class.'
    _reg_clsid_ = GUID('{44204A51-68C6-482E-BA3A-AF249B3334E8}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
FeatureServerConfigurationFactory._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._18F2FC71_6B30_45B9_B101_037A8B868B66_0_10_2.IConfigurationFactory, comtypes.gen._18F2FC71_6B30_45B9_B101_037A8B868B66_0_10_2.IConfigurationFactory2, comtypes.gen._18F2FC71_6B30_45B9_B101_037A8B868B66_0_10_2.IConfigurationFactory3, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]

class IMapServerLegendGroups(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Map Server Legend Groups Interface.'
    _iid_ = GUID('{6644F471-0AE8-4089-B158-48CF99A23F65}')
    _idlflags_ = ['oleautomation']
IMapServerLegendGroups._methods_ = [
    COMMETHOD(['propget', helpstring(u'The legend group count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The legend group at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IMapServerLegendGroup)), 'group' )),
    COMMETHOD([helpstring(u'Removes the legend group at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all legend groups.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Adds a legend group.')], HRESULT, 'Add',
              ( ['in'], POINTER(IMapServerLegendGroup), 'group' )),
    COMMETHOD([helpstring(u'Adds a legend group at the specified position.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(IMapServerLegendGroup), 'group' )),
]
################################################################
## code template for IMapServerLegendGroups implementation
##class IMapServerLegendGroups_Impl(object):
##    @property
##    def Count(self):
##        u'The legend group count.'
##        #return Count
##
##    def Insert(self, Index, group):
##        u'Adds a legend group at the specified position.'
##        #return 
##
##    def Remove(self, Index):
##        u'Removes the legend group at the specified position.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'The legend group at the specified position.'
##        #return group
##
##    def RemoveAll(self):
##        u'Removes all legend groups.'
##        #return 
##
##    def Add(self, group):
##        u'Adds a legend group.'
##        #return 
##

class ILegendGroup(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the collection of legend classes provided by a renderer.'
    _iid_ = GUID('{167C5E9F-AF20-11D1-8817-080009EC732A}')
    _idlflags_ = ['oleautomation']
ILegendGroups._methods_ = [
    COMMETHOD(['propget', helpstring(u'The legend group count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'Legend group at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(ILegendGroup)), 'LegendGroup' )),
    COMMETHOD([helpstring(u'Legend group at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Remove all legend groups.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Add a legend group.')], HRESULT, 'Add',
              ( ['in'], POINTER(ILegendGroup), 'LegendGroup' )),
    COMMETHOD([helpstring(u'Add a legend group at the specified posiiton.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(ILegendGroup), 'LegendGroup' )),
]
################################################################
## code template for ILegendGroups implementation
##class ILegendGroups_Impl(object):
##    @property
##    def Count(self):
##        u'The legend group count.'
##        #return Count
##
##    def Insert(self, Index, LegendGroup):
##        u'Add a legend group at the specified posiiton.'
##        #return 
##
##    def Remove(self, Index):
##        u'Legend group at the specified position.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'Legend group at the specified position.'
##        #return LegendGroup
##
##    def RemoveAll(self):
##        u'Remove all legend groups.'
##        #return 
##
##    def Add(self, LegendGroup):
##        u'Add a legend group.'
##        #return 
##

class ColorStyleGalleryClass(CoClass):
    u'Use to create new Color Symbol items.'
    _reg_clsid_ = GUID('{AC0E982D-91CB-11D1-8813-080009EC732A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
ColorStyleGalleryClass._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IStyleGalleryClass, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IStyleGalleryClass2]

class GraphicFeatureServer(CoClass):
    u'The Graphic Feature Server component provides programmatic access to the Graphic Features.'
    _reg_clsid_ = GUID('{C2B5871E-B795-4EF2-8330-C716428633C0}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IGraphicFeatureServer2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members of Graphic Feature Server with version and edit with rollbackOnFailure.'
    _iid_ = GUID('{389F4FA0-628D-403D-9015-62857CB1C05E}')
    _idlflags_ = ['oleautomation']
class IGraphicFeatureServerInit(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to additional members that support initializing a feature server.'
    _iid_ = GUID('{6790D29A-7EC2-4F84-BCCF-2B86E92491DA}')
    _idlflags_ = ['oleautomation']
class IGraphicFeatureServerReplication(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to replication members of Graphic Feature Server.'
    _iid_ = GUID('{6A727D6F-0B7D-478E-847E-8CF875180B0D}')
    _idlflags_ = ['oleautomation']
GraphicFeatureServer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._18F2FC71_6B30_45B9_B101_037A8B868B66_0_10_2.IServerObjectExtension, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IObjectConstruct, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IRequestHandler, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IRequestHandler2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IObjectActivate, IGraphicFeatureServer, IGraphicFeatureServer2, IGraphicFeatureServerInit, IGraphicFeatureServerReplication, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILogSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IRESTRequestHandler, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]

class IDataSourceDescription(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the available properties of a datasource description object.'
    _iid_ = GUID('{EA59D2BD-8682-42EE-8EBE-3D428DCFEC5A}')
    _idlflags_ = ['oleautomation']
IDataSourceDescription._methods_ = [
    COMMETHOD(['propget', helpstring(u'ID of a workspace that is registered with the Map Service.')], HRESULT, 'WorkspaceID',
              ( ['retval', 'out'], POINTER(BSTR), 'pWorkspaceID' )),
    COMMETHOD(['propput', helpstring(u'ID of a workspace that is registered with the Map Service.')], HRESULT, 'WorkspaceID',
              ( ['in'], BSTR, 'pWorkspaceID' )),
]
################################################################
## code template for IDataSourceDescription implementation
##class IDataSourceDescription_Impl(object):
##    def _get(self):
##        u'ID of a workspace that is registered with the Map Service.'
##        #return pWorkspaceID
##    def _set(self, pWorkspaceID):
##        u'ID of a workspace that is registered with the Map Service.'
##    WorkspaceID = property(_get, _set, doc = _set.__doc__)
##

class IRasterDRAShader(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Access to members that allow a DRA shader to process pixel channels.'
    _iid_ = GUID('{35AE89D7-540F-400B-82A6-CFAE4A296FEF}')
    _idlflags_ = []
IRasterDRAShader._methods_ = [
    COMMETHOD(['propput', helpstring(u'The stretch type.')], HRESULT, 'StretchType',
              ( ['in'], esriRasterStretchTypesEnum, 'pStretchType' )),
    COMMETHOD(['propget', helpstring(u'The stretch type.')], HRESULT, 'StretchType',
              ( ['retval', 'out'], POINTER(esriRasterStretchTypesEnum), 'pStretchType' )),
    COMMETHOD(['propput', helpstring(u'The number of standard deviation.')], HRESULT, 'StdDevParam',
              ( ['in'], c_float, 'pStddev' )),
    COMMETHOD(['propget', helpstring(u'The number of standard deviation.')], HRESULT, 'StdDevParam',
              ( ['retval', 'out'], POINTER(c_float), 'pStddev' )),
    COMMETHOD(['propput', helpstring(u'The percent min.')], HRESULT, 'PercentMin',
              ( ['in'], c_float, 'pPercentMin' )),
    COMMETHOD(['propget', helpstring(u'The percent min.')], HRESULT, 'PercentMin',
              ( ['retval', 'out'], POINTER(c_float), 'pPercentMin' )),
    COMMETHOD(['propput', helpstring(u'The percent max.')], HRESULT, 'PercentMax',
              ( ['in'], c_float, 'pPercentMax' )),
    COMMETHOD(['propget', helpstring(u'The percent max.')], HRESULT, 'PercentMax',
              ( ['retval', 'out'], POINTER(c_float), 'pPercentMax' )),
]
################################################################
## code template for IRasterDRAShader implementation
##class IRasterDRAShader_Impl(object):
##    def _get(self):
##        u'The number of standard deviation.'
##        #return pStddev
##    def _set(self, pStddev):
##        u'The number of standard deviation.'
##    StdDevParam = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The percent min.'
##        #return pPercentMin
##    def _set(self, pPercentMin):
##        u'The percent min.'
##    PercentMin = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The stretch type.'
##        #return pStretchType
##    def _set(self, pStretchType):
##        u'The stretch type.'
##    StretchType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The percent max.'
##        #return pPercentMax
##    def _set(self, pPercentMax):
##        u'The percent max.'
##    PercentMax = property(_get, _set, doc = _set.__doc__)
##

class DimensionShape(CoClass):
    u'A dimension shape associated with a dimesion feature.'
    _reg_clsid_ = GUID('{D27A074A-10AD-11D4-80D7-00C04F601565}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IDimensionShape(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a dimension shape.'
    _iid_ = GUID('{D07B504E-10AC-11D4-80D7-00C04F601565}')
    _idlflags_ = ['oleautomation']
DimensionShape._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDimensionShape, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ITransform2D]

class IMapServerLegendClasses(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Map Server Legend Classes Interface.'
    _iid_ = GUID('{1707D0E5-60C5-494C-A283-9B7DE5D9E6EC}')
    _idlflags_ = ['oleautomation']
IMapServerLegendGroup._methods_ = [
    COMMETHOD(['propget', helpstring(u'The heading string.')], HRESULT, 'Heading',
              ( ['retval', 'out'], POINTER(BSTR), 'Heading' )),
    COMMETHOD(['propget', helpstring(u'A collection of legend class objects.')], HRESULT, 'Classes',
              ( ['retval', 'out'], POINTER(POINTER(IMapServerLegendClasses)), 'Classes' )),
]
################################################################
## code template for IMapServerLegendGroup implementation
##class IMapServerLegendGroup_Impl(object):
##    @property
##    def Classes(self):
##        u'A collection of legend class objects.'
##        #return Classes
##
##    @property
##    def Heading(self):
##        u'The heading string.'
##        #return Heading
##

class IMxdServerObjects(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the core objects contained within the map document.'
    _iid_ = GUID('{50949B31-90AC-4290-B001-952EF5204A62}')
    _idlflags_ = ['oleautomation']
IMxdServerObjects._methods_ = [
    COMMETHOD(['propget', helpstring(u'The map corresponding to the specified map name. Pass in a blank string for mapName to get the default map. If the mapName does not correspond to any map in the document, E_INVALIDARG is returned and ppMap will be null.')], HRESULT, 'Map',
              ( ['in'], BSTR, 'MapName' ),
              ( ['retval', 'out'], POINTER(POINTER(IMap)), 'mapObject' )),
    COMMETHOD(['propget', helpstring(u'The layer specified by the map name and layer ID. If the mapName is blank, the default map will be assumed.  If the map or layer specified is not found, an E_INVALIDARG error will be returned.')], HRESULT, 'Layer',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], c_int, 'LayerID' ),
              ( ['retval', 'out'], POINTER(POINTER(ILayer)), 'layerObject' )),
    COMMETHOD(['propget', helpstring(u'The page layout object for the current map document.')], HRESULT, 'PageLayout',
              ( ['retval', 'out'], POINTER(POINTER(IPageLayout)), 'pageLayoutObject' )),
]
################################################################
## code template for IMxdServerObjects implementation
##class IMxdServerObjects_Impl(object):
##    @property
##    def Map(self, MapName):
##        u'The map corresponding to the specified map name. Pass in a blank string for mapName to get the default map. If the mapName does not correspond to any map in the document, E_INVALIDARG is returned and ppMap will be null.'
##        #return mapObject
##
##    @property
##    def Layer(self, MapName, LayerID):
##        u'The layer specified by the map name and layer ID. If the mapName is blank, the default map will be assumed.  If the map or layer specified is not found, an E_INVALIDARG error will be returned.'
##        #return layerObject
##
##    @property
##    def PageLayout(self):
##        u'The page layout object for the current map document.'
##        #return pageLayoutObject
##

class IMapAdmin3(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to Map administration methods.'
    _iid_ = GUID('{14EDDF51-9D91-4C9C-89C1-F862381E0FDE}')
    _idlflags_ = ['oleautomation']
IMapAdmin3._methods_ = [
    COMMETHOD(['propputref', helpstring(u'Specify the background to use when drawing to destinations other than a frame.')], HRESULT, 'NonFrameBackground',
              ( ['in'], POINTER(IBackground), 'Background' )),
    COMMETHOD(['propget', helpstring(u'Specify the background to use when drawing to destinations other than a frame.')], HRESULT, 'NonFrameBackground',
              ( ['retval', 'out'], POINTER(POINTER(IBackground)), 'Background' )),
    COMMETHOD(['propput', helpstring(u'Specify a boundary to clip to.  Frame uses this to clip to border.')], HRESULT, 'ClipBounds',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'rhs' )),
    COMMETHOD([helpstring(u'Fire AfterDraw(esriViewForeground) event.')], HRESULT, 'FireAfterDraw',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE, 'hDC' )),
    COMMETHOD([helpstring(u'Notifies listeners that a version in the map changed.')], HRESULT, 'FireChangeVersion',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IVersion), 'oldVersion' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IVersion), 'newVersion' )),
    COMMETHOD([helpstring(u"Notifies listeners that the a layer's class has changed.")], HRESULT, 'FireChangeFeatureClass',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClass), 'oldClass' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClass), 'newClass' )),
    COMMETHOD([helpstring(u"Notifies listeners that the a layer's class has changed.")], HRESULT, 'FireChangeTable',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable), 'oldTable' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable), 'newTable' )),
    COMMETHOD([helpstring(u'Check if a complete redraw is needed.')], HRESULT, 'CompleteRedrawNeeded',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD([helpstring(u'Call before using Output to cause graphic selection to be drawn.')], HRESULT, 'ForceGraphicSelectionDraw'),
    COMMETHOD([helpstring(u'Call before using Output to prevent AfterDraw(esriViewForeground) from being fired.')], HRESULT, 'SuppressForegroundDraw'),
    COMMETHOD([helpstring(u'Notifies listeners that a layer has been removed from the map.')], HRESULT, 'FireLayerDeleted',
              ( ['in'], POINTER(ILayer), 'Layer' )),
    COMMETHOD([helpstring(u'Notifies listeners that a layer has been added to the map.')], HRESULT, 'FireLayerAdded',
              ( ['in'], POINTER(ILayer), 'Layer' )),
    COMMETHOD([helpstring(u'Notifies listeners that a layer has been reordered the map.')], HRESULT, 'FireLayerReordered',
              ( ['in'], POINTER(ILayer), 'Layer' ),
              ( ['in'], c_int, 'toIndex' )),
]
################################################################
## code template for IMapAdmin3 implementation
##class IMapAdmin3_Impl(object):
##    def FireAfterDraw(self, hDC):
##        u'Fire AfterDraw(esriViewForeground) event.'
##        #return 
##
##    @property
##    def NonFrameBackground(self, Background):
##        u'Specify the background to use when drawing to destinations other than a frame.'
##        #return 
##
##    def _set(self, rhs):
##        u'Specify a boundary to clip to.  Frame uses this to clip to border.'
##    ClipBounds = property(fset = _set, doc = _set.__doc__)
##
##    def FireChangeVersion(self, oldVersion, newVersion):
##        u'Notifies listeners that a version in the map changed.'
##        #return 
##
##    def SuppressForegroundDraw(self):
##        u'Call before using Output to prevent AfterDraw(esriViewForeground) from being fired.'
##        #return 
##
##    def CompleteRedrawNeeded(self):
##        u'Check if a complete redraw is needed.'
##        #return flag
##
##    def FireLayerReordered(self, Layer, toIndex):
##        u'Notifies listeners that a layer has been reordered the map.'
##        #return 
##
##    def FireChangeFeatureClass(self, oldClass, newClass):
##        u"Notifies listeners that the a layer's class has changed."
##        #return 
##
##    def FireLayerDeleted(self, Layer):
##        u'Notifies listeners that a layer has been removed from the map.'
##        #return 
##
##    def ForceGraphicSelectionDraw(self):
##        u'Call before using Output to cause graphic selection to be drawn.'
##        #return 
##
##    def FireChangeTable(self, oldTable, newTable):
##        u"Notifies listeners that the a layer's class has changed."
##        #return 
##
##    def FireLayerAdded(self, Layer):
##        u'Notifies listeners that a layer has been added to the map.'
##        #return 
##

IMapServerLegendClasses._methods_ = [
    COMMETHOD(['propget', helpstring(u'The legend class count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The legend class at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IMapServerLegendClass)), 'LegendClass' )),
    COMMETHOD([helpstring(u'Removes the legend class at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all legend classes.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Adds a legend class.')], HRESULT, 'Add',
              ( ['in'], POINTER(IMapServerLegendClass), 'LegendClass' )),
    COMMETHOD([helpstring(u'Adds a legend class at the specified position.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(IMapServerLegendClass), 'LegendClass' )),
]
################################################################
## code template for IMapServerLegendClasses implementation
##class IMapServerLegendClasses_Impl(object):
##    @property
##    def Count(self):
##        u'The legend class count.'
##        #return Count
##
##    def Insert(self, Index, LegendClass):
##        u'Adds a legend class at the specified position.'
##        #return 
##
##    def Remove(self, Index):
##        u'Removes the legend class at the specified position.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'The legend class at the specified position.'
##        #return LegendClass
##
##    def RemoveAll(self):
##        u'Removes all legend classes.'
##        #return 
##
##    def Add(self, LegendClass):
##        u'Adds a legend class.'
##        #return 
##

class ITileCacheInfoEx(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that provide the tile cache info.'
    _iid_ = GUID('{D0FAC2F1-1E2F-4062-9476-6865A5157DB9}')
    _idlflags_ = ['oleautomation']
ITileCacheInfoEx._methods_ = [
    COMMETHOD(['propget', helpstring(u'The tiling spatial reference.')], HRESULT, 'SpatialReference',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference)), 'ppSpatialReference' )),
    COMMETHOD(['propputref', helpstring(u'The tiling spatial reference.')], HRESULT, 'SpatialReference',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'ppSpatialReference' )),
    COMMETHOD(['propget', helpstring(u'The tiling origin.')], HRESULT, 'Origin',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint)), 'ppOrigin' )),
    COMMETHOD(['propput', helpstring(u'The tiling origin.')], HRESULT, 'Origin',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'ppOrigin' )),
    COMMETHOD(['propget', helpstring(u'The number of columns per tile.')], HRESULT, 'TileCols',
              ( ['retval', 'out'], POINTER(c_int), 'pNumTileCols' )),
    COMMETHOD(['propput', helpstring(u'The number of columns per tile.')], HRESULT, 'TileCols',
              ( ['in'], c_int, 'pNumTileCols' )),
    COMMETHOD(['propget', helpstring(u'The number of rows per tile.')], HRESULT, 'TileRows',
              ( ['retval', 'out'], POINTER(c_int), 'pNumTileRows' )),
    COMMETHOD(['propput', helpstring(u'The number of rows per tile.')], HRESULT, 'TileRows',
              ( ['in'], c_int, 'pNumTileRows' )),
    COMMETHOD(['propget', helpstring(u'The tiling DPI.')], HRESULT, 'PreciseDpi',
              ( ['retval', 'out'], POINTER(c_double), 'pDpi' )),
    COMMETHOD(['propput', helpstring(u'The tiling DPI.')], HRESULT, 'PreciseDpi',
              ( ['in'], c_double, 'pDpi' )),
    COMMETHOD(['propget', helpstring(u'The tile cache Levels Of Details.')], HRESULT, 'LODInfos',
              ( ['retval', 'out'], POINTER(POINTER(ILODInfos)), 'ppLODInfos' )),
    COMMETHOD(['propputref', helpstring(u'The tile cache Levels Of Details.')], HRESULT, 'LODInfos',
              ( ['in'], POINTER(ILODInfos), 'ppLODInfos' )),
    COMMETHOD([helpstring(u'Computes resolutions from scales and current DPI.')], HRESULT, 'ComputeResolutions'),
    COMMETHOD([helpstring(u'Computes scales from resolutions and current DPI.')], HRESULT, 'ComputeScales'),
]
################################################################
## code template for ITileCacheInfoEx implementation
##class ITileCacheInfoEx_Impl(object):
##    def _get(self):
##        u'The tiling origin.'
##        #return ppOrigin
##    def _set(self, ppOrigin):
##        u'The tiling origin.'
##    Origin = property(_get, _set, doc = _set.__doc__)
##
##    def ComputeScales(self):
##        u'Computes scales from resolutions and current DPI.'
##        #return 
##
##    def _get(self):
##        u'The tiling DPI.'
##        #return pDpi
##    def _set(self, pDpi):
##        u'The tiling DPI.'
##    PreciseDpi = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The number of columns per tile.'
##        #return pNumTileCols
##    def _set(self, pNumTileCols):
##        u'The number of columns per tile.'
##    TileCols = property(_get, _set, doc = _set.__doc__)
##
##    def SpatialReference(self, ppSpatialReference):
##        u'The tiling spatial reference.'
##        #return 
##
##    def LODInfos(self, ppLODInfos):
##        u'The tile cache Levels Of Details.'
##        #return 
##
##    def ComputeResolutions(self):
##        u'Computes resolutions from scales and current DPI.'
##        #return 
##
##    def _get(self):
##        u'The number of rows per tile.'
##        #return pNumTileRows
##    def _set(self, pNumTileRows):
##        u'The number of rows per tile.'
##    TileRows = property(_get, _set, doc = _set.__doc__)
##

class IDynamicLegendItem(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Dynamic legend properties'
    _iid_ = GUID('{815E4B50-152A-4B7B-B3E8-4778C59DC699}')
    _idlflags_ = ['oleautomation']
IDynamicLegendItem._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if classes should be shown only when associated data is visible.')], HRESULT, 'AutoVisibility',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'AutoVisibility' )),
    COMMETHOD(['propput', helpstring(u'Indicates if classes should be shown only when associated data is visible.')], HRESULT, 'AutoVisibility',
              ( ['in'], VARIANT_BOOL, 'AutoVisibility' )),
    COMMETHOD(['propget', helpstring(u'Indicates geometry used to determine whether the data for a legend class is visible.  Normally, the map clip shape or data driven page index feature is used.  Simple means use the data frame extent.')], HRESULT, 'UseSimpleExtent',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates geometry used to determine whether the data for a legend class is visible.  Normally, the map clip shape or data driven page index feature is used.  Simple means use the data frame extent.')], HRESULT, 'UseSimpleExtent',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Show the number of times a class appears in the current map extent.')], HRESULT, 'ShowCounts',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'AutoVisibility' )),
    COMMETHOD(['propput', helpstring(u'Show the number of times a class appears in the current map extent.')], HRESULT, 'ShowCounts',
              ( ['in'], VARIANT_BOOL, 'AutoVisibility' )),
    COMMETHOD(['propget', helpstring(u'Class count string is created by combining prefix + count + suffix.')], HRESULT, 'CountPrefix',
              ( ['retval', 'out'], POINTER(BSTR), 'str' )),
    COMMETHOD(['propput', helpstring(u'Class count string is created by combining prefix + count + suffix.')], HRESULT, 'CountSuffix',
              ( ['in'], BSTR, 'str' )),
    COMMETHOD(['propget', helpstring(u'Class count string is created by combining prefix + count + suffix.')], HRESULT, 'CountSuffix',
              ( ['retval', 'out'], POINTER(BSTR), 'str' )),
    COMMETHOD(['propput', helpstring(u'Class count string is created by combining prefix + count + suffix.')], HRESULT, 'CountPrefix',
              ( ['in'], BSTR, 'str' )),
    COMMETHOD(['propget', helpstring(u'Class count number format.')], HRESULT, 'CountNumberFormat',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.INumberFormat)), 'Format' )),
    COMMETHOD(['propputref', helpstring(u'Class count number format.')], HRESULT, 'CountNumberFormat',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.INumberFormat), 'Format' )),
]
################################################################
## code template for IDynamicLegendItem implementation
##class IDynamicLegendItem_Impl(object):
##    def _get(self):
##        u'Indicates geometry used to determine whether the data for a legend class is visible.  Normally, the map clip shape or data driven page index feature is used.  Simple means use the data frame extent.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates geometry used to determine whether the data for a legend class is visible.  Normally, the map clip shape or data driven page index feature is used.  Simple means use the data frame extent.'
##    UseSimpleExtent = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Class count string is created by combining prefix + count + suffix.'
##        #return str
##    def _set(self, str):
##        u'Class count string is created by combining prefix + count + suffix.'
##    CountSuffix = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Class count string is created by combining prefix + count + suffix.'
##        #return str
##    def _set(self, str):
##        u'Class count string is created by combining prefix + count + suffix.'
##    CountPrefix = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Show the number of times a class appears in the current map extent.'
##        #return AutoVisibility
##    def _set(self, AutoVisibility):
##        u'Show the number of times a class appears in the current map extent.'
##    ShowCounts = property(_get, _set, doc = _set.__doc__)
##
##    def CountNumberFormat(self, Format):
##        u'Class count number format.'
##        #return 
##
##    def _get(self):
##        u'Indicates if classes should be shown only when associated data is visible.'
##        #return AutoVisibility
##    def _set(self, AutoVisibility):
##        u'Indicates if classes should be shown only when associated data is visible.'
##    AutoVisibility = property(_get, _set, doc = _set.__doc__)
##

class GFSReplicaDescription(CoClass):
    u'Graphic Feature Service Replica Description co-class.'
    _reg_clsid_ = GUID('{28E79DCD-11EA-4EAA-ADE7-D7106DF9B1CF}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IGFSReplicaDescription(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Replica description to create replica of features and symbology of published layers by Graphic Feature Server.'
    _iid_ = GUID('{626846A5-E9ED-4FBF-BE66-54923601CF5C}')
    _idlflags_ = ['oleautomation']
GFSReplicaDescription._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGFSReplicaDescription, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class IDataObjectTypes(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'DataObjectType Array'
    _iid_ = GUID('{8461B9AE-CE53-4513-A5AB-6F22035B9057}')
    _idlflags_ = ['oleautomation']
class IDataObjectType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'DataObjectType'
    _iid_ = GUID('{8438A9FD-3DE3-4EFD-A58E-7152147EB298}')
    _idlflags_ = ['oleautomation']
IDataObjectTypes._methods_ = [
    COMMETHOD(['propget', helpstring(u'DataObjectType count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The DataObjectType at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IDataObjectType)), 'DataObjectType' )),
    COMMETHOD([helpstring(u'Removes the DataObjectType at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all DataObjectType elements.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Adds a DataObjectType.')], HRESULT, 'Add',
              ( ['in'], POINTER(IDataObjectType), 'DataObjectType' )),
    COMMETHOD([helpstring(u'Adds a DataObjectType at the specified position.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(IDataObjectType), 'DataObjectType' )),
]
################################################################
## code template for IDataObjectTypes implementation
##class IDataObjectTypes_Impl(object):
##    @property
##    def Count(self):
##        u'DataObjectType count.'
##        #return Count
##
##    def Insert(self, Index, DataObjectType):
##        u'Adds a DataObjectType at the specified position.'
##        #return 
##
##    def Remove(self, Index):
##        u'Removes the DataObjectType at the specified position.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'The DataObjectType at the specified position.'
##        #return DataObjectType
##
##    def RemoveAll(self):
##        u'Removes all DataObjectType elements.'
##        #return 
##
##    def Add(self, DataObjectType):
##        u'Adds a DataObjectType.'
##        #return 
##

IMapServerLegendClass._methods_ = [
    COMMETHOD(['propget', helpstring(u'The label string.')], HRESULT, 'Label',
              ( ['retval', 'out'], POINTER(BSTR), 'Label' )),
    COMMETHOD(['propget', helpstring(u'The description string.')], HRESULT, 'Description',
              ( ['retval', 'out'], POINTER(BSTR), 'desc' )),
    COMMETHOD(['propget', helpstring(u'The symbol image.')], HRESULT, 'SymbolImage',
              ( ['retval', 'out'], POINTER(POINTER(IImageResult)), 'Image' )),
    COMMETHOD(['propget', helpstring(u'The transparent color used for the symbol image.')], HRESULT, 'TransparentColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
]
################################################################
## code template for IMapServerLegendClass implementation
##class IMapServerLegendClass_Impl(object):
##    @property
##    def SymbolImage(self):
##        u'The symbol image.'
##        #return Image
##
##    @property
##    def TransparentColor(self):
##        u'The transparent color used for the symbol image.'
##        #return Color
##
##    @property
##    def Description(self):
##        u'The description string.'
##        #return desc
##
##    @property
##    def Label(self):
##        u'The label string.'
##        #return Label
##

class GFSTableDescription(CoClass):
    u'Table Description for Replication and Feature Queries.'
    _reg_clsid_ = GUID('{E9750269-AC00-482E-9AC2-8D34F853E906}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IGFSTableDescription(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Table Description'
    _iid_ = GUID('{94793181-AE26-4A98-93FF-6F3E3EFBD3B8}')
    _idlflags_ = ['oleautomation']
GFSTableDescription._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGFSTableDescription, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

IAnnotateMap2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Name of the engine that will create the labels ( annotation).')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propget', helpstring(u'The UID that is expected for feature layer properties.')], HRESULT, 'FeatureLayerPropertiesID',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IUID)), 'uid' )),
    COMMETHOD([helpstring(u'Labels feature layers based on the properties given.')], HRESULT, 'Label',
              ( ['in'], POINTER(IOverposterProperties), 'overposterProps' ),
              ( ['in'], POINTER(IAnnotateMapProperties), 'annoMapCmdProps' ),
              ( ['in'], POINTER(IMap), 'Map' ),
              ( ['in', 'optional'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'TrackCancel', 0 )),
    COMMETHOD([helpstring(u'Draws labels for feature layers based on the properties given.')], HRESULT, 'Draw',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], POINTER(IOverposterProperties), 'overposterProps' ),
              ( ['in'], POINTER(IAnnotateMapProperties), 'annoMapCmdProps' ),
              ( ['in'], POINTER(IMap), 'Map' ),
              ( ['in', 'optional'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'TrackCancel', 0 )),
    COMMETHOD(['propget', helpstring(u'The UID that is expected for overposter properties.')], HRESULT, 'OverposterPropertiesID',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IUID)), 'uid' )),
]
################################################################
## code template for IAnnotateMap2 implementation
##class IAnnotateMap2_Impl(object):
##    @property
##    def OverposterPropertiesID(self):
##        u'The UID that is expected for overposter properties.'
##        #return uid
##
##    def Draw(self, Display, overposterProps, annoMapCmdProps, Map, TrackCancel):
##        u'Draws labels for feature layers based on the properties given.'
##        #return 
##
##    def Label(self, overposterProps, annoMapCmdProps, Map, TrackCancel):
##        u'Labels feature layers based on the properties given.'
##        #return 
##
##    @property
##    def Name(self):
##        u'Name of the engine that will create the labels ( annotation).'
##        #return Name
##
##    @property
##    def FeatureLayerPropertiesID(self):
##        u'The UID that is expected for feature layer properties.'
##        #return uid
##

IDataObjectType._methods_ = [
    COMMETHOD(['propget', helpstring(u'Type Name')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propget'], HRESULT, 'PropDomains',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet)), 'PropDomains' )),
    COMMETHOD(['propget', helpstring(u'Feature Templates.')], HRESULT, 'Templates',
              ( ['retval', 'out'], POINTER(POINTER(ITemplateInfos)), 'TemplateInfos' )),
    COMMETHOD(['propget'], HRESULT, 'TypeID',
              ( ['retval', 'out'], POINTER(VARIANT), 'variant' )),
]
################################################################
## code template for IDataObjectType implementation
##class IDataObjectType_Impl(object):
##    @property
##    def Templates(self):
##        u'Feature Templates.'
##        #return TemplateInfos
##
##    @property
##    def TypeID(self):
##        '-no docstring-'
##        #return variant
##
##    @property
##    def Name(self):
##        u'Type Name'
##        #return Name
##
##    @property
##    def PropDomains(self):
##        '-no docstring-'
##        #return PropDomains
##

class RasterBasemapLayerFactory(CoClass):
    u'Factory to create Raster Basemap Layers'
    _reg_clsid_ = GUID('{7054E506-77A4-4666-A6F2-832AFA88A297}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IRasterBasemapLayerFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members of a raster basemap layer.'
    _iid_ = GUID('{9727FFB9-7884-49E4-8288-026AD3091132}')
    _idlflags_ = []
RasterBasemapLayerFactory._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterBasemapLayerFactory]

class GFSTableDescriptions(CoClass):
    u'Graphic Feature Layer Descriptins for Replication and Feature Queries.'
    _reg_clsid_ = GUID('{BC437A47-E43C-4FA2-86CB-7D90128E13D7}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
GFSTableDescriptions._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGFSTableDescriptions, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class NestedLegendItem(CoClass):
    u'Nested legend item.'
    _reg_clsid_ = GUID('{2B65D212-C2C7-11D3-92F3-00600802E603}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class ILegendItem2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control how a layer appears in a legend.  Can be stored in a style.'
    _iid_ = GUID('{7D23F970-D5A6-4C1C-8618-3CC7B5839EFA}')
    _idlflags_ = ['oleautomation']
class ILegendItem3(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control how a layer appears in a legend.  Can be stored in a style.'
    _iid_ = GUID('{1DC64B35-9613-4007-BEC5-3AD4F1B9DFB7}')
    _idlflags_ = ['oleautomation']
NestedLegendItem._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, INestedLegendItem, IHorizontalLegendItem, ILegendItem, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, ILegendItem2, ILegendItem3, ILayerEffects]

class ImageServerEditResult(CoClass):
    u'An Image Server Edit Result object.'
    _reg_clsid_ = GUID('{A5E8EDB6-0D08-4145-B696-D64C71897819}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IImageServerEditResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Image Server Edit Result Interface.'
    _iid_ = GUID('{EC16F361-A57F-47EE-937B-168292FECC74}')
    _idlflags_ = ['oleautomation']
ImageServerEditResult._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IImageServerEditResult, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]

class ImageServerEditResults(CoClass):
    u'A collection of Image Server Edit Result objects.'
    _reg_clsid_ = GUID('{D85C8520-0E3A-4532-B03A-DE081F61ABA7}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IImageServerEditResults(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Image Server Edit Results Interface.'
    _iid_ = GUID('{AD7A1CFB-7C94-4422-9ED1-CDDFF7B7459F}')
    _idlflags_ = ['oleautomation']
ImageServerEditResults._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IImageServerEditResults, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]


# values for enumeration 'esriCadastralFeature'
esriCadastralParcel = 1
esriCadastralControlPoint = 2
esriCadastralFeature = c_int # enum
class IArrayOfIShader(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Access to members that managae an arrray of IShader objects.'
    _iid_ = GUID('{00A527CF-28DA-4043-9CF7-E9911172F05F}')
    _idlflags_ = []
class IShader(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Access to members that allow a shader to process pixel channels.'
    _iid_ = GUID('{CB0F9195-3E7C-4A2B-8C95-A8F2FAC10C4C}')
    _idlflags_ = []
IArrayOfIShader._methods_ = [
    COMMETHOD(['propget', helpstring(u'The IShader count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The IShader at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IShader)), 'IShaderParam' )),
    COMMETHOD([helpstring(u'Removes the IShader at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes every IShader.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Adds the IShader.')], HRESULT, 'Add',
              ( ['in'], POINTER(IShader), 'IShaderParam' )),
    COMMETHOD([helpstring(u'Adds the IShader at the specified position.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(IShader), 'IShaderParam' )),
]
################################################################
## code template for IArrayOfIShader implementation
##class IArrayOfIShader_Impl(object):
##    @property
##    def Count(self):
##        u'The IShader count.'
##        #return Count
##
##    def Insert(self, Index, IShaderParam):
##        u'Adds the IShader at the specified position.'
##        #return 
##
##    def Remove(self, Index):
##        u'Removes the IShader at the specified position.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'The IShader at the specified position.'
##        #return IShaderParam
##
##    def RemoveAll(self):
##        u'Removes every IShader.'
##        #return 
##
##    def Add(self, IShaderParam):
##        u'Adds the IShader.'
##        #return 
##

class TileCacheInfo(CoClass):
    u'A Tile Cache Info object.'
    _reg_clsid_ = GUID('{01312017-7D38-4D2B-91A0-05C548ADE7F3}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
TileCacheInfo._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ITileCacheInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class CacheDatasetInfo(CoClass):
    u'Cache dataset info.'
    _reg_clsid_ = GUID('{8606E883-B497-4C34-A20B-B256848E1878}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class ICacheDatasetInfo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that provides cache storage info.'
    _iid_ = GUID('{6D3DB88A-6D14-458A-A7CB-045ABBED6D6D}')
    _idlflags_ = ['oleautomation']
CacheDatasetInfo._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ICacheDatasetInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class ImageServerMeasureResult(CoClass):
    u'An Image Server Measure Result object.'
    _reg_clsid_ = GUID('{AE6F05AF-77E6-48C6-BA85-1E6CFE690F2C}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IImageServerMeasureResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a measure result.'
    _iid_ = GUID('{FCB4CFFF-B110-4DEF-878D-87CB8A396D5B}')
    _idlflags_ = ['oleautomation']
ImageServerMeasureResult._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IImageServerMeasureResult, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]

class ILayerDescription2(ILayerDescription):
    _case_insensitive_ = True
    u'Provides access to the available properties of a layer description object.'
    _iid_ = GUID('{A8F3DB59-54B9-4BD0-83B9-A7E60C721F3A}')
    _idlflags_ = ['oleautomation']
ILayerDescription._methods_ = [
    COMMETHOD(['propget', helpstring(u'The layer ID. This is a unique ID for the layer, and is used to identify the layer in a number of method calls.')], HRESULT, 'ID',
              ( ['retval', 'out'], POINTER(c_int), 'LayerID' )),
    COMMETHOD(['propput', helpstring(u'The layer ID. This is a unique ID for the layer, and is used to identify the layer in a number of method calls.')], HRESULT, 'ID',
              ( ['in'], c_int, 'LayerID' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the layer is visible as defined in the TOC (i.e. marked on).')], HRESULT, 'Visible',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Visible' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the layer is visible as defined in the TOC (i.e. marked on).')], HRESULT, 'Visible',
              ( ['in'], VARIANT_BOOL, 'Visible' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the layer should scale its symbols according to the reference scale.')], HRESULT, 'ScaleSymbols',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Scale' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the layer should scale its symbols according to the reference scale.')], HRESULT, 'ScaleSymbols',
              ( ['in'], VARIANT_BOOL, 'Scale' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the layer should display its dynamic labels.')], HRESULT, 'ShowLabels',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Show' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the layer should display its dynamic labels.')], HRESULT, 'ShowLabels',
              ( ['in'], VARIANT_BOOL, 'Show' )),
    COMMETHOD(['propget', helpstring(u'Array of selected features.')], HRESULT, 'SelectionFeatures',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFIDSet)), 'FeatureIDs' )),
    COMMETHOD(['propput', helpstring(u'Array of selected features.')], HRESULT, 'SelectionFeatures',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFIDSet), 'FeatureIDs' )),
    COMMETHOD(['propget', helpstring(u'The selection color (used when SetSelectionSymbol = FALSE).')], HRESULT, 'SelectionColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propputref', helpstring(u'The selection color (used when SetSelectionSymbol = FALSE).')], HRESULT, 'SelectionColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'The selection symbol.')], HRESULT, 'SelectionSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol)), 'Symbol' )),
    COMMETHOD(['propputref', helpstring(u'The selection symbol.')], HRESULT, 'SelectionSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the selected set of features is drawn using the SelectionSymbol.')], HRESULT, 'SetSelectionSymbol',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'setSymbol' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the selected set of features is drawn using the SelectionSymbol.')], HRESULT, 'SetSelectionSymbol',
              ( ['in'], VARIANT_BOOL, 'setSymbol' )),
    COMMETHOD(['propget', helpstring(u'The selection buffer distance. When drawing, and if a selection filter is specified, a buffer zone of the specified distance will be displayed around the selected features.')], HRESULT, 'SelectionBufferDistance',
              ( ['retval', 'out'], POINTER(c_double), 'Distance' )),
    COMMETHOD(['propput', helpstring(u'The selection buffer distance. When drawing, and if a selection filter is specified, a buffer zone of the specified distance will be displayed around the selected features.')], HRESULT, 'SelectionBufferDistance',
              ( ['in'], c_double, 'Distance' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the selection buffer should be displayed.')], HRESULT, 'ShowSelectionBuffer',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Show' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the selection buffer should be displayed.')], HRESULT, 'ShowSelectionBuffer',
              ( ['in'], VARIANT_BOOL, 'Show' )),
    COMMETHOD(['propget', helpstring(u'The definition expression for the layer.')], HRESULT, 'DefinitionExpression',
              ( ['retval', 'out'], POINTER(BSTR), 'Expression' )),
    COMMETHOD(['propput', helpstring(u'The definition expression for the layer.')], HRESULT, 'DefinitionExpression',
              ( ['in'], BSTR, 'Expression' )),
]
################################################################
## code template for ILayerDescription implementation
##class ILayerDescription_Impl(object):
##    def _get(self):
##        u'The selection buffer distance. When drawing, and if a selection filter is specified, a buffer zone of the specified distance will be displayed around the selected features.'
##        #return Distance
##    def _set(self, Distance):
##        u'The selection buffer distance. When drawing, and if a selection filter is specified, a buffer zone of the specified distance will be displayed around the selected features.'
##    SelectionBufferDistance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether the layer should display its dynamic labels.'
##        #return Show
##    def _set(self, Show):
##        u'Indicates whether the layer should display its dynamic labels.'
##    ShowLabels = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The definition expression for the layer.'
##        #return Expression
##    def _set(self, Expression):
##        u'The definition expression for the layer.'
##    DefinitionExpression = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether the layer should scale its symbols according to the reference scale.'
##        #return Scale
##    def _set(self, Scale):
##        u'Indicates whether the layer should scale its symbols according to the reference scale.'
##    ScaleSymbols = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether the selection buffer should be displayed.'
##        #return Show
##    def _set(self, Show):
##        u'Indicates whether the selection buffer should be displayed.'
##    ShowSelectionBuffer = property(_get, _set, doc = _set.__doc__)
##
##    def SelectionSymbol(self, Symbol):
##        u'The selection symbol.'
##        #return 
##
##    def _get(self):
##        u'Indicates if the selected set of features is drawn using the SelectionSymbol.'
##        #return setSymbol
##    def _set(self, setSymbol):
##        u'Indicates if the selected set of features is drawn using the SelectionSymbol.'
##    SetSelectionSymbol = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether the layer is visible as defined in the TOC (i.e. marked on).'
##        #return Visible
##    def _set(self, Visible):
##        u'Indicates whether the layer is visible as defined in the TOC (i.e. marked on).'
##    Visible = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Array of selected features.'
##        #return FeatureIDs
##    def _set(self, FeatureIDs):
##        u'Array of selected features.'
##    SelectionFeatures = property(_get, _set, doc = _set.__doc__)
##
##    def SelectionColor(self, Color):
##        u'The selection color (used when SetSelectionSymbol = FALSE).'
##        #return 
##
##    def _get(self):
##        u'The layer ID. This is a unique ID for the layer, and is used to identify the layer in a number of method calls.'
##        #return LayerID
##    def _set(self, LayerID):
##        u'The layer ID. This is a unique ID for the layer, and is used to identify the layer in a number of method calls.'
##    ID = property(_get, _set, doc = _set.__doc__)
##

ILayerDescription2._methods_ = [
    COMMETHOD(['propget', helpstring(u'The id of the source to use when drawing the layer.')], HRESULT, 'SourceID',
              ( ['retval', 'out'], POINTER(BSTR), 'srcID' )),
    COMMETHOD(['propput', helpstring(u'The id of the source to use when drawing the layer.')], HRESULT, 'SourceID',
              ( ['in'], BSTR, 'srcID' )),
    COMMETHOD(['propget', helpstring(u'Symbol used for drawing selection buffer.')], HRESULT, 'SelectionBufferSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IFillSymbol)), 'BufferSymbol' )),
    COMMETHOD(['propputref', helpstring(u'Symbol used for drawing selection buffer.')], HRESULT, 'SelectionBufferSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IFillSymbol), 'BufferSymbol' )),
]
################################################################
## code template for ILayerDescription2 implementation
##class ILayerDescription2_Impl(object):
##    def _get(self):
##        u'The id of the source to use when drawing the layer.'
##        #return srcID
##    def _set(self, srcID):
##        u'The id of the source to use when drawing the layer.'
##    SourceID = property(_get, _set, doc = _set.__doc__)
##
##    def SelectionBufferSymbol(self, BufferSymbol):
##        u'Symbol used for drawing selection buffer.'
##        #return 
##

class RasterFunctionInfo(CoClass):
    u'A raster function info object.'
    _reg_clsid_ = GUID('{4C5DA0CC-93EE-47FC-87AF-5750A6E95976}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IRasterFunctionInfo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that describe a raster function.'
    _iid_ = GUID('{22A9001D-D872-49F2-8600-A212BDC15D82}')
    _idlflags_ = ['oleautomation']
RasterFunctionInfo._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunctionInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]

INetworkSourceRenderer._methods_ = [
    COMMETHOD([helpstring(u'Caches the subset of network sources that can be drawn by this renderer.')], HRESULT, 'BindSources',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.INetworkDataset), 'pNetworkDataset' )),
    COMMETHOD(['propget', helpstring(u'The cached subset of network sources that can be drawn by this renderer.')], HRESULT, 'SourceNames',
              ( ['in'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray)), 'ppSourceNames' )),
    COMMETHOD(['propget', helpstring(u'Indicates if elements of the specified source should be rendered.')], HRESULT, 'IsSourceVisible',
              ( ['in'], BSTR, 'sourceName' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Visible' )),
    COMMETHOD(['propput', helpstring(u'Indicates if elements of the specified source should be rendered.')], HRESULT, 'IsSourceVisible',
              ( ['in'], BSTR, 'sourceName' ),
              ( ['in'], VARIANT_BOOL, 'Visible' )),
    COMMETHOD(['propget', helpstring(u'The query expression used to identify the subset of source features whose elements should be rendered.')], HRESULT, 'SourceQueryExpression',
              ( ['in'], BSTR, 'sourceName' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Expression' )),
    COMMETHOD(['propput', helpstring(u'The query expression used to identify the subset of source features whose elements should be rendered.')], HRESULT, 'SourceQueryExpression',
              ( ['in'], BSTR, 'sourceName' ),
              ( ['in'], BSTR, 'Expression' )),
    COMMETHOD(['propget', helpstring(u'Indicates if only traffic features should be included in the subset of source features whose elements should be rendered.')], HRESULT, 'TrafficElementsOnly',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'TrafficElementsOnly' )),
]
################################################################
## code template for INetworkSourceRenderer implementation
##class INetworkSourceRenderer_Impl(object):
##    def BindSources(self, pNetworkDataset):
##        u'Caches the subset of network sources that can be drawn by this renderer.'
##        #return 
##
##    def _get(self, sourceName):
##        u'Indicates if elements of the specified source should be rendered.'
##        #return Visible
##    def _set(self, sourceName, Visible):
##        u'Indicates if elements of the specified source should be rendered.'
##    IsSourceVisible = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, sourceName):
##        u'The query expression used to identify the subset of source features whose elements should be rendered.'
##        #return Expression
##    def _set(self, sourceName, Expression):
##        u'The query expression used to identify the subset of source features whose elements should be rendered.'
##    SourceQueryExpression = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SourceNames(self, ppSourceNames):
##        u'The cached subset of network sources that can be drawn by this renderer.'
##        #return 
##
##    @property
##    def TrafficElementsOnly(self):
##        u'Indicates if only traffic features should be included in the subset of source features whose elements should be rendered.'
##        #return TrafficElementsOnly
##

class ICompositeGraphicsLayer(IGraphicsLayer):
    _case_insensitive_ = True
    u'Provides access to members that control a collection of graphics layers that behave like single layer.'
    _iid_ = GUID('{9646BB82-9512-11D2-A2F6-080009B6F22B}')
    _idlflags_ = ['oleautomation']
IGraphicsLayer._methods_ = [
    COMMETHOD([helpstring(u'Prepare to display graphic on screen.')], HRESULT, 'Activate',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IScreenDisplay), 'containerScreen' )),
    COMMETHOD([helpstring(u'ActiveView that graphics are displayed on is no longer visible.')], HRESULT, 'Deactivate'),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer that is associated with this graphics layer controls the visibility.')], HRESULT, 'UseAssociatedLayerVisibility',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'useLayer' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the layer that is associated with this graphics layer controls the visibility.')], HRESULT, 'UseAssociatedLayerVisibility',
              ( ['in'], VARIANT_BOOL, 'useLayer' )),
    COMMETHOD(['propget', helpstring(u'Layer that is associated with this graphics layer.')], HRESULT, 'AssociatedLayer',
              ( ['retval', 'out'], POINTER(POINTER(ILayer)), 'Layer' )),
    COMMETHOD(['propputref', helpstring(u'Layer that is associated with this graphics layer.')], HRESULT, 'AssociatedLayer',
              ( ['in'], POINTER(ILayer), 'Layer' )),
]
################################################################
## code template for IGraphicsLayer implementation
##class IGraphicsLayer_Impl(object):
##    def Deactivate(self):
##        u'ActiveView that graphics are displayed on is no longer visible.'
##        #return 
##
##    def _get(self):
##        u'Indicates if the layer that is associated with this graphics layer controls the visibility.'
##        #return useLayer
##    def _set(self, useLayer):
##        u'Indicates if the layer that is associated with this graphics layer controls the visibility.'
##    UseAssociatedLayerVisibility = property(_get, _set, doc = _set.__doc__)
##
##    def Activate(self, containerScreen):
##        u'Prepare to display graphic on screen.'
##        #return 
##
##    def AssociatedLayer(self, Layer):
##        u'Layer that is associated with this graphics layer.'
##        #return 
##

ICompositeGraphicsLayer._methods_ = [
    COMMETHOD([helpstring(u'Adds a layer to the composite graphics layer.')], HRESULT, 'AddLayer',
              ( ['in'], BSTR, 'LayerName' ),
              ( ['in'], POINTER(IFeatureLayer), 'FeatureLayer' ),
              ( ['retval', 'out'], POINTER(POINTER(IGraphicsLayer)), 'GraphicsLayer' )),
    COMMETHOD([helpstring(u'Removes a layer from the composite graphics layer.')], HRESULT, 'DeleteLayer',
              ( ['in'], BSTR, 'LayerName' )),
    COMMETHOD([helpstring(u'Finds a layer in the composite graphics layer.')], HRESULT, 'FindLayer',
              ( ['in'], BSTR, 'LayerName' ),
              ( ['retval', 'out'], POINTER(POINTER(IGraphicsLayer)), 'GraphicsLayer' )),
]
################################################################
## code template for ICompositeGraphicsLayer implementation
##class ICompositeGraphicsLayer_Impl(object):
##    def AddLayer(self, LayerName, FeatureLayer):
##        u'Adds a layer to the composite graphics layer.'
##        #return GraphicsLayer
##
##    def FindLayer(self, LayerName):
##        u'Finds a layer in the composite graphics layer.'
##        #return GraphicsLayer
##
##    def DeleteLayer(self, LayerName):
##        u'Removes a layer from the composite graphics layer.'
##        #return 
##

class BasicOverposter(CoClass):
    u'An engine that places labels for features using conflict detection.'
    _reg_clsid_ = GUID('{3141F2FC-38E2-11D1-8809-080009EC732A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IOverposter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that place labels for features using conflict detection.'
    _iid_ = GUID('{3141F2F5-38E2-11D1-8809-080009EC732A}')
    _idlflags_ = ['oleautomation']
class IOverposter2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that place labels for features using conflict detection.'
    _iid_ = GUID('{FFEC8117-EC4F-4329-BB7D-420453D29EDD}')
    _idlflags_ = ['oleautomation']
class IOverposter3(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that place labels for features using conflict detection.'
    _iid_ = GUID('{75DDDCDE-CA45-49DA-A5C3-7663E2977DD5}')
    _idlflags_ = ['oleautomation']
class IBasicOverposterEvents(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to events that occur on the BasicOverposter.'
    _iid_ = GUID('{C4541861-5A4F-11D2-A2C0-080009B6F22B}')
    _idlflags_ = ['oleautomation']
BasicOverposter._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IOverposter, IOverposter2, IOverposter3, IOverposter4, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IConnectionPointContainer, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]
BasicOverposter._outgoing_interfaces_ = [IBasicOverposterEvents]


# values for enumeration 'esriMapCacheUpdateMode'
esriMapCacheUpdateRecreateMissing = 0
esriMapCacheUpdateRecreateAll = 1
esriMapCacheUpdateDelete = 2
esriMapCacheUpdateMode = c_int # enum
class RasterFunctionInfos(CoClass):
    u'A collection of raster function info objects.'
    _reg_clsid_ = GUID('{5F7008ED-43DE-4357-B281-9E8F66771C71}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
RasterFunctionInfos._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunctionInfos, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]


# values for enumeration 'esriCachedMapServiceType'
esriSingleFusedMapCache = 0
esriIndividualLayerCaches = 1
esriCachedMapServiceType = c_int # enum
class BasicOverposterLayerProperties(CoClass):
    u'Controls the placement of labels or symbols relative to features using conflict detection.'
    _reg_clsid_ = GUID('{EE535289-41C9-11D1-880A-080009EC732A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IBasicOverposterLayerProperties2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the maximum distance labels/symbols are placed away from their respective features.'
    _iid_ = GUID('{6CC4FACB-5F13-418A-BF24-D2C61D56FE66}')
    _idlflags_ = ['oleautomation']
class IBasicOverposterLayerProperties3(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the placement of labels relative to features using conflict detection.'
    _iid_ = GUID('{7BDBB1EC-E951-4058-8140-D5CD88556613}')
    _idlflags_ = ['oleautomation']
class IBasicOverposterLayerProperties4(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the placement of labels relative to features using conflict detection.'
    _iid_ = GUID('{F64B3A44-C14C-4B12-994F-AE72196EEC56}')
    _idlflags_ = ['oleautomation']
BasicOverposterLayerProperties._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IBasicOverposterLayerProperties, IBasicOverposterLayerProperties2, IBasicOverposterLayerProperties3, IBasicOverposterLayerProperties4, IOverposterLayerProperties, IOverposterLayerProperties2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

IRasterStretch2._methods_ = [
    COMMETHOD(['propput', helpstring(u'The current stretch type.')], HRESULT, 'StretchType',
              ( ['in'], esriRasterStretchTypesEnum, 'stretch' )),
    COMMETHOD(['propget', helpstring(u'The current stretch type.')], HRESULT, 'StretchType',
              ( ['retval', 'out'], POINTER(esriRasterStretchTypesEnum), 'stretch' )),
    COMMETHOD(['propput', helpstring(u'The standard deviation parameter for the stretch renderer.')], HRESULT, 'StandardDeviationsParam',
              ( ['in'], c_double, 'param' )),
    COMMETHOD(['propget', helpstring(u'The standard deviation parameter for the stretch renderer.')], HRESULT, 'StandardDeviationsParam',
              ( ['retval', 'out'], POINTER(c_double), 'param' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the stretch is inverted.')], HRESULT, 'Invert',
              ( ['in'], VARIANT_BOOL, 'pInvert' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the stretch is inverted.')], HRESULT, 'Invert',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pInvert' )),
    COMMETHOD(['propput', helpstring(u'Indicates if a background value is being used.')], HRESULT, 'Background',
              ( ['in'], VARIANT_BOOL, 'b' )),
    COMMETHOD(['propget', helpstring(u'Indicates if a background value is being used.')], HRESULT, 'Background',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'b' )),
    COMMETHOD(['propget', helpstring(u'The list of background value(s).')], HRESULT, 'BackgroundValue',
              ( ['retval', 'out'], POINTER(VARIANT), 'Background' )),
    COMMETHOD(['propput', helpstring(u'The list of background value(s).')], HRESULT, 'BackgroundValue',
              ( ['in'], VARIANT, 'Background' )),
    COMMETHOD(['propget', helpstring(u'The color of background.')], HRESULT, 'BackgroundColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'ppColor' )),
    COMMETHOD(['propputref', helpstring(u'The color of background.')], HRESULT, 'BackgroundColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'ppColor' )),
    COMMETHOD(['propput', helpstring(u'The current stretch statistics type.')], HRESULT, 'StretchStatsType',
              ( ['in'], esriRasterStretchStatsTypeEnum, 'stats' )),
    COMMETHOD(['propget', helpstring(u'The current stretch statistics type.')], HRESULT, 'StretchStatsType',
              ( ['retval', 'out'], POINTER(esriRasterStretchStatsTypeEnum), 'stats' )),
    COMMETHOD(['propputref', helpstring(u'The global raster stretch statistics.')], HRESULT, 'StretchStats',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'ppRGBStats' )),
    COMMETHOD(['propget', helpstring(u'The global raster stretch statistics.')], HRESULT, 'StretchStats',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'ppRGBStats' )),
    COMMETHOD(['propputref', helpstring(u'The statistics for histogram specification stretch.')], HRESULT, 'SpecificationHistogram',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'pRGBStats' )),
    COMMETHOD(['propget', helpstring(u'The statistics for histogram specification stretch.')], HRESULT, 'SpecificationHistogram',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'pRGBStats' )),
]
################################################################
## code template for IRasterStretch2 implementation
##class IRasterStretch2_Impl(object):
##    @property
##    def StretchStats(self, ppRGBStats):
##        u'The global raster stretch statistics.'
##        #return 
##
##    def _get(self):
##        u'The standard deviation parameter for the stretch renderer.'
##        #return param
##    def _set(self, param):
##        u'The standard deviation parameter for the stretch renderer.'
##    StandardDeviationsParam = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if a background value is being used.'
##        #return b
##    def _set(self, b):
##        u'Indicates if a background value is being used.'
##    Background = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the stretch is inverted.'
##        #return pInvert
##    def _set(self, pInvert):
##        u'Indicates if the stretch is inverted.'
##    Invert = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SpecificationHistogram(self, pRGBStats):
##        u'The statistics for histogram specification stretch.'
##        #return 
##
##    def _get(self):
##        u'The list of background value(s).'
##        #return Background
##    def _set(self, Background):
##        u'The list of background value(s).'
##    BackgroundValue = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The current stretch statistics type.'
##        #return stats
##    def _set(self, stats):
##        u'The current stretch statistics type.'
##    StretchStatsType = property(_get, _set, doc = _set.__doc__)
##
##    def BackgroundColor(self, ppColor):
##        u'The color of background.'
##        #return 
##
##    def _get(self):
##        u'The current stretch type.'
##        #return stretch
##    def _set(self, stretch):
##        u'The current stretch type.'
##    StretchType = property(_get, _set, doc = _set.__doc__)
##

class LineLabelPosition(CoClass):
    u'Controls the relative positions of line labels.'
    _reg_clsid_ = GUID('{2442958C-D711-11D2-9F41-00C04F6BC6A5}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class ILineLabelPosition(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the relative position of line labels.'
    _iid_ = GUID('{2442958B-D711-11D2-9F41-00C04F6BC6A5}')
    _idlflags_ = ['oleautomation']
LineLabelPosition._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILineLabelPosition, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class NetworkDirtyAreaRenderer(CoClass):
    u'A renderer used to display network dataset dirty areas.'
    _reg_clsid_ = GUID('{3D8A6168-4B05-44C9-92C0-5640B40E6CBE}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
NetworkDirtyAreaRenderer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ISimpleNetworkRenderer, INetworkRenderer, ILegendInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySupport]

class LayerCacheInfo(CoClass):
    u"The layer cache info object provides information about a layer's cache in a cached map service."
    _reg_clsid_ = GUID('{147FE50C-BE24-4B85-8CDD-57EA2D3846AE}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class ILayerCacheInfo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to available properties of a layer cache info object.'
    _iid_ = GUID('{2B26EB3E-0422-43DF-8CE9-CD90317C2605}')
    _idlflags_ = ['oleautomation']
LayerCacheInfo._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILayerCacheInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersionSupportGEN, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]


# values for enumeration 'esriCacheExporterMode'
esriMapCacheExport = 0
esriMapCacheImport = 1
esriCacheExporterMode = c_int # enum
class LineLabelPlacementPriorities(CoClass):
    u'Controls placement position priorities for line labels.'
    _reg_clsid_ = GUID('{261A4377-D9D5-11D2-A806-CC9F870BCD5A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class ILineLabelPlacementPriorities(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control placement position priorities for line labels.'
    _iid_ = GUID('{261A4376-D9D5-11D2-A806-CC9F870BCD5A}')
    _idlflags_ = ['oleautomation']
LineLabelPlacementPriorities._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILineLabelPlacementPriorities, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]


# values for enumeration 'esriHorzPosEnum'
esriBefore = 0
esriLeft = 1
esriCenter = 2
esriRight = 3
esriAfter = 4
esriHorzPosEnum = c_int # enum

# values for enumeration 'esriMappingMsgCodeEnum'
esriMappingMsgCode_LayerDrawBegin = 103000
esriMappingMsgCode_LayerDrawEnd = 103001
esriMappingMsgCode_GroupLayerDrawBegin = 103002
esriMappingMsgCode_GroupLayerDrawEnd = 103003
esriMappingMsgCode_GeographyDrawBegin = 103004
esriMappingMsgCode_GeographyDrawEnd = 103005
esriMappingMsgCode_AnnotationDrawBegin = 103006
esriMappingMsgCode_AnnotationDrawEnd = 103007
esriMappingMsgCode_SelectionDrawBegin = 103008
esriMappingMsgCode_SelectionDrawEnd = 103009
esriMappingMsgCode_GraphicSelectionDrawBegin = 103010
esriMappingMsgCode_GraphicSelectionDrawEnd = 103011
esriMappingMsgCode_CustomDrawBegin = 103012
esriMappingMsgCode_CustomDrawEnd = 103013
esriMappingMsgCode_GraphicDrawBegin = 103014
esriMappingMsgCode_GraphicDrawEnd = 103015
esriMappingMsgCode_LabelingBegin = 103016
esriMappingMsgCode_LabelingEnd = 103017
esriMappingMsgCode_LabelingLayers = 103018
esriMappingMsgCode_FeatureCount = 103019
esriMappingMsgCode_GraphicCount = 103020
esriMappingMsgCode_ExecutingQuery = 103021
esriMappingMsgCode_DrawingAsMaskingLayer = 103022
esriMappingMsgCode_SymbolDrawTime = 103023
esriMappingMsgCode_Rendering = 103024
esriMappingMsgCode_LayerDrawingError = 103800
esriMappingMsgCodeEnum = c_int # enum

# values for enumeration 'esriMapCacheStorageFormat'
esriMapCacheStorageModeCompact = 0
esriMapCacheStorageModeExploded = 1
esriMapCacheStorageFormat = c_int # enum

# values for enumeration 'esriCadastralFabricRenderer'
esriCFRControlPoints = 0
esriCFRLinePoints = 1
esriCFRPoints = 2
esriCFRLines = 3
esriCFRParcels = 4
esriCadastralFabricRenderer = c_int # enum
class NetworkTrafficRenderer(CoClass):
    u'A renderer used to display network dataset traffic.'
    _reg_clsid_ = GUID('{179A2118-F469-4A0C-A33D-A40228A93A13}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class INetworkTrafficRenderer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control drawing traffic along a network dataset.'
    _iid_ = GUID('{9DB10A1F-C9A6-473F-9AC7-475DD02BAA2E}')
    _idlflags_ = ['oleautomation']
class IClassBreaksRenderer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a renderer which is used to draw graduated color (choropleth) and graduated symbol maps.'
    _iid_ = GUID('{AE5F7EA1-8B48-11D0-8356-080009B996CC}')
    _idlflags_ = ['oleautomation']
NetworkTrafficRenderer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, INetworkTrafficRenderer, IClassBreaksRenderer, INetworkRenderer, ILegendInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySupport, INetworkEdgeRenderer, INetworkEdgeRenderer2, INetworkSourceRenderer]

class LayerCacheInfos(CoClass):
    u'A collection of LayerCacheInfo objects.'
    _reg_clsid_ = GUID('{A121731C-8B62-4D15-8E0C-8E10B49BB9AB}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class ILayerCacheInfos(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the LayerCacheInfo Collection Interface.'
    _iid_ = GUID('{8533C65D-9AD3-4F5B-80B9-E0A50199DF2D}')
    _idlflags_ = ['oleautomation']
LayerCacheInfos._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILayerCacheInfos, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class FeatureLayerDrawingDescriptionFactory(CoClass):
    u'Feature layer drawing description factory.'
    _reg_clsid_ = GUID('{43A60125-807F-4734-B298-B0F161D1189E}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class ILayerDrawingDescriptionFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the FeatureLayer drawing options.'
    _iid_ = GUID('{40F79ABE-7492-46B4-A9B5-7146FDDC01E8}')
    _idlflags_ = ['oleautomation']
FeatureLayerDrawingDescriptionFactory._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILayerDrawingDescriptionFactory]

class ImageCooker(CoClass):
    u'ImageCooker Class.'
    _reg_clsid_ = GUID('{5627A2B0-ABAD-4DE2-A375-3F8AC39C1514}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IImageCooker(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'AIS cache reader object.'
    _iid_ = GUID('{C254D4A2-97B2-469E-B463-F51811F4B4CF}')
    _idlflags_ = ['oleautomation']
class IMapCooker(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that controls a map cache generator.'
    _iid_ = GUID('{842BA25B-FE2F-41A4-8867-B521951A2B34}')
    _idlflags_ = ['oleautomation']
class IMapCooker2(IMapCooker):
    _case_insensitive_ = True
    u'Provides access to more members that controls a map cache generator.'
    _iid_ = GUID('{11F3E86E-9351-4226-A1E8-1A1338A9DCF2}')
    _idlflags_ = ['oleautomation']
ImageCooker._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IImageCooker, IMapCooker, IMapCooker2]

class IMapServerRelationships(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Map Server Relationships Interface.'
    _iid_ = GUID('{DF17E39A-1358-485B-B88C-BF7BB374818E}')
    _idlflags_ = ['oleautomation']
IMapServerRow._methods_ = [
    COMMETHOD(['propget', helpstring(u'The value of the primary display field.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propget', helpstring(u"A set of name-value pairs for the row's field names and values.")], HRESULT, 'PropertySet',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet)), 'props' )),
    COMMETHOD(['propget', helpstring(u'The related rows (relationships).')], HRESULT, 'RelatedRows',
              ( ['retval', 'out'], POINTER(POINTER(IMapServerRelationships)), 'relationships' )),
]
################################################################
## code template for IMapServerRow implementation
##class IMapServerRow_Impl(object):
##    @property
##    def RelatedRows(self):
##        u'The related rows (relationships).'
##        #return relationships
##
##    @property
##    def Name(self):
##        u'The value of the primary display field.'
##        #return Name
##
##    @property
##    def PropertySet(self):
##        u"A set of name-value pairs for the row's field names and values."
##        #return props
##

IMapServerRow2._methods_ = [
    COMMETHOD(['propget', helpstring(u'The Feature ID of the identified object.')], HRESULT, 'FeatureId',
              ( ['retval', 'out'], POINTER(c_int), 'FeatureId' )),
]
################################################################
## code template for IMapServerRow2 implementation
##class IMapServerRow2_Impl(object):
##    @property
##    def FeatureId(self):
##        u'The Feature ID of the identified object.'
##        #return FeatureId
##

class IOverview(IMapSurround):
    _case_insensitive_ = True
    u'Provides access to members that control the overview.'
    _iid_ = GUID('{7A3F91F2-B9E3-11D1-8756-0000F8751720}')
    _idlflags_ = ['oleautomation']
IOverview._methods_ = [
    COMMETHOD(['propget', helpstring(u'Fill symbol used to display the area of interest.')], HRESULT, 'AoiFillSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IFillSymbol)), 'Symbol' )),
    COMMETHOD(['propput', helpstring(u'Fill symbol used to display the area of interest.')], HRESULT, 'AoiFillSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IFillSymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'Overlay grid layer for the overview.')], HRESULT, 'OverlayGridLayer',
              ( ['retval', 'out'], POINTER(POINTER(ILayer)), 'Layer' )),
    COMMETHOD(['propput', helpstring(u'Overlay grid layer for the overview.')], HRESULT, 'OverlayGridLayer',
              ( ['in'], POINTER(ILayer), 'Layer' )),
    COMMETHOD(['propget', helpstring(u"Text symbol used to label overlay grid cells with the layer's display field.")], HRESULT, 'OverlayGridLabelSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol)), 'Symbol' )),
    COMMETHOD(['propput', helpstring(u"Text symbol used to label overlay grid cells with the layer's display field.")], HRESULT, 'OverlayGridLabelSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol), 'Symbol' )),
    COMMETHOD([helpstring(u'Sets the extent of the associated map to the specified overlay grid cell.')], HRESULT, 'SetOverlayGridCell',
              ( ['in'], c_int, 'gridLayerFid' )),
    COMMETHOD([helpstring(u"Updates the display of the overview based upon the associated map's current settings.")], HRESULT, 'UpdateDisplay',
              ( ['in'], c_int, 'windowWidth' ),
              ( ['in'], c_int, 'windowHeight' )),
]
################################################################
## code template for IOverview implementation
##class IOverview_Impl(object):
##    def _get(self):
##        u'Overlay grid layer for the overview.'
##        #return Layer
##    def _set(self, Layer):
##        u'Overlay grid layer for the overview.'
##    OverlayGridLayer = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u"Text symbol used to label overlay grid cells with the layer's display field."
##        #return Symbol
##    def _set(self, Symbol):
##        u"Text symbol used to label overlay grid cells with the layer's display field."
##    OverlayGridLabelSymbol = property(_get, _set, doc = _set.__doc__)
##
##    def UpdateDisplay(self, windowWidth, windowHeight):
##        u"Updates the display of the overview based upon the associated map's current settings."
##        #return 
##
##    def SetOverlayGridCell(self, gridLayerFid):
##        u'Sets the extent of the associated map to the specified overlay grid cell.'
##        #return 
##
##    def _get(self):
##        u'Fill symbol used to display the area of interest.'
##        #return Symbol
##    def _set(self, Symbol):
##        u'Fill symbol used to display the area of interest.'
##    AoiFillSymbol = property(_get, _set, doc = _set.__doc__)
##

class IAnnoClass(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the annotation class.'
    _iid_ = GUID('{4D10C41B-D7E0-11D2-9F41-00C04F6BC6A5}')
    _idlflags_ = ['oleautomation']
IAnnoClass._methods_ = [
    COMMETHOD(['propget', helpstring(u'The feature class.')], HRESULT, 'FeatureClass',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClass)), 'FeatureClass' )),
    COMMETHOD(['propget', helpstring(u'The labeling properties annotation classes.')], HRESULT, 'AnnoProperties',
              ( ['retval', 'out'], POINTER(POINTER(IAnnotateLayerPropertiesCollection)), 'AnnoProperties' )),
    COMMETHOD(['propget', helpstring(u'The symbol associated with the given ID.')], HRESULT, 'Symbol',
              ( ['in'], c_int, 'SymbolID' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol)), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'The reference scale.')], HRESULT, 'ReferenceScale',
              ( ['retval', 'out'], POINTER(c_double), 'ReferenceScale' )),
    COMMETHOD(['propget', helpstring(u'The units of the reference scale.')], HRESULT, 'ReferenceScaleUnits',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits), 'Units' )),
    COMMETHOD(['propget', helpstring(u'The symbol collection.')], HRESULT, 'SymbolCollection',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbolCollection)), 'ppSymbolColl' )),
    COMMETHOD(['propget', helpstring(u'The version of the annotation class.')], HRESULT, 'Version',
              ( ['retval', 'out'], POINTER(c_short), 'Version' )),
    COMMETHOD([helpstring(u'Draws the given annotation feature.')], HRESULT, 'Draw',
              ( ['in'], POINTER(IAnnotationFeature), 'annoFeature' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'The element field index.')], HRESULT, 'ElementFieldIndex',
              ( ['retval', 'out'], POINTER(c_int), 'ElementFieldIndex' )),
    COMMETHOD(['propget', helpstring(u'The feature ID field index.')], HRESULT, 'FeatureIDFieldIndex',
              ( ['retval', 'out'], POINTER(c_int), 'FeatureIDFieldIndex' )),
]
################################################################
## code template for IAnnoClass implementation
##class IAnnoClass_Impl(object):
##    @property
##    def ElementFieldIndex(self):
##        u'The element field index.'
##        #return ElementFieldIndex
##
##    def Draw(self, annoFeature, Display, Symbol):
##        u'Draws the given annotation feature.'
##        #return 
##
##    @property
##    def Version(self):
##        u'The version of the annotation class.'
##        #return Version
##
##    @property
##    def AnnoProperties(self):
##        u'The labeling properties annotation classes.'
##        #return AnnoProperties
##
##    @property
##    def Symbol(self, SymbolID):
##        u'The symbol associated with the given ID.'
##        #return Symbol
##
##    @property
##    def FeatureIDFieldIndex(self):
##        u'The feature ID field index.'
##        #return FeatureIDFieldIndex
##
##    @property
##    def ReferenceScaleUnits(self):
##        u'The units of the reference scale.'
##        #return Units
##
##    @property
##    def FeatureClass(self):
##        u'The feature class.'
##        #return FeatureClass
##
##    @property
##    def SymbolCollection(self):
##        u'The symbol collection.'
##        #return ppSymbolColl
##
##    @property
##    def ReferenceScale(self):
##        u'The reference scale.'
##        #return ReferenceScale
##


# values for enumeration 'esriMapTimeExtentOption'
esriMapTimeExtentAllData = 0
esriMapTimeExtentAllVisibleLayers = 1
esriMapTimeExtentUndefined = 2
esriMapTimeExtentSpecifiedLayer = 3
esriMapTimeExtentOption = c_int # enum
class IMxdServerQuery(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to functionality that allows the client to query features on the map.'
    _iid_ = GUID('{1E90974D-6D47-480D-9AA9-D8F582757226}')
    _idlflags_ = ['oleautomation']
class IIdentifyObj(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control feature identification for a layer.'
    _iid_ = GUID('{3947C520-D34A-11D2-8CD0-00C04F5B951E}')
    _idlflags_ = ['oleautomation']
IMxdServerQuery._methods_ = [
    COMMETHOD([helpstring(u"Returns a feature cursor for the specified layer based on the given array of query filters.  If there is more than one query filter in the array, they are 'ANDed' together.")], HRESULT, 'QueryFeatures',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], c_int, 'LayerID' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'QueryFilters' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureCursor)), 'features' )),
    COMMETHOD([helpstring(u"Returns an array of 'identify objects' (that support the IIdentifyObj interface) at the given location.  If layerID is equal to -1, the top-most visible layer with any results is used.  If layerID is equal to -2, all visible layers will be queried.")], HRESULT, 'Identify',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], c_int, 'LayerID' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'Shape' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'identifyObjects' )),
    COMMETHOD(['propget', helpstring(u"An array of 'identify objects' that are related to the specified identify object.")], HRESULT, 'RelatedIdentifyObjects',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], POINTER(IIdentifyObj), 'IdentifyObject' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'relatedObjects' )),
    COMMETHOD([helpstring(u'Computes the scale of the specified map, at the given map extent, for an image with the given width, specified in pixels.')], HRESULT, 'ComputeScale',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], c_int, 'imageWidthPixels' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'Extent' ),
              ( ['retval', 'out'], POINTER(c_double), 'Scale' )),
    COMMETHOD([helpstring(u'Computes the distance between two points on the specified map.  The result is in the map units of the specified map.')], HRESULT, 'ComputeDistance',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'fromPoint' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'toPoint' ),
              ( ['retval', 'out'], POINTER(c_double), 'Distance' )),
    COMMETHOD([helpstring(u"Returns an array of 'find objects' (that implement the IFindObject interface) that contain the given search string.  If layerID is equal to -1, all layers are searched.")], HRESULT, 'Find',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], BSTR, 'findString' ),
              ( ['in'], c_int, 'LayerID' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'findObjects' )),
    COMMETHOD([helpstring(u'Returns a feature cursor for the specified layer based on the input parameters for the purpose of selecting based on another layer.')], HRESULT, 'QueryByLayer',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], c_int, 'targetLayerID' ),
              ( ['in'], c_int, 'selectionLayerID' ),
              ( ['in'], esriLayerSelectionMethod, 'selectionMethod' ),
              ( ['in'], VARIANT_BOOL, 'useSelected' ),
              ( ['in'], c_double, 'BufferDistance' ),
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits, 'bufferDistanceUnits' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureCursor)), 'features' )),
]
################################################################
## code template for IMxdServerQuery implementation
##class IMxdServerQuery_Impl(object):
##    def QueryByLayer(self, MapName, targetLayerID, selectionLayerID, selectionMethod, useSelected, BufferDistance, bufferDistanceUnits):
##        u'Returns a feature cursor for the specified layer based on the input parameters for the purpose of selecting based on another layer.'
##        #return features
##
##    @property
##    def RelatedIdentifyObjects(self, MapName, IdentifyObject):
##        u"An array of 'identify objects' that are related to the specified identify object."
##        #return relatedObjects
##
##    def ComputeDistance(self, MapName, fromPoint, toPoint):
##        u'Computes the distance between two points on the specified map.  The result is in the map units of the specified map.'
##        #return Distance
##
##    def ComputeScale(self, MapName, imageWidthPixels, Extent):
##        u'Computes the scale of the specified map, at the given map extent, for an image with the given width, specified in pixels.'
##        #return Scale
##
##    def Identify(self, MapName, LayerID, Shape):
##        u"Returns an array of 'identify objects' (that support the IIdentifyObj interface) at the given location.  If layerID is equal to -1, the top-most visible layer with any results is used.  If layerID is equal to -2, all visible layers will be queried."
##        #return identifyObjects
##
##    def QueryFeatures(self, MapName, LayerID, QueryFilters):
##        u"Returns a feature cursor for the specified layer based on the given array of query filters.  If there is more than one query filter in the array, they are 'ANDed' together."
##        #return features
##
##    def Find(self, MapName, findString, LayerID):
##        u"Returns an array of 'find objects' (that implement the IFindObject interface) that contain the given search string.  If layerID is equal to -1, all layers are searched."
##        #return findObjects
##

class PointPlacementPriorities(CoClass):
    u'Controls placement position priorities for point labels.'
    _reg_clsid_ = GUID('{261A4372-D9D5-11D2-A806-CC9F870BCD5A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
PointPlacementPriorities._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IPointPlacementPriorities, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]


# values for enumeration 'esriCadastralParcelType'
esriCadastralParcelLocked = 1
esriCadastralParcelUnlocked = 2
esriCadastralParcelType = c_int # enum
class RepresentationRenderer(CoClass):
    u'A renderer that draws features using representation information stored in the layer\u2019s data source.'
    _reg_clsid_ = GUID('{18DB8DBB-F658-4C9C-BA71-175022E9ECE3}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IRepresentationRenderer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties and methods of a RepresentationRenderer.'
    _iid_ = GUID('{C2E6E3EA-6057-4DAF-9D54-A84B2A589307}')
    _idlflags_ = ['oleautomation']
class IRendererClasses(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that provides the information of layer annotation classes.'
    _iid_ = GUID('{3F25CC56-CC66-4930-A5FD-BC981601CEA6}')
    _idlflags_ = ['oleautomation']
class IDataExclusion2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the exclusion of data values from a renderer.'
    _iid_ = GUID('{765A9A92-F6FA-4501-A888-A793AD33E023}')
    _idlflags_ = ['oleautomation']
RepresentationRenderer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IFeatureRenderer, IRepresentationRenderer, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, IRendererClasses, ILegendInfo, ILevelRenderer, IDataLayer, ILayerSymbologyExtents, IIdentify, ILookupSymbol, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersionSupportGEN, IExportSupport, IDataExclusion2, ILookupLegendClass]

class ImageView(CoClass):
    u'An image view object.'
    _reg_clsid_ = GUID('{812BAE42-7F5F-4C04-9100-6E28E5007073}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IImageView(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control an image (service) view.'
    _iid_ = GUID('{26925225-C546-43E1-A89D-AB27CC26E8FB}')
    _idlflags_ = ['oleautomation']
ImageView._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IImageView, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]

IRelationshipClassCollection._methods_ = [
    COMMETHOD(['propget', helpstring(u'The memory relationship classes.')], HRESULT, 'RelationshipClasses',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IEnumRelationshipClass)), 'RelationshipClasses' )),
    COMMETHOD([helpstring(u'Finds all relationship classes in the collection that reference the given object class in the specified role.')], HRESULT, 'FindRelationshipClasses',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IObjectClass), 'objectClass' ),
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriRelRole, 'Role' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IEnumRelationshipClass)), 'RelationshipClasses' )),
]
################################################################
## code template for IRelationshipClassCollection implementation
##class IRelationshipClassCollection_Impl(object):
##    @property
##    def RelationshipClasses(self):
##        u'The memory relationship classes.'
##        #return RelationshipClasses
##
##    def FindRelationshipClasses(self, objectClass, Role):
##        u'Finds all relationship classes in the collection that reference the given object class in the specified role.'
##        #return RelationshipClasses
##

ILabelStyle2._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The text symbol used to draw the label.')], HRESULT, 'Symbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol), 'TextSymbol' )),
    COMMETHOD(['propget', helpstring(u'The text symbol used to draw the label.')], HRESULT, 'Symbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol)), 'TextSymbol' )),
    COMMETHOD(['propputref', helpstring(u'The overposter properties, which specify how labels are placed relative to features.')], HRESULT, 'BasicOverposterLayerProperties',
              ( ['in'], POINTER(IBasicOverposterLayerProperties), 'props' )),
    COMMETHOD(['propget', helpstring(u'The overposter properties, which specify how labels are placed relative to features.')], HRESULT, 'BasicOverposterLayerProperties',
              ( ['retval', 'out'], POINTER(POINTER(IBasicOverposterLayerProperties)), 'props' )),
    COMMETHOD(['propputref', helpstring(u'The overposter properties, which specify how labels are placed relative to features.')], HRESULT, 'OverposterLayerProperties',
              ( ['in'], POINTER(IOverposterLayerProperties), 'props' )),
    COMMETHOD(['propget', helpstring(u'The overposter properties, which specify how labels are placed relative to features.')], HRESULT, 'OverposterLayerProperties',
              ( ['retval', 'out'], POINTER(POINTER(IOverposterLayerProperties)), 'props' )),
]
################################################################
## code template for ILabelStyle2 implementation
##class ILabelStyle2_Impl(object):
##    @property
##    def Symbol(self, TextSymbol):
##        u'The text symbol used to draw the label.'
##        #return 
##
##    @property
##    def BasicOverposterLayerProperties(self, props):
##        u'The overposter properties, which specify how labels are placed relative to features.'
##        #return 
##
##    @property
##    def OverposterLayerProperties(self, props):
##        u'The overposter properties, which specify how labels are placed relative to features.'
##        #return 
##

class BasicOverposterProperties(CoClass):
    u'Basic label placement control properties.'
    _reg_clsid_ = GUID('{E0C73D56-6C88-498C-B77C-78606E688C97}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IOverposterOptions(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to overposter options.'
    _iid_ = GUID('{8112F1A9-0ECD-4E5E-977C-80B358A574B9}')
    _idlflags_ = ['oleautomation']
BasicOverposterProperties._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IOverposterProperties, IOverposterOptions, IOverposterOptions2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class RasterLayerDrawingDescriptionFactory(CoClass):
    u'Raster layer drawing description factory.'
    _reg_clsid_ = GUID('{1093BCF4-4B1B-484D-B385-A9FEBE178508}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
RasterLayerDrawingDescriptionFactory._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILayerDrawingDescriptionFactory]

class ImageServerName(CoClass):
    u'The Image Server name object.'
    _reg_clsid_ = GUID('{BD552FEC-FF0B-4BF1-8C46-B6886E71A47C}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IImageServerName(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a Image Server name.'
    _iid_ = GUID('{5338BCB0-EDC4-4391-816D-57EFCD386245}')
    _idlflags_ = []
ImageServerName._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IImageServerName, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

class RasterLayerDrawingDescription(CoClass):
    u'Raster layer drawing description.'
    _reg_clsid_ = GUID('{426F6A04-908C-4749-9AD8-AFF17221C581}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IRasterLayerDrawingDescription(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the RasterLayer drawing options.'
    _iid_ = GUID('{2E8FC0CB-FEFE-4B85-829F-EF4DFEBF8E1A}')
    _idlflags_ = ['oleautomation']
class ILayerDrawingDescription(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the type of the object to be a layer drawing description.'
    _iid_ = GUID('{C9E309F7-7B98-4836-BE20-D20F4868BAC4}')
    _idlflags_ = ['oleautomation']
RasterLayerDrawingDescription._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterLayerDrawingDescription, ILayerDrawingDescription, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, ILayerEffects]

IGraphicFeatureServer2._methods_ = [
    COMMETHOD([], HRESULT, 'Add2',
              ( ['in'], BSTR, 'gdbVersion' ),
              ( ['in'], c_int, 'LayerOrTableID' ),
              ( ['in'], POINTER(IDataObjects), 'DataObjects' ),
              ( ['in'], VARIANT_BOOL, 'rollbackOnFailure' ),
              ( ['retval', 'out'], POINTER(POINTER(IEditResults)), 'EditResults' )),
    COMMETHOD([], HRESULT, 'AddAttachments2',
              ( ['in'], BSTR, 'gdbVersion' ),
              ( ['in'], c_int, 'LayerOrTableID' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IAttachmentDataArray), 'attachmentDataArray' ),
              ( ['in'], VARIANT_BOOL, 'rollbackOnFailure' ),
              ( ['retval', 'out'], POINTER(POINTER(IEditResults)), 'EditResults' )),
    COMMETHOD([], HRESULT, 'ApplyEdits2',
              ( ['in'], BSTR, 'gdbVersion' ),
              ( ['in'], POINTER(ITableEdits), 'TableEdits' ),
              ( ['in'], VARIANT_BOOL, 'rollbackOnFailure' ),
              ( ['retval', 'out'], POINTER(POINTER(ITableEditResults)), 'TableEditResults' )),
    COMMETHOD([], HRESULT, 'Delete2',
              ( ['in'], BSTR, 'gdbVersion' ),
              ( ['in'], c_int, 'LayerOrTableID' ),
              ( ['in'], BSTR, 'DefinitionExpression' ),
              ( ['in'], VARIANT_BOOL, 'rollbackOnFailure' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'queryFilter' )),
    COMMETHOD([], HRESULT, 'DeleteAttachments2',
              ( ['in'], BSTR, 'gdbVersion' ),
              ( ['in'], c_int, 'LayerOrTableID' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'idsOfAttachmentsToDelete' ),
              ( ['in'], VARIANT_BOOL, 'rollbackOnFailure' ),
              ( ['retval', 'out'], POINTER(POINTER(IEditResults)), 'EditResults' )),
    COMMETHOD([], HRESULT, 'DeleteByID2',
              ( ['in'], BSTR, 'gdbVersion' ),
              ( ['in'], c_int, 'LayerOrTableID' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'idsOfObjectsToDelete' ),
              ( ['in'], VARIANT_BOOL, 'rollbackOnFailure' ),
              ( ['retval', 'out'], POINTER(POINTER(IEditResults)), 'EditResults' )),
    COMMETHOD([], HRESULT, 'GetCount2',
              ( ['in'], BSTR, 'gdbVersion' ),
              ( ['in'], c_int, 'LayerOrTableID' ),
              ( ['in'], BSTR, 'DefinitionExpression' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'queryFilter' ),
              ( ['retval', 'out'], POINTER(c_int), 'numObjects' )),
    COMMETHOD([], HRESULT, 'GetServerInfo',
              ( ['retval', 'out'], POINTER(POINTER(IFeatureServerInfo)), 'FeatureServerInfo' )),
    COMMETHOD([], HRESULT, 'GetServiceObjectCount2',
              ( ['in'], BSTR, 'gdbVersion' ),
              ( ['in'], POINTER(IGFSTableDescriptions), 'layerOrTableDescriptions' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'Geometry' ),
              ( ['retval', 'out'], POINTER(c_int), 'numObjects' )),
    COMMETHOD([], HRESULT, 'Query2',
              ( ['in'], BSTR, 'gdbVersion' ),
              ( ['in'], c_int, 'LayerOrTableID' ),
              ( ['in'], BSTR, 'DefinitionExpression' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'queryFilter' ),
              ( ['in'], c_double, 'maximumAllowableOffset' ),
              ( ['in'], POINTER(IServiceDataOptions), 'ServiceDataOptions' ),
              ( ['retval', 'out'], POINTER(POINTER(IServiceData)), 'ServiceData' )),
    COMMETHOD([], HRESULT, 'QueryAttachmentData2',
              ( ['in'], BSTR, 'gdbVersion' ),
              ( ['in'], c_int, 'LayerOrTableID' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'attachmentIDs' ),
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriTransportType, 'TransportType' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IAttachmentDataArray)), 'attachmentData' )),
    COMMETHOD([], HRESULT, 'QueryAttachmentInfos2',
              ( ['in'], BSTR, 'gdbVersion' ),
              ( ['in'], c_int, 'LayerOrTableID' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'objectIDs' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IAttachmentInfoArray)), 'attachmentInfos' )),
    COMMETHOD([], HRESULT, 'QueryFromService2',
              ( ['in'], BSTR, 'gdbVersion' ),
              ( ['in'], POINTER(IGFSTableDescriptions), 'layerOrTableDescriptions' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'Geometry' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'outSR' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITimeReference), 'outTR' ),
              ( ['in'], c_double, 'maximumAllowableOffset' ),
              ( ['in'], POINTER(IServiceDataOptions), 'ServiceDataOptions' ),
              ( ['retval', 'out'], POINTER(POINTER(IServiceData)), 'ServiceData' )),
    COMMETHOD([], HRESULT, 'QueryIDs2',
              ( ['in'], BSTR, 'gdbVersion' ),
              ( ['in'], c_int, 'LayerOrTableID' ),
              ( ['in'], BSTR, 'DefinitionExpression' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'queryFilter' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray)), 'objectIDs' )),
    COMMETHOD([helpstring(u'Returns the html as text that can be used in popups.')], HRESULT, 'QueryHTMLPopups2',
              ( ['in'], BSTR, 'gdbVersion' ),
              ( ['in'], c_int, 'LayerOrTableID' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'objectIDs' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray)), 'HTMLTextArray' )),
    COMMETHOD([], HRESULT, 'QueryRelatedObjects2',
              ( ['in'], BSTR, 'gdbVersion' ),
              ( ['in'], c_int, 'sourceLayerOrTableID' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'objectIDsInSource' ),
              ( ['in'], c_int, 'RelationshipID' ),
              ( ['in'], BSTR, 'targetDefinitionExpression' ),
              ( ['in'], BSTR, 'targetTableProps' ),
              ( ['in'], VARIANT_BOOL, 'groupBySourceOIDs' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'outSR' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITimeReference), 'outTR' ),
              ( ['in'], c_double, 'maximumAllowableOffset' ),
              ( ['in'], POINTER(IServiceDataOptions), 'ServiceDataOptions' ),
              ( ['retval', 'out'], POINTER(POINTER(IServiceData)), 'ServiceData' )),
    COMMETHOD([helpstring(u'Updates dataobjects.')], HRESULT, 'Update2',
              ( ['in'], BSTR, 'gdbVersion' ),
              ( ['in'], c_int, 'LayerOrTableID' ),
              ( ['in'], POINTER(IDataObjects), 'DataObjects' ),
              ( ['in'], VARIANT_BOOL, 'rollbackOnFailure' ),
              ( ['retval', 'out'], POINTER(POINTER(IEditResults)), 'EditResults' )),
    COMMETHOD([helpstring(u'Updates Attachments.')], HRESULT, 'UpdateAttachments2',
              ( ['in'], BSTR, 'gdbVersion' ),
              ( ['in'], c_int, 'LayerOrTableID' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IAttachmentDataArray), 'attachmentDataArray' ),
              ( ['in'], VARIANT_BOOL, 'rollbackOnFailure' ),
              ( ['retval', 'out'], POINTER(POINTER(IEditResults)), 'EditResults' )),
]
################################################################
## code template for IGraphicFeatureServer2 implementation
##class IGraphicFeatureServer2_Impl(object):
##    def Query2(self, gdbVersion, LayerOrTableID, DefinitionExpression, queryFilter, maximumAllowableOffset, ServiceDataOptions):
##        '-no docstring-'
##        #return ServiceData
##
##    def DeleteByID2(self, gdbVersion, LayerOrTableID, idsOfObjectsToDelete, rollbackOnFailure):
##        '-no docstring-'
##        #return EditResults
##
##    def GetServerInfo(self):
##        '-no docstring-'
##        #return FeatureServerInfo
##
##    def Add2(self, gdbVersion, LayerOrTableID, DataObjects, rollbackOnFailure):
##        '-no docstring-'
##        #return EditResults
##
##    def GetServiceObjectCount2(self, gdbVersion, layerOrTableDescriptions, Geometry):
##        '-no docstring-'
##        #return numObjects
##
##    def GetCount2(self, gdbVersion, LayerOrTableID, DefinitionExpression, queryFilter):
##        '-no docstring-'
##        #return numObjects
##
##    def QueryAttachmentInfos2(self, gdbVersion, LayerOrTableID, objectIDs):
##        '-no docstring-'
##        #return attachmentInfos
##
##    def QueryIDs2(self, gdbVersion, LayerOrTableID, DefinitionExpression, queryFilter):
##        '-no docstring-'
##        #return objectIDs
##
##    def QueryRelatedObjects2(self, gdbVersion, sourceLayerOrTableID, objectIDsInSource, RelationshipID, targetDefinitionExpression, targetTableProps, groupBySourceOIDs, outSR, outTR, maximumAllowableOffset, ServiceDataOptions):
##        '-no docstring-'
##        #return ServiceData
##
##    def QueryFromService2(self, gdbVersion, layerOrTableDescriptions, Geometry, outSR, outTR, maximumAllowableOffset, ServiceDataOptions):
##        '-no docstring-'
##        #return ServiceData
##
##    def ApplyEdits2(self, gdbVersion, TableEdits, rollbackOnFailure):
##        '-no docstring-'
##        #return TableEditResults
##
##    def Update2(self, gdbVersion, LayerOrTableID, DataObjects, rollbackOnFailure):
##        u'Updates dataobjects.'
##        #return EditResults
##
##    def UpdateAttachments2(self, gdbVersion, LayerOrTableID, attachmentDataArray, rollbackOnFailure):
##        u'Updates Attachments.'
##        #return EditResults
##
##    def QueryAttachmentData2(self, gdbVersion, LayerOrTableID, attachmentIDs, TransportType):
##        '-no docstring-'
##        #return attachmentData
##
##    def QueryHTMLPopups2(self, gdbVersion, LayerOrTableID, objectIDs):
##        u'Returns the html as text that can be used in popups.'
##        #return HTMLTextArray
##
##    def AddAttachments2(self, gdbVersion, LayerOrTableID, attachmentDataArray, rollbackOnFailure):
##        '-no docstring-'
##        #return EditResults
##
##    def Delete2(self, gdbVersion, LayerOrTableID, DefinitionExpression, rollbackOnFailure, queryFilter):
##        '-no docstring-'
##        #return 
##
##    def DeleteAttachments2(self, gdbVersion, LayerOrTableID, idsOfAttachmentsToDelete, rollbackOnFailure):
##        '-no docstring-'
##        #return EditResults
##

ITiledMapServer._methods_ = [
    COMMETHOD([helpstring(u'Indicates if a given map is a fixed scale map.')], HRESULT, 'IsFixedScaleMap',
              ( ['in'], BSTR, 'MapName' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pIsFixedScaleMap' )),
    COMMETHOD([helpstring(u'Indicates if a given map has a single fused map tile cache.')], HRESULT, 'HasSingleFusedMapCache',
              ( ['in'], BSTR, 'MapName' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pHasCache' )),
    COMMETHOD([helpstring(u'Gets the cache configuration for a given map.')], HRESULT, 'GetTileCacheInfo',
              ( ['in'], BSTR, 'MapName' ),
              ( ['retval', 'out'], POINTER(POINTER(ITileCacheInfo)), 'ppCacheInfo' )),
    COMMETHOD([helpstring(u'Gets a tile for a given tile location from a given map.')], HRESULT, 'GetMapTile',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], c_int, 'Level' ),
              ( ['in'], c_int, 'Row' ),
              ( ['in'], c_int, 'Column' ),
              ( ['retval', 'out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'Data' )),
    COMMETHOD([helpstring(u'Indicates if a given layer has a single tile cache.')], HRESULT, 'HasLayerCache',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], c_int, 'LayerID' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pHasCache' )),
    COMMETHOD([helpstring(u'Gets a tile for a given tile location from a given layer.')], HRESULT, 'GetLayerTile',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], c_int, 'LayerID' ),
              ( ['in'], c_int, 'Level' ),
              ( ['in'], c_int, 'Row' ),
              ( ['in'], c_int, 'Column' ),
              ( ['retval', 'out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'Data' )),
    COMMETHOD([helpstring(u'Gets the virtual cache directory for a given layer within a map.')], HRESULT, 'GetVirtualCacheDirectory',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], c_int, 'LayerID' ),
              ( ['retval', 'out'], POINTER(BSTR), 'pURL' )),
    COMMETHOD([helpstring(u'Gets the cache name for a given layer within a map.')], HRESULT, 'GetCacheName',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], c_int, 'LayerID' ),
              ( ['retval', 'out'], POINTER(BSTR), 'pURL' )),
]
################################################################
## code template for ITiledMapServer implementation
##class ITiledMapServer_Impl(object):
##    def HasLayerCache(self, MapName, LayerID):
##        u'Indicates if a given layer has a single tile cache.'
##        #return pHasCache
##
##    def GetMapTile(self, MapName, Level, Row, Column):
##        u'Gets a tile for a given tile location from a given map.'
##        #return Data
##
##    def GetCacheName(self, MapName, LayerID):
##        u'Gets the cache name for a given layer within a map.'
##        #return pURL
##
##    def GetVirtualCacheDirectory(self, MapName, LayerID):
##        u'Gets the virtual cache directory for a given layer within a map.'
##        #return pURL
##
##    def IsFixedScaleMap(self, MapName):
##        u'Indicates if a given map is a fixed scale map.'
##        #return pIsFixedScaleMap
##
##    def HasSingleFusedMapCache(self, MapName):
##        u'Indicates if a given map has a single fused map tile cache.'
##        #return pHasCache
##
##    def GetLayerTile(self, MapName, LayerID, Level, Row, Column):
##        u'Gets a tile for a given tile location from a given layer.'
##        #return Data
##
##    def GetTileCacheInfo(self, MapName):
##        u'Gets the cache configuration for a given map.'
##        #return ppCacheInfo
##

class ITileImageInfo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to more members that provide the map cache info.'
    _iid_ = GUID('{035F6865-018A-4E22-BCA7-E842DC37667D}')
    _idlflags_ = ['oleautomation']
class ICacheDescriptionInfo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that provide the cache description info.'
    _iid_ = GUID('{55B6BB3A-D9FC-4D43-A1C7-826A77A6F6F4}')
    _idlflags_ = ['oleautomation']
class ICacheControlInfo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that provide the cache control info.'
    _iid_ = GUID('{095F6F1B-178F-49AE-9B05-DE919B2C7E59}')
    _idlflags_ = ['oleautomation']
ITiledMapServer2._methods_ = [
    COMMETHOD([helpstring(u'Gets a tile for a given tile location from a given map.')], HRESULT, 'GetMapTileEx',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], c_int, 'Level' ),
              ( ['in'], c_int, 'Row' ),
              ( ['in'], c_int, 'Column' ),
              ( ['in'], c_int, 'CacheFormat' ),
              ( ['retval', 'out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'Data' )),
    COMMETHOD([helpstring(u'Gets a tile for a given tile location from a given layer.')], HRESULT, 'GetLayerTileEx',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], c_int, 'LayerID' ),
              ( ['in'], c_int, 'Level' ),
              ( ['in'], c_int, 'Row' ),
              ( ['in'], c_int, 'Column' ),
              ( ['in'], c_int, 'CacheFormat' ),
              ( ['retval', 'out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'Data' )),
    COMMETHOD([helpstring(u'Gets the cache tile image information for a given map.')], HRESULT, 'GetTileImageInfo',
              ( ['in'], BSTR, 'MapName' ),
              ( ['retval', 'out'], POINTER(POINTER(ITileImageInfo)), 'ppCacheInfo' )),
    COMMETHOD([helpstring(u'Gets the cache description information for a given map.')], HRESULT, 'GetCacheDescriptionInfo',
              ( ['in'], BSTR, 'MapName' ),
              ( ['retval', 'out'], POINTER(POINTER(ICacheDescriptionInfo)), 'ppCacheDescriptionInfo' )),
    COMMETHOD([helpstring(u'Gets the cache description information for a given map.')], HRESULT, 'GetCacheControlInfo',
              ( ['in'], BSTR, 'MapName' ),
              ( ['retval', 'out'], POINTER(POINTER(ICacheControlInfo)), 'ppCacheControlInfo' )),
]
################################################################
## code template for ITiledMapServer2 implementation
##class ITiledMapServer2_Impl(object):
##    def GetCacheControlInfo(self, MapName):
##        u'Gets the cache description information for a given map.'
##        #return ppCacheControlInfo
##
##    def GetCacheDescriptionInfo(self, MapName):
##        u'Gets the cache description information for a given map.'
##        #return ppCacheDescriptionInfo
##
##    def GetMapTileEx(self, MapName, Level, Row, Column, CacheFormat):
##        u'Gets a tile for a given tile location from a given map.'
##        #return Data
##
##    def GetLayerTileEx(self, MapName, LayerID, Level, Row, Column, CacheFormat):
##        u'Gets a tile for a given tile location from a given layer.'
##        #return Data
##
##    def GetTileImageInfo(self, MapName):
##        u'Gets the cache tile image information for a given map.'
##        #return ppCacheInfo
##


# values for enumeration 'esriMaplexUnit'
esriMaplexUnitMap = 0
esriMaplexUnitMM = 1
esriMaplexUnitInch = 2
esriMaplexUnitPoint = 3
esriMaplexUnitPercentage = 4
esriMaplexUnit = c_int # enum
class MobileLayerInfos(CoClass):
    u'This is depricated at 10.0:  A collection of Mobile Layer Info objects.'
    _reg_clsid_ = GUID('{EAC49B53-5819-4434-B5F0-55D781B79977}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IMobileLayerInfos(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'This is depricated at 10.0:  Provides access to the Mobile Layer Info Collection Interface.'
    _iid_ = GUID('{6EE714E5-2B39-44BF-87D9-E3F851B7C022}')
    _idlflags_ = ['oleautomation']
MobileLayerInfos._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMobileLayerInfos, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

class ServerLayerExtension(CoClass):
    u'A server layer extension used to store extended properties for a server layer.'
    _reg_clsid_ = GUID('{F7FD0EC9-F215-4E7F-B1F8-94BA0EB603B9}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IServerLayerExtension(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to Server Layer Extension.'
    _iid_ = GUID('{B73D39D9-923E-40DE-8438-099B6880133C}')
    _idlflags_ = ['oleautomation']
ServerLayerExtension._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IServerLayerExtension, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

IRasterStretch3._methods_ = [
    COMMETHOD(['propput', helpstring(u'Indicates if Gamma stretch should be applied.')], HRESULT, 'UseGamma',
              ( ['in'], VARIANT_BOOL, 'pUseGamma' )),
    COMMETHOD(['propget', helpstring(u'Indicates if Gamma stretch should be applied.')], HRESULT, 'UseGamma',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pUseGamma' )),
    COMMETHOD(['propput', helpstring(u'The list of Gamma value(s).')], HRESULT, 'GammaValue',
              ( ['in'], VARIANT, 'pGamma' )),
    COMMETHOD(['propget', helpstring(u'The list of Gamma value(s).')], HRESULT, 'GammaValue',
              ( ['retval', 'out'], POINTER(VARIANT), 'pGamma' )),
]
################################################################
## code template for IRasterStretch3 implementation
##class IRasterStretch3_Impl(object):
##    def _get(self):
##        u'Indicates if Gamma stretch should be applied.'
##        #return pUseGamma
##    def _set(self, pUseGamma):
##        u'Indicates if Gamma stretch should be applied.'
##    UseGamma = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The list of Gamma value(s).'
##        #return pGamma
##    def _set(self, pGamma):
##        u'The list of Gamma value(s).'
##    GammaValue = property(_get, _set, doc = _set.__doc__)
##

class IDimensionLayer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Indicator interface that identifies dimension layers.'
    _iid_ = GUID('{0737082E-958E-11D4-80ED-00C04F601565}')
    _idlflags_ = ['oleautomation']
IDimensionLayer._methods_ = [
]
################################################################
## code template for IDimensionLayer implementation
##class IDimensionLayer_Impl(object):


# values for enumeration 'esriMaplexPlacementQuality'
esriMaplexPlacementQualityLow = 1
esriMaplexPlacementQualityMedium = 2
esriMaplexPlacementQualityHigh = 3
esriMaplexPlacementQuality = c_int # enum
class IAnnotationClassExtension(IAnnoClass):
    _case_insensitive_ = True
    u'Provides access to members that control the annotation class.'
    _iid_ = GUID('{129B8BF2-5D9D-45AE-864C-876F930A8CFB}')
    _idlflags_ = ['oleautomation']
class ITextElement(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the Text element.'
    _iid_ = GUID('{204034D2-F6EA-11D0-83AD-080009B996CC}')
    _idlflags_ = ['oleautomation']
IAnnotationClassExtension._methods_ = [
    COMMETHOD(['propget', helpstring(u'The display.')], HRESULT, 'Display',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay)), 'ppDisplay' )),
    COMMETHOD([helpstring(u'Sync the attributes.')], HRESULT, 'SynchronizeAttributes',
              ( ['in'], POINTER(ITextElement), 'pTextElement' ),
              ( ['in'], POINTER(IAnnotationFeature), 'pAnnoFeature' )),
    COMMETHOD(['propget', helpstring(u'The label class ID field index.')], HRESULT, 'AnnotationClassIDFieldIndex',
              ( ['retval', 'out'], POINTER(c_int), 'AnnotationClassIDFieldIndex' )),
    COMMETHOD(['propget', helpstring(u'The status field index.')], HRESULT, 'StatusFieldIndex',
              ( ['retval', 'out'], POINTER(c_int), 'StatusFieldIndex' )),
    COMMETHOD(['propget', helpstring(u"Indicates if an annotation is to be automatically recreated when a feature's shape is changed.")], HRESULT, 'UpdateOnShapeChange',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates if an annotation is to be automatically created when a feature is created.')], HRESULT, 'AutoCreate',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates if an annotation must belong to a symbol in the symbol collection.')], HRESULT, 'RequireSymbolID',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates if an annotation may override a symbol property even though it references the symbol collection.')], HRESULT, 'AllowSymbolOverrides',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propget', helpstring(u'The overposter properties.')], HRESULT, 'OverposterProperties',
              ( ['retval', 'out'], POINTER(POINTER(IOverposterProperties)), 'OverposterProperties' )),
    COMMETHOD(['propget', helpstring(u'The feature class to which the annotation class is feature linked.')], HRESULT, 'LinkedFeatureClass',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClass)), 'LinkedFeatureClass' )),
]
################################################################
## code template for IAnnotationClassExtension implementation
##class IAnnotationClassExtension_Impl(object):
##    @property
##    def LinkedFeatureClass(self):
##        u'The feature class to which the annotation class is feature linked.'
##        #return LinkedFeatureClass
##
##    @property
##    def AnnotationClassIDFieldIndex(self):
##        u'The label class ID field index.'
##        #return AnnotationClassIDFieldIndex
##
##    @property
##    def OverposterProperties(self):
##        u'The overposter properties.'
##        #return OverposterProperties
##
##    @property
##    def StatusFieldIndex(self):
##        u'The status field index.'
##        #return StatusFieldIndex
##
##    @property
##    def AutoCreate(self):
##        u'Indicates if an annotation is to be automatically created when a feature is created.'
##        #return flag
##
##    @property
##    def AllowSymbolOverrides(self):
##        u'Indicates if an annotation may override a symbol property even though it references the symbol collection.'
##        #return flag
##
##    @property
##    def UpdateOnShapeChange(self):
##        u"Indicates if an annotation is to be automatically recreated when a feature's shape is changed."
##        #return flag
##
##    @property
##    def RequireSymbolID(self):
##        u'Indicates if an annotation must belong to a symbol in the symbol collection.'
##        #return flag
##
##    def SynchronizeAttributes(self, pTextElement, pAnnoFeature):
##        u'Sync the attributes.'
##        #return 
##
##    @property
##    def Display(self):
##        u'The display.'
##        #return ppDisplay
##


# values for enumeration 'esriBasicOverposterFeatureType'
esriOverposterPoint = 0
esriOverposterPolyline = 1
esriOverposterPolygon = 2
esriBasicOverposterFeatureType = c_int # enum

# values for enumeration 'esriMaplexPointPlacementMethod'
esriMaplexAroundPoint = 0
esriMaplexCenteredOnPoint = 1
esriMaplexNorthOfPoint = 2
esriMaplexNortheastOfPoint = 3
esriMaplexEastOfPoint = 4
esriMaplexSoutheastOfPoint = 5
esriMaplexSouthOfPoint = 6
esriMaplexSouthwestOfPoint = 7
esriMaplexWestOfPoint = 8
esriMaplexNorthwestOfPoint = 9
esriMaplexPointPlacementMethod = c_int # enum

# values for enumeration 'esriMaplexConstrainOffset'
esriMaplexNoConstraint = 0
esriMaplexAboveLine = 1
esriMaplexBelowLine = 2
esriMaplexLeftOfLine = 3
esriMaplexRightOfLine = 4
esriMaplexConstrainOffset = c_int # enum
IMaplexOverposterLayerProperties._methods_ = [
    COMMETHOD(['propget', helpstring(u'The feature type for labeling.')], HRESULT, 'FeatureType',
              ( ['retval', 'out'], POINTER(esriBasicOverposterFeatureType), 'Type' )),
    COMMETHOD(['propput', helpstring(u'The feature type for labeling.')], HRESULT, 'FeatureType',
              ( ['in'], esriBasicOverposterFeatureType, 'Type' )),
    COMMETHOD(['propget', helpstring(u'Point placement options.')], HRESULT, 'PointPlacementMethod',
              ( ['retval', 'out'], POINTER(esriMaplexPointPlacementMethod), 'Method' )),
    COMMETHOD(['propput', helpstring(u'Point placement options.')], HRESULT, 'PointPlacementMethod',
              ( ['in'], esriMaplexPointPlacementMethod, 'Method' )),
    COMMETHOD(['propget', helpstring(u'Line placement options.')], HRESULT, 'LinePlacementMethod',
              ( ['retval', 'out'], POINTER(esriMaplexLinePlacementMethod), 'Method' )),
    COMMETHOD(['propput', helpstring(u'Line placement options.')], HRESULT, 'LinePlacementMethod',
              ( ['in'], esriMaplexLinePlacementMethod, 'Method' )),
    COMMETHOD(['propget', helpstring(u'Polygon placement options.')], HRESULT, 'PolygonPlacementMethod',
              ( ['retval', 'out'], POINTER(esriMaplexPolygonPlacementMethod), 'Method' )),
    COMMETHOD(['propput', helpstring(u'Polygon placement options.')], HRESULT, 'PolygonPlacementMethod',
              ( ['in'], esriMaplexPolygonPlacementMethod, 'Method' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to place a label outside the polygon if it does not fit inside.')], HRESULT, 'CanPlaceLabelOutsidePolygon',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to place a label outside the polygon if it does not fit inside.')], HRESULT, 'CanPlaceLabelOutsidePolygon',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates if there is a preference to place the label horizontally.')], HRESULT, 'PreferHorizontalPlacement',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if there is a preference to place the label horizontally.')], HRESULT, 'PreferHorizontalPlacement',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to place the label within land parcel polygon avoiding building footprint.')], HRESULT, 'LandParcelPlacement',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to place the label within land parcel polygon avoiding building footprint.')], HRESULT, 'LandParcelPlacement',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Primary offset between label and symbol.')], HRESULT, 'PrimaryOffset',
              ( ['retval', 'out'], POINTER(c_double), 'Offset' )),
    COMMETHOD(['propput', helpstring(u'Primary offset between label and symbol.')], HRESULT, 'PrimaryOffset',
              ( ['in'], c_double, 'Offset' )),
    COMMETHOD(['propget', helpstring(u'The primary offset is interpreted to be in this unit.')], HRESULT, 'PrimaryOffsetUnit',
              ( ['retval', 'out'], POINTER(esriMaplexUnit), 'unit' )),
    COMMETHOD(['propput', helpstring(u'The primary offset is interpreted to be in this unit.')], HRESULT, 'PrimaryOffsetUnit',
              ( ['in'], esriMaplexUnit, 'unit' )),
    COMMETHOD(['propget', helpstring(u'Secondary offset between label and symbol.')], HRESULT, 'SecondaryOffset',
              ( ['retval', 'out'], POINTER(c_double), 'Offset' )),
    COMMETHOD(['propput', helpstring(u'Secondary offset between label and symbol.')], HRESULT, 'SecondaryOffset',
              ( ['in'], c_double, 'Offset' )),
    COMMETHOD(['propget', helpstring(u'Label constraint options.')], HRESULT, 'ConstrainOffset',
              ( ['retval', 'out'], POINTER(esriMaplexConstrainOffset), 'option' )),
    COMMETHOD(['propput', helpstring(u'Label constraint options.')], HRESULT, 'ConstrainOffset',
              ( ['in'], esriMaplexConstrainOffset, 'option' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to use user-defined point placement priorities.')], HRESULT, 'EnablePointPlacementPriorities',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to use user-defined point placement priorities.')], HRESULT, 'EnablePointPlacementPriorities',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Controls placement of label around point fetaure.')], HRESULT, 'PointPlacementPriorities',
              ( ['retval', 'out'], POINTER(POINTER(IPointPlacementPriorities)), 'priorities' )),
    COMMETHOD(['propput', helpstring(u'Controls placement of label around point fetaure.')], HRESULT, 'PointPlacementPriorities',
              ( ['in'], POINTER(IPointPlacementPriorities), 'priorities' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to allow the point label to be shifted upon a fixed position.')], HRESULT, 'CanShiftPointLabel',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to allow the point label to be shifted upon a fixed position.')], HRESULT, 'CanShiftPointLabel',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to enable street placement techniques.')], HRESULT, 'IsStreetPlacement',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to enable street placement techniques.')], HRESULT, 'IsStreetPlacement',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to enable the repetition of label along line feature.')], HRESULT, 'RepeatLabel',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to enable the repetition of label along line feature.')], HRESULT, 'RepeatLabel',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Interval that must elapse before label is repeated.')], HRESULT, 'MinimumRepetitionInterval',
              ( ['retval', 'out'], POINTER(c_double), 'Interval' )),
    COMMETHOD(['propput', helpstring(u'Interval that must elapse before label is repeated.')], HRESULT, 'MinimumRepetitionInterval',
              ( ['in'], c_double, 'Interval' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to spread label characters along line feature.')], HRESULT, 'SpreadCharacters',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to spread label characters along line feature.')], HRESULT, 'SpreadCharacters',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'The character spacing may be increased upto this limit.')], HRESULT, 'MaximumCharacterSpacing',
              ( ['retval', 'out'], POINTER(c_double), 'spacing' )),
    COMMETHOD(['propput', helpstring(u'The character spacing may be increased upto this limit.')], HRESULT, 'MaximumCharacterSpacing',
              ( ['in'], c_double, 'spacing' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to spread words along line feature.')], HRESULT, 'SpreadWords',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to spread words along line feature.')], HRESULT, 'SpreadWords',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'The word spacing may be increased upto this limit.')], HRESULT, 'MaximumWordSpacing',
              ( ['retval', 'out'], POINTER(c_double), 'spacing' )),
    COMMETHOD(['propput', helpstring(u'The word spacing may be increased upto this limit.')], HRESULT, 'MaximumWordSpacing',
              ( ['in'], c_double, 'spacing' )),
    COMMETHOD(['propget', helpstring(u'Preferred clearance between street label and street end.')], HRESULT, 'PreferredEndOfStreetClearance',
              ( ['retval', 'out'], POINTER(c_double), 'clearance' )),
    COMMETHOD(['propput', helpstring(u'Preferred clearance between street label and street end.')], HRESULT, 'PreferredEndOfStreetClearance',
              ( ['in'], c_double, 'clearance' )),
    COMMETHOD(['propget', helpstring(u'Minimum clearance between street label and street end.')], HRESULT, 'MinimumEndOfStreetClearance',
              ( ['retval', 'out'], POINTER(c_double), 'clearance' )),
    COMMETHOD(['propput', helpstring(u'Minimum clearance between street label and street end.')], HRESULT, 'MinimumEndOfStreetClearance',
              ( ['in'], c_double, 'clearance' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to stack the label to obtain a better position.')], HRESULT, 'CanStackLabel',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to stack the label to obtain a better position.')], HRESULT, 'CanStackLabel',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'The label stacking properties for a layer.')], HRESULT, 'LabelStackingProperties',
              ( ['retval', 'out'], POINTER(POINTER(IMaplexLabelStackingProperties)), 'props' )),
    COMMETHOD(['propput', helpstring(u'The label stacking properties for a layer.')], HRESULT, 'LabelStackingProperties',
              ( ['in'], POINTER(IMaplexLabelStackingProperties), 'props' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to place the label over end of line or over polygon boundary.')], HRESULT, 'CanOverrunFeature',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to place the label over end of line or over polygon boundary.')], HRESULT, 'CanOverrunFeature',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Maximum distance that a label is allowed to overrun the end of its feature.')], HRESULT, 'MaximumLabelOverrun',
              ( ['retval', 'out'], POINTER(c_double), 'Distance' )),
    COMMETHOD(['propput', helpstring(u'Maximum distance that a label is allowed to overrun the end of its feature.')], HRESULT, 'MaximumLabelOverrun',
              ( ['in'], c_double, 'Distance' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether a label may overrun one side of a polygon feature.')], HRESULT, 'AllowAsymmetricOverrun',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether a label may overrun one side of a polygon feature.')], HRESULT, 'AllowAsymmetricOverrun',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to abbreviate the label using an abbreviation dictionary.')], HRESULT, 'CanAbbreviateLabel',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to abbreviate the label using an abbreviation dictionary.')], HRESULT, 'CanAbbreviateLabel',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to truncate the label using an algorithm.')], HRESULT, 'CanTruncateLabel',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to truncate the label using an algorithm.')], HRESULT, 'CanTruncateLabel',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to reduce the size of the font.')], HRESULT, 'CanReduceFontSize',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to reduce the size of the font.')], HRESULT, 'CanReduceFontSize',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propput', helpstring(u'The font may be reduced in height until this limit is reached.')], HRESULT, 'FontHeightReductionLimit',
              ( ['in'], c_double, 'limit' )),
    COMMETHOD(['propget', helpstring(u'The font may be reduced in height until this limit is reached.')], HRESULT, 'FontHeightReductionLimit',
              ( ['retval', 'out'], POINTER(c_double), 'limit' )),
    COMMETHOD(['propput', helpstring(u'This is the step interval for font height reduction.')], HRESULT, 'FontHeightReductionStep',
              ( ['in'], c_double, 'step' )),
    COMMETHOD(['propget', helpstring(u'This is the step interval for font height reduction.')], HRESULT, 'FontHeightReductionStep',
              ( ['retval', 'out'], POINTER(c_double), 'step' )),
    COMMETHOD(['propput', helpstring(u'The font may be reduced in width until this limit is reached.')], HRESULT, 'FontWidthReductionLimit',
              ( ['in'], c_double, 'limit' )),
    COMMETHOD(['propget', helpstring(u'The font may be reduced in width until this limit is reached.')], HRESULT, 'FontWidthReductionLimit',
              ( ['retval', 'out'], POINTER(c_double), 'limit' )),
    COMMETHOD(['propput', helpstring(u'This is the step interval for font width reduction.')], HRESULT, 'FontWidthReductionStep',
              ( ['in'], c_double, 'step' )),
    COMMETHOD(['propget', helpstring(u'This is the step interval for font width reduction.')], HRESULT, 'FontWidthReductionStep',
              ( ['retval', 'out'], POINTER(c_double), 'step' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to not remove the label if no position is found.')], HRESULT, 'NeverRemoveLabel',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to not remove the label if no position is found.')], HRESULT, 'NeverRemoveLabel',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Label prority controls approximate placement order.')], HRESULT, 'LabelPriority',
              ( ['retval', 'out'], POINTER(c_int), 'Priority' )),
    COMMETHOD(['propput', helpstring(u'Label prority controls approximate placement order.')], HRESULT, 'LabelPriority',
              ( ['in'], c_int, 'Priority' )),
    COMMETHOD(['propget', helpstring(u'Feature weight controls which features may be overlapped and to what extent.')], HRESULT, 'FeatureWeight',
              ( ['retval', 'out'], POINTER(c_int), 'Weight' )),
    COMMETHOD(['propput', helpstring(u'Feature weight controls which features may be overlapped and to what extent.')], HRESULT, 'FeatureWeight',
              ( ['in'], c_int, 'Weight' )),
    COMMETHOD(['propput', helpstring(u'Feature Weight for the boundary of the polygon.')], HRESULT, 'PolygonBoundaryWeight',
              ( ['in'], c_int, 'Weight' )),
    COMMETHOD(['propget', helpstring(u'Feature Weight for the boundary of the polygon.')], HRESULT, 'PolygonBoundaryWeight',
              ( ['retval', 'out'], POINTER(c_int), 'Weight' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to remove the label if it overlaps with other labels.')], HRESULT, 'CanRemoveOverlappingLabel',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to remove the label if it overlaps with other labels.')], HRESULT, 'CanRemoveOverlappingLabel',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to remove duplicate labels that lie within a specified distance of each other.')], HRESULT, 'ThinDuplicateLabels',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to remove duplicate labels that lie within a specified distance of each other.')], HRESULT, 'ThinDuplicateLabels',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Distance used to control the thinning of duplicate labels.')], HRESULT, 'ThinningDistance',
              ( ['retval', 'out'], POINTER(c_double), 'Distance' )),
    COMMETHOD(['propput', helpstring(u'Distance used to control the thinning of duplicate labels.')], HRESULT, 'ThinningDistance',
              ( ['in'], c_double, 'Distance' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to enable graticule alignment.')], HRESULT, 'GraticuleAlignment',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to enable graticule alignment.')], HRESULT, 'GraticuleAlignment',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'The offset along line properties for a layer.')], HRESULT, 'OffsetAlongLineProperties',
              ( ['retval', 'out'], POINTER(POINTER(IMaplexOffsetAlongLineProperties)), 'props' )),
    COMMETHOD(['propput', helpstring(u'The offset along line properties for a layer.')], HRESULT, 'OffsetAlongLineProperties',
              ( ['in'], POINTER(IMaplexOffsetAlongLineProperties), 'props' )),
    COMMETHOD(['propget', helpstring(u'The label rotation properties for a layer.')], HRESULT, 'RotationProperties',
              ( ['retval', 'out'], POINTER(POINTER(IMaplexRotationProperties)), 'props' )),
    COMMETHOD(['propput', helpstring(u'The label rotation properties for a layer.')], HRESULT, 'RotationProperties',
              ( ['in'], POINTER(IMaplexRotationProperties), 'props' )),
    COMMETHOD(['propget', helpstring(u'Name of the abbreviations dictionary referenced by this layer.')], HRESULT, 'DictionaryName',
              ( ['retval', 'out'], POINTER(BSTR), 'Text' )),
    COMMETHOD(['propput', helpstring(u'Name of the abbreviations dictionary referenced by this layer.')], HRESULT, 'DictionaryName',
              ( ['in'], BSTR, 'Text' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to align the label with the label direction so the label may appear upside down.')], HRESULT, 'AlignLabelToLineDirection',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to align the label with the label direction so the label may appear upside down.')], HRESULT, 'AlignLabelToLineDirection',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to place the label first and allow other labels to be placed over it.')], HRESULT, 'BackgroundLabel',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to place the label first and allow other labels to be placed over it.')], HRESULT, 'BackgroundLabel',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Specifies a minimum size of a line or area feature for it to be labeled.')], HRESULT, 'MinimumSizeForLabeling',
              ( ['retval', 'out'], POINTER(c_double), 'Size' )),
    COMMETHOD(['propput', helpstring(u'Specifies a minimum size of a line or area feature for it to be labeled.')], HRESULT, 'MinimumSizeForLabeling',
              ( ['in'], c_double, 'Size' )),
    COMMETHOD(['propget', helpstring(u'Increase buffer to stop labels from being placed too close to each other.')], HRESULT, 'LabelBuffer',
              ( ['retval', 'out'], POINTER(c_int), 'Buffer' )),
    COMMETHOD(['propput', helpstring(u'Increase buffer to stop labels from being placed too close to each other.')], HRESULT, 'LabelBuffer',
              ( ['in'], c_int, 'Buffer' )),
    COMMETHOD(['propget', helpstring(u'Increase buffer around a point feature to stop labels from being placed too close to the feature.')], HRESULT, 'FeatureBuffer',
              ( ['retval', 'out'], POINTER(c_int), 'Buffer' )),
    COMMETHOD(['propput', helpstring(u'Increase buffer around a point feature to stop labels from being placed too close to the feature.')], HRESULT, 'FeatureBuffer',
              ( ['in'], c_int, 'Buffer' )),
]
################################################################
## code template for IMaplexOverposterLayerProperties implementation
##class IMaplexOverposterLayerProperties_Impl(object):
##    def _get(self):
##        u'The label stacking properties for a layer.'
##        #return props
##    def _set(self, props):
##        u'The label stacking properties for a layer.'
##    LabelStackingProperties = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Label prority controls approximate placement order.'
##        #return Priority
##    def _set(self, Priority):
##        u'Label prority controls approximate placement order.'
##    LabelPriority = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether to place a label outside the polygon if it does not fit inside.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether to place a label outside the polygon if it does not fit inside.'
##    CanPlaceLabelOutsidePolygon = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether to enable the repetition of label along line feature.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether to enable the repetition of label along line feature.'
##    RepeatLabel = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Point placement options.'
##        #return Method
##    def _set(self, Method):
##        u'Point placement options.'
##    PointPlacementMethod = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Distance used to control the thinning of duplicate labels.'
##        #return Distance
##    def _set(self, Distance):
##        u'Distance used to control the thinning of duplicate labels.'
##    ThinningDistance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Controls placement of label around point fetaure.'
##        #return priorities
##    def _set(self, priorities):
##        u'Controls placement of label around point fetaure.'
##    PointPlacementPriorities = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'This is the step interval for font height reduction.'
##        #return step
##    def _set(self, step):
##        u'This is the step interval for font height reduction.'
##    FontHeightReductionStep = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The font may be reduced in width until this limit is reached.'
##        #return limit
##    def _set(self, limit):
##        u'The font may be reduced in width until this limit is reached.'
##    FontWidthReductionLimit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if there is a preference to place the label horizontally.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if there is a preference to place the label horizontally.'
##    PreferHorizontalPlacement = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether to spread label characters along line feature.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether to spread label characters along line feature.'
##    SpreadCharacters = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Specifies a minimum size of a line or area feature for it to be labeled.'
##        #return Size
##    def _set(self, Size):
##        u'Specifies a minimum size of a line or area feature for it to be labeled.'
##    MinimumSizeForLabeling = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether to stack the label to obtain a better position.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether to stack the label to obtain a better position.'
##    CanStackLabel = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Polygon placement options.'
##        #return Method
##    def _set(self, Method):
##        u'Polygon placement options.'
##    PolygonPlacementMethod = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Line placement options.'
##        #return Method
##    def _set(self, Method):
##        u'Line placement options.'
##    LinePlacementMethod = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether to place the label over end of line or over polygon boundary.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether to place the label over end of line or over polygon boundary.'
##    CanOverrunFeature = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The word spacing may be increased upto this limit.'
##        #return spacing
##    def _set(self, spacing):
##        u'The word spacing may be increased upto this limit.'
##    MaximumWordSpacing = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Increase buffer to stop labels from being placed too close to each other.'
##        #return Buffer
##    def _set(self, Buffer):
##        u'Increase buffer to stop labels from being placed too close to each other.'
##    LabelBuffer = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The label rotation properties for a layer.'
##        #return props
##    def _set(self, props):
##        u'The label rotation properties for a layer.'
##    RotationProperties = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether to reduce the size of the font.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether to reduce the size of the font.'
##    CanReduceFontSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Minimum clearance between street label and street end.'
##        #return clearance
##    def _set(self, clearance):
##        u'Minimum clearance between street label and street end.'
##    MinimumEndOfStreetClearance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether to abbreviate the label using an abbreviation dictionary.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether to abbreviate the label using an abbreviation dictionary.'
##    CanAbbreviateLabel = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'This is the step interval for font width reduction.'
##        #return step
##    def _set(self, step):
##        u'This is the step interval for font width reduction.'
##    FontWidthReductionStep = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether a label may overrun one side of a polygon feature.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether a label may overrun one side of a polygon feature.'
##    AllowAsymmetricOverrun = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Label constraint options.'
##        #return option
##    def _set(self, option):
##        u'Label constraint options.'
##    ConstrainOffset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether to place the label within land parcel polygon avoiding building footprint.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether to place the label within land parcel polygon avoiding building footprint.'
##    LandParcelPlacement = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The primary offset is interpreted to be in this unit.'
##        #return unit
##    def _set(self, unit):
##        u'The primary offset is interpreted to be in this unit.'
##    PrimaryOffsetUnit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Secondary offset between label and symbol.'
##        #return Offset
##    def _set(self, Offset):
##        u'Secondary offset between label and symbol.'
##    SecondaryOffset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether to place the label first and allow other labels to be placed over it.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether to place the label first and allow other labels to be placed over it.'
##    BackgroundLabel = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The font may be reduced in height until this limit is reached.'
##        #return limit
##    def _set(self, limit):
##        u'The font may be reduced in height until this limit is reached.'
##    FontHeightReductionLimit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether to use user-defined point placement priorities.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether to use user-defined point placement priorities.'
##    EnablePointPlacementPriorities = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Feature Weight for the boundary of the polygon.'
##        #return Weight
##    def _set(self, Weight):
##        u'Feature Weight for the boundary of the polygon.'
##    PolygonBoundaryWeight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Maximum distance that a label is allowed to overrun the end of its feature.'
##        #return Distance
##    def _set(self, Distance):
##        u'Maximum distance that a label is allowed to overrun the end of its feature.'
##    MaximumLabelOverrun = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Preferred clearance between street label and street end.'
##        #return clearance
##    def _set(self, clearance):
##        u'Preferred clearance between street label and street end.'
##    PreferredEndOfStreetClearance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The offset along line properties for a layer.'
##        #return props
##    def _set(self, props):
##        u'The offset along line properties for a layer.'
##    OffsetAlongLineProperties = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The character spacing may be increased upto this limit.'
##        #return spacing
##    def _set(self, spacing):
##        u'The character spacing may be increased upto this limit.'
##    MaximumCharacterSpacing = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether to truncate the label using an algorithm.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether to truncate the label using an algorithm.'
##    CanTruncateLabel = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Name of the abbreviations dictionary referenced by this layer.'
##        #return Text
##    def _set(self, Text):
##        u'Name of the abbreviations dictionary referenced by this layer.'
##    DictionaryName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The feature type for labeling.'
##        #return Type
##    def _set(self, Type):
##        u'The feature type for labeling.'
##    FeatureType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Interval that must elapse before label is repeated.'
##        #return Interval
##    def _set(self, Interval):
##        u'Interval that must elapse before label is repeated.'
##    MinimumRepetitionInterval = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Increase buffer around a point feature to stop labels from being placed too close to the feature.'
##        #return Buffer
##    def _set(self, Buffer):
##        u'Increase buffer around a point feature to stop labels from being placed too close to the feature.'
##    FeatureBuffer = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether to not remove the label if no position is found.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether to not remove the label if no position is found.'
##    NeverRemoveLabel = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether to remove duplicate labels that lie within a specified distance of each other.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether to remove duplicate labels that lie within a specified distance of each other.'
##    ThinDuplicateLabels = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether to remove the label if it overlaps with other labels.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether to remove the label if it overlaps with other labels.'
##    CanRemoveOverlappingLabel = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Feature weight controls which features may be overlapped and to what extent.'
##        #return Weight
##    def _set(self, Weight):
##        u'Feature weight controls which features may be overlapped and to what extent.'
##    FeatureWeight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether to align the label with the label direction so the label may appear upside down.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether to align the label with the label direction so the label may appear upside down.'
##    AlignLabelToLineDirection = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether to enable graticule alignment.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether to enable graticule alignment.'
##    GraticuleAlignment = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether to enable street placement techniques.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether to enable street placement techniques.'
##    IsStreetPlacement = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether to spread words along line feature.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether to spread words along line feature.'
##    SpreadWords = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether to allow the point label to be shifted upon a fixed position.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether to allow the point label to be shifted upon a fixed position.'
##    CanShiftPointLabel = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Primary offset between label and symbol.'
##        #return Offset
##    def _set(self, Offset):
##        u'Primary offset between label and symbol.'
##    PrimaryOffset = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'esriMaplexOffsetAlongLineMethod'
esriMaplexBestPositionAlongLine = 0
esriMaplexBeforeStartOfLine = 1
esriMaplexAlongLineFromStart = 2
esriMaplexAlongLineFromEnd = 3
esriMaplexAfterEndOfLine = 4
esriMaplexOffsetAlongLineMethod = c_int # enum
class LayerResultOptions(CoClass):
    u'Layer Result Options CoClass.'
    _reg_clsid_ = GUID('{80308F69-EE5A-457A-AD33-9F897C70EA40}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class ILayerResultOptions(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to methods that control geometry options.'
    _iid_ = GUID('{874BA262-3901-4B69-B322-94104E4989C1}')
    _idlflags_ = ['oleautomation']
LayerResultOptions._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILayerResultOptions, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersionSupportGEN]

IMaplexOverposterLayerProperties2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates the placement priority associated with a zone internal to the polygon.')], HRESULT, 'PolygonInternalZones',
              ( ['in'], esriMaplexZoneIdentifier, 'zone' ),
              ( ['retval', 'out'], POINTER(c_int), 'Priority' )),
    COMMETHOD(['propput', helpstring(u'Indicates the placement priority associated with a zone internal to the polygon.')], HRESULT, 'PolygonInternalZones',
              ( ['in'], esriMaplexZoneIdentifier, 'zone' ),
              ( ['in'], c_int, 'Priority' )),
    COMMETHOD(['propget', helpstring(u'Indicates the placement priority associated with a zone external to the polygon.')], HRESULT, 'PolygonExternalZones',
              ( ['in'], esriMaplexZoneIdentifier, 'zone' ),
              ( ['retval', 'out'], POINTER(c_int), 'Priority' )),
    COMMETHOD(['propput', helpstring(u'Indicates the placement priority associated with a zone external to the polygon.')], HRESULT, 'PolygonExternalZones',
              ( ['in'], esriMaplexZoneIdentifier, 'zone' ),
              ( ['in'], c_int, 'Priority' )),
    COMMETHOD(['propget', helpstring(u'Indicates the priority of a placement strategy when placing text.')], HRESULT, 'StrategyPriority',
              ( ['in'], esriMaplexStrategyIdentifier, 'strategy' ),
              ( ['retval', 'out'], POINTER(c_int), 'Priority' )),
    COMMETHOD(['propput', helpstring(u'Indicates the priority of a placement strategy when placing text.')], HRESULT, 'StrategyPriority',
              ( ['in'], esriMaplexStrategyIdentifier, 'strategy' ),
              ( ['in'], c_int, 'Priority' )),
    COMMETHOD(['propget', helpstring(u'Indicates the options for the graticule alignment type.')], HRESULT, 'GraticuleAlignmentType',
              ( ['retval', 'out'], POINTER(esriMaplexGraticuleAlignmentType), 'option' )),
    COMMETHOD(['propput', helpstring(u'Indicates the options for the graticule alignment type.')], HRESULT, 'GraticuleAlignmentType',
              ( ['in'], esriMaplexGraticuleAlignmentType, 'option' )),
    COMMETHOD(['propget', helpstring(u'Indicates the options for the line feature type.')], HRESULT, 'LineFeatureType',
              ( ['retval', 'out'], POINTER(esriMaplexLineFeatureType), 'option' )),
    COMMETHOD(['propput', helpstring(u'Indicates the options for the line feature type.')], HRESULT, 'LineFeatureType',
              ( ['in'], esriMaplexLineFeatureType, 'option' )),
    COMMETHOD(['propget', helpstring(u'Indicates the options for the polygon feature type.')], HRESULT, 'PolygonFeatureType',
              ( ['retval', 'out'], POINTER(esriMaplexPolygonFeatureType), 'option' )),
    COMMETHOD(['propput', helpstring(u'Indicates the options for the polygon feature type.')], HRESULT, 'PolygonFeatureType',
              ( ['in'], esriMaplexPolygonFeatureType, 'option' )),
    COMMETHOD(['propget', helpstring(u'Indicates the options for the anchor point type.')], HRESULT, 'PolygonAnchorPointType',
              ( ['retval', 'out'], POINTER(esriMaplexAnchorPointType), 'option' )),
    COMMETHOD(['propput', helpstring(u'Indicates the options for the anchor point type.')], HRESULT, 'PolygonAnchorPointType',
              ( ['in'], esriMaplexAnchorPointType, 'option' )),
    COMMETHOD(['propget', helpstring(u'Indicates the options for the contour label alignment.')], HRESULT, 'ContourAlignmentType',
              ( ['retval', 'out'], POINTER(esriMaplexContourAlignmentType), 'option' )),
    COMMETHOD(['propput', helpstring(u'Indicates the options for the contour label alignment.')], HRESULT, 'ContourAlignmentType',
              ( ['in'], esriMaplexContourAlignmentType, 'option' )),
    COMMETHOD(['propget', helpstring(u'The maximum angle at which a contour label may be placed.')], HRESULT, 'ContourMaximumAngle',
              ( ['retval', 'out'], POINTER(c_int), 'Angle' )),
    COMMETHOD(['propput', helpstring(u'The maximum angle at which a contour label may be placed.')], HRESULT, 'ContourMaximumAngle',
              ( ['in'], c_int, 'Angle' )),
    COMMETHOD(['propget', helpstring(u'Indicates the options for the contour labed ladder types.')], HRESULT, 'ContourLadderType',
              ( ['retval', 'out'], POINTER(esriMaplexContourLadderType), 'option' )),
    COMMETHOD(['propput', helpstring(u'Indicates the options for the contour labed ladder types.')], HRESULT, 'ContourLadderType',
              ( ['in'], esriMaplexContourLadderType, 'option' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to measure the label offset from the feature geometry.')], HRESULT, 'IsOffsetFromFeatureGeometry',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to measure the label offset from the feature geometry.')], HRESULT, 'IsOffsetFromFeatureGeometry',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to place a label at a secondary offset from the line feature.')], HRESULT, 'EnableSecondaryOffset',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to place a label at a secondary offset from the line feature.')], HRESULT, 'EnableSecondaryOffset',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'The minimum offset associated with a secondary label position.')], HRESULT, 'SecondaryOffsetMinimum',
              ( ['retval', 'out'], POINTER(c_double), 'Offset' )),
    COMMETHOD(['propput', helpstring(u'The minimum offset associated with a secondary label position.')], HRESULT, 'SecondaryOffsetMinimum',
              ( ['in'], c_double, 'Offset' )),
    COMMETHOD(['propget', helpstring(u'The maximum offset associated with a secondary label position.')], HRESULT, 'SecondaryOffsetMaximum',
              ( ['retval', 'out'], POINTER(c_double), 'Offset' )),
    COMMETHOD(['propput', helpstring(u'The maximum offset associated with a secondary label position.')], HRESULT, 'SecondaryOffsetMaximum',
              ( ['in'], c_double, 'Offset' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the label buffer is a hard constraint and must be honored.')], HRESULT, 'IsLabelBufferHardConstraint',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the label buffer is a hard constraint and must be honored.')], HRESULT, 'IsLabelBufferHardConstraint',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the minimum feature size for labeling is based on area.')], HRESULT, 'IsMinimumSizeBasedOnArea',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the minimum feature size for labeling is based on area.')], HRESULT, 'IsMinimumSizeBasedOnArea',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the label can be placed on top of the street feature.')], HRESULT, 'CanPlaceLabelOnTopOfFeature',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the label can be placed on top of the street feature.')], HRESULT, 'CanPlaceLabelOnTopOfFeature',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the leading can be reduced for a stacked label.')], HRESULT, 'CanReduceLeading',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the leading can be reduced for a stacked label.')], HRESULT, 'CanReduceLeading',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether a stacked label may be flipped over to obtain a better position.')], HRESULT, 'CanFlipStackedStreetLabel',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether a stacked label may be flipped over to obtain a better position.')], HRESULT, 'CanFlipStackedStreetLabel',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether a label is to be placed at a fixed position in the polygon.')], HRESULT, 'EnablePolygonFixedPosition',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether a label is to be placed at a fixed position in the polygon.')], HRESULT, 'EnablePolygonFixedPosition',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'The thinning distance is interpreted to be in this unit.')], HRESULT, 'ThinningDistanceUnit',
              ( ['retval', 'out'], POINTER(esriMaplexUnit), 'unit' )),
    COMMETHOD(['propput', helpstring(u'The thinning distance is interpreted to be in this unit.')], HRESULT, 'ThinningDistanceUnit',
              ( ['in'], esriMaplexUnit, 'unit' )),
    COMMETHOD(['propget', helpstring(u'The label repetition interval is interpreted to be in this unit.')], HRESULT, 'RepetitionIntervalUnit',
              ( ['retval', 'out'], POINTER(esriMaplexUnit), 'unit' )),
    COMMETHOD(['propput', helpstring(u'The label repetition interval is interpreted to be in this unit.')], HRESULT, 'RepetitionIntervalUnit',
              ( ['in'], esriMaplexUnit, 'unit' )),
    COMMETHOD(['propget', helpstring(u'The minimum feature size is interpreted to be in this unit.')], HRESULT, 'MinimumFeatureSizeUnit',
              ( ['retval', 'out'], POINTER(esriMaplexUnit), 'unit' )),
    COMMETHOD(['propput', helpstring(u'The minimum feature size is interpreted to be in this unit.')], HRESULT, 'MinimumFeatureSizeUnit',
              ( ['in'], esriMaplexUnit, 'unit' )),
    COMMETHOD(['propget', helpstring(u'The maximum label overrun is interpreted to be in this unit.')], HRESULT, 'MaximumLabelOverrunUnit',
              ( ['retval', 'out'], POINTER(esriMaplexUnit), 'unit' )),
    COMMETHOD(['propput', helpstring(u'The maximum label overrun is interpreted to be in this unit.')], HRESULT, 'MaximumLabelOverrunUnit',
              ( ['in'], esriMaplexUnit, 'unit' )),
]
################################################################
## code template for IMaplexOverposterLayerProperties2 implementation
##class IMaplexOverposterLayerProperties2_Impl(object):
##    def _get(self):
##        u'Indicates the options for the polygon feature type.'
##        #return option
##    def _set(self, option):
##        u'Indicates the options for the polygon feature type.'
##    PolygonFeatureType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, strategy):
##        u'Indicates the priority of a placement strategy when placing text.'
##        #return Priority
##    def _set(self, strategy, Priority):
##        u'Indicates the priority of a placement strategy when placing text.'
##    StrategyPriority = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The thinning distance is interpreted to be in this unit.'
##        #return unit
##    def _set(self, unit):
##        u'The thinning distance is interpreted to be in this unit.'
##    ThinningDistanceUnit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates the options for the anchor point type.'
##        #return option
##    def _set(self, option):
##        u'Indicates the options for the anchor point type.'
##    PolygonAnchorPointType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether the leading can be reduced for a stacked label.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether the leading can be reduced for a stacked label.'
##    CanReduceLeading = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The maximum label overrun is interpreted to be in this unit.'
##        #return unit
##    def _set(self, unit):
##        u'The maximum label overrun is interpreted to be in this unit.'
##    MaximumLabelOverrunUnit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether to measure the label offset from the feature geometry.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether to measure the label offset from the feature geometry.'
##    IsOffsetFromFeatureGeometry = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates the options for the contour label alignment.'
##        #return option
##    def _set(self, option):
##        u'Indicates the options for the contour label alignment.'
##    ContourAlignmentType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The minimum feature size is interpreted to be in this unit.'
##        #return unit
##    def _set(self, unit):
##        u'The minimum feature size is interpreted to be in this unit.'
##    MinimumFeatureSizeUnit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The maximum angle at which a contour label may be placed.'
##        #return Angle
##    def _set(self, Angle):
##        u'The maximum angle at which a contour label may be placed.'
##    ContourMaximumAngle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether the label can be placed on top of the street feature.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether the label can be placed on top of the street feature.'
##    CanPlaceLabelOnTopOfFeature = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether to place a label at a secondary offset from the line feature.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether to place a label at a secondary offset from the line feature.'
##    EnableSecondaryOffset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The maximum offset associated with a secondary label position.'
##        #return Offset
##    def _set(self, Offset):
##        u'The maximum offset associated with a secondary label position.'
##    SecondaryOffsetMaximum = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, zone):
##        u'Indicates the placement priority associated with a zone external to the polygon.'
##        #return Priority
##    def _set(self, zone, Priority):
##        u'Indicates the placement priority associated with a zone external to the polygon.'
##    PolygonExternalZones = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates the options for the contour labed ladder types.'
##        #return option
##    def _set(self, option):
##        u'Indicates the options for the contour labed ladder types.'
##    ContourLadderType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The minimum offset associated with a secondary label position.'
##        #return Offset
##    def _set(self, Offset):
##        u'The minimum offset associated with a secondary label position.'
##    SecondaryOffsetMinimum = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether the label buffer is a hard constraint and must be honored.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether the label buffer is a hard constraint and must be honored.'
##    IsLabelBufferHardConstraint = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether a label is to be placed at a fixed position in the polygon.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether a label is to be placed at a fixed position in the polygon.'
##    EnablePolygonFixedPosition = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates the options for the line feature type.'
##        #return option
##    def _set(self, option):
##        u'Indicates the options for the line feature type.'
##    LineFeatureType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether the minimum feature size for labeling is based on area.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether the minimum feature size for labeling is based on area.'
##    IsMinimumSizeBasedOnArea = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, zone):
##        u'Indicates the placement priority associated with a zone internal to the polygon.'
##        #return Priority
##    def _set(self, zone, Priority):
##        u'Indicates the placement priority associated with a zone internal to the polygon.'
##    PolygonInternalZones = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The label repetition interval is interpreted to be in this unit.'
##        #return unit
##    def _set(self, unit):
##        u'The label repetition interval is interpreted to be in this unit.'
##    RepetitionIntervalUnit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether a stacked label may be flipped over to obtain a better position.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether a stacked label may be flipped over to obtain a better position.'
##    CanFlipStackedStreetLabel = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates the options for the graticule alignment type.'
##        #return option
##    def _set(self, option):
##        u'Indicates the options for the graticule alignment type.'
##    GraticuleAlignmentType = property(_get, _set, doc = _set.__doc__)
##

class IAnnotationClassExtension2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the annotation class.'
    _iid_ = GUID('{75DEF45A-9BF2-DD39-007A-26FFEDAB3190}')
    _idlflags_ = ['oleautomation']
IAnnotationClassExtension2._methods_ = [
    COMMETHOD(['propget', helpstring(u'The display based on the given element.')], HRESULT, 'Display',
              ( ['in'], POINTER(IElement), 'pElement' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay)), 'ppDisplay' )),
]
################################################################
## code template for IAnnotationClassExtension2 implementation
##class IAnnotationClassExtension2_Impl(object):
##    @property
##    def Display(self, pElement):
##        u'The display based on the given element.'
##        #return ppDisplay
##

class IRepresentationLegendClass(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties and methods of a RepresentationLegendClass.'
    _iid_ = GUID('{9543DED1-D4AA-4ECE-B21A-90CE2585C8AD}')
    _idlflags_ = ['oleautomation']
IRepresentationLegendClass._methods_ = [
    COMMETHOD(['propget', helpstring(u'The feature class representation identified by the legend class.')], HRESULT, 'RepresentationClass',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRepresentationClass)), 'repClass' )),
    COMMETHOD(['propget', helpstring(u'The rule ID identified by the legend class.')], HRESULT, 'RuleID',
              ( ['retval', 'out'], POINTER(c_int), 'RuleID' )),
]
################################################################
## code template for IRepresentationLegendClass implementation
##class IRepresentationLegendClass_Impl(object):
##    @property
##    def RepresentationClass(self):
##        u'The feature class representation identified by the legend class.'
##        #return repClass
##
##    @property
##    def RuleID(self):
##        u'The rule ID identified by the legend class.'
##        #return RuleID
##


# values for enumeration 'esriISLFootprintDisplayOptEnum'
esriISLFootprintDisplayAll = 0
esriISLFootprintDisplayPrimaryOnly = 1
esriISLFootprintDisplayOptEnum = c_int # enum
class IMapServerTimeInfo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to core objects contained within the map document.'
    _iid_ = GUID('{BF21CBA1-C295-48AE-B3D5-E275701BCE96}')
    _idlflags_ = ['oleautomation']
IMapServerTimeInfo._methods_ = [
    COMMETHOD(['propget', helpstring(u'TimeExtent of interest that the map as been authored.')], HRESULT, 'FullTimeExtent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITimeExtent)), 'TimeExtent' )),
    COMMETHOD(['propget', helpstring(u'The recommended default time interval to be used to animate the layer/table in the service.')], HRESULT, 'DefaultTimeInterval',
              ( ['retval', 'out'], POINTER(c_double), 'Interval' )),
    COMMETHOD(['propget', helpstring(u'The recommended default time interval units to be used to animate the layer/table in the service.')], HRESULT, 'DefaultTimeIntervalUnits',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriTimeUnits), 'Units' )),
    COMMETHOD(['propget', helpstring(u'The recommended time window expressed in the same units as the time interval for the service.')], HRESULT, 'DefaultTimeWindow',
              ( ['retval', 'out'], POINTER(c_double), 'duration' )),
]
################################################################
## code template for IMapServerTimeInfo implementation
##class IMapServerTimeInfo_Impl(object):
##    @property
##    def DefaultTimeIntervalUnits(self):
##        u'The recommended default time interval units to be used to animate the layer/table in the service.'
##        #return Units
##
##    @property
##    def FullTimeExtent(self):
##        u'TimeExtent of interest that the map as been authored.'
##        #return TimeExtent
##
##    @property
##    def DefaultTimeInterval(self):
##        u'The recommended default time interval to be used to animate the layer/table in the service.'
##        #return Interval
##
##    @property
##    def DefaultTimeWindow(self):
##        u'The recommended time window expressed in the same units as the time interval for the service.'
##        #return duration
##

class IDynamicCacheLayerManager(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to dynamic layers cache management.'
    _iid_ = GUID('{EDA39CE4-100F-4817-9D38-0C62DB03B2B1}')
    _idlflags_ = ['oleautomation']
IDynamicCacheLayerManager._methods_ = [
    COMMETHOD([helpstring(u'Initialize the cache manager with the given map and layer.')], HRESULT, 'Init',
              ( ['in'], POINTER(IMap), 'Map' ),
              ( ['in'], POINTER(ILayer), 'Layer' )),
    COMMETHOD(['propget', helpstring(u'If cache exists, returns the layername plus guid. If cache does not exists, returns nothing.')], HRESULT, 'FolderName',
              ( ['retval', 'out'], POINTER(BSTR), 'cacheFolderName' )),
    COMMETHOD(['propget', helpstring(u'The full path of the cache parent directory if the the cache exists.')], HRESULT, 'FolderPath',
              ( ['retval', 'out'], POINTER(BSTR), 'FolderPath' )),
    COMMETHOD(['propput', helpstring(u'The full path of the cache parent directory if the the cache exists.')], HRESULT, 'FolderPath',
              ( ['in'], BSTR, 'FolderPath' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the layer can have a dynamic cache.')], HRESULT, 'Cacheable',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Cacheable' )),
    COMMETHOD([helpstring(u'Delete the cache structure and tiles from the disk.')], HRESULT, 'Delete'),
    COMMETHOD([helpstring(u'Invalidate a certain area of the cache, according to the given extent. If the input extent is null, invalidates the entire cache. Duoble-buffer does not show changes until new tiles are available.')], HRESULT, 'Invalidate',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'Extent' ),
              ( ['in'], VARIANT_BOOL, 'doubleBuffer' )),
    COMMETHOD(['propget', helpstring(u'The name of the tile format which is used by the cache.')], HRESULT, 'Format',
              ( ['retval', 'out'], POINTER(BSTR), 'Format' )),
    COMMETHOD(['propput', helpstring(u'The name of the tile format which is used by the cache.')], HRESULT, 'Format',
              ( ['in'], BSTR, 'Format' )),
    COMMETHOD([helpstring(u'Try to connect the given layer to a cache.')], HRESULT, 'Connect',
              ( ['in'], BSTR, 'newFolderPath' ),
              ( ['in'], BSTR, 'newFolderName' )),
    COMMETHOD([helpstring(u'Update the cache associated with the layer according to the given extent, between the from-scale to the target-scale and according to the update-mode.')], HRESULT, 'Update',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'Extent' ),
              ( ['in'], c_double, 'fromMapScale' ),
              ( ['in'], c_double, 'targetMapScale' ),
              ( ['in'], esriMapCacheUpdateMode, 'UpdateMode' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the given composite layer cache is consolidated.')], HRESULT, 'ConsolidatedGroupLayer',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'consolidated' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the given composite layer cache is consolidated.')], HRESULT, 'ConsolidatedGroupLayer',
              ( ['in'], VARIANT_BOOL, 'consolidated' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to use a coarse grained drawing in case where there is nothing else to render while waiting for the current map scale data to be cooked.')], HRESULT, 'StrictOnDemandMode',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'StrictOnDemandMode' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to use a coarse grained drawing in case where there is nothing else to render while waiting for the current map scale data to be cooked.')], HRESULT, 'StrictOnDemandMode',
              ( ['in'], VARIANT_BOOL, 'StrictOnDemandMode' )),
    COMMETHOD(['propget', helpstring(u'The maximum scale by which tiles are to be generated.')], HRESULT, 'MaxCacheScale',
              ( ['retval', 'out'], POINTER(c_double), 'MaxScale' )),
    COMMETHOD(['propput', helpstring(u'The maximum scale by which tiles are to be generated.')], HRESULT, 'MaxCacheScale',
              ( ['in'], c_double, 'MaxScale' )),
    COMMETHOD(['propget', helpstring(u'The threshold to determine the level of detail to use. Values range from 0 to 100, where 100 means always choose coarse data.')], HRESULT, 'DetailsThreshold',
              ( ['retval', 'out'], POINTER(c_double), 'threshold' )),
    COMMETHOD(['propput', helpstring(u'The threshold to determine the level of detail to use. Values range from 0 to 100, where 100 means always choose coarse data.')], HRESULT, 'DetailsThreshold',
              ( ['in'], c_double, 'threshold' )),
    COMMETHOD(['propget', helpstring(u'Number of coarse level data to draw while the current LOD tiles are being processed.')], HRESULT, 'ProgressiveDrawingLevels',
              ( ['retval', 'out'], POINTER(c_int), 'numOfProgressiveLevels' )),
    COMMETHOD(['propput', helpstring(u'Number of coarse level data to draw while the current LOD tiles are being processed.')], HRESULT, 'ProgressiveDrawingLevels',
              ( ['in'], c_int, 'numOfProgressiveLevels' )),
    COMMETHOD(['propget', helpstring(u'Number of coarse level data to fetch while the current LOD tiles are being processed.')], HRESULT, 'ProgressiveFetchingLevels',
              ( ['retval', 'out'], POINTER(c_int), 'numOfProgressiveLevels' )),
    COMMETHOD(['propput', helpstring(u'Number of coarse level data to fetch while the current LOD tiles are being processed.')], HRESULT, 'ProgressiveFetchingLevels',
              ( ['in'], c_int, 'numOfProgressiveLevels' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to use the default coarse texture while the requested tile is being processed.')], HRESULT, 'AlwaysDrawCoarsestLevel',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'AlwaysDrawCoarsestLevel' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to use the default coarse texture while the requested tile is being processed.')], HRESULT, 'AlwaysDrawCoarsestLevel',
              ( ['in'], VARIANT_BOOL, 'AlwaysDrawCoarsestLevel' )),
]
################################################################
## code template for IDynamicCacheLayerManager implementation
##class IDynamicCacheLayerManager_Impl(object):
##    def _get(self):
##        u'Number of coarse level data to draw while the current LOD tiles are being processed.'
##        #return numOfProgressiveLevels
##    def _set(self, numOfProgressiveLevels):
##        u'Number of coarse level data to draw while the current LOD tiles are being processed.'
##    ProgressiveDrawingLevels = property(_get, _set, doc = _set.__doc__)
##
##    def Invalidate(self, Extent, doubleBuffer):
##        u'Invalidate a certain area of the cache, according to the given extent. If the input extent is null, invalidates the entire cache. Duoble-buffer does not show changes until new tiles are available.'
##        #return 
##
##    @property
##    def Cacheable(self):
##        u'Indicates whether the layer can have a dynamic cache.'
##        #return Cacheable
##
##    def _get(self):
##        u'Number of coarse level data to fetch while the current LOD tiles are being processed.'
##        #return numOfProgressiveLevels
##    def _set(self, numOfProgressiveLevels):
##        u'Number of coarse level data to fetch while the current LOD tiles are being processed.'
##    ProgressiveFetchingLevels = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The maximum scale by which tiles are to be generated.'
##        #return MaxScale
##    def _set(self, MaxScale):
##        u'The maximum scale by which tiles are to be generated.'
##    MaxCacheScale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether to use the default coarse texture while the requested tile is being processed.'
##        #return AlwaysDrawCoarsestLevel
##    def _set(self, AlwaysDrawCoarsestLevel):
##        u'Indicates whether to use the default coarse texture while the requested tile is being processed.'
##    AlwaysDrawCoarsestLevel = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The name of the tile format which is used by the cache.'
##        #return Format
##    def _set(self, Format):
##        u'The name of the tile format which is used by the cache.'
##    Format = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether the given composite layer cache is consolidated.'
##        #return consolidated
##    def _set(self, consolidated):
##        u'Indicates whether the given composite layer cache is consolidated.'
##    ConsolidatedGroupLayer = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The threshold to determine the level of detail to use. Values range from 0 to 100, where 100 means always choose coarse data.'
##        #return threshold
##    def _set(self, threshold):
##        u'The threshold to determine the level of detail to use. Values range from 0 to 100, where 100 means always choose coarse data.'
##    DetailsThreshold = property(_get, _set, doc = _set.__doc__)
##
##    def Update(self, Extent, fromMapScale, targetMapScale, UpdateMode):
##        u'Update the cache associated with the layer according to the given extent, between the from-scale to the target-scale and according to the update-mode.'
##        #return 
##
##    @property
##    def FolderName(self):
##        u'If cache exists, returns the layername plus guid. If cache does not exists, returns nothing.'
##        #return cacheFolderName
##
##    def Init(self, Map, Layer):
##        u'Initialize the cache manager with the given map and layer.'
##        #return 
##
##    def Connect(self, newFolderPath, newFolderName):
##        u'Try to connect the given layer to a cache.'
##        #return 
##
##    def _get(self):
##        u'Indicates whether to use a coarse grained drawing in case where there is nothing else to render while waiting for the current map scale data to be cooked.'
##        #return StrictOnDemandMode
##    def _set(self, StrictOnDemandMode):
##        u'Indicates whether to use a coarse grained drawing in case where there is nothing else to render while waiting for the current map scale data to be cooked.'
##    StrictOnDemandMode = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The full path of the cache parent directory if the the cache exists.'
##        #return FolderPath
##    def _set(self, FolderPath):
##        u'The full path of the cache parent directory if the the cache exists.'
##    FolderPath = property(_get, _set, doc = _set.__doc__)
##
##    def Delete(self):
##        u'Delete the cache structure and tiles from the disk.'
##        #return 
##

class IMarker3DRotationAngles(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that get and put 3D rotation angles in 3D marker symbols.'
    _iid_ = GUID('{973D0FBB-0FE4-49DF-8DBC-ECDA8FE6A566}')
    _idlflags_ = ['oleautomation']
IMarker3DRotationAngles._methods_ = [
    COMMETHOD([helpstring(u"Gets the symbol's rotation angles.")], HRESULT, 'GetRotationAngles',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol), 'pSymbol' ),
              ( ['out'], POINTER(c_double), 'pAngleX' ),
              ( ['out'], POINTER(c_double), 'pAngleY' ),
              ( ['out'], POINTER(c_double), 'pAngleZ' )),
    COMMETHOD([helpstring(u"Sets the symbol's rotation angles to the given values.")], HRESULT, 'SetRotationAngles',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol), 'pSymbol' ),
              ( ['in'], c_double, 'angleX' ),
              ( ['in'], c_double, 'angleY' ),
              ( ['in'], c_double, 'angleZ' )),
]
################################################################
## code template for IMarker3DRotationAngles implementation
##class IMarker3DRotationAngles_Impl(object):
##    def GetRotationAngles(self, pSymbol):
##        u"Gets the symbol's rotation angles."
##        #return pAngleX, pAngleY, pAngleZ
##
##    def SetRotationAngles(self, pSymbol, angleX, angleY, angleZ):
##        u"Sets the symbol's rotation angles to the given values."
##        #return 
##

class HotLinkVBScriptEngine(CoClass):
    u'An object that parses hotlink expressions using VBScript.'
    _reg_clsid_ = GUID('{55EF0065-FDFF-469B-B693-8EBFC56B3B3B}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IAnnotationExpressionEngine(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that work with low level information about a script based labeling expression.'
    _iid_ = GUID('{AA157206-E079-11D2-9F48-00C04F6BC6A5}')
    _idlflags_ = ['oleautomation']
class ICodedValueAttributes(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that determine if coded values are used.'
    _iid_ = GUID('{ADCF5590-4250-4D45-B8CE-436FEF905829}')
    _idlflags_ = ['oleautomation']
HotLinkVBScriptEngine._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IAnnotationExpressionEngine, ICodedValueAttributes, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

class IImageServerLayer2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to additional members that control an image server layer.'
    _iid_ = GUID('{6DB867A4-D78E-4471-A86D-6E455FC680D8}')
    _idlflags_ = []
IImageServerLayer2._methods_ = [
    COMMETHOD(['propget', helpstring(u'The image service info xml.')], HRESULT, 'ServiceInfo',
              ( ['retval', 'out'], POINTER(BSTR), 'pServiceInfo' )),
    COMMETHOD(['propget', helpstring(u'The image service properties xml.')], HRESULT, 'ServiceProperties',
              ( ['retval', 'out'], POINTER(BSTR), 'pServiceProperties' )),
    COMMETHOD([helpstring(u'The image service metadata xml.')], HRESULT, 'GetMetaData',
              ( ['in'], BSTR, 'requestString' ),
              ( ['retval', 'out'], POINTER(BSTR), 'pMetadata' )),
    COMMETHOD([helpstring(u'The image metadata xml.')], HRESULT, 'GetImageMetadata',
              ( ['in'], BSTR, 'levelOfDetail' ),
              ( ['retval', 'out'], POINTER(BSTR), 'pImageMetaData' )),
    COMMETHOD([helpstring(u'Gets the value of the given property.')], HRESULT, 'GetProperty',
              ( ['in'], BSTR, 'Name' ),
              ( ['retval', 'out'], POINTER(BSTR), 'pValue' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the backend data source is AIS.')], HRESULT, 'IsDataSourceAIS',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pDsIsAIS' )),
    COMMETHOD(['propget', helpstring(u'The image service mosaic properties xml.')], HRESULT, 'MosaicProperties',
              ( ['retval', 'out'], POINTER(BSTR), 'pMosaicProperties' )),
    COMMETHOD(['propput', helpstring(u'The image service mosaic properties xml.')], HRESULT, 'MosaicProperties',
              ( ['in'], BSTR, 'pMosaicProperties' )),
    COMMETHOD(['propget', helpstring(u'The image service viewpoint properties xml.')], HRESULT, 'ViewpointProperties',
              ( ['retval', 'out'], POINTER(BSTR), 'pViewpointProperties' )),
    COMMETHOD(['propput', helpstring(u'The image service viewpoint properties xml.')], HRESULT, 'ViewpointProperties',
              ( ['in'], BSTR, 'pViewpointProperties' )),
]
################################################################
## code template for IImageServerLayer2 implementation
##class IImageServerLayer2_Impl(object):
##    def GetProperty(self, Name):
##        u'Gets the value of the given property.'
##        #return pValue
##
##    @property
##    def ServiceInfo(self):
##        u'The image service info xml.'
##        #return pServiceInfo
##
##    def GetMetaData(self, requestString):
##        u'The image service metadata xml.'
##        #return pMetadata
##
##    @property
##    def ServiceProperties(self):
##        u'The image service properties xml.'
##        #return pServiceProperties
##
##    @property
##    def IsDataSourceAIS(self):
##        u'Indicates if the backend data source is AIS.'
##        #return pDsIsAIS
##
##    def GetImageMetadata(self, levelOfDetail):
##        u'The image metadata xml.'
##        #return pImageMetaData
##
##    def _get(self):
##        u'The image service viewpoint properties xml.'
##        #return pViewpointProperties
##    def _set(self, pViewpointProperties):
##        u'The image service viewpoint properties xml.'
##    ViewpointProperties = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The image service mosaic properties xml.'
##        #return pMosaicProperties
##    def _set(self, pMosaicProperties):
##        u'The image service mosaic properties xml.'
##    MosaicProperties = property(_get, _set, doc = _set.__doc__)
##

class ICadastralFabricParcelLayer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the cadastral fabric parcel layer.'
    _iid_ = GUID('{78F0990C-BABC-4105-B232-F4C1C7D0F44E}')
    _idlflags_ = ['oleautomation']
ICadastralFabricParcelLayer._methods_ = [
    COMMETHOD(['propget', helpstring(u'The number of parcel layers.')], HRESULT, 'ParcelCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'Parcel layer at the specified index.')], HRESULT, 'ParcelSubLayer',
              ( ['in'], c_int, 'Layer' ),
              ( ['retval', 'out'], POINTER(POINTER(IFeatureLayer)), 'ppLayer' )),
]
################################################################
## code template for ICadastralFabricParcelLayer implementation
##class ICadastralFabricParcelLayer_Impl(object):
##    @property
##    def ParcelSubLayer(self, Layer):
##        u'Parcel layer at the specified index.'
##        #return ppLayer
##
##    @property
##    def ParcelCount(self):
##        u'The number of parcel layers.'
##        #return Count
##

class IDataSourceHelperLayer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that help repair/replace data sources at the Layer Level.'
    _iid_ = GUID('{E448A908-20BE-477E-BB03-B948A4B97EBF}')
    _idlflags_ = ['oleautomation']
IDataSourceHelperLayer._methods_ = [
    COMMETHOD([helpstring(u"Replaces the layer's IName with the given IName.")], HRESULT, 'ReplaceName',
              ( ['in'], POINTER(ILayer), 'pLayer' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName), 'pName' ),
              ( ['in'], VARIANT_BOOL, 'validate' )),
    COMMETHOD([helpstring(u"Replaces the layer's workspace path name with the given workspace path name; Also does find and replace of parts of the workspace path name.")], HRESULT, 'FindAndReplaceWorkspaceNamePath',
              ( ['in'], POINTER(ILayer), 'pLayer' ),
              ( ['in'], BSTR, 'oldWorkspaceName' ),
              ( ['in'], BSTR, 'newWorkspaceName' ),
              ( ['in'], VARIANT_BOOL, 'validate' )),
]
################################################################
## code template for IDataSourceHelperLayer implementation
##class IDataSourceHelperLayer_Impl(object):
##    def ReplaceName(self, pLayer, pName, validate):
##        u"Replaces the layer's IName with the given IName."
##        #return 
##
##    def FindAndReplaceWorkspaceNamePath(self, pLayer, oldWorkspaceName, newWorkspaceName, validate):
##        u"Replaces the layer's workspace path name with the given workspace path name; Also does find and replace of parts of the workspace path name."
##        #return 
##

ILayerFactory._methods_ = [
    COMMETHOD(['propget', helpstring(u'Public name of the factory.')], HRESULT, 'PublicName',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propget', helpstring(u'Category name.')], HRESULT, 'LayerCategory',
              ( ['retval', 'out'], POINTER(BSTR), 'Category' )),
    COMMETHOD([helpstring(u'Loads a set of layers.')], HRESULT, 'LoadLayers',
              ( ['retval', 'out'], POINTER(POINTER(IEnumLayer)), 'Layers' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the factory can create a layer based upon the specified object.')], HRESULT, 'CanCreate',
              ( ['in'], POINTER(IUnknown), 'inputObject' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'ok' )),
    COMMETHOD([helpstring(u'Creates layer(s) based on the specified object.')], HRESULT, 'Create',
              ( ['in'], POINTER(IUnknown), 'inputObject' ),
              ( ['retval', 'out'], POINTER(POINTER(IEnumLayer)), 'Layers' )),
]
################################################################
## code template for ILayerFactory implementation
##class ILayerFactory_Impl(object):
##    def LoadLayers(self):
##        u'Loads a set of layers.'
##        #return Layers
##
##    def Create(self, inputObject):
##        u'Creates layer(s) based on the specified object.'
##        #return Layers
##
##    @property
##    def CanCreate(self, inputObject):
##        u'Indicates if the factory can create a layer based upon the specified object.'
##        #return ok
##
##    @property
##    def PublicName(self):
##        u'Public name of the factory.'
##        #return Name
##
##    @property
##    def LayerCategory(self):
##        u'Category name.'
##        #return Category
##

class DynamicCacheLayerManager(CoClass):
    u'Dynamic cache layer management utility class.'
    _reg_clsid_ = GUID('{67EFDB3D-2895-4F30-ADE2-9496BF7BBD1B}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IDynamicCacheLayerManager2(IDynamicCacheLayerManager):
    _case_insensitive_ = True
    u'Provides access to dynamic layers cache management.'
    _iid_ = GUID('{E5AEC75C-5866-4D71-BCCE-9D331E679027}')
    _idlflags_ = ['oleautomation']
DynamicCacheLayerManager._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDynamicCacheLayerManager, IDynamicCacheLayerManager2]

class DynamicHit(CoClass):
    u'dynamic hit-test results class.'
    _reg_clsid_ = GUID('{BDF66BA1-838B-49F8-8422-33FDB78A73C7}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IDynamicHit(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to dynamic hit-test results.'
    _iid_ = GUID('{E9A57BD8-BF74-4502-AF71-B1DE1168A9CC}')
    _idlflags_ = ['oleautomation']
DynamicHit._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDynamicHit]

class IFrameProperties(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the General properties for a frame.'
    _iid_ = GUID('{D1B1B855-5885-4D7F-A444-A02E3E1078C3}')
    _idlflags_ = ['oleautomation']
IFrameProperties._methods_ = [
    COMMETHOD(['propget', helpstring(u'Frame border used by this element.')], HRESULT, 'Border',
              ( ['retval', 'out'], POINTER(POINTER(IBorder)), 'Border' )),
    COMMETHOD(['propput', helpstring(u'Frame border used by this element.')], HRESULT, 'Border',
              ( ['in'], POINTER(IBorder), 'Border' )),
    COMMETHOD(['propget', helpstring(u'Frame background used by this element.')], HRESULT, 'Background',
              ( ['retval', 'out'], POINTER(POINTER(IBackground)), 'Background' )),
    COMMETHOD(['propput', helpstring(u'Frame background used by this element.')], HRESULT, 'Background',
              ( ['in'], POINTER(IBackground), 'Background' )),
    COMMETHOD(['propget', helpstring(u'Frame shadow used by this element.')], HRESULT, 'Shadow',
              ( ['retval', 'out'], POINTER(POINTER(IShadow)), 'Shadow' )),
    COMMETHOD(['propput', helpstring(u'Frame shadow used by this element.')], HRESULT, 'Shadow',
              ( ['in'], POINTER(IShadow), 'Shadow' )),
]
################################################################
## code template for IFrameProperties implementation
##class IFrameProperties_Impl(object):
##    def _get(self):
##        u'Frame shadow used by this element.'
##        #return Shadow
##    def _set(self, Shadow):
##        u'Frame shadow used by this element.'
##    Shadow = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Frame border used by this element.'
##        #return Border
##    def _set(self, Border):
##        u'Frame border used by this element.'
##    Border = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Frame background used by this element.'
##        #return Background
##    def _set(self, Background):
##        u'Frame background used by this element.'
##    Background = property(_get, _set, doc = _set.__doc__)
##

class ImageServerLP(CoClass):
    u'Image Server LAN Proxy.'
    _reg_clsid_ = GUID('{5910BE43-F1C9-4054-BC0F-404ECEAF692D}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
ImageServerLP._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._746F6817_89BB_4490_9829_83CA25FD505A_0_10_2.IAGSServerObject, comtypes.gen._746F6817_89BB_4490_9829_83CA25FD505A_0_10_2.IAGSServerObject2, IImageServer, IImageServer2, IImageServer3, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, ITiledImageServer]

class IFeatureIDSet(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that work with a set of features ids.'
    _iid_ = GUID('{D5BB4B87-E0A1-11D2-9F4D-00C04F6BC78E}')
    _idlflags_ = ['oleautomation']
IFeatureRenderer._methods_ = [
    COMMETHOD([helpstring(u'Indicates if the specified feature class can be rendered on the given display.')], HRESULT, 'CanRender',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClass), 'featClass' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'result' )),
    COMMETHOD([helpstring(u'Prepares the query filter for the rendering process.')], HRESULT, 'PrepareFilter',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClass), 'fc' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'queryFilter' )),
    COMMETHOD([helpstring(u'Draws features from the specified cursor on the given display.')], HRESULT, 'Draw',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureCursor), 'Cursor' ),
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriDrawPhase, 'DrawPhase' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'TrackCancel' )),
    COMMETHOD(['propget', helpstring(u'Symbol used to draw the specified feature.')], HRESULT, 'SymbolByFeature',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeature), 'Feature' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol)), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'Indicates if renderer uses the specified draw phase.')], HRESULT, 'RenderPhase',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriDrawPhase, 'DrawPhase' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'result' )),
    COMMETHOD(['propputref', helpstring(u'An object reference to a temporary drawing exclusion set.')], HRESULT, 'ExclusionSet',
              ( ['in'], POINTER(IFeatureIDSet), 'rhs' )),
]
################################################################
## code template for IFeatureRenderer implementation
##class IFeatureRenderer_Impl(object):
##    def Draw(self, Cursor, DrawPhase, Display, TrackCancel):
##        u'Draws features from the specified cursor on the given display.'
##        #return 
##
##    def PrepareFilter(self, fc, queryFilter):
##        u'Prepares the query filter for the rendering process.'
##        #return 
##
##    @property
##    def RenderPhase(self, DrawPhase):
##        u'Indicates if renderer uses the specified draw phase.'
##        #return result
##
##    def ExclusionSet(self, rhs):
##        u'An object reference to a temporary drawing exclusion set.'
##        #return 
##
##    def CanRender(self, featClass, Display):
##        u'Indicates if the specified feature class can be rendered on the given display.'
##        #return result
##
##    @property
##    def SymbolByFeature(self, Feature):
##        u'Symbol used to draw the specified feature.'
##        #return Symbol
##

class IMapTimeDescription(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to time properties of a MapDescription.'
    _iid_ = GUID('{AA4291A6-8C04-4519-8AA5-4EDB246F726B}')
    _idlflags_ = ['oleautomation']
IMapTimeDescription._methods_ = [
    COMMETHOD(['propget', helpstring(u'Time value that will be used by the time aware content of the map.')], HRESULT, 'TimeValue',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITimeValue)), 'TimeValue' )),
    COMMETHOD(['propputref', helpstring(u'Time value that will be used by the time aware content of the map.')], HRESULT, 'TimeValue',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITimeValue), 'TimeValue' )),
    COMMETHOD(['propget', helpstring(u'Time reference used by the time aware content.')], HRESULT, 'TimeReference',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITimeReference)), 'TimeReference' )),
    COMMETHOD(['propputref', helpstring(u'Time reference used by the time aware content.')], HRESULT, 'TimeReference',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITimeReference), 'TimeReference' )),
]
################################################################
## code template for IMapTimeDescription implementation
##class IMapTimeDescription_Impl(object):
##    def TimeValue(self, TimeValue):
##        u'Time value that will be used by the time aware content of the map.'
##        #return 
##
##    def TimeReference(self, TimeReference):
##        u'Time reference used by the time aware content.'
##        #return 
##

IFeatureExportInfoGenerator._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The layer fields.')], HRESULT, 'LayerFields',
              ( ['in'], POINTER(ILayerFields), 'rhs' )),
    COMMETHOD(['propputref', helpstring(u'The hyperlink container.')], HRESULT, 'HyperlinkContainer',
              ( ['in'], POINTER(IHyperlinkContainer), 'rhs' )),
    COMMETHOD(['propputref', helpstring(u'The hotlink container.')], HRESULT, 'HotlinkContainer',
              ( ['in'], POINTER(IHotlinkContainer), 'rhs' )),
    COMMETHOD([helpstring(u'Adds the exported fields to the filter. Needs layer fields.')], HRESULT, 'PrepareExportFilter',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClass), 'fc' ),
              ( [], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'Filter' )),
    COMMETHOD([helpstring(u'Generates export information (attributes) for a feature into the display. Needs layer fields.')], HRESULT, 'GenerateFeatureInfo',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeature), 'Feature' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' )),
    COMMETHOD([helpstring(u'Generates export information (hyperlinks, hotlinks) for a feature into the display.')], HRESULT, 'GenerateHyperlinkInfo',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeature), 'Feature' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' )),
    COMMETHOD([helpstring(u'Generates export information that a feature is starting to draw.')], HRESULT, 'BeginFeature',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeature), 'Feature' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' )),
    COMMETHOD([helpstring(u'Generates export information that a feature finished to draw.')], HRESULT, 'EndFeature',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' )),
    COMMETHOD([helpstring(u'Generates export information to begin the exporting of feature attributes.')], HRESULT, 'BeginFeatureAttributes',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' )),
    COMMETHOD([helpstring(u'Generates export information for a feature attribute.')], HRESULT, 'AddFeatureAttribute',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriFieldType, 'FieldType' ),
              ( ['in'], BSTR, 'FieldName' ),
              ( ['in'], BSTR, 'fieldValue' )),
    COMMETHOD([helpstring(u'Generates export information to end the exportng of feature attributes.')], HRESULT, 'EndFeatureAttributes',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' )),
]
################################################################
## code template for IFeatureExportInfoGenerator implementation
##class IFeatureExportInfoGenerator_Impl(object):
##    def EndFeatureAttributes(self, Display):
##        u'Generates export information to end the exportng of feature attributes.'
##        #return 
##
##    def HyperlinkContainer(self, rhs):
##        u'The hyperlink container.'
##        #return 
##
##    def BeginFeatureAttributes(self, Display):
##        u'Generates export information to begin the exporting of feature attributes.'
##        #return 
##
##    def BeginFeature(self, Feature, Display):
##        u'Generates export information that a feature is starting to draw.'
##        #return 
##
##    def EndFeature(self, Display):
##        u'Generates export information that a feature finished to draw.'
##        #return 
##
##    def PrepareExportFilter(self, fc, Filter):
##        u'Adds the exported fields to the filter. Needs layer fields.'
##        #return 
##
##    def AddFeatureAttribute(self, Display, FieldType, FieldName, fieldValue):
##        u'Generates export information for a feature attribute.'
##        #return 
##
##    def LayerFields(self, rhs):
##        u'The layer fields.'
##        #return 
##
##    def HotlinkContainer(self, rhs):
##        u'The hotlink container.'
##        #return 
##
##    def GenerateHyperlinkInfo(self, Feature, Display):
##        u'Generates export information (hyperlinks, hotlinks) for a feature into the display.'
##        #return 
##
##    def GenerateFeatureInfo(self, Feature, Display):
##        u'Generates export information (attributes) for a feature into the display. Needs layer fields.'
##        #return 
##

class IGeoImageDescription(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control an image description.'
    _iid_ = GUID('{03B73B41-D7DF-4A25-A1C1-82F126F4D2F3}')
    _idlflags_ = ['oleautomation']
class IAISRequest(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that controls an AIS request.'
    _iid_ = GUID('{E55EF83E-4042-49C6-8B54-BB0C3FFA982F}')
    _idlflags_ = ['oleautomation']
IImageServer._methods_ = [
    COMMETHOD(['propget', helpstring(u'The Image Server version number.')], HRESULT, 'Version',
              ( ['retval', 'out'], POINTER(c_float), 'pVersion' )),
    COMMETHOD(['propget', helpstring(u'The properties of the image service provided.')], HRESULT, 'ServiceInfo',
              ( ['retval', 'out'], POINTER(POINTER(IImageServiceInfo)), 'ppServiceInfo' )),
    COMMETHOD([helpstring(u'Gets an image for a given image description.')], HRESULT, 'GetImage',
              ( ['in'], POINTER(IGeoImageDescription), 'pImageDescription' ),
              ( ['retval', 'out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'pData' )),
    COMMETHOD([helpstring(u'Exports into a well-known image for a given image description.')], HRESULT, 'ExportImage',
              ( ['in'], POINTER(IGeoImageDescription), 'pImageDescription' ),
              ( ['in'], POINTER(IImageType), 'pImageType' ),
              ( ['retval', 'out'], POINTER(POINTER(IImageResult)), 'ppImage' )),
    COMMETHOD(['restricted', helpstring(u'Executes an AIS request.')], HRESULT, 'ExecuteAISRequest',
              ( ['in'], POINTER(IAISRequest), 'pRequest' ),
              ( ['retval', 'out'], POINTER(BSTR), 'pResponse' )),
]
################################################################
## code template for IImageServer implementation
##class IImageServer_Impl(object):
##    def ExecuteAISRequest(self, pRequest):
##        u'Executes an AIS request.'
##        #return pResponse
##
##    def ExportImage(self, pImageDescription, pImageType):
##        u'Exports into a well-known image for a given image description.'
##        #return ppImage
##
##    @property
##    def Version(self):
##        u'The Image Server version number.'
##        #return pVersion
##
##    def GetImage(self, pImageDescription):
##        u'Gets an image for a given image description.'
##        #return pData
##
##    @property
##    def ServiceInfo(self):
##        u'The properties of the image service provided.'
##        #return ppServiceInfo
##

IImageServer2._methods_ = [
    COMMETHOD([helpstring(u'Exports into a well-known image with a correct aspect ratio for a given image description.')], HRESULT, 'ExportMapImage',
              ( ['in'], POINTER(IGeoImageDescription), 'pImageDescription' ),
              ( ['in'], POINTER(IImageType), 'pImageType' ),
              ( ['retval', 'out'], POINTER(POINTER(IMapImage)), 'ppImage' )),
]
################################################################
## code template for IImageServer2 implementation
##class IImageServer2_Impl(object):
##    def ExportMapImage(self, pImageDescription, pImageType):
##        u'Exports into a well-known image with a correct aspect ratio for a given image description.'
##        #return ppImage
##

IScaleBar2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Number of units in one major division.')], HRESULT, 'Division',
              ( ['retval', 'out'], POINTER(c_double), 'Units' )),
    COMMETHOD(['propput', helpstring(u'Number of units in one major division.')], HRESULT, 'Division',
              ( ['in'], c_double, 'Units' )),
    COMMETHOD(['propget', helpstring(u'Total number of divisions (including those before zero).')], HRESULT, 'Divisions',
              ( ['retval', 'out'], POINTER(c_short), 'Count' )),
    COMMETHOD(['propput', helpstring(u'Total number of divisions (including those before zero).')], HRESULT, 'Divisions',
              ( ['in'], c_short, 'Count' )),
    COMMETHOD(['propget', helpstring(u'Number of divisions to the left of zero.')], HRESULT, 'DivisionsBeforeZero',
              ( ['retval', 'out'], POINTER(c_short), 'Count' )),
    COMMETHOD(['propput', helpstring(u'Number of divisions to the left of zero.')], HRESULT, 'DivisionsBeforeZero',
              ( ['in'], c_short, 'Count' )),
    COMMETHOD(['propget', helpstring(u'Number of subdivisions per major division.')], HRESULT, 'Subdivisions',
              ( ['retval', 'out'], POINTER(c_short), 'Units' )),
    COMMETHOD(['propput', helpstring(u'Number of subdivisions per major division.')], HRESULT, 'Subdivisions',
              ( ['in'], c_short, 'Units' )),
    COMMETHOD(['propget', helpstring(u'The units reported.')], HRESULT, 'Units',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits), 'Units' )),
    COMMETHOD(['propput', helpstring(u'The units reported.')], HRESULT, 'Units',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits, 'Units' )),
    COMMETHOD(['propget', helpstring(u'The unit label.')], HRESULT, 'UnitLabel',
              ( ['retval', 'out'], POINTER(BSTR), 'UnitLabel' )),
    COMMETHOD(['propput', helpstring(u'The unit label.')], HRESULT, 'UnitLabel',
              ( ['in'], BSTR, 'UnitLabel' )),
    COMMETHOD(['propget', helpstring(u'Vertical positioning of the unit label.')], HRESULT, 'UnitLabelPosition',
              ( ['retval', 'out'], POINTER(esriScaleBarPos), 'position' )),
    COMMETHOD(['propput', helpstring(u'Vertical positioning of the unit label.')], HRESULT, 'UnitLabelPosition',
              ( ['in'], esriScaleBarPos, 'position' )),
    COMMETHOD(['propget', helpstring(u'Gap between the scale bar and the unit label in points (1/72 inch).')], HRESULT, 'UnitLabelGap',
              ( ['retval', 'out'], POINTER(c_double), 'points' )),
    COMMETHOD(['propput', helpstring(u'Gap between the scale bar and the unit label in points (1/72 inch).')], HRESULT, 'UnitLabelGap',
              ( ['in'], c_double, 'points' )),
    COMMETHOD(['propget', helpstring(u'Unit label symbol.')], HRESULT, 'UnitLabelSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol)), 'Symbol' )),
    COMMETHOD(['propput', helpstring(u'Unit label symbol.')], HRESULT, 'UnitLabelSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'The label style indicating which marks are labeled.')], HRESULT, 'LabelFrequency',
              ( ['retval', 'out'], POINTER(esriScaleBarFrequency), 'LabelFrequency' )),
    COMMETHOD(['propput', helpstring(u'The label style indicating which marks are labeled.')], HRESULT, 'LabelFrequency',
              ( ['in'], esriScaleBarFrequency, 'LabelFrequency' )),
    COMMETHOD(['propget', helpstring(u'Number format.')], HRESULT, 'NumberFormat',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.INumberFormat)), 'Format' )),
    COMMETHOD(['propput', helpstring(u'Number format.')], HRESULT, 'NumberFormat',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.INumberFormat), 'Format' )),
    COMMETHOD(['propget', helpstring(u'Vertical positioning of the mark labels.')], HRESULT, 'LabelPosition',
              ( ['retval', 'out'], POINTER(esriVertPosEnum), 'position' )),
    COMMETHOD(['propput', helpstring(u'Vertical positioning of the mark labels.')], HRESULT, 'LabelPosition',
              ( ['in'], esriVertPosEnum, 'position' )),
    COMMETHOD(['propget', helpstring(u'Vertical gap between the bar and the labels in points (1/72 inch).')], HRESULT, 'LabelGap',
              ( ['retval', 'out'], POINTER(c_double), 'points' )),
    COMMETHOD(['propput', helpstring(u'Vertical gap between the bar and the labels in points (1/72 inch).')], HRESULT, 'LabelGap',
              ( ['in'], c_double, 'points' )),
    COMMETHOD(['propget', helpstring(u'Symbol used to draw the labels.')], HRESULT, 'LabelSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol)), 'Symbol' )),
    COMMETHOD(['propput', helpstring(u'Symbol used to draw the labels.')], HRESULT, 'LabelSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'Color used to draw the bar.')], HRESULT, 'BarColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'Color used to draw the bar.')], HRESULT, 'BarColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'Height of the bar in points (1/72 inch).')], HRESULT, 'BarHeight',
              ( ['retval', 'out'], POINTER(c_double), 'points' )),
    COMMETHOD(['propput', helpstring(u'Height of the bar in points (1/72 inch).')], HRESULT, 'BarHeight',
              ( ['in'], c_double, 'points' )),
    COMMETHOD(['propget', helpstring(u'Indicates what happens when scale bar is resized.')], HRESULT, 'ResizeHint',
              ( ['retval', 'out'], POINTER(esriScaleBarResizeHint), 'hint' )),
    COMMETHOD(['propput', helpstring(u'Indicates what happens when scale bar is resized.')], HRESULT, 'ResizeHint',
              ( ['in'], esriScaleBarResizeHint, 'hint' )),
    COMMETHOD([helpstring(u'Sets division and units based on map.')], HRESULT, 'UseMapSettings'),
    COMMETHOD(['propget', helpstring(u'Indicates if common decimal numbers are replaced by a fraction symbol, i.e., 1/2.')], HRESULT, 'UseFractionCharacters',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if common decimal numbers are replaced by a fraction symbol, i.e., 1/2.')], HRESULT, 'UseFractionCharacters',
              ( ['in'], VARIANT_BOOL, 'flag' )),
]
################################################################
## code template for IScaleBar2 implementation
##class IScaleBar2_Impl(object):
##    def _get(self):
##        u'Number of units in one major division.'
##        #return Units
##    def _set(self, Units):
##        u'Number of units in one major division.'
##    Division = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Number of divisions to the left of zero.'
##        #return Count
##    def _set(self, Count):
##        u'Number of divisions to the left of zero.'
##    DivisionsBeforeZero = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The unit label.'
##        #return UnitLabel
##    def _set(self, UnitLabel):
##        u'The unit label.'
##    UnitLabel = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Number format.'
##        #return Format
##    def _set(self, Format):
##        u'Number format.'
##    NumberFormat = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Total number of divisions (including those before zero).'
##        #return Count
##    def _set(self, Count):
##        u'Total number of divisions (including those before zero).'
##    Divisions = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Symbol used to draw the labels.'
##        #return Symbol
##    def _set(self, Symbol):
##        u'Symbol used to draw the labels.'
##    LabelSymbol = property(_get, _set, doc = _set.__doc__)
##
##    def UseMapSettings(self):
##        u'Sets division and units based on map.'
##        #return 
##
##    def _get(self):
##        u'The label style indicating which marks are labeled.'
##        #return LabelFrequency
##    def _set(self, LabelFrequency):
##        u'The label style indicating which marks are labeled.'
##    LabelFrequency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Height of the bar in points (1/72 inch).'
##        #return points
##    def _set(self, points):
##        u'Height of the bar in points (1/72 inch).'
##    BarHeight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Color used to draw the bar.'
##        #return Color
##    def _set(self, Color):
##        u'Color used to draw the bar.'
##    BarColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Number of subdivisions per major division.'
##        #return Units
##    def _set(self, Units):
##        u'Number of subdivisions per major division.'
##    Subdivisions = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates what happens when scale bar is resized.'
##        #return hint
##    def _set(self, hint):
##        u'Indicates what happens when scale bar is resized.'
##    ResizeHint = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Vertical positioning of the mark labels.'
##        #return position
##    def _set(self, position):
##        u'Vertical positioning of the mark labels.'
##    LabelPosition = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Vertical gap between the bar and the labels in points (1/72 inch).'
##        #return points
##    def _set(self, points):
##        u'Vertical gap between the bar and the labels in points (1/72 inch).'
##    LabelGap = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The units reported.'
##        #return Units
##    def _set(self, Units):
##        u'The units reported.'
##    Units = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Gap between the scale bar and the unit label in points (1/72 inch).'
##        #return points
##    def _set(self, points):
##        u'Gap between the scale bar and the unit label in points (1/72 inch).'
##    UnitLabelGap = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Vertical positioning of the unit label.'
##        #return position
##    def _set(self, position):
##        u'Vertical positioning of the unit label.'
##    UnitLabelPosition = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if common decimal numbers are replaced by a fraction symbol, i.e., 1/2.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if common decimal numbers are replaced by a fraction symbol, i.e., 1/2.'
##    UseFractionCharacters = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Unit label symbol.'
##        #return Symbol
##    def _set(self, Symbol):
##        u'Unit label symbol.'
##    UnitLabelSymbol = property(_get, _set, doc = _set.__doc__)
##

IServerLayerExtension._methods_ = [
    COMMETHOD(['propget', helpstring(u'FeatureRenderer used to represent symbology of a feature layer.')], HRESULT, 'ServerProperties',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet)), 'ServerProperties' )),
    COMMETHOD(['propput', helpstring(u'FeatureRenderer used to represent symbology of a feature layer.')], HRESULT, 'ServerProperties',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet), 'ServerProperties' )),
]
################################################################
## code template for IServerLayerExtension implementation
##class IServerLayerExtension_Impl(object):
##    def _get(self):
##        u'FeatureRenderer used to represent symbology of a feature layer.'
##        #return ServerProperties
##    def _set(self, ServerProperties):
##        u'FeatureRenderer used to represent symbology of a feature layer.'
##    ServerProperties = property(_get, _set, doc = _set.__doc__)
##

IEnumLayer._methods_ = [
    COMMETHOD([helpstring(u'The next layer in the set.')], HRESULT, 'Next',
              ( ['retval', 'out'], POINTER(POINTER(ILayer)), 'Layer' )),
    COMMETHOD([helpstring(u'Resets iterator to first layer in the set.')], HRESULT, 'Reset'),
]
################################################################
## code template for IEnumLayer implementation
##class IEnumLayer_Impl(object):
##    def Reset(self):
##        u'Resets iterator to first layer in the set.'
##        #return 
##
##    def Next(self):
##        u'The next layer in the set.'
##        #return Layer
##

IInvalidArea2._methods_ = [
    COMMETHOD([helpstring(u'Invalidates the area occupied by the feature, using the symbolol specified.')], HRESULT, 'AddFeature',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeature), 'Feature' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol), 'Symbol' )),
]
################################################################
## code template for IInvalidArea2 implementation
##class IInvalidArea2_Impl(object):
##    def AddFeature(self, Feature, Symbol):
##        u'Invalidates the area occupied by the feature, using the symbolol specified.'
##        #return 
##

class IBasicMapIdentifyObject(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the basic map identify object.'
    _iid_ = GUID('{976D826B-C8AB-11D4-80F6-00C04FA0ADF8}')
    _idlflags_ = ['oleautomation']
class IBasicMap(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the basic map.'
    _iid_ = GUID('{B9D60C9E-121E-11D4-AB6C-0008C73FD50C}')
    _idlflags_ = ['oleautomation']
IBasicMapIdentifyObject._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The basic map into an identify object.')], HRESULT, 'BasicMap',
              ( ['in'], POINTER(IBasicMap), 'rhs' )),
]
################################################################
## code template for IBasicMapIdentifyObject implementation
##class IBasicMapIdentifyObject_Impl(object):
##    def BasicMap(self, rhs):
##        u'The basic map into an identify object.'
##        #return 
##

class IPluginImageLayer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that controls a plugin image layer.'
    _iid_ = GUID('{493AABC3-CC1F-4782-AFE2-2294E3A4059D}')
    _idlflags_ = ['oleautomation']
IPluginImageLayer._methods_ = [
    COMMETHOD(['propget', helpstring(u'The image data source name.')], HRESULT, 'ImageDataSourceName',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName)), 'ppName' )),
]
################################################################
## code template for IPluginImageLayer implementation
##class IPluginImageLayer_Impl(object):
##    @property
##    def ImageDataSourceName(self):
##        u'The image data source name.'
##        #return ppName
##

class IBasicGeoprocessor(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the basic geoprocessor.'
    _iid_ = GUID('{4C1FD611-F3A3-11D3-9FDE-00C04F6BC78E}')
    _idlflags_ = ['oleautomation']
IBasicGeoprocessor._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The cancel tracker.')], HRESULT, 'CancelTracker',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'rhs' )),
    COMMETHOD(['propget', helpstring(u'The output spatial reference.')], HRESULT, 'SpatialReference',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference)), 'ppSpatialRef' )),
    COMMETHOD(['propput', helpstring(u'The output spatial reference.')], HRESULT, 'SpatialReference',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'ppSpatialRef' )),
    COMMETHOD([helpstring(u'Dissolves features.')], HRESULT, 'Dissolve',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable), 'inputTable' ),
              ( ['in'], VARIANT_BOOL, 'useSelected' ),
              ( ['in'], BSTR, 'dissolveField' ),
              ( ['in'], BSTR, 'summaryFields' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDatasetName), 'outputName' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable)), 'resultTable' )),
    COMMETHOD([helpstring(u'Merges features.')], HRESULT, 'Merge',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'tables' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable), 'fieldsTable' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClassName), 'outputName' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClass)), 'resultFC' )),
    COMMETHOD([helpstring(u'Clips features.')], HRESULT, 'Clip',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable), 'inputTable' ),
              ( ['in'], VARIANT_BOOL, 'useSelectedInput' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable), 'clipTable' ),
              ( ['in'], VARIANT_BOOL, 'useSelectedClip' ),
              ( ['in'], c_double, 'Tolerance' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClassName), 'outputName' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClass)), 'resultFC' )),
    COMMETHOD([helpstring(u'Intersects features.')], HRESULT, 'Intersect',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable), 'inputTable' ),
              ( ['in'], VARIANT_BOOL, 'useSelectedInput' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable), 'overlayTable' ),
              ( ['in'], VARIANT_BOOL, 'useSelectedOverlay' ),
              ( ['in'], c_double, 'Tolerance' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClassName), 'outputName' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClass)), 'resultFC' )),
    COMMETHOD([helpstring(u'Creates a union of features.')], HRESULT, 'Union',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable), 'inputTable' ),
              ( ['in'], VARIANT_BOOL, 'useSelectedInput' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable), 'overlayTable' ),
              ( ['in'], VARIANT_BOOL, 'useSelectedOverlay' ),
              ( ['in'], c_double, 'Tolerance' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClassName), 'outputName' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClass)), 'resultFC' )),
]
################################################################
## code template for IBasicGeoprocessor implementation
##class IBasicGeoprocessor_Impl(object):
##    def Clip(self, inputTable, useSelectedInput, clipTable, useSelectedClip, Tolerance, outputName):
##        u'Clips features.'
##        #return resultFC
##
##    def Union(self, inputTable, useSelectedInput, overlayTable, useSelectedOverlay, Tolerance, outputName):
##        u'Creates a union of features.'
##        #return resultFC
##
##    def _get(self):
##        u'The output spatial reference.'
##        #return ppSpatialRef
##    def _set(self, ppSpatialRef):
##        u'The output spatial reference.'
##    SpatialReference = property(_get, _set, doc = _set.__doc__)
##
##    def Merge(self, tables, fieldsTable, outputName):
##        u'Merges features.'
##        #return resultFC
##
##    def Intersect(self, inputTable, useSelectedInput, overlayTable, useSelectedOverlay, Tolerance, outputName):
##        u'Intersects features.'
##        #return resultFC
##
##    def CancelTracker(self, rhs):
##        u'The cancel tracker.'
##        #return 
##
##    def Dissolve(self, inputTable, useSelected, dissolveField, summaryFields, outputName):
##        u'Dissolves features.'
##        #return resultTable
##

class IDataBrowser(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the data browser.'
    _iid_ = GUID('{3434B651-13F4-11D1-B6B9-080009B996CC}')
    _idlflags_ = ['oleautomation']
IDataBrowser._methods_ = [
    COMMETHOD(['propget', helpstring(u'The database connections installed on the machine.')], HRESULT, 'Databases',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IEnumWorkspace)), 'dbconns' )),
    COMMETHOD(['propget', helpstring(u'The workspaces in the specified path.')], HRESULT, 'Workspaces',
              ( ['in'], BSTR, 'Path' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IEnumWorkspace)), 'Workspaces' )),
    COMMETHOD(['propget', helpstring(u'The datasets registered in the catalog under the specified workspace.')], HRESULT, 'Datasets',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspace), 'Workspace' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IEnumDataset)), 'Datasets' )),
    COMMETHOD(['propget', helpstring(u'The feature classes registered in the catalog under the specified dataset.')], HRESULT, 'FeatureClasses',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataset), 'Dataset' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IEnumFeatureClass)), 'fclasses' )),
]
################################################################
## code template for IDataBrowser implementation
##class IDataBrowser_Impl(object):
##    @property
##    def FeatureClasses(self, Dataset):
##        u'The feature classes registered in the catalog under the specified dataset.'
##        #return fclasses
##
##    @property
##    def Datasets(self, Workspace):
##        u'The datasets registered in the catalog under the specified workspace.'
##        #return Datasets
##
##    @property
##    def Workspaces(self, Path):
##        u'The workspaces in the specified path.'
##        #return Workspaces
##
##    @property
##    def Databases(self):
##        u'The database connections installed on the machine.'
##        #return dbconns
##

class RasterLayerExport(CoClass):
    u'A helper class to export raster data from a raster layer.'
    _reg_clsid_ = GUID('{8DCF4198-4C40-46F3-8C60-9AE25AEC032F}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
RasterLayerExport._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterLayerExport, IRasterLayerExport2, IRasterLayerExport3]

class IServiceLayerImageFormat(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the image format set of service layers.'
    _iid_ = GUID('{6C6CE092-1ED4-4806-AABB-1CA6F0CB166E}')
    _idlflags_ = ['oleautomation']
IServiceLayerImageFormat._methods_ = [
    COMMETHOD(['propget', helpstring(u'The number of output image format supported by Server.')], HRESULT, 'SupportedImageFormatCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The individual output image format supported by Server.')], HRESULT, 'SupportedImageFormat',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(esriImageFormat), 'ImageFormat' )),
    COMMETHOD(['propget', helpstring(u'The image type requested.')], HRESULT, 'RequestedImageType',
              ( ['retval', 'out'], POINTER(esriImageFormat), 'requestedImageFormat' )),
    COMMETHOD(['propput', helpstring(u'The image type requested.')], HRESULT, 'RequestedImageType',
              ( ['in'], esriImageFormat, 'requestedImageFormat' )),
]
################################################################
## code template for IServiceLayerImageFormat implementation
##class IServiceLayerImageFormat_Impl(object):
##    @property
##    def SupportedImageFormatCount(self):
##        u'The number of output image format supported by Server.'
##        #return Count
##
##    @property
##    def SupportedImageFormat(self, Index):
##        u'The individual output image format supported by Server.'
##        #return ImageFormat
##
##    def _get(self):
##        u'The image type requested.'
##        #return requestedImageFormat
##    def _set(self, requestedImageFormat):
##        u'The image type requested.'
##    RequestedImageType = property(_get, _set, doc = _set.__doc__)
##

class IFrameDecoration(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control frame decorations.'
    _iid_ = GUID('{6A75A961-36FC-44A9-8BAF-30195DE20C58}')
    _idlflags_ = ['oleautomation']
IFrameDecoration._methods_ = [
    COMMETHOD(['propget', helpstring(u'Name of the frame decoration.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'Name of the frame decoration.')], HRESULT, 'Name',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'Color of the frame decoration.')], HRESULT, 'Color',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'Color of the frame decoration.')], HRESULT, 'Color',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'Horizontal offset or gap between the decoration and the subject in points.')], HRESULT, 'HorizontalSpacing',
              ( ['retval', 'out'], POINTER(c_double), 'points' )),
    COMMETHOD(['propput', helpstring(u'Horizontal offset or gap between the decoration and the subject in points.')], HRESULT, 'HorizontalSpacing',
              ( ['in'], c_double, 'points' )),
    COMMETHOD(['propget', helpstring(u'Vertical offset or gap between the decoration and the subject in points.')], HRESULT, 'VerticalSpacing',
              ( ['retval', 'out'], POINTER(c_double), 'points' )),
    COMMETHOD(['propput', helpstring(u'Vertical offset or gap between the decoration and the subject in points.')], HRESULT, 'VerticalSpacing',
              ( ['in'], c_double, 'points' )),
    COMMETHOD(['propget', helpstring(u'Amount of corner rounding.  0 = fully square.  100 = fully round.')], HRESULT, 'CornerRounding',
              ( ['retval', 'out'], POINTER(c_short), 'rounding' )),
    COMMETHOD(['propput', helpstring(u'Amount of corner rounding.  0 = fully square.  100 = fully round.')], HRESULT, 'CornerRounding',
              ( ['in'], c_short, 'rounding' )),
    COMMETHOD([helpstring(u'Bounding rectangle of the geometry including the area covered by the border.')], HRESULT, 'QueryBounds',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'Geometry' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'Bounds' )),
    COMMETHOD([helpstring(u'Geometry used to draw the decoration.')], HRESULT, 'GetGeometry',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'Shape' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry)), 'Geometry' )),
    COMMETHOD([helpstring(u'Draws the decoration into the given display object.')], HRESULT, 'Draw',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'Geometry' )),
]
################################################################
## code template for IFrameDecoration implementation
##class IFrameDecoration_Impl(object):
##    def Draw(self, Display, Geometry):
##        u'Draws the decoration into the given display object.'
##        #return 
##
##    def _get(self):
##        u'Name of the frame decoration.'
##        #return Name
##    def _set(self, Name):
##        u'Name of the frame decoration.'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Color of the frame decoration.'
##        #return Color
##    def _set(self, Color):
##        u'Color of the frame decoration.'
##    Color = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Horizontal offset or gap between the decoration and the subject in points.'
##        #return points
##    def _set(self, points):
##        u'Horizontal offset or gap between the decoration and the subject in points.'
##    HorizontalSpacing = property(_get, _set, doc = _set.__doc__)
##
##    def GetGeometry(self, Display, Shape):
##        u'Geometry used to draw the decoration.'
##        #return Geometry
##
##    def _get(self):
##        u'Vertical offset or gap between the decoration and the subject in points.'
##        #return points
##    def _set(self, points):
##        u'Vertical offset or gap between the decoration and the subject in points.'
##    VerticalSpacing = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Amount of corner rounding.  0 = fully square.  100 = fully round.'
##        #return rounding
##    def _set(self, rounding):
##        u'Amount of corner rounding.  0 = fully square.  100 = fully round.'
##    CornerRounding = property(_get, _set, doc = _set.__doc__)
##
##    def QueryBounds(self, Display, Geometry, Bounds):
##        u'Bounding rectangle of the geometry including the area covered by the border.'
##        #return 
##

class IHyperlink(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a dynamic hyperlink (i.e. one that can exist with or without a container).'
    _iid_ = GUID('{3036D35D-EDE5-11D0-87FE-080009EC732A}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'esriHyperlinkType'
esriHyperlinkTypeDocument = 0
esriHyperlinkTypeURL = 1
esriHyperlinkTypeMacro = 2
esriHyperlinkTypeScript = 3
esriHyperlinkType = c_int # enum
IHyperlink._methods_ = [
    COMMETHOD(['propget', helpstring(u'Id for the feature that contains the hyperlink.')], HRESULT, 'FeatureId',
              ( ['retval', 'out'], POINTER(c_int), 'FID' )),
    COMMETHOD(['propput', helpstring(u'Id for the feature that contains the hyperlink.')], HRESULT, 'FeatureId',
              ( ['in'], c_int, 'FID' )),
    COMMETHOD(['propget', helpstring(u'Hyperlink target.')], HRESULT, 'Link',
              ( ['retval', 'out'], POINTER(BSTR), 'Link' )),
    COMMETHOD(['propput', helpstring(u'Hyperlink target.')], HRESULT, 'Link',
              ( ['in'], BSTR, 'Link' )),
    COMMETHOD(['propget', helpstring(u'Hyperlink type.')], HRESULT, 'LinkType',
              ( ['retval', 'out'], POINTER(esriHyperlinkType), 'LinkType' )),
    COMMETHOD(['propput', helpstring(u'Hyperlink type.')], HRESULT, 'LinkType',
              ( ['in'], esriHyperlinkType, 'LinkType' )),
    COMMETHOD([helpstring(u'Jumps to the hyperlink target.')], HRESULT, 'Jump'),
]
################################################################
## code template for IHyperlink implementation
##class IHyperlink_Impl(object):
##    def _get(self):
##        u'Id for the feature that contains the hyperlink.'
##        #return FID
##    def _set(self, FID):
##        u'Id for the feature that contains the hyperlink.'
##    FeatureId = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Hyperlink type.'
##        #return LinkType
##    def _set(self, LinkType):
##        u'Hyperlink type.'
##    LinkType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Hyperlink target.'
##        #return Link
##    def _set(self, Link):
##        u'Hyperlink target.'
##    Link = property(_get, _set, doc = _set.__doc__)
##
##    def Jump(self):
##        u'Jumps to the hyperlink target.'
##        #return 
##


# values for enumeration 'esriBarStyle'
esriRectangleBar = 0
esriPyramidBar = 1
esriInvPyramidBar = 2
esriCylinderBar = 3
esriEllipseBar = 4
esriArrowBar = 5
esriRectGradientBar = 6
esriConeBar = 7
esriBevelBar = 8
esriSlantCubeBar = 9
esriDiamondBar = 10
esriInvArrow = 11
esriInvCone = 12
esriBarStyle = c_int # enum
IGeoImageDescription._methods_ = [
    COMMETHOD(['propget', helpstring(u'The Spatial Reference.')], HRESULT, 'SpatialReference',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference)), 'ppSpatialReference' )),
    COMMETHOD(['propputref', helpstring(u'The Spatial Reference.')], HRESULT, 'SpatialReference',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'ppSpatialReference' )),
    COMMETHOD(['propget', helpstring(u'The extent.')], HRESULT, 'Extent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'ppExtent' )),
    COMMETHOD(['propputref', helpstring(u'The extent.')], HRESULT, 'Extent',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'ppExtent' )),
    COMMETHOD(['propget', helpstring(u'The Width in pixels.')], HRESULT, 'Width',
              ( ['retval', 'out'], POINTER(c_int), 'pNumCols' )),
    COMMETHOD(['propput', helpstring(u'The Width in pixels.')], HRESULT, 'Width',
              ( ['in'], c_int, 'pNumCols' )),
    COMMETHOD(['propget', helpstring(u'The Height in pixels.')], HRESULT, 'Height',
              ( ['retval', 'out'], POINTER(c_int), 'pNumRows' )),
    COMMETHOD(['propput', helpstring(u'The Height in pixels.')], HRESULT, 'Height',
              ( ['in'], c_int, 'pNumRows' )),
    COMMETHOD(['propget', helpstring(u'The data type of the pixels.')], HRESULT, 'PixelType',
              ( ['retval', 'out'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.rstPixelType), 'pPixelType' )),
    COMMETHOD(['propput', helpstring(u'The data type of the pixels.')], HRESULT, 'PixelType',
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.rstPixelType, 'pPixelType' )),
    COMMETHOD(['propget', helpstring(u'The output NoData (background) value.')], HRESULT, 'NoData',
              ( ['retval', 'out'], POINTER(VARIANT), 'pNoData' )),
    COMMETHOD(['propput', helpstring(u'The output NoData (background) value.')], HRESULT, 'NoData',
              ( ['in'], VARIANT, 'pNoData' )),
    COMMETHOD(['propget', helpstring(u'The interpolation method.')], HRESULT, 'Interpolation',
              ( ['retval', 'out'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.rstResamplingTypes), 'pInterpolation' )),
    COMMETHOD(['propput', helpstring(u'The interpolation method.')], HRESULT, 'Interpolation',
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.rstResamplingTypes, 'pInterpolation' )),
    COMMETHOD(['propget', helpstring(u'The compression.')], HRESULT, 'Compression',
              ( ['retval', 'out'], POINTER(BSTR), 'pCompression' )),
    COMMETHOD(['propput', helpstring(u'The compression.')], HRESULT, 'Compression',
              ( ['in'], BSTR, 'pCompression' )),
    COMMETHOD(['propget', helpstring(u'The compression quality.')], HRESULT, 'CompressionQuality',
              ( ['retval', 'out'], POINTER(c_int), 'pQuality' )),
    COMMETHOD(['propput', helpstring(u'The compression quality.')], HRESULT, 'CompressionQuality',
              ( ['in'], c_int, 'pQuality' )),
    COMMETHOD(['propget', helpstring(u'The band selection.')], HRESULT, 'BandSelection',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray)), 'ppBandIDs' )),
    COMMETHOD(['propputref', helpstring(u'The band selection.')], HRESULT, 'BandSelection',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'ppBandIDs' )),
    COMMETHOD(['propput', helpstring(u'The mosaic properties.')], HRESULT, 'MosaicProperties',
              ( ['in'], BSTR, 'pMosaicProperties' )),
    COMMETHOD(['propget', helpstring(u'The mosaic properties.')], HRESULT, 'MosaicProperties',
              ( ['retval', 'out'], POINTER(BSTR), 'pMosaicProperties' )),
    COMMETHOD(['propput', helpstring(u'The viewpoint properties.')], HRESULT, 'ViewpointProperties',
              ( ['in'], BSTR, 'pViewpointProperties' )),
    COMMETHOD(['propget', helpstring(u'The viewpoint properties.')], HRESULT, 'ViewpointProperties',
              ( ['retval', 'out'], POINTER(BSTR), 'pViewpointProperties' )),
]
################################################################
## code template for IGeoImageDescription implementation
##class IGeoImageDescription_Impl(object):
##    def _get(self):
##        u'The compression.'
##        #return pCompression
##    def _set(self, pCompression):
##        u'The compression.'
##    Compression = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The viewpoint properties.'
##        #return pViewpointProperties
##    def _set(self, pViewpointProperties):
##        u'The viewpoint properties.'
##    ViewpointProperties = property(_get, _set, doc = _set.__doc__)
##
##    def SpatialReference(self, ppSpatialReference):
##        u'The Spatial Reference.'
##        #return 
##
##    def _get(self):
##        u'The data type of the pixels.'
##        #return pPixelType
##    def _set(self, pPixelType):
##        u'The data type of the pixels.'
##    PixelType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The Height in pixels.'
##        #return pNumRows
##    def _set(self, pNumRows):
##        u'The Height in pixels.'
##    Height = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The compression quality.'
##        #return pQuality
##    def _set(self, pQuality):
##        u'The compression quality.'
##    CompressionQuality = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The Width in pixels.'
##        #return pNumCols
##    def _set(self, pNumCols):
##        u'The Width in pixels.'
##    Width = property(_get, _set, doc = _set.__doc__)
##
##    def BandSelection(self, ppBandIDs):
##        u'The band selection.'
##        #return 
##
##    def Extent(self, ppExtent):
##        u'The extent.'
##        #return 
##
##    def _get(self):
##        u'The mosaic properties.'
##        #return pMosaicProperties
##    def _set(self, pMosaicProperties):
##        u'The mosaic properties.'
##    MosaicProperties = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The output NoData (background) value.'
##        #return pNoData
##    def _set(self, pNoData):
##        u'The output NoData (background) value.'
##    NoData = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The interpolation method.'
##        #return pInterpolation
##    def _set(self, pInterpolation):
##        u'The interpolation method.'
##    Interpolation = property(_get, _set, doc = _set.__doc__)
##

class IMapServerDataAccess(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the data source behind the MapServer.'
    _iid_ = GUID('{A3072B50-65E2-4035-B438-8363EDD349C0}')
    _idlflags_ = ['oleautomation']
IMapServerDataAccess._methods_ = [
    COMMETHOD([helpstring(u'Get Data Source')], HRESULT, 'GetDataSource',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], c_int, 'LayerID' ),
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppDataSource' )),
    COMMETHOD([helpstring(u'Get Display Data Source')], HRESULT, 'GetDisplayDataSource',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], c_int, 'LayerOrTableID' ),
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppDisplayTable' )),
]
################################################################
## code template for IMapServerDataAccess implementation
##class IMapServerDataAccess_Impl(object):
##    def GetDisplayDataSource(self, MapName, LayerOrTableID):
##        u'Get Display Data Source'
##        #return ppDisplayTable
##
##    def GetDataSource(self, MapName, LayerID):
##        u'Get Data Source'
##        #return ppDataSource
##

IHotlinkContainer._methods_ = [
    COMMETHOD(['propget', helpstring(u'Field used for hotlinks.')], HRESULT, 'HotlinkField',
              ( ['retval', 'out'], POINTER(BSTR), 'FieldName' )),
    COMMETHOD(['propput', helpstring(u'Field used for hotlinks.')], HRESULT, 'HotlinkField',
              ( ['in'], BSTR, 'FieldName' )),
    COMMETHOD(['propget', helpstring(u'Hotlink type.')], HRESULT, 'HotlinkType',
              ( ['retval', 'out'], POINTER(esriHyperlinkType), 'LinkType' )),
    COMMETHOD(['propput', helpstring(u'Hotlink type.')], HRESULT, 'HotlinkType',
              ( ['in'], esriHyperlinkType, 'LinkType' )),
]
################################################################
## code template for IHotlinkContainer implementation
##class IHotlinkContainer_Impl(object):
##    def _get(self):
##        u'Hotlink type.'
##        #return LinkType
##    def _set(self, LinkType):
##        u'Hotlink type.'
##    HotlinkType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Field used for hotlinks.'
##        #return FieldName
##    def _set(self, FieldName):
##        u'Field used for hotlinks.'
##    HotlinkField = property(_get, _set, doc = _set.__doc__)
##

class ILODInfo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that provide the LOD info.'
    _iid_ = GUID('{757C37ED-EEC5-48A6-B48C-C8600CE8037E}')
    _idlflags_ = ['oleautomation']
ILODInfo._methods_ = [
    COMMETHOD(['propget', helpstring(u'The level ID.')], HRESULT, 'LevelID',
              ( ['retval', 'out'], POINTER(c_int), 'pLevelID' )),
    COMMETHOD(['propput', helpstring(u'The level ID.')], HRESULT, 'LevelID',
              ( ['in'], c_int, 'pLevelID' )),
    COMMETHOD(['propget', helpstring(u'The scale at this level.')], HRESULT, 'Scale',
              ( ['retval', 'out'], POINTER(c_double), 'pScale' )),
    COMMETHOD(['propput', helpstring(u'The scale at this level.')], HRESULT, 'Scale',
              ( ['in'], c_double, 'pScale' )),
    COMMETHOD(['propget', helpstring(u'The resolution at this level.')], HRESULT, 'Resolution',
              ( ['retval', 'out'], POINTER(c_double), 'pResolution' )),
    COMMETHOD(['propput', helpstring(u'The resolution at this level.')], HRESULT, 'Resolution',
              ( ['in'], c_double, 'pResolution' )),
]
################################################################
## code template for ILODInfo implementation
##class ILODInfo_Impl(object):
##    def _get(self):
##        u'The scale at this level.'
##        #return pScale
##    def _set(self, pScale):
##        u'The scale at this level.'
##    Scale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The resolution at this level.'
##        #return pResolution
##    def _set(self, pResolution):
##        u'The resolution at this level.'
##    Resolution = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The level ID.'
##        #return pLevelID
##    def _set(self, pLevelID):
##        u'The level ID.'
##    LevelID = property(_get, _set, doc = _set.__doc__)
##

class IMosaicLODInfoHelper(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that controls a LOD helper.'
    _iid_ = GUID('{2C1D8359-C0EB-4553-9290-B5F6E2225B0A}')
    _idlflags_ = ['oleautomation']
IMosaicLODInfoHelper._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The spatial reference.')], HRESULT, 'SpatialReference',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'rhs' )),
    COMMETHOD(['propget', helpstring(u'The LOD information.')], HRESULT, 'LODInfos',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._8F0541A3_D5BE_4B3F_A8D9_062D5579E19B_0_10_2.IMosaicLODInfos)), 'ppLODInfos' )),
    COMMETHOD([helpstring(u'Loads LOD information from an array of scales/resolutions.')], HRESULT, 'Load',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray), 'pLODs' ),
              ( ['in'], VARIANT_BOOL, 'asMapScale' )),
    COMMETHOD([helpstring(u'Loads LOD information from a table containing a list of scales/resolutions.')], HRESULT, 'LoadFromTable',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable), 'pTable' ),
              ( ['in'], BSTR, 'LODFieldName' ),
              ( ['in'], VARIANT_BOOL, 'asMapScale' )),
]
################################################################
## code template for IMosaicLODInfoHelper implementation
##class IMosaicLODInfoHelper_Impl(object):
##    @property
##    def LODInfos(self):
##        u'The LOD information.'
##        #return ppLODInfos
##
##    def Load(self, pLODs, asMapScale):
##        u'Loads LOD information from an array of scales/resolutions.'
##        #return 
##
##    def LoadFromTable(self, pTable, LODFieldName, asMapScale):
##        u'Loads LOD information from a table containing a list of scales/resolutions.'
##        #return 
##
##    def SpatialReference(self, rhs):
##        u'The spatial reference.'
##        #return 
##

ILayerCacheInfo._methods_ = [
    COMMETHOD(['propget', helpstring(u'The layer ID.')], HRESULT, 'ID',
              ( ['retval', 'out'], POINTER(c_int), 'pLayerID' )),
    COMMETHOD(['propput', helpstring(u'The layer ID.')], HRESULT, 'ID',
              ( ['in'], c_int, 'pLayerID' )),
    COMMETHOD(['propget', helpstring(u'Indicates if this layer has cache.')], HRESULT, 'HasCache',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pScale' )),
    COMMETHOD(['propput', helpstring(u'Indicates if this layer has cache.')], HRESULT, 'HasCache',
              ( ['in'], VARIANT_BOOL, 'pScale' )),
]
################################################################
## code template for ILayerCacheInfo implementation
##class ILayerCacheInfo_Impl(object):
##    def _get(self):
##        u'The layer ID.'
##        #return pLayerID
##    def _set(self, pLayerID):
##        u'The layer ID.'
##    ID = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if this layer has cache.'
##        #return pScale
##    def _set(self, pScale):
##        u'Indicates if this layer has cache.'
##    HasCache = property(_get, _set, doc = _set.__doc__)
##

class NetworkLayer(CoClass):
    u'Esri Network Layer CoClass.'
    _reg_clsid_ = GUID('{D4F8E94B-5CF5-4F8F-8B4D-5B25AE4C0AF9}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class INetworkLayer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a network layer.'
    _iid_ = GUID('{82870538-E09E-42C0-9228-CBCB244B91BA}')
    _idlflags_ = ['oleautomation']
class INetworkRendererCollection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that manage the collection of network renderers.'
    _iid_ = GUID('{30861A0E-FD25-4E33-B441-AF7771CFA949}')
    _idlflags_ = ['oleautomation']
NetworkLayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILayer, ILayer2, INetworkLayer, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataset, INetworkRendererCollection, ITimeData, ITimeData2, ITimeDataDisplay, ITimeDataCustomUI, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeoDataset, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySupport, ILegendInfo, IIdentify, IIdentify2, IDataLayer, IDataLayer2, ILayerDrawingProperties, ILayerInfo, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayAdmin, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayFilterManager, ILayerEffects, ILayerExtensions, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IMapLevel, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IConnectionPointContainer, ILayerPosition, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, IPublishLayer, ILayerGeneralProperties]
NetworkLayer._outgoing_interfaces_ = [ILayerEvents]

class IBarrierProperties(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control how objects (text, features, graphics) act as barriers for labelling.'
    _iid_ = GUID('{01C12B91-A3FB-11D2-A2FE-080009B6F22B}')
    _idlflags_ = ['oleautomation']
IBarrierProperties._methods_ = [
    COMMETHOD(['propget', helpstring(u'Weight of the barriers in this layer.')], HRESULT, 'Weight',
              ( ['retval', 'out'], POINTER(c_int), 'Weight' )),
    COMMETHOD(['propput', helpstring(u'Weight of the barriers in this layer.')], HRESULT, 'Weight',
              ( ['in'], c_int, 'Weight' )),
    COMMETHOD(['propget', helpstring(u'List of barriers within the specified extent, or all barriers if no extent given.')], HRESULT, 'Barriers',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometryCollection), 'pBarriers' ),
              ( ['in', 'optional'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'Extent', 0 )),
]
################################################################
## code template for IBarrierProperties implementation
##class IBarrierProperties_Impl(object):
##    @property
##    def Barriers(self, Display, pBarriers, Extent):
##        u'List of barriers within the specified extent, or all barriers if no extent given.'
##        #return 
##
##    def _get(self):
##        u'Weight of the barriers in this layer.'
##        #return Weight
##    def _set(self, Weight):
##        u'Weight of the barriers in this layer.'
##    Weight = property(_get, _set, doc = _set.__doc__)
##

class ISimpleMapImage(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a simple MapImage.'
    _iid_ = GUID('{C6D12ABF-C493-4524-81AC-4640EEFDBB49}')
    _idlflags_ = []
ISimpleMapImage._methods_ = [
    COMMETHOD(['propput', helpstring(u'The extent of the image.')], HRESULT, 'Extent',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'rhs' )),
]
################################################################
## code template for ISimpleMapImage implementation
##class ISimpleMapImage_Impl(object):
##    def _set(self, rhs):
##        u'The extent of the image.'
##    Extent = property(fset = _set, doc = _set.__doc__)
##


# values for enumeration 'esriRasterTransparencyStateEnum'
esriRasterTransparencyStateOpaque = 0
esriRasterTransparencyStateAlpha = 1
esriRasterTransparencyStateMask = 2
esriRasterTransparencyStateEnum = c_int # enum
class IMapGeographicTransformations(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u"Provides access to members that control the map's set of geographic transformations and the directions in which they are applied."
    _iid_ = GUID('{24420050-03FE-11D4-9FE9-00C04F6BC78E}')
    _idlflags_ = ['oleautomation']
IMapGeographicTransformations._methods_ = [
    COMMETHOD(['propget', helpstring(u'On-the-fly geographic transformations.')], HRESULT, 'GeographicTransformations',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeoTransformationOperationSet)), 'GTs' )),
]
################################################################
## code template for IMapGeographicTransformations implementation
##class IMapGeographicTransformations_Impl(object):
##    @property
##    def GeographicTransformations(self):
##        u'On-the-fly geographic transformations.'
##        #return GTs
##

class IGpsDisplayProperties(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to GPS display properties.'
    _iid_ = GUID('{34C8784F-8293-4F07-BDA9-CA04F6B56E64}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'esriGpsSpeedUnits'
esriGpsSpeedKph = 0
esriGpsSpeedMph = 1
esriGpsSpeedMps = 2
esriGpsSpeedFps = 3
esriGpsSpeedKnots = 4
esriGpsSpeedUnits = c_int # enum

# values for enumeration 'esriGpsLatLongFormat'
esriGpsDegreesMinutesSeconds = 0
esriGpsDegreesMinutes = 1
esriGpsDecimalDegrees = 2
esriGpsLatLongFormat = c_int # enum
IGpsDisplayProperties._methods_ = [
    COMMETHOD(['propget', helpstring(u'The minimum amount of time in seconds between screen refreshes for the display of the current position.')], HRESULT, 'MinimumDisplayRate',
              ( ['retval', 'out'], POINTER(c_double), 'pRate' )),
    COMMETHOD(['propput', helpstring(u'The minimum amount of time in seconds between screen refreshes for the display of the current position.')], HRESULT, 'MinimumDisplayRate',
              ( ['in'], c_double, 'pRate' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the minimum display rate value is in effect.')], HRESULT, 'UseMinimumDisplayRate',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pUse' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the minimum display rate value is in effect.')], HRESULT, 'UseMinimumDisplayRate',
              ( ['in'], VARIANT_BOOL, 'pUse' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the current position is displayed.')], HRESULT, 'ShowCurrentPosition',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pShow' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the current position is displayed.')], HRESULT, 'ShowCurrentPosition',
              ( ['in'], VARIANT_BOOL, 'pShow' )),
    COMMETHOD(['propget', helpstring(u'The marker symbol used to display the current position under normal circumstances.')], HRESULT, 'BaseMarkerSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IMarkerSymbol)), 'ppMarker' )),
    COMMETHOD(['propputref', helpstring(u'The marker symbol used to display the current position under normal circumstances.')], HRESULT, 'BaseMarkerSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IMarkerSymbol), 'ppMarker' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the estimated position is displayed when the signal is lost.')], HRESULT, 'ShowEstimatedPosition',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pShow' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the estimated position is displayed when the signal is lost.')], HRESULT, 'ShowEstimatedPosition',
              ( ['in'], VARIANT_BOOL, 'pShow' )),
    COMMETHOD(['propget', helpstring(u'The marker symbol used to display the estimated current position if the signal is lost.')], HRESULT, 'EstimatedPositionSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IMarkerSymbol)), 'ppMarker' )),
    COMMETHOD(['propputref', helpstring(u'The marker symbol used to display the estimated current position if the signal is lost.')], HRESULT, 'EstimatedPositionSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IMarkerSymbol), 'ppMarker' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the variation in the altitude is displayed.')], HRESULT, 'ShowCurrentAltitude',
              ( ['in'], VARIANT_BOOL, 'pShowVariation' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the variation in the altitude is displayed.')], HRESULT, 'ShowCurrentAltitude',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pShowVariation' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the current heading (bearing) is displayed as an angle for the base marker symbol.')], HRESULT, 'ShowCurrentBearing',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pShow' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the current heading (bearing) is displayed as an angle for the base marker symbol.')], HRESULT, 'ShowCurrentBearing',
              ( ['in'], VARIANT_BOOL, 'pShow' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the base marker symbol size is varied based on the speed of the current position. Defaults to false.')], HRESULT, 'ShowCurrentSpeed',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pShow' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the base marker symbol size is varied based on the speed of the current position. Defaults to false.')], HRESULT, 'ShowCurrentSpeed',
              ( ['in'], VARIANT_BOOL, 'pShow' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the variation in the altitude is displayed in the marker trail.')], HRESULT, 'ShowMarkerTrailAltitude',
              ( ['in'], VARIANT_BOOL, 'pShowVariation' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the variation in the altitude is displayed in the marker trail.')], HRESULT, 'ShowMarkerTrailAltitude',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pShowVariation' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the trail heading (bearing) is displayed as an angle of the base marker symbol.')], HRESULT, 'ShowMarkerTrailBearing',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pShow' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the trail heading (bearing) is displayed as an angle of the base marker symbol.')], HRESULT, 'ShowMarkerTrailBearing',
              ( ['in'], VARIANT_BOOL, 'pShow' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the base marker symbol size is based on the speed of the marker trail position. Defaults to false.')], HRESULT, 'ShowMarkerTrailSpeed',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pShow' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the base marker symbol size is based on the speed of the marker trail position. Defaults to false.')], HRESULT, 'ShowMarkerTrailSpeed',
              ( ['in'], VARIANT_BOOL, 'pShow' )),
    COMMETHOD(['propget', helpstring(u'The units to use for the speed of the current position.')], HRESULT, 'SpeedUnits',
              ( ['retval', 'out'], POINTER(esriGpsSpeedUnits), 'pUnits' )),
    COMMETHOD(['propput', helpstring(u'The units to use for the speed of the current position.')], HRESULT, 'SpeedUnits',
              ( ['in'], esriGpsSpeedUnits, 'pUnits' )),
    COMMETHOD(['propget', helpstring(u'The minimum speed value used in calculating the size of the base marker symbol.')], HRESULT, 'LowSpeedValue',
              ( ['retval', 'out'], POINTER(c_double), 'pSpeed' )),
    COMMETHOD(['propput', helpstring(u'The minimum speed value used in calculating the size of the base marker symbol.')], HRESULT, 'LowSpeedValue',
              ( ['in'], c_double, 'pSpeed' )),
    COMMETHOD(['propputref', helpstring(u'The color ramp used to vary the color by speed.')], HRESULT, 'SpeedColorRamp',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColorRamp), 'ppColorRamp' )),
    COMMETHOD(['propget', helpstring(u'The color ramp used to vary the color by speed.')], HRESULT, 'SpeedColorRamp',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColorRamp)), 'ppColorRamp' )),
    COMMETHOD(['propget', helpstring(u'The minimum altitude value used in calculating the size of the base marker symbol.')], HRESULT, 'LowAltitudeValue',
              ( ['retval', 'out'], POINTER(c_double), 'pAltitude' )),
    COMMETHOD(['propput', helpstring(u'The minimum altitude value used in calculating the size of the base marker symbol.')], HRESULT, 'LowAltitudeValue',
              ( ['in'], c_double, 'pAltitude' )),
    COMMETHOD(['propget', helpstring(u'The maximum altitude value used in calculating the size of the base marker symbol.')], HRESULT, 'HighAltitudeValue',
              ( ['retval', 'out'], POINTER(c_double), 'pAltitude' )),
    COMMETHOD(['propput', helpstring(u'The maximum altitude value used in calculating the size of the base marker symbol.')], HRESULT, 'HighAltitudeValue',
              ( ['in'], c_double, 'pAltitude' )),
    COMMETHOD(['propget', helpstring(u'The minimum altitude size used in calculating the current size of the base marker symbol.')], HRESULT, 'LowAltitudeSize',
              ( ['retval', 'out'], POINTER(c_double), 'pSize' )),
    COMMETHOD(['propput', helpstring(u'The minimum altitude size used in calculating the current size of the base marker symbol.')], HRESULT, 'LowAltitudeSize',
              ( ['in'], c_double, 'pSize' )),
    COMMETHOD(['propget', helpstring(u'The maximum speed value used in calculating the size of the base marker symbol.')], HRESULT, 'HighSpeedValue',
              ( ['retval', 'out'], POINTER(c_double), 'pSize' )),
    COMMETHOD(['propput', helpstring(u'The maximum speed value used in calculating the size of the base marker symbol.')], HRESULT, 'HighSpeedValue',
              ( ['in'], c_double, 'pSize' )),
    COMMETHOD(['propget', helpstring(u'The maximum altitude size used in calculating the current size of the base marker symbol.')], HRESULT, 'HighAltitudeSize',
              ( ['retval', 'out'], POINTER(c_double), 'pSize' )),
    COMMETHOD(['propput', helpstring(u'The maximum altitude size used in calculating the current size of the base marker symbol.')], HRESULT, 'HighAltitudeSize',
              ( ['in'], c_double, 'pSize' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the display extents are adjusted to keep the GPS position on the screen.')], HRESULT, 'AutoPan',
              ( ['in'], VARIANT_BOOL, 'AutoPan' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the display extents are adjusted to keep the GPS position on the screen.')], HRESULT, 'AutoPan',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'AutoPan' )),
    COMMETHOD(['propput', helpstring(u'The units used for altitude in the GPS display.')], HRESULT, 'AltitudeUnits',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits, 'pAltitudeUnits' )),
    COMMETHOD(['propget', helpstring(u'The units used for altitude in the GPS display.')], HRESULT, 'AltitudeUnits',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits), 'pAltitudeUnits' )),
    COMMETHOD(['propput', helpstring(u'The latitude-longitude display format for the GPS display.')], HRESULT, 'LatLongDisplayFormat',
              ( ['in'], esriGpsLatLongFormat, 'latLongFormat' )),
    COMMETHOD(['propget', helpstring(u'The latitude-longitude display format for the GPS display.')], HRESULT, 'LatLongDisplayFormat',
              ( ['retval', 'out'], POINTER(esriGpsLatLongFormat), 'latLongFormat' )),
    COMMETHOD(['propget', helpstring(u'Extent bounding all positions received from the current RealTimeFeed so far.')], HRESULT, 'PositionsExtent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'ppExtent' )),
    COMMETHOD([helpstring(u'Refreshes the GPS display.')], HRESULT, 'RefreshGpsDisplay'),
    COMMETHOD([helpstring(u'Clears the GPS display.')], HRESULT, 'ClearGpsDisplay'),
]
################################################################
## code template for IGpsDisplayProperties implementation
##class IGpsDisplayProperties_Impl(object):
##    def _get(self):
##        u'Indicates if the variation in the altitude is displayed in the marker trail.'
##        #return pShowVariation
##    def _set(self, pShowVariation):
##        u'Indicates if the variation in the altitude is displayed in the marker trail.'
##    ShowMarkerTrailAltitude = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the current position is displayed.'
##        #return pShow
##    def _set(self, pShow):
##        u'Indicates if the current position is displayed.'
##    ShowCurrentPosition = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The maximum speed value used in calculating the size of the base marker symbol.'
##        #return pSize
##    def _set(self, pSize):
##        u'The maximum speed value used in calculating the size of the base marker symbol.'
##    HighSpeedValue = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The minimum altitude value used in calculating the size of the base marker symbol.'
##        #return pAltitude
##    def _set(self, pAltitude):
##        u'The minimum altitude value used in calculating the size of the base marker symbol.'
##    LowAltitudeValue = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the current heading (bearing) is displayed as an angle for the base marker symbol.'
##        #return pShow
##    def _set(self, pShow):
##        u'Indicates if the current heading (bearing) is displayed as an angle for the base marker symbol.'
##    ShowCurrentBearing = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the variation in the altitude is displayed.'
##        #return pShowVariation
##    def _set(self, pShowVariation):
##        u'Indicates if the variation in the altitude is displayed.'
##    ShowCurrentAltitude = property(_get, _set, doc = _set.__doc__)
##
##    def EstimatedPositionSymbol(self, ppMarker):
##        u'The marker symbol used to display the estimated current position if the signal is lost.'
##        #return 
##
##    def _get(self):
##        u'The minimum amount of time in seconds between screen refreshes for the display of the current position.'
##        #return pRate
##    def _set(self, pRate):
##        u'The minimum amount of time in seconds between screen refreshes for the display of the current position.'
##    MinimumDisplayRate = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The maximum altitude size used in calculating the current size of the base marker symbol.'
##        #return pSize
##    def _set(self, pSize):
##        u'The maximum altitude size used in calculating the current size of the base marker symbol.'
##    HighAltitudeSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the trail heading (bearing) is displayed as an angle of the base marker symbol.'
##        #return pShow
##    def _set(self, pShow):
##        u'Indicates if the trail heading (bearing) is displayed as an angle of the base marker symbol.'
##    ShowMarkerTrailBearing = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The units used for altitude in the GPS display.'
##        #return pAltitudeUnits
##    def _set(self, pAltitudeUnits):
##        u'The units used for altitude in the GPS display.'
##    AltitudeUnits = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The maximum altitude value used in calculating the size of the base marker symbol.'
##        #return pAltitude
##    def _set(self, pAltitude):
##        u'The maximum altitude value used in calculating the size of the base marker symbol.'
##    HighAltitudeValue = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the display extents are adjusted to keep the GPS position on the screen.'
##        #return AutoPan
##    def _set(self, AutoPan):
##        u'Indicates if the display extents are adjusted to keep the GPS position on the screen.'
##    AutoPan = property(_get, _set, doc = _set.__doc__)
##
##    def RefreshGpsDisplay(self):
##        u'Refreshes the GPS display.'
##        #return 
##
##    def _get(self):
##        u'Indicates if the base marker symbol size is based on the speed of the marker trail position. Defaults to false.'
##        #return pShow
##    def _set(self, pShow):
##        u'Indicates if the base marker symbol size is based on the speed of the marker trail position. Defaults to false.'
##    ShowMarkerTrailSpeed = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the base marker symbol size is varied based on the speed of the current position. Defaults to false.'
##        #return pShow
##    def _set(self, pShow):
##        u'Indicates if the base marker symbol size is varied based on the speed of the current position. Defaults to false.'
##    ShowCurrentSpeed = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The units to use for the speed of the current position.'
##        #return pUnits
##    def _set(self, pUnits):
##        u'The units to use for the speed of the current position.'
##    SpeedUnits = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SpeedColorRamp(self, ppColorRamp):
##        u'The color ramp used to vary the color by speed.'
##        #return 
##
##    def _get(self):
##        u'The minimum altitude size used in calculating the current size of the base marker symbol.'
##        #return pSize
##    def _set(self, pSize):
##        u'The minimum altitude size used in calculating the current size of the base marker symbol.'
##    LowAltitudeSize = property(_get, _set, doc = _set.__doc__)
##
##    def BaseMarkerSymbol(self, ppMarker):
##        u'The marker symbol used to display the current position under normal circumstances.'
##        #return 
##
##    def _get(self):
##        u'The minimum speed value used in calculating the size of the base marker symbol.'
##        #return pSpeed
##    def _set(self, pSpeed):
##        u'The minimum speed value used in calculating the size of the base marker symbol.'
##    LowSpeedValue = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The latitude-longitude display format for the GPS display.'
##        #return latLongFormat
##    def _set(self, latLongFormat):
##        u'The latitude-longitude display format for the GPS display.'
##    LatLongDisplayFormat = property(_get, _set, doc = _set.__doc__)
##
##    def ClearGpsDisplay(self):
##        u'Clears the GPS display.'
##        #return 
##
##    def _get(self):
##        u'Indicates if the minimum display rate value is in effect.'
##        #return pUse
##    def _set(self, pUse):
##        u'Indicates if the minimum display rate value is in effect.'
##    UseMinimumDisplayRate = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the estimated position is displayed when the signal is lost.'
##        #return pShow
##    def _set(self, pShow):
##        u'Indicates if the estimated position is displayed when the signal is lost.'
##    ShowEstimatedPosition = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def PositionsExtent(self):
##        u'Extent bounding all positions received from the current RealTimeFeed so far.'
##        #return ppExtent
##

class IImageServerIdentifyResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control an identify result.'
    _iid_ = GUID('{38CFD9C6-E8A1-41F9-84AD-423A8DCA6A39}')
    _idlflags_ = ['oleautomation']
class IImageServerIdentifyResultEdit(IImageServerIdentifyResult):
    _case_insensitive_ = True
    u'Provides access to additional members that control an identify result.'
    _iid_ = GUID('{D9D379DF-E486-4F8B-8724-7916E40B769B}')
    _idlflags_ = ['oleautomation']
IImageServerIdentifyResult._methods_ = [
    COMMETHOD(['propget', helpstring(u'The identify property name.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'pName' )),
    COMMETHOD(['propget', helpstring(u'The identify property value.')], HRESULT, 'Value',
              ( ['retval', 'out'], POINTER(BSTR), 'pValue' )),
    COMMETHOD(['propget', helpstring(u'The identified location.')], HRESULT, 'Location',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint)), 'ppPoint' )),
    COMMETHOD(['propget', helpstring(u'A set of name-value pairs for the field names and values of the identified object.')], HRESULT, 'Properties',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet)), 'ppProperties' )),
    COMMETHOD(['propget', helpstring(u'A set of idetified catalog items.')], HRESULT, 'CatalogItems',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRecordSet)), 'ppItems' )),
    COMMETHOD(['propget', helpstring(u'A set of visible area for idetified catalog items.')], HRESULT, 'CatalogItemVisibilities',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray)), 'ppVisibilities' )),
]
################################################################
## code template for IImageServerIdentifyResult implementation
##class IImageServerIdentifyResult_Impl(object):
##    @property
##    def Name(self):
##        u'The identify property name.'
##        #return pName
##
##    @property
##    def CatalogItemVisibilities(self):
##        u'A set of visible area for idetified catalog items.'
##        #return ppVisibilities
##
##    @property
##    def Value(self):
##        u'The identify property value.'
##        #return pValue
##
##    @property
##    def Location(self):
##        u'The identified location.'
##        #return ppPoint
##
##    @property
##    def CatalogItems(self):
##        u'A set of idetified catalog items.'
##        #return ppItems
##
##    @property
##    def Properties(self):
##        u'A set of name-value pairs for the field names and values of the identified object.'
##        #return ppProperties
##

IImageServerIdentifyResultEdit._methods_ = [
    COMMETHOD(['propput', helpstring(u'The identify property name.')], HRESULT, 'Name',
              ( ['in'], BSTR, 'rhs' )),
    COMMETHOD(['propput', helpstring(u'The identify property value.')], HRESULT, 'Value',
              ( ['in'], BSTR, 'rhs' )),
    COMMETHOD(['propputref', helpstring(u'The identified location.')], HRESULT, 'Location',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'rhs' )),
    COMMETHOD(['propputref', helpstring(u'A set of name-value pairs for the field names and values of the identified object.')], HRESULT, 'Properties',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet), 'rhs' )),
    COMMETHOD(['propputref', helpstring(u'A set of idetified catalog items.')], HRESULT, 'CatalogItems',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRecordSet), 'rhs' )),
    COMMETHOD(['propputref', helpstring(u'A set of visible area for idetified catalog items.')], HRESULT, 'CatalogItemVisibilities',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray), 'rhs' )),
]
################################################################
## code template for IImageServerIdentifyResultEdit implementation
##class IImageServerIdentifyResultEdit_Impl(object):
##    def _set(self, rhs):
##        u'The identify property name.'
##    Name = property(fset = _set, doc = _set.__doc__)
##
##    def CatalogItemVisibilities(self, rhs):
##        u'A set of visible area for idetified catalog items.'
##        #return 
##
##    def _set(self, rhs):
##        u'The identify property value.'
##    Value = property(fset = _set, doc = _set.__doc__)
##
##    def Location(self, rhs):
##        u'The identified location.'
##        #return 
##
##    def CatalogItems(self, rhs):
##        u'A set of idetified catalog items.'
##        #return 
##
##    def Properties(self, rhs):
##        u'A set of name-value pairs for the field names and values of the identified object.'
##        #return 
##

class IScaleDependentRenderer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a renderer which is composed of mulitple renderers, of which only one is enabled within a particular scale range.'
    _iid_ = GUID('{C86B3D95-ED80-11D0-8BBA-080009EE4E41}')
    _idlflags_ = ['oleautomation']
IScaleDependentRenderer._methods_ = [
    COMMETHOD(['propget', helpstring(u'Number of renderers.')], HRESULT, 'RendererCount',
              ( ['retval', 'out'], POINTER(c_int), 'RendererCount' )),
    COMMETHOD(['propput', helpstring(u'Number of renderers.')], HRESULT, 'RendererCount',
              ( ['in'], c_int, 'RendererCount' )),
    COMMETHOD(['propget', helpstring(u'The renderer at the specified index.')], HRESULT, 'Renderer',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'Renderer' )),
    COMMETHOD(['propputref', helpstring(u'The renderer at the specified index.')], HRESULT, 'Renderer',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(IUnknown), 'Renderer' )),
    COMMETHOD(['propget', helpstring(u'Scale value at which to break for the specified index.')], HRESULT, 'Break',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(c_double), 'breakValue' )),
    COMMETHOD(['propput', helpstring(u'Scale value at which to break for the specified index.')], HRESULT, 'Break',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_double, 'breakValue' )),
    COMMETHOD([helpstring(u'Adds a renderer to the end of the list.')], HRESULT, 'AddRenderer',
              ( ['in'], POINTER(IFeatureRenderer), 'Renderer' )),
    COMMETHOD([helpstring(u'Removes the specified renderer from the list.')], HRESULT, 'RemoveRenderer',
              ( ['in'], POINTER(IFeatureRenderer), 'Renderer' )),
    COMMETHOD([helpstring(u'Moves renderer to the specified location in the list.')], HRESULT, 'MoveRenderer',
              ( ['in'], POINTER(IFeatureRenderer), 'Renderer' ),
              ( ['in'], c_int, 'toIndex' )),
]
################################################################
## code template for IScaleDependentRenderer implementation
##class IScaleDependentRenderer_Impl(object):
##    def _get(self):
##        u'Number of renderers.'
##        #return RendererCount
##    def _set(self, RendererCount):
##        u'Number of renderers.'
##    RendererCount = property(_get, _set, doc = _set.__doc__)
##
##    def MoveRenderer(self, Renderer, toIndex):
##        u'Moves renderer to the specified location in the list.'
##        #return 
##
##    def _get(self, Index):
##        u'Scale value at which to break for the specified index.'
##        #return breakValue
##    def _set(self, Index, breakValue):
##        u'Scale value at which to break for the specified index.'
##    Break = property(_get, _set, doc = _set.__doc__)
##
##    def Renderer(self, Index, Renderer):
##        u'The renderer at the specified index.'
##        #return 
##
##    def RemoveRenderer(self, Renderer):
##        u'Removes the specified renderer from the list.'
##        #return 
##
##    def AddRenderer(self, Renderer):
##        u'Adds a renderer to the end of the list.'
##        #return 
##

ILayerEvents._methods_ = [
    COMMETHOD([helpstring(u'Occurs when layer visibility changes.')], HRESULT, 'VisibilityChanged',
              ( ['in'], VARIANT_BOOL, 'currentState' )),
]
################################################################
## code template for ILayerEvents implementation
##class ILayerEvents_Impl(object):
##    def VisibilityChanged(self, currentState):
##        u'Occurs when layer visibility changes.'
##        #return 
##

class ILayerEffectDIM(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control DIM layer effect.'
    _iid_ = GUID('{C67C6655-6540-442B-8659-A286C2BFA205}')
    _idlflags_ = ['oleautomation']
ILayerEffectDIM._methods_ = [
    COMMETHOD(['propget', helpstring(u'Layer DIM value in percent (0 - 100).')], HRESULT, 'DimPercentage',
              ( ['retval', 'out'], POINTER(c_short), 'dimValue' )),
    COMMETHOD(['propput', helpstring(u'Layer DIM value in percent (0 - 100).')], HRESULT, 'DimPercentage',
              ( ['in'], c_short, 'dimValue' )),
]
################################################################
## code template for ILayerEffectDIM implementation
##class ILayerEffectDIM_Impl(object):
##    def _get(self):
##        u'Layer DIM value in percent (0 - 100).'
##        #return dimValue
##    def _set(self, dimValue):
##        u'Layer DIM value in percent (0 - 100).'
##    DimPercentage = property(_get, _set, doc = _set.__doc__)
##

class DataObjects(CoClass):
    u'DataObjectArray co-class.'
    _reg_clsid_ = GUID('{873A22BF-D7F4-4348-991A-8D5CB0909164}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
DataObjects._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDataObjects, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]

class PictureElement(CoClass):
    u'Picture Graphic Element.'
    _reg_clsid_ = GUID('{827B9A92-C067-11D2-9F22-00C04F6BC8DD}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IFrameDraw(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control frame drawing.'
    _iid_ = GUID('{CF387183-1698-4463-B5F5-67925465812E}')
    _idlflags_ = ['oleautomation']
class IPictureElement(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the Picture element.'
    _iid_ = GUID('{C0A341C2-CFE2-11D1-9140-0000F87808EE}')
    _idlflags_ = ['oleautomation']
class IPictureElement2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the Picture element.'
    _iid_ = GUID('{C0A341C3-CFE2-11D1-9140-0000F87808EE}')
    _idlflags_ = ['oleautomation']
class IPictureElement3(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the Picture element.'
    _iid_ = GUID('{C0A341C4-CFE2-11D1-9140-0000F87808EE}')
    _idlflags_ = ['oleautomation']
class IPictureElement4(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the Picture element.'
    _iid_ = GUID('{C0A341C5-CFE2-11D1-9140-0000F87808EE}')
    _idlflags_ = ['oleautomation']
class IPictureElement5(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the Picture element.'
    _iid_ = GUID('{C0A341C6-CFE2-11D1-9140-0000F87808EE}')
    _idlflags_ = ['oleautomation']
class IOlePictureElement(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the Ole Style Picture element.'
    _iid_ = GUID('{1A082F15-C06F-11D2-9F22-00C04F6BC8DD}')
    _idlflags_ = ['oleautomation']
PictureElement._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IElement, IElementProperties, IElementProperties2, IElementProperties3, IFrameElement, IFrameDraw, IFrameProperties, IPictureElement, IPictureElement2, IPictureElement3, IPictureElement4, IPictureElement5, IGraphicElement, IBoundsProperties, IOlePictureElement, comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ITransform2D, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class IMapTableTimeDescription(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to time properties of a LayerDescription.'
    _iid_ = GUID('{7AE9366E-4894-43A6-96BA-3ABC58294058}')
    _idlflags_ = ['oleautomation']
IMapTableTimeDescription._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates whether use time for display.')], HRESULT, 'UseTime',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'UseTime' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether use time for display.')], HRESULT, 'UseTime',
              ( ['in'], VARIANT_BOOL, 'UseTime' )),
    COMMETHOD(['propget', helpstring(u'Draw the data cumulatively from the first instance of time in data as time progresses.')], HRESULT, 'TimeDataCumulative',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'drawCumilative' )),
    COMMETHOD(['propput', helpstring(u'Draw the data cumulatively from the first instance of time in data as time progresses.')], HRESULT, 'TimeDataCumulative',
              ( ['in'], VARIANT_BOOL, 'drawCumilative' )),
    COMMETHOD(['propget', helpstring(u'Draw time offset to overlay the data on a earlier or later time span.')], HRESULT, 'TimeOffset',
              ( ['retval', 'out'], POINTER(c_double), 'Offset' )),
    COMMETHOD(['propput', helpstring(u'Draw time offset to overlay the data on a earlier or later time span.')], HRESULT, 'TimeOffset',
              ( ['in'], c_double, 'Offset' )),
    COMMETHOD(['propget', helpstring(u'Draw time offset units.')], HRESULT, 'TimeOffsetUnits',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriTimeUnits), 'offsetUnits' )),
    COMMETHOD(['propput', helpstring(u'Draw time offset units.')], HRESULT, 'TimeOffsetUnits',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriTimeUnits, 'offsetUnits' )),
]
################################################################
## code template for IMapTableTimeDescription implementation
##class IMapTableTimeDescription_Impl(object):
##    def _get(self):
##        u'Draw the data cumulatively from the first instance of time in data as time progresses.'
##        #return drawCumilative
##    def _set(self, drawCumilative):
##        u'Draw the data cumulatively from the first instance of time in data as time progresses.'
##    TimeDataCumulative = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether use time for display.'
##        #return UseTime
##    def _set(self, UseTime):
##        u'Indicates whether use time for display.'
##    UseTime = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Draw time offset to overlay the data on a earlier or later time span.'
##        #return Offset
##    def _set(self, Offset):
##        u'Draw time offset to overlay the data on a earlier or later time span.'
##    TimeOffset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Draw time offset units.'
##        #return offsetUnits
##    def _set(self, offsetUnits):
##        u'Draw time offset units.'
##    TimeOffsetUnits = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'esriBackgroundTabType'
esriBackgroundTabRound = 0
esriBackgroundTabRectangle = 1
esriBackgroundTabRoundedRectangle = 2
esriBackgroundTabType = c_int # enum

# values for enumeration 'esriDataSampling'
esriAllRecords = 0
esriRandomRecords = 1
esriEveryNthRecord = 2
esriDataSampling = c_int # enum
class IOrderedLayerFields(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u"Provides access to members that work with a layer's ordered fields."
    _iid_ = GUID('{A95F6059-7909-4D31-A66B-2220ADC6615F}')
    _idlflags_ = ['oleautomation']
class IFieldInfoSet(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that store an ordered set of field info.'
    _iid_ = GUID('{D8D8C2C1-C003-452C-A66C-AA9B333D3489}')
    _idlflags_ = ['oleautomation']
IOrderedLayerFields._methods_ = [
    COMMETHOD(['propget', helpstring(u'The fields in order.')], HRESULT, 'FieldInfos',
              ( ['retval', 'out'], POINTER(POINTER(IFieldInfoSet)), 'FieldInfoSet' )),
    COMMETHOD([helpstring(u'A new order for the fields.')], HRESULT, 'SetFieldOrder',
              ( ['in'], POINTER(IFieldInfoSet), 'FieldInfoSet' )),
]
################################################################
## code template for IOrderedLayerFields implementation
##class IOrderedLayerFields_Impl(object):
##    @property
##    def FieldInfos(self):
##        u'The fields in order.'
##        #return FieldInfoSet
##
##    def SetFieldOrder(self, FieldInfoSet):
##        u'A new order for the fields.'
##        #return 
##

class IColorRampSymbol(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IFillSymbol):
    _case_insensitive_ = True
    u'Provides access to members that control ColorRamp symbolization.'
    _iid_ = GUID('{1272E1B0-204C-11D3-A3F2-0004AC1B1D86}')
    _idlflags_ = ['oleautomation']
IColorRampSymbol._methods_ = [
    COMMETHOD(['propget', helpstring(u'Current color ramp.')], HRESULT, 'ColorRamp',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColorRamp)), 'ColorRamp' )),
    COMMETHOD(['propput', helpstring(u'Current color ramp.')], HRESULT, 'ColorRamp',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColorRamp), 'ColorRamp' )),
    COMMETHOD(['propput', helpstring(u'Not documented.')], HRESULT, 'ColorRampInLegendGroup',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColorRamp), 'rhs' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to invert.')], HRESULT, 'Invert',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Invert' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to invert.')], HRESULT, 'Invert',
              ( ['in'], VARIANT_BOOL, 'Invert' )),
    COMMETHOD(['restricted', helpstring(u'Not documented.'), 'propput'], HRESULT, 'InvertInLegendGroup',
              ( ['in'], VARIANT_BOOL, 'rhs' )),
    COMMETHOD(['propget', helpstring(u'Ordinal number of the legend class for the symbol (0,1,2).')], HRESULT, 'LegendClassIndex',
              ( ['retval', 'out'], POINTER(c_int), 'Index' )),
    COMMETHOD(['propput', helpstring(u'Ordinal number of the legend class for the symbol (0,1,2).')], HRESULT, 'LegendClassIndex',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD(['propget', helpstring(u'Legend group of the symbol.')], HRESULT, 'LegendGroup',
              ( ['retval', 'out'], POINTER(POINTER(ILegendGroup)), 'ppLegendGroup' )),
    COMMETHOD(['propputref', helpstring(u'Legend group of the symbol.')], HRESULT, 'LegendGroup',
              ( ['in'], POINTER(ILegendGroup), 'ppLegendGroup' )),
]
################################################################
## code template for IColorRampSymbol implementation
##class IColorRampSymbol_Impl(object):
##    def _set(self, rhs):
##        u'Not documented.'
##    ColorRampInLegendGroup = property(fset = _set, doc = _set.__doc__)
##
##    def LegendGroup(self, ppLegendGroup):
##        u'Legend group of the symbol.'
##        #return 
##
##    def _get(self):
##        u'Current color ramp.'
##        #return ColorRamp
##    def _set(self, ColorRamp):
##        u'Current color ramp.'
##    ColorRamp = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether to invert.'
##        #return Invert
##    def _set(self, Invert):
##        u'Indicates whether to invert.'
##    Invert = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Ordinal number of the legend class for the symbol (0,1,2).'
##        #return Index
##    def _set(self, Index):
##        u'Ordinal number of the legend class for the symbol (0,1,2).'
##    LegendClassIndex = property(_get, _set, doc = _set.__doc__)
##
##    def _set(self, rhs):
##        u'Not documented.'
##    InvertInLegendGroup = property(fset = _set, doc = _set.__doc__)
##

IDataLayer._methods_ = [
    COMMETHOD(['propget', helpstring(u'Name of the data object for the layer.')], HRESULT, 'DataSourceName',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName)), 'Name' )),
    COMMETHOD(['propput', helpstring(u'Name of the data object for the layer.')], HRESULT, 'DataSourceName',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName), 'Name' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the specified data object name is supported by the layer.')], HRESULT, 'DataSourceSupported',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName), 'Name' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'supported' )),
    COMMETHOD([helpstring(u'Connects the layer to its data source.  An optional name object can be specified to aid in repairing a lost connection.')], HRESULT, 'Connect',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName), 'pOptRepairName' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Succeeded' )),
    COMMETHOD(['propget', helpstring(u'Base path used when storing relative path names.')], HRESULT, 'RelativeBase',
              ( ['retval', 'out'], POINTER(BSTR), 'basePath' )),
    COMMETHOD(['propput', helpstring(u'Base path used when storing relative path names.')], HRESULT, 'RelativeBase',
              ( ['in'], BSTR, 'basePath' )),
]
################################################################
## code template for IDataLayer implementation
##class IDataLayer_Impl(object):
##    @property
##    def DataSourceSupported(self, Name):
##        u'Indicates if the specified data object name is supported by the layer.'
##        #return supported
##
##    def _get(self):
##        u'Base path used when storing relative path names.'
##        #return basePath
##    def _set(self, basePath):
##        u'Base path used when storing relative path names.'
##    RelativeBase = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Name of the data object for the layer.'
##        #return Name
##    def _set(self, Name):
##        u'Name of the data object for the layer.'
##    DataSourceName = property(_get, _set, doc = _set.__doc__)
##
##    def Connect(self, pOptRepairName):
##        u'Connects the layer to its data source.  An optional name object can be specified to aid in repairing a lost connection.'
##        #return Succeeded
##

class IClassBreaksUIProperties2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control some user interface properties of a ClassBreaksRenderer.  The properties set through this interface do NOT affect what is drawn on the map.'
    _iid_ = GUID('{9E4F9561-AF25-4C61-BF8A-9C5477E4437B}')
    _idlflags_ = ['oleautomation']
IClassBreaksUIProperties2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Color Ramp Object.')], HRESULT, 'ColorRamp',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColorRamp)), 'ppColorRamp' )),
    COMMETHOD(['propputref', helpstring(u'Color Ramp Object.')], HRESULT, 'ColorRamp',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColorRamp), 'ppColorRamp' )),
    COMMETHOD(['propget', helpstring(u'Indicates if symbols are flipped.')], HRESULT, 'FlipSymbols',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Ascending' )),
    COMMETHOD(['propput', helpstring(u'Indicates if symbols are flipped.')], HRESULT, 'FlipSymbols',
              ( ['in'], VARIANT_BOOL, 'Ascending' )),
]
################################################################
## code template for IClassBreaksUIProperties2 implementation
##class IClassBreaksUIProperties2_Impl(object):
##    def _get(self):
##        u'Indicates if symbols are flipped.'
##        #return Ascending
##    def _set(self, Ascending):
##        u'Indicates if symbols are flipped.'
##    FlipSymbols = property(_get, _set, doc = _set.__doc__)
##
##    def ColorRamp(self, ppColorRamp):
##        u'Color Ramp Object.'
##        #return 
##

IPictureElement2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Description of the Picture Element.')], HRESULT, 'PictureDescription',
              ( ['retval', 'out'], POINTER(BSTR), 'Description' )),
    COMMETHOD(['propget', helpstring(u'Filter used in CFileDialog.')], HRESULT, 'Filter',
              ( ['retval', 'out'], POINTER(BSTR), 'Filter' )),
    COMMETHOD(['propget', helpstring(u'Filter used in CFileDialog.')], HRESULT, 'PictureAspectRatio',
              ( ['retval', 'out'], POINTER(c_double), 'ratio' )),
    COMMETHOD(['propget', helpstring(u"Indicates if the resize box will maintain the picture's aspect ratio.")], HRESULT, 'MaintainAspectRatio',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'bRatio' )),
    COMMETHOD(['propput', helpstring(u"Indicates if the resize box will maintain the picture's aspect ratio.")], HRESULT, 'MaintainAspectRatio',
              ( ['in'], VARIANT_BOOL, 'bRatio' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the Picture will be stored in the Document.')], HRESULT, 'SavePictureInDocument',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'bSaveInDoc' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the Picture will be stored in the Document.')], HRESULT, 'SavePictureInDocument',
              ( ['in'], VARIANT_BOOL, 'bSaveInDoc' )),
    COMMETHOD([helpstring(u'File to be imported.')], HRESULT, 'ImportPictureFromFile',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD([helpstring(u'Get the intrinsic size of the picture in points.')], HRESULT, 'QueryIntrinsicSize',
              ( ['in', 'out'], POINTER(c_double), 'widthPoints' ),
              ( ['in', 'out'], POINTER(c_double), 'heightPoints' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether picture is a vector format as opposed to raster.')], HRESULT, 'IsVector',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
]
################################################################
## code template for IPictureElement2 implementation
##class IPictureElement2_Impl(object):
##    @property
##    def PictureAspectRatio(self):
##        u'Filter used in CFileDialog.'
##        #return ratio
##
##    def QueryIntrinsicSize(self):
##        u'Get the intrinsic size of the picture in points.'
##        #return widthPoints, heightPoints
##
##    @property
##    def IsVector(self):
##        u'Indicates whether picture is a vector format as opposed to raster.'
##        #return flag
##
##    def _get(self):
##        u"Indicates if the resize box will maintain the picture's aspect ratio."
##        #return bRatio
##    def _set(self, bRatio):
##        u"Indicates if the resize box will maintain the picture's aspect ratio."
##    MaintainAspectRatio = property(_get, _set, doc = _set.__doc__)
##
##    def ImportPictureFromFile(self, Name):
##        u'File to be imported.'
##        #return 
##
##    @property
##    def Filter(self):
##        u'Filter used in CFileDialog.'
##        #return Filter
##
##    @property
##    def PictureDescription(self):
##        u'Description of the Picture Element.'
##        #return Description
##
##    def _get(self):
##        u'Indicates if the Picture will be stored in the Document.'
##        #return bSaveInDoc
##    def _set(self, bSaveInDoc):
##        u'Indicates if the Picture will be stored in the Document.'
##    SavePictureInDocument = property(_get, _set, doc = _set.__doc__)
##

ISingleFillScaleBar._methods_ = [
    COMMETHOD(['propget', helpstring(u'Symbol used to draw the bar.')], HRESULT, 'FillSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IFillSymbol)), 'Symbol' )),
    COMMETHOD(['propput', helpstring(u'Symbol used to draw the bar.')], HRESULT, 'FillSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IFillSymbol), 'Symbol' )),
]
################################################################
## code template for ISingleFillScaleBar implementation
##class ISingleFillScaleBar_Impl(object):
##    def _get(self):
##        u'Symbol used to draw the bar.'
##        #return Symbol
##    def _set(self, Symbol):
##        u'Symbol used to draw the bar.'
##    FillSymbol = property(_get, _set, doc = _set.__doc__)
##

class ILayerDrawingPhase(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the drawing phase of a layer.'
    _iid_ = GUID('{EEF01B2D-8FE1-4759-8B93-51EE22DED70A}')
    _idlflags_ = ['oleautomation']
ILayerDrawingPhase._methods_ = [
    COMMETHOD(['propget', helpstring(u'Draw phase in which layer is drawn.')], HRESULT, 'DrawPhase',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriDrawPhase), 'pDrawPhase' )),
    COMMETHOD(['propput', helpstring(u'Draw phase in which layer is drawn.')], HRESULT, 'DrawPhase',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriDrawPhase, 'pDrawPhase' )),
]
################################################################
## code template for ILayerDrawingPhase implementation
##class ILayerDrawingPhase_Impl(object):
##    def _get(self):
##        u'Draw phase in which layer is drawn.'
##        #return pDrawPhase
##    def _set(self, pDrawPhase):
##        u'Draw phase in which layer is drawn.'
##    DrawPhase = property(_get, _set, doc = _set.__doc__)
##

IPictureElement._methods_ = [
    COMMETHOD(['propget', helpstring(u'Description of the Picture Element.')], HRESULT, 'PictureDescription',
              ( ['retval', 'out'], POINTER(BSTR), 'Description' )),
    COMMETHOD(['propget', helpstring(u'Filter used in CFileDialog.')], HRESULT, 'Filter',
              ( ['retval', 'out'], POINTER(BSTR), 'Filter' )),
    COMMETHOD(['propget', helpstring(u'Filter used in CFileDialog.')], HRESULT, 'PictureAspectRatio',
              ( ['retval', 'out'], POINTER(c_double), 'ratio' )),
    COMMETHOD(['propget', helpstring(u"Indicates if the resize box will maintain the picture's aspect ratio.")], HRESULT, 'MaintainAspectRatio',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'bRatio' )),
    COMMETHOD(['propput', helpstring(u"Indicates if the resize box will maintain the picture's aspect ratio.")], HRESULT, 'MaintainAspectRatio',
              ( ['in'], VARIANT_BOOL, 'bRatio' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the Picture will be stored in the Document.')], HRESULT, 'SavePictureInDocument',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'bSaveInDoc' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the Picture will be stored in the Document.')], HRESULT, 'SavePictureInDocument',
              ( ['in'], VARIANT_BOOL, 'bSaveInDoc' )),
    COMMETHOD([helpstring(u'File to be imported.')], HRESULT, 'ImportPictureFromFile',
              ( ['in'], BSTR, 'Name' )),
]
################################################################
## code template for IPictureElement implementation
##class IPictureElement_Impl(object):
##    @property
##    def PictureAspectRatio(self):
##        u'Filter used in CFileDialog.'
##        #return ratio
##
##    def _get(self):
##        u"Indicates if the resize box will maintain the picture's aspect ratio."
##        #return bRatio
##    def _set(self, bRatio):
##        u"Indicates if the resize box will maintain the picture's aspect ratio."
##    MaintainAspectRatio = property(_get, _set, doc = _set.__doc__)
##
##    def ImportPictureFromFile(self, Name):
##        u'File to be imported.'
##        #return 
##
##    @property
##    def Filter(self):
##        u'Filter used in CFileDialog.'
##        #return Filter
##
##    @property
##    def PictureDescription(self):
##        u'Description of the Picture Element.'
##        #return Description
##
##    def _get(self):
##        u'Indicates if the Picture will be stored in the Document.'
##        #return bSaveInDoc
##    def _set(self, bSaveInDoc):
##        u'Indicates if the Picture will be stored in the Document.'
##    SavePictureInDocument = property(_get, _set, doc = _set.__doc__)
##

class ITerrainRenderer2(ITerrainRenderer):
    _case_insensitive_ = True
    u'Provides access to members that control functions common to all Terrain renderers.'
    _iid_ = GUID('{0A7EA67A-3C04-4204-9FCC-BC56D18C773A}')
    _idlflags_ = ['oleautomation']
ITinRenderer._methods_ = [
    COMMETHOD([helpstring(u'Draws the TIN.')], HRESULT, 'Draw',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriDrawPhase, 'DrawPhase' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'aSpatialReference' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'TrackCancel' )),
    COMMETHOD([helpstring(u'Copies the properties of the given renderer.')], HRESULT, 'Copy',
              ( ['in'], POINTER(ITinRenderer), 'pSource' )),
    COMMETHOD([helpstring(u'Indicates if renderer can draw.')], HRESULT, 'CanRender',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pCanRender' )),
    COMMETHOD(['propputref', helpstring(u'The TIN associated with the renderer.')], HRESULT, 'Tin',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITin), 'ppTin' )),
    COMMETHOD(['propget', helpstring(u'The TIN associated with the renderer.')], HRESULT, 'Tin',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITin)), 'ppTin' )),
    COMMETHOD(['propget', helpstring(u'The descriptive name of a renderer.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'The descriptive name of a renderer.')], HRESULT, 'Name',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the renderer is currently visible.')], HRESULT, 'Visible',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Visible' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the renderer is currently visible.')], HRESULT, 'Visible',
              ( ['in'], VARIANT_BOOL, 'Visible' )),
]
################################################################
## code template for ITinRenderer implementation
##class ITinRenderer_Impl(object):
##    def Draw(self, DrawPhase, Display, aSpatialReference, TrackCancel):
##        u'Draws the TIN.'
##        #return 
##
##    def CanRender(self):
##        u'Indicates if renderer can draw.'
##        #return pCanRender
##
##    def _get(self):
##        u'The descriptive name of a renderer.'
##        #return Name
##    def _set(self, Name):
##        u'The descriptive name of a renderer.'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the renderer is currently visible.'
##        #return Visible
##    def _set(self, Visible):
##        u'Indicates if the renderer is currently visible.'
##    Visible = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Tin(self, ppTin):
##        u'The TIN associated with the renderer.'
##        #return 
##
##    def Copy(self, pSource):
##        u'Copies the properties of the given renderer.'
##        #return 
##

ITerrainRenderer._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The Terrain associated with the renderer.')], HRESULT, 'Terrain',
              ( ['in'], POINTER(comtypes.gen._7BA654FE_F55E_4EE5_8CF2_FAEFFBC04A61_0_10_2.ITerrain), 'ppTerrain' )),
    COMMETHOD(['propget', helpstring(u'The Terrain associated with the renderer.')], HRESULT, 'Terrain',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._7BA654FE_F55E_4EE5_8CF2_FAEFFBC04A61_0_10_2.ITerrain)), 'ppTerrain' )),
]
################################################################
## code template for ITerrainRenderer implementation
##class ITerrainRenderer_Impl(object):
##    @property
##    def Terrain(self, ppTerrain):
##        u'The Terrain associated with the renderer.'
##        #return 
##

ITerrainRenderer2._methods_ = [
    COMMETHOD(['propput', helpstring(u'The area of interest to be rendered.')], HRESULT, 'AreaOfInterest',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'ppAOI' )),
    COMMETHOD(['propget', helpstring(u'The area of interest to be rendered.')], HRESULT, 'AreaOfInterest',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'ppAOI' )),
    COMMETHOD(['propput', helpstring(u'The resolution to be rendered.')], HRESULT, 'Resolution',
              ( ['in'], c_double, 'pResolution' )),
    COMMETHOD(['propget', helpstring(u'The resolution to be rendered.')], HRESULT, 'Resolution',
              ( ['retval', 'out'], POINTER(c_double), 'pResolution' )),
]
################################################################
## code template for ITerrainRenderer2 implementation
##class ITerrainRenderer2_Impl(object):
##    def _get(self):
##        u'The resolution to be rendered.'
##        #return pResolution
##    def _set(self, pResolution):
##        u'The resolution to be rendered.'
##    Resolution = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The area of interest to be rendered.'
##        #return ppAOI
##    def _set(self, ppAOI):
##        u'The area of interest to be rendered.'
##    AreaOfInterest = property(_get, _set, doc = _set.__doc__)
##

IOlePictureElement._methods_ = [
    COMMETHOD([helpstring(u'Import Picture from an IPictureDisp interface.')], HRESULT, 'ImportPicture',
              ( ['in'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IPictureDisp), 'pictureDisp' )),
]
################################################################
## code template for IOlePictureElement implementation
##class IOlePictureElement_Impl(object):
##    def ImportPicture(self, pictureDisp):
##        u'Import Picture from an IPictureDisp interface.'
##        #return 
##

class IRasterExporter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a Bitmap converter.'
    _iid_ = GUID('{17E0103F-A5A1-47E8-A1F7-A7A5C0568CF5}')
    _idlflags_ = ['oleautomation']
IRasterExporter._methods_ = [
    COMMETHOD(['propget', helpstring(u'The raster renderer used for conversion.')], HRESULT, 'RasterRenderer',
              ( ['retval', 'out'], POINTER(POINTER(IRasterRenderer)), 'ppRenderer' )),
    COMMETHOD(['propputref', helpstring(u'The raster renderer used for conversion.')], HRESULT, 'RasterRenderer',
              ( ['in'], POINTER(IRasterRenderer), 'ppRenderer' )),
    COMMETHOD([helpstring(u'Converts a raster into a Bitmap.')], HRESULT, 'ExportToBytes',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' ),
              ( ['in'], BSTR, 'Format' ),
              ( ['retval', 'out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'ppBYTES' )),
]
################################################################
## code template for IRasterExporter implementation
##class IRasterExporter_Impl(object):
##    def RasterRenderer(self, ppRenderer):
##        u'The raster renderer used for conversion.'
##        #return 
##
##    def ExportToBytes(self, pRaster, Format):
##        u'Converts a raster into a Bitmap.'
##        #return ppBYTES
##

class MapTableSubtypeInfo(CoClass):
    u'A coclass that contains SubtypeInfos.'
    _reg_clsid_ = GUID('{72F8E5B1-6D40-4BC7-A4C0-65AADDC9289B}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
MapTableSubtypeInfo._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMapTableSubtypeInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersionSupportGEN]

class LayerDrawingDescriptions(CoClass):
    u'A colcass that contains Array of LayerDrawingDescription.'
    _reg_clsid_ = GUID('{9A28F6A0-0D17-4F40-8BB4-0419944E1E7B}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class ILayerDrawingDescriptions(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'LayerDrawingDescription Array.'
    _iid_ = GUID('{A7EF0D8E-FBEF-4EE5-9378-65333B68D069}')
    _idlflags_ = ['oleautomation']
LayerDrawingDescriptions._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILayerDrawingDescriptions, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class MapTableSubtypeInfos(CoClass):
    u'A coclass that contains Array of MapTableSubtypeInfo.'
    _reg_clsid_ = GUID('{33051880-6AC7-44B3-9930-CB4A3480D7A9}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
MapTableSubtypeInfos._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMapTableSubtypeInfos, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class IElementEditVertices(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the Element edit vertices object.'
    _iid_ = GUID('{86F32B62-7667-11D2-A2D3-080009B6F22B}')
    _idlflags_ = ['oleautomation']
IElementEditVertices._methods_ = [
    COMMETHOD([helpstring(u'Selection tracker to move points used by this element.')], HRESULT, 'GetMoveVerticesSelectionTracker',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISelectionTracker)), 'tracker' )),
    COMMETHOD(['propget', helpstring(u'Indicates if this element is moving its vertices.')], HRESULT, 'MovingVertices',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if this element is moving its vertices.')], HRESULT, 'MovingVertices',
              ( ['in'], VARIANT_BOOL, 'flag' )),
]
################################################################
## code template for IElementEditVertices implementation
##class IElementEditVertices_Impl(object):
##    def _get(self):
##        u'Indicates if this element is moving its vertices.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if this element is moving its vertices.'
##    MovingVertices = property(_get, _set, doc = _set.__doc__)
##
##    def GetMoveVerticesSelectionTracker(self):
##        u'Selection tracker to move points used by this element.'
##        #return tracker
##

class ScaleDependentRenderer(CoClass):
    u'A scale dependent renderer that is composed of multiple renderers, each operating within a particular scale range.'
    _reg_clsid_ = GUID('{207C19F5-ED81-11D0-8BBA-080009EE4E41}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
ScaleDependentRenderer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IScaleDependentRenderer, IFeatureRenderer, ILegendInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, IExportSupport]

class INITFGraphicsLayer(ILayer):
    _case_insensitive_ = True
    u'Provides access to members that control a NITF graphics layer.'
    _iid_ = GUID('{6F69B891-6BB2-41DC-B1CC-5F4C66B643F9}')
    _idlflags_ = ['oleautomation']
INITFGraphicsLayer._methods_ = [
    COMMETHOD([helpstring(u'Creates a NITF graphics layer.')], HRESULT, 'Create',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'x' ),
              ( ['in'], c_int, 'y' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'pExtent' ),
              ( ['in'], c_double, 'dx' ),
              ( ['in'], c_double, 'dy' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeodataXform), 'pXf' ),
              ( ['in'], BSTR, 'CGM' )),
    COMMETHOD([helpstring(u'Adds a NITF graphic.')], HRESULT, 'Add',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'pGeometry' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol), 'pSymbol' ),
              ( ['in'], c_int, 'Size' )),
]
################################################################
## code template for INITFGraphicsLayer implementation
##class INITFGraphicsLayer_Impl(object):
##    def Create(self, Name, x, y, pExtent, dx, dy, pXf, CGM):
##        u'Creates a NITF graphics layer.'
##        #return 
##
##    def Add(self, pGeometry, pSymbol, Size):
##        u'Adds a NITF graphic.'
##        #return 
##


# values for enumeration 'esriRectanglePosition'
esriTopSide = 1
esriBottomSide = 2
esriLeftSide = 3
esriRightSide = 4
esriRectanglePosition = c_int # enum
class ILinePatch(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Indicator interface that identifies a separate style gallery class for line patches.'
    _iid_ = GUID('{BEB4EDB7-E3B4-11D2-B868-00600802E603}')
    _idlflags_ = ['oleautomation']
class IAreaPatch(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the interface that identifies a separate style gallery class for area patches.'
    _iid_ = GUID('{BEB4EDB6-E3B4-11D2-B868-00600802E603}')
    _idlflags_ = ['oleautomation']
ILegendFormat._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if title is visibile.')], HRESULT, 'ShowTitle',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'ShowTitle' )),
    COMMETHOD(['propput', helpstring(u'Indicates if title is visibile.')], HRESULT, 'ShowTitle',
              ( ['in'], VARIANT_BOOL, 'ShowTitle' )),
    COMMETHOD(['propget', helpstring(u'Text symbol used to draw the legend title.')], HRESULT, 'TitleSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol)), 'Symbol' )),
    COMMETHOD(['propput', helpstring(u'Text symbol used to draw the legend title.')], HRESULT, 'TitleSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'Legend title position.')], HRESULT, 'TitlePosition',
              ( ['retval', 'out'], POINTER(esriRectanglePosition), 'pos' )),
    COMMETHOD(['propput', helpstring(u'Legend title position.')], HRESULT, 'TitlePosition',
              ( ['in'], esriRectanglePosition, 'pos' )),
    COMMETHOD(['propget', helpstring(u'Vertical distance in points between title and first legend item.')], HRESULT, 'TitleGap',
              ( ['retval', 'out'], POINTER(c_double), 'Gap' )),
    COMMETHOD(['propput', helpstring(u'Vertical distance in points between title and first legend item.')], HRESULT, 'TitleGap',
              ( ['in'], c_double, 'Gap' )),
    COMMETHOD(['propget', helpstring(u'Vertical distance in points between legend items.')], HRESULT, 'VerticalItemGap',
              ( ['retval', 'out'], POINTER(c_double), 'Gap' )),
    COMMETHOD(['propput', helpstring(u'Vertical distance in points between legend items.')], HRESULT, 'VerticalItemGap',
              ( ['in'], c_double, 'Gap' )),
    COMMETHOD(['propget', helpstring(u'Horizontal distance in points between legend item columns. Used for legends that have more than one column.')], HRESULT, 'HorizontalItemGap',
              ( ['retval', 'out'], POINTER(c_double), 'Gap' )),
    COMMETHOD(['propput', helpstring(u'Horizontal distance in points between legend item columns. Used for legends that have more than one column.')], HRESULT, 'HorizontalItemGap',
              ( ['in'], c_double, 'Gap' )),
    COMMETHOD(['propget', helpstring(u'Vertical distance in points between layer names and the legend graphics that follow.')], HRESULT, 'LayerNameGap',
              ( ['retval', 'out'], POINTER(c_double), 'Gap' )),
    COMMETHOD(['propput', helpstring(u'Vertical distance in points between layer names and the legend graphics that follow.')], HRESULT, 'LayerNameGap',
              ( ['in'], c_double, 'Gap' )),
    COMMETHOD(['propget', helpstring(u'Vertical distance in points between legend groups.')], HRESULT, 'GroupGap',
              ( ['retval', 'out'], POINTER(c_double), 'Gap' )),
    COMMETHOD(['propput', helpstring(u'Vertical distance in points between legend groups.')], HRESULT, 'GroupGap',
              ( ['in'], c_double, 'Gap' )),
    COMMETHOD(['propget', helpstring(u'Vertical distance in points between a heading and the legend graphics that follow.')], HRESULT, 'HeadingGap',
              ( ['retval', 'out'], POINTER(c_double), 'Gap' )),
    COMMETHOD(['propput', helpstring(u'Vertical distance in points between a heading and the legend graphics that follow.')], HRESULT, 'HeadingGap',
              ( ['in'], c_double, 'Gap' )),
    COMMETHOD(['propget', helpstring(u'Horizontal distance in points between labels and descriptions.')], HRESULT, 'TextGap',
              ( ['retval', 'out'], POINTER(c_double), 'Gap' )),
    COMMETHOD(['propput', helpstring(u'Horizontal distance in points between labels and descriptions.')], HRESULT, 'TextGap',
              ( ['in'], c_double, 'Gap' )),
    COMMETHOD(['propget', helpstring(u'Vertical distance in points between patches.')], HRESULT, 'VerticalPatchGap',
              ( ['retval', 'out'], POINTER(c_double), 'Gap' )),
    COMMETHOD(['propput', helpstring(u'Vertical distance in points between patches.')], HRESULT, 'VerticalPatchGap',
              ( ['in'], c_double, 'Gap' )),
    COMMETHOD(['propget', helpstring(u'Horizontal distance in points between a patch and the legend graphics before and after.')], HRESULT, 'HorizontalPatchGap',
              ( ['retval', 'out'], POINTER(c_double), 'Gap' )),
    COMMETHOD(['propput', helpstring(u'Horizontal distance in points between a patch and the legend graphics before and after.')], HRESULT, 'HorizontalPatchGap',
              ( ['in'], c_double, 'Gap' )),
    COMMETHOD(['propget', helpstring(u'Patch width in points.  Can be overridden by the LegendItem.')], HRESULT, 'DefaultPatchWidth',
              ( ['retval', 'out'], POINTER(c_double), 'Width' )),
    COMMETHOD(['propput', helpstring(u'Patch width in points.  Can be overridden by the LegendItem.')], HRESULT, 'DefaultPatchWidth',
              ( ['in'], c_double, 'Width' )),
    COMMETHOD(['propget', helpstring(u'Patch height in points.  Can be overridden by the LegendItem.')], HRESULT, 'DefaultPatchHeight',
              ( ['retval', 'out'], POINTER(c_double), 'Height' )),
    COMMETHOD(['propput', helpstring(u'Patch height in points.  Can be overridden by the LegendItem.')], HRESULT, 'DefaultPatchHeight',
              ( ['in'], c_double, 'Height' )),
    COMMETHOD(['propget', helpstring(u'Line patch.  Can be overridden by the LegendItem.')], HRESULT, 'DefaultLinePatch',
              ( ['retval', 'out'], POINTER(POINTER(ILinePatch)), 'patch' )),
    COMMETHOD(['propput', helpstring(u'Line patch.  Can be overridden by the LegendItem.')], HRESULT, 'DefaultLinePatch',
              ( ['in'], POINTER(ILinePatch), 'patch' )),
    COMMETHOD(['propget', helpstring(u'Area patch.  Can be overridden by the LegendItem.')], HRESULT, 'DefaultAreaPatch',
              ( ['retval', 'out'], POINTER(POINTER(IAreaPatch)), 'patch' )),
    COMMETHOD(['propput', helpstring(u'Area patch.  Can be overridden by the LegendItem.')], HRESULT, 'DefaultAreaPatch',
              ( ['in'], POINTER(IAreaPatch), 'patch' )),
    COMMETHOD([helpstring(u'Multiply all distances, gaps, and size property values on this interface by the specified scale factors.')], HRESULT, 'Scale',
              ( ['in'], c_double, 'xScale' ),
              ( ['in'], c_double, 'yScale' )),
]
################################################################
## code template for ILegendFormat implementation
##class ILegendFormat_Impl(object):
##    def _get(self):
##        u'Line patch.  Can be overridden by the LegendItem.'
##        #return patch
##    def _set(self, patch):
##        u'Line patch.  Can be overridden by the LegendItem.'
##    DefaultLinePatch = property(_get, _set, doc = _set.__doc__)
##
##    def Scale(self, xScale, yScale):
##        u'Multiply all distances, gaps, and size property values on this interface by the specified scale factors.'
##        #return 
##
##    def _get(self):
##        u'Legend title position.'
##        #return pos
##    def _set(self, pos):
##        u'Legend title position.'
##    TitlePosition = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Patch width in points.  Can be overridden by the LegendItem.'
##        #return Width
##    def _set(self, Width):
##        u'Patch width in points.  Can be overridden by the LegendItem.'
##    DefaultPatchWidth = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Horizontal distance in points between a patch and the legend graphics before and after.'
##        #return Gap
##    def _set(self, Gap):
##        u'Horizontal distance in points between a patch and the legend graphics before and after.'
##    HorizontalPatchGap = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Horizontal distance in points between legend item columns. Used for legends that have more than one column.'
##        #return Gap
##    def _set(self, Gap):
##        u'Horizontal distance in points between legend item columns. Used for legends that have more than one column.'
##    HorizontalItemGap = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Vertical distance in points between patches.'
##        #return Gap
##    def _set(self, Gap):
##        u'Vertical distance in points between patches.'
##    VerticalPatchGap = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Area patch.  Can be overridden by the LegendItem.'
##        #return patch
##    def _set(self, patch):
##        u'Area patch.  Can be overridden by the LegendItem.'
##    DefaultAreaPatch = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Patch height in points.  Can be overridden by the LegendItem.'
##        #return Height
##    def _set(self, Height):
##        u'Patch height in points.  Can be overridden by the LegendItem.'
##    DefaultPatchHeight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Text symbol used to draw the legend title.'
##        #return Symbol
##    def _set(self, Symbol):
##        u'Text symbol used to draw the legend title.'
##    TitleSymbol = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Vertical distance in points between a heading and the legend graphics that follow.'
##        #return Gap
##    def _set(self, Gap):
##        u'Vertical distance in points between a heading and the legend graphics that follow.'
##    HeadingGap = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if title is visibile.'
##        #return ShowTitle
##    def _set(self, ShowTitle):
##        u'Indicates if title is visibile.'
##    ShowTitle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Vertical distance in points between legend items.'
##        #return Gap
##    def _set(self, Gap):
##        u'Vertical distance in points between legend items.'
##    VerticalItemGap = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Horizontal distance in points between labels and descriptions.'
##        #return Gap
##    def _set(self, Gap):
##        u'Horizontal distance in points between labels and descriptions.'
##    TextGap = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Vertical distance in points between layer names and the legend graphics that follow.'
##        #return Gap
##    def _set(self, Gap):
##        u'Vertical distance in points between layer names and the legend graphics that follow.'
##    LayerNameGap = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Vertical distance in points between title and first legend item.'
##        #return Gap
##    def _set(self, Gap):
##        u'Vertical distance in points between title and first legend item.'
##    TitleGap = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Vertical distance in points between legend groups.'
##        #return Gap
##    def _set(self, Gap):
##        u'Vertical distance in points between legend groups.'
##    GroupGap = property(_get, _set, doc = _set.__doc__)
##

IServiceDataOptions._methods_ = [
    COMMETHOD(['propget', helpstring(u'ETag.')], HRESULT, 'ETag',
              ( ['retval', 'out'], POINTER(BSTR), 'ETag' )),
    COMMETHOD(['propput', helpstring(u'ETag.')], HRESULT, 'ETag',
              ( ['in'], BSTR, 'ETag' )),
    COMMETHOD(['propget', helpstring(u'Object Data Format')], HRESULT, 'Format',
              ( ['retval', 'out'], POINTER(BSTR), 'Format' )),
    COMMETHOD(['propput', helpstring(u'Object Data Format')], HRESULT, 'Format',
              ( ['in'], BSTR, 'Format' )),
    COMMETHOD(['propget', helpstring(u'Properties for Service Data options.')], HRESULT, 'Properties',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet)), 'optionsProperties' )),
    COMMETHOD(['propputref', helpstring(u'Properties for Service Data options.')], HRESULT, 'Properties',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet), 'optionsProperties' )),
    COMMETHOD(['propget', helpstring(u'Transport Type')], HRESULT, 'TransportType',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriTransportType), 'TransportType' )),
    COMMETHOD(['propput', helpstring(u'Transport Type')], HRESULT, 'TransportType',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriTransportType, 'TransportType' )),
]
################################################################
## code template for IServiceDataOptions implementation
##class IServiceDataOptions_Impl(object):
##    def _get(self):
##        u'Transport Type'
##        #return TransportType
##    def _set(self, TransportType):
##        u'Transport Type'
##    TransportType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'ETag.'
##        #return ETag
##    def _set(self, ETag):
##        u'ETag.'
##    ETag = property(_get, _set, doc = _set.__doc__)
##
##    def Properties(self, optionsProperties):
##        u'Properties for Service Data options.'
##        #return 
##
##    def _get(self):
##        u'Object Data Format'
##        #return Format
##    def _set(self, Format):
##        u'Object Data Format'
##    Format = property(_get, _set, doc = _set.__doc__)
##

class BiUniqueValueRenderer(CoClass):
    u'A bivariate renderer that combines a unique values renderer with a class breaks renderer (either graduated colors or graduated symbol type symbology).'
    _reg_clsid_ = GUID('{B899CCD3-CD1C-11D2-9F25-00C04F6BC709}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IBivariateRenderer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the rendering of bivariate symbology based on two constiuent renderers.'
    _iid_ = GUID('{AE1248B5-CD1E-11D2-9F25-00C04F6BC709}')
    _idlflags_ = ['oleautomation']
BiUniqueValueRenderer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IFeatureRenderer, IBivariateRenderer, ILegendInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, IExportSupport]

class IRealTimeFeedEvents(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the events fired by a real-time feed object.'
    _iid_ = GUID('{9E109B23-9311-4B76-AB9A-7ED5CE07C08E}')
    _idlflags_ = ['oleautomation']
class esriGpsPositionInfo(Structure):
    _recordinfo_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2, 0L, '{6139BED5-44C9-4322-ACAC-886A35F4D613}')
class esriGpsMagneticVariance(Structure):
    _recordinfo_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2, 0L, '{F7F84434-3A25-4DBA-A9CA-B6A39CC406BF}')
class esriGpsGroundCourse(Structure):
    _recordinfo_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2, 0L, '{7DFCFB68-3C56-499C-A315-F3A25EF63D55}')
class esriGpsDOPInfo(Structure):
    _recordinfo_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2, 0L, '{ED737320-B912-498A-A1E5-50F941DE6D35}')
class esriGpsDateTime(Structure):
    _recordinfo_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2, 0L, '{78A13AD7-BB65-4F8E-B3D4-5AEC1FB20A9F}')

# values for enumeration 'esriGpsConnectionStatus'
esriGpsConnectionStatusClosed = 0
esriGpsConnectionStatusOpen = 1
esriGpsConnectionStatusNoSignal = 2
esriGpsConnectionStatusPoorSignal = 3
esriGpsConnectionStatusReceiving = 4
esriGpsConnectionStatus = c_int # enum
IRealTimeFeedEvents._methods_ = [
    COMMETHOD([helpstring(u"Reports the current position when it is updated. 'estimate' is true if the signal is lost and the position is estimated.")], HRESULT, 'PositionUpdated',
              ( ['in'], POINTER(esriGpsPositionInfo), 'position' ),
              ( ['in'], VARIANT_BOOL, 'estimate' )),
    COMMETHOD([helpstring(u'Reports the current magnetic variance when it is updated.')], HRESULT, 'MagneticVarianceUpdated',
              ( ['in'], POINTER(esriGpsMagneticVariance), 'pMagneticVar' )),
    COMMETHOD([helpstring(u'Reports the current ground variance when it is updated.')], HRESULT, 'GroundCourseUpdated',
              ( ['in'], POINTER(esriGpsGroundCourse), 'pGroundCourse' )),
    COMMETHOD([helpstring(u'Reports the current DOP information when it is updated.')], HRESULT, 'DopInfoUpdated',
              ( ['in'], POINTER(esriGpsDOPInfo), 'pdop' )),
    COMMETHOD([helpstring(u'Reports the current satellite information when it is updated.')], HRESULT, 'SatelliteInfoUpdated',
              ( ['in'], c_int, 'satelliteCount' )),
    COMMETHOD([helpstring(u'Reports the date and time when it is updated.')], HRESULT, 'DateTimeUpdated',
              ( ['in'], POINTER(esriGpsDateTime), 'pNewDateTime' )),
    COMMETHOD([helpstring(u'Reports the DGPS information when it is updated.')], HRESULT, 'DgpsInfoUpdated',
              ( ['in'], POINTER(esriGpsDgpsInfo), 'pNewDGPSInfo' )),
    COMMETHOD([helpstring(u'Reports the connection information when it is updated.')], HRESULT, 'ConnectionStatusUpdated',
              ( ['in'], POINTER(esriGpsConnectionStatus), 'pConnectionStatus' )),
]
################################################################
## code template for IRealTimeFeedEvents implementation
##class IRealTimeFeedEvents_Impl(object):
##    def GroundCourseUpdated(self, pGroundCourse):
##        u'Reports the current ground variance when it is updated.'
##        #return 
##
##    def ConnectionStatusUpdated(self, pConnectionStatus):
##        u'Reports the connection information when it is updated.'
##        #return 
##
##    def DopInfoUpdated(self, pdop):
##        u'Reports the current DOP information when it is updated.'
##        #return 
##
##    def DgpsInfoUpdated(self, pNewDGPSInfo):
##        u'Reports the DGPS information when it is updated.'
##        #return 
##
##    def DateTimeUpdated(self, pNewDateTime):
##        u'Reports the date and time when it is updated.'
##        #return 
##
##    def MagneticVarianceUpdated(self, pMagneticVar):
##        u'Reports the current magnetic variance when it is updated.'
##        #return 
##
##    def SatelliteInfoUpdated(self, satelliteCount):
##        u'Reports the current satellite information when it is updated.'
##        #return 
##
##    def PositionUpdated(self, position, estimate):
##        u"Reports the current position when it is updated. 'estimate' is true if the signal is lost and the position is estimated."
##        #return 
##

ICompositeLayer._methods_ = [
    COMMETHOD(['propget', helpstring(u'Number of layers in the collection.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'LayerCount' )),
    COMMETHOD(['propget', helpstring(u'Layer in the collection at the specified index.')], HRESULT, 'Layer',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(ILayer)), 'Layer' )),
]
################################################################
## code template for ICompositeLayer implementation
##class ICompositeLayer_Impl(object):
##    @property
##    def Count(self):
##        u'Number of layers in the collection.'
##        #return LayerCount
##
##    @property
##    def Layer(self, Index):
##        u'Layer in the collection at the specified index.'
##        #return Layer
##

class TrackCancel(CoClass):
    u'A CancelTracker for use in Server Context.'
    _reg_clsid_ = GUID('{804AE032-073E-4088-92A5-F24E0D9DE958}')
    _idlflags_ = ['hidden']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
TrackCancel._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel]

class ILineElement(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the Line element.'
    _iid_ = GUID('{FF44A611-DCF6-11D0-838B-080009B996CC}')
    _idlflags_ = ['oleautomation']
ILineElement._methods_ = [
    COMMETHOD(['propget', helpstring(u'Line symbol this element uses to draw itself.')], HRESULT, 'Symbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ILineSymbol)), 'Symbol' )),
    COMMETHOD(['propput', helpstring(u'Line symbol this element uses to draw itself.')], HRESULT, 'Symbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ILineSymbol), 'Symbol' )),
]
################################################################
## code template for ILineElement implementation
##class ILineElement_Impl(object):
##    def _get(self):
##        u'Line symbol this element uses to draw itself.'
##        #return Symbol
##    def _set(self, Symbol):
##        u'Line symbol this element uses to draw itself.'
##    Symbol = property(_get, _set, doc = _set.__doc__)
##

class ButtonTabStyle(CoClass):
    u'A button tab style grid label for index grids.'
    _reg_clsid_ = GUID('{AC81ECF8-9EE4-11D2-AADF-000000000000}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IGridLabel2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides additional access to members that control the way a map grid is labeled.'
    _iid_ = GUID('{76B22CBA-A25B-41E5-B8BA-F29AE31822BB}')
    _idlflags_ = ['oleautomation']
class IGridLabelExport(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that export a Grid Label into a graphic element.'
    _iid_ = GUID('{ED656E23-E953-11D3-9FDA-00C04F6BC78E}')
    _idlflags_ = ['oleautomation']
ButtonTabStyle._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IIndexGridTabStyle, IGridLabel, IGridLabel2, IGridLabelExport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

class ServerSymbolOutputOptions(CoClass):
    u'Options to control the server symbol output.'
    _reg_clsid_ = GUID('{D045F9EB-53A0-4D6C-B219-E9A600BDDB7C}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
ServerSymbolOutputOptions._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IServerSymbolOutputOptions, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersionSupportGEN]

class IDataExclusion(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the exclusion of data values from a renderer.'
    _iid_ = GUID('{3D961D65-FC94-11D1-AACA-00C04FA334B3}')
    _idlflags_ = ['oleautomation']
IDataExclusion._methods_ = [
    COMMETHOD(['propget', helpstring(u'Data exclusion where clause.')], HRESULT, 'ExclusionClause',
              ( ['retval', 'out'], POINTER(BSTR), 'clause' )),
    COMMETHOD(['propput', helpstring(u'Data exclusion where clause.')], HRESULT, 'ExclusionClause',
              ( ['in'], BSTR, 'clause' )),
    COMMETHOD(['propget', helpstring(u'Symbol used to draw excluded values.')], HRESULT, 'ExclusionSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol)), 'Symbol' )),
    COMMETHOD(['propput', helpstring(u'Symbol used to draw excluded values.')], HRESULT, 'ExclusionSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the exclusion symbol is used.')], HRESULT, 'ShowExclusionClass',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Show' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the exclusion symbol is used.')], HRESULT, 'ShowExclusionClass',
              ( ['in'], VARIANT_BOOL, 'Show' )),
    COMMETHOD(['propget', helpstring(u'Label for the excluded data.')], HRESULT, 'ExclusionLabel',
              ( ['retval', 'out'], POINTER(BSTR), 'Label' )),
    COMMETHOD(['propput', helpstring(u'Label for the excluded data.')], HRESULT, 'ExclusionLabel',
              ( ['in'], BSTR, 'Label' )),
    COMMETHOD(['propget', helpstring(u'Description for the excluded data.')], HRESULT, 'ExclusionDescription',
              ( ['retval', 'out'], POINTER(BSTR), 'Text' )),
    COMMETHOD(['propput', helpstring(u'Description for the excluded data.')], HRESULT, 'ExclusionDescription',
              ( ['in'], BSTR, 'Text' )),
]
################################################################
## code template for IDataExclusion implementation
##class IDataExclusion_Impl(object):
##    def _get(self):
##        u'Label for the excluded data.'
##        #return Label
##    def _set(self, Label):
##        u'Label for the excluded data.'
##    ExclusionLabel = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the exclusion symbol is used.'
##        #return Show
##    def _set(self, Show):
##        u'Indicates if the exclusion symbol is used.'
##    ShowExclusionClass = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Data exclusion where clause.'
##        #return clause
##    def _set(self, clause):
##        u'Data exclusion where clause.'
##    ExclusionClause = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Description for the excluded data.'
##        #return Text
##    def _set(self, Text):
##        u'Description for the excluded data.'
##    ExclusionDescription = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Symbol used to draw excluded values.'
##        #return Symbol
##    def _set(self, Symbol):
##        u'Symbol used to draw excluded values.'
##    ExclusionSymbol = property(_get, _set, doc = _set.__doc__)
##

class JoinTableSourceDescription(CoClass):
    u'A coclass that contains settings of a join that the table is participating.'
    _reg_clsid_ = GUID('{C0C77549-7235-4BA8-AF46-B419D303870C}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IJoinTableSourceDescription(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the available properties of a Join Table Source Description object.'
    _iid_ = GUID('{5AA7D4D5-8F05-4A61-BCBA-CEC06AFD4118}')
    _idlflags_ = ['oleautomation']
class IMapServerSourceDescription(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Indicator interface that indicates a data source for a dynamic layer or standalone table.'
    _iid_ = GUID('{336DA0FE-ACCA-4471-88F7-E9261BC342E1}')
    _idlflags_ = ['oleautomation']
JoinTableSourceDescription._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IJoinTableSourceDescription, IMapServerSourceDescription, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersionSupportGEN]

class ISymbolCollectionElement(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides further access to members that control Collection Symbol Elements.'
    _iid_ = GUID('{9AEC8465-B8C8-4099-95A8-49815539A8A7}')
    _idlflags_ = ['oleautomation']
ISymbolCollectionElement._methods_ = [
    COMMETHOD(['propget', helpstring(u'Symbol ID associated with this element.')], HRESULT, 'SymbolID',
              ( ['retval', 'out'], POINTER(c_int), 'SymbolID' )),
    COMMETHOD(['propput', helpstring(u'The symbol ID associated with this element.')], HRESULT, 'SharedSymbol',
              ( ['in'], c_int, 'SymbolID' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol), 'rhs' )),
    COMMETHOD([helpstring(u'Collection symbol.')], HRESULT, 'GetSharedSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol)), 'Symbol' )),
    COMMETHOD([helpstring(u'Saves the anno in a compressed format.')], HRESULT, 'ExportToESRIAnno',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStream), 'stream' )),
    COMMETHOD([helpstring(u'Loads the anno in a compressed format.')], HRESULT, 'ImportFromESRIAnno',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStream), 'stream' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'SpatialReference' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbolCollection), 'SymbolCollection' )),
    COMMETHOD([helpstring(u'Draws the anno in a compressed format.')], HRESULT, 'DrawESRIAnno',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStream), 'stream' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbolCollection), 'SymbolCollection' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'spatialRef' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' )),
    COMMETHOD(['propget', helpstring(u'Text offset along X-axis.')], HRESULT, 'XOffset',
              ( ['retval', 'out'], POINTER(c_double), 'XOffset' )),
    COMMETHOD(['propput', helpstring(u'Text offset along X-axis.')], HRESULT, 'XOffset',
              ( ['in'], c_double, 'XOffset' )),
    COMMETHOD(['propget', helpstring(u'Text offset along Y-axis.')], HRESULT, 'YOffset',
              ( ['retval', 'out'], POINTER(c_double), 'YOffset' )),
    COMMETHOD(['propput', helpstring(u'Text offset along Y-axis.')], HRESULT, 'YOffset',
              ( ['in'], c_double, 'YOffset' )),
    COMMETHOD(['propget', helpstring(u'Vertical alignment style.')], HRESULT, 'VerticalAlignment',
              ( ['retval', 'out'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.esriTextVerticalAlignment), 'vertAlignment' )),
    COMMETHOD(['propput', helpstring(u'Vertical alignment style.')], HRESULT, 'VerticalAlignment',
              ( ['in'], comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.esriTextVerticalAlignment, 'vertAlignment' )),
    COMMETHOD(['propget', helpstring(u'Horizontal alignment style.')], HRESULT, 'HorizontalAlignment',
              ( ['retval', 'out'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.esriTextHorizontalAlignment), 'horizAlignment' )),
    COMMETHOD(['propput', helpstring(u'Horizontal alignment style.')], HRESULT, 'HorizontalAlignment',
              ( ['in'], comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.esriTextHorizontalAlignment, 'horizAlignment' )),
    COMMETHOD(['propget', helpstring(u'Flip angle.')], HRESULT, 'FlipAngle',
              ( ['retval', 'out'], POINTER(c_double), 'FlipAngle' )),
    COMMETHOD(['propput', helpstring(u'Flip angle.')], HRESULT, 'FlipAngle',
              ( ['in'], c_double, 'FlipAngle' )),
    COMMETHOD(['propget', helpstring(u'Callout anchor point.')], HRESULT, 'AnchorPoint',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint)), 'AnchorPoint' )),
    COMMETHOD(['propput', helpstring(u'Callout anchor point.')], HRESULT, 'AnchorPoint',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'AnchorPoint' )),
    COMMETHOD(['propget', helpstring(u'Font size.')], HRESULT, 'Size',
              ( ['retval', 'out'], POINTER(c_double), 'pointSize' )),
    COMMETHOD(['propput', helpstring(u'Font size.')], HRESULT, 'Size',
              ( ['in'], c_double, 'pointSize' )),
    COMMETHOD(['propget', helpstring(u'Font color.')], HRESULT, 'Color',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'Font color.')], HRESULT, 'Color',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'Text path.')], HRESULT, 'TextPath',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextPath)), 'TextPath' )),
    COMMETHOD(['propputref', helpstring(u'Text path.')], HRESULT, 'TextPath',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextPath), 'TextPath' )),
    COMMETHOD(['propget', helpstring(u'The character spacing.')], HRESULT, 'CharacterSpacing',
              ( ['retval', 'out'], POINTER(c_double), 'CharacterSpacing' )),
    COMMETHOD(['propput', helpstring(u'The character spacing.')], HRESULT, 'CharacterSpacing',
              ( ['in'], c_double, 'CharacterSpacing' )),
    COMMETHOD(['propget', helpstring(u'The character width.')], HRESULT, 'CharacterWidth',
              ( ['retval', 'out'], POINTER(c_double), 'CharacterWidth' )),
    COMMETHOD(['propput', helpstring(u'The character width.')], HRESULT, 'CharacterWidth',
              ( ['in'], c_double, 'CharacterWidth' )),
    COMMETHOD(['propget', helpstring(u'The word spacing.')], HRESULT, 'WordSpacing',
              ( ['retval', 'out'], POINTER(c_double), 'WordSpacing' )),
    COMMETHOD(['propput', helpstring(u'The word spacing.')], HRESULT, 'WordSpacing',
              ( ['in'], c_double, 'WordSpacing' )),
    COMMETHOD(['propget', helpstring(u'The character leading.')], HRESULT, 'Leading',
              ( ['retval', 'out'], POINTER(c_double), 'Leading' )),
    COMMETHOD(['propput', helpstring(u'The character leading.')], HRESULT, 'Leading',
              ( ['in'], c_double, 'Leading' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether bold fonts style.')], HRESULT, 'Bold',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Bold' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether bold fonts style.')], HRESULT, 'Bold',
              ( ['in'], VARIANT_BOOL, 'Bold' )),
    COMMETHOD(['propget', helpstring(u'Font name.')], HRESULT, 'FontName',
              ( ['retval', 'out'], POINTER(BSTR), 'FontName' )),
    COMMETHOD(['propput', helpstring(u'Font name.')], HRESULT, 'FontName',
              ( ['in'], BSTR, 'FontName' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether italic font style.')], HRESULT, 'Italic',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Italic' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether italic font style.')], HRESULT, 'Italic',
              ( ['in'], VARIANT_BOOL, 'Italic' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether underline font style.')], HRESULT, 'Underline',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Underline' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether underline font style.')], HRESULT, 'Underline',
              ( ['in'], VARIANT_BOOL, 'Underline' )),
    COMMETHOD(['propget', helpstring(u'Background symbol.')], HRESULT, 'Background',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextBackground)), 'Symbol' )),
    COMMETHOD(['propputref', helpstring(u'Background symbol.')], HRESULT, 'Background',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextBackground), 'Symbol' )),
    COMMETHOD(['propput', helpstring(u'Overridden properties.')], HRESULT, 'OverriddenProperties',
              ( ['in'], c_int, 'props' )),
    COMMETHOD(['propget', helpstring(u'Overridden properties.')], HRESULT, 'OverriddenProperties',
              ( ['retval', 'out'], POINTER(c_int), 'props' )),
    COMMETHOD(['propput', helpstring(u'Mask used to exclude overrides when drawing.')], HRESULT, 'OverriddenPropertiesExclusionMask',
              ( ['in'], c_int, 'Mask' )),
    COMMETHOD(['propget', helpstring(u'Mask used to exclude overrides when drawing.')], HRESULT, 'OverriddenPropertiesExclusionMask',
              ( ['retval', 'out'], POINTER(c_int), 'Mask' )),
    COMMETHOD(['propget', helpstring(u'Text being displayed by this element.')], HRESULT, 'Text',
              ( ['retval', 'out'], POINTER(BSTR), 'Text' )),
    COMMETHOD(['propput', helpstring(u'Text being displayed by this element.')], HRESULT, 'Text',
              ( ['in'], BSTR, 'Text' )),
    COMMETHOD(['propget', helpstring(u'Shape of the element as a geometry.')], HRESULT, 'Geometry',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry)), 'pGeometry' )),
    COMMETHOD(['propput', helpstring(u'Shape of the element as a geometry.')], HRESULT, 'Geometry',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'pGeometry' )),
]
################################################################
## code template for ISymbolCollectionElement implementation
##class ISymbolCollectionElement_Impl(object):
##    def _get(self):
##        u'Callout anchor point.'
##        #return AnchorPoint
##    def _set(self, AnchorPoint):
##        u'Callout anchor point.'
##    AnchorPoint = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The character width.'
##        #return CharacterWidth
##    def _set(self, CharacterWidth):
##        u'The character width.'
##    CharacterWidth = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The character leading.'
##        #return Leading
##    def _set(self, Leading):
##        u'The character leading.'
##    Leading = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Text offset along Y-axis.'
##        #return YOffset
##    def _set(self, YOffset):
##        u'Text offset along Y-axis.'
##    YOffset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether italic font style.'
##        #return Italic
##    def _set(self, Italic):
##        u'Indicates whether italic font style.'
##    Italic = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Overridden properties.'
##        #return props
##    def _set(self, props):
##        u'Overridden properties.'
##    OverriddenProperties = property(_get, _set, doc = _set.__doc__)
##
##    def DrawESRIAnno(self, stream, SymbolCollection, spatialRef, Display):
##        u'Draws the anno in a compressed format.'
##        #return 
##
##    def _get(self):
##        u'Text offset along X-axis.'
##        #return XOffset
##    def _set(self, XOffset):
##        u'Text offset along X-axis.'
##    XOffset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Font name.'
##        #return FontName
##    def _set(self, FontName):
##        u'Font name.'
##    FontName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether bold fonts style.'
##        #return Bold
##    def _set(self, Bold):
##        u'Indicates whether bold fonts style.'
##    Bold = property(_get, _set, doc = _set.__doc__)
##
##    def TextPath(self, TextPath):
##        u'Text path.'
##        #return 
##
##    def _get(self):
##        u'Shape of the element as a geometry.'
##        #return pGeometry
##    def _set(self, pGeometry):
##        u'Shape of the element as a geometry.'
##    Geometry = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The character spacing.'
##        #return CharacterSpacing
##    def _set(self, CharacterSpacing):
##        u'The character spacing.'
##    CharacterSpacing = property(_get, _set, doc = _set.__doc__)
##
##    def Background(self, Symbol):
##        u'Background symbol.'
##        #return 
##
##    def _get(self):
##        u'Flip angle.'
##        #return FlipAngle
##    def _set(self, FlipAngle):
##        u'Flip angle.'
##    FlipAngle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Mask used to exclude overrides when drawing.'
##        #return Mask
##    def _set(self, Mask):
##        u'Mask used to exclude overrides when drawing.'
##    OverriddenPropertiesExclusionMask = property(_get, _set, doc = _set.__doc__)
##
##    def GetSharedSymbol(self):
##        u'Collection symbol.'
##        #return Symbol
##
##    def _get(self):
##        u'Vertical alignment style.'
##        #return vertAlignment
##    def _set(self, vertAlignment):
##        u'Vertical alignment style.'
##    VerticalAlignment = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The word spacing.'
##        #return WordSpacing
##    def _set(self, WordSpacing):
##        u'The word spacing.'
##    WordSpacing = property(_get, _set, doc = _set.__doc__)
##
##    def ImportFromESRIAnno(self, stream, SpatialReference, SymbolCollection):
##        u'Loads the anno in a compressed format.'
##        #return 
##
##    def _get(self):
##        u'Font color.'
##        #return Color
##    def _set(self, Color):
##        u'Font color.'
##    Color = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Text being displayed by this element.'
##        #return Text
##    def _set(self, Text):
##        u'Text being displayed by this element.'
##    Text = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SymbolID(self):
##        u'Symbol ID associated with this element.'
##        #return SymbolID
##
##    def ExportToESRIAnno(self, stream):
##        u'Saves the anno in a compressed format.'
##        #return 
##
##    def _get(self):
##        u'Horizontal alignment style.'
##        #return horizAlignment
##    def _set(self, horizAlignment):
##        u'Horizontal alignment style.'
##    HorizontalAlignment = property(_get, _set, doc = _set.__doc__)
##
##    def _set(self, SymbolID, rhs):
##        u'The symbol ID associated with this element.'
##    SharedSymbol = property(fset = _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether underline font style.'
##        #return Underline
##    def _set(self, Underline):
##        u'Indicates whether underline font style.'
##    Underline = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Font size.'
##        #return pointSize
##    def _set(self, pointSize):
##        u'Font size.'
##    Size = property(_get, _set, doc = _set.__doc__)
##

IDataExclusion2._methods_ = [
    COMMETHOD([helpstring(u'Disconnects the data from the renderer.')], HRESULT, 'Disconnect'),
]
################################################################
## code template for IDataExclusion2 implementation
##class IDataExclusion2_Impl(object):
##    def Disconnect(self):
##        u'Disconnects the data from the renderer.'
##        #return 
##

class IElementEditCallout(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the Element edit vertices object.'
    _iid_ = GUID('{B6C88D50-E8B6-11D4-8408-0080C79F0371}')
    _idlflags_ = ['oleautomation']
IElementEditCallout._methods_ = [
    COMMETHOD([helpstring(u'Returns the selection tracker to move the text used by this element.')], HRESULT, 'GetMoveTextSelectionTracker',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISelectionTracker)), 'tracker' )),
    COMMETHOD(['propget', helpstring(u"Indicates if this element is editing it's callout.")], HRESULT, 'EditingCallout',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u"Indicates if this element is editing it's callout.")], HRESULT, 'EditingCallout',
              ( ['in'], VARIANT_BOOL, 'flag' )),
]
################################################################
## code template for IElementEditCallout implementation
##class IElementEditCallout_Impl(object):
##    def GetMoveTextSelectionTracker(self):
##        u'Returns the selection tracker to move the text used by this element.'
##        #return tracker
##
##    def _get(self):
##        u"Indicates if this element is editing it's callout."
##        #return flag
##    def _set(self, flag):
##        u"Indicates if this element is editing it's callout."
##    EditingCallout = property(_get, _set, doc = _set.__doc__)
##

class MapTableSourceDescription(CoClass):
    u'A coclass that contains settings to describe the source of the table.'
    _reg_clsid_ = GUID('{8B64886F-2E56-44C1-9025-53D5D4E2AD52}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
MapTableSourceDescription._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMapTableSourceDescription, IMapServerSourceDescription, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersionSupportGEN]

class GraphicElements(CoClass):
    u'The Graphic Elements collection CoClass.'
    _reg_clsid_ = GUID('{9D696B29-B311-4F2B-80A9-3B67C289EAC6}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
GraphicElements._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGraphicElements, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

class RasterClassifyColorRampRenderer(CoClass):
    u'A renderer with a color ramp for rasters with classified values.'
    _reg_clsid_ = GUID('{CE8B2F44-A027-11D2-AAE7-00C04FA33416}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
RasterClassifyColorRampRenderer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterClassifyColorRampRenderer, IRasterClassifyUIProperties, IRasterDataExclusion, IRasterRenderer, IRasterRenderer2, IRasterRendererInfo, IRasterRendererColorRamp, IRasterDisplayProps, IIdentify, ILegendInfo, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayAdmin, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, IRasterRendererClassInfo, IRasterRendererUniqueValues, IHillShadeInfo, IDisplayTableExchange, IRasterRendererUpdate, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize]

class TableDataSourceDescription(CoClass):
    u'A coclass that contains settings to describe a dynamic table from registered workspace.'
    _reg_clsid_ = GUID('{94196665-9A9C-4C74-939A-D95D26038AC3}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class ITableDataSourceDescription(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the available properties of a table datasource description object.'
    _iid_ = GUID('{85529E0D-C428-4E8C-94C5-048F9ACDAC72}')
    _idlflags_ = ['oleautomation']
TableDataSourceDescription._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDataSourceDescription, ITableDataSourceDescription, IMapServerSourceDescription, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersionSupportGEN]

class RasterRGBRenderer(CoClass):
    u'A true-color RGB renderer.'
    _reg_clsid_ = GUID('{577F1870-7037-11D2-9F29-00C04F8ED1D7}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IRasterRGBRenderer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members which control the raster Red/Green/Blue renderer.'
    _iid_ = GUID('{577F186F-7037-11D2-9F29-00C04F8ED1D7}')
    _idlflags_ = ['oleautomation']
class IRasterRGBRenderer2(IRasterRGBRenderer):
    _case_insensitive_ = True
    u'Provides access to additional members which control the raster Red/Green/Blue renderer.'
    _iid_ = GUID('{9E69B838-E78F-44C1-867F-B5932D5EEB49}')
    _idlflags_ = ['oleautomation']
RasterRGBRenderer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterRGBRenderer, IRasterRGBRenderer2, IGlobeRasterStretch, IRasterStretch, IRasterStretch2, IRasterStretch3, IRasterRenderer, IRasterRenderer2, IRasterRendererInfo, IRasterDisplayProps, IIdentify, ILegendInfo, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayAdmin, IColorChannelMapping, IDisplayTableExchange, IRasterRendererUpdate, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize]

IFillShapeElement._methods_ = [
    COMMETHOD(['propget', helpstring(u'Fill symbol this element uses to draw itself.')], HRESULT, 'Symbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IFillSymbol)), 'Symbol' )),
    COMMETHOD(['propput', helpstring(u'Fill symbol this element uses to draw itself.')], HRESULT, 'Symbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IFillSymbol), 'Symbol' )),
]
################################################################
## code template for IFillShapeElement implementation
##class IFillShapeElement_Impl(object):
##    def _get(self):
##        u'Fill symbol this element uses to draw itself.'
##        #return Symbol
##    def _set(self, Symbol):
##        u'Fill symbol this element uses to draw itself.'
##    Symbol = property(_get, _set, doc = _set.__doc__)
##

class IRasterBasemapLayer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members of a raster basemap layer.'
    _iid_ = GUID('{15D37A11-858B-4823-8DCE-16AE6C140B3D}')
    _idlflags_ = []
IRasterBasemapLayer._methods_ = [
    COMMETHOD(['propget', helpstring(u'The Raster Layer in the Basemap Layer.')], HRESULT, 'RasterLayer',
              ( ['retval', 'out'], POINTER(POINTER(IRasterLayer)), 'Layer' )),
    COMMETHOD(['propget', helpstring(u'The transparency of Basemap Layer.')], HRESULT, 'Transparency',
              ( ['retval', 'out'], POINTER(c_short), 'pAlpha' )),
    COMMETHOD(['propput', helpstring(u'The transparency of Basemap Layer.')], HRESULT, 'Transparency',
              ( ['in'], c_short, 'pAlpha' )),
    COMMETHOD([helpstring(u'Indicates if the RasterBasemapLayer was created from a mosaic layer.')], HRESULT, 'HasMosaicLayer',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propget', helpstring(u'The mosaic layer that contains the raster layer in the basemap layer.')], HRESULT, 'MosaicLayer',
              ( ['retval', 'out'], POINTER(POINTER(IMosaicLayer)), 'Layer' )),
]
################################################################
## code template for IRasterBasemapLayer implementation
##class IRasterBasemapLayer_Impl(object):
##    @property
##    def RasterLayer(self):
##        u'The Raster Layer in the Basemap Layer.'
##        #return Layer
##
##    @property
##    def MosaicLayer(self):
##        u'The mosaic layer that contains the raster layer in the basemap layer.'
##        #return Layer
##
##    def _get(self):
##        u'The transparency of Basemap Layer.'
##        #return pAlpha
##    def _set(self, pAlpha):
##        u'The transparency of Basemap Layer.'
##    Transparency = property(_get, _set, doc = _set.__doc__)
##
##    def HasMosaicLayer(self):
##        u'Indicates if the RasterBasemapLayer was created from a mosaic layer.'
##        #return flag
##

class QueryTableDataSourceDescription(CoClass):
    u'A coclass that contains settings to describe a dynamic table from registered workspace by providing SQL statement.'
    _reg_clsid_ = GUID('{438E0898-8D06-4C65-B4DB-B887718673B2}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IQueryTableDataSourceDescription(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the available properties of a table datasource description object.'
    _iid_ = GUID('{69774A30-A462-4B58-8365-9A265C23DD02}')
    _idlflags_ = ['oleautomation']
QueryTableDataSourceDescription._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDataSourceDescription, IQueryTableDataSourceDescription, IMapServerSourceDescription, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersionSupportGEN]

class IRotationRenderer2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the rotation of marker symbols based on field values, expression, or random. Used for all symbols, not just 3D; used for all apps, including ArcMap.'
    _iid_ = GUID('{D85E5B0C-68B3-48C8-B8D2-087806273B47}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'esriSymbolRotation3DFlags'
esriSymbolRotation3DNone = 0
esriSymbolRotation3DUseExpressionX = 1
esriSymbolRotation3DUseExpressionY = 2
esriSymbolRotation3DUseExpressionZ = 4
esriSymbolRotation3DRandomX = 8
esriSymbolRotation3DRandomY = 16
esriSymbolRotation3DRandomZ = 32
esriSymbolRotation3DFlags = c_int # enum

# values for enumeration 'esriSymbolRotationType'
esriRotateSymbolGeographic = 0
esriRotateSymbolArithmetic = 1
esriSymbolRotationType = c_int # enum
IRotationRenderer2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Gets rotation flags composed of enum esriSymbolRotation3DFlags. Not just for 3D rotation.')], HRESULT, 'SymbolRotation3DFlags',
              ( ['retval', 'out'], POINTER(c_int), 'pFlags' )),
    COMMETHOD(['propput', helpstring(u'Gets rotation flags composed of enum esriSymbolRotation3DFlags. Not just for 3D rotation.')], HRESULT, 'SymbolRotation3DFlags',
              ( ['in'], c_int, 'pFlags' )),
    COMMETHOD([helpstring(u'Gets one flag for each axis. Serves same purpose as SymbolRotation3DFlags (get_, put_).')], HRESULT, 'GetSymbolRotation3DFlags',
              ( ['out'], POINTER(esriSymbolRotation3DFlags), 'pFlagX' ),
              ( ['out'], POINTER(esriSymbolRotation3DFlags), 'pFlagY' ),
              ( ['out'], POINTER(esriSymbolRotation3DFlags), 'pFlagZ' )),
    COMMETHOD([helpstring(u'Sets one flag for each axis. For axis which is not to be rotated, set to esriSymbolRotation3DNone. Serves same purpose as SymbolRotation3DFlags (get_, put_).')], HRESULT, 'SetSymbolRotation3DFlags',
              ( ['in'], esriSymbolRotation3DFlags, 'flagX' ),
              ( ['in'], esriSymbolRotation3DFlags, 'flagY' ),
              ( ['in'], esriSymbolRotation3DFlags, 'flagZ' )),
    COMMETHOD(['propget', helpstring(u'Gets rotation type (geographic or arithmetic) about the Z axis (hardcoded arithmetic about other axes).')], HRESULT, 'SymbolRotation3DRotationTypeZ',
              ( ['retval', 'out'], POINTER(esriSymbolRotationType), 'pType' )),
    COMMETHOD(['propput', helpstring(u'Gets rotation type (geographic or arithmetic) about the Z axis (hardcoded arithmetic about other axes).')], HRESULT, 'SymbolRotation3DRotationTypeZ',
              ( ['in'], esriSymbolRotationType, 'pType' )),
    COMMETHOD([helpstring(u'Gets expressions for rotation about each axis. In case of non-3D rotation, Z axis is used.')], HRESULT, 'GetSymbolRotation3DExpressions',
              ( ['out'], POINTER(BSTR), 'pExpressionX' ),
              ( ['out'], POINTER(BSTR), 'pExpressionY' ),
              ( ['out'], POINTER(BSTR), 'pExpressionZ' )),
    COMMETHOD([helpstring(u'Sets expressions for rotation about each axis. In case of non-3D rotation, Z axis is used.')], HRESULT, 'SetSymbolRotation3DExpressions',
              ( ['in'], BSTR, 'expressionX' ),
              ( ['in'], BSTR, 'expressionY' ),
              ( ['in'], BSTR, 'expressionZ' )),
    COMMETHOD([helpstring(u'Gets rotation range for each axis (for random rotation).')], HRESULT, 'GetSymbolRotation3DRandomRanges',
              ( ['out'], POINTER(c_double), 'pMinRotationX' ),
              ( ['out'], POINTER(c_double), 'pMinRotationY' ),
              ( ['out'], POINTER(c_double), 'pMinRotationZ' ),
              ( ['out'], POINTER(c_double), 'pMaxRotationX' ),
              ( ['out'], POINTER(c_double), 'pMaxRotationY' ),
              ( ['out'], POINTER(c_double), 'pMaxRotationZ' )),
    COMMETHOD([helpstring(u'Sets rotation range for each axis (for random rotation).')], HRESULT, 'SetSymbolRotation3DRandomRanges',
              ( ['in'], c_double, 'minRotationX' ),
              ( ['in'], c_double, 'minRotationY' ),
              ( ['in'], c_double, 'minRotationZ' ),
              ( ['in'], c_double, 'maxRotationX' ),
              ( ['in'], c_double, 'maxRotationY' ),
              ( ['in'], c_double, 'maxRotationZ' )),
]
################################################################
## code template for IRotationRenderer2 implementation
##class IRotationRenderer2_Impl(object):
##    def _get(self):
##        u'Gets rotation type (geographic or arithmetic) about the Z axis (hardcoded arithmetic about other axes).'
##        #return pType
##    def _set(self, pType):
##        u'Gets rotation type (geographic or arithmetic) about the Z axis (hardcoded arithmetic about other axes).'
##    SymbolRotation3DRotationTypeZ = property(_get, _set, doc = _set.__doc__)
##
##    def GetSymbolRotation3DExpressions(self):
##        u'Gets expressions for rotation about each axis. In case of non-3D rotation, Z axis is used.'
##        #return pExpressionX, pExpressionY, pExpressionZ
##
##    def SetSymbolRotation3DRandomRanges(self, minRotationX, minRotationY, minRotationZ, maxRotationX, maxRotationY, maxRotationZ):
##        u'Sets rotation range for each axis (for random rotation).'
##        #return 
##
##    def GetSymbolRotation3DRandomRanges(self):
##        u'Gets rotation range for each axis (for random rotation).'
##        #return pMinRotationX, pMinRotationY, pMinRotationZ, pMaxRotationX, pMaxRotationY, pMaxRotationZ
##
##    def _get(self):
##        u'Gets rotation flags composed of enum esriSymbolRotation3DFlags. Not just for 3D rotation.'
##        #return pFlags
##    def _set(self, pFlags):
##        u'Gets rotation flags composed of enum esriSymbolRotation3DFlags. Not just for 3D rotation.'
##    SymbolRotation3DFlags = property(_get, _set, doc = _set.__doc__)
##
##    def SetSymbolRotation3DExpressions(self, expressionX, expressionY, expressionZ):
##        u'Sets expressions for rotation about each axis. In case of non-3D rotation, Z axis is used.'
##        #return 
##
##    def GetSymbolRotation3DFlags(self):
##        u'Gets one flag for each axis. Serves same purpose as SymbolRotation3DFlags (get_, put_).'
##        #return pFlagX, pFlagY, pFlagZ
##
##    def SetSymbolRotation3DFlags(self, flagX, flagY, flagZ):
##        u'Sets one flag for each axis. For axis which is not to be rotated, set to esriSymbolRotation3DNone. Serves same purpose as SymbolRotation3DFlags (get_, put_).'
##        #return 
##

class MobileSync(CoClass):
    u'The Mobile Sync provides functionality for get and posting data in a map for Mobile clients.'
    _reg_clsid_ = GUID('{BAFA713B-FB98-467A-8382-DA5537F48A06}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IMobileSync(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the available Mobile Sync properties and methods.'
    _iid_ = GUID('{32E00A76-2023-414B-80D0-986799DE0962}')
    _idlflags_ = ['oleautomation']
class IMobileSync2(IMobileSync):
    _case_insensitive_ = True
    u'Provides access to the available Mobile Sync properties and methods.'
    _iid_ = GUID('{098485BA-6BFB-41DC-88B0-00F5F7F0EF2B}')
    _idlflags_ = ['oleautomation']
MobileSync._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMobileSync, IMobileSync2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]

class IMarkerElement(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the Marker element.'
    _iid_ = GUID('{530FD711-EF0C-11D0-83A0-080009B996CC}')
    _idlflags_ = ['oleautomation']
IMarkerElement._methods_ = [
    COMMETHOD(['propget', helpstring(u'Marker symbol this element uses to draw itself.')], HRESULT, 'Symbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IMarkerSymbol)), 'Symbol' )),
    COMMETHOD(['propput', helpstring(u'Marker symbol this element uses to draw itself.')], HRESULT, 'Symbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IMarkerSymbol), 'Symbol' )),
]
################################################################
## code template for IMarkerElement implementation
##class IMarkerElement_Impl(object):
##    def _get(self):
##        u'Marker symbol this element uses to draw itself.'
##        #return Symbol
##    def _set(self, Symbol):
##        u'Marker symbol this element uses to draw itself.'
##    Symbol = property(_get, _set, doc = _set.__doc__)
##

class RasterDataSourceDescription(CoClass):
    u'A coclass that contains settings to describe a dynamic raster from a registered workspace.'
    _reg_clsid_ = GUID('{A510CB6C-33F3-48C1-AAB5-7EED2E2DD3AC}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IRasterDataSourceDescription(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the available properties of a raster datasource description object.'
    _iid_ = GUID('{24923BEF-339A-4C2E-AFD9-93DB65F22358}')
    _idlflags_ = ['oleautomation']
RasterDataSourceDescription._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDataSourceDescription, IRasterDataSourceDescription, IMapServerSourceDescription, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersionSupportGEN]

ITimeData._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates whether the layer has any time data.')], HRESULT, 'SupportsTime',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'hasTime' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to use the time for animation purposes.')], HRESULT, 'UseTime',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'UseTime' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to use the time for animation purposes.')], HRESULT, 'UseTime',
              ( ['in'], VARIANT_BOOL, 'UseTime' )),
    COMMETHOD(['propget', helpstring(u'Time reference for the contents of the layer.')], HRESULT, 'TimeReference',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITimeReference)), 'layerTimeReference' )),
    COMMETHOD([helpstring(u'Returns the time extent for all the data in the layer.')], HRESULT, 'GetFullTimeExtent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITimeExtent)), 'dataTimeSpan' )),
]
################################################################
## code template for ITimeData implementation
##class ITimeData_Impl(object):
##    def _get(self):
##        u'Indicates whether to use the time for animation purposes.'
##        #return UseTime
##    def _set(self, UseTime):
##        u'Indicates whether to use the time for animation purposes.'
##    UseTime = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SupportsTime(self):
##        u'Indicates whether the layer has any time data.'
##        #return hasTime
##
##    def GetFullTimeExtent(self):
##        u'Returns the time extent for all the data in the layer.'
##        #return dataTimeSpan
##
##    @property
##    def TimeReference(self):
##        u'Time reference for the contents of the layer.'
##        #return layerTimeReference
##

ITimeData2._methods_ = [
    COMMETHOD(['propget'], HRESULT, 'HasLiveData',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'UseTime' )),
    COMMETHOD(['propput'], HRESULT, 'HasLiveData',
              ( ['in'], VARIANT_BOOL, 'UseTime' )),
]
################################################################
## code template for ITimeData2 implementation
##class ITimeData2_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return UseTime
##    def _set(self, UseTime):
##        '-no docstring-'
##    HasLiveData = property(_get, _set, doc = _set.__doc__)
##

IRasterBasemapLayerFactory._methods_ = [
    COMMETHOD([helpstring(u'Create a Raster Basemap Layer.')], HRESULT, 'Create',
              ( ['in'], POINTER(IRasterLayer), 'Layer' ),
              ( ['retval', 'out'], POINTER(POINTER(IRasterBasemapLayer)), 'BasemapLayer' )),
    COMMETHOD([helpstring(u'Create a Raster Basemap Layer.')], HRESULT, 'CreateFromMosaicLayer',
              ( ['in'], POINTER(IMosaicLayer), 'Layer' ),
              ( ['retval', 'out'], POINTER(POINTER(IRasterBasemapLayer)), 'BasemapLayer' )),
]
################################################################
## code template for IRasterBasemapLayerFactory implementation
##class IRasterBasemapLayerFactory_Impl(object):
##    def Create(self, Layer):
##        u'Create a Raster Basemap Layer.'
##        #return BasemapLayer
##
##    def CreateFromMosaicLayer(self, Layer):
##        u'Create a Raster Basemap Layer.'
##        #return BasemapLayer
##

class AnnotationElement(CoClass):
    u'An annotation feature handed out by the geodatabase.'
    _reg_clsid_ = GUID('{C4E39A33-4E4C-4D1E-AF0D-FEBF5B0C8A9F}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
AnnotationElement._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IAnnotationElement]


# values for enumeration 'esriBasicNumLabelsOption'
esriNoLabelRestrictions = 0
esriOneLabelPerName = 1
esriOneLabelPerShape = 2
esriOneLabelPerPart = 3
esriBasicNumLabelsOption = c_int # enum

# values for enumeration 'esriOverposterPolygonPlacementMethod'
esriAlwaysHorizontal = 0
esriAlwaysStraight = 1
esriMixedStrategy = 2
esriOverposterPolygonPlacementMethod = c_int # enum
IBasicOverposterLayerProperties4._methods_ = [
    COMMETHOD(['propget', helpstring(u'Feature type.')], HRESULT, 'FeatureType',
              ( ['retval', 'out'], POINTER(esriBasicOverposterFeatureType), 'Type' )),
    COMMETHOD(['propput', helpstring(u'Feature type.')], HRESULT, 'FeatureType',
              ( ['in'], esriBasicOverposterFeatureType, 'Type' )),
    COMMETHOD(['propget', helpstring(u'Barrier weighting for features in the layer.')], HRESULT, 'FeatureWeight',
              ( ['retval', 'out'], POINTER(esriBasicOverposterWeight), 'Weight' )),
    COMMETHOD(['propput', helpstring(u'Barrier weighting for features in the layer.')], HRESULT, 'FeatureWeight',
              ( ['in'], esriBasicOverposterWeight, 'Weight' )),
    COMMETHOD(['propget', helpstring(u'Barrier weighting for labels in the layer.')], HRESULT, 'LabelWeight',
              ( ['retval', 'out'], POINTER(esriBasicOverposterWeight), 'Weight' )),
    COMMETHOD(['propput', helpstring(u'Barrier weighting for labels in the layer.')], HRESULT, 'LabelWeight',
              ( ['in'], esriBasicOverposterWeight, 'Weight' )),
    COMMETHOD(['propget', helpstring(u'Feature labeling option for the layer.')], HRESULT, 'NumLabelsOption',
              ( ['retval', 'out'], POINTER(esriBasicNumLabelsOption), 'option' )),
    COMMETHOD(['propput', helpstring(u'Feature labeling option for the layer.')], HRESULT, 'NumLabelsOption',
              ( ['in'], esriBasicNumLabelsOption, 'option' )),
    COMMETHOD(['propget', helpstring(u'Line label placement position options.')], HRESULT, 'LineLabelPosition',
              ( ['retval', 'out'], POINTER(POINTER(ILineLabelPosition)), 'position' )),
    COMMETHOD(['propput', helpstring(u'Line label placement position options.')], HRESULT, 'LineLabelPosition',
              ( ['in'], POINTER(ILineLabelPosition), 'position' )),
    COMMETHOD(['propget', helpstring(u'Line label placement position priority options.')], HRESULT, 'LineLabelPlacementPriorities',
              ( ['retval', 'out'], POINTER(POINTER(ILineLabelPlacementPriorities)), 'linePlacementPriorities' )),
    COMMETHOD(['propput', helpstring(u'Line label placement position priority options.')], HRESULT, 'LineLabelPlacementPriorities',
              ( ['in'], POINTER(ILineLabelPlacementPriorities), 'linePlacementPriorities' )),
    COMMETHOD(['propget', helpstring(u'Indicates if unplaced labels are generated.')], HRESULT, 'GenerateUnplacedLabels',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if unplaced labels are generated.')], HRESULT, 'GenerateUnplacedLabels',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Point label placement method.')], HRESULT, 'PointPlacementMethod',
              ( ['retval', 'out'], POINTER(esriOverposterPointPlacementMethod), 'Method' )),
    COMMETHOD(['propput', helpstring(u'Point label placement method.')], HRESULT, 'PointPlacementMethod',
              ( ['in'], esriOverposterPointPlacementMethod, 'Method' )),
    COMMETHOD(['propget', helpstring(u'Indicates if point labels are placed on top of features.')], HRESULT, 'PointPlacementOnTop',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'OnTop' )),
    COMMETHOD(['propput', helpstring(u'Indicates if point labels are placed on top of features.')], HRESULT, 'PointPlacementOnTop',
              ( ['in'], VARIANT_BOOL, 'OnTop' )),
    COMMETHOD(['propget', helpstring(u'Point label placement position priority options.')], HRESULT, 'PointPlacementPriorities',
              ( ['retval', 'out'], POINTER(POINTER(IPointPlacementPriorities)), 'PointPlacementPriorities' )),
    COMMETHOD(['propput', helpstring(u'Point label placement position priority options.')], HRESULT, 'PointPlacementPriorities',
              ( ['in'], POINTER(IPointPlacementPriorities), 'PointPlacementPriorities' )),
    COMMETHOD(['propget', helpstring(u'Point label placement angle(s).')], HRESULT, 'PointPlacementAngles',
              ( ['retval', 'out'], POINTER(VARIANT), 'angles' )),
    COMMETHOD(['propput', helpstring(u'Point label placement angle(s).')], HRESULT, 'PointPlacementAngles',
              ( ['in'], VARIANT, 'angles' )),
    COMMETHOD(['propget', helpstring(u'Label buffer ratio. A value of 1 means a buffer the size of the label height.')], HRESULT, 'BufferRatio',
              ( ['retval', 'out'], POINTER(c_double), 'BufferRatio' )),
    COMMETHOD(['propput', helpstring(u'Label buffer ratio. A value of 1 means a buffer the size of the label height.')], HRESULT, 'BufferRatio',
              ( ['in'], c_double, 'BufferRatio' )),
    COMMETHOD(['propget', helpstring(u'Offset in map units at which labels will be placed away from line features.')], HRESULT, 'LineOffset',
              ( ['retval', 'out'], POINTER(c_double), 'LineOffset' )),
    COMMETHOD(['propput', helpstring(u'Offset in map units at which labels will be placed away from line features.')], HRESULT, 'LineOffset',
              ( ['in'], c_double, 'LineOffset' )),
    COMMETHOD(['propget', helpstring(u'Maximum distance in map units the label is allowed to be away from the feature.')], HRESULT, 'MaxDistanceFromTarget',
              ( ['retval', 'out'], POINTER(c_double), 'Distance' )),
    COMMETHOD(['propput', helpstring(u'Maximum distance in map units the label is allowed to be away from the feature.')], HRESULT, 'MaxDistanceFromTarget',
              ( ['in'], c_double, 'Distance' )),
    COMMETHOD(['propget', helpstring(u'Defines the format is the rotation field in.')], HRESULT, 'RotationType',
              ( ['retval', 'out'], POINTER(esriLabelRotationType), 'Type' )),
    COMMETHOD(['propput', helpstring(u'Defines the format is the rotation field in.')], HRESULT, 'RotationType',
              ( ['in'], esriLabelRotationType, 'Type' )),
    COMMETHOD(['propget', helpstring(u'The attribute field that contains the label angle.')], HRESULT, 'RotationField',
              ( ['retval', 'out'], POINTER(BSTR), 'Field' )),
    COMMETHOD(['propput', helpstring(u'The attribute field that contains the label angle.')], HRESULT, 'RotationField',
              ( ['in'], BSTR, 'Field' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the label should be drawn perpendicular to the angle.')], HRESULT, 'PerpendicularToAngle',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the label should be drawn perpendicular to the angle.')], HRESULT, 'PerpendicularToAngle',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Polygon label placement method.')], HRESULT, 'PolygonPlacementMethod',
              ( ['retval', 'out'], POINTER(esriOverposterPolygonPlacementMethod), 'Method' )),
    COMMETHOD(['propput', helpstring(u'Polygon label placement method.')], HRESULT, 'PolygonPlacementMethod',
              ( ['in'], esriOverposterPolygonPlacementMethod, 'Method' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether label is to be placed only within the polygon.')], HRESULT, 'PlaceOnlyInsidePolygon',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether label is to be placed only within the polygon.')], HRESULT, 'PlaceOnlyInsidePolygon',
              ( ['in'], VARIANT_BOOL, 'flag' )),
]
################################################################
## code template for IBasicOverposterLayerProperties4 implementation
##class IBasicOverposterLayerProperties4_Impl(object):
##    def _get(self):
##        u'Line label placement position options.'
##        #return position
##    def _set(self, position):
##        u'Line label placement position options.'
##    LineLabelPosition = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Feature type.'
##        #return Type
##    def _set(self, Type):
##        u'Feature type.'
##    FeatureType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Point label placement angle(s).'
##        #return angles
##    def _set(self, angles):
##        u'Point label placement angle(s).'
##    PointPlacementAngles = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Label buffer ratio. A value of 1 means a buffer the size of the label height.'
##        #return BufferRatio
##    def _set(self, BufferRatio):
##        u'Label buffer ratio. A value of 1 means a buffer the size of the label height.'
##    BufferRatio = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Point label placement method.'
##        #return Method
##    def _set(self, Method):
##        u'Point label placement method.'
##    PointPlacementMethod = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Feature labeling option for the layer.'
##        #return option
##    def _set(self, option):
##        u'Feature labeling option for the layer.'
##    NumLabelsOption = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Polygon label placement method.'
##        #return Method
##    def _set(self, Method):
##        u'Polygon label placement method.'
##    PolygonPlacementMethod = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Point label placement position priority options.'
##        #return PointPlacementPriorities
##    def _set(self, PointPlacementPriorities):
##        u'Point label placement position priority options.'
##    PointPlacementPriorities = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Maximum distance in map units the label is allowed to be away from the feature.'
##        #return Distance
##    def _set(self, Distance):
##        u'Maximum distance in map units the label is allowed to be away from the feature.'
##    MaxDistanceFromTarget = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Defines the format is the rotation field in.'
##        #return Type
##    def _set(self, Type):
##        u'Defines the format is the rotation field in.'
##    RotationType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Barrier weighting for features in the layer.'
##        #return Weight
##    def _set(self, Weight):
##        u'Barrier weighting for features in the layer.'
##    FeatureWeight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Line label placement position priority options.'
##        #return linePlacementPriorities
##    def _set(self, linePlacementPriorities):
##        u'Line label placement position priority options.'
##    LineLabelPlacementPriorities = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether the label should be drawn perpendicular to the angle.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether the label should be drawn perpendicular to the angle.'
##    PerpendicularToAngle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Offset in map units at which labels will be placed away from line features.'
##        #return LineOffset
##    def _set(self, LineOffset):
##        u'Offset in map units at which labels will be placed away from line features.'
##    LineOffset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if point labels are placed on top of features.'
##        #return OnTop
##    def _set(self, OnTop):
##        u'Indicates if point labels are placed on top of features.'
##    PointPlacementOnTop = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Barrier weighting for labels in the layer.'
##        #return Weight
##    def _set(self, Weight):
##        u'Barrier weighting for labels in the layer.'
##    LabelWeight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if unplaced labels are generated.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if unplaced labels are generated.'
##    GenerateUnplacedLabels = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The attribute field that contains the label angle.'
##        #return Field
##    def _set(self, Field):
##        u'The attribute field that contains the label angle.'
##    RotationField = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether label is to be placed only within the polygon.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether label is to be placed only within the polygon.'
##    PlaceOnlyInsidePolygon = property(_get, _set, doc = _set.__doc__)
##

class ColorSymbol(CoClass):
    u'Esri ColorSymbol for raster rendering.'
    _reg_clsid_ = GUID('{B81F9AE0-026E-11D3-9C1F-00C04F5AA6ED}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IColorSymbol(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IFillSymbol):
    _case_insensitive_ = True
    u'Provides access to member that identifies color symbol.'
    _iid_ = GUID('{9AF99DD0-026B-11D3-9C1F-00C04F5AA6ED}')
    _idlflags_ = ['oleautomation']
ColorSymbol._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IColorSymbol, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IMapLevel, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySupport]

class StatisticDescription(CoClass):
    u'A statistic to be requested from the server.'
    _reg_clsid_ = GUID('{230AC51E-AF5C-47CF-B6C9-E212C73A8C08}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IStatisticDescription(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to properties describing a statistic to be requested from the server.'
    _iid_ = GUID('{126232DF-C5FA-486B-8424-7EFD1262B2B1}')
    _idlflags_ = ['oleautomation']
StatisticDescription._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IStatisticDescription, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

ILayerPosition._methods_ = [
    COMMETHOD(['propget', helpstring(u'Default layer position.')], HRESULT, 'LayerWeight',
              ( ['retval', 'out'], POINTER(c_double), 'LayerWeight' )),
    COMMETHOD(['propput', helpstring(u'Default layer position.')], HRESULT, 'LayerWeight',
              ( ['in'], c_double, 'LayerWeight' )),
]
################################################################
## code template for ILayerPosition implementation
##class ILayerPosition_Impl(object):
##    def _get(self):
##        u'Default layer position.'
##        #return LayerWeight
##    def _set(self, LayerWeight):
##        u'Default layer position.'
##    LayerWeight = property(_get, _set, doc = _set.__doc__)
##

class IFeatureIdentifyObj(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to a member that sets the feature used by the identify object.'
    _iid_ = GUID('{4E08D830-D361-11D2-8CD0-00C04F5B951E}')
    _idlflags_ = ['oleautomation']
IFeatureIdentifyObj._methods_ = [
    COMMETHOD(['propput', helpstring(u'The feature to be identified.')], HRESULT, 'Feature',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeature), 'rhs' )),
]
################################################################
## code template for IFeatureIdentifyObj implementation
##class IFeatureIdentifyObj_Impl(object):
##    def _set(self, rhs):
##        u'The feature to be identified.'
##    Feature = property(fset = _set, doc = _set.__doc__)
##

class WMSServer(CoClass):
    u'The WMS Server Object Extension.'
    _reg_clsid_ = GUID('{4E4AE365-C459-4688-B747-41AAA2DAD0F2}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
WMSServer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._18F2FC71_6B30_45B9_B101_037A8B868B66_0_10_2.IServerObjectExtension, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IObjectConstruct, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IObjectActivate, IWMSServer, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IWebRequestHandler, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]

class WCSLayer(CoClass):
    u'WCS layer source and display options.'
    _reg_clsid_ = GUID('{239C10F1-6E2A-4250-B43A-7920DB1CDC88}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
WCSLayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IWCSLayer, IRasterLayer, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeoDataset, ILegendInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, IIdentify, ILayer, ILayerInfo, IDataLayer, IDataLayer2, ILayerEffects, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayAdmin, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayAdmin2, ILayerExtensions, ILayerDrawingProperties, ILayerGeneralProperties, ILayerPosition, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IConnectionPointContainer, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataset, IPublishLayer, comtypes.gen._8F0541A3_D5BE_4B3F_A8D9_062D5579E19B_0_10_2.IRasterDataManagementEvents]


# values for enumeration 'esriWMSServerMessageCodeEnum'
esriWMSServerMessageCode_Debug = 16000
esriWMSServerMessageCode_NotLicensed = 16001
esriWMSServerMessageCode_ConstructStarted = 16002
esriWMSServerMessageCode_ConstructEnded = 16003
esriWMSServerMessageCode_InvalidPointer = 16004
esriWMSServerMessageCode_CanNotReadPrecookingFile = 16005
esriWMSServerMessageCode_CanNotParseSLD = 16006
esriWMSServerMessageCode_RequestNotRecognized = 16007
esriWMSServerMessageCode_UnknownInternalError = 16008
esriWMSServerMessageCode_ImageServerWMSFailed = 82001
esriWMSServerMessageCode_ImageServerNotLicensed = 82002
esriWMSServerMessageCode_ImageServerWMSStarted = 82003
esriWMSServerMessageCode_ImageServerWMSDebug = 82004
esriWMSServerMessageCode_ImageServerWMSGetToPost = 82005
esriWMSServerMessageCode_ImageServerWMSGetData = 82006
esriWMSServerMessageCode_ImageServerWMSGetCapabilities = 82010
esriWMSServerMessageCode_ImageServerWMSGetMap = 82012
esriWMSServerMessageCode_ImageServerWMSUnknownRequest = 82020
esriWMSServerMessageCodeEnum = c_int # enum
class IPMFTitleTextElement(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Indicator interface that identifies PMFTitleTextElement objects.'
    _iid_ = GUID('{C57403B5-F87A-4E24-A49A-2452EBB9D95B}')
    _idlflags_ = ['oleautomation']
IPMFTitleTextElement._methods_ = [
]
################################################################
## code template for IPMFTitleTextElement implementation
##class IPMFTitleTextElement_Impl(object):

class StatisticDescriptions(CoClass):
    u'A collection of statistics to be requested from the server.'
    _reg_clsid_ = GUID('{0AA505E4-076E-43E9-9EC7-7C0F766DECD7}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
StatisticDescriptions._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IStatisticDescriptions, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class PMFTitleTextElement(CoClass):
    u'The Graphic Element to display dynamic PMF titles.'
    _reg_clsid_ = GUID('{1F44BE49-3113-4D58-B1CE-C326328569ED}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IMultiPartTextElement(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to methods and properties for maintaining multipart elements.'
    _iid_ = GUID('{B0DB3A18-85C0-4C1B-97D2-A9501552ECAF}')
    _idlflags_ = ['oleautomation']
PMFTitleTextElement._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IElement, IElementProperties, IElementProperties2, IElementProperties3, ITextElement, IGraphicElement, IBoundsProperties, IGroupSymbolElement, ISymbolCollectionElement, comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ITransform2D, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySupport, IElementEditVertices, IElementEditCallout, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, IMultiPartTextElement, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, IPMFTitleTextElement]

class StatisticsRequest(CoClass):
    u'A request of statistics from a Map Server.'
    _reg_clsid_ = GUID('{861B344B-8DD8-4842-94D7-5D5FA9774A9C}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
StatisticsRequest._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IStatisticsRequest, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class GifPictureElement(CoClass):
    u'Graphic Element to display GIF Pictures.'
    _reg_clsid_ = GUID('{4A7C82B0-1953-11D3-A3EE-0004AC1B1D86}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
GifPictureElement._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IElement, IElementProperties, IElementProperties2, IElementProperties3, IFrameElement, IFrameDraw, IFrameProperties, IPictureElement, IPictureElement2, IPictureElement3, IPictureElement4, IPictureElement5, IGraphicElement, IBoundsProperties, IOlePictureElement, comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ITransform2D, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]


# values for enumeration 'esriRelateResultFormat'
esriRelateResultRelatedRecordSetAsObject = 0
esriRelateResultJsonAsMime = 1
esriRelateResultJsonAsURL = 2
esriRelateResultAMFAsMime = 3
esriRelateResultAMFAsURL = 4
esriRelateResultFormat = c_int # enum
IRelateDescription._methods_ = [
    COMMETHOD(['propget', helpstring(u'Relationship ID that uniquely idenentifies a relate to a table.')], HRESULT, 'RelationshipID',
              ( ['retval', 'out'], POINTER(c_int), 'RelationshipID' )),
    COMMETHOD(['propput', helpstring(u'Relationship ID that uniquely idenentifies a relate to a table.')], HRESULT, 'RelationshipID',
              ( ['in'], c_int, 'RelationshipID' )),
    COMMETHOD(['propget', helpstring(u'Definition expression of the related table for which related records are being requested.')], HRESULT, 'RelatedTableDefinitionExpression',
              ( ['retval', 'out'], POINTER(BSTR), 'Expression' )),
    COMMETHOD(['propput', helpstring(u'Definition expression of the related table for which related records are being requested.')], HRESULT, 'RelatedTableDefinitionExpression',
              ( ['in'], BSTR, 'Expression' )),
    COMMETHOD(['propget', helpstring(u'Table fields that need to be returned as a part of the relate results.')], HRESULT, 'RelatedTableFields',
              ( ['retval', 'out'], POINTER(BSTR), 'tablefields' )),
    COMMETHOD(['propput', helpstring(u'Table fields that need to be returned as a part of the relate results.')], HRESULT, 'RelatedTableFields',
              ( ['in'], BSTR, 'tablefields' )),
    COMMETHOD(['propputref', helpstring(u'Spatial reference of the output geometry in the related records.')], HRESULT, 'OutputSpatialReference',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'SpatialReference' )),
    COMMETHOD(['propget', helpstring(u'Spatial reference of the output geometry in the related records.')], HRESULT, 'OutputSpatialReference',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference)), 'SpatialReference' )),
    COMMETHOD(['propget', helpstring(u'Geo transformation required to transform the geometry if the requested GCS is different from the source.')], HRESULT, 'GeoTransformation',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeoTransformation)), 'geotransform' )),
    COMMETHOD(['propputref', helpstring(u'Geo transformation required to transform the geometry if the requested GCS is different from the source.')], HRESULT, 'GeoTransformation',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeoTransformation), 'geotransform' )),
    COMMETHOD(['propget', helpstring(u'Result format that indicates the type of content in the result.')], HRESULT, 'ResultFormat',
              ( ['retval', 'out'], POINTER(esriRelateResultFormat), 'ResultFormat' )),
    COMMETHOD(['propput', helpstring(u'Result format that indicates the type of content in the result.')], HRESULT, 'ResultFormat',
              ( ['in'], esriRelateResultFormat, 'ResultFormat' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether we should include Geometry.')], HRESULT, 'IncludeGeometry',
              ( ['in'], VARIANT_BOOL, 'IncludeGeometry' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether we should include Geometry.')], HRESULT, 'IncludeGeometry',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IncludeGeometry' )),
    COMMETHOD(['propputref', helpstring(u'Indicates whether we need to modify Geometry.')], HRESULT, 'GeometryResultOptions',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeometryResultOptions), 'geometryOptions' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether we need to modify Geometry.')], HRESULT, 'GeometryResultOptions',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeometryResultOptions)), 'geometryOptions' )),
    COMMETHOD(['propputref', helpstring(u'Output time reference for the time fields.')], HRESULT, 'OutputTimeReference',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITimeReference), 'TimeReference' )),
    COMMETHOD(['propget', helpstring(u'Output time reference for the time fields.')], HRESULT, 'OutputTimeReference',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITimeReference)), 'TimeReference' )),
]
################################################################
## code template for IRelateDescription implementation
##class IRelateDescription_Impl(object):
##    @property
##    def GeometryResultOptions(self, geometryOptions):
##        u'Indicates whether we need to modify Geometry.'
##        #return 
##
##    def _get(self):
##        u'Indicates whether we should include Geometry.'
##        #return IncludeGeometry
##    def _set(self, IncludeGeometry):
##        u'Indicates whether we should include Geometry.'
##    IncludeGeometry = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def OutputSpatialReference(self, SpatialReference):
##        u'Spatial reference of the output geometry in the related records.'
##        #return 
##
##    def GeoTransformation(self, geotransform):
##        u'Geo transformation required to transform the geometry if the requested GCS is different from the source.'
##        #return 
##
##    def _get(self):
##        u'Table fields that need to be returned as a part of the relate results.'
##        #return tablefields
##    def _set(self, tablefields):
##        u'Table fields that need to be returned as a part of the relate results.'
##    RelatedTableFields = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Relationship ID that uniquely idenentifies a relate to a table.'
##        #return RelationshipID
##    def _set(self, RelationshipID):
##        u'Relationship ID that uniquely idenentifies a relate to a table.'
##    RelationshipID = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Definition expression of the related table for which related records are being requested.'
##        #return Expression
##    def _set(self, Expression):
##        u'Definition expression of the related table for which related records are being requested.'
##    RelatedTableDefinitionExpression = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def OutputTimeReference(self, TimeReference):
##        u'Output time reference for the time fields.'
##        #return 
##
##    def _get(self):
##        u'Result format that indicates the type of content in the result.'
##        #return ResultFormat
##    def _set(self, ResultFormat):
##        u'Result format that indicates the type of content in the result.'
##    ResultFormat = property(_get, _set, doc = _set.__doc__)
##

class IRectangleElement(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Indicator interface that identifies a Rectangle element.'
    _iid_ = GUID('{3A9767C1-F253-11D0-83A4-080009B996CC}')
    _idlflags_ = ['oleautomation']
IRectangleElement._methods_ = [
]
################################################################
## code template for IRectangleElement implementation
##class IRectangleElement_Impl(object):

class IPolygonElement(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Indicator interface that identifies a Polygon element.'
    _iid_ = GUID('{3A9767C6-F253-11D0-83A4-080009B996CC}')
    _idlflags_ = ['oleautomation']
IPolygonElement._methods_ = [
]
################################################################
## code template for IPolygonElement implementation
##class IPolygonElement_Impl(object):

ITextElement._methods_ = [
    COMMETHOD(['propget', helpstring(u'Text symbol this element uses to draw itself.')], HRESULT, 'Symbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol)), 'Symbol' )),
    COMMETHOD(['propput', helpstring(u'Text symbol this element uses to draw itself.')], HRESULT, 'Symbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'Text being displayed by this element.')], HRESULT, 'Text',
              ( ['retval', 'out'], POINTER(BSTR), 'Text' )),
    COMMETHOD(['propput', helpstring(u'Text being displayed by this element.')], HRESULT, 'Text',
              ( ['in'], BSTR, 'Text' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the text scales with the map.')], HRESULT, 'ScaleText',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Scale' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the text scales with the map.')], HRESULT, 'ScaleText',
              ( ['in'], VARIANT_BOOL, 'Scale' )),
]
################################################################
## code template for ITextElement implementation
##class ITextElement_Impl(object):
##    def _get(self):
##        u'Text being displayed by this element.'
##        #return Text
##    def _set(self, Text):
##        u'Text being displayed by this element.'
##    Text = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Text symbol this element uses to draw itself.'
##        #return Symbol
##    def _set(self, Symbol):
##        u'Text symbol this element uses to draw itself.'
##    Symbol = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the text scales with the map.'
##        #return Scale
##    def _set(self, Scale):
##        u'Indicates if the text scales with the map.'
##    ScaleText = property(_get, _set, doc = _set.__doc__)
##

class AnnotateFeature(CoClass):
    u'A renderer for labeling one feature.'
    _reg_clsid_ = GUID('{858EB8E4-C2A5-11D2-9F30-00C04F6BC6A5}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IAnnotateFeature(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the labeling (annotation) of one feature.'
    _iid_ = GUID('{858EB8E3-C2A5-11D2-9F30-00C04F6BC6A5}')
    _idlflags_ = ['oleautomation']
class IAnnotateFeature2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the labeling (annotation) of one feature.'
    _iid_ = GUID('{2CF9D4EB-53A9-45AA-A7F7-5A89239CFD5A}')
    _idlflags_ = ['oleautomation']
AnnotateFeature._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IAnnotateFeature, IAnnotateFeature2]

class DynamicGlyph(CoClass):
    u'Dynamic glyph class. A dynamic glyph is a handle to a resource that is used to render a dynamic symbol.'
    _reg_clsid_ = GUID('{2F7E6ECF-E541-49E5-BB1B-5AA1E2BE27C1}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
DynamicGlyph._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDynamicGlyph]

ISelectionEnvironmentLayer._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if invisible layers have their selections cleared when a new selection is made.')], HRESULT, 'ClearInvisibleLayers',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'clearInvisible' )),
    COMMETHOD(['propput', helpstring(u'Indicates if invisible layers have their selections cleared when a new selection is made.')], HRESULT, 'ClearInvisibleLayers',
              ( ['in'], VARIANT_BOOL, 'clearInvisible' )),
]
################################################################
## code template for ISelectionEnvironmentLayer implementation
##class ISelectionEnvironmentLayer_Impl(object):
##    def _get(self):
##        u'Indicates if invisible layers have their selections cleared when a new selection is made.'
##        #return clearInvisible
##    def _set(self, clearInvisible):
##        u'Indicates if invisible layers have their selections cleared when a new selection is made.'
##    ClearInvisibleLayers = property(_get, _set, doc = _set.__doc__)
##

IElement._methods_ = [
    COMMETHOD(['propget', helpstring(u'Shape of the element as a geometry.')], HRESULT, 'Geometry',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry)), 'pGeometry' )),
    COMMETHOD(['propput', helpstring(u'Shape of the element as a geometry.')], HRESULT, 'Geometry',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'pGeometry' )),
    COMMETHOD([helpstring(u'Bounds of the element taking symbology into consideration.')], HRESULT, 'QueryBounds',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'Bounds' )),
    COMMETHOD([helpstring(u'Bounds of the element taking symbology into consideration.')], HRESULT, 'QueryOutline',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPolygon), 'Outline' )),
    COMMETHOD(['propget', helpstring(u'Selection tracker used by this element.')], HRESULT, 'SelectionTracker',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISelectionTracker)), 'tracker' )),
    COMMETHOD([helpstring(u'Indicates if the given x and y coordinates are contained by the element.')], HRESULT, 'HitTest',
              ( ['in'], c_double, 'x' ),
              ( ['in'], c_double, 'y' ),
              ( ['in'], c_double, 'Tolerance' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'hit' )),
    COMMETHOD([helpstring(u'Draws the element into the given display object.')], HRESULT, 'Draw',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'TrackCancel' )),
    COMMETHOD([helpstring(u'Prepare to display graphic on screen.')], HRESULT, 'Activate',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' )),
    COMMETHOD([helpstring(u'ActiveView that graphics are displayed on is no longer visible.')], HRESULT, 'Deactivate'),
    COMMETHOD(['propget', helpstring(u'Indicates if the element is in a read-only state.')], HRESULT, 'Locked',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pLocked' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the element is in a read-only state.')], HRESULT, 'Locked',
              ( ['in'], VARIANT_BOOL, 'pLocked' )),
]
################################################################
## code template for IElement implementation
##class IElement_Impl(object):
##    def Draw(self, Display, TrackCancel):
##        u'Draws the element into the given display object.'
##        #return 
##
##    def Activate(self, Display):
##        u'Prepare to display graphic on screen.'
##        #return 
##
##    def _get(self):
##        u'Indicates if the element is in a read-only state.'
##        #return pLocked
##    def _set(self, pLocked):
##        u'Indicates if the element is in a read-only state.'
##    Locked = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Shape of the element as a geometry.'
##        #return pGeometry
##    def _set(self, pGeometry):
##        u'Shape of the element as a geometry.'
##    Geometry = property(_get, _set, doc = _set.__doc__)
##
##    def QueryOutline(self, Display, Outline):
##        u'Bounds of the element taking symbology into consideration.'
##        #return 
##
##    def HitTest(self, x, y, Tolerance):
##        u'Indicates if the given x and y coordinates are contained by the element.'
##        #return hit
##
##    def Deactivate(self):
##        u'ActiveView that graphics are displayed on is no longer visible.'
##        #return 
##
##    @property
##    def SelectionTracker(self):
##        u'Selection tracker used by this element.'
##        #return tracker
##
##    def QueryBounds(self, Display, Bounds):
##        u'Bounds of the element taking symbology into consideration.'
##        #return 
##

class ACTrueTypeMarkerSymbol(CoClass):
    u'ArcIMS True Type Marker Symbol.'
    _reg_clsid_ = GUID('{58063155-BDED-4188-B996-A09A73E93F0A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IACAxl(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the ArcIMS Axl.'
    _iid_ = GUID('{10D4E467-FB51-49E1-BFCF-0FAF531F2D52}')
    _idlflags_ = ['oleautomation']
class IACTrueTypeMarkerSymbol(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control ArcIMS true type marker symbol.'
    _iid_ = GUID('{A9998C07-2DEF-4A3F-96F4-B0A9878DAF5A}')
    _idlflags_ = ['oleautomation']
ACTrueTypeMarkerSymbol._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IACAxl, IACSymbol, IACTrueTypeMarkerSymbol, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class MapTitle(CoClass):
    u'A map surround for displaying a map title.'
    _reg_clsid_ = GUID('{7A3F91DF-B9E3-11D1-8756-0000F8751720}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
MapTitle._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMapSurround, IQuerySize, IBoundsProperties, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IConnectionPointContainer, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]
MapTitle._outgoing_interfaces_ = [IMapSurroundEvents]

class ACTextSymbol(CoClass):
    u'ArcIMS Text Symbol.'
    _reg_clsid_ = GUID('{22E484B7-1AE7-4B13-92AA-3E081D00B539}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IACTextSymbol(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control ArcIMS text symbol.'
    _iid_ = GUID('{103D43E4-86EE-40BE-A869-7E2059B99F3B}')
    _idlflags_ = ['oleautomation']
ACTextSymbol._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IACAxl, IACSymbol, IACTextSymbol, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

IIdentifyObj._methods_ = [
    COMMETHOD([helpstring(u'Indicates if the object can identify the specified layer.')], HRESULT, 'CanIdentify',
              ( ['in'], POINTER(ILayer), 'pLayer' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'b' )),
    COMMETHOD(['propget', helpstring(u'The window handle.')], HRESULT, 'hWnd',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE), 'hWnd' )),
    COMMETHOD(['propget', helpstring(u'Name of the identify object.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propget', helpstring(u'Target layer for identification.')], HRESULT, 'Layer',
              ( ['retval', 'out'], POINTER(POINTER(ILayer)), 'ppLayer' )),
    COMMETHOD([helpstring(u'Flashes the identified object on the screen.')], HRESULT, 'Flash',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IScreenDisplay), 'pDisplay' )),
    COMMETHOD([helpstring(u'Displays a context sensitive popup menu at the specified location.')], HRESULT, 'PopUpMenu',
              ( ['in'], c_int, 'x' ),
              ( ['in'], c_int, 'y' )),
]
################################################################
## code template for IIdentifyObj implementation
##class IIdentifyObj_Impl(object):
##    @property
##    def Layer(self):
##        u'Target layer for identification.'
##        #return ppLayer
##
##    @property
##    def Name(self):
##        u'Name of the identify object.'
##        #return Name
##
##    def CanIdentify(self, pLayer):
##        u'Indicates if the object can identify the specified layer.'
##        #return b
##
##    def Flash(self, pDisplay):
##        u'Flashes the identified object on the screen.'
##        #return 
##
##    def PopUpMenu(self, x, y):
##        u'Displays a context sensitive popup menu at the specified location.'
##        #return 
##
##    @property
##    def hWnd(self):
##        u'The window handle.'
##        #return hWnd
##

class Overview(CoClass):
    u'A map surround for displaying an overview.'
    _reg_clsid_ = GUID('{7A3F91DE-B9E3-11D1-8756-0000F8751720}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
Overview._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IOverview, IOverview2, IMapSurround, IQuerySize, IBoundsProperties, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IConnectionPointContainer, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]
Overview._outgoing_interfaces_ = [IMapSurroundEvents]


# values for enumeration 'esriPlacedObjectType'
esriPlacedLabel = 0
esriPlacedSymbol = 1
esriPlacedObjectType = c_int # enum

# values for enumeration 'esriPlacementCode'
esriPlacementOk = 0
esriPlacementUnplaced = 1
esriPlacementSystemError = 2
esriPlacementCode = c_int # enum
IPlacedObject2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Type of the placed object.')], HRESULT, 'ObjectType',
              ( ['retval', 'out'], POINTER(esriPlacedObjectType), 'Type' )),
    COMMETHOD(['propput', helpstring(u'Type of the placed object.')], HRESULT, 'ObjectType',
              ( ['in'], esriPlacedObjectType, 'Type' )),
    COMMETHOD(['propget', helpstring(u'FeatureID associated with the placed object.')], HRESULT, 'FeatureId',
              ( ['retval', 'out'], POINTER(c_int), 'FeatureId' )),
    COMMETHOD(['propput', helpstring(u'FeatureID associated with the placed object.')], HRESULT, 'FeatureId',
              ( ['in'], c_int, 'FeatureId' )),
    COMMETHOD(['propget', helpstring(u'Control shape of the placed object.')], HRESULT, 'ControlShape',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry)), 'Shape' )),
    COMMETHOD(['propput', helpstring(u'Control shape of the placed object.')], HRESULT, 'ControlShape',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'Shape' )),
    COMMETHOD(['propget', helpstring(u'Labeling string for the placed object.')], HRESULT, 'Label',
              ( ['retval', 'out'], POINTER(BSTR), 'Label' )),
    COMMETHOD(['propput', helpstring(u'Labeling string for the placed object.')], HRESULT, 'Label',
              ( ['in'], BSTR, 'Label' )),
    COMMETHOD(['propget', helpstring(u'Class index of the placed object.')], HRESULT, 'ClassIndex',
              ( ['retval', 'out'], POINTER(c_int), 'Index' )),
    COMMETHOD(['propput', helpstring(u'Class index of the placed object.')], HRESULT, 'ClassIndex',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD(['propget', helpstring(u'Code that indicates success/failure of placement.')], HRESULT, 'PlacementCode',
              ( ['retval', 'out'], POINTER(esriPlacementCode), 'PlacementCode' )),
    COMMETHOD(['propput', helpstring(u'Code that indicates success/failure of placement.')], HRESULT, 'PlacementCode',
              ( ['in'], esriPlacementCode, 'PlacementCode' )),
    COMMETHOD(['propget', helpstring(u'Placement result message.')], HRESULT, 'PlacementMessage',
              ( ['retval', 'out'], POINTER(BSTR), 'message' )),
    COMMETHOD(['propput', helpstring(u'Placement result message.')], HRESULT, 'PlacementMessage',
              ( ['in'], BSTR, 'message' )),
    COMMETHOD(['propget', helpstring(u'Angle for the placed object.')], HRESULT, 'Angle',
              ( ['retval', 'out'], POINTER(c_double), 'Angle' )),
    COMMETHOD(['propget', helpstring(u'The end point of the control shape.')], HRESULT, 'ControlShapeEndPoint',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPoint), 'point' )),
    COMMETHOD(['propget', helpstring(u'Width of the label.')], HRESULT, 'LabelWidth',
              ( ['retval', 'out'], POINTER(c_double), 'Width' )),
    COMMETHOD(['propget', helpstring(u'Height of the label.')], HRESULT, 'LabelHeight',
              ( ['retval', 'out'], POINTER(c_double), 'Height' )),
]
################################################################
## code template for IPlacedObject2 implementation
##class IPlacedObject2_Impl(object):
##    def _get(self):
##        u'Placement result message.'
##        #return message
##    def _set(self, message):
##        u'Placement result message.'
##    PlacementMessage = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Angle(self):
##        u'Angle for the placed object.'
##        #return Angle
##
##    def _get(self):
##        u'FeatureID associated with the placed object.'
##        #return FeatureId
##    def _set(self, FeatureId):
##        u'FeatureID associated with the placed object.'
##    FeatureId = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def LabelHeight(self):
##        u'Height of the label.'
##        #return Height
##
##    @property
##    def ControlShapeEndPoint(self):
##        u'The end point of the control shape.'
##        #return point
##
##    def _get(self):
##        u'Code that indicates success/failure of placement.'
##        #return PlacementCode
##    def _set(self, PlacementCode):
##        u'Code that indicates success/failure of placement.'
##    PlacementCode = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Class index of the placed object.'
##        #return Index
##    def _set(self, Index):
##        u'Class index of the placed object.'
##    ClassIndex = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def LabelWidth(self):
##        u'Width of the label.'
##        #return Width
##
##    def _get(self):
##        u'Labeling string for the placed object.'
##        #return Label
##    def _set(self, Label):
##        u'Labeling string for the placed object.'
##    Label = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Control shape of the placed object.'
##        #return Shape
##    def _set(self, Shape):
##        u'Control shape of the placed object.'
##    ControlShape = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Type of the placed object.'
##        #return Type
##    def _set(self, Type):
##        u'Type of the placed object.'
##    ObjectType = property(_get, _set, doc = _set.__doc__)
##

class ACTextMarkerSymbol(CoClass):
    u'ArcIMS Text Marker Symbol.'
    _reg_clsid_ = GUID('{2C231F73-0467-473C-B257-23CE3B89D31C}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IACTextMarkerSymbol(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control ArcIMS text marker symbol.'
    _iid_ = GUID('{9B232F9C-8689-4A28-9C61-BB156B9C8E25}')
    _idlflags_ = ['oleautomation']
ACTextMarkerSymbol._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IACAxl, IACSymbol, IACTextMarkerSymbol, IACTextSymbol, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]


# values for enumeration 'esriMaplexAbbrevType'
esriMaplexAbbrevTypeTranslation = 0
esriMaplexAbbrevTypeKeyword = 1
esriMaplexAbbrevTypeEnding = 2
esriMaplexAbbrevType = c_int # enum
class MarkerNorthArrow(CoClass):
    u'A map surround for displaying a marker north arrow.'
    _reg_clsid_ = GUID('{7A3F91DD-B9E3-11D1-8756-0000F8751720}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class INorthArrow2(IMapSurround):
    _case_insensitive_ = True
    u'Provides access to members that control the north arrow.'
    _iid_ = GUID('{05270DA7-FB6C-40E6-B1E6-7EC2C02B628C}')
    _idlflags_ = ['oleautomation']
class IMarkerNorthArrow(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the Marker north arrow.'
    _iid_ = GUID('{7A3F91F3-B9E3-11D1-8756-0000F8751720}')
    _idlflags_ = ['oleautomation']
MarkerNorthArrow._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, INorthArrow, INorthArrow2, IMarkerNorthArrow, IMapSurround, IQuerySize, IBoundsProperties, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IConnectionPointContainer, IGraphicsComposite, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITransformEvents]
MarkerNorthArrow._outgoing_interfaces_ = [IMapSurroundEvents]

class IRelatedRecordGroup(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the RelatedRecordGroup members.'
    _iid_ = GUID('{1DC5A833-C24E-4688-BAF5-DEA8FC54E6AF}')
    _idlflags_ = ['oleautomation']
IRelatedRecordGroup._methods_ = [
    COMMETHOD(['propget', helpstring(u'Object id of the row that belongs to source table.')], HRESULT, 'SourceRowID',
              ( ['retval', 'out'], POINTER(c_int), 'ID' )),
    COMMETHOD(['propget', helpstring(u'Records that represent the related rows.')], HRESULT, 'Records',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRecordArray)), 'ppRecords' )),
]
################################################################
## code template for IRelatedRecordGroup implementation
##class IRelatedRecordGroup_Impl(object):
##    @property
##    def SourceRowID(self):
##        u'Object id of the row that belongs to source table.'
##        #return ID
##
##    @property
##    def Records(self):
##        u'Records that represent the related rows.'
##        #return ppRecords
##


# values for enumeration 'acHTextAlignment'
acLeftHTextAlignment = 0
acCenterHTextAlignment = 1
acRightHTextAlignment = 2
acHTextAlignment = c_int # enum
class ACRasterMarkerSymbol(CoClass):
    u'ArcIMS Raster Marker Symbol.'
    _reg_clsid_ = GUID('{76315040-C3B0-4100-B949-135948839C67}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IACRasterMarkerSymbol(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control ArcIMS raster marker symbol.'
    _iid_ = GUID('{EA422E0D-124D-4266-B2A8-A2931F1EAAA6}')
    _idlflags_ = ['oleautomation']
ACRasterMarkerSymbol._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IACAxl, IACSymbol, IACRasterMarkerSymbol, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

IPlacedObject3._methods_ = [
    COMMETHOD(['propget', helpstring(u'Type of the placed object.')], HRESULT, 'ObjectType',
              ( ['retval', 'out'], POINTER(esriPlacedObjectType), 'Type' )),
    COMMETHOD(['propput', helpstring(u'Type of the placed object.')], HRESULT, 'ObjectType',
              ( ['in'], esriPlacedObjectType, 'Type' )),
    COMMETHOD(['propget', helpstring(u'FeatureID associated with the placed object.')], HRESULT, 'FeatureId',
              ( ['retval', 'out'], POINTER(c_int), 'FeatureId' )),
    COMMETHOD(['propput', helpstring(u'FeatureID associated with the placed object.')], HRESULT, 'FeatureId',
              ( ['in'], c_int, 'FeatureId' )),
    COMMETHOD(['propget', helpstring(u'Control shape of the placed object.')], HRESULT, 'ControlShape',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry)), 'Shape' )),
    COMMETHOD(['propput', helpstring(u'Control shape of the placed object.')], HRESULT, 'ControlShape',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'Shape' )),
    COMMETHOD(['propget', helpstring(u'Labeling string for the placed object.')], HRESULT, 'Label',
              ( ['retval', 'out'], POINTER(BSTR), 'Label' )),
    COMMETHOD(['propput', helpstring(u'Labeling string for the placed object.')], HRESULT, 'Label',
              ( ['in'], BSTR, 'Label' )),
    COMMETHOD(['propget', helpstring(u'Class index of the placed object.')], HRESULT, 'ClassIndex',
              ( ['retval', 'out'], POINTER(c_int), 'Index' )),
    COMMETHOD(['propput', helpstring(u'Class index of the placed object.')], HRESULT, 'ClassIndex',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD(['propget', helpstring(u'Code that indicates success/failure of placement.')], HRESULT, 'PlacementCode',
              ( ['retval', 'out'], POINTER(esriPlacementCode), 'PlacementCode' )),
    COMMETHOD(['propput', helpstring(u'Code that indicates success/failure of placement.')], HRESULT, 'PlacementCode',
              ( ['in'], esriPlacementCode, 'PlacementCode' )),
    COMMETHOD(['propget', helpstring(u'Placement result message.')], HRESULT, 'PlacementMessage',
              ( ['retval', 'out'], POINTER(BSTR), 'message' )),
    COMMETHOD(['propput', helpstring(u'Placement result message.')], HRESULT, 'PlacementMessage',
              ( ['in'], BSTR, 'message' )),
    COMMETHOD(['propget', helpstring(u'Angle for the placed object.')], HRESULT, 'Angle',
              ( ['retval', 'out'], POINTER(c_double), 'Angle' )),
    COMMETHOD(['propget', helpstring(u'The end point of the control shape.')], HRESULT, 'ControlShapeEndPoint',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPoint), 'point' )),
    COMMETHOD(['propget', helpstring(u'Width of the label.')], HRESULT, 'LabelWidth',
              ( ['retval', 'out'], POINTER(c_double), 'Width' )),
    COMMETHOD(['propget', helpstring(u'Height of the label.')], HRESULT, 'LabelHeight',
              ( ['retval', 'out'], POINTER(c_double), 'Height' )),
    COMMETHOD(['propget', helpstring(u'The centroid of the polygon shape.')], HRESULT, 'AreaCentroid',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPoint), 'bestLabelPt' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the label is completely inside the polygons.')], HRESULT, 'LabelInsidePolygon',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
]
################################################################
## code template for IPlacedObject3 implementation
##class IPlacedObject3_Impl(object):
##    def _get(self):
##        u'Placement result message.'
##        #return message
##    def _set(self, message):
##        u'Placement result message.'
##    PlacementMessage = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Angle(self):
##        u'Angle for the placed object.'
##        #return Angle
##
##    @property
##    def LabelInsidePolygon(self):
##        u'Indicates whether the label is completely inside the polygons.'
##        #return flag
##
##    def _get(self):
##        u'FeatureID associated with the placed object.'
##        #return FeatureId
##    def _set(self, FeatureId):
##        u'FeatureID associated with the placed object.'
##    FeatureId = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def LabelHeight(self):
##        u'Height of the label.'
##        #return Height
##
##    @property
##    def ControlShapeEndPoint(self):
##        u'The end point of the control shape.'
##        #return point
##
##    def _get(self):
##        u'Code that indicates success/failure of placement.'
##        #return PlacementCode
##    def _set(self, PlacementCode):
##        u'Code that indicates success/failure of placement.'
##    PlacementCode = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Class index of the placed object.'
##        #return Index
##    def _set(self, Index):
##        u'Class index of the placed object.'
##    ClassIndex = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def AreaCentroid(self):
##        u'The centroid of the polygon shape.'
##        #return bestLabelPt
##
##    @property
##    def LabelWidth(self):
##        u'Width of the label.'
##        #return Width
##
##    def _get(self):
##        u'Labeling string for the placed object.'
##        #return Label
##    def _set(self, Label):
##        u'Labeling string for the placed object.'
##    Label = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Control shape of the placed object.'
##        #return Shape
##    def _set(self, Shape):
##        u'Control shape of the placed object.'
##    ControlShape = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Type of the placed object.'
##        #return Type
##    def _set(self, Type):
##        u'Type of the placed object.'
##    ObjectType = property(_get, _set, doc = _set.__doc__)
##

IIdentify2._methods_ = [
    COMMETHOD([helpstring(u'Identifies objects at the specified location.')], HRESULT, 'Identify',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'pGeom' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'ppArrObj' )),
    COMMETHOD(['propput', helpstring(u'The current scale of the display.')], HRESULT, 'Scale',
              ( ['in'], c_double, 'rhs' )),
]
################################################################
## code template for IIdentify2 implementation
##class IIdentify2_Impl(object):
##    def _set(self, rhs):
##        u'The current scale of the display.'
##    Scale = property(fset = _set, doc = _set.__doc__)
##
##    def Identify(self, pGeom, pTrackCancel):
##        u'Identifies objects at the specified location.'
##        #return ppArrObj
##

class IMapEvents(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to events that occur when the state of the map changes.'
    _iid_ = GUID('{D1B15B2C-0723-11D3-9F33-00C04F6BC979}')
    _idlflags_ = ['oleautomation']
IMapEvents._methods_ = [
    COMMETHOD([helpstring(u'Fired when the version changes.')], HRESULT, 'VersionChanged',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IVersion), 'oldVersion' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IVersion), 'newVersion' )),
    COMMETHOD([helpstring(u'Fired when the feature class changes.')], HRESULT, 'FeatureClassChanged',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClass), 'oldClass' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClass), 'newClass' )),
]
################################################################
## code template for IMapEvents implementation
##class IMapEvents_Impl(object):
##    def FeatureClassChanged(self, oldClass, newClass):
##        u'Fired when the feature class changes.'
##        #return 
##
##    def VersionChanged(self, oldVersion, newVersion):
##        u'Fired when the version changes.'
##        #return 
##

class IRasterSpatialSelection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the behavior of the spatial selection.'
    _iid_ = GUID('{9466D4E6-937D-40C6-8709-56EB94C3C9B5}')
    _idlflags_ = ['oleautomation']
IRasterSpatialSelection._methods_ = [
    COMMETHOD([helpstring(u'Create or remove the selection dataset.')], HRESULT, 'Init',
              ( ['in'], VARIANT_BOOL, 'bInit' ),
              ( ['in', 'optional'], BSTR, 'FileFullName', u'0' ),
              ( ['in', 'optional'], esriRasterSelectionMaskFileFormat, 'FileFormat', 1 )),
    COMMETHOD([helpstring(u'Draws the current spatial selection.')], HRESULT, 'DrawSpatialSelection',
              ( [], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'pDisplay' ),
              ( [], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' )),
    COMMETHOD(['propget', helpstring(u'Reference to the current selection dataset.')], HRESULT, 'MaskRasterDataset',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterDataset)), 'ppRasterDataset' )),
    COMMETHOD(['propputref', helpstring(u'Reference to the current selection dataset.')], HRESULT, 'MaskRasterDataset',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterDataset), 'ppRasterDataset' )),
    COMMETHOD([helpstring(u'Perform the mask operation with bitmask.')], HRESULT, 'MaskWriteBitmap',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'TrackCancel' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.tagRECT), 'pRect' ),
              ( ['in'], esriRasterSelectionMaskOp, 'op' ),
              ( ['in'], VARIANT, 'vBytes' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'byBits', False )),
    COMMETHOD([helpstring(u'Read pixels from selection.')], HRESULT, 'MaskReadBitmap',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'TrackCancel' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.tagRECT), 'pRect' ),
              ( ['in'], VARIANT, 'vBytes' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'byBits', False )),
    COMMETHOD([helpstring(u'Perform the mask operation with the given array of rectangles.')], HRESULT, 'MaskDrawPolyRect',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'TrackCancel' ),
              ( ['in'], VARIANT, 'vRects' ),
              ( ['in'], esriRasterSelectionMaskOp, 'op' )),
]
################################################################
## code template for IRasterSpatialSelection implementation
##class IRasterSpatialSelection_Impl(object):
##    def DrawSpatialSelection(self, pDisplay, pTrackCancel):
##        u'Draws the current spatial selection.'
##        #return 
##
##    def MaskReadBitmap(self, TrackCancel, pRect, vBytes, byBits):
##        u'Read pixels from selection.'
##        #return 
##
##    def MaskDrawPolyRect(self, TrackCancel, vRects, op):
##        u'Perform the mask operation with the given array of rectangles.'
##        #return 
##
##    def Init(self, bInit, FileFullName, FileFormat):
##        u'Create or remove the selection dataset.'
##        #return 
##
##    def MaskRasterDataset(self, ppRasterDataset):
##        u'Reference to the current selection dataset.'
##        #return 
##
##    def MaskWriteBitmap(self, TrackCancel, pRect, op, vBytes, byBits):
##        u'Perform the mask operation with bitmask.'
##        #return 
##

class IMapEvents2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to events that occur when the state of the map changes.'
    _iid_ = GUID('{638A967B-1727-4BC3-BD0D-22413F411382}')
    _idlflags_ = ['oleautomation']
IMapEvents2._methods_ = [
    COMMETHOD([helpstring(u'Fired when the table object changes.')], HRESULT, 'TableChanged',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable), 'oldTable' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable), 'newTable' )),
    COMMETHOD([helpstring(u'Fired when the active graphics layer changes.')], HRESULT, 'ActiveGraphicsLayerChanged',
              ( ['in'], POINTER(IGraphicsLayer), 'oldGraphicsLayer' ),
              ( ['in'], POINTER(IGraphicsLayer), 'newGraphicsLayer' )),
]
################################################################
## code template for IMapEvents2 implementation
##class IMapEvents2_Impl(object):
##    def TableChanged(self, oldTable, newTable):
##        u'Fired when the table object changes.'
##        #return 
##
##    def ActiveGraphicsLayerChanged(self, oldGraphicsLayer, newGraphicsLayer):
##        u'Fired when the active graphics layer changes.'
##        #return 
##

class MapInset(CoClass):
    u'A map surround for displaying an inset.'
    _reg_clsid_ = GUID('{7A3F91E3-B9E3-11D1-8756-0000F8751720}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
MapInset._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMapInset, IMapInset2, IMapSurround, IQuerySize, IBoundsProperties, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IConnectionPointContainer, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]
MapInset._outgoing_interfaces_ = [IMapSurroundEvents]

class ILocatorRectangle2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the members that control the map frame locator rectangle.'
    _iid_ = GUID('{41D9C096-A403-11D2-87E8-0000F8751720}')
    _idlflags_ = ['oleautomation']
ILocatorRectangle2._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The map frame being referenced.')], HRESULT, 'MapFrame',
              ( ['in'], POINTER(IMapFrame), 'MapFrame' )),
    COMMETHOD(['propget', helpstring(u'The map frame being referenced.')], HRESULT, 'MapFrame',
              ( ['retval', 'out'], POINTER(POINTER(IMapFrame)), 'MapFrame' )),
    COMMETHOD(['propget', helpstring(u'The page border.')], HRESULT, 'Border',
              ( ['retval', 'out'], POINTER(POINTER(IBorder)), 'Border' )),
    COMMETHOD(['propput', helpstring(u'The page border.')], HRESULT, 'Border',
              ( ['in'], POINTER(IBorder), 'Border' )),
    COMMETHOD(['propget', helpstring(u'The page background.')], HRESULT, 'Background',
              ( ['retval', 'out'], POINTER(POINTER(IBackground)), 'Background' )),
    COMMETHOD(['propput', helpstring(u'The page background.')], HRESULT, 'Background',
              ( ['in'], POINTER(IBackground), 'Background' )),
    COMMETHOD(['propput', helpstring(u'The symbol used to render the leader line.')], HRESULT, 'LeaderSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'The symbol used to render the leader line.')], HRESULT, 'LeaderSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol)), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'Indicates if leader lines should be drawn.')], HRESULT, 'ShowLeader',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if leader lines should be drawn.')], HRESULT, 'ShowLeader',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD([helpstring(u'Returns the bounds of the locator.')], HRESULT, 'QueryBounds',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], POINTER(IMapFrame), 'Parent' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'Bounds' )),
    COMMETHOD([helpstring(u'Obsolete.  Use DrawExtent and DrawLeader instead.')], HRESULT, 'Draw',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], POINTER(IMapFrame), 'Parent' )),
    COMMETHOD(['propget', helpstring(u'Use other data frame extent even if clipping is set or data driven pages are enabled.  By default, the clip or DDP shape is used.')], HRESULT, 'UseSimpleExtent',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Use other data frame extent even if clipping is set or data driven pages are enabled.  By default, the clip or DDP shape is used.')], HRESULT, 'UseSimpleExtent',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD([helpstring(u'Draws the locator shape on the Map display.')], HRESULT, 'DrawExtent',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'mapDisplay' ),
              ( ['in'], POINTER(IMapFrame), 'Parent' )),
    COMMETHOD([helpstring(u'Draws the leader line on the Layout display.')], HRESULT, 'DrawLeader',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'layoutDisplay' ),
              ( ['in'], POINTER(IMapFrame), 'Parent' )),
]
################################################################
## code template for ILocatorRectangle2 implementation
##class ILocatorRectangle2_Impl(object):
##    def _get(self):
##        u'Use other data frame extent even if clipping is set or data driven pages are enabled.  By default, the clip or DDP shape is used.'
##        #return flag
##    def _set(self, flag):
##        u'Use other data frame extent even if clipping is set or data driven pages are enabled.  By default, the clip or DDP shape is used.'
##    UseSimpleExtent = property(_get, _set, doc = _set.__doc__)
##
##    def DrawExtent(self, mapDisplay, Parent):
##        u'Draws the locator shape on the Map display.'
##        #return 
##
##    def Draw(self, Display, Parent):
##        u'Obsolete.  Use DrawExtent and DrawLeader instead.'
##        #return 
##
##    def DrawLeader(self, layoutDisplay, Parent):
##        u'Draws the leader line on the Layout display.'
##        #return 
##
##    def _get(self):
##        u'The page border.'
##        #return Border
##    def _set(self, Border):
##        u'The page border.'
##    Border = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The symbol used to render the leader line.'
##        #return Symbol
##    def _set(self, Symbol):
##        u'The symbol used to render the leader line.'
##    LeaderSymbol = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if leader lines should be drawn.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if leader lines should be drawn.'
##    ShowLeader = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def MapFrame(self, MapFrame):
##        u'The map frame being referenced.'
##        #return 
##
##    def _get(self):
##        u'The page background.'
##        #return Background
##    def _set(self, Background):
##        u'The page background.'
##    Background = property(_get, _set, doc = _set.__doc__)
##
##    def QueryBounds(self, Display, Parent, Bounds):
##        u'Returns the bounds of the locator.'
##        #return 
##

IAISRequest._methods_ = [
    COMMETHOD(['propget', helpstring(u'The AIS request name, e.g. PutServiceProperties, and etc.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'pName' )),
    COMMETHOD(['propput', helpstring(u'The AIS request name, e.g. PutServiceProperties, and etc.')], HRESULT, 'Name',
              ( ['in'], BSTR, 'pName' )),
    COMMETHOD(['propget', helpstring(u'The request image description.')], HRESULT, 'GeoImageDescription',
              ( ['retval', 'out'], POINTER(POINTER(IGeoImageDescription)), 'ppImageDescription' )),
    COMMETHOD(['propputref', helpstring(u'The request image description.')], HRESULT, 'GeoImageDescription',
              ( ['in'], POINTER(IGeoImageDescription), 'ppImageDescription' )),
    COMMETHOD(['propget', helpstring(u'The AIS request arguments.')], HRESULT, 'Arguments',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray)), 'ppArguments' )),
    COMMETHOD(['propputref', helpstring(u'The AIS request arguments.')], HRESULT, 'Arguments',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray), 'ppArguments' )),
]
################################################################
## code template for IAISRequest implementation
##class IAISRequest_Impl(object):
##    def Arguments(self, ppArguments):
##        u'The AIS request arguments.'
##        #return 
##
##    def _get(self):
##        u'The AIS request name, e.g. PutServiceProperties, and etc.'
##        #return pName
##    def _set(self, pName):
##        u'The AIS request name, e.g. PutServiceProperties, and etc.'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def GeoImageDescription(self, ppImageDescription):
##        u'The request image description.'
##        #return 
##

class ACHashLineSymbol(CoClass):
    u'ArcIMS Hash Line Symbol.'
    _reg_clsid_ = GUID('{53455D9E-C3E8-4FFA-81F0-38ED2E238B9B}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
ACHashLineSymbol._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IACAxl, IACSymbol, IACHashLineSymbol, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class Legend(CoClass):
    u'A map surround for displaying a legend.'
    _reg_clsid_ = GUID('{7A3F91E4-B9E3-11D1-8756-0000F8751720}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IReadingDirection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the reading direction.'
    _iid_ = GUID('{B5B5E78F-AB9A-445C-8AF6-DAF9C3726D0C}')
    _idlflags_ = ['oleautomation']
Legend._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILegend, ILegend2, IMapSurround, IQuerySize, IBoundsProperties, IGraphicsComposite, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IConnectionPointContainer, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySupport, IReadingDirection, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, IActiveViewEvents, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITransformEvents]
Legend._outgoing_interfaces_ = [IMapSurroundEvents]

class SimpleWMSIdentifyObject(CoClass):
    u'Provides programmatic access to a simple WMS layer identify object.'
    _reg_clsid_ = GUID('{F3863A44-2F78-4927-B3B7-60FE2A8E0E29}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IIdentifyObject(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u"Provides access to identify object's properties (pairs of name and value)."
    _iid_ = GUID('{EF0720EE-761E-4BED-A548-61596690E714}')
    _idlflags_ = ['oleautomation']
class IWMSIdentifyObject(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to idenify a WMS layer.'
    _iid_ = GUID('{84D3CD18-706B-49B1-8AEC-28E460B1D707}')
    _idlflags_ = ['oleautomation']
SimpleWMSIdentifyObject._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IIdentifyObj, IIdentifyObject, IWMSIdentifyObject]


# values for enumeration 'esriMaplexKeyNumberResetType'
esriMaplexKeyNumberResetTypeNone = 0
esriMaplexKeyNumberResetTypeMaybe = 1
esriMaplexKeyNumberResetTypeAlways = 2
esriMaplexKeyNumberResetType = c_int # enum

# values for enumeration 'acNumLabels'
acOneLabelPerName = 1
acOneLabelPerShape = 2
acOneLabelPerPart = 3
acNumLabels = c_int # enum
class ACRasterFillSymbol(CoClass):
    u'ArcIMS Raster Fill Symbol.'
    _reg_clsid_ = GUID('{34A16EDA-8A58-44A4-9342-98533B8564A9}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IACRasterFillSymbol(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control ArcIMS raster fill symbol.'
    _iid_ = GUID('{536B61EE-EC20-4619-8DBD-5452521412CB}')
    _idlflags_ = ['oleautomation']
ACRasterFillSymbol._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IACAxl, IACSymbol, IACRasterFillSymbol, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class IGeoImageDescription2(IGeoImageDescription):
    _case_insensitive_ = True
    u'Provides access to members that control an image description.'
    _iid_ = GUID('{91EFDA05-0C71-4478-AC90-1E98752F10F0}')
    _idlflags_ = ['oleautomation']
class IMosaicRule(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a mosaic rule.'
    _iid_ = GUID('{0AE8D2E0-78F8-4A7C-9BC9-B16F42C6FBF9}')
    _idlflags_ = ['oleautomation']
IGeoImageDescription2._methods_ = [
    COMMETHOD(['propget', helpstring(u'The mosaic rule.')], HRESULT, 'MosaicRule',
              ( ['retval', 'out'], POINTER(POINTER(IMosaicRule)), 'ppMosaicRule' )),
    COMMETHOD(['propputref', helpstring(u'The mosaic rule.')], HRESULT, 'MosaicRule',
              ( ['in'], POINTER(IMosaicRule), 'ppMosaicRule' )),
    COMMETHOD(['propget', helpstring(u'The rendering rule.')], HRESULT, 'RenderingRule',
              ( ['retval', 'out'], POINTER(POINTER(IRenderingRule)), 'ppRenderingRule' )),
    COMMETHOD(['propputref', helpstring(u'The rendering rule.')], HRESULT, 'RenderingRule',
              ( ['in'], POINTER(IRenderingRule), 'ppRenderingRule' )),
    COMMETHOD(['propget', helpstring(u'Indicates if output should be generated in BSQ pxiel interleave format.')], HRESULT, 'BSQ',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pBSQ' )),
    COMMETHOD(['propput', helpstring(u'Indicates if output should be generated in BSQ pxiel interleave format.')], HRESULT, 'BSQ',
              ( ['in'], VARIANT_BOOL, 'pBSQ' )),
]
################################################################
## code template for IGeoImageDescription2 implementation
##class IGeoImageDescription2_Impl(object):
##    def MosaicRule(self, ppMosaicRule):
##        u'The mosaic rule.'
##        #return 
##
##    def _get(self):
##        u'Indicates if output should be generated in BSQ pxiel interleave format.'
##        #return pBSQ
##    def _set(self, pBSQ):
##        u'Indicates if output should be generated in BSQ pxiel interleave format.'
##    BSQ = property(_get, _set, doc = _set.__doc__)
##
##    def RenderingRule(self, ppRenderingRule):
##        u'The rendering rule.'
##        #return 
##

class MixedFontGridLabel(CoClass):
    u'A grid label that uses mixed fonts.'
    _reg_clsid_ = GUID('{CE41C508-9DF9-11D2-AADE-000000000000}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IFormattedGridLabel(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members controlling the number format of a grid label.'
    _iid_ = GUID('{CE41C505-9DF9-11D2-AADE-000000000000}')
    _idlflags_ = ['oleautomation']
class IMixedFontGridLabel2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides additional access to members that define the appearance of the secondary group of digits in the grid label.'
    _iid_ = GUID('{F3B2FCE0-2F21-42DE-AF4F-10B4C99579C3}')
    _idlflags_ = ['oleautomation']
MixedFontGridLabel._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGridLabel, IGridLabel2, IFormattedGridLabel, IMixedFontGridLabel, IMixedFontGridLabel2, IGridLabelExport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

class TableIdentities(CoClass):
    _reg_clsid_ = GUID('{9909B72D-8258-420A-95AE-C0056B634B8B}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class ITableIdentities(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    _iid_ = GUID('{D6F55BC3-8BEB-4F37-BC4B-9ACDE860C8AF}')
    _idlflags_ = ['oleautomation']
TableIdentities._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ITableIdentities, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class LegendFormat(CoClass):
    u'A legend format.'
    _reg_clsid_ = GUID('{7A3F91E5-B9E3-11D1-8756-0000F8751720}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class ILegendLayout(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control scaling properties for legend graphics.'
    _iid_ = GUID('{A7E5770D-EC6A-11D2-B86E-00600802E603}')
    _idlflags_ = ['oleautomation']
LegendFormat._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILegendFormat, ILegendLayout, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class FeatureBookmark(CoClass):
    u'A feature bookmark.'
    _reg_clsid_ = GUID('{EC65B35B-4342-11D2-AE22-080009EC732A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
FeatureBookmark._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IFeatureBookmark, ISpatialBookmark, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

class WMSLayer(CoClass):
    u'A container for the display of WMS sub layers.'
    _reg_clsid_ = GUID('{5B0DA8F6-5E43-40AE-9871-56BA33936F30}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
WMSLayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IWMSLayer, ILayer, IPublishLayer, ILayerGeneralProperties, IIdentify, ILayerSymbologyExtents, IWMSLayer2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]
WMSLayer._outgoing_interfaces_ = [ILayerEvents]

class ACGradientFillSymbol(CoClass):
    u'ArcIMS Gradient Fill Symbol.'
    _reg_clsid_ = GUID('{3235E2DD-B46B-4448-B7E7-AEED8ED0B272}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IACGradientFillSymbol(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control ArcIMS gradient fill symbol.'
    _iid_ = GUID('{7E9B1C09-F4D7-4BB0-9340-00DFA8FE5F5C}')
    _idlflags_ = ['oleautomation']
ACGradientFillSymbol._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IACAxl, IACGradientFillSymbol, IACSymbol, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

IMapEvents3._methods_ = [
    COMMETHOD([helpstring(u'Fired when the table object changes.')], HRESULT, 'BeginBuildCache',
              ( ['in'], POINTER(IMap), 'Map' )),
    COMMETHOD([helpstring(u'Fired when the active graphics layer changes.')], HRESULT, 'EndBuildCache',
              ( ['in'], POINTER(IMap), 'Map' )),
]
################################################################
## code template for IMapEvents3 implementation
##class IMapEvents3_Impl(object):
##    def EndBuildCache(self, Map):
##        u'Fired when the active graphics layer changes.'
##        #return 
##
##    def BeginBuildCache(self, Map):
##        u'Fired when the table object changes.'
##        #return 
##


# values for enumeration 'acVTextAlignment'
acTopVTextAlignment = 0
acCenterVTextAlignment = 1
acBottomVTextAlignment = 2
acVTextAlignment = c_int # enum

# values for enumeration 'acLabelWeight'
acNoLabelWeight = 0
acMediumLabelWeight = 2
acHighLabelWeight = 3
acLabelWeight = c_int # enum
class IGeoImageDescription3(IGeoImageDescription2):
    _case_insensitive_ = True
    u'Provides access to members that control an image description.'
    _iid_ = GUID('{0DD536AA-005B-455B-8722-8B08EB11F1AC}')
    _idlflags_ = ['oleautomation']
IGeoImageDescription3._methods_ = [
    COMMETHOD(['propget', helpstring(u'The NoData interpretation.')], HRESULT, 'NoDataInterpretation',
              ( ['retval', 'out'], POINTER(comtypes.gen._8F0541A3_D5BE_4B3F_A8D9_062D5579E19B_0_10_2.esriNoDataInterpretation), 'pNoDataInterpretation' )),
    COMMETHOD(['propput', helpstring(u'The NoData interpretation.')], HRESULT, 'NoDataInterpretation',
              ( ['in'], comtypes.gen._8F0541A3_D5BE_4B3F_A8D9_062D5579E19B_0_10_2.esriNoDataInterpretation, 'pNoDataInterpretation' )),
    COMMETHOD(['propget', helpstring(u'The geographic transformation required to transform from the source to the requested GCS.')], HRESULT, 'GeoTransformation',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeoTransformation)), 'geotransform' )),
    COMMETHOD(['propputref', helpstring(u'The geographic transformation required to transform from the source to the requested GCS.')], HRESULT, 'GeoTransformation',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeoTransformation), 'geotransform' )),
    COMMETHOD(['propget', helpstring(u'The raster resampling hint.')], HRESULT, 'ResamplingHint',
              ( ['retval', 'out'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriRasterResamplingHint), 'pHint' )),
    COMMETHOD(['propput', helpstring(u'The raster resampling hint.')], HRESULT, 'ResamplingHint',
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriRasterResamplingHint, 'pHint' )),
]
################################################################
## code template for IGeoImageDescription3 implementation
##class IGeoImageDescription3_Impl(object):
##    def GeoTransformation(self, geotransform):
##        u'The geographic transformation required to transform from the source to the requested GCS.'
##        #return 
##
##    def _get(self):
##        u'The raster resampling hint.'
##        #return pHint
##    def _set(self, pHint):
##        u'The raster resampling hint.'
##    ResamplingHint = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The NoData interpretation.'
##        #return pNoDataInterpretation
##    def _set(self, pNoDataInterpretation):
##        u'The NoData interpretation.'
##    NoDataInterpretation = property(_get, _set, doc = _set.__doc__)
##

class AOIBookmark(CoClass):
    u'An AOI bookmark.'
    _reg_clsid_ = GUID('{BBB1AE73-41E3-11D2-AE1E-080009EC732A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
AOIBookmark._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IAOIBookmark, ISpatialBookmark, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

class ACCalloutMarkerSymbol(CoClass):
    u'ArcIMS Callout Marker Symbol.'
    _reg_clsid_ = GUID('{D33FE4FB-E17B-4EA9-A01E-A03F5F394E96}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
ACCalloutMarkerSymbol._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IACAxl, IACSymbol, IACCalloutMarkerSymbol, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class IMapCacheToRasterFunction(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a map cache to raster function.'
    _iid_ = GUID('{005DDE05-5CC9-4B0C-8D55-F447401B2134}')
    _idlflags_ = ['oleautomation']
IMapCacheToRasterFunction._methods_ = [
]
################################################################
## code template for IMapCacheToRasterFunction implementation
##class IMapCacheToRasterFunction_Impl(object):

class IMaplexKeyNumberGroup(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a Maplex key numbering group.'
    _iid_ = GUID('{AE54019F-8F5E-6742-88F5-663FE3E3DBA5}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'esriMaplexKeyNumberHorizontalAlignment'
esriMaplexKeyNumberHorizontalAlignmentAuto = 0
esriMaplexKeyNumberHorizontalAlignmentLeft = 1
esriMaplexKeyNumberHorizontalAlignmentRight = 2
esriMaplexKeyNumberHorizontalAlignment = c_int # enum
IMaplexKeyNumberGroup._methods_ = [
    COMMETHOD(['propget', helpstring(u'The name of the key numbering group.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'The name of the key numbering group.')], HRESULT, 'Name',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'The horizontal alignment used by the key numbering group.')], HRESULT, 'HorizontalAlignment',
              ( ['retval', 'out'], POINTER(esriMaplexKeyNumberHorizontalAlignment), 'Value' )),
    COMMETHOD(['propput', helpstring(u'The horizontal alignment used by the key numbering group.')], HRESULT, 'HorizontalAlignment',
              ( ['in'], esriMaplexKeyNumberHorizontalAlignment, 'Value' )),
    COMMETHOD(['propget', helpstring(u'The minimum number of lines allowed in the key numbering group.')], HRESULT, 'MinimumNumberOfLines',
              ( ['retval', 'out'], POINTER(c_int), 'Value' )),
    COMMETHOD(['propput', helpstring(u'The minimum number of lines allowed in the key numbering group.')], HRESULT, 'MinimumNumberOfLines',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD(['propget', helpstring(u'The maximum number of lines allowed in the key numbering group.')], HRESULT, 'MaximumNumberOfLines',
              ( ['retval', 'out'], POINTER(c_int), 'Value' )),
    COMMETHOD(['propput', helpstring(u'The maximum number of lines allowed in the key numbering group.')], HRESULT, 'MaximumNumberOfLines',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD(['propget', helpstring(u'The delimiter character used by the key numbering group.')], HRESULT, 'DelimiterCharacter',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'The delimiter character used by the key numbering group.')], HRESULT, 'DelimiterCharacter',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'The type of number reset used by the key numbering group.')], HRESULT, 'NumberResetType',
              ( ['retval', 'out'], POINTER(esriMaplexKeyNumberResetType), 'Value' )),
    COMMETHOD(['propput', helpstring(u'The type of number reset used by the key numbering group.')], HRESULT, 'NumberResetType',
              ( ['in'], esriMaplexKeyNumberResetType, 'Value' )),
]
################################################################
## code template for IMaplexKeyNumberGroup implementation
##class IMaplexKeyNumberGroup_Impl(object):
##    def _get(self):
##        u'The type of number reset used by the key numbering group.'
##        #return Value
##    def _set(self, Value):
##        u'The type of number reset used by the key numbering group.'
##    NumberResetType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The name of the key numbering group.'
##        #return Name
##    def _set(self, Name):
##        u'The name of the key numbering group.'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The minimum number of lines allowed in the key numbering group.'
##        #return Value
##    def _set(self, Value):
##        u'The minimum number of lines allowed in the key numbering group.'
##    MinimumNumberOfLines = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The maximum number of lines allowed in the key numbering group.'
##        #return Value
##    def _set(self, Value):
##        u'The maximum number of lines allowed in the key numbering group.'
##    MaximumNumberOfLines = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The horizontal alignment used by the key numbering group.'
##        #return Value
##    def _set(self, Value):
##        u'The horizontal alignment used by the key numbering group.'
##    HorizontalAlignment = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The delimiter character used by the key numbering group.'
##        #return Name
##    def _set(self, Name):
##        u'The delimiter character used by the key numbering group.'
##    DelimiterCharacter = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'acLineLabelPosition'
acLLPlaceNone = 0
acLLPlaceAbove = 1
acLLPlaceBelow = 2
acLLPlaceOnTop = 3
acLLPlaceLeft = 4
acLLPlaceRight = 5
acLLPlaceAboveBelow = 6
acLLPlaceLeftRight = 7
acLLPlaceInLine = 8
acLLPlaceAtStart = 9
acLLPlaceAtEnd = 10
acLLPlaceAtEitherEnd = 11
acLLPlaceParallel = 12
acLLPlacePerpendicular = 13
acLLPlaceHorizontal = 14
acLLPlaceOnTopHorizontal = 15
acLineLabelPosition = c_int # enum
class ACShieldSymbol(CoClass):
    u'ArcIMS Shield Symbol.'
    _reg_clsid_ = GUID('{F2005B08-F5D0-44B9-BCD5-4D6215C58E4E}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IACShieldSymbol(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control ArcIMS shield symbol.'
    _iid_ = GUID('{8AC3ACB5-A6EA-4306-BC73-4EB4D211000E}')
    _idlflags_ = ['oleautomation']
ACShieldSymbol._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IACAxl, IACSymbol, IACShieldSymbol, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]


# values for enumeration 'esriDataGraphTPenType'
esriDataGraphTPenSolid = 0
esriDataGraphTPenDash = 1
esriDataGraphTPenDot = 2
esriDataGraphTPenDashDot = 3
esriDataGraphTPenDashDotDot = 4
esriDataGraphTPenClear = 5
esriDataGraphTPenInsideFrame = 6
esriDataGraphTPenSmallDots = 7
esriDataGraphTPenType = c_int # enum
class BackgroundTabStyle(CoClass):
    u'A background tab style grid label for index grids.'
    _reg_clsid_ = GUID('{CE41C50D-9DF9-11D2-AADE-000000000000}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IBackgroundTabStyle(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control background tab style grid labels.'
    _iid_ = GUID('{CE41C50C-9DF9-11D2-AADE-000000000000}')
    _idlflags_ = ['oleautomation']
BackgroundTabStyle._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IIndexGridTabStyle, IBackgroundTabStyle, IGridLabel, IGridLabel2, IGridLabelExport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

class ImageServerLayerFactory(CoClass):
    u'The image service layer factory.'
    _reg_clsid_ = GUID('{B0D28E13-751E-4CA1-8A92-65AA0D9F4F6E}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
ImageServerLayerFactory._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILayerFactory]

class IMaplexOverposterProperties(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that are common to all layers being labeled.'
    _iid_ = GUID('{20664808-31EA-11A4-890F-0CA0D9EF134C}')
    _idlflags_ = ['oleautomation']
class IMaplexDictionaries(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a collection of Maplex dictionaries.'
    _iid_ = GUID('{20664808-0E3A-13AC-EB91-5AC2902FFE2B}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'esriMaplexConnectionType'
esriMaplexMinimizeLabels = 0
esriMaplexUnambiguous = 1
esriMaplexConnectionType = c_int # enum
IMaplexOverposterProperties._methods_ = [
    COMMETHOD(['propget', helpstring(u'The placement quality for text placement.')], HRESULT, 'PlacementQuality',
              ( ['retval', 'out'], POINTER(esriMaplexPlacementQuality), 'Quality' )),
    COMMETHOD(['propput', helpstring(u'The placement quality for text placement.')], HRESULT, 'PlacementQuality',
              ( ['in'], esriMaplexPlacementQuality, 'Quality' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to allow labels to the cross the map border or not.')], HRESULT, 'AllowBorderOverlap',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to allow labels to the cross the map border or not.')], HRESULT, 'AllowBorderOverlap',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Abbreviation dictionaries used by placement.')], HRESULT, 'Dictionaries',
              ( ['retval', 'out'], POINTER(POINTER(IMaplexDictionaries)), 'Dictionaries' )),
    COMMETHOD(['propput', helpstring(u'Abbreviation dictionaries used by placement.')], HRESULT, 'Dictionaries',
              ( ['in'], POINTER(IMaplexDictionaries), 'Dictionaries' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to turn off line connection.')], HRESULT, 'EnableConnection',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to turn off line connection.')], HRESULT, 'EnableConnection',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Provides the option to turn off line connection.')], HRESULT, 'ConnectionType',
              ( ['retval', 'out'], POINTER(esriMaplexConnectionType), 'Type' )),
    COMMETHOD(['propput', helpstring(u'Provides the option to turn off line connection.')], HRESULT, 'ConnectionType',
              ( ['in'], esriMaplexConnectionType, 'Type' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to label only the largest polygon in a compound polygon feature.')], HRESULT, 'LabelLargestPolygon',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to label only the largest polygon in a compound polygon feature.')], HRESULT, 'LabelLargestPolygon',
              ( ['in'], VARIANT_BOOL, 'flag' )),
]
################################################################
## code template for IMaplexOverposterProperties implementation
##class IMaplexOverposterProperties_Impl(object):
##    def _get(self):
##        u'The placement quality for text placement.'
##        #return Quality
##    def _set(self, Quality):
##        u'The placement quality for text placement.'
##    PlacementQuality = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Abbreviation dictionaries used by placement.'
##        #return Dictionaries
##    def _set(self, Dictionaries):
##        u'Abbreviation dictionaries used by placement.'
##    Dictionaries = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether to turn off line connection.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether to turn off line connection.'
##    EnableConnection = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Provides the option to turn off line connection.'
##        #return Type
##    def _set(self, Type):
##        u'Provides the option to turn off line connection.'
##    ConnectionType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether to allow labels to the cross the map border or not.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether to allow labels to the cross the map border or not.'
##    AllowBorderOverlap = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether to label only the largest polygon in a compound polygon feature.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether to label only the largest polygon in a compound polygon feature.'
##    LabelLargestPolygon = property(_get, _set, doc = _set.__doc__)
##

class ACSimpleLabelRenderer(CoClass):
    u'ArcIMS Simple Label Renderer.'
    _reg_clsid_ = GUID('{D10F211F-3083-4BFE-9D3F-AD77BCB151F0}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IACSimpleLabelRenderer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Indicator interface that identifies an ArcIMS simple label renderer.'
    _iid_ = GUID('{2DD61B65-518C-4A94-A72A-1994074FA490}')
    _idlflags_ = ['oleautomation']
class IACLabelRenderer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control ArcIMS label renderer.'
    _iid_ = GUID('{D71E6435-E35B-4ECE-9D3F-E8D4BD66CA21}')
    _idlflags_ = ['oleautomation']
ACSimpleLabelRenderer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IACAxl, IACRenderer, IACSimpleLabelRenderer, IACLabelRenderer, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class IScatterPlotMatrixSeriesProperties(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control ScatterPlotMatrix graph.'
    _iid_ = GUID('{02CE9EAA-0F3F-4527-B2F1-8617871BF68D}')
    _idlflags_ = ['oleautomation', 'hidden']
IScatterPlotMatrixSeriesProperties._methods_ = [
    COMMETHOD([helpstring(u'Lable graph.')], HRESULT, 'SetFieldLabel',
              ( [], c_int, 'idx' ),
              ( [], BSTR, 'Label' )),
    COMMETHOD([helpstring(u'Lable graph.')], HRESULT, 'GetFieldLabel',
              ( [], c_int, 'idx' ),
              ( [], POINTER(BSTR), 'Label' )),
    COMMETHOD(['propget', helpstring(u'Indicates if histogram is on the graph.')], HRESULT, 'ShowHistogram',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'bHist' )),
    COMMETHOD(['propput', helpstring(u'Indicates if histogram is on the graph.')], HRESULT, 'ShowHistogram',
              ( ['in'], VARIANT_BOOL, 'bHist' )),
    COMMETHOD(['propget', helpstring(u"Histogram's color")], HRESULT, 'HistogramColor',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_COLOR), 'pColor' )),
    COMMETHOD(['propput', helpstring(u"Histogram's color")], HRESULT, 'HistogramColor',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_COLOR, 'pColor' )),
]
################################################################
## code template for IScatterPlotMatrixSeriesProperties implementation
##class IScatterPlotMatrixSeriesProperties_Impl(object):
##    def _get(self):
##        u"Histogram's color"
##        #return pColor
##    def _set(self, pColor):
##        u"Histogram's color"
##    HistogramColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if histogram is on the graph.'
##        #return bHist
##    def _set(self, bHist):
##        u'Indicates if histogram is on the graph.'
##    ShowHistogram = property(_get, _set, doc = _set.__doc__)
##
##    def SetFieldLabel(self, idx, Label):
##        u'Lable graph.'
##        #return 
##
##    def GetFieldLabel(self, idx, Label):
##        u'Lable graph.'
##        #return 
##

class FeatureCursorBuffer(CoClass):
    u'A cursor for buffering features.'
    _reg_clsid_ = GUID('{A2983338-7E7C-11D2-A084-0000F8775BF9}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IFeatureCursorBuffer2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to additional functions and configuration capabilities for the buffer generation.'
    _iid_ = GUID('{7DF13F3F-39B7-41C4-80E3-AA7D16F46D57}')
    _idlflags_ = ['oleautomation']
class IBufferProcessingParameter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that set and retrieve parameters for the buffering process.'
    _iid_ = GUID('{D7C605D8-6DA2-4BAD-A5D4-DD8438717F17}')
    _idlflags_ = ['oleautomation']
FeatureCursorBuffer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IFeatureCursorBuffer, IFeatureCursorBuffer2, IBufferProcessingParameter]

class IMapLayers(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to layers.'
    _iid_ = GUID('{76DA57E7-6A92-4090-8CA9-F5D9ECA78353}')
    _idlflags_ = ['oleautomation']
class IGroupLayer(ILayer):
    _case_insensitive_ = True
    u'Provides access to members that control a collection of layers that behaves like a single layer.'
    _iid_ = GUID('{EDAD6644-1810-11D1-86AE-0000F8751720}')
    _idlflags_ = ['oleautomation']
IMapLayers._methods_ = [
    COMMETHOD(['propget', helpstring(u'Number of layers in the map.')], HRESULT, 'LayerCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The layer at the given index.')], HRESULT, 'Layer',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(ILayer)), 'Layer' )),
    COMMETHOD(['propget', helpstring(u'The layers in the map of the type specified in the uid.  If recursive is true it will return layers in group layers.')], HRESULT, 'Layers',
              ( ['in', 'optional'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IUID), 'uid', 0 ),
              ( ['in', 'optional'], VARIANT_BOOL, 'recursive', True ),
              ( ['retval', 'out'], POINTER(POINTER(IEnumLayer)), 'Layers' )),
    COMMETHOD([helpstring(u'Adds a layer to the map.')], HRESULT, 'AddLayer',
              ( ['in'], POINTER(ILayer), 'Layer' )),
    COMMETHOD([helpstring(u'Adds multiple layers to the map, arranging them nicely if specified.')], HRESULT, 'AddLayers',
              ( ['in'], POINTER(IEnumLayer), 'Layers' ),
              ( ['in'], VARIANT_BOOL, 'autoArrange' )),
    COMMETHOD([helpstring(u'Deletes a layer from the map.')], HRESULT, 'DeleteLayer',
              ( ['in'], POINTER(ILayer), 'Layer' )),
    COMMETHOD([helpstring(u'Moves a layer to another position.')], HRESULT, 'MoveLayer',
              ( ['in'], POINTER(ILayer), 'Layer' ),
              ( ['in'], c_int, 'toIndex' )),
    COMMETHOD([helpstring(u'Removes all layers from the map.')], HRESULT, 'ClearLayers'),
    COMMETHOD([helpstring(u'Check if layer is visible.')], HRESULT, 'IsLayerVisible',
              ( ['in'], POINTER(ILayer), 'Layer' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsLayerVisible' )),
    COMMETHOD([helpstring(u'Inserts a layer at the given position.')], HRESULT, 'InsertLayer',
              ( ['in'], POINTER(ILayer), 'pLayer' ),
              ( ['in'], VARIANT_BOOL, 'autoArrange' ),
              ( ['in'], c_int, 'position' )),
    COMMETHOD([helpstring(u'Inserts layers at the given position.')], HRESULT, 'InsertLayers',
              ( ['in'], POINTER(IEnumLayer), 'pLayers' ),
              ( ['in'], VARIANT_BOOL, 'autoArrange' ),
              ( ['in'], c_int, 'position' )),
    COMMETHOD([helpstring(u"Inserts a layer at a given index of the map's group layer.")], HRESULT, 'InsertLayerInGroup',
              ( ['in'], POINTER(IGroupLayer), 'pGroup' ),
              ( ['in'], POINTER(ILayer), 'pLayer' ),
              ( ['in'], VARIANT_BOOL, 'autoArrange' ),
              ( ['in'], c_int, 'position' )),
    COMMETHOD([helpstring(u"Inserts layers at a given index of the map's group layer.")], HRESULT, 'InsertLayersInGroup',
              ( ['in'], POINTER(IGroupLayer), 'pGroup' ),
              ( ['in'], POINTER(IEnumLayer), 'pLayer' ),
              ( ['in'], VARIANT_BOOL, 'autoArrange' ),
              ( ['in'], c_int, 'position' )),
    COMMETHOD([helpstring(u'Moves the layer with in the map.')], HRESULT, 'MoveLayerEx',
              ( ['in'], POINTER(IGroupLayer), 'pFromGroup' ),
              ( ['in'], POINTER(IGroupLayer), 'pToGroup' ),
              ( ['in'], POINTER(ILayer), 'pLayer' ),
              ( ['in'], c_int, 'newPosition' )),
]
################################################################
## code template for IMapLayers implementation
##class IMapLayers_Impl(object):
##    @property
##    def Layers(self, uid, recursive):
##        u'The layers in the map of the type specified in the uid.  If recursive is true it will return layers in group layers.'
##        #return Layers
##
##    @property
##    def Layer(self, Index):
##        u'The layer at the given index.'
##        #return Layer
##
##    def ClearLayers(self):
##        u'Removes all layers from the map.'
##        #return 
##
##    def AddLayers(self, Layers, autoArrange):
##        u'Adds multiple layers to the map, arranging them nicely if specified.'
##        #return 
##
##    def DeleteLayer(self, Layer):
##        u'Deletes a layer from the map.'
##        #return 
##
##    def InsertLayer(self, pLayer, autoArrange, position):
##        u'Inserts a layer at the given position.'
##        #return 
##
##    def IsLayerVisible(self, Layer):
##        u'Check if layer is visible.'
##        #return IsLayerVisible
##
##    def InsertLayersInGroup(self, pGroup, pLayer, autoArrange, position):
##        u"Inserts layers at a given index of the map's group layer."
##        #return 
##
##    def InsertLayerInGroup(self, pGroup, pLayer, autoArrange, position):
##        u"Inserts a layer at a given index of the map's group layer."
##        #return 
##
##    def MoveLayerEx(self, pFromGroup, pToGroup, pLayer, newPosition):
##        u'Moves the layer with in the map.'
##        #return 
##
##    def MoveLayer(self, Layer, toIndex):
##        u'Moves a layer to another position.'
##        #return 
##
##    @property
##    def LayerCount(self):
##        u'Number of layers in the map.'
##        #return Count
##
##    def InsertLayers(self, pLayers, autoArrange, position):
##        u'Inserts layers at the given position.'
##        #return 
##
##    def AddLayer(self, Layer):
##        u'Adds a layer to the map.'
##        #return 
##

IRasterItemDescription._methods_ = [
    COMMETHOD(['propget', helpstring(u'The data file names.')], HRESULT, 'DataFileNames',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray)), 'ppNames' )),
    COMMETHOD(['propputref', helpstring(u'The data file names.')], HRESULT, 'DataFileNames',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray), 'ppNames' )),
    COMMETHOD(['propget', helpstring(u'The data file URLs.')], HRESULT, 'DataFileURLs',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray)), 'ppURLs' )),
    COMMETHOD(['propputref', helpstring(u'The data file URLs.')], HRESULT, 'DataFileURLs',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray), 'ppURLs' )),
    COMMETHOD(['propget', helpstring(u'The raster item type, i.e. a raster type name.')], HRESULT, 'Type',
              ( ['retval', 'out'], POINTER(BSTR), 'pType' )),
    COMMETHOD(['propput', helpstring(u'The raster item type, i.e. a raster type name.')], HRESULT, 'Type',
              ( ['in'], BSTR, 'pType' )),
    COMMETHOD(['propget', helpstring(u'The raster item properties.')], HRESULT, 'Properties',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet)), 'ppProperties' )),
    COMMETHOD(['propputref', helpstring(u'The raster item properties.')], HRESULT, 'Properties',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet), 'ppProperties' )),
    COMMETHOD(['propget', helpstring(u'The minimum visible cell size factor.')], HRESULT, 'MinimumCellSizeFactor',
              ( ['retval', 'out'], POINTER(c_double), 'pMinCellSizeFactor' )),
    COMMETHOD(['propput', helpstring(u'The minimum visible cell size factor.')], HRESULT, 'MinimumCellSizeFactor',
              ( ['in'], c_double, 'pMinCellSizeFactor' )),
    COMMETHOD(['propget', helpstring(u'The maximum visible cell size factor.')], HRESULT, 'MaximumCellSizeFactor',
              ( ['retval', 'out'], POINTER(c_double), 'pMaxCellSizeFactor' )),
    COMMETHOD(['propput', helpstring(u'The maximum visible cell size factor.')], HRESULT, 'MaximumCellSizeFactor',
              ( ['in'], c_double, 'pMaxCellSizeFactor' )),
    COMMETHOD(['propget', helpstring(u'The georefencing of the raster item.')], HRESULT, 'GeodataXform',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeodataXform)), 'ppXf' )),
    COMMETHOD(['propputref', helpstring(u'The georefencing of the raster item.')], HRESULT, 'GeodataXform',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeodataXform), 'ppXf' )),
    COMMETHOD(['propget', helpstring(u'The method used for applying the GeodataXform.')], HRESULT, 'GeodataXformApplyMethod',
              ( ['retval', 'out'], POINTER(comtypes.gen._8F0541A3_D5BE_4B3F_A8D9_062D5579E19B_0_10_2.esriGeodataXformApplyMethod), 'pMethod' )),
    COMMETHOD(['propput', helpstring(u'The method used for applying the GeodataXform.')], HRESULT, 'GeodataXformApplyMethod',
              ( ['in'], comtypes.gen._8F0541A3_D5BE_4B3F_A8D9_062D5579E19B_0_10_2.esriGeodataXformApplyMethod, 'pMethod' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether histogram statistics are computed for the raster item.')], HRESULT, 'ComputeStatistics',
              ( ['in'], VARIANT_BOOL, 'pvbComputeStatistics' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether histogram statistics are computed for the raster item.')], HRESULT, 'ComputeStatistics',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pvbComputeStatistics' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether pyramids are built for the raster item.')], HRESULT, 'BuildPyramids',
              ( ['in'], VARIANT_BOOL, 'pvbBuildPyramids' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether pyramids are built for the raster item.')], HRESULT, 'BuildPyramids',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pvbBuildPyramids' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether thumbnails are built and saved for the raster item.')], HRESULT, 'BuildThumbnail',
              ( ['in'], VARIANT_BOOL, 'pvbBuildThumbnail' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether thumbnails are built and saved for the raster item.')], HRESULT, 'BuildThumbnail',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pvbBuildThumbnail' )),
]
################################################################
## code template for IRasterItemDescription implementation
##class IRasterItemDescription_Impl(object):
##    def DataFileURLs(self, ppURLs):
##        u'The data file URLs.'
##        #return 
##
##    def _get(self):
##        u'Indicates whether pyramids are built for the raster item.'
##        #return pvbBuildPyramids
##    def _set(self, pvbBuildPyramids):
##        u'Indicates whether pyramids are built for the raster item.'
##    BuildPyramids = property(_get, _set, doc = _set.__doc__)
##
##    def DataFileNames(self, ppNames):
##        u'The data file names.'
##        #return 
##
##    def GeodataXform(self, ppXf):
##        u'The georefencing of the raster item.'
##        #return 
##
##    def _get(self):
##        u'Indicates whether thumbnails are built and saved for the raster item.'
##        #return pvbBuildThumbnail
##    def _set(self, pvbBuildThumbnail):
##        u'Indicates whether thumbnails are built and saved for the raster item.'
##    BuildThumbnail = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The minimum visible cell size factor.'
##        #return pMinCellSizeFactor
##    def _set(self, pMinCellSizeFactor):
##        u'The minimum visible cell size factor.'
##    MinimumCellSizeFactor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The maximum visible cell size factor.'
##        #return pMaxCellSizeFactor
##    def _set(self, pMaxCellSizeFactor):
##        u'The maximum visible cell size factor.'
##    MaximumCellSizeFactor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether histogram statistics are computed for the raster item.'
##        #return pvbComputeStatistics
##    def _set(self, pvbComputeStatistics):
##        u'Indicates whether histogram statistics are computed for the raster item.'
##    ComputeStatistics = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The method used for applying the GeodataXform.'
##        #return pMethod
##    def _set(self, pMethod):
##        u'The method used for applying the GeodataXform.'
##    GeodataXformApplyMethod = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The raster item type, i.e. a raster type name.'
##        #return pType
##    def _set(self, pType):
##        u'The raster item type, i.e. a raster type name.'
##    Type = property(_get, _set, doc = _set.__doc__)
##
##    def Properties(self, ppProperties):
##        u'The raster item properties.'
##        #return 
##

class IContextAnalyzer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members used to determine the correct context menu id for a given context object.'
    _iid_ = GUID('{0C452012-84CB-11D2-AE68-080009EC732A}')
    _idlflags_ = ['oleautomation']
IContextAnalyzer._methods_ = [
    COMMETHOD(['propget', helpstring(u'Priority for the context analyzer: 0 (highest) - 99 (lowest).')], HRESULT, 'Priority',
              ( ['retval', 'out'], POINTER(c_int), 'Priority' )),
    COMMETHOD(['propput', helpstring(u'Priority for the context analyzer: 0 (highest) - 99 (lowest).')], HRESULT, 'Priority',
              ( ['in'], c_int, 'Priority' )),
    COMMETHOD([helpstring(u'Returns an appropriate context menu id, if possible.  Returns null if it cannot determine an applicable context menu.')], HRESULT, 'GetContextMenu',
              ( ['in'], POINTER(IUnknown), 'contextObject' ),
              ( ['out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IUID)), 'clsidMenu' )),
]
################################################################
## code template for IContextAnalyzer implementation
##class IContextAnalyzer_Impl(object):
##    def _get(self):
##        u'Priority for the context analyzer: 0 (highest) - 99 (lowest).'
##        #return Priority
##    def _set(self, Priority):
##        u'Priority for the context analyzer: 0 (highest) - 99 (lowest).'
##    Priority = property(_get, _set, doc = _set.__doc__)
##
##    def GetContextMenu(self, contextObject):
##        u'Returns an appropriate context menu id, if possible.  Returns null if it cannot determine an applicable context menu.'
##        #return clsidMenu
##

class BasicGeoprocessor(CoClass):
    u'A basic geoprocessor.'
    _reg_clsid_ = GUID('{4C1FD612-F3A3-11D3-9FDE-00C04F6BC78E}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
BasicGeoprocessor._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IBasicGeoprocessor]

class IViewManager(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members used to describe or define view behavior.'
    _iid_ = GUID('{DD94D76C-836D-11D0-87EC-080009EC732A}')
    _idlflags_ = ['oleautomation']
IViewManager._methods_ = [
    COMMETHOD(['propputref', helpstring(u'Object to use for element selection.')], HRESULT, 'ElementSelection',
              ( ['in'], POINTER(ISelection), 'selectionObject' )),
    COMMETHOD(['propget', helpstring(u'Object to use for element selection.')], HRESULT, 'ElementSelection',
              ( ['retval', 'out'], POINTER(POINTER(ISelection)), 'selectionObject' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to be conservative when allocating resources.')], HRESULT, 'ConserveMemory',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to be conservative when allocating resources.')], HRESULT, 'ConserveMemory',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'The highest phase in the drawing order that uses a display filter.  Clients should set this when they draw in response to AfterDraw and they use a display filter.')], HRESULT, 'TopFilterPhase',
              ( ['in'], esriViewDrawPhase, 'phase' )),
    COMMETHOD(['propget', helpstring(u'The highest phase in the drawing order that uses a display filter.  Clients should set this when they draw in response to AfterDraw and they use a display filter.')], HRESULT, 'TopFilterPhase',
              ( ['retval', 'out'], POINTER(esriViewDrawPhase), 'phase' )),
    COMMETHOD(['propput', helpstring(u'Phase index that supplements TopFilterPhase.  Clients should set the item index here if they draw in response to AfterDrawItem and they use a display filter.  TopFilterPhase must also be specified.')], HRESULT, 'TopFilterIndex',
              ( ['in'], c_int, 'phaseIndex' )),
    COMMETHOD(['propget', helpstring(u'Phase index that supplements TopFilterPhase.  Clients should set the item index here if they draw in response to AfterDrawItem and they use a display filter.  TopFilterPhase must also be specified.')], HRESULT, 'TopFilterIndex',
              ( ['retval', 'out'], POINTER(c_int), 'phaseIndex' )),
    COMMETHOD(['propput', helpstring(u'Size allocated for each band when banding output.')], HRESULT, 'OutputBandSize',
              ( ['in'], c_int, 'kilobytes' )),
    COMMETHOD(['propget', helpstring(u'Size allocated for each band when banding output.')], HRESULT, 'OutputBandSize',
              ( ['retval', 'out'], POINTER(c_int), 'kilobytes' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether view uses page coordinates.')], HRESULT, 'UsesPageCoordinates',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'UsesPageCoordinates' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to expand or limit the number of events that are fired.  The following events are not fired if VerboseEvents is false: AfterItemDraw.')], HRESULT, 'VerboseEvents',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'VerboseEvents' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to expand or limit the number of events that are fired.  The following events are not fired if VerboseEvents is false: AfterItemDraw.')], HRESULT, 'VerboseEvents',
              ( ['in'], VARIANT_BOOL, 'VerboseEvents' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the background should draw immediately.  Set to true to eliminate flashing during animation.')], HRESULT, 'DelayBackgroundDraw',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the background should draw immediately.  Set to true to eliminate flashing during animation.')], HRESULT, 'DelayBackgroundDraw',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates if external clients are drawing in response to the specified phase.')], HRESULT, 'ExternalDrawing',
              ( ['in'], esriViewDrawPhase, 'phase' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'ExternalDrawing' )),
    COMMETHOD(['propput', helpstring(u'Indicates if external clients are drawing in response to the specified phase.')], HRESULT, 'ExternalDrawing',
              ( ['in'], esriViewDrawPhase, 'phase' ),
              ( ['in'], VARIANT_BOOL, 'ExternalDrawing' )),
]
################################################################
## code template for IViewManager implementation
##class IViewManager_Impl(object):
##    def _get(self, phase):
##        u'Indicates if external clients are drawing in response to the specified phase.'
##        #return ExternalDrawing
##    def _set(self, phase, ExternalDrawing):
##        u'Indicates if external clients are drawing in response to the specified phase.'
##    ExternalDrawing = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The highest phase in the drawing order that uses a display filter.  Clients should set this when they draw in response to AfterDraw and they use a display filter.'
##        #return phase
##    def _set(self, phase):
##        u'The highest phase in the drawing order that uses a display filter.  Clients should set this when they draw in response to AfterDraw and they use a display filter.'
##    TopFilterPhase = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Phase index that supplements TopFilterPhase.  Clients should set the item index here if they draw in response to AfterDrawItem and they use a display filter.  TopFilterPhase must also be specified.'
##        #return phaseIndex
##    def _set(self, phaseIndex):
##        u'Phase index that supplements TopFilterPhase.  Clients should set the item index here if they draw in response to AfterDrawItem and they use a display filter.  TopFilterPhase must also be specified.'
##    TopFilterIndex = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether to expand or limit the number of events that are fired.  The following events are not fired if VerboseEvents is false: AfterItemDraw.'
##        #return VerboseEvents
##    def _set(self, VerboseEvents):
##        u'Indicates whether to expand or limit the number of events that are fired.  The following events are not fired if VerboseEvents is false: AfterItemDraw.'
##    VerboseEvents = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def ElementSelection(self, selectionObject):
##        u'Object to use for element selection.'
##        #return 
##
##    def _get(self):
##        u'Indicates whether to be conservative when allocating resources.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether to be conservative when allocating resources.'
##    ConserveMemory = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the background should draw immediately.  Set to true to eliminate flashing during animation.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if the background should draw immediately.  Set to true to eliminate flashing during animation.'
##    DelayBackgroundDraw = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Size allocated for each band when banding output.'
##        #return kilobytes
##    def _set(self, kilobytes):
##        u'Size allocated for each band when banding output.'
##    OutputBandSize = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def UsesPageCoordinates(self):
##        u'Indicates whether view uses page coordinates.'
##        #return UsesPageCoordinates
##

class ACValueMapLabelRenderer(CoClass):
    u'ArcIMS Value Map Label Renderer.'
    _reg_clsid_ = GUID('{3D7551D0-6EEF-4DC8-9098-99C9925EB233}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IACValueMapRenderer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control ArcIMS value map renderer.'
    _iid_ = GUID('{DD43E233-4B52-4D46-9897-3BFE7638D3E8}')
    _idlflags_ = ['oleautomation']
class IACValueMapLabelRenderer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Indicator interface that identifies an ArcIMS value map label renderer.'
    _iid_ = GUID('{B229F597-FACA-4265-B131-19298BB0EB03}')
    _idlflags_ = ['oleautomation']
ACValueMapLabelRenderer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IACAxl, IACRenderer, IACLabelRenderer, IACValueMapRenderer, IACValueMapLabelRenderer, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class IEnumLocatedNetworkElement(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that hand out enumerated network elements, and reset the enumeration.'
    _iid_ = GUID('{60156525-FDEE-485D-B3EF-3250742E3189}')
    _idlflags_ = ['oleautomation']
INetworkLayer._methods_ = [
    COMMETHOD(['propget', helpstring(u'The Network Dataset used to define the layer.')], HRESULT, 'NetworkDataset',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.INetworkDataset)), 'nds' )),
    COMMETHOD(['propputref', helpstring(u'The Network Dataset used to define the layer.')], HRESULT, 'NetworkDataset',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.INetworkDataset), 'nds' )),
    COMMETHOD(['propget', helpstring(u'The primary display network attribute.')], HRESULT, 'DisplayAttribute',
              ( ['retval', 'out'], POINTER(BSTR), 'attName' )),
    COMMETHOD(['propput', helpstring(u'The primary display network attribute.')], HRESULT, 'DisplayAttribute',
              ( ['in'], BSTR, 'attName' )),
    COMMETHOD(['propget', helpstring(u'Indicates if symbols are scaled for the layer.')], HRESULT, 'ScaleSymbols',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Scale' )),
    COMMETHOD(['propput', helpstring(u'Indicates if symbols are scaled for the layer.')], HRESULT, 'ScaleSymbols',
              ( ['in'], VARIANT_BOOL, 'Scale' )),
    COMMETHOD([helpstring(u"Expands the given geometry by an amount that will include the layer's symbology for the given display.")], HRESULT, 'ExpandRegionForSymbols',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'region' )),
    COMMETHOD([helpstring(u"Searches through the specified network dataset's source and returns an enumeration of network locations that intersect the input geometry.")], HRESULT, 'SearchLocatedNetworkElements',
              ( ['in'], BSTR, 'sourceName' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'Geometry' ),
              ( ['retval', 'out'], POINTER(POINTER(IEnumLocatedNetworkElement)), 'locatedElements' )),
]
################################################################
## code template for INetworkLayer implementation
##class INetworkLayer_Impl(object):
##    def ExpandRegionForSymbols(self, Display, region):
##        u"Expands the given geometry by an amount that will include the layer's symbology for the given display."
##        #return 
##
##    def NetworkDataset(self, nds):
##        u'The Network Dataset used to define the layer.'
##        #return 
##
##    def _get(self):
##        u'Indicates if symbols are scaled for the layer.'
##        #return Scale
##    def _set(self, Scale):
##        u'Indicates if symbols are scaled for the layer.'
##    ScaleSymbols = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The primary display network attribute.'
##        #return attName
##    def _set(self, attName):
##        u'The primary display network attribute.'
##    DisplayAttribute = property(_get, _set, doc = _set.__doc__)
##
##    def SearchLocatedNetworkElements(self, sourceName, Geometry):
##        u"Searches through the specified network dataset's source and returns an enumeration of network locations that intersect the input geometry."
##        #return locatedElements
##

IMaplexKeyNumberGroups._methods_ = [
    COMMETHOD(['propget', helpstring(u'The number of key numbering groups in the collection.')], HRESULT, 'GroupCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD([helpstring(u'Adds a key numbering group to the collection.')], HRESULT, 'AddGroup',
              ( ['in'], POINTER(IMaplexKeyNumberGroup), 'group' )),
    COMMETHOD([helpstring(u'Queries a key numbering group from the collection.')], HRESULT, 'GetGroup',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IMaplexKeyNumberGroup)), 'group' )),
    COMMETHOD([helpstring(u'Deletes the key numbering group from the collection.')], HRESULT, 'RemoveGroup',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all key numbering groups from the collection.')], HRESULT, 'Clear'),
]
################################################################
## code template for IMaplexKeyNumberGroups implementation
##class IMaplexKeyNumberGroups_Impl(object):
##    def Clear(self):
##        u'Removes all key numbering groups from the collection.'
##        #return 
##
##    def RemoveGroup(self, Index):
##        u'Deletes the key numbering group from the collection.'
##        #return 
##
##    @property
##    def GroupCount(self):
##        u'The number of key numbering groups in the collection.'
##        #return Count
##
##    def GetGroup(self, Index):
##        u'Queries a key numbering group from the collection.'
##        #return group
##
##    def AddGroup(self, group):
##        u'Adds a key numbering group to the collection.'
##        #return 
##

class StandaloneTable(CoClass):
    u'A standalone table.'
    _reg_clsid_ = GUID('{EE7C5047-E3DB-11D3-A096-00C04F6BC626}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IDisplayRelationshipClass(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that are used to set up joins.'
    _iid_ = GUID('{55A4E17E-8682-42BA-8866-AB04DB883934}')
    _idlflags_ = ['oleautomation']
class ITableSelection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control table selection.'
    _iid_ = GUID('{2C232271-FBAA-11D3-B9D3-00C0F0567A4A}')
    _idlflags_ = ['oleautomation']
class ISelectionEvents(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to events that occur when the selection changes.'
    _iid_ = GUID('{07E11311-D615-11D1-A21B-080009B6F22B}')
    _idlflags_ = ['oleautomation']
class IDefinitionExpressionEvents(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to events that occur when the Definition Expression changes.'
    _iid_ = GUID('{78C6D12C-634E-495E-86B5-17A5D89FB06A}')
    _idlflags_ = ['oleautomation']
class ITimeDisplayTable(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Interface that allows retrieve time related table properties.'
    _iid_ = GUID('{7A55BBF1-52F0-413B-AC7C-761BD139AE3F}')
    _idlflags_ = ['oleautomation']
class ITimeDisplayTable2(ITimeDisplayTable):
    _case_insensitive_ = True
    u'Interface that allows retrieve time related table properties.'
    _iid_ = GUID('{64B8B4AF-4F12-4F66-B2DC-79476910EE38}')
    _idlflags_ = ['oleautomation']
StandaloneTable._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IStandaloneTable, IDisplayTable, IDisplayRelationshipClass, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITableFields, IRelationshipClassCollection, IRelationshipClassCollectionEdit, ITableSelection, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataset, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IObjectClassSchemaEvents, IDataLayer, IDataLayer2, IAttributeTable, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IConnectionPointContainer, ITableDefinition, ITimeData, ITimeData2, ITimeTableDefinition, ITimeDimensionDefinition, ITimeDataDisplay, IDisplayString, IOrderedLayerFields, ITimeDisplayTable, ITimeDisplayTable2]
StandaloneTable._outgoing_interfaces_ = [ISelectionEvents, IDefinitionExpressionEvents]

class TilesTable(CoClass):
    u'A Tiles Table object.'
    _reg_clsid_ = GUID('{2BAA0016-13B7-492C-8D9F-53EEF13A1FE0}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
TilesTable._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ITilesTable]

class ACMap(CoClass):
    u'Container for the display and manipulation of ArcIMS map services.'
    _reg_clsid_ = GUID('{E774FD60-5F97-4630-BC9B-9116645AC184}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
ACMap._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IACMap, IACMapAdmin, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

ITimeDisplayTable._methods_ = [
    COMMETHOD([helpstring(u'Prepares an input query filter by appending the time expression into the where clause.')], HRESULT, 'PrepareTimeQuery',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITimeValue), 'pTimeValue' ),
              ( ['in', 'out'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'pFilter' )),
]
################################################################
## code template for ITimeDisplayTable implementation
##class ITimeDisplayTable_Impl(object):
##    def PrepareTimeQuery(self, pTimeValue):
##        u'Prepares an input query filter by appending the time expression into the where clause.'
##        #return pFilter
##

ITimeDisplayTable2._methods_ = [
    COMMETHOD([helpstring(u'Prepares an input query filter by appending the time expression into the where clause.')], HRESULT, 'PrepareTimeQueryEx',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITimeValue), 'pTimeValue' ),
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriTimeRelation, 'eTimeRelation' ),
              ( ['in', 'out'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'pFilter' )),
    COMMETHOD([helpstring(u'Prepares an input query filter by appending the time expression into the where clause.')], HRESULT, 'PrepareTimeQueryFromDisplay',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'pDisplay' ),
              ( ['in', 'out'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'pFilter' )),
]
################################################################
## code template for ITimeDisplayTable2 implementation
##class ITimeDisplayTable2_Impl(object):
##    def PrepareTimeQueryEx(self, pTimeValue, eTimeRelation):
##        u'Prepares an input query filter by appending the time expression into the where clause.'
##        #return pFilter
##
##    def PrepareTimeQueryFromDisplay(self, pDisplay):
##        u'Prepares an input query filter by appending the time expression into the where clause.'
##        #return pFilter
##

class IACConnector(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to connecting to an ArcIMS service.'
    _iid_ = GUID('{74E4520F-DFE6-11D3-9FF7-00C04F6BC6A5}')
    _idlflags_ = ['oleautomation']
IACConnector._methods_ = [
    COMMETHOD(['propget', helpstring(u'The map of the given map.')], HRESULT, 'Map',
              ( ['in'], POINTER(comtypes.gen._746F6817_89BB_4490_9829_83CA25FD505A_0_10_2.IIMSAxlRequest), 'AxlRequest' ),
              ( ['retval', 'out'], POINTER(POINTER(IACMap)), 'Map' )),
]
################################################################
## code template for IACConnector implementation
##class IACConnector_Impl(object):
##    @property
##    def Map(self, AxlRequest):
##        u'The map of the given map.'
##        #return Map
##

class IIMSGlobeXMLNode(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to an XML node.'
    _iid_ = GUID('{CDAE0026-E2AE-45F0-9619-10FDCB9F615F}')
    _idlflags_ = ['oleautomation']
IIMSGlobeXMLParser._methods_ = [
    COMMETHOD([helpstring(u'Parses the xml structure from a string.')], HRESULT, 'Parse',
              ( ['in'], BSTR, 'xmlStr' )),
    COMMETHOD(['propget', helpstring(u'A reference to the root of the xml structure.')], HRESULT, 'Root',
              ( ['retval', 'out'], POINTER(POINTER(IIMSGlobeXMLNode)), 'Root' )),
    COMMETHOD(['propget', helpstring(u'The highest node in the tree with the tag.')], HRESULT, 'HighestNode',
              ( ['in'], BSTR, 'Tag' ),
              ( ['retval', 'out'], POINTER(POINTER(IIMSGlobeXMLNode)), 'result' )),
    COMMETHOD([helpstring(u'The xml string representing the internal node structure.')], HRESULT, 'MakeXmlStr',
              ( ['retval', 'out'], POINTER(BSTR), 'xmlStr' )),
    COMMETHOD(['propputref', helpstring(u'A reference to the root of the xml structure.')], HRESULT, 'Root',
              ( ['in'], POINTER(IIMSGlobeXMLNode), 'Root' )),
    COMMETHOD(['propput', helpstring(u'The header xml information.')], HRESULT, 'XmlHeader',
              ( ['in'], BSTR, 'rhs' )),
    COMMETHOD(['propget', helpstring(u'A string that represents the response body.')], HRESULT, 'ResponseBody',
              ( ['retval', 'out'], POINTER(BSTR), 'ResponseBody' )),
]
################################################################
## code template for IIMSGlobeXMLParser implementation
##class IIMSGlobeXMLParser_Impl(object):
##    def MakeXmlStr(self):
##        u'The xml string representing the internal node structure.'
##        #return xmlStr
##
##    def _set(self, rhs):
##        u'The header xml information.'
##    XmlHeader = property(fset = _set, doc = _set.__doc__)
##
##    def Parse(self, xmlStr):
##        u'Parses the xml structure from a string.'
##        #return 
##
##    @property
##    def ResponseBody(self):
##        u'A string that represents the response body.'
##        #return ResponseBody
##
##    @property
##    def HighestNode(self, Tag):
##        u'The highest node in the tree with the tag.'
##        #return result
##
##    def Root(self, Root):
##        u'A reference to the root of the xml structure.'
##        #return 
##

class ICFDataSourcePageExtension(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the ICFDataSourcePageExtension interface.'
    _iid_ = GUID('{8B3C1EBB-07BF-4B1A-90F5-917E2B572CA5}')
    _idlflags_ = ['oleautomation']
ICFDataSourcePageExtension._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if the data source can be changed.')], HRESULT, 'DataSourceReadOnly',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the data source can be changed.')], HRESULT, 'DataSourceReadOnly',
              ( ['in'], VARIANT_BOOL, 'flag' )),
]
################################################################
## code template for ICFDataSourcePageExtension implementation
##class ICFDataSourcePageExtension_Impl(object):
##    def _get(self):
##        u'Indicates if the data source can be changed.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if the data source can be changed.'
##    DataSourceReadOnly = property(_get, _set, doc = _set.__doc__)
##

class IACGroupRenderer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control ArcIMS group renderers.'
    _iid_ = GUID('{A3619021-32C9-46F9-BB4C-159111F0297C}')
    _idlflags_ = ['oleautomation']
IACGroupRenderer._methods_ = [
    COMMETHOD([helpstring(u'Adds a renderer to the group.')], HRESULT, 'Add',
              ( ['in'], POINTER(IACRenderer), 'Renderer' )),
    COMMETHOD(['propget', helpstring(u'The number of renderers in the group.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The renderer at the given index in the group.')], HRESULT, 'Renderer',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IACRenderer)), 'Renderer' )),
    COMMETHOD([helpstring(u'Removes all renderers in the group.')], HRESULT, 'Clear'),
    COMMETHOD([helpstring(u'Removes the renderer from the group.')], HRESULT, 'Delete',
              ( ['in'], POINTER(IACRenderer), 'Renderer' )),
]
################################################################
## code template for IACGroupRenderer implementation
##class IACGroupRenderer_Impl(object):
##    @property
##    def Count(self):
##        u'The number of renderers in the group.'
##        #return Count
##
##    def Add(self, Renderer):
##        u'Adds a renderer to the group.'
##        #return 
##
##    def Clear(self):
##        u'Removes all renderers in the group.'
##        #return 
##
##    @property
##    def Renderer(self, Index):
##        u'The renderer at the given index in the group.'
##        #return Renderer
##
##    def Delete(self, Renderer):
##        u'Removes the renderer from the group.'
##        #return 
##

IOverposterLayerProperties2._methods_ = [
    COMMETHOD(['propput', helpstring(u'Indicates if labels are placed for the layer.')], HRESULT, 'PlaceLabels',
              ( ['in'], VARIANT_BOOL, 'place' )),
    COMMETHOD(['propget', helpstring(u'Indicates if labels are placed for the layer.')], HRESULT, 'PlaceLabels',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'place' )),
    COMMETHOD(['propput', helpstring(u'Indicates if symbols are placed for the layer.')], HRESULT, 'PlaceSymbols',
              ( ['in'], VARIANT_BOOL, 'place' )),
    COMMETHOD(['propget', helpstring(u'Indicates if symbols are placed for the layer.')], HRESULT, 'PlaceSymbols',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'place' )),
    COMMETHOD(['propput', helpstring(u'Indicates if features are treated as barriers to label/symbol placement.')], HRESULT, 'IsBarrier',
              ( ['in'], VARIANT_BOOL, 'IsBarrier' )),
    COMMETHOD(['propget', helpstring(u'Indicates if features are treated as barriers to label/symbol placement.')], HRESULT, 'IsBarrier',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsBarrier' )),
    COMMETHOD(['propget', helpstring(u'Indicates if overflow labels are put into a graphics container tagged placed or unplaced.')], HRESULT, 'TagUnplaced',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Value' )),
    COMMETHOD(['propput', helpstring(u'Indicates if overflow labels are put into a graphics container tagged placed or unplaced.')], HRESULT, 'TagUnplaced',
              ( ['in'], VARIANT_BOOL, 'Value' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer has a feature weight.')], HRESULT, 'HasFeatureWeight',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Value' )),
]
################################################################
## code template for IOverposterLayerProperties2 implementation
##class IOverposterLayerProperties2_Impl(object):
##    def _get(self):
##        u'Indicates if features are treated as barriers to label/symbol placement.'
##        #return IsBarrier
##    def _set(self, IsBarrier):
##        u'Indicates if features are treated as barriers to label/symbol placement.'
##    IsBarrier = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def HasFeatureWeight(self):
##        u'Indicates if the layer has a feature weight.'
##        #return Value
##
##    def _get(self):
##        u'Indicates if labels are placed for the layer.'
##        #return place
##    def _set(self, place):
##        u'Indicates if labels are placed for the layer.'
##    PlaceLabels = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if symbols are placed for the layer.'
##        #return place
##    def _set(self, place):
##        u'Indicates if symbols are placed for the layer.'
##    PlaceSymbols = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if overflow labels are put into a graphics container tagged placed or unplaced.'
##        #return Value
##    def _set(self, Value):
##        u'Indicates if overflow labels are put into a graphics container tagged placed or unplaced.'
##    TagUnplaced = property(_get, _set, doc = _set.__doc__)
##

IBasicOverposterEvents._methods_ = [
    COMMETHOD([helpstring(u'Fires when the label is found.')], HRESULT, 'Label',
              ( ['in'], POINTER(IPlacedObject), 'placedObject' ),
              ( ['out'], POINTER(VARIANT_BOOL), 'Cancel' )),
]
################################################################
## code template for IBasicOverposterEvents implementation
##class IBasicOverposterEvents_Impl(object):
##    def Label(self, placedObject):
##        u'Fires when the label is found.'
##        #return Cancel
##

class TimeQueryFilter(CoClass):
    u'TimeQueryFilter Class'
    _reg_clsid_ = GUID('{DE39B456-06F8-4EEC-9CAE-C6F430D8BDFF}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
TimeQueryFilter._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITimeQueryFilter, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ISpatialFilter, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter2, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilterDefinition, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilterDefinition2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]

class TerrainLayer(CoClass):
    u'The Terrain Layer class.'
    _reg_clsid_ = GUID('{5C7C19DD-D2F0-4A31-9C70-F87E3A203C28}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class ITerrainLayer2(ITerrainLayer):
    _case_insensitive_ = True
    u'Provides access to members that control a Terrain layer.'
    _iid_ = GUID('{5A4DB585-3D53-481F-95CF-B000E26B86B4}')
    _idlflags_ = ['oleautomation']
class ILayerDrawSetup(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to layer draw setups.'
    _iid_ = GUID('{BE9DC638-BD42-4319-8254-9F23FB866DEB}')
    _idlflags_ = ['oleautomation']
TerrainLayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeoDataset, ITerrainLayer, ITerrainLayer2, ILayer, ILayerInfo, IIdentify, ILayerExtensions, ILayerPosition, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayFilterManager, ILayerEffects, IDataLayer, IDataLayer2, ILayerDrawSetup, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspaceEvents2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, ILayerGeneralProperties, ILegendInfo, comtypes.gen._7BA654FE_F55E_4EE5_8CF2_FAEFFBC04A61_0_10_2.ITerrainEditEvents, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IConnectionPointContainer, ILayerFields, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITableFields]


# values for enumeration 'esriGridCornerEnum'
esriGridCornerLowerLeft = 0
esriGridCornerLowerRight = 1
esriGridCornerUpperLeft = 2
esriGridCornerUpperRight = 3
esriGridCornerEnum = c_int # enum
class IDataGraphTElement(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control graphic element for data graph.'
    _iid_ = GUID('{3016E57E-470B-4A6F-825D-7B8D40BA39C7}')
    _idlflags_ = ['oleautomation']
class IDataGraphBase(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the data graph.'
    _iid_ = GUID('{37C4C49C-66CC-4B39-ADE8-15E2E270D8B1}')
    _idlflags_ = ['oleautomation']
class IDataGraphT(IDataGraphBase):
    _case_insensitive_ = True
    u'Provides access to members that control data graph.'
    _iid_ = GUID('{CCB2226C-6385-4A9E-82F2-2977B2C13FF2}')
    _idlflags_ = ['oleautomation']
IDataGraphTElement._methods_ = [
    COMMETHOD(['propputref', helpstring(u'Data graph used in graphic element.')], HRESULT, 'DataGraphT',
              ( ['in'], POINTER(IDataGraphT), 'pDataGraphT' )),
    COMMETHOD(['propget', helpstring(u'Data graph used in graphic element.')], HRESULT, 'DataGraphT',
              ( ['retval', 'out'], POINTER(POINTER(IDataGraphT)), 'pDataGraphT' )),
    COMMETHOD(['hidden', helpstring(u'Indicates if data source is connected to the data graph.'), 'propget'], HRESULT, 'IsDataSourceConnected',
              ( ['out'], POINTER(VARIANT_BOOL), 'b' )),
    COMMETHOD(['hidden', helpstring(u'Removes the connection between the data graph and the data source.')], HRESULT, 'RemoveDataSourceConnection'),
]
################################################################
## code template for IDataGraphTElement implementation
##class IDataGraphTElement_Impl(object):
##    def RemoveDataSourceConnection(self):
##        u'Removes the connection between the data graph and the data source.'
##        #return 
##
##    @property
##    def DataGraphT(self, pDataGraphT):
##        u'Data graph used in graphic element.'
##        #return 
##
##    @property
##    def IsDataSourceConnected(self):
##        u'Indicates if data source is connected to the data graph.'
##        #return b
##

ICacheDescriptionInfo._methods_ = [
    COMMETHOD(['propget', helpstring(u'TileCacheInfo object.')], HRESULT, 'TileCacheInfo',
              ( ['retval', 'out'], POINTER(POINTER(ITileCacheInfo)), 'ppTileCacheInfo' )),
    COMMETHOD(['propputref', helpstring(u'TileCacheInfo object.')], HRESULT, 'TileCacheInfo',
              ( [], POINTER(ITileCacheInfo), 'ppTileCacheInfo' )),
    COMMETHOD(['propget', helpstring(u'TileImageInfo object.')], HRESULT, 'TileImageInfo',
              ( ['retval', 'out'], POINTER(POINTER(ITileImageInfo)), 'ppTileIamgeInfo' )),
    COMMETHOD(['propputref', helpstring(u'TileImageInfo object.')], HRESULT, 'TileImageInfo',
              ( [], POINTER(ITileImageInfo), 'ppTileIamgeInfo' )),
    COMMETHOD(['propget', helpstring(u'CacheControlInfo object.')], HRESULT, 'CacheControlInfo',
              ( ['retval', 'out'], POINTER(POINTER(ICacheControlInfo)), 'ppCacheControlInfo' )),
    COMMETHOD(['propputref', helpstring(u'CacheControlInfo object.')], HRESULT, 'CacheControlInfo',
              ( ['in'], POINTER(ICacheControlInfo), 'ppCacheControlInfo' )),
    COMMETHOD(['propget', helpstring(u'LayerCacheInfos object.')], HRESULT, 'LayerCacheInfos',
              ( ['retval', 'out'], POINTER(POINTER(ILayerCacheInfos)), 'ppLayerCacheInfos' )),
    COMMETHOD(['propputref', helpstring(u'LayerCacheInfos object.')], HRESULT, 'LayerCacheInfos',
              ( ['in'], POINTER(ILayerCacheInfos), 'ppLayerCacheInfos' )),
    COMMETHOD(['propget', helpstring(u'Cache type.')], HRESULT, 'CacheType',
              ( ['retval', 'out'], POINTER(esriCachedMapServiceType), 'pServiceType' )),
    COMMETHOD(['propput', helpstring(u'Cache type.')], HRESULT, 'CacheType',
              ( ['in'], esriCachedMapServiceType, 'pServiceType' )),
]
################################################################
## code template for ICacheDescriptionInfo implementation
##class ICacheDescriptionInfo_Impl(object):
##    def CacheControlInfo(self, ppCacheControlInfo):
##        u'CacheControlInfo object.'
##        #return 
##
##    def _get(self):
##        u'Cache type.'
##        #return pServiceType
##    def _set(self, pServiceType):
##        u'Cache type.'
##    CacheType = property(_get, _set, doc = _set.__doc__)
##
##    def LayerCacheInfos(self, ppLayerCacheInfos):
##        u'LayerCacheInfos object.'
##        #return 
##
##    def TileImageInfo(self, ppTileIamgeInfo):
##        u'TileImageInfo object.'
##        #return 
##
##    def TileCacheInfo(self, ppTileCacheInfo):
##        u'TileCacheInfo object.'
##        #return 
##

class GroupLayer(CoClass):
    u'A collection of layers that behaves like a single layer.'
    _reg_clsid_ = GUID('{EDAD6647-1810-11D1-86AE-0000F8751720}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class ISymbolLevels(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control symbol level drawing.'
    _iid_ = GUID('{7A3E4AC0-D4E0-4F56-97DF-709AB216DAA1}')
    _idlflags_ = ['oleautomation']
class ILevelMasking(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to means to mask layers with other layers based on symbol levels.'
    _iid_ = GUID('{A4B202D6-363F-455D-A581-C323834DF4F7}')
    _idlflags_ = ['oleautomation']
GroupLayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGroupLayer, ICompositeLayer, ILayer, ILayer2, ILayerPosition, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeoDataset, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, IIdentify, IIdentify2, ILayerInfo, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayAdmin, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayAdmin2, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IMapLevel, ISymbolLevels, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IConnectionPointContainer, IPublishLayer, ILayerDrawingProperties, ILayerExtensions, ILayerGeneralProperties, ILayerMasking, ILevelMasking, ILayerSymbologyExtents, ILayerEffects, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayFilterManager]
GroupLayer._outgoing_interfaces_ = [ILayerEvents]

class TerrainLayerFactory(CoClass):
    u'The Terrain Layer Factory is used to help look for Terrains.'
    _reg_clsid_ = GUID('{E6BB7928-9163-4898-A2C2-14092773F394}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
TerrainLayerFactory._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILayerFactory]

class ILasDatasetLayer(ILayer):
    _case_insensitive_ = True
    u'Provides access to members that control a Lasdataset layer.'
    _iid_ = GUID('{24AF7E56-75AF-4BA1-8AE3-42E953CF2C95}')
    _idlflags_ = ['oleautomation']
ILasDatasetLayer._methods_ = [
    COMMETHOD(['propget', helpstring(u'The LasDataset used to define the layer.')], HRESULT, 'Dataset',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._7BA654FE_F55E_4EE5_8CF2_FAEFFBC04A61_0_10_2.ILasDataset)), 'ppLasDataset' )),
    COMMETHOD(['propputref', helpstring(u'The LasDataset used to define the layer.')], HRESULT, 'Dataset',
              ( ['in'], POINTER(comtypes.gen._7BA654FE_F55E_4EE5_8CF2_FAEFFBC04A61_0_10_2.ILasDataset), 'ppLasDataset' )),
    COMMETHOD(['propget', helpstring(u'The display filter.')], HRESULT, 'Filter',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._7BA654FE_F55E_4EE5_8CF2_FAEFFBC04A61_0_10_2.ILasFilter)), 'ppFilter' )),
    COMMETHOD(['propputref', helpstring(u'The display filter.')], HRESULT, 'Filter',
              ( ['in'], POINTER(comtypes.gen._7BA654FE_F55E_4EE5_8CF2_FAEFFBC04A61_0_10_2.ILasFilter), 'ppFilter' )),
    COMMETHOD([helpstring(u'Gets current surface.')], HRESULT, 'GetCurrentSurface',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ISurface)), 'ppSurface' )),
    COMMETHOD(['propget', helpstring(u'The number of renderers.')], HRESULT, 'RendererCount',
              ( ['retval', 'out'], POINTER(c_int), 'pRendererCount' )),
    COMMETHOD([helpstring(u'Gets the nth renderer.')], HRESULT, 'GetRenderer',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(ITinRenderer)), 'ppRenderer' )),
    COMMETHOD([helpstring(u'Add a renderer to the end of the group.')], HRESULT, 'AddRenderer',
              ( ['in'], POINTER(ITinRenderer), 'pRenderer' )),
    COMMETHOD([helpstring(u'Insert a renderer at given index.')], HRESULT, 'InsertRenderer',
              ( ['in'], POINTER(ITinRenderer), 'pRenderer' ),
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Remove a renderer from the group.')], HRESULT, 'DeleteRenderer',
              ( ['in'], POINTER(ITinRenderer), 'pRenderer' )),
    COMMETHOD([helpstring(u'Remove all the renderers from the group.')], HRESULT, 'ClearRenderers'),
    COMMETHOD(['propget', helpstring(u'The primary display field.')], HRESULT, 'DisplayField',
              ( ['retval', 'out'], POINTER(BSTR), 'pFieldName' )),
    COMMETHOD(['propput', helpstring(u'The primary display field.')], HRESULT, 'DisplayField',
              ( ['in'], BSTR, 'pFieldName' )),
    COMMETHOD(['propget', helpstring(u'Indicates if symbols are scaled for this layer.')], HRESULT, 'ScaleSymbols',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbScale' )),
    COMMETHOD(['propput', helpstring(u'Indicates if symbols are scaled for this layer.')], HRESULT, 'ScaleSymbols',
              ( ['in'], VARIANT_BOOL, 'pbScale' )),
    COMMETHOD(['propget', helpstring(u'Indicates the current resolution.')], HRESULT, 'CurrentResolution',
              ( ['retval', 'out'], POINTER(c_double), 'pResolution' )),
    COMMETHOD(['propget', helpstring(u'Indicates if TOC should display resolution.')], HRESULT, 'ShowResolution',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbShow' )),
    COMMETHOD(['propput', helpstring(u'Indicates if TOC should display resolution.')], HRESULT, 'ShowResolution',
              ( ['in'], VARIANT_BOOL, 'pbShow' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether or not to draw file extent.')], HRESULT, 'ShowFileExtent',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbShow' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether or not to draw file extent.')], HRESULT, 'ShowFileExtent',
              ( ['in'], VARIANT_BOOL, 'pbShow' )),
    COMMETHOD(['propget', helpstring(u'The symbol for drawing file extent.')], HRESULT, 'FileExtentSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol)), 'ppSymbol' )),
    COMMETHOD(['propputref', helpstring(u'The symbol for drawing file extent.')], HRESULT, 'FileExtentSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol), 'ppSymbol' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether or not to display file ame.')], HRESULT, 'ShowFileName',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbShow' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether or not to display file ame.')], HRESULT, 'ShowFileName',
              ( ['in'], VARIANT_BOOL, 'pbShow' )),
    COMMETHOD(['propget', helpstring(u'The symbol for display file name.')], HRESULT, 'FileNameSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol)), 'ppSymbol' )),
    COMMETHOD(['propputref', helpstring(u'The symbol for display file name.')], HRESULT, 'FileNameSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol), 'ppSymbol' )),
    COMMETHOD(['propget', helpstring(u'Indicates the point count per centimeter on screen.')], HRESULT, 'PointCountPerCentimeter',
              ( ['retval', 'out'], POINTER(c_int), 'pPointBudget' )),
    COMMETHOD(['propput', helpstring(u'Indicates the point count per centimeter on screen.')], HRESULT, 'PointCountPerCentimeter',
              ( ['in'], c_int, 'pPointBudget' )),
    COMMETHOD(['propget', helpstring(u'Indicates the point budget.')], HRESULT, 'PointBudget',
              ( ['retval', 'out'], POINTER(c_int), 'pPointBudget' )),
    COMMETHOD(['propput', helpstring(u'Indicates the point budget.')], HRESULT, 'PointBudget',
              ( ['in'], c_int, 'pPointBudget' )),
    COMMETHOD(['propget', helpstring(u'Indicates the resolution that analysis tools will be enabled.')], HRESULT, 'AnalysisToolsResolution',
              ( ['retval', 'out'], POINTER(c_double), 'pAnalysisResolution' )),
    COMMETHOD(['propput', helpstring(u'Indicates the resolution that analysis tools will be enabled.')], HRESULT, 'AnalysisToolsResolution',
              ( ['in'], c_double, 'pAnalysisResolution' )),
    COMMETHOD(['propget', helpstring(u'Indicates if CurrentSurface should be maintained even if layer is invisible, or there is no surface renderer.')], HRESULT, 'MaintainCurrentSurface',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbMaintainSurface' )),
    COMMETHOD(['propput', helpstring(u'Indicates if CurrentSurface should be maintained even if layer is invisible, or there is no surface renderer.')], HRESULT, 'MaintainCurrentSurface',
              ( ['in'], VARIANT_BOOL, 'pbMaintainSurface' )),
    COMMETHOD(['propget', helpstring(u'Indicates if map scale should be used to control full resolution display.')], HRESULT, 'UseFullResolutionScale',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbUseScale' )),
    COMMETHOD(['propput', helpstring(u'Indicates if map scale should be used to control full resolution display.')], HRESULT, 'UseFullResolutionScale',
              ( ['in'], VARIANT_BOOL, 'pbUseScale' )),
    COMMETHOD(['propget', helpstring(u'Indicates the map scale at which data may be displayed at full resolution.')], HRESULT, 'FullResolutionScale',
              ( ['retval', 'out'], POINTER(c_double), 'pScale' )),
    COMMETHOD(['propput', helpstring(u'Indicates the map scale at which data may be displayed at full resolution.')], HRESULT, 'FullResolutionScale',
              ( ['in'], c_double, 'pScale' )),
]
################################################################
## code template for ILasDatasetLayer implementation
##class ILasDatasetLayer_Impl(object):
##    def _get(self):
##        u'The primary display field.'
##        #return pFieldName
##    def _set(self, pFieldName):
##        u'The primary display field.'
##    DisplayField = property(_get, _set, doc = _set.__doc__)
##
##    def DeleteRenderer(self, pRenderer):
##        u'Remove a renderer from the group.'
##        #return 
##
##    @property
##    def CurrentResolution(self):
##        u'Indicates the current resolution.'
##        #return pResolution
##
##    def FileExtentSymbol(self, ppSymbol):
##        u'The symbol for drawing file extent.'
##        #return 
##
##    def _get(self):
##        u'Indicates the point count per centimeter on screen.'
##        #return pPointBudget
##    def _set(self, pPointBudget):
##        u'Indicates the point count per centimeter on screen.'
##    PointCountPerCentimeter = property(_get, _set, doc = _set.__doc__)
##
##    def GetCurrentSurface(self):
##        u'Gets current surface.'
##        #return ppSurface
##
##    def InsertRenderer(self, pRenderer, Index):
##        u'Insert a renderer at given index.'
##        #return 
##
##    def _get(self):
##        u'Indicates if TOC should display resolution.'
##        #return pbShow
##    def _set(self, pbShow):
##        u'Indicates if TOC should display resolution.'
##    ShowResolution = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether or not to display file ame.'
##        #return pbShow
##    def _set(self, pbShow):
##        u'Indicates whether or not to display file ame.'
##    ShowFileName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates the resolution that analysis tools will be enabled.'
##        #return pAnalysisResolution
##    def _set(self, pAnalysisResolution):
##        u'Indicates the resolution that analysis tools will be enabled.'
##    AnalysisToolsResolution = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether or not to draw file extent.'
##        #return pbShow
##    def _set(self, pbShow):
##        u'Indicates whether or not to draw file extent.'
##    ShowFileExtent = property(_get, _set, doc = _set.__doc__)
##
##    def GetRenderer(self, Index):
##        u'Gets the nth renderer.'
##        #return ppRenderer
##
##    def _get(self):
##        u'Indicates the map scale at which data may be displayed at full resolution.'
##        #return pScale
##    def _set(self, pScale):
##        u'Indicates the map scale at which data may be displayed at full resolution.'
##    FullResolutionScale = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def RendererCount(self):
##        u'The number of renderers.'
##        #return pRendererCount
##
##    def _get(self):
##        u'Indicates if CurrentSurface should be maintained even if layer is invisible, or there is no surface renderer.'
##        #return pbMaintainSurface
##    def _set(self, pbMaintainSurface):
##        u'Indicates if CurrentSurface should be maintained even if layer is invisible, or there is no surface renderer.'
##    MaintainCurrentSurface = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if symbols are scaled for this layer.'
##        #return pbScale
##    def _set(self, pbScale):
##        u'Indicates if symbols are scaled for this layer.'
##    ScaleSymbols = property(_get, _set, doc = _set.__doc__)
##
##    def Filter(self, ppFilter):
##        u'The display filter.'
##        #return 
##
##    def _get(self):
##        u'Indicates if map scale should be used to control full resolution display.'
##        #return pbUseScale
##    def _set(self, pbUseScale):
##        u'Indicates if map scale should be used to control full resolution display.'
##    UseFullResolutionScale = property(_get, _set, doc = _set.__doc__)
##
##    def ClearRenderers(self):
##        u'Remove all the renderers from the group.'
##        #return 
##
##    def _get(self):
##        u'Indicates the point budget.'
##        #return pPointBudget
##    def _set(self, pPointBudget):
##        u'Indicates the point budget.'
##    PointBudget = property(_get, _set, doc = _set.__doc__)
##
##    def Dataset(self, ppLasDataset):
##        u'The LasDataset used to define the layer.'
##        #return 
##
##    def AddRenderer(self, pRenderer):
##        u'Add a renderer to the end of the group.'
##        #return 
##
##    def FileNameSymbol(self, ppSymbol):
##        u'The symbol for display file name.'
##        #return 
##

class ITinContourRenderer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control contour rendering.'
    _iid_ = GUID('{8A4EEA7B-A3F7-4651-8BBD-B6BF08B11A19}')
    _idlflags_ = ['oleautomation']
ITinContourRenderer._methods_ = [
    COMMETHOD(['propget', helpstring(u'The reference contour height.')], HRESULT, 'referenceContourHeight',
              ( ['retval', 'out'], POINTER(c_double), 'Height' )),
    COMMETHOD(['propput', helpstring(u'The reference contour height.')], HRESULT, 'referenceContourHeight',
              ( ['in'], c_double, 'Height' )),
    COMMETHOD(['propget', helpstring(u'The contour interval.')], HRESULT, 'contourInterval',
              ( ['retval', 'out'], POINTER(c_double), 'Interval' )),
    COMMETHOD(['propput', helpstring(u'The contour interval.')], HRESULT, 'contourInterval',
              ( ['in'], c_double, 'Interval' )),
    COMMETHOD(['propget', helpstring(u'The index contour factor.')], HRESULT, 'indexContourFactor',
              ( ['retval', 'out'], POINTER(c_int), 'factor' )),
    COMMETHOD(['propput', helpstring(u'The index contour factor.')], HRESULT, 'indexContourFactor',
              ( ['in'], c_int, 'factor' )),
    COMMETHOD(['propget', helpstring(u'The symbol used to render the contour.')], HRESULT, 'ContourSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol)), 'Symbol' )),
    COMMETHOD(['propputref', helpstring(u'The symbol used to render the contour.')], HRESULT, 'ContourSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'The descriptive symbol text.')], HRESULT, 'ContourLabel',
              ( ['retval', 'out'], POINTER(BSTR), 'Label' )),
    COMMETHOD(['propput', helpstring(u'The descriptive symbol text.')], HRESULT, 'ContourLabel',
              ( ['in'], BSTR, 'Label' )),
    COMMETHOD(['propget', helpstring(u'The description for the label.')], HRESULT, 'ContourDescription',
              ( ['retval', 'out'], POINTER(BSTR), 'Text' )),
    COMMETHOD(['propput', helpstring(u'The description for the label.')], HRESULT, 'ContourDescription',
              ( ['in'], BSTR, 'Text' )),
    COMMETHOD(['propget', helpstring(u'The symbol used to render index contour.')], HRESULT, 'IndexContourSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol)), 'Symbol' )),
    COMMETHOD(['propputref', helpstring(u'The symbol used to render index contour.')], HRESULT, 'IndexContourSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'The label for the index contour.')], HRESULT, 'IndexContourLabel',
              ( ['retval', 'out'], POINTER(BSTR), 'Label' )),
    COMMETHOD(['propput', helpstring(u'The label for the index contour.')], HRESULT, 'IndexContourLabel',
              ( ['in'], BSTR, 'Label' )),
    COMMETHOD(['propget', helpstring(u'The description for the index contour.')], HRESULT, 'IndexContourDescription',
              ( ['retval', 'out'], POINTER(BSTR), 'Text' )),
    COMMETHOD(['propput', helpstring(u'The description for the index contour.')], HRESULT, 'IndexContourDescription',
              ( ['in'], BSTR, 'Text' )),
]
################################################################
## code template for ITinContourRenderer implementation
##class ITinContourRenderer_Impl(object):
##    def _get(self):
##        u'The descriptive symbol text.'
##        #return Label
##    def _set(self, Label):
##        u'The descriptive symbol text.'
##    ContourLabel = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The label for the index contour.'
##        #return Label
##    def _set(self, Label):
##        u'The label for the index contour.'
##    IndexContourLabel = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The description for the label.'
##        #return Text
##    def _set(self, Text):
##        u'The description for the label.'
##    ContourDescription = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The contour interval.'
##        #return Interval
##    def _set(self, Interval):
##        u'The contour interval.'
##    contourInterval = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The reference contour height.'
##        #return Height
##    def _set(self, Height):
##        u'The reference contour height.'
##    referenceContourHeight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The description for the index contour.'
##        #return Text
##    def _set(self, Text):
##        u'The description for the index contour.'
##    IndexContourDescription = property(_get, _set, doc = _set.__doc__)
##
##    def IndexContourSymbol(self, Symbol):
##        u'The symbol used to render index contour.'
##        #return 
##
##    def _get(self):
##        u'The index contour factor.'
##        #return factor
##    def _set(self, factor):
##        u'The index contour factor.'
##    indexContourFactor = property(_get, _set, doc = _set.__doc__)
##
##    def ContourSymbol(self, Symbol):
##        u'The symbol used to render the contour.'
##        #return 
##


# values for enumeration 'esriMultiAreaType'
esriNoneMultiArea = 0
esriStackedMultiArea = 1
esriStacked100MultiArea = 2
esriMultiAreaType = c_int # enum
class ISimpleMapGridBorder(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the members that control the simple map grid border.'
    _iid_ = GUID('{AC81ECFA-9EE4-11D2-AADF-000000000000}')
    _idlflags_ = ['oleautomation']
ISimpleMapGridBorder._methods_ = [
    COMMETHOD(['propget', helpstring(u'The line symbol used to draw the border.')], HRESULT, 'LineSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ILineSymbol)), 'Symbol' )),
    COMMETHOD(['propput', helpstring(u'The line symbol used to draw the border.')], HRESULT, 'LineSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ILineSymbol), 'Symbol' )),
]
################################################################
## code template for ISimpleMapGridBorder implementation
##class ISimpleMapGridBorder_Impl(object):
##    def _get(self):
##        u'The line symbol used to draw the border.'
##        #return Symbol
##    def _set(self, Symbol):
##        u'The line symbol used to draw the border.'
##    LineSymbol = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'enumTriggerType'
enumTriggerTypeUnspecified = 0
enumAttributeTrigger = 1
enumLocationTrigger = 2
enumDualTrigger = 3
enumAlwaysTrigger = 4
enumTriggerType = c_int # enum

# values for enumeration 'esriDataGraphTSymbolType'
esriDataGraphTSymbolRectangle = 0
esriDataGraphTSymbolCircle = 1
esriDataGraphTSymbolTriangle = 2
esriDataGraphTSymbolDownTriangle = 3
esriDataGraphTSymbolCross = 4
esriDataGraphTSymbolDiagCross = 5
esriDataGraphTSymbolStar = 6
esriDataGraphTSymbolDiamond = 7
esriDataGraphTSymbolSmallDot = 8
esriDataGraphTSymbolNothing = 9
esriDataGraphTSymbolLeftTriangle = 10
esriDataGraphTSymbolRightTriangle = 11
esriDataGraphTSymbolType = c_int # enum
IDimensionGraphic._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The begin dimension point.')], HRESULT, 'DimensionShape',
              ( ['in'], POINTER(IDimensionShape), 'Shape' )),
    COMMETHOD(['propget', helpstring(u'The begin dimension point.')], HRESULT, 'DimensionShape',
              ( ['retval', 'out'], POINTER(POINTER(IDimensionShape)), 'Shape' )),
    COMMETHOD(['propget', helpstring(u'The dimension style.')], HRESULT, 'Style',
              ( ['retval', 'out'], POINTER(POINTER(IDimensionStyle)), 'Style' )),
    COMMETHOD(['propputref', helpstring(u'The dimension style.')], HRESULT, 'Style',
              ( ['in'], POINTER(IDimensionStyle), 'Style' )),
    COMMETHOD([helpstring(u'Draws the dimension style.')], HRESULT, 'Draw',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE, 'hDC' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ITransformation), 'transformation' )),
    COMMETHOD([helpstring(u'The boundary of the dimension style.')], HRESULT, 'QueryBoundary',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE, 'hDC' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ITransformation), 'transformation' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPolygon), 'Boundary' )),
    COMMETHOD(['propget', helpstring(u'The length of the dimension graphic.')], HRESULT, 'Length',
              ( ['retval', 'out'], POINTER(c_double), 'Length' )),
    COMMETHOD(['propget', helpstring(u'The custom length of the dimension graphic.')], HRESULT, 'CustomLength',
              ( ['retval', 'out'], POINTER(c_double), 'Length' )),
    COMMETHOD(['propput', helpstring(u'The custom length of the dimension graphic.')], HRESULT, 'CustomLength',
              ( ['in'], c_double, 'Length' )),
    COMMETHOD(['propget', helpstring(u'Indicates if a custom length is displayed for the dimsnion graphic.')], HRESULT, 'UseCustomLength',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Length' )),
    COMMETHOD(['propput', helpstring(u'Indicates if a custom length is displayed for the dimsnion graphic.')], HRESULT, 'UseCustomLength',
              ( ['in'], VARIANT_BOOL, 'Length' )),
    COMMETHOD([helpstring(u'The dimension graphic mask.')], HRESULT, 'GetMask',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE, 'hDC' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ITransformation), 'transformation' ),
              ( ['in'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry)), 'Mask' )),
    COMMETHOD([helpstring(u'Updates the dimension geometries for the dimension graphic.')], HRESULT, 'UpdateShape',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE, 'hDC' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ITransformation), 'transformation' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeature), 'pFeature' )),
    COMMETHOD(['propget', helpstring(u'The native units of the dimension graphic.')], HRESULT, 'NativeUnits',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits), 'Units' )),
    COMMETHOD(['propput', helpstring(u'The native units of the dimension graphic.')], HRESULT, 'NativeUnits',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits, 'Units' )),
    COMMETHOD([helpstring(u'The default location of the dimension text placement.')], HRESULT, 'GetDefaultTextPoint',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint)), 'point' )),
    COMMETHOD(['propget', helpstring(u'The native transformation for the dimension graphic.')], HRESULT, 'NativeTransformation',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ITransformation)), 'transformation' )),
    COMMETHOD(['propputref', helpstring(u'The native transformation for the dimension graphic.')], HRESULT, 'NativeTransformation',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ITransformation), 'transformation' )),
]
################################################################
## code template for IDimensionGraphic implementation
##class IDimensionGraphic_Impl(object):
##    def Style(self, Style):
##        u'The dimension style.'
##        #return 
##
##    def QueryBoundary(self, hDC, transformation, Boundary):
##        u'The boundary of the dimension style.'
##        #return 
##
##    @property
##    def DimensionShape(self, Shape):
##        u'The begin dimension point.'
##        #return 
##
##    def _get(self):
##        u'Indicates if a custom length is displayed for the dimsnion graphic.'
##        #return Length
##    def _set(self, Length):
##        u'Indicates if a custom length is displayed for the dimsnion graphic.'
##    UseCustomLength = property(_get, _set, doc = _set.__doc__)
##
##    def Draw(self, hDC, transformation):
##        u'Draws the dimension style.'
##        #return 
##
##    def UpdateShape(self, hDC, transformation, pFeature):
##        u'Updates the dimension geometries for the dimension graphic.'
##        #return 
##
##    @property
##    def Length(self):
##        u'The length of the dimension graphic.'
##        #return Length
##
##    def GetMask(self, hDC, transformation, Mask):
##        u'The dimension graphic mask.'
##        #return 
##
##    def NativeTransformation(self, transformation):
##        u'The native transformation for the dimension graphic.'
##        #return 
##
##    def _get(self):
##        u'The native units of the dimension graphic.'
##        #return Units
##    def _set(self, Units):
##        u'The native units of the dimension graphic.'
##    NativeUnits = property(_get, _set, doc = _set.__doc__)
##
##    def GetDefaultTextPoint(self):
##        u'The default location of the dimension text placement.'
##        #return point
##
##    def _get(self):
##        u'The custom length of the dimension graphic.'
##        #return Length
##    def _set(self, Length):
##        u'The custom length of the dimension graphic.'
##    CustomLength = property(_get, _set, doc = _set.__doc__)
##

IBackgroundTabStyle._methods_ = [
    COMMETHOD(['propget', helpstring(u'The type of the background tab style.')], HRESULT, 'BackgroundType',
              ( ['retval', 'out'], POINTER(esriBackgroundTabType), 'tabType' )),
    COMMETHOD(['propput', helpstring(u'The type of the background tab style.')], HRESULT, 'BackgroundType',
              ( ['in'], esriBackgroundTabType, 'tabType' )),
]
################################################################
## code template for IBackgroundTabStyle implementation
##class IBackgroundTabStyle_Impl(object):
##    def _get(self):
##        u'The type of the background tab style.'
##        #return tabType
##    def _set(self, tabType):
##        u'The type of the background tab style.'
##    BackgroundType = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'enumActionCategory'
enumLayer = 0
enumServer = 1
enumService = 2
enumRealtimeLayer = 3
enumNoCategory = 4
enumServerMasterCollection = 5
enumServerDSDCollection = 6
enumLayerMasterCollection = 7
enumLayerSubCollection = 8
enumActionCategory = c_int # enum
ITableDataSourceDescription._methods_ = [
    COMMETHOD(['propget', helpstring(u'Name of the Table.')], HRESULT, 'TableName',
              ( ['retval', 'out'], POINTER(BSTR), 'pTableName' )),
    COMMETHOD(['propput', helpstring(u'Name of the Table.')], HRESULT, 'TableName',
              ( ['in'], BSTR, 'pTableName' )),
    COMMETHOD(['propget', helpstring(u'Name of the GeoDatabase version.')], HRESULT, 'VersionName',
              ( ['retval', 'out'], POINTER(BSTR), 'pVersionName' )),
    COMMETHOD(['propput', helpstring(u'Name of the GeoDatabase version.')], HRESULT, 'VersionName',
              ( ['in'], BSTR, 'pVersionName' )),
]
################################################################
## code template for ITableDataSourceDescription implementation
##class ITableDataSourceDescription_Impl(object):
##    def _get(self):
##        u'Name of the Table.'
##        #return pTableName
##    def _set(self, pTableName):
##        u'Name of the Table.'
##    TableName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Name of the GeoDatabase version.'
##        #return pVersionName
##    def _set(self, pVersionName):
##        u'Name of the GeoDatabase version.'
##    VersionName = property(_get, _set, doc = _set.__doc__)
##

class MapLayerInfos(CoClass):
    u'A collection of Map Layer Info objects.'
    _reg_clsid_ = GUID('{F549491E-3FA9-4773-AA7C-A99A2D317C55}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
MapLayerInfos._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMapLayerInfos, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

class GroupLayerFactory(CoClass):
    u'A factory for creating group layers.'
    _reg_clsid_ = GUID('{EDAD6646-1810-11D1-86AE-0000F8751720}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
GroupLayerFactory._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILayerFactory]

class ICacheDescriptionInfo2(ICacheDescriptionInfo):
    _case_insensitive_ = True
    u'Provides access to members that provide the cache description info.'
    _iid_ = GUID('{29E8A1DD-6B00-43DB-AFCC-62DCE8B64091}')
    _idlflags_ = ['oleautomation']
ICacheDescriptionInfo2._methods_ = [
    COMMETHOD(['propget', helpstring(u'CacheStorageInfo object.')], HRESULT, 'CacheStorageInfo',
              ( ['retval', 'out'], POINTER(POINTER(ICacheStorageInfo)), 'ppCacheStorageInfo' )),
    COMMETHOD(['propputref', helpstring(u'CacheStorageInfo object.')], HRESULT, 'CacheStorageInfo',
              ( [], POINTER(ICacheStorageInfo), 'ppCacheStorageInfo' )),
]
################################################################
## code template for ICacheDescriptionInfo2 implementation
##class ICacheDescriptionInfo2_Impl(object):
##    def CacheStorageInfo(self, ppCacheStorageInfo):
##        u'CacheStorageInfo object.'
##        #return 
##

class ITileCacheStats(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that provide the map cache info.'
    _iid_ = GUID('{D420789A-9089-4EF6-A2AE-FD59EFA7A5F3}')
    _idlflags_ = ['oleautomation', 'hidden']
ITileCacheStats._methods_ = [
    COMMETHOD([helpstring(u'Valid tile range at any level.')], HRESULT, 'GetTileRangeAtLevel',
              ( ['in'], c_int, 'Level' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'pGeometry' ),
              ( ['out'], POINTER(c_int), 'tileXMin' ),
              ( ['out'], POINTER(c_int), 'tileYMin' ),
              ( ['out'], POINTER(c_int), 'tileXMax' ),
              ( ['out'], POINTER(c_int), 'tileYMax' )),
    COMMETHOD([helpstring(u'Tile sizes for a given tile or a supertile.')], HRESULT, 'GetTileSizes',
              ( ['in'], c_int, 'Level' ),
              ( ['in'], c_int, 'Row' ),
              ( ['in'], c_int, 'Column' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' ),
              ( ['out'], POINTER(c_int), 'tileCount' ),
              ( ['out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'pSizes' )),
]
################################################################
## code template for ITileCacheStats implementation
##class ITileCacheStats_Impl(object):
##    def GetTileRangeAtLevel(self, Level, pGeometry):
##        u'Valid tile range at any level.'
##        #return tileXMin, tileYMin, tileXMax, tileYMax
##
##    def GetTileSizes(self, Level, Row, Column, pTrackCancel):
##        u'Tile sizes for a given tile or a supertile.'
##        #return tileCount, pSizes
##

class ICoverageAnnotationLayer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a coverage annotation layer.'
    _iid_ = GUID('{0C22A4C7-DAFD-11D2-9F46-00C04F6BC78E}')
    _idlflags_ = ['oleautomation']
ICoverageAnnotationLayer._methods_ = [
    COMMETHOD(['propget', helpstring(u'The number of symbols used by the layer.')], HRESULT, 'SymbolCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The symbol number at the specified index.')], HRESULT, 'SymbolNumber',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(c_int), 'SymbolNumber' )),
    COMMETHOD(['propget', helpstring(u'The font for the specified symbol number.')], HRESULT, 'Font',
              ( ['in'], c_int, 'SymbolNumber' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IFontDisp)), 'Font' )),
    COMMETHOD(['propputref', helpstring(u'The font for the specified symbol number.')], HRESULT, 'Font',
              ( ['in'], c_int, 'SymbolNumber' ),
              ( ['in'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IFontDisp), 'Font' )),
    COMMETHOD(['propget', helpstring(u'The font color for the specified symbol number.')], HRESULT, 'FontColor',
              ( ['in'], c_int, 'SymbolNumber' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propputref', helpstring(u'The font color for the specified symbol number.')], HRESULT, 'FontColor',
              ( ['in'], c_int, 'SymbolNumber' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'The text symbol for the specified symbol number.')], HRESULT, 'TextSymbol',
              ( ['in'], c_int, 'SymbolNumber' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol)), 'Symbol' )),
    COMMETHOD(['propputref', helpstring(u'The text symbol for the specified symbol number.')], HRESULT, 'TextSymbol',
              ( ['in'], c_int, 'SymbolNumber' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'The number of levels in the layer.')], HRESULT, 'LevelCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The level number at the specified index.')], HRESULT, 'LevelNumber',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(c_int), 'pLevelNumber' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the level at the specified level number is visible.')], HRESULT, 'LevelVisibility',
              ( ['in'], c_int, 'LevelNumber' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Visible' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the level at the specified level number is visible.')], HRESULT, 'LevelVisibility',
              ( ['in'], c_int, 'LevelNumber' ),
              ( ['in'], VARIANT_BOOL, 'Visible' )),
    COMMETHOD(['propget', helpstring(u'The line symbol for the arrow.')], HRESULT, 'ArrowSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ILineSymbol)), 'Symbol' )),
    COMMETHOD(['propputref', helpstring(u'The line symbol for the arrow.')], HRESULT, 'ArrowSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ILineSymbol), 'Symbol' )),
    COMMETHOD([helpstring(u'Generates graphic elements from the annotation features.  The optional envelope specifies a bounding box.  The display is used for converting from map units.')], HRESULT, 'GenerateGraphics',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'box' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['retval', 'out'], POINTER(POINTER(IEnumElement)), 'Elements' )),
    COMMETHOD([helpstring(u'Starts a graphics generation process from the annotation features.  The optional envelope specifies a bounding box.  The display is used for converting from map units.')], HRESULT, 'StartGeneratingGraphics',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'box' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], VARIANT_BOOL, 'withAttributes' )),
    COMMETHOD(['propget', helpstring(u'Generates the next graphic element in the graphics generation loop.  Returns a NULL element after the last annotation feature has been read.  Call only after StartGeneratingGraphics.')], HRESULT, 'NextGraphic',
              ( ['retval', 'out'], POINTER(POINTER(IElement)), 'Element' )),
    COMMETHOD([helpstring(u'Generates the next feature and graphic element in the graphics generation loop.  Returns a NULL feature and element after the last annotation feature has been read.  Call only after StartGeneratingGraphics.')], HRESULT, 'NextFeatureAndGraphic',
              ( ['out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeature)), 'Feature' ),
              ( ['out'], POINTER(POINTER(IElement)), 'Element' )),
]
################################################################
## code template for ICoverageAnnotationLayer implementation
##class ICoverageAnnotationLayer_Impl(object):
##    @property
##    def SymbolCount(self):
##        u'The number of symbols used by the layer.'
##        #return Count
##
##    def Font(self, SymbolNumber, Font):
##        u'The font for the specified symbol number.'
##        #return 
##
##    @property
##    def NextGraphic(self):
##        u'Generates the next graphic element in the graphics generation loop.  Returns a NULL element after the last annotation feature has been read.  Call only after StartGeneratingGraphics.'
##        #return Element
##
##    def _get(self, LevelNumber):
##        u'Indicates if the level at the specified level number is visible.'
##        #return Visible
##    def _set(self, LevelNumber, Visible):
##        u'Indicates if the level at the specified level number is visible.'
##    LevelVisibility = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def LevelNumber(self, Index):
##        u'The level number at the specified index.'
##        #return pLevelNumber
##
##    @property
##    def LevelCount(self):
##        u'The number of levels in the layer.'
##        #return Count
##
##    def TextSymbol(self, SymbolNumber, Symbol):
##        u'The text symbol for the specified symbol number.'
##        #return 
##
##    def ArrowSymbol(self, Symbol):
##        u'The line symbol for the arrow.'
##        #return 
##
##    def FontColor(self, SymbolNumber, Color):
##        u'The font color for the specified symbol number.'
##        #return 
##
##    @property
##    def SymbolNumber(self, Index):
##        u'The symbol number at the specified index.'
##        #return SymbolNumber
##
##    def StartGeneratingGraphics(self, box, Display, withAttributes):
##        u'Starts a graphics generation process from the annotation features.  The optional envelope specifies a bounding box.  The display is used for converting from map units.'
##        #return 
##
##    def NextFeatureAndGraphic(self):
##        u'Generates the next feature and graphic element in the graphics generation loop.  Returns a NULL feature and element after the last annotation feature has been read.  Call only after StartGeneratingGraphics.'
##        #return Feature, Element
##
##    def GenerateGraphics(self, box, Display):
##        u'Generates graphic elements from the annotation features.  The optional envelope specifies a bounding box.  The display is used for converting from map units.'
##        #return Elements
##


# values for enumeration 'esriMultiBarType'
esriNoneMultiBar = 0
esriSideMultiBar = 1
esriStackedMultiBar = 2
esriStacked100MultiBar = 3
esriSideAllMultiBar = 4
esriSelfStackMultiBar = 5
esriMultiBarType = c_int # enum
class IPushPin(ISpatialBookmark):
    _case_insensitive_ = True
    u'Provides access to members that control a push pin.'
    _iid_ = GUID('{EE53528C-41C9-11D1-880A-080009EC732A}')
    _idlflags_ = ['oleautomation']
IPushPin._methods_ = [
    COMMETHOD(['propget', helpstring(u'The location of the pin.')], HRESULT, 'Location',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint)), 'point' )),
    COMMETHOD(['propputref', helpstring(u'The location of the pin.')], HRESULT, 'Location',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'point' )),
    COMMETHOD(['propget', helpstring(u'The marker symbol used to draw the push pin.')], HRESULT, 'MarkerSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IMarkerSymbol)), 'Symbol' )),
    COMMETHOD(['propputref', helpstring(u'The marker symbol used to draw the push pin.')], HRESULT, 'MarkerSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IMarkerSymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'The text symbol used to draw the push pin.')], HRESULT, 'TextSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol)), 'Symbol' )),
    COMMETHOD(['propputref', helpstring(u'The text symbol used to draw the push pin.')], HRESULT, 'TextSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'The maximum label width in points (1/72 inch).')], HRESULT, 'MaxLabelWidthPts',
              ( ['retval', 'out'], POINTER(c_double), 'Width' )),
    COMMETHOD(['propput', helpstring(u'The maximum label width in points (1/72 inch).')], HRESULT, 'MaxLabelWidthPts',
              ( ['in'], c_double, 'Width' )),
    COMMETHOD([helpstring(u'Flashes the pin on the map display.')], HRESULT, 'Flash',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' )),
    COMMETHOD([helpstring(u'Draws the pin on the map display.')], HRESULT, 'Draw',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' )),
]
################################################################
## code template for IPushPin implementation
##class IPushPin_Impl(object):
##    def Draw(self, Display):
##        u'Draws the pin on the map display.'
##        #return 
##
##    def Flash(self, Display):
##        u'Flashes the pin on the map display.'
##        #return 
##
##    def _get(self):
##        u'The maximum label width in points (1/72 inch).'
##        #return Width
##    def _set(self, Width):
##        u'The maximum label width in points (1/72 inch).'
##    MaxLabelWidthPts = property(_get, _set, doc = _set.__doc__)
##
##    def MarkerSymbol(self, Symbol):
##        u'The marker symbol used to draw the push pin.'
##        #return 
##
##    def Location(self, point):
##        u'The location of the pin.'
##        #return 
##
##    def TextSymbol(self, Symbol):
##        u'The text symbol used to draw the push pin.'
##        #return 
##

class ICacheInfo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that provide the map cache info.'
    _iid_ = GUID('{A8ED7FA5-572B-4668-A6CC-F3EC9E6E06A8}')
    _idlflags_ = ['oleautomation']
ICacheInfo._methods_ = [
    COMMETHOD(['propget', helpstring(u'The tile cache info object.')], HRESULT, 'TileCacheInfo',
              ( ['retval', 'out'], POINTER(POINTER(ITileCacheInfo)), 'ppTileCacheInfo' )),
    COMMETHOD(['propputref', helpstring(u'The tile cache info object.')], HRESULT, 'TileCacheInfo',
              ( ['in'], POINTER(ITileCacheInfo), 'ppTileCacheInfo' )),
    COMMETHOD(['propget', helpstring(u'The cache tile image info object.')], HRESULT, 'TileImageInfo',
              ( ['retval', 'out'], POINTER(POINTER(ITileImageInfo)), 'ppTileImageInfo' )),
    COMMETHOD(['propputref', helpstring(u'The cache tile image info object.')], HRESULT, 'TileImageInfo',
              ( ['in'], POINTER(ITileImageInfo), 'ppTileImageInfo' )),
]
################################################################
## code template for ICacheInfo implementation
##class ICacheInfo_Impl(object):
##    def TileImageInfo(self, ppTileImageInfo):
##        u'The cache tile image info object.'
##        #return 
##
##    def TileCacheInfo(self, ppTileCacheInfo):
##        u'The tile cache info object.'
##        #return 
##

class IReferenceSystem(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to basic properties and methods provided by every reference system (grids, graticules, etc).'
    _iid_ = GUID('{53B979CB-9576-40DD-8B7B-F445E5B1BAC9}')
    _idlflags_ = ['oleautomation']
IReferenceSystem._methods_ = [
    COMMETHOD(['propget', helpstring(u'The name of the map grid.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'gridName' )),
    COMMETHOD(['propput', helpstring(u'The name of the map grid.')], HRESULT, 'Name',
              ( ['in'], BSTR, 'gridName' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the map grid is visible.')], HRESULT, 'Visible',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Visible' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the map grid is visible.')], HRESULT, 'Visible',
              ( ['in'], VARIANT_BOOL, 'Visible' )),
    COMMETHOD(['propget', helpstring(u'The format for reference labels.')], HRESULT, 'LabelFormat',
              ( ['retval', 'out'], POINTER(POINTER(IGridLabel)), 'Format' )),
    COMMETHOD(['propput', helpstring(u'The format for reference labels.')], HRESULT, 'LabelFormat',
              ( ['in'], POINTER(IGridLabel), 'Format' )),
    COMMETHOD([helpstring(u'Sets the properties of the map grid to default values.')], HRESULT, 'SetDefaults',
              ( ['in'], POINTER(IMapFrame), 'pMapFrame' )),
    COMMETHOD([helpstring(u'Generates graphic elements corresponding to the grid lines and stores them in the specified graphics container.')], HRESULT, 'GenerateGraphics',
              ( ['in'], POINTER(IMapFrame), 'pMapFrame' ),
              ( ['in'], POINTER(IGraphicsContainer), 'GraphicsContainer' )),
    COMMETHOD([helpstring(u'Prepares the map grid for output to a device.')], HRESULT, 'PrepareForOutput',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE, 'hDC' ),
              ( ['in'], c_int, 'Dpi' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.tagRECT), 'pixelBounds' ),
              ( ['in'], POINTER(IMapFrame), 'pMapFrame' )),
    COMMETHOD([helpstring(u'Draws the map grid for a map frame to the given display.')], HRESULT, 'Draw',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], POINTER(IMapFrame), 'pMapFrame' )),
    COMMETHOD([helpstring(u'The extent of the reference system in page space.')], HRESULT, 'QueryBounds',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'pDisplay' ),
              ( ['in'], POINTER(IMapFrame), 'pMapFrame' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'Bounds' )),
    COMMETHOD([helpstring(u'Called when the extent of the parent map frame changes.')], HRESULT, 'BoundsChanged'),
]
################################################################
## code template for IReferenceSystem implementation
##class IReferenceSystem_Impl(object):
##    def Draw(self, Display, pMapFrame):
##        u'Draws the map grid for a map frame to the given display.'
##        #return 
##
##    def _get(self):
##        u'The format for reference labels.'
##        #return Format
##    def _set(self, Format):
##        u'The format for reference labels.'
##    LabelFormat = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The name of the map grid.'
##        #return gridName
##    def _set(self, gridName):
##        u'The name of the map grid.'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the map grid is visible.'
##        #return Visible
##    def _set(self, Visible):
##        u'Indicates if the map grid is visible.'
##    Visible = property(_get, _set, doc = _set.__doc__)
##
##    def PrepareForOutput(self, hDC, Dpi, pixelBounds, pMapFrame):
##        u'Prepares the map grid for output to a device.'
##        #return 
##
##    def BoundsChanged(self):
##        u'Called when the extent of the parent map frame changes.'
##        #return 
##
##    def QueryBounds(self, pDisplay, pMapFrame, Bounds):
##        u'The extent of the reference system in page space.'
##        #return 
##
##    def GenerateGraphics(self, pMapFrame, GraphicsContainer):
##        u'Generates graphic elements corresponding to the grid lines and stores them in the specified graphics container.'
##        #return 
##
##    def SetDefaults(self, pMapFrame):
##        u'Sets the properties of the map grid to default values.'
##        #return 
##

IMapGridBorder._methods_ = [
    COMMETHOD(['propget', helpstring(u'The display name for the map grid border.')], HRESULT, 'DisplayName',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propget', helpstring(u'The width of the map grid border in points.')], HRESULT, 'Width',
              ( ['retval', 'out'], POINTER(c_double), 'widthPts' )),
    COMMETHOD([helpstring(u'Draws the border to the specified display, using the frame bounds and the map bounds in page space.')], HRESULT, 'Draw',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'frameGeometry' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'mapGeometry' )),
]
################################################################
## code template for IMapGridBorder implementation
##class IMapGridBorder_Impl(object):
##    @property
##    def Width(self):
##        u'The width of the map grid border in points.'
##        #return widthPts
##
##    def Draw(self, Display, frameGeometry, mapGeometry):
##        u'Draws the border to the specified display, using the frame bounds and the map bounds in page space.'
##        #return 
##
##    @property
##    def DisplayName(self):
##        u'The display name for the map grid border.'
##        #return Name
##

ILayerMasking._methods_ = [
    COMMETHOD(['propput', helpstring(u'Indicates whether to use masking.')], HRESULT, 'UseMasking',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to use masking.')], HRESULT, 'UseMasking',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'The masks for a layer.')], HRESULT, 'MaskingLayers',
              ( ['in'], POINTER(ILayer), 'Layer' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISet), 'MaskingLayers' )),
    COMMETHOD(['propget', helpstring(u'The masks for a layer.')], HRESULT, 'MaskingLayers',
              ( ['in'], POINTER(ILayer), 'Layer' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISet)), 'MaskingLayers' )),
    COMMETHOD([helpstring(u'Clear masking layers on a layer.')], HRESULT, 'ClearMasking',
              ( ['in'], POINTER(ILayer), 'Layer' )),
    COMMETHOD(['propget', helpstring(u'The set of layers that are being masked.')], HRESULT, 'MaskedLayers',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISet)), 'Layers' )),
]
################################################################
## code template for ILayerMasking implementation
##class ILayerMasking_Impl(object):
##    def _get(self):
##        u'Indicates whether to use masking.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether to use masking.'
##    UseMasking = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, Layer):
##        u'The masks for a layer.'
##        #return MaskingLayers
##    def _set(self, Layer, MaskingLayers):
##        u'The masks for a layer.'
##    MaskingLayers = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def MaskedLayers(self):
##        u'The set of layers that are being masked.'
##        #return Layers
##
##    def ClearMasking(self, Layer):
##        u'Clear masking layers on a layer.'
##        #return 
##

ILevelMasking._methods_ = [
    COMMETHOD(['propput', helpstring(u'The symbol levels for which the masking applies.')], HRESULT, 'LevelMasking',
              ( ['in'], POINTER(ILayer), 'maskedLayer' ),
              ( ['in'], POINTER(ILayer), 'maskingLayer' ),
              ( ['in'], BSTR, 'pLevels' )),
    COMMETHOD(['propget', helpstring(u'The symbol levels for which the masking applies.')], HRESULT, 'LevelMasking',
              ( ['in'], POINTER(ILayer), 'maskedLayer' ),
              ( ['in'], POINTER(ILayer), 'maskingLayer' ),
              ( ['retval', 'out'], POINTER(BSTR), 'pLevels' )),
]
################################################################
## code template for ILevelMasking implementation
##class ILevelMasking_Impl(object):
##    def _get(self, maskedLayer, maskingLayer):
##        u'The symbol levels for which the masking applies.'
##        #return pLevels
##    def _set(self, maskedLayer, maskingLayer, pLevels):
##        u'The symbol levels for which the masking applies.'
##    LevelMasking = property(_get, _set, doc = _set.__doc__)
##

IElementProperties2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Name of the element.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'Name of the element.')], HRESULT, 'Name',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'Type of the element.')], HRESULT, 'Type',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'Type of the element.')], HRESULT, 'Type',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'Indicates if transform is applied to symbols and other parts of element. False = only apply transform to geometry.')], HRESULT, 'AutoTransform',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'AutoTransform' )),
    COMMETHOD(['propput', helpstring(u'Indicates if transform is applied to symbols and other parts of element. False = only apply transform to geometry.')], HRESULT, 'AutoTransform',
              ( ['in'], VARIANT_BOOL, 'AutoTransform' )),
    COMMETHOD(['propget', helpstring(u'Custom property.')], HRESULT, 'CustomProperty',
              ( ['retval', 'out'], POINTER(VARIANT), 'CustomProperty' )),
    COMMETHOD(['propput', helpstring(u'Custom property.')], HRESULT, 'CustomProperty',
              ( ['in'], VARIANT, 'CustomProperty' )),
    COMMETHOD([helpstring(u'Indicates if the element can be rotated.')], HRESULT, 'CanRotate',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'CanRotate' )),
    COMMETHOD(['propget', helpstring(u'Reference scale of the element.')], HRESULT, 'ReferenceScale',
              ( ['retval', 'out'], POINTER(c_double), 'ReferenceScale' )),
    COMMETHOD(['propput', helpstring(u'Reference scale of the element.')], HRESULT, 'ReferenceScale',
              ( ['in'], c_double, 'ReferenceScale' )),
]
################################################################
## code template for IElementProperties2 implementation
##class IElementProperties2_Impl(object):
##    def CanRotate(self):
##        u'Indicates if the element can be rotated.'
##        #return CanRotate
##
##    def _get(self):
##        u'Name of the element.'
##        #return Name
##    def _set(self, Name):
##        u'Name of the element.'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Custom property.'
##        #return CustomProperty
##    def _set(self, CustomProperty):
##        u'Custom property.'
##    CustomProperty = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Type of the element.'
##        #return Name
##    def _set(self, Name):
##        u'Type of the element.'
##    Type = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Reference scale of the element.'
##        #return ReferenceScale
##    def _set(self, ReferenceScale):
##        u'Reference scale of the element.'
##    ReferenceScale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if transform is applied to symbols and other parts of element. False = only apply transform to geometry.'
##        #return AutoTransform
##    def _set(self, AutoTransform):
##        u'Indicates if transform is applied to symbols and other parts of element. False = only apply transform to geometry.'
##    AutoTransform = property(_get, _set, doc = _set.__doc__)
##

class ICacheInfo2(ICacheInfo):
    _case_insensitive_ = True
    u'Provides access to members that provide the map cache info.'
    _iid_ = GUID('{E8C16C27-CDC1-4954-8461-495CC1F0936B}')
    _idlflags_ = ['oleautomation', 'hidden']
ICacheInfo2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Cache storage info object.')], HRESULT, 'CacheStorageInfo',
              ( ['retval', 'out'], POINTER(POINTER(ICacheStorageInfo)), 'ppCacheStorageInfo' )),
    COMMETHOD(['propputref', helpstring(u'Cache storage info object.')], HRESULT, 'CacheStorageInfo',
              ( ['in'], POINTER(ICacheStorageInfo), 'ppCacheStorageInfo' )),
]
################################################################
## code template for ICacheInfo2 implementation
##class ICacheInfo2_Impl(object):
##    def CacheStorageInfo(self, ppCacheStorageInfo):
##        u'Cache storage info object.'
##        #return 
##


# values for enumeration 'esriDynamicLegendType'
esriDynamicLegendTypeNone = 1
esriDynamicLegendTypeVisibility = 2
esriDynamicLegendTypeCount = 3
esriDynamicLegendType = c_int # enum
class IMeasuredGrid(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the members that control the lines that make up the map grid.'
    _iid_ = GUID('{4F69021F-A5C1-11D2-AE82-080009EC732A}')
    _idlflags_ = ['oleautomation']
IMeasuredGrid._methods_ = [
    COMMETHOD(['propget', helpstring(u'The origin of the grid on the X axis.')], HRESULT, 'XOrigin',
              ( ['retval', 'out'], POINTER(c_double), 'Origin' )),
    COMMETHOD(['propput', helpstring(u'The origin of the grid on the X axis.')], HRESULT, 'XOrigin',
              ( ['in'], c_double, 'Origin' )),
    COMMETHOD(['propget', helpstring(u'The interval between grid lines along the X axis.')], HRESULT, 'XIntervalSize',
              ( ['retval', 'out'], POINTER(c_double), 'Interval' )),
    COMMETHOD(['propput', helpstring(u'The interval between grid lines along the X axis.')], HRESULT, 'XIntervalSize',
              ( ['in'], c_double, 'Interval' )),
    COMMETHOD(['propget', helpstring(u'The origin of the grid on the Y axis.')], HRESULT, 'YOrigin',
              ( ['retval', 'out'], POINTER(c_double), 'Origin' )),
    COMMETHOD(['propput', helpstring(u'The origin of the grid on the Y axis.')], HRESULT, 'YOrigin',
              ( ['in'], c_double, 'Origin' )),
    COMMETHOD(['propget', helpstring(u'The interval between grid lines along the Y axis.')], HRESULT, 'YIntervalSize',
              ( ['retval', 'out'], POINTER(c_double), 'Interval' )),
    COMMETHOD(['propput', helpstring(u'The interval between grid lines along the Y axis.')], HRESULT, 'YIntervalSize',
              ( ['in'], c_double, 'Interval' )),
    COMMETHOD(['propget', helpstring(u'The units for the intervals and origin.')], HRESULT, 'Units',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits), 'unitsCode' )),
    COMMETHOD(['propput', helpstring(u'The units for the intervals and origin.')], HRESULT, 'Units',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits, 'unitsCode' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the origin is read from the XOrigin and YOrigin properties (true) or if it is computed dynamically from the data frame (false).')], HRESULT, 'FixedOrigin',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'fixed' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the origin is read from the XOrigin and YOrigin properties (true) or if it is computed dynamically from the data frame (false).')], HRESULT, 'FixedOrigin',
              ( ['in'], VARIANT_BOOL, 'fixed' )),
]
################################################################
## code template for IMeasuredGrid implementation
##class IMeasuredGrid_Impl(object):
##    def _get(self):
##        u'The interval between grid lines along the Y axis.'
##        #return Interval
##    def _set(self, Interval):
##        u'The interval between grid lines along the Y axis.'
##    YIntervalSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the origin is read from the XOrigin and YOrigin properties (true) or if it is computed dynamically from the data frame (false).'
##        #return fixed
##    def _set(self, fixed):
##        u'Indicates if the origin is read from the XOrigin and YOrigin properties (true) or if it is computed dynamically from the data frame (false).'
##    FixedOrigin = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The origin of the grid on the Y axis.'
##        #return Origin
##    def _set(self, Origin):
##        u'The origin of the grid on the Y axis.'
##    YOrigin = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The units for the intervals and origin.'
##        #return unitsCode
##    def _set(self, unitsCode):
##        u'The units for the intervals and origin.'
##    Units = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The origin of the grid on the X axis.'
##        #return Origin
##    def _set(self, Origin):
##        u'The origin of the grid on the X axis.'
##    XOrigin = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The interval between grid lines along the X axis.'
##        #return Interval
##    def _set(self, Interval):
##        u'The interval between grid lines along the X axis.'
##    XIntervalSize = property(_get, _set, doc = _set.__doc__)
##

class IFunctionSeriesProperties(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control function series.'
    _iid_ = GUID('{AD0C7CDF-EA5A-4AB4-BE7C-220FAE0B299C}')
    _idlflags_ = ['oleautomation']
IFunctionSeriesProperties._methods_ = [
    COMMETHOD([helpstring(u'Changes function to the one with type name provided.')], HRESULT, 'ChangeFunctionType',
              ( [], BSTR, 'newType' )),
    COMMETHOD(['propput', helpstring(u'Value of the property with the provided name. Not applicable to all functions.')], HRESULT, 'Property',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT, 'pVal' )),
    COMMETHOD(['propget', helpstring(u'Value of the property with the provided name. Not applicable to all functions.')], HRESULT, 'Property',
              ( ['in'], BSTR, 'Name' ),
              ( ['retval', 'out'], POINTER(VARIANT), 'pVal' )),
]
################################################################
## code template for IFunctionSeriesProperties implementation
##class IFunctionSeriesProperties_Impl(object):
##    def ChangeFunctionType(self, newType):
##        u'Changes function to the one with type name provided.'
##        #return 
##
##    def _get(self, Name):
##        u'Value of the property with the provided name. Not applicable to all functions.'
##        #return pVal
##    def _set(self, Name, pVal):
##        u'Value of the property with the provided name. Not applicable to all functions.'
##    Property = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'esriDataStatType'
esriDataStatTypeCount = 0
esriDataStatTypeSum = 1
esriDataStatTypeMin = 2
esriDataStatTypeMax = 3
esriDataStatTypeAverage = 4
esriDataStatTypeStdDev = 5
esriDataStatTypeVariance = 6
esriDataStatType = c_int # enum
IStatisticDescription._methods_ = [
    COMMETHOD(['propget', helpstring(u'Name of field for which statistic should be calculated.')], HRESULT, 'StatisticFieldName',
              ( ['retval', 'out'], POINTER(BSTR), 'statFieldName' )),
    COMMETHOD(['propput', helpstring(u'Name of field for which statistic should be calculated.')], HRESULT, 'StatisticFieldName',
              ( ['in'], BSTR, 'statFieldName' )),
    COMMETHOD(['propget', helpstring(u'Type of statistic.')], HRESULT, 'StatisticType',
              ( ['retval', 'out'], POINTER(esriDataStatType), 'statType' )),
    COMMETHOD(['propput', helpstring(u'Type of statistic.')], HRESULT, 'StatisticType',
              ( ['in'], esriDataStatType, 'statType' )),
    COMMETHOD(['propget', helpstring(u'Optional name of field containing result.')], HRESULT, 'ResultFieldName',
              ( ['retval', 'out'], POINTER(BSTR), 'ResultFieldName' )),
    COMMETHOD(['propput', helpstring(u'Optional name of field containing result.')], HRESULT, 'ResultFieldName',
              ( ['in'], BSTR, 'ResultFieldName' )),
]
################################################################
## code template for IStatisticDescription implementation
##class IStatisticDescription_Impl(object):
##    def _get(self):
##        u'Type of statistic.'
##        #return statType
##    def _set(self, statType):
##        u'Type of statistic.'
##    StatisticType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Name of field for which statistic should be calculated.'
##        #return statFieldName
##    def _set(self, statFieldName):
##        u'Name of field for which statistic should be calculated.'
##    StatisticFieldName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Optional name of field containing result.'
##        #return ResultFieldName
##    def _set(self, ResultFieldName):
##        u'Optional name of field containing result.'
##    ResultFieldName = property(_get, _set, doc = _set.__doc__)
##

class IDataGraphTEvents(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to events that occur when graph object changes.'
    _iid_ = GUID('{CD6D8D2C-5FD2-4962-BA04-BB383934EFC8}')
    _idlflags_ = ['oleautomation']
IDataGraphTEvents._methods_ = [
    COMMETHOD([helpstring(u'Fired when graph changes.')], HRESULT, 'DataGraphTChanged',
              ( ['in'], POINTER(IDataGraphT), 'pGraphT' ),
              ( ['in'], BSTR, 'kind' )),
    COMMETHOD([helpstring(u'Fired when graph receives an event from its data source.')], HRESULT, 'DataGraphTDataSourceEventReceived',
              ( ['in'], POINTER(IDataGraphT), 'pGraphT' ),
              ( ['in'], c_int, 'iSeries' ),
              ( ['in'], BSTR, 'kind' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'bProcessEventInwardly' )),
    COMMETHOD([helpstring(u'Fired when graph loading status changes.')], HRESULT, 'DataGraphTLoadingStatus',
              ( ['in'], POINTER(IDataGraphT), 'pGraphT' ),
              ( ['in'], c_int, 'iSeries' ),
              ( ['in'], BSTR, 'info' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'bKeepGoing' )),
]
################################################################
## code template for IDataGraphTEvents implementation
##class IDataGraphTEvents_Impl(object):
##    def DataGraphTDataSourceEventReceived(self, pGraphT, iSeries, kind):
##        u'Fired when graph receives an event from its data source.'
##        #return bProcessEventInwardly
##
##    def DataGraphTChanged(self, pGraphT, kind):
##        u'Fired when graph changes.'
##        #return 
##
##    def DataGraphTLoadingStatus(self, pGraphT, iSeries, info):
##        u'Fired when graph loading status changes.'
##        #return bKeepGoing
##

ICircleElement._methods_ = [
]
################################################################
## code template for ICircleElement implementation
##class ICircleElement_Impl(object):

class ICoverageAnnotationSel(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a coverage annotation layer.'
    _iid_ = GUID('{158D86F6-0A72-488E-A448-AC0D86725AF7}')
    _idlflags_ = ['oleautomation']
ICoverageAnnotationSel._methods_ = [
    COMMETHOD([helpstring(u'Starts a graphics generation process from the selected annotation features.  The optional envelope specifies a bounding box.  The display is used for converting from map units.')], HRESULT, 'StartGeneratingSelectedGraphics',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], VARIANT_BOOL, 'withAttributes' ),
              ( ['in'], VARIANT_BOOL, 'useGroupSymbolElement' )),
    COMMETHOD([helpstring(u'Generates the next selected feature and graphic element in the graphics generation loop.  Returns a NULL feature and element after the last annotation feature has been read.  Call only after StartGeneratingGraphics.')], HRESULT, 'NextSelectedFeatureAndGraphic',
              ( ['out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeature)), 'Feature' ),
              ( ['out'], POINTER(POINTER(IElement)), 'Element' )),
]
################################################################
## code template for ICoverageAnnotationSel implementation
##class ICoverageAnnotationSel_Impl(object):
##    def NextSelectedFeatureAndGraphic(self):
##        u'Generates the next selected feature and graphic element in the graphics generation loop.  Returns a NULL feature and element after the last annotation feature has been read.  Call only after StartGeneratingGraphics.'
##        #return Feature, Element
##
##    def StartGeneratingSelectedGraphics(self, Display, withAttributes, useGroupSymbolElement):
##        u'Starts a graphics generation process from the selected annotation features.  The optional envelope specifies a bounding box.  The display is used for converting from map units.'
##        #return 
##

IStatisticDescriptions._methods_ = [
    COMMETHOD(['propget', helpstring(u'The StatisticDescription count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The StatisticDescription at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IStatisticDescription)), 'ppStatisticDescription' )),
    COMMETHOD([helpstring(u'Removes the StatisticDescription at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all StatisticDescriptions.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Adds a StatisticDescription.')], HRESULT, 'Add',
              ( ['in'], POINTER(IStatisticDescription), 'pStatisticDescription' )),
    COMMETHOD([helpstring(u'Inserts a StatisticDescription at the specified position.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(IStatisticDescription), 'pStatisticDescription' )),
]
################################################################
## code template for IStatisticDescriptions implementation
##class IStatisticDescriptions_Impl(object):
##    @property
##    def Count(self):
##        u'The StatisticDescription count.'
##        #return Count
##
##    def Insert(self, Index, pStatisticDescription):
##        u'Inserts a StatisticDescription at the specified position.'
##        #return 
##
##    def Remove(self, Index):
##        u'Removes the StatisticDescription at the specified position.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'The StatisticDescription at the specified position.'
##        #return ppStatisticDescription
##
##    def RemoveAll(self):
##        u'Removes all StatisticDescriptions.'
##        #return 
##
##    def Add(self, pStatisticDescription):
##        u'Adds a StatisticDescription.'
##        #return 
##

class IDataGraphCollection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control graph collection in map document.'
    _iid_ = GUID('{5C68ACBE-4517-4C11-97A1-E3C7EDB0C3BB}')
    _idlflags_ = ['oleautomation']
IDataGraphCollection._methods_ = [
    COMMETHOD(['propget', helpstring(u'Number of graphs in the collection.')], HRESULT, 'DataGraphCount',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propget', helpstring(u'Graph at the given index.')], HRESULT, 'DataGraph',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IDataGraphBase)), 'pGraph' )),
    COMMETHOD([helpstring(u'Removes the graph from the collection.')], HRESULT, 'RemoveDataGraph',
              ( ['in'], POINTER(IDataGraphBase), 'graph' )),
    COMMETHOD([helpstring(u'Adds the graph to the collection.')], HRESULT, 'AddDataGraph',
              ( ['in'], POINTER(IDataGraphBase), 'graph' )),
    COMMETHOD([helpstring(u'Removes all graphs from the collection.')], HRESULT, 'RemoveAllDataGraphs'),
]
################################################################
## code template for IDataGraphCollection implementation
##class IDataGraphCollection_Impl(object):
##    def AddDataGraph(self, graph):
##        u'Adds the graph to the collection.'
##        #return 
##
##    def RemoveDataGraph(self, graph):
##        u'Removes the graph from the collection.'
##        #return 
##
##    @property
##    def DataGraph(self, Index):
##        u'Graph at the given index.'
##        #return pGraph
##
##    def RemoveAllDataGraphs(self):
##        u'Removes all graphs from the collection.'
##        #return 
##
##    @property
##    def DataGraphCount(self):
##        u'Number of graphs in the collection.'
##        #return pCount
##

IGraphicsComposite._methods_ = [
    COMMETHOD(['propget', helpstring(u'Graphic elements that are used to render this object.  The data argument is defined by the coclass that implements this interface.')], HRESULT, 'Graphics',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], POINTER(IUnknown), 'Data' ),
              ( ['retval', 'out'], POINTER(POINTER(IEnumElement)), 'Graphics' )),
]
################################################################
## code template for IGraphicsComposite implementation
##class IGraphicsComposite_Impl(object):
##    @property
##    def Graphics(self, Display, Data):
##        u'Graphic elements that are used to render this object.  The data argument is defined by the coclass that implements this interface.'
##        #return Graphics
##

class IFeatureLayerSymbology(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control default feature layer symbology.'
    _iid_ = GUID('{953D1A95-5411-4EE5-8DB9-A87E80F9C551}')
    _idlflags_ = ['oleautomation']
IFeatureLayerSymbology._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if the feature layer can be symbolized.')], HRESULT, 'CanSymbolize',
              ( ['in'], POINTER(IFeatureLayer), 'FeatureLayer' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propget', helpstring(u'Priority for the layer.')], HRESULT, 'Priority',
              ( ['retval', 'out'], POINTER(c_double), 'Priority' )),
    COMMETHOD([helpstring(u'Symbolizes the specified feature layer with default symbology.')], HRESULT, 'Symbolize',
              ( ['in'], POINTER(IFeatureLayer), 'FeatureLayer' )),
]
################################################################
## code template for IFeatureLayerSymbology implementation
##class IFeatureLayerSymbology_Impl(object):
##    @property
##    def CanSymbolize(self, FeatureLayer):
##        u'Indicates if the feature layer can be symbolized.'
##        #return flag
##
##    @property
##    def Priority(self):
##        u'Priority for the layer.'
##        #return Priority
##
##    def Symbolize(self, FeatureLayer):
##        u'Symbolizes the specified feature layer with default symbology.'
##        #return 
##

class IDimensionStyleText(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u"Provides access to members that control a dimension style's text."
    _iid_ = GUID('{F9316364-F92A-11D3-80D3-00C04F601565}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'esriDimensionTextDisplay'
esriDimensionTDValueOnly = 0
esriDimensionTDPrefixSuffix = 1
esriDimensionTDExpression = 2
esriDimensionTDNone = 3
esriDimensionTextDisplay = c_int # enum

# values for enumeration 'esriDimensionTextFit'
esriDimensionTextFitNone = 0
esriDimensionTextFitMoveBegin = 1
esriDimensionTextFitMoveEnd = 2
esriDimensionTextFit = c_int # enum
IDimensionStyleText._methods_ = [
    COMMETHOD(['propput', helpstring(u'Symbol used for the text.')], HRESULT, 'TextSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'Symbol used for the text.')], HRESULT, 'TextSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol)), 'Symbol' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the text should be aligned with the dimension line.')], HRESULT, 'Align',
              ( ['in'], VARIANT_BOOL, 'Align' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the text should be aligned with the dimension line.')], HRESULT, 'Align',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Align' )),
    COMMETHOD(['propput', helpstring(u'Units the length of the dimension text is displayed in.')], HRESULT, 'DisplayUnits',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits, 'Units' )),
    COMMETHOD(['propget', helpstring(u'Units the length of the dimension text is displayed in.')], HRESULT, 'DisplayUnits',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits), 'Units' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the length of the dimension needs to be converted for display.')], HRESULT, 'ConvertUnits',
              ( ['in'], VARIANT_BOOL, 'Convert' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the length of the dimension needs to be converted for display.')], HRESULT, 'ConvertUnits',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Convert' )),
    COMMETHOD(['propput', helpstring(u'Precision for the value displayed by the dimension text.')], HRESULT, 'DisplayPrecision',
              ( ['in'], c_int, 'precision' )),
    COMMETHOD(['propget', helpstring(u'Precision for the value displayed by the dimension text.')], HRESULT, 'DisplayPrecision',
              ( ['retval', 'out'], POINTER(c_int), 'precision' )),
    COMMETHOD(['propput', helpstring(u'Text display setting for the style.')], HRESULT, 'TextDisplay',
              ( ['in'], esriDimensionTextDisplay, 'Display' )),
    COMMETHOD(['propget', helpstring(u'Text display setting for the style.')], HRESULT, 'TextDisplay',
              ( ['retval', 'out'], POINTER(esriDimensionTextDisplay), 'Display' )),
    COMMETHOD(['propput', helpstring(u'Text expression for the style.')], HRESULT, 'Expression',
              ( ['in'], BSTR, 'Expression' )),
    COMMETHOD(['propget', helpstring(u'Text expression for the style.')], HRESULT, 'Expression',
              ( ['retval', 'out'], POINTER(BSTR), 'Expression' )),
    COMMETHOD(['propput', helpstring(u'Text expression parser for the text expression for the style.')], HRESULT, 'ExpressionParserName',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'Text expression parser for the text expression for the style.')], HRESULT, 'ExpressionParserName',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the text expression is simple or custom for the style.')], HRESULT, 'ExpressionSimple',
              ( ['in'], VARIANT_BOOL, 'isSimple' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the text expression is simple or custom for the style.')], HRESULT, 'ExpressionSimple',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'isSimple' )),
    COMMETHOD(['propput', helpstring(u'Prefix for the text expression for the style.')], HRESULT, 'Prefix',
              ( ['in'], BSTR, 'Prefix' )),
    COMMETHOD(['propget', helpstring(u'Prefix for the text expression for the style.')], HRESULT, 'Prefix',
              ( ['retval', 'out'], POINTER(BSTR), 'Prefix' )),
    COMMETHOD(['propput', helpstring(u'Suffix for the text expression for the style.')], HRESULT, 'Suffix',
              ( ['in'], BSTR, 'Suffix' )),
    COMMETHOD(['propget', helpstring(u'Suffix for the text expression for the style.')], HRESULT, 'Suffix',
              ( ['retval', 'out'], POINTER(BSTR), 'Suffix' )),
    COMMETHOD(['propput', helpstring(u'Text fit policy for the style.')], HRESULT, 'TextFit',
              ( ['in'], esriDimensionTextFit, 'fit' )),
    COMMETHOD(['propget', helpstring(u'Text fit policy for the style.')], HRESULT, 'TextFit',
              ( ['retval', 'out'], POINTER(esriDimensionTextFit), 'fit' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the dimension line will be extended to underline the text on inward dimensions.')], HRESULT, 'ExtendLineOnFit',
              ( ['in'], VARIANT_BOOL, 'Draw' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the dimension line will be extended to underline the text on inward dimensions.')], HRESULT, 'ExtendLineOnFit',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Draw' )),
]
################################################################
## code template for IDimensionStyleText implementation
##class IDimensionStyleText_Impl(object):
##    def _get(self):
##        u'Indicates if the text expression is simple or custom for the style.'
##        #return isSimple
##    def _set(self, isSimple):
##        u'Indicates if the text expression is simple or custom for the style.'
##    ExpressionSimple = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Text fit policy for the style.'
##        #return fit
##    def _set(self, fit):
##        u'Text fit policy for the style.'
##    TextFit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Text expression parser for the text expression for the style.'
##        #return Name
##    def _set(self, Name):
##        u'Text expression parser for the text expression for the style.'
##    ExpressionParserName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Precision for the value displayed by the dimension text.'
##        #return precision
##    def _set(self, precision):
##        u'Precision for the value displayed by the dimension text.'
##    DisplayPrecision = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Units the length of the dimension text is displayed in.'
##        #return Units
##    def _set(self, Units):
##        u'Units the length of the dimension text is displayed in.'
##    DisplayUnits = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the text should be aligned with the dimension line.'
##        #return Align
##    def _set(self, Align):
##        u'Indicates if the text should be aligned with the dimension line.'
##    Align = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Prefix for the text expression for the style.'
##        #return Prefix
##    def _set(self, Prefix):
##        u'Prefix for the text expression for the style.'
##    Prefix = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Symbol used for the text.'
##        #return Symbol
##    def _set(self, Symbol):
##        u'Symbol used for the text.'
##    TextSymbol = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the length of the dimension needs to be converted for display.'
##        #return Convert
##    def _set(self, Convert):
##        u'Indicates if the length of the dimension needs to be converted for display.'
##    ConvertUnits = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the dimension line will be extended to underline the text on inward dimensions.'
##        #return Draw
##    def _set(self, Draw):
##        u'Indicates if the dimension line will be extended to underline the text on inward dimensions.'
##    ExtendLineOnFit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Text expression for the style.'
##        #return Expression
##    def _set(self, Expression):
##        u'Text expression for the style.'
##    Expression = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Text display setting for the style.'
##        #return Display
##    def _set(self, Display):
##        u'Text display setting for the style.'
##    TextDisplay = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Suffix for the text expression for the style.'
##        #return Suffix
##    def _set(self, Suffix):
##        u'Suffix for the text expression for the style.'
##    Suffix = property(_get, _set, doc = _set.__doc__)
##

IMapCooker._methods_ = [
    COMMETHOD(['propget', helpstring(u'The map cache path.')], HRESULT, 'Path',
              ( ['retval', 'out'], POINTER(BSTR), 'pPath' )),
    COMMETHOD(['propput', helpstring(u'The map cache path.')], HRESULT, 'Path',
              ( ['in'], BSTR, 'pPath' )),
    COMMETHOD(['propget', helpstring(u'The map cache extent.')], HRESULT, 'Extent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'ppExtent' )),
    COMMETHOD(['propput', helpstring(u'The map cache extent.')], HRESULT, 'Extent',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'ppExtent' )),
    COMMETHOD(['propget', helpstring(u'The tile cache format.')], HRESULT, 'Format',
              ( ['retval', 'out'], POINTER(BSTR), 'pFormat' )),
    COMMETHOD(['propput', helpstring(u'The tile cache format.')], HRESULT, 'Format',
              ( ['in'], BSTR, 'pFormat' )),
    COMMETHOD(['propget', helpstring(u'Indicates if antialiasing should be used.')], HRESULT, 'Antialiasing',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pAntialiasing' )),
    COMMETHOD(['propput', helpstring(u'Indicates if antialiasing should be used.')], HRESULT, 'Antialiasing',
              ( ['in'], VARIANT_BOOL, 'pAntialiasing' )),
    COMMETHOD(['propget', helpstring(u'The tile cache info.')], HRESULT, 'TileCacheInfo',
              ( ['retval', 'out'], POINTER(POINTER(ITileCacheInfo)), 'ppCacheInfo' )),
    COMMETHOD(['propputref', helpstring(u'The tile cache info.')], HRESULT, 'TileCacheInfo',
              ( ['in'], POINTER(ITileCacheInfo), 'ppCacheInfo' )),
    COMMETHOD(['propget', helpstring(u'The number of map cache levels.')], HRESULT, 'NumLevels',
              ( ['retval', 'out'], POINTER(c_int), 'pNumLevels' )),
    COMMETHOD([helpstring(u'Connects to a given map and its cache.')], HRESULT, 'Connect',
              ( ['in'], BSTR, 'Location' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], POINTER(IMap), 'pMap' )),
    COMMETHOD([helpstring(u'Adds all cached layers in the map cache.')], HRESULT, 'AddCachedLayers',
              ( ['in'], POINTER(IMap), 'pMap' )),
    COMMETHOD([helpstring(u'Adds a layer to the map cache.')], HRESULT, 'AddLayer',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], POINTER(ILayer), 'pLayer' )),
    COMMETHOD([helpstring(u'Clears cache for a given layer within a given extent.')], HRESULT, 'Clear',
              ( ['in'], POINTER(ILayer), 'pLayer' ),
              ( [], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'pExtent' )),
    COMMETHOD([helpstring(u'Clears cache for all layers.')], HRESULT, 'ClearAll'),
    COMMETHOD([helpstring(u'Snaps a view extent to one of map cache levels.')], HRESULT, 'Snap',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'pDisplay' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'pExtent' )),
    COMMETHOD([helpstring(u'Draws a given layer to the specified display.')], HRESULT, 'Draw',
              ( ['in'], POINTER(ILayer), 'pLayer' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'pDisplay' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' )),
    COMMETHOD([helpstring(u'Sets default LOD Info for a given number of levels.')], HRESULT, 'SetDefaultLODInfos',
              ( ['in'], c_int, 'NumLevels' )),
    COMMETHOD([helpstring(u'Fully generates cache for a given layer.')], HRESULT, 'Generate',
              ( ['in'], POINTER(IMap), 'pMap' ),
              ( ['in'], POINTER(ILayer), 'pLayer' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'pDisplay' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' )),
    COMMETHOD([helpstring(u'Indicates if there is any cache.')], HRESULT, 'HasCache',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pHasCache' )),
    COMMETHOD([helpstring(u'Indicates if there is a cache for a given layer.')], HRESULT, 'HasLayerCache',
              ( ['in'], POINTER(ILayer), 'pLayer' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pHasCache' )),
    COMMETHOD([helpstring(u'Gets a tile for a given tile location from a given layer.')], HRESULT, 'GetTile',
              ( ['in'], POINTER(ILayer), 'pLayer' ),
              ( [], c_int, 'Level' ),
              ( [], c_int, 'Row' ),
              ( [], c_int, 'Column' ),
              ( ['retval', 'out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'ppTile' )),
    COMMETHOD([helpstring(u'Puts a tile for a given tile location for a given layer.')], HRESULT, 'PutTile',
              ( ['in'], POINTER(ILayer), 'pLayer' ),
              ( [], c_int, 'Level' ),
              ( [], c_int, 'Row' ),
              ( [], c_int, 'Column' ),
              ( ['in'], POINTER(_midlSAFEARRAY(c_ubyte)), 'ppTile' )),
    COMMETHOD([helpstring(u'Gets cache directory for a given layer.')], HRESULT, 'GetCacheDirectory',
              ( ['in'], POINTER(ILayer), 'pLayer' ),
              ( ['retval', 'out'], POINTER(BSTR), 'pCacheDir' )),
    COMMETHOD([helpstring(u'Queries for the current map tile position.')], HRESULT, 'QueryTilePosition',
              ( ['out'], POINTER(c_int), 'pLevel' ),
              ( ['out'], POINTER(c_int), 'pRow' ),
              ( ['out'], POINTER(c_int), 'pColumn' )),
    COMMETHOD([helpstring(u'Sets the current map tile position.')], HRESULT, 'PutTilePosition',
              ( ['in'], c_int, 'Level' ),
              ( ['in'], c_int, 'Row' ),
              ( ['in'], c_int, 'Column' )),
    COMMETHOD(['propget', helpstring(u'The maximum number of map tiles to be generated.')], HRESULT, 'MaxTileCount',
              ( ['retval', 'out'], POINTER(c_int), 'pNumTiles' )),
    COMMETHOD(['propput', helpstring(u'The maximum number of map tiles to be generated.')], HRESULT, 'MaxTileCount',
              ( ['in'], c_int, 'pNumTiles' )),
    COMMETHOD([helpstring(u'Exits the map cache generator host process.')], HRESULT, 'Exit'),
    COMMETHOD([helpstring(u'Updates cache for a given layer within a given extent.')], HRESULT, 'Update',
              ( ['in'], POINTER(IMap), 'pMap' ),
              ( ['in'], POINTER(ILayer), 'pLayer' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'pDisplay' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'pExtent' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'pLevels' ),
              ( ['in'], esriMapCacheUpdateMode, 'UpdateMode' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' )),
    COMMETHOD([helpstring(u'Deletes map service cache directory.')], HRESULT, 'Delete'),
]
################################################################
## code template for IMapCooker implementation
##class IMapCooker_Impl(object):
##    def SetDefaultLODInfos(self, NumLevels):
##        u'Sets default LOD Info for a given number of levels.'
##        #return 
##
##    def Exit(self):
##        u'Exits the map cache generator host process.'
##        #return 
##
##    def AddCachedLayers(self, pMap):
##        u'Adds all cached layers in the map cache.'
##        #return 
##
##    def Snap(self, pDisplay, pExtent):
##        u'Snaps a view extent to one of map cache levels.'
##        #return 
##
##    def ClearAll(self):
##        u'Clears cache for all layers.'
##        #return 
##
##    def Draw(self, pLayer, pDisplay, pTrackCancel):
##        u'Draws a given layer to the specified display.'
##        #return 
##
##    def _get(self):
##        u'The tile cache format.'
##        #return pFormat
##    def _set(self, pFormat):
##        u'The tile cache format.'
##    Format = property(_get, _set, doc = _set.__doc__)
##
##    def AddLayer(self, Name, pLayer):
##        u'Adds a layer to the map cache.'
##        #return 
##
##    def Update(self, pMap, pLayer, pDisplay, pExtent, pLevels, UpdateMode, pTrackCancel):
##        u'Updates cache for a given layer within a given extent.'
##        #return 
##
##    def HasCache(self):
##        u'Indicates if there is any cache.'
##        #return pHasCache
##
##    def _get(self):
##        u'The map cache extent.'
##        #return ppExtent
##    def _set(self, ppExtent):
##        u'The map cache extent.'
##    Extent = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The map cache path.'
##        #return pPath
##    def _set(self, pPath):
##        u'The map cache path.'
##    Path = property(_get, _set, doc = _set.__doc__)
##
##    def Generate(self, pMap, pLayer, pDisplay, pTrackCancel):
##        u'Fully generates cache for a given layer.'
##        #return 
##
##    def GetCacheDirectory(self, pLayer):
##        u'Gets cache directory for a given layer.'
##        #return pCacheDir
##
##    def QueryTilePosition(self):
##        u'Queries for the current map tile position.'
##        #return pLevel, pRow, pColumn
##
##    def _get(self):
##        u'Indicates if antialiasing should be used.'
##        #return pAntialiasing
##    def _set(self, pAntialiasing):
##        u'Indicates if antialiasing should be used.'
##    Antialiasing = property(_get, _set, doc = _set.__doc__)
##
##    def Clear(self, pLayer, pExtent):
##        u'Clears cache for a given layer within a given extent.'
##        #return 
##
##    def HasLayerCache(self, pLayer):
##        u'Indicates if there is a cache for a given layer.'
##        #return pHasCache
##
##    def _get(self):
##        u'The maximum number of map tiles to be generated.'
##        #return pNumTiles
##    def _set(self, pNumTiles):
##        u'The maximum number of map tiles to be generated.'
##    MaxTileCount = property(_get, _set, doc = _set.__doc__)
##
##    def PutTile(self, pLayer, Level, Row, Column, ppTile):
##        u'Puts a tile for a given tile location for a given layer.'
##        #return 
##
##    def Delete(self):
##        u'Deletes map service cache directory.'
##        #return 
##
##    @property
##    def NumLevels(self):
##        u'The number of map cache levels.'
##        #return pNumLevels
##
##    def GetTile(self, pLayer, Level, Row, Column):
##        u'Gets a tile for a given tile location from a given layer.'
##        #return ppTile
##
##    def Connect(self, Location, Name, pMap):
##        u'Connects to a given map and its cache.'
##        #return 
##
##    def TileCacheInfo(self, ppCacheInfo):
##        u'The tile cache info.'
##        #return 
##
##    def PutTilePosition(self, Level, Row, Column):
##        u'Sets the current map tile position.'
##        #return 
##

class IProjectedGrid(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the projection information for map grids.'
    _iid_ = GUID('{0FE6AEA3-D8DE-11D2-9F45-00C04F6BC78E}')
    _idlflags_ = ['oleautomation']
IProjectedGrid._methods_ = [
    COMMETHOD(['propget', helpstring(u'The spatial reference system of the grid.')], HRESULT, 'SpatialReference',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference)), 'SpatialReference' )),
    COMMETHOD(['propputref', helpstring(u'The spatial reference system of the grid.')], HRESULT, 'SpatialReference',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'SpatialReference' )),
]
################################################################
## code template for IProjectedGrid implementation
##class IProjectedGrid_Impl(object):
##    def SpatialReference(self, SpatialReference):
##        u'The spatial reference system of the grid.'
##        #return 
##

class ICornerGridLabel(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the corner properties of grid labels.'
    _iid_ = GUID('{8ED900FE-2573-4911-9C13-A24AC3BC3233}')
    _idlflags_ = ['oleautomation']
ICornerGridLabel._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if the specified corner should be displayed as a special corner label.')], HRESULT, 'CornerLabel',
              ( ['in'], esriGridCornerEnum, 'corner' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'isCorner' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the specified corner should be displayed as a special corner label.')], HRESULT, 'CornerLabel',
              ( ['in'], esriGridCornerEnum, 'corner' ),
              ( ['in'], VARIANT_BOOL, 'isCorner' )),
    COMMETHOD(['propget', helpstring(u'The corner value at the specified corner and axis.')], HRESULT, 'CornerValue',
              ( ['in'], esriGridCornerEnum, 'corner' ),
              ( ['in'], esriGridAxisEnum, 'axis' ),
              ( ['retval', 'out'], POINTER(c_double), 'Value' )),
    COMMETHOD(['propput', helpstring(u'The corner value at the specified corner and axis.')], HRESULT, 'CornerValue',
              ( ['in'], esriGridCornerEnum, 'corner' ),
              ( ['in'], esriGridAxisEnum, 'axis' ),
              ( ['in'], c_double, 'Value' )),
]
################################################################
## code template for ICornerGridLabel implementation
##class ICornerGridLabel_Impl(object):
##    def _get(self, corner):
##        u'Indicates if the specified corner should be displayed as a special corner label.'
##        #return isCorner
##    def _set(self, corner, isCorner):
##        u'Indicates if the specified corner should be displayed as a special corner label.'
##    CornerLabel = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, corner, axis):
##        u'The corner value at the specified corner and axis.'
##        #return Value
##    def _set(self, corner, axis, Value):
##        u'The corner value at the specified corner and axis.'
##    CornerValue = property(_get, _set, doc = _set.__doc__)
##

IGridLabel2._methods_ = [
    COMMETHOD(['propget', helpstring(u'The display name for the type of grid label.')], HRESULT, 'DisplayName',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propget', helpstring(u'Indicates if this grid label can be used with the specified map grid.')], HRESULT, 'Applies',
              ( ['in'], POINTER(IMapGrid), 'grid' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Applies' )),
    COMMETHOD(['propget', helpstring(u'The interface to an object that can be edited with a property sheet. The object is either the grid label itself or a single editable property.')], HRESULT, 'EditObject',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppObject' )),
    COMMETHOD(['propput', helpstring(u'The interface to an object that can be edited with a property sheet. The object is either the grid label itself or a single editable property.')], HRESULT, 'EditObject',
              ( ['in'], POINTER(IUnknown), 'ppObject' )),
    COMMETHOD(['propget', helpstring(u'The font used by the grid label.')], HRESULT, 'Font',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IFontDisp)), 'Font' )),
    COMMETHOD(['propput', helpstring(u'The font used by the grid label.')], HRESULT, 'Font',
              ( ['in'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IFontDisp), 'Font' )),
    COMMETHOD(['propget', helpstring(u'The color of the grid label.')], HRESULT, 'Color',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'The color of the grid label.')], HRESULT, 'Color',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'The offset of the grid label from the border in points.')], HRESULT, 'LabelOffset',
              ( ['retval', 'out'], POINTER(c_double), 'offsetPoints' )),
    COMMETHOD(['propput', helpstring(u'The offset of the grid label from the border in points.')], HRESULT, 'LabelOffset',
              ( ['in'], c_double, 'offsetPoints' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the grid label is horizontal (true) or vertical (false) on the specified axis.')], HRESULT, 'LabelAlignment',
              ( ['in'], esriGridAxisEnum, 'axis' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Horizontal' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the grid label is horizontal (true) or vertical (false) on the specified axis.')], HRESULT, 'LabelAlignment',
              ( ['in'], esriGridAxisEnum, 'axis' ),
              ( ['in'], VARIANT_BOOL, 'Horizontal' )),
    COMMETHOD([helpstring(u"Determines the extent of a label's text on the specified grid axis.")], HRESULT, 'QueryTextExtent',
              ( ['in'], c_double, 'LabelValue' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'Location' ),
              ( ['in'], esriGridAxisEnum, 'axis' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( [], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'Extent' )),
    COMMETHOD([helpstring(u'Draws a label on the specified grid axis.')], HRESULT, 'Draw',
              ( ['in'], c_double, 'LabelValue' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'Location' ),
              ( ['in'], esriGridAxisEnum, 'axis' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' )),
    COMMETHOD([helpstring(u'Draws a preview of the grid label into the specified hdc.')], HRESULT, 'Preview',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE, 'hDC' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.tagRECT), 'rectangle' )),
    COMMETHOD(['propget', helpstring(u'The font size used by the grid label.')], HRESULT, 'FontSize',
              ( ['retval', 'out'], POINTER(c_double), 'Size' )),
    COMMETHOD(['propput', helpstring(u'The font size used by the grid label.')], HRESULT, 'FontSize',
              ( ['in'], c_double, 'Size' )),
]
################################################################
## code template for IGridLabel2 implementation
##class IGridLabel2_Impl(object):
##    def Draw(self, LabelValue, Location, axis, Display):
##        u'Draws a label on the specified grid axis.'
##        #return 
##
##    def Preview(self, hDC, rectangle):
##        u'Draws a preview of the grid label into the specified hdc.'
##        #return 
##
##    @property
##    def DisplayName(self):
##        u'The display name for the type of grid label.'
##        #return Name
##
##    def _get(self):
##        u'The color of the grid label.'
##        #return Color
##    def _set(self, Color):
##        u'The color of the grid label.'
##    Color = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The interface to an object that can be edited with a property sheet. The object is either the grid label itself or a single editable property.'
##        #return ppObject
##    def _set(self, ppObject):
##        u'The interface to an object that can be edited with a property sheet. The object is either the grid label itself or a single editable property.'
##    EditObject = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The font size used by the grid label.'
##        #return Size
##    def _set(self, Size):
##        u'The font size used by the grid label.'
##    FontSize = property(_get, _set, doc = _set.__doc__)
##
##    def QueryTextExtent(self, LabelValue, Location, axis, Display, Extent):
##        u"Determines the extent of a label's text on the specified grid axis."
##        #return 
##
##    @property
##    def Applies(self, grid):
##        u'Indicates if this grid label can be used with the specified map grid.'
##        #return Applies
##
##    def _get(self):
##        u'The offset of the grid label from the border in points.'
##        #return offsetPoints
##    def _set(self, offsetPoints):
##        u'The offset of the grid label from the border in points.'
##    LabelOffset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The font used by the grid label.'
##        #return Font
##    def _set(self, Font):
##        u'The font used by the grid label.'
##    Font = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, axis):
##        u'Indicates if the grid label is horizontal (true) or vertical (false) on the specified axis.'
##        #return Horizontal
##    def _set(self, axis, Horizontal):
##        u'Indicates if the grid label is horizontal (true) or vertical (false) on the specified axis.'
##    LabelAlignment = property(_get, _set, doc = _set.__doc__)
##

IDataGraphTSymbolProperties._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if symbol is visible.')], HRESULT, 'Visible',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'b' )),
    COMMETHOD(['propput', helpstring(u'Indicates if symbol is visible.')], HRESULT, 'Visible',
              ( ['in'], VARIANT_BOOL, 'b' )),
    COMMETHOD(['propget', helpstring(u'Width of the symbol.')], HRESULT, 'Width',
              ( ['retval', 'out'], POINTER(c_int), 'pWidth' )),
    COMMETHOD(['propput', helpstring(u'Width of the symbol.')], HRESULT, 'Width',
              ( ['in'], c_int, 'pWidth' )),
    COMMETHOD(['propget', helpstring(u'Height of the symbol.')], HRESULT, 'Height',
              ( ['retval', 'out'], POINTER(c_int), 'pHeight' )),
    COMMETHOD(['propput', helpstring(u'Height of the symbol.')], HRESULT, 'Height',
              ( ['in'], c_int, 'pHeight' )),
    COMMETHOD(['propget', helpstring(u'Style of the symbol.')], HRESULT, 'Style',
              ( ['retval', 'out'], POINTER(esriDataGraphTSymbolType), 'pStyle' )),
    COMMETHOD(['propput', helpstring(u'Style of the symbol.')], HRESULT, 'Style',
              ( ['in'], esriDataGraphTSymbolType, 'pStyle' )),
    COMMETHOD(['propget', helpstring(u'Color of the symbol fill.')], HRESULT, 'Color',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_COLOR), 'pColor' )),
    COMMETHOD(['propput', helpstring(u'Color of the symbol fill.')], HRESULT, 'Color',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_COLOR, 'pColor' )),
    COMMETHOD(['propget', helpstring(u'Properties of the symbol border.')], HRESULT, 'BorderProperties',
              ( ['retval', 'out'], POINTER(POINTER(IDataGraphTPenProperties)), 'ppPenProps' )),
]
################################################################
## code template for IDataGraphTSymbolProperties implementation
##class IDataGraphTSymbolProperties_Impl(object):
##    def _get(self):
##        u'Style of the symbol.'
##        #return pStyle
##    def _set(self, pStyle):
##        u'Style of the symbol.'
##    Style = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Width of the symbol.'
##        #return pWidth
##    def _set(self, pWidth):
##        u'Width of the symbol.'
##    Width = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Color of the symbol fill.'
##        #return pColor
##    def _set(self, pColor):
##        u'Color of the symbol fill.'
##    Color = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Height of the symbol.'
##        #return pHeight
##    def _set(self, pHeight):
##        u'Height of the symbol.'
##    Height = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if symbol is visible.'
##        #return b
##    def _set(self, b):
##        u'Indicates if symbol is visible.'
##    Visible = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def BorderProperties(self):
##        u'Properties of the symbol border.'
##        #return ppPenProps
##

class IDimensionClassExtension2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the dimension class extension for a dimension feature class.'
    _iid_ = GUID('{7402BFE1-F2F1-22E9-052F-735EBBC50AC2}')
    _idlflags_ = ['oleautomation']
IDimensionClassExtension2._methods_ = [
    COMMETHOD(['propget', helpstring(u'The native display transformation of the dimension feature class, centered on the given graphic.')], HRESULT, 'NativeTransformation',
              ( ['in'], POINTER(IDimensionGraphic), 'pGraphic' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ITransformation)), 'transformation' )),
]
################################################################
## code template for IDimensionClassExtension2 implementation
##class IDimensionClassExtension2_Impl(object):
##    @property
##    def NativeTransformation(self, pGraphic):
##        u'The native display transformation of the dimension feature class, centered on the given graphic.'
##        #return transformation
##

class MapEvents2(CoClass):
    u'Map events. Note: this class only provides access to the IMapEvents2 outbound interface.'
    _reg_clsid_ = GUID('{CECD552C-54EF-4930-934E-81771A2DB5DF}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
MapEvents2._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown]
MapEvents2._outgoing_interfaces_ = [IMapEvents2]

class IMapServerInit2(IMapServerInit):
    _case_insensitive_ = True
    u'Provides access to additional members that support initializing a map server.'
    _iid_ = GUID('{ED28C857-2CA2-47CC-8CAD-5C90BC2FC012}')
    _idlflags_ = ['oleautomation']
IMapServerInit2._methods_ = [
    COMMETHOD(['propput', helpstring(u'The physical directory for cache files.')], HRESULT, 'PhysicalCacheDirectory',
              ( ['in'], BSTR, 'pCacheDir' )),
    COMMETHOD(['propget', helpstring(u'The physical directory for cache files.')], HRESULT, 'PhysicalCacheDirectory',
              ( ['retval', 'out'], POINTER(BSTR), 'pCacheDir' )),
    COMMETHOD(['propput', helpstring(u'The virtual directory for cache files.')], HRESULT, 'VirtualCacheDirectory',
              ( ['in'], BSTR, 'pVirtualCacheDir' )),
    COMMETHOD(['propget', helpstring(u'The virtual directory for cache files.')], HRESULT, 'VirtualCacheDirectory',
              ( ['retval', 'out'], POINTER(BSTR), 'pVirtualCacheDir' )),
    COMMETHOD(['propput', helpstring(u'The parent directory for cache files.')], HRESULT, 'SOMCacheDirectory',
              ( ['in'], BSTR, 'pCacheDir' )),
    COMMETHOD(['propget', helpstring(u'The parent directory for cache files.')], HRESULT, 'SOMCacheDirectory',
              ( ['retval', 'out'], POINTER(BSTR), 'pCacheDir' )),
    COMMETHOD(['propget', helpstring(u'The parent virtual directory for cache files.')], HRESULT, 'SOMVirtualCacheDirectory',
              ( ['retval', 'out'], POINTER(BSTR), 'pParentVirtualCacheDir' )),
]
################################################################
## code template for IMapServerInit2 implementation
##class IMapServerInit2_Impl(object):
##    def _get(self):
##        u'The parent directory for cache files.'
##        #return pCacheDir
##    def _set(self, pCacheDir):
##        u'The parent directory for cache files.'
##    SOMCacheDirectory = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SOMVirtualCacheDirectory(self):
##        u'The parent virtual directory for cache files.'
##        #return pParentVirtualCacheDir
##
##    def _get(self):
##        u'The physical directory for cache files.'
##        #return pCacheDir
##    def _set(self, pCacheDir):
##        u'The physical directory for cache files.'
##    PhysicalCacheDirectory = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The virtual directory for cache files.'
##        #return pVirtualCacheDir
##    def _set(self, pVirtualCacheDir):
##        u'The virtual directory for cache files.'
##    VirtualCacheDirectory = property(_get, _set, doc = _set.__doc__)
##

IAttributeTable._methods_ = [
    COMMETHOD(['propget', helpstring(u'The attribute table.')], HRESULT, 'AttributeTable',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable)), 'ppTable' )),
]
################################################################
## code template for IAttributeTable implementation
##class IAttributeTable_Impl(object):
##    @property
##    def AttributeTable(self):
##        u'The attribute table.'
##        #return ppTable
##

class ILayerStatus(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u"Provides access to feedback on the status of a layer's time-consuming actions."
    _iid_ = GUID('{ED4721D6-3E0D-4110-9324-8CCE8D2801EF}')
    _idlflags_ = ['oleautomation']
ILayerStatus._methods_ = [
    COMMETHOD(['propput', helpstring(u'The Step Progressor used by the layer to show progress on actions such as drawing.')], HRESULT, 'StepProgressor',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStepProgressor), 'rhs' )),
]
################################################################
## code template for ILayerStatus implementation
##class ILayerStatus_Impl(object):
##    def _set(self, rhs):
##        u'The Step Progressor used by the layer to show progress on actions such as drawing.'
##    StepProgressor = property(fset = _set, doc = _set.__doc__)
##

class ILabelEngineLayerProperties(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to some of the main properties for labeling features.'
    _iid_ = GUID('{01004143-0D1C-11D2-A26F-080009B6F22B}')
    _idlflags_ = ['oleautomation']
IOverposterOptions._methods_ = [
    COMMETHOD([helpstring(u'Provides the option to translate a label based on the current overposter properties.')], HRESULT, 'TranslateLabel',
              ( ['in'], POINTER(ILabelEngineLayerProperties), 'Layerprops' ),
              ( ['in'], BSTR, 'labelIn' ),
              ( ['out'], POINTER(VARIANT_BOOL), 'translated' ),
              ( ['out'], POINTER(BSTR), 'labelOut' )),
    COMMETHOD([helpstring(u'Provides the option to stack a label based on the current overposter properties.')], HRESULT, 'StackLabel',
              ( ['in'], POINTER(ILabelEngineLayerProperties), 'Layerprops' ),
              ( ['in'], VARIANT_BOOL, 'forceStack' ),
              ( ['in'], BSTR, 'labelIn' ),
              ( ['out'], POINTER(VARIANT_BOOL), 'stacked' ),
              ( ['out'], POINTER(BSTR), 'labelOut' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether labels are returned from cache or placement run.')], HRESULT, 'EnableLabelCache',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether labels are returned from cache or placement run.')], HRESULT, 'EnableLabelCache',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the unplaced labels are drawn.')], HRESULT, 'EnableDrawUnplaced',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the unplaced labels are drawn.')], HRESULT, 'EnableDrawUnplaced',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propputref', helpstring(u'The color with which unplaced labels are drawn.')], HRESULT, 'UnplacedLabelColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'The color with which unplaced labels are drawn.')], HRESULT, 'UnplacedLabelColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'The angle at which the label orientation is switched.')], HRESULT, 'InvertedLabelTolerance',
              ( ['in'], c_double, 'Angle' )),
    COMMETHOD(['propget', helpstring(u'The angle at which the label orientation is switched.')], HRESULT, 'InvertedLabelTolerance',
              ( ['retval', 'out'], POINTER(c_double), 'Angle' )),
    COMMETHOD(['propput', helpstring(u'Indicates if labels are rotated if the data frame is rotated.')], HRESULT, 'RotateLabelWithDataFrame',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates if labels are rotated if the data frame is rotated.')], HRESULT, 'RotateLabelWithDataFrame',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
]
################################################################
## code template for IOverposterOptions implementation
##class IOverposterOptions_Impl(object):
##    def _get(self):
##        u'Indicates if labels are rotated if the data frame is rotated.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if labels are rotated if the data frame is rotated.'
##    RotateLabelWithDataFrame = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The angle at which the label orientation is switched.'
##        #return Angle
##    def _set(self, Angle):
##        u'The angle at which the label orientation is switched.'
##    InvertedLabelTolerance = property(_get, _set, doc = _set.__doc__)
##
##    def StackLabel(self, Layerprops, forceStack, labelIn):
##        u'Provides the option to stack a label based on the current overposter properties.'
##        #return stacked, labelOut
##
##    def _get(self):
##        u'Indicates whether labels are returned from cache or placement run.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether labels are returned from cache or placement run.'
##    EnableLabelCache = property(_get, _set, doc = _set.__doc__)
##
##    def TranslateLabel(self, Layerprops, labelIn):
##        u'Provides the option to translate a label based on the current overposter properties.'
##        #return translated, labelOut
##
##    def _get(self):
##        u'Indicates whether the unplaced labels are drawn.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether the unplaced labels are drawn.'
##    EnableDrawUnplaced = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def UnplacedLabelColor(self, Color):
##        u'The color with which unplaced labels are drawn.'
##        #return 
##

class MapServerConfigurationFactory(CoClass):
    u'MapServer Configuration Factory Class.'
    _reg_clsid_ = GUID('{AA76F8B9-B4BB-40AF-972B-94EB031CD74D}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
MapServerConfigurationFactory._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._18F2FC71_6B30_45B9_B101_037A8B868B66_0_10_2.IConfigurationFactory, comtypes.gen._18F2FC71_6B30_45B9_B101_037A8B868B66_0_10_2.IConfigurationFactory2, comtypes.gen._18F2FC71_6B30_45B9_B101_037A8B868B66_0_10_2.IConfigurationFactory3, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]

class DimensionLayer(CoClass):
    u'A collection of properties for a dimension layer.'
    _reg_clsid_ = GUID('{F1E27E32-0CA7-11D4-80D7-00C04F601565}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IFeatureLayerDefinition(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that define a subset of the features from the underlying feature class.'
    _iid_ = GUID('{3E1608CF-FF34-11D1-ADF1-080009EC732A}')
    _idlflags_ = ['oleautomation']
class IFeatureLayerDefinition2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides additional access to members that define a subset of the features from the underlying feature class.'
    _iid_ = GUID('{ED242088-B822-4E8A-8260-CDCD1DA3044B}')
    _idlflags_ = ['oleautomation']
class IBarrierProperties2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control how objects (text, features, graphics) act as barriers for labelling with the cancel tracker.'
    _iid_ = GUID('{E2D07333-5605-4EA6-87BD-7830927452E0}')
    _idlflags_ = ['oleautomation']
class IFeatureLayer2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to additional members that control common aspects of a feature layer.'
    _iid_ = GUID('{95E82D50-E720-48B5-808D-E45FA9CF1218}')
    _idlflags_ = ['oleautomation']
class ITemporaryLayer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to temporary layer properties.'
    _iid_ = GUID('{FCEFF094-8E6A-4972-9BB4-429C71B07289}')
    _idlflags_ = ['oleautomation']
DimensionLayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDimensionLayer, IFeatureLayer, ILayer, IFeatureSelection, IFeatureLayerDefinition, IFeatureLayerDefinition2, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeoDataset, IBarrierProperties, IBarrierProperties2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySupport, ILayerFields, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITableFields, IIdentify, IDataLayer, ILayerDrawingProperties, ILayerInfo, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayAdmin, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayFilterManager, IHyperlinkContainer, IHotlinkContainer, IHotlinkMacro, IHotlinkExpression, ILayerEffects, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataset, IRelationshipClassCollection, IRelationshipClassCollectionEdit, IDisplayTable, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IConnectionPointContainer, IDisplayRelationshipClass, IFeatureLayer2, IFind, IIdentify2, ILayer2, ILayerExtensions, ILayerPosition, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IMapLevel, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IObjectClassSchemaEvents, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITableCapabilities, ITableSelection, IAttributeTable, IDataLayer2, IPublishLayer, ITableDefinition, ILayerGeneralProperties, ILayerSymbologyExtents, ISecureLayer, ITemporaryLayer, IHTMLPopupInfo, IHTMLPopupInfo2, IHTMLPopupIdentify, IHTMLPopupIdentify2, IDisplayString, IIdentifyDisplay, IOrderedLayerFields, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspaceEvents]
DimensionLayer._outgoing_interfaces_ = [ILayerEvents, IFeatureLayerSelectionEvents]

class ICartoItemInfoHelper(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to helper functions to sync metadata inside documents and xml file.'
    _iid_ = GUID('{23830A19-B72D-4DC5-ABCF-94D81E763FEF}')
    _idlflags_ = []
class IDocumentInfo2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the Document Info.'
    _iid_ = GUID('{D3E5C54F-2A84-11D4-9FF2-00C04F6BC78E}')
    _idlflags_ = ['oleautomation']
ICartoItemInfoHelper._methods_ = [
    COMMETHOD([helpstring(u'Initialize the DocumentInfo from the content of metadata.')], HRESULT, 'Metadata2DocumentInfo',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet), 'pPropertySet' ),
              ( ['in'], POINTER(IDocumentInfo2), 'pDocuInfo' )),
    COMMETHOD([helpstring(u'transfer DocumentInfo to ItemInfo as used by Search solution.')], HRESULT, 'UpdateItemInfoFromDocumentInfo',
              ( ['in'], POINTER(IDocumentInfo2), 'pDocInfo' )),
    COMMETHOD([helpstring(u'Update the metadata inside documents.')], HRESULT, 'UpdateDocumentInfo',
              ( ['in'], BSTR, 'Path' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet), 'pPropertySet' )),
]
################################################################
## code template for ICartoItemInfoHelper implementation
##class ICartoItemInfoHelper_Impl(object):
##    def UpdateItemInfoFromDocumentInfo(self, pDocInfo):
##        u'transfer DocumentInfo to ItemInfo as used by Search solution.'
##        #return 
##
##    def Metadata2DocumentInfo(self, pPropertySet, pDocuInfo):
##        u'Initialize the DocumentInfo from the content of metadata.'
##        #return 
##
##    def UpdateDocumentInfo(self, Path, pPropertySet):
##        u'Update the metadata inside documents.'
##        #return 
##

class GraphicFeatureServerLP(CoClass):
    u'Graphic Feature Server LAN Proxy.'
    _reg_clsid_ = GUID('{8D7F6923-E939-419F-934A-0FAB21C18AD9}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
GraphicFeatureServerLP._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._746F6817_89BB_4490_9829_83CA25FD505A_0_10_2.IAGSServerObject2, comtypes.gen._746F6817_89BB_4490_9829_83CA25FD505A_0_10_2.IAGSServerObject, IGraphicFeatureServer, IGraphicFeatureServer2, IGraphicFeatureServerReplication]

ILegendInfo._methods_ = [
    COMMETHOD(['propget', helpstring(u'Number of legend groups contained by the object.')], HRESULT, 'LegendGroupCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'Legend group at the specified index.')], HRESULT, 'LegendGroup',
              ( [], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(ILegendGroup)), 'LegendGroup' )),
    COMMETHOD(['propget', helpstring(u'Optional.  Defines legend formatting for layer rendered with this object.')], HRESULT, 'LegendItem',
              ( ['retval', 'out'], POINTER(POINTER(ILegendItem)), 'Format' )),
    COMMETHOD(['propget', helpstring(u'Indicates if symbols are graduated.')], HRESULT, 'SymbolsAreGraduated',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'SymbolsAreGraduated' )),
    COMMETHOD(['propput', helpstring(u'Indicates if symbols are graduated.')], HRESULT, 'SymbolsAreGraduated',
              ( ['in'], VARIANT_BOOL, 'SymbolsAreGraduated' )),
]
################################################################
## code template for ILegendInfo implementation
##class ILegendInfo_Impl(object):
##    def _get(self):
##        u'Indicates if symbols are graduated.'
##        #return SymbolsAreGraduated
##    def _set(self, SymbolsAreGraduated):
##        u'Indicates if symbols are graduated.'
##    SymbolsAreGraduated = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def LegendGroup(self, Index):
##        u'Legend group at the specified index.'
##        #return LegendGroup
##
##    @property
##    def LegendItem(self):
##        u'Optional.  Defines legend formatting for layer rendered with this object.'
##        #return Format
##
##    @property
##    def LegendGroupCount(self):
##        u'Number of legend groups contained by the object.'
##        #return Count
##

IMapServer._methods_ = [
    COMMETHOD(['propget', helpstring(u"A set of name-value pairs for properties set for the map document (mxd only). These properties are string values set in the map document's Map Properties dialog and include: Title, Subject, Author, Category, Keywords and Comments.")], HRESULT, 'DocumentInfo',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet)), 'props' )),
    COMMETHOD(['propget', helpstring(u'The number of maps (data frames) in the document.')], HRESULT, 'MapCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'Name of the map (data frame) as indicated by the index. The first beginning with 0.')], HRESULT, 'MapName',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(BSTR), 'MapName' )),
    COMMETHOD(['propget', helpstring(u"Name of the document's active map (data frame).")], HRESULT, 'DefaultMapName',
              ( ['retval', 'out'], POINTER(BSTR), 'MapName' )),
    COMMETHOD([helpstring(u'Returns information about a map (data frame).')], HRESULT, 'GetServerInfo',
              ( ['in'], BSTR, 'MapName' ),
              ( ['retval', 'out'], POINTER(POINTER(IMapServerInfo)), 'serverInfo' )),
    COMMETHOD([helpstring(u"Generates an image of the map, based on the given map description, and writes the image to a specified file on disk. Supported file types are: 'bmp', 'jpg', 'tif', 'png'/'png8', 'png24', 'emf', 'ps', 'pdf', 'ai', 'gif', and 'svg'/'svgz'.")], HRESULT, 'ExportMapImage',
              ( ['in'], POINTER(IMapDescription), 'mapDesc' ),
              ( ['in'], POINTER(IImageDescription), 'imageDesc' ),
              ( ['retval', 'out'], POINTER(POINTER(IMapImage)), 'MapImage' )),
    COMMETHOD([helpstring(u'Returns a collection of Map Server Find Result objects that contain the given search string. If LayerIDs is Nothing/Null or empty, all layers are searched.')], HRESULT, 'Find',
              ( ['in'], POINTER(IMapDescription), 'mapDesc' ),
              ( ['in'], POINTER(IImageDisplay), 'MapImage' ),
              ( ['in'], BSTR, 'searchString' ),
              ( ['in'], VARIANT_BOOL, 'Contains' ),
              ( ['in'], BSTR, 'searchFields' ),
              ( ['in'], esriFindOption, 'option' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'layerIds' ),
              ( ['retval', 'out'], POINTER(POINTER(IMapServerFindResults)), 'findResults' )),
    COMMETHOD([helpstring(u'Returns a collection of Map Server Identify Result objects at the given location. If LayerIDs is Nothing/Null or empty, all layers are searched.')], HRESULT, 'Identify',
              ( ['in'], POINTER(IMapDescription), 'mapDesc' ),
              ( ['in'], POINTER(IImageDisplay), 'MapImage' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'searchShape' ),
              ( ['in'], c_int, 'Tolerance' ),
              ( ['in'], esriIdentifyOption, 'option' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'layerIds' ),
              ( ['retval', 'out'], POINTER(POINTER(IMapServerIdentifyResults)), 'identifyResult' )),
    COMMETHOD([helpstring(u'Returns the count of the features that meet the query filter selection criteria for the specified layer.')], HRESULT, 'QueryFeatureCount',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], c_int, 'LayerID' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'Filter' ),
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD([helpstring(u'Returns the IDs of the features that meet the query filter selection criteria for the specified layer.')], HRESULT, 'QueryFeatureIDs',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], c_int, 'LayerID' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'Filter' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFIDSet)), 'FIDs' )),
    COMMETHOD([helpstring(u'Returns a record set of features that meet the query filter selection criteria for the specified layer.')], HRESULT, 'QueryFeatureData',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], c_int, 'LayerID' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'Filter' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRecordSet)), 'recordSet' )),
    COMMETHOD([helpstring(u'Returns a collection of Map Server Hyperlink objects for the specified layers. Only hyperlinks of visible layers are returned. If LayerIDs is Nothing/Null or empty, all layers are searched.')], HRESULT, 'QueryHyperlinks',
              ( ['in'], POINTER(IMapDescription), 'mapDesc' ),
              ( ['in'], POINTER(IImageDisplay), 'MapImage' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'layerIds' ),
              ( ['retval', 'out'], POINTER(POINTER(IMapServerHyperlinks)), 'hyperlinks' )),
    COMMETHOD([helpstring(u'Computes the scale of the specified map, at the given map extent, for an image with the given size.')], HRESULT, 'ComputeScale',
              ( ['in'], POINTER(IMapDescription), 'mapDesc' ),
              ( ['in'], POINTER(IImageDisplay), 'mapDisplay' ),
              ( ['retval', 'out'], POINTER(c_double), 'Scale' )),
    COMMETHOD([helpstring(u'Computes the distance between two points on the specified map. The result is in the map units of the specified map.')], HRESULT, 'ComputeDistance',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'fromPoint' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'toPoint' ),
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits, 'Units' ),
              ( ['retval', 'out'], POINTER(c_double), 'Distance' )),
    COMMETHOD([helpstring(u'Converts a screen location to a map coordinate.')], HRESULT, 'ToMapPoints',
              ( ['in'], POINTER(IMapDescription), 'MapDescription' ),
              ( ['in'], POINTER(IImageDisplay), 'mapDisplay' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'screenXValues' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'screenYValues' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPointCollection)), 'mapPoints' )),
    COMMETHOD([helpstring(u'Converts a map coordinate to a screen location.')], HRESULT, 'FromMapPoints',
              ( ['in'], POINTER(IMapDescription), 'MapDescription' ),
              ( ['in'], POINTER(IImageDisplay), 'mapDisplay' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPointCollection), 'mapPoints' ),
              ( ['in', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray)), 'screenXValues' ),
              ( ['in', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray)), 'screenYValues' )),
    COMMETHOD([helpstring(u'Returns a collection of Map Server Legend Info objects for the specified layers. If layerIDs is Nothing/Null or empty, legend information for all layers is returned.')], HRESULT, 'GetLegendInfo',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'layerIds' ),
              ( ['in'], POINTER(IMapServerLegendPatch), 'patch' ),
              ( ['in'], POINTER(IImageType), 'imgType' ),
              ( ['retval', 'out'], POINTER(POINTER(IMapServerLegendInfos)), 'legendInfos' )),
    COMMETHOD([helpstring(u'Returns the SQL syntax information for the specified layer.')], HRESULT, 'GetSQLSyntaxInfo',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], c_int, 'LayerID' ),
              ( ['retval', 'out'], POINTER(POINTER(ISQLSyntaxInfo)), 'sqlInfo' )),
    COMMETHOD([helpstring(u'The supported image return types for the map server.  A value of esriImageReturnMimeData means that only MIME data is supported.  Otherwise, either MIME data or URLs are supported.')], HRESULT, 'GetSupportedImageReturnTypes',
              ( ['retval', 'out'], POINTER(esriImageReturnType), 'retType' )),
]
################################################################
## code template for IMapServer implementation
##class IMapServer_Impl(object):
##    def ExportMapImage(self, mapDesc, imageDesc):
##        u"Generates an image of the map, based on the given map description, and writes the image to a specified file on disk. Supported file types are: 'bmp', 'jpg', 'tif', 'png'/'png8', 'png24', 'emf', 'ps', 'pdf', 'ai', 'gif', and 'svg'/'svgz'."
##        #return MapImage
##
##    def GetLegendInfo(self, MapName, layerIds, patch, imgType):
##        u'Returns a collection of Map Server Legend Info objects for the specified layers. If layerIDs is Nothing/Null or empty, legend information for all layers is returned.'
##        #return legendInfos
##
##    def GetServerInfo(self, MapName):
##        u'Returns information about a map (data frame).'
##        #return serverInfo
##
##    def FromMapPoints(self, MapDescription, mapDisplay, mapPoints):
##        u'Converts a map coordinate to a screen location.'
##        #return screenXValues, screenYValues
##
##    @property
##    def DefaultMapName(self):
##        u"Name of the document's active map (data frame)."
##        #return MapName
##
##    def GetSQLSyntaxInfo(self, MapName, LayerID):
##        u'Returns the SQL syntax information for the specified layer.'
##        #return sqlInfo
##
##    def ComputeDistance(self, MapName, fromPoint, toPoint, Units):
##        u'Computes the distance between two points on the specified map. The result is in the map units of the specified map.'
##        #return Distance
##
##    def QueryHyperlinks(self, mapDesc, MapImage, layerIds):
##        u'Returns a collection of Map Server Hyperlink objects for the specified layers. Only hyperlinks of visible layers are returned. If LayerIDs is Nothing/Null or empty, all layers are searched.'
##        #return hyperlinks
##
##    @property
##    def MapCount(self):
##        u'The number of maps (data frames) in the document.'
##        #return Count
##
##    @property
##    def MapName(self, Index):
##        u'Name of the map (data frame) as indicated by the index. The first beginning with 0.'
##        #return MapName
##
##    def QueryFeatureCount(self, MapName, LayerID, Filter):
##        u'Returns the count of the features that meet the query filter selection criteria for the specified layer.'
##        #return Count
##
##    def QueryFeatureIDs(self, MapName, LayerID, Filter):
##        u'Returns the IDs of the features that meet the query filter selection criteria for the specified layer.'
##        #return FIDs
##
##    def Identify(self, mapDesc, MapImage, searchShape, Tolerance, option, layerIds):
##        u'Returns a collection of Map Server Identify Result objects at the given location. If LayerIDs is Nothing/Null or empty, all layers are searched.'
##        #return identifyResult
##
##    def QueryFeatureData(self, MapName, LayerID, Filter):
##        u'Returns a record set of features that meet the query filter selection criteria for the specified layer.'
##        #return recordSet
##
##    @property
##    def DocumentInfo(self):
##        u"A set of name-value pairs for properties set for the map document (mxd only). These properties are string values set in the map document's Map Properties dialog and include: Title, Subject, Author, Category, Keywords and Comments."
##        #return props
##
##    def ComputeScale(self, mapDesc, mapDisplay):
##        u'Computes the scale of the specified map, at the given map extent, for an image with the given size.'
##        #return Scale
##
##    def GetSupportedImageReturnTypes(self):
##        u'The supported image return types for the map server.  A value of esriImageReturnMimeData means that only MIME data is supported.  Otherwise, either MIME data or URLs are supported.'
##        #return retType
##
##    def Find(self, mapDesc, MapImage, searchString, Contains, searchFields, option, layerIds):
##        u'Returns a collection of Map Server Find Result objects that contain the given search string. If LayerIDs is Nothing/Null or empty, all layers are searched.'
##        #return findResults
##
##    def ToMapPoints(self, MapDescription, mapDisplay, screenXValues, screenYValues):
##        u'Converts a screen location to a map coordinate.'
##        #return mapPoints
##

class GraphicFeatureServerObjectDescription(CoClass):
    u'Server object description for the GraphicFeatureServer.'
    _reg_clsid_ = GUID('{E42811BA-839F-4A97-9F73-7BDB05C9D166}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
GraphicFeatureServerObjectDescription._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._746F6817_89BB_4490_9829_83CA25FD505A_0_10_2.IServerObjectDescription]

IIdentify._methods_ = [
    COMMETHOD([helpstring(u'Identifies objects at the specified location.')], HRESULT, 'Identify',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'pGeom' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'ppArrObj' )),
]
################################################################
## code template for IIdentify implementation
##class IIdentify_Impl(object):
##    def Identify(self, pGeom):
##        u'Identifies objects at the specified location.'
##        #return ppArrObj
##

class IMapReader(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that support reading a map document.'
    _iid_ = GUID('{F543891F-8C43-487D-839E-83D1CD4AF33C}')
    _idlflags_ = ['oleautomation']
IMapReader._methods_ = [
    COMMETHOD([helpstring(u'Opens an mxd or pmf file stored at the specified path.')], HRESULT, 'Open',
              ( ['in'], BSTR, 'FilePath' )),
    COMMETHOD([helpstring(u'Clears out all of the map objects in memory.  The client must call the Open method again before attempting any other operations.')], HRESULT, 'Close'),
    COMMETHOD(['propget', helpstring(u'The number of maps (data frames) in the document.')], HRESULT, 'MapCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The map object at the specified index.')], HRESULT, 'Map',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IMap)), 'Map' )),
    COMMETHOD(['propget', helpstring(u'The PageLayout object.')], HRESULT, 'PageLayout',
              ( ['retval', 'out'], POINTER(POINTER(IPageLayout)), 'layout' )),
    COMMETHOD(['propget', helpstring(u'The thumbnail stored in the map document.')], HRESULT, 'Thumbnail',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IPictureDisp)), 'Picture' )),
    COMMETHOD(['propget', helpstring(u"A set of name-value pairs for properties set for the map document (mxd only). These properties are string values set in the map document's Map Properties dialog and include: Title, Subject, Author, Category, Keywords and Comments.")], HRESULT, 'DocumentInfo',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet)), 'props' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the internal objects of the map can be exposed to external clients.')], HRESULT, 'AccessInternalObjects',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'bAccess' )),
]
################################################################
## code template for IMapReader implementation
##class IMapReader_Impl(object):
##    @property
##    def PageLayout(self):
##        u'The PageLayout object.'
##        #return layout
##
##    @property
##    def Map(self, Index):
##        u'The map object at the specified index.'
##        #return Map
##
##    @property
##    def AccessInternalObjects(self):
##        u'Indicates whether the internal objects of the map can be exposed to external clients.'
##        #return bAccess
##
##    @property
##    def MapCount(self):
##        u'The number of maps (data frames) in the document.'
##        #return Count
##
##    @property
##    def DocumentInfo(self):
##        u"A set of name-value pairs for properties set for the map document (mxd only). These properties are string values set in the map document's Map Properties dialog and include: Title, Subject, Author, Category, Keywords and Comments."
##        #return props
##
##    def Close(self):
##        u'Clears out all of the map objects in memory.  The client must call the Open method again before attempting any other operations.'
##        #return 
##
##    def Open(self, FilePath):
##        u'Opens an mxd or pmf file stored at the specified path.'
##        #return 
##
##    @property
##    def Thumbnail(self):
##        u'The thumbnail stored in the map document.'
##        #return Picture
##

ISecureLayer._methods_ = [
    COMMETHOD([helpstring(u'Removes the passwords from the layer used to access data, and forces a reconnection to the data.')], HRESULT, 'ClearPassword',
              ( [], VARIANT_BOOL, 'bForceReconnect' )),
]
################################################################
## code template for ISecureLayer implementation
##class ISecureLayer_Impl(object):
##    def ClearPassword(self, bForceReconnect):
##        u'Removes the passwords from the layer used to access data, and forces a reconnection to the data.'
##        #return 
##

class ILegendClass(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the legend/TOC entry for a renderer class.'
    _iid_ = GUID('{167C5E9E-AF20-11D1-8817-080009EC732A}')
    _idlflags_ = ['oleautomation']
ILegendGroup._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if the group is displayed.')], HRESULT, 'Visible',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Visible' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the group is displayed.')], HRESULT, 'Visible',
              ( ['in'], VARIANT_BOOL, 'Visible' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the group can be edited. Default is editable.')], HRESULT, 'Editable',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Editable' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the group can be edited. Default is editable.')], HRESULT, 'Editable',
              ( ['in'], VARIANT_BOOL, 'Editable' )),
    COMMETHOD(['propget', helpstring(u'String heading.')], HRESULT, 'Heading',
              ( ['retval', 'out'], POINTER(BSTR), 'Heading' )),
    COMMETHOD(['propput', helpstring(u'String heading.')], HRESULT, 'Heading',
              ( ['in'], BSTR, 'Heading' )),
    COMMETHOD(['propget', helpstring(u'Number of legend classes in the group.')], HRESULT, 'ClassCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'Legend class at the specified index.')], HRESULT, 'Class',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(ILegendClass)), 'LegendClass' )),
    COMMETHOD([helpstring(u'Adds a new legend class to the group at the end of list.')], HRESULT, 'AddClass',
              ( ['in'], POINTER(ILegendClass), 'LegendClass' )),
    COMMETHOD([helpstring(u'Inserts a new legend class into the group at the specified index.')], HRESULT, 'InsertClass',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(ILegendClass), 'LegendClass' )),
    COMMETHOD([helpstring(u'Removes the legend class from the group at the specified index.')], HRESULT, 'RemoveClass',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all classes from the group.')], HRESULT, 'ClearClasses'),
]
################################################################
## code template for ILegendGroup implementation
##class ILegendGroup_Impl(object):
##    @property
##    def ClassCount(self):
##        u'Number of legend classes in the group.'
##        #return Count
##
##    def RemoveClass(self, Index):
##        u'Removes the legend class from the group at the specified index.'
##        #return 
##
##    def _get(self):
##        u'Indicates if the group can be edited. Default is editable.'
##        #return Editable
##    def _set(self, Editable):
##        u'Indicates if the group can be edited. Default is editable.'
##    Editable = property(_get, _set, doc = _set.__doc__)
##
##    def InsertClass(self, Index, LegendClass):
##        u'Inserts a new legend class into the group at the specified index.'
##        #return 
##
##    def _get(self):
##        u'String heading.'
##        #return Heading
##    def _set(self, Heading):
##        u'String heading.'
##    Heading = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the group is displayed.'
##        #return Visible
##    def _set(self, Visible):
##        u'Indicates if the group is displayed.'
##    Visible = property(_get, _set, doc = _set.__doc__)
##
##    def ClearClasses(self):
##        u'Removes all classes from the group.'
##        #return 
##
##    @property
##    def Class(self, Index):
##        u'Legend class at the specified index.'
##        #return LegendClass
##
##    def AddClass(self, LegendClass):
##        u'Adds a new legend class to the group at the end of list.'
##        #return 
##

class LayerTablesAndDataMappings(CoClass):
    u'A class used to keep layers/ tables and data mappings together.'
    _reg_clsid_ = GUID('{5816BAAD-B5FD-4597-BD9E-E8D8772F47D5}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
LayerTablesAndDataMappings._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILayerTablesAndDataMappings, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]

ISelectionLayerDefinition._methods_ = [
    COMMETHOD([helpstring(u'Creates a new feature layer from the existing layer based on the current selection and the specified query expression.')], HRESULT, 'CreateSelectionLayer',
              ( ['in'], BSTR, 'LayerName' ),
              ( ['in'], VARIANT_BOOL, 'useCurrentSelection' ),
              ( ['in'], BSTR, 'joinTableNames' ),
              ( ['in'], BSTR, 'Expression' ),
              ( ['retval', 'out'], POINTER(POINTER(IFeatureLayer)), 'Layer' )),
]
################################################################
## code template for ISelectionLayerDefinition implementation
##class ISelectionLayerDefinition_Impl(object):
##    def CreateSelectionLayer(self, LayerName, useCurrentSelection, joinTableNames, Expression):
##        u'Creates a new feature layer from the existing layer based on the current selection and the specified query expression.'
##        #return Layer
##

IAnnotateProperties._methods_ = [
]
################################################################
## code template for IAnnotateProperties implementation
##class IAnnotateProperties_Impl(object):

IFieldInfoSet._methods_ = [
    COMMETHOD(['propget', helpstring(u'The number of fields.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'Extended field information for the field at the specified index.')], HRESULT, 'FieldInfo',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFieldInfo)), 'FieldInfo' )),
    COMMETHOD(['propget', helpstring(u'The field name at the specified index.')], HRESULT, 'FieldName',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(BSTR), 'FieldName' )),
    COMMETHOD([helpstring(u'Adds the given fieldinfo to the end of the set.')], HRESULT, 'Add',
              ( ['in'], BSTR, 'FieldName' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFieldInfo), 'FieldInfo' )),
    COMMETHOD([helpstring(u'Empties the set of fields.')], HRESULT, 'Clear'),
    COMMETHOD([helpstring(u'Returns the fieldinfo for the field with the specified name.')], HRESULT, 'Find',
              ( ['in'], BSTR, 'FieldName' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFieldInfo)), 'FieldInfo' )),
    COMMETHOD([helpstring(u'Removes the field with the specified name.')], HRESULT, 'Remove',
              ( ['in'], BSTR, 'FieldName' )),
]
################################################################
## code template for IFieldInfoSet implementation
##class IFieldInfoSet_Impl(object):
##    @property
##    def Count(self):
##        u'The number of fields.'
##        #return Count
##
##    def Clear(self):
##        u'Empties the set of fields.'
##        #return 
##
##    def Remove(self, FieldName):
##        u'Removes the field with the specified name.'
##        #return 
##
##    def Add(self, FieldName, FieldInfo):
##        u'Adds the given fieldinfo to the end of the set.'
##        #return 
##
##    @property
##    def FieldName(self, Index):
##        u'The field name at the specified index.'
##        #return FieldName
##
##    @property
##    def FieldInfo(self, Index):
##        u'Extended field information for the field at the specified index.'
##        #return FieldInfo
##
##    def Find(self, FieldName):
##        u'Returns the fieldinfo for the field with the specified name.'
##        #return FieldInfo
##

class GFSReplicationAgent(CoClass):
    u'A class used to perform replica operations.'
    _reg_clsid_ = GUID('{1FDBBACC-D4A4-4B74-A0A1-08A38D7873AB}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IGFSReplicationAgent(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to replica operations.'
    _iid_ = GUID('{8817F586-70F1-45F3-BB6C-87A9910FC10F}')
    _idlflags_ = ['oleautomation']
GFSReplicationAgent._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGFSReplicationAgent, comtypes.gen._A7C74158_1062_4664_B404_8694D490FCD1_0_10_2.IReplicationAgentCancelControl, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IConnectionPointContainer]
GFSReplicationAgent._outgoing_interfaces_ = [comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureProgress]


# values for enumeration 'esriOverposterCaps'
esriCanPlaceLabels = 0
esriCanPlaceSymbols = 1
esriCanAddBarriers = 2
esriOverposterCaps = c_int # enum
IOverposter._methods_ = [
    COMMETHOD(['propget', helpstring(u'The number of classes.')], HRESULT, 'NumClasses',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'Overposter capabilities for the specified layer.')], HRESULT, 'Capabilities',
              ( ['in'], POINTER(ILayer), 'Layer' ),
              ( ['retval', 'out'], POINTER(esriOverposterCaps), 'caps' )),
    COMMETHOD([helpstring(u'Adds a class to the overposter and specifies its properties.')], HRESULT, 'AddClass',
              ( ['in'], POINTER(IOverposterLayerProperties), 'props' ),
              ( ['retval', 'out'], POINTER(c_int), 'ClassIndex' )),
    COMMETHOD([helpstring(u'Inserts a class at a specific index, and specifies its peoperties.')], HRESULT, 'InsertClass',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(IOverposterLayerProperties), 'props' )),
    COMMETHOD([helpstring(u'Removes the class at the specified index from the overposter.')], HRESULT, 'RemoveClass',
              ( ['in'], c_int, 'ClassIndex' )),
    COMMETHOD([helpstring(u'Removes all classes from the overposter.')], HRESULT, 'ResetClasses'),
    COMMETHOD([helpstring(u'Initializes the overposter for drawing into the specified area of the map display.')], HRESULT, 'Initialize',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'Extent' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' )),
    COMMETHOD([helpstring(u'Adds a barrier object that placed objects must avoid.')], HRESULT, 'AddBarriers',
              ( ['in'], esriBasicOverposterWeight, 'Weight' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometryCollection), 'Barriers' )),
    COMMETHOD([helpstring(u'Adds a label object to be placed.')], HRESULT, 'AddLabel',
              ( ['in'], c_int, 'ClassIndex' ),
              ( ['in'], BSTR, 'Label' ),
              ( ['in'], c_double, 'Width' ),
              ( ['in'], c_double, 'Height' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'ControlShape' ),
              ( ['in'], c_int, 'FeatureId' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol), 'Symbol' )),
    COMMETHOD([helpstring(u'Adds a curved label object to be placed.')], HRESULT, 'AddCurvedLabel',
              ( ['in'], c_int, 'ClassIndex' ),
              ( ['in'], BSTR, 'Label' ),
              ( ['in'], VARIANT, 'widths' ),
              ( ['in'], VARIANT, 'ascents' ),
              ( ['in'], VARIANT, 'descents' ),
              ( ['in'], c_double, 'fontHeight' ),
              ( ['in'], c_double, 'fontDescent' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'ControlShape' ),
              ( ['in'], c_int, 'FeatureId' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol), 'Symbol' )),
    COMMETHOD([helpstring(u'Adds a symbol to be placed.')], HRESULT, 'AddSymbol',
              ( ['in'], c_int, 'ClassIndex' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol), 'Symbol' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'Geometry' ),
              ( ['in'], c_int, 'FeatureId' )),
    COMMETHOD([helpstring(u'Places objects using the overposter.')], HRESULT, 'PlaceObjects'),
    COMMETHOD([helpstring(u'The next object that was successfully placed.')], HRESULT, 'NextPlaced',
              ( ['in', 'out'], POINTER(POINTER(IPlacedObject)), 'Object' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'TrackCancel' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStepProgressor), 'StepProgressor' )),
    COMMETHOD([helpstring(u'The next object that was not successfully placed.')], HRESULT, 'NextUnplaced',
              ( ['out'], POINTER(POINTER(IPlacedObject)), 'Object' )),
    COMMETHOD([helpstring(u'The next object that was not used.')], HRESULT, 'NextUnused',
              ( ['out'], POINTER(POINTER(IPlacedObject)), 'Object' )),
    COMMETHOD([helpstring(u'Releases current objects from memory.')], HRESULT, 'ReleaseResources'),
    COMMETHOD(['propget', helpstring(u'The number of unplaced labels. Only valid after calling PlaceObjects.')], HRESULT, 'NumberOfUnplacedLabels',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The number of unplaced labels. Only valid after calling PlaceObjects.')], HRESULT, 'NumberOfPlacedLabels',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
]
################################################################
## code template for IOverposter implementation
##class IOverposter_Impl(object):
##    @property
##    def NumberOfPlacedLabels(self):
##        u'The number of unplaced labels. Only valid after calling PlaceObjects.'
##        #return Count
##
##    def ResetClasses(self):
##        u'Removes all classes from the overposter.'
##        #return 
##
##    def AddCurvedLabel(self, ClassIndex, Label, widths, ascents, descents, fontHeight, fontDescent, ControlShape, FeatureId, Symbol):
##        u'Adds a curved label object to be placed.'
##        #return 
##
##    def PlaceObjects(self):
##        u'Places objects using the overposter.'
##        #return 
##
##    def NextUnplaced(self):
##        u'The next object that was not successfully placed.'
##        #return Object
##
##    def NextPlaced(self, TrackCancel, StepProgressor):
##        u'The next object that was successfully placed.'
##        #return Object
##
##    def AddBarriers(self, Weight, Barriers):
##        u'Adds a barrier object that placed objects must avoid.'
##        #return 
##
##    def RemoveClass(self, ClassIndex):
##        u'Removes the class at the specified index from the overposter.'
##        #return 
##
##    def InsertClass(self, Index, props):
##        u'Inserts a class at a specific index, and specifies its peoperties.'
##        #return 
##
##    def NextUnused(self):
##        u'The next object that was not used.'
##        #return Object
##
##    def AddLabel(self, ClassIndex, Label, Width, Height, ControlShape, FeatureId, Symbol):
##        u'Adds a label object to be placed.'
##        #return 
##
##    @property
##    def Capabilities(self, Layer):
##        u'Overposter capabilities for the specified layer.'
##        #return caps
##
##    def Initialize(self, Extent, Display):
##        u'Initializes the overposter for drawing into the specified area of the map display.'
##        #return 
##
##    @property
##    def NumberOfUnplacedLabels(self):
##        u'The number of unplaced labels. Only valid after calling PlaceObjects.'
##        #return Count
##
##    @property
##    def NumClasses(self):
##        u'The number of classes.'
##        #return Count
##
##    def ReleaseResources(self):
##        u'Releases current objects from memory.'
##        #return 
##
##    def AddSymbol(self, ClassIndex, Symbol, Geometry, FeatureId):
##        u'Adds a symbol to be placed.'
##        #return 
##
##    def AddClass(self, props):
##        u'Adds a class to the overposter and specifies its properties.'
##        #return ClassIndex
##

IDisplayRelationshipClass._methods_ = [
    COMMETHOD(['propget', helpstring(u'Join type for the most recent join performed.')], HRESULT, 'JoinType',
              ( ['retval', 'out'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriJoinType), 'pJoinType' )),
    COMMETHOD(['propget', helpstring(u'Relationship class that defines how the tables are joined.')], HRESULT, 'RelationshipClass',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRelationshipClass)), 'relClass' )),
    COMMETHOD([helpstring(u'Sets a join based on the specified relationship class and join type.')], HRESULT, 'DisplayRelationshipClass',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRelationshipClass), 'relClass' ),
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriJoinType, 'JoinType' )),
]
################################################################
## code template for IDisplayRelationshipClass implementation
##class IDisplayRelationshipClass_Impl(object):
##    @property
##    def JoinType(self):
##        u'Join type for the most recent join performed.'
##        #return pJoinType
##
##    @property
##    def RelationshipClass(self):
##        u'Relationship class that defines how the tables are joined.'
##        #return relClass
##
##    def DisplayRelationshipClass(self, relClass, JoinType):
##        u'Sets a join based on the specified relationship class and join type.'
##        #return 
##

ILicensedComponent._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates whether the the component is valid.')], HRESULT, 'ValidLicense',
              ( ['in'], POINTER(VARIANT), 'initData' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'ret' )),
]
################################################################
## code template for ILicensedComponent implementation
##class ILicensedComponent_Impl(object):
##    @property
##    def ValidLicense(self, initData):
##        u'Indicates whether the the component is valid.'
##        #return ret
##

ILineLabelPlacementPriorities._methods_ = [
    COMMETHOD(['propget', helpstring(u'Label position priority for above and before the line.')], HRESULT, 'AboveBefore',
              ( ['retval', 'out'], POINTER(c_int), 'Priority' )),
    COMMETHOD(['propput', helpstring(u'Label position priority for above and before the line.')], HRESULT, 'AboveBefore',
              ( ['in'], c_int, 'Priority' )),
    COMMETHOD(['propget', helpstring(u'Label position priority for above and at the start of the line.')], HRESULT, 'AboveStart',
              ( ['retval', 'out'], POINTER(c_int), 'Priority' )),
    COMMETHOD(['propput', helpstring(u'Label position priority for above and at the start of the line.')], HRESULT, 'AboveStart',
              ( ['in'], c_int, 'Priority' )),
    COMMETHOD(['propget', helpstring(u'Label position priority for above and along the line.')], HRESULT, 'AboveAlong',
              ( ['retval', 'out'], POINTER(c_int), 'Priority' )),
    COMMETHOD(['propput', helpstring(u'Label position priority for above and along the line.')], HRESULT, 'AboveAlong',
              ( ['in'], c_int, 'Priority' )),
    COMMETHOD(['propget', helpstring(u'Label position priority for above and at the end of the line.')], HRESULT, 'AboveEnd',
              ( ['retval', 'out'], POINTER(c_int), 'Priority' )),
    COMMETHOD(['propput', helpstring(u'Label position priority for above and at the end of the line.')], HRESULT, 'AboveEnd',
              ( ['in'], c_int, 'Priority' )),
    COMMETHOD(['propget', helpstring(u'Label position priority for above and after the line.')], HRESULT, 'AboveAfter',
              ( ['retval', 'out'], POINTER(c_int), 'Priority' )),
    COMMETHOD(['propput', helpstring(u'Label position priority for above and after the line.')], HRESULT, 'AboveAfter',
              ( ['in'], c_int, 'Priority' )),
    COMMETHOD(['propget', helpstring(u'Label position priority for in the center and before the line.')], HRESULT, 'CenterBefore',
              ( ['retval', 'out'], POINTER(c_int), 'Priority' )),
    COMMETHOD(['propput', helpstring(u'Label position priority for in the center and before the line.')], HRESULT, 'CenterBefore',
              ( ['in'], c_int, 'Priority' )),
    COMMETHOD(['propget', helpstring(u'Label position priority for in the center and at the start of the line.')], HRESULT, 'CenterStart',
              ( ['retval', 'out'], POINTER(c_int), 'Priority' )),
    COMMETHOD(['propput', helpstring(u'Label position priority for in the center and at the start of the line.')], HRESULT, 'CenterStart',
              ( ['in'], c_int, 'Priority' )),
    COMMETHOD(['propget', helpstring(u'Label position priority for in the center and along the line.')], HRESULT, 'CenterAlong',
              ( ['retval', 'out'], POINTER(c_int), 'Priority' )),
    COMMETHOD(['propput', helpstring(u'Label position priority for in the center and along the line.')], HRESULT, 'CenterAlong',
              ( ['in'], c_int, 'Priority' )),
    COMMETHOD(['propget', helpstring(u'Label position priority for in the center and at the end of the line.')], HRESULT, 'CenterEnd',
              ( ['retval', 'out'], POINTER(c_int), 'Priority' )),
    COMMETHOD(['propput', helpstring(u'Label position priority for in the center and at the end of the line.')], HRESULT, 'CenterEnd',
              ( ['in'], c_int, 'Priority' )),
    COMMETHOD(['propget', helpstring(u'Label position priority for in the center and after the line.')], HRESULT, 'CenterAfter',
              ( ['retval', 'out'], POINTER(c_int), 'Priority' )),
    COMMETHOD(['propput', helpstring(u'Label position priority for in the center and after the line.')], HRESULT, 'CenterAfter',
              ( ['in'], c_int, 'Priority' )),
    COMMETHOD(['propget', helpstring(u'Label position priority for below and before the line.')], HRESULT, 'BelowBefore',
              ( ['retval', 'out'], POINTER(c_int), 'Priority' )),
    COMMETHOD(['propput', helpstring(u'Label position priority for below and before the line.')], HRESULT, 'BelowBefore',
              ( ['in'], c_int, 'Priority' )),
    COMMETHOD(['propget', helpstring(u'Label position priority for below and at the start of the line.')], HRESULT, 'BelowStart',
              ( ['retval', 'out'], POINTER(c_int), 'Priority' )),
    COMMETHOD(['propput', helpstring(u'Label position priority for below and at the start of the line.')], HRESULT, 'BelowStart',
              ( ['in'], c_int, 'Priority' )),
    COMMETHOD(['propget', helpstring(u'Label position priority for below and along the line.')], HRESULT, 'BelowAlong',
              ( ['retval', 'out'], POINTER(c_int), 'Priority' )),
    COMMETHOD(['propput', helpstring(u'Label position priority for below and along the line.')], HRESULT, 'BelowAlong',
              ( ['in'], c_int, 'Priority' )),
    COMMETHOD(['propget', helpstring(u'Label position priority for below and at the end of the line.')], HRESULT, 'BelowEnd',
              ( ['retval', 'out'], POINTER(c_int), 'Priority' )),
    COMMETHOD(['propput', helpstring(u'Label position priority for below and at the end of the line.')], HRESULT, 'BelowEnd',
              ( ['in'], c_int, 'Priority' )),
    COMMETHOD(['propget', helpstring(u'Label position priority for below and after the line.')], HRESULT, 'BelowAfter',
              ( ['retval', 'out'], POINTER(c_int), 'Priority' )),
    COMMETHOD(['propput', helpstring(u'Label position priority for below and after the line.')], HRESULT, 'BelowAfter',
              ( ['in'], c_int, 'Priority' )),
]
################################################################
## code template for ILineLabelPlacementPriorities implementation
##class ILineLabelPlacementPriorities_Impl(object):
##    def _get(self):
##        u'Label position priority for above and at the end of the line.'
##        #return Priority
##    def _set(self, Priority):
##        u'Label position priority for above and at the end of the line.'
##    AboveEnd = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Label position priority for below and along the line.'
##        #return Priority
##    def _set(self, Priority):
##        u'Label position priority for below and along the line.'
##    BelowAlong = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Label position priority for above and after the line.'
##        #return Priority
##    def _set(self, Priority):
##        u'Label position priority for above and after the line.'
##    AboveAfter = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Label position priority for below and at the end of the line.'
##        #return Priority
##    def _set(self, Priority):
##        u'Label position priority for below and at the end of the line.'
##    BelowEnd = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Label position priority for in the center and along the line.'
##        #return Priority
##    def _set(self, Priority):
##        u'Label position priority for in the center and along the line.'
##    CenterAlong = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Label position priority for in the center and before the line.'
##        #return Priority
##    def _set(self, Priority):
##        u'Label position priority for in the center and before the line.'
##    CenterBefore = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Label position priority for in the center and at the start of the line.'
##        #return Priority
##    def _set(self, Priority):
##        u'Label position priority for in the center and at the start of the line.'
##    CenterStart = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Label position priority for below and at the start of the line.'
##        #return Priority
##    def _set(self, Priority):
##        u'Label position priority for below and at the start of the line.'
##    BelowStart = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Label position priority for below and before the line.'
##        #return Priority
##    def _set(self, Priority):
##        u'Label position priority for below and before the line.'
##    BelowBefore = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Label position priority for above and at the start of the line.'
##        #return Priority
##    def _set(self, Priority):
##        u'Label position priority for above and at the start of the line.'
##    AboveStart = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Label position priority for in the center and after the line.'
##        #return Priority
##    def _set(self, Priority):
##        u'Label position priority for in the center and after the line.'
##    CenterAfter = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Label position priority for below and after the line.'
##        #return Priority
##    def _set(self, Priority):
##        u'Label position priority for below and after the line.'
##    BelowAfter = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Label position priority for above and along the line.'
##        #return Priority
##    def _set(self, Priority):
##        u'Label position priority for above and along the line.'
##    AboveAlong = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Label position priority for above and before the line.'
##        #return Priority
##    def _set(self, Priority):
##        u'Label position priority for above and before the line.'
##    AboveBefore = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Label position priority for in the center and at the end of the line.'
##        #return Priority
##    def _set(self, Priority):
##        u'Label position priority for in the center and at the end of the line.'
##    CenterEnd = property(_get, _set, doc = _set.__doc__)
##

ILayerGeneralProperties._methods_ = [
    COMMETHOD(['propget', helpstring(u'Last minimum scale setting used by layer.')], HRESULT, 'LastMinimumScale',
              ( ['retval', 'out'], POINTER(c_double), 'MinScale' )),
    COMMETHOD(['propget', helpstring(u'Last maximum scale setting used by layer.')], HRESULT, 'LastMaximumScale',
              ( ['retval', 'out'], POINTER(c_double), 'MaxScale' )),
    COMMETHOD(['propget', helpstring(u'Description for the layer.')], HRESULT, 'LayerDescription',
              ( ['retval', 'out'], POINTER(BSTR), 'Text' )),
    COMMETHOD(['propput', helpstring(u'Description for the layer.')], HRESULT, 'LayerDescription',
              ( ['in'], BSTR, 'Text' )),
]
################################################################
## code template for ILayerGeneralProperties implementation
##class ILayerGeneralProperties_Impl(object):
##    @property
##    def LastMinimumScale(self):
##        u'Last minimum scale setting used by layer.'
##        #return MinScale
##
##    def _get(self):
##        u'Description for the layer.'
##        #return Text
##    def _set(self, Text):
##        u'Description for the layer.'
##    LayerDescription = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def LastMaximumScale(self):
##        u'Last maximum scale setting used by layer.'
##        #return MaxScale
##

IMaplexRotationProperties2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Defines alignment options for a rotated label.')], HRESULT, 'AlignmentType',
              ( ['retval', 'out'], POINTER(esriMaplexRotationAlignmentType), 'Type' )),
    COMMETHOD(['propput', helpstring(u'Defines alignment options for a rotated label.')], HRESULT, 'AlignmentType',
              ( ['in'], esriMaplexRotationAlignmentType, 'Type' )),
    COMMETHOD(['propget', helpstring(u'Additional angle to add to the value obtained from the field.')], HRESULT, 'AdditionalAngle',
              ( ['retval', 'out'], POINTER(c_int), 'Value' )),
    COMMETHOD(['propput', helpstring(u'Additional angle to add to the value obtained from the field.')], HRESULT, 'AdditionalAngle',
              ( ['in'], c_int, 'Value' )),
]
################################################################
## code template for IMaplexRotationProperties2 implementation
##class IMaplexRotationProperties2_Impl(object):
##    def _get(self):
##        u'Defines alignment options for a rotated label.'
##        #return Type
##    def _set(self, Type):
##        u'Defines alignment options for a rotated label.'
##    AlignmentType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Additional angle to add to the value obtained from the field.'
##        #return Value
##    def _set(self, Value):
##        u'Additional angle to add to the value obtained from the field.'
##    AdditionalAngle = property(_get, _set, doc = _set.__doc__)
##

class IDataSourceHelperMapDocument(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that help repair/replace data sources at the Map Document Level.'
    _iid_ = GUID('{BD16C25F-5AC2-4E6D-8E34-BCC5FEB395DD}')
    _idlflags_ = ['oleautomation']
class IMapDocument(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the reading and writing of map document files.'
    _iid_ = GUID('{5366451C-A001-4179-B8CB-E8F014628A44}')
    _idlflags_ = ['oleautomation']
IDataSourceHelperMapDocument._methods_ = [
    COMMETHOD([helpstring(u'Replaces all layers having matching workspace path names with the new workspace name object.')], HRESULT, 'ReplaceWorkspaceName',
              ( ['in'], POINTER(IMapDocument), 'pMapDocument' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspaceName), 'pOldWorkspaceName' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspaceName), 'pNewWorkspaceName' ),
              ( ['in'], VARIANT_BOOL, 'validate' )),
    COMMETHOD([helpstring(u'Repairs the specified layer and attempt to repair all other broken layers with same workspace path name as the specified layer.')], HRESULT, 'Repair',
              ( ['in'], POINTER(IMapDocument), 'pMapDocument' ),
              ( ['in'], POINTER(IDataLayer), 'pDataLayer' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName), 'pName' ),
              ( ['in'], VARIANT_BOOL, 'validate' )),
    COMMETHOD([helpstring(u'String version of ReplaceWorkspaceName. Also does find and replace of parts of the workspace path name.')], HRESULT, 'FindAndReplaceWorkspaceNamePath',
              ( ['in'], POINTER(IMapDocument), 'pMapDocument' ),
              ( ['in'], BSTR, 'oldWorkspaceName' ),
              ( ['in'], BSTR, 'newWorkspaceName' ),
              ( ['in'], VARIANT_BOOL, 'validate' )),
]
################################################################
## code template for IDataSourceHelperMapDocument implementation
##class IDataSourceHelperMapDocument_Impl(object):
##    def Repair(self, pMapDocument, pDataLayer, pName, validate):
##        u'Repairs the specified layer and attempt to repair all other broken layers with same workspace path name as the specified layer.'
##        #return 
##
##    def FindAndReplaceWorkspaceNamePath(self, pMapDocument, oldWorkspaceName, newWorkspaceName, validate):
##        u'String version of ReplaceWorkspaceName. Also does find and replace of parts of the workspace path name.'
##        #return 
##
##    def ReplaceWorkspaceName(self, pMapDocument, pOldWorkspaceName, pNewWorkspaceName, validate):
##        u'Replaces all layers having matching workspace path names with the new workspace name object.'
##        #return 
##

class IScaleText(IMapSurround):
    _case_insensitive_ = True
    u'Provides access to members that control the scale text.'
    _iid_ = GUID('{7A3F91F0-B9E3-11D1-8756-0000F8751720}')
    _idlflags_ = ['oleautomation']
IScaleText._methods_ = [
    COMMETHOD(['propget', helpstring(u'The scale text.')], HRESULT, 'Text',
              ( ['retval', 'out'], POINTER(BSTR), 'Text' )),
    COMMETHOD(['propput', helpstring(u'Symbol of the scale text.')], HRESULT, 'Symbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'Symbol of the scale text.')], HRESULT, 'Symbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol)), 'Symbol' )),
    COMMETHOD(['propput', helpstring(u'Style of the scale text.')], HRESULT, 'Style',
              ( ['in'], esriScaleTextStyleEnum, 'Style' )),
    COMMETHOD(['propget', helpstring(u'Style of the scale text.')], HRESULT, 'Style',
              ( ['retval', 'out'], POINTER(esriScaleTextStyleEnum), 'Style' )),
    COMMETHOD(['propput', helpstring(u'Format of the scale text. Style must be set to custom.')], HRESULT, 'Format',
              ( ['in'], BSTR, 'Format' )),
    COMMETHOD(['propget', helpstring(u'Format of the scale text. Style must be set to custom.')], HRESULT, 'Format',
              ( ['retval', 'out'], POINTER(BSTR), 'Format' )),
    COMMETHOD(['propput', helpstring(u'Page units of the scale text. Style must be set to custom.')], HRESULT, 'PageUnits',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits, 'Units' )),
    COMMETHOD(['propget', helpstring(u'Page units of the scale text. Style must be set to custom.')], HRESULT, 'PageUnits',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits), 'Units' )),
    COMMETHOD(['propput', helpstring(u'Map units of the scale text. Style must be set to custom.')], HRESULT, 'MapUnits',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits, 'Units' )),
    COMMETHOD(['propget', helpstring(u'Map units of the scale text. Style must be set to custom.')], HRESULT, 'MapUnits',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits), 'Units' )),
    COMMETHOD(['propput', helpstring(u'Page unit label of the scale text. Style must be set to relative.')], HRESULT, 'PageUnitLabel',
              ( ['in'], BSTR, 'Label' )),
    COMMETHOD(['propget', helpstring(u'Page unit label of the scale text. Style must be set to relative.')], HRESULT, 'PageUnitLabel',
              ( ['retval', 'out'], POINTER(BSTR), 'Label' )),
    COMMETHOD(['propput', helpstring(u'Map unit label of the scale text. Style must be set to relative.')], HRESULT, 'MapUnitLabel',
              ( ['in'], BSTR, 'Label' )),
    COMMETHOD(['propget', helpstring(u'Map unit label of the scale text. Style must be set to relative.')], HRESULT, 'MapUnitLabel',
              ( ['retval', 'out'], POINTER(BSTR), 'Label' )),
    COMMETHOD(['propput', helpstring(u'Number formatting.')], HRESULT, 'NumberFormat',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.INumberFormat), 'Format' )),
    COMMETHOD(['propget', helpstring(u'Number formatting.')], HRESULT, 'NumberFormat',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.INumberFormat)), 'Format' )),
]
################################################################
## code template for IScaleText implementation
##class IScaleText_Impl(object):
##    def _get(self):
##        u'Style of the scale text.'
##        #return Style
##    def _set(self, Style):
##        u'Style of the scale text.'
##    Style = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Number formatting.'
##        #return Format
##    def _set(self, Format):
##        u'Number formatting.'
##    NumberFormat = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Format of the scale text. Style must be set to custom.'
##        #return Format
##    def _set(self, Format):
##        u'Format of the scale text. Style must be set to custom.'
##    Format = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Text(self):
##        u'The scale text.'
##        #return Text
##
##    def _get(self):
##        u'Symbol of the scale text.'
##        #return Symbol
##    def _set(self, Symbol):
##        u'Symbol of the scale text.'
##    Symbol = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Map units of the scale text. Style must be set to custom.'
##        #return Units
##    def _set(self, Units):
##        u'Map units of the scale text. Style must be set to custom.'
##    MapUnits = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Map unit label of the scale text. Style must be set to relative.'
##        #return Label
##    def _set(self, Label):
##        u'Map unit label of the scale text. Style must be set to relative.'
##    MapUnitLabel = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Page units of the scale text. Style must be set to custom.'
##        #return Units
##    def _set(self, Units):
##        u'Page units of the scale text. Style must be set to custom.'
##    PageUnits = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Page unit label of the scale text. Style must be set to relative.'
##        #return Label
##    def _set(self, Label):
##        u'Page unit label of the scale text. Style must be set to relative.'
##    PageUnitLabel = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'esriGridSquareLabelStyleEnum'
esriGridSquareLabelCorners = 0
esriGridSquareLabelCenter = 1
esriGridSquareLabelStyleEnum = c_int # enum
class IMgrsGrid(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the properties of an MGRS grid.'
    _iid_ = GUID('{46240E54-B526-47F3-80A4-A7E2F2E1C262}')
    _idlflags_ = ['oleautomation']
IMgrsGrid._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if the square identifiers should be displayed.')], HRESULT, 'ShowGridSquareIdentifiers',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Show' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the square identifiers should be displayed.')], HRESULT, 'ShowGridSquareIdentifiers',
              ( ['in'], VARIANT_BOOL, 'Show' )),
    COMMETHOD(['propget', helpstring(u'The font used to display the grid square labels.')], HRESULT, 'GridSquareLabelFont',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IFontDisp)), 'Font' )),
    COMMETHOD(['propput', helpstring(u'The font used to display the grid square labels.')], HRESULT, 'GridSquareLabelFont',
              ( ['in'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IFontDisp), 'Font' )),
    COMMETHOD(['propget', helpstring(u'The font size used to display the grid square labels.')], HRESULT, 'GridSquareLabelSize',
              ( ['retval', 'out'], POINTER(c_double), 'Size' )),
    COMMETHOD(['propput', helpstring(u'The font size used to display the grid square labels.')], HRESULT, 'GridSquareLabelSize',
              ( ['in'], c_double, 'Size' )),
    COMMETHOD(['propget', helpstring(u'The color used to display the grid square labels.')], HRESULT, 'GridSquareLabelColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'The color used to display the grid square labels.')], HRESULT, 'GridSquareLabelColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'The style used to display the grid square labels.')], HRESULT, 'GridSquareLabelStyle',
              ( ['retval', 'out'], POINTER(esriGridSquareLabelStyleEnum), 'Style' )),
    COMMETHOD(['propput', helpstring(u'The style used to display the grid square labels.')], HRESULT, 'GridSquareLabelStyle',
              ( ['in'], esriGridSquareLabelStyleEnum, 'Style' )),
    COMMETHOD(['propget', helpstring(u'The line symbol used to display the boundaries of the grid squares.')], HRESULT, 'GridSquareBoundarySymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ILineSymbol)), 'Symbol' )),
    COMMETHOD(['propput', helpstring(u'The line symbol used to display the boundaries of the grid squares.')], HRESULT, 'GridSquareBoundarySymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ILineSymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'The line symbol used to show interior grid ticks.')], HRESULT, 'InteriorTickSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ILineSymbol)), 'Symbol' )),
    COMMETHOD(['propput', helpstring(u'The line symbol used to show interior grid ticks.')], HRESULT, 'InteriorTickSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ILineSymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'The length of the interior grid ticks.')], HRESULT, 'InteriorTickLength',
              ( ['retval', 'out'], POINTER(c_double), 'lengthPts' )),
    COMMETHOD(['propput', helpstring(u'The length of the interior grid ticks.')], HRESULT, 'InteriorTickLength',
              ( ['in'], c_double, 'lengthPts' )),
]
################################################################
## code template for IMgrsGrid implementation
##class IMgrsGrid_Impl(object):
##    def _get(self):
##        u'The font used to display the grid square labels.'
##        #return Font
##    def _set(self, Font):
##        u'The font used to display the grid square labels.'
##    GridSquareLabelFont = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The style used to display the grid square labels.'
##        #return Style
##    def _set(self, Style):
##        u'The style used to display the grid square labels.'
##    GridSquareLabelStyle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The line symbol used to show interior grid ticks.'
##        #return Symbol
##    def _set(self, Symbol):
##        u'The line symbol used to show interior grid ticks.'
##    InteriorTickSymbol = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The color used to display the grid square labels.'
##        #return Color
##    def _set(self, Color):
##        u'The color used to display the grid square labels.'
##    GridSquareLabelColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The font size used to display the grid square labels.'
##        #return Size
##    def _set(self, Size):
##        u'The font size used to display the grid square labels.'
##    GridSquareLabelSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the square identifiers should be displayed.'
##        #return Show
##    def _set(self, Show):
##        u'Indicates if the square identifiers should be displayed.'
##    ShowGridSquareIdentifiers = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The length of the interior grid ticks.'
##        #return lengthPts
##    def _set(self, lengthPts):
##        u'The length of the interior grid ticks.'
##    InteriorTickLength = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The line symbol used to display the boundaries of the grid squares.'
##        #return Symbol
##    def _set(self, Symbol):
##        u'The line symbol used to display the boundaries of the grid squares.'
##    GridSquareBoundarySymbol = property(_get, _set, doc = _set.__doc__)
##

class ILegendClassFormat(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control formatting information for a legend class.'
    _iid_ = GUID('{52AA5BC2-CB21-11D0-87F9-080009EC732A}')
    _idlflags_ = ['oleautomation']
ILegendClass._methods_ = [
    COMMETHOD(['propget', helpstring(u'Legend class symbol.')], HRESULT, 'Symbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol)), 'Symbol' )),
    COMMETHOD(['propputref', helpstring(u'Legend class symbol.')], HRESULT, 'Symbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'Legend class label.')], HRESULT, 'Label',
              ( ['retval', 'out'], POINTER(BSTR), 'Label' )),
    COMMETHOD(['propput', helpstring(u'Legend class label.')], HRESULT, 'Label',
              ( ['in'], BSTR, 'Label' )),
    COMMETHOD(['propget', helpstring(u'Legend class description.')], HRESULT, 'Description',
              ( ['retval', 'out'], POINTER(BSTR), 'Label' )),
    COMMETHOD(['propput', helpstring(u'Legend class description.')], HRESULT, 'Description',
              ( ['in'], BSTR, 'Label' )),
    COMMETHOD(['propget', helpstring(u'Optional. If non-null, then layer specifies class formatting information.')], HRESULT, 'Format',
              ( ['retval', 'out'], POINTER(POINTER(ILegendClassFormat)), 'Format' )),
    COMMETHOD(['propput', helpstring(u'Optional. If non-null, then layer specifies class formatting information.')], HRESULT, 'Format',
              ( ['in'], POINTER(ILegendClassFormat), 'Format' )),
]
################################################################
## code template for ILegendClass implementation
##class ILegendClass_Impl(object):
##    def Symbol(self, Symbol):
##        u'Legend class symbol.'
##        #return 
##
##    def _get(self):
##        u'Optional. If non-null, then layer specifies class formatting information.'
##        #return Format
##    def _set(self, Format):
##        u'Optional. If non-null, then layer specifies class formatting information.'
##    Format = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Legend class description.'
##        #return Label
##    def _set(self, Label):
##        u'Legend class description.'
##    Description = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Legend class label.'
##        #return Label
##    def _set(self, Label):
##        u'Legend class label.'
##    Label = property(_get, _set, doc = _set.__doc__)
##

class RasterUniqueValueRenderer(CoClass):
    u'A renderer for rasters with unique values.'
    _reg_clsid_ = GUID('{0842B595-4F2F-11D2-9F43-00C04F8ECE3D}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
RasterUniqueValueRenderer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterUniqueValueRenderer, IRasterRenderer, IRasterRenderer2, IRasterRendererInfo, IRasterRendererColorRamp, IRasterDisplayProps, IIdentify, ILegendInfo, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayAdmin, IRasterRendererClassInfo, IRasterRendererUniqueValues, IDisplayTableExchange, IRasterRendererUpdate, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize]

class IFeatureServiceLayerEditExtension(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    _iid_ = GUID('{436A366E-57B0-4D08-9A9E-A4495A3B6ACF}')
    _idlflags_ = ['oleautomation']
IFeatureServiceLayerEditExtension._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The feature service plug in feature class for display.')], HRESULT, 'PlugInFeatureClassName',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName), 'pFeatureClassName' )),
    COMMETHOD(['propget', helpstring(u'The feature service plug in feature class for display.')], HRESULT, 'PlugInFeatureClassName',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName)), 'pFeatureClassName' )),
    COMMETHOD(['propputref', helpstring(u'The feature service plug in table for display.')], HRESULT, 'PlugInTableName',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName), 'pTableName' )),
    COMMETHOD(['propget', helpstring(u'The feature service plug in table for display.')], HRESULT, 'PlugInTableName',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName)), 'pTableName' )),
    COMMETHOD(['propput', helpstring(u'the Feature Service Layer ID')], HRESULT, 'LayerID',
              ( ['in'], BSTR, 'pLayerID' )),
    COMMETHOD(['propget', helpstring(u'the Feature Service Layer ID')], HRESULT, 'LayerID',
              ( ['retval', 'out'], POINTER(BSTR), 'pLayerID' )),
]
################################################################
## code template for IFeatureServiceLayerEditExtension implementation
##class IFeatureServiceLayerEditExtension_Impl(object):
##    @property
##    def PlugInFeatureClassName(self, pFeatureClassName):
##        u'The feature service plug in feature class for display.'
##        #return 
##
##    @property
##    def PlugInTableName(self, pTableName):
##        u'The feature service plug in table for display.'
##        #return 
##
##    def _get(self):
##        u'the Feature Service Layer ID'
##        #return pLayerID
##    def _set(self, pLayerID):
##        u'the Feature Service Layer ID'
##    LayerID = property(_get, _set, doc = _set.__doc__)
##

IRasterDataSourceDescription._methods_ = [
    COMMETHOD(['propget', helpstring(u'Name of the raster (including extension if a file-based raster).')], HRESULT, 'RasterName',
              ( ['retval', 'out'], POINTER(BSTR), 'RasterName' )),
    COMMETHOD(['propput', helpstring(u'Name of the raster (including extension if a file-based raster).')], HRESULT, 'RasterName',
              ( ['in'], BSTR, 'RasterName' )),
]
################################################################
## code template for IRasterDataSourceDescription implementation
##class IRasterDataSourceDescription_Impl(object):
##    def _get(self):
##        u'Name of the raster (including extension if a file-based raster).'
##        #return RasterName
##    def _set(self, RasterName):
##        u'Name of the raster (including extension if a file-based raster).'
##    RasterName = property(_get, _set, doc = _set.__doc__)
##

IBasicOverposterLayerProperties3._methods_ = [
    COMMETHOD(['propget', helpstring(u'Feature type.')], HRESULT, 'FeatureType',
              ( ['retval', 'out'], POINTER(esriBasicOverposterFeatureType), 'Type' )),
    COMMETHOD(['propput', helpstring(u'Feature type.')], HRESULT, 'FeatureType',
              ( ['in'], esriBasicOverposterFeatureType, 'Type' )),
    COMMETHOD(['propget', helpstring(u'Barrier weighting for features in the layer.')], HRESULT, 'FeatureWeight',
              ( ['retval', 'out'], POINTER(esriBasicOverposterWeight), 'Weight' )),
    COMMETHOD(['propput', helpstring(u'Barrier weighting for features in the layer.')], HRESULT, 'FeatureWeight',
              ( ['in'], esriBasicOverposterWeight, 'Weight' )),
    COMMETHOD(['propget', helpstring(u'Barrier weighting for labels in the layer.')], HRESULT, 'LabelWeight',
              ( ['retval', 'out'], POINTER(esriBasicOverposterWeight), 'Weight' )),
    COMMETHOD(['propput', helpstring(u'Barrier weighting for labels in the layer.')], HRESULT, 'LabelWeight',
              ( ['in'], esriBasicOverposterWeight, 'Weight' )),
    COMMETHOD(['propget', helpstring(u'Feature labeling option for the layer.')], HRESULT, 'NumLabelsOption',
              ( ['retval', 'out'], POINTER(esriBasicNumLabelsOption), 'option' )),
    COMMETHOD(['propput', helpstring(u'Feature labeling option for the layer.')], HRESULT, 'NumLabelsOption',
              ( ['in'], esriBasicNumLabelsOption, 'option' )),
    COMMETHOD(['propget', helpstring(u'Line label placement position options.')], HRESULT, 'LineLabelPosition',
              ( ['retval', 'out'], POINTER(POINTER(ILineLabelPosition)), 'position' )),
    COMMETHOD(['propput', helpstring(u'Line label placement position options.')], HRESULT, 'LineLabelPosition',
              ( ['in'], POINTER(ILineLabelPosition), 'position' )),
    COMMETHOD(['propget', helpstring(u'Line label placement position priority options.')], HRESULT, 'LineLabelPlacementPriorities',
              ( ['retval', 'out'], POINTER(POINTER(ILineLabelPlacementPriorities)), 'linePlacementPriorities' )),
    COMMETHOD(['propput', helpstring(u'Line label placement position priority options.')], HRESULT, 'LineLabelPlacementPriorities',
              ( ['in'], POINTER(ILineLabelPlacementPriorities), 'linePlacementPriorities' )),
    COMMETHOD(['propget', helpstring(u'Indicates if unplaced labels are generated.')], HRESULT, 'GenerateUnplacedLabels',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if unplaced labels are generated.')], HRESULT, 'GenerateUnplacedLabels',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Point label placement method.')], HRESULT, 'PointPlacementMethod',
              ( ['retval', 'out'], POINTER(esriOverposterPointPlacementMethod), 'Method' )),
    COMMETHOD(['propput', helpstring(u'Point label placement method.')], HRESULT, 'PointPlacementMethod',
              ( ['in'], esriOverposterPointPlacementMethod, 'Method' )),
    COMMETHOD(['propget', helpstring(u'Indicates if point labels are placed on top of features.')], HRESULT, 'PointPlacementOnTop',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'OnTop' )),
    COMMETHOD(['propput', helpstring(u'Indicates if point labels are placed on top of features.')], HRESULT, 'PointPlacementOnTop',
              ( ['in'], VARIANT_BOOL, 'OnTop' )),
    COMMETHOD(['propget', helpstring(u'Point label placement position priority options.')], HRESULT, 'PointPlacementPriorities',
              ( ['retval', 'out'], POINTER(POINTER(IPointPlacementPriorities)), 'PointPlacementPriorities' )),
    COMMETHOD(['propput', helpstring(u'Point label placement position priority options.')], HRESULT, 'PointPlacementPriorities',
              ( ['in'], POINTER(IPointPlacementPriorities), 'PointPlacementPriorities' )),
    COMMETHOD(['propget', helpstring(u'Point label placement angle(s).')], HRESULT, 'PointPlacementAngles',
              ( ['retval', 'out'], POINTER(VARIANT), 'angles' )),
    COMMETHOD(['propput', helpstring(u'Point label placement angle(s).')], HRESULT, 'PointPlacementAngles',
              ( ['in'], VARIANT, 'angles' )),
    COMMETHOD(['propget', helpstring(u'Label buffer ratio. A value of 1 means a buffer the size of the label height.')], HRESULT, 'BufferRatio',
              ( ['retval', 'out'], POINTER(c_double), 'BufferRatio' )),
    COMMETHOD(['propput', helpstring(u'Label buffer ratio. A value of 1 means a buffer the size of the label height.')], HRESULT, 'BufferRatio',
              ( ['in'], c_double, 'BufferRatio' )),
    COMMETHOD(['propget', helpstring(u'Offset in map units at which labels will be placed away from line features.')], HRESULT, 'LineOffset',
              ( ['retval', 'out'], POINTER(c_double), 'LineOffset' )),
    COMMETHOD(['propput', helpstring(u'Offset in map units at which labels will be placed away from line features.')], HRESULT, 'LineOffset',
              ( ['in'], c_double, 'LineOffset' )),
    COMMETHOD(['propget', helpstring(u'Maximum distance in map units the label is allowed to be away from the feature.')], HRESULT, 'MaxDistanceFromTarget',
              ( ['retval', 'out'], POINTER(c_double), 'Distance' )),
    COMMETHOD(['propput', helpstring(u'Maximum distance in map units the label is allowed to be away from the feature.')], HRESULT, 'MaxDistanceFromTarget',
              ( ['in'], c_double, 'Distance' )),
    COMMETHOD(['propget', helpstring(u'Defines the format is the rotation field in.')], HRESULT, 'RotationType',
              ( ['retval', 'out'], POINTER(esriLabelRotationType), 'Type' )),
    COMMETHOD(['propput', helpstring(u'Defines the format is the rotation field in.')], HRESULT, 'RotationType',
              ( ['in'], esriLabelRotationType, 'Type' )),
    COMMETHOD(['propget', helpstring(u'The attribute field that contains the label angle.')], HRESULT, 'RotationField',
              ( ['retval', 'out'], POINTER(BSTR), 'Field' )),
    COMMETHOD(['propput', helpstring(u'The attribute field that contains the label angle.')], HRESULT, 'RotationField',
              ( ['in'], BSTR, 'Field' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the label should be drawn perpendicular to the angle.')], HRESULT, 'PerpendicularToAngle',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the label should be drawn perpendicular to the angle.')], HRESULT, 'PerpendicularToAngle',
              ( ['in'], VARIANT_BOOL, 'flag' )),
]
################################################################
## code template for IBasicOverposterLayerProperties3 implementation
##class IBasicOverposterLayerProperties3_Impl(object):
##    def _get(self):
##        u'Line label placement position options.'
##        #return position
##    def _set(self, position):
##        u'Line label placement position options.'
##    LineLabelPosition = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Feature type.'
##        #return Type
##    def _set(self, Type):
##        u'Feature type.'
##    FeatureType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Point label placement angle(s).'
##        #return angles
##    def _set(self, angles):
##        u'Point label placement angle(s).'
##    PointPlacementAngles = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Label buffer ratio. A value of 1 means a buffer the size of the label height.'
##        #return BufferRatio
##    def _set(self, BufferRatio):
##        u'Label buffer ratio. A value of 1 means a buffer the size of the label height.'
##    BufferRatio = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Point label placement method.'
##        #return Method
##    def _set(self, Method):
##        u'Point label placement method.'
##    PointPlacementMethod = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Feature labeling option for the layer.'
##        #return option
##    def _set(self, option):
##        u'Feature labeling option for the layer.'
##    NumLabelsOption = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Point label placement position priority options.'
##        #return PointPlacementPriorities
##    def _set(self, PointPlacementPriorities):
##        u'Point label placement position priority options.'
##    PointPlacementPriorities = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Maximum distance in map units the label is allowed to be away from the feature.'
##        #return Distance
##    def _set(self, Distance):
##        u'Maximum distance in map units the label is allowed to be away from the feature.'
##    MaxDistanceFromTarget = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Defines the format is the rotation field in.'
##        #return Type
##    def _set(self, Type):
##        u'Defines the format is the rotation field in.'
##    RotationType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Barrier weighting for features in the layer.'
##        #return Weight
##    def _set(self, Weight):
##        u'Barrier weighting for features in the layer.'
##    FeatureWeight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Line label placement position priority options.'
##        #return linePlacementPriorities
##    def _set(self, linePlacementPriorities):
##        u'Line label placement position priority options.'
##    LineLabelPlacementPriorities = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether the label should be drawn perpendicular to the angle.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether the label should be drawn perpendicular to the angle.'
##    PerpendicularToAngle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Offset in map units at which labels will be placed away from line features.'
##        #return LineOffset
##    def _set(self, LineOffset):
##        u'Offset in map units at which labels will be placed away from line features.'
##    LineOffset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if point labels are placed on top of features.'
##        #return OnTop
##    def _set(self, OnTop):
##        u'Indicates if point labels are placed on top of features.'
##    PointPlacementOnTop = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Barrier weighting for labels in the layer.'
##        #return Weight
##    def _set(self, Weight):
##        u'Barrier weighting for labels in the layer.'
##    LabelWeight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if unplaced labels are generated.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if unplaced labels are generated.'
##    GenerateUnplacedLabels = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The attribute field that contains the label angle.'
##        #return Field
##    def _set(self, Field):
##        u'The attribute field that contains the label angle.'
##    RotationField = property(_get, _set, doc = _set.__doc__)
##

class IACSimpleFillSymbol(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control ArcIMS simple fill symbol.'
    _iid_ = GUID('{06A77433-FD34-4B30-A46B-BC217904AB76}')
    _idlflags_ = ['oleautomation']
IACSimpleFillSymbol._methods_ = [
    COMMETHOD(['propget', helpstring(u'The fill color.')], HRESULT, 'Color',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'The fill color.')], HRESULT, 'Color',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'The fill type.')], HRESULT, 'FillType',
              ( ['retval', 'out'], POINTER(acFillType), 'Type' )),
    COMMETHOD(['propput', helpstring(u'The fill type.')], HRESULT, 'FillType',
              ( ['in'], acFillType, 'Type' )),
    COMMETHOD(['propget', helpstring(u'The interval of the hatch fill type.')], HRESULT, 'Interval',
              ( ['retval', 'out'], POINTER(c_int), 'Interval' )),
    COMMETHOD(['propput', helpstring(u'The interval of the hatch fill type.')], HRESULT, 'Interval',
              ( ['in'], c_int, 'Interval' )),
    COMMETHOD(['propget', helpstring(u'Indicates if labels can overlap this symbol.')], HRESULT, 'Overlap',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if labels can overlap this symbol.')], HRESULT, 'Overlap',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer display the boundary or outline.')], HRESULT, 'Boundary',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the layer display the boundary or outline.')], HRESULT, 'Boundary',
              ( ['in'], VARIANT_BOOL, 'flag' )),
]
################################################################
## code template for IACSimpleFillSymbol implementation
##class IACSimpleFillSymbol_Impl(object):
##    def _get(self):
##        u'The fill color.'
##        #return Color
##    def _set(self, Color):
##        u'The fill color.'
##    Color = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The interval of the hatch fill type.'
##        #return Interval
##    def _set(self, Interval):
##        u'The interval of the hatch fill type.'
##    Interval = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The fill type.'
##        #return Type
##    def _set(self, Type):
##        u'The fill type.'
##    FillType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the layer display the boundary or outline.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if the layer display the boundary or outline.'
##    Boundary = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if labels can overlap this symbol.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if labels can overlap this symbol.'
##    Overlap = property(_get, _set, doc = _set.__doc__)
##

class BasemapSubLayer(CoClass):
    u'Wrapper for layers in the basemap.'
    _reg_clsid_ = GUID('{7374CD4D-775F-4737-88F4-D09B8D46D2B2}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IBasemapSubLayer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Wrapper for layers in the basemap.'
    _iid_ = GUID('{573411B2-F451-4DD9-AE6D-36EA6C9E77D3}')
    _idlflags_ = []
BasemapSubLayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IBasemapSubLayer, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeoDataset, ICompositeLayer, ICompositeLayer2, ILayerGeneralProperties, ILegendInfo, IIdentify, IIdentify2, IDataLayer, IDataLayer2, ILayerSymbologyExtents, ILayerInfo, ILayer2]

class IPictureNorthArrow(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the picture north arrow.'
    _iid_ = GUID('{7A3F91F7-B9E3-11D1-8756-0000F8751720}')
    _idlflags_ = ['oleautomation']
IPictureNorthArrow._methods_ = [
    COMMETHOD(['propget', helpstring(u'Picture used to draw the north arrow.')], HRESULT, 'Picture',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IPicture)), 'Picture' )),
    COMMETHOD(['propput', helpstring(u'Picture used to draw the north arrow.')], HRESULT, 'Picture',
              ( ['in'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IPicture), 'Picture' )),
]
################################################################
## code template for IPictureNorthArrow implementation
##class IPictureNorthArrow_Impl(object):
##    def _get(self):
##        u'Picture used to draw the north arrow.'
##        #return Picture
##    def _set(self, Picture):
##        u'Picture used to draw the north arrow.'
##    Picture = property(_get, _set, doc = _set.__doc__)
##

class IMapServerGeoTransformation(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the export set of geographic transformations.'
    _iid_ = GUID('{AE983588-93A2-465F-8228-0617D8D5C23B}')
    _idlflags_ = ['oleautomation']
IMapServerGeoTransformation._methods_ = [
    COMMETHOD(['propputref', helpstring(u'On-the-fly geographic transformations.')], HRESULT, 'GeoTransformation',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeoTransformation), 'transformations' )),
    COMMETHOD(['propget', helpstring(u'On-the-fly geographic transformations.')], HRESULT, 'GeoTransformation',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeoTransformation)), 'transformations' )),
]
################################################################
## code template for IMapServerGeoTransformation implementation
##class IMapServerGeoTransformation_Impl(object):
##    @property
##    def GeoTransformation(self, transformations):
##        u'On-the-fly geographic transformations.'
##        #return 
##

class IDataSourceHelperMap(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that help repair/replace data sources at the Map Level.'
    _iid_ = GUID('{A31A9A8A-3B4A-4A6E-ABBD-589296E1EC02}')
    _idlflags_ = ['oleautomation']
IDataSourceHelperMap._methods_ = [
    COMMETHOD([helpstring(u'Replaces all layers having matching workspace path names with the new workspace name object.')], HRESULT, 'ReplaceWorkspaceName',
              ( ['in'], POINTER(IBasicMap), 'pBasicMap' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspaceName), 'pOldWorkspaceName' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspaceName), 'pNewWorkspaceName' ),
              ( ['in'], VARIANT_BOOL, 'validate' )),
    COMMETHOD([helpstring(u'Repairs the specified layer and attempt to repair all other broken layers with same workspace path name as the specified layer.')], HRESULT, 'Repair',
              ( ['in'], POINTER(IBasicMap), 'pBasicMap' ),
              ( ['in'], POINTER(IDataLayer), 'pDataLayer' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName), 'pName' ),
              ( ['in'], VARIANT_BOOL, 'validate' )),
    COMMETHOD([helpstring(u'String version of ReplaceWorkspaceName; Also does find and replace of parts of the workspace path name.')], HRESULT, 'FindAndReplaceWorkspaceNamePath',
              ( ['in'], POINTER(IBasicMap), 'pBasicMap' ),
              ( ['in'], BSTR, 'oldWorkspaceName' ),
              ( ['in'], BSTR, 'newWorkspaceName' ),
              ( ['in'], VARIANT_BOOL, 'validate' )),
]
################################################################
## code template for IDataSourceHelperMap implementation
##class IDataSourceHelperMap_Impl(object):
##    def Repair(self, pBasicMap, pDataLayer, pName, validate):
##        u'Repairs the specified layer and attempt to repair all other broken layers with same workspace path name as the specified layer.'
##        #return 
##
##    def FindAndReplaceWorkspaceNamePath(self, pBasicMap, oldWorkspaceName, newWorkspaceName, validate):
##        u'String version of ReplaceWorkspaceName; Also does find and replace of parts of the workspace path name.'
##        #return 
##
##    def ReplaceWorkspaceName(self, pBasicMap, pOldWorkspaceName, pNewWorkspaceName, validate):
##        u'Replaces all layers having matching workspace path names with the new workspace name object.'
##        #return 
##

class RasterRendererMakerDefault(CoClass):
    u'A way to determine which renderer is used for the default display of a raster dataset.'
    _reg_clsid_ = GUID('{74126B8C-C743-11D4-B290-00508BCDC7C8}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IRasterRendererMaker2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that can determine the default display of a raster dataset.'
    _iid_ = GUID('{F21306EC-F028-4325-AD52-52B616B81184}')
    _idlflags_ = ['oleautomation']
RasterRendererMakerDefault._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterRendererMaker, IRasterRendererMaker2]

class IDisplayExpressionProperties(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties for generating a display string.'
    _iid_ = GUID('{A62B9EC2-5C52-4B98-B116-5EA341D4AF6D}')
    _idlflags_ = ['oleautomation']
IDisplayString._methods_ = [
    COMMETHOD(['propget', helpstring(u'Properties that describe the display expression.')], HRESULT, 'ExpressionProperties',
              ( ['retval', 'out'], POINTER(POINTER(IDisplayExpressionProperties)), 'DisplayExpressionProperties' )),
    COMMETHOD(['propputref', helpstring(u'Properties that describe the display expression.')], HRESULT, 'ExpressionProperties',
              ( ['in'], POINTER(IDisplayExpressionProperties), 'DisplayExpressionProperties' )),
    COMMETHOD([helpstring(u'Finds the display string for the given feature based on the current expression properties.')], HRESULT, 'FindDisplayString',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IObject), 'pObject' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Text' )),
]
################################################################
## code template for IDisplayString implementation
##class IDisplayString_Impl(object):
##    def ExpressionProperties(self, DisplayExpressionProperties):
##        u'Properties that describe the display expression.'
##        #return 
##
##    def FindDisplayString(self, pObject):
##        u'Finds the display string for the given feature based on the current expression properties.'
##        #return Text
##

IDisplayExpressionProperties._methods_ = [
    COMMETHOD(['propput', helpstring(u'The VBScript or JScript expression that evaluates and formats the label.')], HRESULT, 'Expression',
              ( ['in'], BSTR, 'Expression' )),
    COMMETHOD(['propget', helpstring(u'The VBScript or JScript expression that evaluates and formats the label.')], HRESULT, 'Expression',
              ( ['retval', 'out'], POINTER(BSTR), 'Expression' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the expression is simple.')], HRESULT, 'IsExpressionSimple',
              ( ['in'], VARIANT_BOOL, 'simpleExpression' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the expression is simple.')], HRESULT, 'IsExpressionSimple',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'simpleExpression' )),
    COMMETHOD(['propputref', helpstring(u'The object that interprets the expression.')], HRESULT, 'ExpressionParser',
              ( ['in'], POINTER(IAnnotationExpressionEngine), 'engine' )),
    COMMETHOD(['propget', helpstring(u'The object that interprets the expression.')], HRESULT, 'ExpressionParser',
              ( ['retval', 'out'], POINTER(POINTER(IAnnotationExpressionEngine)), 'engine' )),
]
################################################################
## code template for IDisplayExpressionProperties implementation
##class IDisplayExpressionProperties_Impl(object):
##    def _get(self):
##        u'Indicates if the expression is simple.'
##        #return simpleExpression
##    def _set(self, simpleExpression):
##        u'Indicates if the expression is simple.'
##    IsExpressionSimple = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The VBScript or JScript expression that evaluates and formats the label.'
##        #return Expression
##    def _set(self, Expression):
##        u'The VBScript or JScript expression that evaluates and formats the label.'
##    Expression = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def ExpressionParser(self, engine):
##        u'The object that interprets the expression.'
##        #return 
##

ILayerSymbologyExtents._methods_ = [
    COMMETHOD([helpstring(u'Enlarges the specified region if necessary to account for the symbology sizes.')], HRESULT, 'ExpandRegionForSymbols',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'pDisplay' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'pRegion' )),
]
################################################################
## code template for ILayerSymbologyExtents implementation
##class ILayerSymbologyExtents_Impl(object):
##    def ExpandRegionForSymbols(self, pDisplay, pRegion):
##        u'Enlarges the specified region if necessary to account for the symbology sizes.'
##        #return 
##

IMaplexDictionaries._methods_ = [
    COMMETHOD(['propget', helpstring(u'The number of dictionaries in the collection.')], HRESULT, 'DictionaryCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD([helpstring(u'Adds a dictionary to the collection.')], HRESULT, 'AddDictionary',
              ( ['in'], POINTER(IMaplexDictionary), 'dictionary' )),
    COMMETHOD([helpstring(u'Queries a dictionary from the collection.')], HRESULT, 'GetDictionary',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IMaplexDictionary)), 'dictionary' )),
    COMMETHOD([helpstring(u'Deletes the dictionary from the collection.')], HRESULT, 'RemoveDictionary',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all dictionaries from the collection.')], HRESULT, 'Clear'),
]
################################################################
## code template for IMaplexDictionaries implementation
##class IMaplexDictionaries_Impl(object):
##    def RemoveDictionary(self, Index):
##        u'Deletes the dictionary from the collection.'
##        #return 
##
##    def Clear(self):
##        u'Removes all dictionaries from the collection.'
##        #return 
##
##    def AddDictionary(self, dictionary):
##        u'Adds a dictionary to the collection.'
##        #return 
##
##    def GetDictionary(self, Index):
##        u'Queries a dictionary from the collection.'
##        #return dictionary
##
##    @property
##    def DictionaryCount(self):
##        u'The number of dictionaries in the collection.'
##        #return Count
##

ITimeTableDefinition._methods_ = [
    COMMETHOD(['propget', helpstring(u'Name of the field that has start time for a row.')], HRESULT, 'StartTimeFieldName',
              ( ['retval', 'out'], POINTER(BSTR), 'FieldName' )),
    COMMETHOD(['propput', helpstring(u'Name of the field that has start time for a row.')], HRESULT, 'StartTimeFieldName',
              ( ['in'], BSTR, 'FieldName' )),
    COMMETHOD(['propget', helpstring(u'Name of the field that has end time for a row.')], HRESULT, 'EndTimeFieldName',
              ( ['retval', 'out'], POINTER(BSTR), 'FieldName' )),
    COMMETHOD(['propput', helpstring(u'Name of the field that has end time for a row.')], HRESULT, 'EndTimeFieldName',
              ( ['in'], BSTR, 'FieldName' )),
    COMMETHOD(['propget', helpstring(u'Time value format if the field name is of the string format.')], HRESULT, 'TimeValueFormat',
              ( ['retval', 'out'], POINTER(BSTR), 'Format' )),
    COMMETHOD(['propput', helpstring(u'Time value format if the field name is of the string format.')], HRESULT, 'TimeValueFormat',
              ( ['in'], BSTR, 'Format' )),
    COMMETHOD(['propget', helpstring(u'Field that contains the rows that uniquely identifies the object whose time is being tracked.')], HRESULT, 'TrackIDFieldName',
              ( ['retval', 'out'], POINTER(BSTR), 'FieldName' )),
    COMMETHOD(['propput', helpstring(u'Field that contains the rows that uniquely identifies the object whose time is being tracked.')], HRESULT, 'TrackIDFieldName',
              ( ['in'], BSTR, 'FieldName' )),
    COMMETHOD(['propget', helpstring(u'Time reference for the data.')], HRESULT, 'TimeReference',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITimeReference)), 'nativeTimeReference' )),
    COMMETHOD(['propputref', helpstring(u'Time reference for the data.')], HRESULT, 'TimeReference',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITimeReference), 'nativeTimeReference' )),
    COMMETHOD(['propget', helpstring(u'Custom time extent during which a layer is visible.')], HRESULT, 'CustomTimeExtent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITimeExtent)), 'layerVisibiltyTime' )),
    COMMETHOD(['propputref', helpstring(u'Custom time extent during which a layer is visible.')], HRESULT, 'CustomTimeExtent',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITimeExtent), 'layerVisibiltyTime' )),
]
################################################################
## code template for ITimeTableDefinition implementation
##class ITimeTableDefinition_Impl(object):
##    def _get(self):
##        u'Time value format if the field name is of the string format.'
##        #return Format
##    def _set(self, Format):
##        u'Time value format if the field name is of the string format.'
##    TimeValueFormat = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Name of the field that has start time for a row.'
##        #return FieldName
##    def _set(self, FieldName):
##        u'Name of the field that has start time for a row.'
##    StartTimeFieldName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Name of the field that has end time for a row.'
##        #return FieldName
##    def _set(self, FieldName):
##        u'Name of the field that has end time for a row.'
##    EndTimeFieldName = property(_get, _set, doc = _set.__doc__)
##
##    def CustomTimeExtent(self, layerVisibiltyTime):
##        u'Custom time extent during which a layer is visible.'
##        #return 
##
##    def _get(self):
##        u'Field that contains the rows that uniquely identifies the object whose time is being tracked.'
##        #return FieldName
##    def _set(self, FieldName):
##        u'Field that contains the rows that uniquely identifies the object whose time is being tracked.'
##    TrackIDFieldName = property(_get, _set, doc = _set.__doc__)
##
##    def TimeReference(self, nativeTimeReference):
##        u'Time reference for the data.'
##        #return 
##

IRasterRendererUpdate._methods_ = [
    COMMETHOD([helpstring(u'Updates this raster renderer using a given raster layer.')], HRESULT, 'Update',
              ( ['in'], POINTER(IRasterLayer), 'pRasterLayer' )),
]
################################################################
## code template for IRasterRendererUpdate implementation
##class IRasterRendererUpdate_Impl(object):
##    def Update(self, pRasterLayer):
##        u'Updates this raster renderer using a given raster layer.'
##        #return 
##

class MaplexDictionaryEntry(CoClass):
    u'A single dictionary entry that specifies an abbreviation or translation.'
    _reg_clsid_ = GUID('{20664808-FE45-9018-BE1F-66EB0DEC7321}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
MaplexDictionaryEntry._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMaplexDictionaryEntry, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class SnapGuides(CoClass):
    u'Snapping Guides for use with a PageLayout.'
    _reg_clsid_ = GUID('{31E081AE-CB02-11D1-876C-0000F8751720}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class ISnapGuides(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the Snapping guides.'
    _iid_ = GUID('{31E081AB-CB02-11D1-876C-0000F8751720}')
    _idlflags_ = ['oleautomation']
SnapGuides._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ISnapGuides, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

IEditResult._methods_ = [
    COMMETHOD(['propget', helpstring(u'Error Code.')], HRESULT, 'Code',
              ( ['retval', 'out'], POINTER(c_int), 'errorCode' )),
    COMMETHOD(['propget', helpstring(u'Error Description.')], HRESULT, 'Description',
              ( ['retval', 'out'], POINTER(BSTR), 'Description' )),
    COMMETHOD(['propget', helpstring(u'Global ID.')], HRESULT, 'GlobalID',
              ( ['retval', 'out'], POINTER(BSTR), 'GlobalID' )),
    COMMETHOD(['propget', helpstring(u'Object ID.')], HRESULT, 'OID',
              ( ['retval', 'out'], POINTER(c_int), 'OID' )),
    COMMETHOD(['propget', helpstring(u'Success or faliure.')], HRESULT, 'Succeeded',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Succeeded' )),
]
################################################################
## code template for IEditResult implementation
##class IEditResult_Impl(object):
##    @property
##    def Succeeded(self):
##        u'Success or faliure.'
##        #return Succeeded
##
##    @property
##    def OID(self):
##        u'Object ID.'
##        #return OID
##
##    @property
##    def Code(self):
##        u'Error Code.'
##        #return errorCode
##
##    @property
##    def Description(self):
##        u'Error Description.'
##        #return Description
##
##    @property
##    def GlobalID(self):
##        u'Global ID.'
##        #return GlobalID
##

class ArrayOfIShader(CoClass):
    u'Object Array containing Shaders.'
    _reg_clsid_ = GUID('{E0BBDBAF-0059-449C-B6F1-EDF1353A2C54}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
ArrayOfIShader._com_interfaces_ = [IArrayOfIShader, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class IAnnoClassAdmin2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the annotation class admin interface.'
    _iid_ = GUID('{388A9072-F834-4383-8D09-785D21D30D52}')
    _idlflags_ = ['oleautomation']
IAnnoClassAdmin2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if an annotation is to be automatically created when a feature is created.')], HRESULT, 'AutoCreate',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if an annotation is to be automatically created when a feature is created.')], HRESULT, 'AutoCreate',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propput', helpstring(u'The labeling properties annotation class.')], HRESULT, 'AnnoProperties',
              ( ['in'], POINTER(IAnnotateLayerPropertiesCollection), 'rhs' )),
    COMMETHOD(['propput', helpstring(u'The reference scale.')], HRESULT, 'ReferenceScale',
              ( ['in'], c_double, 'rhs' )),
    COMMETHOD(['propput', helpstring(u'The units of the reference scale.')], HRESULT, 'ReferenceScaleUnits',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits, 'rhs' )),
    COMMETHOD(['propputref', helpstring(u'The symbol collection.')], HRESULT, 'SymbolCollection',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbolCollection), 'rhs' )),
    COMMETHOD([helpstring(u'Updates the property set.')], HRESULT, 'UpdateProperties'),
    COMMETHOD(['propget', helpstring(u"Indicates if an annotation is to be automatically recreated when a feature's shape is changed.")], HRESULT, 'UpdateOnShapeChange',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u"Indicates if an annotation is to be automatically recreated when a feature's shape is changed.")], HRESULT, 'UpdateOnShapeChange',
              ( ['in'], VARIANT_BOOL, 'flag' )),
]
################################################################
## code template for IAnnoClassAdmin2 implementation
##class IAnnoClassAdmin2_Impl(object):
##    def _set(self, rhs):
##        u'The labeling properties annotation class.'
##    AnnoProperties = property(fset = _set, doc = _set.__doc__)
##
##    def UpdateProperties(self):
##        u'Updates the property set.'
##        #return 
##
##    def _get(self):
##        u'Indicates if an annotation is to be automatically created when a feature is created.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if an annotation is to be automatically created when a feature is created.'
##    AutoCreate = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u"Indicates if an annotation is to be automatically recreated when a feature's shape is changed."
##        #return flag
##    def _set(self, flag):
##        u"Indicates if an annotation is to be automatically recreated when a feature's shape is changed."
##    UpdateOnShapeChange = property(_get, _set, doc = _set.__doc__)
##
##    def _set(self, rhs):
##        u'The units of the reference scale.'
##    ReferenceScaleUnits = property(fset = _set, doc = _set.__doc__)
##
##    def SymbolCollection(self, rhs):
##        u'The symbol collection.'
##        #return 
##
##    def _set(self, rhs):
##        u'The reference scale.'
##    ReferenceScale = property(fset = _set, doc = _set.__doc__)
##

class IRasterIdentifyObj2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that identify an object in the raster layer.'
    _iid_ = GUID('{FF3BAC13-E1C4-47AB-807A-4C8233341D11}')
    _idlflags_ = ['oleautomation']
IRasterIdentifyObj2._methods_ = [
    COMMETHOD([helpstring(u'Gets the next pair of property and value of the Identify Object.')], HRESULT, 'GetPropAndValues',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(BSTR), 'Property' ),
              ( ['out'], POINTER(BSTR), 'Value' )),
]
################################################################
## code template for IRasterIdentifyObj2 implementation
##class IRasterIdentifyObj2_Impl(object):
##    def GetPropAndValues(self, Index):
##        u'Gets the next pair of property and value of the Identify Object.'
##        #return Property, Value
##

class GraphicFeatureServerIP(CoClass):
    u'Graphic Feature Server Message Proxy.'
    _reg_clsid_ = GUID('{5862E625-E709-4CAF-8951-FA530FF2B8B6}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
GraphicFeatureServerIP._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._746F6817_89BB_4490_9829_83CA25FD505A_0_10_2.IAGSServerObject2, comtypes.gen._746F6817_89BB_4490_9829_83CA25FD505A_0_10_2.IAGSServerObject, IGraphicFeatureServer, IGraphicFeatureServer2, IGraphicFeatureServerReplication]


# values for enumeration 'esriMapDocumentVersionInfo'
esriMapDocumentVersionInfoSuccess = 0
esriMapDocumentVersionInfoFail = 1
esriMapDocumentVersionInfoUnknown = 2
esriMapDocumentVersionInfo = c_int # enum
class IMxdContents(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members to pass data into and out off a MXD map document file.   Coclasses that implement this interface can limited the implementation to one property if required.'
    _iid_ = GUID('{BE202904-9C7F-4D51-80B2-DBC960224E7F}')
    _idlflags_ = ['oleautomation']
IMapDocument._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if the map document is a valid map document.')], HRESULT, 'IsMapDocument',
              ( ['in'], BSTR, 'sDocument' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsMapDocument' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the map document is present.')], HRESULT, 'IsPresent',
              ( ['in'], BSTR, 'sDocument' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsPresent' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the map document is read only.')], HRESULT, 'IsReadOnly',
              ( ['in'], BSTR, 'sDocument' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsReadOnly' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the use of the map document is restricted to certain applications.')], HRESULT, 'IsRestricted',
              ( ['in'], BSTR, 'sDocument' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsRestricted' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the map document is protected by a passsword.')], HRESULT, 'IsPasswordProtected',
              ( ['in'], BSTR, 'sDocument' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsPasswordProtected' )),
    COMMETHOD([helpstring(u'Creates and opens a new map document in preparation for the contents to be retrieve or updated.')], HRESULT, 'New',
              ( ['in'], BSTR, 'sDocument' )),
    COMMETHOD([helpstring(u'Open the map document in preparation for the contents to be retrieve or updated.')], HRESULT, 'Open',
              ( ['in'], BSTR, 'sDocument' ),
              ( ['in', 'optional'], BSTR, 'bsPassword', u'' )),
    COMMETHOD(['propget', helpstring(u'The map document filename that the MapDocument coclass is linked to.')], HRESULT, 'DocumentFilename',
              ( ['retval', 'out'], POINTER(BSTR), 'sDocument' )),
    COMMETHOD(['propget', helpstring(u'The type of map document currently loaded in the object.')], HRESULT, 'DocumentType',
              ( ['retval', 'out'], POINTER(esriMapDocumentType), 'Type' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the data in the map document is referenced using relative paths.')], HRESULT, 'UsesRelativePaths',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'bUsesRelativePaths' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the version of the map document is compatible with the current version of software.')], HRESULT, 'DocumentVersion',
              ( ['retval', 'out'], POINTER(esriMapDocumentVersionInfo), 'versionInfo' )),
    COMMETHOD(['propget', helpstring(u'The PageLayout object.')], HRESULT, 'PageLayout',
              ( ['retval', 'out'], POINTER(POINTER(IPageLayout)), 'ppPageLayout' )),
    COMMETHOD(['propget', helpstring(u'The ActiveView of the map document.')], HRESULT, 'ActiveView',
              ( ['retval', 'out'], POINTER(POINTER(IActiveView)), 'ppActiveView' )),
    COMMETHOD(['propget', helpstring(u'The number of Map objects contained within the map document.')], HRESULT, 'MapCount',
              ( ['retval', 'out'], POINTER(c_int), 'MapCount' )),
    COMMETHOD(['propget', helpstring(u'The Map object at the specified index.')], HRESULT, 'Map',
              ( ['in'], c_int, 'mapIndex' ),
              ( ['retval', 'out'], POINTER(POINTER(IMap)), 'ppMap' )),
    COMMETHOD(['propget', helpstring(u'The Layer object at the specified index for the specified map.')], HRESULT, 'Layer',
              ( ['in'], c_int, 'mapIndex' ),
              ( ['in'], c_int, 'layerIndex' ),
              ( ['retval', 'out'], POINTER(POINTER(ILayer)), 'ppLayer' )),
    COMMETHOD(['propget', helpstring(u'The printer object.  If no printer object is stored in the map document this returns NULL.')], HRESULT, 'Printer',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._7DB92CEC_CB65_420A_8737_FCD0722FD436_0_10_2.IPrinter)), 'ppPrinter' )),
    COMMETHOD(['propget', helpstring(u'The thumbnail stored in the map document.   If this is empty E_FAIL is returned.')], HRESULT, 'Thumbnail',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IPicture)), 'ppPicture' )),
    COMMETHOD([helpstring(u'Close the map document.')], HRESULT, 'Close'),
    COMMETHOD([helpstring(u'Retrieve the detailed version information of the map document.')], HRESULT, 'GetVersionInfo',
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'versionInfoMissing' ),
              ( ['in', 'out'], POINTER(c_int), 'lMajor' ),
              ( ['in', 'out'], POINTER(c_int), 'lMinor' ),
              ( ['in', 'out'], POINTER(c_int), 'lRevision' ),
              ( ['in', 'out'], POINTER(c_int), 'lBuild' )),
    COMMETHOD([helpstring(u'Replace the contents of the map document.')], HRESULT, 'ReplaceContents',
              ( ['in'], POINTER(IMxdContents), 'pObject' )),
    COMMETHOD([helpstring(u'Set the ActiveView content of the map document.')], HRESULT, 'SetActiveView',
              ( ['in'], POINTER(IActiveView), 'pActiveView' )),
    COMMETHOD([helpstring(u'Save the contents of the map document to the bound file.')], HRESULT, 'Save',
              ( ['in', 'optional'], VARIANT_BOOL, 'bUseRelativePaths', True ),
              ( ['in', 'optional'], VARIANT_BOOL, 'bCreateThumnbail', True )),
    COMMETHOD([helpstring(u'Save the contents of the map document to the specified file name.')], HRESULT, 'SaveAs',
              ( ['in'], BSTR, 'sDocument' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'bUseRelativePaths', True ),
              ( ['in', 'optional'], VARIANT_BOOL, 'bCreateThumnbail', True )),
]
################################################################
## code template for IMapDocument implementation
##class IMapDocument_Impl(object):
##    def Save(self, bUseRelativePaths, bCreateThumnbail):
##        u'Save the contents of the map document to the bound file.'
##        #return 
##
##    @property
##    def IsReadOnly(self, sDocument):
##        u'Indicates if the map document is read only.'
##        #return IsReadOnly
##
##    def New(self, sDocument):
##        u'Creates and opens a new map document in preparation for the contents to be retrieve or updated.'
##        #return 
##
##    @property
##    def ActiveView(self):
##        u'The ActiveView of the map document.'
##        #return ppActiveView
##
##    @property
##    def IsMapDocument(self, sDocument):
##        u'Indicates if the map document is a valid map document.'
##        #return IsMapDocument
##
##    @property
##    def Thumbnail(self):
##        u'The thumbnail stored in the map document.   If this is empty E_FAIL is returned.'
##        #return ppPicture
##
##    @property
##    def Map(self, mapIndex):
##        u'The Map object at the specified index.'
##        #return ppMap
##
##    @property
##    def Printer(self):
##        u'The printer object.  If no printer object is stored in the map document this returns NULL.'
##        #return ppPrinter
##
##    @property
##    def DocumentFilename(self):
##        u'The map document filename that the MapDocument coclass is linked to.'
##        #return sDocument
##
##    @property
##    def IsPresent(self, sDocument):
##        u'Indicates if the map document is present.'
##        #return IsPresent
##
##    @property
##    def MapCount(self):
##        u'The number of Map objects contained within the map document.'
##        #return MapCount
##
##    @property
##    def DocumentType(self):
##        u'The type of map document currently loaded in the object.'
##        #return Type
##
##    def GetVersionInfo(self):
##        u'Retrieve the detailed version information of the map document.'
##        #return versionInfoMissing, lMajor, lMinor, lRevision, lBuild
##
##    @property
##    def UsesRelativePaths(self):
##        u'Indicates if the data in the map document is referenced using relative paths.'
##        #return bUsesRelativePaths
##
##    def ReplaceContents(self, pObject):
##        u'Replace the contents of the map document.'
##        #return 
##
##    @property
##    def DocumentVersion(self):
##        u'Indicates if the version of the map document is compatible with the current version of software.'
##        #return versionInfo
##
##    @property
##    def IsRestricted(self, sDocument):
##        u'Indicates if the use of the map document is restricted to certain applications.'
##        #return IsRestricted
##
##    @property
##    def PageLayout(self):
##        u'The PageLayout object.'
##        #return ppPageLayout
##
##    @property
##    def Layer(self, mapIndex, layerIndex):
##        u'The Layer object at the specified index for the specified map.'
##        #return ppLayer
##
##    def SetActiveView(self, pActiveView):
##        u'Set the ActiveView content of the map document.'
##        #return 
##
##    def SaveAs(self, sDocument, bUseRelativePaths, bCreateThumnbail):
##        u'Save the contents of the map document to the specified file name.'
##        #return 
##
##    @property
##    def IsPasswordProtected(self, sDocument):
##        u'Indicates if the map document is protected by a passsword.'
##        #return IsPasswordProtected
##
##    def Close(self):
##        u'Close the map document.'
##        #return 
##
##    def Open(self, sDocument, bsPassword):
##        u'Open the map document in preparation for the contents to be retrieve or updated.'
##        #return 
##

IImageServerEditResult._methods_ = [
    COMMETHOD(['propget', helpstring(u'The OID of the raster for which the result is being generated.')], HRESULT, 'RasterID',
              ( ['retval', 'out'], POINTER(c_int), 'pRasterID' )),
    COMMETHOD(['propget', helpstring(u'The ID of the item for which the result is being generated. Its set when the ID is not an OID. e.g. ViewId.')], HRESULT, 'ItemID',
              ( ['retval', 'out'], POINTER(BSTR), 'pItemID' )),
    COMMETHOD(['propget', helpstring(u'Success or faliure.')], HRESULT, 'Succeeded',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pSucceeded' )),
    COMMETHOD(['propget', helpstring(u'Error Code.')], HRESULT, 'Code',
              ( ['retval', 'out'], POINTER(c_int), 'pErrorCode' )),
    COMMETHOD(['propget', helpstring(u'Error Description.')], HRESULT, 'Description',
              ( ['retval', 'out'], POINTER(BSTR), 'pErrorDescription' )),
    COMMETHOD(['propget', helpstring(u'A string identifying the operation that generated the error')], HRESULT, 'Tag',
              ( ['retval', 'out'], POINTER(BSTR), 'pTag' )),
]
################################################################
## code template for IImageServerEditResult implementation
##class IImageServerEditResult_Impl(object):
##    @property
##    def ItemID(self):
##        u'The ID of the item for which the result is being generated. Its set when the ID is not an OID. e.g. ViewId.'
##        #return pItemID
##
##    @property
##    def Code(self):
##        u'Error Code.'
##        #return pErrorCode
##
##    @property
##    def Description(self):
##        u'Error Description.'
##        #return pErrorDescription
##
##    @property
##    def Succeeded(self):
##        u'Success or faliure.'
##        #return pSucceeded
##
##    @property
##    def Tag(self):
##        u'A string identifying the operation that generated the error'
##        #return pTag
##
##    @property
##    def RasterID(self):
##        u'The OID of the raster for which the result is being generated.'
##        #return pRasterID
##

class IGdbRasterCatalogLayer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control GeoDatabase RasterCatalog Layer.'
    _iid_ = GUID('{605BC37A-15E9-40A0-90FB-DE4CC376838C}')
    _idlflags_ = ['oleautomation']
IGdbRasterCatalogLayer._methods_ = [
    COMMETHOD([helpstring(u'Sets up the RasterCatalogLayer based on the given table.')], HRESULT, 'Setup',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable), 'pTable' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'isSuccessful' )),
    COMMETHOD(['propput', helpstring(u'The renderers of RasterCatalog.')], HRESULT, 'Renderers',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'ppRenderers' )),
    COMMETHOD(['propget', helpstring(u'The renderers of RasterCatalog.')], HRESULT, 'Renderers',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'ppRenderers' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether renderers are being used.')], HRESULT, 'RendererUsage',
              ( ['retval', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'pUsage' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to draw the selected raster.')], HRESULT, 'DrawSelectedRasters',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'b' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to draw the selected raster.')], HRESULT, 'DrawSelectedRasters',
              ( ['in'], VARIANT_BOOL, 'b' )),
    COMMETHOD([helpstring(u'Chooses a proper renderer for a given raster.')], HRESULT, 'ChooseRenderer',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' ),
              ( ['retval', 'out'], POINTER(POINTER(IRasterRenderer)), 'ppRender' )),
]
################################################################
## code template for IGdbRasterCatalogLayer implementation
##class IGdbRasterCatalogLayer_Impl(object):
##    def ChooseRenderer(self, pRaster):
##        u'Chooses a proper renderer for a given raster.'
##        #return ppRender
##
##    def Setup(self, pTable):
##        u'Sets up the RasterCatalogLayer based on the given table.'
##        #return isSuccessful
##
##    def _get(self):
##        u'Indicates whether to draw the selected raster.'
##        #return b
##    def _set(self, b):
##        u'Indicates whether to draw the selected raster.'
##    DrawSelectedRasters = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The renderers of RasterCatalog.'
##        #return ppRenderers
##    def _set(self, ppRenderers):
##        u'The renderers of RasterCatalog.'
##    Renderers = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def RendererUsage(self):
##        u'Indicates whether renderers are being used.'
##        #return pUsage
##

class IRasterCatalogLayer(ILayer):
    _case_insensitive_ = True
    u'Provides access to members that create or modify a raster catalog.'
    _iid_ = GUID('{AF9930F0-F61E-11D3-8D6C-00C04F5B87B2}')
    _idlflags_ = ['oleautomation']
IRasterCatalogLayer._methods_ = [
    COMMETHOD([helpstring(u'Creates a raster catalog layer.')], HRESULT, 'Create',
              ( ['in'], POINTER(comtypes.gen._8F0541A3_D5BE_4B3F_A8D9_062D5579E19B_0_10_2.IRasterCatalogTable), 'pCatalog' )),
    COMMETHOD(['propget', helpstring(u'Raster catalog table.')], HRESULT, 'CatalogTable',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._8F0541A3_D5BE_4B3F_A8D9_062D5579E19B_0_10_2.IRasterCatalogTable)), 'pCatalog' )),
    COMMETHOD(['propput', helpstring(u"Layer's primary field.")], HRESULT, 'PrimaryField',
              ( ['in'], c_int, 'pnField' )),
    COMMETHOD(['propget', helpstring(u"Layer's primary field.")], HRESULT, 'PrimaryField',
              ( ['retval', 'out'], POINTER(c_int), 'pnField' )),
    COMMETHOD(['propget', helpstring(u"Layer's RasterRenderer.")], HRESULT, 'Renderer',
              ( ['retval', 'out'], POINTER(POINTER(IRasterRenderer)), 'Renderer' )),
    COMMETHOD(['propputref', helpstring(u"Layer's RasterRenderer.")], HRESULT, 'Renderer',
              ( ['in'], POINTER(IRasterRenderer), 'Renderer' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to display rasters.')], HRESULT, 'DisplayRasters',
              ( ['retval', 'out'], POINTER(c_int), 'pNum' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to display rasters.')], HRESULT, 'DisplayRasters',
              ( ['in'], c_int, 'pNum' )),
    COMMETHOD(['propget', helpstring(u"Layer's symbol.")], HRESULT, 'Symbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol)), 'ppSymbol' )),
    COMMETHOD(['propputref', helpstring(u"Layer's symbol.")], HRESULT, 'Symbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol), 'ppSymbol' )),
]
################################################################
## code template for IRasterCatalogLayer implementation
##class IRasterCatalogLayer_Impl(object):
##    def Create(self, pCatalog):
##        u'Creates a raster catalog layer.'
##        #return 
##
##    def _get(self):
##        u"Layer's primary field."
##        #return pnField
##    def _set(self, pnField):
##        u"Layer's primary field."
##    PrimaryField = property(_get, _set, doc = _set.__doc__)
##
##    def Renderer(self, Renderer):
##        u"Layer's RasterRenderer."
##        #return 
##
##    @property
##    def CatalogTable(self):
##        u'Raster catalog table.'
##        #return pCatalog
##
##    def _get(self):
##        u'Indicates whether to display rasters.'
##        #return pNum
##    def _set(self, pNum):
##        u'Indicates whether to display rasters.'
##    DisplayRasters = property(_get, _set, doc = _set.__doc__)
##
##    def Symbol(self, ppSymbol):
##        u"Layer's symbol."
##        #return 
##


# values for enumeration 'ESRITPCPenType'
ETPC_Pen = 0
ETPC_Highlighter = 1
ESRITPCPenType = c_int # enum
IInkGraphic._methods_ = [
    COMMETHOD(['hidden', helpstring(u'Creates a new element.')], HRESULT, 'Create',
              ( ['in'], POINTER(IUnknown), 'pDisplay' ),
              ( ['in'], POINTER(IUnknown), 'pInk' )),
    COMMETHOD(['hidden', helpstring(u'The Ink used by the Graphic Element.'), 'propget'], HRESULT, 'Ink',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'pVal' )),
    COMMETHOD(['hidden', helpstring(u'The Render used by the Graphic Element.'), 'propget'], HRESULT, 'Renderer',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'pVal' )),
    COMMETHOD([helpstring(u'The text produced by the text recognizer for this element.')], HRESULT, 'Recognize',
              ( ['retval', 'out'], POINTER(BSTR), 'Text' )),
    COMMETHOD(['propput', helpstring(u'The user defined property associated with this element.')], HRESULT, 'Tag',
              ( ['in'], VARIANT, 'pTag' )),
    COMMETHOD(['propget', helpstring(u'The user defined property associated with this element.')], HRESULT, 'Tag',
              ( ['retval', 'out'], POINTER(VARIANT), 'pTag' )),
    COMMETHOD(['propget', helpstring(u'The current color of the element.')], HRESULT, 'Color',
              ( ['retval', 'out'], POINTER(c_int), 'pColor' )),
    COMMETHOD(['propput', helpstring(u'The current color of the element.')], HRESULT, 'Color',
              ( ['in'], c_int, 'pColor' )),
    COMMETHOD(['propput', helpstring(u'The current width of the element.')], HRESULT, 'Width',
              ( ['in'], c_int, 'pWidth' )),
    COMMETHOD(['propget', helpstring(u'The current width of the element.')], HRESULT, 'Width',
              ( ['retval', 'out'], POINTER(c_int), 'pWidth' )),
    COMMETHOD(['propget', helpstring(u'A copy of the geometry described by the element.')], HRESULT, 'InkGeometry',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppGeom' )),
    COMMETHOD(['propget', helpstring(u'The Ink type of the graphic.')], HRESULT, 'InkType',
              ( ['retval', 'out'], POINTER(ESRITPCPenType), 'InkType' )),
    COMMETHOD(['propput', helpstring(u'The current tip type of the element.')], HRESULT, 'TipType',
              ( ['in'], ESRITPCStylusType, 'pTipType' )),
    COMMETHOD(['propget', helpstring(u'The current tip type of the element.')], HRESULT, 'TipType',
              ( ['retval', 'out'], POINTER(ESRITPCStylusType), 'pTipType' )),
    COMMETHOD([helpstring(u'Updates the recognition results previously obtained by Recognize.')], HRESULT, 'UpdateRecognitionResult',
              ( ['in'], BSTR, 'newResultText' )),
]
################################################################
## code template for IInkGraphic implementation
##class IInkGraphic_Impl(object):
##    def UpdateRecognitionResult(self, newResultText):
##        u'Updates the recognition results previously obtained by Recognize.'
##        #return 
##
##    def _get(self):
##        u'The current color of the element.'
##        #return pColor
##    def _set(self, pColor):
##        u'The current color of the element.'
##    Color = property(_get, _set, doc = _set.__doc__)
##
##    def Recognize(self):
##        u'The text produced by the text recognizer for this element.'
##        #return Text
##
##    def Create(self, pDisplay, pInk):
##        u'Creates a new element.'
##        #return 
##
##    def _get(self):
##        u'The current tip type of the element.'
##        #return pTipType
##    def _set(self, pTipType):
##        u'The current tip type of the element.'
##    TipType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The current width of the element.'
##        #return pWidth
##    def _set(self, pWidth):
##        u'The current width of the element.'
##    Width = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The user defined property associated with this element.'
##        #return pTag
##    def _set(self, pTag):
##        u'The user defined property associated with this element.'
##    Tag = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Renderer(self):
##        u'The Render used by the Graphic Element.'
##        #return pVal
##
##    @property
##    def Ink(self):
##        u'The Ink used by the Graphic Element.'
##        #return pVal
##
##    @property
##    def InkType(self):
##        u'The Ink type of the graphic.'
##        #return InkType
##
##    @property
##    def InkGeometry(self):
##        u'A copy of the geometry described by the element.'
##        #return ppGeom
##

class FeatureFindData(CoClass):
    u'Stores feature info for finding.'
    _reg_clsid_ = GUID('{FB8FF070-5CA5-11D3-9F6C-00C04F6BC886}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IFeatureFindData2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to data associated with each row in the MxFind dialog when finding features.'
    _iid_ = GUID('{35467434-9D21-4DF8-833E-9AF2E66241BA}')
    _idlflags_ = ['oleautomation']
class IFindObj(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that are used to find objects.'
    _iid_ = GUID('{FA4D443A-DE20-4C9F-A576-7F466A85C961}')
    _idlflags_ = ['oleautomation']
class IFindObject(IFindObj):
    _case_insensitive_ = True
    u'Provides access to members that are used to feature find objects.'
    _iid_ = GUID('{66C47E6A-EB84-42E6-AEB9-686108F49C1C}')
    _idlflags_ = ['oleautomation']
FeatureFindData._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IFeatureFindData2, IFindObj, IFindObject]

class IGlobeDocument(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    _iid_ = GUID('{D2BCAF32-541C-4965-9980-AAE56AB3A964}')
    _idlflags_ = ['oleautomation']
IGlobeDocument._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if the globe document is a valid globe document.')], HRESULT, 'IsGlobeDocument',
              ( ['in'], BSTR, 'bsDocument' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbIsGlobeDocument' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the globe document is present.')], HRESULT, 'IsPresent',
              ( ['in'], BSTR, 'bsDocument' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbIsPresent' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the globe document is read only.')], HRESULT, 'IsReadOnly',
              ( ['in'], BSTR, 'bsDocument' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbIsReadOnly' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the use of the globe document is restricted to certain applications.')], HRESULT, 'IsRestricted',
              ( ['in'], BSTR, 'bsDocument' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbIsRestricted' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the globe document is protected by a passsword.')], HRESULT, 'IsPasswordProtected',
              ( ['in'], BSTR, 'bsDocument' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbIsPasswordProtected' )),
    COMMETHOD([helpstring(u'Creates and opens a new globe document in preparation for the contents to be retrieve or updated.')], HRESULT, 'New',
              ( ['in'], BSTR, 'bsDocument' )),
    COMMETHOD([helpstring(u'Open the globe document in preparation for the contents to be retrieved or updated.')], HRESULT, 'Open',
              ( ['in'], BSTR, 'bsDocument' ),
              ( ['in', 'optional'], BSTR, 'bsPassword', u'' )),
    COMMETHOD(['propget', helpstring(u'The globe document filename that the GlobeDocument coclass is linked to.')], HRESULT, 'DocumentFilename',
              ( ['retval', 'out'], POINTER(BSTR), 'pbsDocument' )),
    COMMETHOD(['propget', helpstring(u'The type of globe document currently loaded in the object.')], HRESULT, 'DocumentType',
              ( ['retval', 'out'], POINTER(esriGlobeDocumentType), 'pType' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the data in the globe document is referenced using relative paths.')], HRESULT, 'UsesRelativePaths',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbUsesRelativePaths' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the version of the globe document is compatible with the current version of software.')], HRESULT, 'DocumentVersion',
              ( ['retval', 'out'], POINTER(esriGlobeDocumentVersionInfo), 'pVersionInfo' )),
    COMMETHOD(['propput', helpstring(u'The Globe object.')], HRESULT, 'GlobeObject',
              ( ['in'], POINTER(IUnknown), 'ppUnk' )),
    COMMETHOD(['propget', helpstring(u'The Globe object.')], HRESULT, 'GlobeObject',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppUnk' )),
    COMMETHOD(['propget', helpstring(u'The number of Layer objects contained within the globe document.')], HRESULT, 'LayerCount',
              ( ['retval', 'out'], POINTER(c_int), 'plLayerCount' )),
    COMMETHOD(['propget', helpstring(u'The Layer object at the specified index.')], HRESULT, 'Layer',
              ( ['in'], c_int, 'lLayerIndex' ),
              ( ['retval', 'out'], POINTER(POINTER(ILayer)), 'ppLayer' )),
    COMMETHOD(['propget', helpstring(u'The thumbnail stored in the globe document.   If this is empty E_FAIL is returned.')], HRESULT, 'Thumbnail',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IPicture)), 'ppPicture' )),
    COMMETHOD([helpstring(u'Close the globe document.')], HRESULT, 'Close'),
    COMMETHOD([helpstring(u'Retrieve the detailed version information of the globe document.')], HRESULT, 'GetVersionInfo',
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'pbVersionInfoMissing' ),
              ( ['in', 'out'], POINTER(c_int), 'plMajor' ),
              ( ['in', 'out'], POINTER(c_int), 'plMinor' ),
              ( ['in', 'out'], POINTER(c_int), 'plRevision' ),
              ( ['in', 'out'], POINTER(c_int), 'plBuild' )),
    COMMETHOD([helpstring(u'Save the contents of the globe document to the bound file.')], HRESULT, 'Save',
              ( ['in', 'optional'], VARIANT_BOOL, 'bUseRelativePaths', True ),
              ( ['in', 'optional'], VARIANT_BOOL, 'bCreateThumnbail', True )),
    COMMETHOD([helpstring(u'Save the contents of the globe document to the specified file name.')], HRESULT, 'SaveAs',
              ( ['in'], BSTR, 'bsDocument' ),
              ( ['in', 'optional'], VARIANT_BOOL, 'bUseRelativePaths', True ),
              ( ['in', 'optional'], VARIANT_BOOL, 'bCreateThumnbail', True )),
]
################################################################
## code template for IGlobeDocument implementation
##class IGlobeDocument_Impl(object):
##    def SaveAs(self, bsDocument, bUseRelativePaths, bCreateThumnbail):
##        u'Save the contents of the globe document to the specified file name.'
##        #return 
##
##    @property
##    def Layer(self, lLayerIndex):
##        u'The Layer object at the specified index.'
##        #return ppLayer
##
##    @property
##    def DocumentFilename(self):
##        u'The globe document filename that the GlobeDocument coclass is linked to.'
##        #return pbsDocument
##
##    def Close(self):
##        u'Close the globe document.'
##        #return 
##
##    @property
##    def IsPresent(self, bsDocument):
##        u'Indicates if the globe document is present.'
##        #return pbIsPresent
##
##    @property
##    def DocumentType(self):
##        u'The type of globe document currently loaded in the object.'
##        #return pType
##
##    def _get(self):
##        u'The Globe object.'
##        #return ppUnk
##    def _set(self, ppUnk):
##        u'The Globe object.'
##    GlobeObject = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def DocumentVersion(self):
##        u'Indicates if the version of the globe document is compatible with the current version of software.'
##        #return pVersionInfo
##
##    @property
##    def Thumbnail(self):
##        u'The thumbnail stored in the globe document.   If this is empty E_FAIL is returned.'
##        #return ppPicture
##
##    @property
##    def IsReadOnly(self, bsDocument):
##        u'Indicates if the globe document is read only.'
##        #return pbIsReadOnly
##
##    @property
##    def IsGlobeDocument(self, bsDocument):
##        u'Indicates if the globe document is a valid globe document.'
##        #return pbIsGlobeDocument
##
##    @property
##    def LayerCount(self):
##        u'The number of Layer objects contained within the globe document.'
##        #return plLayerCount
##
##    @property
##    def IsRestricted(self, bsDocument):
##        u'Indicates if the use of the globe document is restricted to certain applications.'
##        #return pbIsRestricted
##
##    @property
##    def IsPasswordProtected(self, bsDocument):
##        u'Indicates if the globe document is protected by a passsword.'
##        #return pbIsPasswordProtected
##
##    def New(self, bsDocument):
##        u'Creates and opens a new globe document in preparation for the contents to be retrieve or updated.'
##        #return 
##
##    def GetVersionInfo(self):
##        u'Retrieve the detailed version information of the globe document.'
##        #return pbVersionInfoMissing, plMajor, plMinor, plRevision, plBuild
##
##    def Save(self, bUseRelativePaths, bCreateThumnbail):
##        u'Save the contents of the globe document to the bound file.'
##        #return 
##
##    def Open(self, bsDocument, bsPassword):
##        u'Open the globe document in preparation for the contents to be retrieved or updated.'
##        #return 
##
##    @property
##    def UsesRelativePaths(self):
##        u'Indicates if the data in the globe document is referenced using relative paths.'
##        #return pbUsesRelativePaths
##

IOverposterLayerProperties._methods_ = [
    COMMETHOD(['propput', helpstring(u'Indicates if labels are placed for the layer.')], HRESULT, 'PlaceLabels',
              ( ['in'], VARIANT_BOOL, 'place' )),
    COMMETHOD(['propget', helpstring(u'Indicates if labels are placed for the layer.')], HRESULT, 'PlaceLabels',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'place' )),
    COMMETHOD(['propput', helpstring(u'Indicates if symbols are placed for the layer.')], HRESULT, 'PlaceSymbols',
              ( ['in'], VARIANT_BOOL, 'place' )),
    COMMETHOD(['propget', helpstring(u'Indicates if symbols are placed for the layer.')], HRESULT, 'PlaceSymbols',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'place' )),
    COMMETHOD(['propput', helpstring(u'Indicates if features are treated as barriers to label/symbol placement.')], HRESULT, 'IsBarrier',
              ( ['in'], VARIANT_BOOL, 'IsBarrier' )),
    COMMETHOD(['propget', helpstring(u'Indicates if features are treated as barriers to label/symbol placement.')], HRESULT, 'IsBarrier',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsBarrier' )),
]
################################################################
## code template for IOverposterLayerProperties implementation
##class IOverposterLayerProperties_Impl(object):
##    def _get(self):
##        u'Indicates if features are treated as barriers to label/symbol placement.'
##        #return IsBarrier
##    def _set(self, IsBarrier):
##        u'Indicates if features are treated as barriers to label/symbol placement.'
##    IsBarrier = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if labels are placed for the layer.'
##        #return place
##    def _set(self, place):
##        u'Indicates if labels are placed for the layer.'
##    PlaceLabels = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if symbols are placed for the layer.'
##        #return place
##    def _set(self, place):
##        u'Indicates if symbols are placed for the layer.'
##    PlaceSymbols = property(_get, _set, doc = _set.__doc__)
##

class RasterTypeInfos(CoClass):
    u'A collection of raster type info objects.'
    _reg_clsid_ = GUID('{84FC6849-172F-40FB-AC04-D05DDCF21AB7}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
RasterTypeInfos._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterTypeInfos, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

IImageServerEditResults._methods_ = [
    COMMETHOD(['propget', helpstring(u'The edit result count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propget', helpstring(u'The edit result at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IImageServerEditResult)), 'pEditResult' )),
    COMMETHOD([helpstring(u'Removes the edit result at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all edit results.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Adds a edit result.')], HRESULT, 'Add',
              ( ['in'], POINTER(IImageServerEditResult), 'pEditResult' )),
    COMMETHOD([helpstring(u'Adds a edit result at the specified position.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(IImageServerEditResult), 'pEditesult' )),
]
################################################################
## code template for IImageServerEditResults implementation
##class IImageServerEditResults_Impl(object):
##    @property
##    def Count(self):
##        u'The edit result count.'
##        #return pCount
##
##    def Insert(self, Index, pEditesult):
##        u'Adds a edit result at the specified position.'
##        #return 
##
##    def Remove(self, Index):
##        u'Removes the edit result at the specified position.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'The edit result at the specified position.'
##        #return pEditResult
##
##    def RemoveAll(self):
##        u'Removes all edit results.'
##        #return 
##
##    def Add(self, pEditResult):
##        u'Adds a edit result.'
##        #return 
##

class IDimensionProtectNames(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Protect names interface.'
    _iid_ = GUID('{9DA49C58-0EF8-4DC0-8DB4-2713887D4FD3}')
    _idlflags_ = ['hidden']
IDimensionProtectNames._methods_ = [
    COMMETHOD([helpstring(u'Protect names interface.')], HRESULT, 'FieldIndexes'),
]
################################################################
## code template for IDimensionProtectNames implementation
##class IDimensionProtectNames_Impl(object):
##    def FieldIndexes(self):
##        u'Protect names interface.'
##        #return 
##

class ILocationTrigger(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u"Provides access to properties and methods needed to manage action's location trigger. A location trigger allows developers to extend location based triggering of actions, e.g., extend location trigger to include crosses or departing / arriving."
    _iid_ = GUID('{53053771-6EA2-42A6-A4E4-6F6F2746530C}')
    _idlflags_ = ['oleautomation']
ILocationTrigger._methods_ = [
    COMMETHOD(['propget', helpstring(u'Name of the location trigger.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'pVal' )),
    COMMETHOD(['propget', helpstring(u'Description of location trigger properties.')], HRESULT, 'Description',
              ( ['retval', 'out'], POINTER(BSTR), 'pVal' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether or not the location trigger can be negated.')], HRESULT, 'Invertable',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pVal' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether or not location trigger has been negated.')], HRESULT, 'Inverted',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pVal' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether or not location trigger has been negated.')], HRESULT, 'Inverted',
              ( ['in'], VARIANT_BOOL, 'pVal' )),
    COMMETHOD(['propput', helpstring(u'Column containing geometry objects.')], HRESULT, 'ShapeColumn',
              ( ['in'], c_int, 'rhs' )),
    COMMETHOD(['propput', helpstring(u'Column containing EventID information.')], HRESULT, 'EventIdColumn',
              ( ['in'], c_int, 'rhs' )),
    COMMETHOD(['propput', helpstring(u'Feature class containing geometry used in the location query.')], HRESULT, 'TestFeatureClass',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClass), 'rhs' )),
    COMMETHOD([helpstring(u'Determines whether or not the geometry is compatible for the location trigger.')], HRESULT, 'GeometryIsCompatible',
              ( ['in'], comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.esriGeometryType, 'eTypeA' ),
              ( ['in'], comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.esriGeometryType, 'eTypeB' )),
    COMMETHOD([helpstring(u'Evaluates feature for location trigger information.')], HRESULT, 'EvaluateFeature',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeature), 'piFeature' )),
    COMMETHOD([helpstring(u'Evaluates data message for location trigger information.')], HRESULT, 'EvaluateDataMessage',
              ( ['in'], POINTER(comtypes.gen._7BA654FE_F55E_4EE5_8CF2_FAEFFBC04A61_0_10_2.IDataMessage), 'piDataMessage' )),
    COMMETHOD(['propput', helpstring(u'Geometry used for location trigger test.')], HRESULT, 'TestGeometry',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'ppiTestGeometry' )),
    COMMETHOD(['propget', helpstring(u'Geometry used for location trigger test.')], HRESULT, 'TestGeometry',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry)), 'ppiTestGeometry' )),
]
################################################################
## code template for ILocationTrigger implementation
##class ILocationTrigger_Impl(object):
##    def _get(self):
##        u'Geometry used for location trigger test.'
##        #return ppiTestGeometry
##    def _set(self, ppiTestGeometry):
##        u'Geometry used for location trigger test.'
##    TestGeometry = property(_get, _set, doc = _set.__doc__)
##
##    def EvaluateFeature(self, piFeature):
##        u'Evaluates feature for location trigger information.'
##        #return 
##
##    @property
##    def Name(self):
##        u'Name of the location trigger.'
##        #return pVal
##
##    def _set(self, rhs):
##        u'Column containing geometry objects.'
##    ShapeColumn = property(fset = _set, doc = _set.__doc__)
##
##    @property
##    def Invertable(self):
##        u'Indicates whether or not the location trigger can be negated.'
##        #return pVal
##
##    def _get(self):
##        u'Indicates whether or not location trigger has been negated.'
##        #return pVal
##    def _set(self, pVal):
##        u'Indicates whether or not location trigger has been negated.'
##    Inverted = property(_get, _set, doc = _set.__doc__)
##
##    def _set(self, rhs):
##        u'Column containing EventID information.'
##    EventIdColumn = property(fset = _set, doc = _set.__doc__)
##
##    def EvaluateDataMessage(self, piDataMessage):
##        u'Evaluates data message for location trigger information.'
##        #return 
##
##    def GeometryIsCompatible(self, eTypeA, eTypeB):
##        u'Determines whether or not the geometry is compatible for the location trigger.'
##        #return 
##
##    def _set(self, rhs):
##        u'Feature class containing geometry used in the location query.'
##    TestFeatureClass = property(fset = _set, doc = _set.__doc__)
##
##    @property
##    def Description(self):
##        u'Description of location trigger properties.'
##        #return pVal
##

ILineLabelPosition._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if labels follow lines.')], HRESULT, 'ProduceCurvedLabels',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if labels follow lines.')], HRESULT, 'ProduceCurvedLabels',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates if labels are placed above lines.')], HRESULT, 'Above',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if labels are placed above lines.')], HRESULT, 'Above',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates if labels are placed below lines.')], HRESULT, 'Below',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if labels are placed below lines.')], HRESULT, 'Below',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates if labels are placed on top of lines.')], HRESULT, 'OnTop',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if labels are placed on top of lines.')], HRESULT, 'OnTop',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates if labels are placed to the left of lines.')], HRESULT, 'Left',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if labels are placed to the left of lines.')], HRESULT, 'Left',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates if labels are placed to the right of lines.')], HRESULT, 'Right',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if labels are placed to the right of lines.')], HRESULT, 'Right',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates if labels are placed along lines at the best position.')], HRESULT, 'InLine',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if labels are placed along lines at the best position.')], HRESULT, 'InLine',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates if labels are placed at the start of lines.')], HRESULT, 'AtStart',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if labels are placed at the start of lines.')], HRESULT, 'AtStart',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates if labels are placed at the end of lines.')], HRESULT, 'AtEnd',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if labels are placed at the end of lines.')], HRESULT, 'AtEnd',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates if labels are placed parallel to lines.')], HRESULT, 'Parallel',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if labels are placed parallel to lines.')], HRESULT, 'Parallel',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates if labels are placed perpendicular to lines.')], HRESULT, 'Perpendicular',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if labels are placed perpendicular to lines.')], HRESULT, 'Perpendicular',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates if labels are placed horizontally.')], HRESULT, 'Horizontal',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if labels are placed horizontally.')], HRESULT, 'Horizontal',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Offset from the start/end of lines (in map units).')], HRESULT, 'Offset',
              ( ['retval', 'out'], POINTER(c_double), 'Offset' )),
    COMMETHOD(['propput', helpstring(u'Offset from the start/end of lines (in map units).')], HRESULT, 'Offset',
              ( ['in'], c_double, 'Offset' )),
]
################################################################
## code template for ILineLabelPosition implementation
##class ILineLabelPosition_Impl(object):
##    def _get(self):
##        u'Indicates if labels follow lines.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if labels follow lines.'
##    ProduceCurvedLabels = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if labels are placed at the start of lines.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if labels are placed at the start of lines.'
##    AtStart = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if labels are placed to the right of lines.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if labels are placed to the right of lines.'
##    Right = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if labels are placed at the end of lines.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if labels are placed at the end of lines.'
##    AtEnd = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if labels are placed perpendicular to lines.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if labels are placed perpendicular to lines.'
##    Perpendicular = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if labels are placed parallel to lines.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if labels are placed parallel to lines.'
##    Parallel = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if labels are placed below lines.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if labels are placed below lines.'
##    Below = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if labels are placed above lines.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if labels are placed above lines.'
##    Above = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Offset from the start/end of lines (in map units).'
##        #return Offset
##    def _set(self, Offset):
##        u'Offset from the start/end of lines (in map units).'
##    Offset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if labels are placed along lines at the best position.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if labels are placed along lines at the best position.'
##    InLine = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if labels are placed horizontally.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if labels are placed horizontally.'
##    Horizontal = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if labels are placed on top of lines.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if labels are placed on top of lines.'
##    OnTop = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if labels are placed to the left of lines.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if labels are placed to the left of lines.'
##    Left = property(_get, _set, doc = _set.__doc__)
##

IImageServerMeasureResult._methods_ = [
    COMMETHOD(['propget', helpstring(u'The image name.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'pName' )),
    COMMETHOD(['propput', helpstring(u'The image name.')], HRESULT, 'Name',
              ( ['in'], BSTR, 'pName' )),
    COMMETHOD(['propget', helpstring(u'The senor model name.')], HRESULT, 'SensorName',
              ( ['retval', 'out'], POINTER(BSTR), 'pSensorName' )),
    COMMETHOD(['propput', helpstring(u'The senor model name.')], HRESULT, 'SensorName',
              ( ['in'], BSTR, 'pSensorName' )),
    COMMETHOD(['propget', helpstring(u'The mensuration values.')], HRESULT, 'Measurement',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet)), 'ppMeasurement' )),
    COMMETHOD(['propputref', helpstring(u'The mensuration values.')], HRESULT, 'Measurement',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet), 'ppMeasurement' )),
]
################################################################
## code template for IImageServerMeasureResult implementation
##class IImageServerMeasureResult_Impl(object):
##    def Measurement(self, ppMeasurement):
##        u'The mensuration values.'
##        #return 
##
##    def _get(self):
##        u'The image name.'
##        #return pName
##    def _set(self, pName):
##        u'The image name.'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The senor model name.'
##        #return pSensorName
##    def _set(self, pSensorName):
##        u'The senor model name.'
##    SensorName = property(_get, _set, doc = _set.__doc__)
##

IRasterStretchAdvancedLabels._methods_ = [
    COMMETHOD(['propput', helpstring(u'Number of labels.')], HRESULT, 'NumLabels',
              ( ['in'], c_int, 'NumLabels' )),
    COMMETHOD(['propget', helpstring(u'Number of labels.')], HRESULT, 'NumLabels',
              ( ['retval', 'out'], POINTER(c_int), 'NumLabels' )),
    COMMETHOD(['propget', helpstring(u'Label Text.')], HRESULT, 'LabelText',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Text' )),
    COMMETHOD(['propput', helpstring(u'Label Text.')], HRESULT, 'LabelText',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Text' )),
    COMMETHOD(['propget', helpstring(u'Value.')], HRESULT, 'LabelValue',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(c_double), 'Value' )),
    COMMETHOD(['propput', helpstring(u'Value.')], HRESULT, 'LabelValue',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_double, 'Value' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the advanced labeling is being used.')], HRESULT, 'UseAdvancedLabeling',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'bAdvanced' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the advanced labeling is being used.')], HRESULT, 'UseAdvancedLabeling',
              ( ['in'], VARIANT_BOOL, 'bAdvanced' )),
]
################################################################
## code template for IRasterStretchAdvancedLabels implementation
##class IRasterStretchAdvancedLabels_Impl(object):
##    def _get(self):
##        u'Indicates whether the advanced labeling is being used.'
##        #return bAdvanced
##    def _set(self, bAdvanced):
##        u'Indicates whether the advanced labeling is being used.'
##    UseAdvancedLabeling = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Number of labels.'
##        #return NumLabels
##    def _set(self, NumLabels):
##        u'Number of labels.'
##    NumLabels = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, Index):
##        u'Label Text.'
##        #return Text
##    def _set(self, Index, Text):
##        u'Label Text.'
##    LabelText = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, Index):
##        u'Value.'
##        #return Value
##    def _set(self, Index, Value):
##        u'Value.'
##    LabelValue = property(_get, _set, doc = _set.__doc__)
##

class IEditTemplateFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'IEditTemplateFactory Interface'
    _iid_ = GUID('{A423E23D-A43B-42B0-9815-1CB559F5A2E8}')
    _idlflags_ = ['oleautomation']
class IEditTemplate(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'IEditTemplate Interface'
    _iid_ = GUID('{0952F6C1-5E9D-4E2E-BC99-ED55BCC4C6CE}')
    _idlflags_ = ['oleautomation']
IEditTemplateFactory._methods_ = [
    COMMETHOD([helpstring(u'Creats a new edit template.  Use IEditor3.AddTemplate to add the template to the editor.')], HRESULT, 'Create',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], POINTER(ILayer), 'Layer' ),
              ( ['retval', 'out'], POINTER(POINTER(IEditTemplate)), 'EditTemplate' )),
]
################################################################
## code template for IEditTemplateFactory implementation
##class IEditTemplateFactory_Impl(object):
##    def Create(self, Name, Layer):
##        u'Creats a new edit template.  Use IEditor3.AddTemplate to add the template to the editor.'
##        #return EditTemplate
##

class IColorRampSymbol2(IColorRampSymbol):
    _case_insensitive_ = True
    u'Provides access to members that control ColorRamp symbolization.'
    _iid_ = GUID('{1272E1B1-204C-11D3-A3F2-0004AC1B1D86}')
    _idlflags_ = ['oleautomation']
IColorRampSymbol2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates whether ramp is drawn horizontally.')], HRESULT, 'Horizontal',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether ramp is drawn horizontally.')], HRESULT, 'Horizontal',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to draw tic marks between intervals.')], HRESULT, 'ShowTics',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to draw tic marks between intervals.')], HRESULT, 'ShowTics',
              ( ['in'], VARIANT_BOOL, 'flag' )),
]
################################################################
## code template for IColorRampSymbol2 implementation
##class IColorRampSymbol2_Impl(object):
##    def _get(self):
##        u'Indicates whether to draw tic marks between intervals.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether to draw tic marks between intervals.'
##    ShowTics = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether ramp is drawn horizontally.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether ramp is drawn horizontally.'
##    Horizontal = property(_get, _set, doc = _set.__doc__)
##

IQueryTableDataSourceDescription._methods_ = [
    COMMETHOD(['propget', helpstring(u'Query statement.')], HRESULT, 'Query',
              ( ['retval', 'out'], POINTER(BSTR), 'pQuery' )),
    COMMETHOD(['propput', helpstring(u'Query statement.')], HRESULT, 'Query',
              ( ['in'], BSTR, 'pQuery' )),
    COMMETHOD(['propget', helpstring(u'Unique Key Field(s).')], HRESULT, 'OIDFields',
              ( ['retval', 'out'], POINTER(BSTR), 'pOIDFields' )),
    COMMETHOD(['propput', helpstring(u'Unique Key Field(s).')], HRESULT, 'OIDFields',
              ( ['in'], BSTR, 'pOIDFields' )),
    COMMETHOD(['propget', helpstring(u'Geometry type on spatial column if presents.')], HRESULT, 'GeometryType',
              ( ['retval', 'out'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.esriGeometryType), 'pGeometryType' )),
    COMMETHOD(['propput', helpstring(u'Geometry type on spatial column if presents.')], HRESULT, 'GeometryType',
              ( ['in'], comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.esriGeometryType, 'pGeometryType' )),
    COMMETHOD(['propget', helpstring(u'The spatial reference.')], HRESULT, 'SpatialReference',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference)), 'SpatialReference' )),
    COMMETHOD(['propputref', helpstring(u'The spatial reference.')], HRESULT, 'SpatialReference',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'SpatialReference' )),
]
################################################################
## code template for IQueryTableDataSourceDescription implementation
##class IQueryTableDataSourceDescription_Impl(object):
##    def _get(self):
##        u'Query statement.'
##        #return pQuery
##    def _set(self, pQuery):
##        u'Query statement.'
##    Query = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Geometry type on spatial column if presents.'
##        #return pGeometryType
##    def _set(self, pGeometryType):
##        u'Geometry type on spatial column if presents.'
##    GeometryType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Unique Key Field(s).'
##        #return pOIDFields
##    def _set(self, pOIDFields):
##        u'Unique Key Field(s).'
##    OIDFields = property(_get, _set, doc = _set.__doc__)
##
##    def SpatialReference(self, SpatialReference):
##        u'The spatial reference.'
##        #return 
##

IGridLabelExport._methods_ = [
    COMMETHOD([helpstring(u'Creates a graphic element for a label on the specified grid axis.')], HRESULT, 'CreateElement',
              ( ['in'], c_double, 'LabelValue' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'Location' ),
              ( ['in'], esriGridAxisEnum, 'axis' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['retval', 'out'], POINTER(POINTER(IElement)), 'graphic' )),
]
################################################################
## code template for IGridLabelExport implementation
##class IGridLabelExport_Impl(object):
##    def CreateElement(self, LabelValue, Location, axis, Display):
##        u'Creates a graphic element for a label on the specified grid axis.'
##        #return graphic
##

IColorSymbol._methods_ = [
]
################################################################
## code template for IColorSymbol implementation
##class IColorSymbol_Impl(object):

class IDimensionStyleDisplay(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u"Provides access to members that control a dimension style's display."
    _iid_ = GUID('{D7E38A34-F92A-11D3-80D3-00C04F601565}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'esriDimensionDisplay'
esriDimensionDisplayBoth = 0
esriDimensionDisplayBegin = 1
esriDimensionDisplayEnd = 2
esriDimensionDisplayNone = 3
esriDimensionDisplay = c_int # enum

# values for enumeration 'esriDimensionMarkerFit'
esriDimensionMarkerFitNone = 0
esriDimensionMarkerFitTolerance = 1
esriDimensionMarkerFitText = 2
esriDimensionMarkerFit = c_int # enum
IDimensionStyleDisplay._methods_ = [
    COMMETHOD(['propput', helpstring(u'Symbol used for the dimension line.')], HRESULT, 'DimensionLineSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ILineSymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'Symbol used for the dimension line.')], HRESULT, 'DimensionLineSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ILineSymbol)), 'Symbol' )),
    COMMETHOD(['propput', helpstring(u'Symbol used for the extension lines.')], HRESULT, 'ExtensionLineSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ILineSymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'Symbol used for the extension lines.')], HRESULT, 'ExtensionLineSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ILineSymbol)), 'Symbol' )),
    COMMETHOD(['propput', helpstring(u'Symbol used for the begin arrow.')], HRESULT, 'BeginMarkerSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IMarkerSymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'Symbol used for the begin arrow.')], HRESULT, 'BeginMarkerSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IMarkerSymbol)), 'Symbol' )),
    COMMETHOD(['propput', helpstring(u'Symbol used for the end arrow.')], HRESULT, 'EndMarkerSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IMarkerSymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'Symbol used for the end arrow.')], HRESULT, 'EndMarkerSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IMarkerSymbol)), 'Symbol' )),
    COMMETHOD(['propput', helpstring(u'Length of the extension line overshot.')], HRESULT, 'ExtensionLineOvershot',
              ( ['in'], c_double, 'overshot' )),
    COMMETHOD(['propget', helpstring(u'Length of the extension line overshot.')], HRESULT, 'ExtensionLineOvershot',
              ( ['retval', 'out'], POINTER(c_double), 'overshot' )),
    COMMETHOD(['propput', helpstring(u'Length of the extension line offset.')], HRESULT, 'ExtensionLineOffset',
              ( ['in'], c_double, 'Offset' )),
    COMMETHOD(['propget', helpstring(u'Length of the extension line offset.')], HRESULT, 'ExtensionLineOffset',
              ( ['retval', 'out'], POINTER(c_double), 'Offset' )),
    COMMETHOD(['propput', helpstring(u'Dimension line display of the style.')], HRESULT, 'DimensionLineDisplay',
              ( ['in'], esriDimensionDisplay, 'displayOption' )),
    COMMETHOD(['propget', helpstring(u'Dimension line display of the style.')], HRESULT, 'DimensionLineDisplay',
              ( ['retval', 'out'], POINTER(esriDimensionDisplay), 'displayOption' )),
    COMMETHOD(['propput', helpstring(u'Extension line display of the style.')], HRESULT, 'ExtensionLineDisplay',
              ( ['in'], esriDimensionDisplay, 'displayOption' )),
    COMMETHOD(['propget', helpstring(u'Extension line display of the style.')], HRESULT, 'ExtensionLineDisplay',
              ( ['retval', 'out'], POINTER(esriDimensionDisplay), 'displayOption' )),
    COMMETHOD(['propput', helpstring(u'Arrow display of the style.')], HRESULT, 'MarkerDisplay',
              ( ['in'], esriDimensionDisplay, 'displayOption' )),
    COMMETHOD(['propget', helpstring(u'Arrow display of the style.')], HRESULT, 'MarkerDisplay',
              ( ['retval', 'out'], POINTER(esriDimensionDisplay), 'displayOption' )),
    COMMETHOD(['propput', helpstring(u'Arrow fit policy of the style.')], HRESULT, 'MarkerFit',
              ( ['in'], esriDimensionMarkerFit, 'fit' )),
    COMMETHOD(['propget', helpstring(u'Arrow fit policy of the style.')], HRESULT, 'MarkerFit',
              ( ['retval', 'out'], POINTER(esriDimensionMarkerFit), 'fit' )),
    COMMETHOD(['propput', helpstring(u'Arrow fit tolerance of the style.')], HRESULT, 'MarkerFitTolerance',
              ( ['in'], c_double, 'Tolerance' )),
    COMMETHOD(['propget', helpstring(u'Arrow fit tolerance of the style.')], HRESULT, 'MarkerFitTolerance',
              ( ['retval', 'out'], POINTER(c_double), 'Tolerance' )),
    COMMETHOD(['propput', helpstring(u'Indicates if a dimension line should be drawn between the extension lines for an inward dimension.')], HRESULT, 'DrawLineOnFit',
              ( ['in'], VARIANT_BOOL, 'Draw' )),
    COMMETHOD(['propget', helpstring(u'Indicates if a dimension line should be drawn between the extension lines for an inward dimension.')], HRESULT, 'DrawLineOnFit',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Draw' )),
    COMMETHOD(['propput', helpstring(u'Height of the construction for creating baseline dimensions with this style.')], HRESULT, 'BaselineHeight',
              ( ['in'], c_double, 'Height' )),
    COMMETHOD(['propget', helpstring(u'Height of the construction for creating baseline dimensions with this style.')], HRESULT, 'BaselineHeight',
              ( ['retval', 'out'], POINTER(c_double), 'Height' )),
]
################################################################
## code template for IDimensionStyleDisplay implementation
##class IDimensionStyleDisplay_Impl(object):
##    def _get(self):
##        u'Height of the construction for creating baseline dimensions with this style.'
##        #return Height
##    def _set(self, Height):
##        u'Height of the construction for creating baseline dimensions with this style.'
##    BaselineHeight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Extension line display of the style.'
##        #return displayOption
##    def _set(self, displayOption):
##        u'Extension line display of the style.'
##    ExtensionLineDisplay = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Symbol used for the end arrow.'
##        #return Symbol
##    def _set(self, Symbol):
##        u'Symbol used for the end arrow.'
##    EndMarkerSymbol = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Arrow display of the style.'
##        #return displayOption
##    def _set(self, displayOption):
##        u'Arrow display of the style.'
##    MarkerDisplay = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Length of the extension line offset.'
##        #return Offset
##    def _set(self, Offset):
##        u'Length of the extension line offset.'
##    ExtensionLineOffset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Dimension line display of the style.'
##        #return displayOption
##    def _set(self, displayOption):
##        u'Dimension line display of the style.'
##    DimensionLineDisplay = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Symbol used for the dimension line.'
##        #return Symbol
##    def _set(self, Symbol):
##        u'Symbol used for the dimension line.'
##    DimensionLineSymbol = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Length of the extension line overshot.'
##        #return overshot
##    def _set(self, overshot):
##        u'Length of the extension line overshot.'
##    ExtensionLineOvershot = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Symbol used for the begin arrow.'
##        #return Symbol
##    def _set(self, Symbol):
##        u'Symbol used for the begin arrow.'
##    BeginMarkerSymbol = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Arrow fit tolerance of the style.'
##        #return Tolerance
##    def _set(self, Tolerance):
##        u'Arrow fit tolerance of the style.'
##    MarkerFitTolerance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Arrow fit policy of the style.'
##        #return fit
##    def _set(self, fit):
##        u'Arrow fit policy of the style.'
##    MarkerFit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Symbol used for the extension lines.'
##        #return Symbol
##    def _set(self, Symbol):
##        u'Symbol used for the extension lines.'
##    ExtensionLineSymbol = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if a dimension line should be drawn between the extension lines for an inward dimension.'
##        #return Draw
##    def _set(self, Draw):
##        u'Indicates if a dimension line should be drawn between the extension lines for an inward dimension.'
##    DrawLineOnFit = property(_get, _set, doc = _set.__doc__)
##

class FormattedGridLabel(CoClass):
    u'A grid label that uses a formatted number.'
    _reg_clsid_ = GUID('{CE41C507-9DF9-11D2-AADE-000000000000}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
FormattedGridLabel._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGridLabel, IGridLabel2, IFormattedGridLabel, IGridLabelExport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

class DMSGridLabel(CoClass):
    u'A grid label in degrees, minutes and seconds.'
    _reg_clsid_ = GUID('{CE41C506-9DF9-11D2-AADE-000000000000}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
DMSGridLabel._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGridLabel, IDMSGridLabel, IGridLabel2, IDMSGridLabel2, IDMSGridLabel3, IGridLabelExport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

class IEditTemplateManager(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'IEditTemplateManager Interface'
    _iid_ = GUID('{000F7E24-8470-40C7-B0C1-8D2E8C33A619}')
    _idlflags_ = ['oleautomation']
IEditTemplateManager._methods_ = [
    COMMETHOD(['propget', helpstring(u'The number of available edit templates.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The edit template at the specified index.')], HRESULT, 'EditTemplate',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IEditTemplate)), 'EditTemplate' )),
]
################################################################
## code template for IEditTemplateManager implementation
##class IEditTemplateManager_Impl(object):
##    @property
##    def Count(self):
##        u'The number of available edit templates.'
##        #return Count
##
##    @property
##    def EditTemplate(self, Index):
##        u'The edit template at the specified index.'
##        #return EditTemplate
##

class IPageLayout3(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the Page Layout.'
    _iid_ = GUID('{DBB71B6A-DB4E-4780-AE6F-39EA7A4A075F}')
    _idlflags_ = ['oleautomation']
class IRulerSettings(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control Ruler setup.'
    _iid_ = GUID('{31E081A9-CB02-11D1-876C-0000F8751720}')
    _idlflags_ = ['oleautomation']
class ISnapGrid(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the Snapping grid.'
    _iid_ = GUID('{31E081AA-CB02-11D1-876C-0000F8751720}')
    _idlflags_ = ['oleautomation']
IPageLayout3._methods_ = [
    COMMETHOD(['propget', helpstring(u'On-screen representation of the printer page.')], HRESULT, 'Page',
              ( ['retval', 'out'], POINTER(POINTER(IPage)), 'Page' )),
    COMMETHOD(['propget', helpstring(u'The ruler settings.')], HRESULT, 'RulerSettings',
              ( ['retval', 'out'], POINTER(POINTER(IRulerSettings)), 'RulerSettings' )),
    COMMETHOD(['propget', helpstring(u'The snapping grid.')], HRESULT, 'SnapGrid',
              ( ['retval', 'out'], POINTER(POINTER(ISnapGrid)), 'SnapGrid' )),
    COMMETHOD(['propget', helpstring(u'The horizontal snapping guides.')], HRESULT, 'HorizontalSnapGuides',
              ( ['retval', 'out'], POINTER(POINTER(ISnapGuides)), 'SnapGuides' )),
    COMMETHOD(['propget', helpstring(u'The vertical snapping guides.')], HRESULT, 'VerticalSnapGuides',
              ( ['retval', 'out'], POINTER(POINTER(ISnapGuides)), 'SnapGuides' )),
    COMMETHOD(['propget', helpstring(u'The current zoom percent.  100 means 1:1.  200 means twice normal size, etc.')], HRESULT, 'ZoomPercent',
              ( ['retval', 'out'], POINTER(c_double), 'percent' )),
    COMMETHOD(['propput', helpstring(u'Indicates if graphics will be aligned to the margins or to each other.')], HRESULT, 'AlignToMargins',
              ( ['in'], VARIANT_BOOL, 'AlignToMargins' )),
    COMMETHOD(['propget', helpstring(u'Indicates if graphics will be aligned to the margins or to each other.')], HRESULT, 'AlignToMargins',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'AlignToMargins' )),
    COMMETHOD([helpstring(u'Fit the width of the page to the screen.')], HRESULT, 'ZoomToWidth'),
    COMMETHOD([helpstring(u'Fit the whole page in the window.')], HRESULT, 'ZoomToWhole'),
    COMMETHOD([helpstring(u'Magnify the page by a certain percentage.  100 means actual size.  200 means twice normal size, etc.')], HRESULT, 'ZoomToPercent',
              ( ['in'], c_int, 'percent' )),
    COMMETHOD([helpstring(u'Focus the next map.')], HRESULT, 'FocusNextMapFrame'),
    COMMETHOD([helpstring(u'Focus the previous map.')], HRESULT, 'FocusPreviousMapFrame'),
    COMMETHOD([helpstring(u'Replace the maps in the data frames with the specified maps.  If there are more maps than frames, new frames are created.  If there are fewer frames than maps, extra frames are cleared.')], HRESULT, 'ReplaceMaps',
              ( ['in'], POINTER(IMaps), 'maps' )),
    COMMETHOD(['propputref', helpstring(u'The object that is currently managing the content of the layout.')], HRESULT, 'ContentProvider',
              ( ['in'], POINTER(IUnknown), 'Provider' )),
    COMMETHOD(['propget', helpstring(u'The object that is currently managing the content of the layout.')], HRESULT, 'ContentProvider',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'Provider' )),
    COMMETHOD([helpstring(u'Clears the elements without dismantling them.')], HRESULT, 'ClearContent'),
    COMMETHOD(['propget', helpstring(u'The associated printer.')], HRESULT, 'Printer',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._7DB92CEC_CB65_420A_8737_FCD0722FD436_0_10_2.IPrinter)), 'Printer' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layout stops firing events until the flag is set to false.')], HRESULT, 'DelayEvents',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'DelayEvents' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the layout stops firing events until the flag is set to false.')], HRESULT, 'DelayEvents',
              ( ['in'], VARIANT_BOOL, 'DelayEvents' )),
]
################################################################
## code template for IPageLayout3 implementation
##class IPageLayout3_Impl(object):
##    def FocusPreviousMapFrame(self):
##        u'Focus the previous map.'
##        #return 
##
##    @property
##    def Printer(self):
##        u'The associated printer.'
##        #return Printer
##
##    def ReplaceMaps(self, maps):
##        u'Replace the maps in the data frames with the specified maps.  If there are more maps than frames, new frames are created.  If there are fewer frames than maps, extra frames are cleared.'
##        #return 
##
##    @property
##    def VerticalSnapGuides(self):
##        u'The vertical snapping guides.'
##        #return SnapGuides
##
##    def ZoomToPercent(self, percent):
##        u'Magnify the page by a certain percentage.  100 means actual size.  200 means twice normal size, etc.'
##        #return 
##
##    def ZoomToWidth(self):
##        u'Fit the width of the page to the screen.'
##        #return 
##
##    def ZoomToWhole(self):
##        u'Fit the whole page in the window.'
##        #return 
##
##    @property
##    def RulerSettings(self):
##        u'The ruler settings.'
##        #return RulerSettings
##
##    def _get(self):
##        u'Indicates if graphics will be aligned to the margins or to each other.'
##        #return AlignToMargins
##    def _set(self, AlignToMargins):
##        u'Indicates if graphics will be aligned to the margins or to each other.'
##    AlignToMargins = property(_get, _set, doc = _set.__doc__)
##
##    def ClearContent(self):
##        u'Clears the elements without dismantling them.'
##        #return 
##
##    @property
##    def ZoomPercent(self):
##        u'The current zoom percent.  100 means 1:1.  200 means twice normal size, etc.'
##        #return percent
##
##    @property
##    def SnapGrid(self):
##        u'The snapping grid.'
##        #return SnapGrid
##
##    def _get(self):
##        u'Indicates if the layout stops firing events until the flag is set to false.'
##        #return DelayEvents
##    def _set(self, DelayEvents):
##        u'Indicates if the layout stops firing events until the flag is set to false.'
##    DelayEvents = property(_get, _set, doc = _set.__doc__)
##
##    def FocusNextMapFrame(self):
##        u'Focus the next map.'
##        #return 
##
##    @property
##    def HorizontalSnapGuides(self):
##        u'The horizontal snapping guides.'
##        #return SnapGuides
##
##    @property
##    def Page(self):
##        u'On-screen representation of the printer page.'
##        #return Page
##
##    @property
##    def ContentProvider(self, Provider):
##        u'The object that is currently managing the content of the layout.'
##        #return 
##

class MapFrame(CoClass):
    u'A graphic element for displaying maps.'
    _reg_clsid_ = GUID('{DD94D770-836D-11D0-87EC-080009EC732A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IGraphicsContainerProperty(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control Graphics Container Properties.'
    _iid_ = GUID('{E46BDC13-40B1-11D4-A683-0008C7DF88DB}')
    _idlflags_ = ['oleautomation']
class IMapGrids(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the map grids in a data frame.'
    _iid_ = GUID('{08E7D005-9AAE-11D2-AE7B-080009EC732A}')
    _idlflags_ = ['oleautomation']
class IMapFrameEvents(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the events that occur when the state of the map frame changes.'
    _iid_ = GUID('{FE3115EB-ED6C-11D0-8683-0000F8751720}')
    _idlflags_ = ['oleautomation']
MapFrame._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IElement, IElementProperties, IElementProperties2, IElementProperties3, IMapFrame, IGraphicsContainerProperty, IFrameElement, IFrameDraw, IGraphicsComposite, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, IActiveViewEvents, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayEvents, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITransformEvents, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayAdmin, IMapGrids, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ITransform2D, IBoundsProperties, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IConnectionPointContainer, IFrameProperties]
MapFrame._outgoing_interfaces_ = [IMapFrameEvents]

class ICalibratedMapGridBorder(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the calibrated map grid border.'
    _iid_ = GUID('{6CA416AF-E160-11D2-9F4E-00C04F6BC78E}')
    _idlflags_ = ['oleautomation']
ICalibratedMapGridBorder._methods_ = [
    COMMETHOD(['propget', helpstring(u'The foreground color of the border pattern.')], HRESULT, 'ForegroundColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'The foreground color of the border pattern.')], HRESULT, 'ForegroundColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'The background color of the border pattern.')], HRESULT, 'BackgroundColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'The background color of the border pattern.')], HRESULT, 'BackgroundColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'The width of the border in points.')], HRESULT, 'BorderWidth',
              ( ['retval', 'out'], POINTER(c_double), 'widthPts' )),
    COMMETHOD(['propput', helpstring(u'The width of the border in points.')], HRESULT, 'BorderWidth',
              ( ['in'], c_double, 'widthPts' )),
    COMMETHOD(['propget', helpstring(u'The interval between border patterns in points.')], HRESULT, 'Interval',
              ( ['retval', 'out'], POINTER(c_double), 'intervalPts' )),
    COMMETHOD(['propput', helpstring(u'The interval between border patterns in points.')], HRESULT, 'Interval',
              ( ['in'], c_double, 'intervalPts' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the border pattern alternates across the width of the border.')], HRESULT, 'Alternating',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Alternating' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the border pattern alternates across the width of the border.')], HRESULT, 'Alternating',
              ( ['in'], VARIANT_BOOL, 'Alternating' )),
]
################################################################
## code template for ICalibratedMapGridBorder implementation
##class ICalibratedMapGridBorder_Impl(object):
##    def _get(self):
##        u'Indicates if the border pattern alternates across the width of the border.'
##        #return Alternating
##    def _set(self, Alternating):
##        u'Indicates if the border pattern alternates across the width of the border.'
##    Alternating = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The interval between border patterns in points.'
##        #return intervalPts
##    def _set(self, intervalPts):
##        u'The interval between border patterns in points.'
##    Interval = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The foreground color of the border pattern.'
##        #return Color
##    def _set(self, Color):
##        u'The foreground color of the border pattern.'
##    ForegroundColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The width of the border in points.'
##        #return widthPts
##    def _set(self, widthPts):
##        u'The width of the border in points.'
##    BorderWidth = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The background color of the border pattern.'
##        #return Color
##    def _set(self, Color):
##        u'The background color of the border pattern.'
##    BackgroundColor = property(_get, _set, doc = _set.__doc__)
##

IRasterFunctionInfo._methods_ = [
    COMMETHOD(['propget', helpstring(u'The raster function name.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'pName' )),
    COMMETHOD(['propput', helpstring(u'The raster function name.')], HRESULT, 'Name',
              ( ['in'], BSTR, 'pName' )),
    COMMETHOD(['propget', helpstring(u'The raster function description.')], HRESULT, 'Description',
              ( ['retval', 'out'], POINTER(BSTR), 'pDescription' )),
    COMMETHOD(['propput', helpstring(u'The raster function description.')], HRESULT, 'Description',
              ( ['in'], BSTR, 'pDescription' )),
    COMMETHOD(['propget', helpstring(u'The raster function help URL.')], HRESULT, 'Help',
              ( ['retval', 'out'], POINTER(BSTR), 'pHelp' )),
    COMMETHOD(['propput', helpstring(u'The raster function help URL.')], HRESULT, 'Help',
              ( ['in'], BSTR, 'pHelp' )),
]
################################################################
## code template for IRasterFunctionInfo implementation
##class IRasterFunctionInfo_Impl(object):
##    def _get(self):
##        u'The raster function help URL.'
##        #return pHelp
##    def _set(self, pHelp):
##        u'The raster function help URL.'
##    Help = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The raster function name.'
##        #return pName
##    def _set(self, pName):
##        u'The raster function name.'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The raster function description.'
##        #return pDescription
##    def _set(self, pDescription):
##        u'The raster function description.'
##    Description = property(_get, _set, doc = _set.__doc__)
##

IImageView._methods_ = [
    COMMETHOD(['propget', helpstring(u'The image view ID.')], HRESULT, 'VID',
              ( ['retval', 'out'], POINTER(BSTR), 'pVID' )),
    COMMETHOD(['propput', helpstring(u'The image view ID.')], HRESULT, 'VID',
              ( ['in'], BSTR, 'pVID' )),
    COMMETHOD(['propget', helpstring(u'The image view name.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'pName' )),
    COMMETHOD(['propput', helpstring(u'The image view name.')], HRESULT, 'Name',
              ( ['in'], BSTR, 'pName' )),
    COMMETHOD(['propget', helpstring(u'The image view description.')], HRESULT, 'Description',
              ( ['retval', 'out'], POINTER(BSTR), 'pDescription' )),
    COMMETHOD(['propput', helpstring(u'The image view description.')], HRESULT, 'Description',
              ( ['in'], BSTR, 'pDescription' )),
    COMMETHOD(['propget', helpstring(u'The image view extent.')], HRESULT, 'Extent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'ppExtent' )),
    COMMETHOD(['propputref', helpstring(u'The image view extent.')], HRESULT, 'Extent',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'ppExtent' )),
    COMMETHOD([helpstring(u'The pxiel size in its native units.')], HRESULT, 'GetPixelSize',
              ( ['out'], POINTER(c_double), 'pDx' ),
              ( ['out'], POINTER(c_double), 'pDy' )),
    COMMETHOD([helpstring(u'The pxiel size in its native units.')], HRESULT, 'PutPixelSize',
              ( ['in'], c_double, 'dx' ),
              ( ['in'], c_double, 'dy' )),
    COMMETHOD(['propget', helpstring(u'The number of bands.')], HRESULT, 'BandCount',
              ( ['retval', 'out'], POINTER(c_int), 'pNumBands' )),
    COMMETHOD(['propput', helpstring(u'The number of bands.')], HRESULT, 'BandCount',
              ( ['in'], c_int, 'pNumBands' )),
    COMMETHOD(['propget', helpstring(u'The pixel type.')], HRESULT, 'PixelType',
              ( ['retval', 'out'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.rstPixelType), 'pPixelType' )),
    COMMETHOD(['propput', helpstring(u'The pixel type.')], HRESULT, 'PixelType',
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.rstPixelType, 'pPixelType' )),
    COMMETHOD(['propget', helpstring(u'The image view mosaic rule.')], HRESULT, 'MosaicRule',
              ( ['retval', 'out'], POINTER(POINTER(IMosaicRule)), 'ppMosaicRule' )),
    COMMETHOD(['propputref', helpstring(u'The image view mosaic rule.')], HRESULT, 'MosaicRule',
              ( ['in'], POINTER(IMosaicRule), 'ppMosaicRule' )),
    COMMETHOD(['propget', helpstring(u'The image view rendering rule.')], HRESULT, 'RenderingRule',
              ( ['retval', 'out'], POINTER(POINTER(IRenderingRule)), 'ppRenderingRule' )),
    COMMETHOD(['propputref', helpstring(u'The image view rendering rule.')], HRESULT, 'RenderingRule',
              ( ['in'], POINTER(IRenderingRule), 'ppRenderingRule' )),
    COMMETHOD(['propget', helpstring(u'Indicates if view properties are adaptive to view content.')], HRESULT, 'Adaptive',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pAdpative' )),
    COMMETHOD(['propput', helpstring(u'Indicates if view properties are adaptive to view content.')], HRESULT, 'Adaptive',
              ( ['in'], VARIANT_BOOL, 'pAdpative' )),
]
################################################################
## code template for IImageView implementation
##class IImageView_Impl(object):
##    def _get(self):
##        u'The image view name.'
##        #return pName
##    def _set(self, pName):
##        u'The image view name.'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The image view ID.'
##        #return pVID
##    def _set(self, pVID):
##        u'The image view ID.'
##    VID = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The pixel type.'
##        #return pPixelType
##    def _set(self, pPixelType):
##        u'The pixel type.'
##    PixelType = property(_get, _set, doc = _set.__doc__)
##
##    def GetPixelSize(self):
##        u'The pxiel size in its native units.'
##        #return pDx, pDy
##
##    def PutPixelSize(self, dx, dy):
##        u'The pxiel size in its native units.'
##        #return 
##
##    def Extent(self, ppExtent):
##        u'The image view extent.'
##        #return 
##
##    def MosaicRule(self, ppMosaicRule):
##        u'The image view mosaic rule.'
##        #return 
##
##    def _get(self):
##        u'Indicates if view properties are adaptive to view content.'
##        #return pAdpative
##    def _set(self, pAdpative):
##        u'Indicates if view properties are adaptive to view content.'
##    Adaptive = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The number of bands.'
##        #return pNumBands
##    def _set(self, pNumBands):
##        u'The number of bands.'
##    BandCount = property(_get, _set, doc = _set.__doc__)
##
##    def RenderingRule(self, ppRenderingRule):
##        u'The image view rendering rule.'
##        #return 
##
##    def _get(self):
##        u'The image view description.'
##        #return pDescription
##    def _set(self, pDescription):
##        u'The image view description.'
##    Description = property(_get, _set, doc = _set.__doc__)
##

class IPageLayoutExtensions(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the extensions of a page layout.'
    _iid_ = GUID('{50713BC8-4AB3-4903-9A4A-1C0FF1037019}')
    _idlflags_ = ['oleautomation']
IPageLayoutExtensions._methods_ = [
    COMMETHOD(['propget', helpstring(u'Number of extensions.')], HRESULT, 'ExtensionCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The extension at the specified index.')], HRESULT, 'Extension',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ext' )),
    COMMETHOD([helpstring(u'Adds a new extension.')], HRESULT, 'AddExtension',
              ( ['in'], POINTER(IUnknown), 'ext' )),
    COMMETHOD([helpstring(u'Removes the specified extension.')], HRESULT, 'RemoveExtension',
              ( ['in'], c_int, 'Index' )),
]
################################################################
## code template for IPageLayoutExtensions implementation
##class IPageLayoutExtensions_Impl(object):
##    def AddExtension(self, ext):
##        u'Adds a new extension.'
##        #return 
##
##    def RemoveExtension(self, Index):
##        u'Removes the specified extension.'
##        #return 
##
##    @property
##    def ExtensionCount(self):
##        u'Number of extensions.'
##        #return Count
##
##    @property
##    def Extension(self, Index):
##        u'The extension at the specified index.'
##        #return ext
##

class IProtectNameCarto(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to dummy methods protecting name correctness.'
    _iid_ = GUID('{9C43D8C6-DB4C-44D7-8038-15DE4EF965A6}')
    _idlflags_ = []
IProtectNameCarto._methods_ = [
    COMMETHOD([], HRESULT, 'ProtectOLE_HANDLE',
              ( [], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE, 'aHandle' )),
    COMMETHOD([], HRESULT, 'ProtectOLE_COLOR',
              ( [], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_COLOR, 'aColor' )),
    COMMETHOD([], HRESULT, 'altitude'),
]
################################################################
## code template for IProtectNameCarto implementation
##class IProtectNameCarto_Impl(object):
##    def ProtectOLE_COLOR(self, aColor):
##        '-no docstring-'
##        #return 
##
##    def altitude(self):
##        '-no docstring-'
##        #return 
##
##    def ProtectOLE_HANDLE(self, aHandle):
##        '-no docstring-'
##        #return 
##

class BasicTableHistogram(CoClass):
    u'A histogram data structure that is created from table data.  Use this to pass data to a classification object.'
    _reg_clsid_ = GUID('{D0AC357F-21AF-42D6-8EF5-E5CEADBC6B84}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IBasicHistogram(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control histogram objects created from different data sources.'
    _iid_ = GUID('{D7DD57C6-6A35-4DBF-8F64-AFFDCED5C364}')
    _idlflags_ = ['oleautomation']
class ITableHistogram(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a histogram created from tabular data.'
    _iid_ = GUID('{FD21F230-67A6-11D3-9F66-00C04F6BC709}')
    _idlflags_ = ['oleautomation']
class ITableHistogram2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a histogram created from tabular data.'
    _iid_ = GUID('{58C7E73A-FC61-452D-A908-7A072AF25E2A}')
    _idlflags_ = ['oleautomation']
class IDataNormalization(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the data normalization properties of a renderer.'
    _iid_ = GUID('{678D02A5-E3FA-11D3-9F7B-00C04F6BC709}')
    _idlflags_ = ['oleautomation']
BasicTableHistogram._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IBasicHistogram, ITableHistogram, ITableHistogram2, IDataNormalization, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStatisticsResults]

class ICoverageAnnotationLayer2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a coverage annotation layer.'
    _iid_ = GUID('{6A1CFA9C-3FAD-4D13-8AF4-A40BE321A8B3}')
    _idlflags_ = ['oleautomation']
ICoverageAnnotationLayer2._methods_ = [
    COMMETHOD(['propget', helpstring(u'The number of symbols used by the layer.')], HRESULT, 'SymbolCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The symbol number at the specified index.')], HRESULT, 'SymbolNumber',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(c_int), 'SymbolNumber' )),
    COMMETHOD(['propget', helpstring(u'The font for the specified symbol number.')], HRESULT, 'Font',
              ( ['in'], c_int, 'SymbolNumber' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IFontDisp)), 'Font' )),
    COMMETHOD(['propputref', helpstring(u'The font for the specified symbol number.')], HRESULT, 'Font',
              ( ['in'], c_int, 'SymbolNumber' ),
              ( ['in'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IFontDisp), 'Font' )),
    COMMETHOD(['propget', helpstring(u'The font color for the specified symbol number.')], HRESULT, 'FontColor',
              ( ['in'], c_int, 'SymbolNumber' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propputref', helpstring(u'The font color for the specified symbol number.')], HRESULT, 'FontColor',
              ( ['in'], c_int, 'SymbolNumber' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'The text symbol for the specified symbol number.')], HRESULT, 'TextSymbol',
              ( ['in'], c_int, 'SymbolNumber' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol)), 'Symbol' )),
    COMMETHOD(['propputref', helpstring(u'The text symbol for the specified symbol number.')], HRESULT, 'TextSymbol',
              ( ['in'], c_int, 'SymbolNumber' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'The number of levels in the layer.')], HRESULT, 'LevelCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The level number at the specified index.')], HRESULT, 'LevelNumber',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(c_int), 'pLevelNumber' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the level at the specified level number is visible.')], HRESULT, 'LevelVisibility',
              ( ['in'], c_int, 'LevelNumber' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Visible' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the level at the specified level number is visible.')], HRESULT, 'LevelVisibility',
              ( ['in'], c_int, 'LevelNumber' ),
              ( ['in'], VARIANT_BOOL, 'Visible' )),
    COMMETHOD(['propget', helpstring(u'The line symbol for the arrow.')], HRESULT, 'ArrowSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ILineSymbol)), 'Symbol' )),
    COMMETHOD(['propputref', helpstring(u'The line symbol for the arrow.')], HRESULT, 'ArrowSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ILineSymbol), 'Symbol' )),
    COMMETHOD([helpstring(u'Generates graphic elements from the annotation features.  The optional envelope specifies a bounding box.  The display is used for converting from map units.')], HRESULT, 'GenerateGraphics',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'box' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], VARIANT_BOOL, 'useGroupSymbolElement' ),
              ( ['retval', 'out'], POINTER(POINTER(IEnumElement)), 'Elements' )),
    COMMETHOD([helpstring(u'Starts a graphics generation process from the annotation features.  The optional envelope specifies a bounding box.  The display is used for converting from map units.')], HRESULT, 'StartGeneratingGraphics',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'box' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], VARIANT_BOOL, 'withAttributes' ),
              ( ['in'], VARIANT_BOOL, 'useGroupSymbolElement' )),
    COMMETHOD(['propget', helpstring(u'Generates the next graphic element in the graphics generation loop.  Returns a NULL element after the last annotation feature has been read.  Call only after StartGeneratingGraphics.')], HRESULT, 'NextGraphic',
              ( ['retval', 'out'], POINTER(POINTER(IElement)), 'Element' )),
    COMMETHOD([helpstring(u'Generates the next feature and graphic element in the graphics generation loop.  Returns a NULL feature and element after the last annotation feature has been read.  Call only after StartGeneratingGraphics.')], HRESULT, 'NextFeatureAndGraphic',
              ( ['out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeature)), 'Feature' ),
              ( ['out'], POINTER(POINTER(IElement)), 'Element' )),
]
################################################################
## code template for ICoverageAnnotationLayer2 implementation
##class ICoverageAnnotationLayer2_Impl(object):
##    @property
##    def SymbolCount(self):
##        u'The number of symbols used by the layer.'
##        #return Count
##
##    def Font(self, SymbolNumber, Font):
##        u'The font for the specified symbol number.'
##        #return 
##
##    @property
##    def NextGraphic(self):
##        u'Generates the next graphic element in the graphics generation loop.  Returns a NULL element after the last annotation feature has been read.  Call only after StartGeneratingGraphics.'
##        #return Element
##
##    def _get(self, LevelNumber):
##        u'Indicates if the level at the specified level number is visible.'
##        #return Visible
##    def _set(self, LevelNumber, Visible):
##        u'Indicates if the level at the specified level number is visible.'
##    LevelVisibility = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def LevelNumber(self, Index):
##        u'The level number at the specified index.'
##        #return pLevelNumber
##
##    @property
##    def LevelCount(self):
##        u'The number of levels in the layer.'
##        #return Count
##
##    def TextSymbol(self, SymbolNumber, Symbol):
##        u'The text symbol for the specified symbol number.'
##        #return 
##
##    def ArrowSymbol(self, Symbol):
##        u'The line symbol for the arrow.'
##        #return 
##
##    def FontColor(self, SymbolNumber, Color):
##        u'The font color for the specified symbol number.'
##        #return 
##
##    @property
##    def SymbolNumber(self, Index):
##        u'The symbol number at the specified index.'
##        #return SymbolNumber
##
##    def StartGeneratingGraphics(self, box, Display, withAttributes, useGroupSymbolElement):
##        u'Starts a graphics generation process from the annotation features.  The optional envelope specifies a bounding box.  The display is used for converting from map units.'
##        #return 
##
##    def NextFeatureAndGraphic(self):
##        u'Generates the next feature and graphic element in the graphics generation loop.  Returns a NULL feature and element after the last annotation feature has been read.  Call only after StartGeneratingGraphics.'
##        #return Feature, Element
##
##    def GenerateGraphics(self, box, Display, useGroupSymbolElement):
##        u'Generates graphic elements from the annotation features.  The optional envelope specifies a bounding box.  The display is used for converting from map units.'
##        #return Elements
##


# values for enumeration 'esriSymbolSubstituteType'
esriSymbolSubstituteNone = 0
esriSymbolSubstituteColor = 1
esriSymbolSubstituteIndividualSubordinate = 2
esriSymbolSubstituteIndividualDominant = 3
esriSymbolSubstituteType = c_int # enum
IPublishLayer._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if the layer supports the publishing process.')], HRESULT, 'SupportsPublishing',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'bValid' )),
    COMMETHOD(['propget', helpstring(u'The layer description reported to the publisher.')], HRESULT, 'PublishingDescription',
              ( ['retval', 'out'], POINTER(BSTR), 'bsDescription' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the data for the layer is currently valid.')], HRESULT, 'DataValid',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'bDataValid' )),
    COMMETHOD(['propget', helpstring(u"Details of the layer's data.")], HRESULT, 'DataDetails',
              ( ['in'], BSTR, 'bsPadding' ),
              ( ['retval', 'out'], POINTER(BSTR), 'bsDataDetails' )),
    COMMETHOD([helpstring(u'Prepare the layer for the publishing process.')], HRESULT, 'PrepareForPublishing'),
]
################################################################
## code template for IPublishLayer implementation
##class IPublishLayer_Impl(object):
##    @property
##    def SupportsPublishing(self):
##        u'Indicates if the layer supports the publishing process.'
##        #return bValid
##
##    @property
##    def DataDetails(self, bsPadding):
##        u"Details of the layer's data."
##        #return bsDataDetails
##
##    def PrepareForPublishing(self):
##        u'Prepare the layer for the publishing process.'
##        #return 
##
##    @property
##    def PublishingDescription(self):
##        u'The layer description reported to the publisher.'
##        #return bsDescription
##
##    @property
##    def DataValid(self):
##        u'Indicates if the data for the layer is currently valid.'
##        #return bDataValid
##

class IRasterTypeInfo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that describe a raster type.'
    _iid_ = GUID('{CD8BB9E4-116B-4E3D-8EEF-BA031083244F}')
    _idlflags_ = ['oleautomation']
IRasterTypeInfo._methods_ = [
    COMMETHOD(['propget', helpstring(u'The raster type name.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'pName' )),
    COMMETHOD(['propput', helpstring(u'The raster type name.')], HRESULT, 'Name',
              ( ['in'], BSTR, 'pName' )),
    COMMETHOD(['propget', helpstring(u'The raster type description.')], HRESULT, 'Description',
              ( ['retval', 'out'], POINTER(BSTR), 'pDescription' )),
    COMMETHOD(['propput', helpstring(u'The raster type description.')], HRESULT, 'Description',
              ( ['in'], BSTR, 'pDescription' )),
    COMMETHOD(['propget', helpstring(u'The raster type help URL.')], HRESULT, 'Help',
              ( ['retval', 'out'], POINTER(BSTR), 'pHelp' )),
    COMMETHOD(['propput', helpstring(u'The raster type help URL.')], HRESULT, 'Help',
              ( ['in'], BSTR, 'pHelp' )),
]
################################################################
## code template for IRasterTypeInfo implementation
##class IRasterTypeInfo_Impl(object):
##    def _get(self):
##        u'The raster type help URL.'
##        #return pHelp
##    def _set(self, pHelp):
##        u'The raster type help URL.'
##    Help = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The raster type name.'
##        #return pName
##    def _set(self, pName):
##        u'The raster type name.'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The raster type description.'
##        #return pDescription
##    def _set(self, pDescription):
##        u'The raster type description.'
##    Description = property(_get, _set, doc = _set.__doc__)
##

class IExpression(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control expression calculation.'
    _iid_ = GUID('{3C957F4D-2120-11D4-A383-00C04F6BC619}')
    _idlflags_ = ['oleautomation']
IExpression._methods_ = [
    COMMETHOD(['propget', helpstring(u'Expression string applied to the field of each row in the cursor.')], HRESULT, 'Expression',
              ( ['retval', 'out'], POINTER(BSTR), 'pExpression' )),
    COMMETHOD(['propput', helpstring(u'Expression string applied to the field of each row in the cursor.')], HRESULT, 'Expression',
              ( ['in'], BSTR, 'pExpression' )),
    COMMETHOD([helpstring(u'Perform the calculation.')], HRESULT, 'Calculate',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeature), 'pFeature' ),
              ( ['retval', 'out'], POINTER(c_double), 'result' )),
    COMMETHOD([helpstring(u'Check the validity of the expression.')], HRESULT, 'IsValid',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable), 'pTable' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Valid' )),
]
################################################################
## code template for IExpression implementation
##class IExpression_Impl(object):
##    def IsValid(self, pTable):
##        u'Check the validity of the expression.'
##        #return Valid
##
##    def _get(self):
##        u'Expression string applied to the field of each row in the cursor.'
##        #return pExpression
##    def _set(self, pExpression):
##        u'Expression string applied to the field of each row in the cursor.'
##    Expression = property(_get, _set, doc = _set.__doc__)
##
##    def Calculate(self, pFeature):
##        u'Perform the calculation.'
##        #return result
##

class IMapServerLegendInfo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Map Server Legend Info Interface.'
    _iid_ = GUID('{D29CDEEF-6467-4AA8-B435-0293579A2D79}')
    _idlflags_ = ['oleautomation']
IMapServerLegendInfos._methods_ = [
    COMMETHOD(['propget', helpstring(u'The legend info count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The legend info at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IMapServerLegendInfo)), 'info' )),
    COMMETHOD([helpstring(u'Removes the legend info at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all legend infos.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Adds a legend info.')], HRESULT, 'Add',
              ( ['in'], POINTER(IMapServerLegendInfo), 'info' )),
    COMMETHOD([helpstring(u'Adds a legend info at the specified position.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(IMapServerLegendInfo), 'info' )),
]
################################################################
## code template for IMapServerLegendInfos implementation
##class IMapServerLegendInfos_Impl(object):
##    @property
##    def Count(self):
##        u'The legend info count.'
##        #return Count
##
##    def Insert(self, Index, info):
##        u'Adds a legend info at the specified position.'
##        #return 
##
##    def Remove(self, Index):
##        u'Removes the legend info at the specified position.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'The legend info at the specified position.'
##        #return info
##
##    def RemoveAll(self):
##        u'Removes all legend infos.'
##        #return 
##
##    def Add(self, info):
##        u'Adds a legend info.'
##        #return 
##


# values for enumeration 'esriQueryResultFormat'
esriQueryResultRecordSetAsObject = 0
esriQueryResultKMLAsMime = 1
esriQueryResultKMLAsURL = 2
esriQueryResultJsonAsMime = 3
esriQueryResultJsonAsURL = 4
esriQueryResultAMFAsMime = 5
esriQueryResultAMFAsURL = 6
esriQueryResultFormat = c_int # enum
IQueryResultOptions._methods_ = [
    COMMETHOD(['propget', helpstring(u'The query result format.')], HRESULT, 'Format',
              ( ['retval', 'out'], POINTER(esriQueryResultFormat), 'Format' )),
    COMMETHOD(['propput', helpstring(u'The query result format.')], HRESULT, 'Format',
              ( ['in'], esriQueryResultFormat, 'Format' )),
    COMMETHOD(['propget', helpstring(u'Format properties specific to result format.')], HRESULT, 'FormatProperties',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet)), 'ppOptions' )),
    COMMETHOD(['propputref', helpstring(u'Format properties specific to result format.')], HRESULT, 'FormatProperties',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet), 'ppOptions' )),
    COMMETHOD(['propget', helpstring(u'Geo transformation required to transform the geometry if the requested GCS is different from the source.')], HRESULT, 'GeoTransformation',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeoTransformation)), 'geotransform' )),
    COMMETHOD(['propputref', helpstring(u'Geo transformation required to transform the geometry if the requested GCS is different from the source.')], HRESULT, 'GeoTransformation',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeoTransformation), 'geotransform' )),
]
################################################################
## code template for IQueryResultOptions implementation
##class IQueryResultOptions_Impl(object):
##    def GeoTransformation(self, geotransform):
##        u'Geo transformation required to transform the geometry if the requested GCS is different from the source.'
##        #return 
##
##    def FormatProperties(self, ppOptions):
##        u'Format properties specific to result format.'
##        #return 
##
##    def _get(self):
##        u'The query result format.'
##        #return Format
##    def _set(self, Format):
##        u'The query result format.'
##    Format = property(_get, _set, doc = _set.__doc__)
##

class IDataGroupSeriesProperties(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control grouping of the graph data.'
    _iid_ = GUID('{7B25B19E-035C-4209-ABBC-346B642D69BC}')
    _idlflags_ = ['oleautomation']
IDataGroupSeriesProperties._methods_ = [
    COMMETHOD([helpstring(u'Add a group field and type.')], HRESULT, 'AddGroupField',
              ( ['in'], BSTR, 'strField' ),
              ( ['in', 'out'], POINTER(c_int), 'idx' )),
    COMMETHOD([helpstring(u'Get a group field and type.')], HRESULT, 'GetGroupField',
              ( ['in'], c_int, 'idx' ),
              ( ['out'], POINTER(BSTR), 'strField' )),
    COMMETHOD([helpstring(u'Remove the group field.')], HRESULT, 'RemoveGroupField',
              ( ['in'], c_int, 'idx' )),
    COMMETHOD(['propget', helpstring(u'Number of group fields.')], HRESULT, 'GroupFieldsCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
]
################################################################
## code template for IDataGroupSeriesProperties implementation
##class IDataGroupSeriesProperties_Impl(object):
##    def RemoveGroupField(self, idx):
##        u'Remove the group field.'
##        #return 
##
##    @property
##    def GroupFieldsCount(self):
##        u'Number of group fields.'
##        #return Count
##
##    def GetGroupField(self, idx):
##        u'Get a group field and type.'
##        #return strField
##
##    def AddGroupField(self, strField):
##        u'Add a group field and type.'
##        #return idx
##

class GdbRasterCatalogLayer(CoClass):
    u'Geodabase RasterCatalog source and display options.'
    _reg_clsid_ = GUID('{297D796D-384E-48F8-A189-E0347281AC7D}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IGeoFeatureLayer(IFeatureLayer):
    _case_insensitive_ = True
    u'Provides access to members that control geographic aspects of a feature layer.'
    _iid_ = GUID('{E156D7E5-22AF-11D3-9F99-00C04F6BC78E}')
    _idlflags_ = ['oleautomation']
GdbRasterCatalogLayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGdbRasterCatalogLayer, ILayer, IRasterCatalogDisplayProps, IRasterCatalogDisplayProps2, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeoDataset, ILegendInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, IIdentify, IDataLayer, ILayerEffects, ILayerExtensions, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayAdmin, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayAdmin2, IFeatureLayer, IGeoFeatureLayer, IHotlinkContainer, IHotlinkMacro, IHotlinkExpression, IHyperlinkContainer, IIdentify2, ILayerGeneralProperties, ILayerSymbologyExtents, IRelationshipClassCollection, IRelationshipClassCollectionEdit, ISecureLayer, ISymbolLevels, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayFilterManager, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IMapLevel, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITableFields, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySupport, IFeatureLayer2, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IObjectClassSchemaEvents, ILayer2, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataset, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IClass, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable, ITableSelection, IDisplayTable, IAttributeTable, IFeatureSelection, IDataLayer2, IFeatureLayerDefinition, IFeatureLayerDefinition2, ITableDefinition, ILayerFields, IFind, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IConnectionPointContainer, IDisplayRelationshipClass, ILayerDrawingProperties, ILayerPosition, ILayerInfo, comtypes.gen._8F0541A3_D5BE_4B3F_A8D9_062D5579E19B_0_10_2.IRasterDataManagementEvents, IHTMLPopupInfo, IHTMLPopupInfo2, IHTMLPopupIdentify, IHTMLPopupIdentify2, IPublishLayer, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITableCapabilities, IDisplayString, IIdentifyDisplay, IOrderedLayerFields, ITimeData, ITimeData2, ITimeDataDisplay, ITimeDimensionDefinition, ITimeDisplayTable, ITimeDisplayTable2, ITimeTableDefinition, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IObjectClassEvents, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspaceEvents]
GdbRasterCatalogLayer._outgoing_interfaces_ = [ILayerEvents]

class IAnnoClassAdmin(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the annotation class admin interface.'
    _iid_ = GUID('{8EDD534E-C14C-4C6A-A9C9-ED2B83289B04}')
    _idlflags_ = ['oleautomation']
IAnnoClassAdmin._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if an annotation is to be automatically created when a feature is created.')], HRESULT, 'AutoCreate',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if an annotation is to be automatically created when a feature is created.')], HRESULT, 'AutoCreate',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propput', helpstring(u'The labeling properties annotation class.')], HRESULT, 'AnnoProperties',
              ( ['in'], POINTER(IAnnotateLayerPropertiesCollection), 'rhs' )),
    COMMETHOD(['propput', helpstring(u'The reference scale.')], HRESULT, 'ReferenceScale',
              ( ['in'], c_double, 'rhs' )),
    COMMETHOD(['propput', helpstring(u'The units of the reference scale.')], HRESULT, 'ReferenceScaleUnits',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits, 'rhs' )),
    COMMETHOD(['propputref', helpstring(u'The symbol collection.')], HRESULT, 'SymbolCollection',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbolCollection), 'rhs' )),
    COMMETHOD([helpstring(u'Updates the property set.')], HRESULT, 'UpdateProperties'),
]
################################################################
## code template for IAnnoClassAdmin implementation
##class IAnnoClassAdmin_Impl(object):
##    def _set(self, rhs):
##        u'The labeling properties annotation class.'
##    AnnoProperties = property(fset = _set, doc = _set.__doc__)
##
##    def UpdateProperties(self):
##        u'Updates the property set.'
##        #return 
##
##    def _get(self):
##        u'Indicates if an annotation is to be automatically created when a feature is created.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if an annotation is to be automatically created when a feature is created.'
##    AutoCreate = property(_get, _set, doc = _set.__doc__)
##
##    def _set(self, rhs):
##        u'The units of the reference scale.'
##    ReferenceScaleUnits = property(fset = _set, doc = _set.__doc__)
##
##    def SymbolCollection(self, rhs):
##        u'The symbol collection.'
##        #return 
##
##    def _set(self, rhs):
##        u'The reference scale.'
##    ReferenceScale = property(fset = _set, doc = _set.__doc__)
##

class TinEdgeRenderer(CoClass):
    u'TIN edge renderer component.'
    _reg_clsid_ = GUID('{13CB60AB-88A0-11D2-81EB-00104BC4CD03}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
TinEdgeRenderer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ITinSingleSymbolRenderer, ITinRenderer, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySupport, ILegendInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

class ColorRampSymbol(CoClass):
    u'Esri ColorRampSymbol for raster rendering.'
    _reg_clsid_ = GUID('{40987040-204C-11D3-A3F2-0004AC1B1D86}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
ColorRampSymbol._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IColorRampSymbol, IColorRampSymbol2, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IMapLevel, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySupport]


# values for enumeration 'esriFeatureEditTool'
esriFeatureEditToolNone = 0
esriFeatureEditToolPoint = 1
esriFeatureEditToolLine = 2
esriFeatureEditToolPolygon = 3
esriFeatureEditToolAutoCompletePolygon = 4
esriFeatureEditToolCircle = 5
esriFeatureEditToolEllipse = 6
esriFeatureEditToolRectangle = 7
esriFeatureEditToolFreehand = 8
esriFeatureEditToolAutoCompleteFreehand = 9
esriFeatureEditTool = c_int # enum
class IDataObjectEx(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'A Data Object.'
    _iid_ = GUID('{543EED5C-026B-4562-B942-042A2C05D03B}')
    _idlflags_ = ['oleautomation']
ITemplateInfo._methods_ = [
    COMMETHOD(['propget', helpstring(u'Edit tool')], HRESULT, 'DefaultTool',
              ( ['retval', 'out'], POINTER(esriFeatureEditTool), 'DefaultTool' )),
    COMMETHOD(['propget', helpstring(u'Template Description')], HRESULT, 'Description',
              ( ['retval', 'out'], POINTER(BSTR), 'Description' )),
    COMMETHOD(['propget', helpstring(u'Template Name')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propget', helpstring(u'Prototype Feature')], HRESULT, 'Prototype',
              ( ['retval', 'out'], POINTER(POINTER(IDataObjectEx)), 'prototypeObject' )),
]
################################################################
## code template for ITemplateInfo implementation
##class ITemplateInfo_Impl(object):
##    @property
##    def Prototype(self):
##        u'Prototype Feature'
##        #return prototypeObject
##
##    @property
##    def Description(self):
##        u'Template Description'
##        #return Description
##
##    @property
##    def DefaultTool(self):
##        u'Edit tool'
##        #return DefaultTool
##
##    @property
##    def Name(self):
##        u'Template Name'
##        #return Name
##

ILegendLayout._methods_ = [
    COMMETHOD(['propput', helpstring(u'Indicates if graphics are scaled when the legend is resized.')], HRESULT, 'ScaleGraphicsOnResize',
              ( ['in'], VARIANT_BOOL, 'ScaleGraphicsOnResize' )),
    COMMETHOD(['propget', helpstring(u'Indicates if graphics are scaled when the legend is resized.')], HRESULT, 'ScaleGraphicsOnResize',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'ScaleGraphicsOnResize' )),
]
################################################################
## code template for ILegendLayout implementation
##class ILegendLayout_Impl(object):
##    def _get(self):
##        u'Indicates if graphics are scaled when the legend is resized.'
##        #return ScaleGraphicsOnResize
##    def _set(self, ScaleGraphicsOnResize):
##        u'Indicates if graphics are scaled when the legend is resized.'
##    ScaleGraphicsOnResize = property(_get, _set, doc = _set.__doc__)
##

class RasterIdentifyObj(CoClass):
    u'A raster object identified on the display.'
    _reg_clsid_ = GUID('{61704B78-DE2B-11D2-9FCE-00C04F799F23}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
RasterIdentifyObj._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterIdentifyObj, IRasterIdentifyObj2, IIdentifyObj, IRowIdentifyObject]

class IImageDisplay2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Image Display Interface.'
    _iid_ = GUID('{60C16034-CA07-49F3-AC2E-0B848884119D}')
    _idlflags_ = ['oleautomation']
IImageDisplay2._methods_ = [
    COMMETHOD(['propget', helpstring(u'The height of the image in pixels.')], HRESULT, 'Height',
              ( ['retval', 'out'], POINTER(c_int), 'imageHeight' )),
    COMMETHOD(['propput', helpstring(u'The height of the image in pixels.')], HRESULT, 'Height',
              ( ['in'], c_int, 'imageHeight' )),
    COMMETHOD(['propget', helpstring(u'The width of the image in pixels.')], HRESULT, 'Width',
              ( ['retval', 'out'], POINTER(c_int), 'imageWidth' )),
    COMMETHOD(['propput', helpstring(u'The width of the image in pixels.')], HRESULT, 'Width',
              ( ['in'], c_int, 'imageWidth' )),
    COMMETHOD(['propget', helpstring(u'The device resolution of the image (dots per inch).')], HRESULT, 'DeviceResolution',
              ( ['retval', 'out'], POINTER(c_double), 'Dpi' )),
    COMMETHOD(['propput', helpstring(u'The device resolution of the image (dots per inch).')], HRESULT, 'DeviceResolution',
              ( ['in'], c_double, 'Dpi' )),
    COMMETHOD(['propget', helpstring(u'Transparent color for image types that support transparent color.')], HRESULT, 'TransparentColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'ppTransparentColor' )),
    COMMETHOD(['propput', helpstring(u'Transparent color for image types that support transparent color.')], HRESULT, 'TransparentColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'ppTransparentColor' )),
]
################################################################
## code template for IImageDisplay2 implementation
##class IImageDisplay2_Impl(object):
##    def _get(self):
##        u'The device resolution of the image (dots per inch).'
##        #return Dpi
##    def _set(self, Dpi):
##        u'The device resolution of the image (dots per inch).'
##    DeviceResolution = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The width of the image in pixels.'
##        #return imageWidth
##    def _set(self, imageWidth):
##        u'The width of the image in pixels.'
##    Width = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Transparent color for image types that support transparent color.'
##        #return ppTransparentColor
##    def _set(self, ppTransparentColor):
##        u'Transparent color for image types that support transparent color.'
##    TransparentColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The height of the image in pixels.'
##        #return imageHeight
##    def _set(self, imageHeight):
##        u'The height of the image in pixels.'
##    Height = property(_get, _set, doc = _set.__doc__)
##

class TinFaceRenderer(CoClass):
    u'TIN face renderer component.'
    _reg_clsid_ = GUID('{F12E6DF0-384C-11D2-B1F2-00C04F8EDEFF}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
TinFaceRenderer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ITinSingleSymbolRenderer, ITinRenderer, ITerrainRenderer, ITinIllumination, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySupport, ILegendInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]


# values for enumeration 'esriDimensionType'
esriDimensionTypeAligned = 0
esriDimensionTypeLinear = 1
esriDimensionType = c_int # enum
IModifyDimensionFeedback._methods_ = [
    COMMETHOD(['propput', helpstring(u'The dimension style for the display feedback.')], HRESULT, 'Style',
              ( ['in'], POINTER(IDimensionStyle), 'rhs' )),
    COMMETHOD(['propget', helpstring(u'The Dimension shape.')], HRESULT, 'DimensionShape',
              ( ['retval', 'out'], POINTER(POINTER(IDimensionShape)), 'Shape' )),
    COMMETHOD(['propputref', helpstring(u'The Dimension shape.')], HRESULT, 'DimensionShape',
              ( ['in'], POINTER(IDimensionShape), 'Shape' )),
    COMMETHOD([helpstring(u"The display feedback's handles.")], HRESULT, 'GetHandles',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPointCollection)), 'points' )),
    COMMETHOD([helpstring(u'Starts the feedback.')], HRESULT, 'Start',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'Handle' )),
    COMMETHOD([helpstring(u'Stops the feedback and returns the points.')], HRESULT, 'Stop',
              ( ['retval', 'out'], POINTER(POINTER(IDimensionShape)), 'Shape' )),
    COMMETHOD(['propget', helpstring(u'The dimension type of the display feedback.')], HRESULT, 'DimensionType',
              ( ['retval', 'out'], POINTER(esriDimensionType), 'Type' )),
    COMMETHOD(['propput', helpstring(u'The dimension type of the display feedback.')], HRESULT, 'DimensionType',
              ( ['in'], esriDimensionType, 'Type' )),
    COMMETHOD(['propget', helpstring(u'The reference scale of the display feedback.')], HRESULT, 'ReferenceScale',
              ( ['retval', 'out'], POINTER(c_double), 'Scale' )),
    COMMETHOD(['propput', helpstring(u'The reference scale of the display feedback.')], HRESULT, 'ReferenceScale',
              ( ['in'], c_double, 'Scale' )),
    COMMETHOD(['propget', helpstring(u'The reference scale units of the display feedback.')], HRESULT, 'ReferenceScaleUnits',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits), 'Units' )),
    COMMETHOD(['propput', helpstring(u'The reference scale units of the display feedback.')], HRESULT, 'ReferenceScaleUnits',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits, 'Units' )),
]
################################################################
## code template for IModifyDimensionFeedback implementation
##class IModifyDimensionFeedback_Impl(object):
##    def _set(self, rhs):
##        u'The dimension style for the display feedback.'
##    Style = property(fset = _set, doc = _set.__doc__)
##
##    def DimensionShape(self, Shape):
##        u'The Dimension shape.'
##        #return 
##
##    def _get(self):
##        u'The dimension type of the display feedback.'
##        #return Type
##    def _set(self, Type):
##        u'The dimension type of the display feedback.'
##    DimensionType = property(_get, _set, doc = _set.__doc__)
##
##    def Stop(self):
##        u'Stops the feedback and returns the points.'
##        #return Shape
##
##    def Start(self, Handle):
##        u'Starts the feedback.'
##        #return 
##
##    def _get(self):
##        u'The reference scale units of the display feedback.'
##        #return Units
##    def _set(self, Units):
##        u'The reference scale units of the display feedback.'
##    ReferenceScaleUnits = property(_get, _set, doc = _set.__doc__)
##
##    def GetHandles(self):
##        u"The display feedback's handles."
##        #return points
##
##    def _get(self):
##        u'The reference scale of the display feedback.'
##        #return Scale
##    def _set(self, Scale):
##        u'The reference scale of the display feedback.'
##    ReferenceScale = property(_get, _set, doc = _set.__doc__)
##

class IGraphicSnapEnvironment(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the Collection of snap agents used for snapping graphics.'
    _iid_ = GUID('{56FD87F6-DDCE-11D1-8778-0000F8751720}')
    _idlflags_ = ['oleautomation']
IGraphicSnapEnvironment._methods_ = [
    COMMETHOD([helpstring(u'Snap the shape using the agents in the environment.')], HRESULT, 'SnapShape',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'Shape' )),
    COMMETHOD(['propget', helpstring(u'The snap tolerance in page units.')], HRESULT, 'SnapTolerance',
              ( ['retval', 'out'], POINTER(c_double), 'tol' )),
    COMMETHOD(['propput', helpstring(u'The snap tolerance in page units.')], HRESULT, 'SnapTolerance',
              ( ['in'], c_double, 'tol' )),
    COMMETHOD(['propput', helpstring(u'An array of IDs indicating how agents should be ordered.')], HRESULT, 'SnapAgentOrder',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'guids' )),
    COMMETHOD(['propget', helpstring(u'An array of IDs indicating how agents should be ordered.')], HRESULT, 'SnapAgentOrder',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'guids' )),
    COMMETHOD(['propget', helpstring(u'The number of snap agents.')], HRESULT, 'SnapAgentCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The snap agent at the specified index.  The index argument is zero based.')], HRESULT, 'SnapAgent',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IGraphicSnap)), 'SnapAgent' )),
    COMMETHOD([helpstring(u'Remove all snap agents.')], HRESULT, 'ClearSnapAgents'),
    COMMETHOD([helpstring(u'Add a new snap agent to the environment.')], HRESULT, 'AddSnapAgent',
              ( ['in'], POINTER(IGraphicSnap), 'SnapAgent' )),
    COMMETHOD([helpstring(u'Remove specified snap agent from the environment.')], HRESULT, 'DeleteSnapAgent',
              ( ['in'], POINTER(IGraphicSnap), 'SnapAgent' )),
]
################################################################
## code template for IGraphicSnapEnvironment implementation
##class IGraphicSnapEnvironment_Impl(object):
##    def _get(self):
##        u'The snap tolerance in page units.'
##        #return tol
##    def _set(self, tol):
##        u'The snap tolerance in page units.'
##    SnapTolerance = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SnapAgent(self, Index):
##        u'The snap agent at the specified index.  The index argument is zero based.'
##        #return SnapAgent
##
##    def DeleteSnapAgent(self, SnapAgent):
##        u'Remove specified snap agent from the environment.'
##        #return 
##
##    @property
##    def SnapAgentCount(self):
##        u'The number of snap agents.'
##        #return Count
##
##    def ClearSnapAgents(self):
##        u'Remove all snap agents.'
##        #return 
##
##    def _get(self):
##        u'An array of IDs indicating how agents should be ordered.'
##        #return guids
##    def _set(self, guids):
##        u'An array of IDs indicating how agents should be ordered.'
##    SnapAgentOrder = property(_get, _set, doc = _set.__doc__)
##
##    def AddSnapAgent(self, SnapAgent):
##        u'Add a new snap agent to the environment.'
##        #return 
##
##    def SnapShape(self, Shape):
##        u'Snap the shape using the agents in the environment.'
##        #return 
##

class TinAspectRenderer(CoClass):
    u'TIN aspect renderer component.'
    _reg_clsid_ = GUID('{BEBD2DAE-8BC7-11D2-81EC-00104BC4CD03}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
TinAspectRenderer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ITinColorRampRenderer, ITinRenderer, ITerrainRenderer, ITinIllumination, ILegendInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, IClassBreaksUIProperties, IDataSampling]

class IMapServerRows(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Map Server Rows Interface.'
    _iid_ = GUID('{9CDB4E10-7F88-4A14-BED3-E4944DFBF7E7}')
    _idlflags_ = ['oleautomation']
IMapServerRelationship._methods_ = [
    COMMETHOD(['propget', helpstring(u'The name of the relationship.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propget', helpstring(u'The rows.')], HRESULT, 'Rows',
              ( ['retval', 'out'], POINTER(POINTER(IMapServerRows)), 'Rows' )),
]
################################################################
## code template for IMapServerRelationship implementation
##class IMapServerRelationship_Impl(object):
##    @property
##    def Rows(self):
##        u'The rows.'
##        #return Rows
##
##    @property
##    def Name(self):
##        u'The name of the relationship.'
##        #return Name
##

class MapServerBookmark(CoClass):
    u'The Map Server Bookmark coclass provides information about a bookmark.'
    _reg_clsid_ = GUID('{B7BE7672-F6CB-4C3E-BAE9-65018B26463B}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
MapServerBookmark._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMapArea, IMapServerBookmark, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

class ILabelingDescription(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Labeling Description Interface.'
    _iid_ = GUID('{AF0D718F-52B0-4916-AAD6-C88E43B3E1F1}')
    _idlflags_ = ['oleautomation']
class ILabelClassDescriptions(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Label Class Descriptions Interface.'
    _iid_ = GUID('{5F177B9E-0D5E-4502-AE3D-A393895DC1F5}')
    _idlflags_ = ['oleautomation']
ILabelingDescription._methods_ = [
    COMMETHOD(['propget', helpstring(u'A collection of Label Class Description objects.')], HRESULT, 'LabelClassDescriptions',
              ( ['retval', 'out'], POINTER(POINTER(ILabelClassDescriptions)), 'ppLabelClassDescriptions' )),
    COMMETHOD(['propput', helpstring(u'A collection of Label Class Description objects.')], HRESULT, 'LabelClassDescriptions',
              ( ['in'], POINTER(ILabelClassDescriptions), 'ppLabelClassDescriptions' )),
]
################################################################
## code template for ILabelingDescription implementation
##class ILabelingDescription_Impl(object):
##    def _get(self):
##        u'A collection of Label Class Description objects.'
##        #return ppLabelClassDescriptions
##    def _set(self, ppLabelClassDescriptions):
##        u'A collection of Label Class Description objects.'
##    LabelClassDescriptions = property(_get, _set, doc = _set.__doc__)
##

class TinNodeRenderer(CoClass):
    u'TIN node renderer component.'
    _reg_clsid_ = GUID('{6EF19AC2-84AA-11D2-81EB-00104BC4CD03}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
TinNodeRenderer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ITinSingleSymbolRenderer, ITinRenderer, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySupport, ILegendInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

class IAnnoClassAdmin3(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the annotation class admin interface.'
    _iid_ = GUID('{79CCBB62-0B44-4BE6-A0E5-904D68FEF0D2}')
    _idlflags_ = ['oleautomation']
IAnnoClassAdmin3._methods_ = [
    COMMETHOD(['propput', helpstring(u'Indicates if an annotation is to be automatically created when a feature is created.')], HRESULT, 'AutoCreate',
              ( ['in'], VARIANT_BOOL, 'rhs' )),
    COMMETHOD(['propput', helpstring(u'The labeling properties annotation class.')], HRESULT, 'AnnoProperties',
              ( ['in'], POINTER(IAnnotateLayerPropertiesCollection), 'rhs' )),
    COMMETHOD(['propput', helpstring(u'The reference scale.')], HRESULT, 'ReferenceScale',
              ( ['in'], c_double, 'rhs' )),
    COMMETHOD(['propput', helpstring(u'The units of the reference scale.')], HRESULT, 'ReferenceScaleUnits',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits, 'rhs' )),
    COMMETHOD(['propputref', helpstring(u'The symbol collection.')], HRESULT, 'SymbolCollection',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbolCollection), 'rhs' )),
    COMMETHOD([helpstring(u'Updates the property set.')], HRESULT, 'UpdateProperties'),
    COMMETHOD(['propput', helpstring(u"Indicates if an annotation is to be automatically recreated when a feature's shape is changed.")], HRESULT, 'UpdateOnShapeChange',
              ( ['in'], VARIANT_BOOL, 'rhs' )),
    COMMETHOD(['propput', helpstring(u'Indicates an annotation must belong to a symbol in the symbol collection.')], HRESULT, 'RequireSymbolID',
              ( ['in'], VARIANT_BOOL, 'rhs' )),
    COMMETHOD(['propput', helpstring(u'Indicates if an annotation may override a symbol property even though it references the symbol collection.')], HRESULT, 'AllowSymbolOverrides',
              ( ['in'], VARIANT_BOOL, 'rhs' )),
    COMMETHOD(['propput', helpstring(u'The overposter properties.')], HRESULT, 'OverposterProperties',
              ( ['in'], POINTER(IOverposterProperties), 'rhs' )),
    COMMETHOD([helpstring(u'Updates the indexes of the fields that expose the annotation properties.')], HRESULT, 'UpdateFieldIndexes'),
]
################################################################
## code template for IAnnoClassAdmin3 implementation
##class IAnnoClassAdmin3_Impl(object):
##    def UpdateFieldIndexes(self):
##        u'Updates the indexes of the fields that expose the annotation properties.'
##        #return 
##
##    def _set(self, rhs):
##        u'The labeling properties annotation class.'
##    AnnoProperties = property(fset = _set, doc = _set.__doc__)
##
##    def UpdateProperties(self):
##        u'Updates the property set.'
##        #return 
##
##    def _set(self, rhs):
##        u'The overposter properties.'
##    OverposterProperties = property(fset = _set, doc = _set.__doc__)
##
##    def _set(self, rhs):
##        u'Indicates if an annotation is to be automatically created when a feature is created.'
##    AutoCreate = property(fset = _set, doc = _set.__doc__)
##
##    def _set(self, rhs):
##        u"Indicates if an annotation is to be automatically recreated when a feature's shape is changed."
##    UpdateOnShapeChange = property(fset = _set, doc = _set.__doc__)
##
##    def _set(self, rhs):
##        u'Indicates if an annotation may override a symbol property even though it references the symbol collection.'
##    AllowSymbolOverrides = property(fset = _set, doc = _set.__doc__)
##
##    def _set(self, rhs):
##        u'The units of the reference scale.'
##    ReferenceScaleUnits = property(fset = _set, doc = _set.__doc__)
##
##    def SymbolCollection(self, rhs):
##        u'The symbol collection.'
##        #return 
##
##    def _set(self, rhs):
##        u'Indicates an annotation must belong to a symbol in the symbol collection.'
##    RequireSymbolID = property(fset = _set, doc = _set.__doc__)
##
##    def _set(self, rhs):
##        u'The reference scale.'
##    ReferenceScale = property(fset = _set, doc = _set.__doc__)
##

IACRasterFillSymbol._methods_ = [
    COMMETHOD(['propget', helpstring(u'The url to access the image.')], HRESULT, 'URL',
              ( ['retval', 'out'], POINTER(BSTR), 'URL' )),
    COMMETHOD(['propput', helpstring(u'The url to access the image.')], HRESULT, 'URL',
              ( ['in'], BSTR, 'URL' )),
    COMMETHOD(['propget', helpstring(u'The path to the image.')], HRESULT, 'Image',
              ( ['retval', 'out'], POINTER(BSTR), 'Path' )),
    COMMETHOD(['propput', helpstring(u'The path to the image.')], HRESULT, 'Image',
              ( ['in'], BSTR, 'Path' )),
    COMMETHOD(['propget', helpstring(u'Indicates if labels can overlap this symbol.')], HRESULT, 'Overlap',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if labels can overlap this symbol.')], HRESULT, 'Overlap',
              ( ['in'], VARIANT_BOOL, 'flag' )),
]
################################################################
## code template for IACRasterFillSymbol implementation
##class IACRasterFillSymbol_Impl(object):
##    def _get(self):
##        u'The url to access the image.'
##        #return URL
##    def _set(self, URL):
##        u'The url to access the image.'
##    URL = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The path to the image.'
##        #return Path
##    def _set(self, Path):
##        u'The path to the image.'
##    Image = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if labels can overlap this symbol.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if labels can overlap this symbol.'
##    Overlap = property(_get, _set, doc = _set.__doc__)
##

class ILabelClassDescription2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Label Class Description Interface.'
    _iid_ = GUID('{C9559563-104D-4895-9DBC-E3EF873C50E7}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'esriLabelExpressionType'
esriLabelExpressionSimple = 0
esriLabelExpressionPython = 1
esriLabelExpressionVBScript = 2
esriLabelExpressionJScript = 3
esriLabelExpressionType = c_int # enum
ILabelClassDescription2._methods_ = [
    COMMETHOD(['propget', helpstring(u'ExpressionType.')], HRESULT, 'ExpressionType',
              ( ['retval', 'out'], POINTER(esriLabelExpressionType), 'ExpressionType' )),
    COMMETHOD(['propput', helpstring(u'ExpressionType.')], HRESULT, 'ExpressionType',
              ( ['in'], esriLabelExpressionType, 'ExpressionType' )),
    COMMETHOD(['propget', helpstring(u'The SQL WhereClause for the label.')], HRESULT, 'WhereClause',
              ( ['retval', 'out'], POINTER(BSTR), 'WhereClause' )),
    COMMETHOD(['propput', helpstring(u'The SQL WhereClause for the label.')], HRESULT, 'WhereClause',
              ( ['in'], BSTR, 'WhereClause' )),
    COMMETHOD(['propget', helpstring(u'LabelPlacementDescription.')], HRESULT, 'LabelPlacementDescription',
              ( ['retval', 'out'], POINTER(POINTER(ILabelPlacementDescription)), 'ppLabelPlacementDescription' )),
    COMMETHOD(['propput', helpstring(u'LabelPlacementDescription.')], HRESULT, 'LabelPlacementDescription',
              ( ['in'], POINTER(ILabelPlacementDescription), 'ppLabelPlacementDescription' )),
    COMMETHOD(['propget', helpstring(u'The Label Expression.')], HRESULT, 'LabelExpression',
              ( ['retval', 'out'], POINTER(BSTR), 'LabelExpression' )),
    COMMETHOD(['propput', helpstring(u'The Label Expression.')], HRESULT, 'LabelExpression',
              ( ['in'], BSTR, 'LabelExpression' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether Coded Value Should be used when displaying label expression.')], HRESULT, 'UseCodedValue',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'UseCodedValue' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether Coded Value Should be used when displaying label expression.')], HRESULT, 'UseCodedValue',
              ( ['in'], VARIANT_BOOL, 'UseCodedValue' )),
    COMMETHOD(['propget', helpstring(u'The text symbol used to draw the label.')], HRESULT, 'Symbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol)), 'ppSymbol' )),
    COMMETHOD(['propput', helpstring(u'The text symbol used to draw the label.')], HRESULT, 'Symbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol), 'ppSymbol' )),
    COMMETHOD(['propget', helpstring(u'Maximum scale at which the symbol will display.')], HRESULT, 'MaximumScale',
              ( ['retval', 'out'], POINTER(c_double), 'pMaximumScale' )),
    COMMETHOD(['propput', helpstring(u'Maximum scale at which the symbol will display.')], HRESULT, 'MaximumScale',
              ( ['in'], c_double, 'pMaximumScale' )),
    COMMETHOD(['propget', helpstring(u'Minimum scale at which the symbol will display.')], HRESULT, 'MinimumScale',
              ( ['retval', 'out'], POINTER(c_double), 'pMinimumScale' )),
    COMMETHOD(['propput', helpstring(u'Minimum scale at which the symbol will display.')], HRESULT, 'MinimumScale',
              ( ['in'], c_double, 'pMinimumScale' )),
]
################################################################
## code template for ILabelClassDescription2 implementation
##class ILabelClassDescription2_Impl(object):
##    def _get(self):
##        u'LabelPlacementDescription.'
##        #return ppLabelPlacementDescription
##    def _set(self, ppLabelPlacementDescription):
##        u'LabelPlacementDescription.'
##    LabelPlacementDescription = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'ExpressionType.'
##        #return ExpressionType
##    def _set(self, ExpressionType):
##        u'ExpressionType.'
##    ExpressionType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The text symbol used to draw the label.'
##        #return ppSymbol
##    def _set(self, ppSymbol):
##        u'The text symbol used to draw the label.'
##    Symbol = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Maximum scale at which the symbol will display.'
##        #return pMaximumScale
##    def _set(self, pMaximumScale):
##        u'Maximum scale at which the symbol will display.'
##    MaximumScale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Minimum scale at which the symbol will display.'
##        #return pMinimumScale
##    def _set(self, pMinimumScale):
##        u'Minimum scale at which the symbol will display.'
##    MinimumScale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The SQL WhereClause for the label.'
##        #return WhereClause
##    def _set(self, WhereClause):
##        u'The SQL WhereClause for the label.'
##    WhereClause = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The Label Expression.'
##        #return LabelExpression
##    def _set(self, LabelExpression):
##        u'The Label Expression.'
##    LabelExpression = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether Coded Value Should be used when displaying label expression.'
##        #return UseCodedValue
##    def _set(self, UseCodedValue):
##        u'Indicates whether Coded Value Should be used when displaying label expression.'
##    UseCodedValue = property(_get, _set, doc = _set.__doc__)
##

class ElementCollection(CoClass):
    u'Collection of elements.'
    _reg_clsid_ = GUID('{CE8F3972-E9BE-11D1-A232-080009B6F22B}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IElementCollection2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the Graphics element collection.'
    _iid_ = GUID('{B2BFC403-6B4C-4490-8878-EA62C4F49720}')
    _idlflags_ = ['oleautomation']
ElementCollection._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IElementCollection, IElementCollection2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersionSupportGEN]

class TinSlopeRenderer(CoClass):
    u'TIN slope renderer component.'
    _reg_clsid_ = GUID('{91FB1B62-8944-11D2-81EC-00104BC4CD03}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
TinSlopeRenderer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ITinColorRampRenderer, ITinRenderer, ITerrainRenderer, ITinIllumination, ILegendInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, IClassBreaksUIProperties, IDataSampling]

class IMapLayerInfo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the available properties of a map layer info object.'
    _iid_ = GUID('{CA469C38-C9E4-4DC3-9C32-86AEF3B33DF2}')
    _idlflags_ = ['oleautomation']
IMapLayerInfo._methods_ = [
    COMMETHOD(['propget', helpstring(u'The layer identifier. This ID is used throughout to uniquely identify the layer for all requests.')], HRESULT, 'ID',
              ( ['retval', 'out'], POINTER(c_int), 'LayerID' )),
    COMMETHOD(['propget', helpstring(u'The name of the layer.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propget', helpstring(u'The description of the layer. This property is set in the General tab of the Layer Properties dialog.')], HRESULT, 'Description',
              ( ['retval', 'out'], POINTER(BSTR), 'desc' )),
    COMMETHOD(['propget', helpstring(u'The layer type.')], HRESULT, 'Type',
              ( ['retval', 'out'], POINTER(BSTR), 'Type' )),
    COMMETHOD(['propget', helpstring(u'The description of the source information for the layer.')], HRESULT, 'SourceDescription',
              ( ['retval', 'out'], POINTER(BSTR), 'desc' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer has labels to turn on and off.')], HRESULT, 'HasLabels',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'HasLabels' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer supports feature selection.')], HRESULT, 'CanSelect',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'CanSelect' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer supports symbol scaling.')], HRESULT, 'CanScaleSymbols',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'canScale' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer supports the Identify operation.')], HRESULT, 'CanIdentify',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'canId' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer supports the Find operation.')], HRESULT, 'CanFind',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'CanFind' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer is a feature layer.')], HRESULT, 'IsFeatureLayer',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsFeatureLayer' )),
    COMMETHOD(['propget', helpstring(u'The minimum visible scale for the layer.')], HRESULT, 'MinScale',
              ( ['retval', 'out'], POINTER(c_double), 'Scale' )),
    COMMETHOD(['propget', helpstring(u'The maximum visible scale for the layer.')], HRESULT, 'MaxScale',
              ( ['retval', 'out'], POINTER(c_double), 'Scale' )),
    COMMETHOD(['propget', helpstring(u'The geographic extent of the layer.')], HRESULT, 'Extent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'Extent' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer has hyperlinks.')], HRESULT, 'HasHyperlinks',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'hasLinks' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer has attributes.')], HRESULT, 'HasAttributes',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'hasAttr' )),
    COMMETHOD(['propget', helpstring(u'Array of attribute fields contained in the layer.')], HRESULT, 'Fields',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFields)), 'Fields' )),
    COMMETHOD(['propget', helpstring(u'Primary display field.')], HRESULT, 'DisplayField',
              ( ['retval', 'out'], POINTER(BSTR), 'FieldName' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer is a composite layer.')], HRESULT, 'IsComposite',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsComposite' )),
    COMMETHOD(['propget', helpstring(u'The list identifying the sublayers if the layer is a composite layer.')], HRESULT, 'SubLayers',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray)), 'layerIds' )),
    COMMETHOD(['propget', helpstring(u'If the layer is a member of a composite layer, this property identifies the parent layer.')], HRESULT, 'ParentLayerID',
              ( ['retval', 'out'], POINTER(c_int), 'LayerID' )),
]
################################################################
## code template for IMapLayerInfo implementation
##class IMapLayerInfo_Impl(object):
##    @property
##    def CanFind(self):
##        u'Indicates if the layer supports the Find operation.'
##        #return CanFind
##
##    @property
##    def HasHyperlinks(self):
##        u'Indicates if the layer has hyperlinks.'
##        #return hasLinks
##
##    @property
##    def SourceDescription(self):
##        u'The description of the source information for the layer.'
##        #return desc
##
##    @property
##    def Description(self):
##        u'The description of the layer. This property is set in the General tab of the Layer Properties dialog.'
##        #return desc
##
##    @property
##    def HasAttributes(self):
##        u'Indicates if the layer has attributes.'
##        #return hasAttr
##
##    @property
##    def IsFeatureLayer(self):
##        u'Indicates if the layer is a feature layer.'
##        #return IsFeatureLayer
##
##    @property
##    def CanIdentify(self):
##        u'Indicates if the layer supports the Identify operation.'
##        #return canId
##
##    @property
##    def HasLabels(self):
##        u'Indicates if the layer has labels to turn on and off.'
##        #return HasLabels
##
##    @property
##    def DisplayField(self):
##        u'Primary display field.'
##        #return FieldName
##
##    @property
##    def ParentLayerID(self):
##        u'If the layer is a member of a composite layer, this property identifies the parent layer.'
##        #return LayerID
##
##    @property
##    def CanScaleSymbols(self):
##        u'Indicates if the layer supports symbol scaling.'
##        #return canScale
##
##    @property
##    def Fields(self):
##        u'Array of attribute fields contained in the layer.'
##        #return Fields
##
##    @property
##    def IsComposite(self):
##        u'Indicates if the layer is a composite layer.'
##        #return IsComposite
##
##    @property
##    def SubLayers(self):
##        u'The list identifying the sublayers if the layer is a composite layer.'
##        #return layerIds
##
##    @property
##    def Extent(self):
##        u'The geographic extent of the layer.'
##        #return Extent
##
##    @property
##    def CanSelect(self):
##        u'Indicates if the layer supports feature selection.'
##        #return CanSelect
##
##    @property
##    def MinScale(self):
##        u'The minimum visible scale for the layer.'
##        #return Scale
##
##    @property
##    def Type(self):
##        u'The layer type.'
##        #return Type
##
##    @property
##    def ID(self):
##        u'The layer identifier. This ID is used throughout to uniquely identify the layer for all requests.'
##        #return LayerID
##
##    @property
##    def MaxScale(self):
##        u'The maximum visible scale for the layer.'
##        #return Scale
##
##    @property
##    def Name(self):
##        u'The name of the layer.'
##        #return Name
##

IMapFrameEvents._methods_ = [
    COMMETHOD([helpstring(u'Occurs when a map frame is resized.')], HRESULT, 'MapFrameResized'),
]
################################################################
## code template for IMapFrameEvents implementation
##class IMapFrameEvents_Impl(object):
##    def MapFrameResized(self):
##        u'Occurs when a map frame is resized.'
##        #return 
##

class IMapServerInfo2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the available properties of a map server info object.'
    _iid_ = GUID('{9211306C-970E-420A-B1A6-B79BF4B49676}')
    _idlflags_ = ['oleautomation']
IMapServerInfo2._methods_ = [
    COMMETHOD(['propget', helpstring(u'The name of the map (data frame).')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propget', helpstring(u'The description of the map (data frame). This property is set in the General tab of the Data Frame Properties dialog.')], HRESULT, 'Description',
              ( ['retval', 'out'], POINTER(BSTR), 'desc' )),
    COMMETHOD(['propget', helpstring(u'The full extent of the map (data frame).')], HRESULT, 'FullExtent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'Extent' )),
    COMMETHOD(['propget', helpstring(u'The current extent of the map (data frame).')], HRESULT, 'Extent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'Extent' )),
    COMMETHOD(['propget', helpstring(u'A collection of Map Layer Info objects, each containing information about a layer in the map (data frame).')], HRESULT, 'MapLayerInfos',
              ( ['retval', 'out'], POINTER(POINTER(IMapLayerInfos)), 'layerInfos' )),
    COMMETHOD(['propget', helpstring(u'The background color of the map (data frame).')], HRESULT, 'BackgroundColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propget', helpstring(u'The published bookmarks for the map.')], HRESULT, 'Bookmarks',
              ( ['retval', 'out'], POINTER(POINTER(IMapServerBookmarks)), 'Bookmarks' )),
    COMMETHOD(['propget', helpstring(u'The default map settings.')], HRESULT, 'DefaultMapDescription',
              ( ['retval', 'out'], POINTER(POINTER(IMapDescription)), 'mapDesc' )),
    COMMETHOD(['propget', helpstring(u'The units for the map (data frame).')], HRESULT, 'MapUnits',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits), 'Units' )),
    COMMETHOD(['propget', helpstring(u'Background symbol of the map (data frame).')], HRESULT, 'BackgroundSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IFillSymbol)), 'FillSymbol' )),
    COMMETHOD(['propget', helpstring(u'Copyright information associated with the layer.')], HRESULT, 'CopyrightText',
              ( ['retval', 'out'], POINTER(BSTR), 'copyright' )),
]
################################################################
## code template for IMapServerInfo2 implementation
##class IMapServerInfo2_Impl(object):
##    @property
##    def Name(self):
##        u'The name of the map (data frame).'
##        #return Name
##
##    @property
##    def DefaultMapDescription(self):
##        u'The default map settings.'
##        #return mapDesc
##
##    @property
##    def MapUnits(self):
##        u'The units for the map (data frame).'
##        #return Units
##
##    @property
##    def CopyrightText(self):
##        u'Copyright information associated with the layer.'
##        #return copyright
##
##    @property
##    def BackgroundSymbol(self):
##        u'Background symbol of the map (data frame).'
##        #return FillSymbol
##
##    @property
##    def MapLayerInfos(self):
##        u'A collection of Map Layer Info objects, each containing information about a layer in the map (data frame).'
##        #return layerInfos
##
##    @property
##    def BackgroundColor(self):
##        u'The background color of the map (data frame).'
##        #return Color
##
##    @property
##    def FullExtent(self):
##        u'The full extent of the map (data frame).'
##        #return Extent
##
##    @property
##    def Bookmarks(self):
##        u'The published bookmarks for the map.'
##        #return Bookmarks
##
##    @property
##    def Extent(self):
##        u'The current extent of the map (data frame).'
##        #return Extent
##
##    @property
##    def Description(self):
##        u'The description of the map (data frame). This property is set in the General tab of the Data Frame Properties dialog.'
##        #return desc
##

class ILabelClassDescription(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Label Class Description Interface.'
    _iid_ = GUID('{63882C74-6B36-497B-9E27-EFD67226E583}')
    _idlflags_ = ['oleautomation']
ILabelClassDescriptions._methods_ = [
    COMMETHOD(['propget', helpstring(u'The Label Class count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The Label Class Description at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(ILabelClassDescription)), 'ppLabelClassDescription' )),
    COMMETHOD([helpstring(u'Removes the Label Class Description at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all Label Class Descriptions.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Adds a Label Class Description.')], HRESULT, 'Add',
              ( ['in'], POINTER(ILabelClassDescription), 'pLabelClassDescription' )),
    COMMETHOD([helpstring(u'Adds a Label Class Description at the specified position.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(ILabelClassDescription), 'pLabelClassDescription' )),
]
################################################################
## code template for ILabelClassDescriptions implementation
##class ILabelClassDescriptions_Impl(object):
##    @property
##    def Count(self):
##        u'The Label Class count.'
##        #return Count
##
##    def Insert(self, Index, pLabelClassDescription):
##        u'Adds a Label Class Description at the specified position.'
##        #return 
##
##    def Remove(self, Index):
##        u'Removes the Label Class Description at the specified position.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'The Label Class Description at the specified position.'
##        #return ppLabelClassDescription
##
##    def RemoveAll(self):
##        u'Removes all Label Class Descriptions.'
##        #return 
##
##    def Add(self, pLabelClassDescription):
##        u'Adds a Label Class Description.'
##        #return 
##

IDefinitionExpressionEvents._methods_ = [
    COMMETHOD([helpstring(u'Occurs when the Definition Expression changes.')], HRESULT, 'DefinitionExpressionChanged',
              ( ['in'], POINTER(IUnknown), 'pSource' )),
]
################################################################
## code template for IDefinitionExpressionEvents implementation
##class IDefinitionExpressionEvents_Impl(object):
##    def DefinitionExpressionChanged(self, pSource):
##        u'Occurs when the Definition Expression changes.'
##        #return 
##

class IConvertFDOAnnoToCoverageAnno(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the annotation class admin interface.'
    _iid_ = GUID('{A7E2342A-AB31-4134-B9CB-7B25E4BDD9EC}')
    _idlflags_ = ['oleautomation']
class IFDOGraphicsLayer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control properties of an annotation layer.'
    _iid_ = GUID('{48E56B3F-EC3A-11D2-9F5C-00C04F6BC6A5}')
    _idlflags_ = ['oleautomation']
IConvertFDOAnnoToCoverageAnno._methods_ = [
    COMMETHOD(['propputref', helpstring(u'Source FDO graphics layer.')], HRESULT, 'FDOGraphicsLayer',
              ( ['in'], POINTER(IFDOGraphicsLayer), 'rhs' )),
    COMMETHOD(['propputref', helpstring(u'Output annotation layer.')], HRESULT, 'CoverageAnnotationLayer',
              ( ['in'], POINTER(ICoverageAnnotationLayer), 'rhs' )),
    COMMETHOD(['propput', helpstring(u'Indicates if only the selected set is transfered.')], HRESULT, 'ConvertOnlySelectedSet',
              ( ['in'], VARIANT_BOOL, 'rhs' )),
    COMMETHOD(['propputref', helpstring(u'Ablity to cancel and show progress.')], HRESULT, 'CancelTracker',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'rhs' )),
    COMMETHOD(['propputref', helpstring(u'The DisplayTransformation in the display is used to transform annotation.')], HRESULT, 'Display',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'rhs' )),
    COMMETHOD([helpstring(u'Perform the conversion. Append features from the FDO graphics layer to the coverage.')], HRESULT, 'ConvertAnnotation'),
    COMMETHOD(['propget', helpstring(u'Number of features converted in the last conversion.')], HRESULT, 'FeaturesConverted',
              ( ['retval', 'out'], POINTER(c_int), 'numberConverted' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether there were any errors in the last conversion.')], HRESULT, 'ErrorsConverting',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'ErrorsConverting' )),
]
################################################################
## code template for IConvertFDOAnnoToCoverageAnno implementation
##class IConvertFDOAnnoToCoverageAnno_Impl(object):
##    @property
##    def FeaturesConverted(self):
##        u'Number of features converted in the last conversion.'
##        #return numberConverted
##
##    def CoverageAnnotationLayer(self, rhs):
##        u'Output annotation layer.'
##        #return 
##
##    def _set(self, rhs):
##        u'Indicates if only the selected set is transfered.'
##    ConvertOnlySelectedSet = property(fset = _set, doc = _set.__doc__)
##
##    @property
##    def ErrorsConverting(self):
##        u'Indicates whether there were any errors in the last conversion.'
##        #return ErrorsConverting
##
##    def ConvertAnnotation(self):
##        u'Perform the conversion. Append features from the FDO graphics layer to the coverage.'
##        #return 
##
##    def FDOGraphicsLayer(self, rhs):
##        u'Source FDO graphics layer.'
##        #return 
##
##    def CancelTracker(self, rhs):
##        u'Ablity to cancel and show progress.'
##        #return 
##
##    def Display(self, rhs):
##        u'The DisplayTransformation in the display is used to transform annotation.'
##        #return 
##

class IGraticule(IMapGrid):
    _case_insensitive_ = True
    u'Provides access to the members that control the graticule.'
    _iid_ = GUID('{03762C8C-F4D0-11D1-ADE8-080009EC732A}')
    _idlflags_ = ['oleautomation']
IGraticule._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if the graticule automatically and interactively computes the interval size.')], HRESULT, 'AutoInterval',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'AutoInterval' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the graticule automatically and interactively computes the interval size.')], HRESULT, 'AutoInterval',
              ( ['in'], VARIANT_BOOL, 'AutoInterval' )),
    COMMETHOD([helpstring(u'Adds a grid line at custom location to the graticule.')], HRESULT, 'AddElement',
              ( ['in'], BSTR, 'Label' ),
              ( ['in'], c_double, 'Location' ),
              ( ['in'], VARIANT_BOOL, 'isLatitude' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol), 'LabelSymbol' )),
    COMMETHOD([helpstring(u'Removes a grid line in a custom location.')], HRESULT, 'RemoveElement',
              ( ['in'], BSTR, 'Label' )),
]
################################################################
## code template for IGraticule implementation
##class IGraticule_Impl(object):
##    def AddElement(self, Label, Location, isLatitude, LabelSymbol):
##        u'Adds a grid line at custom location to the graticule.'
##        #return 
##
##    def _get(self):
##        u'Indicates if the graticule automatically and interactively computes the interval size.'
##        #return AutoInterval
##    def _set(self, AutoInterval):
##        u'Indicates if the graticule automatically and interactively computes the interval size.'
##    AutoInterval = property(_get, _set, doc = _set.__doc__)
##
##    def RemoveElement(self, Label):
##        u'Removes a grid line in a custom location.'
##        #return 
##

class SimpleRasterIdentifyObj(CoClass):
    u'A simplified raster object identified on the display.'
    _reg_clsid_ = GUID('{5FFAD6DB-9CC2-45BC-8C88-598EDF5E55C4}')
    _idlflags_ = ['restricted', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
SimpleRasterIdentifyObj._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IIdentifyObj, IRasterIdentifyObj, IRasterIdentifyObj2, IIdentifyObject]

class IMapTableDescription(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the available properties of a table description object.'
    _iid_ = GUID('{DBA8935B-8FA9-49BD-80A7-061D5F0295AA}')
    _idlflags_ = ['oleautomation']
IMapTableDescription._methods_ = [
    COMMETHOD(['propget', helpstring(u'The table ID. This is a unique ID for the layer, and is used to identify the table in a number of method calls.')], HRESULT, 'ID',
              ( ['retval', 'out'], POINTER(c_int), 'TableID' )),
    COMMETHOD(['propput', helpstring(u'The table ID. This is a unique ID for the layer, and is used to identify the table in a number of method calls.')], HRESULT, 'ID',
              ( ['in'], c_int, 'TableID' )),
    COMMETHOD(['propget', helpstring(u'The definition expression for the table.')], HRESULT, 'DefinitionExpression',
              ( ['retval', 'out'], POINTER(BSTR), 'Expression' )),
    COMMETHOD(['propput', helpstring(u'The definition expression for the table.')], HRESULT, 'DefinitionExpression',
              ( ['in'], BSTR, 'Expression' )),
    COMMETHOD(['propget', helpstring(u'The id of the data source to connect to.')], HRESULT, 'SourceID',
              ( ['retval', 'out'], POINTER(BSTR), 'srcID' )),
    COMMETHOD(['propput', helpstring(u'The id of the data source to connect to.')], HRESULT, 'SourceID',
              ( ['in'], BSTR, 'srcID' )),
]
################################################################
## code template for IMapTableDescription implementation
##class IMapTableDescription_Impl(object):
##    def _get(self):
##        u'The id of the data source to connect to.'
##        #return srcID
##    def _set(self, srcID):
##        u'The id of the data source to connect to.'
##    SourceID = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The definition expression for the table.'
##        #return Expression
##    def _set(self, Expression):
##        u'The definition expression for the table.'
##    DefinitionExpression = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The table ID. This is a unique ID for the layer, and is used to identify the table in a number of method calls.'
##        #return TableID
##    def _set(self, TableID):
##        u'The table ID. This is a unique ID for the layer, and is used to identify the table in a number of method calls.'
##    ID = property(_get, _set, doc = _set.__doc__)
##

class DimensionClassExtension(CoClass):
    u'A class extension which contains all the style properties for a dimension feature class.'
    _reg_clsid_ = GUID('{48F935E2-DA66-11D3-80CE-00C04F601565}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IDimensionClassExtension(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the dimension class extension for a dimension feature class.'
    _iid_ = GUID('{6558FE26-DA81-11D3-80CE-00C04F601565}')
    _idlflags_ = ['oleautomation']
DimensionClassExtension._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IClassExtension, IDimensionClassExtension, IDimensionClassExtension2, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClassExtension, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IObjectClassExtension, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IObjectClassEvents, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IPersistCustomFeaturesExtension]

IQueryResult._methods_ = [
    COMMETHOD(['propget', helpstring(u'Binary data representing requested query result.')], HRESULT, 'MimeData',
              ( ['retval', 'out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'Data' )),
    COMMETHOD(['propget', helpstring(u'The URL of the generated query result.')], HRESULT, 'URL',
              ( ['retval', 'out'], POINTER(BSTR), 'URL' )),
    COMMETHOD(['propget', helpstring(u'The Object representing the query result.')], HRESULT, 'Object',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'result' )),
]
################################################################
## code template for IQueryResult implementation
##class IQueryResult_Impl(object):
##    @property
##    def MimeData(self):
##        u'Binary data representing requested query result.'
##        #return Data
##
##    @property
##    def URL(self):
##        u'The URL of the generated query result.'
##        #return URL
##
##    @property
##    def Object(self):
##        u'The Object representing the query result.'
##        #return result
##

ILabelClassDescription._methods_ = [
    COMMETHOD(['propget', helpstring(u'LabelPlacementDescription.')], HRESULT, 'LabelPlacementDescription',
              ( ['retval', 'out'], POINTER(POINTER(ILabelPlacementDescription)), 'ppLabelPlacementDescription' )),
    COMMETHOD(['propput', helpstring(u'LabelPlacementDescription.')], HRESULT, 'LabelPlacementDescription',
              ( ['in'], POINTER(ILabelPlacementDescription), 'ppLabelPlacementDescription' )),
    COMMETHOD(['propget', helpstring(u'The Label Expression.')], HRESULT, 'LabelExpression',
              ( ['retval', 'out'], POINTER(BSTR), 'LabelExpression' )),
    COMMETHOD(['propput', helpstring(u'The Label Expression.')], HRESULT, 'LabelExpression',
              ( ['in'], BSTR, 'LabelExpression' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether Coded Value Should be used when displaying label expression.')], HRESULT, 'UseCodedValue',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'UseCodedValue' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether Coded Value Should be used when displaying label expression.')], HRESULT, 'UseCodedValue',
              ( ['in'], VARIANT_BOOL, 'UseCodedValue' )),
    COMMETHOD(['propget', helpstring(u'The text symbol used to draw the label.')], HRESULT, 'Symbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol)), 'ppSymbol' )),
    COMMETHOD(['propput', helpstring(u'The text symbol used to draw the label.')], HRESULT, 'Symbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol), 'ppSymbol' )),
    COMMETHOD(['propget', helpstring(u'Maximum scale at which the symbol will display.')], HRESULT, 'MaximumScale',
              ( ['retval', 'out'], POINTER(c_double), 'pMaximumScale' )),
    COMMETHOD(['propput', helpstring(u'Maximum scale at which the symbol will display.')], HRESULT, 'MaximumScale',
              ( ['in'], c_double, 'pMaximumScale' )),
    COMMETHOD(['propget', helpstring(u'Minimum scale at which the symbol will display.')], HRESULT, 'MinimumScale',
              ( ['retval', 'out'], POINTER(c_double), 'pMinimumScale' )),
    COMMETHOD(['propput', helpstring(u'Minimum scale at which the symbol will display.')], HRESULT, 'MinimumScale',
              ( ['in'], c_double, 'pMinimumScale' )),
]
################################################################
## code template for ILabelClassDescription implementation
##class ILabelClassDescription_Impl(object):
##    def _get(self):
##        u'LabelPlacementDescription.'
##        #return ppLabelPlacementDescription
##    def _set(self, ppLabelPlacementDescription):
##        u'LabelPlacementDescription.'
##    LabelPlacementDescription = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Maximum scale at which the symbol will display.'
##        #return pMaximumScale
##    def _set(self, pMaximumScale):
##        u'Maximum scale at which the symbol will display.'
##    MaximumScale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The text symbol used to draw the label.'
##        #return ppSymbol
##    def _set(self, ppSymbol):
##        u'The text symbol used to draw the label.'
##    Symbol = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Minimum scale at which the symbol will display.'
##        #return pMinimumScale
##    def _set(self, pMinimumScale):
##        u'Minimum scale at which the symbol will display.'
##    MinimumScale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The Label Expression.'
##        #return LabelExpression
##    def _set(self, LabelExpression):
##        u'The Label Expression.'
##    LabelExpression = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether Coded Value Should be used when displaying label expression.'
##        #return UseCodedValue
##    def _set(self, UseCodedValue):
##        u'Indicates whether Coded Value Should be used when displaying label expression.'
##    UseCodedValue = property(_get, _set, doc = _set.__doc__)
##

class DimensionStyles(CoClass):
    u'A collection of DimensionStyle objects.'
    _reg_clsid_ = GUID('{45B2FA28-FA01-11D3-80D3-00C04F601565}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
DimensionStyles._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDimensionStyles, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

IClassBreaksRenderer._methods_ = [
    COMMETHOD(['propget', helpstring(u'Number of class breaks (equal to the number of classes).')], HRESULT, 'BreakCount',
              ( ['retval', 'out'], POINTER(c_int), 'ValueCount' )),
    COMMETHOD(['propput', helpstring(u'Number of class breaks (equal to the number of classes).')], HRESULT, 'BreakCount',
              ( ['in'], c_int, 'ValueCount' )),
    COMMETHOD(['propget', helpstring(u'Classification field.')], HRESULT, 'Field',
              ( ['retval', 'out'], POINTER(BSTR), 'Field' )),
    COMMETHOD(['propput', helpstring(u'Classification field.')], HRESULT, 'Field',
              ( ['in'], BSTR, 'Field' )),
    COMMETHOD(['propget', helpstring(u'Normalization field.')], HRESULT, 'NormField',
              ( ['retval', 'out'], POINTER(BSTR), 'Field' )),
    COMMETHOD(['propput', helpstring(u'Normalization field.')], HRESULT, 'NormField',
              ( ['in'], BSTR, 'Field' )),
    COMMETHOD(['propget', helpstring(u'Symbol at the specified index (used to draw features in the specified class).')], HRESULT, 'Symbol',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol)), 'sym' )),
    COMMETHOD(['propput', helpstring(u'Symbol at the specified index (used to draw features in the specified class).')], HRESULT, 'Symbol',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol), 'sym' )),
    COMMETHOD(['propget', helpstring(u'Label at the specified index.')], HRESULT, 'Label',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Label' )),
    COMMETHOD(['propput', helpstring(u'Label at the specified index.')], HRESULT, 'Label',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Label' )),
    COMMETHOD(['propget', helpstring(u'Description at the specified index.')], HRESULT, 'Description',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Text' )),
    COMMETHOD(['propput', helpstring(u'Description at the specified index.')], HRESULT, 'Description',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Text' )),
    COMMETHOD(['propget', helpstring(u'Break value at the specified index. Break(0) is the lowest break and represents the upper bound of the lowest class.')], HRESULT, 'Break',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(c_double), 'Value' )),
    COMMETHOD(['propput', helpstring(u'Break value at the specified index. Break(0) is the lowest break and represents the upper bound of the lowest class.')], HRESULT, 'Break',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_double, 'Value' )),
    COMMETHOD(['propget', helpstring(u'Minimum break, i.e. the lower bound of the first class.')], HRESULT, 'MinimumBreak',
              ( ['retval', 'out'], POINTER(c_double), 'Value' )),
    COMMETHOD(['propput', helpstring(u'Minimum break, i.e. the lower bound of the first class.')], HRESULT, 'MinimumBreak',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD(['propget', helpstring(u'Indicates if classes are displayed in increasing order in legends/TOC.')], HRESULT, 'SortClassesAscending',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Ascending' )),
    COMMETHOD(['propput', helpstring(u'Indicates if classes are displayed in increasing order in legends/TOC.')], HRESULT, 'SortClassesAscending',
              ( ['in'], VARIANT_BOOL, 'Ascending' )),
    COMMETHOD(['propget', helpstring(u'Background fill symbol used when graduated marker symbols are draw on polygon features.')], HRESULT, 'BackgroundSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IFillSymbol)), 'sym' )),
    COMMETHOD(['propput', helpstring(u'Background fill symbol used when graduated marker symbols are draw on polygon features.')], HRESULT, 'BackgroundSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IFillSymbol), 'sym' )),
]
################################################################
## code template for IClassBreaksRenderer implementation
##class IClassBreaksRenderer_Impl(object):
##    def _get(self):
##        u'Background fill symbol used when graduated marker symbols are draw on polygon features.'
##        #return sym
##    def _set(self, sym):
##        u'Background fill symbol used when graduated marker symbols are draw on polygon features.'
##    BackgroundSymbol = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if classes are displayed in increasing order in legends/TOC.'
##        #return Ascending
##    def _set(self, Ascending):
##        u'Indicates if classes are displayed in increasing order in legends/TOC.'
##    SortClassesAscending = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, Index):
##        u'Description at the specified index.'
##        #return Text
##    def _set(self, Index, Text):
##        u'Description at the specified index.'
##    Description = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Normalization field.'
##        #return Field
##    def _set(self, Field):
##        u'Normalization field.'
##    NormField = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, Index):
##        u'Symbol at the specified index (used to draw features in the specified class).'
##        #return sym
##    def _set(self, Index, sym):
##        u'Symbol at the specified index (used to draw features in the specified class).'
##    Symbol = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, Index):
##        u'Label at the specified index.'
##        #return Label
##    def _set(self, Index, Label):
##        u'Label at the specified index.'
##    Label = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, Index):
##        u'Break value at the specified index. Break(0) is the lowest break and represents the upper bound of the lowest class.'
##        #return Value
##    def _set(self, Index, Value):
##        u'Break value at the specified index. Break(0) is the lowest break and represents the upper bound of the lowest class.'
##    Break = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Classification field.'
##        #return Field
##    def _set(self, Field):
##        u'Classification field.'
##    Field = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Number of class breaks (equal to the number of classes).'
##        #return ValueCount
##    def _set(self, ValueCount):
##        u'Number of class breaks (equal to the number of classes).'
##    BreakCount = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Minimum break, i.e. the lower bound of the first class.'
##        #return Value
##    def _set(self, Value):
##        u'Minimum break, i.e. the lower bound of the first class.'
##    MinimumBreak = property(_get, _set, doc = _set.__doc__)
##

class TinFaceValueRenderer(CoClass):
    u'TIN face value renderer component.'
    _reg_clsid_ = GUID('{AA8745C8-AA66-11D2-81FA-00104BC4CD03}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class ITinUniqueValueRenderer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that assign symbols to TIN features based upon tag value or edge type.'
    _iid_ = GUID('{AA8745C7-AA66-11D2-81FA-00104BC4CD03}')
    _idlflags_ = ['oleautomation']
TinFaceValueRenderer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ITinUniqueValueRenderer, ITinRenderer, ITerrainRenderer, ITinIllumination, ILegendInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

class TinNodeElevationRenderer(CoClass):
    u'TIN node elevation renderer component.'
    _reg_clsid_ = GUID('{BA20564C-DBE3-11D2-9F39-00C04F6BC619}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
TinNodeElevationRenderer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ITinColorRampRenderer, ITinRenderer, ITerrainRenderer, IDatasetRenderer, ILegendInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, IClassBreaksUIProperties, IDataSampling]


# values for enumeration 'esriClassifyMethod'
esriClassifyNaturalBreaks = 0
esriClassifyEqualInterval = 1
esriClassifyQuantile = 2
esriClassifyStandardDeviation = 3
esriClassifyGeometricalInterval = 4
esriClassifyMethod = c_int # enum
class IMapTableInfo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Table Info.'
    _iid_ = GUID('{08AB1BE0-D464-4882-A721-D72FBB36903A}')
    _idlflags_ = ['oleautomation']
class IStandaloneTableInfo(IMapTableInfo):
    _case_insensitive_ = True
    u'Provides access to StandaloneTableInfo.'
    _iid_ = GUID('{1095230C-75D1-459C-BD67-5C2C3F3B01B7}')
    _idlflags_ = ['oleautomation']
IStandaloneTableInfos._methods_ = [
    COMMETHOD(['propget', helpstring(u'The Table info count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The Table info at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IStandaloneTableInfo)), 'StandaloneTableInfo' )),
    COMMETHOD([helpstring(u'Removes the Table info at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all Table infos.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Adds a Table info.')], HRESULT, 'Add',
              ( ['in'], POINTER(IStandaloneTableInfo), 'StandaloneTableInfo' )),
    COMMETHOD([helpstring(u'Adds a Table info at the specified position.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(IStandaloneTableInfo), 'StandaloneTableInfo' )),
]
################################################################
## code template for IStandaloneTableInfos implementation
##class IStandaloneTableInfos_Impl(object):
##    @property
##    def Count(self):
##        u'The Table info count.'
##        #return Count
##
##    def Insert(self, Index, StandaloneTableInfo):
##        u'Adds a Table info at the specified position.'
##        #return 
##
##    def Remove(self, Index):
##        u'Removes the Table info at the specified position.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'The Table info at the specified position.'
##        #return StandaloneTableInfo
##
##    def RemoveAll(self):
##        u'Removes all Table infos.'
##        #return 
##
##    def Add(self, StandaloneTableInfo):
##        u'Adds a Table info.'
##        #return 
##

class RasterExporter(CoClass):
    u'A helper class for converting a Raster to an in-memory image.'
    _reg_clsid_ = GUID('{61DA7305-731C-4B10-96D6-7BB036D1190E}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
RasterExporter._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterExporter]

class IRelateInfos(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the RelateInfos Interface.'
    _iid_ = GUID('{CB5E939F-395F-482C-A703-ACD070551F80}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'esriServerHTMLPopupType'
esriServerHTMLPopupTypeNone = 0
esriServerHTMLPopupTypeAsURL = 1
esriServerHTMLPopupTypeAsHTMLText = 2
esriServerHTMLPopupType = c_int # enum
IMapTableInfo._methods_ = [
    COMMETHOD(['propget', helpstring(u'The table ID. This is a unique ID among layers and tables, and is used to identify the table in a number of methods.')], HRESULT, 'ID',
              ( ['retval', 'out'], POINTER(c_int), 'TableID' )),
    COMMETHOD(['propget', helpstring(u'Descriptive name of the table.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propget', helpstring(u'Array of attribute fields contained in the table.')], HRESULT, 'Fields',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFields)), 'Fields' )),
    COMMETHOD(['propget', helpstring(u'Array of relates associated to the table.')], HRESULT, 'RelateInfos',
              ( ['retval', 'out'], POINTER(POINTER(IRelateInfos)), 'RelateInfo' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer has attachments.')], HRESULT, 'HasAttachments',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'HasAttachments' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer has HTML popups enabled.')], HRESULT, 'HTMLPopupType',
              ( ['retval', 'out'], POINTER(esriServerHTMLPopupType), 'Type' )),
    COMMETHOD(['propget', helpstring(u'Primary display field.')], HRESULT, 'DisplayField',
              ( ['retval', 'out'], POINTER(BSTR), 'FieldName' )),
    COMMETHOD(['propget', helpstring(u'The name of the OID Field.')], HRESULT, 'OIDFieldName',
              ( ['retval', 'out'], POINTER(BSTR), 'OIDFieldName' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer has Subtype.')], HRESULT, 'HasSubtype',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'HasSubtype' )),
]
################################################################
## code template for IMapTableInfo implementation
##class IMapTableInfo_Impl(object):
##    @property
##    def DisplayField(self):
##        u'Primary display field.'
##        #return FieldName
##
##    @property
##    def HasSubtype(self):
##        u'Indicates if the layer has Subtype.'
##        #return HasSubtype
##
##    @property
##    def Name(self):
##        u'Descriptive name of the table.'
##        #return Name
##
##    @property
##    def HasAttachments(self):
##        u'Indicates if the layer has attachments.'
##        #return HasAttachments
##
##    @property
##    def Fields(self):
##        u'Array of attribute fields contained in the table.'
##        #return Fields
##
##    @property
##    def RelateInfos(self):
##        u'Array of relates associated to the table.'
##        #return RelateInfo
##
##    @property
##    def OIDFieldName(self):
##        u'The name of the OID Field.'
##        #return OIDFieldName
##
##    @property
##    def HTMLPopupType(self):
##        u'Indicates if the layer has HTML popups enabled.'
##        #return Type
##
##    @property
##    def ID(self):
##        u'The table ID. This is a unique ID among layers and tables, and is used to identify the table in a number of methods.'
##        #return TableID
##

class TinNodeValueRenderer(CoClass):
    u'TIN node value renderer component.'
    _reg_clsid_ = GUID('{322934B8-B224-11D2-81FC-00104BC4CD03}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
TinNodeValueRenderer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ITinUniqueValueRenderer, ITinRenderer, ILegendInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

class IACSimpleMarkerSymbol(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control ArcIMS simple marker symbol.'
    _iid_ = GUID('{27A1DB1A-513D-4708-BF7B-8BBC285A29D2}')
    _idlflags_ = ['oleautomation']
IACSimpleMarkerSymbol._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if the outline is used.')], HRESULT, 'Outline',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the outline is used.')], HRESULT, 'Outline',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'The outline color.')], HRESULT, 'OutlineColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'The outline color.')], HRESULT, 'OutlineColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the shadow is used.')], HRESULT, 'Shadow',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the shadow is used.')], HRESULT, 'Shadow',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'The shadow color.')], HRESULT, 'ShadowColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'The shadow color.')], HRESULT, 'ShadowColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'Indicates if labels can overlap this symbol.')], HRESULT, 'Overlap',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if labels can overlap this symbol.')], HRESULT, 'Overlap',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'The marker color.')], HRESULT, 'Color',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'The marker color.')], HRESULT, 'Color',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'The marker type.')], HRESULT, 'Type',
              ( ['retval', 'out'], POINTER(acMarkerType), 'Type' )),
    COMMETHOD(['propput', helpstring(u'The marker type.')], HRESULT, 'Type',
              ( ['in'], acMarkerType, 'Type' )),
    COMMETHOD(['propget', helpstring(u'The marker width in pixels.')], HRESULT, 'Width',
              ( ['retval', 'out'], POINTER(c_int), 'Width' )),
    COMMETHOD(['propput', helpstring(u'The marker width in pixels.')], HRESULT, 'Width',
              ( ['in'], c_int, 'Width' )),
]
################################################################
## code template for IACSimpleMarkerSymbol implementation
##class IACSimpleMarkerSymbol_Impl(object):
##    def _get(self):
##        u'Indicates if the outline is used.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if the outline is used.'
##    Outline = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The marker color.'
##        #return Color
##    def _set(self, Color):
##        u'The marker color.'
##    Color = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if labels can overlap this symbol.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if labels can overlap this symbol.'
##    Overlap = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The marker width in pixels.'
##        #return Width
##    def _set(self, Width):
##        u'The marker width in pixels.'
##    Width = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The shadow color.'
##        #return Color
##    def _set(self, Color):
##        u'The shadow color.'
##    ShadowColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the shadow is used.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if the shadow is used.'
##    Shadow = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The marker type.'
##        #return Type
##    def _set(self, Type):
##        u'The marker type.'
##    Type = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The outline color.'
##        #return Color
##    def _set(self, Color):
##        u'The outline color.'
##    OutlineColor = property(_get, _set, doc = _set.__doc__)
##

IFeatureIDSet._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if the given feature id is in the set.')], HRESULT, 'Contains',
              ( ['in'], c_int, 'FID' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Contains' )),
    COMMETHOD(['propget', helpstring(u'Number of feature ids in the set.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD([helpstring(u'Adds a feature id to the set.')], HRESULT, 'Add',
              ( ['in'], c_int, 'FID' )),
    COMMETHOD([helpstring(u'Removes a feature id from the set.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'FID' )),
    COMMETHOD([helpstring(u'Clears all ids from the set.')], HRESULT, 'Clear'),
    COMMETHOD(['propget', helpstring(u'Array of ids in the set.')], HRESULT, 'Members',
              ( ['retval', 'out'], POINTER(VARIANT), 'FIDs' )),
]
################################################################
## code template for IFeatureIDSet implementation
##class IFeatureIDSet_Impl(object):
##    @property
##    def Count(self):
##        u'Number of feature ids in the set.'
##        #return Count
##
##    def Clear(self):
##        u'Clears all ids from the set.'
##        #return 
##
##    @property
##    def Contains(self, FID):
##        u'Indicates if the given feature id is in the set.'
##        #return Contains
##
##    def Remove(self, FID):
##        u'Removes a feature id from the set.'
##        #return 
##
##    def Add(self, FID):
##        u'Adds a feature id to the set.'
##        #return 
##
##    @property
##    def Members(self):
##        u'Array of ids in the set.'
##        #return FIDs
##

class TinBreaklineRenderer(CoClass):
    u'TIN breakline renderer component.'
    _reg_clsid_ = GUID('{BA20564F-DBE3-11D2-9F39-00C04F6BC619}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
TinBreaklineRenderer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ITinUniqueValueRenderer, ITinRenderer, ILegendInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

class RasterLayerFactory(CoClass):
    u'The Raster Layer Factory is used to help look for rasters on disk.'
    _reg_clsid_ = GUID('{349EF48F-043F-4C56-B6C6-C22CCC14C54C}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
RasterLayerFactory._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILayerFactory]

class IUniqueValueInfos(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the UniqueValueInfos Interface.'
    _iid_ = GUID('{D81C47C3-824E-4372-9E9D-AE4F9E545A94}')
    _idlflags_ = []
IUniqueValueInfos._methods_ = [
    COMMETHOD(['propget', helpstring(u'The unique value count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The unique value at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IUniqueValueInfo)), 'ppUniqueValueInfo' )),
    COMMETHOD([helpstring(u'Removes the unique value info at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all unique values.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Adds a unique value.')], HRESULT, 'Add',
              ( ['in'], POINTER(IUniqueValueInfo), 'pUniqueValueInfo' )),
    COMMETHOD([helpstring(u'Adds a unique value at the specified position.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(IUniqueValueInfo), 'pUniqueValueInfo' )),
]
################################################################
## code template for IUniqueValueInfos implementation
##class IUniqueValueInfos_Impl(object):
##    @property
##    def Count(self):
##        u'The unique value count.'
##        #return Count
##
##    def Insert(self, Index, pUniqueValueInfo):
##        u'Adds a unique value at the specified position.'
##        #return 
##
##    def Remove(self, Index):
##        u'Removes the unique value info at the specified position.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'The unique value at the specified position.'
##        #return ppUniqueValueInfo
##
##    def RemoveAll(self):
##        u'Removes all unique values.'
##        #return 
##
##    def Add(self, pUniqueValueInfo):
##        u'Adds a unique value.'
##        #return 
##

IStandaloneTableInfo._methods_ = [
    COMMETHOD(['propget', helpstring(u'The description of the Stand Alone table. This property is set in the General tab of the Properties dialog.')], HRESULT, 'Description',
              ( ['retval', 'out'], POINTER(BSTR), 'desc' )),
]
################################################################
## code template for IStandaloneTableInfo implementation
##class IStandaloneTableInfo_Impl(object):
##    @property
##    def Description(self):
##        u'The description of the Stand Alone table. This property is set in the General tab of the Properties dialog.'
##        #return desc
##

IFeatureLayerDefinition2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Definition query expression for the existing layer.')], HRESULT, 'DefinitionExpression',
              ( ['retval', 'out'], POINTER(BSTR), 'Expression' )),
    COMMETHOD(['propput', helpstring(u'Definition query expression for the existing layer.')], HRESULT, 'DefinitionExpression',
              ( ['in'], BSTR, 'Expression' )),
    COMMETHOD(['propget', helpstring(u'The selection set that defines the subset of features in a selection layer.')], HRESULT, 'DefinitionSelectionSet',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ISelectionSet)), 'SelectionSet' )),
    COMMETHOD([helpstring(u'Creates a new feature layer from the existing layer based on the current selection and the specified query expression.')], HRESULT, 'CreateSelectionLayer',
              ( ['in'], BSTR, 'LayerName' ),
              ( ['in'], VARIANT_BOOL, 'useCurrentSelection' ),
              ( ['in'], BSTR, 'joinTableNames' ),
              ( ['in'], BSTR, 'Expression' ),
              ( ['retval', 'out'], POINTER(POINTER(IFeatureLayer)), 'Layer' )),
    COMMETHOD(['propget', helpstring(u'The current relationship class used to display related fields.')], HRESULT, 'RelationshipClass',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRelationshipClass)), 'relClass' )),
    COMMETHOD(['propputref', helpstring(u'The current relationship class used to display related fields.')], HRESULT, 'RelationshipClass',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRelationshipClass), 'relClass' )),
    COMMETHOD(['propget', helpstring(u'Flag that specifies the search order used when applying a mixed attribute-spatial query.')], HRESULT, 'SearchOrder',
              ( ['retval', 'out'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriSearchOrder), 'order' )),
    COMMETHOD(['propput', helpstring(u'Flag that specifies the search order used when applying a mixed attribute-spatial query.')], HRESULT, 'SearchOrder',
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriSearchOrder, 'order' )),
]
################################################################
## code template for IFeatureLayerDefinition2 implementation
##class IFeatureLayerDefinition2_Impl(object):
##    def _get(self):
##        u'Definition query expression for the existing layer.'
##        #return Expression
##    def _set(self, Expression):
##        u'Definition query expression for the existing layer.'
##    DefinitionExpression = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def DefinitionSelectionSet(self):
##        u'The selection set that defines the subset of features in a selection layer.'
##        #return SelectionSet
##
##    def _get(self):
##        u'Flag that specifies the search order used when applying a mixed attribute-spatial query.'
##        #return order
##    def _set(self, order):
##        u'Flag that specifies the search order used when applying a mixed attribute-spatial query.'
##    SearchOrder = property(_get, _set, doc = _set.__doc__)
##
##    def RelationshipClass(self, relClass):
##        u'The current relationship class used to display related fields.'
##        #return 
##
##    def CreateSelectionLayer(self, LayerName, useCurrentSelection, joinTableNames, Expression):
##        u'Creates a new feature layer from the existing layer based on the current selection and the specified query expression.'
##        #return Layer
##

class IAction(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to properties and methods needed to manage general actions settings and funcationality.'
    _iid_ = GUID('{CC018A6E-24FB-11D4-B34C-00104BA2ABCC}')
    _idlflags_ = ['oleautomation']
IAction._methods_ = [
    COMMETHOD(['propget', helpstring(u'Allows user to retrieve the version number for this action.')], HRESULT, 'Version',
              ( ['retval', 'out'], POINTER(c_double), 'pVal' )),
    COMMETHOD(['propget', helpstring(u'Developer-given name of the object.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'pbstrName' )),
    COMMETHOD(['propget', helpstring(u'Describes what the action will do.')], HRESULT, 'RulesDescription',
              ( ['retval', 'out'], POINTER(BSTR), 'pbstrRulesDescription' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether or not the processing engine should stop processing further actions in the action list after this action finishes processing.')], HRESULT, 'ContinueProcessing',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbvarContinueProcessing' )),
    COMMETHOD(['propget', helpstring(u'Allows user to specify or retrieve the alias name for this action.')], HRESULT, 'Alias',
              ( ['retval', 'out'], POINTER(BSTR), 'pbstrAlias' )),
    COMMETHOD(['propput', helpstring(u'Allows user to specify or retrieve the alias name for this action.')], HRESULT, 'Alias',
              ( ['in'], BSTR, 'pbstrAlias' )),
    COMMETHOD(['propget', helpstring(u'Allows user to specify or retreive tha label name for this action.')], HRESULT, 'Label',
              ( ['retval', 'out'], POINTER(BSTR), 'pbstrLabel' )),
    COMMETHOD(['propput', helpstring(u'Allows user to specify or retreive tha label name for this action.')], HRESULT, 'Label',
              ( ['in'], BSTR, 'pbstrLabel' )),
    COMMETHOD(['propget', helpstring(u'Allows user to obtain a string describing the type of action object.')], HRESULT, 'Type',
              ( ['retval', 'out'], POINTER(BSTR), 'pbstrType' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether or not an action in the action list is enabled for processing.')], HRESULT, 'IsEnabled',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbvarIsEnabled' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether or not an action in the action list is enabled for processing.')], HRESULT, 'IsEnabled',
              ( ['in'], VARIANT_BOOL, 'pbvarIsEnabled' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the processing engine should stop processing further actions in the action list after this action finishes processing.')], HRESULT, 'StopProcessing',
              ( ['in'], VARIANT_BOOL, 'pbvarStopProcessing' )),
    COMMETHOD([helpstring(u'Takes an input object and evaluates the object based on predefined criteria.')], HRESULT, 'Evaluate',
              ( ['in'], POINTER(IUnknown), 'piObject' ),
              ( ['in', 'out'], POINTER(VARIANT), 'pvarReturnedObjects' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the processing engine should stop processing further actions in the action list after this action finishes processing.')], HRESULT, 'StopProcessing',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbvarStopProcessing' )),
    COMMETHOD(['propget', helpstring(u'Number of times this action has been evaluated.')], HRESULT, 'EvaluationCount',
              ( ['retval', 'out'], POINTER(c_int), 'pVal' )),
    COMMETHOD(['propget', helpstring(u'Number of times this action has returned S_ACTIONPROCESSOR_MSG_STOPPROCESSING.')], HRESULT, 'StopProcessingCount',
              ( ['retval', 'out'], POINTER(c_int), 'pVal' )),
    COMMETHOD(['propget', helpstring(u'Number of times this action has returned S_ACTIONPROCESSOR_MSG_FILTERED.')], HRESULT, 'FilteredCount',
              ( ['retval', 'out'], POINTER(c_int), 'pVal' )),
    COMMETHOD(['propget', helpstring(u'Number of times this action has returned S_ACTIONPROCESSOR_MSG_MODIFIED.')], HRESULT, 'ModifiedCount',
              ( ['retval', 'out'], POINTER(c_int), 'pVal' )),
    COMMETHOD(['propget', helpstring(u'Number of times this action has returned S_ACTIONPROCESSOR_MSG_PROCESSED.')], HRESULT, 'ProcessedCount',
              ( ['retval', 'out'], POINTER(c_int), 'pVal' )),
    COMMETHOD([helpstring(u'Clears all the internal counters for this action.')], HRESULT, 'ClearCounts'),
    COMMETHOD(['propget', helpstring(u'Indicates the type of action to be applied to data.')], HRESULT, 'ActionCategory',
              ( ['retval', 'out'], POINTER(enumActionCategory), 'pVal' )),
    COMMETHOD(['propput', helpstring(u'Indicates the type of action to be applied to data.')], HRESULT, 'ActionCategory',
              ( ['in'], enumActionCategory, 'pVal' )),
]
################################################################
## code template for IAction implementation
##class IAction_Impl(object):
##    def ClearCounts(self):
##        u'Clears all the internal counters for this action.'
##        #return 
##
##    @property
##    def Name(self):
##        u'Developer-given name of the object.'
##        #return pbstrName
##
##    @property
##    def ModifiedCount(self):
##        u'Number of times this action has returned S_ACTIONPROCESSOR_MSG_MODIFIED.'
##        #return pVal
##
##    def Evaluate(self, piObject):
##        u'Takes an input object and evaluates the object based on predefined criteria.'
##        #return pvarReturnedObjects
##
##    def _get(self):
##        u'Indicates whether or not an action in the action list is enabled for processing.'
##        #return pbvarIsEnabled
##    def _set(self, pbvarIsEnabled):
##        u'Indicates whether or not an action in the action list is enabled for processing.'
##    IsEnabled = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def ProcessedCount(self):
##        u'Number of times this action has returned S_ACTIONPROCESSOR_MSG_PROCESSED.'
##        #return pVal
##
##    @property
##    def EvaluationCount(self):
##        u'Number of times this action has been evaluated.'
##        #return pVal
##
##    def _get(self):
##        u'Allows user to specify or retreive tha label name for this action.'
##        #return pbstrLabel
##    def _set(self, pbstrLabel):
##        u'Allows user to specify or retreive tha label name for this action.'
##    Label = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Allows user to specify or retrieve the alias name for this action.'
##        #return pbstrAlias
##    def _set(self, pbstrAlias):
##        u'Allows user to specify or retrieve the alias name for this action.'
##    Alias = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Version(self):
##        u'Allows user to retrieve the version number for this action.'
##        #return pVal
##
##    @property
##    def ContinueProcessing(self):
##        u'Indicates whether or not the processing engine should stop processing further actions in the action list after this action finishes processing.'
##        #return pbvarContinueProcessing
##
##    def _get(self):
##        u'Indicates if the processing engine should stop processing further actions in the action list after this action finishes processing.'
##        #return pbvarStopProcessing
##    def _set(self, pbvarStopProcessing):
##        u'Indicates if the processing engine should stop processing further actions in the action list after this action finishes processing.'
##    StopProcessing = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def RulesDescription(self):
##        u'Describes what the action will do.'
##        #return pbstrRulesDescription
##
##    def _get(self):
##        u'Indicates the type of action to be applied to data.'
##        #return pVal
##    def _set(self, pVal):
##        u'Indicates the type of action to be applied to data.'
##    ActionCategory = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def FilteredCount(self):
##        u'Number of times this action has returned S_ACTIONPROCESSOR_MSG_FILTERED.'
##        #return pVal
##
##    @property
##    def Type(self):
##        u'Allows user to obtain a string describing the type of action object.'
##        #return pbstrType
##
##    @property
##    def StopProcessingCount(self):
##        u'Number of times this action has returned S_ACTIONPROCESSOR_MSG_STOPPROCESSING.'
##        #return pVal
##

class LegendClasses(CoClass):
    u'A collection of LegendClass objects.'
    _reg_clsid_ = GUID('{3507992D-7701-4DB7-9E4E-46F99675CB6A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class ILegendClasses(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Legend Classes Interface.'
    _iid_ = GUID('{0314AF0B-5F97-4BE4-AA97-BC8EB1460E81}')
    _idlflags_ = ['oleautomation']
LegendClasses._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILegendClasses, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

class IGraphicFeature(IDataObjectEx):
    _case_insensitive_ = True
    u'A Graphic Feature'
    _iid_ = GUID('{B846F66C-1C5B-41D4-9355-D6D59431A85B}')
    _idlflags_ = ['oleautomation']
IDataObjectEx._methods_ = [
    COMMETHOD(['propget'], HRESULT, 'Properties',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet)), 'props' )),
    COMMETHOD(['propputref'], HRESULT, 'Properties',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet), 'props' )),
]
################################################################
## code template for IDataObjectEx implementation
##class IDataObjectEx_Impl(object):
##    def Properties(self, props):
##        '-no docstring-'
##        #return 
##

IGraphicFeature._methods_ = [
    COMMETHOD(['propget'], HRESULT, 'Geometry',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry)), 'Geometry' )),
    COMMETHOD(['propputref'], HRESULT, 'Geometry',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'Geometry' )),
]
################################################################
## code template for IGraphicFeature implementation
##class IGraphicFeature_Impl(object):
##    def Geometry(self, Geometry):
##        '-no docstring-'
##        #return 
##

class IViewRefresh(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that are useful for refreshing views.'
    _iid_ = GUID('{5F78435A-7443-4195-BEB2-CAEFA63433D8}')
    _idlflags_ = ['oleautomation']
IViewRefresh._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates whether the view is currently drawing or not.')], HRESULT, 'Drawing',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Drawing' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the view should progressively update the window during drawing.  False means just update the window once when all rendering is complete.')], HRESULT, 'ProgressiveDrawing',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the view should progressively update the window during drawing.  False means just update the window once when all rendering is complete.')], HRESULT, 'ProgressiveDrawing',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD([helpstring(u'Causes the entire view to draw.')], HRESULT, 'Refresh'),
    COMMETHOD([helpstring(u'Draws the specified view phase.  Use an envelope of zero to draw the entire phase.')], HRESULT, 'PartialRefresh',
              ( ['in'], esriViewDrawPhase, 'phase' ),
              ( ['in'], POINTER(IUnknown), 'Data' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'envelope' )),
    COMMETHOD([helpstring(u'Refreshes the specified shape on the specified view phase.  Use symbolSizePoints to indicate point and line sizes.')], HRESULT, 'PartialRefreshShape',
              ( ['in'], esriViewDrawPhase, 'phase' ),
              ( ['in'], POINTER(IUnknown), 'Data' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'Geometry' ),
              ( ['in'], c_double, 'symbolSizePoints' )),
    COMMETHOD([helpstring(u"Use to quickly redraw a phase that has it's own cache, i.e., a tracking layer.  Tradeoffs are made to ensure fast redrawing at the expense of quality.")], HRESULT, 'AnimationRefresh',
              ( ['in'], esriViewDrawPhase, 'phase' ),
              ( ['in'], POINTER(IUnknown), 'Data' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'envelope' )),
    COMMETHOD([helpstring(u"Use to quickly redraw a phase that has it's own cache, i.e., a tracking layer.  Tradeoffs are made to ensure fast redrawing at the expense of quality.  See PartialRefreshShape for more info.")], HRESULT, 'AnimationRefreshShape',
              ( ['in'], esriViewDrawPhase, 'phase' ),
              ( ['in'], POINTER(IUnknown), 'Data' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'Geometry' ),
              ( ['in'], c_double, 'symbolSizePoints' )),
    COMMETHOD([helpstring(u'Use to redraw a specific item and the content above it.  When adding items to the view (i.e., layers or graphics).  Refresh can be optimized by only drawing the newly added items.')], HRESULT, 'RefreshItem',
              ( ['in'], POINTER(IUnknown), 'Data' )),
    COMMETHOD([helpstring(u'Reallocate the display caches.  Causes a full redraw.  Normally caches are automatically maintained.  Use this sparingly when programatically changing attributes that affect caching such as ILayer::Cached flag.')], HRESULT, 'RefreshCaches'),
]
################################################################
## code template for IViewRefresh implementation
##class IViewRefresh_Impl(object):
##    def PartialRefresh(self, phase, Data, envelope):
##        u'Draws the specified view phase.  Use an envelope of zero to draw the entire phase.'
##        #return 
##
##    def AnimationRefresh(self, phase, Data, envelope):
##        u"Use to quickly redraw a phase that has it's own cache, i.e., a tracking layer.  Tradeoffs are made to ensure fast redrawing at the expense of quality."
##        #return 
##
##    def PartialRefreshShape(self, phase, Data, Geometry, symbolSizePoints):
##        u'Refreshes the specified shape on the specified view phase.  Use symbolSizePoints to indicate point and line sizes.'
##        #return 
##
##    def Refresh(self):
##        u'Causes the entire view to draw.'
##        #return 
##
##    def RefreshItem(self, Data):
##        u'Use to redraw a specific item and the content above it.  When adding items to the view (i.e., layers or graphics).  Refresh can be optimized by only drawing the newly added items.'
##        #return 
##
##    def RefreshCaches(self):
##        u'Reallocate the display caches.  Causes a full redraw.  Normally caches are automatically maintained.  Use this sparingly when programatically changing attributes that affect caching such as ILayer::Cached flag.'
##        #return 
##
##    def AnimationRefreshShape(self, phase, Data, Geometry, symbolSizePoints):
##        u"Use to quickly redraw a phase that has it's own cache, i.e., a tracking layer.  Tradeoffs are made to ensure fast redrawing at the expense of quality.  See PartialRefreshShape for more info."
##        #return 
##
##    def _get(self):
##        u'Indicates whether the view should progressively update the window during drawing.  False means just update the window once when all rendering is complete.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether the view should progressively update the window during drawing.  False means just update the window once when all rendering is complete.'
##    ProgressiveDrawing = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Drawing(self):
##        u'Indicates whether the view is currently drawing or not.'
##        #return Drawing
##

ILegendClasses._methods_ = [
    COMMETHOD(['propget', helpstring(u'The legend class count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The legend class at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(ILegendClass)), 'LegendClass' )),
    COMMETHOD([helpstring(u'Remove legend class at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Remove all legend classes.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Add a legend class.')], HRESULT, 'Add',
              ( ['in'], POINTER(ILegendClass), 'LegendClass' )),
    COMMETHOD([helpstring(u'Add a legend class at the specified posiiton.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(ILegendClass), 'LegendClass' )),
]
################################################################
## code template for ILegendClasses implementation
##class ILegendClasses_Impl(object):
##    @property
##    def Count(self):
##        u'The legend class count.'
##        #return Count
##
##    def Insert(self, Index, LegendClass):
##        u'Add a legend class at the specified posiiton.'
##        #return 
##
##    def Remove(self, Index):
##        u'Remove legend class at the specified position.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'The legend class at the specified position.'
##        #return LegendClass
##
##    def RemoveAll(self):
##        u'Remove all legend classes.'
##        #return 
##
##    def Add(self, LegendClass):
##        u'Add a legend class.'
##        #return 
##

class IParameterInfo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides generic access to object parameters for GP framework.'
    _iid_ = GUID('{82F99956-A431-4A70-B460-772AC1203FA7}')
    _idlflags_ = ['oleautomation']
IParameterInfo._methods_ = [
    COMMETHOD(['propget', helpstring(u'Number of exposed parameters.')], HRESULT, 'ParameterCount',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propget', helpstring(u'Gets parameter name.')], HRESULT, 'Name',
              ( ['in'], c_int, 'indexParam' ),
              ( ['retval', 'out'], POINTER(BSTR), 'pName' )),
    COMMETHOD(['propget', helpstring(u'Gets parameter label.')], HRESULT, 'Label',
              ( ['in'], c_int, 'indexParam' ),
              ( ['retval', 'out'], POINTER(BSTR), 'pLabel' )),
    COMMETHOD(['propget', helpstring(u'Get parameter type.')], HRESULT, 'DataType',
              ( ['in'], c_int, 'indexParam' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType)), 'ppGPDataType' )),
    COMMETHOD(['propget', helpstring(u'Get parameter domain.')], HRESULT, 'Domain',
              ( ['in'], c_int, 'indexParam' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDomain)), 'ppGPDomain' )),
    COMMETHOD(['propget', helpstring(u'Get parameter dependency.')], HRESULT, 'Dependency',
              ( ['in'], c_int, 'indexParam' ),
              ( ['retval', 'out'], POINTER(c_int), 'pIndexDependency' )),
    COMMETHOD(['propget', helpstring(u'Get parameter optional flag.')], HRESULT, 'Optional',
              ( ['in'], c_int, 'indexParam' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pOptional' )),
    COMMETHOD(['propget', helpstring(u'Gets parameter value.')], HRESULT, 'Value',
              ( ['in'], c_int, 'indexParam' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue)), 'ppGPValue' )),
    COMMETHOD(['propput', helpstring(u'Gets parameter value.')], HRESULT, 'Value',
              ( ['in'], c_int, 'indexParam' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue), 'ppGPValue' )),
    COMMETHOD(['propget', helpstring(u'Gets object type name.')], HRESULT, 'ObjectType',
              ( ['retval', 'out'], POINTER(BSTR), 'pObjectTypeName' )),
    COMMETHOD(['propget', helpstring(u'Gets object sub-type name.')], HRESULT, 'ObjectSubType',
              ( ['retval', 'out'], POINTER(BSTR), 'pObjectSubTypeName' )),
    COMMETHOD(['propget', helpstring(u'Gets object UI label.')], HRESULT, 'ObjectLabel',
              ( ['retval', 'out'], POINTER(BSTR), 'pObjectLabel' )),
]
################################################################
## code template for IParameterInfo implementation
##class IParameterInfo_Impl(object):
##    @property
##    def Domain(self, indexParam):
##        u'Get parameter domain.'
##        #return ppGPDomain
##
##    @property
##    def Name(self, indexParam):
##        u'Gets parameter name.'
##        #return pName
##
##    @property
##    def DataType(self, indexParam):
##        u'Get parameter type.'
##        #return ppGPDataType
##
##    @property
##    def Optional(self, indexParam):
##        u'Get parameter optional flag.'
##        #return pOptional
##
##    def _get(self, indexParam):
##        u'Gets parameter value.'
##        #return ppGPValue
##    def _set(self, indexParam, ppGPValue):
##        u'Gets parameter value.'
##    Value = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Label(self, indexParam):
##        u'Gets parameter label.'
##        #return pLabel
##
##    @property
##    def Dependency(self, indexParam):
##        u'Get parameter dependency.'
##        #return pIndexDependency
##
##    @property
##    def ObjectLabel(self):
##        u'Gets object UI label.'
##        #return pObjectLabel
##
##    @property
##    def ObjectSubType(self):
##        u'Gets object sub-type name.'
##        #return pObjectSubTypeName
##
##    @property
##    def ParameterCount(self):
##        u'Number of exposed parameters.'
##        #return pCount
##
##    @property
##    def ObjectType(self):
##        u'Gets object type name.'
##        #return pObjectTypeName
##

class WCSServer(CoClass):
    u'The WCS Server Object Extension.'
    _reg_clsid_ = GUID('{4462A653-1E67-47DA-9FA2-F128E17AE24B}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
WCSServer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IWCSServer, comtypes.gen._18F2FC71_6B30_45B9_B101_037A8B868B66_0_10_2.IServerObjectExtension, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IObjectConstruct, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILogSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IWebRequestHandler, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]

class ICenterAndSize(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Center And Size Map Area Interface.'
    _iid_ = GUID('{003C322D-E8C1-43E2-8DA3-3BCD81FDD2F8}')
    _idlflags_ = ['oleautomation']
ICenterAndSize._methods_ = [
    COMMETHOD(['propget', helpstring(u'The center of the map.')], HRESULT, 'Center',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint)), 'Center' )),
    COMMETHOD(['propput', helpstring(u'The center of the map.')], HRESULT, 'Center',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'Center' )),
    COMMETHOD(['propget', helpstring(u'The height of the map expressed in map units.')], HRESULT, 'Height',
              ( ['retval', 'out'], POINTER(c_double), 'Height' )),
    COMMETHOD(['propput', helpstring(u'The height of the map expressed in map units.')], HRESULT, 'Height',
              ( ['in'], c_double, 'Height' )),
    COMMETHOD(['propget', helpstring(u'The width of the map expressed in map units.')], HRESULT, 'Width',
              ( ['retval', 'out'], POINTER(c_double), 'Width' )),
    COMMETHOD(['propput', helpstring(u'The width of the map expressed in map units.')], HRESULT, 'Width',
              ( ['in'], c_double, 'Width' )),
    COMMETHOD(['propget', helpstring(u'The current map units.')], HRESULT, 'Units',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits), 'Units' )),
    COMMETHOD(['propput', helpstring(u'The current map units.')], HRESULT, 'Units',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits, 'Units' )),
]
################################################################
## code template for ICenterAndSize implementation
##class ICenterAndSize_Impl(object):
##    def _get(self):
##        u'The current map units.'
##        #return Units
##    def _set(self, Units):
##        u'The current map units.'
##    Units = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The width of the map expressed in map units.'
##        #return Width
##    def _set(self, Width):
##        u'The width of the map expressed in map units.'
##    Width = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The center of the map.'
##        #return Center
##    def _set(self, Center):
##        u'The center of the map.'
##    Center = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The height of the map expressed in map units.'
##        #return Height
##    def _set(self, Height):
##        u'The height of the map expressed in map units.'
##    Height = property(_get, _set, doc = _set.__doc__)
##

class IKmlConversion(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to stateless methods that convert Maps or Layers into KMZ files or streams.'
    _iid_ = GUID('{DA7F107F-AE0C-4684-90D1-68B3570560E7}')
    _idlflags_ = ['oleautomation']
IKmlConversion._methods_ = [
    COMMETHOD([helpstring(u'Converts a layer to KML and outputs a KMZ file.')], HRESULT, 'LayerToFile',
              ( ['in'], POINTER(ILayer), 'pLayer' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'pQueryFilter' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet), 'pKmlParameters' ),
              ( ['in'], BSTR, 'Filename' )),
    COMMETHOD([helpstring(u'Converts a layer to KML and outputs a KMZ stream.')], HRESULT, 'LayerToArray',
              ( ['in'], POINTER(ILayer), 'pLayer' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'pQueryFilter' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet), 'pKmlParameters' ),
              ( ['retval', 'out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'pData' )),
    COMMETHOD([helpstring(u'Converts Map to KML and outputs a KMZ file.')], HRESULT, 'MapToFile',
              ( ['in'], POINTER(IMap), 'pMap' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'pQueryFilter' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet), 'pKmlParameters' ),
              ( ['in'], POINTER(BSTR), 'pLayerIDs' ),
              ( ['in'], BSTR, 'Filename' )),
    COMMETHOD([helpstring(u'Converts Map to KML and outputs a KMZ stream.')], HRESULT, 'MapToArray',
              ( ['in'], POINTER(IMap), 'pMap' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'pQueryFilter' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet), 'pKmlParameters' ),
              ( ['in'], POINTER(BSTR), 'pLayerIDs' ),
              ( ['retval', 'out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'pData' )),
    COMMETHOD([helpstring(u'Converts MapServer Map in server environment to KML and outputs a KMZ file.')], HRESULT, 'MapServerMapToFile',
              ( ['in'], POINTER(IMapServer), 'pMapServer' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'pQueryFilter' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet), 'pKmlParameters' ),
              ( ['in'], POINTER(BSTR), 'pLayerIDs' ),
              ( ['in'], BSTR, 'Filename' )),
    COMMETHOD([helpstring(u'Converts MapServer Map in server environment to KML and outputs a KMZ stream.')], HRESULT, 'MapServerMapToArray',
              ( ['in'], POINTER(IMapServer), 'pMapServer' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'pQueryFilter' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet), 'pKmlParameters' ),
              ( ['in'], POINTER(BSTR), 'pLayerIDs' ),
              ( ['retval', 'out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'pData' )),
    COMMETHOD([helpstring(u'Get array of numerical layer IDs in hierarchical order from Map.')], HRESULT, 'GetLayerIDListFromMap',
              ( ['in'], POINTER(IMap), 'pMap' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'pLayerIDs' )),
    COMMETHOD([helpstring(u'Get array of numerical layer IDs in hierarchical order from MapServer.')], HRESULT, 'GetLayerIDListFromMapServer',
              ( ['in'], POINTER(IMapServer), 'pMapServer' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'pLayerIDs' )),
]
################################################################
## code template for IKmlConversion implementation
##class IKmlConversion_Impl(object):
##    def GetLayerIDListFromMap(self, pMap):
##        u'Get array of numerical layer IDs in hierarchical order from Map.'
##        #return pLayerIDs
##
##    def GetLayerIDListFromMapServer(self, pMapServer):
##        u'Get array of numerical layer IDs in hierarchical order from MapServer.'
##        #return pLayerIDs
##
##    def MapServerMapToFile(self, pMapServer, pQueryFilter, pKmlParameters, pLayerIDs, Filename):
##        u'Converts MapServer Map in server environment to KML and outputs a KMZ file.'
##        #return 
##
##    def LayerToFile(self, pLayer, pQueryFilter, pKmlParameters, Filename):
##        u'Converts a layer to KML and outputs a KMZ file.'
##        #return 
##
##    def MapServerMapToArray(self, pMapServer, pQueryFilter, pKmlParameters, pLayerIDs):
##        u'Converts MapServer Map in server environment to KML and outputs a KMZ stream.'
##        #return pData
##
##    def MapToArray(self, pMap, pQueryFilter, pKmlParameters, pLayerIDs):
##        u'Converts Map to KML and outputs a KMZ stream.'
##        #return pData
##
##    def MapToFile(self, pMap, pQueryFilter, pKmlParameters, pLayerIDs, Filename):
##        u'Converts Map to KML and outputs a KMZ file.'
##        #return 
##
##    def LayerToArray(self, pLayer, pQueryFilter, pKmlParameters):
##        u'Converts a layer to KML and outputs a KMZ stream.'
##        #return pData
##

class IMxdServerStatus(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the MxdServer current operation status.'
    _iid_ = GUID('{6B0523CD-7947-48E0-8EC7-96F8937BADD5}')
    _idlflags_ = ['oleautomation']
IMxdServerStatus._methods_ = [
    COMMETHOD([helpstring(u'Cancels the current MxdServer operation.')], HRESULT, 'Cancel'),
]
################################################################
## code template for IMxdServerStatus implementation
##class IMxdServerStatus_Impl(object):
##    def Cancel(self):
##        u'Cancels the current MxdServer operation.'
##        #return 
##

class IMapServerIdentifyObject(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the available properties of a map server identify object.'
    _iid_ = GUID('{A25A8796-8463-490C-B007-127D2E494805}')
    _idlflags_ = ['oleautomation']
IMapServerIdentifyObject._methods_ = [
    COMMETHOD(['propput', helpstring(u'The Map Server Identify Result.')], HRESULT, 'MapServerIdentifyResult',
              ( ['in'], POINTER(IMapServerIdentifyResult), 'result' )),
    COMMETHOD(['propget', helpstring(u'The Map Server Identify Result.')], HRESULT, 'MapServerIdentifyResult',
              ( ['retval', 'out'], POINTER(POINTER(IMapServerIdentifyResult)), 'result' )),
]
################################################################
## code template for IMapServerIdentifyObject implementation
##class IMapServerIdentifyObject_Impl(object):
##    def _get(self):
##        u'The Map Server Identify Result.'
##        #return result
##    def _set(self, result):
##        u'The Map Server Identify Result.'
##    MapServerIdentifyResult = property(_get, _set, doc = _set.__doc__)
##

class IUniqueValueRenderer2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a renderer where symbols are assigned to features based on unique attribute values.'
    _iid_ = GUID('{78B2E6FC-A027-4B63-A52D-3AD0BA2F2E81}')
    _idlflags_ = ['oleautomation']
IUniqueValueRenderer2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Color Ramp Object.')], HRESULT, 'ColorRamp',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColorRamp)), 'ppColorRamp' )),
    COMMETHOD(['propputref', helpstring(u'Color Ramp Object.')], HRESULT, 'ColorRamp',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColorRamp), 'ppColorRamp' )),
    COMMETHOD(['propget', helpstring(u'Indicates if unique values are flipped.')], HRESULT, 'ReverseUniqueValuesSorting',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Ascending' )),
    COMMETHOD(['propput', helpstring(u'Indicates if unique values are flipped.')], HRESULT, 'ReverseUniqueValuesSorting',
              ( ['in'], VARIANT_BOOL, 'Ascending' )),
    COMMETHOD(['propget', helpstring(u'Indicates if symbols are flipped.')], HRESULT, 'FlipSymbols',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Ascending' )),
    COMMETHOD(['propput', helpstring(u'Indicates if symbols are flipped.')], HRESULT, 'FlipSymbols',
              ( ['in'], VARIANT_BOOL, 'Ascending' )),
]
################################################################
## code template for IUniqueValueRenderer2 implementation
##class IUniqueValueRenderer2_Impl(object):
##    def _get(self):
##        u'Indicates if unique values are flipped.'
##        #return Ascending
##    def _set(self, Ascending):
##        u'Indicates if unique values are flipped.'
##    ReverseUniqueValuesSorting = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if symbols are flipped.'
##        #return Ascending
##    def _set(self, Ascending):
##        u'Indicates if symbols are flipped.'
##    FlipSymbols = property(_get, _set, doc = _set.__doc__)
##
##    def ColorRamp(self, ppColorRamp):
##        u'Color Ramp Object.'
##        #return 
##

IGraphicFeatures._methods_ = [
    COMMETHOD(['propget', helpstring(u'Graphic Feature count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The Graphic Feature at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IGraphicFeature)), 'Feature' )),
    COMMETHOD([helpstring(u'Removes the Graphic Feature at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all Graphic Features.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Adds a Graphic Feature.')], HRESULT, 'Add',
              ( ['in'], POINTER(IGraphicFeature), 'Feature' )),
    COMMETHOD([helpstring(u'Adds a Graphic Feature at the specified position.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(IGraphicFeature), 'Feature' )),
]
################################################################
## code template for IGraphicFeatures implementation
##class IGraphicFeatures_Impl(object):
##    @property
##    def Count(self):
##        u'Graphic Feature count.'
##        #return Count
##
##    def Insert(self, Index, Feature):
##        u'Adds a Graphic Feature at the specified position.'
##        #return 
##
##    def Remove(self, Index):
##        u'Removes the Graphic Feature at the specified position.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'The Graphic Feature at the specified position.'
##        #return Feature
##
##    def RemoveAll(self):
##        u'Removes all Graphic Features.'
##        #return 
##
##    def Add(self, Feature):
##        u'Adds a Graphic Feature.'
##        #return 
##

class IMSSubLayer(CoClass):
    u'An IMS Layer as a sublayer of an IMSMapLayer.'
    _reg_clsid_ = GUID('{194B1607-2E96-44D1-A93E-B6E43AAD3B07}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
IMSSubLayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IIMSSubLayer, ILayer, IPublishLayer, ILayerGeneralProperties, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, ILayer2, ILayerPosition, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeoDataset, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersionSupportGEN]

IWMTSLayer._methods_ = [
    COMMETHOD([helpstring(u'Connects to a WMTS Connection Name')], HRESULT, 'Connect',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName), 'pConnectionName' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'successful' )),
    COMMETHOD(['propget', helpstring(u'WMTS Connection Name.')], HRESULT, 'DataSourceName',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName)), 'ppConnectionName' )),
    COMMETHOD(['propput', helpstring(u'WMTS Connection Name.')], HRESULT, 'DataSourceName',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName), 'ppConnectionName' )),
    COMMETHOD(['propget', helpstring(u'WMTS Connection.')], HRESULT, 'WMTSConnection',
              ( ['in'], POINTER(POINTER(comtypes.gen._746F6817_89BB_4490_9829_83CA25FD505A_0_10_2.IWMTSConnection)), 'pConnection' )),
    COMMETHOD(['propget', helpstring(u'Layer name in a WMTS Service.')], HRESULT, 'LayerName',
              ( ['retval', 'out'], POINTER(BSTR), 'LayerName' )),
    COMMETHOD(['propput', helpstring(u'Values for the avialble dimensions in WMTS Layer.')], HRESULT, 'Dimensions',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet), 'Dimensions' )),
    COMMETHOD(['propget', helpstring(u'Values for the avialble dimensions in WMTS Layer.')], HRESULT, 'Dimensions',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet)), 'Dimensions' )),
    COMMETHOD(['propput', helpstring(u'TileMatrixSet to be used by the service.')], HRESULT, 'TileMatrixSet',
              ( ['in'], BSTR, 'tileMatrix' )),
    COMMETHOD(['propget', helpstring(u'TileMatrixSet to be used by the service.')], HRESULT, 'TileMatrixSet',
              ( ['retval', 'out'], POINTER(BSTR), 'tileMatrix' )),
    COMMETHOD(['propget', helpstring(u'Image format.')], HRESULT, 'ImageFormat',
              ( ['retval', 'out'], POINTER(BSTR), 'ImageFormat' )),
    COMMETHOD(['propput', helpstring(u'Image format.')], HRESULT, 'ImageFormat',
              ( ['in'], BSTR, 'ImageFormat' )),
    COMMETHOD(['propput', helpstring(u'Style from WMTS Layer.')], HRESULT, 'Style',
              ( ['in'], BSTR, 'styleName' )),
    COMMETHOD(['propget', helpstring(u'Style from WMTS Layer.')], HRESULT, 'Style',
              ( ['retval', 'out'], POINTER(BSTR), 'styleName' )),
]
################################################################
## code template for IWMTSLayer implementation
##class IWMTSLayer_Impl(object):
##    def _get(self):
##        u'Style from WMTS Layer.'
##        #return styleName
##    def _set(self, styleName):
##        u'Style from WMTS Layer.'
##    Style = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'WMTS Connection Name.'
##        #return ppConnectionName
##    def _set(self, ppConnectionName):
##        u'WMTS Connection Name.'
##    DataSourceName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Values for the avialble dimensions in WMTS Layer.'
##        #return Dimensions
##    def _set(self, Dimensions):
##        u'Values for the avialble dimensions in WMTS Layer.'
##    Dimensions = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def WMTSConnection(self, pConnection):
##        u'WMTS Connection.'
##        #return 
##
##    def _get(self):
##        u'TileMatrixSet to be used by the service.'
##        #return tileMatrix
##    def _set(self, tileMatrix):
##        u'TileMatrixSet to be used by the service.'
##    TileMatrixSet = property(_get, _set, doc = _set.__doc__)
##
##    def Connect(self, pConnectionName):
##        u'Connects to a WMTS Connection Name'
##        #return successful
##
##    @property
##    def LayerName(self):
##        u'Layer name in a WMTS Service.'
##        #return LayerName
##
##    def _get(self):
##        u'Image format.'
##        #return ImageFormat
##    def _set(self, ImageFormat):
##        u'Image format.'
##    ImageFormat = property(_get, _set, doc = _set.__doc__)
##

class WMSMapLayer(CoClass):
    u'A container for the display and manipulation of WMS layers.'
    _reg_clsid_ = GUID('{E38A56C0-D5BD-4899-B089-C8ED4E38B77F}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IWMSMapLayer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the WMS map layer.'
    _iid_ = GUID('{8C19B114-1168-41A3-9E14-FC30CA5A4E9D}')
    _idlflags_ = ['oleautomation']
class IWMSMapLayer2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the WMS map layer.'
    _iid_ = GUID('{B03878F5-8792-4DBD-9264-C95646139BF0}')
    _idlflags_ = ['oleautomation']
WMSMapLayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IWMSMapLayer, IWMSMapLayer2, IWMSGroupLayer, ILayer, ICompositeLayer, ICompositeLayer2, IIdentify, IIdentify2, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeoDataset, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayAdmin, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayAdmin2, ILayerPosition, IDataLayer, IDataLayer2, ILayerDrawingProperties, ILayerEffects, ILayerInfo, ILayerStatus, IPublishLayer, ILayerGeneralProperties, IIdentifyGroup, ILayerExtensions, ILayerSymbologyExtents, ISecureLayer, ISecureLayer2, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IConnectionPointContainer, IServiceLayerImageFormat, ITimeData, ITimeData2, ITimeDataDisplay]
WMSMapLayer._outgoing_interfaces_ = [ILayerEvents]

class IRendererFields(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that work with the list of fields for renderers that use multiple value fields.'
    _iid_ = GUID('{9C7776B8-0421-11D4-9F7C-00C04F6BC709}')
    _idlflags_ = ['oleautomation']
IRendererFields._methods_ = [
    COMMETHOD(['propget', helpstring(u'Number of fields.')], HRESULT, 'FieldCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'Field at the specified index.')], HRESULT, 'Field',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'Field at the specified index.')], HRESULT, 'Field',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'Field alias at the specified index.')], HRESULT, 'FieldAlias',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'Field alias at the specified index.')], HRESULT, 'FieldAlias',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD([helpstring(u'Adds a field to the renderer.')], HRESULT, 'AddField',
              ( ['in'], BSTR, 'Name' ),
              ( ['in', 'optional'], BSTR, 'Alias' )),
    COMMETHOD([helpstring(u'Removes the specified field from the renderer.')], HRESULT, 'DeleteField',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD([helpstring(u'Removes all fields from the renderer.')], HRESULT, 'ClearFields'),
]
################################################################
## code template for IRendererFields implementation
##class IRendererFields_Impl(object):
##    def _get(self, Index):
##        u'Field alias at the specified index.'
##        #return Name
##    def _set(self, Index, Name):
##        u'Field alias at the specified index.'
##    FieldAlias = property(_get, _set, doc = _set.__doc__)
##
##    def ClearFields(self):
##        u'Removes all fields from the renderer.'
##        #return 
##
##    @property
##    def FieldCount(self):
##        u'Number of fields.'
##        #return Count
##
##    def DeleteField(self, Name):
##        u'Removes the specified field from the renderer.'
##        #return 
##
##    def AddField(self, Name, Alias):
##        u'Adds a field to the renderer.'
##        #return 
##
##    def _get(self, Index):
##        u'Field at the specified index.'
##        #return Name
##    def _set(self, Index, Name):
##        u'Field at the specified index.'
##    Field = property(_get, _set, doc = _set.__doc__)
##

class FeatureIndex(CoClass):
    u'A feature class index.'
    _reg_clsid_ = GUID('{59F60296-C1FB-11D2-9F23-00C04F6BC886}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IFeatureIndex(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the creation of an index on a feature class.'
    _iid_ = GUID('{59F60294-C1FB-11D2-9F23-00C04F6BC886}')
    _idlflags_ = ['oleautomation']
class IFeatureIndex2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the creation of an index on a feature class.'
    _iid_ = GUID('{BC2E4428-1311-42FB-B364-0AA46F03A1AC}')
    _idlflags_ = ['oleautomation']
class IIndexQuery2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the index created with IFeatureIndex.'
    _iid_ = GUID('{3DF5374B-2CEE-11D4-A6A5-0008C7D3AE8D}')
    _idlflags_ = ['oleautomation']
FeatureIndex._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IFeatureIndex, IFeatureIndex2, IIndexQuery, IIndexQuery2]

IFeatureServerInfo._methods_ = [
    COMMETHOD(['propget'], HRESULT, 'AllowGeometryUpdates',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'allows' )),
    COMMETHOD(['propget'], HRESULT, 'AllowTrueCurvesUpdates',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'allows' )),
    COMMETHOD(['propget'], HRESULT, 'CopyrightText',
              ( ['retval', 'out'], POINTER(BSTR), 'CopyrightText' )),
    COMMETHOD(['propget'], HRESULT, 'CurrentVersion',
              ( ['retval', 'out'], POINTER(c_double), 'CurrentVersion' )),
    COMMETHOD(['propget'], HRESULT, 'Description',
              ( ['retval', 'out'], POINTER(BSTR), 'Description' )),
    COMMETHOD(['propget'], HRESULT, 'DocumentInfo',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet)), 'DocumentInfo' )),
    COMMETHOD(['propget'], HRESULT, 'EnableZDefaults',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'EnableZDefaults' )),
    COMMETHOD(['propget'], HRESULT, 'FullExtent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'FullExtent' )),
    COMMETHOD(['propget'], HRESULT, 'HasVersionedData',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'HasVersionedData' )),
    COMMETHOD(['propget'], HRESULT, 'InitialExtent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'InitialExtent' )),
    COMMETHOD(['propget'], HRESULT, 'LayerIdentities',
              ( ['retval', 'out'], POINTER(POINTER(ITableIdentities)), 'LayerIdentities' )),
    COMMETHOD(['propget'], HRESULT, 'MaxRecordCount',
              ( ['retval', 'out'], POINTER(c_int), 'MaxRecordCount' )),
    COMMETHOD(['propget'], HRESULT, 'SpatialReference',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference)), 'SpatialReference' )),
    COMMETHOD(['propget'], HRESULT, 'ServiceDescription',
              ( ['retval', 'out'], POINTER(BSTR), 'ServiceDescription' )),
    COMMETHOD(['propget'], HRESULT, 'SupportsDisconnectedEditing',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'SupportsDisconnectedEditing' )),
    COMMETHOD(['propget'], HRESULT, 'TableIdentities',
              ( ['retval', 'out'], POINTER(POINTER(ITableIdentities)), 'TableIdentities' )),
    COMMETHOD(['propget'], HRESULT, 'Units',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits), 'Units' )),
    COMMETHOD(['propget'], HRESULT, 'ZDefault',
              ( ['retval', 'out'], POINTER(c_double), 'ZDefault' )),
]
################################################################
## code template for IFeatureServerInfo implementation
##class IFeatureServerInfo_Impl(object):
##    @property
##    def MaxRecordCount(self):
##        '-no docstring-'
##        #return MaxRecordCount
##
##    @property
##    def AllowGeometryUpdates(self):
##        '-no docstring-'
##        #return allows
##
##    @property
##    def SupportsDisconnectedEditing(self):
##        '-no docstring-'
##        #return SupportsDisconnectedEditing
##
##    @property
##    def Description(self):
##        '-no docstring-'
##        #return Description
##
##    @property
##    def LayerIdentities(self):
##        '-no docstring-'
##        #return LayerIdentities
##
##    @property
##    def InitialExtent(self):
##        '-no docstring-'
##        #return InitialExtent
##
##    @property
##    def HasVersionedData(self):
##        '-no docstring-'
##        #return HasVersionedData
##
##    @property
##    def AllowTrueCurvesUpdates(self):
##        '-no docstring-'
##        #return allows
##
##    @property
##    def CopyrightText(self):
##        '-no docstring-'
##        #return CopyrightText
##
##    @property
##    def ZDefault(self):
##        '-no docstring-'
##        #return ZDefault
##
##    @property
##    def CurrentVersion(self):
##        '-no docstring-'
##        #return CurrentVersion
##
##    @property
##    def EnableZDefaults(self):
##        '-no docstring-'
##        #return EnableZDefaults
##
##    @property
##    def DocumentInfo(self):
##        '-no docstring-'
##        #return DocumentInfo
##
##    @property
##    def Units(self):
##        '-no docstring-'
##        #return Units
##
##    @property
##    def FullExtent(self):
##        '-no docstring-'
##        #return FullExtent
##
##    @property
##    def SpatialReference(self):
##        '-no docstring-'
##        #return SpatialReference
##
##    @property
##    def TableIdentities(self):
##        '-no docstring-'
##        #return TableIdentities
##
##    @property
##    def ServiceDescription(self):
##        '-no docstring-'
##        #return ServiceDescription
##

class MxdServer(CoClass):
    u'The MxdServer component provides programmatic access to the contents of a map document on disk, and creates images of the map contents based on user requests. Designed for use in building map-based web services and web applications.'
    _reg_clsid_ = GUID('{FB760062-82C9-49DD-AD1C-100AF33625ED}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IMxdServer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    u'Provides access to members that support opening a map document and generating images of it.'
    _iid_ = GUID('{BD2E03FC-A244-46AF-93ED-B522A090DE89}')
    _idlflags_ = ['dual', 'oleautomation']
MxdServer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMxdServer, IMxdServerQuery, IMxdServerObjects, IMxdServerStatus]

class MapDescriptor(CoClass):
    u'The Map Descriptor coclass contains a description of a map in the current document.'
    _reg_clsid_ = GUID('{6156692F-8A40-424F-A9D6-6B3661DDF782}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IMapDescriptor(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    u'Provides access to the available properties of a map descriptor object.'
    _iid_ = GUID('{D9609D73-AFEA-4739-8F29-F5993823F4CF}')
    _idlflags_ = ['dual', 'oleautomation']
MapDescriptor._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMapDescriptor]

class IImageServerDownloadResults(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Image Server Download Results Interface.'
    _iid_ = GUID('{77E544BF-8581-426F-9896-DADB15B0E13B}')
    _idlflags_ = ['oleautomation']
class IImageServerDownloadResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Image Server Download Result Interface.'
    _iid_ = GUID('{E01CC9C6-5F06-45B2-9973-2A21C0E255DA}')
    _idlflags_ = ['oleautomation']
IImageServer3._methods_ = [
    COMMETHOD(['propget', helpstring(u'The fields of the image catalog.')], HRESULT, 'Fields',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFields)), 'ppFields' )),
    COMMETHOD([helpstring(u'Gets the catalog item count for a given query filter.')], HRESULT, 'GetCatalogItemCount',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'pFilter' ),
              ( ['retval', 'out'], POINTER(c_int), 'pNumItems' )),
    COMMETHOD([helpstring(u'Gets the catalog item IDs for a given query filter.')], HRESULT, 'GetCatalogItemIDs',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'pFilter' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFIDSet)), 'FIDs' )),
    COMMETHOD([helpstring(u'Gets the catalog items for a given query filter.')], HRESULT, 'GetCatalogItems',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'pFilter' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRecordSet)), 'ppItems' )),
    COMMETHOD([helpstring(u'Clips images to a given geometry, and returns a list of downloadable files for a given set of catalog item IDs.')], HRESULT, 'Download',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFIDSet), 'pFIDs' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'pGeometry' ),
              ( ['in'], BSTR, 'Format' ),
              ( ['retval', 'out'], POINTER(POINTER(IImageServerDownloadResults)), 'ppFiles' )),
    COMMETHOD([helpstring(u'Get the URL to a given download result.')], HRESULT, 'GetFile',
              ( ['in'], POINTER(IImageServerDownloadResult), 'pFile' ),
              ( ['retval', 'out'], POINTER(BSTR), 'pURL' )),
    COMMETHOD([helpstring(u'Identifies the pixel value and catalog items at the given location.')], HRESULT, 'Identify',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'pLocation' ),
              ( ['in'], POINTER(IMosaicRule), 'pMosaicRule' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'pCellsize' ),
              ( ['retval', 'out'], POINTER(POINTER(IImageServerIdentifyResult)), 'ppIdentifyResult' )),
    COMMETHOD(['propget', helpstring(u'The image service metadata.')], HRESULT, 'Metadata',
              ( ['retval', 'out'], POINTER(BSTR), 'pXml' )),
    COMMETHOD([helpstring(u'Gets the image information of a given raster catalog item.')], HRESULT, 'GetRasterInfo',
              ( ['in'], c_int, 'RID' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._8F0541A3_D5BE_4B3F_A8D9_062D5579E19B_0_10_2.IRasterInfo)), 'ppRasterInfo' )),
    COMMETHOD([helpstring(u'Gets a pixel block at a given block location.')], HRESULT, 'GetPixelBlock',
              ( ['in'], c_int, 'RID' ),
              ( ['in'], c_int, 'tx' ),
              ( ['in'], c_int, 'ty' ),
              ( ['in'], c_int, 'Level' ),
              ( ['retval', 'out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'pData' )),
    COMMETHOD([helpstring(u'Gets the metadata of a given raster catalog item.')], HRESULT, 'GetRasterMetadata',
              ( ['in'], c_int, 'RID' ),
              ( ['retval', 'out'], POINTER(BSTR), 'pXml' )),
    COMMETHOD([helpstring(u'Gets the thumbnail image of a given raster catalog item.')], HRESULT, 'GetThumbnail',
              ( ['in'], c_int, 'RID' ),
              ( ['retval', 'out'], POINTER(POINTER(IImageResult)), 'ppThumbnail' )),
    COMMETHOD([helpstring(u'Generates the image service information as if a given rendering rule is applied.')], HRESULT, 'GenerateServiceInfo',
              ( ['in'], POINTER(IRenderingRule), 'pRenderingRule' ),
              ( ['retval', 'out'], POINTER(POINTER(IImageServiceInfo)), 'ppServiceInfo' )),
    COMMETHOD([helpstring(u'Gets raster information of all raw source rasters for a given raster catalog item.')], HRESULT, 'GetNativeRasterInfo',
              ( ['in'], c_int, 'RID' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._8F0541A3_D5BE_4B3F_A8D9_062D5579E19B_0_10_2.IRasterInfos)), 'ppRasterInfos' )),
    COMMETHOD([helpstring(u'Gets a pixel block at a given block location for a specified raw source raster.')], HRESULT, 'GetNativePixelBlock',
              ( ['in'], c_int, 'RID' ),
              ( ['in'], c_int, 'IID' ),
              ( ['in'], c_int, 'tx' ),
              ( ['in'], c_int, 'ty' ),
              ( ['in'], c_int, 'Level' ),
              ( ['retval', 'out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'pData' )),
]
################################################################
## code template for IImageServer3 implementation
##class IImageServer3_Impl(object):
##    def GetThumbnail(self, RID):
##        u'Gets the thumbnail image of a given raster catalog item.'
##        #return ppThumbnail
##
##    @property
##    def Fields(self):
##        u'The fields of the image catalog.'
##        #return ppFields
##
##    def GetPixelBlock(self, RID, tx, ty, Level):
##        u'Gets a pixel block at a given block location.'
##        #return pData
##
##    def GetCatalogItemIDs(self, pFilter):
##        u'Gets the catalog item IDs for a given query filter.'
##        #return FIDs
##
##    def GetRasterMetadata(self, RID):
##        u'Gets the metadata of a given raster catalog item.'
##        #return pXml
##
##    def GetRasterInfo(self, RID):
##        u'Gets the image information of a given raster catalog item.'
##        #return ppRasterInfo
##
##    def GetNativePixelBlock(self, RID, IID, tx, ty, Level):
##        u'Gets a pixel block at a given block location for a specified raw source raster.'
##        #return pData
##
##    def Download(self, pFIDs, pGeometry, Format):
##        u'Clips images to a given geometry, and returns a list of downloadable files for a given set of catalog item IDs.'
##        #return ppFiles
##
##    def Identify(self, pLocation, pMosaicRule, pCellsize):
##        u'Identifies the pixel value and catalog items at the given location.'
##        #return ppIdentifyResult
##
##    def GetNativeRasterInfo(self, RID):
##        u'Gets raster information of all raw source rasters for a given raster catalog item.'
##        #return ppRasterInfos
##
##    def GetCatalogItems(self, pFilter):
##        u'Gets the catalog items for a given query filter.'
##        #return ppItems
##
##    def GetFile(self, pFile):
##        u'Get the URL to a given download result.'
##        #return pURL
##
##    def GetCatalogItemCount(self, pFilter):
##        u'Gets the catalog item count for a given query filter.'
##        #return pNumItems
##
##    def GenerateServiceInfo(self, pRenderingRule):
##        u'Generates the image service information as if a given rendering rule is applied.'
##        #return ppServiceInfo
##
##    @property
##    def Metadata(self):
##        u'The image service metadata.'
##        #return pXml
##

class IUniqueValueRenderer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a renderer where symbols are assigned to features based on unique attribute values.'
    _iid_ = GUID('{C3346D2A-B2BC-11D1-8817-080009EC732A}')
    _idlflags_ = ['oleautomation']
IUniqueValueRenderer._methods_ = [
    COMMETHOD(['propget', helpstring(u'Field at the specified index that is used to categorize features.')], HRESULT, 'Field',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Field' )),
    COMMETHOD(['propput', helpstring(u'Field at the specified index that is used to categorize features.')], HRESULT, 'Field',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Field' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the field at the specified index is a string.')], HRESULT, 'FieldType',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], VARIANT_BOOL, 'rhs' )),
    COMMETHOD(['propget', helpstring(u'Delimiter used to separate field values.')], HRESULT, 'FieldDelimiter',
              ( ['retval', 'out'], POINTER(BSTR), 'delimiter' )),
    COMMETHOD(['propput', helpstring(u'Delimiter used to separate field values.')], HRESULT, 'FieldDelimiter',
              ( ['in'], BSTR, 'delimiter' )),
    COMMETHOD(['propget', helpstring(u'Number of fields used by the renderer (0-3).')], HRESULT, 'FieldCount',
              ( ['retval', 'out'], POINTER(c_int), 'FieldCount' )),
    COMMETHOD(['propput', helpstring(u'Number of fields used by the renderer (0-3).')], HRESULT, 'FieldCount',
              ( ['in'], c_int, 'FieldCount' )),
    COMMETHOD(['propget', helpstring(u'Symbol used to draw any unspecified values (may be NULL).')], HRESULT, 'DefaultSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol)), 'Symbol' )),
    COMMETHOD(['propput', helpstring(u'Symbol used to draw any unspecified values (may be NULL).')], HRESULT, 'DefaultSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'Label used for unspecified values.')], HRESULT, 'DefaultLabel',
              ( ['retval', 'out'], POINTER(BSTR), 'Label' )),
    COMMETHOD(['propput', helpstring(u'Label used for unspecified values.')], HRESULT, 'DefaultLabel',
              ( ['in'], BSTR, 'Label' )),
    COMMETHOD(['propget', helpstring(u'Indicates if DefaultSymbol is used for drawing unspecified values.')], HRESULT, 'UseDefaultSymbol',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if DefaultSymbol is used for drawing unspecified values.')], HRESULT, 'UseDefaultSymbol',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Number of unique values used to categorize the data.')], HRESULT, 'ValueCount',
              ( ['retval', 'out'], POINTER(c_int), 'ValueCount' )),
    COMMETHOD(['propget', helpstring(u'Value at the specified index.')], HRESULT, 'Value',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Value' )),
    COMMETHOD(['propput', helpstring(u'Value at the specified index.')], HRESULT, 'Value',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Value' )),
    COMMETHOD(['propget', helpstring(u'Reference value for the specified value.')], HRESULT, 'ReferenceValue',
              ( ['in'], BSTR, 'Value' ),
              ( ['retval', 'out'], POINTER(BSTR), 'refValue' )),
    COMMETHOD([helpstring(u'Adds a value to the renderer to be grouped with refValue, which has already been added to the renderer.')], HRESULT, 'AddReferenceValue',
              ( ['in'], BSTR, 'Value' ),
              ( ['in'], BSTR, 'refValue' )),
    COMMETHOD(['propget', helpstring(u'Symbol associated with the specified value.')], HRESULT, 'Symbol',
              ( ['in'], BSTR, 'Value' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol)), 'Symbol' )),
    COMMETHOD(['propput', helpstring(u'Symbol associated with the specified value.')], HRESULT, 'Symbol',
              ( ['in'], BSTR, 'Value' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'Label for the specified value.')], HRESULT, 'Label',
              ( ['in'], BSTR, 'Value' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Label' )),
    COMMETHOD(['propput', helpstring(u'Label for the specified value.')], HRESULT, 'Label',
              ( ['in'], BSTR, 'Value' ),
              ( ['in'], BSTR, 'Label' )),
    COMMETHOD(['propget', helpstring(u'Desription for the specified label.')], HRESULT, 'Description',
              ( ['in'], BSTR, 'Value' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Text' )),
    COMMETHOD(['propput', helpstring(u'Desription for the specified label.')], HRESULT, 'Description',
              ( ['in'], BSTR, 'Value' ),
              ( ['in'], BSTR, 'Text' )),
    COMMETHOD(['propget', helpstring(u'Heading that contains the specified value.')], HRESULT, 'Heading',
              ( ['in'], BSTR, 'Value' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Heading' )),
    COMMETHOD(['propput', helpstring(u'Heading that contains the specified value.')], HRESULT, 'Heading',
              ( ['in'], BSTR, 'Value' ),
              ( ['in'], BSTR, 'Heading' )),
    COMMETHOD([helpstring(u'Adds a value and corresponding symbol to the list.  For multivariate cases, the specified value is a delimitted list of individual values.')], HRESULT, 'AddValue',
              ( ['in'], BSTR, 'Value' ),
              ( [], BSTR, 'Heading' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol), 'Symbol' )),
    COMMETHOD([helpstring(u'Removes a value from the renderer.')], HRESULT, 'RemoveValue',
              ( ['in'], BSTR, 'Value' )),
    COMMETHOD([helpstring(u'Removes all values from the renderer.')], HRESULT, 'RemoveAllValues'),
    COMMETHOD(['propget', helpstring(u'Color scheme (user interface property only).')], HRESULT, 'ColorScheme',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'Color scheme (user interface property only).')], HRESULT, 'ColorScheme',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'Style used for matching (user interface property only).')], HRESULT, 'LookupStyleset',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'Style used for matching (user interface property only).')], HRESULT, 'LookupStyleset',
              ( ['in'], BSTR, 'Name' )),
]
################################################################
## code template for IUniqueValueRenderer implementation
##class IUniqueValueRenderer_Impl(object):
##    def AddReferenceValue(self, Value, refValue):
##        u'Adds a value to the renderer to be grouped with refValue, which has already been added to the renderer.'
##        #return 
##
##    def _get(self, Value):
##        u'Desription for the specified label.'
##        #return Text
##    def _set(self, Value, Text):
##        u'Desription for the specified label.'
##    Description = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Style used for matching (user interface property only).'
##        #return Name
##    def _set(self, Name):
##        u'Style used for matching (user interface property only).'
##    LookupStyleset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Color scheme (user interface property only).'
##        #return Name
##    def _set(self, Name):
##        u'Color scheme (user interface property only).'
##    ColorScheme = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def ReferenceValue(self, Value):
##        u'Reference value for the specified value.'
##        #return refValue
##
##    def _get(self):
##        u'Delimiter used to separate field values.'
##        #return delimiter
##    def _set(self, delimiter):
##        u'Delimiter used to separate field values.'
##    FieldDelimiter = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, Value):
##        u'Symbol associated with the specified value.'
##        #return Symbol
##    def _set(self, Value, Symbol):
##        u'Symbol associated with the specified value.'
##    Symbol = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Number of fields used by the renderer (0-3).'
##        #return FieldCount
##    def _set(self, FieldCount):
##        u'Number of fields used by the renderer (0-3).'
##    FieldCount = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, Index):
##        u'Value at the specified index.'
##        #return Value
##    def _set(self, Index, Value):
##        u'Value at the specified index.'
##    Value = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Symbol used to draw any unspecified values (may be NULL).'
##        #return Symbol
##    def _set(self, Symbol):
##        u'Symbol used to draw any unspecified values (may be NULL).'
##    DefaultSymbol = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, Value):
##        u'Label for the specified value.'
##        #return Label
##    def _set(self, Value, Label):
##        u'Label for the specified value.'
##    Label = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if DefaultSymbol is used for drawing unspecified values.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if DefaultSymbol is used for drawing unspecified values.'
##    UseDefaultSymbol = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, Index):
##        u'Field at the specified index that is used to categorize features.'
##        #return Field
##    def _set(self, Index, Field):
##        u'Field at the specified index that is used to categorize features.'
##    Field = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def ValueCount(self):
##        u'Number of unique values used to categorize the data.'
##        #return ValueCount
##
##    def RemoveAllValues(self):
##        u'Removes all values from the renderer.'
##        #return 
##
##    def _set(self, Index, rhs):
##        u'Indicates if the field at the specified index is a string.'
##    FieldType = property(fset = _set, doc = _set.__doc__)
##
##    def RemoveValue(self, Value):
##        u'Removes a value from the renderer.'
##        #return 
##
##    def AddValue(self, Value, Heading, Symbol):
##        u'Adds a value and corresponding symbol to the list.  For multivariate cases, the specified value is a delimitted list of individual values.'
##        #return 
##
##    def _get(self):
##        u'Label used for unspecified values.'
##        #return Label
##    def _set(self, Label):
##        u'Label used for unspecified values.'
##    DefaultLabel = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, Value):
##        u'Heading that contains the specified value.'
##        #return Heading
##    def _set(self, Value, Heading):
##        u'Heading that contains the specified value.'
##    Heading = property(_get, _set, doc = _set.__doc__)
##

IFindObj._methods_ = [
    COMMETHOD(['propput', helpstring(u'String value.')], HRESULT, 'Value',
              ( ['in'], BSTR, 'Value' )),
    COMMETHOD(['propget', helpstring(u'String value.')], HRESULT, 'Value',
              ( ['retval', 'out'], POINTER(BSTR), 'Value' )),
    COMMETHOD(['propput', helpstring(u'The field name.')], HRESULT, 'FieldName',
              ( ['in'], BSTR, 'FieldName' )),
    COMMETHOD(['propget', helpstring(u'The field name.')], HRESULT, 'FieldName',
              ( ['retval', 'out'], POINTER(BSTR), 'FieldName' )),
    COMMETHOD(['propput', helpstring(u'The layer name.')], HRESULT, 'LayerName',
              ( ['in'], BSTR, 'LayerName' )),
    COMMETHOD(['propget', helpstring(u'The layer name.')], HRESULT, 'LayerName',
              ( ['retval', 'out'], POINTER(BSTR), 'LayerName' )),
]
################################################################
## code template for IFindObj implementation
##class IFindObj_Impl(object):
##    def _get(self):
##        u'The layer name.'
##        #return LayerName
##    def _set(self, LayerName):
##        u'The layer name.'
##    LayerName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The field name.'
##        #return FieldName
##    def _set(self, FieldName):
##        u'The field name.'
##    FieldName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'String value.'
##        #return Value
##    def _set(self, Value):
##        u'String value.'
##    Value = property(_get, _set, doc = _set.__doc__)
##

class QueryByLayer(CoClass):
    u'Query By Layer Class.'
    _reg_clsid_ = GUID('{6056E03B-2373-40AE-9410-CDEEDB4B76D4}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
QueryByLayer._com_interfaces_ = [IQueryByLayer]

class IChartRenderer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the drawing of chart symbols (pie, bar, stacked bar) on a map to represent features.'
    _iid_ = GUID('{22A98367-C48D-11D3-9F7A-00C04F6BC709}')
    _idlflags_ = ['oleautomation']
IChartRenderer._methods_ = [
    COMMETHOD(['propget', helpstring(u'Field total for the field at the specified index.')], HRESULT, 'FieldTotal',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(c_double), 'total' )),
    COMMETHOD(['propput', helpstring(u'Field total for the field at the specified index.')], HRESULT, 'FieldTotal',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_double, 'total' )),
    COMMETHOD(['propget', helpstring(u'Chart symbol object.')], HRESULT, 'ChartSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IChartSymbol)), 'Symbol' )),
    COMMETHOD(['propputref', helpstring(u'Chart symbol object.')], HRESULT, 'ChartSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IChartSymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'Background fill symbol, (used when chart symbols are drawn for polygon features).')], HRESULT, 'BaseSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol)), 'Symbol' )),
    COMMETHOD(['propputref', helpstring(u'Background fill symbol, (used when chart symbols are drawn for polygon features).')], HRESULT, 'BaseSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'Color scheme (user interface property only).')], HRESULT, 'ColorScheme',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'Color scheme (user interface property only).')], HRESULT, 'ColorScheme',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'Chart label.')], HRESULT, 'Label',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'Chart label.')], HRESULT, 'Label',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the overposter is used for positioning the chart symbols.')], HRESULT, 'UseOverposter',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the overposter is used for positioning the chart symbols.')], HRESULT, 'UseOverposter',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD([helpstring(u'Creates the legend.  Call after all properties are set.')], HRESULT, 'CreateLegend'),
]
################################################################
## code template for IChartRenderer implementation
##class IChartRenderer_Impl(object):
##    def BaseSymbol(self, Symbol):
##        u'Background fill symbol, (used when chart symbols are drawn for polygon features).'
##        #return 
##
##    def _get(self):
##        u'Color scheme (user interface property only).'
##        #return Name
##    def _set(self, Name):
##        u'Color scheme (user interface property only).'
##    ColorScheme = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the overposter is used for positioning the chart symbols.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if the overposter is used for positioning the chart symbols.'
##    UseOverposter = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Chart label.'
##        #return Name
##    def _set(self, Name):
##        u'Chart label.'
##    Label = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, Index):
##        u'Field total for the field at the specified index.'
##        #return total
##    def _set(self, Index, total):
##        u'Field total for the field at the specified index.'
##    FieldTotal = property(_get, _set, doc = _set.__doc__)
##
##    def CreateLegend(self):
##        u'Creates the legend.  Call after all properties are set.'
##        #return 
##
##    def ChartSymbol(self, Symbol):
##        u'Chart symbol object.'
##        #return 
##

class ITableFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the creation of tables through a factory.'
    _iid_ = GUID('{7E8F8CBF-0DD6-47E1-BBB8-B049A6EC0267}')
    _idlflags_ = ['oleautomation']
ITableFactory._methods_ = [
    COMMETHOD(['propget', helpstring(u'Public name of the factory.')], HRESULT, 'PublicName',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propget', helpstring(u'Category name.')], HRESULT, 'TableCategory',
              ( ['retval', 'out'], POINTER(BSTR), 'Category' )),
    COMMETHOD([helpstring(u'Loads a set of layers.')], HRESULT, 'LoadTables',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IEnumTable)), 'tables' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the factory can create a table based upon the specified object.')], HRESULT, 'CanCreate',
              ( ['in'], POINTER(IUnknown), 'inputObject' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'ok' )),
    COMMETHOD([helpstring(u'Creates table(s) based on the specified object.')], HRESULT, 'Create',
              ( ['in'], POINTER(IUnknown), 'inputObject' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IEnumTable)), 'tables' )),
]
################################################################
## code template for ITableFactory implementation
##class ITableFactory_Impl(object):
##    @property
##    def TableCategory(self):
##        u'Category name.'
##        #return Category
##
##    def Create(self, inputObject):
##        u'Creates table(s) based on the specified object.'
##        #return tables
##
##    @property
##    def CanCreate(self, inputObject):
##        u'Indicates if the factory can create a table based upon the specified object.'
##        #return ok
##
##    @property
##    def PublicName(self):
##        u'Public name of the factory.'
##        #return Name
##
##    def LoadTables(self):
##        u'Loads a set of layers.'
##        #return tables
##

IMixedFontGridLabel2._methods_ = [
    COMMETHOD(['propget', helpstring(u'The number of digits that are displayed in the secondary font and color.')], HRESULT, 'NumGroupedDigits',
              ( ['retval', 'out'], POINTER(c_short), 'numGrouped' )),
    COMMETHOD(['propput', helpstring(u'The number of digits that are displayed in the secondary font and color.')], HRESULT, 'NumGroupedDigits',
              ( ['in'], c_short, 'numGrouped' )),
    COMMETHOD(['propget', helpstring(u'The font used for the second group of digits.')], HRESULT, 'SecondaryFont',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IFontDisp)), 'Font' )),
    COMMETHOD(['propput', helpstring(u'The font used for the second group of digits.')], HRESULT, 'SecondaryFont',
              ( ['in'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IFontDisp), 'Font' )),
    COMMETHOD(['propget', helpstring(u'The color of the second group of digits.')], HRESULT, 'SecondaryColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'The color of the second group of digits.')], HRESULT, 'SecondaryColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'The font used for the second group of digits.')], HRESULT, 'SecondaryFontSize',
              ( ['retval', 'out'], POINTER(c_double), 'Size' )),
    COMMETHOD(['propput', helpstring(u'The font used for the second group of digits.')], HRESULT, 'SecondaryFontSize',
              ( ['in'], c_double, 'Size' )),
]
################################################################
## code template for IMixedFontGridLabel2 implementation
##class IMixedFontGridLabel2_Impl(object):
##    def _get(self):
##        u'The font used for the second group of digits.'
##        #return Font
##    def _set(self, Font):
##        u'The font used for the second group of digits.'
##    SecondaryFont = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The font used for the second group of digits.'
##        #return Size
##    def _set(self, Size):
##        u'The font used for the second group of digits.'
##    SecondaryFontSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The number of digits that are displayed in the secondary font and color.'
##        #return numGrouped
##    def _set(self, numGrouped):
##        u'The number of digits that are displayed in the secondary font and color.'
##    NumGroupedDigits = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The color of the second group of digits.'
##        #return Color
##    def _set(self, Color):
##        u'The color of the second group of digits.'
##    SecondaryColor = property(_get, _set, doc = _set.__doc__)
##

class IPropertyInfos(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Property infos for a graphic feature.'
    _iid_ = GUID('{B0537517-E960-4566-BDEE-C6D1C472C325}')
    _idlflags_ = ['oleautomation']
IDataObjectTable._methods_ = [
    COMMETHOD(['propget', helpstring(u'Copyright information associated with the table or layer.')], HRESULT, 'CopyrightText',
              ( ['retval', 'out'], POINTER(BSTR), 'copyright' )),
    COMMETHOD(['propget', helpstring(u'The description of the table or layer. This property is set in the General tab of the Table/ Layer Properties dialog.')], HRESULT, 'Description',
              ( ['retval', 'out'], POINTER(BSTR), 'desc' )),
    COMMETHOD(['propget', helpstring(u'Primary display field.')], HRESULT, 'DisplayPropName',
              ( ['retval', 'out'], POINTER(BSTR), 'propName' )),
    COMMETHOD(['propget'], HRESULT, 'GlobalIDPropName',
              ( ['retval', 'out'], POINTER(BSTR), 'propName' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the table/ layer has attachments.')], HRESULT, 'HasAttachments',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'HasAttachments' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer/table has HTML popups enabled.')], HRESULT, 'HTMLPopupType',
              ( ['retval', 'out'], POINTER(esriServerHTMLPopupType), 'Type' )),
    COMMETHOD(['propget'], HRESULT, 'ID',
              ( ['retval', 'out'], POINTER(c_int), 'ID' )),
    COMMETHOD(['propget'], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'pName' )),
    COMMETHOD(['propget'], HRESULT, 'OIDPropName',
              ( ['retval', 'out'], POINTER(BSTR), 'propName' )),
    COMMETHOD(['propget'], HRESULT, 'PropertyInfos',
              ( ['retval', 'out'], POINTER(POINTER(IPropertyInfos)), 'PropertyInfos' )),
    COMMETHOD(['propget'], HRESULT, 'Relations',
              ( ['retval', 'out'], POINTER(POINTER(IRelateInfos)), 'RelateInfos' )),
    COMMETHOD(['propget', helpstring(u'Feature Templates.')], HRESULT, 'Templates',
              ( ['retval', 'out'], POINTER(POINTER(ITemplateInfos)), 'TemplateInfos' )),
    COMMETHOD(['propget'], HRESULT, 'TypeIDPropName',
              ( ['retval', 'out'], POINTER(BSTR), 'propName' )),
    COMMETHOD(['propget'], HRESULT, 'Types',
              ( ['retval', 'out'], POINTER(POINTER(IDataObjectTypes)), 'DataObjectTypes' )),
]
################################################################
## code template for IDataObjectTable implementation
##class IDataObjectTable_Impl(object):
##    @property
##    def Templates(self):
##        u'Feature Templates.'
##        #return TemplateInfos
##
##    @property
##    def Description(self):
##        u'The description of the table or layer. This property is set in the General tab of the Table/ Layer Properties dialog.'
##        #return desc
##
##    @property
##    def OIDPropName(self):
##        '-no docstring-'
##        #return propName
##
##    @property
##    def GlobalIDPropName(self):
##        '-no docstring-'
##        #return propName
##
##    @property
##    def PropertyInfos(self):
##        '-no docstring-'
##        #return PropertyInfos
##
##    @property
##    def Relations(self):
##        '-no docstring-'
##        #return RelateInfos
##
##    @property
##    def CopyrightText(self):
##        u'Copyright information associated with the table or layer.'
##        #return copyright
##
##    @property
##    def HasAttachments(self):
##        u'Indicates if the table/ layer has attachments.'
##        #return HasAttachments
##
##    @property
##    def TypeIDPropName(self):
##        '-no docstring-'
##        #return propName
##
##    @property
##    def HTMLPopupType(self):
##        u'Indicates if the layer/table has HTML popups enabled.'
##        #return Type
##
##    @property
##    def DisplayPropName(self):
##        u'Primary display field.'
##        #return propName
##
##    @property
##    def ID(self):
##        '-no docstring-'
##        #return ID
##
##    @property
##    def Types(self):
##        '-no docstring-'
##        #return DataObjectTypes
##
##    @property
##    def Name(self):
##        '-no docstring-'
##        #return pName
##

class IFeatureLayerDrawingDescription(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the FeatureLayer drawing options.'
    _iid_ = GUID('{558E4224-D1E8-43BA-8057-02317E7F8A5E}')
    _idlflags_ = ['oleautomation']
IGraphicFeatureLayer._methods_ = [
    COMMETHOD(['propget'], HRESULT, 'GeometryFieldName',
              ( ['retval', 'out'], POINTER(BSTR), 'FieldName' )),
    COMMETHOD(['propget', helpstring(u'The enumerated geometry type.')], HRESULT, 'GeometryType',
              ( ['retval', 'out'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.esriGeometryType), 'GeometryType' )),
    COMMETHOD(['propget'], HRESULT, 'LayerDrawingDescription',
              ( ['retval', 'out'], POINTER(POINTER(IFeatureLayerDrawingDescription)), 'LayerDrawingDescription' )),
    COMMETHOD(['propget', helpstring(u'Maximum scale at which the features will be visible.')], HRESULT, 'MaxScale',
              ( ['retval', 'out'], POINTER(c_double), 'Scale' )),
    COMMETHOD(['propget', helpstring(u'Minimum scale at which the features will be visible.')], HRESULT, 'MinScale',
              ( ['retval', 'out'], POINTER(c_double), 'Scale' )),
    COMMETHOD(['propget', helpstring(u'The spatial reference for the geometry in the layer.')], HRESULT, 'SpatialReference',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference)), 'SpatialReference' )),
    COMMETHOD(['propget', helpstring(u'The spatial extent of the layer.')], HRESULT, 'SpatialExtent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'Extent' )),
]
################################################################
## code template for IGraphicFeatureLayer implementation
##class IGraphicFeatureLayer_Impl(object):
##    @property
##    def GeometryFieldName(self):
##        '-no docstring-'
##        #return FieldName
##
##    @property
##    def MaxScale(self):
##        u'Maximum scale at which the features will be visible.'
##        #return Scale
##
##    @property
##    def SpatialExtent(self):
##        u'The spatial extent of the layer.'
##        #return Extent
##
##    @property
##    def SpatialReference(self):
##        u'The spatial reference for the geometry in the layer.'
##        #return SpatialReference
##
##    @property
##    def GeometryType(self):
##        u'The enumerated geometry type.'
##        #return GeometryType
##
##    @property
##    def LayerDrawingDescription(self):
##        '-no docstring-'
##        #return LayerDrawingDescription
##
##    @property
##    def MinScale(self):
##        u'Minimum scale at which the features will be visible.'
##        #return Scale
##


# values for enumeration 'esriCacheCompressionMode'
esriMapCacheCompress = 0
esriMapCacheDecompress = 1
esriCacheCompressionMode = c_int # enum
IFindObject._methods_ = [
    COMMETHOD(['propput', helpstring(u'FID.')], HRESULT, 'FID',
              ( ['in'], c_int, 'FID' )),
    COMMETHOD(['propget', helpstring(u'FID.')], HRESULT, 'FID',
              ( ['retval', 'out'], POINTER(c_int), 'FID' )),
]
################################################################
## code template for IFindObject implementation
##class IFindObject_Impl(object):
##    def _get(self):
##        u'FID.'
##        #return FID
##    def _set(self, FID):
##        u'FID.'
##    FID = property(_get, _set, doc = _set.__doc__)
##

class LayerDescriptor(CoClass):
    u'The Layer Descriptor coclass contains a description of a layer in a map.'
    _reg_clsid_ = GUID('{9A414A07-8DAE-4F03-9C82-18A2568BC860}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class ILayerDescriptor(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    u'Provides access to the available properties of a layer descriptor object.'
    _iid_ = GUID('{3B2DEE7B-641E-48FF-A9CD-D2458C0A5861}')
    _idlflags_ = ['dual', 'oleautomation']
LayerDescriptor._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILayerDescriptor]

class IPieChartRenderer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that work with additional chart renderer properties specific to pie charts.'
    _iid_ = GUID('{22A98368-C48D-11D3-9F7A-00C04F6BC709}')
    _idlflags_ = ['oleautomation']
IPieChartRenderer._methods_ = [
    COMMETHOD(['propget', helpstring(u'Field used to determine size of the pie chart symbols.')], HRESULT, 'ProportionalField',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'Field used to determine size of the pie chart symbols.')], HRESULT, 'ProportionalField',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'Field alias for the proportional field.')], HRESULT, 'ProportionalFieldAlias',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'Field alias for the proportional field.')], HRESULT, 'ProportionalFieldAlias',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the size of pie chart symbols is determined by the sum of the values.')], HRESULT, 'ProportionalBySum',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the size of pie chart symbols is determined by the sum of the values.')], HRESULT, 'ProportionalBySum',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Minimum value (used for proportional sizing).')], HRESULT, 'MinValue',
              ( ['retval', 'out'], POINTER(c_double), 'Value' )),
    COMMETHOD(['propput', helpstring(u'Minimum value (used for proportional sizing).')], HRESULT, 'MinValue',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD(['propget', helpstring(u'Symbol size (points) corresponding to the minimum value.')], HRESULT, 'MinSize',
              ( ['retval', 'out'], POINTER(c_double), 'points' )),
    COMMETHOD(['propput', helpstring(u'Symbol size (points) corresponding to the minimum value.')], HRESULT, 'MinSize',
              ( ['in'], c_double, 'points' )),
    COMMETHOD(['propget', helpstring(u'Indicates if Flannery Compensation is applied.')], HRESULT, 'FlanneryCompensation',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if Flannery Compensation is applied.')], HRESULT, 'FlanneryCompensation',
              ( ['in'], VARIANT_BOOL, 'flag' )),
]
################################################################
## code template for IPieChartRenderer implementation
##class IPieChartRenderer_Impl(object):
##    def _get(self):
##        u'Indicates if Flannery Compensation is applied.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if Flannery Compensation is applied.'
##    FlanneryCompensation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the size of pie chart symbols is determined by the sum of the values.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if the size of pie chart symbols is determined by the sum of the values.'
##    ProportionalBySum = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Minimum value (used for proportional sizing).'
##        #return Value
##    def _set(self, Value):
##        u'Minimum value (used for proportional sizing).'
##    MinValue = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Symbol size (points) corresponding to the minimum value.'
##        #return points
##    def _set(self, points):
##        u'Symbol size (points) corresponding to the minimum value.'
##    MinSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Field alias for the proportional field.'
##        #return Name
##    def _set(self, Name):
##        u'Field alias for the proportional field.'
##    ProportionalFieldAlias = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Field used to determine size of the pie chart symbols.'
##        #return Name
##    def _set(self, Name):
##        u'Field used to determine size of the pie chart symbols.'
##    ProportionalField = property(_get, _set, doc = _set.__doc__)
##

class ITableEdit(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    _iid_ = GUID('{DA0E099C-0595-438D-BC13-AC90CC5D12FC}')
    _idlflags_ = ['oleautomation']
ITableEdits._methods_ = [
    COMMETHOD(['propget', helpstring(u'TableEdit elements count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'TableEdit element at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(ITableEdit)), 'TableEdit' )),
    COMMETHOD([helpstring(u'Removes the TableEdit at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all TableEdit elements.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Adds a TableEdit element.')], HRESULT, 'Add',
              ( ['in'], POINTER(ITableEdit), 'TableEdit' )),
    COMMETHOD([helpstring(u'Adds a TableEdit at the specified position.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(ITableEdit), 'TableEdit' )),
]
################################################################
## code template for ITableEdits implementation
##class ITableEdits_Impl(object):
##    @property
##    def Count(self):
##        u'TableEdit elements count.'
##        #return Count
##
##    def Insert(self, Index, TableEdit):
##        u'Adds a TableEdit at the specified position.'
##        #return 
##
##    def Remove(self, Index):
##        u'Removes the TableEdit at the specified position.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'TableEdit element at the specified position.'
##        #return TableEdit
##
##    def RemoveAll(self):
##        u'Removes all TableEdit elements.'
##        #return 
##
##    def Add(self, TableEdit):
##        u'Adds a TableEdit element.'
##        #return 
##

IGraphicFeatureLayers._methods_ = [
    COMMETHOD(['propget', helpstring(u'GraphicFeatureLayer count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The GraphicFeatureLayer at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IGraphicFeatureLayer)), 'GraphicFeatureLayer' )),
    COMMETHOD([helpstring(u'Removes the GraphicFeatureLayer at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all GraphicFeatureLayer elements.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Adds a GraphicFeatureLayer.')], HRESULT, 'Add',
              ( ['in'], POINTER(IGraphicFeatureLayer), 'GraphicFeatureLayer' )),
    COMMETHOD([helpstring(u'Adds a GraphicFeatureLayer at the specified position.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(IGraphicFeatureLayer), 'GraphicFeatureLayer' )),
]
################################################################
## code template for IGraphicFeatureLayers implementation
##class IGraphicFeatureLayers_Impl(object):
##    @property
##    def Count(self):
##        u'GraphicFeatureLayer count.'
##        #return Count
##
##    def Insert(self, Index, GraphicFeatureLayer):
##        u'Adds a GraphicFeatureLayer at the specified position.'
##        #return 
##
##    def Remove(self, Index):
##        u'Removes the GraphicFeatureLayer at the specified position.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'The GraphicFeatureLayer at the specified position.'
##        #return GraphicFeatureLayer
##
##    def RemoveAll(self):
##        u'Removes all GraphicFeatureLayer elements.'
##        #return 
##
##    def Add(self, GraphicFeatureLayer):
##        u'Adds a GraphicFeatureLayer.'
##        #return 
##

class IMapServerObjects(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to core objects contained within the map document.'
    _iid_ = GUID('{651521F3-AAFF-42B9-8C2D-1980625A13BF}')
    _idlflags_ = ['oleautomation']
IMapServerObjects._methods_ = [
    COMMETHOD(['propget', helpstring(u'The map corresponding to the specified map name. Pass in a blank string for mapName to get the default map (active data frame).')], HRESULT, 'Map',
              ( ['in'], BSTR, 'MapName' ),
              ( ['retval', 'out'], POINTER(POINTER(IMap)), 'mapObject' )),
    COMMETHOD(['propget', helpstring(u'The layer specified by the map name and layer ID. If the mapName is blank, the default map (active data frame) will be assumed.')], HRESULT, 'Layer',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], c_int, 'LayerID' ),
              ( ['retval', 'out'], POINTER(POINTER(ILayer)), 'layerObject' )),
    COMMETHOD(['propget', helpstring(u'The page layout object for the current map document.')], HRESULT, 'PageLayout',
              ( ['retval', 'out'], POINTER(POINTER(IPageLayout)), 'pageLayoutObject' )),
    COMMETHOD(['propget', helpstring(u'The thumbnail stored in the map document.')], HRESULT, 'Thumbnail',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IPictureDisp)), 'Picture' )),
    COMMETHOD([helpstring(u'Updates the server info based on the current state of the underlying fine-grained objects.')], HRESULT, 'RefreshServerObjects'),
    COMMETHOD([helpstring(u'Applies the current state of the map description to the map server object.')], HRESULT, 'ApplyMapDescription',
              ( ['in'], POINTER(IMapDescription), 'MapDescription' ),
              ( ['in'], POINTER(IImageDisplay), 'mapDisplay' )),
]
################################################################
## code template for IMapServerObjects implementation
##class IMapServerObjects_Impl(object):
##    @property
##    def Map(self, MapName):
##        u'The map corresponding to the specified map name. Pass in a blank string for mapName to get the default map (active data frame).'
##        #return mapObject
##
##    @property
##    def Layer(self, MapName, LayerID):
##        u'The layer specified by the map name and layer ID. If the mapName is blank, the default map (active data frame) will be assumed.'
##        #return layerObject
##
##    @property
##    def PageLayout(self):
##        u'The page layout object for the current map document.'
##        #return pageLayoutObject
##
##    def RefreshServerObjects(self):
##        u'Updates the server info based on the current state of the underlying fine-grained objects.'
##        #return 
##
##    def ApplyMapDescription(self, MapDescription, mapDisplay):
##        u'Applies the current state of the map description to the map server object.'
##        #return 
##
##    @property
##    def Thumbnail(self):
##        u'The thumbnail stored in the map document.'
##        #return Picture
##

IMaplexOverposterLayerProperties4._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates whether to key number the label and feature.')], HRESULT, 'CanKeyNumberLabel',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to key number the label and feature.')], HRESULT, 'CanKeyNumberLabel',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'The name of the key number group to use for key numbering the labels.')], HRESULT, 'KeyNumberGroupName',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'The name of the key number group to use for key numbering the labels.')], HRESULT, 'KeyNumberGroupName',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'Use the exact polygon outline of a symbol when measuring the label offset.')], HRESULT, 'UseExactSymbolOutline',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Use the exact polygon outline of a symbol when measuring the label offset.')], HRESULT, 'UseExactSymbolOutline',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'The marker character used by the truncation strategy.')], HRESULT, 'TruncationMarkerCharacter',
              ( ['retval', 'out'], POINTER(BSTR), 'marker' )),
    COMMETHOD(['propput', helpstring(u'The marker character used by the truncation strategy.')], HRESULT, 'TruncationMarkerCharacter',
              ( ['in'], BSTR, 'marker' )),
    COMMETHOD(['propget', helpstring(u'The minimum length of a label used by the truncation strategy.')], HRESULT, 'TruncationMinimumLength',
              ( ['retval', 'out'], POINTER(c_int), 'Length' )),
    COMMETHOD(['propput', helpstring(u'The minimum length of a label used by the truncation strategy.')], HRESULT, 'TruncationMinimumLength',
              ( ['in'], c_int, 'Length' )),
    COMMETHOD(['propget', helpstring(u'The preferred characters used by the truncation strategy.')], HRESULT, 'TruncationPreferredCharacters',
              ( ['retval', 'out'], POINTER(BSTR), 'characters' )),
    COMMETHOD(['propput', helpstring(u'The preferred characters used by the truncation strategy.')], HRESULT, 'TruncationPreferredCharacters',
              ( ['in'], BSTR, 'characters' )),
    COMMETHOD(['propget', helpstring(u'Indicates a preference for placing a line label near the map border.')], HRESULT, 'PreferLabelNearMapBorder',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates a preference for placing a line label near the map border.')], HRESULT, 'PreferLabelNearMapBorder',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates the preferred clearance for placing a line label near the map border.')], HRESULT, 'PreferLabelNearMapBorderClearance',
              ( ['retval', 'out'], POINTER(c_double), 'Value' )),
    COMMETHOD(['propput', helpstring(u'Indicates the preferred clearance for placing a line label near the map border.')], HRESULT, 'PreferLabelNearMapBorderClearance',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD(['propget', helpstring(u'Indicates a preference for placing a line label near a junction.')], HRESULT, 'PreferLabelNearJunction',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates a preference for placing a line label near a junction.')], HRESULT, 'PreferLabelNearJunction',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates the preferred clearance for placing a line label near a junction.')], HRESULT, 'PreferLabelNearJunctionClearance',
              ( ['retval', 'out'], POINTER(c_double), 'Value' )),
    COMMETHOD(['propput', helpstring(u'Indicates the preferred clearance for placing a line label near a junction.')], HRESULT, 'PreferLabelNearJunctionClearance',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to turn off line connection.')], HRESULT, 'EnableConnection',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to turn off line connection.')], HRESULT, 'EnableConnection',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates the options for connecting line features.')], HRESULT, 'ConnectionType',
              ( ['retval', 'out'], POINTER(esriMaplexConnectionType), 'Type' )),
    COMMETHOD(['propput', helpstring(u'Indicates the options for connecting line features.')], HRESULT, 'ConnectionType',
              ( ['in'], esriMaplexConnectionType, 'Type' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to label only the largest polygon in a compound polygon feature.')], HRESULT, 'LabelLargestPolygon',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to label only the largest polygon in a compound polygon feature.')], HRESULT, 'LabelLargestPolygon',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates the option for labeling multi-part shapes.')], HRESULT, 'MultiPartOption',
              ( ['retval', 'out'], POINTER(esriMaplexMultiPartOption), 'Type' )),
    COMMETHOD(['propput', helpstring(u'Indicates the option for labeling multi-part shapes.')], HRESULT, 'MultiPartOption',
              ( ['in'], esriMaplexMultiPartOption, 'Type' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether a stacked label may straddle the line feature.')], HRESULT, 'AllowStraddleStacking',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether a stacked label may straddle the line feature.')], HRESULT, 'AllowStraddleStacking',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether extra white space characters are removed from the label text.')], HRESULT, 'RemoveExtraWhiteSpace',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether extra white space characters are removed from the label text.')], HRESULT, 'RemoveExtraWhiteSpace',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether extra line breaks are removed from the label text.')], HRESULT, 'RemoveExtraLineBreaks',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether extra line breaks are removed from the label text.')], HRESULT, 'RemoveExtraLineBreaks',
              ( ['in'], VARIANT_BOOL, 'flag' )),
]
################################################################
## code template for IMaplexOverposterLayerProperties4 implementation
##class IMaplexOverposterLayerProperties4_Impl(object):
##    def _get(self):
##        u'Indicates the option for labeling multi-part shapes.'
##        #return Type
##    def _set(self, Type):
##        u'Indicates the option for labeling multi-part shapes.'
##    MultiPartOption = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The marker character used by the truncation strategy.'
##        #return marker
##    def _set(self, marker):
##        u'The marker character used by the truncation strategy.'
##    TruncationMarkerCharacter = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates a preference for placing a line label near the map border.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates a preference for placing a line label near the map border.'
##    PreferLabelNearMapBorder = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The minimum length of a label used by the truncation strategy.'
##        #return Length
##    def _set(self, Length):
##        u'The minimum length of a label used by the truncation strategy.'
##    TruncationMinimumLength = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The preferred characters used by the truncation strategy.'
##        #return characters
##    def _set(self, characters):
##        u'The preferred characters used by the truncation strategy.'
##    TruncationPreferredCharacters = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether to key number the label and feature.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether to key number the label and feature.'
##    CanKeyNumberLabel = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates the preferred clearance for placing a line label near a junction.'
##        #return Value
##    def _set(self, Value):
##        u'Indicates the preferred clearance for placing a line label near a junction.'
##    PreferLabelNearJunctionClearance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The name of the key number group to use for key numbering the labels.'
##        #return Name
##    def _set(self, Name):
##        u'The name of the key number group to use for key numbering the labels.'
##    KeyNumberGroupName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether to turn off line connection.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether to turn off line connection.'
##    EnableConnection = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates the options for connecting line features.'
##        #return Type
##    def _set(self, Type):
##        u'Indicates the options for connecting line features.'
##    ConnectionType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether extra white space characters are removed from the label text.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether extra white space characters are removed from the label text.'
##    RemoveExtraWhiteSpace = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether to label only the largest polygon in a compound polygon feature.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether to label only the largest polygon in a compound polygon feature.'
##    LabelLargestPolygon = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether a stacked label may straddle the line feature.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether a stacked label may straddle the line feature.'
##    AllowStraddleStacking = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether extra line breaks are removed from the label text.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether extra line breaks are removed from the label text.'
##    RemoveExtraLineBreaks = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates the preferred clearance for placing a line label near the map border.'
##        #return Value
##    def _set(self, Value):
##        u'Indicates the preferred clearance for placing a line label near the map border.'
##    PreferLabelNearMapBorderClearance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Use the exact polygon outline of a symbol when measuring the label offset.'
##        #return flag
##    def _set(self, flag):
##        u'Use the exact polygon outline of a symbol when measuring the label offset.'
##    UseExactSymbolOutline = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates a preference for placing a line label near a junction.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates a preference for placing a line label near a junction.'
##    PreferLabelNearJunction = property(_get, _set, doc = _set.__doc__)
##

class IDynamicLegendRenderer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that instrument layer drawing to detect which legend classes are visible.'
    _iid_ = GUID('{34B10158-671F-4EC2-8A75-A2F3710E5DCF}')
    _idlflags_ = ['oleautomation']
IDynamicLegendRenderer._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates that the renderer supports counts on its legend.')], HRESULT, 'SupportsCounts',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propget', helpstring(u'Draw phases that affect dynamic legends.')], HRESULT, 'InstrumentedDrawPhases',
              ( ['retval', 'out'], POINTER(c_int), 'drawPhases' )),
    COMMETHOD([helpstring(u'Call before renderer.Draw so that legend info can be sampled.')], HRESULT, 'StartInstrumentedDraw',
              ( ['in'], esriDynamicLegendType, 'Type' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'mapDisplay' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'visibleArea' )),
    COMMETHOD([helpstring(u'Call after renderer.Draw.')], HRESULT, 'FinishInstrumentedDraw'),
]
################################################################
## code template for IDynamicLegendRenderer implementation
##class IDynamicLegendRenderer_Impl(object):
##    @property
##    def InstrumentedDrawPhases(self):
##        u'Draw phases that affect dynamic legends.'
##        #return drawPhases
##
##    def FinishInstrumentedDraw(self):
##        u'Call after renderer.Draw.'
##        #return 
##
##    @property
##    def SupportsCounts(self):
##        u'Indicates that the renderer supports counts on its legend.'
##        #return flag
##
##    def StartInstrumentedDraw(self, Type, mapDisplay, visibleArea):
##        u'Call before renderer.Draw so that legend info can be sampled.'
##        #return 
##

IMaplexDictionaryEntry._methods_ = [
    COMMETHOD(['propget', helpstring(u'The text to be abbreviated.')], HRESULT, 'Text',
              ( ['retval', 'out'], POINTER(BSTR), 'Text' )),
    COMMETHOD(['propput', helpstring(u'The text to be abbreviated.')], HRESULT, 'Text',
              ( ['in'], BSTR, 'Text' )),
    COMMETHOD(['propget', helpstring(u'The abbreviation(s) of the text.')], HRESULT, 'Abbreviation',
              ( ['retval', 'out'], POINTER(BSTR), 'Abbreviation' )),
    COMMETHOD(['propput', helpstring(u'The abbreviation(s) of the text.')], HRESULT, 'Abbreviation',
              ( ['in'], BSTR, 'Abbreviation' )),
    COMMETHOD(['propget', helpstring(u'Abbreviation options for the text.')], HRESULT, 'Type',
              ( ['retval', 'out'], POINTER(esriMaplexAbbrevType), 'Type' )),
    COMMETHOD(['propput', helpstring(u'Abbreviation options for the text.')], HRESULT, 'Type',
              ( ['in'], esriMaplexAbbrevType, 'Type' )),
]
################################################################
## code template for IMaplexDictionaryEntry implementation
##class IMaplexDictionaryEntry_Impl(object):
##    def _get(self):
##        u'The abbreviation(s) of the text.'
##        #return Abbreviation
##    def _set(self, Abbreviation):
##        u'The abbreviation(s) of the text.'
##    Abbreviation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The text to be abbreviated.'
##        #return Text
##    def _set(self, Text):
##        u'The text to be abbreviated.'
##    Text = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Abbreviation options for the text.'
##        #return Type
##    def _set(self, Type):
##        u'Abbreviation options for the text.'
##    Type = property(_get, _set, doc = _set.__doc__)
##

ICacheControlInfo._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if client caching is allowed.')], HRESULT, 'ClientCachingAllowed',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pClientCachingAllowed' )),
    COMMETHOD(['propput', helpstring(u'Indicates if client caching is allowed.')], HRESULT, 'ClientCachingAllowed',
              ( [], VARIANT_BOOL, 'pClientCachingAllowed' )),
]
################################################################
## code template for ICacheControlInfo implementation
##class ICacheControlInfo_Impl(object):
##    def _get(self):
##        u'Indicates if client caching is allowed.'
##        #return pClientCachingAllowed
##    def _set(self, pClientCachingAllowed):
##        u'Indicates if client caching is allowed.'
##    ClientCachingAllowed = property(_get, _set, doc = _set.__doc__)
##

class IGraphicsContainerEvents(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to events that occur when the graphics container changes.'
    _iid_ = GUID('{8694707C-D4E2-4F77-A02F-D36397A8534D}')
    _idlflags_ = ['oleautomation']
IGraphicsContainerEvents._methods_ = [
    COMMETHOD([helpstring(u'Occurs when the element is added.')], HRESULT, 'ElementAdded',
              ( [], POINTER(IElement), 'Element' )),
    COMMETHOD([helpstring(u'Occurs when the elements are added.')], HRESULT, 'ElementsAdded',
              ( [], POINTER(IElementCollection), 'Elements' )),
    COMMETHOD([helpstring(u'Occurs when the element is deleted.')], HRESULT, 'ElementDeleted',
              ( [], POINTER(IElement), 'Element' )),
    COMMETHOD([helpstring(u'Occurs when all the elements are deleted.')], HRESULT, 'AllElementsDeleted'),
    COMMETHOD([helpstring(u'Occurs when the element is updated.')], HRESULT, 'ElementUpdated',
              ( [], POINTER(IElement), 'Element' )),
]
################################################################
## code template for IGraphicsContainerEvents implementation
##class IGraphicsContainerEvents_Impl(object):
##    def ElementDeleted(self, Element):
##        u'Occurs when the element is deleted.'
##        #return 
##
##    def ElementAdded(self, Element):
##        u'Occurs when the element is added.'
##        #return 
##
##    def AllElementsDeleted(self):
##        u'Occurs when all the elements are deleted.'
##        #return 
##
##    def ElementUpdated(self, Element):
##        u'Occurs when the element is updated.'
##        #return 
##
##    def ElementsAdded(self, Elements):
##        u'Occurs when the elements are added.'
##        #return 
##

class IGpsFeed(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the properties of a real-time feed object that gets its input from a GPS connection.'
    _iid_ = GUID('{CE81418E-072A-42B5-81D6-47409D79082C}')
    _idlflags_ = ['oleautomation']
class IGpsConnection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the connection properties of the communications port connected to a GPS receiver.'
    _iid_ = GUID('{F5570BC4-13AB-49ED-86A4-13488447A3FE}')
    _idlflags_ = ['oleautomation']
IGpsFeed._methods_ = [
    COMMETHOD(['propget', helpstring(u'The GPS connection object.')], HRESULT, 'Connection',
              ( ['retval', 'out'], POINTER(POINTER(IGpsConnection)), 'ppConnection' )),
    COMMETHOD(['propputref', helpstring(u'The GPS connection object.')], HRESULT, 'Connection',
              ( ['in'], POINTER(IGpsConnection), 'ppConnection' )),
    COMMETHOD(['propget', helpstring(u'Reports the tested status of the connection(The connection need not be open).')], HRESULT, 'TestStatus',
              ( ['retval', 'out'], POINTER(esriGpsConnectionStatus), 'pStatus' )),
]
################################################################
## code template for IGpsFeed implementation
##class IGpsFeed_Impl(object):
##    @property
##    def TestStatus(self):
##        u'Reports the tested status of the connection(The connection need not be open).'
##        #return pStatus
##
##    def Connection(self, ppConnection):
##        u'The GPS connection object.'
##        #return 
##

ILayerCacheInfos._methods_ = [
    COMMETHOD(['propget', helpstring(u'The LayerCacheInfo info count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The LayerCacheInfo at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(ILayerCacheInfo)), 'ppLayerCacheInfo' )),
    COMMETHOD([helpstring(u'Removes the LayerCacheInfo at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all LayerCacheInfo objects.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Adds a LayerCacheInfo.')], HRESULT, 'Add',
              ( ['in'], POINTER(ILayerCacheInfo), 'pLayerCacheInfo' )),
    COMMETHOD([helpstring(u'Adds a LayerCacheInfo at the specified position.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(ILayerCacheInfo), 'pLayerCacheInfo' )),
]
################################################################
## code template for ILayerCacheInfos implementation
##class ILayerCacheInfos_Impl(object):
##    @property
##    def Count(self):
##        u'The LayerCacheInfo info count.'
##        #return Count
##
##    def Insert(self, Index, pLayerCacheInfo):
##        u'Adds a LayerCacheInfo at the specified position.'
##        #return 
##
##    def Remove(self, Index):
##        u'Removes the LayerCacheInfo at the specified position.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'The LayerCacheInfo at the specified position.'
##        #return ppLayerCacheInfo
##
##    def RemoveAll(self):
##        u'Removes all LayerCacheInfo objects.'
##        #return 
##
##    def Add(self, pLayerCacheInfo):
##        u'Adds a LayerCacheInfo.'
##        #return 
##

class CacheRasterDatasetName(CoClass):
    u'A raster dataset name for Globe and Map cache.'
    _reg_clsid_ = GUID('{343EB024-5F47-4813-8D4C-66AA8A6D2F19}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
CacheRasterDatasetName._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDatasetName, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IMetadata, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IMetadataEdit, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.INativeTypeInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClassID, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName]

ITinIllumination._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if the shading for TIN triangle faces is illuminated.')], HRESULT, 'Illuminate',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Illuminate' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the shading for TIN triangle faces is illuminated.')], HRESULT, 'Illuminate',
              ( ['in'], VARIANT_BOOL, 'Illuminate' )),
]
################################################################
## code template for ITinIllumination implementation
##class ITinIllumination_Impl(object):
##    def _get(self):
##        u'Indicates if the shading for TIN triangle faces is illuminated.'
##        #return Illuminate
##    def _set(self, Illuminate):
##        u'Indicates if the shading for TIN triangle faces is illuminated.'
##    Illuminate = property(_get, _set, doc = _set.__doc__)
##

ILODInfos._methods_ = [
    COMMETHOD(['propget', helpstring(u'The LOD info count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The LOD info at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(ILODInfo)), 'ppLODInfo' )),
    COMMETHOD([helpstring(u'Removes the LOD info at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all LOD infos.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Adds a LOD info.')], HRESULT, 'Add',
              ( ['in'], POINTER(ILODInfo), 'pLODInfo' )),
    COMMETHOD([helpstring(u'Adds a LOD info at the specified position.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(ILODInfo), 'pLODInfo' )),
]
################################################################
## code template for ILODInfos implementation
##class ILODInfos_Impl(object):
##    @property
##    def Count(self):
##        u'The LOD info count.'
##        #return Count
##
##    def Insert(self, Index, pLODInfo):
##        u'Adds a LOD info at the specified position.'
##        #return 
##
##    def Remove(self, Index):
##        u'Removes the LOD info at the specified position.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'The LOD info at the specified position.'
##        #return ppLODInfo
##
##    def RemoveAll(self):
##        u'Removes all LOD infos.'
##        #return 
##
##    def Add(self, pLODInfo):
##        u'Adds a LOD info.'
##        #return 
##

IGFSTableDescription._methods_ = [
    COMMETHOD(['propget', helpstring(u'The layer ID. This is a unique ID for the layer, and is used to identify the layer in a number of method calls.')], HRESULT, 'ID',
              ( ['retval', 'out'], POINTER(c_int), 'ID' )),
    COMMETHOD(['propput', helpstring(u'The layer ID. This is a unique ID for the layer, and is used to identify the layer in a number of method calls.')], HRESULT, 'ID',
              ( ['in'], c_int, 'ID' )),
    COMMETHOD(['propget', helpstring(u'The definition expression for the layer.')], HRESULT, 'DefinitionExpression',
              ( ['retval', 'out'], POINTER(BSTR), 'Expression' )),
    COMMETHOD(['propput', helpstring(u'The definition expression for the layer.')], HRESULT, 'DefinitionExpression',
              ( ['in'], BSTR, 'Expression' )),
]
################################################################
## code template for IGFSTableDescription implementation
##class IGFSTableDescription_Impl(object):
##    def _get(self):
##        u'The definition expression for the layer.'
##        #return Expression
##    def _set(self, Expression):
##        u'The definition expression for the layer.'
##    DefinitionExpression = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The layer ID. This is a unique ID for the layer, and is used to identify the layer in a number of method calls.'
##        #return ID
##    def _set(self, ID):
##        u'The layer ID. This is a unique ID for the layer, and is used to identify the layer in a number of method calls.'
##    ID = property(_get, _set, doc = _set.__doc__)
##

class ScaleText(CoClass):
    u'A map surround for displaying a scale text.'
    _reg_clsid_ = GUID('{7A3F91DC-B9E3-11D1-8756-0000F8751720}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
ScaleText._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IScaleText, IScaleText2, IMapSurround, IGraphicsComposite, IQuerySize, IBoundsProperties, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IConnectionPointContainer, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySupport, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITransformEvents, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]
ScaleText._outgoing_interfaces_ = [IMapSurroundEvents]

class ILayerExtensionDraw(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to events before and after a layer draws.'
    _iid_ = GUID('{681C8DDC-0F37-42E2-9CBB-CA614E0BC6E5}')
    _idlflags_ = ['oleautomation']
ILayerExtensionDraw._methods_ = [
    COMMETHOD([helpstring(u'Drawing event called before layer draws.')], HRESULT, 'BeforeLayerDraw',
              ( ['in'], POINTER(ILayer), 'pLayer' ),
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriDrawPhase, 'DrawPhase' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'pDisplay' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' )),
    COMMETHOD([helpstring(u'Drawing event called after layer draws.')], HRESULT, 'AfterLayerDraw',
              ( ['in'], POINTER(ILayer), 'pLayer' ),
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriDrawPhase, 'DrawPhase' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'pDisplay' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' )),
]
################################################################
## code template for ILayerExtensionDraw implementation
##class ILayerExtensionDraw_Impl(object):
##    def AfterLayerDraw(self, pLayer, DrawPhase, pDisplay, pTrackCancel):
##        u'Drawing event called after layer draws.'
##        #return 
##
##    def BeforeLayerDraw(self, pLayer, DrawPhase, pDisplay, pTrackCancel):
##        u'Drawing event called before layer draws.'
##        #return 
##

IGFSTableDescriptions._methods_ = [
    COMMETHOD(['propget', helpstring(u'The table description count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The table description at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IGFSTableDescription)), 'TableDescription' )),
    COMMETHOD([helpstring(u'Removes the table description at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all table descriptions.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Adds a table description.')], HRESULT, 'Add',
              ( ['in'], POINTER(IGFSTableDescription), 'TableDescription' )),
    COMMETHOD([helpstring(u'Adds a table description at the specified position.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(IGFSTableDescription), 'TableDescription' )),
]
################################################################
## code template for IGFSTableDescriptions implementation
##class IGFSTableDescriptions_Impl(object):
##    @property
##    def Count(self):
##        u'The table description count.'
##        #return Count
##
##    def Insert(self, Index, TableDescription):
##        u'Adds a table description at the specified position.'
##        #return 
##
##    def Remove(self, Index):
##        u'Removes the table description at the specified position.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'The table description at the specified position.'
##        #return TableDescription
##
##    def RemoveAll(self):
##        u'Removes all table descriptions.'
##        #return 
##
##    def Add(self, TableDescription):
##        u'Adds a table description.'
##        #return 
##

class LODInfo(CoClass):
    u'A LOD Info object.'
    _reg_clsid_ = GUID('{35BD0F76-3CF3-4D0C-9C4A-D728CFE593A5}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
LODInfo._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILODInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

ITableHistogram2._methods_ = [
    COMMETHOD(['propput', helpstring(u'Data Exclusion where clause.')], HRESULT, 'ExclusionClause',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'Data Exclusion where clause.')], HRESULT, 'ExclusionClause',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'Data Sampling Max Size.')], HRESULT, 'MaxSampleSize',
              ( ['in'], c_int, 'Size' )),
    COMMETHOD(['propget', helpstring(u'Data Sampling Max Size.')], HRESULT, 'MaxSampleSize',
              ( ['retval', 'out'], POINTER(c_int), 'Size' )),
]
################################################################
## code template for ITableHistogram2 implementation
##class ITableHistogram2_Impl(object):
##    def _get(self):
##        u'Data Sampling Max Size.'
##        #return Size
##    def _set(self, Size):
##        u'Data Sampling Max Size.'
##    MaxSampleSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Data Exclusion where clause.'
##        #return Name
##    def _set(self, Name):
##        u'Data Exclusion where clause.'
##    ExclusionClause = property(_get, _set, doc = _set.__doc__)
##

class IHorizontalBarLegendItem(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that work with horizontal bar legend items.'
    _iid_ = GUID('{3B09454E-C9D1-11D3-92FB-00600802E603}')
    _idlflags_ = ['oleautomation']
IHorizontalBarLegendItem._methods_ = [
    COMMETHOD(['propput', helpstring(u'Angle of text that appears above the bar.')], HRESULT, 'AngleAbove',
              ( ['in'], c_double, 'degrees' )),
    COMMETHOD(['propget', helpstring(u'Angle of text that appears above the bar.')], HRESULT, 'AngleAbove',
              ( ['retval', 'out'], POINTER(c_double), 'degrees' )),
    COMMETHOD(['propput', helpstring(u'Angle of text that appears below the bar.')], HRESULT, 'AngleBelow',
              ( ['in'], c_double, 'degrees' )),
    COMMETHOD(['propget', helpstring(u'Angle of text that appears below the bar.')], HRESULT, 'AngleBelow',
              ( ['retval', 'out'], POINTER(c_double), 'degrees' )),
]
################################################################
## code template for IHorizontalBarLegendItem implementation
##class IHorizontalBarLegendItem_Impl(object):
##    def _get(self):
##        u'Angle of text that appears above the bar.'
##        #return degrees
##    def _set(self, degrees):
##        u'Angle of text that appears above the bar.'
##    AngleAbove = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Angle of text that appears below the bar.'
##        #return degrees
##    def _set(self, degrees):
##        u'Angle of text that appears below the bar.'
##    AngleBelow = property(_get, _set, doc = _set.__doc__)
##

class WCSLayerFactory(CoClass):
    u'Provides access to a WCS layer factory.'
    _reg_clsid_ = GUID('{F21943E9-F9CC-45CE-8599-ED095052E90E}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
WCSLayerFactory._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILayerFactory]

class MapServerLegendPatch(CoClass):
    u'The Map Server Legend Patch coclass contains settings about a legend patch.'
    _reg_clsid_ = GUID('{5CDB8B58-B82B-4364-975A-6767F99859E1}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
MapServerLegendPatch._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMapServerLegendPatch, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

class DotDensityRenderer(CoClass):
    u'A dot density renderer.'
    _reg_clsid_ = GUID('{9C7776BA-0421-11D4-9F7C-00C04F6BC709}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
DotDensityRenderer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDataExclusion, IDataExclusion2, IDotDensityRenderer, IDotDensityRenderer2, IDotDensityUIRenderer, IFeatureRenderer, ILegendInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, IRendererFields, IExportSupport]

class ChartRenderer(CoClass):
    u'A chart renderer used to draw pie, bar, and stacked bar chart symbols.'
    _reg_clsid_ = GUID('{4F17939A-C490-11D3-9F7A-00C04F6BC709}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
ChartRenderer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IChartRenderer, IRendererFields, IDataExclusion, IDataExclusion2, IDataNormalization, IFeatureRenderer, IIdentify, ILegendInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, IPieChartRenderer, IBarrierProperties2, IBasicOverposterEvents, IExportSupport]

class RasterCatalogLayerFactory(CoClass):
    u'The Raster Catalog Layer Factory.'
    _reg_clsid_ = GUID('{31BC9F4E-DBF0-4F7B-9D10-C595C50BE386}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
RasterCatalogLayerFactory._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILayerFactory]

class LabelCache(CoClass):
    u'Standard labeling label cache.'
    _reg_clsid_ = GUID('{9A6F1F6C-B980-4B29-93AE-32617180C38F}')
    _idlflags_ = ['hidden']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class ILabelCache(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a label cache.'
    _iid_ = GUID('{ED758AF4-FF98-4C14-BBA4-E7580433AFD6}')
    _idlflags_ = ['oleautomation', 'hidden']
LabelCache._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILabelCache, IActiveViewEvents]

class NetCDFTableFactory(CoClass):
    u'A factory for creating NetCDF tables.'
    _reg_clsid_ = GUID('{EFDCE14D-CB11-4DBA-9004-C698C5ADA385}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
NetCDFTableFactory._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ITableFactory]

IFeatureLayerDrawingDescription._methods_ = [
    COMMETHOD(['propget', helpstring(u'FeatureRenderer used to represent symbology of a feature layer.')], HRESULT, 'FeatureRenderer',
              ( ['retval', 'out'], POINTER(POINTER(IFeatureRenderer)), 'ppRenderer' )),
    COMMETHOD(['propputref', helpstring(u'FeatureRenderer used to represent symbology of a feature layer.')], HRESULT, 'FeatureRenderer',
              ( ['in'], POINTER(IFeatureRenderer), 'ppRenderer' )),
    COMMETHOD(['propget', helpstring(u'Indicates if symbols are scaled for the layer.')], HRESULT, 'ScaleSymbols',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Scale' )),
    COMMETHOD(['propput', helpstring(u'Indicates if symbols are scaled for the layer.')], HRESULT, 'ScaleSymbols',
              ( ['in'], VARIANT_BOOL, 'Scale' )),
]
################################################################
## code template for IFeatureLayerDrawingDescription implementation
##class IFeatureLayerDrawingDescription_Impl(object):
##    def FeatureRenderer(self, ppRenderer):
##        u'FeatureRenderer used to represent symbology of a feature layer.'
##        #return 
##
##    def _get(self):
##        u'Indicates if symbols are scaled for the layer.'
##        #return Scale
##    def _set(self, Scale):
##        u'Indicates if symbols are scaled for the layer.'
##    ScaleSymbols = property(_get, _set, doc = _set.__doc__)
##

class HorizontalLegendItem(CoClass):
    u'Horizontal legend item.'
    _reg_clsid_ = GUID('{A9401A47-4649-11D1-880B-080009EC732A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
HorizontalLegendItem._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IHorizontalLegendItem, ILegendItem, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, ILegendItem2, ILegendItem3, ILayerEffects]

class NITFGraphicsLayer(CoClass):
    u'A NITF graphics layer containing NITF CGM graphics.'
    _reg_clsid_ = GUID('{149E3C05-2BAD-4C05-86BE-1C20DC73A9DD}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
NITFGraphicsLayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, INITFGraphicsLayer, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeoDataset, ILayerInfo, IPublishLayer, ILayerGeneralProperties, ILayerDrawingProperties, ILayerPosition, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IConnectionPointContainer]

class RasterServiceHelper(CoClass):
    u'A Web Service helper class.'
    _reg_clsid_ = GUID('{600C0168-7484-4741-81AB-8A716990EFDB}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
RasterServiceHelper._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._8F0541A3_D5BE_4B3F_A8D9_062D5579E19B_0_10_2.IRasterServiceHelper, comtypes.gen._8F0541A3_D5BE_4B3F_A8D9_062D5579E19B_0_10_2.IRasterServiceHelper2]

class MapServerLegendInfo(CoClass):
    u'The Map Server Legend Info coclass provides legend information for a layer.'
    _reg_clsid_ = GUID('{D0DC51B1-E32E-4249-8CA9-821EDFDF668B}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
MapServerLegendInfo._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMapServerLegendInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

class VerticalLegendItem(CoClass):
    u'Vertical legend item.'
    _reg_clsid_ = GUID('{A9401A48-4649-11D1-880B-080009EC732A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
VerticalLegendItem._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IVerticalLegendItem, ILegendItem, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, ILegendItem2, ILegendItem3, ILayerEffects]

class EmfPictureElement(CoClass):
    u'The Graphic Element to display Emf Pictures.'
    _reg_clsid_ = GUID('{827B9A90-C067-11D2-9F22-00C04F6BC8DD}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
EmfPictureElement._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IElement, IElementProperties, IElementProperties2, IElementProperties3, IFrameElement, IFrameDraw, IFrameProperties, IPictureElement, IPictureElement2, IPictureElement3, IPictureElement4, IPictureElement5, IGraphicElement, IBoundsProperties, IOlePictureElement, comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ITransform2D, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class IMapServerObjects2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to core objects contained within the map document.'
    _iid_ = GUID('{732DA8B0-BEB9-49B6-BF83-C1DF94F22AA0}')
    _idlflags_ = ['oleautomation']
IMapServerObjects2._methods_ = [
    COMMETHOD(['propget', helpstring(u'The layer specified by the map name and layer ID. If the mapName is blank, the default map (active data frame) will be assumed.')], HRESULT, 'LayerID',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], POINTER(ILayer), 'pLayer' ),
              ( ['retval', 'out'], POINTER(c_int), 'ID' )),
    COMMETHOD(['propget', helpstring(u'The map corresponding to the specified map name. Pass in a blank string for mapName to get the default map (active data frame).')], HRESULT, 'Map',
              ( ['in'], BSTR, 'MapName' ),
              ( ['retval', 'out'], POINTER(POINTER(IMap)), 'mapObject' )),
    COMMETHOD(['propget', helpstring(u'The layer specified by the map name and layer ID. If the mapName is blank, the default map (active data frame) will be assumed.')], HRESULT, 'Layer',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], c_int, 'LayerID' ),
              ( ['retval', 'out'], POINTER(POINTER(ILayer)), 'layerObject' )),
    COMMETHOD(['propget', helpstring(u'The page layout object for the current map document.')], HRESULT, 'PageLayout',
              ( ['retval', 'out'], POINTER(POINTER(IPageLayout)), 'pageLayoutObject' )),
    COMMETHOD(['propget', helpstring(u'The thumbnail stored in the map document.')], HRESULT, 'Thumbnail',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IPictureDisp)), 'Picture' )),
    COMMETHOD([helpstring(u'Updates the server info based on the current state of the underlying fine-grained objects.')], HRESULT, 'RefreshServerObjects'),
    COMMETHOD([helpstring(u'Applies the current state of the map description to the map server object.')], HRESULT, 'ApplyMapDescription',
              ( ['in'], POINTER(IMapDescription), 'MapDescription' ),
              ( ['in'], POINTER(IImageDisplay), 'mapDisplay' )),
]
################################################################
## code template for IMapServerObjects2 implementation
##class IMapServerObjects2_Impl(object):
##    @property
##    def Map(self, MapName):
##        u'The map corresponding to the specified map name. Pass in a blank string for mapName to get the default map (active data frame).'
##        #return mapObject
##
##    @property
##    def Layer(self, MapName, LayerID):
##        u'The layer specified by the map name and layer ID. If the mapName is blank, the default map (active data frame) will be assumed.'
##        #return layerObject
##
##    @property
##    def PageLayout(self):
##        u'The page layout object for the current map document.'
##        #return pageLayoutObject
##
##    def RefreshServerObjects(self):
##        u'Updates the server info based on the current state of the underlying fine-grained objects.'
##        #return 
##
##    def ApplyMapDescription(self, MapDescription, mapDisplay):
##        u'Applies the current state of the map description to the map server object.'
##        #return 
##
##    @property
##    def LayerID(self, MapName, pLayer):
##        u'The layer specified by the map name and layer ID. If the mapName is blank, the default map (active data frame) will be assumed.'
##        #return ID
##
##    @property
##    def Thumbnail(self):
##        u'The thumbnail stored in the map document.'
##        #return Picture
##

class RasterBasemapLayer(CoClass):
    u'Basemap Layer containing a Raster.'
    _reg_clsid_ = GUID('{57520261-2608-430B-904E-7B0D48C578D5}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
RasterBasemapLayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterBasemapLayer, ILayer, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, ILayerEffects, ILayerInfo, ILayerGeneralProperties, ILayer2]

ILinePatch._methods_ = [
]
################################################################
## code template for ILinePatch implementation
##class ILinePatch_Impl(object):

IShader._methods_ = [
    COMMETHOD([helpstring(u'Value range is between 0.0 and 1.0 inclusive')], HRESULT, 'ProcessR',
              ( ['in'], c_float, 'valueIn' ),
              ( ['retval', 'out'], POINTER(c_float), 'valueOut' )),
    COMMETHOD([helpstring(u'Value range is between 0.0 and 1.0 inclusive')], HRESULT, 'ProcessG',
              ( ['in'], c_float, 'valueIn' ),
              ( ['retval', 'out'], POINTER(c_float), 'valueOut' )),
    COMMETHOD([helpstring(u'Value range is between 0.0 and 1.0 inclusive')], HRESULT, 'ProcessB',
              ( ['in'], c_float, 'valueIn' ),
              ( ['retval', 'out'], POINTER(c_float), 'valueOut' )),
]
################################################################
## code template for IShader implementation
##class IShader_Impl(object):
##    def ProcessG(self, valueIn):
##        u'Value range is between 0.0 and 1.0 inclusive'
##        #return valueOut
##
##    def ProcessB(self, valueIn):
##        u'Value range is between 0.0 and 1.0 inclusive'
##        #return valueOut
##
##    def ProcessR(self, valueIn):
##        u'Value range is between 0.0 and 1.0 inclusive'
##        #return valueOut
##

class HorizontalBarLegendItem(CoClass):
    u'Horizontal bar legend item.'
    _reg_clsid_ = GUID('{2B65D211-C2C7-11D3-92F3-00600802E603}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
HorizontalBarLegendItem._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IHorizontalBarLegendItem, IVerticalLegendItem, ILegendItem, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, ILegendItem2, ILegendItem3, ILayerEffects]

class MapDescriptions(CoClass):
    u'A collection of Map Description objects.'
    _reg_clsid_ = GUID('{82DBB5C4-CB76-4F59-918A-A4DECB910D84}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IMapDescriptions(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Map Descriptions Interface.'
    _iid_ = GUID('{445788E6-E100-4ABC-A2AF-BF10C1B68F40}')
    _idlflags_ = ['oleautomation']
MapDescriptions._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMapDescriptions, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

class MapFrameDescriptions(CoClass):
    u'A collection of Map Frame Description objects.'
    _reg_clsid_ = GUID('{697C6BF4-6FFB-4D05-BD7E-0A59CC3433D9}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IMapFrameDescriptions(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Map Frame Descriptions Interface.'
    _iid_ = GUID('{7ECDDCDE-6027-4547-B720-52794C52578C}')
    _idlflags_ = ['oleautomation']
MapFrameDescriptions._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMapFrameDescriptions, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

IExtentStack._methods_ = [
    COMMETHOD(['propget', helpstring(u'The number of extents on the stack.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The extent at the specified index.')], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'Extent' )),
    COMMETHOD([helpstring(u'Removes all extents from the stack.')], HRESULT, 'Reset'),
    COMMETHOD([helpstring(u'Zooms to the given extent and places it on the stack.')], HRESULT, 'Do',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'Extent' )),
    COMMETHOD([helpstring(u'Undo the previous extent on the stack.')], HRESULT, 'Undo'),
    COMMETHOD([helpstring(u'Redo the next extent on the stack.')], HRESULT, 'Redo'),
    COMMETHOD([helpstring(u'Indicates if there is an extent that can be undone.')], HRESULT, 'CanUndo',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'CanUndo' )),
    COMMETHOD([helpstring(u'Indicates if there is an extent that can be redone.')], HRESULT, 'CanRedo',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'CanRedo' )),
]
################################################################
## code template for IExtentStack implementation
##class IExtentStack_Impl(object):
##    @property
##    def Count(self):
##        u'The number of extents on the stack.'
##        #return Count
##
##    def Reset(self):
##        u'Removes all extents from the stack.'
##        #return 
##
##    def Do(self, Extent):
##        u'Zooms to the given extent and places it on the stack.'
##        #return 
##
##    def CanUndo(self):
##        u'Indicates if there is an extent that can be undone.'
##        #return CanUndo
##
##    def Undo(self):
##        u'Undo the previous extent on the stack.'
##        #return 
##
##    @property
##    def Item(self, Index):
##        u'The extent at the specified index.'
##        #return Extent
##
##    def CanRedo(self):
##        u'Indicates if there is an extent that can be redone.'
##        #return CanRedo
##
##    def Redo(self):
##        u'Redo the next extent on the stack.'
##        #return 
##

class LayerDescriptions(CoClass):
    u'A collection of Layer Description objects.'
    _reg_clsid_ = GUID('{F26524F6-6A5D-4717-A0C2-A79EB9123DED}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
LayerDescriptions._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILayerDescriptions, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

class IFeatureLayerDrawingDescription2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the FeatureLayer drawing options.'
    _iid_ = GUID('{AD0A78F4-F5F0-4AA3-B4B0-EE7801DF5D59}')
    _idlflags_ = ['oleautomation']
IFeatureLayerDrawingDescription2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Source LayerID.')], HRESULT, 'SourceLayerID',
              ( ['retval', 'out'], POINTER(c_int), 'pSourceLayerID' )),
    COMMETHOD(['propput', helpstring(u'Source LayerID.')], HRESULT, 'SourceLayerID',
              ( ['in'], c_int, 'pSourceLayerID' )),
    COMMETHOD(['propget', helpstring(u'LabelingDescription.')], HRESULT, 'LabelingDescription',
              ( ['retval', 'out'], POINTER(POINTER(ILabelingDescription)), 'ppLabelingDescription' )),
    COMMETHOD(['propput', helpstring(u'LabelingDescription.')], HRESULT, 'LabelingDescription',
              ( ['in'], POINTER(ILabelingDescription), 'ppLabelingDescription' )),
    COMMETHOD(['propget', helpstring(u'FeatureRenderer used to represent symbology of a feature layer.')], HRESULT, 'FeatureRenderer',
              ( ['retval', 'out'], POINTER(POINTER(IFeatureRenderer)), 'ppRenderer' )),
    COMMETHOD(['propputref', helpstring(u'FeatureRenderer used to represent symbology of a feature layer.')], HRESULT, 'FeatureRenderer',
              ( ['in'], POINTER(IFeatureRenderer), 'ppRenderer' )),
    COMMETHOD(['propget', helpstring(u'Indicates if symbols are scaled for the layer.')], HRESULT, 'ScaleSymbols',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Scale' )),
    COMMETHOD(['propput', helpstring(u'Indicates if symbols are scaled for the layer.')], HRESULT, 'ScaleSymbols',
              ( ['in'], VARIANT_BOOL, 'Scale' )),
]
################################################################
## code template for IFeatureLayerDrawingDescription2 implementation
##class IFeatureLayerDrawingDescription2_Impl(object):
##    def FeatureRenderer(self, ppRenderer):
##        u'FeatureRenderer used to represent symbology of a feature layer.'
##        #return 
##
##    def _get(self):
##        u'Source LayerID.'
##        #return pSourceLayerID
##    def _set(self, pSourceLayerID):
##        u'Source LayerID.'
##    SourceLayerID = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if symbols are scaled for the layer.'
##        #return Scale
##    def _set(self, Scale):
##        u'Indicates if symbols are scaled for the layer.'
##    ScaleSymbols = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'LabelingDescription.'
##        #return ppLabelingDescription
##    def _set(self, ppLabelingDescription):
##        u'LabelingDescription.'
##    LabelingDescription = property(_get, _set, doc = _set.__doc__)
##

class BmpPictureElement(CoClass):
    u'The Graphic Element to display BMP Pictures.'
    _reg_clsid_ = GUID('{827B9A91-C067-11D2-9F22-00C04F6BC8DD}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
BmpPictureElement._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IElement, IElementProperties, IElementProperties2, IElementProperties3, IFrameElement, IFrameDraw, IFrameProperties, IPictureElement, IPictureElement2, IPictureElement3, IPictureElement4, IPictureElement5, IGraphicElement, IBoundsProperties, IOlePictureElement, comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ITransform2D, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

ILegendItem._methods_ = [
    COMMETHOD(['propget', helpstring(u'Name of the style.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the style is compatible with the specified layer.')], HRESULT, 'CanDisplay',
              ( ['in'], POINTER(ILayer), 'Layer' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'result' )),
    COMMETHOD(['propget', helpstring(u'Associated layer.')], HRESULT, 'Layer',
              ( ['retval', 'out'], POINTER(POINTER(ILayer)), 'Layer' )),
    COMMETHOD(['propputref', helpstring(u'Associated layer.')], HRESULT, 'Layer',
              ( ['in'], POINTER(ILayer), 'Layer' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the item starts a new column in the legend.')], HRESULT, 'NewColumn',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the item starts a new column in the legend.')], HRESULT, 'NewColumn',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Number of columns in the legend item.')], HRESULT, 'Columns',
              ( ['retval', 'out'], POINTER(c_short), 'Columns' )),
    COMMETHOD(['propput', helpstring(u'Number of columns in the legend item.')], HRESULT, 'Columns',
              ( ['in'], c_short, 'Columns' )),
    COMMETHOD(['propget', helpstring(u'Indicates if classes must appear in a single column or whether they can be split across multiple columns.')], HRESULT, 'KeepTogether',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if classes must appear in a single column or whether they can be split across multiple columns.')], HRESULT, 'KeepTogether',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates if layer name is visibile.')], HRESULT, 'ShowLayerName',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'ShowLayerName' )),
    COMMETHOD(['propput', helpstring(u'Indicates if layer name is visibile.')], HRESULT, 'ShowLayerName',
              ( ['in'], VARIANT_BOOL, 'ShowLayerName' )),
    COMMETHOD(['propget', helpstring(u'Text symbol used to draw the layer name.')], HRESULT, 'LayerNameSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol)), 'Symbol' )),
    COMMETHOD(['propput', helpstring(u'Text symbol used to draw the layer name.')], HRESULT, 'LayerNameSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'Zero-based index of the legend group shown by this item.  Use -1 to show all legend groups using this item.')], HRESULT, 'GroupIndex',
              ( ['retval', 'out'], POINTER(c_int), 'Index' )),
    COMMETHOD(['propput', helpstring(u'Zero-based index of the legend group shown by this item.  Use -1 to show all legend groups using this item.')], HRESULT, 'GroupIndex',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD(['propget', helpstring(u'Indicates if heading is visibile.')], HRESULT, 'ShowHeading',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'ShowHeading' )),
    COMMETHOD(['propput', helpstring(u'Indicates if heading is visibile.')], HRESULT, 'ShowHeading',
              ( ['in'], VARIANT_BOOL, 'ShowHeading' )),
    COMMETHOD(['propget', helpstring(u'Text symbol used to draw the heading.')], HRESULT, 'HeadingSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol)), 'Symbol' )),
    COMMETHOD(['propput', helpstring(u'Text symbol used to draw the heading.')], HRESULT, 'HeadingSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'Default formatting information for the legend classes.  Renderer may override.')], HRESULT, 'LegendClassFormat',
              ( ['retval', 'out'], POINTER(POINTER(ILegendClassFormat)), 'Format' )),
    COMMETHOD(['propput', helpstring(u'Default formatting information for the legend classes.  Renderer may override.')], HRESULT, 'LegendClassFormat',
              ( ['in'], POINTER(ILegendClassFormat), 'Format' )),
    COMMETHOD(['propget', helpstring(u'Indicates if labels are visible.')], HRESULT, 'ShowLabels',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'ShowLabels' )),
    COMMETHOD(['propput', helpstring(u'Indicates if labels are visible.')], HRESULT, 'ShowLabels',
              ( ['in'], VARIANT_BOOL, 'ShowLabels' )),
    COMMETHOD(['propget', helpstring(u'Indicates if descriptions are visible.')], HRESULT, 'ShowDescriptions',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'ShowDescriptions' )),
    COMMETHOD(['propput', helpstring(u'Indicates if descriptions are visible.')], HRESULT, 'ShowDescriptions',
              ( ['in'], VARIANT_BOOL, 'ShowDescriptions' )),
    COMMETHOD([helpstring(u'Rebuilds the list of graphics.  Call whenever the associated layer changes.')], HRESULT, 'CreateGraphics',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], POINTER(ILegendFormat), 'LegendFormat' )),
    COMMETHOD(['propget', helpstring(u'Width of the item in points. Must call CreateGraphics first.')], HRESULT, 'Width',
              ( ['retval', 'out'], POINTER(c_double), 'Width' )),
    COMMETHOD(['propget', helpstring(u'Height of the item in points. Must call CreateGraphics first.')], HRESULT, 'Height',
              ( ['retval', 'out'], POINTER(c_double), 'Height' )),
    COMMETHOD(['propget', helpstring(u'List of graphics that represent the legend item.  Must call CreateGraphics first.')], HRESULT, 'Graphics',
              ( ['retval', 'out'], POINTER(POINTER(IEnumElement)), 'Graphics' )),
]
################################################################
## code template for ILegendItem implementation
##class ILegendItem_Impl(object):
##    def Layer(self, Layer):
##        u'Associated layer.'
##        #return 
##
##    @property
##    def Name(self):
##        u'Name of the style.'
##        #return Name
##
##    def _get(self):
##        u'Indicates if layer name is visibile.'
##        #return ShowLayerName
##    def _set(self, ShowLayerName):
##        u'Indicates if layer name is visibile.'
##    ShowLayerName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if labels are visible.'
##        #return ShowLabels
##    def _set(self, ShowLabels):
##        u'Indicates if labels are visible.'
##    ShowLabels = property(_get, _set, doc = _set.__doc__)
##
##    def CreateGraphics(self, Display, LegendFormat):
##        u'Rebuilds the list of graphics.  Call whenever the associated layer changes.'
##        #return 
##
##    def _get(self):
##        u'Indicates if descriptions are visible.'
##        #return ShowDescriptions
##    def _set(self, ShowDescriptions):
##        u'Indicates if descriptions are visible.'
##    ShowDescriptions = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Height(self):
##        u'Height of the item in points. Must call CreateGraphics first.'
##        #return Height
##
##    def _get(self):
##        u'Indicates if heading is visibile.'
##        #return ShowHeading
##    def _set(self, ShowHeading):
##        u'Indicates if heading is visibile.'
##    ShowHeading = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Width(self):
##        u'Width of the item in points. Must call CreateGraphics first.'
##        #return Width
##
##    @property
##    def CanDisplay(self, Layer):
##        u'Indicates if the style is compatible with the specified layer.'
##        #return result
##
##    def _get(self):
##        u'Indicates if classes must appear in a single column or whether they can be split across multiple columns.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if classes must appear in a single column or whether they can be split across multiple columns.'
##    KeepTogether = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Text symbol used to draw the heading.'
##        #return Symbol
##    def _set(self, Symbol):
##        u'Text symbol used to draw the heading.'
##    HeadingSymbol = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Graphics(self):
##        u'List of graphics that represent the legend item.  Must call CreateGraphics first.'
##        #return Graphics
##
##    def _get(self):
##        u'Zero-based index of the legend group shown by this item.  Use -1 to show all legend groups using this item.'
##        #return Index
##    def _set(self, Index):
##        u'Zero-based index of the legend group shown by this item.  Use -1 to show all legend groups using this item.'
##    GroupIndex = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Text symbol used to draw the layer name.'
##        #return Symbol
##    def _set(self, Symbol):
##        u'Text symbol used to draw the layer name.'
##    LayerNameSymbol = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Default formatting information for the legend classes.  Renderer may override.'
##        #return Format
##    def _set(self, Format):
##        u'Default formatting information for the legend classes.  Renderer may override.'
##    LegendClassFormat = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Number of columns in the legend item.'
##        #return Columns
##    def _set(self, Columns):
##        u'Number of columns in the legend item.'
##    Columns = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the item starts a new column in the legend.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if the item starts a new column in the legend.'
##    NewColumn = property(_get, _set, doc = _set.__doc__)
##

class UniqueValueInfo(CoClass):
    u'UniqueValueRendererInfoClass Class'
    _reg_clsid_ = GUID('{44EB1BFD-49FD-4312-A26C-22006A3120BC}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
UniqueValueInfo._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IUniqueValueInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersionSupportGEN]

class ClassBreakInfo(CoClass):
    u'ClassBreaksRendererInfoClass Class'
    _reg_clsid_ = GUID('{142D87F7-AFDB-4068-AFD1-4C12EC8E1EAF}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
ClassBreakInfo._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IClassBreakInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersionSupportGEN]

class FeatureServiceEditExtension(CoClass):
    u'FeatureService edit extension.'
    _reg_clsid_ = GUID('{E85CB26E-E32D-442A-A178-84645F91EA26}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IFeatureServiceEditExtension(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    _iid_ = GUID('{A1F6F4FE-0E7E-46F9-B70A-F25E785BA693}')
    _idlflags_ = ['oleautomation']
FeatureServiceEditExtension._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IFeatureServiceEditExtension, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersionSupportGEN]

class MapServerBookmarks(CoClass):
    u'A collection of Map Server Bookmark objects.'
    _reg_clsid_ = GUID('{2EAA5ECA-3597-4747-8F0B-C52B559C01C7}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
MapServerBookmarks._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMapServerBookmarks, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

class TifPictureElement(CoClass):
    u'Graphic Element to display TIF Pictures.'
    _reg_clsid_ = GUID('{5E7C0920-14A5-11D3-80CF-0080C7597E71}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
TifPictureElement._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IElement, IElementProperties, IElementProperties2, IElementProperties3, IFrameElement, IFrameDraw, IFrameProperties, IPictureElement, IPictureElement2, IPictureElement3, IPictureElement4, IPictureElement5, IGraphicElement, IBoundsProperties, IOlePictureElement, comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ITransform2D, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

IAreaPatch._methods_ = [
]
################################################################
## code template for IAreaPatch implementation
##class IAreaPatch_Impl(object):

class ClassBreakInfos(CoClass):
    u'A collection of ClassBreakInfo objects.'
    _reg_clsid_ = GUID('{DCE7F1AC-39A7-45B0-81E9-B3A0F8371B93}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
ClassBreakInfos._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IClassBreakInfos, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

ILayerFields._methods_ = [
    COMMETHOD(['propget', helpstring(u'The number of fields.')], HRESULT, 'FieldCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The field at the specified index.')], HRESULT, 'Field',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IField)), 'Field' )),
    COMMETHOD(['propget', helpstring(u'Extended field information for the field at the specified index.')], HRESULT, 'FieldInfo',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFieldInfo)), 'FieldInfo' )),
    COMMETHOD([helpstring(u'Returns the index of the field with the specified name.')], HRESULT, 'FindField',
              ( ['in'], BSTR, 'FieldName' ),
              ( ['retval', 'out'], POINTER(c_int), 'Index' )),
]
################################################################
## code template for ILayerFields implementation
##class ILayerFields_Impl(object):
##    @property
##    def Field(self, Index):
##        u'The field at the specified index.'
##        #return Field
##
##    @property
##    def FieldCount(self):
##        u'The number of fields.'
##        #return Count
##
##    def FindField(self, FieldName):
##        u'Returns the index of the field with the specified name.'
##        #return Index
##
##    @property
##    def FieldInfo(self, Index):
##        u'Extended field information for the field at the specified index.'
##        #return FieldInfo
##

class IDataGraphTPrivate(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members for internal use.'
    _iid_ = GUID('{7CCA3006-FEA6-4B9B-98CF-9BC00196EF29}')
    _idlflags_ = ['oleautomation']
IDataGraphTPrivate._methods_ = [
    COMMETHOD(['restricted', helpstring(u'For internal use only.'), 'hidden', 'propget'], HRESULT, 'Internal',
              ( [], POINTER(POINTER(IUnknown)), 'ppTChart' )),
    COMMETHOD([helpstring(u'For internal use only.')], HRESULT, 'SelectByRect',
              ( ['in'], VARIANT_BOOL, 'bAdd' ),
              ( ['in'], c_int, 'Left' ),
              ( ['in'], c_int, 'top' ),
              ( ['in'], c_int, 'Right' ),
              ( ['in'], c_int, 'bottom' )),
    COMMETHOD([helpstring(u'For internal use only.')], HRESULT, 'Property',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], POINTER(VARIANT), 'val' )),
    COMMETHOD([helpstring(u'Data source for the series. Can be table, feature, raster layer, or name of another series for function series. No field cleaning happens.')], HRESULT, 'ReplaceSourceData',
              ( ['in'], c_int, 'idx' ),
              ( ['in'], VARIANT, 'var' )),
]
################################################################
## code template for IDataGraphTPrivate implementation
##class IDataGraphTPrivate_Impl(object):
##    def SelectByRect(self, bAdd, Left, top, Right, bottom):
##        u'For internal use only.'
##        #return 
##
##    @property
##    def Internal(self, ppTChart):
##        u'For internal use only.'
##        #return 
##
##    def ReplaceSourceData(self, idx, var):
##        u'Data source for the series. Can be table, feature, raster layer, or name of another series for function series. No field cleaning happens.'
##        #return 
##
##    def Property(self, Name, val):
##        u'For internal use only.'
##        #return 
##

class UniqueValueInfos(CoClass):
    u'A collection of UniqueValueInfo objects.'
    _reg_clsid_ = GUID('{13C7FD69-E681-4F23-B1FA-D40684C3B332}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
UniqueValueInfos._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IUniqueValueInfos, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class JpgPictureElement(CoClass):
    u'Graphic Element to display JPG Pictures.'
    _reg_clsid_ = GUID('{06AC0980-1953-11D3-A3EE-0004AC1B1D86}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
JpgPictureElement._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IElement, IElementProperties, IElementProperties2, IElementProperties3, IFrameElement, IFrameDraw, IFrameProperties, IPictureElement, IPictureElement2, IPictureElement3, IPictureElement4, IPictureElement5, IGraphicElement, IBoundsProperties, IOlePictureElement, comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ITransform2D, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class MapServerFindResults(CoClass):
    u'A collection of Map Server Find Result objects.'
    _reg_clsid_ = GUID('{F6AC7A93-95A9-455A-8FF3-EEE4A46E073A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
MapServerFindResults._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMapServerFindResults, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

ILayerDrawingDescriptionFactory._methods_ = [
    COMMETHOD([helpstring(u'Returns if a drawing description can be created for the given layer.')], HRESULT, 'CanCreate',
              ( ['in'], POINTER(ILayer), 'pLayer' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'CanCreate' )),
    COMMETHOD([helpstring(u'Returns layer drawing description for the given layer.')], HRESULT, 'CreateLayerDrawingDescription',
              ( ['in'], POINTER(ILayer), 'pLayer' ),
              ( ['retval', 'out'], POINTER(POINTER(ILayerDrawingDescription)), 'ppLayerDrawingDescription' )),
]
################################################################
## code template for ILayerDrawingDescriptionFactory implementation
##class ILayerDrawingDescriptionFactory_Impl(object):
##    def CreateLayerDrawingDescription(self, pLayer):
##        u'Returns layer drawing description for the given layer.'
##        #return ppLayerDrawingDescription
##
##    def CanCreate(self, pLayer):
##        u'Returns if a drawing description can be created for the given layer.'
##        #return CanCreate
##

ILegendClassFormat._methods_ = [
    COMMETHOD(['propget', helpstring(u'Text symbol used to draw the legend group labels.')], HRESULT, 'LabelSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol)), 'Symbol' )),
    COMMETHOD(['propput', helpstring(u'Text symbol used to draw the legend group labels.')], HRESULT, 'LabelSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'Text symbol used to draw legend group descriptions.')], HRESULT, 'DescriptionSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol)), 'Symbol' )),
    COMMETHOD(['propput', helpstring(u'Text symbol used to draw legend group descriptions.')], HRESULT, 'DescriptionSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'Width of the patch in points.')], HRESULT, 'PatchWidth',
              ( ['retval', 'out'], POINTER(c_double), 'Width' )),
    COMMETHOD(['propput', helpstring(u'Width of the patch in points.')], HRESULT, 'PatchWidth',
              ( ['in'], c_double, 'Width' )),
    COMMETHOD(['propget', helpstring(u'Height of the patch in points.')], HRESULT, 'PatchHeight',
              ( ['retval', 'out'], POINTER(c_double), 'Height' )),
    COMMETHOD(['propput', helpstring(u'Height of the patch in points.')], HRESULT, 'PatchHeight',
              ( ['in'], c_double, 'Height' )),
    COMMETHOD(['propget', helpstring(u'The line patch. (Optional. If non-null, this overrides default line patch specified by ILegend.LegendFormat).')], HRESULT, 'LinePatch',
              ( ['retval', 'out'], POINTER(POINTER(ILinePatch)), 'Shape' )),
    COMMETHOD(['propput', helpstring(u'The line patch. (Optional. If non-null, this overrides default line patch specified by ILegend.LegendFormat).')], HRESULT, 'LinePatch',
              ( ['in'], POINTER(ILinePatch), 'Shape' )),
    COMMETHOD(['propget', helpstring(u'The area patch. (Optional.  If non-null, this overrides default area patch specified by ILegend.LegendFormat).')], HRESULT, 'AreaPatch',
              ( ['retval', 'out'], POINTER(POINTER(IAreaPatch)), 'Shape' )),
    COMMETHOD(['propput', helpstring(u'The area patch. (Optional.  If non-null, this overrides default area patch specified by ILegend.LegendFormat).')], HRESULT, 'AreaPatch',
              ( ['in'], POINTER(IAreaPatch), 'Shape' )),
]
################################################################
## code template for ILegendClassFormat implementation
##class ILegendClassFormat_Impl(object):
##    def _get(self):
##        u'Width of the patch in points.'
##        #return Width
##    def _set(self, Width):
##        u'Width of the patch in points.'
##    PatchWidth = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The line patch. (Optional. If non-null, this overrides default line patch specified by ILegend.LegendFormat).'
##        #return Shape
##    def _set(self, Shape):
##        u'The line patch. (Optional. If non-null, this overrides default line patch specified by ILegend.LegendFormat).'
##    LinePatch = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Height of the patch in points.'
##        #return Height
##    def _set(self, Height):
##        u'Height of the patch in points.'
##    PatchHeight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The area patch. (Optional.  If non-null, this overrides default area patch specified by ILegend.LegendFormat).'
##        #return Shape
##    def _set(self, Shape):
##        u'The area patch. (Optional.  If non-null, this overrides default area patch specified by ILegend.LegendFormat).'
##    AreaPatch = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Text symbol used to draw the legend group labels.'
##        #return Symbol
##    def _set(self, Symbol):
##        u'Text symbol used to draw the legend group labels.'
##    LabelSymbol = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Text symbol used to draw legend group descriptions.'
##        #return Symbol
##    def _set(self, Symbol):
##        u'Text symbol used to draw legend group descriptions.'
##    DescriptionSymbol = property(_get, _set, doc = _set.__doc__)
##

class ImgPictureElement(CoClass):
    u'Graphic Element to display IMG Pictures. This coclass is deprecated. It will not be available in a future release.'
    _reg_clsid_ = GUID('{1C0D9B20-1953-11D3-A3EE-0004AC1B1D86}')
    _idlflags_ = ['hidden']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
ImgPictureElement._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IElement, IElementProperties, IElementProperties2, IElementProperties3, IFrameElement, IFrameDraw, IFrameProperties, IPictureElement, IPictureElement2, IPictureElement3, IPictureElement4, IPictureElement5, IGraphicElement, IBoundsProperties, IOlePictureElement, comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ITransform2D, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

IRasterLayerDrawingDescription._methods_ = [
    COMMETHOD(['propget', helpstring(u'RasterRenderer used to represent symbology of a raster layer.')], HRESULT, 'RasterRenderer',
              ( ['retval', 'out'], POINTER(POINTER(IRasterRenderer)), 'ppRenderer' )),
    COMMETHOD(['propputref', helpstring(u'RasterRenderer used to represent symbology of a raster layer.')], HRESULT, 'RasterRenderer',
              ( ['in'], POINTER(IRasterRenderer), 'ppRenderer' )),
]
################################################################
## code template for IRasterLayerDrawingDescription implementation
##class IRasterLayerDrawingDescription_Impl(object):
##    def RasterRenderer(self, ppRenderer):
##        u'RasterRenderer used to represent symbology of a raster layer.'
##        #return 
##

IImageServerDownloadResults._methods_ = [
    COMMETHOD(['propget', helpstring(u'The download result count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propget', helpstring(u'The download result at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IImageServerDownloadResult)), 'pDownloadResult' )),
    COMMETHOD([helpstring(u'Removes the download result at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all download results.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Adds a download result.')], HRESULT, 'Add',
              ( ['in'], POINTER(IImageServerDownloadResult), 'pDownloadResult' )),
    COMMETHOD([helpstring(u'Adds a download result at the specified position.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(IImageServerDownloadResult), 'pDownloadResult' )),
]
################################################################
## code template for IImageServerDownloadResults implementation
##class IImageServerDownloadResults_Impl(object):
##    @property
##    def Count(self):
##        u'The download result count.'
##        #return pCount
##
##    def Insert(self, Index, pDownloadResult):
##        u'Adds a download result at the specified position.'
##        #return 
##
##    def Remove(self, Index):
##        u'Removes the download result at the specified position.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'The download result at the specified position.'
##        #return pDownloadResult
##
##    def RemoveAll(self):
##        u'Removes all download results.'
##        #return 
##
##    def Add(self, pDownloadResult):
##        u'Adds a download result.'
##        #return 
##

IRasterStretch._methods_ = [
    COMMETHOD(['propput', helpstring(u'Current stretch type.')], HRESULT, 'StretchType',
              ( ['in'], esriRasterStretchTypesEnum, 'en_stretch' )),
    COMMETHOD(['propget', helpstring(u'Current stretch type.')], HRESULT, 'StretchType',
              ( ['retval', 'out'], POINTER(esriRasterStretchTypesEnum), 'en_stretch' )),
    COMMETHOD(['propput', helpstring(u'Standard deviation parameter for the stretch renderer.')], HRESULT, 'StandardDeviationsParam',
              ( ['in'], c_double, 'param' )),
    COMMETHOD(['propget', helpstring(u'Standard deviation parameter for the stretch renderer.')], HRESULT, 'StandardDeviationsParam',
              ( ['retval', 'out'], POINTER(c_double), 'param' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the stretch is inverted.')], HRESULT, 'Invert',
              ( ['in'], VARIANT_BOOL, 'pInvert' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the stretch is inverted.')], HRESULT, 'Invert',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pInvert' )),
    COMMETHOD(['propput', helpstring(u'Indicates if a background value is being used.')], HRESULT, 'Background',
              ( ['in'], VARIANT_BOOL, 'b' )),
    COMMETHOD(['propget', helpstring(u'Indicates if a background value is being used.')], HRESULT, 'Background',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'b' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether an array of background values is being used.')], HRESULT, 'BackgroundValues',
              ( ['retval', 'out'], POINTER(c_double), 'pBkg' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether an array of background values is being used.')], HRESULT, 'BackgroundValues',
              ( ['in'], POINTER(c_double), 'pBkg' )),
    COMMETHOD(['propget', helpstring(u'Background display color.')], HRESULT, 'BackgroundColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'ppColor' )),
    COMMETHOD(['propputref', helpstring(u'Background display color.')], HRESULT, 'BackgroundColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'ppColor' )),
]
################################################################
## code template for IRasterStretch implementation
##class IRasterStretch_Impl(object):
##    def _get(self):
##        u'Standard deviation parameter for the stretch renderer.'
##        #return param
##    def _set(self, param):
##        u'Standard deviation parameter for the stretch renderer.'
##    StandardDeviationsParam = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if a background value is being used.'
##        #return b
##    def _set(self, b):
##        u'Indicates if a background value is being used.'
##    Background = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the stretch is inverted.'
##        #return pInvert
##    def _set(self, pInvert):
##        u'Indicates if the stretch is inverted.'
##    Invert = property(_get, _set, doc = _set.__doc__)
##
##    def BackgroundColor(self, ppColor):
##        u'Background display color.'
##        #return 
##
##    def _get(self):
##        u'Current stretch type.'
##        #return en_stretch
##    def _set(self, en_stretch):
##        u'Current stretch type.'
##    StretchType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether an array of background values is being used.'
##        #return pBkg
##    def _set(self, pBkg):
##        u'Indicates whether an array of background values is being used.'
##    BackgroundValues = property(_get, _set, doc = _set.__doc__)
##

IFrameDraw._methods_ = [
    COMMETHOD([helpstring(u"Draw the frame's shadow and background.")], HRESULT, 'DrawBackground',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'CancelTracker' )),
    COMMETHOD([helpstring(u'Draw the draft mode representation of the frame.')], HRESULT, 'DrawDraftMode',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'CancelTracker' )),
    COMMETHOD([helpstring(u"Draw the frame's border.")], HRESULT, 'DrawForeground',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'CancelTracker' )),
]
################################################################
## code template for IFrameDraw implementation
##class IFrameDraw_Impl(object):
##    def DrawBackground(self, Display, CancelTracker):
##        u"Draw the frame's shadow and background."
##        #return 
##
##    def DrawForeground(self, Display, CancelTracker):
##        u"Draw the frame's border."
##        #return 
##
##    def DrawDraftMode(self, Display, CancelTracker):
##        u'Draw the draft mode representation of the frame.'
##        #return 
##

class SidPictureElement(CoClass):
    u'Graphic Element to display SID Pictures. This coclass is deprecated. It will not be available in a future release.'
    _reg_clsid_ = GUID('{356EFC60-1953-11D3-A3EE-0004AC1B1D86}')
    _idlflags_ = ['hidden']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
SidPictureElement._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IElement, IElementProperties, IElementProperties2, IElementProperties3, IFrameElement, IFrameDraw, IFrameProperties, IPictureElement, IPictureElement2, IPictureElement3, IPictureElement4, IPictureElement5, IGraphicElement, IBoundsProperties, IOlePictureElement, comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ITransform2D, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

IDatasetRenderer._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The Dataset associated with the renderer.')], HRESULT, 'Dataset',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataset), 'ppDataset' )),
    COMMETHOD(['propget', helpstring(u'The Dataset associated with the renderer.')], HRESULT, 'Dataset',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataset)), 'ppDataset' )),
]
################################################################
## code template for IDatasetRenderer implementation
##class IDatasetRenderer_Impl(object):
##    @property
##    def Dataset(self, ppDataset):
##        u'The Dataset associated with the renderer.'
##        #return 
##

ISelectionEnvironmentStorage._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if objects save their selections.')], HRESULT, 'SaveSelections',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'saveSel' )),
    COMMETHOD(['propput', helpstring(u'Indicates if objects save their selections.')], HRESULT, 'SaveSelections',
              ( ['in'], VARIANT_BOOL, 'saveSel' )),
]
################################################################
## code template for ISelectionEnvironmentStorage implementation
##class ISelectionEnvironmentStorage_Impl(object):
##    def _get(self):
##        u'Indicates if objects save their selections.'
##        #return saveSel
##    def _set(self, saveSel):
##        u'Indicates if objects save their selections.'
##    SaveSelections = property(_get, _set, doc = _set.__doc__)
##

IImageServerDownloadResult._methods_ = [
    COMMETHOD(['propget', helpstring(u'The list of raster IDs.')], HRESULT, 'RasterIDs',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray)), 'ppOIDs' )),
    COMMETHOD(['propputref', helpstring(u'The list of raster IDs.')], HRESULT, 'RasterIDs',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'ppOIDs' )),
    COMMETHOD(['propget', helpstring(u'The download file name.')], HRESULT, 'URI',
              ( ['retval', 'out'], POINTER(BSTR), 'pURI' )),
    COMMETHOD(['propput', helpstring(u'The download file name.')], HRESULT, 'URI',
              ( ['in'], BSTR, 'pURI' )),
    COMMETHOD(['propget', helpstring(u'The download file size in bytes.')], HRESULT, 'FileSize',
              ( ['retval', 'out'], POINTER(c_ulonglong), 'pSize' )),
    COMMETHOD(['propput', helpstring(u'The download file size in bytes.')], HRESULT, 'FileSize',
              ( ['in'], c_ulonglong, 'pSize' )),
]
################################################################
## code template for IImageServerDownloadResult implementation
##class IImageServerDownloadResult_Impl(object):
##    def RasterIDs(self, ppOIDs):
##        u'The list of raster IDs.'
##        #return 
##
##    def _get(self):
##        u'The download file name.'
##        #return pURI
##    def _set(self, pURI):
##        u'The download file name.'
##    URI = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The download file size in bytes.'
##        #return pSize
##    def _set(self, pSize):
##        u'The download file size in bytes.'
##    FileSize = property(_get, _set, doc = _set.__doc__)
##

class IMultiResolutionRenderer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to multi-resolution renderers.'
    _iid_ = GUID('{D16A4D52-A926-4E8E-A7A2-535950C86AFA}')
    _idlflags_ = ['oleautomation']
IMultiResolutionRenderer._methods_ = [
    COMMETHOD(['propput', helpstring(u'The area of interest to be rendered.')], HRESULT, 'AreaOfInterest',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'ppAOI' )),
    COMMETHOD(['propget', helpstring(u'The area of interest to be rendered.')], HRESULT, 'AreaOfInterest',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'ppAOI' )),
    COMMETHOD(['propput', helpstring(u'The resolution to be rendered.')], HRESULT, 'Resolution',
              ( ['in'], c_double, 'pResolution' )),
    COMMETHOD(['propget', helpstring(u'The resolution to be rendered.')], HRESULT, 'Resolution',
              ( ['retval', 'out'], POINTER(c_double), 'pResolution' )),
    COMMETHOD(['propput', helpstring(u'The minimum resolution at which data are rendered.')], HRESULT, 'MinVisibleResolution',
              ( ['in'], c_double, 'pResolution' )),
    COMMETHOD(['propget', helpstring(u'The minimum resolution at which data are rendered.')], HRESULT, 'MinVisibleResolution',
              ( ['retval', 'out'], POINTER(c_double), 'pResolution' )),
]
################################################################
## code template for IMultiResolutionRenderer implementation
##class IMultiResolutionRenderer_Impl(object):
##    def _get(self):
##        u'The minimum resolution at which data are rendered.'
##        #return pResolution
##    def _set(self, pResolution):
##        u'The minimum resolution at which data are rendered.'
##    MinVisibleResolution = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The resolution to be rendered.'
##        #return pResolution
##    def _set(self, pResolution):
##        u'The resolution to be rendered.'
##    Resolution = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The area of interest to be rendered.'
##        #return ppAOI
##    def _set(self, ppAOI):
##        u'The area of interest to be rendered.'
##    AreaOfInterest = property(_get, _set, doc = _set.__doc__)
##

IFeatureExtent._methods_ = [
    COMMETHOD(['propget', helpstring(u'Name of the map (data frame).')], HRESULT, 'MapName',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'Name of the map (data frame).')], HRESULT, 'MapName',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'The ID of the layer.')], HRESULT, 'LayerID',
              ( ['retval', 'out'], POINTER(c_int), 'LayerID' )),
    COMMETHOD(['propput', helpstring(u'The ID of the layer.')], HRESULT, 'LayerID',
              ( ['in'], c_int, 'LayerID' )),
    COMMETHOD(['propget', helpstring(u'The set of feature IDs.')], HRESULT, 'FeatureIDs',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFIDSet)), 'FeatureIDs' )),
    COMMETHOD(['propput', helpstring(u'The set of feature IDs.')], HRESULT, 'FeatureIDs',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFIDSet), 'FeatureIDs' )),
    COMMETHOD(['propget', helpstring(u'Ratio used to expand the extent.')], HRESULT, 'ExpandRatio',
              ( ['retval', 'out'], POINTER(c_double), 'ratio' )),
    COMMETHOD(['propput', helpstring(u'Ratio used to expand the extent.')], HRESULT, 'ExpandRatio',
              ( ['in'], c_double, 'ratio' )),
    COMMETHOD(['propget', helpstring(u'Scale at which the extent of a single point is drawn.')], HRESULT, 'DefaultScale',
              ( ['retval', 'out'], POINTER(c_double), 'MapScale' )),
    COMMETHOD(['propput', helpstring(u'Scale at which the extent of a single point is drawn.')], HRESULT, 'DefaultScale',
              ( ['in'], c_double, 'MapScale' )),
]
################################################################
## code template for IFeatureExtent implementation
##class IFeatureExtent_Impl(object):
##    def _get(self):
##        u'Name of the map (data frame).'
##        #return Name
##    def _set(self, Name):
##        u'Name of the map (data frame).'
##    MapName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The set of feature IDs.'
##        #return FeatureIDs
##    def _set(self, FeatureIDs):
##        u'The set of feature IDs.'
##    FeatureIDs = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Scale at which the extent of a single point is drawn.'
##        #return MapScale
##    def _set(self, MapScale):
##        u'Scale at which the extent of a single point is drawn.'
##    DefaultScale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Ratio used to expand the extent.'
##        #return ratio
##    def _set(self, ratio):
##        u'Ratio used to expand the extent.'
##    ExpandRatio = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The ID of the layer.'
##        #return LayerID
##    def _set(self, LayerID):
##        u'The ID of the layer.'
##    LayerID = property(_get, _set, doc = _set.__doc__)
##

IFeatureLayer._methods_ = [
    COMMETHOD(['propget', helpstring(u"The layer's feature class.")], HRESULT, 'FeatureClass',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClass)), 'fclass' )),
    COMMETHOD(['propputref', helpstring(u"The layer's feature class.")], HRESULT, 'FeatureClass',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClass), 'fclass' )),
    COMMETHOD(['propget', helpstring(u'Data source type.')], HRESULT, 'DataSourceType',
              ( ['retval', 'out'], POINTER(BSTR), 'Text' )),
    COMMETHOD(['propput', helpstring(u'Data source type.')], HRESULT, 'DataSourceType',
              ( ['in'], BSTR, 'Text' )),
    COMMETHOD(['propget', helpstring(u'Primary display field.')], HRESULT, 'DisplayField',
              ( ['retval', 'out'], POINTER(BSTR), 'FieldName' )),
    COMMETHOD(['propput', helpstring(u'Primary display field.')], HRESULT, 'DisplayField',
              ( ['in'], BSTR, 'FieldName' )),
    COMMETHOD(['propget', helpstring(u'Indicates if layer is selectable.')], HRESULT, 'Selectable',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Value' )),
    COMMETHOD(['propput', helpstring(u'Indicates if layer is selectable.')], HRESULT, 'Selectable',
              ( ['in'], VARIANT_BOOL, 'Value' )),
    COMMETHOD([helpstring(u'Creates a cursor based upon the search criteria.')], HRESULT, 'Search',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'queryFilter' ),
              ( ['in'], VARIANT_BOOL, 'recycling' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureCursor)), 'Cursor' )),
    COMMETHOD(['propget', helpstring(u'Indicates if symbols are scaled for the layer.')], HRESULT, 'ScaleSymbols',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Scale' )),
    COMMETHOD(['propput', helpstring(u'Indicates if symbols are scaled for the layer.')], HRESULT, 'ScaleSymbols',
              ( ['in'], VARIANT_BOOL, 'Scale' )),
]
################################################################
## code template for IFeatureLayer implementation
##class IFeatureLayer_Impl(object):
##    def _get(self):
##        u'Primary display field.'
##        #return FieldName
##    def _set(self, FieldName):
##        u'Primary display field.'
##    DisplayField = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Data source type.'
##        #return Text
##    def _set(self, Text):
##        u'Data source type.'
##    DataSourceType = property(_get, _set, doc = _set.__doc__)
##
##    def Search(self, queryFilter, recycling):
##        u'Creates a cursor based upon the search criteria.'
##        #return Cursor
##
##    def _get(self):
##        u'Indicates if symbols are scaled for the layer.'
##        #return Scale
##    def _set(self, Scale):
##        u'Indicates if symbols are scaled for the layer.'
##    ScaleSymbols = property(_get, _set, doc = _set.__doc__)
##
##    def FeatureClass(self, fclass):
##        u"The layer's feature class."
##        #return 
##
##    def _get(self):
##        u'Indicates if layer is selectable.'
##        #return Value
##    def _set(self, Value):
##        u'Indicates if layer is selectable.'
##    Selectable = property(_get, _set, doc = _set.__doc__)
##

IGeoFeatureLayer._methods_ = [
    COMMETHOD(['propget', helpstring(u'Renderer used to draw the layer.')], HRESULT, 'Renderer',
              ( ['retval', 'out'], POINTER(POINTER(IFeatureRenderer)), 'Renderer' )),
    COMMETHOD(['propputref', helpstring(u'Renderer used to draw the layer.')], HRESULT, 'Renderer',
              ( ['in'], POINTER(IFeatureRenderer), 'Renderer' )),
    COMMETHOD(['propget', helpstring(u'Class id of the property page for the renderer.')], HRESULT, 'RendererPropertyPageClassID',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IUID)), 'clsid' )),
    COMMETHOD(['propput', helpstring(u'Class id of the property page for the renderer.')], HRESULT, 'RendererPropertyPageClassID',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IUID), 'clsid' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer displays annotation.')], HRESULT, 'DisplayAnnotation',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Value' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the layer displays annotation.')], HRESULT, 'DisplayAnnotation',
              ( ['in'], VARIANT_BOOL, 'Value' )),
    COMMETHOD(['propget', helpstring(u'The UID used for annotation properties.')], HRESULT, 'AnnotationPropertiesID',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IUID)), 'uid' )),
    COMMETHOD(['propputref', helpstring(u'The UID used for annotation properties.')], HRESULT, 'AnnotationPropertiesID',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IUID), 'uid' )),
    COMMETHOD(['propget', helpstring(u'Annotation properties.')], HRESULT, 'AnnotationProperties',
              ( ['retval', 'out'], POINTER(POINTER(IAnnotateLayerPropertiesCollection)), 'props' )),
    COMMETHOD(['propput', helpstring(u'Annotation properties.')], HRESULT, 'AnnotationProperties',
              ( ['in'], POINTER(IAnnotateLayerPropertiesCollection), 'props' )),
    COMMETHOD(['propput', helpstring(u'Current map level for drawing symbols.')], HRESULT, 'CurrentMapLevel',
              ( ['in'], c_int, 'rhs' )),
    COMMETHOD(['propget', helpstring(u'The set of features that are excluded from drawing.')], HRESULT, 'ExclusionSet',
              ( ['retval', 'out'], POINTER(POINTER(IFeatureIDSet)), 'FIDs' )),
    COMMETHOD(['propputref', helpstring(u'The set of features that are excluded from drawing.')], HRESULT, 'ExclusionSet',
              ( ['in'], POINTER(IFeatureIDSet), 'FIDs' )),
    COMMETHOD(['propget', helpstring(u'Feature class used for display operations (may include joined fields).')], HRESULT, 'DisplayFeatureClass',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClass)), 'fclass' )),
    COMMETHOD([helpstring(u'Creates a cursor from the display feature class based upon the search criteria.')], HRESULT, 'SearchDisplayFeatures',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'queryFilter' ),
              ( ['in'], VARIANT_BOOL, 'recycling' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureCursor)), 'Cursor' )),
]
################################################################
## code template for IGeoFeatureLayer implementation
##class IGeoFeatureLayer_Impl(object):
##    def _get(self):
##        u'Annotation properties.'
##        #return props
##    def _set(self, props):
##        u'Annotation properties.'
##    AnnotationProperties = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the layer displays annotation.'
##        #return Value
##    def _set(self, Value):
##        u'Indicates if the layer displays annotation.'
##    DisplayAnnotation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Class id of the property page for the renderer.'
##        #return clsid
##    def _set(self, clsid):
##        u'Class id of the property page for the renderer.'
##    RendererPropertyPageClassID = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def DisplayFeatureClass(self):
##        u'Feature class used for display operations (may include joined fields).'
##        #return fclass
##
##    def _set(self, rhs):
##        u'Current map level for drawing symbols.'
##    CurrentMapLevel = property(fset = _set, doc = _set.__doc__)
##
##    def AnnotationPropertiesID(self, uid):
##        u'The UID used for annotation properties.'
##        #return 
##
##    def SearchDisplayFeatures(self, queryFilter, recycling):
##        u'Creates a cursor from the display feature class based upon the search criteria.'
##        #return Cursor
##
##    def Renderer(self, Renderer):
##        u'Renderer used to draw the layer.'
##        #return 
##
##    def ExclusionSet(self, FIDs):
##        u'The set of features that are excluded from drawing.'
##        #return 
##

class DynamicGlyphFactory(CoClass):
    u'Dynamic glyph factory class.'
    _reg_clsid_ = GUID('{040D961D-3434-4698-AA8D-FCF54BF892B0}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
DynamicGlyphFactory._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDynamicGlyphFactory, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDynamicGlyphFactory2]

class IDrawAnnotationGeometry(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to annotation layer geometry drawing properties.'
    _iid_ = GUID('{4944D2AF-6A5E-42D0-A33C-4129285720FC}')
    _idlflags_ = ['oleautomation']
IDrawAnnotationGeometry._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if the annotation geometry will draw.')], HRESULT, 'DrawGeometry',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pUseScale' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the annotation geometry will draw.')], HRESULT, 'DrawGeometry',
              ( ['in'], VARIANT_BOOL, 'pUseScale' )),
    COMMETHOD(['propget', helpstring(u'The line symbol for drawing the geometry.')], HRESULT, 'DrawGeometryLineSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ILineSymbol)), 'Symbol' )),
    COMMETHOD(['propputref', helpstring(u'The line symbol for drawing the geometry.')], HRESULT, 'DrawGeometryLineSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ILineSymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'The marker symbol for drawing the geometry.')], HRESULT, 'DrawGeometryMarkerSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IMarkerSymbol)), 'Symbol' )),
    COMMETHOD(['propputref', helpstring(u'The marker symbol for drawing the geometry.')], HRESULT, 'DrawGeometryMarkerSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IMarkerSymbol), 'Symbol' )),
]
################################################################
## code template for IDrawAnnotationGeometry implementation
##class IDrawAnnotationGeometry_Impl(object):
##    def DrawGeometryMarkerSymbol(self, Symbol):
##        u'The marker symbol for drawing the geometry.'
##        #return 
##
##    def DrawGeometryLineSymbol(self, Symbol):
##        u'The line symbol for drawing the geometry.'
##        #return 
##
##    def _get(self):
##        u'Indicates if the annotation geometry will draw.'
##        #return pUseScale
##    def _set(self, pUseScale):
##        u'Indicates if the annotation geometry will draw.'
##    DrawGeometry = property(_get, _set, doc = _set.__doc__)
##

class RasterTypeInfo(CoClass):
    u'A raster type info object.'
    _reg_clsid_ = GUID('{5860CE85-CB80-4C9C-BD85-CD2B375F4CAC}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
RasterTypeInfo._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterTypeInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]

IFeatureGeometryAccess._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates whether the a feature layer gives access to the geometry of its features.')], HRESULT, 'CanAccessGeometry',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'canAccess' )),
]
################################################################
## code template for IFeatureGeometryAccess implementation
##class IFeatureGeometryAccess_Impl(object):
##    @property
##    def CanAccessGeometry(self):
##        u'Indicates whether the a feature layer gives access to the geometry of its features.'
##        #return canAccess
##

class IDynamicMapTableDescription(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the available properties of a dynamic map table description object.'
    _iid_ = GUID('{475FD083-31BC-49F5-B3A4-E14AFC5B9DA8}')
    _idlflags_ = ['oleautomation']
IDynamicMapTableDescription._methods_ = [
    COMMETHOD(['propget', helpstring(u'Data source for dynamic table.')], HRESULT, 'Source',
              ( ['retval', 'out'], POINTER(POINTER(IMapServerSourceDescription)), 'ppMapServerSourceDescription' )),
    COMMETHOD(['propput', helpstring(u'Data source for dynamic table.')], HRESULT, 'Source',
              ( ['in'], POINTER(IMapServerSourceDescription), 'ppMapServerSourceDescription' )),
]
################################################################
## code template for IDynamicMapTableDescription implementation
##class IDynamicMapTableDescription_Impl(object):
##    def _get(self):
##        u'Data source for dynamic table.'
##        #return ppMapServerSourceDescription
##    def _set(self, ppMapServerSourceDescription):
##        u'Data source for dynamic table.'
##    Source = property(_get, _set, doc = _set.__doc__)
##

class IACLayerAdmin(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the XML-String for the Layerinfo.'
    _iid_ = GUID('{892DBD7B-6C2A-4456-AA7C-5CBD7CD5E595}')
    _idlflags_ = ['oleautomation']
IACLayerAdmin._methods_ = [
    COMMETHOD(['propget', helpstring(u'The XML LayerInfo.')], HRESULT, 'XMLLayerInfo',
              ( ['retval', 'out'], POINTER(BSTR), 'xmlString' )),
]
################################################################
## code template for IACLayerAdmin implementation
##class IACLayerAdmin_Impl(object):
##    @property
##    def XMLLayerInfo(self):
##        u'The XML LayerInfo.'
##        #return xmlString
##

IRenderedRaster._methods_ = [
    COMMETHOD([helpstring(u'Initializes using a layer file.')], HRESULT, 'Init',
              ( ['in'], BSTR, 'LayerFile' )),
    COMMETHOD(['propget', helpstring(u'The full name.')], HRESULT, 'FullName',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName)), 'ppName' )),
    COMMETHOD(['propget', helpstring(u'Indicates if RGB output is required (forced).')], HRESULT, 'ForceRGB',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pForceRGB' )),
    COMMETHOD(['propput', helpstring(u'Indicates if RGB output is required (forced).')], HRESULT, 'ForceRGB',
              ( ['in'], VARIANT_BOOL, 'pForceRGB' )),
    COMMETHOD(['propget', helpstring(u'The source layer.')], HRESULT, 'Layer',
              ( ['retval', 'out'], POINTER(POINTER(ILayer)), 'ppLayer' )),
]
################################################################
## code template for IRenderedRaster implementation
##class IRenderedRaster_Impl(object):
##    @property
##    def Layer(self):
##        u'The source layer.'
##        #return ppLayer
##
##    def Init(self, LayerFile):
##        u'Initializes using a layer file.'
##        #return 
##
##    @property
##    def FullName(self):
##        u'The full name.'
##        #return ppName
##
##    def _get(self):
##        u'Indicates if RGB output is required (forced).'
##        #return pForceRGB
##    def _set(self, pForceRGB):
##        u'Indicates if RGB output is required (forced).'
##    ForceRGB = property(_get, _set, doc = _set.__doc__)
##

IRenderedRaster2._methods_ = [
    COMMETHOD(['propget', helpstring(u'The source raster.')], HRESULT, 'Raster',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster)), 'ppRaster' )),
    COMMETHOD(['propput', helpstring(u'The source raster.')], HRESULT, 'Raster',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'ppRaster' )),
    COMMETHOD(['propget', helpstring(u'The raster renderer.')], HRESULT, 'Renderer',
              ( ['retval', 'out'], POINTER(POINTER(IRasterRenderer)), 'ppRenderer' )),
    COMMETHOD(['propputref', helpstring(u'The raster renderer.')], HRESULT, 'Renderer',
              ( ['in'], POINTER(IRasterRenderer), 'ppRenderer' )),
    COMMETHOD(['propget', helpstring(u'Indicates if alpha channel is to be added.')], HRESULT, 'RGB32',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pRGB32' )),
    COMMETHOD(['propput', helpstring(u'Indicates if alpha channel is to be added.')], HRESULT, 'RGB32',
              ( ['in'], VARIANT_BOOL, 'pRGB32' )),
]
################################################################
## code template for IRenderedRaster2 implementation
##class IRenderedRaster2_Impl(object):
##    def _get(self):
##        u'The source raster.'
##        #return ppRaster
##    def _set(self, ppRaster):
##        u'The source raster.'
##    Raster = property(_get, _set, doc = _set.__doc__)
##
##    def Renderer(self, ppRenderer):
##        u'The raster renderer.'
##        #return 
##
##    def _get(self):
##        u'Indicates if alpha channel is to be added.'
##        #return pRGB32
##    def _set(self, pRGB32):
##        u'Indicates if alpha channel is to be added.'
##    RGB32 = property(_get, _set, doc = _set.__doc__)
##

class IACFeatureLayer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the ArcIMS feature layer.'
    _iid_ = GUID('{AD88322D-533D-4E36-A5C9-1B109AF7A346}')
    _idlflags_ = ['oleautomation']
IACFeatureLayer._methods_ = [
    COMMETHOD(['propget', helpstring(u'Renderer used to draw the layer.')], HRESULT, 'Renderer',
              ( ['retval', 'out'], POINTER(POINTER(IACRenderer)), 'Renderer' )),
    COMMETHOD(['propputref', helpstring(u'Renderer used to draw the layer.')], HRESULT, 'Renderer',
              ( ['in'], POINTER(IACRenderer), 'Renderer' )),
    COMMETHOD(['propget', helpstring(u'The type of the Shape for the features in the layer.')], HRESULT, 'GeometryType',
              ( ['retval', 'out'], POINTER(acGeometryType), 'Type' )),
    COMMETHOD(['propget', helpstring(u"The layer's feature class.")], HRESULT, 'FeatureClass',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClass)), 'FeatureClass' )),
    COMMETHOD(['propget', helpstring(u'The primary display field.')], HRESULT, 'DisplayField',
              ( ['retval', 'out'], POINTER(BSTR), 'FieldName' )),
    COMMETHOD(['propput', helpstring(u'The primary display field.')], HRESULT, 'DisplayField',
              ( ['in'], BSTR, 'FieldName' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer has labels.')], HRESULT, 'HasLabels',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'HasLabels' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer displays annotation.')], HRESULT, 'DisplayAnnotation',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the layer displays annotation.')], HRESULT, 'DisplayAnnotation',
              ( ['in'], VARIANT_BOOL, 'flag' )),
]
################################################################
## code template for IACFeatureLayer implementation
##class IACFeatureLayer_Impl(object):
##    def _get(self):
##        u'The primary display field.'
##        #return FieldName
##    def _set(self, FieldName):
##        u'The primary display field.'
##    DisplayField = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the layer displays annotation.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if the layer displays annotation.'
##    DisplayAnnotation = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def HasLabels(self):
##        u'Indicates if the layer has labels.'
##        #return HasLabels
##
##    @property
##    def GeometryType(self):
##        u'The type of the Shape for the features in the layer.'
##        #return Type
##
##    def Renderer(self, Renderer):
##        u'Renderer used to draw the layer.'
##        #return 
##
##    @property
##    def FeatureClass(self):
##        u"The layer's feature class."
##        #return FeatureClass
##

class IRelateInfo2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that describe a relate.'
    _iid_ = GUID('{597FDA74-3CF8-47BF-B6D4-1EA0A1B0526F}')
    _idlflags_ = ['oleautomation']
IRelateInfo2._methods_ = [
    COMMETHOD(['propget', helpstring(u'The name of the relationship to a table.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propget', helpstring(u'Identifies the specific relationship for a related table.')], HRESULT, 'RelationshipID',
              ( ['retval', 'out'], POINTER(c_int), 'RelationshipID' )),
    COMMETHOD(['propget', helpstring(u'ID of the table related to.')], HRESULT, 'RelatedTableID',
              ( ['retval', 'out'], POINTER(c_int), 'RelatedTableID' )),
    COMMETHOD(['propget', helpstring(u'Role of this table in the relationship.')], HRESULT, 'Role',
              ( ['retval', 'out'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriRelRole), 'Role' )),
    COMMETHOD(['propget', helpstring(u'Cardinality for the relationship.')], HRESULT, 'Cardinality',
              ( ['retval', 'out'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriRelCardinality), 'Cardinality' )),
    COMMETHOD(['propget', helpstring(u'Keyfield of the table related to.')], HRESULT, 'KeyField',
              ( ['retval', 'out'], POINTER(BSTR), 'KeyField' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the relationship class represents a composite relationship in which the origin object class represents the composite object.')], HRESULT, 'IsComposite',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'composite' )),
    COMMETHOD(['propget', helpstring(u'Id of table that maintains the relationhip information between the source and destination table.')], HRESULT, 'RelationshipTableId',
              ( ['retval', 'out'], POINTER(c_int), 'TableID' )),
    COMMETHOD(['propget', helpstring(u'Key field in Relationship Table.')], HRESULT, 'KeyFieldInRelationshipTable',
              ( ['retval', 'out'], POINTER(BSTR), 'KeyField' )),
]
################################################################
## code template for IRelateInfo2 implementation
##class IRelateInfo2_Impl(object):
##    @property
##    def RelationshipTableId(self):
##        u'Id of table that maintains the relationhip information between the source and destination table.'
##        #return TableID
##
##    @property
##    def KeyField(self):
##        u'Keyfield of the table related to.'
##        #return KeyField
##
##    @property
##    def Name(self):
##        u'The name of the relationship to a table.'
##        #return Name
##
##    @property
##    def RelationshipID(self):
##        u'Identifies the specific relationship for a related table.'
##        #return RelationshipID
##
##    @property
##    def IsComposite(self):
##        u'Indicates if the relationship class represents a composite relationship in which the origin object class represents the composite object.'
##        #return composite
##
##    @property
##    def Role(self):
##        u'Role of this table in the relationship.'
##        #return Role
##
##    @property
##    def RelatedTableID(self):
##        u'ID of the table related to.'
##        #return RelatedTableID
##
##    @property
##    def Cardinality(self):
##        u'Cardinality for the relationship.'
##        #return Cardinality
##
##    @property
##    def KeyFieldInRelationshipTable(self):
##        u'Key field in Relationship Table.'
##        #return KeyField
##

IMaplexLabelStyle._methods_ = [
]
################################################################
## code template for IMaplexLabelStyle implementation
##class IMaplexLabelStyle_Impl(object):

class MaplexDictionary(CoClass):
    u'A collection of dictionary entries.'
    _reg_clsid_ = GUID('{20664808-3DE2-1CD1-8A09-08E00DEC7321}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
MaplexDictionary._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMaplexDictionary, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]


# values for enumeration 'esriNetworkArrowType'
esriNetworkArrowTypeNoArrow = 0
esriNetworkArrowTypeEndpoint = 1
esriNetworkArrowTypeMidpoint = 2
esriNetworkArrowType = c_int # enum
IMapServerIdentifyResult2._methods_ = [
    COMMETHOD(['propget', helpstring(u'The layer ID of the identified object.')], HRESULT, 'LayerID',
              ( ['retval', 'out'], POINTER(c_int), 'LayerID' )),
    COMMETHOD(['propget', helpstring(u'The name of the identified object.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Value' )),
    COMMETHOD(['propget', helpstring(u'A set of name-value pairs for the field names and values of the identified object.')], HRESULT, 'Properties',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet)), 'props' )),
    COMMETHOD(['propget', helpstring(u'The geometry of the identified object.')], HRESULT, 'Shape',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry)), 'Shape' )),
    COMMETHOD(['propget', helpstring(u'The related rows (relationships) of the identified object.')], HRESULT, 'RelatedRows',
              ( ['retval', 'out'], POINTER(POINTER(IMapServerRelationships)), 'relationships' )),
    COMMETHOD(['propget', helpstring(u'HTML as text that can be used in popups.')], HRESULT, 'HTMLPopup',
              ( ['retval', 'out'], POINTER(BSTR), 'htmlText' )),
    COMMETHOD(['propget', helpstring(u'The Feature ID of the identified object.')], HRESULT, 'FeatureId',
              ( ['retval', 'out'], POINTER(c_int), 'FeatureId' )),
]
################################################################
## code template for IMapServerIdentifyResult2 implementation
##class IMapServerIdentifyResult2_Impl(object):
##    @property
##    def Name(self):
##        u'The name of the identified object.'
##        #return Value
##
##    @property
##    def HTMLPopup(self):
##        u'HTML as text that can be used in popups.'
##        #return htmlText
##
##    @property
##    def FeatureId(self):
##        u'The Feature ID of the identified object.'
##        #return FeatureId
##
##    @property
##    def Shape(self):
##        u'The geometry of the identified object.'
##        #return Shape
##
##    @property
##    def LayerID(self):
##        u'The layer ID of the identified object.'
##        #return LayerID
##
##    @property
##    def RelatedRows(self):
##        u'The related rows (relationships) of the identified object.'
##        #return relationships
##
##    @property
##    def Properties(self):
##        u'A set of name-value pairs for the field names and values of the identified object.'
##        #return props
##

class MaplexKeyNumberGroup(CoClass):
    u'A Maplex key number group.'
    _reg_clsid_ = GUID('{66DDEF5D-1AB3-5F31-7BC1-755DDEF33D32}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
MaplexKeyNumberGroup._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMaplexKeyNumberGroup, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersionSupportGEN]

class ICompositeGraphicsLayer2(ICompositeGraphicsLayer):
    _case_insensitive_ = True
    u'Provides access to members that control a collection of graphics layers that behave like single layer.'
    _iid_ = GUID('{93E56956-347A-4A37-BAE3-46F5515270D1}')
    _idlflags_ = ['oleautomation']
ICompositeGraphicsLayer2._methods_ = [
    COMMETHOD([helpstring(u'Draws the default graphics layer.')], HRESULT, 'DrawDefault',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriDrawPhase, 'DrawPhase' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'TrackCancel' )),
]
################################################################
## code template for ICompositeGraphicsLayer2 implementation
##class ICompositeGraphicsLayer2_Impl(object):
##    def DrawDefault(self, DrawPhase, Display, TrackCancel):
##        u'Draws the default graphics layer.'
##        #return 
##

IMapServerInfo._methods_ = [
    COMMETHOD(['propget', helpstring(u'The name of the map (data frame).')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propget', helpstring(u'The description of the map (data frame). This property is set in the General tab of the Data Frame Properties dialog.')], HRESULT, 'Description',
              ( ['retval', 'out'], POINTER(BSTR), 'desc' )),
    COMMETHOD(['propget', helpstring(u'The full extent of the map (data frame).')], HRESULT, 'FullExtent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'Extent' )),
    COMMETHOD(['propget', helpstring(u'The current extent of the map (data frame).')], HRESULT, 'Extent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'Extent' )),
    COMMETHOD(['propget', helpstring(u'A collection of Map Layer Info objects, each containing information about a layer in the map (data frame).')], HRESULT, 'MapLayerInfos',
              ( ['retval', 'out'], POINTER(POINTER(IMapLayerInfos)), 'layerInfos' )),
    COMMETHOD(['propget', helpstring(u'The background color of the map (data frame).')], HRESULT, 'BackgroundColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propget', helpstring(u'The published bookmarks for the map.')], HRESULT, 'Bookmarks',
              ( ['retval', 'out'], POINTER(POINTER(IMapServerBookmarks)), 'Bookmarks' )),
    COMMETHOD(['propget', helpstring(u'The default map settings.')], HRESULT, 'DefaultMapDescription',
              ( ['retval', 'out'], POINTER(POINTER(IMapDescription)), 'mapDesc' )),
    COMMETHOD(['propget', helpstring(u'The units for the map (data frame).')], HRESULT, 'MapUnits',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits), 'Units' )),
]
################################################################
## code template for IMapServerInfo implementation
##class IMapServerInfo_Impl(object):
##    @property
##    def Name(self):
##        u'The name of the map (data frame).'
##        #return Name
##
##    @property
##    def DefaultMapDescription(self):
##        u'The default map settings.'
##        #return mapDesc
##
##    @property
##    def MapUnits(self):
##        u'The units for the map (data frame).'
##        #return Units
##
##    @property
##    def MapLayerInfos(self):
##        u'A collection of Map Layer Info objects, each containing information about a layer in the map (data frame).'
##        #return layerInfos
##
##    @property
##    def BackgroundColor(self):
##        u'The background color of the map (data frame).'
##        #return Color
##
##    @property
##    def FullExtent(self):
##        u'The full extent of the map (data frame).'
##        #return Extent
##
##    @property
##    def Bookmarks(self):
##        u'The published bookmarks for the map.'
##        #return Bookmarks
##
##    @property
##    def Extent(self):
##        u'The current extent of the map (data frame).'
##        #return Extent
##
##    @property
##    def Description(self):
##        u'The description of the map (data frame). This property is set in the General tab of the Data Frame Properties dialog.'
##        #return desc
##

class IMapTableInfo3(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to additional properties for map tables.'
    _iid_ = GUID('{824D76D9-DD2B-4197-98D0-460373F40626}')
    _idlflags_ = ['oleautomation']
IMapTableInfo3._methods_ = [
    COMMETHOD(['propget', helpstring(u'The table ID. This is a unique ID among layers and tables, and is used to identify the table in a number of methods.')], HRESULT, 'ID',
              ( ['retval', 'out'], POINTER(c_int), 'TableID' )),
    COMMETHOD(['propget', helpstring(u'Descriptive name of the table.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propget', helpstring(u'Array of attribute fields contained in the table.')], HRESULT, 'Fields',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFields)), 'Fields' )),
    COMMETHOD(['propget', helpstring(u'Array of relates associated to the table.')], HRESULT, 'RelateInfos',
              ( ['retval', 'out'], POINTER(POINTER(IRelateInfos)), 'RelateInfo' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer has attachments.')], HRESULT, 'HasAttachments',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'HasAttachments' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer has HTML popups enabled.')], HRESULT, 'HTMLPopupType',
              ( ['retval', 'out'], POINTER(esriServerHTMLPopupType), 'Type' )),
    COMMETHOD(['propget', helpstring(u'Primary display field.')], HRESULT, 'DisplayField',
              ( ['retval', 'out'], POINTER(BSTR), 'FieldName' )),
    COMMETHOD(['propget', helpstring(u'The name of the OID Field.')], HRESULT, 'OIDFieldName',
              ( ['retval', 'out'], POINTER(BSTR), 'OIDFieldName' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer has Subtype.')], HRESULT, 'HasSubtype',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'HasSubtype' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the table supports calculating statistics on its fields.')], HRESULT, 'SupportsStatistics',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'supportsStats' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the table supports calculating advanced queries (i.e. ORDER BY clauses) on its fields.')], HRESULT, 'SupportsAdvancedQueries',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'SupportsAdvancedQueries' )),
    COMMETHOD(['propget', helpstring(u'Returns the original definition expression on the layer.')], HRESULT, 'DefinitionExpression',
              ( ['out'], POINTER(BSTR), 'DefinitionExpression' )),
]
################################################################
## code template for IMapTableInfo3 implementation
##class IMapTableInfo3_Impl(object):
##    @property
##    def DisplayField(self):
##        u'Primary display field.'
##        #return FieldName
##
##    @property
##    def DefinitionExpression(self):
##        u'Returns the original definition expression on the layer.'
##        #return DefinitionExpression
##
##    @property
##    def HasSubtype(self):
##        u'Indicates if the layer has Subtype.'
##        #return HasSubtype
##
##    @property
##    def Name(self):
##        u'Descriptive name of the table.'
##        #return Name
##
##    @property
##    def SupportsStatistics(self):
##        u'Indicates if the table supports calculating statistics on its fields.'
##        #return supportsStats
##
##    @property
##    def HasAttachments(self):
##        u'Indicates if the layer has attachments.'
##        #return HasAttachments
##
##    @property
##    def Fields(self):
##        u'Array of attribute fields contained in the table.'
##        #return Fields
##
##    @property
##    def RelateInfos(self):
##        u'Array of relates associated to the table.'
##        #return RelateInfo
##
##    @property
##    def SupportsAdvancedQueries(self):
##        u'Indicates if the table supports calculating advanced queries (i.e. ORDER BY clauses) on its fields.'
##        #return SupportsAdvancedQueries
##
##    @property
##    def OIDFieldName(self):
##        u'The name of the OID Field.'
##        #return OIDFieldName
##
##    @property
##    def HTMLPopupType(self):
##        u'Indicates if the layer has HTML popups enabled.'
##        #return Type
##
##    @property
##    def ID(self):
##        u'The table ID. This is a unique ID among layers and tables, and is used to identify the table in a number of methods.'
##        #return TableID
##

class MaplexDictionaries(CoClass):
    u'A collection of dictionaries.'
    _reg_clsid_ = GUID('{20664808-56DB-BD28-67DC-02E33DECF321}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
MaplexDictionaries._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMaplexDictionaries, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

IRasterDiscreteColorRenderer._methods_ = [
    COMMETHOD(['propput', helpstring(u'The number of colors.')], HRESULT, 'NumColors',
              ( ['in'], c_int, 'pNumColors' )),
    COMMETHOD(['propget', helpstring(u'The number of colors.')], HRESULT, 'NumColors',
              ( ['retval', 'out'], POINTER(c_int), 'pNumColors' )),
    COMMETHOD(['propput', helpstring(u'The custom colormap.')], HRESULT, 'Colormap',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterColormap), 'rhs' )),
]
################################################################
## code template for IRasterDiscreteColorRenderer implementation
##class IRasterDiscreteColorRenderer_Impl(object):
##    def _get(self):
##        u'The number of colors.'
##        #return pNumColors
##    def _set(self, pNumColors):
##        u'The number of colors.'
##    NumColors = property(_get, _set, doc = _set.__doc__)
##
##    def _set(self, rhs):
##        u'The custom colormap.'
##    Colormap = property(fset = _set, doc = _set.__doc__)
##

class IMapDescription3(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the available properties of a map description object.'
    _iid_ = GUID('{0BC2C50C-C79D-4E5D-8353-7A996EF3479B}')
    _idlflags_ = ['oleautomation']
IMapDescription3._methods_ = [
    COMMETHOD(['propget', helpstring(u'The name of the map (data frame).')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'The name of the map (data frame).')], HRESULT, 'Name',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'The display area of the map (data frame).')], HRESULT, 'MapArea',
              ( ['retval', 'out'], POINTER(POINTER(IMapArea)), 'area' )),
    COMMETHOD(['propput', helpstring(u'The display area of the map (data frame).')], HRESULT, 'MapArea',
              ( ['in'], POINTER(IMapArea), 'area' )),
    COMMETHOD(['propget', helpstring(u'A collection of Layer Description objects, each describing a layer within the map (data frame).')], HRESULT, 'LayerDescriptions',
              ( ['retval', 'out'], POINTER(POINTER(ILayerDescriptions)), 'LayerDescriptions' )),
    COMMETHOD(['propput', helpstring(u'A collection of Layer Description objects, each describing a layer within the map (data frame).')], HRESULT, 'LayerDescriptions',
              ( ['in'], POINTER(ILayerDescriptions), 'LayerDescriptions' )),
    COMMETHOD(['propget', helpstring(u'The angle/rotation of the map (data frame) in degrees, measured anti-clockwise.')], HRESULT, 'MapRotation',
              ( ['retval', 'out'], POINTER(c_double), 'angleDegrees' )),
    COMMETHOD(['propput', helpstring(u'The angle/rotation of the map (data frame) in degrees, measured anti-clockwise.')], HRESULT, 'MapRotation',
              ( ['in'], c_double, 'angleDegrees' )),
    COMMETHOD(['propget', helpstring(u'The spatial reference of the map (data frame).')], HRESULT, 'SpatialReference',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference)), 'SpatialReference' )),
    COMMETHOD(['propputref', helpstring(u'The spatial reference of the map (data frame).')], HRESULT, 'SpatialReference',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'SpatialReference' )),
    COMMETHOD(['propget', helpstring(u'Custom graphics.')], HRESULT, 'CustomGraphics',
              ( ['retval', 'out'], POINTER(POINTER(IGraphicElements)), 'Elements' )),
    COMMETHOD(['propput', helpstring(u'Custom graphics.')], HRESULT, 'CustomGraphics',
              ( ['in'], POINTER(IGraphicElements), 'Elements' )),
    COMMETHOD(['propget', helpstring(u'The color that is transparent (100 %).')], HRESULT, 'TransparentColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'The color that is transparent (100 %).')], HRESULT, 'TransparentColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'The default selection color.')], HRESULT, 'SelectionColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'The default selection color.')], HRESULT, 'SelectionColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'Background symbol of the Map.')], HRESULT, 'BackgroundSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IFillSymbol)), 'FillSymbol' )),
    COMMETHOD(['propput', helpstring(u'Background symbol of the Map.')], HRESULT, 'BackgroundSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IFillSymbol), 'FillSymbol' )),
    COMMETHOD(['propget', helpstring(u"Indicates if this object's custom layer order is honored.")], HRESULT, 'HonorLayerReordering',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'honorLayerReorder' )),
    COMMETHOD(['propput', helpstring(u"Indicates if this object's custom layer order is honored.")], HRESULT, 'HonorLayerReordering',
              ( ['in'], VARIANT_BOOL, 'honorLayerReorder' )),
]
################################################################
## code template for IMapDescription3 implementation
##class IMapDescription3_Impl(object):
##    def _get(self):
##        u'Custom graphics.'
##        #return Elements
##    def _set(self, Elements):
##        u'Custom graphics.'
##    CustomGraphics = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The name of the map (data frame).'
##        #return Name
##    def _set(self, Name):
##        u'The name of the map (data frame).'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The color that is transparent (100 %).'
##        #return Color
##    def _set(self, Color):
##        u'The color that is transparent (100 %).'
##    TransparentColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'A collection of Layer Description objects, each describing a layer within the map (data frame).'
##        #return LayerDescriptions
##    def _set(self, LayerDescriptions):
##        u'A collection of Layer Description objects, each describing a layer within the map (data frame).'
##    LayerDescriptions = property(_get, _set, doc = _set.__doc__)
##
##    def SpatialReference(self, SpatialReference):
##        u'The spatial reference of the map (data frame).'
##        #return 
##
##    def _get(self):
##        u'Background symbol of the Map.'
##        #return FillSymbol
##    def _set(self, FillSymbol):
##        u'Background symbol of the Map.'
##    BackgroundSymbol = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The default selection color.'
##        #return Color
##    def _set(self, Color):
##        u'The default selection color.'
##    SelectionColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The display area of the map (data frame).'
##        #return area
##    def _set(self, area):
##        u'The display area of the map (data frame).'
##    MapArea = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u"Indicates if this object's custom layer order is honored."
##        #return honorLayerReorder
##    def _set(self, honorLayerReorder):
##        u"Indicates if this object's custom layer order is honored."
##    HonorLayerReordering = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The angle/rotation of the map (data frame) in degrees, measured anti-clockwise.'
##        #return angleDegrees
##    def _set(self, angleDegrees):
##        u'The angle/rotation of the map (data frame) in degrees, measured anti-clockwise.'
##    MapRotation = property(_get, _set, doc = _set.__doc__)
##

class MaplexKeyNumberGroups(CoClass):
    u'A collection of Maplex key number groups.'
    _reg_clsid_ = GUID('{755F3BB8-63FB-E54B-884C-74F3DD2A8A81}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
MaplexKeyNumberGroups._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMaplexKeyNumberGroups, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersionSupportGEN]

class MapServer(CoClass):
    u'The MapServer component provides programmatic access to the contents of a map document on disk, and creates images of the map contents based on user requests. Designed for use in building map-based web services and web applications.'
    _reg_clsid_ = GUID('{43E4F6B6-7B17-4536-B7CF-C0454EBB0F5A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
MapServer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMapServer, ITiledMapServer2, ITiledMapServer3, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IObjectConstruct, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IRequestHandler, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IRequestHandler2, IMapServerObjects, IMapServerObjects2, IMapServerObjects3, IMapServerData, IMapServerLayout, IMapServerInit, IMapServerInit2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IObjectActivate, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IObjectUpdate, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILogSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, comtypes.gen._18F2FC71_6B30_45B9_B101_037A8B868B66_0_10_2.IServerObject, comtypes.gen._18F2FC71_6B30_45B9_B101_037A8B868B66_0_10_2.IServerObjectExtensionManager, IMapServer2, IMapServer3, comtypes.gen._18F2FC71_6B30_45B9_B101_037A8B868B66_0_10_2.IServerObjectConfigurationManager, comtypes.gen._18F2FC71_6B30_45B9_B101_037A8B868B66_0_10_2.IServerObjectConfigurationManager2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IObjectValidate, IMapServerDataAccess, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IRESTRequestHandler]

IHillShadeInfo._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates whether the hill shading is being used.')], HRESULT, 'UseHillShade',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'bUse' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the hill shading is being used.')], HRESULT, 'UseHillShade',
              ( ['in'], VARIANT_BOOL, 'bUse' )),
    COMMETHOD(['propget', helpstring(u'The Z factor multipled to z valuesg.')], HRESULT, 'ZScale',
              ( ['retval', 'out'], POINTER(c_double), 'pZScale' )),
    COMMETHOD(['propput', helpstring(u'The Z factor multipled to z valuesg.')], HRESULT, 'ZScale',
              ( ['in'], c_double, 'pZScale' )),
]
################################################################
## code template for IHillShadeInfo implementation
##class IHillShadeInfo_Impl(object):
##    def _get(self):
##        u'The Z factor multipled to z valuesg.'
##        #return pZScale
##    def _set(self, pZScale):
##        u'The Z factor multipled to z valuesg.'
##    ZScale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether the hill shading is being used.'
##        #return bUse
##    def _set(self, bUse):
##        u'Indicates whether the hill shading is being used.'
##    UseHillShade = property(_get, _set, doc = _set.__doc__)
##

class IACAcetateLayer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control ArcIMS acetate layer.'
    _iid_ = GUID('{65BD02AC-1CAD-462A-A524-3F17E9D85432}')
    _idlflags_ = ['oleautomation']
IACAcetateLayer._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if the layer displays the north arrow.')], HRESULT, 'DisplayNorthArrow',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the layer displays the north arrow.')], HRESULT, 'DisplayNorthArrow',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer displays the scale bar.')], HRESULT, 'DisplayScaleBar',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the layer displays the scale bar.')], HRESULT, 'DisplayScaleBar',
              ( ['in'], VARIANT_BOOL, 'flag' )),
]
################################################################
## code template for IACAcetateLayer implementation
##class IACAcetateLayer_Impl(object):
##    def _get(self):
##        u'Indicates if the layer displays the scale bar.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if the layer displays the scale bar.'
##    DisplayScaleBar = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the layer displays the north arrow.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if the layer displays the north arrow.'
##    DisplayNorthArrow = property(_get, _set, doc = _set.__doc__)
##

class MaplexOverposterProperties(CoClass):
    u'Properties that specify the label placement rules common to all layers, and associated methods.'
    _reg_clsid_ = GUID('{20664808-A8C2-C1D1-ACDC-1708F95C7321}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
MaplexOverposterProperties._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMaplexOverposterProperties, IMaplexOverposterProperties2, IOverposterProperties, IOverposterOptions, IOverposterOptions2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, ILicensedComponent, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]

class MaplexLabelEngineLayerProperties(CoClass):
    u'Properties that specify the labeling of a layer and conversion of labels to annotation.'
    _reg_clsid_ = GUID('{20664808-0D1C-11D2-A26F-080009B6F22B}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class ILabelEngineLayerProperties2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to some of the main properties for labeling features.'
    _iid_ = GUID('{59A8EEBA-8EF7-4143-B497-4EFCAF6A2405}')
    _idlflags_ = ['oleautomation']
class IAnnotateLayerTransformationProperties(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control transformation properties for the display of dynamic labels (text) for a feature layer..'
    _iid_ = GUID('{3EB7EF02-DD8B-11D2-9F47-00C04F6BC6A5}')
    _idlflags_ = ['oleautomation']
MaplexLabelEngineLayerProperties._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IAnnotateProperties, IAnnotateLayerProperties, ILabelEngineLayerProperties, ILabelEngineLayerProperties2, IAnnotateLayerTransformationProperties, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class IACImageLayer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Indicator interface that identifies an ArcIMS image layer.'
    _iid_ = GUID('{495C0E2C-D51D-4ED4-9FC1-FA04AB93568D}')
    _idlflags_ = ['oleautomation']
IACImageLayer._methods_ = [
]
################################################################
## code template for IACImageLayer implementation
##class IACImageLayer_Impl(object):

class IACImageLayerAdmin(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to connecting to an ArcIMS image layer.'
    _iid_ = GUID('{F14E1EC7-1083-43BD-B3B9-CE44CCE0B04B}')
    _idlflags_ = ['oleautomation']
IACImageLayerAdmin._methods_ = [
    COMMETHOD([helpstring(u'Connects to the image layer.')], HRESULT, 'Connect',
              ( ['in'], BSTR, 'LayerInfo' ),
              ( ['in'], POINTER(comtypes.gen._746F6817_89BB_4490_9829_83CA25FD505A_0_10_2.IIMSAxlRequest), 'request' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'spatialRef' ),
              ( ['in'], comtypes.gen._746F6817_89BB_4490_9829_83CA25FD505A_0_10_2.acMapUnits, 'MapUnits' )),
]
################################################################
## code template for IACImageLayerAdmin implementation
##class IACImageLayerAdmin_Impl(object):
##    def Connect(self, LayerInfo, request, spatialRef, MapUnits):
##        u'Connects to the image layer.'
##        #return 
##

class IMapSurroundFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that create Map Surrounds.'
    _iid_ = GUID('{3141F2EC-38E2-11D1-8809-080009EC732A}')
    _idlflags_ = ['oleautomation']
IMapSurroundFactory._methods_ = [
    COMMETHOD(['propget', helpstring(u'Name of the factory.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD([helpstring(u'Creates a map surround for the given map and returns it.')], HRESULT, 'Create',
              ( ['in'], POINTER(IMap), 'Map' ),
              ( ['retval', 'out'], POINTER(POINTER(IMapSurround)), 'MapSurround' )),
]
################################################################
## code template for IMapSurroundFactory implementation
##class IMapSurroundFactory_Impl(object):
##    def Create(self, Map):
##        u'Creates a map surround for the given map and returns it.'
##        #return MapSurround
##
##    @property
##    def Name(self):
##        u'Name of the factory.'
##        #return Name
##

IRasterCatalogRendererPicker._methods_ = [
    COMMETHOD(['propget', helpstring(u'The priority of the renderer.')], HRESULT, 'Priority',
              ( ['retval', 'out'], POINTER(c_int), 'pPriority' )),
    COMMETHOD(['propget', helpstring(u'The ProgIDs of the default raster renderers.')], HRESULT, 'DefaultUseRenderersCLSID',
              ( ['retval', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'pCLSIDArrayy' )),
    COMMETHOD(['propget', helpstring(u'The ProgIDs of all available raster renderers.')], HRESULT, 'AllAvailableRenderersCLSID',
              ( ['retval', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'pCLSIDArrayy' )),
    COMMETHOD([helpstring(u'Chooses the renderers from a given list.')], HRESULT, 'Pick',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'pRenderers' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterDataset), 'pRasterDataset' ),
              ( ['retval', 'out'], POINTER(POINTER(IRasterRenderer)), 'ppRenderer' )),
]
################################################################
## code template for IRasterCatalogRendererPicker implementation
##class IRasterCatalogRendererPicker_Impl(object):
##    @property
##    def Priority(self):
##        u'The priority of the renderer.'
##        #return pPriority
##
##    @property
##    def AllAvailableRenderersCLSID(self):
##        u'The ProgIDs of all available raster renderers.'
##        #return pCLSIDArrayy
##
##    @property
##    def DefaultUseRenderersCLSID(self):
##        u'The ProgIDs of the default raster renderers.'
##        #return pCLSIDArrayy
##
##    def Pick(self, pRenderers, pRasterDataset):
##        u'Chooses the renderers from a given list.'
##        #return ppRenderer
##

class IACAcetateLayerAdmin(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to connecting to an ArcIMS acetate layer.'
    _iid_ = GUID('{A62789AA-F3D2-4D3C-91BD-3ECAB2B698AC}')
    _idlflags_ = ['oleautomation']
IACAcetateLayerAdmin._methods_ = [
    COMMETHOD([helpstring(u'Connects to the acetate layer.')], HRESULT, 'Connect',
              ( ['in'], BSTR, 'LayerInfo' ),
              ( ['in'], POINTER(comtypes.gen._746F6817_89BB_4490_9829_83CA25FD505A_0_10_2.IIMSAxlRequest), 'request' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'spatialRef' ),
              ( ['in'], comtypes.gen._746F6817_89BB_4490_9829_83CA25FD505A_0_10_2.acMapUnits, 'MapUnits' )),
]
################################################################
## code template for IACAcetateLayerAdmin implementation
##class IACAcetateLayerAdmin_Impl(object):
##    def Connect(self, LayerInfo, request, spatialRef, MapUnits):
##        u'Connects to the acetate layer.'
##        #return 
##

ITiledImageServer._methods_ = [
    COMMETHOD([helpstring(u'Gets the cache configuration for a given map.')], HRESULT, 'GetTileCacheInfo',
              ( ['retval', 'out'], POINTER(POINTER(ITileCacheInfo)), 'ppCacheInfo' )),
    COMMETHOD([helpstring(u'Gets a tile for a given tile location from a given map.')], HRESULT, 'GetImageTile',
              ( ['in'], c_int, 'Level' ),
              ( ['in'], c_int, 'Row' ),
              ( ['in'], c_int, 'Column' ),
              ( ['retval', 'out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'Data' )),
    COMMETHOD([helpstring(u'Gets the cache tile image information for a given map.')], HRESULT, 'GetTileImageInfo',
              ( ['retval', 'out'], POINTER(POINTER(ITileImageInfo)), 'ppCacheInfo' )),
    COMMETHOD([helpstring(u'Gets the cache storage information.')], HRESULT, 'GetCacheStorageInfo',
              ( ['retval', 'out'], POINTER(POINTER(ICacheStorageInfo)), 'ppCacheStorageInfo' )),
    COMMETHOD([helpstring(u'Indicates if a given map is a fixed scale map.')], HRESULT, 'IsFixedScaleImage',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pIsFixedScaleMap' )),
    COMMETHOD([helpstring(u'Gets the virtual cache directory for a given layer within a map.')], HRESULT, 'GetVirtualCacheDirectory',
              ( ['retval', 'out'], POINTER(BSTR), 'pURL' )),
    COMMETHOD([helpstring(u'Gets the cache description information for a given map.')], HRESULT, 'GetCacheDescriptionInfo',
              ( ['retval', 'out'], POINTER(POINTER(ICacheDescriptionInfo)), 'ppCacheDescriptionInfo' )),
    COMMETHOD([helpstring(u'Gets the cache description information for a given map.')], HRESULT, 'GetCacheControlInfo',
              ( ['retval', 'out'], POINTER(POINTER(ICacheControlInfo)), 'ppCacheControlInfo' )),
]
################################################################
## code template for ITiledImageServer implementation
##class ITiledImageServer_Impl(object):
##    def GetCacheDescriptionInfo(self):
##        u'Gets the cache description information for a given map.'
##        #return ppCacheDescriptionInfo
##
##    def GetCacheControlInfo(self):
##        u'Gets the cache description information for a given map.'
##        #return ppCacheControlInfo
##
##    def IsFixedScaleImage(self):
##        u'Indicates if a given map is a fixed scale map.'
##        #return pIsFixedScaleMap
##
##    def GetTileImageInfo(self):
##        u'Gets the cache tile image information for a given map.'
##        #return ppCacheInfo
##
##    def GetVirtualCacheDirectory(self):
##        u'Gets the virtual cache directory for a given layer within a map.'
##        #return pURL
##
##    def GetTileCacheInfo(self):
##        u'Gets the cache configuration for a given map.'
##        #return ppCacheInfo
##
##    def GetImageTile(self, Level, Row, Column):
##        u'Gets a tile for a given tile location from a given map.'
##        #return Data
##
##    def GetCacheStorageInfo(self):
##        u'Gets the cache storage information.'
##        #return ppCacheStorageInfo
##

IAnnotateLayerTransformationProperties._methods_ = [
    COMMETHOD(['propput', helpstring(u'The full extent in world coordinates.')], HRESULT, 'Bounds',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'Bounds' )),
    COMMETHOD(['propget', helpstring(u'The full extent in world coordinates.')], HRESULT, 'Bounds',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'Bounds' )),
    COMMETHOD(['propget', helpstring(u'The units of the world coordinates.')], HRESULT, 'Units',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits), 'unitsCode' )),
    COMMETHOD(['propput', helpstring(u'The units of the world coordinates.')], HRESULT, 'Units',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits, 'unitsCode' )),
    COMMETHOD(['propget', helpstring(u'Scale ratio of the transformation.  Based on IAnnotationLayerProperties.Extent and Bounds.')], HRESULT, 'ScaleRatio',
              ( ['retval', 'out'], POINTER(c_double), 'Scale' )),
    COMMETHOD(['propput', helpstring(u'Scale ratio of the transformation.  Based on IAnnotationLayerProperties.Extent and Bounds.')], HRESULT, 'ScaleRatio',
              ( ['in'], c_double, 'Scale' )),
    COMMETHOD(['propget', helpstring(u'Reference scale for computing scaled symbol sizes.')], HRESULT, 'ReferenceScale',
              ( ['retval', 'out'], POINTER(c_double), 'Scale' )),
    COMMETHOD(['propput', helpstring(u'Reference scale for computing scaled symbol sizes.')], HRESULT, 'ReferenceScale',
              ( ['in'], c_double, 'Scale' )),
]
################################################################
## code template for IAnnotateLayerTransformationProperties implementation
##class IAnnotateLayerTransformationProperties_Impl(object):
##    def _get(self):
##        u'The units of the world coordinates.'
##        #return unitsCode
##    def _set(self, unitsCode):
##        u'The units of the world coordinates.'
##    Units = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Scale ratio of the transformation.  Based on IAnnotationLayerProperties.Extent and Bounds.'
##        #return Scale
##    def _set(self, Scale):
##        u'Scale ratio of the transformation.  Based on IAnnotationLayerProperties.Extent and Bounds.'
##    ScaleRatio = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The full extent in world coordinates.'
##        #return Bounds
##    def _set(self, Bounds):
##        u'The full extent in world coordinates.'
##    Bounds = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Reference scale for computing scaled symbol sizes.'
##        #return Scale
##    def _set(self, Scale):
##        u'Reference scale for computing scaled symbol sizes.'
##    ReferenceScale = property(_get, _set, doc = _set.__doc__)
##

IDisplayTableExchange._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The renderer display table.')], HRESULT, 'DisplayTable',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable), 'ppTable' )),
    COMMETHOD(['propget', helpstring(u'The renderer display table.')], HRESULT, 'DisplayTable',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable)), 'ppTable' )),
]
################################################################
## code template for IDisplayTableExchange implementation
##class IDisplayTableExchange_Impl(object):
##    @property
##    def DisplayTable(self, ppTable):
##        u'The renderer display table.'
##        #return 
##

ILabelEngineLayerProperties2._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The text symbol used to draw the label.')], HRESULT, 'Symbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol), 'TextSymbol' )),
    COMMETHOD(['propget', helpstring(u'The text symbol used to draw the label.')], HRESULT, 'Symbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol)), 'TextSymbol' )),
    COMMETHOD(['propput', helpstring(u'The ID of the group symbol used to draw the label.')], HRESULT, 'SymbolID',
              ( ['in'], c_int, 'SymbolID' )),
    COMMETHOD(['propget', helpstring(u'The ID of the group symbol used to draw the label.')], HRESULT, 'SymbolID',
              ( ['retval', 'out'], POINTER(c_int), 'SymbolID' )),
    COMMETHOD(['propput', helpstring(u'The offset between the label and the feature.')], HRESULT, 'Offset',
              ( ['in'], c_double, 'Offset' )),
    COMMETHOD(['propget', helpstring(u'The offset between the label and the feature.')], HRESULT, 'Offset',
              ( ['retval', 'out'], POINTER(c_double), 'Offset' )),
    COMMETHOD(['propputref', helpstring(u'The overposter properties, which specify how labels are placed relative to features.')], HRESULT, 'BasicOverposterLayerProperties',
              ( ['in'], POINTER(IBasicOverposterLayerProperties), 'props' )),
    COMMETHOD(['propget', helpstring(u'The overposter properties, which specify how labels are placed relative to features.')], HRESULT, 'BasicOverposterLayerProperties',
              ( ['retval', 'out'], POINTER(POINTER(IBasicOverposterLayerProperties)), 'props' )),
    COMMETHOD(['propput', helpstring(u'The VBScript or JScript expression that evaluates and formats the label.')], HRESULT, 'Expression',
              ( ['in'], BSTR, 'Expression' )),
    COMMETHOD(['propget', helpstring(u'The VBScript or JScript expression that evaluates and formats the label.')], HRESULT, 'Expression',
              ( ['retval', 'out'], POINTER(BSTR), 'Expression' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the expression is simple.')], HRESULT, 'IsExpressionSimple',
              ( ['in'], VARIANT_BOOL, 'simpleExpression' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the expression is simple.')], HRESULT, 'IsExpressionSimple',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'simpleExpression' )),
    COMMETHOD(['propputref', helpstring(u'The object that interprets the expression.')], HRESULT, 'ExpressionParser',
              ( ['in'], POINTER(IAnnotationExpressionEngine), 'engine' )),
    COMMETHOD(['propget', helpstring(u'The object that interprets the expression.')], HRESULT, 'ExpressionParser',
              ( ['retval', 'out'], POINTER(POINTER(IAnnotationExpressionEngine)), 'engine' )),
    COMMETHOD(['propput', helpstring(u'The ID of the annotation class.')], HRESULT, 'AnnotationClassID',
              ( ['in'], c_int, 'AnnotationClassID' )),
    COMMETHOD(['propget', helpstring(u'The ID of the annotation class.')], HRESULT, 'AnnotationClassID',
              ( ['retval', 'out'], POINTER(c_int), 'AnnotationClassID' )),
    COMMETHOD(['propputref', helpstring(u'The overposter properties, which specify how labels are placed relative to features.')], HRESULT, 'OverposterLayerProperties',
              ( ['in'], POINTER(IOverposterLayerProperties), 'props' )),
    COMMETHOD(['propget', helpstring(u'The overposter properties, which specify how labels are placed relative to features.')], HRESULT, 'OverposterLayerProperties',
              ( ['retval', 'out'], POINTER(POINTER(IOverposterLayerProperties)), 'props' )),
]
################################################################
## code template for ILabelEngineLayerProperties2 implementation
##class ILabelEngineLayerProperties2_Impl(object):
##    def _get(self):
##        u'The ID of the annotation class.'
##        #return AnnotationClassID
##    def _set(self, AnnotationClassID):
##        u'The ID of the annotation class.'
##    AnnotationClassID = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Symbol(self, TextSymbol):
##        u'The text symbol used to draw the label.'
##        #return 
##
##    def _get(self):
##        u'The ID of the group symbol used to draw the label.'
##        #return SymbolID
##    def _set(self, SymbolID):
##        u'The ID of the group symbol used to draw the label.'
##    SymbolID = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def ExpressionParser(self, engine):
##        u'The object that interprets the expression.'
##        #return 
##
##    @property
##    def BasicOverposterLayerProperties(self, props):
##        u'The overposter properties, which specify how labels are placed relative to features.'
##        #return 
##
##    def _get(self):
##        u'The offset between the label and the feature.'
##        #return Offset
##    def _set(self, Offset):
##        u'The offset between the label and the feature.'
##    Offset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the expression is simple.'
##        #return simpleExpression
##    def _set(self, simpleExpression):
##        u'Indicates if the expression is simple.'
##    IsExpressionSimple = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The VBScript or JScript expression that evaluates and formats the label.'
##        #return Expression
##    def _set(self, Expression):
##        u'The VBScript or JScript expression that evaluates and formats the label.'
##    Expression = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def OverposterLayerProperties(self, props):
##        u'The overposter properties, which specify how labels are placed relative to features.'
##        #return 
##

class ITinIdentifyObj2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to query TIN.'
    _iid_ = GUID('{5CC51DDB-5CD6-416A-9700-B1312783FD8E}')
    _idlflags_ = ['oleautomation', 'restricted']
ITinIdentifyObj2._methods_ = [
    COMMETHOD([helpstring(u'Used to get the set of properties and values from a TinIdentifyObject.')], HRESULT, 'GetPropAndValues',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(BSTR), 'Property' ),
              ( ['out'], POINTER(BSTR), 'Value' )),
    COMMETHOD([helpstring(u'Initializes the array that stores the properties and values which are to be displayed by the ID dialog.')], HRESULT, 'SetupEntity'),
    COMMETHOD(['propget', helpstring(u'Retrieves the coordinates of the location that was identified.')], HRESULT, 'Location',
              ( ['out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint)), 'ppPoint' )),
]
################################################################
## code template for ITinIdentifyObj2 implementation
##class ITinIdentifyObj2_Impl(object):
##    def GetPropAndValues(self, Index):
##        u'Used to get the set of properties and values from a TinIdentifyObject.'
##        #return Property, Value
##
##    def SetupEntity(self):
##        u'Initializes the array that stores the properties and values which are to be displayed by the ID dialog.'
##        #return 
##
##    @property
##    def Location(self):
##        u'Retrieves the coordinates of the location that was identified.'
##        #return ppPoint
##

IACValueMapLabelRenderer._methods_ = [
]
################################################################
## code template for IACValueMapLabelRenderer implementation
##class IACValueMapLabelRenderer_Impl(object):

class IRotationRenderer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the drawing of rotated marker symbols based on field values.'
    _iid_ = GUID('{2F2047A6-42BD-11D2-AAFD-00C04FA334B3}')
    _idlflags_ = ['oleautomation']
IRotationRenderer._methods_ = [
    COMMETHOD(['propget', helpstring(u'Rotation field.')], HRESULT, 'RotationField',
              ( ['retval', 'out'], POINTER(BSTR), 'FieldName' )),
    COMMETHOD(['propput', helpstring(u'Rotation field.')], HRESULT, 'RotationField',
              ( ['in'], BSTR, 'FieldName' )),
    COMMETHOD(['propget', helpstring(u'Rotation type.')], HRESULT, 'RotationType',
              ( ['retval', 'out'], POINTER(esriSymbolRotationType), 'Type' )),
    COMMETHOD(['propput', helpstring(u'Rotation type.')], HRESULT, 'RotationType',
              ( ['in'], esriSymbolRotationType, 'Type' )),
]
################################################################
## code template for IRotationRenderer implementation
##class IRotationRenderer_Impl(object):
##    def _get(self):
##        u'Rotation field.'
##        #return FieldName
##    def _set(self, FieldName):
##        u'Rotation field.'
##    RotationField = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Rotation type.'
##        #return Type
##    def _set(self, Type):
##        u'Rotation type.'
##    RotationType = property(_get, _set, doc = _set.__doc__)
##

IColorChannelMapping._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates whether the default mapping is being used.')], HRESULT, 'UseDefaultMapping',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'bIsDefault' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the default mapping is being used.')], HRESULT, 'UseDefaultMapping',
              ( ['in'], VARIANT_BOOL, 'bIsDefault' )),
    COMMETHOD(['propget', helpstring(u'The band indices being used in the mapping.')], HRESULT, 'BandIndices',
              ( ['retval', 'out'], POINTER(VARIANT), 'vIndex' )),
    COMMETHOD(['propput', helpstring(u'The band indices being used in the mapping.')], HRESULT, 'BandIndices',
              ( ['in'], VARIANT, 'vIndex' )),
]
################################################################
## code template for IColorChannelMapping implementation
##class IColorChannelMapping_Impl(object):
##    def _get(self):
##        u'The band indices being used in the mapping.'
##        #return vIndex
##    def _set(self, vIndex):
##        u'The band indices being used in the mapping.'
##    BandIndices = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether the default mapping is being used.'
##        #return bIsDefault
##    def _set(self, bIsDefault):
##        u'Indicates whether the default mapping is being used.'
##    UseDefaultMapping = property(_get, _set, doc = _set.__doc__)
##

class IACSimpleRenderer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control ArcIMS simple renderer.'
    _iid_ = GUID('{902F9675-D1DF-46A2-B879-138AF6B4C218}')
    _idlflags_ = ['oleautomation']
IACSimpleRenderer._methods_ = [
    COMMETHOD(['propget', helpstring(u'Symbol used to draw each feature.')], HRESULT, 'Symbol',
              ( ['retval', 'out'], POINTER(POINTER(IACSymbol)), 'Symbol' )),
    COMMETHOD(['propputref', helpstring(u'Symbol used to draw each feature.')], HRESULT, 'Symbol',
              ( ['in'], POINTER(IACSymbol), 'Symbol' )),
]
################################################################
## code template for IACSimpleRenderer implementation
##class IACSimpleRenderer_Impl(object):
##    def Symbol(self, Symbol):
##        u'Symbol used to draw each feature.'
##        #return 
##

class ITopologyErrorSelection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control topology selection.'
    _iid_ = GUID('{82E0D83A-8BC3-4EEE-9CC9-95775AB39BA9}')
    _idlflags_ = ['oleautomation']
ITopologyErrorSelection._methods_ = [
    COMMETHOD(['propget', helpstring(u'The number of rule types in the topology.')], HRESULT, 'RuleTypeCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The topology rule type.')], HRESULT, 'RuleType',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriTopologyRuleType), 'RuleType' )),
    COMMETHOD(['propput', helpstring(u'Indicates if errors of a given rule type are selectable.')], HRESULT, 'Selectable',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], VARIANT_BOOL, 'sel' )),
    COMMETHOD(['propget', helpstring(u'Indicates if errors of a given rule type are selectable.')], HRESULT, 'Selectable',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'sel' )),
    COMMETHOD(['propget', helpstring(u'Indicates if exceptions are selectable.')], HRESULT, 'SelectExceptions',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'sel' )),
    COMMETHOD(['propput', helpstring(u'Indicates if exceptions are selectable.')], HRESULT, 'SelectExceptions',
              ( ['in'], VARIANT_BOOL, 'sel' )),
    COMMETHOD(['propget', helpstring(u'Indicates if errors are selectable.')], HRESULT, 'SelectErrors',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'sel' )),
    COMMETHOD(['propput', helpstring(u'Indicates if errors are selectable.')], HRESULT, 'SelectErrors',
              ( ['in'], VARIANT_BOOL, 'sel' )),
]
################################################################
## code template for ITopologyErrorSelection implementation
##class ITopologyErrorSelection_Impl(object):
##    def _get(self):
##        u'Indicates if errors are selectable.'
##        #return sel
##    def _set(self, sel):
##        u'Indicates if errors are selectable.'
##    SelectErrors = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def RuleTypeCount(self):
##        u'The number of rule types in the topology.'
##        #return Count
##
##    def _get(self, Index):
##        u'Indicates if errors of a given rule type are selectable.'
##        #return sel
##    def _set(self, Index, sel):
##        u'Indicates if errors of a given rule type are selectable.'
##    Selectable = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def RuleType(self, Index):
##        u'The topology rule type.'
##        #return RuleType
##
##    def _get(self):
##        u'Indicates if exceptions are selectable.'
##        #return sel
##    def _set(self, sel):
##        u'Indicates if exceptions are selectable.'
##    SelectExceptions = property(_get, _set, doc = _set.__doc__)
##

class FeatureLayer(CoClass):
    u'A collection of features and their visual representation.'
    _reg_clsid_ = GUID('{E663A651-8AAD-11D0-BEC7-00805F7C4268}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
FeatureLayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IFeatureLayer, IFeatureLayer2, IGeoFeatureLayer, ILayer, ILayer2, IFeatureSelection, IFeatureLayerDefinition, IFeatureLayerDefinition2, ITableDefinition, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeoDataset, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySupport, ILegendInfo, ILayerFields, IOrderedLayerFields, IDisplayString, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITableFields, IIdentify, IIdentify2, IDataLayer, IDataLayer2, ILayerDrawingProperties, ILayerInfo, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayAdmin, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayFilterManager, IHyperlinkContainer, IHotlinkContainer, IHotlinkMacro, IHotlinkExpression, ILayerEffects, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataset, IRelationshipClassCollection, IRelationshipClassCollectionEdit, ILayerExtensions, IDisplayTable, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IObjectClassSchemaEvents, IDisplayRelationshipClass, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IMapLevel, ISymbolLevels, IAttributeTable, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IConnectionPointContainer, IFind, ILayerPosition, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITableCapabilities, ITableSelection, IPublishLayer, ITemporaryLayer, ILayerGeneralProperties, ILayerSymbologyExtents, IHTMLPopupInfo, IHTMLPopupInfo2, IHTMLPopupIdentify, IHTMLPopupIdentify2, ITimeData, ITimeData2, ITimeTableDefinition, ITimeDataDisplay, ITimeDimensionDefinition, ITimeDisplayTable, ITimeDisplayTable2, IIdentifyDisplay, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspaceEvents]
FeatureLayer._outgoing_interfaces_ = [ILayerEvents, IFeatureLayerSelectionEvents, IDefinitionExpressionEvents]

class ICadastralFabricLayerEvents(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to events that occur when the state of the CadastralFabricLayer changes.'
    _iid_ = GUID('{D5947891-C579-4163-892F-8C9B35E1EC37}')
    _idlflags_ = ['oleautomation']
ICadastralFabricLayerEvents._methods_ = [
    COMMETHOD([helpstring(u'Fired when selection changed for the CadastralFabricLayer.')], HRESULT, 'CadastralSelectionChanged'),
    COMMETHOD([helpstring(u'Fired when select parcel changed for the CadastralFabricLayer.')], HRESULT, 'SelectParcelsChanged',
              ( ['in'], esriCadastralParcelType, 'eCadastralParcelType' )),
    COMMETHOD([helpstring(u'Fired when select point changed for the CadastralFabricLayer.')], HRESULT, 'SelectControlPointsChanged'),
]
################################################################
## code template for ICadastralFabricLayerEvents implementation
##class ICadastralFabricLayerEvents_Impl(object):
##    def SelectParcelsChanged(self, eCadastralParcelType):
##        u'Fired when select parcel changed for the CadastralFabricLayer.'
##        #return 
##
##    def SelectControlPointsChanged(self):
##        u'Fired when select point changed for the CadastralFabricLayer.'
##        #return 
##
##    def CadastralSelectionChanged(self):
##        u'Fired when selection changed for the CadastralFabricLayer.'
##        #return 
##

class FieldInfoSet(CoClass):
    u'Maintains an ordered set of field info objets.'
    _reg_clsid_ = GUID('{3E3D4EEA-2027-4994-ABDD-F56C082D55FD}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
FieldInfoSet._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IFieldInfoSet]

class IMapBookmarks(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the map bookmarks.'
    _iid_ = GUID('{EE53528F-41C9-11D1-880A-080009EC732A}')
    _idlflags_ = ['oleautomation']
IMapBookmarks._methods_ = [
    COMMETHOD(['propget', helpstring(u'The bookmarks.')], HRESULT, 'Bookmarks',
              ( ['retval', 'out'], POINTER(POINTER(IEnumSpatialBookmark)), 'Bookmarks' )),
    COMMETHOD([helpstring(u'Adds a bookmark to the collection.')], HRESULT, 'AddBookmark',
              ( ['in'], POINTER(ISpatialBookmark), 'bookmark' )),
    COMMETHOD([helpstring(u'Removes a bookmark from the collection.')], HRESULT, 'RemoveBookmark',
              ( ['in'], POINTER(ISpatialBookmark), 'bookmark' )),
    COMMETHOD([helpstring(u'Removes all bookmarks.')], HRESULT, 'RemoveAllBookmarks'),
]
################################################################
## code template for IMapBookmarks implementation
##class IMapBookmarks_Impl(object):
##    def RemoveAllBookmarks(self):
##        u'Removes all bookmarks.'
##        #return 
##
##    @property
##    def Bookmarks(self):
##        u'The bookmarks.'
##        #return Bookmarks
##
##    def RemoveBookmark(self, bookmark):
##        u'Removes a bookmark from the collection.'
##        #return 
##
##    def AddBookmark(self, bookmark):
##        u'Adds a bookmark to the collection.'
##        #return 
##

IRasterRGBRenderer._methods_ = [
    COMMETHOD([helpstring(u'Band numbers for red, green, and blue bands.')], HRESULT, 'SetBandIndices',
              ( ['in'], c_int, 'redIndex' ),
              ( ['in'], c_int, 'greenIndex' ),
              ( ['in'], c_int, 'blueIndex' )),
    COMMETHOD([helpstring(u'Band numbers for red, green, and blue bands.')], HRESULT, 'QueryBandIndices',
              ( ['out'], POINTER(c_int), 'redIndex' ),
              ( ['out'], POINTER(c_int), 'greenIndex' ),
              ( ['out'], POINTER(c_int), 'blueIndex' )),
    COMMETHOD(['propget', helpstring(u'Band to be represented in red.')], HRESULT, 'RedBandIndex',
              ( ['retval', 'out'], POINTER(c_int), 'redIndex' )),
    COMMETHOD(['propput', helpstring(u'Band to be represented in red.')], HRESULT, 'RedBandIndex',
              ( ['in'], c_int, 'redIndex' )),
    COMMETHOD(['propget', helpstring(u'Band to be represented in green.')], HRESULT, 'GreenBandIndex',
              ( ['retval', 'out'], POINTER(c_int), 'greenIndex' )),
    COMMETHOD(['propput', helpstring(u'Band to be represented in green.')], HRESULT, 'GreenBandIndex',
              ( ['in'], c_int, 'greenIndex' )),
    COMMETHOD(['propget', helpstring(u'Band to be represented in blue.')], HRESULT, 'BlueBandIndex',
              ( ['retval', 'out'], POINTER(c_int), 'blueIndex' )),
    COMMETHOD(['propput', helpstring(u'Band to be represented in blue.')], HRESULT, 'BlueBandIndex',
              ( ['in'], c_int, 'blueIndex' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the red band is used.')], HRESULT, 'UseRedBand',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'bBand' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the red band is used.')], HRESULT, 'UseRedBand',
              ( ['in'], VARIANT_BOOL, 'bBand' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the green band is used.')], HRESULT, 'UseGreenBand',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'bBand' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the green band is used.')], HRESULT, 'UseGreenBand',
              ( ['in'], VARIANT_BOOL, 'bBand' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the blue band is used.')], HRESULT, 'UseBlueBand',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'bBand' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the blue band is used.')], HRESULT, 'UseBlueBand',
              ( ['in'], VARIANT_BOOL, 'bBand' )),
]
################################################################
## code template for IRasterRGBRenderer implementation
##class IRasterRGBRenderer_Impl(object):
##    def QueryBandIndices(self):
##        u'Band numbers for red, green, and blue bands.'
##        #return redIndex, greenIndex, blueIndex
##
##    def _get(self):
##        u'Indicates if the blue band is used.'
##        #return bBand
##    def _set(self, bBand):
##        u'Indicates if the blue band is used.'
##    UseBlueBand = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Band to be represented in red.'
##        #return redIndex
##    def _set(self, redIndex):
##        u'Band to be represented in red.'
##    RedBandIndex = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Band to be represented in blue.'
##        #return blueIndex
##    def _set(self, blueIndex):
##        u'Band to be represented in blue.'
##    BlueBandIndex = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the red band is used.'
##        #return bBand
##    def _set(self, bBand):
##        u'Indicates if the red band is used.'
##    UseRedBand = property(_get, _set, doc = _set.__doc__)
##
##    def SetBandIndices(self, redIndex, greenIndex, blueIndex):
##        u'Band numbers for red, green, and blue bands.'
##        #return 
##
##    def _get(self):
##        u'Band to be represented in green.'
##        #return greenIndex
##    def _set(self, greenIndex):
##        u'Band to be represented in green.'
##    GreenBandIndex = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the green band is used.'
##        #return bBand
##    def _set(self, bBand):
##        u'Indicates if the green band is used.'
##    UseGreenBand = property(_get, _set, doc = _set.__doc__)
##

ITinColorRampRenderer._methods_ = [
    COMMETHOD(['propget', helpstring(u'The number of breaks.')], HRESULT, 'BreakCount',
              ( ['retval', 'out'], POINTER(c_int), 'ValueCount' )),
    COMMETHOD(['propput', helpstring(u'The number of breaks.')], HRESULT, 'BreakCount',
              ( ['in'], c_int, 'ValueCount' )),
    COMMETHOD(['propget', helpstring(u'The symbol representing the break at the index.')], HRESULT, 'Symbol',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol)), 'sym' )),
    COMMETHOD(['propput', helpstring(u'The symbol representing the break at the index.')], HRESULT, 'Symbol',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol), 'sym' )),
    COMMETHOD(['propget', helpstring(u'The label for the break at the given index.')], HRESULT, 'Label',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Label' )),
    COMMETHOD(['propput', helpstring(u'The label for the break at the given index.')], HRESULT, 'Label',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Label' )),
    COMMETHOD(['propget', helpstring(u'The description for the renderer.')], HRESULT, 'Description',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Text' )),
    COMMETHOD(['propput', helpstring(u'The description for the renderer.')], HRESULT, 'Description',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Text' )),
    COMMETHOD(['propget', helpstring(u'The value of the break at the index.')], HRESULT, 'Break',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(c_double), 'Value' )),
    COMMETHOD(['propput', helpstring(u'The value of the break at the index.')], HRESULT, 'Break',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_double, 'Value' )),
    COMMETHOD(['propget', helpstring(u'The value of the minimum break.')], HRESULT, 'MinimumBreak',
              ( ['retval', 'out'], POINTER(c_double), 'Value' )),
    COMMETHOD(['propput', helpstring(u'The value of the minimum break.')], HRESULT, 'MinimumBreak',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the sort direction for the legend class labels is ascending.')], HRESULT, 'SortClassesAscending',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Ascending' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the sort direction for the legend class labels is ascending.')], HRESULT, 'SortClassesAscending',
              ( ['in'], VARIANT_BOOL, 'Ascending' )),
]
################################################################
## code template for ITinColorRampRenderer implementation
##class ITinColorRampRenderer_Impl(object):
##    def _get(self):
##        u'Indicates if the sort direction for the legend class labels is ascending.'
##        #return Ascending
##    def _set(self, Ascending):
##        u'Indicates if the sort direction for the legend class labels is ascending.'
##    SortClassesAscending = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, Index):
##        u'The description for the renderer.'
##        #return Text
##    def _set(self, Index, Text):
##        u'The description for the renderer.'
##    Description = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, Index):
##        u'The symbol representing the break at the index.'
##        #return sym
##    def _set(self, Index, sym):
##        u'The symbol representing the break at the index.'
##    Symbol = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, Index):
##        u'The label for the break at the given index.'
##        #return Label
##    def _set(self, Index, Label):
##        u'The label for the break at the given index.'
##    Label = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, Index):
##        u'The value of the break at the index.'
##        #return Value
##    def _set(self, Index, Value):
##        u'The value of the break at the index.'
##    Break = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The number of breaks.'
##        #return ValueCount
##    def _set(self, ValueCount):
##        u'The number of breaks.'
##    BreakCount = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The value of the minimum break.'
##        #return Value
##    def _set(self, Value):
##        u'The value of the minimum break.'
##    MinimumBreak = property(_get, _set, doc = _set.__doc__)
##

IRasterStretchColorRampRenderer._methods_ = [
    COMMETHOD(['propput', helpstring(u'Index of the band to be rendered.')], HRESULT, 'BandIndex',
              ( ['in'], c_int, 'BandIndex' )),
    COMMETHOD(['propget', helpstring(u'Index of the band to be rendered.')], HRESULT, 'BandIndex',
              ( ['retval', 'out'], POINTER(c_int), 'BandIndex' )),
    COMMETHOD(['propget', helpstring(u'ColorScheme name.')], HRESULT, 'ColorScheme',
              ( ['retval', 'out'], POINTER(BSTR), 'ColorScheme' )),
    COMMETHOD(['propput', helpstring(u'ColorScheme name.')], HRESULT, 'ColorScheme',
              ( ['in'], BSTR, 'ColorScheme' )),
    COMMETHOD(['propget', helpstring(u'Color ramp.')], HRESULT, 'ColorRamp',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColorRamp)), 'ppColorRamp' )),
    COMMETHOD(['propput', helpstring(u'Color ramp.')], HRESULT, 'ColorRamp',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColorRamp), 'ppColorRamp' )),
    COMMETHOD(['propget', helpstring(u'Label for lowest value.')], HRESULT, 'LabelLow',
              ( ['retval', 'out'], POINTER(BSTR), 'Label' )),
    COMMETHOD(['propput', helpstring(u'Label for lowest value.')], HRESULT, 'LabelLow',
              ( ['in'], BSTR, 'Label' )),
    COMMETHOD(['propget', helpstring(u'Label for medium value.')], HRESULT, 'LabelMedium',
              ( ['retval', 'out'], POINTER(BSTR), 'Label' )),
    COMMETHOD(['propput', helpstring(u'Label for medium value.')], HRESULT, 'LabelMedium',
              ( ['in'], BSTR, 'Label' )),
    COMMETHOD(['propget', helpstring(u'Label for highest value.')], HRESULT, 'LabelHigh',
              ( ['retval', 'out'], POINTER(BSTR), 'Label' )),
    COMMETHOD(['propput', helpstring(u'Label for highest value.')], HRESULT, 'LabelHigh',
              ( ['in'], BSTR, 'Label' )),
    COMMETHOD([helpstring(u'Makes default labels.')], HRESULT, 'ResetLabels'),
]
################################################################
## code template for IRasterStretchColorRampRenderer implementation
##class IRasterStretchColorRampRenderer_Impl(object):
##    def _get(self):
##        u'ColorScheme name.'
##        #return ColorScheme
##    def _set(self, ColorScheme):
##        u'ColorScheme name.'
##    ColorScheme = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Color ramp.'
##        #return ppColorRamp
##    def _set(self, ppColorRamp):
##        u'Color ramp.'
##    ColorRamp = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Label for highest value.'
##        #return Label
##    def _set(self, Label):
##        u'Label for highest value.'
##    LabelHigh = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Label for lowest value.'
##        #return Label
##    def _set(self, Label):
##        u'Label for lowest value.'
##    LabelLow = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Label for medium value.'
##        #return Label
##    def _set(self, Label):
##        u'Label for medium value.'
##    LabelMedium = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Index of the band to be rendered.'
##        #return BandIndex
##    def _set(self, BandIndex):
##        u'Index of the band to be rendered.'
##    BandIndex = property(_get, _set, doc = _set.__doc__)
##
##    def ResetLabels(self):
##        u'Makes default labels.'
##        #return 
##

IOverposterProperties._methods_ = [
    COMMETHOD(['propget', helpstring(u'Name of the overposter.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propget', helpstring(u'The UID of the required AnnotateFeature object.')], HRESULT, 'AnnotateFeatureID',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IUID)), 'uid' )),
    COMMETHOD(['propget', helpstring(u'The UID of the required AnnotateMap object.')], HRESULT, 'AnnotateMapID',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IUID)), 'uid' )),
    COMMETHOD(['propget', helpstring(u'The UID of the required labeling LabelEngineLayerProperties object.')], HRESULT, 'FeatureLayerPropertiesID',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IUID)), 'uid' )),
    COMMETHOD(['propget', helpstring(u'The UID of the required LabelStyle object.')], HRESULT, 'LabelStyleID',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IUID)), 'uid' )),
]
################################################################
## code template for IOverposterProperties implementation
##class IOverposterProperties_Impl(object):
##    @property
##    def AnnotateFeatureID(self):
##        u'The UID of the required AnnotateFeature object.'
##        #return uid
##
##    @property
##    def AnnotateMapID(self):
##        u'The UID of the required AnnotateMap object.'
##        #return uid
##
##    @property
##    def Name(self):
##        u'Name of the overposter.'
##        #return Name
##
##    @property
##    def LabelStyleID(self):
##        u'The UID of the required LabelStyle object.'
##        #return uid
##
##    @property
##    def FeatureLayerPropertiesID(self):
##        u'The UID of the required labeling LabelEngineLayerProperties object.'
##        #return uid
##


# values for enumeration 'acRangeType'
acExactValue = 0
acRangeOfValues = 1
acAllOtherValues = 2
acRangeType = c_int # enum
class IAnnotationExpressionParser(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members to parse annotation expressions.'
    _iid_ = GUID('{AA157205-E079-11D2-9F48-00C04F6BC6A5}')
    _idlflags_ = ['oleautomation']
IAnnotationExpressionEngine._methods_ = [
    COMMETHOD(['propget', helpstring(u'The name of the expression engine.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Expression' )),
    COMMETHOD(['propget', helpstring(u'The code to append.')], HRESULT, 'AppendCode',
              ( ['retval', 'out'], POINTER(BSTR), 'AppendCode' )),
    COMMETHOD([helpstring(u'Creates the specified function.')], HRESULT, 'CreateFunction',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'parameters' ),
              ( ['in'], BSTR, 'Expression' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Function' )),
    COMMETHOD([helpstring(u'The expression to base labels on.')], HRESULT, 'SetExpression',
              ( ['in'], BSTR, 'preCode' ),
              ( ['in'], BSTR, 'Expression' ),
              ( ['retval', 'out'], POINTER(POINTER(IAnnotationExpressionParser)), 'ExpressionParser' )),
    COMMETHOD([helpstring(u'The function to base labels on.')], HRESULT, 'SetCode',
              ( ['in'], BSTR, 'fullCode' ),
              ( ['in'], BSTR, 'runFunction' ),
              ( ['retval', 'out'], POINTER(POINTER(IAnnotationExpressionParser)), 'ExpressionParser' )),
]
################################################################
## code template for IAnnotationExpressionEngine implementation
##class IAnnotationExpressionEngine_Impl(object):
##    def SetCode(self, fullCode, runFunction):
##        u'The function to base labels on.'
##        #return ExpressionParser
##
##    def CreateFunction(self, Name, parameters, Expression):
##        u'Creates the specified function.'
##        #return Function
##
##    def SetExpression(self, preCode, Expression):
##        u'The expression to base labels on.'
##        #return ExpressionParser
##
##    @property
##    def Name(self):
##        u'The name of the expression engine.'
##        #return Expression
##
##    @property
##    def AppendCode(self):
##        u'The code to append.'
##        #return AppendCode
##


# values for enumeration 'esriCadastralParcelLayerType'
esriCadastralParcelUnknown = 0
esriCadastralParcelPLSSTownship = 1
esriCadastralParcelPLSSSection = 2
esriCadastralParcelPLSSQuarterSection = 3
esriCadastralParcelSpecialSurvey = 4
esriCadastralParcelSimultaneousConveyance = 5
esriCadastralParcelConveyanceDivision = 6
esriCadastralParcelTax = 7
esriCadastralParcelOwnership = 8
esriCadastralParcelEncumbrance = 9
esriCadastralParcelSeparatedRight = 10
esriCadastralParcelOther = 11
esriCadastralParcelPLSSSixteenthSection = 12
esriCadastralParcelPLSS = 13
esriCadastralParcelHistory = 14
esriCadastralParcelLayerType = c_int # enum
class ICadastralFabricSelection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the selection of cadastral features to designate to a cadastral job.'
    _iid_ = GUID('{4F28703C-E2B3-4EF8-919C-34C90059D507}')
    _idlflags_ = ['oleautomation']
ICadastralFabricSelection._methods_ = [
    COMMETHOD([helpstring(u'Select cadastral features based upon the search criteria.')], HRESULT, 'SelectCadastralFeatures',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'queryFilter' ),
              ( ['in'], esriCadastralFeature, 'CadastralFeature' ),
              ( ['in'], VARIANT_BOOL, 'XORToExistingSelection' )),
    COMMETHOD([helpstring(u'Clear currently selected cadastral features.')], HRESULT, 'ClearSelection',
              ( ['in'], esriCadastralFeature, 'CadastralFeature' )),
    COMMETHOD(['propget', helpstring(u'The parcels designated for the current cadastral job.')], HRESULT, 'ParcelSet',
              ( ['in'], esriCadastralParcelType, 'ParcelType' ),
              ( ['retval', 'out'], POINTER(POINTER(IFeatureIDSet)), 'FeatureIDSet' )),
    COMMETHOD(['propput', helpstring(u'The parcels designated for the current cadastral job.')], HRESULT, 'ParcelSet',
              ( ['in'], esriCadastralParcelType, 'ParcelType' ),
              ( ['in'], POINTER(IFeatureIDSet), 'FeatureIDSet' )),
    COMMETHOD(['propget', helpstring(u'The control points designated for the current cadastral job.')], HRESULT, 'ControlPointSet',
              ( ['retval', 'out'], POINTER(POINTER(IFeatureIDSet)), 'FeatureIDSet' )),
    COMMETHOD(['propput', helpstring(u'The control points designated for the current cadastral job.')], HRESULT, 'ControlPointSet',
              ( ['in'], POINTER(IFeatureIDSet), 'FeatureIDSet' )),
    COMMETHOD([helpstring(u'Clear Control points currently selected for cadastral job list.')], HRESULT, 'ClearControlPointsInJobList'),
    COMMETHOD([helpstring(u'Clear Parcels currently selected for cadastral job list.')], HRESULT, 'ClearParcelsInJobList',
              ( ['in'], esriCadastralParcelType, 'ParcelType' )),
    COMMETHOD(['propget', helpstring(u'The designated Parcels symbol.')], HRESULT, 'ParcelSymbol',
              ( ['in'], esriCadastralParcelType, 'ParcelType' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISimpleFillSymbol)), 'Symbol' )),
    COMMETHOD(['propput', helpstring(u'The designated Parcels symbol.')], HRESULT, 'ParcelSymbol',
              ( ['in'], esriCadastralParcelType, 'ParcelType' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISimpleFillSymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'The designated control point symbol.')], HRESULT, 'ControlPointSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISimpleMarkerSymbol)), 'Symbol' )),
    COMMETHOD(['propput', helpstring(u'The designated control point symbol.')], HRESULT, 'ControlPointSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISimpleMarkerSymbol), 'Symbol' )),
]
################################################################
## code template for ICadastralFabricSelection implementation
##class ICadastralFabricSelection_Impl(object):
##    def ClearSelection(self, CadastralFeature):
##        u'Clear currently selected cadastral features.'
##        #return 
##
##    def _get(self):
##        u'The control points designated for the current cadastral job.'
##        #return FeatureIDSet
##    def _set(self, FeatureIDSet):
##        u'The control points designated for the current cadastral job.'
##    ControlPointSet = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, ParcelType):
##        u'The designated Parcels symbol.'
##        #return Symbol
##    def _set(self, ParcelType, Symbol):
##        u'The designated Parcels symbol.'
##    ParcelSymbol = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The designated control point symbol.'
##        #return Symbol
##    def _set(self, Symbol):
##        u'The designated control point symbol.'
##    ControlPointSymbol = property(_get, _set, doc = _set.__doc__)
##
##    def ClearParcelsInJobList(self, ParcelType):
##        u'Clear Parcels currently selected for cadastral job list.'
##        #return 
##
##    def ClearControlPointsInJobList(self):
##        u'Clear Control points currently selected for cadastral job list.'
##        #return 
##
##    def SelectCadastralFeatures(self, queryFilter, CadastralFeature, XORToExistingSelection):
##        u'Select cadastral features based upon the search criteria.'
##        #return 
##
##    def _get(self, ParcelType):
##        u'The parcels designated for the current cadastral job.'
##        #return FeatureIDSet
##    def _set(self, ParcelType, FeatureIDSet):
##        u'The parcels designated for the current cadastral job.'
##    ParcelSet = property(_get, _set, doc = _set.__doc__)
##

class DisplayExpressionProperties(CoClass):
    u'Maintains the properties for generating a display string.'
    _reg_clsid_ = GUID('{D75C6301-C05A-484C-A7BD-AE82E5E1FC75}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
DisplayExpressionProperties._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDisplayExpressionProperties, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

IRepresentationRenderer._methods_ = [
    COMMETHOD(['propputref', helpstring(u'Property RepresentationClass.')], HRESULT, 'RepresentationClass',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRepresentationClass), 'repClass' )),
    COMMETHOD(['propget', helpstring(u'Property RepresentationClass.')], HRESULT, 'RepresentationClass',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRepresentationClass)), 'repClass' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether or not invisible representations will be drawn.')], HRESULT, 'DrawInvisible',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Draw' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether or not invisible representations will be drawn.')], HRESULT, 'DrawInvisible',
              ( ['in'], VARIANT_BOOL, 'Draw' )),
    COMMETHOD(['propget', helpstring(u'Color used for invisible representations.')], HRESULT, 'InvisibleColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'Color used for invisible representations.')], HRESULT, 'InvisibleColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'Indicates if representations with an invalid Rule ID will draw.')], HRESULT, 'DrawInvalidRule',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Draw' )),
    COMMETHOD(['propput', helpstring(u'Indicates if representations with an invalid Rule ID will draw.')], HRESULT, 'DrawInvalidRule',
              ( ['in'], VARIANT_BOOL, 'Draw' )),
    COMMETHOD(['propget', helpstring(u'Color used for representations with an invalid rule ID.')], HRESULT, 'InvalidRuleColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'Color used for representations with an invalid rule ID.')], HRESULT, 'InvalidRuleColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
]
################################################################
## code template for IRepresentationRenderer implementation
##class IRepresentationRenderer_Impl(object):
##    def _get(self):
##        u'Color used for invisible representations.'
##        #return Color
##    def _set(self, Color):
##        u'Color used for invisible representations.'
##    InvisibleColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Color used for representations with an invalid rule ID.'
##        #return Color
##    def _set(self, Color):
##        u'Color used for representations with an invalid rule ID.'
##    InvalidRuleColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if representations with an invalid Rule ID will draw.'
##        #return Draw
##    def _set(self, Draw):
##        u'Indicates if representations with an invalid Rule ID will draw.'
##    DrawInvalidRule = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether or not invisible representations will be drawn.'
##        #return Draw
##    def _set(self, Draw):
##        u'Indicates whether or not invisible representations will be drawn.'
##    DrawInvisible = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def RepresentationClass(self, repClass):
##        u'Property RepresentationClass.'
##        #return 
##


# values for enumeration 'esriMapTimePlayOption'
esriMapTimeStopAfterPlaying = 0
esriMapTimeRepeatAfterPlaying = 1
esriMapTimeReverseAfterPlaying = 2
esriMapTimePlayOption = c_int # enum
class Hyperlink(CoClass):
    u'Hyperlink class implements hyperlinks functionality.'
    _reg_clsid_ = GUID('{3036D35E-EDE5-11D0-87FE-080009EC732A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
Hyperlink._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IHyperlink, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

IHotlinkExpression._methods_ = [
    COMMETHOD(['propget', helpstring(u'Properties that describe the hyperlink expression.')], HRESULT, 'ExpressionProperties',
              ( ['retval', 'out'], POINTER(POINTER(IHotLinkExpressionProperties)), 'ppHotLinkExpressionProperties' )),
    COMMETHOD(['propputref', helpstring(u'Properties that describe the hyperlink expression.')], HRESULT, 'ExpressionProperties',
              ( ['in'], POINTER(IHotLinkExpressionProperties), 'ppHotLinkExpressionProperties' )),
    COMMETHOD([helpstring(u'Finds the hyperlink for the given feature based on the current expression properties.')], HRESULT, 'ExecuteExpression',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IObject), 'pObject' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Text' )),
]
################################################################
## code template for IHotlinkExpression implementation
##class IHotlinkExpression_Impl(object):
##    def ExpressionProperties(self, ppHotLinkExpressionProperties):
##        u'Properties that describe the hyperlink expression.'
##        #return 
##
##    def ExecuteExpression(self, pObject):
##        u'Finds the hyperlink for the given feature based on the current expression properties.'
##        #return Text
##

class FeatureLayerSelectionEvents(CoClass):
    u'Helper coclass for working with the nondefault outbound IFeatureLayerSelectionEvents interface in VB.'
    _reg_clsid_ = GUID('{5F5C8E9C-A04E-45D4-BF82-FC1BDED4AFB7}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
FeatureLayerSelectionEvents._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown]
FeatureLayerSelectionEvents._outgoing_interfaces_ = [IFeatureLayerSelectionEvents]

class ICadastralFabricSubLayer2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that describe the layer.'
    _iid_ = GUID('{6D4CCAF7-4981-4BFF-A019-8F395E69367E}')
    _idlflags_ = ['oleautomation']
ICadastralFabricSubLayer2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if layer is Historic.')], HRESULT, 'Historic',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Historic' )),
    COMMETHOD(['propput', helpstring(u'Indicates if layer is Historic.')], HRESULT, 'Historic',
              ( ['in'], VARIANT_BOOL, 'Historic' )),
    COMMETHOD(['propget', helpstring(u'Type of parcel layer.')], HRESULT, 'ParcelLayerType',
              ( ['retval', 'out'], POINTER(esriCadastralParcelLayerType), 'eParcelType' )),
    COMMETHOD(['propput', helpstring(u'Type of parcel layer.')], HRESULT, 'ParcelLayerType',
              ( ['in'], esriCadastralParcelLayerType, 'eParcelType' )),
    COMMETHOD([helpstring(u'Connect sub layer using fabric name.')], HRESULT, 'ConnectWithFabric',
              ( ['in'], POINTER(comtypes.gen._7BA654FE_F55E_4EE5_8CF2_FAEFFBC04A61_0_10_2.ICadastralFabricName), 'pFabricName' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pOk' )),
]
################################################################
## code template for ICadastralFabricSubLayer2 implementation
##class ICadastralFabricSubLayer2_Impl(object):
##    def ConnectWithFabric(self, pFabricName):
##        u'Connect sub layer using fabric name.'
##        #return pOk
##
##    def _get(self):
##        u'Type of parcel layer.'
##        #return eParcelType
##    def _set(self, eParcelType):
##        u'Type of parcel layer.'
##    ParcelLayerType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if layer is Historic.'
##        #return Historic
##    def _set(self, Historic):
##        u'Indicates if layer is Historic.'
##    Historic = property(_get, _set, doc = _set.__doc__)
##

class IFDOGraphicsLayerFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that create/find FDO graphics layers.'
    _iid_ = GUID('{34B2EF85-F4AC-11D1-A245-080009B6F22B}')
    _idlflags_ = ['oleautomation']
IFDOGraphicsLayerFactory._methods_ = [
    COMMETHOD([helpstring(u'Creates a new annotation feature class and returns a layer for it.')], HRESULT, 'CreateGraphicsLayer',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureWorkspace), 'graphicWorkspace' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureDataset), 'FeatureDataset' ),
              ( ['in'], BSTR, 'graphicsLayerName' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeometryDef), 'pGeometryDef' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClass), 'pAssociatedFeatureClass' ),
              ( ['in'], POINTER(IAnnotateLayerPropertiesCollection), 'annoLayerProps' ),
              ( ['in'], POINTER(IGraphicsLayerScale), 'ReferenceScale' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbolCollection), 'SymbolCollection' ),
              ( ['in'], VARIANT_BOOL, 'AutoCreate' ),
              ( ['retval', 'out'], POINTER(POINTER(ILayer)), 'Layer' )),
    COMMETHOD([helpstring(u'Creates a new annotation feature class and returns a layer for it.')], HRESULT, 'OpenGraphicsLayer',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureWorkspace), 'graphicWorkspace' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureDataset), 'FeatureDataset' ),
              ( ['in'], BSTR, 'graphicsLayerName' ),
              ( ['retval', 'out'], POINTER(POINTER(ILayer)), 'Layer' )),
    COMMETHOD([helpstring(u'Returns the names of existing annotation feature classes.')], HRESULT, 'FindGraphicsLayerNames',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureWorkspace), 'graphicWorkspace' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IEnumBSTR)), 'names' )),
]
################################################################
## code template for IFDOGraphicsLayerFactory implementation
##class IFDOGraphicsLayerFactory_Impl(object):
##    def OpenGraphicsLayer(self, graphicWorkspace, FeatureDataset, graphicsLayerName):
##        u'Creates a new annotation feature class and returns a layer for it.'
##        #return Layer
##
##    def CreateGraphicsLayer(self, graphicWorkspace, FeatureDataset, graphicsLayerName, pGeometryDef, pAssociatedFeatureClass, annoLayerProps, ReferenceScale, SymbolCollection, AutoCreate):
##        u'Creates a new annotation feature class and returns a layer for it.'
##        #return Layer
##
##    def FindGraphicsLayerNames(self, graphicWorkspace):
##        u'Returns the names of existing annotation feature classes.'
##        #return names
##

class GraphicsContainerEvents(CoClass):
    u'Helper coclass for working with the nondefault outbound IGraphicsContainerEvents interface in VB.'
    _reg_clsid_ = GUID('{ACE265D5-0CA9-41CB-945E-90655E221FDB}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
GraphicsContainerEvents._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown]
GraphicsContainerEvents._outgoing_interfaces_ = [IGraphicsContainerEvents]

class ICadastralFabricSubLayer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Indicator interface that identifies the cadastral fabric feature layer.'
    _iid_ = GUID('{BA381F2B-F621-4F45-8F78-101F65B5BBE6}')
    _idlflags_ = ['oleautomation']
ICadastralFabricSubLayer._methods_ = [
    COMMETHOD(['propget', helpstring(u'The type of cadastral feature layer.')], HRESULT, 'CadastralTableType',
              ( ['retval', 'out'], POINTER(comtypes.gen._7BA654FE_F55E_4EE5_8CF2_FAEFFBC04A61_0_10_2.esriCadastralFabricTable), 'pType' )),
    COMMETHOD(['propget', helpstring(u'The parent cadastral fabric dataset.')], HRESULT, 'CadastralFabric',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._7BA654FE_F55E_4EE5_8CF2_FAEFFBC04A61_0_10_2.ICadastralFabric)), 'ppCadastralFabric' )),
]
################################################################
## code template for ICadastralFabricSubLayer implementation
##class ICadastralFabricSubLayer_Impl(object):
##    @property
##    def CadastralFabric(self):
##        u'The parent cadastral fabric dataset.'
##        #return ppCadastralFabric
##
##    @property
##    def CadastralTableType(self):
##        u'The type of cadastral feature layer.'
##        #return pType
##

class CadastralFabricLayerEventsHelper(CoClass):
    _reg_clsid_ = GUID('{E1F2FD9C-9454-4483-AFBB-C6A6FEAE7019}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
CadastralFabricLayerEventsHelper._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ICadastralFabricLayerEvents]

class ImageServerLayer(CoClass):
    u'Image server layer source and display options.'
    _reg_clsid_ = GUID('{477D13E7-8D68-45B6-A7FD-2EF442BCCE95}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IImageServerLayer3(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to additional members that control an image server layer.'
    _iid_ = GUID('{F1EDB7A2-D4E4-47B6-886F-F778AC79F520}')
    _idlflags_ = []
class IISLFootprintDisplayProps(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to additional members that control the display of raster footprints in an image server layer.'
    _iid_ = GUID('{491D8627-1774-4429-96DA-C08AEEC42955}')
    _idlflags_ = []
ImageServerLayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IImageServerLayer, IImageServerLayer2, IImageServerLayer3, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeoDataset, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistVariant, IIdentify, ILayerInfo, ILayerFields, IDataLayer, IDataLayer2, ILayerEffects, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayAdmin2, ILayerExtensions, ILayerDrawingProperties, ILayerGeneralProperties, ILayerPosition, IPublishLayer, IDisplayTable, ILegendInfo, IRasterLayer, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayAdmin, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataset, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IConnectionPointContainer, ITimeData, ITimeData2, ITimeTableDefinition, ITimeDataDisplay, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITableFields, ITableSelection, ITableDefinition, IFeatureLayerDefinition, IAttributeTable, IFeatureLayer, IFeatureSelection, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITableCapabilities, IISLFootprintDisplayProps, ISecureLayer, ISecureLayer2, IIdentifyDisplay, ITimeDisplayTable, ITimeDisplayTable2, comtypes.gen._8F0541A3_D5BE_4B3F_A8D9_062D5579E19B_0_10_2.IRasterDataManagementEvents, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IObjectClassSchemaEvents]
ImageServerLayer._outgoing_interfaces_ = [ILayerEvents, IFeatureLayerSelectionEvents, IDefinitionExpressionEvents]

class CompositeGraphicsLayer(CoClass):
    u'A collection of graphics layers that behave like single layer.'
    _reg_clsid_ = GUID('{9646BB83-9512-11D2-A2F6-080009B6F22B}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
CompositeGraphicsLayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILayer, ILayer2, ICompositeGraphicsLayer, ICompositeGraphicsLayer2, IGraphicsLayer, ICompositeLayer, IGraphicsLayerScale, IGraphicsContainer, IGraphicsContainerSelect, IOverflowGraphicsContainer, IBarrierProperties, IBarrierProperties2, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeoDataset, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeoDatasetSchemaEdit, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IConnectionPointContainer, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, IPublishLayer, ILayerGeneralProperties, ILayerInfo]
CompositeGraphicsLayer._outgoing_interfaces_ = [ISelectionEvents, IGraphicsContainerEvents]

IPlacedObject._methods_ = [
    COMMETHOD(['propget', helpstring(u'Type of the placed object.')], HRESULT, 'ObjectType',
              ( ['retval', 'out'], POINTER(esriPlacedObjectType), 'Type' )),
    COMMETHOD(['propput', helpstring(u'Type of the placed object.')], HRESULT, 'ObjectType',
              ( ['in'], esriPlacedObjectType, 'Type' )),
    COMMETHOD(['propget', helpstring(u'FeatureID associated with the placed object.')], HRESULT, 'FeatureId',
              ( ['retval', 'out'], POINTER(c_int), 'FeatureId' )),
    COMMETHOD(['propput', helpstring(u'FeatureID associated with the placed object.')], HRESULT, 'FeatureId',
              ( ['in'], c_int, 'FeatureId' )),
    COMMETHOD(['propget', helpstring(u'Control shape of the placed object.')], HRESULT, 'ControlShape',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry)), 'Shape' )),
    COMMETHOD(['propput', helpstring(u'Control shape of the placed object.')], HRESULT, 'ControlShape',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'Shape' )),
    COMMETHOD(['propget', helpstring(u'Labeling string for the placed object.')], HRESULT, 'Label',
              ( ['retval', 'out'], POINTER(BSTR), 'Label' )),
    COMMETHOD(['propput', helpstring(u'Labeling string for the placed object.')], HRESULT, 'Label',
              ( ['in'], BSTR, 'Label' )),
    COMMETHOD(['propget', helpstring(u'Class index of the placed object.')], HRESULT, 'ClassIndex',
              ( ['retval', 'out'], POINTER(c_int), 'Index' )),
    COMMETHOD(['propput', helpstring(u'Class index of the placed object.')], HRESULT, 'ClassIndex',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD(['propget', helpstring(u'Code that indicates success/failure of placement.')], HRESULT, 'PlacementCode',
              ( ['retval', 'out'], POINTER(esriPlacementCode), 'PlacementCode' )),
    COMMETHOD(['propput', helpstring(u'Code that indicates success/failure of placement.')], HRESULT, 'PlacementCode',
              ( ['in'], esriPlacementCode, 'PlacementCode' )),
    COMMETHOD(['propget', helpstring(u'Placement result message.')], HRESULT, 'PlacementMessage',
              ( ['retval', 'out'], POINTER(BSTR), 'message' )),
    COMMETHOD(['propput', helpstring(u'Placement result message.')], HRESULT, 'PlacementMessage',
              ( ['in'], BSTR, 'message' )),
    COMMETHOD(['propget', helpstring(u'Angle for the placed object.')], HRESULT, 'Angle',
              ( ['retval', 'out'], POINTER(c_double), 'Angle' )),
]
################################################################
## code template for IPlacedObject implementation
##class IPlacedObject_Impl(object):
##    def _get(self):
##        u'Placement result message.'
##        #return message
##    def _set(self, message):
##        u'Placement result message.'
##    PlacementMessage = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Angle(self):
##        u'Angle for the placed object.'
##        #return Angle
##
##    def _get(self):
##        u'FeatureID associated with the placed object.'
##        #return FeatureId
##    def _set(self, FeatureId):
##        u'FeatureID associated with the placed object.'
##    FeatureId = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Code that indicates success/failure of placement.'
##        #return PlacementCode
##    def _set(self, PlacementCode):
##        u'Code that indicates success/failure of placement.'
##    PlacementCode = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Class index of the placed object.'
##        #return Index
##    def _set(self, Index):
##        u'Class index of the placed object.'
##    ClassIndex = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Labeling string for the placed object.'
##        #return Label
##    def _set(self, Label):
##        u'Labeling string for the placed object.'
##    Label = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Control shape of the placed object.'
##        #return Shape
##    def _set(self, Shape):
##        u'Control shape of the placed object.'
##    ControlShape = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Type of the placed object.'
##        #return Type
##    def _set(self, Type):
##        u'Type of the placed object.'
##    ObjectType = property(_get, _set, doc = _set.__doc__)
##

IRasterRendererClassInfo._methods_ = [
    COMMETHOD(['propget', helpstring(u"Classification field name or an empty string if a table doesn't exist.")], HRESULT, 'ClassificationField',
              ( ['retval', 'out'], POINTER(BSTR), 'classFieldName' )),
    COMMETHOD(['propget', helpstring(u'Normalization field name or an empty string if none.')], HRESULT, 'NormalizationField',
              ( ['retval', 'out'], POINTER(BSTR), 'normFieldName' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the classification field is numeric.')], HRESULT, 'IsNumericClasses',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'bNumeric' )),
    COMMETHOD(['propget', helpstring(u'Number of classes in the renderer.')], HRESULT, 'ClassCount',
              ( ['retval', 'out'], POINTER(c_int), 'ClassCount' )),
    COMMETHOD([helpstring(u'Information for a number class by index.')], HRESULT, 'QueryNumberClass',
              ( ['in'], c_int, 'ClassIndex' ),
              ( ['out'], POINTER(c_double), 'MinValue' ),
              ( ['out'], POINTER(c_double), 'maxValue' ),
              ( ['out'], POINTER(c_int), 'outValue' )),
    COMMETHOD([helpstring(u'Information for a string class by index.')], HRESULT, 'QueryStringClass',
              ( ['in'], c_int, 'ClassIndex' ),
              ( ['out'], POINTER(BSTR), 'inValue' ),
              ( ['out'], POINTER(c_int), 'outValue' )),
]
################################################################
## code template for IRasterRendererClassInfo implementation
##class IRasterRendererClassInfo_Impl(object):
##    @property
##    def NormalizationField(self):
##        u'Normalization field name or an empty string if none.'
##        #return normFieldName
##
##    @property
##    def ClassCount(self):
##        u'Number of classes in the renderer.'
##        #return ClassCount
##
##    @property
##    def IsNumericClasses(self):
##        u'Indicates if the classification field is numeric.'
##        #return bNumeric
##
##    def QueryStringClass(self, ClassIndex):
##        u'Information for a string class by index.'
##        #return inValue, outValue
##
##    @property
##    def ClassificationField(self):
##        u"Classification field name or an empty string if a table doesn't exist."
##        #return classFieldName
##
##    def QueryNumberClass(self, ClassIndex):
##        u'Information for a number class by index.'
##        #return MinValue, maxValue, outValue
##

class MobileServerLP(CoClass):
    u'Map Server LAN Proxy.'
    _reg_clsid_ = GUID('{C137AF35-3532-4CE9-BAEB-D89B69B91DE2}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
MobileServerLP._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._746F6817_89BB_4490_9829_83CA25FD505A_0_10_2.IAGSServerObject2, comtypes.gen._746F6817_89BB_4490_9829_83CA25FD505A_0_10_2.IAGSServerObject, IMobileServer, IMobileSync, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]

class FeatureIDSet(CoClass):
    u'Set of feature ids.'
    _reg_clsid_ = GUID('{D5BB4B88-E0A1-11D2-9F4D-00C04F6BC78E}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
FeatureIDSet._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IFeatureIDSet, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

class IConditionalAction3(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to properties and methods for conditional action control such as whether to favor the query attribute or location test first.'
    _iid_ = GUID('{5441A7DE-2109-4863-80AF-637B4971A6EA}')
    _idlflags_ = ['oleautomation']
IConditionalAction3._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if the attribute query should be performed before the location test.')], HRESULT, 'FavorQuery',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pVal' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the attribute query should be performed before the location test.')], HRESULT, 'FavorQuery',
              ( ['in'], VARIANT_BOOL, 'pVal' )),
    COMMETHOD(['propget', helpstring(u'The string description of the conditional action test.')], HRESULT, 'ConditionalActionDescription',
              ( ['retval', 'out'], POINTER(BSTR), 'pbstrDesc' )),
]
################################################################
## code template for IConditionalAction3 implementation
##class IConditionalAction3_Impl(object):
##    @property
##    def ConditionalActionDescription(self):
##        u'The string description of the conditional action test.'
##        #return pbstrDesc
##
##    def _get(self):
##        u'Indicates if the attribute query should be performed before the location test.'
##        #return pVal
##    def _set(self, pVal):
##        u'Indicates if the attribute query should be performed before the location test.'
##    FavorQuery = property(_get, _set, doc = _set.__doc__)
##

IGroupLayer._methods_ = [
    COMMETHOD([helpstring(u'Adds a layer to the end of the group.')], HRESULT, 'Add',
              ( ['in'], POINTER(ILayer), 'Layer' )),
    COMMETHOD([helpstring(u'Removes the specified layer from the group.')], HRESULT, 'Delete',
              ( ['in'], POINTER(ILayer), 'Layer' )),
    COMMETHOD([helpstring(u'Removes all layers from the group.')], HRESULT, 'Clear'),
    COMMETHOD(['propget', helpstring(u"Indicates if the group's entry is expanded in the TOC.")], HRESULT, 'Expanded',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Expanded' )),
    COMMETHOD(['propput', helpstring(u"Indicates if the group's entry is expanded in the TOC.")], HRESULT, 'Expanded',
              ( ['in'], VARIANT_BOOL, 'Expanded' )),
]
################################################################
## code template for IGroupLayer implementation
##class IGroupLayer_Impl(object):
##    def Add(self, Layer):
##        u'Adds a layer to the end of the group.'
##        #return 
##
##    def _get(self):
##        u"Indicates if the group's entry is expanded in the TOC."
##        #return Expanded
##    def _set(self, Expanded):
##        u"Indicates if the group's entry is expanded in the TOC."
##    Expanded = property(_get, _set, doc = _set.__doc__)
##
##    def Clear(self):
##        u'Removes all layers from the group.'
##        #return 
##
##    def Delete(self, Layer):
##        u'Removes the specified layer from the group.'
##        #return 
##

class IActionProcessor(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the methods and properties needed to manage and process a list of actions.'
    _iid_ = GUID('{CC018A6F-24FB-11D4-B34C-00104BA2ABCC}')
    _idlflags_ = ['oleautomation']
class IActionCollection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the methods and properties needed to manage a collection of actions.'
    _iid_ = GUID('{CC018A6D-24FB-11D4-B34C-00104BA2ABCC}')
    _idlflags_ = ['oleautomation']
IActionProcessor._methods_ = [
    COMMETHOD([helpstring(u'Takes an object as a parameter and runs it through an action list.')], HRESULT, 'ProcessData',
              ( ['in'], POINTER(IUnknown), 'piObject' ),
              ( ['in'], VARIANT_BOOL, 'bQueueProcessing' ),
              ( ['in'], POINTER(VARIANT), 'pvarReturnedObjects' )),
    COMMETHOD([helpstring(u'Purges the processing queue and terminates the processing of queued messages.')], HRESULT, 'ClearQueue'),
    COMMETHOD(['propget', helpstring(u'Indicates whether the action processor will process any new data objects or any queued data objects.')], HRESULT, 'Suspended',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbvarSuspended' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the action processor will process any new data objects or any queued data objects.')], HRESULT, 'Suspended',
              ( ['in'], VARIANT_BOOL, 'pbvarSuspended' )),
    COMMETHOD(['propget', helpstring(u"Allows access to the action processor's action collection.")], HRESULT, 'Actions',
              ( ['retval', 'out'], POINTER(POINTER(IActionCollection)), 'piActions' )),
    COMMETHOD(['propputref', helpstring(u"Allows access to the action processor's action collection.")], HRESULT, 'Actions',
              ( ['in'], POINTER(IActionCollection), 'piActions' )),
    COMMETHOD(['propget', helpstring(u'Provides a configurable timeout for waiting to be able to process data objects, defaulted to 5 seconds.')], HRESULT, 'ProcessorWaitTimeOut',
              ( ['retval', 'out'], POINTER(c_int), 'plProcessorWaitTimeOut' )),
    COMMETHOD(['propput', helpstring(u'Provides a configurable timeout for waiting to be able to process data objects, defaulted to 5 seconds.')], HRESULT, 'ProcessorWaitTimeOut',
              ( ['in'], c_int, 'plProcessorWaitTimeOut' )),
    COMMETHOD(['propget', helpstring(u'Indicates if real-time actions are excluded from appearing on the interface.')], HRESULT, 'ExcludeRealtimeActions',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbvarExclude' )),
    COMMETHOD(['propput', helpstring(u'Indicates if real-time actions are excluded from appearing on the interface.')], HRESULT, 'ExcludeRealtimeActions',
              ( ['in'], VARIANT_BOOL, 'pbvarExclude' )),
    COMMETHOD([helpstring(u'Checks for deleted Layers and disables affected actions.')], HRESULT, 'CheckLayers'),
]
################################################################
## code template for IActionProcessor implementation
##class IActionProcessor_Impl(object):
##    def ProcessData(self, piObject, bQueueProcessing, pvarReturnedObjects):
##        u'Takes an object as a parameter and runs it through an action list.'
##        #return 
##
##    def _get(self):
##        u'Indicates if real-time actions are excluded from appearing on the interface.'
##        #return pbvarExclude
##    def _set(self, pbvarExclude):
##        u'Indicates if real-time actions are excluded from appearing on the interface.'
##    ExcludeRealtimeActions = property(_get, _set, doc = _set.__doc__)
##
##    def Actions(self, piActions):
##        u"Allows access to the action processor's action collection."
##        #return 
##
##    def _get(self):
##        u'Provides a configurable timeout for waiting to be able to process data objects, defaulted to 5 seconds.'
##        #return plProcessorWaitTimeOut
##    def _set(self, plProcessorWaitTimeOut):
##        u'Provides a configurable timeout for waiting to be able to process data objects, defaulted to 5 seconds.'
##    ProcessorWaitTimeOut = property(_get, _set, doc = _set.__doc__)
##
##    def CheckLayers(self):
##        u'Checks for deleted Layers and disables affected actions.'
##        #return 
##
##    def _get(self):
##        u'Indicates whether the action processor will process any new data objects or any queued data objects.'
##        #return pbvarSuspended
##    def _set(self, pbvarSuspended):
##        u'Indicates whether the action processor will process any new data objects or any queued data objects.'
##    Suspended = property(_get, _set, doc = _set.__doc__)
##
##    def ClearQueue(self):
##        u'Purges the processing queue and terminates the processing of queued messages.'
##        #return 
##

class IGraphicFeatureLayer2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'GraphicFeatureLayer2.'
    _iid_ = GUID('{27C6FF5D-631C-4E80-A77C-2C7229BB7B10}')
    _idlflags_ = ['oleautomation']
IGraphicFeatureLayer2._methods_ = [
    COMMETHOD(['propget'], HRESULT, 'HasM',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pHasM' )),
    COMMETHOD(['propget'], HRESULT, 'HasZ',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pHasZ' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the layer is visible as defined in the TOC (i.e. marked on).')], HRESULT, 'Visible',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Visible' )),
]
################################################################
## code template for IGraphicFeatureLayer2 implementation
##class IGraphicFeatureLayer2_Impl(object):
##    @property
##    def HasM(self):
##        '-no docstring-'
##        #return pHasM
##
##    @property
##    def HasZ(self):
##        '-no docstring-'
##        #return pHasZ
##
##    @property
##    def Visible(self):
##        u'Indicates whether the layer is visible as defined in the TOC (i.e. marked on).'
##        #return Visible
##

ITableDefinition._methods_ = [
    COMMETHOD(['propget', helpstring(u'Definition query expression for the existing layer.')], HRESULT, 'DefinitionExpression',
              ( ['retval', 'out'], POINTER(BSTR), 'Expression' )),
    COMMETHOD(['propput', helpstring(u'Definition query expression for the existing layer.')], HRESULT, 'DefinitionExpression',
              ( ['in'], BSTR, 'Expression' )),
    COMMETHOD(['propget', helpstring(u'The selection set that defines the subset of features in a selection layer.')], HRESULT, 'DefinitionSelectionSet',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ISelectionSet)), 'SelectionSet' )),
]
################################################################
## code template for ITableDefinition implementation
##class ITableDefinition_Impl(object):
##    def _get(self):
##        u'Definition query expression for the existing layer.'
##        #return Expression
##    def _set(self, Expression):
##        u'Definition query expression for the existing layer.'
##    DefinitionExpression = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def DefinitionSelectionSet(self):
##        u'The selection set that defines the subset of features in a selection layer.'
##        #return SelectionSet
##

IRasterRGBRenderer2._methods_ = [
    COMMETHOD(['propget', helpstring(u'The band to be represented in Alpha.')], HRESULT, 'AlphaBandIndex',
              ( ['retval', 'out'], POINTER(c_int), 'pIndex' )),
    COMMETHOD(['propput', helpstring(u'The band to be represented in Alpha.')], HRESULT, 'AlphaBandIndex',
              ( ['in'], c_int, 'pIndex' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the Alpha band is used.')], HRESULT, 'UseAlphaBand',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pUse' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the Alpha band is used.')], HRESULT, 'UseAlphaBand',
              ( ['in'], VARIANT_BOOL, 'pUse' )),
]
################################################################
## code template for IRasterRGBRenderer2 implementation
##class IRasterRGBRenderer2_Impl(object):
##    def _get(self):
##        u'The band to be represented in Alpha.'
##        #return pIndex
##    def _set(self, pIndex):
##        u'The band to be represented in Alpha.'
##    AlphaBandIndex = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the Alpha band is used.'
##        #return pUse
##    def _set(self, pUse):
##        u'Indicates if the Alpha band is used.'
##    UseAlphaBand = property(_get, _set, doc = _set.__doc__)
##

IRasterRendererMaker2._methods_ = [
    COMMETHOD([helpstring(u'Returns the raster renderer which should be used for the default display of the input raster.')], HRESULT, 'CreateDefaultRasterRenderer',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterDataset), 'pRasterDataset' ),
              ( ['retval', 'out'], POINTER(POINTER(IRasterRenderer)), 'ppRasterRenderer' )),
]
################################################################
## code template for IRasterRendererMaker2 implementation
##class IRasterRendererMaker2_Impl(object):
##    def CreateDefaultRasterRenderer(self, pRasterDataset):
##        u'Returns the raster renderer which should be used for the default display of the input raster.'
##        #return ppRasterRenderer
##

class ILasAttributeRenderer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control functions common to all LAS attribute renderers.'
    _iid_ = GUID('{6005FEB9-C92B-46B5-BB6A-F8E92BD013CA}')
    _idlflags_ = ['oleautomation']
ILasAttributeRenderer._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The LAS query filter.')], HRESULT, 'Filter',
              ( ['in'], POINTER(comtypes.gen._7BA654FE_F55E_4EE5_8CF2_FAEFFBC04A61_0_10_2.ILasPointFilter), 'ppFilter' )),
    COMMETHOD(['propget', helpstring(u'The LAS query filter.')], HRESULT, 'Filter',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._7BA654FE_F55E_4EE5_8CF2_FAEFFBC04A61_0_10_2.ILasPointFilter)), 'ppFilter' )),
    COMMETHOD(['propput', helpstring(u'The thinning factor.')], HRESULT, 'ThinningFactor',
              ( ['in'], c_double, 'pFactor' )),
    COMMETHOD(['propget', helpstring(u'The thinning factor.')], HRESULT, 'ThinningFactor',
              ( ['retval', 'out'], POINTER(c_double), 'pFactor' )),
    COMMETHOD(['propput', helpstring(u'The LAS attribute to be used to define drawing symbol.')], HRESULT, 'Attribute',
              ( ['in'], comtypes.gen._7BA654FE_F55E_4EE5_8CF2_FAEFFBC04A61_0_10_2.esriLasAttributeType, 'pType' )),
    COMMETHOD(['propget', helpstring(u'The LAS attribute to be used to define drawing symbol.')], HRESULT, 'Attribute',
              ( ['retval', 'out'], POINTER(comtypes.gen._7BA654FE_F55E_4EE5_8CF2_FAEFFBC04A61_0_10_2.esriLasAttributeType), 'pType' )),
]
################################################################
## code template for ILasAttributeRenderer implementation
##class ILasAttributeRenderer_Impl(object):
##    @property
##    def Filter(self, ppFilter):
##        u'The LAS query filter.'
##        #return 
##
##    def _get(self):
##        u'The thinning factor.'
##        #return pFactor
##    def _set(self, pFactor):
##        u'The thinning factor.'
##    ThinningFactor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The LAS attribute to be used to define drawing symbol.'
##        #return pType
##    def _set(self, pType):
##        u'The LAS attribute to be used to define drawing symbol.'
##    Attribute = property(_get, _set, doc = _set.__doc__)
##

class ICadastralFabricLayer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the cadastral fabric layer.'
    _iid_ = GUID('{7F1AB670-5CA9-44D1-B42D-12AA868FC757}')
    _idlflags_ = ['oleautomation']
ICadastralFabricLayer._methods_ = [
    COMMETHOD(['propputref', helpstring(u"The layer's CadastralFabric.")], HRESULT, 'CadastralFabric',
              ( ['in'], POINTER(comtypes.gen._7BA654FE_F55E_4EE5_8CF2_FAEFFBC04A61_0_10_2.ICadastralFabric), 'CadastralFabric' )),
    COMMETHOD(['propget', helpstring(u"The layer's CadastralFabric.")], HRESULT, 'CadastralFabric',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._7BA654FE_F55E_4EE5_8CF2_FAEFFBC04A61_0_10_2.ICadastralFabric)), 'CadastralFabric' )),
    COMMETHOD([helpstring(u'Creates a FeatureIDSet based upon the search criteria.')], HRESULT, 'SearchCadastralFeatures',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'queryFilter' ),
              ( ['in'], esriCadastralFeature, 'CadastralFeature' ),
              ( ['retval', 'out'], POINTER(POINTER(IFeatureIDSet)), 'FeatureIDSet' )),
    COMMETHOD(['propget', helpstring(u'The sub-layer for the renderer type past.')], HRESULT, 'CadastralSubLayer',
              ( ['in'], esriCadastralFabricRenderer, 'LayerType' ),
              ( ['retval', 'out'], POINTER(POINTER(IFeatureLayer)), 'ppLayer' )),
]
################################################################
## code template for ICadastralFabricLayer implementation
##class ICadastralFabricLayer_Impl(object):
##    @property
##    def CadastralFabric(self, CadastralFabric):
##        u"The layer's CadastralFabric."
##        #return 
##
##    @property
##    def CadastralSubLayer(self, LayerType):
##        u'The sub-layer for the renderer type past.'
##        #return ppLayer
##
##    def SearchCadastralFeatures(self, queryFilter, CadastralFeature):
##        u'Creates a FeatureIDSet based upon the search criteria.'
##        #return FeatureIDSet
##

class MobileServerIP(CoClass):
    u'Mobile Server Message Proxy.'
    _reg_clsid_ = GUID('{1ECBEBC1-0E00-4061-AB75-F011C9096C34}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
MobileServerIP._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._746F6817_89BB_4490_9829_83CA25FD505A_0_10_2.IAGSServerObject2, comtypes.gen._746F6817_89BB_4490_9829_83CA25FD505A_0_10_2.IAGSServerObject, IMobileServer, IMobileSync, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]

IBasicOverposterLayerProperties2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Feature type.')], HRESULT, 'FeatureType',
              ( ['retval', 'out'], POINTER(esriBasicOverposterFeatureType), 'Type' )),
    COMMETHOD(['propput', helpstring(u'Feature type.')], HRESULT, 'FeatureType',
              ( ['in'], esriBasicOverposterFeatureType, 'Type' )),
    COMMETHOD(['propget', helpstring(u'Barrier weighting for features in the layer.')], HRESULT, 'FeatureWeight',
              ( ['retval', 'out'], POINTER(esriBasicOverposterWeight), 'Weight' )),
    COMMETHOD(['propput', helpstring(u'Barrier weighting for features in the layer.')], HRESULT, 'FeatureWeight',
              ( ['in'], esriBasicOverposterWeight, 'Weight' )),
    COMMETHOD(['propget', helpstring(u'Barrier weighting for labels in the layer.')], HRESULT, 'LabelWeight',
              ( ['retval', 'out'], POINTER(esriBasicOverposterWeight), 'Weight' )),
    COMMETHOD(['propput', helpstring(u'Barrier weighting for labels in the layer.')], HRESULT, 'LabelWeight',
              ( ['in'], esriBasicOverposterWeight, 'Weight' )),
    COMMETHOD(['propget', helpstring(u'Feature labeling option for the layer.')], HRESULT, 'NumLabelsOption',
              ( ['retval', 'out'], POINTER(esriBasicNumLabelsOption), 'option' )),
    COMMETHOD(['propput', helpstring(u'Feature labeling option for the layer.')], HRESULT, 'NumLabelsOption',
              ( ['in'], esriBasicNumLabelsOption, 'option' )),
    COMMETHOD(['propget', helpstring(u'Line label placement position options.')], HRESULT, 'LineLabelPosition',
              ( ['retval', 'out'], POINTER(POINTER(ILineLabelPosition)), 'position' )),
    COMMETHOD(['propput', helpstring(u'Line label placement position options.')], HRESULT, 'LineLabelPosition',
              ( ['in'], POINTER(ILineLabelPosition), 'position' )),
    COMMETHOD(['propget', helpstring(u'Line label placement position priority options.')], HRESULT, 'LineLabelPlacementPriorities',
              ( ['retval', 'out'], POINTER(POINTER(ILineLabelPlacementPriorities)), 'linePlacementPriorities' )),
    COMMETHOD(['propput', helpstring(u'Line label placement position priority options.')], HRESULT, 'LineLabelPlacementPriorities',
              ( ['in'], POINTER(ILineLabelPlacementPriorities), 'linePlacementPriorities' )),
    COMMETHOD(['propget', helpstring(u'Indicates if unplaced labels are generated.')], HRESULT, 'GenerateUnplacedLabels',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if unplaced labels are generated.')], HRESULT, 'GenerateUnplacedLabels',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Point label placement method.')], HRESULT, 'PointPlacementMethod',
              ( ['retval', 'out'], POINTER(esriOverposterPointPlacementMethod), 'Method' )),
    COMMETHOD(['propput', helpstring(u'Point label placement method.')], HRESULT, 'PointPlacementMethod',
              ( ['in'], esriOverposterPointPlacementMethod, 'Method' )),
    COMMETHOD(['propget', helpstring(u'Indicates if point labels are placed on top of features.')], HRESULT, 'PointPlacementOnTop',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'OnTop' )),
    COMMETHOD(['propput', helpstring(u'Indicates if point labels are placed on top of features.')], HRESULT, 'PointPlacementOnTop',
              ( ['in'], VARIANT_BOOL, 'OnTop' )),
    COMMETHOD(['propget', helpstring(u'Point label placement position priority options.')], HRESULT, 'PointPlacementPriorities',
              ( ['retval', 'out'], POINTER(POINTER(IPointPlacementPriorities)), 'PointPlacementPriorities' )),
    COMMETHOD(['propput', helpstring(u'Point label placement position priority options.')], HRESULT, 'PointPlacementPriorities',
              ( ['in'], POINTER(IPointPlacementPriorities), 'PointPlacementPriorities' )),
    COMMETHOD(['propget', helpstring(u'Point label placement angle(s).')], HRESULT, 'PointPlacementAngles',
              ( ['retval', 'out'], POINTER(VARIANT), 'angles' )),
    COMMETHOD(['propput', helpstring(u'Point label placement angle(s).')], HRESULT, 'PointPlacementAngles',
              ( ['in'], VARIANT, 'angles' )),
    COMMETHOD(['propget', helpstring(u'Label buffer ratio. A value of 1 means a buffer the size of the label height.')], HRESULT, 'BufferRatio',
              ( ['retval', 'out'], POINTER(c_double), 'BufferRatio' )),
    COMMETHOD(['propput', helpstring(u'Label buffer ratio. A value of 1 means a buffer the size of the label height.')], HRESULT, 'BufferRatio',
              ( ['in'], c_double, 'BufferRatio' )),
    COMMETHOD(['propget', helpstring(u'Offset in map units at which labels will be placed away from line features.')], HRESULT, 'LineOffset',
              ( ['retval', 'out'], POINTER(c_double), 'LineOffset' )),
    COMMETHOD(['propput', helpstring(u'Offset in map units at which labels will be placed away from line features.')], HRESULT, 'LineOffset',
              ( ['in'], c_double, 'LineOffset' )),
    COMMETHOD(['propget', helpstring(u'Maximum distance in map units the label is allowed to be away from the feature.')], HRESULT, 'MaxDistanceFromTarget',
              ( ['retval', 'out'], POINTER(c_double), 'Distance' )),
    COMMETHOD(['propput', helpstring(u'Maximum distance in map units the label is allowed to be away from the feature.')], HRESULT, 'MaxDistanceFromTarget',
              ( ['in'], c_double, 'Distance' )),
]
################################################################
## code template for IBasicOverposterLayerProperties2 implementation
##class IBasicOverposterLayerProperties2_Impl(object):
##    def _get(self):
##        u'Line label placement position options.'
##        #return position
##    def _set(self, position):
##        u'Line label placement position options.'
##    LineLabelPosition = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Feature type.'
##        #return Type
##    def _set(self, Type):
##        u'Feature type.'
##    FeatureType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Point label placement angle(s).'
##        #return angles
##    def _set(self, angles):
##        u'Point label placement angle(s).'
##    PointPlacementAngles = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Label buffer ratio. A value of 1 means a buffer the size of the label height.'
##        #return BufferRatio
##    def _set(self, BufferRatio):
##        u'Label buffer ratio. A value of 1 means a buffer the size of the label height.'
##    BufferRatio = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Point label placement method.'
##        #return Method
##    def _set(self, Method):
##        u'Point label placement method.'
##    PointPlacementMethod = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Feature labeling option for the layer.'
##        #return option
##    def _set(self, option):
##        u'Feature labeling option for the layer.'
##    NumLabelsOption = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Point label placement position priority options.'
##        #return PointPlacementPriorities
##    def _set(self, PointPlacementPriorities):
##        u'Point label placement position priority options.'
##    PointPlacementPriorities = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Maximum distance in map units the label is allowed to be away from the feature.'
##        #return Distance
##    def _set(self, Distance):
##        u'Maximum distance in map units the label is allowed to be away from the feature.'
##    MaxDistanceFromTarget = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Barrier weighting for features in the layer.'
##        #return Weight
##    def _set(self, Weight):
##        u'Barrier weighting for features in the layer.'
##    FeatureWeight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Line label placement position priority options.'
##        #return linePlacementPriorities
##    def _set(self, linePlacementPriorities):
##        u'Line label placement position priority options.'
##    LineLabelPlacementPriorities = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Offset in map units at which labels will be placed away from line features.'
##        #return LineOffset
##    def _set(self, LineOffset):
##        u'Offset in map units at which labels will be placed away from line features.'
##    LineOffset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if point labels are placed on top of features.'
##        #return OnTop
##    def _set(self, OnTop):
##        u'Indicates if point labels are placed on top of features.'
##    PointPlacementOnTop = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Barrier weighting for labels in the layer.'
##        #return Weight
##    def _set(self, Weight):
##        u'Barrier weighting for labels in the layer.'
##    LabelWeight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if unplaced labels are generated.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if unplaced labels are generated.'
##    GenerateUnplacedLabels = property(_get, _set, doc = _set.__doc__)
##

ITableSelection._methods_ = [
    COMMETHOD(['propget', helpstring(u'The selected set of rows.')], HRESULT, 'SelectionSet',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ISelectionSet)), 'SelectionSet' )),
    COMMETHOD(['propputref', helpstring(u'The selected set of rows.')], HRESULT, 'SelectionSet',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ISelectionSet), 'SelectionSet' )),
    COMMETHOD([helpstring(u'Adds a row to the selection set (honoring the current combination method).')], HRESULT, 'AddRow',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRow), 'Row' )),
    COMMETHOD([helpstring(u'Selects rows based upon the specified criteria and combination method.')], HRESULT, 'SelectRows',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'Filter' ),
              ( ['in'], esriSelectionResultEnum, 'Method' ),
              ( ['in'], VARIANT_BOOL, 'justOne' )),
    COMMETHOD([helpstring(u'Clears the selection.')], HRESULT, 'Clear'),
    COMMETHOD([helpstring(u'Fires the layer update event. Required when SelectionSet changes.')], HRESULT, 'SelectionChanged'),
]
################################################################
## code template for ITableSelection implementation
##class ITableSelection_Impl(object):
##    def SelectionChanged(self):
##        u'Fires the layer update event. Required when SelectionSet changes.'
##        #return 
##
##    def Clear(self):
##        u'Clears the selection.'
##        #return 
##
##    def AddRow(self, Row):
##        u'Adds a row to the selection set (honoring the current combination method).'
##        #return 
##
##    def SelectionSet(self, SelectionSet):
##        u'The selected set of rows.'
##        #return 
##
##    def SelectRows(self, Filter, Method, justOne):
##        u'Selects rows based upon the specified criteria and combination method.'
##        #return 
##

class CadastralFabricLayerFactory(CoClass):
    u'A factory for create cadastral fabric layers.'
    _reg_clsid_ = GUID('{B3FC8F38-5DBC-4932-B0DE-552E5F7C2327}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
CadastralFabricLayerFactory._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILayerFactory]

class MobileServerObjectDescription(CoClass):
    u'MobileServer Object Description Class.'
    _reg_clsid_ = GUID('{63BDA75D-25A4-4A81-BCAE-99D161791C84}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
MobileServerObjectDescription._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._746F6817_89BB_4490_9829_83CA25FD505A_0_10_2.IServerObjectDescription]

class IImageServerIdentifyResults(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Image Server Identify Results Interface.'
    _iid_ = GUID('{F2FE7B23-5706-4F73-A9FA-E63DDB99F391}')
    _idlflags_ = ['oleautomation']
IImageServerIdentifyResults._methods_ = [
    COMMETHOD(['propget', helpstring(u'The identify result count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propget', helpstring(u'The identify result at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IImageServerIdentifyResult)), 'pIdentifyResult' )),
    COMMETHOD([helpstring(u'Removes the identify result at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all identify results.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Adds an identify result.')], HRESULT, 'Add',
              ( ['in'], POINTER(IImageServerIdentifyResult), 'pIdentifyResult' )),
    COMMETHOD([helpstring(u'Adds an identify result at the specified position.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(IImageServerIdentifyResult), 'pIdentifyResult' )),
]
################################################################
## code template for IImageServerIdentifyResults implementation
##class IImageServerIdentifyResults_Impl(object):
##    @property
##    def Count(self):
##        u'The identify result count.'
##        #return pCount
##
##    def Insert(self, Index, pIdentifyResult):
##        u'Adds an identify result at the specified position.'
##        #return 
##
##    def Remove(self, Index):
##        u'Removes the identify result at the specified position.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'The identify result at the specified position.'
##        #return pIdentifyResult
##
##    def RemoveAll(self):
##        u'Removes all identify results.'
##        #return 
##
##    def Add(self, pIdentifyResult):
##        u'Adds an identify result.'
##        #return 
##

IGFSReplicaDescription._methods_ = [
    COMMETHOD(['propputref', helpstring(u'Table descriptions for replication.')], HRESULT, 'TableDescriptions',
              ( ['in'], POINTER(IGFSTableDescriptions), 'GFSTableDescriptions' )),
    COMMETHOD(['propget', helpstring(u'Table descriptions for replication.')], HRESULT, 'TableDescriptions',
              ( ['retval', 'out'], POINTER(POINTER(IGFSTableDescriptions)), 'GFSTableDescriptions' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the replica is a check-out.')], HRESULT, 'SingleGeneration',
              ( ['in'], VARIANT_BOOL, 'SingleGeneration' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the replica is a check-out.')], HRESULT, 'SingleGeneration',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'SingleGeneration' )),
    COMMETHOD(['propputref', helpstring(u'The shape that determines which features are replicated.')], HRESULT, 'QueryGeometry',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'QueryGeometry' )),
    COMMETHOD(['propget', helpstring(u'The shape that determines which features are replicated.')], HRESULT, 'QueryGeometry',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry)), 'QueryGeometry' )),
    COMMETHOD(['propput', helpstring(u'Set the replica model type.')], HRESULT, 'ModelType',
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriReplicaModelType, 'ModelType' )),
    COMMETHOD(['propget', helpstring(u'Set the replica model type.')], HRESULT, 'ModelType',
              ( ['retval', 'out'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriReplicaModelType), 'ModelType' )),
]
################################################################
## code template for IGFSReplicaDescription implementation
##class IGFSReplicaDescription_Impl(object):
##    @property
##    def QueryGeometry(self, QueryGeometry):
##        u'The shape that determines which features are replicated.'
##        #return 
##
##    @property
##    def TableDescriptions(self, GFSTableDescriptions):
##        u'Table descriptions for replication.'
##        #return 
##
##    def _get(self):
##        u'Set the replica model type.'
##        #return ModelType
##    def _set(self, ModelType):
##        u'Set the replica model type.'
##    ModelType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the replica is a check-out.'
##        #return SingleGeneration
##    def _set(self, SingleGeneration):
##        u'Indicates if the replica is a check-out.'
##    SingleGeneration = property(_get, _set, doc = _set.__doc__)
##

IRasterStretchMinMax._methods_ = [
    COMMETHOD(['propget', helpstring(u'The minimum value used for stretching cell values.')], HRESULT, 'StretchMin',
              ( ['retval', 'out'], POINTER(c_double), 'param' )),
    COMMETHOD(['propget', helpstring(u'The maximum value used for stretching cell values.')], HRESULT, 'StretchMax',
              ( ['retval', 'out'], POINTER(c_double), 'param' )),
    COMMETHOD(['propput', helpstring(u'The custom minimum value for stretch renderer type "Minimum-Maximum".')], HRESULT, 'CustomStretchMin',
              ( ['in'], c_double, 'param' )),
    COMMETHOD(['propget', helpstring(u'The custom minimum value for stretch renderer type "Minimum-Maximum".')], HRESULT, 'CustomStretchMin',
              ( ['retval', 'out'], POINTER(c_double), 'param' )),
    COMMETHOD(['propput', helpstring(u'The custom maximum value for stretch renderer type "Minimum-Maximum".')], HRESULT, 'CustomStretchMax',
              ( ['in'], c_double, 'param' )),
    COMMETHOD(['propget', helpstring(u'The custom maximum value for stretch renderer type "Minimum-Maximum".')], HRESULT, 'CustomStretchMax',
              ( ['retval', 'out'], POINTER(c_double), 'param' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to use the custom minimum/maximum values for stretch renderer type "Minimum-Maximum".')], HRESULT, 'UseCustomStretchMinMax',
              ( ['in'], VARIANT_BOOL, 'pUse' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to use the custom minimum/maximum values for stretch renderer type "Minimum-Maximum".')], HRESULT, 'UseCustomStretchMinMax',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pUse' )),
]
################################################################
## code template for IRasterStretchMinMax implementation
##class IRasterStretchMinMax_Impl(object):
##    @property
##    def StretchMax(self):
##        u'The maximum value used for stretching cell values.'
##        #return param
##
##    def _get(self):
##        u'The custom maximum value for stretch renderer type "Minimum-Maximum".'
##        #return param
##    def _set(self, param):
##        u'The custom maximum value for stretch renderer type "Minimum-Maximum".'
##    CustomStretchMax = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether to use the custom minimum/maximum values for stretch renderer type "Minimum-Maximum".'
##        #return pUse
##    def _set(self, pUse):
##        u'Indicates whether to use the custom minimum/maximum values for stretch renderer type "Minimum-Maximum".'
##    UseCustomStretchMinMax = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The custom minimum value for stretch renderer type "Minimum-Maximum".'
##        #return param
##    def _set(self, param):
##        u'The custom minimum value for stretch renderer type "Minimum-Maximum".'
##    CustomStretchMin = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def StretchMin(self):
##        u'The minimum value used for stretching cell values.'
##        #return param
##

IDynamicCacheLayerManager2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates whether the layer is drawing while in cached mode.')], HRESULT, 'Cached',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Cached' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the layer is drawing while in cached mode.')], HRESULT, 'Cached',
              ( ['in'], VARIANT_BOOL, 'Cached' )),
]
################################################################
## code template for IDynamicCacheLayerManager2 implementation
##class IDynamicCacheLayerManager2_Impl(object):
##    def _get(self):
##        u'Indicates whether the layer is drawing while in cached mode.'
##        #return Cached
##    def _set(self, Cached):
##        u'Indicates whether the layer is drawing while in cached mode.'
##    Cached = property(_get, _set, doc = _set.__doc__)
##

class DataObject(CoClass):
    u'DataObject co-class.'
    _reg_clsid_ = GUID('{B63B69B9-5E1A-418B-9E13-FBD25FD98999}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
DataObject._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDataObjectEx, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class IImageServer4(IImageServer3):
    _case_insensitive_ = True
    u'Provides access to members that control an image server object (SO).'
    _iid_ = GUID('{08586B82-874C-492A-93B2-73B91A92D28F}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'esriMensurationOperation'
esriMensurationPoint = 0
esriMensurationDistanceAndAngle = 1
esriMensurationAreaAndPerimeter = 2
esriMensurationHeightFromBaseAndTop = 3
esriMensurationHeightFromBaseAndTopShadow = 4
esriMensurationHeightFromTopAndTopShadow = 5
esriMensurationCentroid = 6
esriMensurationPoint3D = 7
esriMensurationDistanceAndAngle3D = 8
esriMensurationAreaAndPerimeter3D = 9
esriMensurationCentroid3D = 13
esriMensurationOperation = c_int # enum
IImageServer4._methods_ = [
    COMMETHOD([helpstring(u'Adds a list of raster items for sharing with other users (roles).')], HRESULT, 'Add',
              ( ['in'], POINTER(IRasterItemDescriptions), 'pItemDescriptions' ),
              ( ['retval', 'out'], POINTER(POINTER(IImageServerEditResults)), 'ppResults' )),
    COMMETHOD([helpstring(u'Updates a given list of raster items (images).')], HRESULT, 'Update',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFIDSet), 'pRIDs' ),
              ( ['in'], POINTER(IRasterItemDescriptions), 'pItemDescriptions' ),
              ( ['retval', 'out'], POINTER(POINTER(IImageServerEditResults)), 'ppResults' )),
    COMMETHOD([helpstring(u'Deletes a given list of raster items (images).')], HRESULT, 'Delete',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFIDSet), 'pRIDs' ),
              ( ['retval', 'out'], POINTER(POINTER(IImageServerEditResults)), 'ppResults' )),
    COMMETHOD([helpstring(u'Measures distance, angle, area, perimeter, and height.')], HRESULT, 'Measure',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'pFrom' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'pTo' ),
              ( ['in'], POINTER(IMosaicRule), 'pMosaicRule' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'pCellsize' ),
              ( ['in'], esriMensurationOperation, 'operation' ),
              ( ['retval', 'out'], POINTER(POINTER(IImageServerMeasureResult)), 'ppMeasureResult' )),
    COMMETHOD([helpstring(u'Computes histograms within an area of interest.')], HRESULT, 'ComputeHistograms',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'pGeometry' ),
              ( ['in'], POINTER(IMosaicRule), 'pMosaicRule' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'pCellsize' ),
              ( ['in'], POINTER(IRenderingRule), 'pRenderingRule' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._8F0541A3_D5BE_4B3F_A8D9_062D5579E19B_0_10_2.IRasterHistograms)), 'ppHistograms' )),
    COMMETHOD(['propget', helpstring(u'The raster attribute table.')], HRESULT, 'RasterAttributeTable',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRecordSet)), 'ppRAT' )),
    COMMETHOD(['propget', helpstring(u'The image service key properties.')], HRESULT, 'KeyProperties',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet)), 'ppProperties' )),
    COMMETHOD([helpstring(u'The key properties for a given raster catalog item.')], HRESULT, 'GetRasterKeyProperties',
              ( ['in'], c_int, 'RID' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet)), 'ppProperties' )),
    COMMETHOD([helpstring(u'Identifies the pixel values and all catalog items at the given one or more locations.')], HRESULT, 'IdentifyAll',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'pLocations' ),
              ( ['in'], POINTER(IMosaicRule), 'pMosaicRule' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'pCellsize' ),
              ( ['in'], POINTER(IRenderingRule), 'pRenderingRule' ),
              ( ['in'], BSTR, 'options' ),
              ( ['retval', 'out'], POINTER(POINTER(IImageServerIdentifyResults)), 'ppIdentifyResults' )),
    COMMETHOD([helpstring(u'Gets the view of a given view ID.')], HRESULT, 'GetView',
              ( ['in'], BSTR, 'VID' ),
              ( ['retval', 'out'], POINTER(POINTER(IImageView)), 'ppView' )),
    COMMETHOD([helpstring(u'Creates a new view.')], HRESULT, 'CreateView',
              ( ['in'], POINTER(IImageView), 'pView' ),
              ( ['retval', 'out'], POINTER(POINTER(IImageServerEditResult)), 'ppResult' )),
    COMMETHOD([helpstring(u'Inserts and Removes raster items to a given view.')], HRESULT, 'UpdateView',
              ( ['in'], BSTR, 'VID' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFIDSet), 'pAddIDs' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFIDSet), 'pDeleteIDs' ),
              ( ['retval', 'out'], POINTER(POINTER(IImageServerEditResults)), 'ppResults' )),
    COMMETHOD([helpstring(u'Deletes the view of a given view ID.')], HRESULT, 'DeleteView',
              ( ['in'], BSTR, 'VID' ),
              ( ['retval', 'out'], POINTER(POINTER(IImageServerEditResult)), 'ppResult' )),
    COMMETHOD([helpstring(u'Executes a named image server processing command.')], HRESULT, 'Execute',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT, 'argument' ),
              ( ['retval', 'out'], POINTER(VARIANT), 'pResult' )),
]
################################################################
## code template for IImageServer4 implementation
##class IImageServer4_Impl(object):
##    def GetView(self, VID):
##        u'Gets the view of a given view ID.'
##        #return ppView
##
##    def DeleteView(self, VID):
##        u'Deletes the view of a given view ID.'
##        #return ppResult
##
##    def Execute(self, Name, argument):
##        u'Executes a named image server processing command.'
##        #return pResult
##
##    def GetRasterKeyProperties(self, RID):
##        u'The key properties for a given raster catalog item.'
##        #return ppProperties
##
##    def Update(self, pRIDs, pItemDescriptions):
##        u'Updates a given list of raster items (images).'
##        #return ppResults
##
##    def ComputeHistograms(self, pGeometry, pMosaicRule, pCellsize, pRenderingRule):
##        u'Computes histograms within an area of interest.'
##        #return ppHistograms
##
##    def Add(self, pItemDescriptions):
##        u'Adds a list of raster items for sharing with other users (roles).'
##        #return ppResults
##
##    @property
##    def KeyProperties(self):
##        u'The image service key properties.'
##        #return ppProperties
##
##    def CreateView(self, pView):
##        u'Creates a new view.'
##        #return ppResult
##
##    def Measure(self, pFrom, pTo, pMosaicRule, pCellsize, operation):
##        u'Measures distance, angle, area, perimeter, and height.'
##        #return ppMeasureResult
##
##    def UpdateView(self, VID, pAddIDs, pDeleteIDs):
##        u'Inserts and Removes raster items to a given view.'
##        #return ppResults
##
##    def Delete(self, pRIDs):
##        u'Deletes a given list of raster items (images).'
##        #return ppResults
##
##    def IdentifyAll(self, pLocations, pMosaicRule, pCellsize, pRenderingRule, options):
##        u'Identifies the pixel values and all catalog items at the given one or more locations.'
##        #return ppIdentifyResults
##
##    @property
##    def RasterAttributeTable(self):
##        u'The raster attribute table.'
##        #return ppRAT
##

class Map(CoClass):
    u'A container for the display and manipulation of map data.'
    _reg_clsid_ = GUID('{E6BDAA76-4D35-11D0-98BE-00805F7CED21}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IBasicMap2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the basic map.'
    _iid_ = GUID('{47FA77FA-2F59-42B9-9048-7B139DA3FE26}')
    _idlflags_ = ['oleautomation']
class IMapBarriers(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control map barriers.'
    _iid_ = GUID('{2C616E2F-B074-4119-868A-CAA5115F5961}')
    _idlflags_ = ['oleautomation']
class IMapBarriers2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control map barriers.'
    _iid_ = GUID('{77AF76B1-B80A-DED2-331B-CB3F50E50F2A}')
    _idlflags_ = ['oleautomation']
class IMapBookmarks2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the map bookmarks.'
    _iid_ = GUID('{DEC80B31-B4BA-48B2-84E1-9B80119F405E}')
    _idlflags_ = ['oleautomation']
class ITableCollection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a table collection.'
    _iid_ = GUID('{7D931EAB-D31F-11D2-9F40-00C04F6BC78E}')
    _idlflags_ = ['oleautomation']
class IMapAdmin(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to Map administration methods.'
    _iid_ = GUID('{E34551DB-EEE2-11D2-B86F-00600802E603}')
    _idlflags_ = ['oleautomation']
class IMapAdmin4(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to Map administration methods.'
    _iid_ = GUID('{900F7083-22AE-42B4-A00C-1776E316A910}')
    _idlflags_ = ['oleautomation']
class IDynamicMap(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to dynamic display.'
    _iid_ = GUID('{92191B6F-D881-4829-8B75-CE846970F67B}')
    _idlflags_ = ['oleautomation']
class IMapLayers2(IMapLayers):
    _case_insensitive_ = True
    u'Provides access to layers.'
    _iid_ = GUID('{6CCD973C-5309-4166-9F50-07A371179F0E}')
    _idlflags_ = ['oleautomation']
class IMapClipOptions(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u"Provides access to the Map's clipping options."
    _iid_ = GUID('{49522374-EC8E-4C1A-BA3B-2A4CC963652C}')
    _idlflags_ = ['oleautomation']
class IMapAutoExtentOptions(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u"Provides access to the Map's auto extent options."
    _iid_ = GUID('{E5461B30-C74F-47F0-BDF3-65898AC2B622}')
    _idlflags_ = ['oleautomation']
class IMapTimeDisplay(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the current time on the map.'
    _iid_ = GUID('{54BC9B6F-3A81-48D0-A07C-52238B28DC7A}')
    _idlflags_ = ['oleautomation']
class IMapTimeDisplay2(IMapTimeDisplay):
    _case_insensitive_ = True
    u'Provides access to members that control the current time on the map.'
    _iid_ = GUID('{51D8AC4D-D2C5-4F89-87C8-09D8D23360A6}')
    _idlflags_ = ['oleautomation']
class IServiceLayerCredits(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Get the service layer credits text.'
    _iid_ = GUID('{B52367CF-3B14-444D-B4FA-06A984D6ED15}')
    _idlflags_ = ['oleautomation']
Map._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMap, IBasicMap, IBasicMap2, IMapBarriers, IMapBarriers2, IActiveView, IViewManager, IViewRefresh, IGraphicsContainer, IGraphicsContainerSelect, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IConnectionPointContainer, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, IMapBookmarks, IMapBookmarks2, ISelectionEvents, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayEvents, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITransformEvents, ITableCollection, IStandaloneTableCollection, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayAdmin, IMapAdmin, IMapAdmin2, IMapAdmin3, IMapAdmin4, IRelationshipClassCollection, IMapGeographicTransformations, IMapCache, ILayerMasking, ILevelMasking, IMxdContents, IMapOverposter, IMapLayers, IDynamicMap, IMapLayers2, IMapClipOptions, IMapAutoExtentOptions, IMapTimeDisplay, IMapTimeDisplay2, IServiceLayerCredits]
Map._outgoing_interfaces_ = [IActiveViewEvents, IMapEvents, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDynamicMapEvents]

class IMapTableInfo2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to additional properties for map tables.'
    _iid_ = GUID('{8F7C2914-C653-41BB-865B-88F229D262CE}')
    _idlflags_ = ['oleautomation']
IMapTableInfo2._methods_ = [
    COMMETHOD(['propget', helpstring(u'The table ID. This is a unique ID among layers and tables, and is used to identify the table in a number of methods.')], HRESULT, 'ID',
              ( ['retval', 'out'], POINTER(c_int), 'TableID' )),
    COMMETHOD(['propget', helpstring(u'Descriptive name of the table.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propget', helpstring(u'Array of attribute fields contained in the table.')], HRESULT, 'Fields',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFields)), 'Fields' )),
    COMMETHOD(['propget', helpstring(u'Array of relates associated to the table.')], HRESULT, 'RelateInfos',
              ( ['retval', 'out'], POINTER(POINTER(IRelateInfos)), 'RelateInfo' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer has attachments.')], HRESULT, 'HasAttachments',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'HasAttachments' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer has HTML popups enabled.')], HRESULT, 'HTMLPopupType',
              ( ['retval', 'out'], POINTER(esriServerHTMLPopupType), 'Type' )),
    COMMETHOD(['propget', helpstring(u'Primary display field.')], HRESULT, 'DisplayField',
              ( ['retval', 'out'], POINTER(BSTR), 'FieldName' )),
    COMMETHOD(['propget', helpstring(u'The name of the OID Field.')], HRESULT, 'OIDFieldName',
              ( ['retval', 'out'], POINTER(BSTR), 'OIDFieldName' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer has Subtype.')], HRESULT, 'HasSubtype',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'HasSubtype' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the table supports calculating statistics on its fields.')], HRESULT, 'SupportsStatistics',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'supportsStats' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the table supports calculating advanced queries (i.e. ORDER BY clauses) on its fields.')], HRESULT, 'SupportsAdvancedQueries',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'SupportsAdvancedQueries' )),
]
################################################################
## code template for IMapTableInfo2 implementation
##class IMapTableInfo2_Impl(object):
##    @property
##    def DisplayField(self):
##        u'Primary display field.'
##        #return FieldName
##
##    @property
##    def HasSubtype(self):
##        u'Indicates if the layer has Subtype.'
##        #return HasSubtype
##
##    @property
##    def Name(self):
##        u'Descriptive name of the table.'
##        #return Name
##
##    @property
##    def SupportsStatistics(self):
##        u'Indicates if the table supports calculating statistics on its fields.'
##        #return supportsStats
##
##    @property
##    def HasAttachments(self):
##        u'Indicates if the layer has attachments.'
##        #return HasAttachments
##
##    @property
##    def Fields(self):
##        u'Array of attribute fields contained in the table.'
##        #return Fields
##
##    @property
##    def RelateInfos(self):
##        u'Array of relates associated to the table.'
##        #return RelateInfo
##
##    @property
##    def SupportsAdvancedQueries(self):
##        u'Indicates if the table supports calculating advanced queries (i.e. ORDER BY clauses) on its fields.'
##        #return SupportsAdvancedQueries
##
##    @property
##    def OIDFieldName(self):
##        u'The name of the OID Field.'
##        #return OIDFieldName
##
##    @property
##    def HTMLPopupType(self):
##        u'Indicates if the layer has HTML popups enabled.'
##        #return Type
##
##    @property
##    def ID(self):
##        u'The table ID. This is a unique ID among layers and tables, and is used to identify the table in a number of methods.'
##        #return TableID
##

IDataClassificationDef._methods_ = [
    COMMETHOD(['propget', helpstring(u'Base symbol used to generate symbols for the Renderer.')], HRESULT, 'BaseSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol)), 'pBaseSymbol' )),
    COMMETHOD(['propputref', helpstring(u'Base symbol used to generate symbols for the Renderer.')], HRESULT, 'BaseSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol), 'pBaseSymbol' )),
    COMMETHOD(['propget', helpstring(u'ColorRamp used to generate symbols for the Renderer.')], HRESULT, 'ColorRamp',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColorRamp)), 'pColorRamp' )),
    COMMETHOD(['propputref', helpstring(u'ColorRamp used to generate symbols for the Renderer.')], HRESULT, 'ColorRamp',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColorRamp), 'pColorRamp' )),
]
################################################################
## code template for IDataClassificationDef implementation
##class IDataClassificationDef_Impl(object):
##    def BaseSymbol(self, pBaseSymbol):
##        u'Base symbol used to generate symbols for the Renderer.'
##        #return 
##
##    def ColorRamp(self, pColorRamp):
##        u'ColorRamp used to generate symbols for the Renderer.'
##        #return 
##

class MarkerElement(CoClass):
    u'The Graphic Element to display markers.'
    _reg_clsid_ = GUID('{530FD712-EF0C-11D0-83A0-080009B996CC}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
MarkerElement._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IElement, IElementProperties, IElementProperties2, IElementProperties3, IMarkerElement, IGraphicElement, IBoundsProperties, comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ITransform2D, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize]

IGraphicElements._methods_ = [
    COMMETHOD(['propget', helpstring(u'The graphic element count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The graphic element at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IGraphicElement)), 'Element' )),
    COMMETHOD([helpstring(u'Remove the graphic element at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Remove all graphic elements.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Add a graphic element.')], HRESULT, 'Add',
              ( ['in'], POINTER(IGraphicElement), 'Element' )),
    COMMETHOD([helpstring(u'Add a graphic element at the specified posiiton.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(IGraphicElement), 'Element' )),
]
################################################################
## code template for IGraphicElements implementation
##class IGraphicElements_Impl(object):
##    @property
##    def Count(self):
##        u'The graphic element count.'
##        #return Count
##
##    def Insert(self, Index, Element):
##        u'Add a graphic element at the specified posiiton.'
##        #return 
##
##    def Remove(self, Index):
##        u'Remove the graphic element at the specified position.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'The graphic element at the specified position.'
##        #return Element
##
##    def RemoveAll(self):
##        u'Remove all graphic elements.'
##        #return 
##
##    def Add(self, Element):
##        u'Add a graphic element.'
##        #return 
##

class IMSDHelper(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides methods to open, save, repair mapserver definition files.'
    _iid_ = GUID('{4C0B3FB1-B9B0-4387-B047-1B9BE19098C3}')
    _idlflags_ = ['oleautomation']
IMSDHelper._methods_ = [
    COMMETHOD([helpstring(u'Open the mapserver definition file.')], HRESULT, 'Open',
              ( ['in'], BSTR, 'Path' )),
    COMMETHOD([helpstring(u'Close the mapserver defintion file.')], HRESULT, 'Close'),
    COMMETHOD([helpstring(u'Save the mapserver defintion file.')], HRESULT, 'Save',
              ( ['in'], VARIANT_BOOL, 'relativePath' )),
    COMMETHOD([helpstring(u'Save a copy of the open mapserver definition file at the specified location with the specified name.')], HRESULT, 'SaveAs',
              ( ['in'], BSTR, 'Path' ),
              ( ['in'], VARIANT_BOOL, 'relativePath' )),
    COMMETHOD([helpstring(u'Method returns a String Array containing the catalog paths to all the maps in the msd.')], HRESULT, 'GetMaps',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray)), 'ppMapPaths' )),
    COMMETHOD([helpstring(u"Given the map's catalog path, returns a boolean inidicating if it is the active map.")], HRESULT, 'IsActiveMap',
              ( ['in'], BSTR, 'mapPath' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'activeMap' )),
    COMMETHOD([helpstring(u"Given the map's catalog path returns the map's TOC display name.")], HRESULT, 'GetMapDisplayName',
              ( ['in'], BSTR, 'mapPath' ),
              ( ['retval', 'out'], POINTER(BSTR), 'mapDisplayName' )),
    COMMETHOD([helpstring(u'Replaces the workspace connection string for all layers in the given map.')], HRESULT, 'ReplaceAll',
              ( ['in'], BSTR, 'mapPath' ),
              ( ['in'], BSTR, 'oldWorkspaceConnectionString' ),
              ( ['in'], BSTR, 'newWorkspaceConnectionString' ),
              ( ['in'], VARIANT_BOOL, 'validate' )),
    COMMETHOD([helpstring(u"Given the map's catalog path, returns the catalog path for all layers in the map.")], HRESULT, 'GetLayers',
              ( ['in'], BSTR, 'mapPath' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray)), 'ppLayerPaths' )),
    COMMETHOD([helpstring(u"Given the layer's catalog path, returns a boolean indicating if it is valid.")], HRESULT, 'IsLayerValid',
              ( ['in'], BSTR, 'layerPath' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'layerValid' )),
    COMMETHOD([helpstring(u"Given the layer's catalog path, returns the layer type.")], HRESULT, 'GetLayerType',
              ( ['in'], BSTR, 'layerPath' ),
              ( ['retval', 'out'], POINTER(BSTR), 'LayerType' )),
    COMMETHOD([helpstring(u"Given the layer's catalog path, returns the catalog path to its sub layers, if it has any.")], HRESULT, 'GetSubLayers',
              ( ['in'], BSTR, 'layerPath' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray)), 'ppLayerPaths' )),
    COMMETHOD([helpstring(u"Given the layer's catalog path, returns the dataset name.")], HRESULT, 'GetDataset',
              ( ['in'], BSTR, 'layerPath' ),
              ( ['retval', 'out'], POINTER(BSTR), 'DatasetName' )),
    COMMETHOD([helpstring(u"Given the layer's catalog path, returns the workspace type.")], HRESULT, 'GetWorkspaceFactoryType',
              ( ['in'], BSTR, 'layerPath' ),
              ( ['retval', 'out'], POINTER(BSTR), 'workspaceFactoryType' )),
    COMMETHOD([helpstring(u"Given the layer's catalog path, returns the workspace connection string.")], HRESULT, 'GetWorkspaceConnectionStringFromLayer',
              ( ['in'], BSTR, 'layerPath' ),
              ( ['retval', 'out'], POINTER(BSTR), 'workspaceConnectionString' )),
    COMMETHOD([helpstring(u"Given the layer's catalog path, updates its workspace connection string.")], HRESULT, 'PutWorkspaceConnectionStringInLayer',
              ( ['in'], BSTR, 'layerPath' ),
              ( ['in'], BSTR, 'workspaceConnectionString' ),
              ( ['in'], VARIANT_BOOL, 'validate' )),
    COMMETHOD([helpstring(u"Given the layer's catalog path, returns its TOC display name.")], HRESULT, 'GetLayerDisplayName',
              ( ['in'], BSTR, 'layerPath' ),
              ( ['retval', 'out'], POINTER(BSTR), 'layerDisplayName' )),
]
################################################################
## code template for IMSDHelper implementation
##class IMSDHelper_Impl(object):
##    def SaveAs(self, Path, relativePath):
##        u'Save a copy of the open mapserver definition file at the specified location with the specified name.'
##        #return 
##
##    def GetLayers(self, mapPath):
##        u"Given the map's catalog path, returns the catalog path for all layers in the map."
##        #return ppLayerPaths
##
##    def GetWorkspaceFactoryType(self, layerPath):
##        u"Given the layer's catalog path, returns the workspace type."
##        #return workspaceFactoryType
##
##    def GetMapDisplayName(self, mapPath):
##        u"Given the map's catalog path returns the map's TOC display name."
##        #return mapDisplayName
##
##    def GetWorkspaceConnectionStringFromLayer(self, layerPath):
##        u"Given the layer's catalog path, returns the workspace connection string."
##        #return workspaceConnectionString
##
##    def GetSubLayers(self, layerPath):
##        u"Given the layer's catalog path, returns the catalog path to its sub layers, if it has any."
##        #return ppLayerPaths
##
##    def GetLayerDisplayName(self, layerPath):
##        u"Given the layer's catalog path, returns its TOC display name."
##        #return layerDisplayName
##
##    def GetDataset(self, layerPath):
##        u"Given the layer's catalog path, returns the dataset name."
##        #return DatasetName
##
##    def IsLayerValid(self, layerPath):
##        u"Given the layer's catalog path, returns a boolean indicating if it is valid."
##        #return layerValid
##
##    def PutWorkspaceConnectionStringInLayer(self, layerPath, workspaceConnectionString, validate):
##        u"Given the layer's catalog path, updates its workspace connection string."
##        #return 
##
##    def ReplaceAll(self, mapPath, oldWorkspaceConnectionString, newWorkspaceConnectionString, validate):
##        u'Replaces the workspace connection string for all layers in the given map.'
##        #return 
##
##    def GetMaps(self):
##        u'Method returns a String Array containing the catalog paths to all the maps in the msd.'
##        #return ppMapPaths
##
##    def GetLayerType(self, layerPath):
##        u"Given the layer's catalog path, returns the layer type."
##        #return LayerType
##
##    def Close(self):
##        u'Close the mapserver defintion file.'
##        #return 
##
##    def Save(self, relativePath):
##        u'Save the mapserver defintion file.'
##        #return 
##
##    def Open(self, Path):
##        u'Open the mapserver definition file.'
##        #return 
##
##    def IsActiveMap(self, mapPath):
##        u"Given the map's catalog path, returns a boolean inidicating if it is the active map."
##        #return activeMap
##

class PolygonElement(CoClass):
    u'The Graphic Element to display polygons.'
    _reg_clsid_ = GUID('{3A9767C7-F253-11D0-83A4-080009B996CC}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
PolygonElement._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IElement, IElementProperties, IElementProperties2, IElementProperties3, IPolygonElement, IFillShapeElement, IGraphicElement, IBoundsProperties, IElementEditVertices, comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ITransform2D, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize]

class StandaloneTableDescription(CoClass):
    u'The StandaloneTable Description coclass contains settings of a standalone table in a map.'
    _reg_clsid_ = GUID('{383FA402-05D9-4670-AA7A-C8667769157B}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IStandaloneTableDescription(IMapTableDescription):
    _case_insensitive_ = True
    u'Provides access to StandaloneTableDescription.'
    _iid_ = GUID('{70C23ACE-D2FA-4D3B-8847-9987454B01F0}')
    _idlflags_ = ['oleautomation']
StandaloneTableDescription._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IStandaloneTableDescription, IMapTableDescription, IMapTableTimeDescription, IDynamicMapTableDescription, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class RectangleElement(CoClass):
    u'The Graphic Element to display rectangles.'
    _reg_clsid_ = GUID('{3A9767C2-F253-11D0-83A4-080009B996CC}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
RectangleElement._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IElement, IElementProperties, IElementProperties2, IElementProperties3, IFillShapeElement, IRectangleElement, IGraphicElement, IBoundsProperties, comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ITransform2D, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize]

class LegendClass(CoClass):
    u'The legend/TOC entry for a single renderer class.'
    _reg_clsid_ = GUID('{167C5EA3-AF20-11D1-8817-080009EC732A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
LegendClass._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILegendClass, IDynamicLegendClass, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize]

class MapEvents(CoClass):
    u'Helper coclass for working with the nondefault outbound IMapEvents interface in VB.'
    _reg_clsid_ = GUID('{7FD02E40-706A-11D3-8170-0080C7625171}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
MapEvents._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown]
MapEvents._outgoing_interfaces_ = [IMapEvents]

IISLFootprintDisplayProps._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if footprint display is enabled.')], HRESULT, 'FootprintDisplayEnabled',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pEnabled' )),
    COMMETHOD(['propput', helpstring(u'Indicates if footprint display is enabled.')], HRESULT, 'FootprintDisplayEnabled',
              ( ['in'], VARIANT_BOOL, 'pEnabled' )),
    COMMETHOD(['propput', helpstring(u'The footprint display option.')], HRESULT, 'FootprintDisplayOption',
              ( ['in'], esriISLFootprintDisplayOptEnum, 'pOption' )),
    COMMETHOD(['propget', helpstring(u'The footprint display option.')], HRESULT, 'FootprintDisplayOption',
              ( ['retval', 'out'], POINTER(esriISLFootprintDisplayOptEnum), 'pOption' )),
    COMMETHOD(['propputref', helpstring(u'The footprint display symbol.')], HRESULT, 'FootprintDisplaySymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol), 'ppSymbol' )),
    COMMETHOD(['propget', helpstring(u'The footprint display symbol.')], HRESULT, 'FootprintDisplaySymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol)), 'ppSymbol' )),
]
################################################################
## code template for IISLFootprintDisplayProps implementation
##class IISLFootprintDisplayProps_Impl(object):
##    @property
##    def FootprintDisplaySymbol(self, ppSymbol):
##        u'The footprint display symbol.'
##        #return 
##
##    def _get(self):
##        u'The footprint display option.'
##        #return pOption
##    def _set(self, pOption):
##        u'The footprint display option.'
##    FootprintDisplayOption = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if footprint display is enabled.'
##        #return pEnabled
##    def _set(self, pEnabled):
##        u'Indicates if footprint display is enabled.'
##    FootprintDisplayEnabled = property(_get, _set, doc = _set.__doc__)
##

IMxdContents._methods_ = [
    COMMETHOD(['propget', helpstring(u'The PageLayout object.')], HRESULT, 'PageLayout',
              ( ['retval', 'out'], POINTER(POINTER(IPageLayout)), 'ppPageLayout' )),
    COMMETHOD(['propget', helpstring(u'The Map object.')], HRESULT, 'Map',
              ( ['retval', 'out'], POINTER(POINTER(IMap)), 'ppMap' )),
    COMMETHOD(['propget', helpstring(u'The Map object.')], HRESULT, 'ActiveView',
              ( ['retval', 'out'], POINTER(POINTER(IActiveView)), 'ppActiveView' )),
]
################################################################
## code template for IMxdContents implementation
##class IMxdContents_Impl(object):
##    @property
##    def PageLayout(self):
##        u'The PageLayout object.'
##        #return ppPageLayout
##
##    @property
##    def ActiveView(self):
##        u'The Map object.'
##        #return ppActiveView
##
##    @property
##    def Map(self):
##        u'The Map object.'
##        #return ppMap
##

class TextElement(CoClass):
    u'The Graphic Element to display text.'
    _reg_clsid_ = GUID('{204034D3-F6EA-11D0-83AD-080009B996CC}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
TextElement._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IElement, IElementProperties, IElementProperties2, IElementProperties3, ITextElement, IGraphicElement, IBoundsProperties, IGroupSymbolElement, ISymbolCollectionElement, comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ITransform2D, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySupport, IElementEditVertices, IElementEditCallout, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, IMultiPartTextElement, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize]

class RelateInfos(CoClass):
    u'A collection of relates.'
    _reg_clsid_ = GUID('{034FEC0E-F833-460F-A9C7-7C719074C1F3}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
RelateInfos._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRelateInfos, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

IHotlinkMacro._methods_ = [
    COMMETHOD(['propget', helpstring(u'Name of macro used for the hotlink.')], HRESULT, 'MacroName',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'Name of macro used for the hotlink.')], HRESULT, 'MacroName',
              ( ['in'], BSTR, 'Name' )),
]
################################################################
## code template for IHotlinkMacro implementation
##class IHotlinkMacro_Impl(object):
##    def _get(self):
##        u'Name of macro used for the hotlink.'
##        #return Name
##    def _set(self, Name):
##        u'Name of macro used for the hotlink.'
##    MacroName = property(_get, _set, doc = _set.__doc__)
##

IAnnotationExpressionParser._methods_ = [
    COMMETHOD(['propget', helpstring(u'The annotation expression.')], HRESULT, 'Expression',
              ( ['retval', 'out'], POINTER(BSTR), 'Expression' )),
    COMMETHOD(['propget', helpstring(u'The number of attribute fields in the expression.')], HRESULT, 'AttributeCount',
              ( ['retval', 'out'], POINTER(c_int), 'attributes' )),
    COMMETHOD(['propget', helpstring(u'The attribute fields in the expression.')], HRESULT, 'Attribute',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Attribute' )),
    COMMETHOD([helpstring(u'The label for a given feature based on the annotation expression.')], HRESULT, 'FindLabel',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeature), 'Feature' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Label' )),
    COMMETHOD([helpstring(u'Reports error that occurred in FindLabel method.')], HRESULT, 'LastError',
              ( ['in', 'out'], POINTER(c_int), 'number' ),
              ( ['in', 'out'], POINTER(c_int), 'line' ),
              ( ['in', 'out'], POINTER(BSTR), 'Description' )),
]
################################################################
## code template for IAnnotationExpressionParser implementation
##class IAnnotationExpressionParser_Impl(object):
##    def FindLabel(self, Feature):
##        u'The label for a given feature based on the annotation expression.'
##        #return Label
##
##    @property
##    def Attribute(self, Index):
##        u'The attribute fields in the expression.'
##        #return Attribute
##
##    @property
##    def AttributeCount(self):
##        u'The number of attribute fields in the expression.'
##        #return attributes
##
##    @property
##    def Expression(self):
##        u'The annotation expression.'
##        #return Expression
##
##    def LastError(self):
##        u'Reports error that occurred in FindLabel method.'
##        #return number, line, Description
##

class AreaPatch(CoClass):
    u'Classs implements an Area legend patch.'
    _reg_clsid_ = GUID('{2066267E-E3B8-11D2-B868-00600802E603}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IPatch(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that work with a legend patch.'
    _iid_ = GUID('{BEB4EDB5-E3B4-11D2-B868-00600802E603}')
    _idlflags_ = ['oleautomation']
AreaPatch._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IAreaPatch, IPatch, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize]

IPageLayout._methods_ = [
    COMMETHOD(['propget', helpstring(u'The page.')], HRESULT, 'Page',
              ( ['retval', 'out'], POINTER(POINTER(IPage)), 'Page' )),
    COMMETHOD(['propget', helpstring(u'The ruler settings.')], HRESULT, 'RulerSettings',
              ( ['retval', 'out'], POINTER(POINTER(IRulerSettings)), 'RulerSettings' )),
    COMMETHOD(['propget', helpstring(u'The snapping grid.')], HRESULT, 'SnapGrid',
              ( ['retval', 'out'], POINTER(POINTER(ISnapGrid)), 'SnapGrid' )),
    COMMETHOD(['propget', helpstring(u'The horizontal snapping guides.')], HRESULT, 'HorizontalSnapGuides',
              ( ['retval', 'out'], POINTER(POINTER(ISnapGuides)), 'SnapGuides' )),
    COMMETHOD(['propget', helpstring(u'The vertical snapping guides.')], HRESULT, 'VerticalSnapGuides',
              ( ['retval', 'out'], POINTER(POINTER(ISnapGuides)), 'SnapGuides' )),
    COMMETHOD(['propget', helpstring(u'The current zoom percent.  100 means 1:1.  200 means twice normal size, etc.')], HRESULT, 'ZoomPercent',
              ( ['retval', 'out'], POINTER(c_double), 'percent' )),
    COMMETHOD(['propput', helpstring(u'Indicates if graphics will be aligned to the margins or to each other.')], HRESULT, 'AlignToMargins',
              ( ['in'], VARIANT_BOOL, 'AlignToMargins' )),
    COMMETHOD(['propget', helpstring(u'Indicates if graphics will be aligned to the margins or to each other.')], HRESULT, 'AlignToMargins',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'AlignToMargins' )),
    COMMETHOD([helpstring(u'Fit the width of the page to the screen.')], HRESULT, 'ZoomToWidth'),
    COMMETHOD([helpstring(u'Fit the whole page in the window.')], HRESULT, 'ZoomToWhole'),
    COMMETHOD([helpstring(u'Magnify the page by a certain percentage.  100 means actual size.  200 means twice normal size, etc.')], HRESULT, 'ZoomToPercent',
              ( ['in'], c_int, 'percent' )),
    COMMETHOD([helpstring(u'Focus the next map.')], HRESULT, 'FocusNextMapFrame'),
    COMMETHOD([helpstring(u'Focus the previous map.')], HRESULT, 'FocusPreviousMapFrame'),
    COMMETHOD([helpstring(u'Replace the maps in the data frames with the specified maps.  If there are more maps than frames, new frames are created.  If there are fewer frames than maps, extra frames are cleared.')], HRESULT, 'ReplaceMaps',
              ( ['in'], POINTER(IMaps), 'maps' )),
]
################################################################
## code template for IPageLayout implementation
##class IPageLayout_Impl(object):
##    def FocusPreviousMapFrame(self):
##        u'Focus the previous map.'
##        #return 
##
##    def ReplaceMaps(self, maps):
##        u'Replace the maps in the data frames with the specified maps.  If there are more maps than frames, new frames are created.  If there are fewer frames than maps, extra frames are cleared.'
##        #return 
##
##    @property
##    def VerticalSnapGuides(self):
##        u'The vertical snapping guides.'
##        #return SnapGuides
##
##    def ZoomToPercent(self, percent):
##        u'Magnify the page by a certain percentage.  100 means actual size.  200 means twice normal size, etc.'
##        #return 
##
##    def ZoomToWidth(self):
##        u'Fit the width of the page to the screen.'
##        #return 
##
##    def ZoomToWhole(self):
##        u'Fit the whole page in the window.'
##        #return 
##
##    @property
##    def RulerSettings(self):
##        u'The ruler settings.'
##        #return RulerSettings
##
##    def _get(self):
##        u'Indicates if graphics will be aligned to the margins or to each other.'
##        #return AlignToMargins
##    def _set(self, AlignToMargins):
##        u'Indicates if graphics will be aligned to the margins or to each other.'
##    AlignToMargins = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def ZoomPercent(self):
##        u'The current zoom percent.  100 means 1:1.  200 means twice normal size, etc.'
##        #return percent
##
##    @property
##    def SnapGrid(self):
##        u'The snapping grid.'
##        #return SnapGrid
##
##    def FocusNextMapFrame(self):
##        u'Focus the next map.'
##        #return 
##
##    @property
##    def HorizontalSnapGuides(self):
##        u'The horizontal snapping guides.'
##        #return SnapGuides
##
##    @property
##    def Page(self):
##        u'The page.'
##        #return Page
##

class StandaloneTableInfos(CoClass):
    u'A collection of Standalone Table Info objects.'
    _reg_clsid_ = GUID('{0CEDD0BD-4060-4D6C-AD04-61453E906C79}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
StandaloneTableInfos._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IStandaloneTableInfos, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

class RelateInfo(CoClass):
    u'A colcass that contains the infromation about the relate.'
    _reg_clsid_ = GUID('{3C2118F3-45E0-4A48-AEA5-538F7913D5CC}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IRelateInfo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that describe a relate.'
    _iid_ = GUID('{D44CFDBD-E724-4EF9-92AE-873C8ACD18C6}')
    _idlflags_ = ['oleautomation']
RelateInfo._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRelateInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

class IParagraphTextElement(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Indicator interface that identifies Paragraph Text Element objects.'
    _iid_ = GUID('{0FE52A7D-0C5A-464A-8325-3F9C7697486D}')
    _idlflags_ = ['oleautomation']
IParagraphTextElement._methods_ = [
]
################################################################
## code template for IParagraphTextElement implementation
##class IParagraphTextElement_Impl(object):

class LinePatch(CoClass):
    u'Class implements a Line legend patch.'
    _reg_clsid_ = GUID('{2066267F-E3B8-11D2-B868-00600802E603}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
LinePatch._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILinePatch, IPatch, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize]

class IMXFeatureFindData(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to Data assoc to each row in the MxFind dialog when finding features.'
    _iid_ = GUID('{E992BC10-0DF2-4BEC-B3D5-A9D8967A5FC8}')
    _idlflags_ = ['oleautomation']
IMXFeatureFindData._methods_ = [
    COMMETHOD(['propget', helpstring(u'The active view.')], HRESULT, 'ActiveView',
              ( ['retval', 'out'], POINTER(POINTER(IActiveView)), 'ppActiveView' )),
    COMMETHOD(['propputref', helpstring(u'The active view.')], HRESULT, 'ActiveView',
              ( ['in'], POINTER(IActiveView), 'ppActiveView' )),
]
################################################################
## code template for IMXFeatureFindData implementation
##class IMXFeatureFindData_Impl(object):
##    def ActiveView(self, ppActiveView):
##        u'The active view.'
##        #return 
##

class ParagraphTextElement(CoClass):
    u'The Graphic Element to display text which flows into an area geometry.'
    _reg_clsid_ = GUID('{C84598B1-C4BE-4203-9132-ADA2BE57F30C}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IColumnProperties(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control common properties of columns.'
    _iid_ = GUID('{7DD7A8DB-ECD2-49BB-8F60-52021A00E460}')
    _idlflags_ = ['oleautomation']
ParagraphTextElement._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IElement, IElementProperties, IElementProperties2, IElementProperties3, ITextElement, IGraphicElement, IBoundsProperties, IGroupSymbolElement, ISymbolCollectionElement, comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ITransform2D, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySupport, IElementEditVertices, IElementEditCallout, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, IFrameProperties, IColumnProperties, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IMarginProperties, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, IParagraphTextElement]


# values for enumeration 'esriPageFormID'
esriPageFormLetter = 0
esriPageFormLegal = 1
esriPageFormTabloid = 2
esriPageFormC = 3
esriPageFormD = 4
esriPageFormE = 5
esriPageFormA5 = 6
esriPageFormA4 = 7
esriPageFormA3 = 8
esriPageFormA2 = 9
esriPageFormA1 = 10
esriPageFormA0 = 11
esriPageFormCUSTOM = 12
esriPageFormSameAsPrinter = 13
esriPageFormID = c_int # enum

# values for enumeration 'esriPageToPrinterMapping'
esriPageMappingCrop = 0
esriPageMappingScale = 1
esriPageMappingTile = 2
esriPageToPrinterMapping = c_int # enum
IPage._methods_ = [
    COMMETHOD(['propget', helpstring(u'The Page form.')], HRESULT, 'FormID',
              ( ['retval', 'out'], POINTER(esriPageFormID), 'FormID' )),
    COMMETHOD(['propput', helpstring(u'The Page form.')], HRESULT, 'FormID',
              ( ['in'], esriPageFormID, 'FormID' )),
    COMMETHOD(['propget', helpstring(u'The Page orientation. 1 = portrait.  2 = landscape.')], HRESULT, 'Orientation',
              ( ['retval', 'out'], POINTER(c_short), 'Orientation' )),
    COMMETHOD(['propput', helpstring(u'The Page orientation. 1 = portrait.  2 = landscape.')], HRESULT, 'Orientation',
              ( ['in'], c_short, 'Orientation' )),
    COMMETHOD(['propget', helpstring(u'The units used for the page and all associated coordinates.')], HRESULT, 'Units',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits), 'Units' )),
    COMMETHOD(['propput', helpstring(u'The units used for the page and all associated coordinates.')], HRESULT, 'Units',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits, 'Units' )),
    COMMETHOD(['propget', helpstring(u'The printable bounds.')], HRESULT, 'PrintableBounds',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'PrintableBounds' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the printable area is visible.')], HRESULT, 'IsPrintableAreaVisible',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsPrintableAreaVisible' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the printable area is visible.')], HRESULT, 'IsPrintableAreaVisible',
              ( ['in'], VARIANT_BOOL, 'IsPrintableAreaVisible' )),
    COMMETHOD(['propget', helpstring(u'Indicates if graphics should stretch with the page when the page size changes.')], HRESULT, 'StretchGraphicsWithPage',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'StretchGraphicsWithPage' )),
    COMMETHOD(['propput', helpstring(u'Indicates if graphics should stretch with the page when the page size changes.')], HRESULT, 'StretchGraphicsWithPage',
              ( ['in'], VARIANT_BOOL, 'StretchGraphicsWithPage' )),
    COMMETHOD(['propget', helpstring(u'The page color.')], HRESULT, 'BackgroundColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'The page color.')], HRESULT, 'BackgroundColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'The page border.')], HRESULT, 'Border',
              ( ['retval', 'out'], POINTER(POINTER(IBorder)), 'Border' )),
    COMMETHOD(['propput', helpstring(u'The page border.')], HRESULT, 'Border',
              ( ['in'], POINTER(IBorder), 'Border' )),
    COMMETHOD(['propget', helpstring(u'The page background.')], HRESULT, 'Background',
              ( ['retval', 'out'], POINTER(POINTER(IBackground)), 'Background' )),
    COMMETHOD(['propput', helpstring(u'The page background.')], HRESULT, 'Background',
              ( ['in'], POINTER(IBackground), 'Background' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the page stops firing IPageEvents until the flag is set to false.')], HRESULT, 'DelayEvents',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'DelayEvents' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the page stops firing IPageEvents until the flag is set to false.')], HRESULT, 'DelayEvents',
              ( ['in'], VARIANT_BOOL, 'DelayEvents' )),
    COMMETHOD(['propget', helpstring(u'The page to printer mapping.')], HRESULT, 'PageToPrinterMapping',
              ( ['retval', 'out'], POINTER(esriPageToPrinterMapping), 'mode' )),
    COMMETHOD(['propput', helpstring(u'The page to printer mapping.')], HRESULT, 'PageToPrinterMapping',
              ( ['in'], esriPageToPrinterMapping, 'mode' )),
    COMMETHOD([helpstring(u'The size of the page in page units.')], HRESULT, 'QuerySize',
              ( ['out'], POINTER(c_double), 'Width' ),
              ( ['out'], POINTER(c_double), 'Height' )),
    COMMETHOD([helpstring(u'The size of the page in page units.')], HRESULT, 'PutCustomSize',
              ( ['in'], c_double, 'Width' ),
              ( ['in'], c_double, 'Height' )),
    COMMETHOD([helpstring(u'The number of printer pages spanned by the page.')], HRESULT, 'PrinterPageCount',
              ( ['in'], POINTER(comtypes.gen._7DB92CEC_CB65_420A_8737_FCD0722FD436_0_10_2.IPrinter), 'Printer' ),
              ( ['in'], c_double, 'Overlap' ),
              ( ['out'], POINTER(c_short), 'PageCount' )),
    COMMETHOD([helpstring(u'Return the page size in page units.')], HRESULT, 'GetPageBounds',
              ( ['in'], POINTER(comtypes.gen._7DB92CEC_CB65_420A_8737_FCD0722FD436_0_10_2.IPrinter), 'Printer' ),
              ( ['in'], c_short, 'currentPage' ),
              ( ['in'], c_double, 'Overlap' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'pageBounds' )),
    COMMETHOD([helpstring(u'Return the printer page size in device units.')], HRESULT, 'GetDeviceBounds',
              ( ['in'], POINTER(comtypes.gen._7DB92CEC_CB65_420A_8737_FCD0722FD436_0_10_2.IPrinter), 'Printer' ),
              ( ['in'], c_short, 'currentPage' ),
              ( ['in'], c_double, 'Overlap' ),
              ( ['in'], c_short, 'Resolution' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'deviceBounds' )),
    COMMETHOD([helpstring(u'Draw the paper. EraseColor is the color of the area surrounding the page.  Only the area around the page is drawn in order to eliminate flashing. Use EraseColor = 0 to simply draw page.')], HRESULT, 'DrawPaper',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'eraseColor' )),
    COMMETHOD([helpstring(u'Draw the page background.')], HRESULT, 'DrawBackground',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' )),
    COMMETHOD([helpstring(u'Draw the printable area.')], HRESULT, 'DrawPrintableArea',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' )),
    COMMETHOD([helpstring(u'Draw the page border.')], HRESULT, 'DrawBorder',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' )),
    COMMETHOD([helpstring(u'Called by PageLayout when printer changes.')], HRESULT, 'PrinterChanged',
              ( ['in'], POINTER(comtypes.gen._7DB92CEC_CB65_420A_8737_FCD0722FD436_0_10_2.IPrinter), 'Printer' )),
]
################################################################
## code template for IPage implementation
##class IPage_Impl(object):
##    def _get(self):
##        u'The page color.'
##        #return Color
##    def _set(self, Color):
##        u'The page color.'
##    BackgroundColor = property(_get, _set, doc = _set.__doc__)
##
##    def DrawBorder(self, Display):
##        u'Draw the page border.'
##        #return 
##
##    def PrinterChanged(self, Printer):
##        u'Called by PageLayout when printer changes.'
##        #return 
##
##    def _get(self):
##        u'The Page orientation. 1 = portrait.  2 = landscape.'
##        #return Orientation
##    def _set(self, Orientation):
##        u'The Page orientation. 1 = portrait.  2 = landscape.'
##    Orientation = property(_get, _set, doc = _set.__doc__)
##
##    def QuerySize(self):
##        u'The size of the page in page units.'
##        #return Width, Height
##
##    def DrawBackground(self, Display):
##        u'Draw the page background.'
##        #return 
##
##    def PutCustomSize(self, Width, Height):
##        u'The size of the page in page units.'
##        #return 
##
##    def PrinterPageCount(self, Printer, Overlap):
##        u'The number of printer pages spanned by the page.'
##        #return PageCount
##
##    def _get(self):
##        u'Indicates if the printable area is visible.'
##        #return IsPrintableAreaVisible
##    def _set(self, IsPrintableAreaVisible):
##        u'Indicates if the printable area is visible.'
##    IsPrintableAreaVisible = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The Page form.'
##        #return FormID
##    def _set(self, FormID):
##        u'The Page form.'
##    FormID = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The page to printer mapping.'
##        #return mode
##    def _set(self, mode):
##        u'The page to printer mapping.'
##    PageToPrinterMapping = property(_get, _set, doc = _set.__doc__)
##
##    def GetDeviceBounds(self, Printer, currentPage, Overlap, Resolution, deviceBounds):
##        u'Return the printer page size in device units.'
##        #return 
##
##    def _get(self):
##        u'Indicates if the page stops firing IPageEvents until the flag is set to false.'
##        #return DelayEvents
##    def _set(self, DelayEvents):
##        u'Indicates if the page stops firing IPageEvents until the flag is set to false.'
##    DelayEvents = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if graphics should stretch with the page when the page size changes.'
##        #return StretchGraphicsWithPage
##    def _set(self, StretchGraphicsWithPage):
##        u'Indicates if graphics should stretch with the page when the page size changes.'
##    StretchGraphicsWithPage = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The page background.'
##        #return Background
##    def _set(self, Background):
##        u'The page background.'
##    Background = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The units used for the page and all associated coordinates.'
##        #return Units
##    def _set(self, Units):
##        u'The units used for the page and all associated coordinates.'
##    Units = property(_get, _set, doc = _set.__doc__)
##
##    def DrawPaper(self, Display, eraseColor):
##        u'Draw the paper. EraseColor is the color of the area surrounding the page.  Only the area around the page is drawn in order to eliminate flashing. Use EraseColor = 0 to simply draw page.'
##        #return 
##
##    def GetPageBounds(self, Printer, currentPage, Overlap, pageBounds):
##        u'Return the page size in page units.'
##        #return 
##
##    def _get(self):
##        u'The page border.'
##        #return Border
##    def _set(self, Border):
##        u'The page border.'
##    Border = property(_get, _set, doc = _set.__doc__)
##
##    def DrawPrintableArea(self, Display):
##        u'Draw the printable area.'
##        #return 
##
##    @property
##    def PrintableBounds(self):
##        u'The printable bounds.'
##        #return PrintableBounds
##

IUniqueValuesDef._methods_ = [
    COMMETHOD(['propget', helpstring(u'Fields used by the renderer for classification.')], HRESULT, 'Fields',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray)), 'ppFields' )),
    COMMETHOD(['propput', helpstring(u'Fields used by the renderer for classification.')], HRESULT, 'Fields',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray), 'ppFields' )),
    COMMETHOD(['propget', helpstring(u'Delimiter used to separate field values.')], HRESULT, 'FieldDelimiter',
              ( ['retval', 'out'], POINTER(BSTR), 'delimiter' )),
    COMMETHOD(['propput', helpstring(u'Delimiter used to separate field values.')], HRESULT, 'FieldDelimiter',
              ( ['in'], BSTR, 'delimiter' )),
]
################################################################
## code template for IUniqueValuesDef implementation
##class IUniqueValuesDef_Impl(object):
##    def _get(self):
##        u'Fields used by the renderer for classification.'
##        #return ppFields
##    def _set(self, ppFields):
##        u'Fields used by the renderer for classification.'
##    Fields = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Delimiter used to separate field values.'
##        #return delimiter
##    def _set(self, delimiter):
##        u'Delimiter used to separate field values.'
##    FieldDelimiter = property(_get, _set, doc = _set.__doc__)
##

IPictureElement4._methods_ = [
    COMMETHOD(['propget', helpstring(u'Description of the Picture Element.')], HRESULT, 'PictureDescription',
              ( ['retval', 'out'], POINTER(BSTR), 'Description' )),
    COMMETHOD(['propget', helpstring(u'Filter used in CFileDialog.')], HRESULT, 'Filter',
              ( ['retval', 'out'], POINTER(BSTR), 'Filter' )),
    COMMETHOD(['propget', helpstring(u'Filter used in CFileDialog.')], HRESULT, 'PictureAspectRatio',
              ( ['retval', 'out'], POINTER(c_double), 'ratio' )),
    COMMETHOD(['propget', helpstring(u"Indicates if the resize box will maintain the picture's aspect ratio.")], HRESULT, 'MaintainAspectRatio',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'bRatio' )),
    COMMETHOD(['propput', helpstring(u"Indicates if the resize box will maintain the picture's aspect ratio.")], HRESULT, 'MaintainAspectRatio',
              ( ['in'], VARIANT_BOOL, 'bRatio' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the Picture will be stored in the Document.')], HRESULT, 'SavePictureInDocument',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'bSaveInDoc' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the Picture will be stored in the Document.')], HRESULT, 'SavePictureInDocument',
              ( ['in'], VARIANT_BOOL, 'bSaveInDoc' )),
    COMMETHOD([helpstring(u'File to be imported.')], HRESULT, 'ImportPictureFromFile',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD([helpstring(u'Get the intrinsic size of the picture in points.')], HRESULT, 'QueryIntrinsicSize',
              ( ['in', 'out'], POINTER(c_double), 'widthPoints' ),
              ( ['in', 'out'], POINTER(c_double), 'heightPoints' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether picture is a vector format as opposed to raster.')], HRESULT, 'IsVector',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propget', helpstring(u'The picture handle as a HBITMAP for bitmap pictures or an HENHMETAFILE for vector pictures.')], HRESULT, 'Handle',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE), 'Handle' )),
    COMMETHOD(['propput', helpstring(u'Associated picture file.')], HRESULT, 'Path',
              ( ['in'], BSTR, 'Path' )),
    COMMETHOD(['propget', helpstring(u'Associated picture file.')], HRESULT, 'Path',
              ( ['retval', 'out'], POINTER(BSTR), 'Path' )),
]
################################################################
## code template for IPictureElement4 implementation
##class IPictureElement4_Impl(object):
##    @property
##    def PictureAspectRatio(self):
##        u'Filter used in CFileDialog.'
##        #return ratio
##
##    def QueryIntrinsicSize(self):
##        u'Get the intrinsic size of the picture in points.'
##        #return widthPoints, heightPoints
##
##    @property
##    def IsVector(self):
##        u'Indicates whether picture is a vector format as opposed to raster.'
##        #return flag
##
##    def _get(self):
##        u"Indicates if the resize box will maintain the picture's aspect ratio."
##        #return bRatio
##    def _set(self, bRatio):
##        u"Indicates if the resize box will maintain the picture's aspect ratio."
##    MaintainAspectRatio = property(_get, _set, doc = _set.__doc__)
##
##    def ImportPictureFromFile(self, Name):
##        u'File to be imported.'
##        #return 
##
##    @property
##    def Filter(self):
##        u'Filter used in CFileDialog.'
##        #return Filter
##
##    def _get(self):
##        u'Associated picture file.'
##        #return Path
##    def _set(self, Path):
##        u'Associated picture file.'
##    Path = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Handle(self):
##        u'The picture handle as a HBITMAP for bitmap pictures or an HENHMETAFILE for vector pictures.'
##        #return Handle
##
##    @property
##    def PictureDescription(self):
##        u'Description of the Picture Element.'
##        #return Description
##
##    def _get(self):
##        u'Indicates if the Picture will be stored in the Document.'
##        #return bSaveInDoc
##    def _set(self, bSaveInDoc):
##        u'Indicates if the Picture will be stored in the Document.'
##    SavePictureInDocument = property(_get, _set, doc = _set.__doc__)
##

class IMSDHelper2(IMSDHelper):
    _case_insensitive_ = True
    u'Provides methods to open, save, repair mapserver definition files.'
    _iid_ = GUID('{2A400BB8-3083-4ABE-9C5D-8FCFCE1D2B2C}')
    _idlflags_ = ['oleautomation']
IMSDHelper2._methods_ = [
    COMMETHOD([], HRESULT, 'RelativePaths',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'vbRelativePaths' )),
    COMMETHOD([], HRESULT, 'IsDataLayer',
              ( ['in'], BSTR, 'layerPath' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'vbCanRepair' )),
    COMMETHOD([], HRESULT, 'GetTables',
              ( ['in'], BSTR, 'mapPath' ),
              ( ['retval', 'out'], POINTER(c_int), 'TableCount' )),
    COMMETHOD([], HRESULT, 'IsTableValid',
              ( ['in'], BSTR, 'mapPath' ),
              ( ['in'], c_int, 'tableIndex' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'tableValid' )),
    COMMETHOD([], HRESULT, 'GetDatasetFromTable',
              ( ['in'], BSTR, 'mapPath' ),
              ( ['in'], c_int, 'tableIndex' ),
              ( ['retval', 'out'], POINTER(BSTR), 'DatasetName' )),
    COMMETHOD([], HRESULT, 'GetWorkspaceFactoryTypeFromTable',
              ( ['in'], BSTR, 'mapPath' ),
              ( ['in'], c_int, 'tableIndex' ),
              ( ['retval', 'out'], POINTER(BSTR), 'workspaceFactoryType' )),
    COMMETHOD([], HRESULT, 'GetWorkspaceConnectionStringFromTable',
              ( ['in'], BSTR, 'mapPath' ),
              ( ['in'], c_int, 'tableIndex' ),
              ( ['retval', 'out'], POINTER(BSTR), 'workspaceConnectionString' )),
    COMMETHOD([], HRESULT, 'PutWorkspaceConnectionStringInTable',
              ( ['in'], BSTR, 'mapPath' ),
              ( ['in'], c_int, 'tableIndex' ),
              ( ['in'], BSTR, 'newWorkspaceConnection' ),
              ( ['in'], VARIANT_BOOL, 'validate' )),
    COMMETHOD([], HRESULT, 'GetTableDisplayName',
              ( ['in'], BSTR, 'mapPath' ),
              ( ['in'], c_int, 'tableIndex' ),
              ( ['retval', 'out'], POINTER(BSTR), 'tableDisplayName' )),
]
################################################################
## code template for IMSDHelper2 implementation
##class IMSDHelper2_Impl(object):
##    def GetWorkspaceConnectionStringFromTable(self, mapPath, tableIndex):
##        '-no docstring-'
##        #return workspaceConnectionString
##
##    def GetWorkspaceFactoryTypeFromTable(self, mapPath, tableIndex):
##        '-no docstring-'
##        #return workspaceFactoryType
##
##    def GetTables(self, mapPath):
##        '-no docstring-'
##        #return TableCount
##
##    def GetDatasetFromTable(self, mapPath, tableIndex):
##        '-no docstring-'
##        #return DatasetName
##
##    def IsDataLayer(self, layerPath):
##        '-no docstring-'
##        #return vbCanRepair
##
##    def RelativePaths(self):
##        '-no docstring-'
##        #return vbRelativePaths
##
##    def PutWorkspaceConnectionStringInTable(self, mapPath, tableIndex, newWorkspaceConnection, validate):
##        '-no docstring-'
##        #return 
##
##    def IsTableValid(self, mapPath, tableIndex):
##        '-no docstring-'
##        #return tableValid
##
##    def GetTableDisplayName(self, mapPath, tableIndex):
##        '-no docstring-'
##        #return tableDisplayName
##

class GeoImageDescription(CoClass):
    u'A class that specifies an image to read from an ArcGIS server image service.'
    _reg_clsid_ = GUID('{BCAB28B5-2C1F-4951-8EE1-CD28B622E88C}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
GeoImageDescription._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGeoImageDescription, IGeoImageDescription2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class IMapLayerInfo2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the available properties of a map layer info object.'
    _iid_ = GUID('{1E51DE45-D298-45D1-8C11-C55A977B1493}')
    _idlflags_ = ['oleautomation']
IMapLayerInfo2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Array of strings that contains field alias for each field in Fields property.')], HRESULT, 'FieldAliases',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray)), 'FieldAliases' )),
    COMMETHOD(['propget', helpstring(u'Copyright information associated with the layer.')], HRESULT, 'CopyrightText',
              ( ['retval', 'out'], POINTER(BSTR), 'copyright' )),
    COMMETHOD(['propget', helpstring(u'The layer identifier. This ID is used throughout to uniquely identify the layer for all requests.')], HRESULT, 'ID',
              ( ['retval', 'out'], POINTER(c_int), 'LayerID' )),
    COMMETHOD(['propget', helpstring(u'The name of the layer.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propget', helpstring(u'The description of the layer. This property is set in the General tab of the Layer Properties dialog.')], HRESULT, 'Description',
              ( ['retval', 'out'], POINTER(BSTR), 'desc' )),
    COMMETHOD(['propget', helpstring(u'The layer type.')], HRESULT, 'Type',
              ( ['retval', 'out'], POINTER(BSTR), 'Type' )),
    COMMETHOD(['propget', helpstring(u'The description of the source information for the layer.')], HRESULT, 'SourceDescription',
              ( ['retval', 'out'], POINTER(BSTR), 'desc' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer has labels to turn on and off.')], HRESULT, 'HasLabels',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'HasLabels' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer supports feature selection.')], HRESULT, 'CanSelect',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'CanSelect' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer supports symbol scaling.')], HRESULT, 'CanScaleSymbols',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'canScale' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer supports the Identify operation.')], HRESULT, 'CanIdentify',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'canId' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer supports the Find operation.')], HRESULT, 'CanFind',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'CanFind' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer is a feature layer.')], HRESULT, 'IsFeatureLayer',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsFeatureLayer' )),
    COMMETHOD(['propget', helpstring(u'The minimum visible scale for the layer.')], HRESULT, 'MinScale',
              ( ['retval', 'out'], POINTER(c_double), 'Scale' )),
    COMMETHOD(['propget', helpstring(u'The maximum visible scale for the layer.')], HRESULT, 'MaxScale',
              ( ['retval', 'out'], POINTER(c_double), 'Scale' )),
    COMMETHOD(['propget', helpstring(u'The geographic extent of the layer.')], HRESULT, 'Extent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'Extent' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer has hyperlinks.')], HRESULT, 'HasHyperlinks',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'hasLinks' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer has attributes.')], HRESULT, 'HasAttributes',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'hasAttr' )),
    COMMETHOD(['propget', helpstring(u'Array of attribute fields contained in the layer.')], HRESULT, 'Fields',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFields)), 'Fields' )),
    COMMETHOD(['propget', helpstring(u'Primary display field.')], HRESULT, 'DisplayField',
              ( ['retval', 'out'], POINTER(BSTR), 'FieldName' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer is a composite layer.')], HRESULT, 'IsComposite',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsComposite' )),
    COMMETHOD(['propget', helpstring(u'The list identifying the sublayers if the layer is a composite layer.')], HRESULT, 'SubLayers',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray)), 'layerIds' )),
    COMMETHOD(['propget', helpstring(u'If the layer is a member of a composite layer, this property identifies the parent layer.')], HRESULT, 'ParentLayerID',
              ( ['retval', 'out'], POINTER(c_int), 'LayerID' )),
]
################################################################
## code template for IMapLayerInfo2 implementation
##class IMapLayerInfo2_Impl(object):
##    @property
##    def SourceDescription(self):
##        u'The description of the source information for the layer.'
##        #return desc
##
##    @property
##    def MaxScale(self):
##        u'The maximum visible scale for the layer.'
##        #return Scale
##
##    @property
##    def DisplayField(self):
##        u'Primary display field.'
##        #return FieldName
##
##    @property
##    def CopyrightText(self):
##        u'Copyright information associated with the layer.'
##        #return copyright
##
##    @property
##    def HasAttributes(self):
##        u'Indicates if the layer has attributes.'
##        #return hasAttr
##
##    @property
##    def MinScale(self):
##        u'The minimum visible scale for the layer.'
##        #return Scale
##
##    @property
##    def Type(self):
##        u'The layer type.'
##        #return Type
##
##    @property
##    def Description(self):
##        u'The description of the layer. This property is set in the General tab of the Layer Properties dialog.'
##        #return desc
##
##    @property
##    def IsFeatureLayer(self):
##        u'Indicates if the layer is a feature layer.'
##        #return IsFeatureLayer
##
##    @property
##    def FieldAliases(self):
##        u'Array of strings that contains field alias for each field in Fields property.'
##        #return FieldAliases
##
##    @property
##    def CanIdentify(self):
##        u'Indicates if the layer supports the Identify operation.'
##        #return canId
##
##    @property
##    def HasLabels(self):
##        u'Indicates if the layer has labels to turn on and off.'
##        #return HasLabels
##
##    @property
##    def ParentLayerID(self):
##        u'If the layer is a member of a composite layer, this property identifies the parent layer.'
##        #return LayerID
##
##    @property
##    def SubLayers(self):
##        u'The list identifying the sublayers if the layer is a composite layer.'
##        #return layerIds
##
##    @property
##    def Extent(self):
##        u'The geographic extent of the layer.'
##        #return Extent
##
##    @property
##    def Name(self):
##        u'The name of the layer.'
##        #return Name
##
##    @property
##    def Fields(self):
##        u'Array of attribute fields contained in the layer.'
##        #return Fields
##
##    @property
##    def CanScaleSymbols(self):
##        u'Indicates if the layer supports symbol scaling.'
##        #return canScale
##
##    @property
##    def IsComposite(self):
##        u'Indicates if the layer is a composite layer.'
##        #return IsComposite
##
##    @property
##    def ID(self):
##        u'The layer identifier. This ID is used throughout to uniquely identify the layer for all requests.'
##        #return LayerID
##
##    @property
##    def CanFind(self):
##        u'Indicates if the layer supports the Find operation.'
##        #return CanFind
##
##    @property
##    def CanSelect(self):
##        u'Indicates if the layer supports feature selection.'
##        #return CanSelect
##
##    @property
##    def HasHyperlinks(self):
##        u'Indicates if the layer has hyperlinks.'
##        #return hasLinks
##

class RelatedRecordGroup(CoClass):
    u'A colcass that contains related records for every source id.'
    _reg_clsid_ = GUID('{18104F0C-5BB0-424A-BE21-0D8F6AE4C833}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
RelatedRecordGroup._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRelatedRecordGroup, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

IStandaloneTableDescriptions._methods_ = [
    COMMETHOD(['propget', helpstring(u'The Table description count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The Table description at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IStandaloneTableDescription)), 'StandaloneTableDescription' )),
    COMMETHOD([helpstring(u'Removes the Table description at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all Table descriptions.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Adds a Table description.')], HRESULT, 'Add',
              ( ['in'], POINTER(IStandaloneTableDescription), 'StandaloneTableDescription' )),
    COMMETHOD([helpstring(u'Adds a Table description at the specified position.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(IStandaloneTableDescription), 'StandaloneTableDescription' )),
]
################################################################
## code template for IStandaloneTableDescriptions implementation
##class IStandaloneTableDescriptions_Impl(object):
##    @property
##    def Count(self):
##        u'The Table description count.'
##        #return Count
##
##    def Insert(self, Index, StandaloneTableDescription):
##        u'Adds a Table description at the specified position.'
##        #return 
##
##    def Remove(self, Index):
##        u'Removes the Table description at the specified position.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'The Table description at the specified position.'
##        #return StandaloneTableDescription
##
##    def RemoveAll(self):
##        u'Removes all Table descriptions.'
##        #return 
##
##    def Add(self, StandaloneTableDescription):
##        u'Adds a Table description.'
##        #return 
##

IDimensionStyle._methods_ = [
    COMMETHOD(['propget', helpstring(u'ID of the style.')], HRESULT, 'ID',
              ( ['retval', 'out'], POINTER(c_int), 'ID' )),
    COMMETHOD(['propput', helpstring(u'Name of the style.')], HRESULT, 'Name',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'Name of the style.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
]
################################################################
## code template for IDimensionStyle implementation
##class IDimensionStyle_Impl(object):
##    @property
##    def ID(self):
##        u'ID of the style.'
##        #return ID
##
##    def _get(self):
##        u'Name of the style.'
##        #return Name
##    def _set(self, Name):
##        u'Name of the style.'
##    Name = property(_get, _set, doc = _set.__doc__)
##

IJoinTableSourceDescription._methods_ = [
    COMMETHOD(['propget', helpstring(u'Data Source for left table.')], HRESULT, 'LeftSourceDescription',
              ( ['retval', 'out'], POINTER(POINTER(IMapServerSourceDescription)), 'ppLeftSourceDescription' )),
    COMMETHOD(['propput', helpstring(u'Data Source for left table.')], HRESULT, 'LeftSourceDescription',
              ( ['in'], POINTER(IMapServerSourceDescription), 'ppLeftSourceDescription' )),
    COMMETHOD(['propget', helpstring(u'Data Source for right table.')], HRESULT, 'RightSourceDescription',
              ( ['retval', 'out'], POINTER(POINTER(IMapServerSourceDescription)), 'ppRightSourceDescription' )),
    COMMETHOD(['propput', helpstring(u'Data Source for right table.')], HRESULT, 'RightSourceDescription',
              ( ['in'], POINTER(IMapServerSourceDescription), 'ppRightSourceDescription' )),
    COMMETHOD(['propget', helpstring(u'Field name from the left table that will be used for join.')], HRESULT, 'LeftTableKey',
              ( ['retval', 'out'], POINTER(BSTR), 'pLeftTableKey' )),
    COMMETHOD(['propput', helpstring(u'Field name from the left table that will be used for join.')], HRESULT, 'LeftTableKey',
              ( ['in'], BSTR, 'pLeftTableKey' )),
    COMMETHOD(['propget', helpstring(u'Field name from the right table that will be used for join.')], HRESULT, 'RightTableKey',
              ( ['retval', 'out'], POINTER(BSTR), 'pRightTableKey' )),
    COMMETHOD(['propput', helpstring(u'Field name from the right table that will be used for join.')], HRESULT, 'RightTableKey',
              ( ['in'], BSTR, 'pRightTableKey' )),
    COMMETHOD(['propget', helpstring(u'Type of join.')], HRESULT, 'JoinType',
              ( ['retval', 'out'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriJoinType), 'pJoinType' )),
    COMMETHOD(['propput', helpstring(u'Type of join.')], HRESULT, 'JoinType',
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriJoinType, 'pJoinType' )),
]
################################################################
## code template for IJoinTableSourceDescription implementation
##class IJoinTableSourceDescription_Impl(object):
##    def _get(self):
##        u'Type of join.'
##        #return pJoinType
##    def _set(self, pJoinType):
##        u'Type of join.'
##    JoinType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Field name from the left table that will be used for join.'
##        #return pLeftTableKey
##    def _set(self, pLeftTableKey):
##        u'Field name from the left table that will be used for join.'
##    LeftTableKey = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Data Source for right table.'
##        #return ppRightSourceDescription
##    def _set(self, ppRightSourceDescription):
##        u'Data Source for right table.'
##    RightSourceDescription = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Field name from the right table that will be used for join.'
##        #return pRightTableKey
##    def _set(self, pRightTableKey):
##        u'Field name from the right table that will be used for join.'
##    RightTableKey = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Data Source for left table.'
##        #return ppLeftSourceDescription
##    def _set(self, ppLeftSourceDescription):
##        u'Data Source for left table.'
##    LeftSourceDescription = property(_get, _set, doc = _set.__doc__)
##

class DataSourceHelper(CoClass):
    u'Coclass that implements the data source repair methods for MXD.'
    _reg_clsid_ = GUID('{E02BC759-8957-489B-8ECB-80F55EF53758}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
DataSourceHelper._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDataSourceHelperMapDocument, IDataSourceHelperMap, IDataSourceHelperLayer, IDataSourceHelperStandaloneTable]

ICodedValueAttributes._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if coded values are used.')], HRESULT, 'UseCodedValue',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if coded values are used.')], HRESULT, 'UseCodedValue',
              ( ['in'], VARIANT_BOOL, 'flag' )),
]
################################################################
## code template for ICodedValueAttributes implementation
##class ICodedValueAttributes_Impl(object):
##    def _get(self):
##        u'Indicates if coded values are used.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if coded values are used.'
##    UseCodedValue = property(_get, _set, doc = _set.__doc__)
##

IMapServerIdentifyResults._methods_ = [
    COMMETHOD(['propget', helpstring(u'The identify result count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The identify result at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IMapServerIdentifyResult)), 'identifyResult' )),
    COMMETHOD([helpstring(u'Removes the identify result at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all identify results.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Adds an identify result.')], HRESULT, 'Add',
              ( ['in'], POINTER(IMapServerIdentifyResult), 'identifyResult' )),
    COMMETHOD([helpstring(u'Adds an identify result at the specified position.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(IMapServerIdentifyResult), 'identifyResult' )),
]
################################################################
## code template for IMapServerIdentifyResults implementation
##class IMapServerIdentifyResults_Impl(object):
##    @property
##    def Count(self):
##        u'The identify result count.'
##        #return Count
##
##    def Insert(self, Index, identifyResult):
##        u'Adds an identify result at the specified position.'
##        #return 
##
##    def Remove(self, Index):
##        u'Removes the identify result at the specified position.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'The identify result at the specified position.'
##        #return identifyResult
##
##    def RemoveAll(self):
##        u'Removes all identify results.'
##        #return 
##
##    def Add(self, identifyResult):
##        u'Adds an identify result.'
##        #return 
##

IPictureElement5._methods_ = [
    COMMETHOD(['propget', helpstring(u'Description of the Picture Element.')], HRESULT, 'PictureDescription',
              ( ['retval', 'out'], POINTER(BSTR), 'Description' )),
    COMMETHOD(['propget', helpstring(u'Filter used in CFileDialog.')], HRESULT, 'Filter',
              ( ['retval', 'out'], POINTER(BSTR), 'Filter' )),
    COMMETHOD(['propget', helpstring(u'Filter used in CFileDialog.')], HRESULT, 'PictureAspectRatio',
              ( ['retval', 'out'], POINTER(c_double), 'ratio' )),
    COMMETHOD(['propget', helpstring(u"Indicates if the resize box will maintain the picture's aspect ratio.")], HRESULT, 'MaintainAspectRatio',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'bRatio' )),
    COMMETHOD(['propput', helpstring(u"Indicates if the resize box will maintain the picture's aspect ratio.")], HRESULT, 'MaintainAspectRatio',
              ( ['in'], VARIANT_BOOL, 'bRatio' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the Picture will be stored in the Document.')], HRESULT, 'SavePictureInDocument',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'bSaveInDoc' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the Picture will be stored in the Document.')], HRESULT, 'SavePictureInDocument',
              ( ['in'], VARIANT_BOOL, 'bSaveInDoc' )),
    COMMETHOD([helpstring(u'File to be imported.')], HRESULT, 'ImportPictureFromFile',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD([helpstring(u'Get the intrinsic size of the picture in points.')], HRESULT, 'QueryIntrinsicSize',
              ( ['in', 'out'], POINTER(c_double), 'widthPoints' ),
              ( ['in', 'out'], POINTER(c_double), 'heightPoints' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether picture is a vector format as opposed to raster.')], HRESULT, 'IsVector',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propget', helpstring(u'The picture handle as a HBITMAP for bitmap pictures or an HENHMETAFILE for vector pictures.')], HRESULT, 'Handle',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE), 'Handle' )),
    COMMETHOD(['propput', helpstring(u'Associated picture file.')], HRESULT, 'Path',
              ( ['in'], BSTR, 'Path' )),
    COMMETHOD(['propget', helpstring(u'Associated picture file.')], HRESULT, 'Path',
              ( ['retval', 'out'], POINTER(BSTR), 'Path' )),
    COMMETHOD(['propget', helpstring(u'Field that specifies picture. Use with data driven pages.')], HRESULT, 'PictureField',
              ( ['retval', 'out'], POINTER(BSTR), 'FieldName' )),
    COMMETHOD(['propput', helpstring(u'Field that specifies picture. Use with data driven pages.')], HRESULT, 'PictureField',
              ( ['in'], BSTR, 'FieldName' )),
    COMMETHOD(['propget', helpstring(u'Picture shows attachment.  Use with data driven pages.')], HRESULT, 'UseAttachment',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Picture shows attachment.  Use with data driven pages.')], HRESULT, 'UseAttachment',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Use attachment that has filter in the name. Use with data driven pages.')], HRESULT, 'AttachmentFilter',
              ( ['retval', 'out'], POINTER(BSTR), 'Filter' )),
    COMMETHOD(['propput', helpstring(u'Use attachment that has filter in the name. Use with data driven pages.')], HRESULT, 'AttachmentFilter',
              ( ['in'], BSTR, 'Filter' )),
    COMMETHOD([helpstring(u'Import picture from path, url, raster, or blob.')], HRESULT, 'ImportFromVariant',
              ( ['in'], VARIANT, 'v' )),
]
################################################################
## code template for IPictureElement5 implementation
##class IPictureElement5_Impl(object):
##    @property
##    def PictureAspectRatio(self):
##        u'Filter used in CFileDialog.'
##        #return ratio
##
##    def ImportFromVariant(self, v):
##        u'Import picture from path, url, raster, or blob.'
##        #return 
##
##    def QueryIntrinsicSize(self):
##        u'Get the intrinsic size of the picture in points.'
##        #return widthPoints, heightPoints
##
##    @property
##    def IsVector(self):
##        u'Indicates whether picture is a vector format as opposed to raster.'
##        #return flag
##
##    def _get(self):
##        u"Indicates if the resize box will maintain the picture's aspect ratio."
##        #return bRatio
##    def _set(self, bRatio):
##        u"Indicates if the resize box will maintain the picture's aspect ratio."
##    MaintainAspectRatio = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Picture shows attachment.  Use with data driven pages.'
##        #return flag
##    def _set(self, flag):
##        u'Picture shows attachment.  Use with data driven pages.'
##    UseAttachment = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Field that specifies picture. Use with data driven pages.'
##        #return FieldName
##    def _set(self, FieldName):
##        u'Field that specifies picture. Use with data driven pages.'
##    PictureField = property(_get, _set, doc = _set.__doc__)
##
##    def ImportPictureFromFile(self, Name):
##        u'File to be imported.'
##        #return 
##
##    @property
##    def Filter(self):
##        u'Filter used in CFileDialog.'
##        #return Filter
##
##    def _get(self):
##        u'Use attachment that has filter in the name. Use with data driven pages.'
##        #return Filter
##    def _set(self, Filter):
##        u'Use attachment that has filter in the name. Use with data driven pages.'
##    AttachmentFilter = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Associated picture file.'
##        #return Path
##    def _set(self, Path):
##        u'Associated picture file.'
##    Path = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Handle(self):
##        u'The picture handle as a HBITMAP for bitmap pictures or an HENHMETAFILE for vector pictures.'
##        #return Handle
##
##    @property
##    def PictureDescription(self):
##        u'Description of the Picture Element.'
##        #return Description
##
##    def _get(self):
##        u'Indicates if the Picture will be stored in the Document.'
##        #return bSaveInDoc
##    def _set(self, bSaveInDoc):
##        u'Indicates if the Picture will be stored in the Document.'
##    SavePictureInDocument = property(_get, _set, doc = _set.__doc__)
##

class EllipseElement(CoClass):
    u'The Graphic Element to display Ellipses.'
    _reg_clsid_ = GUID('{4EDA1081-12EA-11D3-9F8F-00C04F6BC8DD}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IEllipseElement(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Indicator interface that identifies an Ellipse element.'
    _iid_ = GUID('{4EDA107E-12EA-11D3-9F8F-00C04F6BC8DD}')
    _idlflags_ = ['oleautomation']
EllipseElement._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IElement, IElementProperties, IElementProperties2, IElementProperties3, IEllipseElement, IFillShapeElement, IGraphicElement, IBoundsProperties, comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ITransform2D, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize]


# values for enumeration 'wmsError'
WMS_E_SRS_NOTUNSUPPORTED = -2147220991
WMS_E_IMAGEFORMAT_NOTUNSUPPORTED = -2147220990
WMS_E_INVALIDURL = -2147220989
WMS_E_SERVICE_EXCEPTION = -2147220988
wmsError = c_int # enum
class IMapServerInfo3(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the MapServerInfo.'
    _iid_ = GUID('{012A4036-5C4D-4677-BB19-ED4E3DED3D75}')
    _idlflags_ = ['oleautomation']
IMapServerInfo3._methods_ = [
    COMMETHOD(['propget', helpstring(u'The name of the map (data frame).')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propget', helpstring(u'The description of the map (data frame). This property is set in the General tab of the Data Frame Properties dialog.')], HRESULT, 'Description',
              ( ['retval', 'out'], POINTER(BSTR), 'desc' )),
    COMMETHOD(['propget', helpstring(u'The full extent of the map (data frame).')], HRESULT, 'FullExtent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'Extent' )),
    COMMETHOD(['propget', helpstring(u'The current extent of the map (data frame).')], HRESULT, 'Extent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'Extent' )),
    COMMETHOD(['propget', helpstring(u'A collection of Map Layer Info objects, each containing information about a layer in the map (data frame).')], HRESULT, 'MapLayerInfos',
              ( ['retval', 'out'], POINTER(POINTER(IMapLayerInfos)), 'layerInfos' )),
    COMMETHOD(['propget', helpstring(u'The background color of the map (data frame).')], HRESULT, 'BackgroundColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propget', helpstring(u'The published bookmarks for the map.')], HRESULT, 'Bookmarks',
              ( ['retval', 'out'], POINTER(POINTER(IMapServerBookmarks)), 'Bookmarks' )),
    COMMETHOD(['propget', helpstring(u'The default map settings.')], HRESULT, 'DefaultMapDescription',
              ( ['retval', 'out'], POINTER(POINTER(IMapDescription)), 'mapDesc' )),
    COMMETHOD(['propget', helpstring(u'The units for the map (data frame).')], HRESULT, 'MapUnits',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits), 'Units' )),
    COMMETHOD(['propget', helpstring(u'Background symbol of the map (data frame).')], HRESULT, 'BackgroundSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IFillSymbol)), 'FillSymbol' )),
    COMMETHOD(['propget', helpstring(u'Copyright information associated with the layer.')], HRESULT, 'CopyrightText',
              ( ['retval', 'out'], POINTER(BSTR), 'copyright' )),
    COMMETHOD(['propget', helpstring(u'Standalone tables infromation in a given map.')], HRESULT, 'StandaloneTableInfos',
              ( ['retval', 'out'], POINTER(POINTER(IStandaloneTableInfos)), 'TablesInfos' )),
    COMMETHOD(['propget', helpstring(u'Standalone tables descriptions that can passed in to other methods.')], HRESULT, 'StandaloneTableDescriptions',
              ( ['retval', 'out'], POINTER(POINTER(IStandaloneTableDescriptions)), 'TableDescriptions' )),
]
################################################################
## code template for IMapServerInfo3 implementation
##class IMapServerInfo3_Impl(object):
##    @property
##    def Name(self):
##        u'The name of the map (data frame).'
##        #return Name
##
##    @property
##    def StandaloneTableInfos(self):
##        u'Standalone tables infromation in a given map.'
##        #return TablesInfos
##
##    @property
##    def DefaultMapDescription(self):
##        u'The default map settings.'
##        #return mapDesc
##
##    @property
##    def MapUnits(self):
##        u'The units for the map (data frame).'
##        #return Units
##
##    @property
##    def CopyrightText(self):
##        u'Copyright information associated with the layer.'
##        #return copyright
##
##    @property
##    def BackgroundSymbol(self):
##        u'Background symbol of the map (data frame).'
##        #return FillSymbol
##
##    @property
##    def MapLayerInfos(self):
##        u'A collection of Map Layer Info objects, each containing information about a layer in the map (data frame).'
##        #return layerInfos
##
##    @property
##    def StandaloneTableDescriptions(self):
##        u'Standalone tables descriptions that can passed in to other methods.'
##        #return TableDescriptions
##
##    @property
##    def BackgroundColor(self):
##        u'The background color of the map (data frame).'
##        #return Color
##
##    @property
##    def FullExtent(self):
##        u'The full extent of the map (data frame).'
##        #return Extent
##
##    @property
##    def Bookmarks(self):
##        u'The published bookmarks for the map.'
##        #return Bookmarks
##
##    @property
##    def Extent(self):
##        u'The current extent of the map (data frame).'
##        #return Extent
##
##    @property
##    def Description(self):
##        u'The description of the map (data frame). This property is set in the General tab of the Data Frame Properties dialog.'
##        #return desc
##

IMapServerFindResults._methods_ = [
    COMMETHOD(['propget', helpstring(u'The find result count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The find result at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IMapServerFindResult)), 'findResult' )),
    COMMETHOD([helpstring(u'Removes the find result at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all find results.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Adds a find result.')], HRESULT, 'Add',
              ( ['in'], POINTER(IMapServerFindResult), 'findResult' )),
    COMMETHOD([helpstring(u'Adds a find result at the specified position.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(IMapServerFindResult), 'findResult' )),
]
################################################################
## code template for IMapServerFindResults implementation
##class IMapServerFindResults_Impl(object):
##    @property
##    def Count(self):
##        u'The find result count.'
##        #return Count
##
##    def Insert(self, Index, findResult):
##        u'Adds a find result at the specified position.'
##        #return 
##
##    def Remove(self, Index):
##        u'Removes the find result at the specified position.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'The find result at the specified position.'
##        #return findResult
##
##    def RemoveAll(self):
##        u'Removes all find results.'
##        #return 
##
##    def Add(self, findResult):
##        u'Adds a find result.'
##        #return 
##

IMapServer3._methods_ = [
    COMMETHOD([helpstring(u'Returns a record set of rows that meet the query filter selection criteria for the specified table.')], HRESULT, 'QueryData',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], POINTER(IMapTableDescription), 'pMapTableDescription' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'Filter' ),
              ( ['in'], POINTER(IQueryResultOptions), 'options' ),
              ( ['retval', 'out'], POINTER(POINTER(IQueryResult)), 'QueryResult' )),
    COMMETHOD([helpstring(u'Returns the count of the rows that meet the query filter selection criteria for the specified table.')], HRESULT, 'QueryRowCount',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], POINTER(IMapTableDescription), 'pTableDescription' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'pFilter' ),
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD([helpstring(u'Returns the IDs of the rows that meet the query filter selection criteria for the specified table.')], HRESULT, 'QueryRowIDs',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], POINTER(IMapTableDescription), 'pTableDescription' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'pFilter' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray)), 'FIDs' )),
    COMMETHOD([helpstring(u'Returns the IDs of the rows that meet the query filter selection criteria for the specified table.')], HRESULT, 'QueryRelatedRecords',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], c_int, 'sourceTable' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFIDSet), 'pFIDs' ),
              ( ['in'], POINTER(IRelateDescription), 'RelateDescription' ),
              ( ['retval', 'out'], POINTER(POINTER(IQueryResult)), 'ppQueryResult' )),
    COMMETHOD([helpstring(u'Returns the Raster content that meet the selection criteria for the specified table.')], HRESULT, 'QueryRasterValue',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], c_int, 'sourceTableID' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'rowIDs' ),
              ( ['in'], BSTR, 'FieldName' ),
              ( ['in'], POINTER(IImageType), 'rasterValueType' ),
              ( ['retval', 'out'], POINTER(POINTER(IImageResults)), 'ppImageResults' )),
    COMMETHOD([helpstring(u'Returns the attachment info that describe the attachments for the given features/ rows.')], HRESULT, 'QueryAttachmentInfos',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], c_int, 'TableID' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'rowIDs' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IAttachmentInfoArray)), 'ppAttachmentInfos' )),
    COMMETHOD([helpstring(u'Returns the attachment data for the given features/ rows.')], HRESULT, 'QueryAttachmentData',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], c_int, 'TableID' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'attachmentIDs' ),
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriTransportType, 'TransportType' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IAttachmentDataArray)), 'attachmentDataArray' )),
    COMMETHOD([helpstring(u'Returns the html as text that can be used in popups.')], HRESULT, 'QueryHTMLPopups',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], c_int, 'TableID' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'pRowIDs' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray)), 'HTMLTextArray' )),
    COMMETHOD([helpstring(u'Get Layer Drawing Description')], HRESULT, 'GetDefaultLayerDrawingDescriptions',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'pLayerIDs' ),
              ( ['in'], POINTER(IServerSymbolOutputOptions), 'outputOptions' ),
              ( ['retval', 'out'], POINTER(POINTER(ILayerDrawingDescriptions)), 'ppLayerDrawingDescriptions' )),
    COMMETHOD([helpstring(u'Returns the MapTableSubtypeInfos in the current map.')], HRESULT, 'GetMapTableSubtypeInfos',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'pTableIDs' ),
              ( ['retval', 'out'], POINTER(POINTER(IMapTableSubtypeInfos)), 'ppMapTableSubtypeInfos' )),
    COMMETHOD(['propget', helpstring(u"A set of name-value pairs for properties set for the map document (mxd only). These properties are string values set in the map document's Map Properties dialog and include: Title, Subject, Author, Category, Keywords and Comments.")], HRESULT, 'DocumentInfo',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet)), 'props' )),
    COMMETHOD(['propget', helpstring(u'The number of maps (data frames) in the document.')], HRESULT, 'MapCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'Name of the map (data frame) as indicated by the index. The first beginning with 0.')], HRESULT, 'MapName',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(BSTR), 'MapName' )),
    COMMETHOD(['propget', helpstring(u"Name of the document's active map (data frame).")], HRESULT, 'DefaultMapName',
              ( ['retval', 'out'], POINTER(BSTR), 'MapName' )),
    COMMETHOD([helpstring(u'Returns information about a map (data frame).')], HRESULT, 'GetServerInfo',
              ( ['in'], BSTR, 'MapName' ),
              ( ['retval', 'out'], POINTER(POINTER(IMapServerInfo)), 'serverInfo' )),
    COMMETHOD([helpstring(u"Generates an image of the map, based on the given map description, and writes the image to a specified file on disk. Supported file types are: 'bmp', 'jpg', 'tif', 'png'/'png8', 'png24', 'emf', 'ps', 'pdf', 'ai', 'gif', and 'svg'/'svgz'.")], HRESULT, 'ExportMapImage',
              ( ['in'], POINTER(IMapDescription), 'mapDesc' ),
              ( ['in'], POINTER(IImageDescription), 'imageDesc' ),
              ( ['retval', 'out'], POINTER(POINTER(IMapImage)), 'MapImage' )),
    COMMETHOD([helpstring(u'Returns a collection of Map Server Find Result objects that contain the given search string. If LayerIDs is Nothing/Null or empty, all layers are searched.')], HRESULT, 'Find',
              ( ['in'], POINTER(IMapDescription), 'mapDesc' ),
              ( ['in'], POINTER(IImageDisplay), 'MapImage' ),
              ( ['in'], BSTR, 'searchString' ),
              ( ['in'], VARIANT_BOOL, 'Contains' ),
              ( ['in'], BSTR, 'searchFields' ),
              ( ['in'], esriFindOption, 'option' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'layerIds' ),
              ( ['retval', 'out'], POINTER(POINTER(IMapServerFindResults)), 'findResults' )),
    COMMETHOD([helpstring(u'Returns a collection of Map Server Identify Result objects at the given location. If LayerIDs is Nothing/Null or empty, all layers are searched.')], HRESULT, 'Identify',
              ( ['in'], POINTER(IMapDescription), 'mapDesc' ),
              ( ['in'], POINTER(IImageDisplay), 'MapImage' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'searchShape' ),
              ( ['in'], c_int, 'Tolerance' ),
              ( ['in'], esriIdentifyOption, 'option' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'layerIds' ),
              ( ['retval', 'out'], POINTER(POINTER(IMapServerIdentifyResults)), 'identifyResult' )),
    COMMETHOD([helpstring(u'Returns the count of the features that meet the query filter selection criteria for the specified layer.')], HRESULT, 'QueryFeatureCount',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], c_int, 'LayerID' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'Filter' ),
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD([helpstring(u'Returns the IDs of the features that meet the query filter selection criteria for the specified layer.')], HRESULT, 'QueryFeatureIDs',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], c_int, 'LayerID' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'Filter' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFIDSet)), 'FIDs' )),
    COMMETHOD([helpstring(u'Returns a record set of features that meet the query filter selection criteria for the specified layer.')], HRESULT, 'QueryFeatureData',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], c_int, 'LayerID' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'Filter' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRecordSet)), 'recordSet' )),
    COMMETHOD([helpstring(u'Returns a collection of Map Server Hyperlink objects for the specified layers. Only hyperlinks of visible layers are returned. If LayerIDs is Nothing/Null or empty, all layers are searched.')], HRESULT, 'QueryHyperlinks',
              ( ['in'], POINTER(IMapDescription), 'mapDesc' ),
              ( ['in'], POINTER(IImageDisplay), 'MapImage' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'layerIds' ),
              ( ['retval', 'out'], POINTER(POINTER(IMapServerHyperlinks)), 'hyperlinks' )),
    COMMETHOD([helpstring(u'Computes the scale of the specified map, at the given map extent, for an image with the given size.')], HRESULT, 'ComputeScale',
              ( ['in'], POINTER(IMapDescription), 'mapDesc' ),
              ( ['in'], POINTER(IImageDisplay), 'mapDisplay' ),
              ( ['retval', 'out'], POINTER(c_double), 'Scale' )),
    COMMETHOD([helpstring(u'Computes the distance between two points on the specified map. The result is in the map units of the specified map.')], HRESULT, 'ComputeDistance',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'fromPoint' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'toPoint' ),
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits, 'Units' ),
              ( ['retval', 'out'], POINTER(c_double), 'Distance' )),
    COMMETHOD([helpstring(u'Converts a screen location to a map coordinate.')], HRESULT, 'ToMapPoints',
              ( ['in'], POINTER(IMapDescription), 'MapDescription' ),
              ( ['in'], POINTER(IImageDisplay), 'mapDisplay' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'screenXValues' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'screenYValues' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPointCollection)), 'mapPoints' )),
    COMMETHOD([helpstring(u'Converts a map coordinate to a screen location.')], HRESULT, 'FromMapPoints',
              ( ['in'], POINTER(IMapDescription), 'MapDescription' ),
              ( ['in'], POINTER(IImageDisplay), 'mapDisplay' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPointCollection), 'mapPoints' ),
              ( ['in', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray)), 'screenXValues' ),
              ( ['in', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray)), 'screenYValues' )),
    COMMETHOD([helpstring(u'Returns a collection of Map Server Legend Info objects for the specified layers. If layerIDs is Nothing/Null or empty, legend information for all layers is returned.')], HRESULT, 'GetLegendInfo',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'layerIds' ),
              ( ['in'], POINTER(IMapServerLegendPatch), 'patch' ),
              ( ['in'], POINTER(IImageType), 'imgType' ),
              ( ['retval', 'out'], POINTER(POINTER(IMapServerLegendInfos)), 'legendInfos' )),
    COMMETHOD([helpstring(u'Returns the SQL syntax information for the specified layer.')], HRESULT, 'GetSQLSyntaxInfo',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], c_int, 'LayerID' ),
              ( ['retval', 'out'], POINTER(POINTER(ISQLSyntaxInfo)), 'sqlInfo' )),
    COMMETHOD([helpstring(u'The supported image return types for the map server.  A value of esriImageReturnMimeData means that only MIME data is supported.  Otherwise, either MIME data or URLs are supported.')], HRESULT, 'GetSupportedImageReturnTypes',
              ( ['retval', 'out'], POINTER(esriImageReturnType), 'retType' )),
    COMMETHOD([helpstring(u'Exports a scale bar to an image file.  The client can create the scaleBar object and set its desired properties appropriately.  If scaleBar is Nothing/Null, a default scale bar will be generated.')], HRESULT, 'ExportScaleBar',
              ( ['in'], POINTER(IScaleBar), 'Scalebar' ),
              ( ['in'], POINTER(IMapDescription), 'mapDesc' ),
              ( ['in'], POINTER(IImageDisplay), 'pMapDisplay' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'BackgroundColor' ),
              ( ['in'], POINTER(IImageDescription), 'imageDesc' ),
              ( ['retval', 'out'], POINTER(POINTER(IImageResult)), 'ImageResult' )),
    COMMETHOD([helpstring(u'Returns the count of the features that meet the query filter selection criteria for the specified layer.')], HRESULT, 'QueryFeatureCount2',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], POINTER(ILayerDescription), 'pLayerDescription' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'Filter' ),
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD([helpstring(u'Returns the IDs of the features that meet the query filter selection criteria for the specified layer.')], HRESULT, 'QueryFeatureIDs2',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], POINTER(ILayerDescription), 'pLayerDesciscription' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'Filter' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFIDSet)), 'FIDs' )),
    COMMETHOD([helpstring(u'Returns a record set of features that meet the query filter selection criteria for the specified layer.')], HRESULT, 'QueryFeatureData2',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], POINTER(ILayerDescription), 'pLayerDesciscription' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'Filter' ),
              ( ['in'], POINTER(IQueryResultOptions), 'options' ),
              ( ['retval', 'out'], POINTER(POINTER(IQueryResult)), 'QueryResult' )),
    COMMETHOD(['propget', helpstring(u'A set of name-value pairs for properties set for the MapServer Service Configuration Restrictions.')], HRESULT, 'ServiceConfigurationInfo',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet)), 'PropertySet' )),
]
################################################################
## code template for IMapServer3 implementation
##class IMapServer3_Impl(object):
##    def GetLegendInfo(self, MapName, layerIds, patch, imgType):
##        u'Returns a collection of Map Server Legend Info objects for the specified layers. If layerIDs is Nothing/Null or empty, legend information for all layers is returned.'
##        #return legendInfos
##
##    def GetServerInfo(self, MapName):
##        u'Returns information about a map (data frame).'
##        #return serverInfo
##
##    def QueryRowIDs(self, MapName, pTableDescription, pFilter):
##        u'Returns the IDs of the rows that meet the query filter selection criteria for the specified table.'
##        #return FIDs
##
##    def ComputeDistance(self, MapName, fromPoint, toPoint, Units):
##        u'Computes the distance between two points on the specified map. The result is in the map units of the specified map.'
##        #return Distance
##
##    def QueryHyperlinks(self, mapDesc, MapImage, layerIds):
##        u'Returns a collection of Map Server Hyperlink objects for the specified layers. Only hyperlinks of visible layers are returned. If LayerIDs is Nothing/Null or empty, all layers are searched.'
##        #return hyperlinks
##
##    def QueryFeatureIDs(self, MapName, LayerID, Filter):
##        u'Returns the IDs of the features that meet the query filter selection criteria for the specified layer.'
##        #return FIDs
##
##    def FromMapPoints(self, MapDescription, mapDisplay, mapPoints):
##        u'Converts a map coordinate to a screen location.'
##        #return screenXValues, screenYValues
##
##    def QueryData(self, MapName, pMapTableDescription, Filter, options):
##        u'Returns a record set of rows that meet the query filter selection criteria for the specified table.'
##        #return QueryResult
##
##    def ExportScaleBar(self, Scalebar, mapDesc, pMapDisplay, BackgroundColor, imageDesc):
##        u'Exports a scale bar to an image file.  The client can create the scaleBar object and set its desired properties appropriately.  If scaleBar is Nothing/Null, a default scale bar will be generated.'
##        #return ImageResult
##
##    @property
##    def DefaultMapName(self):
##        u"Name of the document's active map (data frame)."
##        #return MapName
##
##    def QueryHTMLPopups(self, MapName, TableID, pRowIDs):
##        u'Returns the html as text that can be used in popups.'
##        #return HTMLTextArray
##
##    @property
##    def MapCount(self):
##        u'The number of maps (data frames) in the document.'
##        #return Count
##
##    def QueryFeatureData(self, MapName, LayerID, Filter):
##        u'Returns a record set of features that meet the query filter selection criteria for the specified layer.'
##        #return recordSet
##
##    @property
##    def DocumentInfo(self):
##        u"A set of name-value pairs for properties set for the map document (mxd only). These properties are string values set in the map document's Map Properties dialog and include: Title, Subject, Author, Category, Keywords and Comments."
##        #return props
##
##    def Identify(self, mapDesc, MapImage, searchShape, Tolerance, option, layerIds):
##        u'Returns a collection of Map Server Identify Result objects at the given location. If LayerIDs is Nothing/Null or empty, all layers are searched.'
##        #return identifyResult
##
##    @property
##    def ServiceConfigurationInfo(self):
##        u'A set of name-value pairs for properties set for the MapServer Service Configuration Restrictions.'
##        #return PropertySet
##
##    def ExportMapImage(self, mapDesc, imageDesc):
##        u"Generates an image of the map, based on the given map description, and writes the image to a specified file on disk. Supported file types are: 'bmp', 'jpg', 'tif', 'png'/'png8', 'png24', 'emf', 'ps', 'pdf', 'ai', 'gif', and 'svg'/'svgz'."
##        #return MapImage
##
##    def GetDefaultLayerDrawingDescriptions(self, MapName, pLayerIDs, outputOptions):
##        u'Get Layer Drawing Description'
##        #return ppLayerDrawingDescriptions
##
##    @property
##    def MapName(self, Index):
##        u'Name of the map (data frame) as indicated by the index. The first beginning with 0.'
##        #return MapName
##
##    def QueryFeatureData2(self, MapName, pLayerDesciscription, Filter, options):
##        u'Returns a record set of features that meet the query filter selection criteria for the specified layer.'
##        #return QueryResult
##
##    def GetSupportedImageReturnTypes(self):
##        u'The supported image return types for the map server.  A value of esriImageReturnMimeData means that only MIME data is supported.  Otherwise, either MIME data or URLs are supported.'
##        #return retType
##
##    def QueryRasterValue(self, MapName, sourceTableID, rowIDs, FieldName, rasterValueType):
##        u'Returns the Raster content that meet the selection criteria for the specified table.'
##        #return ppImageResults
##
##    def QueryRelatedRecords(self, MapName, sourceTable, pFIDs, RelateDescription):
##        u'Returns the IDs of the rows that meet the query filter selection criteria for the specified table.'
##        #return ppQueryResult
##
##    def QueryRowCount(self, MapName, pTableDescription, pFilter):
##        u'Returns the count of the rows that meet the query filter selection criteria for the specified table.'
##        #return pCount
##
##    def QueryFeatureCount2(self, MapName, pLayerDescription, Filter):
##        u'Returns the count of the features that meet the query filter selection criteria for the specified layer.'
##        #return Count
##
##    def QueryFeatureCount(self, MapName, LayerID, Filter):
##        u'Returns the count of the features that meet the query filter selection criteria for the specified layer.'
##        #return Count
##
##    def QueryAttachmentInfos(self, MapName, TableID, rowIDs):
##        u'Returns the attachment info that describe the attachments for the given features/ rows.'
##        #return ppAttachmentInfos
##
##    def GetSQLSyntaxInfo(self, MapName, LayerID):
##        u'Returns the SQL syntax information for the specified layer.'
##        #return sqlInfo
##
##    def QueryAttachmentData(self, MapName, TableID, attachmentIDs, TransportType):
##        u'Returns the attachment data for the given features/ rows.'
##        #return attachmentDataArray
##
##    def ComputeScale(self, mapDesc, mapDisplay):
##        u'Computes the scale of the specified map, at the given map extent, for an image with the given size.'
##        #return Scale
##
##    def GetMapTableSubtypeInfos(self, MapName, pTableIDs):
##        u'Returns the MapTableSubtypeInfos in the current map.'
##        #return ppMapTableSubtypeInfos
##
##    def QueryFeatureIDs2(self, MapName, pLayerDesciscription, Filter):
##        u'Returns the IDs of the features that meet the query filter selection criteria for the specified layer.'
##        #return FIDs
##
##    def ToMapPoints(self, MapDescription, mapDisplay, screenXValues, screenYValues):
##        u'Converts a screen location to a map coordinate.'
##        #return mapPoints
##
##    def Find(self, mapDesc, MapImage, searchString, Contains, searchFields, option, layerIds):
##        u'Returns a collection of Map Server Find Result objects that contain the given search string. If LayerIDs is Nothing/Null or empty, all layers are searched.'
##        #return findResults
##

class RelatedRecordSet(CoClass):
    u'A colcass that contains related record groups and the fields of those related records.'
    _reg_clsid_ = GUID('{1B14E2AC-E5AC-485E-878F-48F7190A82D3}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
RelatedRecordSet._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRelatedRecordSet, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

class GroupElement(CoClass):
    u'The Group Graphic Element to display a group of graphic elements.'
    _reg_clsid_ = GUID('{803577D2-F8A3-11D0-83AF-080009B996CC}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
GroupElement._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IElement, IElementProperties, IElementProperties2, IElementProperties3, IGroupElement, IGroupElement2, IGroupElement3, IGraphicElement, IBoundsProperties, IFrameElement, IFrameDraw, IFrameProperties, comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ITransform2D, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySupport, IGraphicsContainerProperty, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize]

IWMSIdentifyObject._methods_ = [
    COMMETHOD(['propget', helpstring(u'Name of the identify object.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'Name of the identify object.')], HRESULT, 'Name',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'PropertySet of the identify object.')], HRESULT, 'PropertySet',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet)), 'PropertySet' )),
    COMMETHOD(['propputref', helpstring(u'PropertySet of the identify object.')], HRESULT, 'PropertySet',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet), 'PropertySet' )),
    COMMETHOD([helpstring(u'Indicates if the object can identify the specified layer.')], HRESULT, 'CanIdentify',
              ( ['in'], POINTER(ILayer), 'pLayer' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'b' )),
    COMMETHOD(['propget', helpstring(u'The window handle.')], HRESULT, 'hWnd',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE), 'hWnd' )),
    COMMETHOD(['propget', helpstring(u'Target layer for identification.')], HRESULT, 'Layer',
              ( ['retval', 'out'], POINTER(POINTER(ILayer)), 'ppLayer' )),
    COMMETHOD([helpstring(u'Flashes the identified object on the screen.')], HRESULT, 'Flash',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IScreenDisplay), 'pDisplay' )),
    COMMETHOD([helpstring(u'Displays a context sensitive popup menu at the specified location.')], HRESULT, 'PopUpMenu',
              ( ['in'], c_int, 'x' ),
              ( ['in'], c_int, 'y' )),
]
################################################################
## code template for IWMSIdentifyObject implementation
##class IWMSIdentifyObject_Impl(object):
##    @property
##    def Layer(self):
##        u'Target layer for identification.'
##        #return ppLayer
##
##    def _get(self):
##        u'Name of the identify object.'
##        #return Name
##    def _set(self, Name):
##        u'Name of the identify object.'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def CanIdentify(self, pLayer):
##        u'Indicates if the object can identify the specified layer.'
##        #return b
##
##    def Flash(self, pDisplay):
##        u'Flashes the identified object on the screen.'
##        #return 
##
##    def PropertySet(self, PropertySet):
##        u'PropertySet of the identify object.'
##        #return 
##
##    def PopUpMenu(self, x, y):
##        u'Displays a context sensitive popup menu at the specified location.'
##        #return 
##
##    @property
##    def hWnd(self):
##        u'The window handle.'
##        #return hWnd
##

class IGeoRefSaveAsDlg(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a dialog for saving the results of a georeferencing opertion.'
    _iid_ = GUID('{6C0B842C-FEB1-4380-9211-CAF87E732030}')
    _idlflags_ = ['oleautomation']
IGeoRefSaveAsDlg._methods_ = [
    COMMETHOD([helpstring(u'Indicates if the object can rectify the given layer.')], HRESULT, 'CanSaveAs',
              ( ['in'], POINTER(ILayer), 'pLayer' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'b' )),
    COMMETHOD([helpstring(u'Displays the rectify dialog.')], HRESULT, 'DoSaveAs',
              ( ['in'], POINTER(ILayer), 'pLayer' )),
]
################################################################
## code template for IGeoRefSaveAsDlg implementation
##class IGeoRefSaveAsDlg_Impl(object):
##    def CanSaveAs(self, pLayer):
##        u'Indicates if the object can rectify the given layer.'
##        #return b
##
##    def DoSaveAs(self, pLayer):
##        u'Displays the rectify dialog.'
##        #return 
##

IMapServerFindResult._methods_ = [
    COMMETHOD(['propget', helpstring(u'The found value.')], HRESULT, 'Value',
              ( ['retval', 'out'], POINTER(BSTR), 'Value' )),
    COMMETHOD(['propput', helpstring(u'The found value.')], HRESULT, 'Value',
              ( ['in'], BSTR, 'Value' )),
    COMMETHOD(['propget', helpstring(u'The layer ID.')], HRESULT, 'LayerID',
              ( ['retval', 'out'], POINTER(c_int), 'LayerID' )),
    COMMETHOD(['propput', helpstring(u'The layer ID.')], HRESULT, 'LayerID',
              ( ['in'], c_int, 'LayerID' )),
    COMMETHOD(['propget', helpstring(u'The ID of the found feature.')], HRESULT, 'FeatureId',
              ( ['retval', 'out'], POINTER(c_int), 'FID' )),
    COMMETHOD(['propput', helpstring(u'The ID of the found feature.')], HRESULT, 'FeatureId',
              ( ['in'], c_int, 'FID' )),
    COMMETHOD(['propget', helpstring(u'The field name.')], HRESULT, 'FieldName',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'The field name.')], HRESULT, 'FieldName',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'The geometry of the found feature.')], HRESULT, 'FeatureShape',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry)), 'Shape' )),
    COMMETHOD(['propput', helpstring(u'The geometry of the found feature.')], HRESULT, 'FeatureShape',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'Shape' )),
    COMMETHOD(['propget', helpstring(u"A set of name-value pairs for the found features's field names and values.")], HRESULT, 'FeatureProperties',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet)), 'props' )),
    COMMETHOD(['propput', helpstring(u"A set of name-value pairs for the found features's field names and values.")], HRESULT, 'FeatureProperties',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet), 'props' )),
]
################################################################
## code template for IMapServerFindResult implementation
##class IMapServerFindResult_Impl(object):
##    def _get(self):
##        u'The ID of the found feature.'
##        #return FID
##    def _set(self, FID):
##        u'The ID of the found feature.'
##    FeatureId = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The found value.'
##        #return Value
##    def _set(self, Value):
##        u'The found value.'
##    Value = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u"A set of name-value pairs for the found features's field names and values."
##        #return props
##    def _set(self, props):
##        u"A set of name-value pairs for the found features's field names and values."
##    FeatureProperties = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The field name.'
##        #return Name
##    def _set(self, Name):
##        u'The field name.'
##    FieldName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The geometry of the found feature.'
##        #return Shape
##    def _set(self, Shape):
##        u'The geometry of the found feature.'
##    FeatureShape = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The layer ID.'
##        #return LayerID
##    def _set(self, LayerID):
##        u'The layer ID.'
##    LayerID = property(_get, _set, doc = _set.__doc__)
##

IElementCollection._methods_ = [
    COMMETHOD([helpstring(u'Adds an element to the collection.')], HRESULT, 'Add',
              ( ['in'], POINTER(IElement), 'Element' ),
              ( ['in', 'optional'], c_int, 'LinkedFeatureID', -1 )),
    COMMETHOD(['propget', helpstring(u'Number of elements in the collection.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD([helpstring(u'Element at the given index.')], HRESULT, 'QueryItem',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(POINTER(IElement)), 'Element' ),
              ( ['out', 'optional'], POINTER(c_int), 'LinkedFeatureID', 0 )),
    COMMETHOD([helpstring(u'Removes all the elements in the collection.')], HRESULT, 'Clear'),
    COMMETHOD([helpstring(u'Remove an element from the collection.')], HRESULT, 'Remove',
              ( ['in'], POINTER(IElement), 'Element' )),
]
################################################################
## code template for IElementCollection implementation
##class IElementCollection_Impl(object):
##    @property
##    def Count(self):
##        u'Number of elements in the collection.'
##        #return Count
##
##    def QueryItem(self, Index):
##        u'Element at the given index.'
##        #return Element, LinkedFeatureID
##
##    def Add(self, Element, LinkedFeatureID):
##        u'Adds an element to the collection.'
##        #return 
##
##    def Clear(self):
##        u'Removes all the elements in the collection.'
##        #return 
##
##    def Remove(self, Element):
##        u'Remove an element from the collection.'
##        #return 
##

class LayerDrawingDescriptionFactory(CoClass):
    u'Generic layer drawing description factory that finds the right factory for a given layer.'
    _reg_clsid_ = GUID('{2E331B54-C03A-4E6F-8EA9-CC596D08F01F}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
LayerDrawingDescriptionFactory._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILayerDrawingDescriptionFactory]

class QueryResult(CoClass):
    u'A Query Result CoClass for storing information about the results of a query.'
    _reg_clsid_ = GUID('{966235D2-1FB1-4AE2-B484-21AFDDA0FCFC}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
QueryResult._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IQueryResult, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersionSupportGEN]

class IDataGraphCollectionEvents(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to events that occur when the collection of graphs in the document changes.'
    _iid_ = GUID('{D890857B-B1F9-43EA-9B09-E8990F7BA5D7}')
    _idlflags_ = ['oleautomation']
IDataGraphCollectionEvents._methods_ = [
    COMMETHOD([helpstring(u'Fired when the graph is added to document.')], HRESULT, 'DataGraphAdded',
              ( ['in'], POINTER(IDataGraphBase), 'pGraph' )),
    COMMETHOD([helpstring(u'Fired when the graph is removed from document.')], HRESULT, 'DataGraphRemoved',
              ( ['in'], POINTER(IDataGraphBase), 'pGraph' )),
    COMMETHOD([helpstring(u'Fired when document removes all graphs.')], HRESULT, 'DataGraphReset'),
]
################################################################
## code template for IDataGraphCollectionEvents implementation
##class IDataGraphCollectionEvents_Impl(object):
##    def DataGraphRemoved(self, pGraph):
##        u'Fired when the graph is removed from document.'
##        #return 
##
##    def DataGraphAdded(self, pGraph):
##        u'Fired when the graph is added to document.'
##        #return 
##
##    def DataGraphReset(self):
##        u'Fired when document removes all graphs.'
##        #return 
##

IFeatureServiceEditExtension._methods_ = [
    COMMETHOD([], HRESULT, 'CanCreateFromFeatureService',
              ( ['in'], POINTER(IUnknown), 'pObject' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'CanCreate' )),
    COMMETHOD([], HRESULT, 'CreateFromFeatureService',
              ( ['in'], POINTER(IUnknown), 'pObject' ),
              ( ['in'], POINTER(IGroupLayer), 'pGroupLayer' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IEnumTable)), 'ppTables' )),
    COMMETHOD([], HRESULT, 'CreateLayerFromFeatureService',
              ( ['in'], POINTER(IUnknown), 'pObject' ),
              ( ['in'], BSTR, 'LayerID' ),
              ( ['in'], POINTER(IGroupLayer), 'pGroupLayer' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IEnumTable)), 'ppTables' )),
    COMMETHOD([], HRESULT, 'CanEdit',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pCanEdit' )),
    COMMETHOD([], HRESULT, 'UsesSoapEditing',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pUsesSoap' )),
    COMMETHOD([], HRESULT, 'IsEditing',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pIsEditing' )),
    COMMETHOD([], HRESULT, 'StartEditing',
              ( ['in'], POINTER(IGroupLayer), 'pLayer' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspace), 'pWorkspace' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'pEnvelope' ),
              ( ['in'], BSTR, 'repName' ),
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriReplicaModelType, 'enumModelType' )),
    COMMETHOD([], HRESULT, 'StopEditing',
              ( ['in'], POINTER(IGroupLayer), 'pLayer' )),
    COMMETHOD([], HRESULT, 'Disconnect',
              ( ['in'], POINTER(IGroupLayer), 'pLayer' )),
    COMMETHOD([], HRESULT, 'Extract',
              ( ['in'], POINTER(IGroupLayer), 'pLayer' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspace), 'ipWorkspace' )),
]
################################################################
## code template for IFeatureServiceEditExtension implementation
##class IFeatureServiceEditExtension_Impl(object):
##    def CreateFromFeatureService(self, pObject, pGroupLayer):
##        '-no docstring-'
##        #return ppTables
##
##    def UsesSoapEditing(self):
##        '-no docstring-'
##        #return pUsesSoap
##
##    def StartEditing(self, pLayer, pWorkspace, pEnvelope, repName, enumModelType):
##        '-no docstring-'
##        #return 
##
##    def IsEditing(self):
##        '-no docstring-'
##        #return pIsEditing
##
##    def CanEdit(self):
##        '-no docstring-'
##        #return pCanEdit
##
##    def CanCreateFromFeatureService(self, pObject):
##        '-no docstring-'
##        #return CanCreate
##
##    def Disconnect(self, pLayer):
##        '-no docstring-'
##        #return 
##
##    def StopEditing(self, pLayer):
##        '-no docstring-'
##        #return 
##
##    def Extract(self, pLayer, ipWorkspace):
##        '-no docstring-'
##        #return 
##
##    def CreateLayerFromFeatureService(self, pObject, LayerID, pGroupLayer):
##        '-no docstring-'
##        #return ppTables
##

class Graticule(CoClass):
    u'A map grid that divides the map with meridians and parallels.'
    _reg_clsid_ = GUID('{03762C8F-F4D0-11D1-ADE8-080009EC732A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IGridAxisTicks(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the tick axis properties of a grid.'
    _iid_ = GUID('{864E5227-9809-4A48-8309-6EC640C63B30}')
    _idlflags_ = ['oleautomation']
Graticule._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGraticule, IMapGrid, IMeasuredGrid, IGridHatch, IGridInteriorLabels, IGridAxisTicks, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, IGraphicsComposite, IReferenceSystem]

class IMapLayerInfo4(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the available properties of a map layer info object.'
    _iid_ = GUID('{1A140B8F-78B7-4C21-B5FB-5F22F3B56837}')
    _idlflags_ = ['oleautomation']
IMapLayerInfo4._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates whether the layer is being updated frequently with new data.')], HRESULT, 'HasLiveData',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'HasLiveData' )),
    COMMETHOD(['propget', helpstring(u'Indicate whether DrawingDescription can be modified.')], HRESULT, 'CanModifyDrawingDescription',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pCanModifyDrawingDescription' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layter has LayerDrawingDescription or not.')], HRESULT, 'HasLayerDrawingDescription',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pHasLayerDrawingDescription' )),
    COMMETHOD(['propget', helpstring(u'Array of strings that contains field alias for each field in Fields property.')], HRESULT, 'FieldAliases',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray)), 'FieldAliases' )),
    COMMETHOD(['propget', helpstring(u'Copyright information associated with the layer.')], HRESULT, 'CopyrightText',
              ( ['retval', 'out'], POINTER(BSTR), 'copyright' )),
    COMMETHOD(['propget', helpstring(u'The layer identifier. This ID is used throughout to uniquely identify the layer for all requests.')], HRESULT, 'ID',
              ( ['retval', 'out'], POINTER(c_int), 'LayerID' )),
    COMMETHOD(['propget', helpstring(u'The name of the layer.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propget', helpstring(u'The description of the layer. This property is set in the General tab of the Layer Properties dialog.')], HRESULT, 'Description',
              ( ['retval', 'out'], POINTER(BSTR), 'desc' )),
    COMMETHOD(['propget', helpstring(u'The layer type.')], HRESULT, 'Type',
              ( ['retval', 'out'], POINTER(BSTR), 'Type' )),
    COMMETHOD(['propget', helpstring(u'The description of the source information for the layer.')], HRESULT, 'SourceDescription',
              ( ['retval', 'out'], POINTER(BSTR), 'desc' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer has labels to turn on and off.')], HRESULT, 'HasLabels',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'HasLabels' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer supports feature selection.')], HRESULT, 'CanSelect',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'CanSelect' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer supports symbol scaling.')], HRESULT, 'CanScaleSymbols',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'canScale' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer supports the Identify operation.')], HRESULT, 'CanIdentify',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'canId' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer supports the Find operation.')], HRESULT, 'CanFind',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'CanFind' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer is a feature layer.')], HRESULT, 'IsFeatureLayer',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsFeatureLayer' )),
    COMMETHOD(['propget', helpstring(u'The minimum visible scale for the layer.')], HRESULT, 'MinScale',
              ( ['retval', 'out'], POINTER(c_double), 'Scale' )),
    COMMETHOD(['propget', helpstring(u'The maximum visible scale for the layer.')], HRESULT, 'MaxScale',
              ( ['retval', 'out'], POINTER(c_double), 'Scale' )),
    COMMETHOD(['propget', helpstring(u'The geographic extent of the layer.')], HRESULT, 'Extent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'Extent' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer has hyperlinks.')], HRESULT, 'HasHyperlinks',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'hasLinks' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer has attributes.')], HRESULT, 'HasAttributes',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'hasAttr' )),
    COMMETHOD(['propget', helpstring(u'Array of attribute fields contained in the layer.')], HRESULT, 'Fields',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFields)), 'Fields' )),
    COMMETHOD(['propget', helpstring(u'Primary display field.')], HRESULT, 'DisplayField',
              ( ['retval', 'out'], POINTER(BSTR), 'FieldName' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer is a composite layer.')], HRESULT, 'IsComposite',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsComposite' )),
    COMMETHOD(['propget', helpstring(u'The list identifying the sublayers if the layer is a composite layer.')], HRESULT, 'SubLayers',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray)), 'layerIds' )),
    COMMETHOD(['propget', helpstring(u'If the layer is a member of a composite layer, this property identifies the parent layer.')], HRESULT, 'ParentLayerID',
              ( ['retval', 'out'], POINTER(c_int), 'LayerID' )),
]
################################################################
## code template for IMapLayerInfo4 implementation
##class IMapLayerInfo4_Impl(object):
##    @property
##    def SourceDescription(self):
##        u'The description of the source information for the layer.'
##        #return desc
##
##    @property
##    def MaxScale(self):
##        u'The maximum visible scale for the layer.'
##        #return Scale
##
##    @property
##    def DisplayField(self):
##        u'Primary display field.'
##        #return FieldName
##
##    @property
##    def CopyrightText(self):
##        u'Copyright information associated with the layer.'
##        #return copyright
##
##    @property
##    def CanModifyDrawingDescription(self):
##        u'Indicate whether DrawingDescription can be modified.'
##        #return pCanModifyDrawingDescription
##
##    @property
##    def HasAttributes(self):
##        u'Indicates if the layer has attributes.'
##        #return hasAttr
##
##    @property
##    def MinScale(self):
##        u'The minimum visible scale for the layer.'
##        #return Scale
##
##    @property
##    def Type(self):
##        u'The layer type.'
##        #return Type
##
##    @property
##    def Description(self):
##        u'The description of the layer. This property is set in the General tab of the Layer Properties dialog.'
##        #return desc
##
##    @property
##    def IsFeatureLayer(self):
##        u'Indicates if the layer is a feature layer.'
##        #return IsFeatureLayer
##
##    @property
##    def FieldAliases(self):
##        u'Array of strings that contains field alias for each field in Fields property.'
##        #return FieldAliases
##
##    @property
##    def CanIdentify(self):
##        u'Indicates if the layer supports the Identify operation.'
##        #return canId
##
##    @property
##    def HasLabels(self):
##        u'Indicates if the layer has labels to turn on and off.'
##        #return HasLabels
##
##    @property
##    def ParentLayerID(self):
##        u'If the layer is a member of a composite layer, this property identifies the parent layer.'
##        #return LayerID
##
##    @property
##    def SubLayers(self):
##        u'The list identifying the sublayers if the layer is a composite layer.'
##        #return layerIds
##
##    @property
##    def Extent(self):
##        u'The geographic extent of the layer.'
##        #return Extent
##
##    @property
##    def Name(self):
##        u'The name of the layer.'
##        #return Name
##
##    @property
##    def Fields(self):
##        u'Array of attribute fields contained in the layer.'
##        #return Fields
##
##    @property
##    def CanScaleSymbols(self):
##        u'Indicates if the layer supports symbol scaling.'
##        #return canScale
##
##    @property
##    def IsComposite(self):
##        u'Indicates if the layer is a composite layer.'
##        #return IsComposite
##
##    @property
##    def HasLiveData(self):
##        u'Indicates whether the layer is being updated frequently with new data.'
##        #return HasLiveData
##
##    @property
##    def ID(self):
##        u'The layer identifier. This ID is used throughout to uniquely identify the layer for all requests.'
##        #return LayerID
##
##    @property
##    def CanFind(self):
##        u'Indicates if the layer supports the Find operation.'
##        #return CanFind
##
##    @property
##    def HasLayerDrawingDescription(self):
##        u'Indicates if the layter has LayerDrawingDescription or not.'
##        #return pHasLayerDrawingDescription
##
##    @property
##    def CanSelect(self):
##        u'Indicates if the layer supports feature selection.'
##        #return CanSelect
##
##    @property
##    def HasHyperlinks(self):
##        u'Indicates if the layer has hyperlinks.'
##        #return hasLinks
##

class IEnumMapSurround(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the map surround enumerator.'
    _iid_ = GUID('{FE3115EA-ED6C-11D0-8683-0000F8751720}')
    _idlflags_ = ['oleautomation']
IEnumMapSurround._methods_ = [
    COMMETHOD([helpstring(u'Returns the next map surround.')], HRESULT, 'Next',
              ( ['retval', 'out'], POINTER(POINTER(IMapSurround)), 'MapSurround' )),
    COMMETHOD([helpstring(u'Resets the enumerator.')], HRESULT, 'Reset'),
]
################################################################
## code template for IEnumMapSurround implementation
##class IEnumMapSurround_Impl(object):
##    def Reset(self):
##        u'Resets the enumerator.'
##        #return 
##
##    def Next(self):
##        u'Returns the next map surround.'
##        #return MapSurround
##

class ServiceDataOptions(CoClass):
    u'Service Data Options'
    _reg_clsid_ = GUID('{090E8381-11A6-4179-AA1E-488B27F53EE8}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
ServiceDataOptions._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IServiceDataOptions, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class FDOGraphicsLayerFactory(CoClass):
    u'A graphics layer factory.'
    _reg_clsid_ = GUID('{34B2EF87-F4AC-11D1-A245-080009B6F22B}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
FDOGraphicsLayerFactory._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IFDOGraphicsLayerFactory, IAnnotationLayerFactory]

ITemporaryLayer._methods_ = [
    COMMETHOD(['propput', helpstring(u'Indicates if the layer is a temporary layer.')], HRESULT, 'Temporary',
              ( ['in'], VARIANT_BOOL, 'Temporary' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer is a temporary layer.')], HRESULT, 'Temporary',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Temporary' )),
]
################################################################
## code template for ITemporaryLayer implementation
##class ITemporaryLayer_Impl(object):
##    def _get(self):
##        u'Indicates if the layer is a temporary layer.'
##        #return Temporary
##    def _set(self, Temporary):
##        u'Indicates if the layer is a temporary layer.'
##    Temporary = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'esriAnnotationStorageType'
esriMapAnnotation = 0
esriDatabaseAnnotation = 1
esriAnnotationStorageType = c_int # enum
IDataGraphBase._methods_ = [
    COMMETHOD(['propget', helpstring(u'Name of the data graph.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'pName' )),
    COMMETHOD(['propput', helpstring(u'Name of the data graph.')], HRESULT, 'Name',
              ( ['in'], BSTR, 'pName' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the selected set of the series from input dataset is used to build graph.')], HRESULT, 'UseSelectedSet',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pUseSel' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the selected set of the series from input dataset is used to build graph.')], HRESULT, 'UseSelectedSet',
              ( ['in'], VARIANT_BOOL, 'pUseSel' )),
    COMMETHOD([helpstring(u'Reloads data values in data graph series.')], HRESULT, 'Reload'),
    COMMETHOD([helpstring(u'Draws the data graph into the provided device context.')], HRESULT, 'DrawToDC',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE, 'hDC' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.tagRECT), 'pOutputRect' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.tagRECT), 'pGraphRect' )),
    COMMETHOD([helpstring(u'Loads the data graph from a .grf file.')], HRESULT, 'LoadFromFile',
              ( ['in'], BSTR, 'Filename' )),
    COMMETHOD([helpstring(u'Saves the data graph to a .grf file.')], HRESULT, 'SaveToFile',
              ( ['in'], BSTR, 'Filename' )),
    COMMETHOD([helpstring(u'Exports the data graph to a file.')], HRESULT, 'ExportToFile',
              ( ['in'], BSTR, 'Filename' )),
    COMMETHOD([helpstring(u'Copies the data graph to the clipboard as a metafile.')], HRESULT, 'CopyToClipboard'),
]
################################################################
## code template for IDataGraphBase implementation
##class IDataGraphBase_Impl(object):
##    def CopyToClipboard(self):
##        u'Copies the data graph to the clipboard as a metafile.'
##        #return 
##
##    def SaveToFile(self, Filename):
##        u'Saves the data graph to a .grf file.'
##        #return 
##
##    def _get(self):
##        u'Name of the data graph.'
##        #return pName
##    def _set(self, pName):
##        u'Name of the data graph.'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the selected set of the series from input dataset is used to build graph.'
##        #return pUseSel
##    def _set(self, pUseSel):
##        u'Indicates if the selected set of the series from input dataset is used to build graph.'
##    UseSelectedSet = property(_get, _set, doc = _set.__doc__)
##
##    def LoadFromFile(self, Filename):
##        u'Loads the data graph from a .grf file.'
##        #return 
##
##    def ExportToFile(self, Filename):
##        u'Exports the data graph to a file.'
##        #return 
##
##    def Reload(self):
##        u'Reloads data values in data graph series.'
##        #return 
##
##    def DrawToDC(self, hDC, pOutputRect, pGraphRect):
##        u'Draws the data graph into the provided device context.'
##        #return 
##


# values for enumeration 'esriTopologyRenderer'
esriTRAreaErrors = 0
esriTRLineErrors = 1
esriTRPointErrors = 2
esriTRAreaExceptions = 3
esriTRLineExceptions = 4
esriTRPointExceptions = 5
esriTRDirtyAreas = 6
esriTopologyRenderer = c_int # enum
class EditResults(CoClass):
    u'EditResult array co-class.'
    _reg_clsid_ = GUID('{36DFC05D-B217-45D5-BEE6-CC54DE782C68}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
EditResults._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IEditResults, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

IGraphicsContainerProperty._methods_ = [
    COMMETHOD(['propget', helpstring(u"Element's graphics container.")], HRESULT, 'GraphicsContainer',
              ( ['retval', 'out'], POINTER(POINTER(IGraphicsContainer)), 'Container' )),
    COMMETHOD(['propputref', helpstring(u"Element's graphics container.")], HRESULT, 'GraphicsContainer',
              ( ['in'], POINTER(IGraphicsContainer), 'Container' )),
]
################################################################
## code template for IGraphicsContainerProperty implementation
##class IGraphicsContainerProperty_Impl(object):
##    def GraphicsContainer(self, Container):
##        u"Element's graphics container."
##        #return 
##

class ISeriesProperties(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control graph series.'
    _iid_ = GUID('{AE695391-D0AE-4B5E-A9E7-419E091060D2}')
    _idlflags_ = ['oleautomation']
class IDataGraphTAxisProperties(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control graph axis properties.'
    _iid_ = GUID('{6D6170E0-F35C-4F35-BC0D-D65E9DB779E9}')
    _idlflags_ = ['oleautomation']
IDataGraphT._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates whether graph handles selection in the input layer by creating series only from the selected data or highlights selected values on the graph made from entire dataset.')], HRESULT, 'HighlightSelection',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'b' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether graph handles selection in the input layer by creating series only from the selected data or highlights selected values on the graph made from entire dataset.')], HRESULT, 'HighlightSelection',
              ( ['in'], VARIANT_BOOL, 'b' )),
    COMMETHOD([helpstring(u'Add series from the provided graph type.')], HRESULT, 'AddSeries',
              ( ['in'], BSTR, 'seriesType' ),
              ( ['retval', 'out'], POINTER(POINTER(ISeriesProperties)), 'ppSeriesProps' )),
    COMMETHOD([helpstring(u'Remove series from the graph.')], HRESULT, 'RemoveSeries',
              ( ['in'], POINTER(ISeriesProperties), 'pSeriesProps' )),
    COMMETHOD(['propget', helpstring(u'The number of series in the graph.')], HRESULT, 'SeriesCount',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propget', helpstring(u'Series properties for provided series index.')], HRESULT, 'SeriesProperties',
              ( ['in'], c_int, 'iSeries' ),
              ( ['retval', 'out'], POINTER(POINTER(ISeriesProperties)), 'ppSeriesProps' )),
    COMMETHOD(['propput', helpstring(u'Position of the series in the series list of the graph.')], HRESULT, 'SeriesOrder',
              ( ['in'], POINTER(ISeriesProperties), 'pSeriesProps' ),
              ( ['in'], c_int, 'pPos' )),
    COMMETHOD(['propget', helpstring(u'Position of the series in the series list of the graph.')], HRESULT, 'SeriesOrder',
              ( ['in'], POINTER(ISeriesProperties), 'pSeriesProps' ),
              ( ['retval', 'out'], POINTER(c_int), 'pPos' )),
    COMMETHOD(['propget', helpstring(u'General properties of the graph.')], HRESULT, 'GeneralProperties',
              ( ['retval', 'out'], POINTER(POINTER(IDataGraphTGeneralProperties)), 'ppGeneralProperties' )),
    COMMETHOD(['propget', helpstring(u'Properties of graph legend.')], HRESULT, 'LegendProperties',
              ( ['retval', 'out'], POINTER(POINTER(IDataGraphTLegendProperties)), 'ppGeneralProperties' )),
    COMMETHOD(['propget', helpstring(u'Amount of axis.')], HRESULT, 'AxisCount',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propget', helpstring(u'Properties of graph axis.')], HRESULT, 'AxisProperties',
              ( ['in'], c_int, 'idx' ),
              ( ['retval', 'out'], POINTER(POINTER(IDataGraphTAxisProperties)), 'ppAxisProperties' )),
    COMMETHOD([helpstring(u'Identifies object ID for the series using graph coordinates.')], HRESULT, 'Identify',
              ( ['in'], c_int, 'iSeries' ),
              ( ['in'], c_int, 'ptX' ),
              ( ['in'], c_int, 'ptY' ),
              ( ['out'], POINTER(VARIANT), 'pOIDs' )),
    COMMETHOD([helpstring(u'Updates graph after changes in graph or series properties.')], HRESULT, 'Update',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pCancel' )),
    COMMETHOD([helpstring(u'Loads graph properties from the template file.')], HRESULT, 'LoadTemplate',
              ( ['in'], BSTR, 'file' )),
    COMMETHOD([helpstring(u'Exports the data graph to a file.')], HRESULT, 'ExportToFileEx',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], c_int, 'Width' ),
              ( ['in'], c_int, 'Height' )),
]
################################################################
## code template for IDataGraphT implementation
##class IDataGraphT_Impl(object):
##    @property
##    def AxisCount(self):
##        u'Amount of axis.'
##        #return pCount
##
##    def ExportToFileEx(self, Filename, Width, Height):
##        u'Exports the data graph to a file.'
##        #return 
##
##    @property
##    def AxisProperties(self, idx):
##        u'Properties of graph axis.'
##        #return ppAxisProperties
##
##    def AddSeries(self, seriesType):
##        u'Add series from the provided graph type.'
##        #return ppSeriesProps
##
##    def _get(self):
##        u'Indicates whether graph handles selection in the input layer by creating series only from the selected data or highlights selected values on the graph made from entire dataset.'
##        #return b
##    def _set(self, b):
##        u'Indicates whether graph handles selection in the input layer by creating series only from the selected data or highlights selected values on the graph made from entire dataset.'
##    HighlightSelection = property(_get, _set, doc = _set.__doc__)
##
##    def RemoveSeries(self, pSeriesProps):
##        u'Remove series from the graph.'
##        #return 
##
##    def Update(self, pCancel):
##        u'Updates graph after changes in graph or series properties.'
##        #return 
##
##    @property
##    def GeneralProperties(self):
##        u'General properties of the graph.'
##        #return ppGeneralProperties
##
##    def Identify(self, iSeries, ptX, ptY):
##        u'Identifies object ID for the series using graph coordinates.'
##        #return pOIDs
##
##    def LoadTemplate(self, file):
##        u'Loads graph properties from the template file.'
##        #return 
##
##    @property
##    def LegendProperties(self):
##        u'Properties of graph legend.'
##        #return ppGeneralProperties
##
##    @property
##    def SeriesProperties(self, iSeries):
##        u'Series properties for provided series index.'
##        #return ppSeriesProps
##
##    def _get(self, pSeriesProps):
##        u'Position of the series in the series list of the graph.'
##        #return pPos
##    def _set(self, pSeriesProps, pPos):
##        u'Position of the series in the series list of the graph.'
##    SeriesOrder = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SeriesCount(self):
##        u'The number of series in the graph.'
##        #return pCount
##

class HotLinkExpressionParser(CoClass):
    u'The expression parser handed out by the HotLink Expression Engines.'
    _reg_clsid_ = GUID('{41F47AF0-8D99-4AFD-8D3B-177A7A427C4B}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IAnnotationExpressionParser2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members to parse annotation expressions.'
    _iid_ = GUID('{56426AE7-A129-43D7-8EB7-2B41F507F390}')
    _idlflags_ = ['oleautomation']
HotLinkExpressionParser._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IAnnotationExpressionParser, IAnnotationExpressionParser2, ICodedValueAttributes]

class IConditionalAction(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to properties and methods needed to manage conditional actions.'
    _iid_ = GUID('{AA2E34E9-4278-4391-9E14-6C3A4DD2AE2A}')
    _idlflags_ = ['oleautomation']
IConditionalAction._methods_ = [
    COMMETHOD(['propget', helpstring(u'Type of trigger used to execute an action: Always, Location, Attribute, or Attribute and Location.')], HRESULT, 'TriggerType',
              ( ['retval', 'out'], POINTER(enumTriggerType), 'pVal' )),
    COMMETHOD(['propput', helpstring(u'Type of trigger used to execute an action: Always, Location, Attribute, or Attribute and Location.')], HRESULT, 'TriggerType',
              ( ['in'], enumTriggerType, 'pVal' )),
    COMMETHOD(['propget', helpstring(u'Spatial relationship of an intrinsic location trigger.')], HRESULT, 'LocationTriggerType',
              ( ['retval', 'out'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriSpatialRelEnum), 'pVal' )),
    COMMETHOD(['propput', helpstring(u'Spatial relationship of an intrinsic location trigger.')], HRESULT, 'LocationTriggerType',
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriSpatialRelEnum, 'pVal' )),
    COMMETHOD(['propget', helpstring(u'SQL query for an attribute trigger.')], HRESULT, 'QueryString',
              ( ['retval', 'out'], POINTER(BSTR), 'pVal' )),
    COMMETHOD(['propput', helpstring(u'SQL query for an attribute trigger.')], HRESULT, 'QueryString',
              ( ['in'], BSTR, 'pVal' )),
    COMMETHOD(['propget', helpstring(u'Layer containing location test polygons.')], HRESULT, 'TriggerLayer',
              ( ['retval', 'out'], POINTER(POINTER(ILayer)), 'pVal' )),
    COMMETHOD(['propputref', helpstring(u'Layer containing location test polygons.')], HRESULT, 'TriggerLayer',
              ( ['in'], POINTER(ILayer), 'pVal' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether or not to negate results of the location trigger.')], HRESULT, 'NegateLocationTrigger',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pVal' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether or not to negate results of the location trigger.')], HRESULT, 'NegateLocationTrigger',
              ( ['in'], VARIANT_BOOL, 'pVal' )),
    COMMETHOD(['propget', helpstring(u'Not Implemented - Use the PolygonSourceName property of IConditionalAction2.')], HRESULT, 'PolygonSource',
              ( ['retval', 'out'], POINTER(BSTR), 'pVal' )),
    COMMETHOD(['propput', helpstring(u'Not Implemented - Use the PolygonSourceName property of IConditionalAction2.')], HRESULT, 'PolygonSource',
              ( ['in'], BSTR, 'pVal' )),
    COMMETHOD(['propget', helpstring(u'The list of columns from the feature or the dataset definition.')], HRESULT, 'ColumnList',
              ( ['retval', 'out'], POINTER(VARIANT), 'pVal' )),
    COMMETHOD(['propput', helpstring(u'The list of columns from the feature or the dataset definition.')], HRESULT, 'ColumnList',
              ( ['in'], VARIANT, 'pVal' )),
    COMMETHOD(['propget', helpstring(u'Name of layer containing location test polygons.')], HRESULT, 'TriggerLayerName',
              ( ['retval', 'out'], POINTER(BSTR), 'pVal' )),
    COMMETHOD(['propput', helpstring(u'Name of the custom location trigger for the action if one is being used.')], HRESULT, 'LocationTriggerName',
              ( ['in'], BSTR, 'pVal' )),
    COMMETHOD(['propget', helpstring(u'Name of the custom location trigger for the action if one is being used.')], HRESULT, 'LocationTriggerName',
              ( ['retval', 'out'], POINTER(BSTR), 'pVal' )),
    COMMETHOD(['propput', helpstring(u'Geometry used for location trigger test.')], HRESULT, 'TestGeometry',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'ppiTestGeometry' )),
    COMMETHOD(['propget', helpstring(u'Geometry used for location trigger test.')], HRESULT, 'TestGeometry',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry)), 'ppiTestGeometry' )),
    COMMETHOD(['propput', helpstring(u'String describing the Spatial Reference used by the Action.')], HRESULT, 'SpatialReference',
              ( ['in'], BSTR, 'pVal' )),
    COMMETHOD(['propget', helpstring(u'String describing the Spatial Reference used by the Action.')], HRESULT, 'SpatialReference',
              ( ['retval', 'out'], POINTER(BSTR), 'pVal' )),
]
################################################################
## code template for IConditionalAction implementation
##class IConditionalAction_Impl(object):
##    def _get(self):
##        u'Geometry used for location trigger test.'
##        #return ppiTestGeometry
##    def _set(self, ppiTestGeometry):
##        u'Geometry used for location trigger test.'
##    TestGeometry = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Name of the custom location trigger for the action if one is being used.'
##        #return pVal
##    def _set(self, pVal):
##        u'Name of the custom location trigger for the action if one is being used.'
##    LocationTriggerName = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def TriggerLayerName(self):
##        u'Name of layer containing location test polygons.'
##        #return pVal
##
##    def _get(self):
##        u'SQL query for an attribute trigger.'
##        #return pVal
##    def _set(self, pVal):
##        u'SQL query for an attribute trigger.'
##    QueryString = property(_get, _set, doc = _set.__doc__)
##
##    def TriggerLayer(self, pVal):
##        u'Layer containing location test polygons.'
##        #return 
##
##    def _get(self):
##        u'Indicates whether or not to negate results of the location trigger.'
##        #return pVal
##    def _set(self, pVal):
##        u'Indicates whether or not to negate results of the location trigger.'
##    NegateLocationTrigger = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The list of columns from the feature or the dataset definition.'
##        #return pVal
##    def _set(self, pVal):
##        u'The list of columns from the feature or the dataset definition.'
##    ColumnList = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Not Implemented - Use the PolygonSourceName property of IConditionalAction2.'
##        #return pVal
##    def _set(self, pVal):
##        u'Not Implemented - Use the PolygonSourceName property of IConditionalAction2.'
##    PolygonSource = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Type of trigger used to execute an action: Always, Location, Attribute, or Attribute and Location.'
##        #return pVal
##    def _set(self, pVal):
##        u'Type of trigger used to execute an action: Always, Location, Attribute, or Attribute and Location.'
##    TriggerType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Spatial relationship of an intrinsic location trigger.'
##        #return pVal
##    def _set(self, pVal):
##        u'Spatial relationship of an intrinsic location trigger.'
##    LocationTriggerType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'String describing the Spatial Reference used by the Action.'
##        #return pVal
##    def _set(self, pVal):
##        u'String describing the Spatial Reference used by the Action.'
##    SpatialReference = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'esriScreenPosition'
esriScreenPositionNone = 0
esriScreenPositionTopLeft = 1
esriScreenPositionTopCenter = 2
esriScreenPositionTopRight = 3
esriScreenPositionMiddleLeft = 4
esriScreenPositionMiddleCenter = 5
esriScreenPositionMiddleRight = 6
esriScreenPositionBottomLeft = 7
esriScreenPositionBottomCenter = 8
esriScreenPositionBottomRight = 9
esriScreenPosition = c_int # enum
class SymbolBorder(CoClass):
    u'Border drawn using a symbol.'
    _reg_clsid_ = GUID('{A5D0F017-62DD-11D2-87BE-0000F8751720}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class ISymbolBorder(IBorder):
    _case_insensitive_ = True
    u'Provides access to members that control the SymbolBorder object.'
    _iid_ = GUID('{E4240308-DD41-11D2-B868-00600802E603}')
    _idlflags_ = ['oleautomation']
SymbolBorder._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IBorder, ISymbolBorder, IFrameDecoration, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, IGraphicsComposite, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize]

IEditTemplate._methods_ = [
    COMMETHOD(['propget', helpstring(u'Gets the name of the template.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'Gets the name of the template.')], HRESULT, 'Name',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'Gets the description of the template.')], HRESULT, 'Description',
              ( ['retval', 'out'], POINTER(BSTR), 'Description' )),
    COMMETHOD(['propput', helpstring(u'Gets the description of the template.')], HRESULT, 'Description',
              ( ['in'], BSTR, 'Description' )),
    COMMETHOD(['propget', helpstring(u'Gets the layer of the template.')], HRESULT, 'Layer',
              ( ['retval', 'out'], POINTER(POINTER(ILayer)), 'Layer' )),
    COMMETHOD(['propputref', helpstring(u'Gets the layer of the template.')], HRESULT, 'Layer',
              ( ['in'], POINTER(ILayer), 'Layer' )),
    COMMETHOD(['propget', helpstring(u'Gets the tool for the template.')], HRESULT, 'Tool',
              ( ['retval', 'out'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.GUID), 'Tool' )),
    COMMETHOD(['propput', helpstring(u'Gets the tool for the template.')], HRESULT, 'Tool',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.GUID, 'Tool' )),
    COMMETHOD([helpstring(u'Removes all the default values currently set.')], HRESULT, 'ClearDefaultValues'),
    COMMETHOD(['propget', helpstring(u'Gets the default value for the given field.')], HRESULT, 'DefaultValue',
              ( ['in'], BSTR, 'Field' ),
              ( ['retval', 'out'], POINTER(VARIANT), 'Value' )),
    COMMETHOD([helpstring(u'Sets the default value for the given field.  If the field is a subtype field it will use initDefaultValues.')], HRESULT, 'SetDefaultValue',
              ( ['in'], BSTR, 'Field' ),
              ( ['in'], VARIANT, 'Value' ),
              ( ['in'], VARIANT_BOOL, 'initDefaultValues' )),
    COMMETHOD([helpstring(u'Sets the default values on the given feature.')], HRESULT, 'SetDefaultValues',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeature), 'Feature' )),
    COMMETHOD(['propget', helpstring(u'Returns the number of times this template has created a feature.')], HRESULT, 'CreateCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The tags of the item.')], HRESULT, 'Tags',
              ( ['retval', 'out'], POINTER(BSTR), 'Tags' )),
    COMMETHOD(['propput', helpstring(u'The tags of the item.')], HRESULT, 'Tags',
              ( ['in'], BSTR, 'Tags' )),
]
################################################################
## code template for IEditTemplate implementation
##class IEditTemplate_Impl(object):
##    def Layer(self, Layer):
##        u'Gets the layer of the template.'
##        #return 
##
##    def _get(self):
##        u'Gets the name of the template.'
##        #return Name
##    def _set(self, Name):
##        u'Gets the name of the template.'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The tags of the item.'
##        #return Tags
##    def _set(self, Tags):
##        u'The tags of the item.'
##    Tags = property(_get, _set, doc = _set.__doc__)
##
##    def SetDefaultValue(self, Field, Value, initDefaultValues):
##        u'Sets the default value for the given field.  If the field is a subtype field it will use initDefaultValues.'
##        #return 
##
##    @property
##    def DefaultValue(self, Field):
##        u'Gets the default value for the given field.'
##        #return Value
##
##    @property
##    def CreateCount(self):
##        u'Returns the number of times this template has created a feature.'
##        #return Count
##
##    def SetDefaultValues(self, Feature):
##        u'Sets the default values on the given feature.'
##        #return 
##
##    def ClearDefaultValues(self):
##        u'Removes all the default values currently set.'
##        #return 
##
##    def _get(self):
##        u'Gets the tool for the template.'
##        #return Tool
##    def _set(self, Tool):
##        u'Gets the tool for the template.'
##    Tool = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Gets the description of the template.'
##        #return Description
##    def _set(self, Description):
##        u'Gets the description of the template.'
##    Description = property(_get, _set, doc = _set.__doc__)
##

class IChangeDatabaseVersion(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Change Database Version operation.'
    _iid_ = GUID('{B4B4BD38-36CA-47BE-921E-B72AF9761AE9}')
    _idlflags_ = ['oleautomation']
IChangeDatabaseVersion._methods_ = [
    COMMETHOD([helpstring(u'Replaces the version of the feature classes for all the layers that belong to the From version to To version.')], HRESULT, 'Execute',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IVersion), 'pFrom' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IVersion), 'pTo' ),
              ( ['in'], POINTER(IBasicMap), 'pMap' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISet)), 'ppChangedTables' )),
]
################################################################
## code template for IChangeDatabaseVersion implementation
##class IChangeDatabaseVersion_Impl(object):
##    def Execute(self, pFrom, pTo, pMap):
##        u'Replaces the version of the feature classes for all the layers that belong to the From version to To version.'
##        #return ppChangedTables
##

class IIMSGlobeSubServiceDescription(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to SubServices -- or in otherword, layers.'
    _iid_ = GUID('{137E5790-5D7A-4E16-B241-734F40D830AF}')
    _idlflags_ = ['oleautomation']
IIMSGlobeSubServiceDescription._methods_ = [
    COMMETHOD(['propput', helpstring(u'The name of the parent.')], HRESULT, 'ParentName',
              ( ['in'], BSTR, 'Parent' )),
    COMMETHOD(['propget', helpstring(u'The name of the parent.')], HRESULT, 'ParentName',
              ( ['retval', 'out'], POINTER(BSTR), 'Parent' )),
    COMMETHOD(['propput', helpstring(u'The type of the layer.')], HRESULT, 'Type',
              ( ['in'], BSTR, 'Type' )),
    COMMETHOD(['propget', helpstring(u'The type of the layer.')], HRESULT, 'Type',
              ( ['retval', 'out'], POINTER(BSTR), 'Type' )),
]
################################################################
## code template for IIMSGlobeSubServiceDescription implementation
##class IIMSGlobeSubServiceDescription_Impl(object):
##    def _get(self):
##        u'The name of the parent.'
##        #return Parent
##    def _set(self, Parent):
##        u'The name of the parent.'
##    ParentName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The type of the layer.'
##        #return Type
##    def _set(self, Type):
##        u'The type of the layer.'
##    Type = property(_get, _set, doc = _set.__doc__)
##

class SymbolShadow(CoClass):
    u'Shadow drawn using a symbol.'
    _reg_clsid_ = GUID('{A8861E66-57AA-47D0-AAF8-B288B4FD5240}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
SymbolShadow._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IShadow, ISymbolShadow, IFrameDecoration, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, IGraphicsComposite, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize]

IDisplayTable._methods_ = [
    COMMETHOD(['propget', helpstring(u'The display table.')], HRESULT, 'DisplayTable',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable)), 'ppDisplayTable' )),
    COMMETHOD([helpstring(u'Creates a cursor from the display table based upon the search criteria.')], HRESULT, 'SearchDisplayTable',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'pQueryFilter' ),
              ( ['in'], VARIANT_BOOL, 'recycling' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ICursor)), 'ppCursor' )),
    COMMETHOD([helpstring(u'Creates a selection set from the display table based upon the search criteria.')], HRESULT, 'SelectDisplayTable',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'pQueryFilter' ),
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriSelectionType, 'selType' ),
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriSelectionOption, 'selOption' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspace), 'pSelWorkspace' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ISelectionSet)), 'ppSelset' )),
    COMMETHOD(['propget', helpstring(u'The selected set of rows from the display table.')], HRESULT, 'DisplaySelectionSet',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ISelectionSet)), 'SelectionSet' )),
]
################################################################
## code template for IDisplayTable implementation
##class IDisplayTable_Impl(object):
##    def SearchDisplayTable(self, pQueryFilter, recycling):
##        u'Creates a cursor from the display table based upon the search criteria.'
##        #return ppCursor
##
##    @property
##    def DisplayTable(self):
##        u'The display table.'
##        #return ppDisplayTable
##
##    @property
##    def DisplaySelectionSet(self):
##        u'The selected set of rows from the display table.'
##        #return SelectionSet
##
##    def SelectDisplayTable(self, pQueryFilter, selType, selOption, pSelWorkspace):
##        u'Creates a selection set from the display table based upon the search criteria.'
##        #return ppSelset
##

IGlobeRasterStretch._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates whether it is a ArcGlobe layer renderer.')], HRESULT, 'IsGlobeLayerRenderer',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether it is a ArcGlobe layer renderer.')], HRESULT, 'IsGlobeLayerRenderer',
              ( ['in'], VARIANT_BOOL, 'flag' )),
]
################################################################
## code template for IGlobeRasterStretch implementation
##class IGlobeRasterStretch_Impl(object):
##    def _get(self):
##        u'Indicates whether it is a ArcGlobe layer renderer.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether it is a ArcGlobe layer renderer.'
##    IsGlobeLayerRenderer = property(_get, _set, doc = _set.__doc__)
##

class IMapNavigator(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the map navigator controller.'
    _iid_ = GUID('{899D8F10-C69F-4796-819A-F7B578C08DA7}')
    _idlflags_ = []
IMapNavigator._methods_ = [
    COMMETHOD(['propget', helpstring(u'Determine whether the navigator is visible.')], HRESULT, 'NavigatorVisible',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Visible' )),
    COMMETHOD(['propput', helpstring(u'Determine whether the navigator is visible.')], HRESULT, 'NavigatorVisible',
              ( ['in'], VARIANT_BOOL, 'Visible' )),
    COMMETHOD(['propget', helpstring(u'Indicates where the navigator is placed in the map display.')], HRESULT, 'NavigatorPlacement',
              ( ['retval', 'out'], POINTER(esriScreenPosition), 'Placement' )),
    COMMETHOD(['propput', helpstring(u'Indicates where the navigator is placed in the map display.')], HRESULT, 'NavigatorPlacement',
              ( ['in'], esriScreenPosition, 'Placement' )),
]
################################################################
## code template for IMapNavigator implementation
##class IMapNavigator_Impl(object):
##    def _get(self):
##        u'Indicates where the navigator is placed in the map display.'
##        #return Placement
##    def _set(self, Placement):
##        u'Indicates where the navigator is placed in the map display.'
##    NavigatorPlacement = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Determine whether the navigator is visible.'
##        #return Visible
##    def _set(self, Visible):
##        u'Determine whether the navigator is visible.'
##    NavigatorVisible = property(_get, _set, doc = _set.__doc__)
##

class ServiceData(CoClass):
    u'Service Data'
    _reg_clsid_ = GUID('{8AB29454-FF3E-47C3-AE77-6C0DD31FD853}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
ServiceData._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IServiceData, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

IGroupElement._methods_ = [
    COMMETHOD(['propget', helpstring(u'Elements in the group.')], HRESULT, 'Elements',
              ( ['retval', 'out'], POINTER(POINTER(IEnumElement)), 'Elements' )),
    COMMETHOD(['propputref', helpstring(u'Elements in the group.')], HRESULT, 'Elements',
              ( ['in'], POINTER(IEnumElement), 'Elements' )),
    COMMETHOD(['propget', helpstring(u'Number of elements in the group.')], HRESULT, 'ElementCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'Element at the given index of the group.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IElement)), 'Element' )),
    COMMETHOD([helpstring(u'Adds the given element to the group.')], HRESULT, 'AddElement',
              ( ['in'], POINTER(IElement), 'Element' )),
    COMMETHOD([helpstring(u'Removes the given element from the group.')], HRESULT, 'DeleteElement',
              ( ['in'], POINTER(IElement), 'Element' )),
    COMMETHOD([helpstring(u'Removes all elements from the group.')], HRESULT, 'ClearElements'),
]
################################################################
## code template for IGroupElement implementation
##class IGroupElement_Impl(object):
##    def ClearElements(self):
##        u'Removes all elements from the group.'
##        #return 
##
##    def Elements(self, Elements):
##        u'Elements in the group.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'Element at the given index of the group.'
##        #return Element
##
##    @property
##    def ElementCount(self):
##        u'Number of elements in the group.'
##        #return Count
##
##    def DeleteElement(self, Element):
##        u'Removes the given element from the group.'
##        #return 
##
##    def AddElement(self, Element):
##        u'Adds the given element to the group.'
##        #return 
##

class AnnotationFeature(CoClass):
    u'An Esri annotation feature.'
    _reg_clsid_ = GUID('{E3676993-C682-11D2-8A2A-006097AFF44E}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
AnnotationFeature._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRow, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRowBuffer, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRowEvents, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRowSubtypes, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeature, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureBuffer, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureEvents, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IValidate, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureDraw, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureEdit, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureEdit2, IAnnotationFeature, IAnnotationFeature2, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureChanges, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureSimplify, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureSimplify2, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureProject, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRelatedObjectEvents, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRowChanges, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRowCompare, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IConnectionPointContainer]

class DataObjectGroups(CoClass):
    u'DataObjectGroups'
    _reg_clsid_ = GUID('{D3395657-A678-4037-98C7-0EFE9E8B517C}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IDataObjectGroups(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'DataObjectGroups'
    _iid_ = GUID('{5A48028A-D702-47D7-B51B-8C48B9D8192D}')
    _idlflags_ = ['oleautomation']
DataObjectGroups._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDataObjectGroups, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class DataObjectGroupArray(CoClass):
    u'DataObjectGroup Array'
    _reg_clsid_ = GUID('{3DDB0FC2-C96F-4518-8DCB-80B2213780B9}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IDataObjectGroupArray(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'DataObjectGroupArray'
    _iid_ = GUID('{1DDC825C-DD29-48C0-AA1B-68AADBCEAF8A}')
    _idlflags_ = ['oleautomation']
DataObjectGroupArray._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDataObjectGroupArray, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

IColumnProperties._methods_ = [
    COMMETHOD(['propget', helpstring(u'Number of columns.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propput', helpstring(u'Number of columns.')], HRESULT, 'Count',
              ( ['in'], c_int, 'Count' )),
    COMMETHOD(['propget', helpstring(u'Gap between columns in points.')], HRESULT, 'Gap',
              ( ['retval', 'out'], POINTER(c_double), 'Gap' )),
    COMMETHOD(['propput', helpstring(u'Gap between columns in points.')], HRESULT, 'Gap',
              ( ['in'], c_double, 'Gap' )),
]
################################################################
## code template for IColumnProperties implementation
##class IColumnProperties_Impl(object):
##    def _get(self):
##        u'Number of columns.'
##        #return Count
##    def _set(self, Count):
##        u'Number of columns.'
##    Count = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Gap between columns in points.'
##        #return Gap
##    def _set(self, Gap):
##        u'Gap between columns in points.'
##    Gap = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'esriGraphColorType'
esriGraphColorMatch = 1
esriGraphColorPalette = 2
esriGraphColorCustomAll = 4
esriGraphColorCustomEach = 8
esriGraphColorType = c_int # enum
ISeriesProperties._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if series has changed.')], HRESULT, 'IsChanged',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'b' )),
    COMMETHOD(['propget', helpstring(u'Indicates if series is ready to work with.')], HRESULT, 'IsReady',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'b' )),
    COMMETHOD(['propget', helpstring(u'Name of the series shown in the legend.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'Name of the series shown in the legend.')], HRESULT, 'Name',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'Default and unique name of the series.')], HRESULT, 'UniqueName',
              ( ['retval', 'out'], POINTER(BSTR), 'uname' )),
    COMMETHOD(['propget', helpstring(u'Type of the series.')], HRESULT, 'Type',
              ( ['retval', 'out'], POINTER(BSTR), 'TypeName' )),
    COMMETHOD(['propput', helpstring(u'Data source for the series. Can be table, feature, raster layer, or name of another series for function series.')], HRESULT, 'SourceData',
              ( ['in'], VARIANT, 'pVar' )),
    COMMETHOD(['propget', helpstring(u'Data source for the series. Can be table, feature, raster layer, or name of another series for function series.')], HRESULT, 'SourceData',
              ( ['retval', 'out'], POINTER(VARIANT), 'pVar' )),
    COMMETHOD(['propget', helpstring(u'The where clause for querying data source.')], HRESULT, 'WhereClause',
              ( ['retval', 'out'], POINTER(BSTR), 'definition' )),
    COMMETHOD(['propput', helpstring(u'The where clause for querying data source.')], HRESULT, 'WhereClause',
              ( ['in'], BSTR, 'definition' )),
    COMMETHOD(['propget', helpstring(u'Provides field to be the data source of labels in the graph. Only the field from the first series will be used in the graph if there are more than one series.')], HRESULT, 'LabelField',
              ( ['retval', 'out'], POINTER(BSTR), 'pFieldName' )),
    COMMETHOD(['propput', helpstring(u'Provides field to be the data source of labels in the graph. Only the field from the first series will be used in the graph if there are more than one series.')], HRESULT, 'LabelField',
              ( ['in'], BSTR, 'pFieldName' )),
    COMMETHOD(['propget', helpstring(u'Maximum possible fields for the series.')], HRESULT, 'MaxField',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD([helpstring(u'Sets data field name in the series. Can be multiple and optional depending on series type.')], HRESULT, 'SetField',
              ( ['in'], c_int, 'idx' ),
              ( ['in'], BSTR, 'FieldName' )),
    COMMETHOD([helpstring(u'Gets data field name in the series. Can be multiple and optional depending on series type.')], HRESULT, 'GetField',
              ( ['in'], c_int, 'idx' ),
              ( ['retval', 'out'], POINTER(BSTR), 'FieldName' )),
    COMMETHOD(['propget', helpstring(u'Indicates if data field is optional.')], HRESULT, 'FieldOptional',
              ( ['in'], c_int, 'idx' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'bOptional' )),
    COMMETHOD(['propget', helpstring(u'Type of color applied to the graph series.')], HRESULT, 'ColorType',
              ( ['retval', 'out'], POINTER(esriGraphColorType), 'eColorType' )),
    COMMETHOD(['propput', helpstring(u'Type of color applied to the graph series.')], HRESULT, 'ColorType',
              ( ['in'], esriGraphColorType, 'eColorType' )),
    COMMETHOD(['propget', helpstring(u'Color used when ColorType of series property is esriGraphColorCustomAll.')], HRESULT, 'CustomColor',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_COLOR), 'pColor' )),
    COMMETHOD(['propput', helpstring(u'Color used when ColorType of series property is esriGraphColorCustomAll.')], HRESULT, 'CustomColor',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_COLOR, 'pColor' )),
    COMMETHOD(['propget', helpstring(u'Color used when ColorType of series property is esriGraphColorCustomEach.')], HRESULT, 'Color',
              ( ['in'], c_int, 'OID' ),
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_COLOR), 'pColor' )),
    COMMETHOD(['propput', helpstring(u'Color used when ColorType of series property is esriGraphColorCustomEach.')], HRESULT, 'Color',
              ( ['in'], c_int, 'OID' ),
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_COLOR, 'pColor' )),
    COMMETHOD(['propget', helpstring(u'Palette used when ColorType of series property is esriGraphColorPalette.')], HRESULT, 'ColorPalette',
              ( ['retval', 'out'], POINTER(BSTR), 'PaletteName' )),
    COMMETHOD(['propput', helpstring(u'Palette used when ColorType of series property is esriGraphColorPalette.')], HRESULT, 'ColorPalette',
              ( ['in'], BSTR, 'PaletteName' )),
    COMMETHOD(['propget', helpstring(u'Indicates if series is added to the graph legend.')], HRESULT, 'InLegend',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'b' )),
    COMMETHOD(['propput', helpstring(u'Indicates if series is added to the graph legend.')], HRESULT, 'InLegend',
              ( ['in'], VARIANT_BOOL, 'b' )),
    COMMETHOD(['propget', helpstring(u'Indicates if series shows marks.')], HRESULT, 'Marks',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'b' )),
    COMMETHOD(['propput', helpstring(u'Indicates if series shows marks.')], HRESULT, 'Marks',
              ( ['in'], VARIANT_BOOL, 'b' )),
    COMMETHOD(['propget', helpstring(u'Interface for drawing lines and borders in the series.')], HRESULT, 'PenProperties',
              ( ['retval', 'out'], POINTER(POINTER(IDataGraphTPenProperties)), 'ppPenProps' )),
    COMMETHOD(['propget', helpstring(u'Format string for series value labels.')], HRESULT, 'ValueFormat',
              ( ['retval', 'out'], POINTER(BSTR), 'Format' )),
    COMMETHOD(['propput', helpstring(u'Format string for series value labels.')], HRESULT, 'ValueFormat',
              ( ['in'], BSTR, 'Format' )),
    COMMETHOD(['propget', helpstring(u'Index of horizontal axis.')], HRESULT, 'HorizontalAxis',
              ( ['retval', 'out'], POINTER(c_int), 'pIdx' )),
    COMMETHOD(['propput', helpstring(u'Index of horizontal axis.')], HRESULT, 'HorizontalAxis',
              ( ['in'], c_int, 'pIdx' )),
    COMMETHOD(['propget', helpstring(u'Index of vertical axis')], HRESULT, 'VerticalAxis',
              ( ['retval', 'out'], POINTER(c_int), 'pIdx' )),
    COMMETHOD(['propput', helpstring(u'Index of vertical axis')], HRESULT, 'VerticalAxis',
              ( ['in'], c_int, 'pIdx' )),
]
################################################################
## code template for ISeriesProperties implementation
##class ISeriesProperties_Impl(object):
##    def _get(self):
##        u'Format string for series value labels.'
##        #return Format
##    def _set(self, Format):
##        u'Format string for series value labels.'
##    ValueFormat = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def PenProperties(self):
##        u'Interface for drawing lines and borders in the series.'
##        #return ppPenProps
##
##    def _get(self):
##        u'Palette used when ColorType of series property is esriGraphColorPalette.'
##        #return PaletteName
##    def _set(self, PaletteName):
##        u'Palette used when ColorType of series property is esriGraphColorPalette.'
##    ColorPalette = property(_get, _set, doc = _set.__doc__)
##
##    def GetField(self, idx):
##        u'Gets data field name in the series. Can be multiple and optional depending on series type.'
##        #return FieldName
##
##    @property
##    def IsChanged(self):
##        u'Indicates if series has changed.'
##        #return b
##
##    def _get(self):
##        u'Provides field to be the data source of labels in the graph. Only the field from the first series will be used in the graph if there are more than one series.'
##        #return pFieldName
##    def _set(self, pFieldName):
##        u'Provides field to be the data source of labels in the graph. Only the field from the first series will be used in the graph if there are more than one series.'
##    LabelField = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Color used when ColorType of series property is esriGraphColorCustomAll.'
##        #return pColor
##    def _set(self, pColor):
##        u'Color used when ColorType of series property is esriGraphColorCustomAll.'
##    CustomColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if series shows marks.'
##        #return b
##    def _set(self, b):
##        u'Indicates if series shows marks.'
##    Marks = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Index of vertical axis'
##        #return pIdx
##    def _set(self, pIdx):
##        u'Index of vertical axis'
##    VerticalAxis = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Type(self):
##        u'Type of the series.'
##        #return TypeName
##
##    def _get(self):
##        u'Data source for the series. Can be table, feature, raster layer, or name of another series for function series.'
##        #return pVar
##    def _set(self, pVar):
##        u'Data source for the series. Can be table, feature, raster layer, or name of another series for function series.'
##    SourceData = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def IsReady(self):
##        u'Indicates if series is ready to work with.'
##        #return b
##
##    def _get(self):
##        u'Index of horizontal axis.'
##        #return pIdx
##    def _set(self, pIdx):
##        u'Index of horizontal axis.'
##    HorizontalAxis = property(_get, _set, doc = _set.__doc__)
##
##    def SetField(self, idx, FieldName):
##        u'Sets data field name in the series. Can be multiple and optional depending on series type.'
##        #return 
##
##    def _get(self):
##        u'Name of the series shown in the legend.'
##        #return Name
##    def _set(self, Name):
##        u'Name of the series shown in the legend.'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if series is added to the graph legend.'
##        #return b
##    def _set(self, b):
##        u'Indicates if series is added to the graph legend.'
##    InLegend = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def MaxField(self):
##        u'Maximum possible fields for the series.'
##        #return Count
##
##    def _get(self, OID):
##        u'Color used when ColorType of series property is esriGraphColorCustomEach.'
##        #return pColor
##    def _set(self, OID, pColor):
##        u'Color used when ColorType of series property is esriGraphColorCustomEach.'
##    Color = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The where clause for querying data source.'
##        #return definition
##    def _set(self, definition):
##        u'The where clause for querying data source.'
##    WhereClause = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def UniqueName(self):
##        u'Default and unique name of the series.'
##        #return uname
##
##    def _get(self):
##        u'Type of color applied to the graph series.'
##        #return eColorType
##    def _set(self, eColorType):
##        u'Type of color applied to the graph series.'
##    ColorType = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def FieldOptional(self, idx):
##        u'Indicates if data field is optional.'
##        #return bOptional
##

class IDocumentPreview(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the Document Preview.'
    _iid_ = GUID('{EFE86EFF-4C92-47B8-AF1B-2D7DED932E24}')
    _idlflags_ = ['oleautomation']
IDocumentPreview._methods_ = [
    COMMETHOD([helpstring(u'Creates a thumbnail preview of the document.')], HRESULT, 'CreatePreview'),
    COMMETHOD([helpstring(u'Deletes the thumbnail preview of the document.')], HRESULT, 'DeletePreview'),
    COMMETHOD(['propget', helpstring(u'Indicates the presence of a thumbnail preview in the document.')], HRESULT, 'HasPreviewSaved',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'HasPreviewSaved' )),
    COMMETHOD(['propget', helpstring(u'Indicates the presence of a thumbnail preview to be saved with the document.')], HRESULT, 'HasPreviewToSave',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'HasPreviewToSave' )),
]
################################################################
## code template for IDocumentPreview implementation
##class IDocumentPreview_Impl(object):
##    @property
##    def HasPreviewToSave(self):
##        u'Indicates the presence of a thumbnail preview to be saved with the document.'
##        #return HasPreviewToSave
##
##    @property
##    def HasPreviewSaved(self):
##        u'Indicates the presence of a thumbnail preview in the document.'
##        #return HasPreviewSaved
##
##    def DeletePreview(self):
##        u'Deletes the thumbnail preview of the document.'
##        #return 
##
##    def CreatePreview(self):
##        u'Creates a thumbnail preview of the document.'
##        #return 
##

class IBarSeriesProperties(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control bar graph series.'
    _iid_ = GUID('{F888D1FD-E470-4534-9BD6-F00282E0AB15}')
    _idlflags_ = ['oleautomation']
IBarSeriesProperties._methods_ = [
    COMMETHOD(['propget', helpstring(u'Style of bars in the bar graph.')], HRESULT, 'BarStyle',
              ( ['retval', 'out'], POINTER(esriBarStyle), 'Style' )),
    COMMETHOD(['propput', helpstring(u'Style of bars in the bar graph.')], HRESULT, 'BarStyle',
              ( ['in'], esriBarStyle, 'Style' )),
    COMMETHOD(['propget', helpstring(u'Type of multiple bar-series graph.')], HRESULT, 'MultipleBarType',
              ( ['retval', 'out'], POINTER(esriMultiBarType), 'Type' )),
    COMMETHOD(['propput', helpstring(u'Type of multiple bar-series graph.')], HRESULT, 'MultipleBarType',
              ( ['in'], esriMultiBarType, 'Type' )),
    COMMETHOD(['propget', helpstring(u'Relative width of the bar.')], HRESULT, 'BarSize',
              ( ['retval', 'out'], POINTER(c_int), 'percent' )),
    COMMETHOD(['propput', helpstring(u'Relative width of the bar.')], HRESULT, 'BarSize',
              ( ['in'], c_int, 'percent' )),
]
################################################################
## code template for IBarSeriesProperties implementation
##class IBarSeriesProperties_Impl(object):
##    def _get(self):
##        u'Style of bars in the bar graph.'
##        #return Style
##    def _set(self, Style):
##        u'Style of bars in the bar graph.'
##    BarStyle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Relative width of the bar.'
##        #return percent
##    def _set(self, percent):
##        u'Relative width of the bar.'
##    BarSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Type of multiple bar-series graph.'
##        #return Type
##    def _set(self, Type):
##        u'Type of multiple bar-series graph.'
##    MultipleBarType = property(_get, _set, doc = _set.__doc__)
##

class IDirectData(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to enable direct access to data.'
    _iid_ = GUID('{1C6BA521-2F59-11D5-B7E2-00010265ADC5}')
    _idlflags_ = ['oleautomation', 'restricted']
IDirectData._methods_ = [
    COMMETHOD([helpstring(u"Write the object's properties to a stream.")], HRESULT, 'WriteProperties',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStream), 'piStream' )),
    COMMETHOD([helpstring(u"Load an object's properties from a stream.")], HRESULT, 'ReadProperties',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStream), 'piStream' )),
    COMMETHOD([helpstring(u'All temporal messages enter the temporal feature class environment via this method. It performs validity checks, exclusions, data store purges, pre- and post- actions, and database insertion.')], HRESULT, 'PostMessage',
              ( ['in'], POINTER(comtypes.gen._7BA654FE_F55E_4EE5_8CF2_FAEFFBC04A61_0_10_2.IDataMessage), 'piMsg' )),
    COMMETHOD(['propget', helpstring(u'The action processor that will evaluate the data messages before they are stored. This permits filtering or ignoring messages that the action indicates.')], HRESULT, 'PreActionProcessor',
              ( ['retval', 'out'], POINTER(POINTER(IActionProcessor)), 'ppiProcessor' )),
    COMMETHOD(['propputref', helpstring(u'The action processor that will evaluate the data messages before they are stored. This permits filtering or ignoring messages that the action indicates.')], HRESULT, 'PreActionProcessor',
              ( ['in'], POINTER(IActionProcessor), 'ppiProcessor' )),
    COMMETHOD(['propget', helpstring(u'Collection of actions that will be evaluated before data messages are placed in feature class storage.')], HRESULT, 'PreActions',
              ( ['retval', 'out'], POINTER(POINTER(IActionCollection)), 'ppiActions' )),
    COMMETHOD(['propputref', helpstring(u'Collection of actions that will be evaluated before data messages are placed in feature class storage.')], HRESULT, 'PreActions',
              ( ['in'], POINTER(IActionCollection), 'ppiActions' )),
]
################################################################
## code template for IDirectData implementation
##class IDirectData_Impl(object):
##    def PostMessage(self, piMsg):
##        u'All temporal messages enter the temporal feature class environment via this method. It performs validity checks, exclusions, data store purges, pre- and post- actions, and database insertion.'
##        #return 
##
##    def PreActions(self, ppiActions):
##        u'Collection of actions that will be evaluated before data messages are placed in feature class storage.'
##        #return 
##
##    def PreActionProcessor(self, ppiProcessor):
##        u'The action processor that will evaluate the data messages before they are stored. This permits filtering or ignoring messages that the action indicates.'
##        #return 
##
##    def WriteProperties(self, piStream):
##        u"Write the object's properties to a stream."
##        #return 
##
##    def ReadProperties(self, piStream):
##        u"Load an object's properties from a stream."
##        #return 
##

class TableEdits(CoClass):
    u'TableEdits'
    _reg_clsid_ = GUID('{9803BC24-4040-4075-ADBD-9CEEC7DAD448}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
TableEdits._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ITableEdits, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

ICompositeLayer2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Number of layers in the collection.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'LayerCount' )),
    COMMETHOD(['propget', helpstring(u'Layer in the collection at the specified index.')], HRESULT, 'Layer',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(ILayer)), 'Layer' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer is expanded in the TOC.')], HRESULT, 'Expanded',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Expanded' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the layer is expanded in the TOC.')], HRESULT, 'Expanded',
              ( ['in'], VARIANT_BOOL, 'Expanded' )),
]
################################################################
## code template for ICompositeLayer2 implementation
##class ICompositeLayer2_Impl(object):
##    @property
##    def Count(self):
##        u'Number of layers in the collection.'
##        #return LayerCount
##
##    @property
##    def Layer(self, Index):
##        u'Layer in the collection at the specified index.'
##        #return Layer
##
##    def _get(self):
##        u'Indicates if the layer is expanded in the TOC.'
##        #return Expanded
##    def _set(self, Expanded):
##        u'Indicates if the layer is expanded in the TOC.'
##    Expanded = property(_get, _set, doc = _set.__doc__)
##

IDataLayer2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Name of the data object for the layer.')], HRESULT, 'DataSourceName',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName)), 'Name' )),
    COMMETHOD(['propput', helpstring(u'Name of the data object for the layer.')], HRESULT, 'DataSourceName',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName), 'Name' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the specified data object name is supported by the layer.')], HRESULT, 'DataSourceSupported',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName), 'Name' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'supported' )),
    COMMETHOD([helpstring(u'Connects the layer to its data source.  An optional name object can be specified to aid in repairing a lost connection.')], HRESULT, 'Connect',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName), 'pOptRepairName' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Succeeded' )),
    COMMETHOD(['propget', helpstring(u'Base path used when storing relative path names.')], HRESULT, 'RelativeBase',
              ( ['retval', 'out'], POINTER(BSTR), 'basePath' )),
    COMMETHOD(['propput', helpstring(u'Base path used when storing relative path names.')], HRESULT, 'RelativeBase',
              ( ['in'], BSTR, 'basePath' )),
    COMMETHOD([helpstring(u'Disconnects the data from the layer.')], HRESULT, 'Disconnect'),
    COMMETHOD([helpstring(u'Returns TRUE if the layer is in the specified workspace.')], HRESULT, 'InWorkspace',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspace), 'Workspace' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'InWorkspace' )),
]
################################################################
## code template for IDataLayer2 implementation
##class IDataLayer2_Impl(object):
##    def _get(self):
##        u'Base path used when storing relative path names.'
##        #return basePath
##    def _set(self, basePath):
##        u'Base path used when storing relative path names.'
##    RelativeBase = property(_get, _set, doc = _set.__doc__)
##
##    def Disconnect(self):
##        u'Disconnects the data from the layer.'
##        #return 
##
##    @property
##    def DataSourceSupported(self, Name):
##        u'Indicates if the specified data object name is supported by the layer.'
##        #return supported
##
##    def Connect(self, pOptRepairName):
##        u'Connects the layer to its data source.  An optional name object can be specified to aid in repairing a lost connection.'
##        #return Succeeded
##
##    def InWorkspace(self, Workspace):
##        u'Returns TRUE if the layer is in the specified workspace.'
##        #return InWorkspace
##
##    def _get(self):
##        u'Name of the data object for the layer.'
##        #return Name
##    def _set(self, Name):
##        u'Name of the data object for the layer.'
##    DataSourceName = property(_get, _set, doc = _set.__doc__)
##

class QueryResultOptions(CoClass):
    u'Query Result Options CoClass.'
    _reg_clsid_ = GUID('{D1029770-4FA7-4799-BFD5-6B00EA89B370}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
QueryResultOptions._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IQueryResultOptions, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersionSupportGEN]

class TableEdit(CoClass):
    u'TableEdit'
    _reg_clsid_ = GUID('{B6E62061-7447-4CD3-9A8C-524609BD8F2F}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
TableEdit._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ITableEdit, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class IPrincipalDigitsGridLabel(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the properties of grid labels that display numbers with principal digits.'
    _iid_ = GUID('{560A800D-2467-4E71-9AC1-D8C399F22AD1}')
    _idlflags_ = ['oleautomation']
IPrincipalDigitsGridLabel._methods_ = [
    COMMETHOD(['propget', helpstring(u'The font for the small label.')], HRESULT, 'SmallLabelFont',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IFontDisp)), 'Font' )),
    COMMETHOD(['propput', helpstring(u'The font for the small label.')], HRESULT, 'SmallLabelFont',
              ( ['in'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IFontDisp), 'Font' )),
    COMMETHOD(['propget', helpstring(u'The font size for the small label.')], HRESULT, 'SmallLabelSize',
              ( ['retval', 'out'], POINTER(c_double), 'Size' )),
    COMMETHOD(['propput', helpstring(u'The font size for the small label.')], HRESULT, 'SmallLabelSize',
              ( ['in'], c_double, 'Size' )),
    COMMETHOD(['propget', helpstring(u'The color of the small label.')], HRESULT, 'SmallLabelColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'The color of the small label.')], HRESULT, 'SmallLabelColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'The number of principal digits for the label.')], HRESULT, 'PrincipalDigitCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propput', helpstring(u'The number of principal digits for the label.')], HRESULT, 'PrincipalDigitCount',
              ( ['in'], c_int, 'Count' )),
    COMMETHOD(['propget', helpstring(u'The number of base digits for the label.')], HRESULT, 'BaseDigitCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propput', helpstring(u'The number of base digits for the label.')], HRESULT, 'BaseDigitCount',
              ( ['in'], c_int, 'Count' )),
    COMMETHOD(['propget', helpstring(u'The string used to indicate the units.')], HRESULT, 'UnitSuffix',
              ( ['retval', 'out'], POINTER(BSTR), 'str' )),
    COMMETHOD(['propput', helpstring(u'The string used to indicate the units.')], HRESULT, 'UnitSuffix',
              ( ['in'], BSTR, 'str' )),
    COMMETHOD(['propget', helpstring(u'The string used to indicate the Easting.')], HRESULT, 'EastingSuffix',
              ( ['retval', 'out'], POINTER(BSTR), 'str' )),
    COMMETHOD(['propput', helpstring(u'The string used to indicate the Easting.')], HRESULT, 'EastingSuffix',
              ( ['in'], BSTR, 'str' )),
    COMMETHOD(['propget', helpstring(u'The string used to indicate the Northing.')], HRESULT, 'NorthingSuffix',
              ( ['retval', 'out'], POINTER(BSTR), 'str' )),
    COMMETHOD(['propput', helpstring(u'The string used to indicate the Northing.')], HRESULT, 'NorthingSuffix',
              ( ['in'], BSTR, 'str' )),
]
################################################################
## code template for IPrincipalDigitsGridLabel implementation
##class IPrincipalDigitsGridLabel_Impl(object):
##    def _get(self):
##        u'The number of principal digits for the label.'
##        #return Count
##    def _set(self, Count):
##        u'The number of principal digits for the label.'
##    PrincipalDigitCount = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The string used to indicate the units.'
##        #return str
##    def _set(self, str):
##        u'The string used to indicate the units.'
##    UnitSuffix = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The font for the small label.'
##        #return Font
##    def _set(self, Font):
##        u'The font for the small label.'
##    SmallLabelFont = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The color of the small label.'
##        #return Color
##    def _set(self, Color):
##        u'The color of the small label.'
##    SmallLabelColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The number of base digits for the label.'
##        #return Count
##    def _set(self, Count):
##        u'The number of base digits for the label.'
##    BaseDigitCount = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The string used to indicate the Northing.'
##        #return str
##    def _set(self, str):
##        u'The string used to indicate the Northing.'
##    NorthingSuffix = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The font size for the small label.'
##        #return Size
##    def _set(self, Size):
##        u'The font size for the small label.'
##    SmallLabelSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The string used to indicate the Easting.'
##        #return str
##    def _set(self, str):
##        u'The string used to indicate the Easting.'
##    EastingSuffix = property(_get, _set, doc = _set.__doc__)
##

class IDocumentInfo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the Document Info.'
    _iid_ = GUID('{D3E5C54E-2A84-11D4-9FF2-00C04F6BC78E}')
    _idlflags_ = ['oleautomation']
IDocumentInfo._methods_ = [
    COMMETHOD(['propget', helpstring(u'The title of the document.')], HRESULT, 'DocumentTitle',
              ( ['retval', 'out'], POINTER(BSTR), 'Title' )),
    COMMETHOD(['propput', helpstring(u'The title of the document.')], HRESULT, 'DocumentTitle',
              ( ['in'], BSTR, 'Title' )),
    COMMETHOD(['propget', helpstring(u'The subject of the document.')], HRESULT, 'Subject',
              ( ['retval', 'out'], POINTER(BSTR), 'Subject' )),
    COMMETHOD(['propput', helpstring(u'The subject of the document.')], HRESULT, 'Subject',
              ( ['in'], BSTR, 'Subject' )),
    COMMETHOD(['propget', helpstring(u'The author of the document.')], HRESULT, 'Author',
              ( ['retval', 'out'], POINTER(BSTR), 'Author' )),
    COMMETHOD(['propput', helpstring(u'The author of the document.')], HRESULT, 'Author',
              ( ['in'], BSTR, 'Author' )),
    COMMETHOD(['propget', helpstring(u'The category of the document.')], HRESULT, 'Category',
              ( ['retval', 'out'], POINTER(BSTR), 'Category' )),
    COMMETHOD(['propput', helpstring(u'The category of the document.')], HRESULT, 'Category',
              ( ['in'], BSTR, 'Category' )),
    COMMETHOD(['propget', helpstring(u'Comments for the document.')], HRESULT, 'Comments',
              ( ['retval', 'out'], POINTER(BSTR), 'Comments' )),
    COMMETHOD(['propput', helpstring(u'Comments for the document.')], HRESULT, 'Comments',
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD(['propget', helpstring(u'The keywords for the document.')], HRESULT, 'Keywords',
              ( ['retval', 'out'], POINTER(BSTR), 'Keywords' )),
    COMMETHOD(['propput', helpstring(u'The keywords for the document.')], HRESULT, 'Keywords',
              ( ['in'], BSTR, 'Keywords' )),
    COMMETHOD(['propget', helpstring(u'The hyperlink base of the document.')], HRESULT, 'HyperlinkBase',
              ( ['retval', 'out'], POINTER(BSTR), 'Path' )),
    COMMETHOD(['propput', helpstring(u'The hyperlink base of the document.')], HRESULT, 'HyperlinkBase',
              ( ['in'], BSTR, 'Path' )),
    COMMETHOD(['propget', helpstring(u'Indicates if a preview of the document is saved when the document is saved.')], HRESULT, 'SavePreview',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'SavePreview' )),
    COMMETHOD(['propput', helpstring(u'Indicates if a preview of the document is saved when the document is saved.')], HRESULT, 'SavePreview',
              ( ['in'], VARIANT_BOOL, 'SavePreview' )),
]
################################################################
## code template for IDocumentInfo implementation
##class IDocumentInfo_Impl(object):
##    def _get(self):
##        u'The category of the document.'
##        #return Category
##    def _set(self, Category):
##        u'The category of the document.'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The hyperlink base of the document.'
##        #return Path
##    def _set(self, Path):
##        u'The hyperlink base of the document.'
##    HyperlinkBase = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The author of the document.'
##        #return Author
##    def _set(self, Author):
##        u'The author of the document.'
##    Author = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The title of the document.'
##        #return Title
##    def _set(self, Title):
##        u'The title of the document.'
##    DocumentTitle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Comments for the document.'
##        #return Comments
##    def _set(self, Comments):
##        u'Comments for the document.'
##    Comments = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if a preview of the document is saved when the document is saved.'
##        #return SavePreview
##    def _set(self, SavePreview):
##        u'Indicates if a preview of the document is saved when the document is saved.'
##    SavePreview = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The keywords for the document.'
##        #return Keywords
##    def _set(self, Keywords):
##        u'The keywords for the document.'
##    Keywords = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The subject of the document.'
##        #return Subject
##    def _set(self, Subject):
##        u'The subject of the document.'
##    Subject = property(_get, _set, doc = _set.__doc__)
##

class IText3DElement(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a Text3D graphic element.'
    _iid_ = GUID('{E9290DCB-F710-11D4-A117-00508BD60CB9}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'esriT3DJustification'
esriT3DJustifyLeft = 0
esriT3DJustifyCenter = 1
esriT3DJustifyRight = 2
esriT3DJustification = c_int # enum

# values for enumeration 'esriT3DRotationAxis'
esriT3DRotateAxisX = 0
esriT3DRotateAxisY = 1
esriT3DRotateAxisZ = 2
esriT3DRotationAxis = c_int # enum
IText3DElement._methods_ = [
    COMMETHOD(['propget', helpstring(u'The text string.')], HRESULT, 'Text',
              ( ['retval', 'out'], POINTER(BSTR), 'pText' )),
    COMMETHOD(['propput', helpstring(u'The text string.')], HRESULT, 'Text',
              ( ['in'], BSTR, 'pText' )),
    COMMETHOD(['propget', helpstring(u'The TrueType font name.')], HRESULT, 'FontName',
              ( ['retval', 'out'], POINTER(BSTR), 'pFontName' )),
    COMMETHOD(['propput', helpstring(u'The TrueType font name.')], HRESULT, 'FontName',
              ( ['in'], BSTR, 'pFontName' )),
    COMMETHOD(['propget', helpstring(u'Indicates if font style is bold.')], HRESULT, 'BoldFont',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pBoldFont' )),
    COMMETHOD(['propput', helpstring(u'Indicates if font style is bold.')], HRESULT, 'BoldFont',
              ( ['in'], VARIANT_BOOL, 'pBoldFont' )),
    COMMETHOD(['propget', helpstring(u'Indicates if font style is italic.')], HRESULT, 'ItalicFont',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pItalicFont' )),
    COMMETHOD(['propput', helpstring(u'Indicates if font style is italic.')], HRESULT, 'ItalicFont',
              ( ['in'], VARIANT_BOOL, 'pItalicFont' )),
    COMMETHOD(['propget', helpstring(u'The height of text in world units.')], HRESULT, 'AnchorPoint',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint)), 'ppAnchorPt' )),
    COMMETHOD(['propput', helpstring(u'The height of text in world units.')], HRESULT, 'AnchorPoint',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'ppAnchorPt' )),
    COMMETHOD(['propget', helpstring(u'The height of text in world units.')], HRESULT, 'Height',
              ( ['retval', 'out'], POINTER(c_double), 'pHeight' )),
    COMMETHOD(['propput', helpstring(u'The height of text in world units.')], HRESULT, 'Height',
              ( ['in'], c_double, 'pHeight' )),
    COMMETHOD(['propget', helpstring(u'The depth of text in world units.')], HRESULT, 'Depth',
              ( ['retval', 'out'], POINTER(c_double), 'pDepth' )),
    COMMETHOD(['propput', helpstring(u'The depth of text in world units.')], HRESULT, 'Depth',
              ( ['in'], c_double, 'pDepth' )),
    COMMETHOD(['propget', helpstring(u'The justification of text.')], HRESULT, 'Justification',
              ( ['retval', 'out'], POINTER(esriT3DJustification), 'pJustification' )),
    COMMETHOD(['propput', helpstring(u'The justification of text.')], HRESULT, 'Justification',
              ( ['in'], esriT3DJustification, 'pJustification' )),
    COMMETHOD(['propget', helpstring(u'The plane of orientation.')], HRESULT, 'OrientationPlane',
              ( ['retval', 'out'], POINTER(esriT3DOrientationPlane), 'pPlane' )),
    COMMETHOD(['propput', helpstring(u'The plane of orientation.')], HRESULT, 'OrientationPlane',
              ( ['in'], esriT3DOrientationPlane, 'pPlane' )),
    COMMETHOD(['propget', helpstring(u'The text alignment.')], HRESULT, 'Alignment',
              ( ['retval', 'out'], POINTER(esriT3DAlignment), 'pAlignment' )),
    COMMETHOD(['propput', helpstring(u'The text alignment.')], HRESULT, 'Alignment',
              ( ['in'], esriT3DAlignment, 'pAlignment' )),
    COMMETHOD(['propget', helpstring(u'The rotation axis.')], HRESULT, 'AxisRotation',
              ( ['retval', 'out'], POINTER(esriT3DRotationAxis), 'pAxis' )),
    COMMETHOD(['propput', helpstring(u'The rotation axis.')], HRESULT, 'AxisRotation',
              ( ['in'], esriT3DRotationAxis, 'pAxis' )),
    COMMETHOD(['propget', helpstring(u'The rotation angle about the rotation axis.')], HRESULT, 'RotationAngle',
              ( ['retval', 'out'], POINTER(c_double), 'pAngle' )),
    COMMETHOD(['propput', helpstring(u'The rotation angle about the rotation axis.')], HRESULT, 'RotationAngle',
              ( ['in'], c_double, 'pAngle' )),
    COMMETHOD(['propget', helpstring(u'The adjustment factor for z axis.')], HRESULT, 'ZAxisScale',
              ( ['retval', 'out'], POINTER(c_double), 'pZScale' )),
    COMMETHOD(['propput', helpstring(u'The adjustment factor for z axis.')], HRESULT, 'ZAxisScale',
              ( ['in'], c_double, 'pZScale' )),
    COMMETHOD(['propput', helpstring(u'The surface for draping.')], HRESULT, 'Surface',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IFunctionalSurface), 'rhs' )),
    COMMETHOD([helpstring(u'Update graphic geometry with current parameters.')], HRESULT, 'Update',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pUpdated' )),
]
################################################################
## code template for IText3DElement implementation
##class IText3DElement_Impl(object):
##    def _get(self):
##        u'The TrueType font name.'
##        #return pFontName
##    def _set(self, pFontName):
##        u'The TrueType font name.'
##    FontName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The justification of text.'
##        #return pJustification
##    def _set(self, pJustification):
##        u'The justification of text.'
##    Justification = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The height of text in world units.'
##        #return ppAnchorPt
##    def _set(self, ppAnchorPt):
##        u'The height of text in world units.'
##    AnchorPoint = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if font style is italic.'
##        #return pItalicFont
##    def _set(self, pItalicFont):
##        u'Indicates if font style is italic.'
##    ItalicFont = property(_get, _set, doc = _set.__doc__)
##
##    def Update(self):
##        u'Update graphic geometry with current parameters.'
##        #return pUpdated
##
##    def _get(self):
##        u'The text string.'
##        #return pText
##    def _set(self, pText):
##        u'The text string.'
##    Text = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The rotation angle about the rotation axis.'
##        #return pAngle
##    def _set(self, pAngle):
##        u'The rotation angle about the rotation axis.'
##    RotationAngle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The rotation axis.'
##        #return pAxis
##    def _set(self, pAxis):
##        u'The rotation axis.'
##    AxisRotation = property(_get, _set, doc = _set.__doc__)
##
##    def _set(self, rhs):
##        u'The surface for draping.'
##    Surface = property(fset = _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The height of text in world units.'
##        #return pHeight
##    def _set(self, pHeight):
##        u'The height of text in world units.'
##    Height = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The depth of text in world units.'
##        #return pDepth
##    def _set(self, pDepth):
##        u'The depth of text in world units.'
##    Depth = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The adjustment factor for z axis.'
##        #return pZScale
##    def _set(self, pZScale):
##        u'The adjustment factor for z axis.'
##    ZAxisScale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if font style is bold.'
##        #return pBoldFont
##    def _set(self, pBoldFont):
##        u'Indicates if font style is bold.'
##    BoldFont = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The plane of orientation.'
##        #return pPlane
##    def _set(self, pPlane):
##        u'The plane of orientation.'
##    OrientationPlane = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The text alignment.'
##        #return pAlignment
##    def _set(self, pAlignment):
##        u'The text alignment.'
##    Alignment = property(_get, _set, doc = _set.__doc__)
##

class AnnotationFeatureClassExtension(CoClass):
    u'An Esri annotation feature class extension.'
    _reg_clsid_ = GUID('{24429589-D711-11D2-9F41-00C04F6BC6A5}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
AnnotationFeatureClassExtension._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IClassExtension, IAnnoClass, IAnnotationClassExtension, IAnnotationClassExtension2, IAnnoClassAdmin, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IConfirmSendRelatedObjectEvents, IAnnoClassAdmin2, IAnnoClassAdmin3, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClassEdit, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClassExtension, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IObjectClassExtension, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IPersistCustomFeaturesExtension, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRelatedObjectClassEvents, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IObjectClassEvents, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]

class MosaicLODInfoHelper(CoClass):
    u'A LOD helper.'
    _reg_clsid_ = GUID('{1154B6C8-4426-4E56-BD18-53C46FEA9313}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
MosaicLODInfoHelper._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMosaicLODInfoHelper]

class SimpleElementSelection(CoClass):
    u'Simple selection object. Implements drawing and selecting but not clipboard support.'
    _reg_clsid_ = GUID('{70A986C0-6B21-4379-AF25-181B24F3231B}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
SimpleElementSelection._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ISelection, IGraphicsContainerProperty, IEnumElement, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IConnectionPointContainer]
SimpleElementSelection._outgoing_interfaces_ = [ISelectionEvents]

class IDataLayerExtension(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that allow a layer to override the base path used for relative path names.'
    _iid_ = GUID('{E89F2D52-64D3-11D4-80F0-00C04FA0ADF8}')
    _idlflags_ = ['oleautomation']
IDataLayerExtension._methods_ = [
    COMMETHOD(['propget', helpstring(u'Base path used when storing relative path names.')], HRESULT, 'RelativeBase',
              ( ['retval', 'out'], POINTER(BSTR), 'basePath' )),
    COMMETHOD(['propput', helpstring(u'Base path used when storing relative path names.')], HRESULT, 'RelativeBase',
              ( ['in'], BSTR, 'basePath' )),
    COMMETHOD([helpstring(u'Connects the layer to its data source.  An optional name object can be specified to aid in repairing a lost connection.')], HRESULT, 'Connect',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName), 'pOptRepairName' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Succeeded' )),
]
################################################################
## code template for IDataLayerExtension implementation
##class IDataLayerExtension_Impl(object):
##    def _get(self):
##        u'Base path used when storing relative path names.'
##        #return basePath
##    def _set(self, basePath):
##        u'Base path used when storing relative path names.'
##    RelativeBase = property(_get, _set, doc = _set.__doc__)
##
##    def Connect(self, pOptRepairName):
##        u'Connects the layer to its data source.  An optional name object can be specified to aid in repairing a lost connection.'
##        #return Succeeded
##

class LineElement(CoClass):
    u'The Graphic Element to display lines.'
    _reg_clsid_ = GUID('{8AB7FBE1-D871-11D0-8389-080009B996CC}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
LineElement._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IElement, IElementProperties, IElementProperties2, IElementProperties3, ILineElement, IGraphicElement, IBoundsProperties, IElementEditVertices, comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ITransform2D, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize]

IDocumentInfo2._methods_ = [
    COMMETHOD(['propget', helpstring(u'The title of the document.')], HRESULT, 'DocumentTitle',
              ( ['retval', 'out'], POINTER(BSTR), 'Title' )),
    COMMETHOD(['propput', helpstring(u'The title of the document.')], HRESULT, 'DocumentTitle',
              ( ['in'], BSTR, 'Title' )),
    COMMETHOD(['propget', helpstring(u'The subject of the document.')], HRESULT, 'Subject',
              ( ['retval', 'out'], POINTER(BSTR), 'Subject' )),
    COMMETHOD(['propput', helpstring(u'The subject of the document.')], HRESULT, 'Subject',
              ( ['in'], BSTR, 'Subject' )),
    COMMETHOD(['propget', helpstring(u'The author of the document.')], HRESULT, 'Author',
              ( ['retval', 'out'], POINTER(BSTR), 'Author' )),
    COMMETHOD(['propput', helpstring(u'The author of the document.')], HRESULT, 'Author',
              ( ['in'], BSTR, 'Author' )),
    COMMETHOD(['propget', helpstring(u'The category of the document.')], HRESULT, 'Category',
              ( ['retval', 'out'], POINTER(BSTR), 'Category' )),
    COMMETHOD(['propput', helpstring(u'The category of the document.')], HRESULT, 'Category',
              ( ['in'], BSTR, 'Category' )),
    COMMETHOD(['propget', helpstring(u'Comments for the document.')], HRESULT, 'Comments',
              ( ['retval', 'out'], POINTER(BSTR), 'Comments' )),
    COMMETHOD(['propput', helpstring(u'Comments for the document.')], HRESULT, 'Comments',
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD(['propget', helpstring(u'The keywords for the document.')], HRESULT, 'Keywords',
              ( ['retval', 'out'], POINTER(BSTR), 'Keywords' )),
    COMMETHOD(['propput', helpstring(u'The keywords for the document.')], HRESULT, 'Keywords',
              ( ['in'], BSTR, 'Keywords' )),
    COMMETHOD(['propget', helpstring(u'The hyperlink base of the document.')], HRESULT, 'HyperlinkBase',
              ( ['retval', 'out'], POINTER(BSTR), 'Path' )),
    COMMETHOD(['propput', helpstring(u'The hyperlink base of the document.')], HRESULT, 'HyperlinkBase',
              ( ['in'], BSTR, 'Path' )),
    COMMETHOD(['propget', helpstring(u'Indicates if a preview of the document is saved when the document is saved.')], HRESULT, 'SavePreview',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'SavePreview' )),
    COMMETHOD(['propput', helpstring(u'Indicates if a preview of the document is saved when the document is saved.')], HRESULT, 'SavePreview',
              ( ['in'], VARIANT_BOOL, 'SavePreview' )),
    COMMETHOD(['propget', helpstring(u'The credits of the document.')], HRESULT, 'Credits',
              ( ['retval', 'out'], POINTER(BSTR), 'Credits' )),
    COMMETHOD(['propput', helpstring(u'The credits of the document.')], HRESULT, 'Credits',
              ( ['in'], BSTR, 'Credits' )),
    COMMETHOD(['propget', helpstring(u'Indicates if relative path is used when the document is saved.')], HRESULT, 'RelativePaths',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'useRelativePaths' )),
    COMMETHOD(['propput', helpstring(u'Indicates if relative path is used when the document is saved.')], HRESULT, 'RelativePaths',
              ( ['in'], VARIANT_BOOL, 'useRelativePaths' )),
    COMMETHOD(['propget', helpstring(u'The name of the document.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propget', helpstring(u'The path of the document.')], HRESULT, 'Path',
              ( ['retval', 'out'], POINTER(BSTR), 'Path' )),
    COMMETHOD(['propget', helpstring(u'The folder of the document.')], HRESULT, 'Folder',
              ( ['retval', 'out'], POINTER(BSTR), 'Folder' )),
    COMMETHOD(['propget', helpstring(u'Date the document was last saved.')], HRESULT, 'DateSaved',
              ( ['retval', 'out'], POINTER(VARIANT), 'date' )),
    COMMETHOD(['propget', helpstring(u'Date the document was last printed.')], HRESULT, 'DatePrinted',
              ( ['retval', 'out'], POINTER(VARIANT), 'date' )),
    COMMETHOD(['propget', helpstring(u'Date the document was last exported.')], HRESULT, 'DateExported',
              ( ['retval', 'out'], POINTER(VARIANT), 'date' )),
]
################################################################
## code template for IDocumentInfo2 implementation
##class IDocumentInfo2_Impl(object):
##    def _get(self):
##        u'The category of the document.'
##        #return Category
##    def _set(self, Category):
##        u'The category of the document.'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The hyperlink base of the document.'
##        #return Path
##    def _set(self, Path):
##        u'The hyperlink base of the document.'
##    HyperlinkBase = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        u'The name of the document.'
##        #return Name
##
##    def _get(self):
##        u'The author of the document.'
##        #return Author
##    def _set(self, Author):
##        u'The author of the document.'
##    Author = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def DateSaved(self):
##        u'Date the document was last saved.'
##        #return date
##
##    def _get(self):
##        u'The title of the document.'
##        #return Title
##    def _set(self, Title):
##        u'The title of the document.'
##    DocumentTitle = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def DatePrinted(self):
##        u'Date the document was last printed.'
##        #return date
##
##    def _get(self):
##        u'Comments for the document.'
##        #return Comments
##    def _set(self, Comments):
##        u'Comments for the document.'
##    Comments = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def DateExported(self):
##        u'Date the document was last exported.'
##        #return date
##
##    def _get(self):
##        u'The credits of the document.'
##        #return Credits
##    def _set(self, Credits):
##        u'The credits of the document.'
##    Credits = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if a preview of the document is saved when the document is saved.'
##        #return SavePreview
##    def _set(self, SavePreview):
##        u'Indicates if a preview of the document is saved when the document is saved.'
##    SavePreview = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The keywords for the document.'
##        #return Keywords
##    def _set(self, Keywords):
##        u'The keywords for the document.'
##    Keywords = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Path(self):
##        u'The path of the document.'
##        #return Path
##
##    @property
##    def Folder(self):
##        u'The folder of the document.'
##        #return Folder
##
##    def _get(self):
##        u'Indicates if relative path is used when the document is saved.'
##        #return useRelativePaths
##    def _set(self, useRelativePaths):
##        u'Indicates if relative path is used when the document is saved.'
##    RelativePaths = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The subject of the document.'
##        #return Subject
##    def _set(self, Subject):
##        u'The subject of the document.'
##    Subject = property(_get, _set, doc = _set.__doc__)
##

class FDOGraphicsLayer(CoClass):
    u'A collection of properties for an annotation layer (feature data object graphics layer).'
    _reg_clsid_ = GUID('{34B2EF83-F4AC-11D1-A245-080009B6F22B}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class ISymbolSubstitution(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control dynamic symbol substitution for display.'
    _iid_ = GUID('{B8DDFA29-43F2-40DF-8BFF-C7A2879C1F90}')
    _idlflags_ = ['oleautomation']
class IInteractiveSearch(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to visible features.'
    _iid_ = GUID('{928B74F0-A666-4EFE-A756-EA1E3DAD6075}')
    _idlflags_ = ['oleautomation']
FDOGraphicsLayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IFDOGraphicsLayer, IAnnotationLayer, IFDOGraphicsLayerRead, IGraphicsLayer, IGraphicsContainer, IFDOGraphicsContainer, IOverflowGraphicsContainer, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeoDataset, IBarrierProperties, IBarrierProperties2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, ILayerEvents, ILayerInfo, IFeatureLayer, IFeatureSelection, IFDOAttributeConversion, IDataLayer, IAttributeTable, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IConnectionPointContainer, IDataLayer2, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataset, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayAdmin, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayFilterManager, IDisplayRelationshipClass, IFeatureLayer2, IFeatureLayerDefinition, IFeatureLayerDefinition2, IFind, IGraphicsContainerSelect, IHotlinkContainer, IHotlinkMacro, IHotlinkExpression, IHyperlinkContainer, IIdentify, IIdentify2, ILayer, ILayer2, ILayerDrawingProperties, ILayerEffects, ILayerExtensions, ILayerFields, ILayerPosition, ILayerSymbologyExtents, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IMapLevel, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IObjectClassEvents, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IObjectClassSchemaEvents, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySupport, IRelationshipClassCollection, IRelationshipClassCollectionEdit, ITableDefinition, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITableFields, ITableSelection, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITableCapabilities, IPublishLayer, ILayerDrawingPhase, ICompositeLayer2, ISymbolSubstitution, ILayerGeneralProperties, IInteractiveSearch, IDrawAnnotationGeometry, ICompositeLayer, IDisplayTable, IFDOGraphicsLayer2, ISecureLayer, ITemporaryLayer, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITransformEvents, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IClass, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable, IHTMLPopupInfo, IHTMLPopupInfo2, IHTMLPopupIdentify, IHTMLPopupIdentify2, IDisplayString, IIdentifyDisplay, IOrderedLayerFields, ITimeData, ITimeData2, ITimeDataDisplay, ITimeDisplayTable2, ITimeDimensionDefinition, ITimeDisplayTable, ITimeTableDefinition, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspaceEvents]
FDOGraphicsLayer._outgoing_interfaces_ = [ISelectionEvents]

class ITableExtensions(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the extensions of a table.'
    _iid_ = GUID('{5E0CB456-F494-4C34-9396-1197C3AFA734}')
    _idlflags_ = ['oleautomation']
ITableExtensions._methods_ = [
    COMMETHOD(['propget', helpstring(u'Number of extensions.')], HRESULT, 'ExtensionCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The extension at the specified index.')], HRESULT, 'Extension',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ext' )),
    COMMETHOD([helpstring(u'Adds a new extension.')], HRESULT, 'AddExtension',
              ( ['in'], POINTER(IUnknown), 'ext' )),
    COMMETHOD([helpstring(u'Removes the specified extension.')], HRESULT, 'RemoveExtension',
              ( ['in'], c_int, 'Index' )),
]
################################################################
## code template for ITableExtensions implementation
##class ITableExtensions_Impl(object):
##    def AddExtension(self, ext):
##        u'Adds a new extension.'
##        #return 
##
##    def RemoveExtension(self, Index):
##        u'Removes the specified extension.'
##        #return 
##
##    @property
##    def ExtensionCount(self):
##        u'Number of extensions.'
##        #return Count
##
##    @property
##    def Extension(self, Index):
##        u'The extension at the specified index.'
##        #return ext
##

class ICompositeMapSurround(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control map surrounds that are composed of graphic elements.'
    _iid_ = GUID('{2ECB6BB5-D5A4-11D3-9305-00600802E603}')
    _idlflags_ = ['oleautomation']
ICompositeMapSurround._methods_ = [
    COMMETHOD([helpstring(u'Returns the elements that are used to render this surround.')], HRESULT, 'Elements',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'Bounds' ),
              ( ['retval', 'out'], POINTER(POINTER(IEnumElement)), 'GraphicElements' )),
]
################################################################
## code template for ICompositeMapSurround implementation
##class ICompositeMapSurround_Impl(object):
##    def Elements(self, Display, Bounds):
##        u'Returns the elements that are used to render this surround.'
##        #return GraphicElements
##

IBasicMap2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Copyright information associated with the map.')], HRESULT, 'CopyrightText',
              ( ['retval', 'out'], POINTER(BSTR), 'copyright' )),
    COMMETHOD(['propput', helpstring(u'Copyright information associated with the map.')], HRESULT, 'CopyrightText',
              ( ['in'], BSTR, 'copyright' )),
    COMMETHOD(['propget', helpstring(u'Name of the map.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'pName' )),
    COMMETHOD(['propput', helpstring(u'Name of the map.')], HRESULT, 'Name',
              ( ['in'], BSTR, 'pName' )),
    COMMETHOD(['propget', helpstring(u'Description of the map.')], HRESULT, 'Description',
              ( ['retval', 'out'], POINTER(BSTR), 'pDescr' )),
    COMMETHOD(['propput', helpstring(u'Description of the map.')], HRESULT, 'Description',
              ( ['in'], BSTR, 'pDescr' )),
    COMMETHOD(['propput', helpstring(u'Area of interest for the map.')], HRESULT, 'AreaOfInterest',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'rhs' )),
    COMMETHOD(['propget', helpstring(u'Number of layers in the map.')], HRESULT, 'LayerCount',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propget', helpstring(u'The layer at the given index.')], HRESULT, 'Layer',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(ILayer)), 'ppLayer' )),
    COMMETHOD(['propget', helpstring(u'The layers in the map of the type specified in the uid.  If recursive is true it will return layers in group layers.')], HRESULT, 'Layers',
              ( ['in', 'optional'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IUID), 'uid', 0 ),
              ( ['in', 'optional'], VARIANT_BOOL, 'recursive', True ),
              ( ['retval', 'out'], POINTER(POINTER(IEnumLayer)), 'ppLayers' )),
    COMMETHOD(['propget', helpstring(u'The spatial reference of the map.')], HRESULT, 'SpatialReference',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference)), 'ppSpatialRef' )),
    COMMETHOD(['propputref', helpstring(u'The spatial reference of the map.')], HRESULT, 'SpatialReference',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'ppSpatialRef' )),
    COMMETHOD([helpstring(u'Adds a layer to the map.')], HRESULT, 'AddLayer',
              ( ['in'], POINTER(ILayer), 'pLayer' )),
    COMMETHOD([helpstring(u'Adds multiple layers to the map, arranging them nicely if specified.')], HRESULT, 'AddLayers',
              ( ['in'], POINTER(IEnumLayer), 'pLayers' ),
              ( ['in'], VARIANT_BOOL, 'autoArrange' )),
    COMMETHOD([helpstring(u'Deletes a layer from the map.')], HRESULT, 'DeleteLayer',
              ( ['in'], POINTER(ILayer), 'pLayer' )),
    COMMETHOD([helpstring(u'Removes all layers from the map.')], HRESULT, 'ClearLayers'),
    COMMETHOD(['propget', helpstring(u'The basic graphics layer.')], HRESULT, 'BasicGraphicsLayer',
              ( ['retval', 'out'], POINTER(POINTER(IGraphicsLayer)), 'ppGraphicsLayer' )),
    COMMETHOD(['propget', helpstring(u'The active graphics layer.  If no graphic layers exist a basic memory graphics layer will be created.')], HRESULT, 'ActiveGraphicsLayer',
              ( ['retval', 'out'], POINTER(POINTER(ILayer)), 'ppGraphicsLayer' )),
    COMMETHOD(['propputref', helpstring(u'The active graphics layer.  If no graphic layers exist a basic memory graphics layer will be created.')], HRESULT, 'ActiveGraphicsLayer',
              ( ['in'], POINTER(ILayer), 'ppGraphicsLayer' )),
    COMMETHOD(['propget', helpstring(u'Number of selected features in the map.')], HRESULT, 'SelectionCount',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD([helpstring(u'Clears the map selection.')], HRESULT, 'ClearSelection'),
    COMMETHOD(['propget', helpstring(u"The map's feature selection.")], HRESULT, 'FeatureSelection',
              ( ['retval', 'out'], POINTER(POINTER(ISelection)), 'ppSelection' )),
    COMMETHOD(['propputref', helpstring(u"The map's feature selection.")], HRESULT, 'FeatureSelection',
              ( ['in'], POINTER(ISelection), 'ppSelection' )),
    COMMETHOD([helpstring(u'Selects features in the map given a shape and a selection environment (optional).')], HRESULT, 'SelectByShape',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'Shape' ),
              ( ['in'], POINTER(ISelectionEnvironment), 'env' ),
              ( ['in'], VARIANT_BOOL, 'justOne' )),
]
################################################################
## code template for IBasicMap2 implementation
##class IBasicMap2_Impl(object):
##    @property
##    def Layers(self, uid, recursive):
##        u'The layers in the map of the type specified in the uid.  If recursive is true it will return layers in group layers.'
##        #return ppLayers
##
##    def ClearSelection(self):
##        u'Clears the map selection.'
##        #return 
##
##    @property
##    def Layer(self, Index):
##        u'The layer at the given index.'
##        #return ppLayer
##
##    def ClearLayers(self):
##        u'Removes all layers from the map.'
##        #return 
##
##    def _get(self):
##        u'Description of the map.'
##        #return pDescr
##    def _set(self, pDescr):
##        u'Description of the map.'
##    Description = property(_get, _set, doc = _set.__doc__)
##
##    def AddLayers(self, pLayers, autoArrange):
##        u'Adds multiple layers to the map, arranging them nicely if specified.'
##        #return 
##
##    def DeleteLayer(self, pLayer):
##        u'Deletes a layer from the map.'
##        #return 
##
##    def SelectByShape(self, Shape, env, justOne):
##        u'Selects features in the map given a shape and a selection environment (optional).'
##        #return 
##
##    def _get(self):
##        u'Copyright information associated with the map.'
##        #return copyright
##    def _set(self, copyright):
##        u'Copyright information associated with the map.'
##    CopyrightText = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SelectionCount(self):
##        u'Number of selected features in the map.'
##        #return pCount
##
##    def ActiveGraphicsLayer(self, ppGraphicsLayer):
##        u'The active graphics layer.  If no graphic layers exist a basic memory graphics layer will be created.'
##        #return 
##
##    def _set(self, rhs):
##        u'Area of interest for the map.'
##    AreaOfInterest = property(fset = _set, doc = _set.__doc__)
##
##    @property
##    def LayerCount(self):
##        u'Number of layers in the map.'
##        #return pCount
##
##    @property
##    def BasicGraphicsLayer(self):
##        u'The basic graphics layer.'
##        #return ppGraphicsLayer
##
##    def FeatureSelection(self, ppSelection):
##        u"The map's feature selection."
##        #return 
##
##    def SpatialReference(self, ppSpatialRef):
##        u'The spatial reference of the map.'
##        #return 
##
##    def AddLayer(self, pLayer):
##        u'Adds a layer to the map.'
##        #return 
##
##    def _get(self):
##        u'Name of the map.'
##        #return pName
##    def _set(self, pName):
##        u'Name of the map.'
##    Name = property(_get, _set, doc = _set.__doc__)
##

IGFSReplicationAgent._methods_ = [
    COMMETHOD([helpstring(u'Creates a replica pair and returns FeatureLayers.')], HRESULT, 'CreateReplica',
              ( ['in'], POINTER(IGraphicFeatureServer), 'srcGFS' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspace), 'destWorkspace' ),
              ( ['in'], BSTR, 'replicaName' ),
              ( ['in'], POINTER(IGFSReplicaDescription), 'desc' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPReplicaOptions), 'repOptions' ),
              ( ['in'], BSTR, 'layerFolder' )),
    COMMETHOD([helpstring(u'Synchronize a feature package replica with graphic feature server replica.')], HRESULT, 'SynchronizeReplica',
              ( ['in'], POINTER(IGraphicFeatureServer), 'trgGFS' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspace), 'srcWorkspace' ),
              ( ['in'], BSTR, 'replicaName' ),
              ( ['in'], comtypes.gen._A7C74158_1062_4664_B404_8694D490FCD1_0_10_2.esriReplicaSynchronizeDirection, 'dir' )),
]
################################################################
## code template for IGFSReplicationAgent implementation
##class IGFSReplicationAgent_Impl(object):
##    def SynchronizeReplica(self, trgGFS, srcWorkspace, replicaName, dir):
##        u'Synchronize a feature package replica with graphic feature server replica.'
##        #return 
##
##    def CreateReplica(self, srcGFS, destWorkspace, replicaName, desc, repOptions, layerFolder):
##        u'Creates a replica pair and returns FeatureLayers.'
##        #return 
##

class IOleFrame(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the members that control the Graphic Element that holds an OLE object.'
    _iid_ = GUID('{F8FB5E03-546F-11D1-86EA-0000F8751720}')
    _idlflags_ = ['oleautomation']
IOleFrame._methods_ = [
    COMMETHOD(['propget', helpstring(u'Valid only in MFC environment.  Returns pointer to the COleClientItem representing the OLE object.')], HRESULT, 'OleClientItem',
              ( ['retval', 'out'], POINTER(c_void_p), 'OleClientItem' )),
    COMMETHOD([helpstring(u"Valid only in MFC environment. Initialize the internal COleClientItem.  Pass in a pointer to the application's COleDocument.")], HRESULT, 'CreateOleClientItem',
              ( [], c_void_p, 'oleDocument' )),
    COMMETHOD([helpstring(u'Edit the object in a separate application window.')], HRESULT, 'Open'),
    COMMETHOD([helpstring(u'Edit the object in-place.')], HRESULT, 'Edit'),
    COMMETHOD([helpstring(u'Stop editing the object.')], HRESULT, 'Hide'),
    COMMETHOD([helpstring(u'Show the properties dialog for the object.')], HRESULT, 'EditProperties',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'ok' )),
]
################################################################
## code template for IOleFrame implementation
##class IOleFrame_Impl(object):
##    def CreateOleClientItem(self, oleDocument):
##        u"Valid only in MFC environment. Initialize the internal COleClientItem.  Pass in a pointer to the application's COleDocument."
##        #return 
##
##    def Hide(self):
##        u'Stop editing the object.'
##        #return 
##
##    def Edit(self):
##        u'Edit the object in-place.'
##        #return 
##
##    def EditProperties(self):
##        u'Show the properties dialog for the object.'
##        #return ok
##
##    @property
##    def OleClientItem(self):
##        u'Valid only in MFC environment.  Returns pointer to the COleClientItem representing the OLE object.'
##        #return OleClientItem
##
##    def Open(self):
##        u'Edit the object in a separate application window.'
##        #return 
##

IMapTimeDisplay._methods_ = [
    COMMETHOD([helpstring(u'Indicates whether the map has a time-enabled layer.')], HRESULT, 'HasTimeData',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'HasTimeData' )),
    COMMETHOD(['propget', helpstring(u'The time interval to be used by the time slider to animate the map.')], HRESULT, 'DefaultTimeInterval',
              ( ['retval', 'out'], POINTER(c_double), 'Interval' )),
    COMMETHOD(['propput', helpstring(u'The time interval to be used by the time slider to animate the map.')], HRESULT, 'DefaultTimeInterval',
              ( ['in'], c_double, 'Interval' )),
    COMMETHOD(['propget', helpstring(u'The time interval units to be used to animate the map.')], HRESULT, 'DefaultTimeIntervalUnits',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriTimeUnits), 'Units' )),
    COMMETHOD(['propput', helpstring(u'The time interval units to be used to animate the map.')], HRESULT, 'DefaultTimeIntervalUnits',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriTimeUnits, 'Units' )),
    COMMETHOD(['propget', helpstring(u'The time window used to display the data in the map.')], HRESULT, 'DefaultTimeWindow',
              ( ['retval', 'out'], POINTER(c_double), 'duration' )),
    COMMETHOD(['propput', helpstring(u'The time window used to display the data in the map.')], HRESULT, 'DefaultTimeWindow',
              ( ['in'], c_double, 'duration' )),
    COMMETHOD(['propget', helpstring(u'Returns the full time extent of the time-enabled layers in the map.')], HRESULT, 'FullTimeExtent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITimeExtent)), 'TimeExtent' )),
    COMMETHOD(['propputref', helpstring(u'Returns the full time extent of the time-enabled layers in the map.')], HRESULT, 'FullTimeExtent',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITimeExtent), 'TimeExtent' )),
    COMMETHOD(['propget', helpstring(u'The current time extent of the map.')], HRESULT, 'CurrentTimeExtent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITimeExtent)), 'TimeExtent' )),
    COMMETHOD(['propputref', helpstring(u'The current time extent of the map.')], HRESULT, 'CurrentTimeExtent',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITimeExtent), 'TimeExtent' )),
    COMMETHOD(['propget', helpstring(u'The time extent for which the data is displayed in the map.')], HRESULT, 'TimeValue',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITimeValue)), 'time' )),
    COMMETHOD(['propputref', helpstring(u'The time extent for which the data is displayed in the map.')], HRESULT, 'TimeValue',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITimeValue), 'time' )),
    COMMETHOD(['propget', helpstring(u'The time reference (time zone information, daylight savings, etc.) associated with the map.')], HRESULT, 'TimeReference',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITimeReference)), 'TimeReference' )),
    COMMETHOD(['propputref', helpstring(u'The time reference (time zone information, daylight savings, etc.) associated with the map.')], HRESULT, 'TimeReference',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITimeReference), 'TimeReference' )),
    COMMETHOD(['propget', helpstring(u'The format of the date that is displayed on the time slider.')], HRESULT, 'DisplayDateFormat',
              ( ['retval', 'out'], POINTER(BSTR), 'dateFormat' )),
    COMMETHOD(['propput', helpstring(u'The format of the date that is displayed on the time slider.')], HRESULT, 'DisplayDateFormat',
              ( ['in'], BSTR, 'dateFormat' )),
    COMMETHOD(['propget', helpstring(u'The format of the time that is displayed on the time slider.')], HRESULT, 'DisplayTimeFormat',
              ( ['retval', 'out'], POINTER(BSTR), 'timeFormat' )),
    COMMETHOD(['propput', helpstring(u'The format of the time that is displayed on the time slider.')], HRESULT, 'DisplayTimeFormat',
              ( ['in'], BSTR, 'timeFormat' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether data for each timestamp will be drawn when playing the time visualization.')], HRESULT, 'DisplayEachTimestamp',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Value' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether data for each timestamp will be drawn when playing the time visualization.')], HRESULT, 'DisplayEachTimestamp',
              ( ['in'], VARIANT_BOOL, 'Value' )),
    COMMETHOD(['propget', helpstring(u'The speed of the slider on a scale of 1 to 10 with 10 being the fastest.')], HRESULT, 'DisplaySpeed',
              ( ['retval', 'out'], POINTER(c_int), 'speed' )),
    COMMETHOD(['propput', helpstring(u'The speed of the slider on a scale of 1 to 10 with 10 being the fastest.')], HRESULT, 'DisplaySpeed',
              ( ['in'], c_int, 'speed' )),
    COMMETHOD(['propget', helpstring(u'The play option (Stop, Reverse, Repeat) used by the slider after the time visualization has been played once.')], HRESULT, 'PlayOption',
              ( ['retval', 'out'], POINTER(esriMapTimePlayOption), 'option' )),
    COMMETHOD(['propput', helpstring(u'The play option (Stop, Reverse, Repeat) used by the slider after the time visualization has been played once.')], HRESULT, 'PlayOption',
              ( ['in'], esriMapTimePlayOption, 'option' )),
    COMMETHOD(['propget', helpstring(u'Indicates how the time extent of the map is defined.')], HRESULT, 'TimeExtentOption',
              ( ['retval', 'out'], POINTER(esriMapTimeExtentOption), 'option' )),
    COMMETHOD(['propput', helpstring(u'Indicates how the time extent of the map is defined.')], HRESULT, 'TimeExtentOption',
              ( ['in'], esriMapTimeExtentOption, 'option' )),
    COMMETHOD(['propget', helpstring(u'The time-enabled layer that defines the time extent of the map.')], HRESULT, 'TimeExtentDefinitionLayer',
              ( ['retval', 'out'], POINTER(POINTER(ILayer)), 'Layer' )),
    COMMETHOD(['propputref', helpstring(u'The time-enabled layer that defines the time extent of the map.')], HRESULT, 'TimeExtentDefinitionLayer',
              ( ['in'], POINTER(ILayer), 'Layer' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the data in the map refreshes when moving the time slider dynamically.')], HRESULT, 'DynamicTimeRefresh',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the data in the map refreshes when moving the time slider dynamically.')], HRESULT, 'DynamicTimeRefresh',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether time is enabled on the map.')], HRESULT, 'ShowTime',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether time is enabled on the map.')], HRESULT, 'ShowTime',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD([helpstring(u'Returns the full time extent of the time-enabled layers in the map.')], HRESULT, 'ComputeFullTimeExtent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITimeExtent)), 'TimeExtent' )),
]
################################################################
## code template for IMapTimeDisplay implementation
##class IMapTimeDisplay_Impl(object):
##    def _get(self):
##        u'The time window used to display the data in the map.'
##        #return duration
##    def _set(self, duration):
##        u'The time window used to display the data in the map.'
##    DefaultTimeWindow = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The format of the date that is displayed on the time slider.'
##        #return dateFormat
##    def _set(self, dateFormat):
##        u'The format of the date that is displayed on the time slider.'
##    DisplayDateFormat = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether the data in the map refreshes when moving the time slider dynamically.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether the data in the map refreshes when moving the time slider dynamically.'
##    DynamicTimeRefresh = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The time interval units to be used to animate the map.'
##        #return Units
##    def _set(self, Units):
##        u'The time interval units to be used to animate the map.'
##    DefaultTimeIntervalUnits = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The format of the time that is displayed on the time slider.'
##        #return timeFormat
##    def _set(self, timeFormat):
##        u'The format of the time that is displayed on the time slider.'
##    DisplayTimeFormat = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The play option (Stop, Reverse, Repeat) used by the slider after the time visualization has been played once.'
##        #return option
##    def _set(self, option):
##        u'The play option (Stop, Reverse, Repeat) used by the slider after the time visualization has been played once.'
##    PlayOption = property(_get, _set, doc = _set.__doc__)
##
##    def TimeValue(self, time):
##        u'The time extent for which the data is displayed in the map.'
##        #return 
##
##    def _get(self):
##        u'Indicates how the time extent of the map is defined.'
##        #return option
##    def _set(self, option):
##        u'Indicates how the time extent of the map is defined.'
##    TimeExtentOption = property(_get, _set, doc = _set.__doc__)
##
##    def TimeExtentDefinitionLayer(self, Layer):
##        u'The time-enabled layer that defines the time extent of the map.'
##        #return 
##
##    def HasTimeData(self):
##        u'Indicates whether the map has a time-enabled layer.'
##        #return HasTimeData
##
##    def _get(self):
##        u'Indicates whether time is enabled on the map.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether time is enabled on the map.'
##    ShowTime = property(_get, _set, doc = _set.__doc__)
##
##    def ComputeFullTimeExtent(self):
##        u'Returns the full time extent of the time-enabled layers in the map.'
##        #return TimeExtent
##
##    def CurrentTimeExtent(self, TimeExtent):
##        u'The current time extent of the map.'
##        #return 
##
##    def _get(self):
##        u'The speed of the slider on a scale of 1 to 10 with 10 being the fastest.'
##        #return speed
##    def _set(self, speed):
##        u'The speed of the slider on a scale of 1 to 10 with 10 being the fastest.'
##    DisplaySpeed = property(_get, _set, doc = _set.__doc__)
##
##    def FullTimeExtent(self, TimeExtent):
##        u'Returns the full time extent of the time-enabled layers in the map.'
##        #return 
##
##    def _get(self):
##        u'Indicates whether data for each timestamp will be drawn when playing the time visualization.'
##        #return Value
##    def _set(self, Value):
##        u'Indicates whether data for each timestamp will be drawn when playing the time visualization.'
##    DisplayEachTimestamp = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The time interval to be used by the time slider to animate the map.'
##        #return Interval
##    def _set(self, Interval):
##        u'The time interval to be used by the time slider to animate the map.'
##    DefaultTimeInterval = property(_get, _set, doc = _set.__doc__)
##
##    def TimeReference(self, TimeReference):
##        u'The time reference (time zone information, daylight savings, etc.) associated with the map.'
##        #return 
##

IMapTimeDisplay2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates whether the map has a time-enabled layer that is being updated frequently with new data.')], HRESULT, 'HasLiveData',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the map has a time-enabled layer that is being updated frequently with new data.')], HRESULT, 'HasLiveData',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Time relation used with the time window for the map.')], HRESULT, 'TimeRelation',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriTimeRelation), 'relation' )),
    COMMETHOD(['propput', helpstring(u'Time relation used with the time window for the map.')], HRESULT, 'TimeRelation',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriTimeRelation, 'relation' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether time is displayed on the map. ')], HRESULT, 'ShowTimeOnDisplay',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether time is displayed on the map. ')], HRESULT, 'ShowTimeOnDisplay',
              ( ['in'], VARIANT_BOOL, 'flag' )),
]
################################################################
## code template for IMapTimeDisplay2 implementation
##class IMapTimeDisplay2_Impl(object):
##    def _get(self):
##        u'Indicates whether time is displayed on the map. '
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether time is displayed on the map. '
##    ShowTimeOnDisplay = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Time relation used with the time window for the map.'
##        #return relation
##    def _set(self, relation):
##        u'Time relation used with the time window for the map.'
##    TimeRelation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether the map has a time-enabled layer that is being updated frequently with new data.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether the map has a time-enabled layer that is being updated frequently with new data.'
##    HasLiveData = property(_get, _set, doc = _set.__doc__)
##

IDataGraphTPenProperties._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if line is visible.')], HRESULT, 'Visible',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pVisible' )),
    COMMETHOD(['propput', helpstring(u'Indicates if line is visible.')], HRESULT, 'Visible',
              ( ['in'], VARIANT_BOOL, 'pVisible' )),
    COMMETHOD(['propget', helpstring(u'Width of the line.')], HRESULT, 'Width',
              ( ['retval', 'out'], POINTER(c_int), 'pWidth' )),
    COMMETHOD(['propput', helpstring(u'Width of the line.')], HRESULT, 'Width',
              ( ['in'], c_int, 'pWidth' )),
    COMMETHOD(['propget', helpstring(u'Style of the line.')], HRESULT, 'Style',
              ( ['retval', 'out'], POINTER(esriDataGraphTPenType), 'pType' )),
    COMMETHOD(['propput', helpstring(u'Style of the line.')], HRESULT, 'Style',
              ( ['in'], esriDataGraphTPenType, 'pType' )),
    COMMETHOD(['propget', helpstring(u'Color of the line.')], HRESULT, 'Color',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_COLOR), 'pColor' )),
    COMMETHOD(['propput', helpstring(u'Color of the line.')], HRESULT, 'Color',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_COLOR, 'pColor' )),
]
################################################################
## code template for IDataGraphTPenProperties implementation
##class IDataGraphTPenProperties_Impl(object):
##    def _get(self):
##        u'Color of the line.'
##        #return pColor
##    def _set(self, pColor):
##        u'Color of the line.'
##    Color = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if line is visible.'
##        #return pVisible
##    def _set(self, pVisible):
##        u'Indicates if line is visible.'
##    Visible = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Style of the line.'
##        #return pType
##    def _set(self, pType):
##        u'Style of the line.'
##    Style = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Width of the line.'
##        #return pWidth
##    def _set(self, pWidth):
##        u'Width of the line.'
##    Width = property(_get, _set, doc = _set.__doc__)
##

class LabelEngineLayerProperties(CoClass):
    u'A container for the properties of feature labels.'
    _reg_clsid_ = GUID('{01004145-0D1C-11D2-A26F-080009B6F22B}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
LabelEngineLayerProperties._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IAnnotateProperties, IAnnotateLayerProperties, ILabelEngineLayerProperties, ILabelEngineLayerProperties2, IAnnotateLayerTransformationProperties, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class ACAcetateLayer(CoClass):
    u'ArcIMS container for drawing graphics on top of the map.'
    _reg_clsid_ = GUID('{6C3AD32D-E553-4422-B649-357027F701EB}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
ACAcetateLayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IACLayer, IACAcetateLayer, IACAcetateLayerAdmin, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, IACLayer2]

class ACImageLayer(CoClass):
    u'ArcIMS layer for displaying images.'
    _reg_clsid_ = GUID('{0046627F-7DEF-4AA1-AD72-A1B02B22D39B}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
ACImageLayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IACLayer, IACLayerAdmin, IACImageLayer, IACImageLayerAdmin, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, IACLayer2]

class IFeatureRendererUpdate(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control functionality common to all feature renderers.'
    _iid_ = GUID('{735C4D99-E28D-4AD4-B5B9-A12C1D8319FC}')
    _idlflags_ = ['oleautomation']
IFeatureRendererUpdate._methods_ = [
    COMMETHOD([], HRESULT, 'Update',
              ( ['in'], POINTER(IFeatureLayer), 'pFeatureLayer' )),
]
################################################################
## code template for IFeatureRendererUpdate implementation
##class IFeatureRendererUpdate_Impl(object):
##    def Update(self, pFeatureLayer):
##        '-no docstring-'
##        #return 
##

class ACFeatureLayer(CoClass):
    u'ArcIMS layer for displaying features.'
    _reg_clsid_ = GUID('{5AB8731F-4DB7-44D6-8C27-D94FE9C6528A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
ACFeatureLayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IACLayer, IACLayerAdmin, IACFeatureLayer, IACFeatureLayerAdmin, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, IACLayer2]

IMapTableTimeInfo._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates whether the table supports time.')], HRESULT, 'SupportsTime',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'supports' )),
    COMMETHOD(['propget', helpstring(u'Name of the field that has start time or time instant for a table.')], HRESULT, 'StartTimeFieldName',
              ( ['retval', 'out'], POINTER(BSTR), 'FieldName' )),
    COMMETHOD(['propget', helpstring(u'End time field for the table.')], HRESULT, 'EndTimeFieldName',
              ( ['retval', 'out'], POINTER(BSTR), 'FieldName' )),
    COMMETHOD(['propget', helpstring(u'Time field(s) values format.')], HRESULT, 'TimeValueFormat',
              ( ['retval', 'out'], POINTER(BSTR), 'Format' )),
    COMMETHOD(['propget', helpstring(u'Field that identifies or groups unique objects for which time values are recorded in a table.')], HRESULT, 'TrackIDFieldName',
              ( ['retval', 'out'], POINTER(BSTR), 'TrackIDFieldName' )),
    COMMETHOD(['propget', helpstring(u'Native TimeReference of the contents of the table.')], HRESULT, 'TimeReference',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITimeReference)), 'TimeReference' )),
    COMMETHOD(['propget', helpstring(u'The time extent for all the data in the table.')], HRESULT, 'FullTimeExtent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITimeExtent)), 'TimeExtent' )),
    COMMETHOD(['propget', helpstring(u'Suggested draw time interval for refreshing the table contents.')], HRESULT, 'TimeInterval',
              ( ['retval', 'out'], POINTER(c_double), 'Interval' )),
    COMMETHOD(['propget', helpstring(u'Draw time interval units.')], HRESULT, 'TimeIntervalUnits',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriTimeUnits), 'intervalUnits' )),
]
################################################################
## code template for IMapTableTimeInfo implementation
##class IMapTableTimeInfo_Impl(object):
##    @property
##    def TimeInterval(self):
##        u'Suggested draw time interval for refreshing the table contents.'
##        #return Interval
##
##    @property
##    def TimeValueFormat(self):
##        u'Time field(s) values format.'
##        #return Format
##
##    @property
##    def TimeIntervalUnits(self):
##        u'Draw time interval units.'
##        #return intervalUnits
##
##    @property
##    def SupportsTime(self):
##        u'Indicates whether the table supports time.'
##        #return supports
##
##    @property
##    def StartTimeFieldName(self):
##        u'Name of the field that has start time or time instant for a table.'
##        #return FieldName
##
##    @property
##    def EndTimeFieldName(self):
##        u'End time field for the table.'
##        #return FieldName
##
##    @property
##    def FullTimeExtent(self):
##        u'The time extent for all the data in the table.'
##        #return TimeExtent
##
##    @property
##    def TrackIDFieldName(self):
##        u'Field that identifies or groups unique objects for which time values are recorded in a table.'
##        #return TrackIDFieldName
##
##    @property
##    def TimeReference(self):
##        u'Native TimeReference of the contents of the table.'
##        #return TimeReference
##

class AnnotationVBScriptEngine(CoClass):
    u'An object that parses annotation expressions using VBScript.'
    _reg_clsid_ = GUID('{AA157207-E079-11D2-9F48-00C04F6BC6A5}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
AnnotationVBScriptEngine._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IAnnotationExpressionEngine, ICodedValueAttributes, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

class AnnotateLayerPropertiesCollection(CoClass):
    u'A collection of annotation settings for a feature layer.'
    _reg_clsid_ = GUID('{1D5849F3-0D33-11D2-A26F-080009B6F22B}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
AnnotateLayerPropertiesCollection._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IAnnotateLayerPropertiesCollection, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, IAnnotateLayerPropertiesCollection2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class AnnotationJScriptEngine(CoClass):
    u'An object tha parses annotation expressions using JScript.'
    _reg_clsid_ = GUID('{AA157208-E079-11D2-9F48-00C04F6BC6A5}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
AnnotationJScriptEngine._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IAnnotationExpressionEngine, ICodedValueAttributes, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

class LasDatasetLayer(CoClass):
    u'The Terrain Layer class.'
    _reg_clsid_ = GUID('{431EF9C2-4AC6-4299-B18F-5371FA1A6AA8}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
LasDatasetLayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeoDataset, ILasDatasetLayer, ILayer, ILayerInfo, IIdentify, ILayerExtensions, ILayerPosition, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayFilterManager, ILayerEffects, IDataLayer, IDataLayer2, ILayerDrawSetup, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspaceEvents2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, ILayerGeneralProperties, ILegendInfo, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IConnectionPointContainer]

IIMSSubLayer._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if this layer is included in identify.')], HRESULT, 'CanIdentify',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if this layer is included in identify.')], HRESULT, 'CanIdentify',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'The IMS layer.')], HRESULT, 'IMSLayer',
              ( ['retval', 'out'], POINTER(POINTER(IACLayer)), 'Layer' )),
    COMMETHOD(['propput', helpstring(u'Indicates if this layers symbology has been updated.')], HRESULT, 'SymbologyUpdated',
              ( ['in'], VARIANT_BOOL, 'rhs' )),
]
################################################################
## code template for IIMSSubLayer implementation
##class IIMSSubLayer_Impl(object):
##    def _get(self):
##        u'Indicates if this layer is included in identify.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if this layer is included in identify.'
##    CanIdentify = property(_get, _set, doc = _set.__doc__)
##
##    def _set(self, rhs):
##        u'Indicates if this layers symbology has been updated.'
##    SymbologyUpdated = property(fset = _set, doc = _set.__doc__)
##
##    @property
##    def IMSLayer(self):
##        u'The IMS layer.'
##        #return Layer
##

class AnnotationPythonEngine(CoClass):
    u'An object tha parses annotation expressions using Python Script.'
    _reg_clsid_ = GUID('{BB6721A2-D81A-45E3-7FEF-884DB2B2A905}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
AnnotationPythonEngine._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IAnnotationExpressionEngine, ICodedValueAttributes, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

IImageDescription._methods_ = [
    COMMETHOD(['propget', helpstring(u'The type of image to be generated.')], HRESULT, 'Type',
              ( ['retval', 'out'], POINTER(POINTER(IImageType)), 'imgType' )),
    COMMETHOD(['propput', helpstring(u'The type of image to be generated.')], HRESULT, 'Type',
              ( ['in'], POINTER(IImageType), 'imgType' )),
    COMMETHOD(['propget', helpstring(u'The display characteristics of the image to be generated.')], HRESULT, 'Display',
              ( ['retval', 'out'], POINTER(POINTER(IImageDisplay)), 'imgDisplay' )),
    COMMETHOD(['propput', helpstring(u'The display characteristics of the image to be generated.')], HRESULT, 'Display',
              ( ['in'], POINTER(IImageDisplay), 'imgDisplay' )),
]
################################################################
## code template for IImageDescription implementation
##class IImageDescription_Impl(object):
##    def _get(self):
##        u'The type of image to be generated.'
##        #return imgType
##    def _set(self, imgType):
##        u'The type of image to be generated.'
##    Type = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The display characteristics of the image to be generated.'
##        #return imgDisplay
##    def _set(self, imgDisplay):
##        u'The display characteristics of the image to be generated.'
##    Display = property(_get, _set, doc = _set.__doc__)
##

class BarrierCollection(CoClass):
    u'A collection of objects that act as barriers to label placement.'
    _reg_clsid_ = GUID('{01C12B93-A3FB-11D2-A2FE-080009B6F22B}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
BarrierCollection._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IBarrierCollection]

IACTextSymbol._methods_ = [
    COMMETHOD(['propget', helpstring(u'The font name.')], HRESULT, 'Font',
              ( ['retval', 'out'], POINTER(BSTR), 'Font' )),
    COMMETHOD(['propput', helpstring(u'The font name.')], HRESULT, 'Font',
              ( ['in'], BSTR, 'Font' )),
    COMMETHOD(['propget', helpstring(u'The font style.')], HRESULT, 'FontStyle',
              ( ['retval', 'out'], POINTER(acFontStyle), 'FontStyle' )),
    COMMETHOD(['propput', helpstring(u'The font style.')], HRESULT, 'FontStyle',
              ( ['in'], acFontStyle, 'FontStyle' )),
    COMMETHOD(['propget', helpstring(u'The font size.')], HRESULT, 'FontSize',
              ( ['retval', 'out'], POINTER(c_int), 'FontSize' )),
    COMMETHOD(['propput', helpstring(u'The font size.')], HRESULT, 'FontSize',
              ( ['in'], c_int, 'FontSize' )),
    COMMETHOD(['propget', helpstring(u'The font color.')], HRESULT, 'FontColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'The font color.')], HRESULT, 'FontColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the outline is used.')], HRESULT, 'Outline',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the outline is used.')], HRESULT, 'Outline',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'The outline color.')], HRESULT, 'OutlineColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'The outline color.')], HRESULT, 'OutlineColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the glow is used.')], HRESULT, 'Glowing',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the glow is used.')], HRESULT, 'Glowing',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'The glowing color.')], HRESULT, 'GlowingColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'The glowing color.')], HRESULT, 'GlowingColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the shadow is used.')], HRESULT, 'Shadow',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the shadow is used.')], HRESULT, 'Shadow',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'The shadow color.')], HRESULT, 'ShadowColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'The shadow color.')], HRESULT, 'ShadowColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the background is used.')], HRESULT, 'Blockout',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the background is used.')], HRESULT, 'Blockout',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'The background color.')], HRESULT, 'BlockoutColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'The background color.')], HRESULT, 'BlockoutColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'The interval.')], HRESULT, 'Interval',
              ( ['retval', 'out'], POINTER(c_int), 'Interval' )),
    COMMETHOD(['propput', helpstring(u'The interval.')], HRESULT, 'Interval',
              ( ['in'], c_int, 'Interval' )),
    COMMETHOD(['propget', helpstring(u'The print mode.')], HRESULT, 'PrintMode',
              ( ['retval', 'out'], POINTER(acPrintMode), 'PrintMode' )),
    COMMETHOD(['propput', helpstring(u'The print mode.')], HRESULT, 'PrintMode',
              ( ['in'], acPrintMode, 'PrintMode' )),
]
################################################################
## code template for IACTextSymbol implementation
##class IACTextSymbol_Impl(object):
##    def _get(self):
##        u'The font style.'
##        #return FontStyle
##    def _set(self, FontStyle):
##        u'The font style.'
##    FontStyle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the outline is used.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if the outline is used.'
##    Outline = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The interval.'
##        #return Interval
##    def _set(self, Interval):
##        u'The interval.'
##    Interval = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The shadow color.'
##        #return Color
##    def _set(self, Color):
##        u'The shadow color.'
##    ShadowColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the background is used.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if the background is used.'
##    Blockout = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the glow is used.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if the glow is used.'
##    Glowing = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The background color.'
##        #return Color
##    def _set(self, Color):
##        u'The background color.'
##    BlockoutColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The font size.'
##        #return FontSize
##    def _set(self, FontSize):
##        u'The font size.'
##    FontSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The glowing color.'
##        #return Color
##    def _set(self, Color):
##        u'The glowing color.'
##    GlowingColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The print mode.'
##        #return PrintMode
##    def _set(self, PrintMode):
##        u'The print mode.'
##    PrintMode = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The font color.'
##        #return Color
##    def _set(self, Color):
##        u'The font color.'
##    FontColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the shadow is used.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if the shadow is used.'
##    Shadow = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The font name.'
##        #return Font
##    def _set(self, Font):
##        u'The font name.'
##    Font = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The outline color.'
##        #return Color
##    def _set(self, Color):
##        u'The outline color.'
##    OutlineColor = property(_get, _set, doc = _set.__doc__)
##

class IPointSeriesProperties(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control scatter plot series.'
    _iid_ = GUID('{55963816-2577-48AF-B595-A66BC27FE57B}')
    _idlflags_ = ['oleautomation']
IPointSeriesProperties._methods_ = [
    COMMETHOD(['propget', helpstring(u'Properties of the scatter plot symbol.')], HRESULT, 'SymbolProperties',
              ( ['retval', 'out'], POINTER(POINTER(IDataGraphTSymbolProperties)), 'ppSymbolProps' )),
]
################################################################
## code template for IPointSeriesProperties implementation
##class IPointSeriesProperties_Impl(object):
##    @property
##    def SymbolProperties(self):
##        u'Properties of the scatter plot symbol.'
##        #return ppSymbolProps
##

class IBoxPlotSeriesProperties(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control box plot series.'
    _iid_ = GUID('{781B11E1-E0D6-466D-B431-9764D233A188}')
    _idlflags_ = ['oleautomation']
IBoxPlotSeriesProperties._methods_ = [
    COMMETHOD(['propget', helpstring(u'Length of the whiskers as a function of the Inter-Quartile Range (IQR). Default value is 1.5.')], HRESULT, 'WhiskerLength',
              ( ['retval', 'out'], POINTER(c_double), 'Length' )),
    COMMETHOD(['propput', helpstring(u'Length of the whiskers as a function of the Inter-Quartile Range (IQR). Default value is 1.5.')], HRESULT, 'WhiskerLength',
              ( ['in'], c_double, 'Length' )),
    COMMETHOD(['propget', helpstring(u'Properties of the box symbol for the box plot.')], HRESULT, 'BoxProperties',
              ( ['retval', 'out'], POINTER(POINTER(IDataGraphTSymbolProperties)), 'ppSymbolProps' )),
    COMMETHOD(['propget', helpstring(u'Properties of the whisker symbol for the box plot.')], HRESULT, 'WhiskerProperties',
              ( ['retval', 'out'], POINTER(POINTER(IDataGraphTPenProperties)), 'ppPenProps' )),
    COMMETHOD(['propget', helpstring(u'Properties of the mild outliers symbol.')], HRESULT, 'MildOutlierProperties',
              ( ['retval', 'out'], POINTER(POINTER(IDataGraphTSymbolProperties)), 'ppSymbolProps' )),
    COMMETHOD(['propget', helpstring(u'Properties of the extreme outliers symbol.')], HRESULT, 'ExtremeOutlierProperties',
              ( ['retval', 'out'], POINTER(POINTER(IDataGraphTSymbolProperties)), 'ppSymbolProps' )),
]
################################################################
## code template for IBoxPlotSeriesProperties implementation
##class IBoxPlotSeriesProperties_Impl(object):
##    def _get(self):
##        u'Length of the whiskers as a function of the Inter-Quartile Range (IQR). Default value is 1.5.'
##        #return Length
##    def _set(self, Length):
##        u'Length of the whiskers as a function of the Inter-Quartile Range (IQR). Default value is 1.5.'
##    WhiskerLength = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def WhiskerProperties(self):
##        u'Properties of the whisker symbol for the box plot.'
##        #return ppPenProps
##
##    @property
##    def MildOutlierProperties(self):
##        u'Properties of the mild outliers symbol.'
##        #return ppSymbolProps
##
##    @property
##    def BoxProperties(self):
##        u'Properties of the box symbol for the box plot.'
##        #return ppSymbolProps
##
##    @property
##    def ExtremeOutlierProperties(self):
##        u'Properties of the extreme outliers symbol.'
##        #return ppSymbolProps
##

ICacheStorageInfo._methods_ = [
    COMMETHOD(['propget', helpstring(u'Tile storage format.')], HRESULT, 'StorageFormat',
              ( ['retval', 'out'], POINTER(esriMapCacheStorageFormat), 'pFormat' )),
    COMMETHOD(['propput', helpstring(u'Tile storage format.')], HRESULT, 'StorageFormat',
              ( ['in'], esriMapCacheStorageFormat, 'pFormat' )),
    COMMETHOD(['propget', helpstring(u'Packet tile size')], HRESULT, 'PacketSize',
              ( ['retval', 'out'], POINTER(c_int), 'pPacketSize' )),
    COMMETHOD(['propput', helpstring(u'Packet tile size')], HRESULT, 'PacketSize',
              ( ['in'], c_int, 'pPacketSize' )),
]
################################################################
## code template for ICacheStorageInfo implementation
##class ICacheStorageInfo_Impl(object):
##    def _get(self):
##        u'Packet tile size'
##        #return pPacketSize
##    def _set(self, pPacketSize):
##        u'Packet tile size'
##    PacketSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Tile storage format.'
##        #return pFormat
##    def _set(self, pFormat):
##        u'Tile storage format.'
##    StorageFormat = property(_get, _set, doc = _set.__doc__)
##

IScaleLine._methods_ = [
    COMMETHOD(['propget', helpstring(u'Symbol used to draw the line.')], HRESULT, 'LineSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ILineSymbol)), 'Symbol' )),
    COMMETHOD(['propput', helpstring(u'Symbol used to draw the line.')], HRESULT, 'LineSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ILineSymbol), 'Symbol' )),
]
################################################################
## code template for IScaleLine implementation
##class IScaleLine_Impl(object):
##    def _get(self):
##        u'Symbol used to draw the line.'
##        #return Symbol
##    def _set(self, Symbol):
##        u'Symbol used to draw the line.'
##    LineSymbol = property(_get, _set, doc = _set.__doc__)
##

class LabelEnvironment(CoClass):
    u'An object that works with the labeling environment.'
    _reg_clsid_ = GUID('{76765B96-CE78-11D2-9F36-00C04F6BC6A5}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
LabelEnvironment._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILabelEnvironment]

IAnnotateFeature2._methods_ = [
    COMMETHOD([helpstring(u'Labels a feature based on the properties given.')], HRESULT, 'Label',
              ( ['in'], POINTER(IOverposterProperties), 'overposterProps' ),
              ( ['in'], POINTER(IAnnotateLayerProperties), 'annoLayerProps' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeature), 'Feature' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'pSpatialRef' ),
              ( ['in'], POINTER(IBarrierCollection), 'barrierColl' ),
              ( ['out'], POINTER(POINTER(IElement)), 'placedElement' ),
              ( ['out'], POINTER(POINTER(IElement)), 'unplacedElement' )),
]
################################################################
## code template for IAnnotateFeature2 implementation
##class IAnnotateFeature2_Impl(object):
##    def Label(self, overposterProps, annoLayerProps, Feature, Display, pSpatialRef, barrierColl):
##        u'Labels a feature based on the properties given.'
##        #return placedElement, unplacedElement
##

class MapServerLayer(CoClass):
    u'Provides programmatic access to a map server layer.'
    _reg_clsid_ = GUID('{34D94BB0-3628-4D65-B7FF-4945122F30D5}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
MapServerLayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILayer, IMapServerLayer, ICompositeLayer, ICompositeLayer2, IMapServerGroupLayer, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeoDataset, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, ILayerPosition, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayAdmin, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayAdmin2, ILayerDrawingProperties, ILayerEffects, ILayerInfo, ILayerStatus, IPublishLayer, IIdentify, IIdentify2, IIdentifyGroup, ILayerGeneralProperties, ILayerSymbologyExtents, IDataLayer, ILayerExtensions, ISecureLayer, ISecureLayer2, comtypes.gen._8F0541A3_D5BE_4B3F_A8D9_062D5579E19B_0_10_2.IRasterResamplingControl, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IConnectionPointContainer, IServiceLayerImageFormat, IIdentifyDisplay, IHTMLPopupInfo, IHTMLPopupInfo2, IHTMLPopupIdentify, IHTMLPopupIdentify2, ITimeData, ITimeData2, ITimeDataDisplay]
MapServerLayer._outgoing_interfaces_ = [ILayerEvents]

class ILegendFormat2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control formatting information for a legend.'
    _iid_ = GUID('{9189DA4D-05A6-4746-86B5-4D214B742147}')
    _idlflags_ = ['oleautomation']
ILegendFormat2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if title is visibile.')], HRESULT, 'ShowTitle',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'ShowTitle' )),
    COMMETHOD(['propput', helpstring(u'Indicates if title is visibile.')], HRESULT, 'ShowTitle',
              ( ['in'], VARIANT_BOOL, 'ShowTitle' )),
    COMMETHOD(['propget', helpstring(u'Text symbol used to draw the legend title.')], HRESULT, 'TitleSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol)), 'Symbol' )),
    COMMETHOD(['propput', helpstring(u'Text symbol used to draw the legend title.')], HRESULT, 'TitleSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'Legend title position.')], HRESULT, 'TitlePosition',
              ( ['retval', 'out'], POINTER(esriRectanglePosition), 'pos' )),
    COMMETHOD(['propput', helpstring(u'Legend title position.')], HRESULT, 'TitlePosition',
              ( ['in'], esriRectanglePosition, 'pos' )),
    COMMETHOD(['propget', helpstring(u'Vertical distance in points between title and first legend item.')], HRESULT, 'TitleGap',
              ( ['retval', 'out'], POINTER(c_double), 'Gap' )),
    COMMETHOD(['propput', helpstring(u'Vertical distance in points between title and first legend item.')], HRESULT, 'TitleGap',
              ( ['in'], c_double, 'Gap' )),
    COMMETHOD(['propget', helpstring(u'Vertical distance in points between legend items.')], HRESULT, 'VerticalItemGap',
              ( ['retval', 'out'], POINTER(c_double), 'Gap' )),
    COMMETHOD(['propput', helpstring(u'Vertical distance in points between legend items.')], HRESULT, 'VerticalItemGap',
              ( ['in'], c_double, 'Gap' )),
    COMMETHOD(['propget', helpstring(u'Horizontal distance in points between legend item columns. Used for legends that have more than one column.')], HRESULT, 'HorizontalItemGap',
              ( ['retval', 'out'], POINTER(c_double), 'Gap' )),
    COMMETHOD(['propput', helpstring(u'Horizontal distance in points between legend item columns. Used for legends that have more than one column.')], HRESULT, 'HorizontalItemGap',
              ( ['in'], c_double, 'Gap' )),
    COMMETHOD(['propget', helpstring(u'Vertical distance in points between layer names and the legend graphics that follow.')], HRESULT, 'LayerNameGap',
              ( ['retval', 'out'], POINTER(c_double), 'Gap' )),
    COMMETHOD(['propput', helpstring(u'Vertical distance in points between layer names and the legend graphics that follow.')], HRESULT, 'LayerNameGap',
              ( ['in'], c_double, 'Gap' )),
    COMMETHOD(['propget', helpstring(u'Vertical distance in points between legend groups.')], HRESULT, 'GroupGap',
              ( ['retval', 'out'], POINTER(c_double), 'Gap' )),
    COMMETHOD(['propput', helpstring(u'Vertical distance in points between legend groups.')], HRESULT, 'GroupGap',
              ( ['in'], c_double, 'Gap' )),
    COMMETHOD(['propget', helpstring(u'Vertical distance in points between a heading and the legend graphics that follow.')], HRESULT, 'HeadingGap',
              ( ['retval', 'out'], POINTER(c_double), 'Gap' )),
    COMMETHOD(['propput', helpstring(u'Vertical distance in points between a heading and the legend graphics that follow.')], HRESULT, 'HeadingGap',
              ( ['in'], c_double, 'Gap' )),
    COMMETHOD(['propget', helpstring(u'Horizontal distance in points between labels and descriptions.')], HRESULT, 'TextGap',
              ( ['retval', 'out'], POINTER(c_double), 'Gap' )),
    COMMETHOD(['propput', helpstring(u'Horizontal distance in points between labels and descriptions.')], HRESULT, 'TextGap',
              ( ['in'], c_double, 'Gap' )),
    COMMETHOD(['propget', helpstring(u'Vertical distance in points between patches.')], HRESULT, 'VerticalPatchGap',
              ( ['retval', 'out'], POINTER(c_double), 'Gap' )),
    COMMETHOD(['propput', helpstring(u'Vertical distance in points between patches.')], HRESULT, 'VerticalPatchGap',
              ( ['in'], c_double, 'Gap' )),
    COMMETHOD(['propget', helpstring(u'Horizontal distance in points between a patch and the legend graphics before and after.')], HRESULT, 'HorizontalPatchGap',
              ( ['retval', 'out'], POINTER(c_double), 'Gap' )),
    COMMETHOD(['propput', helpstring(u'Horizontal distance in points between a patch and the legend graphics before and after.')], HRESULT, 'HorizontalPatchGap',
              ( ['in'], c_double, 'Gap' )),
    COMMETHOD(['propget', helpstring(u'Patch width in points.  Can be overridden by the LegendItem.')], HRESULT, 'DefaultPatchWidth',
              ( ['retval', 'out'], POINTER(c_double), 'Width' )),
    COMMETHOD(['propput', helpstring(u'Patch width in points.  Can be overridden by the LegendItem.')], HRESULT, 'DefaultPatchWidth',
              ( ['in'], c_double, 'Width' )),
    COMMETHOD(['propget', helpstring(u'Patch height in points.  Can be overridden by the LegendItem.')], HRESULT, 'DefaultPatchHeight',
              ( ['retval', 'out'], POINTER(c_double), 'Height' )),
    COMMETHOD(['propput', helpstring(u'Patch height in points.  Can be overridden by the LegendItem.')], HRESULT, 'DefaultPatchHeight',
              ( ['in'], c_double, 'Height' )),
    COMMETHOD(['propget', helpstring(u'Line patch.  Can be overridden by the LegendItem.')], HRESULT, 'DefaultLinePatch',
              ( ['retval', 'out'], POINTER(POINTER(ILinePatch)), 'patch' )),
    COMMETHOD(['propput', helpstring(u'Line patch.  Can be overridden by the LegendItem.')], HRESULT, 'DefaultLinePatch',
              ( ['in'], POINTER(ILinePatch), 'patch' )),
    COMMETHOD(['propget', helpstring(u'Area patch.  Can be overridden by the LegendItem.')], HRESULT, 'DefaultAreaPatch',
              ( ['retval', 'out'], POINTER(POINTER(IAreaPatch)), 'patch' )),
    COMMETHOD(['propput', helpstring(u'Area patch.  Can be overridden by the LegendItem.')], HRESULT, 'DefaultAreaPatch',
              ( ['in'], POINTER(IAreaPatch), 'patch' )),
    COMMETHOD([helpstring(u'Multiply all distances, gaps, and size property values on this interface by the specified scale factors.')], HRESULT, 'Scale',
              ( ['in'], c_double, 'xScale' ),
              ( ['in'], c_double, 'yScale' )),
    COMMETHOD(['propget'], HRESULT, 'LabelWidth',
              ( ['retval', 'out'], POINTER(c_double), 'Width' )),
    COMMETHOD(['propput'], HRESULT, 'LabelWidth',
              ( ['in'], c_double, 'Width' )),
    COMMETHOD(['propget'], HRESULT, 'DescriptionWidth',
              ( ['retval', 'out'], POINTER(c_double), 'Width' )),
    COMMETHOD(['propput'], HRESULT, 'DescriptionWidth',
              ( ['in'], c_double, 'Width' )),
]
################################################################
## code template for ILegendFormat2 implementation
##class ILegendFormat2_Impl(object):
##    def _get(self):
##        u'Line patch.  Can be overridden by the LegendItem.'
##        #return patch
##    def _set(self, patch):
##        u'Line patch.  Can be overridden by the LegendItem.'
##    DefaultLinePatch = property(_get, _set, doc = _set.__doc__)
##
##    def Scale(self, xScale, yScale):
##        u'Multiply all distances, gaps, and size property values on this interface by the specified scale factors.'
##        #return 
##
##    def _get(self):
##        '-no docstring-'
##        #return Width
##    def _set(self, Width):
##        '-no docstring-'
##    LabelWidth = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Legend title position.'
##        #return pos
##    def _set(self, pos):
##        u'Legend title position.'
##    TitlePosition = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Patch width in points.  Can be overridden by the LegendItem.'
##        #return Width
##    def _set(self, Width):
##        u'Patch width in points.  Can be overridden by the LegendItem.'
##    DefaultPatchWidth = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Horizontal distance in points between a patch and the legend graphics before and after.'
##        #return Gap
##    def _set(self, Gap):
##        u'Horizontal distance in points between a patch and the legend graphics before and after.'
##    HorizontalPatchGap = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Horizontal distance in points between legend item columns. Used for legends that have more than one column.'
##        #return Gap
##    def _set(self, Gap):
##        u'Horizontal distance in points between legend item columns. Used for legends that have more than one column.'
##    HorizontalItemGap = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Vertical distance in points between patches.'
##        #return Gap
##    def _set(self, Gap):
##        u'Vertical distance in points between patches.'
##    VerticalPatchGap = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Area patch.  Can be overridden by the LegendItem.'
##        #return patch
##    def _set(self, patch):
##        u'Area patch.  Can be overridden by the LegendItem.'
##    DefaultAreaPatch = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Patch height in points.  Can be overridden by the LegendItem.'
##        #return Height
##    def _set(self, Height):
##        u'Patch height in points.  Can be overridden by the LegendItem.'
##    DefaultPatchHeight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Text symbol used to draw the legend title.'
##        #return Symbol
##    def _set(self, Symbol):
##        u'Text symbol used to draw the legend title.'
##    TitleSymbol = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return Width
##    def _set(self, Width):
##        '-no docstring-'
##    DescriptionWidth = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Vertical distance in points between a heading and the legend graphics that follow.'
##        #return Gap
##    def _set(self, Gap):
##        u'Vertical distance in points between a heading and the legend graphics that follow.'
##    HeadingGap = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if title is visibile.'
##        #return ShowTitle
##    def _set(self, ShowTitle):
##        u'Indicates if title is visibile.'
##    ShowTitle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Vertical distance in points between legend items.'
##        #return Gap
##    def _set(self, Gap):
##        u'Vertical distance in points between legend items.'
##    VerticalItemGap = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Horizontal distance in points between labels and descriptions.'
##        #return Gap
##    def _set(self, Gap):
##        u'Horizontal distance in points between labels and descriptions.'
##    TextGap = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Vertical distance in points between layer names and the legend graphics that follow.'
##        #return Gap
##    def _set(self, Gap):
##        u'Vertical distance in points between layer names and the legend graphics that follow.'
##    LayerNameGap = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Vertical distance in points between title and first legend item.'
##        #return Gap
##    def _set(self, Gap):
##        u'Vertical distance in points between title and first legend item.'
##    TitleGap = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Vertical distance in points between legend groups.'
##        #return Gap
##    def _set(self, Gap):
##        u'Vertical distance in points between legend groups.'
##    GroupGap = property(_get, _set, doc = _set.__doc__)
##

class ScaleBarStyleGalleryClass(CoClass):
    u'Use to create new Scale Bar items.'
    _reg_clsid_ = GUID('{61F8CCCD-1813-11D2-87A2-0000F8751720}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
ScaleBarStyleGalleryClass._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IStyleGalleryClass, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IStyleGalleryClass2]

ICacheDatasetInfo._methods_ = [
    COMMETHOD(['propget', helpstring(u'Cache Extent')], HRESULT, 'Extent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'ppCacheExtent' )),
    COMMETHOD(['propputref', helpstring(u'Cache Extent')], HRESULT, 'Extent',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'ppCacheExtent' )),
]
################################################################
## code template for ICacheDatasetInfo implementation
##class ICacheDatasetInfo_Impl(object):
##    def Extent(self, ppCacheExtent):
##        u'Cache Extent'
##        #return 
##

IAnnotationErrorEvents._methods_ = [
    COMMETHOD([helpstring(u'Fired when not all elements could be added to the graphics layer.')], HRESULT, 'ErrorAddingElements'),
    COMMETHOD([helpstring(u'Fired when too many overflow elements are about to be created.')], HRESULT, 'TooManyOverflow',
              ( ['in'], c_int, 'numOverflow' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'addOverflow' )),
]
################################################################
## code template for IAnnotationErrorEvents implementation
##class IAnnotationErrorEvents_Impl(object):
##    def ErrorAddingElements(self):
##        u'Fired when not all elements could be added to the graphics layer.'
##        #return 
##
##    def TooManyOverflow(self, numOverflow):
##        u'Fired when too many overflow elements are about to be created.'
##        #return addOverflow
##

IPatch._methods_ = [
    COMMETHOD(['propget', helpstring(u'Name of the patch.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'Name of the patch.')], HRESULT, 'Name',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'Indicates if aspect ratio of patch is preserved.')], HRESULT, 'PreserveAspectRatio',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if aspect ratio of patch is preserved.')], HRESULT, 'PreserveAspectRatio',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propput', helpstring(u'Patch geometry.')], HRESULT, 'Geometry',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'rhs' )),
    COMMETHOD([helpstring(u'Patch geometry sized to fit the specified bounds.')], HRESULT, 'get_Geometry',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'Bounds' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry)), 'Geometry' )),
]
################################################################
## code template for IPatch implementation
##class IPatch_Impl(object):
##    def _set(self, rhs):
##        u'Patch geometry.'
##    Geometry = property(fset = _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if aspect ratio of patch is preserved.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if aspect ratio of patch is preserved.'
##    PreserveAspectRatio = property(_get, _set, doc = _set.__doc__)
##
##    def get_Geometry(self, Bounds):
##        u'Patch geometry sized to fit the specified bounds.'
##        #return Geometry
##
##    def _get(self):
##        u'Name of the patch.'
##        #return Name
##    def _set(self, Name):
##        u'Name of the patch.'
##    Name = property(_get, _set, doc = _set.__doc__)
##

class SimpleRenderer(CoClass):
    u'A simple renderer where the same symbol is drawn for each feature.'
    _reg_clsid_ = GUID('{F3435801-5779-11D0-98BF-00805F7CED21}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class ISimpleRenderer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a renderer which draws the same symbol for each feature.'
    _iid_ = GUID('{F3435800-5779-11D0-98BF-00805F7CED21}')
    _idlflags_ = ['oleautomation']
class ISizeRenderer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the drawing of sized marker symbols based on field values, expression, or random.'
    _iid_ = GUID('{5BA3418A-4BA5-431A-B879-F2539C7BE5FF}')
    _idlflags_ = ['oleautomation']
SimpleRenderer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ISimpleRenderer, IFeatureRenderer, ILevelRenderer, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySupport, ILegendInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, IRotationRenderer, IRotationRenderer2, ISizeRenderer, ITransparencyRenderer, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayAdmin, ILookupSymbol, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, IExportSupport]

IIMSSymbolImporter._methods_ = [
    COMMETHOD([helpstring(u'Creates a symbol based on the input AXL.')], HRESULT, 'CreateSymbol',
              ( ['in'], BSTR, 'xml' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol)), 'Symbol' )),
]
################################################################
## code template for IIMSSymbolImporter implementation
##class IIMSSymbolImporter_Impl(object):
##    def CreateSymbol(self, xml):
##        u'Creates a symbol based on the input AXL.'
##        #return Symbol
##

class AnnotationExpressionParser(CoClass):
    u'The expression parser handed out by the AnnotationExpressionEngine.'
    _reg_clsid_ = GUID('{789A75DF-041A-439D-B1C2-41403449CF85}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
AnnotationExpressionParser._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IAnnotationExpressionParser, IAnnotationExpressionParser2, ICodedValueAttributes]


# values for enumeration 'esriNorthArrowType'
esriSimpleNorth = 0
esriTrueNorth = 1
esriNorthArrowType = c_int # enum
INorthArrow2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Color used to draw the north arrow.')], HRESULT, 'Color',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'Color used to draw the north arrow.')], HRESULT, 'Color',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'Size of the north arrow in points (1/72 inch).')], HRESULT, 'Size',
              ( ['retval', 'out'], POINTER(c_double), 'pointSize' )),
    COMMETHOD(['propput', helpstring(u'Size of the north arrow in points (1/72 inch).')], HRESULT, 'Size',
              ( ['in'], c_double, 'pointSize' )),
    COMMETHOD(['propget', helpstring(u'The counter-clockwise rotation of the north arrow in degrees.  This value is calculated from the map.')], HRESULT, 'Angle',
              ( ['retval', 'out'], POINTER(c_double), 'degrees' )),
    COMMETHOD(['propget', helpstring(u'Calibration angle.  Rotation is modified by this angle.')], HRESULT, 'CalibrationAngle',
              ( ['retval', 'out'], POINTER(c_double), 'degrees' )),
    COMMETHOD(['propput', helpstring(u'Calibration angle.  Rotation is modified by this angle.')], HRESULT, 'CalibrationAngle',
              ( ['in'], c_double, 'degrees' )),
    COMMETHOD(['propget', helpstring(u'The point on the map where north is calculated.')], HRESULT, 'ReferenceLocation',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint)), 'point' )),
    COMMETHOD(['propputref', helpstring(u'The point on the map where north is calculated.')], HRESULT, 'ReferenceLocation',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'point' )),
    COMMETHOD(['propput', helpstring(u'The type of north arrow.')], HRESULT, 'NorthArrowType',
              ( ['in'], esriNorthArrowType, 'Type' )),
    COMMETHOD(['propget', helpstring(u'The type of north arrow.')], HRESULT, 'NorthArrowType',
              ( ['retval', 'out'], POINTER(esriNorthArrowType), 'Type' )),
]
################################################################
## code template for INorthArrow2 implementation
##class INorthArrow2_Impl(object):
##    @property
##    def Angle(self):
##        u'The counter-clockwise rotation of the north arrow in degrees.  This value is calculated from the map.'
##        #return degrees
##
##    def _get(self):
##        u'Color used to draw the north arrow.'
##        #return Color
##    def _set(self, Color):
##        u'Color used to draw the north arrow.'
##    Color = property(_get, _set, doc = _set.__doc__)
##
##    def ReferenceLocation(self, point):
##        u'The point on the map where north is calculated.'
##        #return 
##
##    def _get(self):
##        u'The type of north arrow.'
##        #return Type
##    def _set(self, Type):
##        u'The type of north arrow.'
##    NorthArrowType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Calibration angle.  Rotation is modified by this angle.'
##        #return degrees
##    def _set(self, degrees):
##        u'Calibration angle.  Rotation is modified by this angle.'
##    CalibrationAngle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Size of the north arrow in points (1/72 inch).'
##        #return pointSize
##    def _set(self, pointSize):
##        u'Size of the north arrow in points (1/72 inch).'
##    Size = property(_get, _set, doc = _set.__doc__)
##

INorthArrow._methods_ = [
    COMMETHOD(['propget', helpstring(u'Color used to draw the north arrow.')], HRESULT, 'Color',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'Color used to draw the north arrow.')], HRESULT, 'Color',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'Size of the north arrow in points (1/72 inch).')], HRESULT, 'Size',
              ( ['retval', 'out'], POINTER(c_double), 'pointSize' )),
    COMMETHOD(['propput', helpstring(u'Size of the north arrow in points (1/72 inch).')], HRESULT, 'Size',
              ( ['in'], c_double, 'pointSize' )),
    COMMETHOD(['propget', helpstring(u'The counter-clockwise rotation of the north arrow in degrees.  This value is calculated from the map.')], HRESULT, 'Angle',
              ( ['retval', 'out'], POINTER(c_double), 'degrees' )),
    COMMETHOD(['propget', helpstring(u'Calibration angle.  Rotation is modified by this angle.')], HRESULT, 'CalibrationAngle',
              ( ['retval', 'out'], POINTER(c_double), 'degrees' )),
    COMMETHOD(['propput', helpstring(u'Calibration angle.  Rotation is modified by this angle.')], HRESULT, 'CalibrationAngle',
              ( ['in'], c_double, 'degrees' )),
    COMMETHOD(['propget', helpstring(u'The point on the map where north is calculated.')], HRESULT, 'ReferenceLocation',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint)), 'point' )),
    COMMETHOD(['propputref', helpstring(u'The point on the map where north is calculated.')], HRESULT, 'ReferenceLocation',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'point' )),
]
################################################################
## code template for INorthArrow implementation
##class INorthArrow_Impl(object):
##    def _get(self):
##        u'Color used to draw the north arrow.'
##        #return Color
##    def _set(self, Color):
##        u'Color used to draw the north arrow.'
##    Color = property(_get, _set, doc = _set.__doc__)
##
##    def ReferenceLocation(self, point):
##        u'The point on the map where north is calculated.'
##        #return 
##
##    @property
##    def Angle(self):
##        u'The counter-clockwise rotation of the north arrow in degrees.  This value is calculated from the map.'
##        #return degrees
##
##    def _get(self):
##        u'Calibration angle.  Rotation is modified by this angle.'
##        #return degrees
##    def _set(self, degrees):
##        u'Calibration angle.  Rotation is modified by this angle.'
##    CalibrationAngle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Size of the north arrow in points (1/72 inch).'
##        #return pointSize
##    def _set(self, pointSize):
##        u'Size of the north arrow in points (1/72 inch).'
##    Size = property(_get, _set, doc = _set.__doc__)
##

class ISDGenerator(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    _iid_ = GUID('{4D74AA56-86A4-49A4-AE46-C1DB8B86A74C}')
    _idlflags_ = ['oleautomation']
ISDGenerator._methods_ = [
    COMMETHOD([], HRESULT, 'Init'),
    COMMETHOD([], HRESULT, 'SetMapServer',
              ( ['in'], POINTER(IMapServer), 'pMapServer' )),
    COMMETHOD([], HRESULT, 'ReadMsd',
              ( ['in'], BSTR, 'pathToMsdFile' )),
    COMMETHOD([], HRESULT, 'GetDescription',
              ( ['in'], BSTR, 'serviceType' ),
              ( ['retval', 'out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'pJsonLayerList' )),
    COMMETHOD([], HRESULT, 'GetLayerDescription',
              ( ['in'], BSTR, 'serviceType' ),
              ( ['in'], c_int, 'ID' ),
              ( ['retval', 'out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'pJsonLayerDescrition' )),
]
################################################################
## code template for ISDGenerator implementation
##class ISDGenerator_Impl(object):
##    def GetLayerDescription(self, serviceType, ID):
##        '-no docstring-'
##        #return pJsonLayerDescrition
##
##    def Init(self):
##        '-no docstring-'
##        #return 
##
##    def ReadMsd(self, pathToMsdFile):
##        '-no docstring-'
##        #return 
##
##    def GetDescription(self, serviceType):
##        '-no docstring-'
##        #return pJsonLayerList
##
##    def SetMapServer(self, pMapServer):
##        '-no docstring-'
##        #return 
##

ITileImageInfo._methods_ = [
    COMMETHOD(['propget', helpstring(u'The cache tile format.')], HRESULT, 'Format',
              ( ['retval', 'out'], POINTER(BSTR), 'pFormat' )),
    COMMETHOD(['propput', helpstring(u'The cache tile format.')], HRESULT, 'Format',
              ( ['in'], BSTR, 'pFormat' )),
    COMMETHOD(['propget', helpstring(u'The cache tile image compression quality.')], HRESULT, 'CompressionQuality',
              ( ['retval', 'out'], POINTER(c_int), 'pQuality' )),
    COMMETHOD(['propput', helpstring(u'The cache tile image compression quality.')], HRESULT, 'CompressionQuality',
              ( ['in'], c_int, 'pQuality' )),
]
################################################################
## code template for ITileImageInfo implementation
##class ITileImageInfo_Impl(object):
##    def _get(self):
##        u'The cache tile image compression quality.'
##        #return pQuality
##    def _set(self, pQuality):
##        u'The cache tile image compression quality.'
##    CompressionQuality = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The cache tile format.'
##        #return pFormat
##    def _set(self, pFormat):
##        u'The cache tile format.'
##    Format = property(_get, _set, doc = _set.__doc__)
##

IFeatureLayerDefinition._methods_ = [
    COMMETHOD(['propget', helpstring(u'Definition query expression for the existing layer.')], HRESULT, 'DefinitionExpression',
              ( ['retval', 'out'], POINTER(BSTR), 'Expression' )),
    COMMETHOD(['propput', helpstring(u'Definition query expression for the existing layer.')], HRESULT, 'DefinitionExpression',
              ( ['in'], BSTR, 'Expression' )),
    COMMETHOD(['propget', helpstring(u'The selection set that defines the subset of features in a selection layer.')], HRESULT, 'DefinitionSelectionSet',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ISelectionSet)), 'SelectionSet' )),
    COMMETHOD([helpstring(u'Creates a new feature layer from the existing layer based on the current selection and the specified query expression.')], HRESULT, 'CreateSelectionLayer',
              ( ['in'], BSTR, 'LayerName' ),
              ( ['in'], VARIANT_BOOL, 'useCurrentSelection' ),
              ( ['in'], BSTR, 'joinTableNames' ),
              ( ['in'], BSTR, 'Expression' ),
              ( ['retval', 'out'], POINTER(POINTER(IFeatureLayer)), 'Layer' )),
    COMMETHOD(['propget', helpstring(u'The current relationship class used to display related fields.')], HRESULT, 'RelationshipClass',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRelationshipClass)), 'relClass' )),
    COMMETHOD(['propputref', helpstring(u'The current relationship class used to display related fields.')], HRESULT, 'RelationshipClass',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRelationshipClass), 'relClass' )),
]
################################################################
## code template for IFeatureLayerDefinition implementation
##class IFeatureLayerDefinition_Impl(object):
##    def _get(self):
##        u'Definition query expression for the existing layer.'
##        #return Expression
##    def _set(self, Expression):
##        u'Definition query expression for the existing layer.'
##    DefinitionExpression = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def DefinitionSelectionSet(self):
##        u'The selection set that defines the subset of features in a selection layer.'
##        #return SelectionSet
##
##    def RelationshipClass(self, relClass):
##        u'The current relationship class used to display related fields.'
##        #return 
##
##    def CreateSelectionLayer(self, LayerName, useCurrentSelection, joinTableNames, Expression):
##        u'Creates a new feature layer from the existing layer based on the current selection and the specified query expression.'
##        #return Layer
##

class CadastralFabricSubLayer(CoClass):
    u'Cadastral Fabric Feature Layer Object.'
    _reg_clsid_ = GUID('{B0144184-09A4-4D5C-A4A7-8602951F7D59}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
CadastralFabricSubLayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ICadastralFabricSubLayer, ICadastralFabricSubLayer2, IFeatureLayer, IFeatureLayer2, IGeoFeatureLayer, ILayer, ILayer2, IFeatureSelection, IFeatureLayerDefinition, IFeatureLayerDefinition2, ITableDefinition, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeoDataset, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySupport, ILegendInfo, ILayerFields, IOrderedLayerFields, IDisplayString, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITableFields, IIdentify, IIdentify2, IDataLayer, IDataLayer2, ILayerDrawingProperties, ILayerInfo, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayAdmin, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayFilterManager, IHyperlinkContainer, IHotlinkContainer, IHotlinkMacro, IHotlinkExpression, ILayerEffects, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataset, IRelationshipClassCollection, IRelationshipClassCollectionEdit, ILayerExtensions, IDisplayTable, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IObjectClassSchemaEvents, IDisplayRelationshipClass, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IMapLevel, ISymbolLevels, IAttributeTable, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IConnectionPointContainer, IFind, ILayerPosition, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITableCapabilities, ITableSelection, IPublishLayer, ITemporaryLayer, ILayerGeneralProperties, ILayerSymbologyExtents, IHTMLPopupInfo, IHTMLPopupInfo2, IHTMLPopupIdentify, IHTMLPopupIdentify2, IIdentifyDisplay, ITimeData, ITimeData2, ITimeDataDisplay, ITimeDimensionDefinition, ITimeDisplayTable, ITimeDisplayTable2, ITimeTableDefinition, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspaceEvents]
CadastralFabricSubLayer._outgoing_interfaces_ = [ILayerEvents, IFeatureLayerSelectionEvents, IDefinitionExpressionEvents]

class IStandardAnnotateMap(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to Esri-default Annotate Map properties.'
    _iid_ = GUID('{716554ED-A703-41B4-BBDD-0CBF06C9BF66}')
    _idlflags_ = ['oleautomation', 'hidden']
IStandardAnnotateMap._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if labels are recorded to the cache whenever the map needs labeling.')], HRESULT, 'RecordLabelsToCache',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if labels are recorded to the cache whenever the map needs labeling.')], HRESULT, 'RecordLabelsToCache',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'The label cache used by the map.')], HRESULT, 'LabelCache',
              ( ['retval', 'out'], POINTER(POINTER(ILabelCache)), 'LabelCache' )),
]
################################################################
## code template for IStandardAnnotateMap implementation
##class IStandardAnnotateMap_Impl(object):
##    def _get(self):
##        u'Indicates if labels are recorded to the cache whenever the map needs labeling.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if labels are recorded to the cache whenever the map needs labeling.'
##    RecordLabelsToCache = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def LabelCache(self):
##        u'The label cache used by the map.'
##        #return LabelCache
##

class ITemporalSearch(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to properties and methods needed to manage searching temporal datasets.'
    _iid_ = GUID('{DF2B7788-6450-4C78-B43F-C80C3C2730CC}')
    _idlflags_ = ['oleautomation']
ITemporalSearch._methods_ = [
    COMMETHOD([helpstring(u'Searches for the last known OIDs in the dataset.')], HRESULT, 'LastKnownOIDs',
              ( ['in'], VARIANT, 'varStartingTime' ),
              ( ['in'], VARIANT, 'varEndingTime' ),
              ( ['retval', 'out'], POINTER(POINTER(IFeatureIDSet)), 'ppiOIDs' )),
    COMMETHOD([helpstring(u'Searches for last known features in the dataset.')], HRESULT, 'LastKnownFeatures',
              ( ['in'], VARIANT, 'varStartingTime' ),
              ( ['in'], VARIANT, 'varEndingTime' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ICursor)), 'ppiCursor' )),
    COMMETHOD([helpstring(u'Queries temporal data within the full temporal extent of the dataset.')], HRESULT, 'QueryTemporalExtent',
              ( ['in', 'out'], POINTER(VARIANT), 'pvarStartTime' ),
              ( ['in', 'out'], POINTER(VARIANT), 'pvarEndTime' )),
]
################################################################
## code template for ITemporalSearch implementation
##class ITemporalSearch_Impl(object):
##    def LastKnownFeatures(self, varStartingTime, varEndingTime):
##        u'Searches for last known features in the dataset.'
##        #return ppiCursor
##
##    def LastKnownOIDs(self, varStartingTime, varEndingTime):
##        u'Searches for the last known OIDs in the dataset.'
##        #return ppiOIDs
##
##    def QueryTemporalExtent(self):
##        u'Queries temporal data within the full temporal extent of the dataset.'
##        #return pvarStartTime, pvarEndTime
##

class CadastralFabricLayer(CoClass):
    u'Cadastral Fabric Layer Object.'
    _reg_clsid_ = GUID('{FA1DCB12-8B9A-48C8-BD46-5D0064B4A1A7}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
CadastralFabricLayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ICadastralFabricLayer, ICadastralFabricParcelLayer, ICadastralFabricSelection, ILayer, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeoDataset, IIdentify, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, ILayerDrawingProperties, ILayerGeneralProperties, ILayerExtensions, ILayerInfo, IDataLayer, IDataLayer2, ILayerEffects, ICompositeLayer, ICompositeLayer2, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IConnectionPointContainer]
CadastralFabricLayer._outgoing_interfaces_ = [ICadastralFabricLayerEvents]

class HotLinkJScriptEngine(CoClass):
    u'An object tha parses hotlink expressions using JScript.'
    _reg_clsid_ = GUID('{03E82E63-A812-49EB-AD12-4D1E1C7ADA7C}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
HotLinkJScriptEngine._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IAnnotationExpressionEngine, ICodedValueAttributes, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

class IPieSeriesProperties(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control pie series.'
    _iid_ = GUID('{AD7A0F73-12A2-4BAC-BEFD-2C65A571D13C}')
    _idlflags_ = ['oleautomation']
IPieSeriesProperties._methods_ = [
    COMMETHOD(['propget', helpstring(u'The percentage of extrusion for the biggest slice.')], HRESULT, 'ExplodeBiggestSlice',
              ( ['retval', 'out'], POINTER(c_int), 'amount' )),
    COMMETHOD(['propput', helpstring(u'The percentage of extrusion for the biggest slice.')], HRESULT, 'ExplodeBiggestSlice',
              ( ['in'], c_int, 'amount' )),
    COMMETHOD(['propget', helpstring(u'The angle of the entire pie display. Valid value range is 1-360 degree.')], HRESULT, 'TotalPieAngle',
              ( ['retval', 'out'], POINTER(c_int), 'degree' )),
    COMMETHOD(['propput', helpstring(u'The angle of the entire pie display. Valid value range is 1-360 degree.')], HRESULT, 'TotalPieAngle',
              ( ['in'], c_int, 'degree' )),
    COMMETHOD(['propget', helpstring(u'The degree in rotating the pie. Valid value range is 0-359 degree.')], HRESULT, 'RotatePie',
              ( ['retval', 'out'], POINTER(c_int), 'degree' )),
    COMMETHOD(['propput', helpstring(u'The degree in rotating the pie. Valid value range is 0-359 degree.')], HRESULT, 'RotatePie',
              ( ['in'], c_int, 'degree' )),
]
################################################################
## code template for IPieSeriesProperties implementation
##class IPieSeriesProperties_Impl(object):
##    def _get(self):
##        u'The degree in rotating the pie. Valid value range is 0-359 degree.'
##        #return degree
##    def _set(self, degree):
##        u'The degree in rotating the pie. Valid value range is 0-359 degree.'
##    RotatePie = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The percentage of extrusion for the biggest slice.'
##        #return amount
##    def _set(self, amount):
##        u'The percentage of extrusion for the biggest slice.'
##    ExplodeBiggestSlice = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The angle of the entire pie display. Valid value range is 1-360 degree.'
##        #return degree
##    def _set(self, degree):
##        u'The angle of the entire pie display. Valid value range is 1-360 degree.'
##    TotalPieAngle = property(_get, _set, doc = _set.__doc__)
##

class HotLinkPythonEngine(CoClass):
    u'An object tha parses hotlink expressions using Python.'
    _reg_clsid_ = GUID('{FF7D30A3-38FA-67D1-780A-BEBB61C0E599}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
HotLinkPythonEngine._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IAnnotationExpressionEngine, ICodedValueAttributes, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

IFeatureCursorBuffer2._methods_ = [
    COMMETHOD(['propputref', helpstring(u'Feature cursor of features to buffer (overrides GraphicsLayer).')], HRESULT, 'FeatureCursor',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureCursor), 'rhs' )),
    COMMETHOD([helpstring(u'Graphics layer of elements to buffer (overrides FeatureCursor).')], HRESULT, 'GraphicsLayer2',
              ( ['in'], POINTER(IGraphicsLayer), 'pGraphicsLayer' ),
              ( ['in'], VARIANT_BOOL, 'Selected' ),
              ( ['out'], POINTER(c_int), 'pSelectedElements' ),
              ( ['out'], POINTER(VARIANT_BOOL), 'bHasPolygons' )),
    COMMETHOD(['propput', helpstring(u'Indicates if overlapping buffered features should be dissolved.')], HRESULT, 'Dissolve',
              ( ['in'], VARIANT_BOOL, 'rhs' )),
    COMMETHOD(['propput', helpstring(u'Constant buffer distance.')], HRESULT, 'ValueDistance',
              ( ['in'], c_double, 'rhs' )),
    COMMETHOD(['propput', helpstring(u'Field specifying distance to buffer on.')], HRESULT, 'FieldDistance',
              ( ['in'], BSTR, 'rhs' )),
    COMMETHOD(['propput', helpstring(u'Multiple rings specifying distance to buffer on.')], HRESULT, 'RingDistance',
              ( ['in'], c_int, 'numberOfRings' ),
              ( ['in'], c_double, 'rhs' )),
    COMMETHOD(['propputref', helpstring(u'Projection of buffered features.')], HRESULT, 'SpatialReference',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'rhs' )),
    COMMETHOD(['propput', helpstring(u'Conversion units, from map units to buffer units.')], HRESULT, 'Units',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits, 'MapUnits' ),
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits, 'rhs' )),
    COMMETHOD(['propput', helpstring(u'Indicates how to buffer polygon features.')], HRESULT, 'PolygonBufferType',
              ( ['in'], esriBufferType, 'rhs' )),
    COMMETHOD(['propputref', helpstring(u'TrackCancel used when buffering.')], HRESULT, 'CancelTrack',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'rhs' )),
    COMMETHOD(['propget', helpstring(u'Enumerator of buffered features.')], HRESULT, 'BufferedGeometry',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnumGeometry)), 'ppEnumGeometry' )),
    COMMETHOD([helpstring(u'Buffers features to a new and existing feature class.')], HRESULT, 'Buffer',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClassName), 'pNewLocationName' )),
    COMMETHOD([helpstring(u'Buffers the selected features and stores them into a composite graphics layer.')], HRESULT, 'BufferToGraphics',
              ( ['in'], POINTER(ICompositeGraphicsLayer), 'pCompositeGraphicsLayer' )),
    COMMETHOD(['propputref', helpstring(u'Specifies the spatial reference system of the source data (calls IFeatureCursorBuffer::SpatialReference()).')], HRESULT, 'SourceSpatialReference',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'rhs' )),
    COMMETHOD(['propputref', helpstring(u'Specifies in which spatial reference system should be buffered.')], HRESULT, 'BufferSpatialReference',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'rhs' )),
    COMMETHOD(['propputref', helpstring(u'Specifies the target spatial reference system.')], HRESULT, 'TargetSpatialReference',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'rhs' )),
    COMMETHOD(['propputref', helpstring(u'Specifies the spatial reference system of the data frame.')], HRESULT, 'DataFrameSpatialReference',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'rhs' )),
]
################################################################
## code template for IFeatureCursorBuffer2 implementation
##class IFeatureCursorBuffer2_Impl(object):
##    def _set(self, rhs):
##        u'Field specifying distance to buffer on.'
##    FieldDistance = property(fset = _set, doc = _set.__doc__)
##
##    def GraphicsLayer2(self, pGraphicsLayer, Selected):
##        u'Graphics layer of elements to buffer (overrides FeatureCursor).'
##        #return pSelectedElements, bHasPolygons
##
##    def BufferSpatialReference(self, rhs):
##        u'Specifies in which spatial reference system should be buffered.'
##        #return 
##
##    def _set(self, numberOfRings, rhs):
##        u'Multiple rings specifying distance to buffer on.'
##    RingDistance = property(fset = _set, doc = _set.__doc__)
##
##    def CancelTrack(self, rhs):
##        u'TrackCancel used when buffering.'
##        #return 
##
##    def _set(self, rhs):
##        u'Indicates how to buffer polygon features.'
##    PolygonBufferType = property(fset = _set, doc = _set.__doc__)
##
##    def _set(self, rhs):
##        u'Constant buffer distance.'
##    ValueDistance = property(fset = _set, doc = _set.__doc__)
##
##    def DataFrameSpatialReference(self, rhs):
##        u'Specifies the spatial reference system of the data frame.'
##        #return 
##
##    def TargetSpatialReference(self, rhs):
##        u'Specifies the target spatial reference system.'
##        #return 
##
##    def SourceSpatialReference(self, rhs):
##        u'Specifies the spatial reference system of the source data (calls IFeatureCursorBuffer::SpatialReference()).'
##        #return 
##
##    def SpatialReference(self, rhs):
##        u'Projection of buffered features.'
##        #return 
##
##    @property
##    def BufferedGeometry(self):
##        u'Enumerator of buffered features.'
##        #return ppEnumGeometry
##
##    def Buffer(self, pNewLocationName):
##        u'Buffers features to a new and existing feature class.'
##        #return 
##
##    def _set(self, MapUnits, rhs):
##        u'Conversion units, from map units to buffer units.'
##    Units = property(fset = _set, doc = _set.__doc__)
##
##    def FeatureCursor(self, rhs):
##        u'Feature cursor of features to buffer (overrides GraphicsLayer).'
##        #return 
##
##    def _set(self, rhs):
##        u'Indicates if overlapping buffered features should be dissolved.'
##    Dissolve = property(fset = _set, doc = _set.__doc__)
##
##    def BufferToGraphics(self, pCompositeGraphicsLayer):
##        u'Buffers the selected features and stores them into a composite graphics layer.'
##        #return 
##


# values for enumeration 'esriDataNormalization'
esriNormalizeByField = 0
esriNormalizeByLog = 1
esriNormalizeByPercentOfTotal = 2
esriNormalizeByArea = 3
esriNormalizeByNothing = 4
esriDataNormalization = c_int # enum
IDataNormalization._methods_ = [
    COMMETHOD(['propget', helpstring(u'Normalization field.')], HRESULT, 'NormalizationField',
              ( ['retval', 'out'], POINTER(BSTR), 'FieldName' )),
    COMMETHOD(['propput', helpstring(u'Normalization field.')], HRESULT, 'NormalizationField',
              ( ['in'], BSTR, 'FieldName' )),
    COMMETHOD(['propget', helpstring(u'Normalization field alias.')], HRESULT, 'NormalizationFieldAlias',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'Normalization field alias.')], HRESULT, 'NormalizationFieldAlias',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'Normalization type.')], HRESULT, 'NormalizationType',
              ( ['retval', 'out'], POINTER(esriDataNormalization), 'Type' )),
    COMMETHOD(['propput', helpstring(u'Normalization type.')], HRESULT, 'NormalizationType',
              ( ['in'], esriDataNormalization, 'Type' )),
    COMMETHOD(['propget', helpstring(u'Total of all values (used when normalizing by percent of total).')], HRESULT, 'NormalizationTotal',
              ( ['retval', 'out'], POINTER(c_double), 'Value' )),
    COMMETHOD(['propput', helpstring(u'Total of all values (used when normalizing by percent of total).')], HRESULT, 'NormalizationTotal',
              ( ['in'], c_double, 'Value' )),
]
################################################################
## code template for IDataNormalization implementation
##class IDataNormalization_Impl(object):
##    def _get(self):
##        u'Normalization field alias.'
##        #return Name
##    def _set(self, Name):
##        u'Normalization field alias.'
##    NormalizationFieldAlias = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Total of all values (used when normalizing by percent of total).'
##        #return Value
##    def _set(self, Value):
##        u'Total of all values (used when normalizing by percent of total).'
##    NormalizationTotal = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Normalization type.'
##        #return Type
##    def _set(self, Type):
##        u'Normalization type.'
##    NormalizationType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Normalization field.'
##        #return FieldName
##    def _set(self, FieldName):
##        u'Normalization field.'
##    NormalizationField = property(_get, _set, doc = _set.__doc__)
##

IMapCooker2._methods_ = [
    COMMETHOD(['propget', helpstring(u'The map cache tile image info.')], HRESULT, 'TileImageInfo',
              ( ['retval', 'out'], POINTER(POINTER(ITileImageInfo)), 'ppInfo' )),
    COMMETHOD(['propputref', helpstring(u'The map cache tile image info.')], HRESULT, 'TileImageInfo',
              ( ['in'], POINTER(ITileImageInfo), 'ppInfo' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the service is cached on demand.')], HRESULT, 'CacheOnDemand',
              ( ['in'], VARIANT_BOOL, 'pCacheOnDemand' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the service is cached on demand.')], HRESULT, 'CacheOnDemand',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pCacheOnDemand' )),
    COMMETHOD([helpstring(u'Writes the tiling scheme for the service.')], HRESULT, 'WriteTilingScheme',
              ( ['in'], POINTER(ITileCacheInfo), 'pCacheInfo' ),
              ( ['in'], POINTER(ITileImageInfo), 'pTileImageInfo' ),
              ( ['in'], BSTR, 'cacheDir' ),
              ( ['in'], BSTR, 'LayerName' )),
    COMMETHOD([helpstring(u"Updates Map Server's Cache Scales.")], HRESULT, 'UpdateMapServerCacheScales',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray), 'pScales' )),
    COMMETHOD([helpstring(u'Deletes cache for a given layer within a given extent.')], HRESULT, 'DeleteByExtent',
              ( ['in'], POINTER(IMap), 'pMap' ),
              ( ['in'], POINTER(ILayer), 'pLayer' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'pExtent' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'pLevels' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' )),
    COMMETHOD([helpstring(u'Deletes cache for a given layer within a given extent.')], HRESULT, 'UpdateByGeometry',
              ( ['in'], POINTER(IMap), 'pMap' ),
              ( ['in'], POINTER(ILayer), 'pLayer' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'pDisplay' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'pGeometry' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'pLevels' ),
              ( ['in'], esriMapCacheUpdateMode, 'UpdateMode' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' )),
    COMMETHOD([helpstring(u'number of tiles processed in the current job')], HRESULT, 'GetStatusTileCount',
              ( ['out'], POINTER(c_int), 'pTileCount' )),
]
################################################################
## code template for IMapCooker2 implementation
##class IMapCooker2_Impl(object):
##    def DeleteByExtent(self, pMap, pLayer, pExtent, pLevels, pTrackCancel):
##        u'Deletes cache for a given layer within a given extent.'
##        #return 
##
##    def UpdateByGeometry(self, pMap, pLayer, pDisplay, pGeometry, pLevels, UpdateMode, pTrackCancel):
##        u'Deletes cache for a given layer within a given extent.'
##        #return 
##
##    def _get(self):
##        u'Indicates if the service is cached on demand.'
##        #return pCacheOnDemand
##    def _set(self, pCacheOnDemand):
##        u'Indicates if the service is cached on demand.'
##    CacheOnDemand = property(_get, _set, doc = _set.__doc__)
##
##    def GetStatusTileCount(self):
##        u'number of tiles processed in the current job'
##        #return pTileCount
##
##    def UpdateMapServerCacheScales(self, pScales):
##        u"Updates Map Server's Cache Scales."
##        #return 
##
##    def WriteTilingScheme(self, pCacheInfo, pTileImageInfo, cacheDir, LayerName):
##        u'Writes the tiling scheme for the service.'
##        #return 
##
##    def TileImageInfo(self, ppInfo):
##        u'The map cache tile image info.'
##        #return 
##

IBivariateRenderer._methods_ = [
    COMMETHOD(['propget', helpstring(u'Main renderer of a bivariate renderer.')], HRESULT, 'MainRenderer',
              ( ['retval', 'out'], POINTER(POINTER(IFeatureRenderer)), 'Renderer' )),
    COMMETHOD(['propputref', helpstring(u'Main renderer of a bivariate renderer.')], HRESULT, 'MainRenderer',
              ( ['in'], POINTER(IFeatureRenderer), 'Renderer' )),
    COMMETHOD(['propget', helpstring(u'Variation renderer of a bivariate renderer.')], HRESULT, 'VariationRenderer',
              ( ['retval', 'out'], POINTER(POINTER(IFeatureRenderer)), 'Renderer' )),
    COMMETHOD(['propputref', helpstring(u'Variation renderer of a bivariate renderer.')], HRESULT, 'VariationRenderer',
              ( ['in'], POINTER(IFeatureRenderer), 'Renderer' )),
    COMMETHOD([helpstring(u'Creates the legend.  Call after all properties are set.')], HRESULT, 'CreateLegend'),
]
################################################################
## code template for IBivariateRenderer implementation
##class IBivariateRenderer_Impl(object):
##    def CreateLegend(self):
##        u'Creates the legend.  Call after all properties are set.'
##        #return 
##
##    def VariationRenderer(self, Renderer):
##        u'Variation renderer of a bivariate renderer.'
##        #return 
##
##    def MainRenderer(self, Renderer):
##        u'Main renderer of a bivariate renderer.'
##        #return 
##

IMarkerNorthArrow._methods_ = [
    COMMETHOD(['propget', helpstring(u'Symbol used to draw the north arrow.  Use set to specify a marker for custom north arrows.')], HRESULT, 'MarkerSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IMarkerSymbol)), 'marker' )),
    COMMETHOD(['propput', helpstring(u'Symbol used to draw the north arrow.  Use set to specify a marker for custom north arrows.')], HRESULT, 'MarkerSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IMarkerSymbol), 'marker' )),
]
################################################################
## code template for IMarkerNorthArrow implementation
##class IMarkerNorthArrow_Impl(object):
##    def _get(self):
##        u'Symbol used to draw the north arrow.  Use set to specify a marker for custom north arrows.'
##        #return marker
##    def _set(self, marker):
##        u'Symbol used to draw the north arrow.  Use set to specify a marker for custom north arrows.'
##    MarkerSymbol = property(_get, _set, doc = _set.__doc__)
##

IIMSGlobeXMLNode._methods_ = [
    COMMETHOD(['propget', helpstring(u'The number of children nodes.')], HRESULT, 'NumChildren',
              ( ['retval', 'out'], POINTER(c_int), 'num' )),
    COMMETHOD(['propget', helpstring(u'The tag of this node.')], HRESULT, 'XmlTag',
              ( ['retval', 'out'], POINTER(BSTR), 'Tag' )),
    COMMETHOD(['propget', helpstring(u'The number of attributes for this node.')], HRESULT, 'NumAttrib',
              ( ['retval', 'out'], POINTER(c_int), 'num' )),
    COMMETHOD(['propget', helpstring(u'The reference to the child at pos i.')], HRESULT, 'ChildByIndex',
              ( ['in'], c_int, 'i' ),
              ( ['retval', 'out'], POINTER(POINTER(IIMSGlobeXMLNode)), 'node' )),
    COMMETHOD(['propget', helpstring(u'The reference to the child based on its tag name.')], HRESULT, 'ChildByName',
              ( ['in'], BSTR, 'tagName' ),
              ( ['retval', 'out'], POINTER(POINTER(IIMSGlobeXMLNode)), 'node' )),
    COMMETHOD(['propget', helpstring(u"The attribute number i's name.")], HRESULT, 'AttribName',
              ( ['in'], c_int, 'pos' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propget', helpstring(u"The attribute number i's value.")], HRESULT, 'AttribValueByIndex',
              ( ['in'], c_int, 'pos' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Value' )),
    COMMETHOD(['propput', helpstring(u"The attribute number i's value.")], HRESULT, 'AttribValueByIndex',
              ( ['in'], c_int, 'pos' ),
              ( ['in'], BSTR, 'Value' )),
    COMMETHOD([helpstring(u'Adds a child node to the end of the list.')], HRESULT, 'AddChild',
              ( ['in'], POINTER(IIMSGlobeXMLNode), 'node' )),
    COMMETHOD([helpstring(u'Adds a blank attribute to the list of attributes.')], HRESULT, 'AddBlankAttrib',
              ( ['retval', 'out'], POINTER(c_int), 'num' )),
    COMMETHOD([helpstring(u'Deletes a child at position.')], HRESULT, 'DeleteChild',
              ( ['in'], c_int, 'num' )),
    COMMETHOD(['propput', helpstring(u"The attribute number i's name.")], HRESULT, 'AttribName',
              ( ['in'], c_int, 'pos' ),
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propput', helpstring(u'The attribute value by name.')], HRESULT, 'AttribValueByName',
              ( [], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Value' )),
    COMMETHOD(['propput', helpstring(u'The tag of this node.')], HRESULT, 'XmlTag',
              ( ['in'], BSTR, 'Tag' )),
    COMMETHOD(['propget', helpstring(u'Makes a copy of input -- except children.')], HRESULT, 'ShallowClone',
              ( ['retval', 'out'], POINTER(POINTER(IIMSGlobeXMLNode)), 'node' )),
    COMMETHOD(['propget', helpstring(u'Makes a copy of input -- including children.')], HRESULT, 'DeepClone',
              ( ['retval', 'out'], POINTER(POINTER(IIMSGlobeXMLNode)), 'node' )),
    COMMETHOD([helpstring(u'Parse the nodes from an input string.')], HRESULT, 'Parse',
              ( ['in'], BSTR, 'xmlStrOrig' )),
    COMMETHOD([helpstring(u'Outputs an xml string representation of the internal node representation.')], HRESULT, 'MakeXmlStr',
              ( ['retval', 'out'], POINTER(BSTR), 'xmlStr' )),
    COMMETHOD([helpstring(u'Add an attibute to the node.')], HRESULT, 'AddFullAttrib',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Value' ),
              ( ['retval', 'out'], POINTER(c_int), 'pos' )),
    COMMETHOD(['propget', helpstring(u'The attribute value by name.')], HRESULT, 'AttribValueByName',
              ( ['in'], BSTR, 'Name' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Value' )),
    COMMETHOD(['propget', helpstring(u'The node for which the specified attrib is present and equal to value: if value is null then the first node with name is returned.')], HRESULT, 'ChildByAttribNameValue',
              ( ['in'], BSTR, 'AttribName' ),
              ( ['in'], BSTR, 'atttribValue' ),
              ( ['retval', 'out'], POINTER(POINTER(IIMSGlobeXMLNode)), 'node' )),
    COMMETHOD(['propget', helpstring(u'Traverses the tree to find the highest node in the tree that matched the searchString.')], HRESULT, 'HighestNode',
              ( ['in'], BSTR, 'searchString' ),
              ( ['retval', 'out'], POINTER(POINTER(IIMSGlobeXMLNode)), 'node' )),
]
################################################################
## code template for IIMSGlobeXMLNode implementation
##class IIMSGlobeXMLNode_Impl(object):
##    def MakeXmlStr(self):
##        u'Outputs an xml string representation of the internal node representation.'
##        #return xmlStr
##
##    def AddChild(self, node):
##        u'Adds a child node to the end of the list.'
##        #return 
##
##    def _get(self):
##        u'The tag of this node.'
##        #return Tag
##    def _set(self, Tag):
##        u'The tag of this node.'
##    XmlTag = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def NumAttrib(self):
##        u'The number of attributes for this node.'
##        #return num
##
##    def Parse(self, xmlStrOrig):
##        u'Parse the nodes from an input string.'
##        #return 
##
##    @property
##    def ChildByIndex(self, i):
##        u'The reference to the child at pos i.'
##        #return node
##
##    @property
##    def DeepClone(self):
##        u'Makes a copy of input -- including children.'
##        #return node
##
##    @property
##    def NumChildren(self):
##        u'The number of children nodes.'
##        #return num
##
##    def _get(self, pos):
##        u"The attribute number i's name."
##        #return Name
##    def _set(self, pos, Name):
##        u"The attribute number i's name."
##    AttribName = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def ShallowClone(self):
##        u'Makes a copy of input -- except children.'
##        #return node
##
##    @property
##    def HighestNode(self, searchString):
##        u'Traverses the tree to find the highest node in the tree that matched the searchString.'
##        #return node
##
##    def AddFullAttrib(self, Name, Value):
##        u'Add an attibute to the node.'
##        #return pos
##
##    @property
##    def ChildByAttribNameValue(self, AttribName, atttribValue):
##        u'The node for which the specified attrib is present and equal to value: if value is null then the first node with name is returned.'
##        #return node
##
##    def AddBlankAttrib(self):
##        u'Adds a blank attribute to the list of attributes.'
##        #return num
##
##    def _get(self, pos):
##        u"The attribute number i's value."
##        #return Value
##    def _set(self, pos, Value):
##        u"The attribute number i's value."
##    AttribValueByIndex = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def ChildByName(self, tagName):
##        u'The reference to the child based on its tag name.'
##        #return node
##
##    def _get(self, Name):
##        u'The attribute value by name.'
##        #return Value
##    def _set(self, Name, Value):
##        u'The attribute value by name.'
##    AttribValueByName = property(_get, _set, doc = _set.__doc__)
##
##    def DeleteChild(self, num):
##        u'Deletes a child at position.'
##        #return 
##

class IAreaSeriesProperties(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control area series.'
    _iid_ = GUID('{11DC96FC-533A-4D13-8C0F-564801BF00A8}')
    _idlflags_ = ['oleautomation']
IAreaSeriesProperties._methods_ = [
    COMMETHOD(['propget', helpstring(u'Type of multiple area-series graph.')], HRESULT, 'MultipleAreaType',
              ( ['retval', 'out'], POINTER(esriMultiAreaType), 'Type' )),
    COMMETHOD(['propput', helpstring(u'Type of multiple area-series graph.')], HRESULT, 'MultipleAreaType',
              ( ['in'], esriMultiAreaType, 'Type' )),
    COMMETHOD(['propget', helpstring(u'Indicates if area series is in "stair" mode.')], HRESULT, 'Stairs',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'bStairs' )),
    COMMETHOD(['propput', helpstring(u'Indicates if area series is in "stair" mode.')], HRESULT, 'Stairs',
              ( ['in'], VARIANT_BOOL, 'bStairs' )),
    COMMETHOD(['propget', helpstring(u'Transparency level of area graph.')], HRESULT, 'Transparency',
              ( ['retval', 'out'], POINTER(c_int), 'pValue' )),
    COMMETHOD(['propput', helpstring(u'Transparency level of area graph.')], HRESULT, 'Transparency',
              ( ['in'], c_int, 'pValue' )),
    COMMETHOD(['propget', helpstring(u'Indicates if "stair" mode area series is inverted.')], HRESULT, 'StairsInvert',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'bInvert' )),
    COMMETHOD(['propput', helpstring(u'Indicates if "stair" mode area series is inverted.')], HRESULT, 'StairsInvert',
              ( ['in'], VARIANT_BOOL, 'bInvert' )),
]
################################################################
## code template for IAreaSeriesProperties implementation
##class IAreaSeriesProperties_Impl(object):
##    def _get(self):
##        u'Indicates if area series is in "stair" mode.'
##        #return bStairs
##    def _set(self, bStairs):
##        u'Indicates if area series is in "stair" mode.'
##    Stairs = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if "stair" mode area series is inverted.'
##        #return bInvert
##    def _set(self, bInvert):
##        u'Indicates if "stair" mode area series is inverted.'
##    StairsInvert = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Transparency level of area graph.'
##        #return pValue
##    def _set(self, pValue):
##        u'Transparency level of area graph.'
##    Transparency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Type of multiple area-series graph.'
##        #return Type
##    def _set(self, Type):
##        u'Type of multiple area-series graph.'
##    MultipleAreaType = property(_get, _set, doc = _set.__doc__)
##

class UniqueValueRenderer(CoClass):
    u'A unique values renderer where symbols are assigned to features based on an unique attribute values.'
    _reg_clsid_ = GUID('{C3346D29-B2BC-11D1-8817-080009EC732A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
UniqueValueRenderer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IUniqueValueRenderer, IUniqueValueRenderer2, IFeatureRenderer, IFeatureRendererUpdate, ILevelRenderer, ILegendInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, IRendererClasses, IRotationRenderer, IRotationRenderer2, ISizeRenderer, ITransparencyRenderer, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayAdmin, ILookupSymbol, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, IExportSupport, ILookupLegendClass]

class ILineSeriesProperties(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control line series.'
    _iid_ = GUID('{9EBD4EF8-AA1D-40A6-871E-C5CFF1A6CE54}')
    _idlflags_ = ['oleautomation']
ILineSeriesProperties._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if line series is in "stair" mode.')], HRESULT, 'Stairs',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'bStairs' )),
    COMMETHOD(['propput', helpstring(u'Indicates if line series is in "stair" mode.')], HRESULT, 'Stairs',
              ( ['in'], VARIANT_BOOL, 'bStairs' )),
    COMMETHOD(['propget', helpstring(u'Indicates if "stair" mode line series is inverted.')], HRESULT, 'StairsInvert',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'bInvert' )),
    COMMETHOD(['propput', helpstring(u'Indicates if "stair" mode line series is inverted.')], HRESULT, 'StairsInvert',
              ( ['in'], VARIANT_BOOL, 'bInvert' )),
    COMMETHOD(['propget', helpstring(u'Symbol properties to draw data points of the line.')], HRESULT, 'SymbolProperties',
              ( ['retval', 'out'], POINTER(POINTER(IDataGraphTSymbolProperties)), 'ppSymbolProps' )),
]
################################################################
## code template for ILineSeriesProperties implementation
##class ILineSeriesProperties_Impl(object):
##    @property
##    def SymbolProperties(self):
##        u'Symbol properties to draw data points of the line.'
##        #return ppSymbolProps
##
##    def _get(self):
##        u'Indicates if line series is in "stair" mode.'
##        #return bStairs
##    def _set(self, bStairs):
##        u'Indicates if line series is in "stair" mode.'
##    Stairs = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if "stair" mode line series is inverted.'
##        #return bInvert
##    def _set(self, bInvert):
##        u'Indicates if "stair" mode line series is inverted.'
##    StairsInvert = property(_get, _set, doc = _set.__doc__)
##

class ITileImageInfo2(ITileImageInfo):
    _case_insensitive_ = True
    u'Provides access to members that provide the tile cache info.'
    _iid_ = GUID('{5C65903B-9BAD-4D7F-BDA0-105BB2376105}')
    _idlflags_ = ['oleautomation']
ITileImageInfo2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if Antialiasing is set.')], HRESULT, 'Antialiasing',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pAntialiasing' )),
    COMMETHOD(['propput', helpstring(u'Indicates if Antialiasing is set.')], HRESULT, 'Antialiasing',
              ( ['in'], VARIANT_BOOL, 'pAntialiasing' )),
]
################################################################
## code template for ITileImageInfo2 implementation
##class ITileImageInfo2_Impl(object):
##    def _get(self):
##        u'Indicates if Antialiasing is set.'
##        #return pAntialiasing
##    def _set(self, pAntialiasing):
##        u'Indicates if Antialiasing is set.'
##    Antialiasing = property(_get, _set, doc = _set.__doc__)
##

class IMSMapLayer(CoClass):
    u'A container for the display and manipulation of IMS layers.'
    _reg_clsid_ = GUID('{DC850600-D521-11D3-9FF4-00C04F6BC6A5}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
IMSMapLayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IIMSMapLayer, ILayer, ICompositeLayer, ICompositeLayer2, IIdentify, IIdentify2, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeoDataset, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayAdmin, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayAdmin2, ILayerPosition, IDataLayer, IDataLayer2, ILayerDrawingProperties, ILayerEffects, ILayerInfo, ILayerStatus, IPublishLayer, ILayerExtensions, ILayerGeneralProperties, IIdentifyGroup, ISecureLayer, ISecureLayer2, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IConnectionPointContainer, IServiceLayerImageFormat]
IMSMapLayer._outgoing_interfaces_ = [ILayerEvents]

IAnnotateFeature._methods_ = [
    COMMETHOD([helpstring(u'Labels a feature based on the properties given.')], HRESULT, 'Label',
              ( ['in'], POINTER(IAnnotateLayerProperties), 'annoLayerProps' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeature), 'Feature' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'pSpatialRef' ),
              ( ['in'], POINTER(IBarrierCollection), 'barrierColl' ),
              ( ['out'], POINTER(POINTER(IElement)), 'placedElement' ),
              ( ['out'], POINTER(POINTER(IElement)), 'unplacedElement' )),
]
################################################################
## code template for IAnnotateFeature implementation
##class IAnnotateFeature_Impl(object):
##    def Label(self, annoLayerProps, Feature, Display, pSpatialRef, barrierColl):
##        u'Labels a feature based on the properties given.'
##        #return placedElement, unplacedElement
##

class IMapCooker3(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to more members that controls a map cache generator.'
    _iid_ = GUID('{B77D1A50-AEF0-4150-ADD4-E5D1BC4177D4}')
    _idlflags_ = ['oleautomation']
IMapCooker3._methods_ = [
    COMMETHOD(['propget', helpstring(u'The map cache storage info.')], HRESULT, 'CacheStorageInfo',
              ( ['retval', 'out'], POINTER(POINTER(ICacheStorageInfo)), 'ppInfo' )),
    COMMETHOD(['propputref', helpstring(u'The map cache storage info.')], HRESULT, 'CacheStorageInfo',
              ( ['in'], POINTER(ICacheStorageInfo), 'ppInfo' )),
    COMMETHOD(['propget', helpstring(u'The map cache dataset info.')], HRESULT, 'CacheDatasetInfo',
              ( ['retval', 'out'], POINTER(POINTER(ICacheDatasetInfo)), 'ppInfo' )),
    COMMETHOD(['propputref', helpstring(u'The map cache dataset info.')], HRESULT, 'CacheDatasetInfo',
              ( ['in'], POINTER(ICacheDatasetInfo), 'ppInfo' )),
    COMMETHOD([helpstring(u'Writes the tiling scheme for the service.')], HRESULT, 'WriteTilingSchemeEx',
              ( ['in'], POINTER(ITileCacheInfo), 'pCacheInfo' ),
              ( ['in'], POINTER(ITileImageInfo), 'pTileImageInfo' ),
              ( ['in'], POINTER(ICacheStorageInfo), 'pCacheStorageInfo' ),
              ( ['in'], POINTER(ICacheDatasetInfo), 'pCacheDatasetInfo' ),
              ( ['in'], BSTR, 'cacheDir' ),
              ( ['in'], BSTR, 'LayerName' )),
    COMMETHOD([helpstring(u'Cleans up the state of current caching job.')], HRESULT, 'CleanUPState',
              ( ['in'], POINTER(IUnknown), 'pMapOrMapServerInfo' ),
              ( ['in'], POINTER(IUnknown), 'pLayerOrMapLayerInfo' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'pGeometry' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'pLevels' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' )),
]
################################################################
## code template for IMapCooker3 implementation
##class IMapCooker3_Impl(object):
##    def CacheStorageInfo(self, ppInfo):
##        u'The map cache storage info.'
##        #return 
##
##    def CleanUPState(self, pMapOrMapServerInfo, pLayerOrMapLayerInfo, pGeometry, pLevels, pTrackCancel):
##        u'Cleans up the state of current caching job.'
##        #return 
##
##    def CacheDatasetInfo(self, ppInfo):
##        u'The map cache dataset info.'
##        #return 
##
##    def WriteTilingSchemeEx(self, pCacheInfo, pTileImageInfo, pCacheStorageInfo, pCacheDatasetInfo, cacheDir, LayerName):
##        u'Writes the tiling scheme for the service.'
##        #return 
##

IDataSampling._methods_ = [
    COMMETHOD(['propget', helpstring(u'Maximum sample size.')], HRESULT, 'MaxSampleSize',
              ( ['retval', 'out'], POINTER(c_int), 'Size' )),
    COMMETHOD(['propput', helpstring(u'Maximum sample size.')], HRESULT, 'MaxSampleSize',
              ( ['in'], c_int, 'Size' )),
    COMMETHOD(['propget', helpstring(u'Data sampling method.')], HRESULT, 'SamplingMethod',
              ( ['retval', 'out'], POINTER(esriDataSampling), 'Method' )),
    COMMETHOD(['propput', helpstring(u'Data sampling method.')], HRESULT, 'SamplingMethod',
              ( ['in'], esriDataSampling, 'Method' )),
]
################################################################
## code template for IDataSampling implementation
##class IDataSampling_Impl(object):
##    def _get(self):
##        u'Maximum sample size.'
##        #return Size
##    def _set(self, Size):
##        u'Maximum sample size.'
##    MaxSampleSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Data sampling method.'
##        #return Method
##    def _set(self, Method):
##        u'Data sampling method.'
##    SamplingMethod = property(_get, _set, doc = _set.__doc__)
##

class IDataObjectArray(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Array of DataObject elements'
    _iid_ = GUID('{A7BB80A0-07B3-434C-A8E8-7B413008B13D}')
    _idlflags_ = ['oleautomation']
IDataObjectArray._methods_ = [
    COMMETHOD(['propget', helpstring(u'Data Object count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The Data Object at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IDataObjectEx)), 'DataObject' )),
    COMMETHOD([helpstring(u'Removes the Data Object at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all Data Objects.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Adds a DataObject.')], HRESULT, 'Add',
              ( ['in'], POINTER(IDataObjectEx), 'DataObject' )),
    COMMETHOD([helpstring(u'Adds a Data Object at the specified position.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(IDataObjectEx), 'DataObject' )),
]
################################################################
## code template for IDataObjectArray implementation
##class IDataObjectArray_Impl(object):
##    @property
##    def Count(self):
##        u'Data Object count.'
##        #return Count
##
##    def Insert(self, Index, DataObject):
##        u'Adds a Data Object at the specified position.'
##        #return 
##
##    def Remove(self, Index):
##        u'Removes the Data Object at the specified position.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'The Data Object at the specified position.'
##        #return DataObject
##
##    def RemoveAll(self):
##        u'Removes all Data Objects.'
##        #return 
##
##    def Add(self, DataObject):
##        u'Adds a DataObject.'
##        #return 
##

class IRealTimeFeed(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to basic properties of RealTimeFeed.'
    _iid_ = GUID('{57736C36-7C6E-4C58-B8CB-B1EFB385B47C}')
    _idlflags_ = ['oleautomation']
class esriGpsSatelliteData(Structure):
    _recordinfo_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2, 0L, '{6A9A485D-8925-4EAD-A217-CEE4FDA8CA98}')
IRealTimeFeed._methods_ = [
    COMMETHOD([helpstring(u"Starts the real-time feed. If failed and sets error information in 'ConnectionError'.")], HRESULT, 'Start'),
    COMMETHOD([helpstring(u'Stops the real-time feed.')], HRESULT, 'Stop'),
    COMMETHOD(['propget', helpstring(u'The spatial reference of the real-time feed.')], HRESULT, 'SpatialReference',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference)), 'ppSpatialReference' )),
    COMMETHOD(['propputref', helpstring(u'The spatial reference of the real-time feed.')], HRESULT, 'SpatialReference',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'ppSpatialReference' )),
    COMMETHOD(['propget', helpstring(u'The current status of the real-time feed.')], HRESULT, 'Status',
              ( ['retval', 'out'], POINTER(esriGpsConnectionStatus), 'pStatus' )),
    COMMETHOD(['propget', helpstring(u'The current position information from the real-time feed.')], HRESULT, 'CurrentPosition',
              ( ['retval', 'out'], POINTER(esriGpsPositionInfo), 'pInfo' )),
    COMMETHOD(['propget', helpstring(u'The most recent number of satellites.')], HRESULT, 'CurrentSatelliteCount',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propget', helpstring(u'The satellite data for the given index value.')], HRESULT, 'CurrentSatelliteData',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(esriGpsSatelliteData), 'pData' )),
    COMMETHOD(['propget', helpstring(u'The current magnetic variance.')], HRESULT, 'CurrentMagneticVariance',
              ( ['retval', 'out'], POINTER(esriGpsMagneticVariance), 'pMagneticVar' )),
    COMMETHOD(['propget', helpstring(u'The current ground course.')], HRESULT, 'CurrentGroundCourse',
              ( ['retval', 'out'], POINTER(esriGpsGroundCourse), 'pGroundCourse' )),
    COMMETHOD(['propget', helpstring(u'The current DOP information.')], HRESULT, 'CurrentDopInfo',
              ( ['retval', 'out'], POINTER(esriGpsDOPInfo), 'pdop' )),
    COMMETHOD(['propget', helpstring(u'The current date and time.')], HRESULT, 'CurrentDateTime',
              ( ['retval', 'out'], POINTER(esriGpsDateTime), 'pDateTime' )),
    COMMETHOD(['propget', helpstring(u'The current DGPS information.')], HRESULT, 'CurrentDgpsInfo',
              ( ['retval', 'out'], POINTER(esriGpsDgpsInfo), 'pDGPSInfo' )),
    COMMETHOD(['propget', helpstring(u'Connection error information.')], HRESULT, 'ConnectionError',
              ( ['retval', 'out'], POINTER(esriGpsConnectionError), 'pError' )),
]
################################################################
## code template for IRealTimeFeed implementation
##class IRealTimeFeed_Impl(object):
##    @property
##    def Status(self):
##        u'The current status of the real-time feed.'
##        #return pStatus
##
##    @property
##    def CurrentMagneticVariance(self):
##        u'The current magnetic variance.'
##        #return pMagneticVar
##
##    @property
##    def ConnectionError(self):
##        u'Connection error information.'
##        #return pError
##
##    @property
##    def CurrentPosition(self):
##        u'The current position information from the real-time feed.'
##        #return pInfo
##
##    @property
##    def CurrentSatelliteData(self, Index):
##        u'The satellite data for the given index value.'
##        #return pData
##
##    def Stop(self):
##        u'Stops the real-time feed.'
##        #return 
##
##    def SpatialReference(self, ppSpatialReference):
##        u'The spatial reference of the real-time feed.'
##        #return 
##
##    def Start(self):
##        u"Starts the real-time feed. If failed and sets error information in 'ConnectionError'."
##        #return 
##
##    @property
##    def CurrentGroundCourse(self):
##        u'The current ground course.'
##        #return pGroundCourse
##
##    @property
##    def CurrentDopInfo(self):
##        u'The current DOP information.'
##        #return pdop
##
##    @property
##    def CurrentDgpsInfo(self):
##        u'The current DGPS information.'
##        #return pDGPSInfo
##
##    @property
##    def CurrentSatelliteCount(self):
##        u'The most recent number of satellites.'
##        #return pCount
##
##    @property
##    def CurrentDateTime(self):
##        u'The current date and time.'
##        #return pDateTime
##

IMobileServer._methods_ = [
]
################################################################
## code template for IMobileServer implementation
##class IMobileServer_Impl(object):

class IPageLayout2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the Page Layout.'
    _iid_ = GUID('{DBB71B69-DB4E-4780-AE6F-39EA7A4A075F}')
    _idlflags_ = ['oleautomation']
IPageLayout2._methods_ = [
    COMMETHOD(['propget', helpstring(u'On-screen representation of the printer page.')], HRESULT, 'Page',
              ( ['retval', 'out'], POINTER(POINTER(IPage)), 'Page' )),
    COMMETHOD(['propget', helpstring(u'The ruler settings.')], HRESULT, 'RulerSettings',
              ( ['retval', 'out'], POINTER(POINTER(IRulerSettings)), 'RulerSettings' )),
    COMMETHOD(['propget', helpstring(u'The snapping grid.')], HRESULT, 'SnapGrid',
              ( ['retval', 'out'], POINTER(POINTER(ISnapGrid)), 'SnapGrid' )),
    COMMETHOD(['propget', helpstring(u'The horizontal snapping guides.')], HRESULT, 'HorizontalSnapGuides',
              ( ['retval', 'out'], POINTER(POINTER(ISnapGuides)), 'SnapGuides' )),
    COMMETHOD(['propget', helpstring(u'The vertical snapping guides.')], HRESULT, 'VerticalSnapGuides',
              ( ['retval', 'out'], POINTER(POINTER(ISnapGuides)), 'SnapGuides' )),
    COMMETHOD(['propget', helpstring(u'The current zoom percent.  100 means 1:1.  200 means twice normal size, etc.')], HRESULT, 'ZoomPercent',
              ( ['retval', 'out'], POINTER(c_double), 'percent' )),
    COMMETHOD(['propput', helpstring(u'Indicates if graphics will be aligned to the margins or to each other.')], HRESULT, 'AlignToMargins',
              ( ['in'], VARIANT_BOOL, 'AlignToMargins' )),
    COMMETHOD(['propget', helpstring(u'Indicates if graphics will be aligned to the margins or to each other.')], HRESULT, 'AlignToMargins',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'AlignToMargins' )),
    COMMETHOD([helpstring(u'Fit the width of the page to the screen.')], HRESULT, 'ZoomToWidth'),
    COMMETHOD([helpstring(u'Fit the whole page in the window.')], HRESULT, 'ZoomToWhole'),
    COMMETHOD([helpstring(u'Magnify the page by a certain percentage.  100 means actual size.  200 means twice normal size, etc.')], HRESULT, 'ZoomToPercent',
              ( ['in'], c_int, 'percent' )),
    COMMETHOD([helpstring(u'Focus the next map.')], HRESULT, 'FocusNextMapFrame'),
    COMMETHOD([helpstring(u'Focus the previous map.')], HRESULT, 'FocusPreviousMapFrame'),
    COMMETHOD([helpstring(u'Replace the maps in the data frames with the specified maps.  If there are more maps than frames, new frames are created.  If there are fewer frames than maps, extra frames are cleared.')], HRESULT, 'ReplaceMaps',
              ( ['in'], POINTER(IMaps), 'maps' )),
    COMMETHOD(['propputref', helpstring(u'The object that is currently managing the content of the layout.')], HRESULT, 'ContentProvider',
              ( ['in'], POINTER(IUnknown), 'Provider' )),
    COMMETHOD(['propget', helpstring(u'The object that is currently managing the content of the layout.')], HRESULT, 'ContentProvider',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'Provider' )),
    COMMETHOD([helpstring(u'Clears the elements without dismantling them.')], HRESULT, 'ClearContent'),
    COMMETHOD(['propget', helpstring(u'The associated printer.')], HRESULT, 'Printer',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._7DB92CEC_CB65_420A_8737_FCD0722FD436_0_10_2.IPrinter)), 'Printer' )),
]
################################################################
## code template for IPageLayout2 implementation
##class IPageLayout2_Impl(object):
##    def FocusPreviousMapFrame(self):
##        u'Focus the previous map.'
##        #return 
##
##    @property
##    def Printer(self):
##        u'The associated printer.'
##        #return Printer
##
##    def ReplaceMaps(self, maps):
##        u'Replace the maps in the data frames with the specified maps.  If there are more maps than frames, new frames are created.  If there are fewer frames than maps, extra frames are cleared.'
##        #return 
##
##    @property
##    def VerticalSnapGuides(self):
##        u'The vertical snapping guides.'
##        #return SnapGuides
##
##    def ZoomToPercent(self, percent):
##        u'Magnify the page by a certain percentage.  100 means actual size.  200 means twice normal size, etc.'
##        #return 
##
##    def ZoomToWidth(self):
##        u'Fit the width of the page to the screen.'
##        #return 
##
##    def ZoomToWhole(self):
##        u'Fit the whole page in the window.'
##        #return 
##
##    @property
##    def RulerSettings(self):
##        u'The ruler settings.'
##        #return RulerSettings
##
##    def _get(self):
##        u'Indicates if graphics will be aligned to the margins or to each other.'
##        #return AlignToMargins
##    def _set(self, AlignToMargins):
##        u'Indicates if graphics will be aligned to the margins or to each other.'
##    AlignToMargins = property(_get, _set, doc = _set.__doc__)
##
##    def ClearContent(self):
##        u'Clears the elements without dismantling them.'
##        #return 
##
##    @property
##    def ZoomPercent(self):
##        u'The current zoom percent.  100 means 1:1.  200 means twice normal size, etc.'
##        #return percent
##
##    @property
##    def SnapGrid(self):
##        u'The snapping grid.'
##        #return SnapGrid
##
##    def FocusNextMapFrame(self):
##        u'Focus the next map.'
##        #return 
##
##    @property
##    def HorizontalSnapGuides(self):
##        u'The horizontal snapping guides.'
##        #return SnapGuides
##
##    @property
##    def Page(self):
##        u'On-screen representation of the printer page.'
##        #return Page
##
##    @property
##    def ContentProvider(self, Provider):
##        u'The object that is currently managing the content of the layout.'
##        #return 
##

class MapSelection(CoClass):
    u"Maintains the map's feature selection."
    _reg_clsid_ = GUID('{85DCFD05-8E4F-11D4-A697-00508B4A4114}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
MapSelection._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IEnumFeature, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IEnumFeatureSetup, ISelection]

IMobileSync._methods_ = [
    COMMETHOD([helpstring(u'Initializes the MobileSync object.')], HRESULT, 'Init',
              ( ['in'], POINTER(IMap), 'pMap' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet), 'pProps' )),
    COMMETHOD([helpstring(u'Handle Binary Request.')], HRESULT, 'ExecuteRequest',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IMemoryBlobStream), 'pRequestStream' ),
              ( ['out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IMemoryBlobStream)), 'ppResponse' )),
]
################################################################
## code template for IMobileSync implementation
##class IMobileSync_Impl(object):
##    def Init(self, pMap, pProps):
##        u'Initializes the MobileSync object.'
##        #return 
##
##    def ExecuteRequest(self, pRequestStream):
##        u'Handle Binary Request.'
##        #return ppResponse
##

class IIndexGrid(IMapGrid):
    _case_insensitive_ = True
    u'Provides access to members that control the index grid.'
    _iid_ = GUID('{03762C8D-F4D0-11D1-ADE8-080009EC732A}')
    _idlflags_ = ['oleautomation']
IIndexGrid._methods_ = [
    COMMETHOD(['propget', helpstring(u'The number of columns in the index grid.')], HRESULT, 'ColumnCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propput', helpstring(u'The number of columns in the index grid.')], HRESULT, 'ColumnCount',
              ( ['in'], c_int, 'Count' )),
    COMMETHOD(['propget', helpstring(u'The number of rows in the index grid.')], HRESULT, 'RowCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propput', helpstring(u'The number of rows in the index grid.')], HRESULT, 'RowCount',
              ( ['in'], c_int, 'Count' )),
    COMMETHOD(['propget', helpstring(u'The label for the given column in the index grid.')], HRESULT, 'XLabel',
              ( ['in'], c_int, 'Column' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Label' )),
    COMMETHOD(['propput', helpstring(u'The label for the given column in the index grid.')], HRESULT, 'XLabel',
              ( ['in'], c_int, 'Column' ),
              ( ['in'], BSTR, 'Label' )),
    COMMETHOD(['propget', helpstring(u'The label for the given row in the index grid.')], HRESULT, 'YLabel',
              ( ['in'], c_int, 'Row' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Label' )),
    COMMETHOD(['propput', helpstring(u'The label for the given row in the index grid.')], HRESULT, 'YLabel',
              ( ['in'], c_int, 'Row' ),
              ( ['in'], BSTR, 'Label' )),
    COMMETHOD([helpstring(u'Provides access to the cell extent in page space for the given row and column.')], HRESULT, 'QueryCellExtent',
              ( ['in'], c_int, 'Row' ),
              ( ['in'], c_int, 'Column' ),
              ( ['in'], POINTER(IMapFrame), 'pMapFrame' ),
              ( [], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'Extent' )),
]
################################################################
## code template for IIndexGrid implementation
##class IIndexGrid_Impl(object):
##    def _get(self):
##        u'The number of columns in the index grid.'
##        #return Count
##    def _set(self, Count):
##        u'The number of columns in the index grid.'
##    ColumnCount = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The number of rows in the index grid.'
##        #return Count
##    def _set(self, Count):
##        u'The number of rows in the index grid.'
##    RowCount = property(_get, _set, doc = _set.__doc__)
##
##    def QueryCellExtent(self, Row, Column, pMapFrame, Extent):
##        u'Provides access to the cell extent in page space for the given row and column.'
##        #return 
##
##    def _get(self, Column):
##        u'The label for the given column in the index grid.'
##        #return Label
##    def _set(self, Column, Label):
##        u'The label for the given column in the index grid.'
##    XLabel = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, Row):
##        u'The label for the given row in the index grid.'
##        #return Label
##    def _set(self, Row, Label):
##        u'The label for the given row in the index grid.'
##    YLabel = property(_get, _set, doc = _set.__doc__)
##

class DynamicDisplay(CoClass):
    u'Dynamic display class, used by the dynamic map.'
    _reg_clsid_ = GUID('{76B0BAF7-DB84-4F1E-AED9-E9D270F8A2BB}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
DynamicDisplay._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDynamicDisplay, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDynamicDisplay2, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDynamicDrawScreen, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDynamicGlyphFactory, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDynamicGlyphFactory2, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDynamicSymbolProperties, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDynamicSymbolProperties2, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDynamicCompoundMarker, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDynamicCompoundMarker2, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IConnectionPointContainer, IActiveViewEvents, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITransformEvents]

IEnumLocatedNetworkElement._methods_ = [
    COMMETHOD([helpstring(u'Resets the enumeration seqeuence to the beginning.')], HRESULT, 'Reset'),
    COMMETHOD([helpstring(u'Retrieves the geometry, element type, and element id of the next network element in the enumeration sequence.')], HRESULT, 'Next',
              ( ['in', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry)), 'elementGeometry' ),
              ( ['in', 'out'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriNetworkElementType), 'ElementType' ),
              ( ['retval', 'out'], POINTER(c_int), 'ElementID' )),
    COMMETHOD(['propget', helpstring(u'Network dataset of the enumerated network elements.')], HRESULT, 'NetworkDataset',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.INetworkDataset)), 'Dataset' )),
]
################################################################
## code template for IEnumLocatedNetworkElement implementation
##class IEnumLocatedNetworkElement_Impl(object):
##    def Reset(self):
##        u'Resets the enumeration seqeuence to the beginning.'
##        #return 
##
##    @property
##    def NetworkDataset(self):
##        u'Network dataset of the enumerated network elements.'
##        #return Dataset
##
##    def Next(self):
##        u'Retrieves the geometry, element type, and element id of the next network element in the enumeration sequence.'
##        #return elementGeometry, ElementType, ElementID
##

IRasterRenderer2._methods_ = [
    COMMETHOD([helpstring(u'Recreates a raster, if necessary, from a given RasterDataset.')], HRESULT, 'RecreateRaster',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterDataset), 'pDataset' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' )),
    COMMETHOD([helpstring(u'Adapts to the new raster.')], HRESULT, 'AdaptRaster',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' )),
]
################################################################
## code template for IRasterRenderer2 implementation
##class IRasterRenderer2_Impl(object):
##    def RecreateRaster(self, pDataset, pRaster):
##        u'Recreates a raster, if necessary, from a given RasterDataset.'
##        #return 
##
##    def AdaptRaster(self, pRaster):
##        u'Adapts to the new raster.'
##        #return 
##

class MapCooker(CoClass):
    u'A map cache generator class.'
    _reg_clsid_ = GUID('{DDC47E30-69A3-42A9-A21F-115B1C7EDCD3}')
    _idlflags_ = ['hidden']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
MapCooker._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMapCooker, IMapCooker2, IMapCooker3]

class ACValueMapRenderer(CoClass):
    u'ArcIMS Value Map Renderer.'
    _reg_clsid_ = GUID('{05B3287E-DB2B-436B-BB3D-B01EF5236446}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
ACValueMapRenderer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IACAxl, IACRenderer, IACValueMapRenderer, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

IBasicOverposterLayerProperties._methods_ = [
    COMMETHOD(['propget', helpstring(u'Feature type.')], HRESULT, 'FeatureType',
              ( ['retval', 'out'], POINTER(esriBasicOverposterFeatureType), 'Type' )),
    COMMETHOD(['propput', helpstring(u'Feature type.')], HRESULT, 'FeatureType',
              ( ['in'], esriBasicOverposterFeatureType, 'Type' )),
    COMMETHOD(['propget', helpstring(u'Barrier weighting for features in the layer.')], HRESULT, 'FeatureWeight',
              ( ['retval', 'out'], POINTER(esriBasicOverposterWeight), 'Weight' )),
    COMMETHOD(['propput', helpstring(u'Barrier weighting for features in the layer.')], HRESULT, 'FeatureWeight',
              ( ['in'], esriBasicOverposterWeight, 'Weight' )),
    COMMETHOD(['propget', helpstring(u'Barrier weighting for labels in the layer.')], HRESULT, 'LabelWeight',
              ( ['retval', 'out'], POINTER(esriBasicOverposterWeight), 'Weight' )),
    COMMETHOD(['propput', helpstring(u'Barrier weighting for labels in the layer.')], HRESULT, 'LabelWeight',
              ( ['in'], esriBasicOverposterWeight, 'Weight' )),
    COMMETHOD(['propget', helpstring(u'Feature labeling option for the layer.')], HRESULT, 'NumLabelsOption',
              ( ['retval', 'out'], POINTER(esriBasicNumLabelsOption), 'option' )),
    COMMETHOD(['propput', helpstring(u'Feature labeling option for the layer.')], HRESULT, 'NumLabelsOption',
              ( ['in'], esriBasicNumLabelsOption, 'option' )),
    COMMETHOD(['propget', helpstring(u'Line label placement position options.')], HRESULT, 'LineLabelPosition',
              ( ['retval', 'out'], POINTER(POINTER(ILineLabelPosition)), 'position' )),
    COMMETHOD(['propput', helpstring(u'Line label placement position options.')], HRESULT, 'LineLabelPosition',
              ( ['in'], POINTER(ILineLabelPosition), 'position' )),
    COMMETHOD(['propget', helpstring(u'Line label placement position priority options.')], HRESULT, 'LineLabelPlacementPriorities',
              ( ['retval', 'out'], POINTER(POINTER(ILineLabelPlacementPriorities)), 'linePlacementPriorities' )),
    COMMETHOD(['propput', helpstring(u'Line label placement position priority options.')], HRESULT, 'LineLabelPlacementPriorities',
              ( ['in'], POINTER(ILineLabelPlacementPriorities), 'linePlacementPriorities' )),
    COMMETHOD(['propget', helpstring(u'Indicates if unplaced labels are generated.')], HRESULT, 'GenerateUnplacedLabels',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if unplaced labels are generated.')], HRESULT, 'GenerateUnplacedLabels',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Point label placement method.')], HRESULT, 'PointPlacementMethod',
              ( ['retval', 'out'], POINTER(esriOverposterPointPlacementMethod), 'Method' )),
    COMMETHOD(['propput', helpstring(u'Point label placement method.')], HRESULT, 'PointPlacementMethod',
              ( ['in'], esriOverposterPointPlacementMethod, 'Method' )),
    COMMETHOD(['propget', helpstring(u'Indicates if point labels are placed on top of features.')], HRESULT, 'PointPlacementOnTop',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'OnTop' )),
    COMMETHOD(['propput', helpstring(u'Indicates if point labels are placed on top of features.')], HRESULT, 'PointPlacementOnTop',
              ( ['in'], VARIANT_BOOL, 'OnTop' )),
    COMMETHOD(['propget', helpstring(u'Point label placement position priority options.')], HRESULT, 'PointPlacementPriorities',
              ( ['retval', 'out'], POINTER(POINTER(IPointPlacementPriorities)), 'PointPlacementPriorities' )),
    COMMETHOD(['propput', helpstring(u'Point label placement position priority options.')], HRESULT, 'PointPlacementPriorities',
              ( ['in'], POINTER(IPointPlacementPriorities), 'PointPlacementPriorities' )),
    COMMETHOD(['propget', helpstring(u'Point label placement angle(s).')], HRESULT, 'PointPlacementAngles',
              ( ['retval', 'out'], POINTER(VARIANT), 'angles' )),
    COMMETHOD(['propput', helpstring(u'Point label placement angle(s).')], HRESULT, 'PointPlacementAngles',
              ( ['in'], VARIANT, 'angles' )),
    COMMETHOD(['propget', helpstring(u'Label buffer ratio. A value of 1 means a buffer the size of the label height.')], HRESULT, 'BufferRatio',
              ( ['retval', 'out'], POINTER(c_double), 'BufferRatio' )),
    COMMETHOD(['propput', helpstring(u'Label buffer ratio. A value of 1 means a buffer the size of the label height.')], HRESULT, 'BufferRatio',
              ( ['in'], c_double, 'BufferRatio' )),
    COMMETHOD(['propget', helpstring(u'Offset in map units at which labels will be placed away from line features.')], HRESULT, 'LineOffset',
              ( ['retval', 'out'], POINTER(c_double), 'LineOffset' )),
    COMMETHOD(['propput', helpstring(u'Offset in map units at which labels will be placed away from line features.')], HRESULT, 'LineOffset',
              ( ['in'], c_double, 'LineOffset' )),
]
################################################################
## code template for IBasicOverposterLayerProperties implementation
##class IBasicOverposterLayerProperties_Impl(object):
##    def _get(self):
##        u'Line label placement position options.'
##        #return position
##    def _set(self, position):
##        u'Line label placement position options.'
##    LineLabelPosition = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Feature type.'
##        #return Type
##    def _set(self, Type):
##        u'Feature type.'
##    FeatureType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Point label placement angle(s).'
##        #return angles
##    def _set(self, angles):
##        u'Point label placement angle(s).'
##    PointPlacementAngles = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Label buffer ratio. A value of 1 means a buffer the size of the label height.'
##        #return BufferRatio
##    def _set(self, BufferRatio):
##        u'Label buffer ratio. A value of 1 means a buffer the size of the label height.'
##    BufferRatio = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Point label placement method.'
##        #return Method
##    def _set(self, Method):
##        u'Point label placement method.'
##    PointPlacementMethod = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Feature labeling option for the layer.'
##        #return option
##    def _set(self, option):
##        u'Feature labeling option for the layer.'
##    NumLabelsOption = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Point label placement position priority options.'
##        #return PointPlacementPriorities
##    def _set(self, PointPlacementPriorities):
##        u'Point label placement position priority options.'
##    PointPlacementPriorities = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Barrier weighting for features in the layer.'
##        #return Weight
##    def _set(self, Weight):
##        u'Barrier weighting for features in the layer.'
##    FeatureWeight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Line label placement position priority options.'
##        #return linePlacementPriorities
##    def _set(self, linePlacementPriorities):
##        u'Line label placement position priority options.'
##    LineLabelPlacementPriorities = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Offset in map units at which labels will be placed away from line features.'
##        #return LineOffset
##    def _set(self, LineOffset):
##        u'Offset in map units at which labels will be placed away from line features.'
##    LineOffset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if point labels are placed on top of features.'
##        #return OnTop
##    def _set(self, OnTop):
##        u'Indicates if point labels are placed on top of features.'
##    PointPlacementOnTop = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Barrier weighting for labels in the layer.'
##        #return Weight
##    def _set(self, Weight):
##        u'Barrier weighting for labels in the layer.'
##    LabelWeight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if unplaced labels are generated.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if unplaced labels are generated.'
##    GenerateUnplacedLabels = property(_get, _set, doc = _set.__doc__)
##

class ChangeDatabaseVersion(CoClass):
    u'Change Database Version operation.'
    _reg_clsid_ = GUID('{0038A3AF-0FCB-487A-B3EE-65C0E80D13F0}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
ChangeDatabaseVersion._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IChangeDatabaseVersion]

class SnapGrid(CoClass):
    u'Snapping Grid for use with a PageLayout.'
    _reg_clsid_ = GUID('{31E081AD-CB02-11D1-876C-0000F8751720}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
SnapGrid._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ISnapGrid, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

IMobileMapInfo._methods_ = [
    COMMETHOD(['propget', helpstring(u'The name of the map (data frame).')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propget', helpstring(u'The description of the map (data frame). This property is set in the General tab of the Data Frame Properties dialog.')], HRESULT, 'Description',
              ( ['retval', 'out'], POINTER(BSTR), 'desc' )),
    COMMETHOD(['propget', helpstring(u'The full extent of the map.')], HRESULT, 'FullExtent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'Extent' )),
    COMMETHOD(['propget', helpstring(u'The current extent of the map.')], HRESULT, 'Extent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'Extent' )),
    COMMETHOD(['propget', helpstring(u'The spatial reference of the map.')], HRESULT, 'SpatialReference',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference)), 'SpatialReference' )),
    COMMETHOD(['propget', helpstring(u'The units for the map.')], HRESULT, 'Units',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits), 'Units' )),
    COMMETHOD(['propget', helpstring(u'A collection of Mobile Layer Info objects, each containing information about a layer in the map.')], HRESULT, 'MobileLayerInfos',
              ( ['retval', 'out'], POINTER(POINTER(IMobileLayerInfos)), 'MobileLayerInfos' )),
]
################################################################
## code template for IMobileMapInfo implementation
##class IMobileMapInfo_Impl(object):
##    @property
##    def MobileLayerInfos(self):
##        u'A collection of Mobile Layer Info objects, each containing information about a layer in the map.'
##        #return MobileLayerInfos
##
##    @property
##    def Name(self):
##        u'The name of the map (data frame).'
##        #return Name
##
##    @property
##    def SpatialReference(self):
##        u'The spatial reference of the map.'
##        #return SpatialReference
##
##    @property
##    def Extent(self):
##        u'The current extent of the map.'
##        #return Extent
##
##    @property
##    def Units(self):
##        u'The units for the map.'
##        #return Units
##
##    @property
##    def FullExtent(self):
##        u'The full extent of the map.'
##        #return Extent
##
##    @property
##    def Description(self):
##        u'The description of the map (data frame). This property is set in the General tab of the Data Frame Properties dialog.'
##        #return desc
##

IInteractiveSearch._methods_ = [
    COMMETHOD([helpstring(u'Updates query to include only visible features.')], HRESULT, 'VisibleFeatures',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'Filter' )),
]
################################################################
## code template for IInteractiveSearch implementation
##class IInteractiveSearch_Impl(object):
##    def VisibleFeatures(self, Filter):
##        u'Updates query to include only visible features.'
##        #return 
##

esriGpsPositionInfo._fields_ = [
    ('latitude', c_double),
    ('longitude', c_double),
    ('altitude', c_double),
    ('hours', c_short),
    ('minutes', c_short),
    ('seconds', c_double),
    ('pos2dValid', c_short),
    ('altitudeValid', c_short),
    ('timeValid', c_short),
    ('satellitesInUseValid', c_short),
    ('satellitesInUse', c_short),
    ('hdopValid', c_short),
    ('hdop', c_double),
]
assert sizeof(esriGpsPositionInfo) == 64, sizeof(esriGpsPositionInfo)
assert alignment(esriGpsPositionInfo) == 8, alignment(esriGpsPositionInfo)
IHyperlinkContainer._methods_ = [
    COMMETHOD(['propget', helpstring(u'Number of hyperlinks.')], HRESULT, 'HyperlinkCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The hyperlink at the specified index.')], HRESULT, 'Hyperlink',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IHyperlink)), 'Link' )),
    COMMETHOD(['propputref', helpstring(u'The hyperlink at the specified index.')], HRESULT, 'Hyperlink',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(IHyperlink), 'Link' )),
    COMMETHOD([helpstring(u'Adds a hyperlink.')], HRESULT, 'AddHyperlink',
              ( ['in'], POINTER(IHyperlink), 'Link' )),
    COMMETHOD([helpstring(u'Removes the hyperlink at the specified index.')], HRESULT, 'RemoveHyperlink',
              ( ['in'], c_int, 'Index' )),
]
################################################################
## code template for IHyperlinkContainer implementation
##class IHyperlinkContainer_Impl(object):
##    def RemoveHyperlink(self, Index):
##        u'Removes the hyperlink at the specified index.'
##        #return 
##
##    def AddHyperlink(self, Link):
##        u'Adds a hyperlink.'
##        #return 
##
##    @property
##    def HyperlinkCount(self):
##        u'Number of hyperlinks.'
##        #return Count
##
##    def Hyperlink(self, Index, Link):
##        u'The hyperlink at the specified index.'
##        #return 
##

IWMSServer._methods_ = [
    COMMETHOD([helpstring(u'Handle translation from Get to Post.')], HRESULT, 'GetToPost',
              ( ['in'], BSTR, 'sGet' ),
              ( ['retval', 'out'], POINTER(BSTR), 'pPost' )),
    COMMETHOD(['propget', helpstring(u'Handle WMS Server binary request.')], HRESULT, 'Data',
              ( ['in'], BSTR, 'Capabilities' ),
              ( ['in'], BSTR, 'request' ),
              ( ['out'], POINTER(BSTR), 'pMimeType' ),
              ( ['retval', 'out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'ppResponse' )),
    COMMETHOD([helpstring(u'Handle setting WMS Server parameters.')], HRESULT, 'SetParameters',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Value' )),
]
################################################################
## code template for IWMSServer implementation
##class IWMSServer_Impl(object):
##    @property
##    def Data(self, Capabilities, request):
##        u'Handle WMS Server binary request.'
##        #return pMimeType, ppResponse
##
##    def GetToPost(self, sGet):
##        u'Handle translation from Get to Post.'
##        #return pPost
##
##    def SetParameters(self, Name, Value):
##        u'Handle setting WMS Server parameters.'
##        #return 
##

ITerrainLayer2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if CurrentSurface should be maintained even if layer is invisible, or there is no surface renderer.')], HRESULT, 'MaintainCurrentSurface',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbMaintainSurface' )),
    COMMETHOD(['propput', helpstring(u'Indicates if CurrentSurface should be maintained even if layer is invisible, or there is no surface renderer.')], HRESULT, 'MaintainCurrentSurface',
              ( ['in'], VARIANT_BOOL, 'pbMaintainSurface' )),
]
################################################################
## code template for ITerrainLayer2 implementation
##class ITerrainLayer2_Impl(object):
##    def _get(self):
##        u'Indicates if CurrentSurface should be maintained even if layer is invisible, or there is no surface renderer.'
##        #return pbMaintainSurface
##    def _set(self, pbMaintainSurface):
##        u'Indicates if CurrentSurface should be maintained even if layer is invisible, or there is no surface renderer.'
##    MaintainCurrentSurface = property(_get, _set, doc = _set.__doc__)
##

class ICustomOverlayGrid(IMapGrid):
    _case_insensitive_ = True
    u'Provides access to members that control the custom overlay grid.'
    _iid_ = GUID('{FF501C89-D74B-11D2-9F43-00C04F6BC78E}')
    _idlflags_ = ['oleautomation']
ICustomOverlayGrid._methods_ = [
    COMMETHOD(['propget', helpstring(u'The data source containing the grid cells.')], HRESULT, 'DataSource',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClass)), 'FeatureClass' )),
    COMMETHOD(['propput', helpstring(u'The data source containing the grid cells.')], HRESULT, 'DataSource',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClass), 'FeatureClass' )),
    COMMETHOD(['propget', helpstring(u'The name of the field used to label the grid.')], HRESULT, 'LabelField',
              ( ['retval', 'out'], POINTER(BSTR), 'FieldName' )),
    COMMETHOD(['propput', helpstring(u'The name of the field used to label the grid.')], HRESULT, 'LabelField',
              ( ['in'], BSTR, 'FieldName' )),
]
################################################################
## code template for ICustomOverlayGrid implementation
##class ICustomOverlayGrid_Impl(object):
##    def _get(self):
##        u'The name of the field used to label the grid.'
##        #return FieldName
##    def _set(self, FieldName):
##        u'The name of the field used to label the grid.'
##    LabelField = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The data source containing the grid cells.'
##        #return FeatureClass
##    def _set(self, FeatureClass):
##        u'The data source containing the grid cells.'
##    DataSource = property(_get, _set, doc = _set.__doc__)
##

class ImageServer(CoClass):
    u'The ArcGIS Server Image Server class.'
    _reg_clsid_ = GUID('{BD60CB15-61D8-4CCD-AF4E-EA35F4069532}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IImageServerInit(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control initialization of an image server.'
    _iid_ = GUID('{EE09FED6-6E28-491A-B00B-5B8796F075E1}')
    _idlflags_ = ['oleautomation']
class IImageServerInit2(IImageServerInit):
    _case_insensitive_ = True
    u'Provides access to members that control initialization of an image server.'
    _iid_ = GUID('{57E791D8-5492-41C3-8F17-5F416B38111B}')
    _idlflags_ = ['oleautomation']
class IImageServerInit3(IImageServerInit2):
    _case_insensitive_ = True
    u'Provides access to members that control initialization of an image server.'
    _iid_ = GUID('{1DB58A01-AD2F-446C-B274-4389A2638FB6}')
    _idlflags_ = []
class IImageServerObjects(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to core objects contained within an image server object.'
    _iid_ = GUID('{D0BAFEB3-B04D-4BC2-BD89-D1251450CB83}')
    _idlflags_ = ['oleautomation']
ImageServer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IImageServer, IImageServer2, IImageServer3, IImageServer4, IImageServerInit, IImageServerInit2, IImageServerInit3, comtypes.gen._18F2FC71_6B30_45B9_B101_037A8B868B66_0_10_2.IServerObject, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IObjectConstruct, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IRequestHandler, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IRequestHandler2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILogSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IObjectActivate, comtypes.gen._18F2FC71_6B30_45B9_B101_037A8B868B66_0_10_2.IServerObjectExtensionManager, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, IImageServerObjects, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IRESTRequestHandler, comtypes.gen._8F0541A3_D5BE_4B3F_A8D9_062D5579E19B_0_10_2.IRasterFunctionTemplateMapper]

IMobileSync2._methods_ = [
    COMMETHOD([helpstring(u'Initializes the MobileSync object from IMapServer (FastMap).')], HRESULT, 'InitFromMapServer',
              ( ['in'], POINTER(IMapServer), 'pMapServer' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet), 'pProps' )),
    COMMETHOD([helpstring(u'This is depricated at 10.0:  Handle Binary Request.')], HRESULT, 'GetMobileMapInfo',
              ( ['out'], POINTER(POINTER(IMobileMapInfo)), 'ppResponse' )),
]
################################################################
## code template for IMobileSync2 implementation
##class IMobileSync2_Impl(object):
##    def InitFromMapServer(self, pMapServer, pProps):
##        u'Initializes the MobileSync object from IMapServer (FastMap).'
##        #return 
##
##    def GetMobileMapInfo(self):
##        u'This is depricated at 10.0:  Handle Binary Request.'
##        #return ppResponse
##

IActionCollection._methods_ = [
    COMMETHOD([helpstring(u'Adds an action to the collection.')], HRESULT, 'Add',
              ( ['in'], POINTER(IAction), 'piAction' ),
              ( ['in'], c_int, 'nIndex' )),
    COMMETHOD([helpstring(u'Removes an action from the collection.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'nIndex' )),
    COMMETHOD([helpstring(u'Moves an action to a user-specified location in the collection.')], HRESULT, 'Move',
              ( ['in'], c_int, 'nSourceIndex' ),
              ( ['in'], c_int, 'nDestinationIndex' )),
    COMMETHOD([helpstring(u'Removes all actions from the index.')], HRESULT, 'RemoveAll'),
    COMMETHOD(['propget', helpstring(u'Retrieves the action at the specified index.')], HRESULT, 'Action',
              ( ['in'], c_int, 'nIndex' ),
              ( ['retval', 'out'], POINTER(POINTER(IAction)), 'ppiAction' )),
    COMMETHOD(['propget', helpstring(u'Number of objects in the collection.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'pVal' )),
    COMMETHOD([helpstring(u'Finds an action within the collection.')], HRESULT, 'Find',
              ( ['in'], POINTER(IAction), 'piAction' ),
              ( ['retval', 'out'], POINTER(c_int), 'pnIndex' )),
    COMMETHOD(['propget', helpstring(u'Maximum number of nested action levels to be processed.')], HRESULT, 'MaximumDepth',
              ( ['retval', 'out'], POINTER(c_int), 'pVal' )),
    COMMETHOD(['propput', helpstring(u'Maximum number of nested action levels to be processed.')], HRESULT, 'MaximumDepth',
              ( ['in'], c_int, 'pVal' )),
    COMMETHOD(['propget', helpstring(u'Gives next sequential number for assigning names to actions.')], HRESULT, 'NextActionNumber',
              ( ['retval', 'out'], POINTER(c_int), 'pVal' )),
    COMMETHOD(['propput', helpstring(u'Gives next sequential number for assigning names to actions.')], HRESULT, 'NextActionNumber',
              ( ['in'], c_int, 'pVal' )),
    COMMETHOD(['propget', helpstring(u'Action category to be excluded from processing.')], HRESULT, 'ExclusionCategory',
              ( ['retval', 'out'], POINTER(enumActionCategory), 'pVal' )),
    COMMETHOD(['propput', helpstring(u'Action category to be excluded from processing.')], HRESULT, 'ExclusionCategory',
              ( ['in'], enumActionCategory, 'pVal' )),
    COMMETHOD(['propget', helpstring(u'Total number of actions.')], HRESULT, 'ActionCount',
              ( ['retval', 'out'], POINTER(c_int), 'pVal' )),
    COMMETHOD(['propget', helpstring(u'Number of enabled actions.')], HRESULT, 'EnabledActionCount',
              ( ['retval', 'out'], POINTER(c_int), 'pVal' )),
    COMMETHOD([helpstring(u'Indicates if a contained action depends upon the specified feature class.')], HRESULT, 'DependsUponFeatureClass',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClass), 'piFeatureClass' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'bResult' )),
    COMMETHOD([helpstring(u'Disables all action using the specified layer for location trigger.')], HRESULT, 'DisableActionsUsingLayer',
              ( ['in'], POINTER(ILayer), 'piLayer' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'bResult' )),
    COMMETHOD([helpstring(u'Reenable all action using the specified layer for location trigger.')], HRESULT, 'ReenableActionsUsingLayer',
              ( ['in'], POINTER(ILayer), 'piLayer' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'bResult' )),
    COMMETHOD([helpstring(u'Checks for deleted Layers and disables affected actions.')], HRESULT, 'CheckLayers',
              ( ['in'], VARIANT_BOOL, 'bRebuildGeometry' )),
]
################################################################
## code template for IActionCollection implementation
##class IActionCollection_Impl(object):
##    @property
##    def Count(self):
##        u'Number of objects in the collection.'
##        #return pVal
##
##    @property
##    def ActionCount(self):
##        u'Total number of actions.'
##        #return pVal
##
##    @property
##    def EnabledActionCount(self):
##        u'Number of enabled actions.'
##        #return pVal
##
##    def _get(self):
##        u'Action category to be excluded from processing.'
##        #return pVal
##    def _set(self, pVal):
##        u'Action category to be excluded from processing.'
##    ExclusionCategory = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Gives next sequential number for assigning names to actions.'
##        #return pVal
##    def _set(self, pVal):
##        u'Gives next sequential number for assigning names to actions.'
##    NextActionNumber = property(_get, _set, doc = _set.__doc__)
##
##    def Move(self, nSourceIndex, nDestinationIndex):
##        u'Moves an action to a user-specified location in the collection.'
##        #return 
##
##    def Remove(self, nIndex):
##        u'Removes an action from the collection.'
##        #return 
##
##    def RemoveAll(self):
##        u'Removes all actions from the index.'
##        #return 
##
##    def _get(self):
##        u'Maximum number of nested action levels to be processed.'
##        #return pVal
##    def _set(self, pVal):
##        u'Maximum number of nested action levels to be processed.'
##    MaximumDepth = property(_get, _set, doc = _set.__doc__)
##
##    def Add(self, piAction, nIndex):
##        u'Adds an action to the collection.'
##        #return 
##
##    def DependsUponFeatureClass(self, piFeatureClass):
##        u'Indicates if a contained action depends upon the specified feature class.'
##        #return bResult
##
##    def ReenableActionsUsingLayer(self, piLayer):
##        u'Reenable all action using the specified layer for location trigger.'
##        #return bResult
##
##    @property
##    def Action(self, nIndex):
##        u'Retrieves the action at the specified index.'
##        #return ppiAction
##
##    def Find(self, piAction):
##        u'Finds an action within the collection.'
##        #return pnIndex
##
##    def DisableActionsUsingLayer(self, piLayer):
##        u'Disables all action using the specified layer for location trigger.'
##        #return bResult
##
##    def CheckLayers(self, bRebuildGeometry):
##        u'Checks for deleted Layers and disables affected actions.'
##        #return 
##

class DocumentInfo(CoClass):
    u'The DocumentInfo coclass is used to read and write map document properties.'
    _reg_clsid_ = GUID('{5012EFC9-6D2C-4F0E-8513-5349010CBCE3}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IDocumentInfo3(IDocumentInfo2):
    _case_insensitive_ = True
    u'Provides access to members that control the Document Info.'
    _iid_ = GUID('{8BCB734E-6D92-4C17-BEB3-9B0E7CF3724E}')
    _idlflags_ = ['oleautomation']
DocumentInfo._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDocumentInfo, IDocumentInfo2, IDocumentInfo3]

INetworkTrafficRenderer._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates whether to only show live traffic or otherwise show all traffic.')], HRESULT, 'ShowLiveTrafficOnly',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'liveTrafficOnly' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to only show live traffic or otherwise show all traffic.')], HRESULT, 'ShowLiveTrafficOnly',
              ( ['in'], VARIANT_BOOL, 'liveTrafficOnly' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to use scale ratio filters by hierarchy level.')], HRESULT, 'UseScaleFilters',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'UseScaleFilters' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to use scale ratio filters by hierarchy level.')], HRESULT, 'UseScaleFilters',
              ( ['in'], VARIANT_BOOL, 'UseScaleFilters' )),
    COMMETHOD(['propget', helpstring(u'The maximum scale ratios for drawing hierarchy value 1 and also each hierarchy level max value.')], HRESULT, 'ScaleFilters',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray)), 'scaleRatios' )),
    COMMETHOD(['propput', helpstring(u'The maximum scale ratios for drawing hierarchy value 1 and also each hierarchy level max value.')], HRESULT, 'ScaleFilters',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray), 'scaleRatios' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to get interior line width by hierarchy level or instead use the interior line width of the legend symbols.')], HRESULT, 'DrawLineWidthByHierarchyLevelIndex',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'useHierarchy' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to get interior line width by hierarchy level or instead use the interior line width of the legend symbols.')], HRESULT, 'DrawLineWidthByHierarchyLevelIndex',
              ( ['in'], VARIANT_BOOL, 'useHierarchy' )),
    COMMETHOD(['propget', helpstring(u'The interior line widths by hierarchy level index.')], HRESULT, 'InteriorLineWidthsByHierarchyLevelIndex',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray)), 'widths' )),
    COMMETHOD(['propput', helpstring(u'The interior line widths by hierarchy level index.')], HRESULT, 'InteriorLineWidthsByHierarchyLevelIndex',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray), 'widths' )),
    COMMETHOD(['propget', helpstring(u'The additional width of the exterior line symbol above the width of the interior line symbol.')], HRESULT, 'ExteriorLineWidthIncrement',
              ( ['retval', 'out'], POINTER(c_double), 'increment' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to use line casings.')], HRESULT, 'UseLineCasings',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'UseLineCasings' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to use line casings.')], HRESULT, 'UseLineCasings',
              ( ['in'], VARIANT_BOOL, 'UseLineCasings' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to derive the line casings colors from the interior color of the legend line symbols or otherwise use the line casings color.')], HRESULT, 'UseDerivedLineCasingsColor',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'UseDerivedLineCasingsColor' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to derive the line casings colors from the interior color of the legend line symbols or otherwise use the line casings color.')], HRESULT, 'UseDerivedLineCasingsColor',
              ( ['in'], VARIANT_BOOL, 'UseDerivedLineCasingsColor' )),
    COMMETHOD([helpstring(u'The exterior line casing color dervived from the interior color.')], HRESULT, 'DeriveLineCasingsColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'interiorColor' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'exteriorColor' )),
    COMMETHOD(['propget', helpstring(u'The line casings color.')], HRESULT, 'LineCasingsColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'exteriorColor' )),
    COMMETHOD(['propput', helpstring(u'The line casings color.')], HRESULT, 'LineCasingsColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'exteriorColor' )),
]
################################################################
## code template for INetworkTrafficRenderer implementation
##class INetworkTrafficRenderer_Impl(object):
##    def _get(self):
##        u'Indicates whether to derive the line casings colors from the interior color of the legend line symbols or otherwise use the line casings color.'
##        #return UseDerivedLineCasingsColor
##    def _set(self, UseDerivedLineCasingsColor):
##        u'Indicates whether to derive the line casings colors from the interior color of the legend line symbols or otherwise use the line casings color.'
##    UseDerivedLineCasingsColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The maximum scale ratios for drawing hierarchy value 1 and also each hierarchy level max value.'
##        #return scaleRatios
##    def _set(self, scaleRatios):
##        u'The maximum scale ratios for drawing hierarchy value 1 and also each hierarchy level max value.'
##    ScaleFilters = property(_get, _set, doc = _set.__doc__)
##
##    def DeriveLineCasingsColor(self, interiorColor):
##        u'The exterior line casing color dervived from the interior color.'
##        #return exteriorColor
##
##    def _get(self):
##        u'Indicates whether to use scale ratio filters by hierarchy level.'
##        #return UseScaleFilters
##    def _set(self, UseScaleFilters):
##        u'Indicates whether to use scale ratio filters by hierarchy level.'
##    UseScaleFilters = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether to use line casings.'
##        #return UseLineCasings
##    def _set(self, UseLineCasings):
##        u'Indicates whether to use line casings.'
##    UseLineCasings = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether to only show live traffic or otherwise show all traffic.'
##        #return liveTrafficOnly
##    def _set(self, liveTrafficOnly):
##        u'Indicates whether to only show live traffic or otherwise show all traffic.'
##    ShowLiveTrafficOnly = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The interior line widths by hierarchy level index.'
##        #return widths
##    def _set(self, widths):
##        u'The interior line widths by hierarchy level index.'
##    InteriorLineWidthsByHierarchyLevelIndex = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether to get interior line width by hierarchy level or instead use the interior line width of the legend symbols.'
##        #return useHierarchy
##    def _set(self, useHierarchy):
##        u'Indicates whether to get interior line width by hierarchy level or instead use the interior line width of the legend symbols.'
##    DrawLineWidthByHierarchyLevelIndex = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The line casings color.'
##        #return exteriorColor
##    def _set(self, exteriorColor):
##        u'The line casings color.'
##    LineCasingsColor = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def ExteriorLineWidthIncrement(self):
##        u'The additional width of the exterior line symbol above the width of the interior line symbol.'
##        #return increment
##

IMapGrids._methods_ = [
    COMMETHOD(['propget', helpstring(u'The number of map grids associated with the map frame.')], HRESULT, 'MapGridCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The map grid at the specified index.')], HRESULT, 'MapGrid',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IMapGrid)), 'MapGrid' )),
    COMMETHOD(['propput', helpstring(u'The map grid at the specified index.')], HRESULT, 'MapGrid',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(IMapGrid), 'MapGrid' )),
    COMMETHOD([helpstring(u'Adds a map grid to the map frame.')], HRESULT, 'AddMapGrid',
              ( ['in'], POINTER(IMapGrid), 'MapGrid' )),
    COMMETHOD([helpstring(u'Deletes a map grid from the map frame.')], HRESULT, 'DeleteMapGrid',
              ( ['in'], POINTER(IMapGrid), 'MapGrid' )),
    COMMETHOD([helpstring(u'Clears all map grids from the map frame.')], HRESULT, 'ClearMapGrids'),
]
################################################################
## code template for IMapGrids implementation
##class IMapGrids_Impl(object):
##    def DeleteMapGrid(self, MapGrid):
##        u'Deletes a map grid from the map frame.'
##        #return 
##
##    def ClearMapGrids(self):
##        u'Clears all map grids from the map frame.'
##        #return 
##
##    @property
##    def MapGridCount(self):
##        u'The number of map grids associated with the map frame.'
##        #return Count
##
##    def _get(self, Index):
##        u'The map grid at the specified index.'
##        #return MapGrid
##    def _set(self, Index, MapGrid):
##        u'The map grid at the specified index.'
##    MapGrid = property(_get, _set, doc = _set.__doc__)
##
##    def AddMapGrid(self, MapGrid):
##        u'Adds a map grid to the map frame.'
##        #return 
##

class RasterDRAShader(CoClass):
    u'The raster shader for rendering pixels in dyanmic range adjustment mode.'
    _reg_clsid_ = GUID('{61607200-1E6F-489E-88AE-BCCEE89D25C4}')
    _idlflags_ = ['restricted']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IAdvancedShader(IShader):
    _case_insensitive_ = True
    u'Access to members that allow a shader to process tiled bitmap information.'
    _iid_ = GUID('{58E9956A-C645-41B6-98D6-049A65A660F6}')
    _idlflags_ = []
RasterDRAShader._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IShader, IAdvancedShader, IRasterDRAShader, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize]


# values for enumeration 'esriNetworkRendererType'
esriNetworkRenderer = 0
esriNetworkSystemJunctionRenderer = 1
esriNetworkJunctionRenderer = 2
esriNetworkEdgeRenderer = 3
esriNetworkTurnRenderer = 4
esriNetworkDirtyAreaRenderer = 5
esriNetworkTrafficRenderer = 6
esriNetworkRendererLast = 6
esriNetworkRendererType = c_int # enum
class ICoverageAnnotationLayerWrite(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a coverage annotation layer writing methods.'
    _iid_ = GUID('{941C1B64-3474-43A1-AB71-57BCDF57E36B}')
    _idlflags_ = ['oleautomation']
ICoverageAnnotationLayerWrite._methods_ = [
    COMMETHOD([helpstring(u'Begins a batch process for adding elements to a annotation layer.')], HRESULT, 'BeginAddElements',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'pDisplay' )),
    COMMETHOD([helpstring(u'Sets up attribute conversion parameters for batch conversion.')], HRESULT, 'SetupAttributeConversion',
              ( ['in'], c_int, 'numAttributes' ),
              ( ['in'], VARIANT, 'inCols' ),
              ( ['in'], VARIANT, 'outCols' )),
    COMMETHOD([helpstring(u'Adds a feature and its corresponding element to a annotation layer.')], HRESULT, 'DoAddFeature',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeature), 'pFeature' ),
              ( ['in'], POINTER(IElement), 'pElement' )),
    COMMETHOD([helpstring(u'Ends the batch process for adding elements to a annotation layer.')], HRESULT, 'EndAddElements'),
    COMMETHOD([helpstring(u'Erases all symbols and levels.')], HRESULT, 'ClearSymbols'),
]
################################################################
## code template for ICoverageAnnotationLayerWrite implementation
##class ICoverageAnnotationLayerWrite_Impl(object):
##    def EndAddElements(self):
##        u'Ends the batch process for adding elements to a annotation layer.'
##        #return 
##
##    def ClearSymbols(self):
##        u'Erases all symbols and levels.'
##        #return 
##
##    def SetupAttributeConversion(self, numAttributes, inCols, outCols):
##        u'Sets up attribute conversion parameters for batch conversion.'
##        #return 
##
##    def DoAddFeature(self, pFeature, pElement):
##        u'Adds a feature and its corresponding element to a annotation layer.'
##        #return 
##
##    def BeginAddElements(self, pDisplay):
##        u'Begins a batch process for adding elements to a annotation layer.'
##        #return 
##

INetworkRendererCollection._methods_ = [
    COMMETHOD([helpstring(u'Adds a network renderer to the collection.')], HRESULT, 'Add',
              ( ['in'], POINTER(INetworkRenderer), 'Renderer' )),
    COMMETHOD([helpstring(u'Removes a network renderer from the collection.')], HRESULT, 'Remove',
              ( ['in'], POINTER(INetworkRenderer), 'Renderer' )),
    COMMETHOD([helpstring(u'Removes all of the network renderers from the collection.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Inserts a network renderer at the specified position in the collection.')], HRESULT, 'Insert',
              ( ['in'], POINTER(INetworkRenderer), 'Renderer' ),
              ( ['in'], c_int, 'Index' )),
    COMMETHOD(['propget', helpstring(u'Indicates if a network renderer at the specific position is visible.')], HRESULT, 'Visible',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Visible' )),
    COMMETHOD(['propput', helpstring(u'Indicates if a network renderer at the specific position is visible.')], HRESULT, 'Visible',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], VARIANT_BOOL, 'Visible' )),
    COMMETHOD(['propget', helpstring(u'Number of network renderers in the collection.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD([helpstring(u'Resets the enumeration sequence to the beginning.')], HRESULT, 'Reset'),
    COMMETHOD([helpstring(u'Retrieves the next network renderer in the enumeration.')], HRESULT, 'Next',
              ( ['retval', 'out'], POINTER(POINTER(INetworkRenderer)), 'Renderer' )),
]
################################################################
## code template for INetworkRendererCollection implementation
##class INetworkRendererCollection_Impl(object):
##    @property
##    def Count(self):
##        u'Number of network renderers in the collection.'
##        #return Count
##
##    def Insert(self, Renderer, Index):
##        u'Inserts a network renderer at the specified position in the collection.'
##        #return 
##
##    def Remove(self, Renderer):
##        u'Removes a network renderer from the collection.'
##        #return 
##
##    def Next(self):
##        u'Retrieves the next network renderer in the enumeration.'
##        #return Renderer
##
##    def RemoveAll(self):
##        u'Removes all of the network renderers from the collection.'
##        #return 
##
##    def _get(self, Index):
##        u'Indicates if a network renderer at the specific position is visible.'
##        #return Visible
##    def _set(self, Index, Visible):
##        u'Indicates if a network renderer at the specific position is visible.'
##    Visible = property(_get, _set, doc = _set.__doc__)
##
##    def Add(self, Renderer):
##        u'Adds a network renderer to the collection.'
##        #return 
##
##    def Reset(self):
##        u'Resets the enumeration sequence to the beginning.'
##        #return 
##

esriGpsSatelliteData._fields_ = [
    ('prn', c_short),
    ('elevation', c_short),
    ('azimuth', c_short),
    ('snr', c_short),
]
assert sizeof(esriGpsSatelliteData) == 8, sizeof(esriGpsSatelliteData)
assert alignment(esriGpsSatelliteData) == 2, alignment(esriGpsSatelliteData)
class BasemapLayer(CoClass):
    u'Layer containing a Basemap.'
    _reg_clsid_ = GUID('{DA4122BF-7B07-4158-88B0-19D342BED8BA}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IBasemapLayer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members of a basemap layer.'
    _iid_ = GUID('{F9D6AA98-5586-486F-8242-670AEDF7860E}')
    _idlflags_ = []
BasemapLayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IBasemapLayer, ILayer, IGroupLayer, ICompositeLayer, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IConnectionPointContainer, ILayerInfo, ILayerSymbologyExtents, ILayerEffectDIM, ILayerGeneralProperties, ILayerExtensions, IIdentify, IIdentify2, ILayerEffects, ILayerMasking, ILayerPosition, ILevelMasking, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayAdmin, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayAdmin2, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeoDataset]

class Page(CoClass):
    u'The On Screen Page.'
    _reg_clsid_ = GUID('{DD94D76F-836D-11D0-87EC-080009EC732A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
Page._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IPage, IFrameProperties, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySupport, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IConnectionPointContainer, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]
Page._outgoing_interfaces_ = [IPageEvents]

IMobileLayerInfos._methods_ = [
    COMMETHOD(['propget', helpstring(u'The mobile map layer info count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The mobile layer info at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IMobileLayerInfo)), 'MobileLayerInfo' )),
    COMMETHOD([helpstring(u'Removes the mobile map layer info at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all mobile map layer infos.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Adds a mobile layer info.')], HRESULT, 'Add',
              ( ['in'], POINTER(IMobileLayerInfo), 'MobileLayerInfo' )),
    COMMETHOD([helpstring(u'Adds a mobile map layer info at the specified position.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(IMobileLayerInfo), 'MobileLayerInfo' )),
]
################################################################
## code template for IMobileLayerInfos implementation
##class IMobileLayerInfos_Impl(object):
##    @property
##    def Count(self):
##        u'The mobile map layer info count.'
##        #return Count
##
##    def Insert(self, Index, MobileLayerInfo):
##        u'Adds a mobile map layer info at the specified position.'
##        #return 
##
##    def Remove(self, Index):
##        u'Removes the mobile map layer info at the specified position.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'The mobile layer info at the specified position.'
##        #return MobileLayerInfo
##
##    def RemoveAll(self):
##        u'Removes all mobile map layer infos.'
##        #return 
##
##    def Add(self, MobileLayerInfo):
##        u'Adds a mobile layer info.'
##        #return 
##


# values for enumeration 'enumHighlightSuppression'
enumActionTypeUnspecified = 0
enumHighlight = 1
enumSuppression = 2
enumHighlightSuppression = c_int # enum
class IGraphicSnapEnvironment2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the Collection of snap agents used for snapping graphics.'
    _iid_ = GUID('{51AE6186-47A9-489A-A91D-A0E6CAF320F1}')
    _idlflags_ = ['oleautomation']
IGraphicSnapEnvironment2._methods_ = [
    COMMETHOD([helpstring(u'Snap the shape using the agents in the environment.')], HRESULT, 'SnapShape',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'Shape' )),
    COMMETHOD(['propget', helpstring(u'The snap tolerance in page units.')], HRESULT, 'SnapTolerance',
              ( ['retval', 'out'], POINTER(c_double), 'tol' )),
    COMMETHOD(['propput', helpstring(u'The snap tolerance in page units.')], HRESULT, 'SnapTolerance',
              ( ['in'], c_double, 'tol' )),
    COMMETHOD(['propput', helpstring(u'An array of IDs indicating how agents should be ordered.')], HRESULT, 'SnapAgentOrder',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'guids' )),
    COMMETHOD(['propget', helpstring(u'An array of IDs indicating how agents should be ordered.')], HRESULT, 'SnapAgentOrder',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'guids' )),
    COMMETHOD(['propget', helpstring(u'The number of snap agents.')], HRESULT, 'SnapAgentCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The snap agent at the specified index.  The index argument is zero based.')], HRESULT, 'SnapAgent',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IGraphicSnap)), 'SnapAgent' )),
    COMMETHOD([helpstring(u'Remove all snap agents.')], HRESULT, 'ClearSnapAgents'),
    COMMETHOD([helpstring(u'Add a new snap agent to the environment.')], HRESULT, 'AddSnapAgent',
              ( ['in'], POINTER(IGraphicSnap), 'SnapAgent' )),
    COMMETHOD([helpstring(u'Remove specified snap agent from the environment.')], HRESULT, 'DeleteSnapAgent',
              ( ['in'], POINTER(IGraphicSnap), 'SnapAgent' )),
    COMMETHOD([helpstring(u'Snap the shape using the agents in the environment.')], HRESULT, 'SnapShapeEx',
              ( ['in'], POINTER(IElement), 'pElement' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'Shape' )),
]
################################################################
## code template for IGraphicSnapEnvironment2 implementation
##class IGraphicSnapEnvironment2_Impl(object):
##    def _get(self):
##        u'The snap tolerance in page units.'
##        #return tol
##    def _set(self, tol):
##        u'The snap tolerance in page units.'
##    SnapTolerance = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SnapAgent(self, Index):
##        u'The snap agent at the specified index.  The index argument is zero based.'
##        #return SnapAgent
##
##    def DeleteSnapAgent(self, SnapAgent):
##        u'Remove specified snap agent from the environment.'
##        #return 
##
##    def SnapShapeEx(self, pElement, Shape):
##        u'Snap the shape using the agents in the environment.'
##        #return 
##
##    @property
##    def SnapAgentCount(self):
##        u'The number of snap agents.'
##        #return Count
##
##    def ClearSnapAgents(self):
##        u'Remove all snap agents.'
##        #return 
##
##    def _get(self):
##        u'An array of IDs indicating how agents should be ordered.'
##        #return guids
##    def _set(self, guids):
##        u'An array of IDs indicating how agents should be ordered.'
##    SnapAgentOrder = property(_get, _set, doc = _set.__doc__)
##
##    def AddSnapAgent(self, SnapAgent):
##        u'Add a new snap agent to the environment.'
##        #return 
##
##    def SnapShape(self, Shape):
##        u'Snap the shape using the agents in the environment.'
##        #return 
##

esriGpsGroundCourse._fields_ = [
    ('speed', c_double),
    ('Heading', c_double),
    ('speedValid', c_short),
    ('headingValid', c_short),
]
assert sizeof(esriGpsGroundCourse) == 24, sizeof(esriGpsGroundCourse)
assert alignment(esriGpsGroundCourse) == 8, alignment(esriGpsGroundCourse)
IGraphicSnap._methods_ = [
    COMMETHOD(['propget', helpstring(u'The name of the snap agent.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD([helpstring(u'Indicates if the point is snapped in the horizontal direction.')], HRESULT, 'SnapX',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'Shape' ),
              ( ['in'], c_double, 'Tolerance' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'snapped' )),
    COMMETHOD([helpstring(u'Indicates if the point is snapped in the vertical direction.')], HRESULT, 'SnapY',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'Shape' ),
              ( ['in'], c_double, 'Tolerance' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'snapped' )),
]
################################################################
## code template for IGraphicSnap implementation
##class IGraphicSnap_Impl(object):
##    def SnapY(self, Shape, Tolerance):
##        u'Indicates if the point is snapped in the vertical direction.'
##        #return snapped
##
##    def SnapX(self, Shape, Tolerance):
##        u'Indicates if the point is snapped in the horizontal direction.'
##        #return snapped
##
##    @property
##    def Name(self):
##        u'The name of the snap agent.'
##        #return Name
##

IPageLayoutSnap._methods_ = [
    COMMETHOD(['propput', helpstring(u'The PageLayout that this snap agent is associated with.')], HRESULT, 'PageLayout',
              ( ['in'], POINTER(IPageLayout), 'rhs' )),
]
################################################################
## code template for IPageLayoutSnap implementation
##class IPageLayoutSnap_Impl(object):
##    def _set(self, rhs):
##        u'The PageLayout that this snap agent is associated with.'
##    PageLayout = property(fset = _set, doc = _set.__doc__)
##

class IRealTimeDestination(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that display a destination to track as the current position updates.'
    _iid_ = GUID('{0F9C0EEC-6E0B-44B2-9EA5-3625AF49B242}')
    _idlflags_ = ['oleautomation']
IRealTimeDestination._methods_ = [
    COMMETHOD(['propget', helpstring(u'The location of the destination point.')], HRESULT, 'DestinationLocation',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint)), 'ppPoint' )),
    COMMETHOD(['propput', helpstring(u'The location of the destination point.')], HRESULT, 'DestinationLocation',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'ppPoint' )),
    COMMETHOD(['propget', helpstring(u'The symbol used to show the destination.')], HRESULT, 'DestinationSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IMarkerSymbol)), 'ppSymbol' )),
    COMMETHOD(['propputref', helpstring(u'The symbol used to show the destination.')], HRESULT, 'DestinationSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IMarkerSymbol), 'ppSymbol' )),
    COMMETHOD(['propget', helpstring(u'The label string for the destination.')], HRESULT, 'DestinationLabel',
              ( ['retval', 'out'], POINTER(BSTR), 'Label' )),
    COMMETHOD(['propput', helpstring(u'The label string for the destination.')], HRESULT, 'DestinationLabel',
              ( ['in'], BSTR, 'Label' )),
    COMMETHOD(['propget', helpstring(u'The text symbol used to display the destination label.')], HRESULT, 'DestinationTextSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol)), 'ppSymbol' )),
    COMMETHOD(['propputref', helpstring(u'The text symbol used to display the destination label.')], HRESULT, 'DestinationTextSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol), 'ppSymbol' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the bearing to the destination from the current location is displayed.')], HRESULT, 'ShowBearingToDestination',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pShow' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the bearing to the destination from the current location is displayed.')], HRESULT, 'ShowBearingToDestination',
              ( ['in'], VARIANT_BOOL, 'pShow' )),
    COMMETHOD(['propget', helpstring(u'The marker symbol used to point to the destination.')], HRESULT, 'BearingToDestinationSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IMarkerSymbol)), 'ppSymbol' )),
    COMMETHOD(['propputref', helpstring(u'The marker symbol used to point to the destination.')], HRESULT, 'BearingToDestinationSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IMarkerSymbol), 'ppSymbol' )),
]
################################################################
## code template for IRealTimeDestination implementation
##class IRealTimeDestination_Impl(object):
##    def _get(self):
##        u'Indicates if the bearing to the destination from the current location is displayed.'
##        #return pShow
##    def _set(self, pShow):
##        u'Indicates if the bearing to the destination from the current location is displayed.'
##    ShowBearingToDestination = property(_get, _set, doc = _set.__doc__)
##
##    def BearingToDestinationSymbol(self, ppSymbol):
##        u'The marker symbol used to point to the destination.'
##        #return 
##
##    def _get(self):
##        u'The location of the destination point.'
##        #return ppPoint
##    def _set(self, ppPoint):
##        u'The location of the destination point.'
##    DestinationLocation = property(_get, _set, doc = _set.__doc__)
##
##    def DestinationTextSymbol(self, ppSymbol):
##        u'The text symbol used to display the destination label.'
##        #return 
##
##    def _get(self):
##        u'The label string for the destination.'
##        #return Label
##    def _set(self, Label):
##        u'The label string for the destination.'
##    DestinationLabel = property(_get, _set, doc = _set.__doc__)
##
##    def DestinationSymbol(self, ppSymbol):
##        u'The symbol used to show the destination.'
##        #return 
##

IMobileLayerInfo._methods_ = [
    COMMETHOD(['propget', helpstring(u'The layer identifier. This ID is used throughout to uniquely identify the layer for all requests.')], HRESULT, 'ID',
              ( ['retval', 'out'], POINTER(c_int), 'LayerID' )),
    COMMETHOD(['propget', helpstring(u'The name of the layer.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propget', helpstring(u'The data type of the layer.')], HRESULT, 'DataType',
              ( ['retval', 'out'], POINTER(BSTR), 'DataType' )),
    COMMETHOD(['propget', helpstring(u'Primary display field.')], HRESULT, 'DisplayField',
              ( ['retval', 'out'], POINTER(BSTR), 'FieldName' )),
    COMMETHOD(['propget', helpstring(u'The geometry type of the layer.')], HRESULT, 'GeometryType',
              ( ['retval', 'out'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.esriGeometryType), 'GeometryType' )),
    COMMETHOD(['propget', helpstring(u'The description of the layer. This property is set in the General tab of the Layer Properties dialog.')], HRESULT, 'Description',
              ( ['retval', 'out'], POINTER(BSTR), 'desc' )),
    COMMETHOD(['propget', helpstring(u'The layer type.')], HRESULT, 'Type',
              ( ['retval', 'out'], POINTER(BSTR), 'Type' )),
    COMMETHOD(['propget', helpstring(u'The layer feature dataset name.')], HRESULT, 'FeatureDatasetName',
              ( ['retval', 'out'], POINTER(BSTR), 'FeatureDatasetName' )),
    COMMETHOD(['propget', helpstring(u'The layer feature class name.')], HRESULT, 'FeatureClassName',
              ( ['retval', 'out'], POINTER(BSTR), 'FeatureClassName' )),
    COMMETHOD(['propget', helpstring(u'The minimum visible scale for the layer.')], HRESULT, 'MinScale',
              ( ['retval', 'out'], POINTER(c_double), 'Scale' )),
    COMMETHOD(['propget', helpstring(u'The maximum visible scale for the layer.')], HRESULT, 'MaxScale',
              ( ['retval', 'out'], POINTER(c_double), 'Scale' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer is a feature layer.')], HRESULT, 'IsFeatureLayer',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsFeatureLayer' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer is an annotation layer.')], HRESULT, 'IsAnnotationLayer',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsAnnotationLayer' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer is a raster layer.')], HRESULT, 'IsRasterLayer',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsRasterLayer' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer is a composite layer.')], HRESULT, 'IsComposite',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsComposite' )),
    COMMETHOD(['propget', helpstring(u'The geographic extent of the layer.')], HRESULT, 'Extent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'Extent' )),
    COMMETHOD(['propget', helpstring(u'Array of attribute fields contained in the layer.')], HRESULT, 'Fields',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFields)), 'Fields' )),
    COMMETHOD(['propget', helpstring(u'Array of strings that contains field alias for each field in Fields property.')], HRESULT, 'FieldAliases',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray)), 'FieldAliases' )),
]
################################################################
## code template for IMobileLayerInfo implementation
##class IMobileLayerInfo_Impl(object):
##    @property
##    def DisplayField(self):
##        u'Primary display field.'
##        #return FieldName
##
##    @property
##    def IsAnnotationLayer(self):
##        u'Indicates if the layer is an annotation layer.'
##        #return IsAnnotationLayer
##
##    @property
##    def Description(self):
##        u'The description of the layer. This property is set in the General tab of the Layer Properties dialog.'
##        #return desc
##
##    @property
##    def IsFeatureLayer(self):
##        u'Indicates if the layer is a feature layer.'
##        #return IsFeatureLayer
##
##    @property
##    def DataType(self):
##        u'The data type of the layer.'
##        #return DataType
##
##    @property
##    def Fields(self):
##        u'Array of attribute fields contained in the layer.'
##        #return Fields
##
##    @property
##    def MaxScale(self):
##        u'The maximum visible scale for the layer.'
##        #return Scale
##
##    @property
##    def FieldAliases(self):
##        u'Array of strings that contains field alias for each field in Fields property.'
##        #return FieldAliases
##
##    @property
##    def IsComposite(self):
##        u'Indicates if the layer is a composite layer.'
##        #return IsComposite
##
##    @property
##    def GeometryType(self):
##        u'The geometry type of the layer.'
##        #return GeometryType
##
##    @property
##    def FeatureDatasetName(self):
##        u'The layer feature dataset name.'
##        #return FeatureDatasetName
##
##    @property
##    def Extent(self):
##        u'The geographic extent of the layer.'
##        #return Extent
##
##    @property
##    def IsRasterLayer(self):
##        u'Indicates if the layer is a raster layer.'
##        #return IsRasterLayer
##
##    @property
##    def MinScale(self):
##        u'The minimum visible scale for the layer.'
##        #return Scale
##
##    @property
##    def FeatureClassName(self):
##        u'The layer feature class name.'
##        #return FeatureClassName
##
##    @property
##    def Type(self):
##        u'The layer type.'
##        #return Type
##
##    @property
##    def ID(self):
##        u'The layer identifier. This ID is used throughout to uniquely identify the layer for all requests.'
##        #return LayerID
##
##    @property
##    def Name(self):
##        u'The name of the layer.'
##        #return Name
##

IFormattedGridLabel._methods_ = [
    COMMETHOD(['propget', helpstring(u'The format used to display the numbers in the grid label.')], HRESULT, 'Format',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.INumberFormat)), 'Format' )),
    COMMETHOD(['propput', helpstring(u'The format used to display the numbers in the grid label.')], HRESULT, 'Format',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.INumberFormat), 'Format' )),
]
################################################################
## code template for IFormattedGridLabel implementation
##class IFormattedGridLabel_Impl(object):
##    def _get(self):
##        u'The format used to display the numbers in the grid label.'
##        #return Format
##    def _set(self, Format):
##        u'The format used to display the numbers in the grid label.'
##    Format = property(_get, _set, doc = _set.__doc__)
##

class RasterShader(CoClass):
    u'The raster shader for rendering pixels.'
    _reg_clsid_ = GUID('{9A895DAC-E565-488E-A5F4-8B395327E2BE}')
    _idlflags_ = ['restricted']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IRasterShader(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Access to members that allow a raster shader to process pixel channels.'
    _iid_ = GUID('{9F65C176-D25C-4E7D-90C7-53ABE7910BA6}')
    _idlflags_ = []
RasterShader._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IShader, IRasterShader, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize]

class INetworkIdentifyObj(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that identify network elements.'
    _iid_ = GUID('{1532B02D-827C-4784-B355-E993C12964E6}')
    _idlflags_ = ['oleautomation']
INetworkIdentifyObj._methods_ = [
    COMMETHOD(['propget', helpstring(u'ID of the network element in the network dataset.')], HRESULT, 'ElementID',
              ( ['retval', 'out'], POINTER(c_int), 'eid' )),
    COMMETHOD(['propget', helpstring(u'Element type of the network element in the network dataset.')], HRESULT, 'ElementType',
              ( ['retval', 'out'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriNetworkElementType), 'Type' )),
    COMMETHOD(['propget', helpstring(u'The Source Name and network element ID.')], HRESULT, 'NetworkName',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propget', helpstring(u'Geometry corresponding to the network element.')], HRESULT, 'Shape',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry)), 'netElementGeometry' )),
]
################################################################
## code template for INetworkIdentifyObj implementation
##class INetworkIdentifyObj_Impl(object):
##    @property
##    def Shape(self):
##        u'Geometry corresponding to the network element.'
##        #return netElementGeometry
##
##    @property
##    def ElementType(self):
##        u'Element type of the network element in the network dataset.'
##        #return Type
##
##    @property
##    def NetworkName(self):
##        u'The Source Name and network element ID.'
##        #return Name
##
##    @property
##    def ElementID(self):
##        u'ID of the network element in the network dataset.'
##        #return eid
##

esriGpsDOPInfo._fields_ = [
    ('pdop', c_double),
    ('hdop', c_double),
    ('vdop', c_double),
    ('pdopValid', c_short),
    ('hdopValid', c_short),
    ('vdopValid', c_short),
]
assert sizeof(esriGpsDOPInfo) == 32, sizeof(esriGpsDOPInfo)
assert alignment(esriGpsDOPInfo) == 8, alignment(esriGpsDOPInfo)
class RulerSettings(CoClass):
    u'Ruler settings for use with a PageLayout.'
    _reg_clsid_ = GUID('{31E081AC-CB02-11D1-876C-0000F8751720}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
RulerSettings._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRulerSettings, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

class Library(object):
    u'Esri Carto Object Library 10.2'
    name = u'esriCarto'
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)

esriGpsDateTime._fields_ = [
    ('day', c_short),
    ('month', c_short),
    ('year', c_short),
    ('hour', c_short),
    ('minute', c_short),
    ('seconds', c_double),
    ('timeValid', c_short),
    ('dateValid', c_short),
    ('localOffsetsValid', c_short),
    ('localOffsetHours', c_short),
    ('localOffsetMinutes', c_short),
]
assert sizeof(esriGpsDateTime) == 40, sizeof(esriGpsDateTime)
assert alignment(esriGpsDateTime) == 8, alignment(esriGpsDateTime)
IClassBreaksUIProperties._methods_ = [
    COMMETHOD(['propget', helpstring(u'Lower bound of the class at the specified index.')], HRESULT, 'LowBreak',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(c_double), 'Value' )),
    COMMETHOD(['propput', helpstring(u'Lower bound of the class at the specified index.')], HRESULT, 'LowBreak',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_double, 'Value' )),
    COMMETHOD(['propget', helpstring(u'File and path name of the color ramp.')], HRESULT, 'ColorRamp',
              ( ['retval', 'out'], POINTER(BSTR), 'ColorRamp' )),
    COMMETHOD(['propput', helpstring(u'File and path name of the color ramp.')], HRESULT, 'ColorRamp',
              ( ['in'], BSTR, 'ColorRamp' )),
    COMMETHOD(['propget', helpstring(u'Classification method.')], HRESULT, 'Method',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IUID)), 'clsid' )),
    COMMETHOD(['propputref', helpstring(u'Classification method.')], HRESULT, 'Method',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IUID), 'clsid' )),
    COMMETHOD(['propget', helpstring(u'Number format for class labels.')], HRESULT, 'NumberFormat',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.INumberFormat)), 'Format' )),
    COMMETHOD(['propputref', helpstring(u'Number format for class labels.')], HRESULT, 'NumberFormat',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.INumberFormat), 'Format' )),
    COMMETHOD(['propget', helpstring(u'Indicates if each lower bound is adjusted up to the nearest existing data value.')], HRESULT, 'ShowClassGaps',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'showGaps' )),
    COMMETHOD(['propput', helpstring(u'Indicates if each lower bound is adjusted up to the nearest existing data value.')], HRESULT, 'ShowClassGaps',
              ( ['in'], VARIANT_BOOL, 'showGaps' )),
    COMMETHOD(['propget', helpstring(u'Deviation interval (0-1), where 0 means that no deviation is used.')], HRESULT, 'DeviationInterval',
              ( ['retval', 'out'], POINTER(c_double), 'Interval' )),
    COMMETHOD(['propput', helpstring(u'Deviation interval (0-1), where 0 means that no deviation is used.')], HRESULT, 'DeviationInterval',
              ( ['in'], c_double, 'Interval' )),
]
################################################################
## code template for IClassBreaksUIProperties implementation
##class IClassBreaksUIProperties_Impl(object):
##    def _get(self, Index):
##        u'Lower bound of the class at the specified index.'
##        #return Value
##    def _set(self, Index, Value):
##        u'Lower bound of the class at the specified index.'
##    LowBreak = property(_get, _set, doc = _set.__doc__)
##
##    def NumberFormat(self, Format):
##        u'Number format for class labels.'
##        #return 
##
##    def _get(self):
##        u'Deviation interval (0-1), where 0 means that no deviation is used.'
##        #return Interval
##    def _set(self, Interval):
##        u'Deviation interval (0-1), where 0 means that no deviation is used.'
##    DeviationInterval = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if each lower bound is adjusted up to the nearest existing data value.'
##        #return showGaps
##    def _set(self, showGaps):
##        u'Indicates if each lower bound is adjusted up to the nearest existing data value.'
##    ShowClassGaps = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'File and path name of the color ramp.'
##        #return ColorRamp
##    def _set(self, ColorRamp):
##        u'File and path name of the color ramp.'
##    ColorRamp = property(_get, _set, doc = _set.__doc__)
##
##    def Method(self, clsid):
##        u'Classification method.'
##        #return 
##


# values for enumeration 'esriNetworkArrowSymbolType'
esriNetworkArrowSymbolOneWay = 0
esriNetworkArrowSymbolBothWays = 1
esriNetworkArrowSymbolNoWay = 2
esriNetworkArrowSymbolType = c_int # enum
INetworkEdgeRenderer._methods_ = [
    COMMETHOD(['propget', helpstring(u'The name of the restriction attribute used to display edge traversability.')], HRESULT, 'ArrowAttributeName',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'The name of the restriction attribute used to display edge traversability.')], HRESULT, 'ArrowAttributeName',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propput', helpstring(u'The position of the arrow used to display edge traversability.')], HRESULT, 'ArrowType',
              ( ['in'], esriNetworkArrowType, 'Type' )),
    COMMETHOD(['propget', helpstring(u'The position of the arrow used to display edge traversability.')], HRESULT, 'ArrowType',
              ( ['retval', 'out'], POINTER(esriNetworkArrowType), 'Type' )),
    COMMETHOD(['propput', helpstring(u'The symbol for the specified arrow symbol type.')], HRESULT, 'ArrowSymbol',
              ( ['in'], esriNetworkArrowSymbolType, 'symbolType' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'The symbol for the specified arrow symbol type.')], HRESULT, 'ArrowSymbol',
              ( ['in'], esriNetworkArrowSymbolType, 'symbolType' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol)), 'Symbol' )),
]
################################################################
## code template for INetworkEdgeRenderer implementation
##class INetworkEdgeRenderer_Impl(object):
##    def _get(self):
##        u'The name of the restriction attribute used to display edge traversability.'
##        #return Name
##    def _set(self, Name):
##        u'The name of the restriction attribute used to display edge traversability.'
##    ArrowAttributeName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, symbolType):
##        u'The symbol for the specified arrow symbol type.'
##        #return Symbol
##    def _set(self, symbolType, Symbol):
##        u'The symbol for the specified arrow symbol type.'
##    ArrowSymbol = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The position of the arrow used to display edge traversability.'
##        #return Type
##    def _set(self, Type):
##        u'The position of the arrow used to display edge traversability.'
##    ArrowType = property(_get, _set, doc = _set.__doc__)
##

INetworkEdgeRenderer2._methods_ = [
    COMMETHOD(['propput', helpstring(u'Indicates if arrows are visible for the specified arrow symbol type.')], HRESULT, 'ShowArrows',
              ( ['in'], esriNetworkArrowSymbolType, 'symbolType' ),
              ( ['in'], VARIANT_BOOL, 'Show' )),
    COMMETHOD(['propget', helpstring(u'Indicates if arrows are visible for the specified arrow symbol type.')], HRESULT, 'ShowArrows',
              ( ['in'], esriNetworkArrowSymbolType, 'symbolType' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Show' )),
]
################################################################
## code template for INetworkEdgeRenderer2 implementation
##class INetworkEdgeRenderer2_Impl(object):
##    def _get(self, symbolType):
##        u'Indicates if arrows are visible for the specified arrow symbol type.'
##        #return Show
##    def _set(self, symbolType, Show):
##        u'Indicates if arrows are visible for the specified arrow symbol type.'
##    ShowArrows = property(_get, _set, doc = _set.__doc__)
##

class INetworkLayerSymbology(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that symbolize network layers.'
    _iid_ = GUID('{9ABB7B93-7F5F-43B2-A0B9-15F468898530}')
    _idlflags_ = ['oleautomation']
INetworkLayerSymbology._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if it can create symbology for this type of network layer.')], HRESULT, 'CanSymbolize',
              ( ['in'], POINTER(INetworkLayer), 'Layer' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propget', helpstring(u'The priority is used to determine the best symbolizer to symbolize a network layer. If multiple symbolizers can symbolize the network layer, the one with the largest numeric value for priority is chosen.')], HRESULT, 'Priority',
              ( ['retval', 'out'], POINTER(c_double), 'Priority' )),
    COMMETHOD([helpstring(u'Generates symbology for the network layer.')], HRESULT, 'Symbolize',
              ( ['in'], POINTER(INetworkLayer), 'Layer' )),
]
################################################################
## code template for INetworkLayerSymbology implementation
##class INetworkLayerSymbology_Impl(object):
##    @property
##    def CanSymbolize(self, Layer):
##        u'Indicates if it can create symbology for this type of network layer.'
##        #return flag
##
##    @property
##    def Priority(self):
##        u'The priority is used to determine the best symbolizer to symbolize a network layer. If multiple symbolizers can symbolize the network layer, the one with the largest numeric value for priority is chosen.'
##        #return Priority
##
##    def Symbolize(self, Layer):
##        u'Generates symbology for the network layer.'
##        #return 
##

IRasterFunctionInfos._methods_ = [
    COMMETHOD(['propget', helpstring(u'The raster function info count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propget', helpstring(u'The raster function info at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IRasterFunctionInfo)), 'ppFunctionInfo' )),
    COMMETHOD([helpstring(u'Removes the raster function info at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all raster function infos.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Adds a raster function info.')], HRESULT, 'Add',
              ( ['in'], POINTER(IRasterFunctionInfo), 'pFunctionInfo' )),
    COMMETHOD([helpstring(u'Adds a raster function info at the specified position.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(IRasterFunctionInfo), 'pFunctionInfo' )),
]
################################################################
## code template for IRasterFunctionInfos implementation
##class IRasterFunctionInfos_Impl(object):
##    @property
##    def Count(self):
##        u'The raster function info count.'
##        #return pCount
##
##    def Insert(self, Index, pFunctionInfo):
##        u'Adds a raster function info at the specified position.'
##        #return 
##
##    def Remove(self, Index):
##        u'Removes the raster function info at the specified position.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'The raster function info at the specified position.'
##        #return ppFunctionInfo
##
##    def RemoveAll(self):
##        u'Removes all raster function infos.'
##        #return 
##
##    def Add(self, pFunctionInfo):
##        u'Adds a raster function info.'
##        #return 
##

IImageInset._methods_ = [
    COMMETHOD(['propget', helpstring(u'The raster layer.')], HRESULT, 'Layer',
              ( ['retval', 'out'], POINTER(POINTER(ILayer)), 'ppLayer' )),
    COMMETHOD(['propputref', helpstring(u'The raster layer.')], HRESULT, 'Layer',
              ( ['in'], POINTER(ILayer), 'ppLayer' )),
    COMMETHOD(['propget', helpstring(u'The map center.')], HRESULT, 'MapCenter',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint)), 'pCenter' )),
    COMMETHOD(['propputref', helpstring(u'The map center.')], HRESULT, 'MapCenter',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'pCenter' )),
    COMMETHOD(['propputref', helpstring(u'Symbol.')], HRESULT, 'PointSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol), 'rhs' )),
    COMMETHOD(['propputref', helpstring(u'Symbol for selected CP.')], HRESULT, 'SelectionSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol), 'rhs' )),
]
################################################################
## code template for IImageInset implementation
##class IImageInset_Impl(object):
##    def MapCenter(self, pCenter):
##        u'The map center.'
##        #return 
##
##    def PointSymbol(self, rhs):
##        u'Symbol.'
##        #return 
##
##    def Layer(self, ppLayer):
##        u'The raster layer.'
##        #return 
##
##    def SelectionSymbol(self, rhs):
##        u'Symbol for selected CP.'
##        #return 
##

esriGpsMagneticVariance._fields_ = [
    ('magneticVariance', c_double),
    ('magVarValid', c_short),
]
assert sizeof(esriGpsMagneticVariance) == 16, sizeof(esriGpsMagneticVariance)
assert alignment(esriGpsMagneticVariance) == 8, alignment(esriGpsMagneticVariance)
class PageLayout(CoClass):
    u'Page Layout class contains maps and map surrounds.'
    _reg_clsid_ = GUID('{DD94D76E-836D-11D0-87EC-080009EC732A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
PageLayout._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IPageLayout, IPageLayout2, IPageLayout3, IActiveView, IViewManager, IViewRefresh, IGraphicsContainer, IGraphicsContainerSelect, IGraphicSnapEnvironment, IGraphicSnapEnvironment2, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IConnectionPointContainer, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, IPageEvents, ISelectionEvents, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITransformEvents, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayAdmin, IMxdContents, IPageLayoutExtensions, IServiceLayerCredits]
PageLayout._outgoing_interfaces_ = [IActiveViewEvents]

class TerrainDirtyAreaRenderer(CoClass):
    u'Terrain dirty area renderer component.'
    _reg_clsid_ = GUID('{3362C3A9-BA4A-4F39-A7B1-FC4400CF2102}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
TerrainDirtyAreaRenderer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ITinSingleSymbolRenderer, ITerrainRenderer, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySupport, ILegendInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

class TerrainPointElevationRenderer(CoClass):
    u'Terrain point renderer component.'
    _reg_clsid_ = GUID('{D8473F3C-2165-44AA-B8FD-34403E1F9354}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
TerrainPointElevationRenderer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ITinColorRampRenderer, IClassBreaksUIProperties, ITinIllumination, ITerrainRenderer, ITerrainRenderer2, ILegendInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, IDataSampling]

class TerrainPointAttributeRenderer(CoClass):
    u'Terrain point renderer component.'
    _reg_clsid_ = GUID('{D3FC15C5-0CBE-4900-BCA8-DC09A12F304C}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class ITerrainAttributeRenderer(ITerrainRenderer2):
    _case_insensitive_ = True
    u'Provides access to members that control functions common to all Terrain renderers.'
    _iid_ = GUID('{6B2403F7-7D51-4647-A46A-5F8EA269F273}')
    _idlflags_ = ['oleautomation']
TerrainPointAttributeRenderer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ITinColorRampRenderer, IClassBreaksUIProperties, ITerrainRenderer, ITerrainRenderer2, ITerrainAttributeRenderer, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySupport, ILegendInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, IDataSampling]

IImageDisplay._methods_ = [
    COMMETHOD(['propget', helpstring(u'The height of the image in pixels.')], HRESULT, 'Height',
              ( ['retval', 'out'], POINTER(c_int), 'imageHeight' )),
    COMMETHOD(['propput', helpstring(u'The height of the image in pixels.')], HRESULT, 'Height',
              ( ['in'], c_int, 'imageHeight' )),
    COMMETHOD(['propget', helpstring(u'The width of the image in pixels.')], HRESULT, 'Width',
              ( ['retval', 'out'], POINTER(c_int), 'imageWidth' )),
    COMMETHOD(['propput', helpstring(u'The width of the image in pixels.')], HRESULT, 'Width',
              ( ['in'], c_int, 'imageWidth' )),
    COMMETHOD(['propget', helpstring(u'The device resolution of the image (dots per inch).')], HRESULT, 'DeviceResolution',
              ( ['retval', 'out'], POINTER(c_double), 'Dpi' )),
    COMMETHOD(['propput', helpstring(u'The device resolution of the image (dots per inch).')], HRESULT, 'DeviceResolution',
              ( ['in'], c_double, 'Dpi' )),
]
################################################################
## code template for IImageDisplay implementation
##class IImageDisplay_Impl(object):
##    def _get(self):
##        u'The device resolution of the image (dots per inch).'
##        #return Dpi
##    def _set(self, Dpi):
##        u'The device resolution of the image (dots per inch).'
##    DeviceResolution = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The width of the image in pixels.'
##        #return imageWidth
##    def _set(self, imageWidth):
##        u'The width of the image in pixels.'
##    Width = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The height of the image in pixels.'
##        #return imageHeight
##    def _set(self, imageHeight):
##        u'The height of the image in pixels.'
##    Height = property(_get, _set, doc = _set.__doc__)
##

class TerrainPointUniqueValueRenderer(CoClass):
    u'Terrain point unique value renderer component.'
    _reg_clsid_ = GUID('{8B06E040-89B0-4657-98A5-B942398745B8}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
TerrainPointUniqueValueRenderer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ITinUniqueValueRenderer, ITinRenderer, ITerrainRenderer, ITerrainRenderer2, ITerrainAttributeRenderer, ILegendInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

class ILayerExtensionInvalidate(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to partial refresh override.'
    _iid_ = GUID('{4BF024B4-561D-439D-AAD3-AC068F52108D}')
    _idlflags_ = ['oleautomation']
ILayerExtensionInvalidate._methods_ = [
    COMMETHOD([helpstring(u'Indicates whether map should refresh visible extent for layer.')], HRESULT, 'InvalidateVisibleExtent',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pInvalidateVisibleExtent' )),
]
################################################################
## code template for ILayerExtensionInvalidate implementation
##class ILayerExtensionInvalidate_Impl(object):
##    def InvalidateVisibleExtent(self):
##        u'Indicates whether map should refresh visible extent for layer.'
##        #return pInvalidateVisibleExtent
##

ISnapGrid._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if the snapping grid is visible.')], HRESULT, 'IsVisible',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsVisible' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the snapping grid is visible.')], HRESULT, 'IsVisible',
              ( ['in'], VARIANT_BOOL, 'IsVisible' )),
    COMMETHOD(['propget', helpstring(u'The horizontal distance between grid points.')], HRESULT, 'HorizontalSpacing',
              ( ['retval', 'out'], POINTER(c_double), 'spacing' )),
    COMMETHOD(['propput', helpstring(u'The horizontal distance between grid points.')], HRESULT, 'HorizontalSpacing',
              ( ['in'], c_double, 'spacing' )),
    COMMETHOD(['propget', helpstring(u'The vertical distance between grid points.')], HRESULT, 'VerticalSpacing',
              ( ['retval', 'out'], POINTER(c_double), 'spacing' )),
    COMMETHOD(['propput', helpstring(u'The vertical distance between grid points.')], HRESULT, 'VerticalSpacing',
              ( ['in'], c_double, 'spacing' )),
    COMMETHOD([helpstring(u'Draw the grid.')], HRESULT, 'Draw',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], POINTER(IPage), 'Page' )),
]
################################################################
## code template for ISnapGrid implementation
##class ISnapGrid_Impl(object):
##    def _get(self):
##        u'The horizontal distance between grid points.'
##        #return spacing
##    def _set(self, spacing):
##        u'The horizontal distance between grid points.'
##    HorizontalSpacing = property(_get, _set, doc = _set.__doc__)
##
##    def Draw(self, Display, Page):
##        u'Draw the grid.'
##        #return 
##
##    def _get(self):
##        u'The vertical distance between grid points.'
##        #return spacing
##    def _set(self, spacing):
##        u'The vertical distance between grid points.'
##    VerticalSpacing = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the snapping grid is visible.'
##        #return IsVisible
##    def _set(self, IsVisible):
##        u'Indicates if the snapping grid is visible.'
##    IsVisible = property(_get, _set, doc = _set.__doc__)
##

class IMapCacheExporter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to methods that convert cache format.'
    _iid_ = GUID('{AEAEA0DC-E770-4885-B9FD-C47D3E45B171}')
    _idlflags_ = ['oleautomation']
IMapCacheExporter._methods_ = [
    COMMETHOD(['propget', helpstring(u'Server machine name.')], HRESULT, 'Host',
              ( ['retval', 'out'], POINTER(BSTR), 'pHost' )),
    COMMETHOD(['propput', helpstring(u'Server machine name.')], HRESULT, 'Host',
              ( ['in'], BSTR, 'pHost' )),
    COMMETHOD(['propget', helpstring(u'Service name.')], HRESULT, 'Service',
              ( ['retval', 'out'], POINTER(BSTR), 'pService' )),
    COMMETHOD(['propput', helpstring(u'Service name.')], HRESULT, 'Service',
              ( ['in'], BSTR, 'pService' )),
    COMMETHOD(['propget', helpstring(u'Dataframe name.')], HRESULT, 'Dataframe',
              ( ['retval', 'out'], POINTER(BSTR), 'pDataframe' )),
    COMMETHOD(['propput', helpstring(u'Dataframe name.')], HRESULT, 'Dataframe',
              ( ['in'], BSTR, 'pDataframe' )),
    COMMETHOD(['propget', helpstring(u'The cache location.')], HRESULT, 'TargetCachePath',
              ( ['retval', 'out'], POINTER(BSTR), 'ppCacheLocation' )),
    COMMETHOD(['propput', helpstring(u'The cache location.')], HRESULT, 'TargetCachePath',
              ( ['in'], BSTR, 'ppCacheLocation' )),
    COMMETHOD([helpstring(u'Import cache.')], HRESULT, 'Import',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'pLevels' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'pGeometry' ),
              ( ['in'], c_int, 'numThreads' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' ),
              ( ['in'], VARIANT_BOOL, 'Overwrite' )),
    COMMETHOD([helpstring(u'Export cache.')], HRESULT, 'Export',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'pLevels' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'pGeometry' ),
              ( ['in'], c_int, 'numThreads' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' ),
              ( ['in'], POINTER(ICacheStorageInfo), 'pCacheStorageInfo' ),
              ( ['in'], VARIANT_BOOL, 'Overwrite' )),
]
################################################################
## code template for IMapCacheExporter implementation
##class IMapCacheExporter_Impl(object):
##    def _get(self):
##        u'Service name.'
##        #return pService
##    def _set(self, pService):
##        u'Service name.'
##    Service = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The cache location.'
##        #return ppCacheLocation
##    def _set(self, ppCacheLocation):
##        u'The cache location.'
##    TargetCachePath = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Dataframe name.'
##        #return pDataframe
##    def _set(self, pDataframe):
##        u'Dataframe name.'
##    Dataframe = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Server machine name.'
##        #return pHost
##    def _set(self, pHost):
##        u'Server machine name.'
##    Host = property(_get, _set, doc = _set.__doc__)
##
##    def Export(self, pLevels, pGeometry, numThreads, pTrackCancel, pCacheStorageInfo, Overwrite):
##        u'Export cache.'
##        #return 
##
##    def Import(self, pLevels, pGeometry, numThreads, pTrackCancel, Overwrite):
##        u'Import cache.'
##        #return 
##

class IACScaleDependentRenderer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control ArcIMS scale dependent renderers.'
    _iid_ = GUID('{209EC66D-9469-4AFC-93AF-944BBF886694}')
    _idlflags_ = ['oleautomation']
IACScaleDependentRenderer._methods_ = [
    COMMETHOD(['propget', helpstring(u'Minimum scale at which the renderer will display.')], HRESULT, 'MinScale',
              ( ['retval', 'out'], POINTER(c_double), 'Scale' )),
    COMMETHOD(['propput', helpstring(u'Minimum scale at which the renderer will display.')], HRESULT, 'MinScale',
              ( ['in'], c_double, 'Scale' )),
    COMMETHOD(['propget', helpstring(u'Maximum scale at which the renderer will display.')], HRESULT, 'MaxScale',
              ( ['retval', 'out'], POINTER(c_double), 'Scale' )),
    COMMETHOD(['propput', helpstring(u'Maximum scale at which the renderer will display.')], HRESULT, 'MaxScale',
              ( ['in'], c_double, 'Scale' )),
    COMMETHOD(['propget', helpstring(u'Renderer used to draw the layer.')], HRESULT, 'Renderer',
              ( ['retval', 'out'], POINTER(POINTER(IACRenderer)), 'Renderer' )),
    COMMETHOD(['propputref', helpstring(u'Renderer used to draw the layer.')], HRESULT, 'Renderer',
              ( ['in'], POINTER(IACRenderer), 'Renderer' )),
]
################################################################
## code template for IACScaleDependentRenderer implementation
##class IACScaleDependentRenderer_Impl(object):
##    def _get(self):
##        u'Minimum scale at which the renderer will display.'
##        #return Scale
##    def _set(self, Scale):
##        u'Minimum scale at which the renderer will display.'
##    MinScale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Maximum scale at which the renderer will display.'
##        #return Scale
##    def _set(self, Scale):
##        u'Maximum scale at which the renderer will display.'
##    MaxScale = property(_get, _set, doc = _set.__doc__)
##
##    def Renderer(self, Renderer):
##        u'Renderer used to draw the layer.'
##        #return 
##

IFDOGraphicsLayer._methods_ = [
    COMMETHOD([helpstring(u'Begins a batch process for adding elements to a graphics layer.')], HRESULT, 'BeginAddElements'),
    COMMETHOD([helpstring(u'Sets up attribute conversion parameters for batch conversion.')], HRESULT, 'SetupAttributeConversion',
              ( ['in'], c_int, 'numAttributes' ),
              ( ['in'], POINTER(c_int), 'inputCols' ),
              ( ['in'], POINTER(c_int), 'outputCols' )),
    COMMETHOD([helpstring(u'Adds a feature and its corresponding element to a graphics layer.')], HRESULT, 'DoAddFeature',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeature), 'pFeature' ),
              ( ['in'], POINTER(IElement), 'pElement' ),
              ( ['in'], c_int, 'zorder' )),
    COMMETHOD([helpstring(u'Adds a batch of elements to a graphics layer.')], HRESULT, 'DoAddElements',
              ( ['in'], POINTER(IElementCollection), 'pElements' ),
              ( ['in'], c_int, 'zorder' )),
    COMMETHOD([helpstring(u'Ends the batch process for adding elements to a graphics layer.')], HRESULT, 'EndAddElements'),
]
################################################################
## code template for IFDOGraphicsLayer implementation
##class IFDOGraphicsLayer_Impl(object):
##    def EndAddElements(self):
##        u'Ends the batch process for adding elements to a graphics layer.'
##        #return 
##
##    def DoAddElements(self, pElements, zorder):
##        u'Adds a batch of elements to a graphics layer.'
##        #return 
##
##    def SetupAttributeConversion(self, numAttributes, inputCols, outputCols):
##        u'Sets up attribute conversion parameters for batch conversion.'
##        #return 
##
##    def DoAddFeature(self, pFeature, pElement, zorder):
##        u'Adds a feature and its corresponding element to a graphics layer.'
##        #return 
##
##    def BeginAddElements(self):
##        u'Begins a batch process for adding elements to a graphics layer.'
##        #return 
##

class LasUniqueValueRenderer(CoClass):
    u'LAS dataset unique value renderer component.'
    _reg_clsid_ = GUID('{850738A3-DCBA-474D-B2CA-E9428B1FFF0C}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
LasUniqueValueRenderer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ITinUniqueValueRenderer, ITinRenderer, IDatasetRenderer, ILasAttributeRenderer, IMultiResolutionRenderer, ILegendInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

IDynamicMap._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if dynamic map is turned on or off.')], HRESULT, 'DynamicMapEnabled',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'isEnable' )),
    COMMETHOD(['propput', helpstring(u'Indicates if dynamic map is turned on or off.')], HRESULT, 'DynamicMapEnabled',
              ( ['in'], VARIANT_BOOL, 'isEnable' )),
    COMMETHOD(['propget', helpstring(u'The Dynamic draw rate in milliseconds.')], HRESULT, 'DynamicDrawRate',
              ( ['retval', 'out'], POINTER(c_int), 'dynamicDrawRateMS' )),
    COMMETHOD(['propput', helpstring(u'The Dynamic draw rate in milliseconds.')], HRESULT, 'DynamicDrawRate',
              ( ['in'], c_int, 'dynamicDrawRateMS' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the dynamic map is rendered in Sub Pixels or Full Pixels (snap to the nearest discrete pixel).')], HRESULT, 'UseSubPixelRendering',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'UseSubPixelRendering' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the dynamic map is rendered in Sub Pixels or Full Pixels (snap to the nearest discrete pixel).')], HRESULT, 'UseSubPixelRendering',
              ( ['in'], VARIANT_BOOL, 'UseSubPixelRendering' )),
]
################################################################
## code template for IDynamicMap implementation
##class IDynamicMap_Impl(object):
##    def _get(self):
##        u'The Dynamic draw rate in milliseconds.'
##        #return dynamicDrawRateMS
##    def _set(self, dynamicDrawRateMS):
##        u'The Dynamic draw rate in milliseconds.'
##    DynamicDrawRate = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if dynamic map is turned on or off.'
##        #return isEnable
##    def _set(self, isEnable):
##        u'Indicates if dynamic map is turned on or off.'
##    DynamicMapEnabled = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether the dynamic map is rendered in Sub Pixels or Full Pixels (snap to the nearest discrete pixel).'
##        #return UseSubPixelRendering
##    def _set(self, UseSubPixelRendering):
##        u'Indicates whether the dynamic map is rendered in Sub Pixels or Full Pixels (snap to the nearest discrete pixel).'
##    UseSubPixelRendering = property(_get, _set, doc = _set.__doc__)
##

class AnnotateMapProperties(CoClass):
    u'A collection of annotate layer properties.'
    _reg_clsid_ = GUID('{8C439001-14EC-11D2-A27E-080009B6F22B}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
AnnotateMapProperties._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IAnnotateMapProperties, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

IStandaloneTable._methods_ = [
    COMMETHOD(['propget', helpstring(u'Name of the standalone table.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'Name of the standalone table.')], HRESULT, 'Name',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'The table associated with the standalone table.')], HRESULT, 'Table',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable)), 'ppTable' )),
    COMMETHOD(['propputref', helpstring(u'The table associated with the standalone table.')], HRESULT, 'Table',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable), 'ppTable' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the standalone table is currently valid.')], HRESULT, 'Valid',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Valid' )),
    COMMETHOD(['propget', helpstring(u'Primary display field.')], HRESULT, 'DisplayField',
              ( ['retval', 'out'], POINTER(BSTR), 'pFieldName' )),
    COMMETHOD(['propput', helpstring(u'Primary display field.')], HRESULT, 'DisplayField',
              ( ['in'], BSTR, 'pFieldName' )),
]
################################################################
## code template for IStandaloneTable implementation
##class IStandaloneTable_Impl(object):
##    def Table(self, ppTable):
##        u'The table associated with the standalone table.'
##        #return 
##
##    def _get(self):
##        u'Primary display field.'
##        #return pFieldName
##    def _set(self, pFieldName):
##        u'Primary display field.'
##    DisplayField = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Valid(self):
##        u'Indicates if the standalone table is currently valid.'
##        #return Valid
##
##    def _get(self):
##        u'Name of the standalone table.'
##        #return Name
##    def _set(self, Name):
##        u'Name of the standalone table.'
##    Name = property(_get, _set, doc = _set.__doc__)
##

class LasPointElevationRenderer(CoClass):
    u'LasDataset point renderer component.'
    _reg_clsid_ = GUID('{E53B5E66-8C03-4F92-940F-54F62A021838}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
LasPointElevationRenderer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ITinRenderer, IDatasetRenderer, ILasAttributeRenderer, ITinColorRampRenderer, IClassBreaksUIProperties, ITinIllumination, ILegendInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, IDataSampling]

IACValueMapRenderer._methods_ = [
    COMMETHOD(['propget', helpstring(u'Field name that is used to categorize features.')], HRESULT, 'LookupField',
              ( ['retval', 'out'], POINTER(BSTR), 'LookupField' )),
    COMMETHOD(['propput', helpstring(u'Field name that is used to categorize features.')], HRESULT, 'LookupField',
              ( ['in'], BSTR, 'LookupField' )),
    COMMETHOD(['propget', helpstring(u'Number of unique values used to categorize the data.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'Symbol associated with the specified value.')], HRESULT, 'Symbol',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IACSymbol)), 'Symbol' )),
    COMMETHOD(['propput', helpstring(u'Symbol associated with the specified value.')], HRESULT, 'Symbol',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(IACSymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'The type of categorization for the values within the specified field.')], HRESULT, 'RangeType',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(acRangeType), 'range' )),
    COMMETHOD(['propput', helpstring(u'The type of categorization for the values within the specified field.')], HRESULT, 'RangeType',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], acRangeType, 'range' )),
    COMMETHOD(['propget', helpstring(u'The unique value for the specified field.')], HRESULT, 'Value',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Value' )),
    COMMETHOD(['propput', helpstring(u'The unique value for the specified field.')], HRESULT, 'Value',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Value' )),
    COMMETHOD(['propget', helpstring(u'Label for the specified value.')], HRESULT, 'Label',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Label' )),
    COMMETHOD(['propput', helpstring(u'Label for the specified value.')], HRESULT, 'Label',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Label' )),
    COMMETHOD(['propget', helpstring(u'The upper value of the range.')], HRESULT, 'Upper',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Value' )),
    COMMETHOD(['propput', helpstring(u'The upper value of the range.')], HRESULT, 'Upper',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Value' )),
    COMMETHOD(['propget', helpstring(u'The lower value of the range.')], HRESULT, 'Lower',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Value' )),
    COMMETHOD(['propput', helpstring(u'The lower value of the range.')], HRESULT, 'Lower',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Value' )),
    COMMETHOD([helpstring(u'Adds a value and corresponding symbol to the list.')], HRESULT, 'Add',
              ( ['in'], POINTER(IACSymbol), 'Symbol' ),
              ( ['in'], acRangeType, 'range' ),
              ( ['in'], BSTR, 'Value' ),
              ( ['in'], BSTR, 'Label' ),
              ( ['in'], BSTR, 'Lower' ),
              ( ['in'], BSTR, 'Upper' )),
    COMMETHOD([helpstring(u'Clears all values.')], HRESULT, 'Clear'),
    COMMETHOD([helpstring(u'Removes a value.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
]
################################################################
## code template for IACValueMapRenderer implementation
##class IACValueMapRenderer_Impl(object):
##    @property
##    def Count(self):
##        u'Number of unique values used to categorize the data.'
##        #return Count
##
##    def _get(self, Index):
##        u'The upper value of the range.'
##        #return Value
##    def _set(self, Index, Value):
##        u'The upper value of the range.'
##    Upper = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, Index):
##        u'The lower value of the range.'
##        #return Value
##    def _set(self, Index, Value):
##        u'The lower value of the range.'
##    Lower = property(_get, _set, doc = _set.__doc__)
##
##    def Clear(self):
##        u'Clears all values.'
##        #return 
##
##    def _get(self, Index):
##        u'The type of categorization for the values within the specified field.'
##        #return range
##    def _set(self, Index, range):
##        u'The type of categorization for the values within the specified field.'
##    RangeType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, Index):
##        u'Symbol associated with the specified value.'
##        #return Symbol
##    def _set(self, Index, Symbol):
##        u'Symbol associated with the specified value.'
##    Symbol = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, Index):
##        u'The unique value for the specified field.'
##        #return Value
##    def _set(self, Index, Value):
##        u'The unique value for the specified field.'
##    Value = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, Index):
##        u'Label for the specified value.'
##        #return Label
##    def _set(self, Index, Label):
##        u'Label for the specified value.'
##    Label = property(_get, _set, doc = _set.__doc__)
##
##    def Add(self, Symbol, range, Value, Label, Lower, Upper):
##        u'Adds a value and corresponding symbol to the list.'
##        #return 
##
##    def Remove(self, Index):
##        u'Removes a value.'
##        #return 
##
##    def _get(self):
##        u'Field name that is used to categorize features.'
##        #return LookupField
##    def _set(self, LookupField):
##        u'Field name that is used to categorize features.'
##    LookupField = property(_get, _set, doc = _set.__doc__)
##

IImageResult._methods_ = [
    COMMETHOD(['propget', helpstring(u'Binary data representing the generated image.')], HRESULT, 'MimeData',
              ( ['retval', 'out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'Data' )),
    COMMETHOD(['propget', helpstring(u'The URL of the generated image.')], HRESULT, 'URL',
              ( ['retval', 'out'], POINTER(BSTR), 'URL' )),
    COMMETHOD(['propget', helpstring(u'The height of the image in pixels.')], HRESULT, 'Height',
              ( ['retval', 'out'], POINTER(c_int), 'heightPixels' )),
    COMMETHOD(['propget', helpstring(u'The width of the image in pixels.')], HRESULT, 'Width',
              ( ['retval', 'out'], POINTER(c_int), 'widthPixels' )),
    COMMETHOD(['propget', helpstring(u'The device resolution of the image specified in the request (dots per inch).')], HRESULT, 'ReferenceDPI',
              ( ['retval', 'out'], POINTER(c_double), 'Dpi' )),
]
################################################################
## code template for IImageResult implementation
##class IImageResult_Impl(object):
##    @property
##    def MimeData(self):
##        u'Binary data representing the generated image.'
##        #return Data
##
##    @property
##    def URL(self):
##        u'The URL of the generated image.'
##        #return URL
##
##    @property
##    def Width(self):
##        u'The width of the image in pixels.'
##        #return widthPixels
##
##    @property
##    def ReferenceDPI(self):
##        u'The device resolution of the image specified in the request (dots per inch).'
##        #return Dpi
##
##    @property
##    def Height(self):
##        u'The height of the image in pixels.'
##        #return heightPixels
##

IImageResult2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Binary data representing the generated image.')], HRESULT, 'MimeData',
              ( ['retval', 'out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'Data' )),
    COMMETHOD(['propget', helpstring(u'The URL of the generated image.')], HRESULT, 'URL',
              ( ['retval', 'out'], POINTER(BSTR), 'URL' )),
    COMMETHOD(['propget', helpstring(u'The height of the image in pixels.')], HRESULT, 'Height',
              ( ['retval', 'out'], POINTER(c_int), 'heightPixels' )),
    COMMETHOD(['propget', helpstring(u'The width of the image in pixels.')], HRESULT, 'Width',
              ( ['retval', 'out'], POINTER(c_int), 'widthPixels' )),
    COMMETHOD(['propget', helpstring(u'The device resolution of the image specified in the request (dots per inch).')], HRESULT, 'ReferenceDPI',
              ( ['retval', 'out'], POINTER(c_double), 'Dpi' )),
    COMMETHOD(['propget', helpstring(u'The MIME type of the generated image.')], HRESULT, 'MimeType',
              ( ['retval', 'out'], POINTER(BSTR), 'pMimeType' )),
]
################################################################
## code template for IImageResult2 implementation
##class IImageResult2_Impl(object):
##    @property
##    def MimeData(self):
##        u'Binary data representing the generated image.'
##        #return Data
##
##    @property
##    def MimeType(self):
##        u'The MIME type of the generated image.'
##        #return pMimeType
##
##    @property
##    def ReferenceDPI(self):
##        u'The device resolution of the image specified in the request (dots per inch).'
##        #return Dpi
##
##    @property
##    def URL(self):
##        u'The URL of the generated image.'
##        #return URL
##
##    @property
##    def Height(self):
##        u'The height of the image in pixels.'
##        #return heightPixels
##
##    @property
##    def Width(self):
##        u'The width of the image in pixels.'
##        #return widthPixels
##

IMapBookmarks2._methods_ = [
    COMMETHOD([helpstring(u'Moves a bookmark in the collection.')], HRESULT, 'MoveBookmarkTo',
              ( ['in'], POINTER(ISpatialBookmark), 'bookmark' ),
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Adds a bookmark to the collection.')], HRESULT, 'SortBookmarks',
              ( ['in'], VARIANT_BOOL, 'Ascending' )),
]
################################################################
## code template for IMapBookmarks2 implementation
##class IMapBookmarks2_Impl(object):
##    def SortBookmarks(self, Ascending):
##        u'Adds a bookmark to the collection.'
##        #return 
##
##    def MoveBookmarkTo(self, bookmark, Index):
##        u'Moves a bookmark in the collection.'
##        #return 
##

ITableCollection._methods_ = [
    COMMETHOD(['propget', helpstring(u'Number of tables.')], HRESULT, 'TableCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The table at the given index.')], HRESULT, 'Table',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable)), 'Table' )),
    COMMETHOD([helpstring(u'Adds a table to the collection.')], HRESULT, 'AddTable',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable), 'Table' )),
    COMMETHOD([helpstring(u'Removes a table from the collection.')], HRESULT, 'RemoveTable',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable), 'Table' )),
    COMMETHOD([helpstring(u'Removes all tables from the collection.')], HRESULT, 'RemoveAllTables'),
]
################################################################
## code template for ITableCollection implementation
##class ITableCollection_Impl(object):
##    def RemoveAllTables(self):
##        u'Removes all tables from the collection.'
##        #return 
##
##    @property
##    def Table(self, Index):
##        u'The table at the given index.'
##        #return Table
##
##    def RemoveTable(self, Table):
##        u'Removes a table from the collection.'
##        #return 
##
##    @property
##    def TableCount(self):
##        u'Number of tables.'
##        #return Count
##
##    def AddTable(self, Table):
##        u'Adds a table to the collection.'
##        #return 
##


# values for enumeration 'esriWCSServerMessageCodeEnum'
esriWCSServerMessageCode_ImageServerWCSFailed = 81001
esriWCSServerMessageCode_ImageServerWCSNotLicensed = 81002
esriWCSServerMessageCode_ImageServerWCSStarted = 81003
esriWCSServerMessageCode_ImageServerWCSInitialized = 81004
esriWCSServerMessageCode_ImageServerWCSGetData = 81010
esriWCSServerMessageCode_ImageServerWCSGetCapabilities = 81012
esriWCSServerMessageCode_ImageServerWCSDescribeCoverage = 81014
esriWCSServerMessageCode_ImageServerWCSGetCoverage = 81016
esriWCSServerMessageCode_ImageServerWCSUnknownRequest = 81020
esriWCSServerMessageCode_ImageServerWCSParseKVP = 81030
esriWCSServerMessageCode_ImageServerWCSParseXML = 81031
esriWCSServerMessageCode_ImageServerWCSParseKVP11 = 81032
esriWCSServerMessageCode_ImageServerWCSParseXML11 = 81033
esriWCSServerMessageCode_ImageServerWCSParseWriteData = 81034
esriWCSServerMessageCode_ImageServerWCSInvalidCRS = 81040
esriWCSServerMessageCode_ImageServerWCSInvalidDataset = 81041
esriWCSServerMessageCode_ImageServerWCSInvalidLayer = 81042
esriWCSServerMessageCode_ImageServerWCSAISInitialized = 81043
esriWCSServerMessageCode_ImageServerWCSDatasetInitialized = 81044
esriWCSServerMessageCode_ImageServerWCSWrongPixelType = 81045
esriWCSServerMessageCode_GeoDataServerWCSFailed = 91001
esriWCSServerMessageCode_GeoDataServerWCSNotLicensed = 91002
esriWCSServerMessageCode_GeoDataServerWCSStarted = 91003
esriWCSServerMessageCode_GeoDataServerWCSInitialized = 91004
esriWCSServerMessageCode_GeoDataServerWCSGetData = 91010
esriWCSServerMessageCode_GeoDataServerWCSGetCapabilities = 91012
esriWCSServerMessageCode_GeoDataServerWCSDescribeCoverage = 91014
esriWCSServerMessageCode_GeoDataServerWCSGetCoverage = 91016
esriWCSServerMessageCode_GeoDataServerWCSUnknownRequest = 91020
esriWCSServerMessageCode_GeoDataServerWCSParseKVP = 91030
esriWCSServerMessageCode_GeoDataServerWCSParseXML = 91031
esriWCSServerMessageCode_GeoDataServerWCSParseKVP11 = 91032
esriWCSServerMessageCode_GeoDataServerWCSParseXML11 = 91033
esriWCSServerMessageCode_GeoDataServerWCSParseWriteData = 91034
esriWCSServerMessageCode_GeoDataServerWCSInvalidCRS = 91040
esriWCSServerMessageCode_GeoDataServerWCSInvalidDataset = 91041
esriWCSServerMessageCode_GeoDataServerWCSInvalidLayer = 91042
esriWCSServerMessageCode_GeoDataServerWCSAISInitialized = 91043
esriWCSServerMessageCode_GeoDataServerWCSDatasetInitialized = 91044
esriWCSServerMessageCode_GeoDataServerWCSWrongPixelType = 91045
esriWCSServerMessageCode_MapServerWCSFailed = 15001
esriWCSServerMessageCode_MapServerWCSNotLicensed = 15002
esriWCSServerMessageCode_MapServerWCSStarted = 15003
esriWCSServerMessageCode_MapServerWCSInitialized = 15004
esriWCSServerMessageCode_MapServerWCSGetData = 15010
esriWCSServerMessageCode_MapServerWCSGetCapabilities = 15012
esriWCSServerMessageCode_MapServerWCSDescribeCoverage = 15014
esriWCSServerMessageCode_MapServerWCSGetCoverage = 15016
esriWCSServerMessageCode_MapServerWCSUnknownRequest = 15020
esriWCSServerMessageCode_MapServerWCSParseKVP = 15030
esriWCSServerMessageCode_MapServerWCSParseXML = 15031
esriWCSServerMessageCode_MapServerWCSParseKVP11 = 15032
esriWCSServerMessageCode_MapServerWCSParseXML11 = 15033
esriWCSServerMessageCode_MapServerWCSParseWriteData = 15034
esriWCSServerMessageCode_MapServerWCSInvalidCRS = 15040
esriWCSServerMessageCode_MapServerWCSInvalidDataset = 15041
esriWCSServerMessageCode_MapServerWCSInvalidLayer = 15042
esriWCSServerMessageCode_MapServerWCSAISInitialized = 15043
esriWCSServerMessageCode_MapServerWCSDatasetInitialized = 15044
esriWCSServerMessageCode_MapServerWCSWrongPixelType = 15045
esriWCSServerMessageCodeEnum = c_int # enum
ISymbolLevels._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if symbol levels are used for drawing.')], HRESULT, 'UseSymbolLevels',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'UseSymbolLevels' )),
    COMMETHOD(['propput', helpstring(u'Indicates if symbol levels are used for drawing.')], HRESULT, 'UseSymbolLevels',
              ( ['in'], VARIANT_BOOL, 'UseSymbolLevels' )),
]
################################################################
## code template for ISymbolLevels implementation
##class ISymbolLevels_Impl(object):
##    def _get(self):
##        u'Indicates if symbol levels are used for drawing.'
##        #return UseSymbolLevels
##    def _set(self, UseSymbolLevels):
##        u'Indicates if symbol levels are used for drawing.'
##    UseSymbolLevels = property(_get, _set, doc = _set.__doc__)
##

class ITinLayer(ILayer):
    _case_insensitive_ = True
    u'Provides access to members that control a TIN layer.'
    _iid_ = GUID('{FE308F36-BDCA-11D1-A523-0000F8774F0F}')
    _idlflags_ = ['oleautomation']
ITinLayer._methods_ = [
    COMMETHOD(['propget', helpstring(u'The TIN used to define the layer.')], HRESULT, 'Dataset',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITin)), 'Tin' )),
    COMMETHOD(['propputref', helpstring(u'The TIN used to define the layer.')], HRESULT, 'Dataset',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITin), 'Tin' )),
    COMMETHOD(['propget', helpstring(u'The number of renderers.')], HRESULT, 'RendererCount',
              ( ['retval', 'out'], POINTER(c_int), 'RendererCount' )),
    COMMETHOD([helpstring(u'Gets the nth renderer.')], HRESULT, 'GetRenderer',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(ITinRenderer)), 'Renderer' )),
    COMMETHOD([helpstring(u'Add a renderer to the end of the group.')], HRESULT, 'AddRenderer',
              ( ['in'], POINTER(ITinRenderer), 'Renderer' )),
    COMMETHOD([helpstring(u'Insert a renderer at given index.')], HRESULT, 'InsertRenderer',
              ( ['in'], POINTER(ITinRenderer), 'Renderer' ),
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Remove a renderer from the group.')], HRESULT, 'DeleteRenderer',
              ( ['in'], POINTER(ITinRenderer), 'Renderer' )),
    COMMETHOD([helpstring(u'Remove all the renderers from the group.')], HRESULT, 'ClearRenderers'),
    COMMETHOD(['propget', helpstring(u'The primary display field.')], HRESULT, 'DisplayField',
              ( ['retval', 'out'], POINTER(BSTR), 'FieldName' )),
    COMMETHOD(['propput', helpstring(u'The primary display field.')], HRESULT, 'DisplayField',
              ( ['in'], BSTR, 'FieldName' )),
    COMMETHOD(['propget', helpstring(u'Indicates if symbols are scaled for this layer.')], HRESULT, 'ScaleSymbols',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Scale' )),
    COMMETHOD(['propput', helpstring(u'Indicates if symbols are scaled for this layer.')], HRESULT, 'ScaleSymbols',
              ( ['in'], VARIANT_BOOL, 'Scale' )),
]
################################################################
## code template for ITinLayer implementation
##class ITinLayer_Impl(object):
##    def GetRenderer(self, Index):
##        u'Gets the nth renderer.'
##        #return Renderer
##
##    def InsertRenderer(self, Renderer, Index):
##        u'Insert a renderer at given index.'
##        #return 
##
##    @property
##    def RendererCount(self):
##        u'The number of renderers.'
##        #return RendererCount
##
##    def DeleteRenderer(self, Renderer):
##        u'Remove a renderer from the group.'
##        #return 
##
##    def Dataset(self, Tin):
##        u'The TIN used to define the layer.'
##        #return 
##
##    def _get(self):
##        u'Indicates if symbols are scaled for this layer.'
##        #return Scale
##    def _set(self, Scale):
##        u'Indicates if symbols are scaled for this layer.'
##    ScaleSymbols = property(_get, _set, doc = _set.__doc__)
##
##    def ClearRenderers(self):
##        u'Remove all the renderers from the group.'
##        #return 
##
##    def _get(self):
##        u'The primary display field.'
##        #return FieldName
##    def _set(self, FieldName):
##        u'The primary display field.'
##    DisplayField = property(_get, _set, doc = _set.__doc__)
##
##    def AddRenderer(self, Renderer):
##        u'Add a renderer to the end of the group.'
##        #return 
##

IRulerSettings._methods_ = [
    COMMETHOD(['propget', helpstring(u'The size of the smallest ruler division. The size is in page units.')], HRESULT, 'SmallestDivision',
              ( ['retval', 'out'], POINTER(c_double), 'rulerDivision' )),
    COMMETHOD(['propput', helpstring(u'The size of the smallest ruler division. The size is in page units.')], HRESULT, 'SmallestDivision',
              ( ['in'], c_double, 'rulerDivision' )),
]
################################################################
## code template for IRulerSettings implementation
##class IRulerSettings_Impl(object):
##    def _get(self):
##        u'The size of the smallest ruler division. The size is in page units.'
##        #return rulerDivision
##    def _set(self, rulerDivision):
##        u'The size of the smallest ruler division. The size is in page units.'
##    SmallestDivision = property(_get, _set, doc = _set.__doc__)
##

class IFeatureCache(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a cache of features in memory for a particular spatial extent.'
    _iid_ = GUID('{A802BA71-D947-11D1-8484-0000F875B9C6}')
    _idlflags_ = ['oleautomation']
IFeatureCache._methods_ = [
    COMMETHOD([helpstring(u'Initializes the cache with a given size and location.')], HRESULT, 'Initialize',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'point' ),
              ( ['in'], c_double, 'Size' )),
    COMMETHOD([helpstring(u'Fills the cache with features from the featureclass.  All previously loaded features in the cache are removed.')], HRESULT, 'AddFeatures',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClass), 'fclass' )),
    COMMETHOD([helpstring(u'Returns true if the point is contained in the cache.')], HRESULT, 'Contains',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'point' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Contains' )),
    COMMETHOD(['propget', helpstring(u'The number of features in the cache.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The nth feature.')], HRESULT, 'Feature',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeature)), 'Feature' )),
]
################################################################
## code template for IFeatureCache implementation
##class IFeatureCache_Impl(object):
##    def Initialize(self, point, Size):
##        u'Initializes the cache with a given size and location.'
##        #return 
##
##    @property
##    def Count(self):
##        u'The number of features in the cache.'
##        #return Count
##
##    def Contains(self, point):
##        u'Returns true if the point is contained in the cache.'
##        #return Contains
##
##    @property
##    def Feature(self, Index):
##        u'The nth feature.'
##        #return Feature
##
##    def AddFeatures(self, fclass):
##        u'Fills the cache with features from the featureclass.  All previously loaded features in the cache are removed.'
##        #return 
##

IGridAxisTicks._methods_ = [
    COMMETHOD(['propget', helpstring(u'The offset (in points) for ticks that fall along the axes.')], HRESULT, 'AxisTickOffset',
              ( ['retval', 'out'], POINTER(c_double), 'offsetPts' )),
    COMMETHOD(['propput', helpstring(u'The offset (in points) for ticks that fall along the axes.')], HRESULT, 'AxisTickOffset',
              ( ['in'], c_double, 'offsetPts' )),
]
################################################################
## code template for IGridAxisTicks implementation
##class IGridAxisTicks_Impl(object):
##    def _get(self):
##        u'The offset (in points) for ticks that fall along the axes.'
##        #return offsetPts
##    def _set(self, offsetPts):
##        u'The offset (in points) for ticks that fall along the axes.'
##    AxisTickOffset = property(_get, _set, doc = _set.__doc__)
##

IMosaicRule._methods_ = [
    COMMETHOD(['propget', helpstring(u'The mosaic method.')], HRESULT, 'MosaicMethod',
              ( ['retval', 'out'], POINTER(comtypes.gen._8F0541A3_D5BE_4B3F_A8D9_062D5579E19B_0_10_2.esriMosaicMethod), 'pMosaicMethod' )),
    COMMETHOD(['propput', helpstring(u'The mosaic method.')], HRESULT, 'MosaicMethod',
              ( ['in'], comtypes.gen._8F0541A3_D5BE_4B3F_A8D9_062D5579E19B_0_10_2.esriMosaicMethod, 'pMosaicMethod' )),
    COMMETHOD(['propget', helpstring(u'The lock raster ID.')], HRESULT, 'LockRasterID',
              ( ['retval', 'out'], POINTER(BSTR), 'pRasterID' )),
    COMMETHOD(['propput', helpstring(u'The lock raster ID.')], HRESULT, 'LockRasterID',
              ( ['in'], BSTR, 'pRasterID' )),
    COMMETHOD(['propget', helpstring(u'The view point.')], HRESULT, 'Viewpoint',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint)), 'ppViewpoint' )),
    COMMETHOD(['propputref', helpstring(u'The view point.')], HRESULT, 'Viewpoint',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'ppViewpoint' )),
    COMMETHOD(['propget', helpstring(u'The Order By field on the source catalog.')], HRESULT, 'OrderByFieldName',
              ( ['retval', 'out'], POINTER(BSTR), 'pName' )),
    COMMETHOD(['propput', helpstring(u'The Order By field on the source catalog.')], HRESULT, 'OrderByFieldName',
              ( ['in'], BSTR, 'pName' )),
    COMMETHOD(['propget', helpstring(u'The Order By base value.')], HRESULT, 'OrderByBaseValue',
              ( ['retval', 'out'], POINTER(VARIANT), 'pValue' )),
    COMMETHOD(['propput', helpstring(u'The Order By base value.')], HRESULT, 'OrderByBaseValue',
              ( ['in'], VARIANT, 'pValue' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the ascending flag of OrderBy.')], HRESULT, 'Ascending',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pAscending' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the ascending flag of OrderBy.')], HRESULT, 'Ascending',
              ( ['in'], VARIANT_BOOL, 'pAscending' )),
    COMMETHOD(['propget', helpstring(u'The type of mosaic operator for resolving overlapping pixels.')], HRESULT, 'MosaicOperatorType',
              ( ['retval', 'out'], POINTER(comtypes.gen._8F0541A3_D5BE_4B3F_A8D9_062D5579E19B_0_10_2.rstMosaicOperatorType), 'Type' )),
    COMMETHOD(['propput', helpstring(u'The type of mosaic operator for resolving overlapping pixels.')], HRESULT, 'MosaicOperatorType',
              ( ['in'], comtypes.gen._8F0541A3_D5BE_4B3F_A8D9_062D5579E19B_0_10_2.rstMosaicOperatorType, 'Type' )),
    COMMETHOD(['propget', helpstring(u'The SQL selection where clause expression.')], HRESULT, 'WhereClause',
              ( ['retval', 'out'], POINTER(BSTR), 'pExpression' )),
    COMMETHOD(['propput', helpstring(u'The SQL selection where clause expression.')], HRESULT, 'WhereClause',
              ( ['in'], BSTR, 'pExpression' )),
    COMMETHOD(['propget', helpstring(u'The list of (selected) catalog item IDs.')], HRESULT, 'FIDs',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFIDSet)), 'ppFIDs' )),
    COMMETHOD(['propputref', helpstring(u'The list of (selected) catalog item IDs.')], HRESULT, 'FIDs',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFIDSet), 'ppFIDs' )),
    COMMETHOD(['propget', helpstring(u'The request time value.')], HRESULT, 'TimeValue',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITimeValue)), 'ppTimeValue' )),
    COMMETHOD(['propputref', helpstring(u'The request time value.')], HRESULT, 'TimeValue',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITimeValue), 'ppTimeValue' )),
]
################################################################
## code template for IMosaicRule implementation
##class IMosaicRule_Impl(object):
##    def _get(self):
##        u'The type of mosaic operator for resolving overlapping pixels.'
##        #return Type
##    def _set(self, Type):
##        u'The type of mosaic operator for resolving overlapping pixels.'
##    MosaicOperatorType = property(_get, _set, doc = _set.__doc__)
##
##    def Viewpoint(self, ppViewpoint):
##        u'The view point.'
##        #return 
##
##    def FIDs(self, ppFIDs):
##        u'The list of (selected) catalog item IDs.'
##        #return 
##
##    def TimeValue(self, ppTimeValue):
##        u'The request time value.'
##        #return 
##
##    def _get(self):
##        u'The Order By field on the source catalog.'
##        #return pName
##    def _set(self, pName):
##        u'The Order By field on the source catalog.'
##    OrderByFieldName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The lock raster ID.'
##        #return pRasterID
##    def _set(self, pRasterID):
##        u'The lock raster ID.'
##    LockRasterID = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether the ascending flag of OrderBy.'
##        #return pAscending
##    def _set(self, pAscending):
##        u'Indicates whether the ascending flag of OrderBy.'
##    Ascending = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The SQL selection where clause expression.'
##        #return pExpression
##    def _set(self, pExpression):
##        u'The SQL selection where clause expression.'
##    WhereClause = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The Order By base value.'
##        #return pValue
##    def _set(self, pValue):
##        u'The Order By base value.'
##    OrderByBaseValue = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The mosaic method.'
##        #return pMosaicMethod
##    def _set(self, pMosaicMethod):
##        u'The mosaic method.'
##    MosaicMethod = property(_get, _set, doc = _set.__doc__)
##

class IACLineLabelPosition(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control ArcIMS line label position.'
    _iid_ = GUID('{3991FA8D-ADDC-4481-9CC8-4ED047324AC4}')
    _idlflags_ = ['oleautomation']
IACLineLabelPosition._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates whether the label should not be placed.')], HRESULT, 'None',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the label should not be placed.')], HRESULT, 'None',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to place the label above the line.')], HRESULT, 'Above',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to place the label above the line.')], HRESULT, 'Above',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to place the label below the line.')], HRESULT, 'Below',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to place the label below the line.')], HRESULT, 'Below',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to place the label on top of the line.')], HRESULT, 'OnTop',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to place the label on top of the line.')], HRESULT, 'OnTop',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to place the label left of the line.')], HRESULT, 'Left',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to place the label left of the line.')], HRESULT, 'Left',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to place the label right of the line.')], HRESULT, 'Right',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to place the label right of the line.')], HRESULT, 'Right',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to place the label in the line.')], HRESULT, 'InLine',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to place the label in the line.')], HRESULT, 'InLine',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to place the label at the start of the line.')], HRESULT, 'AtStart',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to place the label at the start of the line.')], HRESULT, 'AtStart',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to place the label at the end of the line.')], HRESULT, 'AtEnd',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to place the label at the end of the line.')], HRESULT, 'AtEnd',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to place the label parallel to the line.')], HRESULT, 'Parallel',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to place the label parallel to the line.')], HRESULT, 'Parallel',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to place the label perpendicular to the line.')], HRESULT, 'Perpendicular',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to place the label perpendicular to the line.')], HRESULT, 'Perpendicular',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to place the label horizontally.')], HRESULT, 'Horizontal',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to place the label horizontally.')], HRESULT, 'Horizontal',
              ( ['in'], VARIANT_BOOL, 'flag' )),
]
################################################################
## code template for IACLineLabelPosition implementation
##class IACLineLabelPosition_Impl(object):
##    def _get(self):
##        u'Indicates whether the label should not be placed.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether the label should not be placed.'
##    None = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether to place the label right of the line.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether to place the label right of the line.'
##    Right = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether to place the label at the end of the line.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether to place the label at the end of the line.'
##    AtEnd = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether to place the label at the start of the line.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether to place the label at the start of the line.'
##    AtStart = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether to place the label parallel to the line.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether to place the label parallel to the line.'
##    Parallel = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether to place the label perpendicular to the line.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether to place the label perpendicular to the line.'
##    Perpendicular = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether to place the label below the line.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether to place the label below the line.'
##    Below = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether to place the label above the line.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether to place the label above the line.'
##    Above = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether to place the label in the line.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether to place the label in the line.'
##    InLine = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether to place the label horizontally.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether to place the label horizontally.'
##    Horizontal = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether to place the label on top of the line.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether to place the label on top of the line.'
##    OnTop = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether to place the label left of the line.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether to place the label left of the line.'
##    Left = property(_get, _set, doc = _set.__doc__)
##

IAnnotationExpressionParser2._methods_ = [
    COMMETHOD(['propget', helpstring(u'The annotation expression.')], HRESULT, 'Expression',
              ( ['retval', 'out'], POINTER(BSTR), 'Expression' )),
    COMMETHOD(['propget', helpstring(u'The number of attribute fields in the expression.')], HRESULT, 'AttributeCount',
              ( ['retval', 'out'], POINTER(c_int), 'attributes' )),
    COMMETHOD(['propget', helpstring(u'The attribute fields in the expression.')], HRESULT, 'Attribute',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Attribute' )),
    COMMETHOD([helpstring(u'The label for a given feature based on the annotation expression.')], HRESULT, 'FindLabel',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeature), 'Feature' ),
              ( ['in'], POINTER(ILayerFields), 'pLayerFields' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Label' )),
    COMMETHOD([helpstring(u'Reports error that occurred in FindLabel method.')], HRESULT, 'LastError',
              ( ['in', 'out'], POINTER(c_int), 'number' ),
              ( ['in', 'out'], POINTER(c_int), 'line' ),
              ( ['in', 'out'], POINTER(BSTR), 'Description' )),
]
################################################################
## code template for IAnnotationExpressionParser2 implementation
##class IAnnotationExpressionParser2_Impl(object):
##    def FindLabel(self, Feature, pLayerFields):
##        u'The label for a given feature based on the annotation expression.'
##        #return Label
##
##    @property
##    def Attribute(self, Index):
##        u'The attribute fields in the expression.'
##        #return Attribute
##
##    @property
##    def AttributeCount(self):
##        u'The number of attribute fields in the expression.'
##        #return attributes
##
##    @property
##    def Expression(self):
##        u'The annotation expression.'
##        #return Expression
##
##    def LastError(self):
##        u'Reports error that occurred in FindLabel method.'
##        #return number, line, Description
##

class IFeatureCache2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a cache of features in memory for a particular spatial extent.'
    _iid_ = GUID('{FCF1E491-5BA6-11D4-8367-0080C7E20671}')
    _idlflags_ = ['oleautomation']
IFeatureCache2._methods_ = [
    COMMETHOD([helpstring(u'Fills the cache with features from the featureclass. Clip envelope may be null.')], HRESULT, 'AddFeatures',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClass), 'fclass' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'Clip' )),
    COMMETHOD([helpstring(u'Fills the cache with the features from the specified layers. Clip envelope may be null.')], HRESULT, 'AddLayers',
              ( ['in'], POINTER(IEnumLayer), 'Layers' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'Clip' )),
    COMMETHOD([helpstring(u'Initializes the cache with a given size and location.')], HRESULT, 'Initialize',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'point' ),
              ( ['in'], c_double, 'Size' )),
    COMMETHOD([helpstring(u'Returns true if the point is contained in the cache.')], HRESULT, 'Contains',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'point' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Contains' )),
    COMMETHOD(['propget', helpstring(u'The number of features in the cache.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The nth feature.')], HRESULT, 'Feature',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeature)), 'Feature' )),
]
################################################################
## code template for IFeatureCache2 implementation
##class IFeatureCache2_Impl(object):
##    @property
##    def Count(self):
##        u'The number of features in the cache.'
##        #return Count
##
##    def AddLayers(self, Layers, Clip):
##        u'Fills the cache with the features from the specified layers. Clip envelope may be null.'
##        #return 
##
##    def Contains(self, point):
##        u'Returns true if the point is contained in the cache.'
##        #return Contains
##
##    @property
##    def Feature(self, Index):
##        u'The nth feature.'
##        #return Feature
##
##    def AddFeatures(self, fclass, Clip):
##        u'Fills the cache with features from the featureclass. Clip envelope may be null.'
##        #return 
##
##    def Initialize(self, point, Size):
##        u'Initializes the cache with a given size and location.'
##        #return 
##

IHotLinkExpressionProperties._methods_ = [
    COMMETHOD(['propput', helpstring(u'The VBScript or JScript expression that evaluates and formats the label.')], HRESULT, 'Expression',
              ( ['in'], BSTR, 'Expression' )),
    COMMETHOD(['propget', helpstring(u'The VBScript or JScript expression that evaluates and formats the label.')], HRESULT, 'Expression',
              ( ['retval', 'out'], POINTER(BSTR), 'Expression' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the expression is simple.')], HRESULT, 'IsExpressionSimple',
              ( ['in'], VARIANT_BOOL, 'simpleExpression' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the expression is simple.')], HRESULT, 'IsExpressionSimple',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'simpleExpression' )),
    COMMETHOD(['propputref', helpstring(u'The object that interprets the expression.')], HRESULT, 'ExpressionParser',
              ( ['in'], POINTER(IAnnotationExpressionEngine), 'engine' )),
    COMMETHOD(['propget', helpstring(u'The object that interprets the expression.')], HRESULT, 'ExpressionParser',
              ( ['retval', 'out'], POINTER(POINTER(IAnnotationExpressionEngine)), 'engine' )),
]
################################################################
## code template for IHotLinkExpressionProperties implementation
##class IHotLinkExpressionProperties_Impl(object):
##    def _get(self):
##        u'Indicates if the expression is simple.'
##        #return simpleExpression
##    def _set(self, simpleExpression):
##        u'Indicates if the expression is simple.'
##    IsExpressionSimple = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The VBScript or JScript expression that evaluates and formats the label.'
##        #return Expression
##    def _set(self, Expression):
##        u'The VBScript or JScript expression that evaluates and formats the label.'
##    Expression = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def ExpressionParser(self, engine):
##        u'The object that interprets the expression.'
##        #return 
##

IMapImage._methods_ = [
    COMMETHOD(['propget', helpstring(u'The geographic extent of the map that is fitted to the height and width of the generated image.')], HRESULT, 'MapExtent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'ppExtent' )),
    COMMETHOD(['propget', helpstring(u'Array of the visible layers drawn for the generated map scale.')], HRESULT, 'VisibleLayers',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray)), 'layerIds' )),
    COMMETHOD(['propget', helpstring(u'The scale of the generated map image.')], HRESULT, 'MapScale',
              ( ['retval', 'out'], POINTER(c_double), 'MapScale' )),
]
################################################################
## code template for IMapImage implementation
##class IMapImage_Impl(object):
##    @property
##    def VisibleLayers(self):
##        u'Array of the visible layers drawn for the generated map scale.'
##        #return layerIds
##
##    @property
##    def MapScale(self):
##        u'The scale of the generated map image.'
##        #return MapScale
##
##    @property
##    def MapExtent(self):
##        u'The geographic extent of the map that is fitted to the height and width of the generated image.'
##        #return ppExtent
##

class IFeatureServiceLayerFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the creation of feature service layers and tables through a factory.'
    _iid_ = GUID('{A27A6B0C-6F1F-45BD-B91F-8E878939764F}')
    _idlflags_ = ['oleautomation']
IFeatureServiceLayerFactory._methods_ = [
    COMMETHOD([helpstring(u'Creates layer(s) based on the specified object.')], HRESULT, 'Create',
              ( ['in'], POINTER(IUnknown), 'inputObject' ),
              ( ['out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IEnumTable)), 'tables' ),
              ( ['retval', 'out'], POINTER(POINTER(IEnumLayer)), 'Layers' )),
    COMMETHOD([helpstring(u'Creates layer(s) based on the specified object.')], HRESULT, 'CreateSubLayer',
              ( ['in'], POINTER(IUnknown), 'inputObject' ),
              ( ['in'], BSTR, 'LayerID' ),
              ( ['out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IEnumTable)), 'tables' ),
              ( ['retval', 'out'], POINTER(POINTER(IEnumLayer)), 'Layers' )),
]
################################################################
## code template for IFeatureServiceLayerFactory implementation
##class IFeatureServiceLayerFactory_Impl(object):
##    def Create(self, inputObject):
##        u'Creates layer(s) based on the specified object.'
##        #return tables, Layers
##
##    def CreateSubLayer(self, inputObject, LayerID):
##        u'Creates layer(s) based on the specified object.'
##        #return tables, Layers
##


# values for enumeration 'esriRasterLayerError'
E_RASTERLAYER_UNKNOWN_ERROR = -2147217152
esriRasterLayerError = c_int # enum
IImageServerLayer3._methods_ = [
    COMMETHOD(['propget', helpstring(u'The mosaic rule to be applied.')], HRESULT, 'MosaicRule',
              ( ['retval', 'out'], POINTER(POINTER(IMosaicRule)), 'ppMosaicRule' )),
    COMMETHOD(['propputref', helpstring(u'The mosaic rule to be applied.')], HRESULT, 'MosaicRule',
              ( ['in'], POINTER(IMosaicRule), 'ppMosaicRule' )),
    COMMETHOD(['propget', helpstring(u'The rendering rule to be applied.')], HRESULT, 'RenderingRule',
              ( ['retval', 'out'], POINTER(POINTER(IRenderingRule)), 'ppRenderingRule' )),
    COMMETHOD(['propputref', helpstring(u'The rendering rule to be applied.')], HRESULT, 'RenderingRule',
              ( ['in'], POINTER(IRenderingRule), 'ppRenderingRule' )),
    COMMETHOD(['propget', helpstring(u'Enables the layer to draw using the service cahce if available.')], HRESULT, 'EnableCacheViewMode',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pEnabled' )),
    COMMETHOD(['propput', helpstring(u'Enables the layer to draw using the service cahce if available.')], HRESULT, 'EnableCacheViewMode',
              ( ['in'], VARIANT_BOOL, 'pEnabled' )),
]
################################################################
## code template for IImageServerLayer3 implementation
##class IImageServerLayer3_Impl(object):
##    def MosaicRule(self, ppMosaicRule):
##        u'The mosaic rule to be applied.'
##        #return 
##
##    def _get(self):
##        u'Enables the layer to draw using the service cahce if available.'
##        #return pEnabled
##    def _set(self, pEnabled):
##        u'Enables the layer to draw using the service cahce if available.'
##    EnableCacheViewMode = property(_get, _set, doc = _set.__doc__)
##
##    def RenderingRule(self, ppRenderingRule):
##        u'The rendering rule to be applied.'
##        #return 
##

class IMapImages(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Map Images Interface.'
    _iid_ = GUID('{9685FAE8-74AA-4CD0-871C-2269DA8562B4}')
    _idlflags_ = ['oleautomation']
ILayoutImage._methods_ = [
    COMMETHOD(['propget', helpstring(u'The extent of the page that is fitted to the height and width of the generated image.')], HRESULT, 'Extent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'ppExtent' )),
    COMMETHOD(['propget', helpstring(u'A collection of MapImage objects contained in the layout. There will be one MapImage object returned for each data frame.')], HRESULT, 'MapImages',
              ( ['retval', 'out'], POINTER(POINTER(IMapImages)), 'MapImages' )),
]
################################################################
## code template for ILayoutImage implementation
##class ILayoutImage_Impl(object):
##    @property
##    def MapImages(self):
##        u'A collection of MapImage objects contained in the layout. There will be one MapImage object returned for each data frame.'
##        #return MapImages
##
##    @property
##    def Extent(self):
##        u'The extent of the page that is fitted to the height and width of the generated image.'
##        #return ppExtent
##

ISnapGuides._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if snapping guides are visible.')], HRESULT, 'AreVisible',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'AreVisible' )),
    COMMETHOD(['propput', helpstring(u'Indicates if snapping guides are visible.')], HRESULT, 'AreVisible',
              ( ['in'], VARIANT_BOOL, 'AreVisible' )),
    COMMETHOD(['propget', helpstring(u'Level where guides are drawn.')], HRESULT, 'DrawLevel',
              ( ['retval', 'out'], POINTER(esriViewDrawPhase), 'DrawLevel' )),
    COMMETHOD(['propput', helpstring(u'Level where guides are drawn.')], HRESULT, 'DrawLevel',
              ( ['in'], esriViewDrawPhase, 'DrawLevel' )),
    COMMETHOD(['propget', helpstring(u'The number of guides.')], HRESULT, 'GuideCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propput', helpstring(u'The nth guide. The position is specified in page units.')], HRESULT, 'Guide',
              ( ['in'], c_int, 'idx' ),
              ( ['in'], c_double, 'pos' )),
    COMMETHOD(['propget', helpstring(u'The nth guide. The position is specified in page units.')], HRESULT, 'Guide',
              ( ['in'], c_int, 'idx' ),
              ( ['retval', 'out'], POINTER(c_double), 'pos' )),
    COMMETHOD([helpstring(u'Adds a guide at the specified position.  The position is specified in page units.')], HRESULT, 'AddGuide',
              ( ['in'], c_double, 'pos' )),
    COMMETHOD([helpstring(u'Removes the nth guide.')], HRESULT, 'RemoveGuide',
              ( ['in'], c_int, 'idx' )),
    COMMETHOD([helpstring(u'Removes all the guides.')], HRESULT, 'RemoveAllGuides'),
    COMMETHOD([helpstring(u'Draw a fine line showing exactly where objects will snap.')], HRESULT, 'Draw',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], VARIANT_BOOL, 'IsHorizontal' )),
    COMMETHOD([helpstring(u'Draw a highlight around the snap line for a nice visual effect.')], HRESULT, 'DrawHighlight',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], VARIANT_BOOL, 'IsHorizontal' )),
]
################################################################
## code template for ISnapGuides implementation
##class ISnapGuides_Impl(object):
##    def Draw(self, Display, IsHorizontal):
##        u'Draw a fine line showing exactly where objects will snap.'
##        #return 
##
##    def _get(self):
##        u'Indicates if snapping guides are visible.'
##        #return AreVisible
##    def _set(self, AreVisible):
##        u'Indicates if snapping guides are visible.'
##    AreVisible = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def GuideCount(self):
##        u'The number of guides.'
##        #return Count
##
##    def _get(self):
##        u'Level where guides are drawn.'
##        #return DrawLevel
##    def _set(self, DrawLevel):
##        u'Level where guides are drawn.'
##    DrawLevel = property(_get, _set, doc = _set.__doc__)
##
##    def RemoveGuide(self, idx):
##        u'Removes the nth guide.'
##        #return 
##
##    def RemoveAllGuides(self):
##        u'Removes all the guides.'
##        #return 
##
##    def DrawHighlight(self, Display, IsHorizontal):
##        u'Draw a highlight around the snap line for a nice visual effect.'
##        #return 
##
##    def AddGuide(self, pos):
##        u'Adds a guide at the specified position.  The position is specified in page units.'
##        #return 
##
##    def _get(self, idx):
##        u'The nth guide. The position is specified in page units.'
##        #return pos
##    def _set(self, idx, pos):
##        u'The nth guide. The position is specified in page units.'
##    Guide = property(_get, _set, doc = _set.__doc__)
##

class ITinLayer2(ITinLayer):
    _case_insensitive_ = True
    u'Provides additional access to members that control a TIN layer.'
    _iid_ = GUID('{B2F43CDC-DD23-4906-848A-8A912AD53F63}')
    _idlflags_ = ['oleautomation']
ITinLayer2._methods_ = [
    COMMETHOD(['propget', helpstring(u'The Z factor set in the TIN dataset.')], HRESULT, 'ZFactor',
              ( ['retval', 'out'], POINTER(c_double), 'ZFactor' )),
    COMMETHOD(['propput', helpstring(u'The Z factor set in the TIN dataset.')], HRESULT, 'ZFactor',
              ( ['in'], c_double, 'ZFactor' )),
]
################################################################
## code template for ITinLayer2 implementation
##class ITinLayer2_Impl(object):
##    def _get(self):
##        u'The Z factor set in the TIN dataset.'
##        #return ZFactor
##    def _set(self, ZFactor):
##        u'The Z factor set in the TIN dataset.'
##    ZFactor = property(_get, _set, doc = _set.__doc__)
##

class IDynamicLegendLayer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control dynamic legend information provided by a layer.'
    _iid_ = GUID('{34B10157-671F-4EC2-8A75-A2F3710E5DCF}')
    _idlflags_ = ['oleautomation']
IDynamicLegendLayer._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates that the layer appearance has changed and dynamic legend info needs updating.')], HRESULT, 'IsDynamicLegendInfoDirty',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD([helpstring(u'Call when layer appearance or visible extent changes.')], HRESULT, 'RefreshDynamicLegendInfo'),
    COMMETHOD([helpstring(u'Update counts in legend classes.  Specify NULL geometry to clear counts.')], HRESULT, 'InstrumentedDraw',
              ( ['in'], esriDynamicLegendType, 'Type' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'pMapDisplay' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'MapExtent' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'TrackCancel' )),
]
################################################################
## code template for IDynamicLegendLayer implementation
##class IDynamicLegendLayer_Impl(object):
##    def RefreshDynamicLegendInfo(self):
##        u'Call when layer appearance or visible extent changes.'
##        #return 
##
##    @property
##    def IsDynamicLegendInfoDirty(self):
##        u'Indicates that the layer appearance has changed and dynamic legend info needs updating.'
##        #return flag
##
##    def InstrumentedDraw(self, Type, pMapDisplay, MapExtent, TrackCancel):
##        u'Update counts in legend classes.  Specify NULL geometry to clear counts.'
##        #return 
##

class SimpleTinIdentifyObj(CoClass):
    u'Object that mantains information collected during the identify operation.'
    _reg_clsid_ = GUID('{70FD6DBF-A2AD-4A76-B9DE-78924C6668FB}')
    _idlflags_ = ['restricted']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
SimpleTinIdentifyObj._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IIdentifyObj, ITinIdentifyObj, ITinIdentifyObj2]

ISQLSyntaxInfo._methods_ = [
    COMMETHOD(['propget', helpstring(u'DBMS dependent SQL function names.')], HRESULT, 'FunctionNames',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet)), 'names' )),
    COMMETHOD(['propget', helpstring(u'Special DBMS dependent SQL characters.')], HRESULT, 'SpecialCharacters',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet)), 'characters' )),
    COMMETHOD(['propget', helpstring(u'Supported SQL predicates.')], HRESULT, 'SupportedPredicates',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray)), 'predicates' )),
    COMMETHOD(['propget', helpstring(u'Supported SQL clauses.')], HRESULT, 'SupportedClauses',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray)), 'clauses' )),
    COMMETHOD(['propget', helpstring(u"Indicates whether DBMS's identifiers are case sensitive.")], HRESULT, 'IdentifierCase',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'caseSensitive' )),
    COMMETHOD(['propget', helpstring(u"Indicates whether DBMS's quoted identifiers are case sensitive.")], HRESULT, 'DelimitedIdentifierCase',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'caseSensitive' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether string comparisons are case sensitive.')], HRESULT, 'StringComparisonCase',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'caseSensitive' )),
    COMMETHOD(['propget', helpstring(u'The list of DBMS specific reserved keywords.')], HRESULT, 'Keywords',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray)), 'Keywords' )),
    COMMETHOD(['propget', helpstring(u'The list of invalid characters used in literals (if any).')], HRESULT, 'InvalidCharacters',
              ( ['retval', 'out'], POINTER(BSTR), 'characters' )),
    COMMETHOD(['propget', helpstring(u'The list of invalid starting characters used in literals (if any).')], HRESULT, 'InvalidStartingCharacters',
              ( ['retval', 'out'], POINTER(BSTR), 'characters' )),
]
################################################################
## code template for ISQLSyntaxInfo implementation
##class ISQLSyntaxInfo_Impl(object):
##    @property
##    def IdentifierCase(self):
##        u"Indicates whether DBMS's identifiers are case sensitive."
##        #return caseSensitive
##
##    @property
##    def InvalidStartingCharacters(self):
##        u'The list of invalid starting characters used in literals (if any).'
##        #return characters
##
##    @property
##    def FunctionNames(self):
##        u'DBMS dependent SQL function names.'
##        #return names
##
##    @property
##    def SpecialCharacters(self):
##        u'Special DBMS dependent SQL characters.'
##        #return characters
##
##    @property
##    def SupportedPredicates(self):
##        u'Supported SQL predicates.'
##        #return predicates
##
##    @property
##    def SupportedClauses(self):
##        u'Supported SQL clauses.'
##        #return clauses
##
##    @property
##    def Keywords(self):
##        u'The list of DBMS specific reserved keywords.'
##        #return Keywords
##
##    @property
##    def DelimitedIdentifierCase(self):
##        u"Indicates whether DBMS's quoted identifiers are case sensitive."
##        #return caseSensitive
##
##    @property
##    def StringComparisonCase(self):
##        u'Indicates whether string comparisons are case sensitive.'
##        #return caseSensitive
##
##    @property
##    def InvalidCharacters(self):
##        u'The list of invalid characters used in literals (if any).'
##        #return characters
##

IHTMLPopupIdentify2._methods_ = [
    COMMETHOD([helpstring(u'The content is the XML text at the specified point. tempPath and refPath are optional parameters.')], HRESULT, 'HTMLIdentify',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'pDisplay' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'pGeometry' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet), 'pOptions' ),
              ( ['out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray)), 'ppItemNames' ),
              ( ['out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray)), 'ppItemHTML' )),
]
################################################################
## code template for IHTMLPopupIdentify2 implementation
##class IHTMLPopupIdentify2_Impl(object):
##    def HTMLIdentify(self, pDisplay, pGeometry, pOptions):
##        u'The content is the XML text at the specified point. tempPath and refPath are optional parameters.'
##        #return ppItemNames, ppItemHTML
##

IMapServerLegendInfo._methods_ = [
    COMMETHOD(['propget', helpstring(u'The layer ID.')], HRESULT, 'LayerID',
              ( ['retval', 'out'], POINTER(c_int), 'LayerID' )),
    COMMETHOD(['propget', helpstring(u'The layer name.')], HRESULT, 'LayerName',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propget', helpstring(u'A collection of legend group objects.')], HRESULT, 'LegendGroups',
              ( ['retval', 'out'], POINTER(POINTER(IMapServerLegendGroups)), 'groups' )),
]
################################################################
## code template for IMapServerLegendInfo implementation
##class IMapServerLegendInfo_Impl(object):
##    @property
##    def LegendGroups(self):
##        u'A collection of legend group objects.'
##        #return groups
##
##    @property
##    def LayerName(self):
##        u'The layer name.'
##        #return Name
##
##    @property
##    def LayerID(self):
##        u'The layer ID.'
##        #return LayerID
##

class ILegend3(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to additional members that control a legend.'
    _iid_ = GUID('{15ABE7F7-49E8-4012-BE72-D14E5A755ACE}')
    _idlflags_ = ['oleautomation']
ILegend3._methods_ = [
    COMMETHOD(['propget', helpstring(u'The parent map.')], HRESULT, 'Map',
              ( ['retval', 'out'], POINTER(POINTER(IMap)), 'Map' )),
    COMMETHOD(['propputref', helpstring(u'The parent map.')], HRESULT, 'Map',
              ( ['in'], POINTER(IMap), 'Map' )),
    COMMETHOD(['propget', helpstring(u'Name of the map surround.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'Name of the map surround.')], HRESULT, 'Name',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'Icon used to represent the map surround.')], HRESULT, 'Icon',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE), 'hIcon' )),
    COMMETHOD([helpstring(u'Returns the bounds of the map surround.')], HRESULT, 'QueryBounds',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'oldBounds' ),
              ( [], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'newBounds' )),
    COMMETHOD([helpstring(u'Adjusts the map surround to fit the bounds.  The changed argument indicates whether the size of the map surround was changed.')], HRESULT, 'FitToBounds',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'Bounds' ),
              ( ['out'], POINTER(VARIANT_BOOL), 'changed' )),
    COMMETHOD([helpstring(u'Used to batch operations together to minimize notifications.')], HRESULT, 'DelayEvents',
              ( ['in'], VARIANT_BOOL, 'delay' )),
    COMMETHOD([helpstring(u'Makes sure the latest updates are refected the next time the Map Surround is drawn.')], HRESULT, 'Refresh'),
    COMMETHOD([helpstring(u'Draws the map surround into the specified display bounds.')], HRESULT, 'Draw',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'TrackCancel' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'Bounds' )),
    COMMETHOD(['propget', helpstring(u'The formatting options for the legend (can be stored in the style gallery).')], HRESULT, 'Format',
              ( ['retval', 'out'], POINTER(POINTER(ILegendFormat)), 'LegendFormat' )),
    COMMETHOD(['propputref', helpstring(u'The formatting options for the legend (can be stored in the style gallery).')], HRESULT, 'Format',
              ( ['in'], POINTER(ILegendFormat), 'LegendFormat' )),
    COMMETHOD(['propget', helpstring(u'Title.')], HRESULT, 'Title',
              ( ['retval', 'out'], POINTER(BSTR), 'Title' )),
    COMMETHOD(['propput', helpstring(u'Title.')], HRESULT, 'Title',
              ( ['in'], BSTR, 'Title' )),
    COMMETHOD(['propget', helpstring(u'Indicates if a new item should be added when a new layer is added to the map.')], HRESULT, 'AutoAdd',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'AutoAdd' )),
    COMMETHOD(['propput', helpstring(u'Indicates if a new item should be added when a new layer is added to the map.')], HRESULT, 'AutoAdd',
              ( ['in'], VARIANT_BOOL, 'AutoAdd' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the legend items should be kept in the same order as the layers.')], HRESULT, 'AutoReorder',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'AutoReorder' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the legend items should be kept in the same order as the layers.')], HRESULT, 'AutoReorder',
              ( ['in'], VARIANT_BOOL, 'AutoReorder' )),
    COMMETHOD(['propget', helpstring(u'Indicates if items should be shown only when associated layers are visible.')], HRESULT, 'AutoVisibility',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'AutoVisibility' )),
    COMMETHOD(['propput', helpstring(u'Indicates if items should be shown only when associated layers are visible.')], HRESULT, 'AutoVisibility',
              ( ['in'], VARIANT_BOOL, 'AutoVisibility' )),
    COMMETHOD(['propget', helpstring(u'Reserved for future use.')], HRESULT, 'FlowRight',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Reserved for future use.')], HRESULT, 'FlowRight',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Number of items in the legend.')], HRESULT, 'ItemCount',
              ( ['retval', 'out'], POINTER(c_int), 'numItems' )),
    COMMETHOD(['propget', helpstring(u'The specified item from the legend.')], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(ILegendItem)), 'Item' )),
    COMMETHOD([helpstring(u'Adds a new item to the legend (to the end of the  list).')], HRESULT, 'AddItem',
              ( ['in'], POINTER(ILegendItem), 'Item' )),
    COMMETHOD([helpstring(u'Inserts a new item into the legend (at the location specified by index).')], HRESULT, 'InsertItem',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(ILegendItem), 'Item' )),
    COMMETHOD([helpstring(u'Removes the specified item from the legend.')], HRESULT, 'RemoveItem',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all items from the legend.')], HRESULT, 'ClearItems'),
    COMMETHOD(['propget', helpstring(u'The default legend item for the specified layer.')], HRESULT, 'DefaultLegendItem',
              ( ['in'], POINTER(ILayer), 'Layer' ),
              ( ['retval', 'out'], POINTER(POINTER(ILegendItem)), 'Item' )),
    COMMETHOD(['propget', helpstring(u'Indicates if symbols are scaled for the layer.')], HRESULT, 'ScaleSymbols',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Scale' )),
    COMMETHOD(['propput', helpstring(u'Indicates if symbols are scaled for the layer.')], HRESULT, 'ScaleSymbols',
              ( ['in'], VARIANT_BOOL, 'Scale' )),
    COMMETHOD([helpstring(u'Adjust the item settings so that the legend contains the specified number of columns.')], HRESULT, 'AdjustColumns',
              ( ['in'], c_int, 'Columns' )),
    COMMETHOD(['propget', helpstring(u'Indicates frame should not shrink or grow with legend.  Enables AutoColumns and AutoFit.')], HRESULT, 'FixedFrame',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates frame should not shrink or grow with legend.  Enables AutoColumns and AutoFit.')], HRESULT, 'FixedFrame',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Automatically flow legend items to fit fixed frame.')], HRESULT, 'AutoColumns',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Automatically flow legend items to fit fixed frame.')], HRESULT, 'AutoColumns',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Automatically resize legend items to fit fixed frame.')], HRESULT, 'AutoFit',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Automatically resize legend items to fit fixed frame.')], HRESULT, 'AutoFit',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Minimumn font size when AutoFit is true.')], HRESULT, 'MinFontSize',
              ( ['retval', 'out'], POINTER(c_double), 'FontSize' )),
    COMMETHOD(['propput', helpstring(u'Minimumn font size when AutoFit is true.')], HRESULT, 'MinFontSize',
              ( ['in'], c_double, 'FontSize' )),
    COMMETHOD(['propget', helpstring(u'Can legend items be automatically flowed to fit fixed frame?')], HRESULT, 'SupportsAutoColumns',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
]
################################################################
## code template for ILegend3 implementation
##class ILegend3_Impl(object):
##    def _get(self):
##        u'Indicates if a new item should be added when a new layer is added to the map.'
##        #return AutoAdd
##    def _set(self, AutoAdd):
##        u'Indicates if a new item should be added when a new layer is added to the map.'
##    AutoAdd = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Title.'
##        #return Title
##    def _set(self, Title):
##        u'Title.'
##    Title = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Automatically flow legend items to fit fixed frame.'
##        #return flag
##    def _set(self, flag):
##        u'Automatically flow legend items to fit fixed frame.'
##    AutoColumns = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SupportsAutoColumns(self):
##        u'Can legend items be automatically flowed to fit fixed frame?'
##        #return flag
##
##    def _get(self):
##        u'Indicates frame should not shrink or grow with legend.  Enables AutoColumns and AutoFit.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates frame should not shrink or grow with legend.  Enables AutoColumns and AutoFit.'
##    FixedFrame = property(_get, _set, doc = _set.__doc__)
##
##    def DelayEvents(self, delay):
##        u'Used to batch operations together to minimize notifications.'
##        #return 
##
##    def _get(self):
##        u'Indicates if the legend items should be kept in the same order as the layers.'
##        #return AutoReorder
##    def _set(self, AutoReorder):
##        u'Indicates if the legend items should be kept in the same order as the layers.'
##    AutoReorder = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def DefaultLegendItem(self, Layer):
##        u'The default legend item for the specified layer.'
##        #return Item
##
##    def Map(self, Map):
##        u'The parent map.'
##        #return 
##
##    def Draw(self, Display, TrackCancel, Bounds):
##        u'Draws the map surround into the specified display bounds.'
##        #return 
##
##    def Format(self, LegendFormat):
##        u'The formatting options for the legend (can be stored in the style gallery).'
##        #return 
##
##    def AdjustColumns(self, Columns):
##        u'Adjust the item settings so that the legend contains the specified number of columns.'
##        #return 
##
##    @property
##    def ItemCount(self):
##        u'Number of items in the legend.'
##        #return numItems
##
##    @property
##    def Icon(self):
##        u'Icon used to represent the map surround.'
##        #return hIcon
##
##    def _get(self):
##        u'Minimumn font size when AutoFit is true.'
##        #return FontSize
##    def _set(self, FontSize):
##        u'Minimumn font size when AutoFit is true.'
##    MinFontSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Name of the map surround.'
##        #return Name
##    def _set(self, Name):
##        u'Name of the map surround.'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def ClearItems(self):
##        u'Removes all items from the legend.'
##        #return 
##
##    def _get(self):
##        u'Reserved for future use.'
##        #return flag
##    def _set(self, flag):
##        u'Reserved for future use.'
##    FlowRight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if symbols are scaled for the layer.'
##        #return Scale
##    def _set(self, Scale):
##        u'Indicates if symbols are scaled for the layer.'
##    ScaleSymbols = property(_get, _set, doc = _set.__doc__)
##
##    def Refresh(self):
##        u'Makes sure the latest updates are refected the next time the Map Surround is drawn.'
##        #return 
##
##    def _get(self):
##        u'Automatically resize legend items to fit fixed frame.'
##        #return flag
##    def _set(self, flag):
##        u'Automatically resize legend items to fit fixed frame.'
##    AutoFit = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Item(self, Index):
##        u'The specified item from the legend.'
##        #return Item
##
##    def FitToBounds(self, Display, Bounds):
##        u'Adjusts the map surround to fit the bounds.  The changed argument indicates whether the size of the map surround was changed.'
##        #return changed
##
##    def InsertItem(self, Index, Item):
##        u'Inserts a new item into the legend (at the location specified by index).'
##        #return 
##
##    def AddItem(self, Item):
##        u'Adds a new item to the legend (to the end of the  list).'
##        #return 
##
##    def RemoveItem(self, Index):
##        u'Removes the specified item from the legend.'
##        #return 
##
##    def QueryBounds(self, Display, oldBounds, newBounds):
##        u'Returns the bounds of the map surround.'
##        #return 
##
##    def _get(self):
##        u'Indicates if items should be shown only when associated layers are visible.'
##        #return AutoVisibility
##    def _set(self, AutoVisibility):
##        u'Indicates if items should be shown only when associated layers are visible.'
##    AutoVisibility = property(_get, _set, doc = _set.__doc__)
##

class TinLayer(CoClass):
    u'The TIN Layer class.'
    _reg_clsid_ = GUID('{FE308F38-BDCA-11D1-A523-0000F8774F0F}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
TinLayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ITinLayer2, ILayer, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeoDataset, ILegendInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, ILayerInfo, IIdentify, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayAdmin, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayFilterManager, ILayerEffects, ILayerFields, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITableFields, IDataLayer, IDataLayer2, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IConnectionPointContainer, ILayerDrawingProperties, ILayerPosition, ILayerExtensions, IPublishLayer, ILayerGeneralProperties]
TinLayer._outgoing_interfaces_ = [ILayerEvents]

IACLabelRenderer._methods_ = [
    COMMETHOD(['propget', helpstring(u'Text symbol used to draw the labels.')], HRESULT, 'LabelSymbol',
              ( ['retval', 'out'], POINTER(POINTER(IACSymbol)), 'Symbol' )),
    COMMETHOD(['propput', helpstring(u'Text symbol used to draw the labels.')], HRESULT, 'LabelSymbol',
              ( ['in'], POINTER(IACSymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'The name of the Field.')], HRESULT, 'LabelField',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'The name of the Field.')], HRESULT, 'LabelField',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'The feature weight to prioritize the importance of features.')], HRESULT, 'FeatureWeight',
              ( ['retval', 'out'], POINTER(acLabelWeight), 'Weight' )),
    COMMETHOD(['propput', helpstring(u'The feature weight to prioritize the importance of features.')], HRESULT, 'FeatureWeight',
              ( ['in'], acLabelWeight, 'Weight' )),
    COMMETHOD(['propget', helpstring(u'The label weight to prioritize the importance of labels.')], HRESULT, 'LabelWeight',
              ( ['retval', 'out'], POINTER(acLabelWeight), 'Weight' )),
    COMMETHOD(['propput', helpstring(u'The label weight to prioritize the importance of labels.')], HRESULT, 'LabelWeight',
              ( ['in'], acLabelWeight, 'Weight' )),
    COMMETHOD(['propget', helpstring(u'The buffer range around the label where no other labels will overlap.')], HRESULT, 'LabelBufferRatio',
              ( ['retval', 'out'], POINTER(c_double), 'ratio' )),
    COMMETHOD(['propput', helpstring(u'The buffer range around the label where no other labels will overlap.')], HRESULT, 'LabelBufferRatio',
              ( ['in'], c_double, 'ratio' )),
    COMMETHOD(['propget', helpstring(u'The label properties.')], HRESULT, 'LabelProperties',
              ( ['retval', 'out'], POINTER(BSTR), 'props' )),
    COMMETHOD(['propput', helpstring(u'The label properties.')], HRESULT, 'LabelProperties',
              ( ['in'], BSTR, 'props' )),
    COMMETHOD(['propget', helpstring(u'The rotation angle of this label.')], HRESULT, 'RotationalAngles',
              ( ['retval', 'out'], POINTER(BSTR), 'angles' )),
    COMMETHOD(['propput', helpstring(u'The rotation angle of this label.')], HRESULT, 'RotationalAngles',
              ( ['in'], BSTR, 'angles' )),
    COMMETHOD(['propget', helpstring(u'Determines how often a feature will be labeled.')], HRESULT, 'HowManyLabels',
              ( ['retval', 'out'], POINTER(acNumLabels), 'NumLabels' )),
    COMMETHOD(['propput', helpstring(u'Determines how often a feature will be labeled.')], HRESULT, 'HowManyLabels',
              ( ['in'], acNumLabels, 'NumLabels' )),
    COMMETHOD(['propget', helpstring(u'Determines where on the line to place the label.')], HRESULT, 'LineLabelPosition',
              ( ['retval', 'out'], POINTER(acLineLabelPosition), 'LineLabelPosition' )),
    COMMETHOD(['propput', helpstring(u'Determines where on the line to place the label.')], HRESULT, 'LineLabelPosition',
              ( ['in'], acLineLabelPosition, 'LineLabelPosition' )),
]
################################################################
## code template for IACLabelRenderer implementation
##class IACLabelRenderer_Impl(object):
##    def _get(self):
##        u'Determines where on the line to place the label.'
##        #return LineLabelPosition
##    def _set(self, LineLabelPosition):
##        u'Determines where on the line to place the label.'
##    LineLabelPosition = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Determines how often a feature will be labeled.'
##        #return NumLabels
##    def _set(self, NumLabels):
##        u'Determines how often a feature will be labeled.'
##    HowManyLabels = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The buffer range around the label where no other labels will overlap.'
##        #return ratio
##    def _set(self, ratio):
##        u'The buffer range around the label where no other labels will overlap.'
##    LabelBufferRatio = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The rotation angle of this label.'
##        #return angles
##    def _set(self, angles):
##        u'The rotation angle of this label.'
##    RotationalAngles = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The feature weight to prioritize the importance of features.'
##        #return Weight
##    def _set(self, Weight):
##        u'The feature weight to prioritize the importance of features.'
##    FeatureWeight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The name of the Field.'
##        #return Name
##    def _set(self, Name):
##        u'The name of the Field.'
##    LabelField = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The label properties.'
##        #return props
##    def _set(self, props):
##        u'The label properties.'
##    LabelProperties = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Text symbol used to draw the labels.'
##        #return Symbol
##    def _set(self, Symbol):
##        u'Text symbol used to draw the labels.'
##    LabelSymbol = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The label weight to prioritize the importance of labels.'
##        #return Weight
##    def _set(self, Weight):
##        u'The label weight to prioritize the importance of labels.'
##    LabelWeight = property(_get, _set, doc = _set.__doc__)
##

IMapImages._methods_ = [
    COMMETHOD(['propget', helpstring(u'The map image count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The map image at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IMapImage)), 'mapImg' )),
    COMMETHOD([helpstring(u'Removes the map image at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all map images.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Adds a map image.')], HRESULT, 'Add',
              ( ['in'], POINTER(IMapImage), 'mapImg' )),
    COMMETHOD([helpstring(u'Adds a map image at the specified position.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(IMapImage), 'mapImg' )),
]
################################################################
## code template for IMapImages implementation
##class IMapImages_Impl(object):
##    @property
##    def Count(self):
##        u'The map image count.'
##        #return Count
##
##    def Insert(self, Index, mapImg):
##        u'Adds a map image at the specified position.'
##        #return 
##
##    def Remove(self, Index):
##        u'Removes the map image at the specified position.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'The map image at the specified position.'
##        #return mapImg
##
##    def RemoveAll(self):
##        u'Removes all map images.'
##        #return 
##
##    def Add(self, mapImg):
##        u'Adds a map image.'
##        #return 
##

IACSimpleLabelRenderer._methods_ = [
]
################################################################
## code template for IACSimpleLabelRenderer implementation
##class IACSimpleLabelRenderer_Impl(object):

IACTrueTypeMarkerSymbol._methods_ = [
    COMMETHOD(['propget', helpstring(u'The font name.')], HRESULT, 'Font',
              ( ['retval', 'out'], POINTER(BSTR), 'Font' )),
    COMMETHOD(['propput', helpstring(u'The font name.')], HRESULT, 'Font',
              ( ['in'], BSTR, 'Font' )),
    COMMETHOD(['propget', helpstring(u'The font style.')], HRESULT, 'FontStyle',
              ( ['retval', 'out'], POINTER(acFontStyle), 'FontStyle' )),
    COMMETHOD(['propput', helpstring(u'The font style.')], HRESULT, 'FontStyle',
              ( ['in'], acFontStyle, 'FontStyle' )),
    COMMETHOD(['propget', helpstring(u'The font size.')], HRESULT, 'FontSize',
              ( ['retval', 'out'], POINTER(c_int), 'FontSize' )),
    COMMETHOD(['propput', helpstring(u'The font size.')], HRESULT, 'FontSize',
              ( ['in'], c_int, 'FontSize' )),
    COMMETHOD(['propget', helpstring(u'The font color.')], HRESULT, 'FontColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'The font color.')], HRESULT, 'FontColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the outline is used.')], HRESULT, 'Outline',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the outline is used.')], HRESULT, 'Outline',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'The outline color.')], HRESULT, 'OutlineColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'The outline color.')], HRESULT, 'OutlineColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the glow is used.')], HRESULT, 'Glowing',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the glow is used.')], HRESULT, 'Glowing',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'The glowing color.')], HRESULT, 'GlowingColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'The glowing color.')], HRESULT, 'GlowingColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the shadow is used.')], HRESULT, 'Shadow',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the shadow is used.')], HRESULT, 'Shadow',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'The shadow color.')], HRESULT, 'ShadowColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'The shadow color.')], HRESULT, 'ShadowColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'The character index in the font.')], HRESULT, 'Character',
              ( ['retval', 'out'], POINTER(c_int), 'Value' )),
    COMMETHOD(['propput', helpstring(u'The character index in the font.')], HRESULT, 'Character',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD(['propget', helpstring(u'The angle of the marker.')], HRESULT, 'Angle',
              ( ['retval', 'out'], POINTER(c_double), 'Angle' )),
    COMMETHOD(['propput', helpstring(u'The angle of the marker.')], HRESULT, 'Angle',
              ( ['in'], c_double, 'Angle' )),
    COMMETHOD(['propget', helpstring(u'Indicates if labels can overlap this symbol.')], HRESULT, 'Overlap',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if labels can overlap this symbol.')], HRESULT, 'Overlap',
              ( ['in'], VARIANT_BOOL, 'flag' )),
]
################################################################
## code template for IACTrueTypeMarkerSymbol implementation
##class IACTrueTypeMarkerSymbol_Impl(object):
##    def _get(self):
##        u'The font style.'
##        #return FontStyle
##    def _set(self, FontStyle):
##        u'The font style.'
##    FontStyle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The angle of the marker.'
##        #return Angle
##    def _set(self, Angle):
##        u'The angle of the marker.'
##    Angle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the outline is used.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if the outline is used.'
##    Outline = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The character index in the font.'
##        #return Value
##    def _set(self, Value):
##        u'The character index in the font.'
##    Character = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The shadow color.'
##        #return Color
##    def _set(self, Color):
##        u'The shadow color.'
##    ShadowColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if labels can overlap this symbol.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if labels can overlap this symbol.'
##    Overlap = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the glow is used.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if the glow is used.'
##    Glowing = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The font size.'
##        #return FontSize
##    def _set(self, FontSize):
##        u'The font size.'
##    FontSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The glowing color.'
##        #return Color
##    def _set(self, Color):
##        u'The glowing color.'
##    GlowingColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The font color.'
##        #return Color
##    def _set(self, Color):
##        u'The font color.'
##    FontColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the shadow is used.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if the shadow is used.'
##    Shadow = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The font name.'
##        #return Font
##    def _set(self, Font):
##        u'The font name.'
##    Font = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The outline color.'
##        #return Color
##    def _set(self, Color):
##        u'The outline color.'
##    OutlineColor = property(_get, _set, doc = _set.__doc__)
##

ILegend._methods_ = [
    COMMETHOD(['propget', helpstring(u'The formatting options for the legend (can be stored in the style gallery).')], HRESULT, 'Format',
              ( ['retval', 'out'], POINTER(POINTER(ILegendFormat)), 'LegendFormat' )),
    COMMETHOD(['propputref', helpstring(u'The formatting options for the legend (can be stored in the style gallery).')], HRESULT, 'Format',
              ( ['in'], POINTER(ILegendFormat), 'LegendFormat' )),
    COMMETHOD(['propget', helpstring(u'Title.')], HRESULT, 'Title',
              ( ['retval', 'out'], POINTER(BSTR), 'Title' )),
    COMMETHOD(['propput', helpstring(u'Title.')], HRESULT, 'Title',
              ( ['in'], BSTR, 'Title' )),
    COMMETHOD(['propget', helpstring(u'Indicates if a new item should be added when a new layer is added to the map.')], HRESULT, 'AutoAdd',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'AutoAdd' )),
    COMMETHOD(['propput', helpstring(u'Indicates if a new item should be added when a new layer is added to the map.')], HRESULT, 'AutoAdd',
              ( ['in'], VARIANT_BOOL, 'AutoAdd' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the legend items should be kept in the same order as the layers.')], HRESULT, 'AutoReorder',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'AutoReorder' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the legend items should be kept in the same order as the layers.')], HRESULT, 'AutoReorder',
              ( ['in'], VARIANT_BOOL, 'AutoReorder' )),
    COMMETHOD(['propget', helpstring(u'Indicates if items should be shown only when associated layers are visible.')], HRESULT, 'AutoVisibility',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'AutoVisibility' )),
    COMMETHOD(['propput', helpstring(u'Indicates if items should be shown only when associated layers are visible.')], HRESULT, 'AutoVisibility',
              ( ['in'], VARIANT_BOOL, 'AutoVisibility' )),
    COMMETHOD(['propget', helpstring(u'Reserved for future use.')], HRESULT, 'FlowRight',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Reserved for future use.')], HRESULT, 'FlowRight',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Number of items in the legend.')], HRESULT, 'ItemCount',
              ( ['retval', 'out'], POINTER(c_int), 'numItems' )),
    COMMETHOD(['propget', helpstring(u'The specified item from the legend.')], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(ILegendItem)), 'Item' )),
    COMMETHOD([helpstring(u'Adds a new item to the legend (to the end of the  list).')], HRESULT, 'AddItem',
              ( ['in'], POINTER(ILegendItem), 'Item' )),
    COMMETHOD([helpstring(u'Inserts a new item into the legend (at the location specified by index).')], HRESULT, 'InsertItem',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(ILegendItem), 'Item' )),
    COMMETHOD([helpstring(u'Removes the specified item from the legend.')], HRESULT, 'RemoveItem',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all items from the legend.')], HRESULT, 'ClearItems'),
]
################################################################
## code template for ILegend implementation
##class ILegend_Impl(object):
##    def _get(self):
##        u'Indicates if a new item should be added when a new layer is added to the map.'
##        #return AutoAdd
##    def _set(self, AutoAdd):
##        u'Indicates if a new item should be added when a new layer is added to the map.'
##    AutoAdd = property(_get, _set, doc = _set.__doc__)
##
##    def AddItem(self, Item):
##        u'Adds a new item to the legend (to the end of the  list).'
##        #return 
##
##    def _get(self):
##        u'Title.'
##        #return Title
##    def _set(self, Title):
##        u'Title.'
##    Title = property(_get, _set, doc = _set.__doc__)
##
##    def InsertItem(self, Index, Item):
##        u'Inserts a new item into the legend (at the location specified by index).'
##        #return 
##
##    def Format(self, LegendFormat):
##        u'The formatting options for the legend (can be stored in the style gallery).'
##        #return 
##
##    def RemoveItem(self, Index):
##        u'Removes the specified item from the legend.'
##        #return 
##
##    @property
##    def Item(self, Index):
##        u'The specified item from the legend.'
##        #return Item
##
##    def ClearItems(self):
##        u'Removes all items from the legend.'
##        #return 
##
##    def _get(self):
##        u'Reserved for future use.'
##        #return flag
##    def _set(self, flag):
##        u'Reserved for future use.'
##    FlowRight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the legend items should be kept in the same order as the layers.'
##        #return AutoReorder
##    def _set(self, AutoReorder):
##        u'Indicates if the legend items should be kept in the same order as the layers.'
##    AutoReorder = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def ItemCount(self):
##        u'Number of items in the legend.'
##        #return numItems
##
##    def _get(self):
##        u'Indicates if items should be shown only when associated layers are visible.'
##        #return AutoVisibility
##    def _set(self, AutoVisibility):
##        u'Indicates if items should be shown only when associated layers are visible.'
##    AutoVisibility = property(_get, _set, doc = _set.__doc__)
##

class MapSurroundFrame(CoClass):
    u'A graphic element for displaying map surrounds.'
    _reg_clsid_ = GUID('{83FFCAE1-EDCA-11D0-8683-0000F8751720}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
MapSurroundFrame._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IElement, IElementProperties, IElementProperties2, IElementProperties3, IMapSurroundFrame, IGraphicsComposite, IFrameElement, IFrameDraw, IFrameProperties, IMapFrameEvents, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITransformEvents, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ITransform2D, IBoundsProperties, IMapSurroundEvents]

class LegendGroup(CoClass):
    u'The collection of legend classes provided by a renderer.'
    _reg_clsid_ = GUID('{167C5EA2-AF20-11D1-8817-080009EC732A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
LegendGroup._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILegendGroup, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize]

class IRealTimeFeedSnap(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to properties that control the snapping behavior for the current position.'
    _iid_ = GUID('{C5B924EB-54DA-4591-B90D-FF3659A4B1B5}')
    _idlflags_ = ['oleautomation']
IRealTimeFeedSnap._methods_ = [
    COMMETHOD(['propget', helpstring(u'The list of layers used for snapping.')], HRESULT, 'SnapLayers',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'ppArray' )),
    COMMETHOD(['propputref', helpstring(u'The list of layers used for snapping.')], HRESULT, 'SnapLayers',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'ppArray' )),
    COMMETHOD(['propget', helpstring(u'The snap distance, in map units.')], HRESULT, 'SnapDistance',
              ( ['retval', 'out'], POINTER(c_double), 'pDistance' )),
    COMMETHOD(['propput', helpstring(u'The snap distance, in map units.')], HRESULT, 'SnapDistance',
              ( ['in'], c_double, 'pDistance' )),
    COMMETHOD(['propget', helpstring(u"Indicates if positions are snapped to the vertices in the snap layers' feature geometries. Defaults to false.")], HRESULT, 'SnapToVertices',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pSnap' )),
    COMMETHOD(['propput', helpstring(u"Indicates if positions are snapped to the vertices in the snap layers' feature geometries. Defaults to false.")], HRESULT, 'SnapToVertices',
              ( ['in'], VARIANT_BOOL, 'pSnap' )),
    COMMETHOD(['propget', helpstring(u"Indicates if positions are snapped to the lines in the snap layers' feature geometries. Defaults to false.")], HRESULT, 'SnapToLines',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pSnap' )),
    COMMETHOD(['propput', helpstring(u"Indicates if positions are snapped to the lines in the snap layers' feature geometries. Defaults to false.")], HRESULT, 'SnapToLines',
              ( ['in'], VARIANT_BOOL, 'pSnap' )),
    COMMETHOD(['propget', helpstring(u"Indicates if positions are snapped to the nodes in the snap layers' feature geometries. Defaults to false.")], HRESULT, 'SnapToNodes',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pSnap' )),
    COMMETHOD(['propput', helpstring(u"Indicates if positions are snapped to the nodes in the snap layers' feature geometries. Defaults to false.")], HRESULT, 'SnapToNodes',
              ( ['in'], VARIANT_BOOL, 'pSnap' )),
]
################################################################
## code template for IRealTimeFeedSnap implementation
##class IRealTimeFeedSnap_Impl(object):
##    def SnapLayers(self, ppArray):
##        u'The list of layers used for snapping.'
##        #return 
##
##    def _get(self):
##        u'The snap distance, in map units.'
##        #return pDistance
##    def _set(self, pDistance):
##        u'The snap distance, in map units.'
##    SnapDistance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u"Indicates if positions are snapped to the vertices in the snap layers' feature geometries. Defaults to false."
##        #return pSnap
##    def _set(self, pSnap):
##        u"Indicates if positions are snapped to the vertices in the snap layers' feature geometries. Defaults to false."
##    SnapToVertices = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u"Indicates if positions are snapped to the nodes in the snap layers' feature geometries. Defaults to false."
##        #return pSnap
##    def _set(self, pSnap):
##        u"Indicates if positions are snapped to the nodes in the snap layers' feature geometries. Defaults to false."
##    SnapToNodes = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u"Indicates if positions are snapped to the lines in the snap layers' feature geometries. Defaults to false."
##        #return pSnap
##    def _set(self, pSnap):
##        u"Indicates if positions are snapped to the lines in the snap layers' feature geometries. Defaults to false."
##    SnapToLines = property(_get, _set, doc = _set.__doc__)
##

class IImageQueryFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control an image query filter.'
    _iid_ = GUID('{316C6FB0-B53D-44E8-9B22-FFBEAFC5A884}')
    _idlflags_ = ['oleautomation']
IImageQueryFilter._methods_ = [
    COMMETHOD(['propget', helpstring(u'The query pixel size in a given spatial reference.')], HRESULT, 'PixelSize',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint)), 'ppPixelSize' )),
    COMMETHOD(['propputref', helpstring(u'The query pixel size in a given spatial reference.')], HRESULT, 'PixelSize',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'ppPixelSize' )),
]
################################################################
## code template for IImageQueryFilter implementation
##class IImageQueryFilter_Impl(object):
##    def PixelSize(self, ppPixelSize):
##        u'The query pixel size in a given spatial reference.'
##        #return 
##

class LasDatasetLayerFactory(CoClass):
    u'The LasDataset Layer Factory is used to help look for LasDataset layers.'
    _reg_clsid_ = GUID('{C57BBFA3-261B-4733-9A9B-F331567DF59F}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
LasDatasetLayerFactory._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILayerFactory]

class ICadLayer(ILayer):
    _case_insensitive_ = True
    u'Provides access to properties that give information on the CAD drawing.'
    _iid_ = GUID('{E299ADBC-A5C3-11D2-9B10-00C04FA33299}')
    _idlflags_ = ['oleautomation']
ICadLayer._methods_ = [
    COMMETHOD(['propget', helpstring(u'The dataset of the CAD drawing.')], HRESULT, 'CadDrawingDataset',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._1CE6AC65_43F5_4529_8FC0_D7ED298E4F1A_0_10_2.ICadDrawingDataset)), 'CadDrawingDataset' )),
    COMMETHOD(['propputref', helpstring(u'The dataset of the CAD drawing.')], HRESULT, 'CadDrawingDataset',
              ( ['in'], POINTER(comtypes.gen._1CE6AC65_43F5_4529_8FC0_D7ED298E4F1A_0_10_2.ICadDrawingDataset), 'CadDrawingDataset' )),
    COMMETHOD(['propget', helpstring(u'Full pathname of the CAD drawing.')], HRESULT, 'FilePath',
              ( ['retval', 'out'], POINTER(BSTR), 'FilePath' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the CAD drawing is 2D.')], HRESULT, 'Is2d',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Is2d' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the CAD drawing is 3D.')], HRESULT, 'Is3d',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Is3d' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the CAD drawing is an AutoCAD file.')], HRESULT, 'IsAutoCad',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsAutoCad' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the CAD drawing is a MicroStation file.')], HRESULT, 'IsDgn',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsDgn' )),
]
################################################################
## code template for ICadLayer implementation
##class ICadLayer_Impl(object):
##    @property
##    def Is3d(self):
##        u'Indicates if the CAD drawing is 3D.'
##        #return Is3d
##
##    @property
##    def IsAutoCad(self):
##        u'Indicates if the CAD drawing is an AutoCAD file.'
##        #return IsAutoCad
##
##    @property
##    def FilePath(self):
##        u'Full pathname of the CAD drawing.'
##        #return FilePath
##
##    @property
##    def IsDgn(self):
##        u'Indicates if the CAD drawing is a MicroStation file.'
##        #return IsDgn
##
##    @property
##    def Is2d(self):
##        u'Indicates if the CAD drawing is 2D.'
##        #return Is2d
##
##    def CadDrawingDataset(self, CadDrawingDataset):
##        u'The dataset of the CAD drawing.'
##        #return 
##

ISymbolSubstitution._methods_ = [
    COMMETHOD(['propget', helpstring(u'The color used for substituting only the color.')], HRESULT, 'MassColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propputref', helpstring(u'The color used for substituting only the color.')], HRESULT, 'MassColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'The color used for substituting symbols that do not reference the symbol collection.')], HRESULT, 'InlineColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propputref', helpstring(u'The color used for substituting symbols that do not reference the symbol collection.')], HRESULT, 'InlineColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'The substitute symbol collection when substituting the entire collection.')], HRESULT, 'SubstituteSymbolCollection',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbolCollection)), 'SymbolCollection' )),
    COMMETHOD(['propputref', helpstring(u'The substitute symbol collection when substituting the entire collection.')], HRESULT, 'SubstituteSymbolCollection',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbolCollection), 'SymbolCollection' )),
    COMMETHOD(['propget', helpstring(u'The type of symbol substitution.')], HRESULT, 'SubstituteType',
              ( ['retval', 'out'], POINTER(esriSymbolSubstituteType), 'SubstituteType' )),
    COMMETHOD(['propput', helpstring(u'The type of symbol substitution.')], HRESULT, 'SubstituteType',
              ( ['in'], esriSymbolSubstituteType, 'SubstituteType' )),
]
################################################################
## code template for ISymbolSubstitution implementation
##class ISymbolSubstitution_Impl(object):
##    def _get(self):
##        u'The type of symbol substitution.'
##        #return SubstituteType
##    def _set(self, SubstituteType):
##        u'The type of symbol substitution.'
##    SubstituteType = property(_get, _set, doc = _set.__doc__)
##
##    def InlineColor(self, Color):
##        u'The color used for substituting symbols that do not reference the symbol collection.'
##        #return 
##
##    def MassColor(self, Color):
##        u'The color used for substituting only the color.'
##        #return 
##
##    def SubstituteSymbolCollection(self, SymbolCollection):
##        u'The substitute symbol collection when substituting the entire collection.'
##        #return 
##

class LegendClassFormat(CoClass):
    u'Formatting information for the legend/TOC entry of a renderer class.'
    _reg_clsid_ = GUID('{7A3F91E6-B9E3-11D1-8756-0000F8751720}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
LegendClassFormat._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILegendClassFormat, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize]


# values for enumeration 'esriSizeRendererFlags'
esriSizeRendererNone = 0
esriSizeRendererUseExpression = 1
esriSizeRendererRandom = 2
esriSizeRendererFlags = c_int # enum
ISizeRenderer._methods_ = [
    COMMETHOD(['propget', helpstring(u'Gets sizing flags composed of enum esriSizeRendererFlags.')], HRESULT, 'SizeRendererFlags',
              ( ['retval', 'out'], POINTER(c_int), 'pFlags' )),
    COMMETHOD(['propput', helpstring(u'Gets sizing flags composed of enum esriSizeRendererFlags.')], HRESULT, 'SizeRendererFlags',
              ( ['in'], c_int, 'pFlags' )),
    COMMETHOD(['propget', helpstring(u'Gets size expression.')], HRESULT, 'SizeRendererExpression',
              ( ['retval', 'out'], POINTER(BSTR), 'pExpression' )),
    COMMETHOD(['propput', helpstring(u'Gets size expression.')], HRESULT, 'SizeRendererExpression',
              ( ['in'], BSTR, 'pExpression' )),
    COMMETHOD([helpstring(u'Gets size range for random sizing.')], HRESULT, 'GetSizeRendererRandomRange',
              ( ['out'], POINTER(c_double), 'pMinSize' ),
              ( ['out'], POINTER(c_double), 'pMaxSize' )),
    COMMETHOD([helpstring(u'Sets size range for random sizing.')], HRESULT, 'SetSizeRendererRandomRange',
              ( ['in'], c_double, 'MinSize' ),
              ( ['in'], c_double, 'maxSize' )),
]
################################################################
## code template for ISizeRenderer implementation
##class ISizeRenderer_Impl(object):
##    def GetSizeRendererRandomRange(self):
##        u'Gets size range for random sizing.'
##        #return pMinSize, pMaxSize
##
##    def SetSizeRendererRandomRange(self, MinSize, maxSize):
##        u'Sets size range for random sizing.'
##        #return 
##
##    def _get(self):
##        u'Gets size expression.'
##        #return pExpression
##    def _set(self, pExpression):
##        u'Gets size expression.'
##    SizeRendererExpression = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Gets sizing flags composed of enum esriSizeRendererFlags.'
##        #return pFlags
##    def _set(self, pFlags):
##        u'Gets sizing flags composed of enum esriSizeRendererFlags.'
##    SizeRendererFlags = property(_get, _set, doc = _set.__doc__)
##

class ICadIdentifyObj2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control Identified Cad Objects.'
    _iid_ = GUID('{6729281D-94E0-48EE-8300-407D5F44DC6E}')
    _idlflags_ = ['oleautomation', 'restricted']
ICadIdentifyObj2._methods_ = [
    COMMETHOD([helpstring(u'Gets the indexed properties and values of a CadIdentifyObject.')], HRESULT, 'GetPropAndValues',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(BSTR), 'Property' ),
              ( ['out'], POINTER(BSTR), 'Value' )),
    COMMETHOD([helpstring(u'Initilaizes the set of properties and values of a CadIdentifyObject.')], HRESULT, 'SetupEntity'),
]
################################################################
## code template for ICadIdentifyObj2 implementation
##class ICadIdentifyObj2_Impl(object):
##    def GetPropAndValues(self, Index):
##        u'Gets the indexed properties and values of a CadIdentifyObject.'
##        #return Property, Value
##
##    def SetupEntity(self):
##        u'Initilaizes the set of properties and values of a CadIdentifyObject.'
##        #return 
##

class StandaloneTableInfo(CoClass):
    u'The coclass contains information for standalone table in a map.'
    _reg_clsid_ = GUID('{393F91DC-8DAF-4147-9C8B-60EE7A2E1CE2}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
StandaloneTableInfo._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IStandaloneTableInfo, IMapTableInfo2, IMapTableInfo3, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, IMapTableTimeInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

IRendererClasses._methods_ = [
    COMMETHOD(['propget', helpstring(u'Number of classes.')], HRESULT, 'ClassCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'Class name.')], HRESULT, 'Class',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propget', helpstring(u'WhereClause.')], HRESULT, 'WhereClause',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable), 'Table' ),
              ( ['retval', 'out'], POINTER(BSTR), 'WhereClause' )),
]
################################################################
## code template for IRendererClasses implementation
##class IRendererClasses_Impl(object):
##    @property
##    def WhereClause(self, Index, Table):
##        u'WhereClause.'
##        #return WhereClause
##
##    @property
##    def Class(self, Index):
##        u'Class name.'
##        #return Name
##
##    @property
##    def ClassCount(self):
##        u'Number of classes.'
##        #return Count
##

IRasterTypeInfos._methods_ = [
    COMMETHOD(['propget', helpstring(u'The raster type info count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propget', helpstring(u'The raster type info at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IRasterTypeInfo)), 'ppTypeInfo' )),
    COMMETHOD([helpstring(u'Removes the raster type info at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all raster type infos.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Adds a raster type info.')], HRESULT, 'Add',
              ( ['in'], POINTER(IRasterTypeInfo), 'pTypeInfo' )),
    COMMETHOD([helpstring(u'Adds a raster type info at the specified position.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(IRasterTypeInfo), 'pTypeInfo' )),
]
################################################################
## code template for IRasterTypeInfos implementation
##class IRasterTypeInfos_Impl(object):
##    @property
##    def Count(self):
##        u'The raster type info count.'
##        #return pCount
##
##    def Insert(self, Index, pTypeInfo):
##        u'Adds a raster type info at the specified position.'
##        #return 
##
##    def Remove(self, Index):
##        u'Removes the raster type info at the specified position.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'The raster type info at the specified position.'
##        #return ppTypeInfo
##
##    def RemoveAll(self):
##        u'Removes all raster type infos.'
##        #return 
##
##    def Add(self, pTypeInfo):
##        u'Adds a raster type info.'
##        #return 
##

class LODInfos(CoClass):
    u'A collection of LOD Info objects.'
    _reg_clsid_ = GUID('{8CD19A51-334B-4C0A-BC97-A3FDEA0A1CE0}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
LODInfos._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILODInfos, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class EngineCadLayerFactory(CoClass):
    u'Esri CAD Layer Factory.'
    _reg_clsid_ = GUID('{A41F1D23-50C0-428A-B0E8-99E99554304A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
EngineCadLayerFactory._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILayerFactory]

class CadLayer(CoClass):
    u'Esri CAD Layer class.'
    _reg_clsid_ = GUID('{E299ADBD-A5C3-11D2-9B10-00C04FA33299}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
CadLayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILayer, ICadLayer, comtypes.gen._1CE6AC65_43F5_4529_8FC0_D7ED298E4F1A_0_10_2.ICadDrawingLayers, comtypes.gen._1CE6AC65_43F5_4529_8FC0_D7ED298E4F1A_0_10_2.ICadTransformations, IGeoReference, ICad3DRenderMode, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IConnectionPointContainer, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeoDataset, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, IDataLayer, IDataLayer2, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayAdmin, IIdentify, ILayerInfo, ILayerEffects, ILayerPosition, ILayerExtensions, IPublishLayer, ILayerGeneralProperties]

ITableHistogram._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The associated table.')], HRESULT, 'Table',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable), 'Table' )),
    COMMETHOD(['propget', helpstring(u'The associated table.')], HRESULT, 'Table',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable)), 'Table' )),
    COMMETHOD(['propputref', helpstring(u'Data exclusion options.')], HRESULT, 'Exclusion',
              ( ['in'], POINTER(IDataExclusion), 'dataExclusion' )),
    COMMETHOD(['propget', helpstring(u'Data exclusion options.')], HRESULT, 'Exclusion',
              ( ['retval', 'out'], POINTER(POINTER(IDataExclusion)), 'dataExclusion' )),
    COMMETHOD(['propputref', helpstring(u'Data sampling options.')], HRESULT, 'Sampling',
              ( ['in'], POINTER(IDataSampling), 'dataSampling' )),
    COMMETHOD(['propget', helpstring(u'Data sampling options.')], HRESULT, 'Sampling',
              ( ['retval', 'out'], POINTER(POINTER(IDataSampling)), 'dataSampling' )),
    COMMETHOD(['propput', helpstring(u'Value field.')], HRESULT, 'Field',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'Value field.')], HRESULT, 'Field',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'Normalization field.')], HRESULT, 'NormField',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'Normalization field.')], HRESULT, 'NormField',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
]
################################################################
## code template for ITableHistogram implementation
##class ITableHistogram_Impl(object):
##    def _get(self):
##        u'Value field.'
##        #return Name
##    def _set(self, Name):
##        u'Value field.'
##    Field = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Table(self, Table):
##        u'The associated table.'
##        #return 
##
##    def _get(self):
##        u'Normalization field.'
##        #return Name
##    def _set(self, Name):
##        u'Normalization field.'
##    NormField = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Exclusion(self, dataExclusion):
##        u'Data exclusion options.'
##        #return 
##
##    @property
##    def Sampling(self, dataSampling):
##        u'Data sampling options.'
##        #return 
##

IImageServerInit._methods_ = [
    COMMETHOD([helpstring(u'Initializes this image server from a fullname to a dataset.')], HRESULT, 'Initialize',
              ( [], BSTR, 'FullName' )),
    COMMETHOD([helpstring(u'Initializes this image server from a Raster Dataset.')], HRESULT, 'InitializeFromDataset',
              ( [], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterDataset), 'pDataset' )),
    COMMETHOD([helpstring(u'Initializes this image server from an AIS service URL (ImageService://<host>:<port>/<service>).')], HRESULT, 'InitializeFromServiceURL',
              ( [], BSTR, 'ServiceURL' )),
    COMMETHOD(['propputref', helpstring(u'The image server data source name.')], HRESULT, 'ImageDataSourceName',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName), 'ppName' )),
    COMMETHOD(['propget', helpstring(u'The image server data source name.')], HRESULT, 'ImageDataSourceName',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName)), 'ppName' )),
]
################################################################
## code template for IImageServerInit implementation
##class IImageServerInit_Impl(object):
##    def Initialize(self, FullName):
##        u'Initializes this image server from a fullname to a dataset.'
##        #return 
##
##    @property
##    def ImageDataSourceName(self, ppName):
##        u'The image server data source name.'
##        #return 
##
##    def InitializeFromDataset(self, pDataset):
##        u'Initializes this image server from a Raster Dataset.'
##        #return 
##
##    def InitializeFromServiceURL(self, ServiceURL):
##        u'Initializes this image server from an AIS service URL (ImageService://<host>:<port>/<service>).'
##        #return 
##

IACTextMarkerSymbol._methods_ = [
    COMMETHOD(['propget', helpstring(u'The horizontal alignment style.')], HRESULT, 'HAlignment',
              ( ['retval', 'out'], POINTER(acHTextAlignment), 'hTextAlignment' )),
    COMMETHOD(['propput', helpstring(u'The horizontal alignment style.')], HRESULT, 'HAlignment',
              ( ['in'], acHTextAlignment, 'hTextAlignment' )),
    COMMETHOD(['propget', helpstring(u'The vertical alignment style.')], HRESULT, 'VAlignment',
              ( ['retval', 'out'], POINTER(acVTextAlignment), 'vTextAlignment' )),
    COMMETHOD(['propput', helpstring(u'The vertical alignment style.')], HRESULT, 'VAlignment',
              ( ['in'], acVTextAlignment, 'vTextAlignment' )),
    COMMETHOD(['propget', helpstring(u'The angle of the marker.')], HRESULT, 'Angle',
              ( ['retval', 'out'], POINTER(c_double), 'Angle' )),
    COMMETHOD(['propput', helpstring(u'The angle of the marker.')], HRESULT, 'Angle',
              ( ['in'], c_double, 'Angle' )),
]
################################################################
## code template for IACTextMarkerSymbol implementation
##class IACTextMarkerSymbol_Impl(object):
##    def _get(self):
##        u'The angle of the marker.'
##        #return Angle
##    def _set(self, Angle):
##        u'The angle of the marker.'
##    Angle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The horizontal alignment style.'
##        #return hTextAlignment
##    def _set(self, hTextAlignment):
##        u'The horizontal alignment style.'
##    HAlignment = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The vertical alignment style.'
##        #return vTextAlignment
##    def _set(self, vTextAlignment):
##        u'The vertical alignment style.'
##    VAlignment = property(_get, _set, doc = _set.__doc__)
##

class CadFeatureLayer(CoClass):
    u'Esri CAD Feature Layer class.'
    _reg_clsid_ = GUID('{E0F384B6-E0C1-11D2-9B30-00C04FA33299}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IFeatureLayerExtendedDefinition(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the extended definiton expression of a CadFeatureLayer.'
    _iid_ = GUID('{BD0B0FDD-698F-11D5-9C2F-00C04FA33299}')
    _idlflags_ = ['oleautomation']
CadFeatureLayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._1CE6AC65_43F5_4529_8FC0_D7ED298E4F1A_0_10_2.ICadDrawingLayers, comtypes.gen._1CE6AC65_43F5_4529_8FC0_D7ED298E4F1A_0_10_2.ICadTransformations, IGeoReference, ILayer, ILayer2, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeoDataset, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, IFeatureLayer, IFeatureLayer2, IGeoFeatureLayer, IFeatureSelection, IFeatureLayerDefinition, IFeatureLayerDefinition2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySupport, ILegendInfo, ILayerFields, IIdentify, IIdentify2, IDataLayer, IDataLayer2, ILayerDrawingProperties, ILayerInfo, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayAdmin, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayFilterManager, IHyperlinkContainer, IHotlinkContainer, IHotlinkMacro, IHotlinkExpression, ILayerEffects, ILayerPosition, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable, ITableDefinition, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITableFields, ITableSelection, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITableCapabilities, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IClass, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataset, IRelationshipClassCollection, IRelationshipClassCollectionEdit, ILayerExtensions, IDisplayTable, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IObjectClassSchemaEvents, IDisplayRelationshipClass, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IConnectionPointContainer, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IMapLevel, IFind, IAttributeTable, IFeatureLayerExtendedDefinition, IPublishLayer, ILayerGeneralProperties, ILayerSymbologyExtents, ISecureLayer, ISymbolLevels, ITemporaryLayer, IHTMLPopupInfo, IHTMLPopupInfo2, IHTMLPopupIdentify, IHTMLPopupIdentify2, IDisplayString, IIdentifyDisplay, IOrderedLayerFields, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspaceEvents]


# values for enumeration 'esriImageServerMessageCodeEnum'
esriImageServerMessageCode_ImageServerFailed = 80001
esriImageServerMessageCode_ImageServerNotLicensed = 80002
esriImageServerMessageCode_ImageServerStarted = 80003
esriImageServerMessageCode_ImageServerDebug = 80004
esriImageServerMessageCode_ImageServerConfig = 80005
esriImageServerMessageCode_ImageServerUnknownRequest = 80006
esriImageServerMessageCode_CapabilityUnsupported = 80007
esriImageServerMessageCode_ImageServerGetVersion = 80010
esriImageServerMessageCode_ImageServerGetServiceInfo = 80012
esriImageServerMessageCode_ImageServerGetImage = 80014
esriImageServerMessageCode_ImageServerExportImage = 80016
esriImageServerMessageCode_ImageServerExportMapImage = 80017
esriImageServerMessageCode_ImageServerExecuteAISRequest = 80018
esriImageServerMessageCode_ImageServerGetPixelBlock = 80019
esriImageServerMessageCode_ImageServerMosaic = 80020
esriImageServerMessageCode_ImageServerStart = 80021
esriImageServerMessageCode_ImageServerStop = 80022
esriImageServerMessageCode_ImageServerComputeHistograms = 80023
esriImageServerMessageCode_ImageServerIdentify = 80024
esriImageServerMessageCode_ImageServerCache = 80025
esriImageServerMessageCodeEnum = c_int # enum

# values for enumeration 'esriImageServerError'
E_IMAGESERVER_NO_AIS_CONNECTION = -2147216896
E_IMAGESERVER_FAILED_TO_GETIMAGE = -2147216895
E_IMAGESERVER_UNSUPPORTED_OPERATION = -2147216894
E_IMAGESERVER_UNSUPPORTED_REQUEST = -2147216893
E_IMAGESERVER_UNSUPPORTED_FORMAT = -2147216892
E_IMAGESERVER_NO_FILE = -2147216891
E_IMAGESERVER_JPIP_NOT_LICENSED = -2147216890
E_IMAGESERVER_NO_DYNAMICIMAGEWORKSPACE = -2147216889
E_IMAGESERVER_INVALID_FUNCTION_DATASET = -2147216888
E_IMAGESERVER_NOT_ALLOW_FUNCTION = -2147216887
E_IMAGESERVER_CANT_MEASURE_HEIGHT = -2147216886
E_IMAGESERVER_CANT_MEASURE_SHADOW = -2147216885
E_IMAGESERVER_FAILED_TO_EXPORTIMAGE = -2147216884
E_IMAGESERVER_FAILED_TO_CREATE_VIEW = -2147216883
E_IMAGESERVER_VIEW_ALREADY_EXIST = -2147216882
E_IMAGESERVER_INVALID_VIEW_ID = -2147216881
E_IMAGESERVER_NO_PERMISSION = -2147216880
E_IMAGESERVER_VIEW_DOESNT_EXIST = -2147216879
E_IMAGESERVER_CANT_MEASURE_3D = -2147216878
E_IMAGESERVER_CANT_ACQUIRE_TILE_LOCK = -2147216877
E_IMAGESERVER_CANT_ACCESS_RASTERID = -2147216876
E_IMAGESERVER_BAD_CACHE_SPATIALREFERENCE = -2147216875
E_IMAGESERVER_CANT_ADD_RASTERS = -2147216874
esriImageServerError = c_int # enum
IFeatureLayerExtendedDefinition._methods_ = [
    COMMETHOD(['propget', helpstring(u'The extended definition expression.')], HRESULT, 'ExtendedDefinitionExpression',
              ( ['out'], POINTER(BSTR), 'pExpression' )),
]
################################################################
## code template for IFeatureLayerExtendedDefinition implementation
##class IFeatureLayerExtendedDefinition_Impl(object):
##    @property
##    def ExtendedDefinitionExpression(self):
##        u'The extended definition expression.'
##        #return pExpression
##

class ColorRampStyleGalleryClass(CoClass):
    u'Use to create new Color Ramp items.'
    _reg_clsid_ = GUID('{79A60902-9D7F-11D1-A1C9-080009B6F22B}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
ColorRampStyleGalleryClass._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IStyleGalleryClass, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IStyleGalleryClass2]

class EngineCadFeatureLayerFactory(CoClass):
    u'Esri CAD Feature Layer Factory.'
    _reg_clsid_ = GUID('{CDCDE5EC-D2B6-41CA-8EC0-E62431F4E7EA}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
EngineCadFeatureLayerFactory._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILayerFactory]

class CadAnnotationLayer(CoClass):
    u'An Esri Cad annotation layer.'
    _reg_clsid_ = GUID('{E1B71879-A5DF-11D4-A215-444553547777}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
CadAnnotationLayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ICoverageAnnotationLayer, ICoverageAnnotationLayer2, ICoverageAnnotationLayerWrite, ICoverageAnnotationSel, comtypes.gen._1CE6AC65_43F5_4529_8FC0_D7ED298E4F1A_0_10_2.ICadDrawingLayers, comtypes.gen._1CE6AC65_43F5_4529_8FC0_D7ED298E4F1A_0_10_2.ICadTransformations, ILayer, ILayer2, IFeatureLayer, IFeatureLayer2, IFeatureLayerDefinition, IFeatureLayerDefinition2, IFeatureSelection, ILayerFields, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITableFields, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeoDataset, IBarrierProperties, IBarrierProperties2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, ILayerInfo, IDataLayer, IDataLayer2, IAttributeTable, IFind, IHotlinkContainer, IHotlinkMacro, IHotlinkExpression, IHyperlinkContainer, IIdentify, IIdentify2, IInteractiveSearch, IPublishLayer, ILayerDrawingPhase, ILayerDrawingProperties, ILayerEffects, ILayerExtensions, ILayerPosition, ILayerSymbologyExtents, ILayerGeneralProperties, IDrawAnnotationGeometry, IHTMLPopupInfo, IHTMLPopupInfo2, IHTMLPopupIdentify, IHTMLPopupIdentify2, IDisplayRelationshipClass, IDisplayTable, IGeoReference, IRelationshipClassCollection, IRelationshipClassCollectionEdit, ISecureLayer, ITableDefinition, ITableSelection, ITemporaryLayer, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayAdmin, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayFilterManager, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IMapLevel, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IClass, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataset, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IObjectClassSchemaEvents, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITableCapabilities, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySupport, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IConnectionPointContainer, IDisplayString, IIdentifyDisplay, IOrderedLayerFields, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspaceEvents]

IACRasterMarkerSymbol._methods_ = [
    COMMETHOD(['propget', helpstring(u'The url to access the image.')], HRESULT, 'URL',
              ( ['retval', 'out'], POINTER(BSTR), 'URL' )),
    COMMETHOD(['propput', helpstring(u'The url to access the image.')], HRESULT, 'URL',
              ( ['in'], BSTR, 'URL' )),
    COMMETHOD(['propget', helpstring(u'The path to the image.')], HRESULT, 'Image',
              ( ['retval', 'out'], POINTER(BSTR), 'Path' )),
    COMMETHOD(['propput', helpstring(u'The path to the image.')], HRESULT, 'Image',
              ( ['in'], BSTR, 'Path' )),
    COMMETHOD(['propget', helpstring(u'Indicates if labels can overlap this symbol.')], HRESULT, 'Overlap',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if labels can overlap this symbol.')], HRESULT, 'Overlap',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'The width of the bitmap in pixels.')], HRESULT, 'Width',
              ( ['retval', 'out'], POINTER(c_int), 'Width' )),
    COMMETHOD(['propput', helpstring(u'The width of the bitmap in pixels.')], HRESULT, 'Width',
              ( ['in'], c_int, 'Width' )),
    COMMETHOD(['propget', helpstring(u'The height of the bitmap in pixels.')], HRESULT, 'Height',
              ( ['retval', 'out'], POINTER(c_int), 'Height' )),
    COMMETHOD(['propput', helpstring(u'The height of the bitmap in pixels.')], HRESULT, 'Height',
              ( ['in'], c_int, 'Height' )),
    COMMETHOD(['propget', helpstring(u'The hotspot of the bitmap.')], HRESULT, 'HotSpot',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint)), 'point' )),
    COMMETHOD(['propput', helpstring(u'The hotspot of the bitmap.')], HRESULT, 'HotSpot',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'point' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the shadow is used.')], HRESULT, 'Shadow',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the shadow is used.')], HRESULT, 'Shadow',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'The shadow color.')], HRESULT, 'ShadowColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'The shadow color.')], HRESULT, 'ShadowColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
]
################################################################
## code template for IACRasterMarkerSymbol implementation
##class IACRasterMarkerSymbol_Impl(object):
##    def _get(self):
##        u'The url to access the image.'
##        #return URL
##    def _set(self, URL):
##        u'The url to access the image.'
##    URL = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The path to the image.'
##        #return Path
##    def _set(self, Path):
##        u'The path to the image.'
##    Image = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The hotspot of the bitmap.'
##        #return point
##    def _set(self, point):
##        u'The hotspot of the bitmap.'
##    HotSpot = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The height of the bitmap in pixels.'
##        #return Height
##    def _set(self, Height):
##        u'The height of the bitmap in pixels.'
##    Height = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The width of the bitmap in pixels.'
##        #return Width
##    def _set(self, Width):
##        u'The width of the bitmap in pixels.'
##    Width = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The shadow color.'
##        #return Color
##    def _set(self, Color):
##        u'The shadow color.'
##    ShadowColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if labels can overlap this symbol.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if labels can overlap this symbol.'
##    Overlap = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the shadow is used.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if the shadow is used.'
##    Shadow = property(_get, _set, doc = _set.__doc__)
##

IACAxl._methods_ = [
    COMMETHOD(['propget', helpstring(u'The element that represents the XML.')], HRESULT, 'Element',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'Element' )),
    COMMETHOD(['propputref', helpstring(u'The element that represents the XML.')], HRESULT, 'Element',
              ( ['in'], POINTER(IUnknown), 'Element' )),
]
################################################################
## code template for IACAxl implementation
##class IACAxl_Impl(object):
##    def Element(self, Element):
##        u'The element that represents the XML.'
##        #return 
##

class StandaloneTableDescriptions(CoClass):
    u'A collection of Standalone Table Description objects.'
    _reg_clsid_ = GUID('{FE6A5B40-F898-4197-A807-2E554A18E1F7}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
StandaloneTableDescriptions._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IStandaloneTableDescriptions, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

class MapReader(CoClass):
    u'The MapReader component provides programmatic access to the contents of a map document.'
    _reg_clsid_ = GUID('{CBE900D4-AF66-4E4E-A957-AC839B1770CD}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
MapReader._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMapReader, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]

class ContinuousTabStyle(CoClass):
    u'A continuous tab style grid label for index grids.'
    _reg_clsid_ = GUID('{CE41C50E-9DF9-11D2-AADE-000000000000}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
ContinuousTabStyle._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IIndexGridTabStyle, IGridLabel, IGridLabel2, IGridLabelExport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

class MapServerInfo(CoClass):
    u'The Map Server Info coclass provides read-only information about a map.'
    _reg_clsid_ = GUID('{927B6010-1AC9-470F-99B5-BF95C98B9339}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
MapServerInfo._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMapServerInfo, IMapServerInfo2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, IMapServerInfo3, IMapServerTimeInfo, IMapServerTimeInfo2, IMapServerInfo4]

class MapServerLayerFactory(CoClass):
    u'Provides programmatic access to a map server layer factory.'
    _reg_clsid_ = GUID('{5DBCE76C-0A71-4CE1-9E2E-2E030A55050D}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
MapServerLayerFactory._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILayerFactory, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]

class MapLayerInfo(CoClass):
    u'The Map Layer Info coclass provides read-only information about a layer in a map.'
    _reg_clsid_ = GUID('{63E9B9A2-5B83-4065-8F32-FF7732EFF3ED}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
MapLayerInfo._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMapLayerInfo, IMapLayerInfo2, IMapLayerInfo3, IMapLayerInfo4, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, IMapTableInfo, IMapTableInfo2, IMapTableInfo3, IMapTableTimeInfo]

class IMapTimeDescription2(IMapTimeDescription):
    _case_insensitive_ = True
    u'Provides access to time properties of a MapDescription.'
    _iid_ = GUID('{2305FE16-0E11-4291-B824-8E6CEB1649F4}')
    _idlflags_ = ['oleautomation']
IMapTimeDescription2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Time relation for the time query.')], HRESULT, 'TimeRelation',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriTimeRelation), 'relation' )),
    COMMETHOD(['propput', helpstring(u'Time relation for the time query.')], HRESULT, 'TimeRelation',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriTimeRelation, 'relation' )),
]
################################################################
## code template for IMapTimeDescription2 implementation
##class IMapTimeDescription2_Impl(object):
##    def _get(self):
##        u'Time relation for the time query.'
##        #return relation
##    def _set(self, relation):
##        u'Time relation for the time query.'
##    TimeRelation = property(_get, _set, doc = _set.__doc__)
##

class IConditionalAction2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to properties and methods needed to manage conditional actions.'
    _iid_ = GUID('{DAF384E0-8A7A-11D7-B87F-00010265ADC5}')
    _idlflags_ = ['oleautomation']
IConditionalAction2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Type of trigger used to execute an action: Always, Location, Attribute, or Attribute and Location.')], HRESULT, 'TriggerType',
              ( ['retval', 'out'], POINTER(enumTriggerType), 'pVal' )),
    COMMETHOD(['propput', helpstring(u'Type of trigger used to execute an action: Always, Location, Attribute, or Attribute and Location.')], HRESULT, 'TriggerType',
              ( ['in'], enumTriggerType, 'pVal' )),
    COMMETHOD(['propget', helpstring(u'Spatial relationship of an intrinsic location trigger.')], HRESULT, 'LocationTriggerType',
              ( ['retval', 'out'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriSpatialRelEnum), 'pVal' )),
    COMMETHOD(['propput', helpstring(u'Spatial relationship of an intrinsic location trigger.')], HRESULT, 'LocationTriggerType',
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriSpatialRelEnum, 'pVal' )),
    COMMETHOD(['propget', helpstring(u'SQL query for an attribute trigger.')], HRESULT, 'QueryString',
              ( ['retval', 'out'], POINTER(BSTR), 'pVal' )),
    COMMETHOD(['propput', helpstring(u'SQL query for an attribute trigger.')], HRESULT, 'QueryString',
              ( ['in'], BSTR, 'pVal' )),
    COMMETHOD(['propget', helpstring(u'Layer containing location test polygons.')], HRESULT, 'TriggerLayer',
              ( ['retval', 'out'], POINTER(POINTER(ILayer)), 'pVal' )),
    COMMETHOD(['propputref', helpstring(u'Layer containing location test polygons.')], HRESULT, 'TriggerLayer',
              ( ['in'], POINTER(ILayer), 'pVal' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether or not to negate results of the location trigger.')], HRESULT, 'NegateLocationTrigger',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pVal' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether or not to negate results of the location trigger.')], HRESULT, 'NegateLocationTrigger',
              ( ['in'], VARIANT_BOOL, 'pVal' )),
    COMMETHOD(['propget', helpstring(u'Name of a feature class containing polygons to test location trigger actions.')], HRESULT, 'PolygonSourceName',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName)), 'ppiSourceName' )),
    COMMETHOD(['propputref', helpstring(u'Name of a feature class containing polygons to test location trigger actions.')], HRESULT, 'PolygonSourceName',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName), 'ppiSourceName' )),
    COMMETHOD(['propget', helpstring(u'The list of columns from the feature or the dataset definition.')], HRESULT, 'ColumnList',
              ( ['retval', 'out'], POINTER(VARIANT), 'pVal' )),
    COMMETHOD(['propput', helpstring(u'The list of columns from the feature or the dataset definition.')], HRESULT, 'ColumnList',
              ( ['in'], VARIANT, 'pVal' )),
    COMMETHOD(['propget', helpstring(u'Name of layer containing location test polygons.')], HRESULT, 'TriggerLayerName',
              ( ['retval', 'out'], POINTER(BSTR), 'pVal' )),
    COMMETHOD(['propput', helpstring(u'Name of the custom location trigger for the action if one is being used.')], HRESULT, 'LocationTriggerName',
              ( ['in'], BSTR, 'pVal' )),
    COMMETHOD(['propget', helpstring(u'Name of the custom location trigger for the action if one is being used.')], HRESULT, 'LocationTriggerName',
              ( ['retval', 'out'], POINTER(BSTR), 'pVal' )),
    COMMETHOD(['propput', helpstring(u'Geometry used for location trigger test.')], HRESULT, 'TestGeometry',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'ppiTestGeometry' )),
    COMMETHOD(['propget', helpstring(u'Geometry used for location trigger test.')], HRESULT, 'TestGeometry',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry)), 'ppiTestGeometry' )),
    COMMETHOD(['propput', helpstring(u'String describing the Spatial Reference used by the Action.')], HRESULT, 'SpatialReference',
              ( ['in'], BSTR, 'pVal' )),
    COMMETHOD(['propget', helpstring(u'String describing the Spatial Reference used by the Action.')], HRESULT, 'SpatialReference',
              ( ['retval', 'out'], POINTER(BSTR), 'pVal' )),
]
################################################################
## code template for IConditionalAction2 implementation
##class IConditionalAction2_Impl(object):
##    def _get(self):
##        u'Geometry used for location trigger test.'
##        #return ppiTestGeometry
##    def _set(self, ppiTestGeometry):
##        u'Geometry used for location trigger test.'
##    TestGeometry = property(_get, _set, doc = _set.__doc__)
##
##    def PolygonSourceName(self, ppiSourceName):
##        u'Name of a feature class containing polygons to test location trigger actions.'
##        #return 
##
##    def _get(self):
##        u'Name of the custom location trigger for the action if one is being used.'
##        #return pVal
##    def _set(self, pVal):
##        u'Name of the custom location trigger for the action if one is being used.'
##    LocationTriggerName = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def TriggerLayerName(self):
##        u'Name of layer containing location test polygons.'
##        #return pVal
##
##    def _get(self):
##        u'SQL query for an attribute trigger.'
##        #return pVal
##    def _set(self, pVal):
##        u'SQL query for an attribute trigger.'
##    QueryString = property(_get, _set, doc = _set.__doc__)
##
##    def TriggerLayer(self, pVal):
##        u'Layer containing location test polygons.'
##        #return 
##
##    def _get(self):
##        u'Indicates whether or not to negate results of the location trigger.'
##        #return pVal
##    def _set(self, pVal):
##        u'Indicates whether or not to negate results of the location trigger.'
##    NegateLocationTrigger = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The list of columns from the feature or the dataset definition.'
##        #return pVal
##    def _set(self, pVal):
##        u'The list of columns from the feature or the dataset definition.'
##    ColumnList = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Type of trigger used to execute an action: Always, Location, Attribute, or Attribute and Location.'
##        #return pVal
##    def _set(self, pVal):
##        u'Type of trigger used to execute an action: Always, Location, Attribute, or Attribute and Location.'
##    TriggerType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Spatial relationship of an intrinsic location trigger.'
##        #return pVal
##    def _set(self, pVal):
##        u'Spatial relationship of an intrinsic location trigger.'
##    LocationTriggerType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'String describing the Spatial Reference used by the Action.'
##        #return pVal
##    def _set(self, pVal):
##        u'String describing the Spatial Reference used by the Action.'
##    SpatialReference = property(_get, _set, doc = _set.__doc__)
##

class RoundedTabStyle(CoClass):
    u'A rounded tab style grid label for index grids.'
    _reg_clsid_ = GUID('{AC81ECF7-9EE4-11D2-AADF-000000000000}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
RoundedTabStyle._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IIndexGridTabStyle, IGridLabel, IGridLabel2, IGridLabelExport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

ILabelCache._methods_ = [
    COMMETHOD([helpstring(u'Initialize label cache.')], HRESULT, 'Init',
              ( ['in'], POINTER(IMap), 'Map' )),
    COMMETHOD([helpstring(u'Empty label cache.')], HRESULT, 'Empty'),
    COMMETHOD([helpstring(u'Add a class to the label cache.')], HRESULT, 'AddClass',
              ( ['in'], c_int, 'classID' ),
              ( ['in'], POINTER(ILabelEngineLayerProperties), 'pLayerProps' )),
    COMMETHOD(['propget', helpstring(u'Number of classes in the cache.')], HRESULT, 'ClassCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD([helpstring(u'Retrieve a class from the label cache.')], HRESULT, 'QueryClass',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(c_int), 'classID' ),
              ( ['out'], POINTER(BSTR), 'ClassName' ),
              ( ['out'], POINTER(POINTER(IFeatureLayer)), 'FeatureLayer' ),
              ( ['out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol)), 'TextSymbol' )),
    COMMETHOD([helpstring(u'Add a label to the label cache.')], HRESULT, 'AddLabel',
              ( ['in'], POINTER(IPlacedObject3), 'placedObject' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'AnchorPoint' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'pEnvelope' )),
    COMMETHOD(['propget', helpstring(u'Number of placed labels stored the cache.')], HRESULT, 'PlacedLabelCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD([helpstring(u'Retrieve a placed label from the label cache.')], HRESULT, 'GetPlacedLabel',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(c_int), 'classID' ),
              ( ['out'], POINTER(BSTR), 'Label' ),
              ( ['out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry)), 'geom' ),
              ( ['out'], POINTER(c_double), 'Angle' ),
              ( ['out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint)), 'AnchorPoint' ),
              ( ['out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'mbr' )),
    COMMETHOD(['propget', helpstring(u'Number of unplaced labels stored the cache.')], HRESULT, 'UnplacedLabelCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD([helpstring(u'Retrieve an unplaced label from the label cache.')], HRESULT, 'GetUnplacedLabel',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(c_int), 'classID' ),
              ( ['out'], POINTER(BSTR), 'Label' ),
              ( ['out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry)), 'geom' ),
              ( ['out'], POINTER(c_double), 'Angle' ),
              ( ['out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint)), 'AnchorPoint' ),
              ( ['out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'mbr' )),
    COMMETHOD([helpstring(u'Settings of the display transformation when cache was created.')], HRESULT, 'PutDisplaySettings',
              ( ['in'], c_double, 'Scale' ),
              ( [], c_double, 'dataframeRotation' )),
    COMMETHOD([helpstring(u'Settings of the display transformation when cache was created.')], HRESULT, 'GetDisplaySettings',
              ( ['out'], POINTER(c_double), 'Scale' ),
              ( [], POINTER(c_double), 'dataframeRotation' )),
]
################################################################
## code template for ILabelCache implementation
##class ILabelCache_Impl(object):
##    def PutDisplaySettings(self, Scale, dataframeRotation):
##        u'Settings of the display transformation when cache was created.'
##        #return 
##
##    @property
##    def PlacedLabelCount(self):
##        u'Number of placed labels stored the cache.'
##        #return Count
##
##    @property
##    def ClassCount(self):
##        u'Number of classes in the cache.'
##        #return Count
##
##    def GetUnplacedLabel(self, Index):
##        u'Retrieve an unplaced label from the label cache.'
##        #return classID, Label, geom, Angle, AnchorPoint, mbr
##
##    def QueryClass(self, Index):
##        u'Retrieve a class from the label cache.'
##        #return classID, ClassName, FeatureLayer, TextSymbol
##
##    def GetDisplaySettings(self, dataframeRotation):
##        u'Settings of the display transformation when cache was created.'
##        #return Scale
##
##    def AddLabel(self, placedObject, AnchorPoint, pEnvelope):
##        u'Add a label to the label cache.'
##        #return 
##
##    def Init(self, Map):
##        u'Initialize label cache.'
##        #return 
##
##    def GetPlacedLabel(self, Index):
##        u'Retrieve a placed label from the label cache.'
##        #return classID, Label, geom, Angle, AnchorPoint, mbr
##
##    @property
##    def UnplacedLabelCount(self):
##        u'Number of unplaced labels stored the cache.'
##        #return Count
##
##    def Empty(self):
##        u'Empty label cache.'
##        #return 
##
##    def AddClass(self, classID, pLayerProps):
##        u'Add a class to the label cache.'
##        #return 
##

class MapServerIdentifySublayer(CoClass):
    u'Provides programmatic access to a map server sublayer with Identify capability.'
    _reg_clsid_ = GUID('{4289879C-9CE3-43A4-9F13-5CE7FBA5CEB7}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IMapServerSublayer2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the available properties of a map server sublayer object.'
    _iid_ = GUID('{C044E0DE-B4FB-471F-B0FD-7DFDC56991F1}')
    _idlflags_ = ['oleautomation']
MapServerIdentifySublayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMapServerSublayer, IMapServerSublayer2, IMapServerGroupLayer, ILayer, ILegendInfo, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeoDataset, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, ILayerGeneralProperties, IIdentify, IIdentify2, IIdentifyDisplay, IHTMLPopupInfo, IHTMLPopupInfo2, IHTMLPopupIdentify, IHTMLPopupIdentify2, ILayerDrawingProperties]

class MapDescription(CoClass):
    u'The Map Description coclass contains settings of a map in the current document.'
    _reg_clsid_ = GUID('{CFCF1C16-DBF2-4EA0-8638-8803EBDC1E9C}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
MapDescription._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMapDescription, IMapDescription2, IMapTimeDescription, IMapTimeDescription2, IMapServerGeoTransformation, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

class SimpleIdentifyObject(CoClass):
    u'Simple Feature Identify Object.'
    _reg_clsid_ = GUID('{1F3E1DB2-D3AE-4C1E-884B-8DB2E78E667C}')
    _idlflags_ = ['restricted']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
SimpleIdentifyObject._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IFeatureIdentifyObj, IIdentifyObj, IRowIdentifyObject, IIdentifyObject]

class SimpleMapServerIdentifyObject(CoClass):
    u'Provides programmatic access to a simple map server layer identify object.'
    _reg_clsid_ = GUID('{58496D31-AFA0-41F6-9A94-1B23E8706F3D}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
SimpleMapServerIdentifyObject._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IIdentifyObj, IIdentifyObject, IMapServerIdentifyObject]

class LayerDescription(CoClass):
    u'The Layer Description coclass contains settings of a layer in a map.'
    _reg_clsid_ = GUID('{5D9E564D-930C-4179-B108-4CEA9B4ACF01}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class ILayerDescription3(ILayerDescription2):
    _case_insensitive_ = True
    u'Provides access to the available properties of a layer description object.'
    _iid_ = GUID('{4124D038-1E88-4743-B402-A1B2534DDAAE}')
    _idlflags_ = ['oleautomation']
class IDynamicLayerDescription(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the available properties of a dynamic layer description object.'
    _iid_ = GUID('{95A91B6B-83AB-444A-B2A8-83C455BC97D4}')
    _idlflags_ = ['oleautomation']
LayerDescription._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILayerDescription, ILayerDescription2, ILayerDescription3, IMapTableDescription, IMapTableTimeDescription, IDynamicMapTableDescription, IDynamicLayerDescription, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

IFeatureIndex2._methods_ = [
    COMMETHOD(['propputref', helpstring(u'FeatureClass to index.')], HRESULT, 'FeatureClass',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClass), 'rhs' )),
    COMMETHOD(['propputref', helpstring(u'Cursor on feature class, to reduce the number of feature indexed (optional).')], HRESULT, 'FeatureCursor',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureCursor), 'rhs' )),
    COMMETHOD([helpstring(u'Creates index.')], HRESULT, 'Index',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'pQueryingGeometryFullExtent' )),
    COMMETHOD(['propget', helpstring(u'The spatial reference in which to output geometry for a given field.')], HRESULT, 'OutputSpatialReference',
              ( ['in'], BSTR, 'FieldName' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference)), 'OutputSpatialReference' )),
    COMMETHOD(['propputref', helpstring(u'The spatial reference in which to output geometry for a given field.')], HRESULT, 'OutputSpatialReference',
              ( ['in'], BSTR, 'FieldName' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'OutputSpatialReference' )),
]
################################################################
## code template for IFeatureIndex2 implementation
##class IFeatureIndex2_Impl(object):
##    def FeatureCursor(self, rhs):
##        u'Cursor on feature class, to reduce the number of feature indexed (optional).'
##        #return 
##
##    def OutputSpatialReference(self, FieldName, OutputSpatialReference):
##        u'The spatial reference in which to output geometry for a given field.'
##        #return 
##
##    def FeatureClass(self, rhs):
##        u'FeatureClass to index.'
##        #return 
##
##    def Index(self, pTrackCancel, pQueryingGeometryFullExtent):
##        u'Creates index.'
##        #return 
##

class SimpleMapGridBorder(CoClass):
    u'A map grid border that uses simple lines.'
    _reg_clsid_ = GUID('{AC81ECFB-9EE4-11D2-AADF-000000000000}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
SimpleMapGridBorder._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMapGridBorder, ISimpleMapGridBorder, IGraphicsComposite, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

class MapServerBasicSublayer(CoClass):
    u'Provides programmatic access to a basic map server sublayer.'
    _reg_clsid_ = GUID('{2FEA41B6-D3EF-41AC-B037-622DF3C1388D}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
MapServerBasicSublayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMapServerSublayer, IMapServerSublayer2, IMapServerGroupLayer, ILayer, ILegendInfo, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeoDataset, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, ILayerGeneralProperties, ILayerDrawingProperties]

ILayerDescription3._methods_ = [
    COMMETHOD(['propputref', helpstring(u'Indicate whether to include and/or modify Geometry.')], HRESULT, 'LayerResultOptions',
              ( ['in'], POINTER(ILayerResultOptions), 'LayerResultOptions' )),
    COMMETHOD(['propget', helpstring(u'Indicate whether to include and/or modify Geometry.')], HRESULT, 'LayerResultOptions',
              ( ['retval', 'out'], POINTER(POINTER(ILayerResultOptions)), 'LayerResultOptions' )),
]
################################################################
## code template for ILayerDescription3 implementation
##class ILayerDescription3_Impl(object):
##    @property
##    def LayerResultOptions(self, LayerResultOptions):
##        u'Indicate whether to include and/or modify Geometry.'
##        #return 
##

IMapDescription._methods_ = [
    COMMETHOD(['propget', helpstring(u'The name of the map (data frame).')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'The name of the map (data frame).')], HRESULT, 'Name',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'The display area of the map (data frame).')], HRESULT, 'MapArea',
              ( ['retval', 'out'], POINTER(POINTER(IMapArea)), 'area' )),
    COMMETHOD(['propput', helpstring(u'The display area of the map (data frame).')], HRESULT, 'MapArea',
              ( ['in'], POINTER(IMapArea), 'area' )),
    COMMETHOD(['propget', helpstring(u'A collection of Layer Description objects, each describing a layer within the map (data frame).')], HRESULT, 'LayerDescriptions',
              ( ['retval', 'out'], POINTER(POINTER(ILayerDescriptions)), 'LayerDescriptions' )),
    COMMETHOD(['propput', helpstring(u'A collection of Layer Description objects, each describing a layer within the map (data frame).')], HRESULT, 'LayerDescriptions',
              ( ['in'], POINTER(ILayerDescriptions), 'LayerDescriptions' )),
    COMMETHOD(['propget', helpstring(u'The angle/rotation of the map (data frame) in degrees, measured anti-clockwise.')], HRESULT, 'MapRotation',
              ( ['retval', 'out'], POINTER(c_double), 'angleDegrees' )),
    COMMETHOD(['propput', helpstring(u'The angle/rotation of the map (data frame) in degrees, measured anti-clockwise.')], HRESULT, 'MapRotation',
              ( ['in'], c_double, 'angleDegrees' )),
    COMMETHOD(['propget', helpstring(u'The spatial reference of the map (data frame).')], HRESULT, 'SpatialReference',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference)), 'SpatialReference' )),
    COMMETHOD(['propputref', helpstring(u'The spatial reference of the map (data frame).')], HRESULT, 'SpatialReference',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'SpatialReference' )),
    COMMETHOD(['propget', helpstring(u'Custom graphics.')], HRESULT, 'CustomGraphics',
              ( ['retval', 'out'], POINTER(POINTER(IGraphicElements)), 'Elements' )),
    COMMETHOD(['propput', helpstring(u'Custom graphics.')], HRESULT, 'CustomGraphics',
              ( ['in'], POINTER(IGraphicElements), 'Elements' )),
    COMMETHOD(['propget', helpstring(u'The color that is transparent (100 %).')], HRESULT, 'TransparentColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'The color that is transparent (100 %).')], HRESULT, 'TransparentColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'The default selection color.')], HRESULT, 'SelectionColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'The default selection color.')], HRESULT, 'SelectionColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
]
################################################################
## code template for IMapDescription implementation
##class IMapDescription_Impl(object):
##    def _get(self):
##        u'Custom graphics.'
##        #return Elements
##    def _set(self, Elements):
##        u'Custom graphics.'
##    CustomGraphics = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The name of the map (data frame).'
##        #return Name
##    def _set(self, Name):
##        u'The name of the map (data frame).'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The color that is transparent (100 %).'
##        #return Color
##    def _set(self, Color):
##        u'The color that is transparent (100 %).'
##    TransparentColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'A collection of Layer Description objects, each describing a layer within the map (data frame).'
##        #return LayerDescriptions
##    def _set(self, LayerDescriptions):
##        u'A collection of Layer Description objects, each describing a layer within the map (data frame).'
##    LayerDescriptions = property(_get, _set, doc = _set.__doc__)
##
##    def SpatialReference(self, SpatialReference):
##        u'The spatial reference of the map (data frame).'
##        #return 
##
##    def _get(self):
##        u'The default selection color.'
##        #return Color
##    def _set(self, Color):
##        u'The default selection color.'
##    SelectionColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The display area of the map (data frame).'
##        #return area
##    def _set(self, area):
##        u'The display area of the map (data frame).'
##    MapArea = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The angle/rotation of the map (data frame) in degrees, measured anti-clockwise.'
##        #return angleDegrees
##    def _set(self, angleDegrees):
##        u'The angle/rotation of the map (data frame) in degrees, measured anti-clockwise.'
##    MapRotation = property(_get, _set, doc = _set.__doc__)
##

class MapServerFindSublayer(CoClass):
    u'Provides programmatic access to a map server sublayer with Find capability.'
    _reg_clsid_ = GUID('{F252D55C-D9F0-4DD7-A760-7470C66BD484}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
MapServerFindSublayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMapServerSublayer, IMapServerSublayer2, IMapServerGroupLayer, ILayer, ILegendInfo, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeoDataset, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, ILayerGeneralProperties, IFind, ILayerDrawingProperties]

class CustomOverlayGrid(CoClass):
    u'A custom map grid.'
    _reg_clsid_ = GUID('{FF501C8A-D74B-11D2-9F43-00C04F6BC78E}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
CustomOverlayGrid._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ICustomOverlayGrid, IMapGrid, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, IGraphicsComposite, IReferenceSystem]

IGFLayerTableDataMapping._methods_ = [
    COMMETHOD(['propget'], HRESULT, 'DatasetName',
              ( ['retval', 'out'], POINTER(BSTR), 'DatasetName' )),
    COMMETHOD(['propget'], HRESULT, 'LayerOrTableName',
              ( ['retval', 'out'], POINTER(BSTR), 'LayerOrTableName' )),
]
################################################################
## code template for IGFLayerTableDataMapping implementation
##class IGFLayerTableDataMapping_Impl(object):
##    @property
##    def LayerOrTableName(self):
##        '-no docstring-'
##        #return LayerOrTableName
##
##    @property
##    def DatasetName(self):
##        '-no docstring-'
##        #return DatasetName
##

IMapLayerInfos._methods_ = [
    COMMETHOD(['propget', helpstring(u'The map layer info count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The map layer info at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IMapLayerInfo)), 'MapLayerInfo' )),
    COMMETHOD([helpstring(u'Removes the map layer info at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all map layer infos.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Adds a map layer info.')], HRESULT, 'Add',
              ( ['in'], POINTER(IMapLayerInfo), 'MapLayerInfo' )),
    COMMETHOD([helpstring(u'Adds a map layer info at the specified position.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(IMapLayerInfo), 'MapLayerInfo' )),
]
################################################################
## code template for IMapLayerInfos implementation
##class IMapLayerInfos_Impl(object):
##    @property
##    def Count(self):
##        u'The map layer info count.'
##        #return Count
##
##    def Insert(self, Index, MapLayerInfo):
##        u'Adds a map layer info at the specified position.'
##        #return 
##
##    def Remove(self, Index):
##        u'Removes the map layer info at the specified position.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'The map layer info at the specified position.'
##        #return MapLayerInfo
##
##    def RemoveAll(self):
##        u'Removes all map layer infos.'
##        #return 
##
##    def Add(self, MapLayerInfo):
##        u'Adds a map layer info.'
##        #return 
##

IOverposter3._methods_ = [
    COMMETHOD(['propget', helpstring(u'The number of classes.')], HRESULT, 'NumClasses',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'Overposter capabilities for the specified layer.')], HRESULT, 'Capabilities',
              ( ['in'], POINTER(ILayer), 'Layer' ),
              ( ['retval', 'out'], POINTER(esriOverposterCaps), 'caps' )),
    COMMETHOD([helpstring(u'Adds a class to the overposter and specifies its properties.')], HRESULT, 'AddClass',
              ( ['in'], POINTER(IOverposterLayerProperties), 'props' ),
              ( ['retval', 'out'], POINTER(c_int), 'ClassIndex' )),
    COMMETHOD([helpstring(u'Inserts a class at a specific index, and specifies its peoperties.')], HRESULT, 'InsertClass',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(IOverposterLayerProperties), 'props' )),
    COMMETHOD([helpstring(u'Removes the class at the specified index from the overposter.')], HRESULT, 'RemoveClass',
              ( ['in'], c_int, 'ClassIndex' )),
    COMMETHOD([helpstring(u'Removes all classes from the overposter.')], HRESULT, 'ResetClasses'),
    COMMETHOD([helpstring(u'Initializes the overposter for drawing into the specified area of the map display.')], HRESULT, 'Initialize',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'Extent' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], POINTER(IOverposterProperties), 'pOverposterProps' )),
    COMMETHOD([helpstring(u'Adds a barrier object that placed objects must avoid.')], HRESULT, 'AddBarriers',
              ( ['in'], esriBasicOverposterWeight, 'Weight' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometryCollection), 'Barriers' )),
    COMMETHOD([helpstring(u'Adds a label object to be placed.')], HRESULT, 'AddLabel',
              ( ['in'], c_int, 'ClassIndex' ),
              ( ['in'], BSTR, 'Label' ),
              ( ['in'], c_double, 'Width' ),
              ( ['in'], c_double, 'Height' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'ControlShape' ),
              ( ['in'], c_int, 'FeatureId' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol), 'Symbol' )),
    COMMETHOD([helpstring(u'Adds a curved label object to be placed.')], HRESULT, 'AddCurvedLabel',
              ( ['in'], c_int, 'ClassIndex' ),
              ( ['in'], BSTR, 'Label' ),
              ( ['in'], VARIANT, 'widths' ),
              ( ['in'], VARIANT, 'ascents' ),
              ( ['in'], VARIANT, 'descents' ),
              ( ['in'], c_double, 'fontHeight' ),
              ( ['in'], c_double, 'fontDescent' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'ControlShape' ),
              ( ['in'], c_int, 'FeatureId' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol), 'Symbol' )),
    COMMETHOD([helpstring(u'Adds a symbol to be placed.')], HRESULT, 'AddSymbol',
              ( ['in'], c_int, 'ClassIndex' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol), 'Symbol' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'Geometry' ),
              ( ['in'], c_int, 'FeatureId' )),
    COMMETHOD([helpstring(u'Places objects using the overposter.')], HRESULT, 'PlaceObjects'),
    COMMETHOD([helpstring(u'The next object that was successfully placed.')], HRESULT, 'NextPlaced',
              ( ['in', 'out'], POINTER(POINTER(IPlacedObject)), 'Object' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'TrackCancel' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStepProgressor), 'StepProgressor' )),
    COMMETHOD([helpstring(u'The next object that was not successfully placed.')], HRESULT, 'NextUnplaced',
              ( ['out'], POINTER(POINTER(IPlacedObject)), 'Object' )),
    COMMETHOD([helpstring(u'The next object that was not used.')], HRESULT, 'NextUnused',
              ( ['out'], POINTER(POINTER(IPlacedObject)), 'Object' )),
    COMMETHOD([helpstring(u'Releases current objects from memory.')], HRESULT, 'ReleaseResources'),
    COMMETHOD(['propget', helpstring(u'The number of unplaced labels. Only valid after calling PlaceObjects.')], HRESULT, 'NumberOfUnplacedLabels',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The number of unplaced labels. Only valid after calling PlaceObjects.')], HRESULT, 'NumberOfPlacedLabels',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD([helpstring(u'Adds a label object to be placed.')], HRESULT, 'AddLabel2',
              ( ['in'], c_int, 'ClassIndex' ),
              ( ['in'], BSTR, 'Label' ),
              ( ['in'], c_double, 'Width' ),
              ( ['in'], c_double, 'Height' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'ControlShape' ),
              ( ['in'], c_int, 'FeatureId' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol), 'Symbol' ),
              ( ['in'], c_double, 'Angle' )),
]
################################################################
## code template for IOverposter3 implementation
##class IOverposter3_Impl(object):
##    @property
##    def NumberOfPlacedLabels(self):
##        u'The number of unplaced labels. Only valid after calling PlaceObjects.'
##        #return Count
##
##    def ResetClasses(self):
##        u'Removes all classes from the overposter.'
##        #return 
##
##    def AddCurvedLabel(self, ClassIndex, Label, widths, ascents, descents, fontHeight, fontDescent, ControlShape, FeatureId, Symbol):
##        u'Adds a curved label object to be placed.'
##        #return 
##
##    def PlaceObjects(self):
##        u'Places objects using the overposter.'
##        #return 
##
##    def NextUnplaced(self):
##        u'The next object that was not successfully placed.'
##        #return Object
##
##    def NextPlaced(self, TrackCancel, StepProgressor):
##        u'The next object that was successfully placed.'
##        #return Object
##
##    def AddBarriers(self, Weight, Barriers):
##        u'Adds a barrier object that placed objects must avoid.'
##        #return 
##
##    def RemoveClass(self, ClassIndex):
##        u'Removes the class at the specified index from the overposter.'
##        #return 
##
##    def InsertClass(self, Index, props):
##        u'Inserts a class at a specific index, and specifies its peoperties.'
##        #return 
##
##    def NextUnused(self):
##        u'The next object that was not used.'
##        #return Object
##
##    def AddLabel2(self, ClassIndex, Label, Width, Height, ControlShape, FeatureId, Symbol, Angle):
##        u'Adds a label object to be placed.'
##        #return 
##
##    def AddLabel(self, ClassIndex, Label, Width, Height, ControlShape, FeatureId, Symbol):
##        u'Adds a label object to be placed.'
##        #return 
##
##    @property
##    def Capabilities(self, Layer):
##        u'Overposter capabilities for the specified layer.'
##        #return caps
##
##    def Initialize(self, Extent, Display, pOverposterProps):
##        u'Initializes the overposter for drawing into the specified area of the map display.'
##        #return 
##
##    @property
##    def NumberOfUnplacedLabels(self):
##        u'The number of unplaced labels. Only valid after calling PlaceObjects.'
##        #return Count
##
##    @property
##    def NumClasses(self):
##        u'The number of classes.'
##        #return Count
##
##    def ReleaseResources(self):
##        u'Releases current objects from memory.'
##        #return 
##
##    def AddSymbol(self, ClassIndex, Symbol, Geometry, FeatureId):
##        u'Adds a symbol to be placed.'
##        #return 
##
##    def AddClass(self, props):
##        u'Adds a class to the overposter and specifies its properties.'
##        #return ClassIndex
##

IGFLayerTableDataMappings._methods_ = [
    COMMETHOD(['propget', helpstring(u'GFLayerTableDataMapping count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'GFLayerTableDataMapping at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IGFLayerTableDataMapping)), 'GFLayerTableDataMapping' )),
    COMMETHOD([helpstring(u'Removes the GFLayerTableDataMapping at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all GFLayerTableDataMapping.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Adds a GFLayerTableDataMapping.')], HRESULT, 'Add',
              ( ['in'], POINTER(IGFLayerTableDataMapping), 'GFLayerTableDataMapping' )),
    COMMETHOD([helpstring(u'Adds a GFLayerTableDataMapping at the specified position.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(IGFLayerTableDataMapping), 'GFLayerTableDataMapping' )),
]
################################################################
## code template for IGFLayerTableDataMappings implementation
##class IGFLayerTableDataMappings_Impl(object):
##    @property
##    def Count(self):
##        u'GFLayerTableDataMapping count.'
##        #return Count
##
##    def Insert(self, Index, GFLayerTableDataMapping):
##        u'Adds a GFLayerTableDataMapping at the specified position.'
##        #return 
##
##    def Remove(self, Index):
##        u'Removes the GFLayerTableDataMapping at the specified position.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'GFLayerTableDataMapping at the specified position.'
##        #return GFLayerTableDataMapping
##
##    def RemoveAll(self):
##        u'Removes all GFLayerTableDataMapping.'
##        #return 
##
##    def Add(self, GFLayerTableDataMapping):
##        u'Adds a GFLayerTableDataMapping.'
##        #return 
##

class MeasuredGrid(CoClass):
    u'A map grid that divides the map into a grid of units in any coordinate system.'
    _reg_clsid_ = GUID('{03762C90-F4D0-11D1-ADE8-080009EC732A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
MeasuredGrid._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMapGrid, IMeasuredGrid, IProjectedGrid, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, IGraphicsComposite, IReferenceSystem]

IRelationshipClassCollectionEdit._methods_ = [
    COMMETHOD([helpstring(u'Adds the specified memory relationship class to a standalone table or layer.')], HRESULT, 'AddRelationshipClass',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRelationshipClass), 'RelationshipClass' )),
    COMMETHOD([helpstring(u'Removes the specified memory relationship class from a standalone table or layer.')], HRESULT, 'RemoveRelationshipClass',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRelationshipClass), 'RelationshipClass' )),
    COMMETHOD([helpstring(u'Removes all memory relationship classes from a standalone table or layer.')], HRESULT, 'RemoveAllRelationshipClasses'),
]
################################################################
## code template for IRelationshipClassCollectionEdit implementation
##class IRelationshipClassCollectionEdit_Impl(object):
##    def RemoveAllRelationshipClasses(self):
##        u'Removes all memory relationship classes from a standalone table or layer.'
##        #return 
##
##    def AddRelationshipClass(self, RelationshipClass):
##        u'Adds the specified memory relationship class to a standalone table or layer.'
##        #return 
##
##    def RemoveRelationshipClass(self, RelationshipClass):
##        u'Removes the specified memory relationship class from a standalone table or layer.'
##        #return 
##

class MapServerQuerySublayer(CoClass):
    u'Provides programmatic access to a map server sublayer with Find and Identify capability.'
    _reg_clsid_ = GUID('{FC69B23B-9959-4DC8-AE26-3BA6F6386498}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
MapServerQuerySublayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMapServerSublayer, IMapServerSublayer2, IMapServerGroupLayer, ILayer, ILegendInfo, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeoDataset, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, ILayerGeneralProperties, IIdentify, IIdentify2, IFind, IIdentifyDisplay, IHTMLPopupInfo, IHTMLPopupInfo2, IHTMLPopupIdentify, IHTMLPopupIdentify2, ILayerDrawingProperties]

class ImageType(CoClass):
    u'The Image Type coclass contains information about the type of image to be generated.'
    _reg_clsid_ = GUID('{56204983-18F4-4C25-969A-6F8EE6C11357}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
ImageType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IImageType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

class MapServerRESTLayer(CoClass):
    u'Provides programmatic access to a a layer based on MapServer using REST access.'
    _reg_clsid_ = GUID('{1DED52F5-8837-40DA-ADC3-596C1C4A29CE}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
MapServerRESTLayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMapServerRESTLayer, ILayer, ICompositeLayer, ICompositeLayer2, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeoDataset, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayAdmin, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayAdmin2, ILayerDrawingProperties, ILayerEffects, IPublishLayer, ILayerGeneralProperties, ILayerSymbologyExtents, IDataLayer, IDataLayer2, ILayerExtensions, ISecureLayer, ISecureLayer2, comtypes.gen._8F0541A3_D5BE_4B3F_A8D9_062D5579E19B_0_10_2.IRasterResamplingControl, IServiceLayerImageFormat, ITimeData, ITimeData2, ITimeDataDisplay, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IConnectionPointContainer]
MapServerRESTLayer._outgoing_interfaces_ = [ILayerEvents]

class ImageDisplay(CoClass):
    u'The Image Display coclass contains the display characteristics of the image to be generated.'
    _reg_clsid_ = GUID('{6FF2FA3D-EBCE-4F3A-941E-955954FBA3CC}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
ImageDisplay._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IImageDisplay, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, IImageDisplay2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]


# values for enumeration 'esriLayerEventHint'
esriLayerEventHintProperties = 0
esriLayerEventHintVisibility = 1
esriLayerEventHintLayerAddedToGroup = 2
esriLayerEventHintLayerRemovedFromGroup = 3
esriLayerEventHintLayerMovedWithinGroup = 4
esriLayerEventHint = c_int # enum
IDataObjectGroup._methods_ = [
    COMMETHOD(['propget', helpstring(u"The data object group's ID.")], HRESULT, 'GroupID',
              ( ['retval', 'out'], POINTER(c_int), 'GroupID' )),
    COMMETHOD(['propget', helpstring(u'Objects in target table that are related to source ID.')], HRESULT, 'DataObjectArray',
              ( ['retval', 'out'], POINTER(POINTER(IDataObjectArray)), 'objectArray' )),
]
################################################################
## code template for IDataObjectGroup implementation
##class IDataObjectGroup_Impl(object):
##    @property
##    def DataObjectArray(self):
##        u'Objects in target table that are related to source ID.'
##        #return objectArray
##
##    @property
##    def GroupID(self):
##        u"The data object group's ID."
##        #return GroupID
##

class LocatorRectangle(CoClass):
    u'A map locator rectangle.'
    _reg_clsid_ = GUID('{83FFCAE2-EDCA-11D0-8683-0000F8751720}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class ILocatorRectangle(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the members that control the map frame locator rectangle.'
    _iid_ = GUID('{41D9C095-A403-11D2-87E8-0000F8751720}')
    _idlflags_ = ['oleautomation']
LocatorRectangle._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILocatorRectangle, ILocatorRectangle2, IFrameProperties, IGraphicsComposite, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

IMapServer4._methods_ = [
    COMMETHOD([helpstring(u'Returns the class breaks or unique values for the specified dynamic layer.')], HRESULT, 'GenerateDataClasses',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], POINTER(IMapTableDescription), 'pTableDescription' ),
              ( ['in'], POINTER(IDataClassificationDef), 'pDataClassificationDef' ),
              ( ['retval', 'out'], POINTER(POINTER(IFeatureRenderer)), 'ppFeatureRenderer' )),
    COMMETHOD([helpstring(u'Returns the IDs of the rows that meet the query filter selection criteria for the specified dynamic layer.')], HRESULT, 'QueryRelatedRecords2',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], POINTER(IMapTableDescription), 'pTableDescription' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFIDSet), 'pFIDs' ),
              ( ['in'], POINTER(IRelateDescription), 'RelateDescription' ),
              ( ['retval', 'out'], POINTER(POINTER(IQueryResult)), 'ppQueryResult' )),
    COMMETHOD([helpstring(u'Returns the Raster content that meet the selection criteria for the specified dynamic layer.')], HRESULT, 'QueryRasterValue2',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], POINTER(IMapTableDescription), 'pTableDescription' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'rowIDs' ),
              ( ['in'], BSTR, 'FieldName' ),
              ( ['in'], POINTER(IImageType), 'rasterValueType' ),
              ( ['retval', 'out'], POINTER(POINTER(IImageResults)), 'ppImageResults' )),
    COMMETHOD([helpstring(u'Returns the attachment info that describe the attachments for the given features/ rows.')], HRESULT, 'QueryAttachmentInfos2',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], POINTER(IMapTableDescription), 'pTableDescription' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'rowIDs' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IAttachmentInfoArray)), 'ppAttachmentInfos' )),
    COMMETHOD([helpstring(u'Returns the attachment data for the given features/ rows.')], HRESULT, 'QueryAttachmentData2',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], POINTER(IMapTableDescription), 'pTableDescription' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'attachmentIDs' ),
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriTransportType, 'TransportType' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IAttachmentDataArray)), 'attachmentDataArray' )),
    COMMETHOD([helpstring(u'Returns the html as text that can be used in popups.')], HRESULT, 'QueryHTMLPopups2',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], POINTER(IMapTableDescription), 'pTableDescription' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'pRowIDs' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray)), 'HTMLTextArray' )),
    COMMETHOD([helpstring(u'Returns the MapTableSubtypeInfos in the current map.')], HRESULT, 'GetMapTableSubtypeInfos2',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], POINTER(ILayerDescriptions), 'pLayers' ),
              ( ['retval', 'out'], POINTER(POINTER(IMapTableSubtypeInfos)), 'ppMapTableSubtypeInfos' )),
    COMMETHOD([helpstring(u'Calculates aggregate statistics for one or more fields on a table or layer.')], HRESULT, 'QueryDataStatistics',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], POINTER(IMapTableDescription), 'pTableDescription' ),
              ( ['in'], POINTER(IStatisticsRequest), 'pRequest' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'pQueryFilter' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRecordSet)), 'ppResult' )),
    COMMETHOD([helpstring(u'Returns a record set of rows that meet the query filter selection criteria for the specified table.')], HRESULT, 'QueryData',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], POINTER(IMapTableDescription), 'pMapTableDescription' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'Filter' ),
              ( ['in'], POINTER(IQueryResultOptions), 'options' ),
              ( ['retval', 'out'], POINTER(POINTER(IQueryResult)), 'QueryResult' )),
    COMMETHOD([helpstring(u'Returns the count of the rows that meet the query filter selection criteria for the specified table.')], HRESULT, 'QueryRowCount',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], POINTER(IMapTableDescription), 'pTableDescription' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'pFilter' ),
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD([helpstring(u'Returns the IDs of the rows that meet the query filter selection criteria for the specified table.')], HRESULT, 'QueryRowIDs',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], POINTER(IMapTableDescription), 'pTableDescription' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'pFilter' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray)), 'FIDs' )),
    COMMETHOD([helpstring(u'Returns the IDs of the rows that meet the query filter selection criteria for the specified table.')], HRESULT, 'QueryRelatedRecords',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], c_int, 'sourceTable' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFIDSet), 'pFIDs' ),
              ( ['in'], POINTER(IRelateDescription), 'RelateDescription' ),
              ( ['retval', 'out'], POINTER(POINTER(IQueryResult)), 'ppQueryResult' )),
    COMMETHOD([helpstring(u'Returns the Raster content that meet the selection criteria for the specified table.')], HRESULT, 'QueryRasterValue',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], c_int, 'sourceTableID' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'rowIDs' ),
              ( ['in'], BSTR, 'FieldName' ),
              ( ['in'], POINTER(IImageType), 'rasterValueType' ),
              ( ['retval', 'out'], POINTER(POINTER(IImageResults)), 'ppImageResults' )),
    COMMETHOD([helpstring(u'Returns the attachment info that describe the attachments for the given features/ rows.')], HRESULT, 'QueryAttachmentInfos',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], c_int, 'TableID' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'rowIDs' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IAttachmentInfoArray)), 'ppAttachmentInfos' )),
    COMMETHOD([helpstring(u'Returns the attachment data for the given features/ rows.')], HRESULT, 'QueryAttachmentData',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], c_int, 'TableID' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'attachmentIDs' ),
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriTransportType, 'TransportType' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IAttachmentDataArray)), 'attachmentDataArray' )),
    COMMETHOD([helpstring(u'Returns the html as text that can be used in popups.')], HRESULT, 'QueryHTMLPopups',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], c_int, 'TableID' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'pRowIDs' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray)), 'HTMLTextArray' )),
    COMMETHOD([helpstring(u'Get Layer Drawing Description')], HRESULT, 'GetDefaultLayerDrawingDescriptions',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'pLayerIDs' ),
              ( ['in'], POINTER(IServerSymbolOutputOptions), 'outputOptions' ),
              ( ['retval', 'out'], POINTER(POINTER(ILayerDrawingDescriptions)), 'ppLayerDrawingDescriptions' )),
    COMMETHOD([helpstring(u'Returns the MapTableSubtypeInfos in the current map.')], HRESULT, 'GetMapTableSubtypeInfos',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'pTableIDs' ),
              ( ['retval', 'out'], POINTER(POINTER(IMapTableSubtypeInfos)), 'ppMapTableSubtypeInfos' )),
    COMMETHOD(['propget', helpstring(u"A set of name-value pairs for properties set for the map document (mxd only). These properties are string values set in the map document's Map Properties dialog and include: Title, Subject, Author, Category, Keywords and Comments.")], HRESULT, 'DocumentInfo',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet)), 'props' )),
    COMMETHOD(['propget', helpstring(u'The number of maps (data frames) in the document.')], HRESULT, 'MapCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'Name of the map (data frame) as indicated by the index. The first beginning with 0.')], HRESULT, 'MapName',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(BSTR), 'MapName' )),
    COMMETHOD(['propget', helpstring(u"Name of the document's active map (data frame).")], HRESULT, 'DefaultMapName',
              ( ['retval', 'out'], POINTER(BSTR), 'MapName' )),
    COMMETHOD([helpstring(u'Returns information about a map (data frame).')], HRESULT, 'GetServerInfo',
              ( ['in'], BSTR, 'MapName' ),
              ( ['retval', 'out'], POINTER(POINTER(IMapServerInfo)), 'serverInfo' )),
    COMMETHOD([helpstring(u"Generates an image of the map, based on the given map description, and writes the image to a specified file on disk. Supported file types are: 'bmp', 'jpg', 'tif', 'png'/'png8', 'png24', 'emf', 'ps', 'pdf', 'ai', 'gif', and 'svg'/'svgz'.")], HRESULT, 'ExportMapImage',
              ( ['in'], POINTER(IMapDescription), 'mapDesc' ),
              ( ['in'], POINTER(IImageDescription), 'imageDesc' ),
              ( ['retval', 'out'], POINTER(POINTER(IMapImage)), 'MapImage' )),
    COMMETHOD([helpstring(u'Returns a collection of Map Server Find Result objects that contain the given search string. If LayerIDs is Nothing/Null or empty, all layers are searched.')], HRESULT, 'Find',
              ( ['in'], POINTER(IMapDescription), 'mapDesc' ),
              ( ['in'], POINTER(IImageDisplay), 'MapImage' ),
              ( ['in'], BSTR, 'searchString' ),
              ( ['in'], VARIANT_BOOL, 'Contains' ),
              ( ['in'], BSTR, 'searchFields' ),
              ( ['in'], esriFindOption, 'option' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'layerIds' ),
              ( ['retval', 'out'], POINTER(POINTER(IMapServerFindResults)), 'findResults' )),
    COMMETHOD([helpstring(u'Returns a collection of Map Server Identify Result objects at the given location. If LayerIDs is Nothing/Null or empty, all layers are searched.')], HRESULT, 'Identify',
              ( ['in'], POINTER(IMapDescription), 'mapDesc' ),
              ( ['in'], POINTER(IImageDisplay), 'MapImage' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'searchShape' ),
              ( ['in'], c_int, 'Tolerance' ),
              ( ['in'], esriIdentifyOption, 'option' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'layerIds' ),
              ( ['retval', 'out'], POINTER(POINTER(IMapServerIdentifyResults)), 'identifyResult' )),
    COMMETHOD([helpstring(u'Returns the count of the features that meet the query filter selection criteria for the specified layer.')], HRESULT, 'QueryFeatureCount',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], c_int, 'LayerID' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'Filter' ),
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD([helpstring(u'Returns the IDs of the features that meet the query filter selection criteria for the specified layer.')], HRESULT, 'QueryFeatureIDs',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], c_int, 'LayerID' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'Filter' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFIDSet)), 'FIDs' )),
    COMMETHOD([helpstring(u'Returns a record set of features that meet the query filter selection criteria for the specified layer.')], HRESULT, 'QueryFeatureData',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], c_int, 'LayerID' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'Filter' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRecordSet)), 'recordSet' )),
    COMMETHOD([helpstring(u'Returns a collection of Map Server Hyperlink objects for the specified layers. Only hyperlinks of visible layers are returned. If LayerIDs is Nothing/Null or empty, all layers are searched.')], HRESULT, 'QueryHyperlinks',
              ( ['in'], POINTER(IMapDescription), 'mapDesc' ),
              ( ['in'], POINTER(IImageDisplay), 'MapImage' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'layerIds' ),
              ( ['retval', 'out'], POINTER(POINTER(IMapServerHyperlinks)), 'hyperlinks' )),
    COMMETHOD([helpstring(u'Computes the scale of the specified map, at the given map extent, for an image with the given size.')], HRESULT, 'ComputeScale',
              ( ['in'], POINTER(IMapDescription), 'mapDesc' ),
              ( ['in'], POINTER(IImageDisplay), 'mapDisplay' ),
              ( ['retval', 'out'], POINTER(c_double), 'Scale' )),
    COMMETHOD([helpstring(u'Computes the distance between two points on the specified map. The result is in the map units of the specified map.')], HRESULT, 'ComputeDistance',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'fromPoint' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'toPoint' ),
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits, 'Units' ),
              ( ['retval', 'out'], POINTER(c_double), 'Distance' )),
    COMMETHOD([helpstring(u'Converts a screen location to a map coordinate.')], HRESULT, 'ToMapPoints',
              ( ['in'], POINTER(IMapDescription), 'MapDescription' ),
              ( ['in'], POINTER(IImageDisplay), 'mapDisplay' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'screenXValues' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'screenYValues' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPointCollection)), 'mapPoints' )),
    COMMETHOD([helpstring(u'Converts a map coordinate to a screen location.')], HRESULT, 'FromMapPoints',
              ( ['in'], POINTER(IMapDescription), 'MapDescription' ),
              ( ['in'], POINTER(IImageDisplay), 'mapDisplay' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPointCollection), 'mapPoints' ),
              ( ['in', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray)), 'screenXValues' ),
              ( ['in', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray)), 'screenYValues' )),
    COMMETHOD([helpstring(u'Returns a collection of Map Server Legend Info objects for the specified layers. If layerIDs is Nothing/Null or empty, legend information for all layers is returned.')], HRESULT, 'GetLegendInfo',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'layerIds' ),
              ( ['in'], POINTER(IMapServerLegendPatch), 'patch' ),
              ( ['in'], POINTER(IImageType), 'imgType' ),
              ( ['retval', 'out'], POINTER(POINTER(IMapServerLegendInfos)), 'legendInfos' )),
    COMMETHOD([helpstring(u'Returns the SQL syntax information for the specified layer.')], HRESULT, 'GetSQLSyntaxInfo',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], c_int, 'LayerID' ),
              ( ['retval', 'out'], POINTER(POINTER(ISQLSyntaxInfo)), 'sqlInfo' )),
    COMMETHOD([helpstring(u'The supported image return types for the map server.  A value of esriImageReturnMimeData means that only MIME data is supported.  Otherwise, either MIME data or URLs are supported.')], HRESULT, 'GetSupportedImageReturnTypes',
              ( ['retval', 'out'], POINTER(esriImageReturnType), 'retType' )),
    COMMETHOD([helpstring(u'Exports a scale bar to an image file.  The client can create the scaleBar object and set its desired properties appropriately.  If scaleBar is Nothing/Null, a default scale bar will be generated.')], HRESULT, 'ExportScaleBar',
              ( ['in'], POINTER(IScaleBar), 'Scalebar' ),
              ( ['in'], POINTER(IMapDescription), 'mapDesc' ),
              ( ['in'], POINTER(IImageDisplay), 'pMapDisplay' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'BackgroundColor' ),
              ( ['in'], POINTER(IImageDescription), 'imageDesc' ),
              ( ['retval', 'out'], POINTER(POINTER(IImageResult)), 'ImageResult' )),
    COMMETHOD([helpstring(u'Returns the count of the features that meet the query filter selection criteria for the specified layer.')], HRESULT, 'QueryFeatureCount2',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], POINTER(ILayerDescription), 'pLayerDescription' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'Filter' ),
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD([helpstring(u'Returns the IDs of the features that meet the query filter selection criteria for the specified layer.')], HRESULT, 'QueryFeatureIDs2',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], POINTER(ILayerDescription), 'pLayerDesciscription' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'Filter' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFIDSet)), 'FIDs' )),
    COMMETHOD([helpstring(u'Returns a record set of features that meet the query filter selection criteria for the specified layer.')], HRESULT, 'QueryFeatureData2',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], POINTER(ILayerDescription), 'pLayerDesciscription' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'Filter' ),
              ( ['in'], POINTER(IQueryResultOptions), 'options' ),
              ( ['retval', 'out'], POINTER(POINTER(IQueryResult)), 'QueryResult' )),
    COMMETHOD(['propget', helpstring(u'A set of name-value pairs for properties set for the MapServer Service Configuration Restrictions.')], HRESULT, 'ServiceConfigurationInfo',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet)), 'PropertySet' )),
    COMMETHOD([helpstring(u'Returns a collection of Map Server Legend Info objects for the specified layers. If layerIDs is Nothing/Null or empty, legend information for all layers is returned.')], HRESULT, 'GetLegendInfo2',
              ( ['in'], POINTER(IMapDescription), 'pMapDescription' ),
              ( ['in'], POINTER(IImageDisplay), 'pImageDisplay' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'layerIds' ),
              ( ['in'], POINTER(IMapServerLegendPatch), 'patch' ),
              ( ['in'], POINTER(IImageType), 'imgType' ),
              ( ['retval', 'out'], POINTER(POINTER(IMapServerLegendInfos)), 'legendInfos' )),
]
################################################################
## code template for IMapServer4 implementation
##class IMapServer4_Impl(object):
##    def GetLegendInfo(self, MapName, layerIds, patch, imgType):
##        u'Returns a collection of Map Server Legend Info objects for the specified layers. If layerIDs is Nothing/Null or empty, legend information for all layers is returned.'
##        #return legendInfos
##
##    def GetServerInfo(self, MapName):
##        u'Returns information about a map (data frame).'
##        #return serverInfo
##
##    def QueryRowIDs(self, MapName, pTableDescription, pFilter):
##        u'Returns the IDs of the rows that meet the query filter selection criteria for the specified table.'
##        #return FIDs
##
##    def QueryDataStatistics(self, MapName, pTableDescription, pRequest, pQueryFilter):
##        u'Calculates aggregate statistics for one or more fields on a table or layer.'
##        #return ppResult
##
##    def ComputeDistance(self, MapName, fromPoint, toPoint, Units):
##        u'Computes the distance between two points on the specified map. The result is in the map units of the specified map.'
##        #return Distance
##
##    def QueryFeatureCount(self, MapName, LayerID, Filter):
##        u'Returns the count of the features that meet the query filter selection criteria for the specified layer.'
##        #return Count
##
##    def QueryFeatureIDs(self, MapName, LayerID, Filter):
##        u'Returns the IDs of the features that meet the query filter selection criteria for the specified layer.'
##        #return FIDs
##
##    def FromMapPoints(self, MapDescription, mapDisplay, mapPoints):
##        u'Converts a map coordinate to a screen location.'
##        #return screenXValues, screenYValues
##
##    def QueryAttachmentData2(self, MapName, pTableDescription, attachmentIDs, TransportType):
##        u'Returns the attachment data for the given features/ rows.'
##        #return attachmentDataArray
##
##    def QueryData(self, MapName, pMapTableDescription, Filter, options):
##        u'Returns a record set of rows that meet the query filter selection criteria for the specified table.'
##        #return QueryResult
##
##    def GetLegendInfo2(self, pMapDescription, pImageDisplay, layerIds, patch, imgType):
##        u'Returns a collection of Map Server Legend Info objects for the specified layers. If layerIDs is Nothing/Null or empty, legend information for all layers is returned.'
##        #return legendInfos
##
##    def GenerateDataClasses(self, MapName, pTableDescription, pDataClassificationDef):
##        u'Returns the class breaks or unique values for the specified dynamic layer.'
##        #return ppFeatureRenderer
##
##    def ExportScaleBar(self, Scalebar, mapDesc, pMapDisplay, BackgroundColor, imageDesc):
##        u'Exports a scale bar to an image file.  The client can create the scaleBar object and set its desired properties appropriately.  If scaleBar is Nothing/Null, a default scale bar will be generated.'
##        #return ImageResult
##
##    @property
##    def DefaultMapName(self):
##        u"Name of the document's active map (data frame)."
##        #return MapName
##
##    def QueryHTMLPopups(self, MapName, TableID, pRowIDs):
##        u'Returns the html as text that can be used in popups.'
##        #return HTMLTextArray
##
##    @property
##    def MapCount(self):
##        u'The number of maps (data frames) in the document.'
##        #return Count
##
##    def QueryFeatureData(self, MapName, LayerID, Filter):
##        u'Returns a record set of features that meet the query filter selection criteria for the specified layer.'
##        #return recordSet
##
##    @property
##    def DocumentInfo(self):
##        u"A set of name-value pairs for properties set for the map document (mxd only). These properties are string values set in the map document's Map Properties dialog and include: Title, Subject, Author, Category, Keywords and Comments."
##        #return props
##
##    def QueryRelatedRecords2(self, MapName, pTableDescription, pFIDs, RelateDescription):
##        u'Returns the IDs of the rows that meet the query filter selection criteria for the specified dynamic layer.'
##        #return ppQueryResult
##
##    @property
##    def ServiceConfigurationInfo(self):
##        u'A set of name-value pairs for properties set for the MapServer Service Configuration Restrictions.'
##        #return PropertySet
##
##    def ExportMapImage(self, mapDesc, imageDesc):
##        u"Generates an image of the map, based on the given map description, and writes the image to a specified file on disk. Supported file types are: 'bmp', 'jpg', 'tif', 'png'/'png8', 'png24', 'emf', 'ps', 'pdf', 'ai', 'gif', and 'svg'/'svgz'."
##        #return MapImage
##
##    def GetMapTableSubtypeInfos2(self, MapName, pLayers):
##        u'Returns the MapTableSubtypeInfos in the current map.'
##        #return ppMapTableSubtypeInfos
##
##    def QueryHTMLPopups2(self, MapName, pTableDescription, pRowIDs):
##        u'Returns the html as text that can be used in popups.'
##        #return HTMLTextArray
##
##    def QueryAttachmentInfos2(self, MapName, pTableDescription, rowIDs):
##        u'Returns the attachment info that describe the attachments for the given features/ rows.'
##        #return ppAttachmentInfos
##
##    def GetDefaultLayerDrawingDescriptions(self, MapName, pLayerIDs, outputOptions):
##        u'Get Layer Drawing Description'
##        #return ppLayerDrawingDescriptions
##
##    @property
##    def MapName(self, Index):
##        u'Name of the map (data frame) as indicated by the index. The first beginning with 0.'
##        #return MapName
##
##    def Identify(self, mapDesc, MapImage, searchShape, Tolerance, option, layerIds):
##        u'Returns a collection of Map Server Identify Result objects at the given location. If LayerIDs is Nothing/Null or empty, all layers are searched.'
##        #return identifyResult
##
##    def GetSupportedImageReturnTypes(self):
##        u'The supported image return types for the map server.  A value of esriImageReturnMimeData means that only MIME data is supported.  Otherwise, either MIME data or URLs are supported.'
##        #return retType
##
##    def QueryRasterValue(self, MapName, sourceTableID, rowIDs, FieldName, rasterValueType):
##        u'Returns the Raster content that meet the selection criteria for the specified table.'
##        #return ppImageResults
##
##    def QueryRelatedRecords(self, MapName, sourceTable, pFIDs, RelateDescription):
##        u'Returns the IDs of the rows that meet the query filter selection criteria for the specified table.'
##        #return ppQueryResult
##
##    def QueryFeatureData2(self, MapName, pLayerDesciscription, Filter, options):
##        u'Returns a record set of features that meet the query filter selection criteria for the specified layer.'
##        #return QueryResult
##
##    def QueryRowCount(self, MapName, pTableDescription, pFilter):
##        u'Returns the count of the rows that meet the query filter selection criteria for the specified table.'
##        #return pCount
##
##    def QueryFeatureCount2(self, MapName, pLayerDescription, Filter):
##        u'Returns the count of the features that meet the query filter selection criteria for the specified layer.'
##        #return Count
##
##    def QueryHyperlinks(self, mapDesc, MapImage, layerIds):
##        u'Returns a collection of Map Server Hyperlink objects for the specified layers. Only hyperlinks of visible layers are returned. If LayerIDs is Nothing/Null or empty, all layers are searched.'
##        #return hyperlinks
##
##    def QueryAttachmentInfos(self, MapName, TableID, rowIDs):
##        u'Returns the attachment info that describe the attachments for the given features/ rows.'
##        #return ppAttachmentInfos
##
##    def GetSQLSyntaxInfo(self, MapName, LayerID):
##        u'Returns the SQL syntax information for the specified layer.'
##        #return sqlInfo
##
##    def QueryAttachmentData(self, MapName, TableID, attachmentIDs, TransportType):
##        u'Returns the attachment data for the given features/ rows.'
##        #return attachmentDataArray
##
##    def ComputeScale(self, mapDesc, mapDisplay):
##        u'Computes the scale of the specified map, at the given map extent, for an image with the given size.'
##        #return Scale
##
##    def GetMapTableSubtypeInfos(self, MapName, pTableIDs):
##        u'Returns the MapTableSubtypeInfos in the current map.'
##        #return ppMapTableSubtypeInfos
##
##    def QueryRasterValue2(self, MapName, pTableDescription, rowIDs, FieldName, rasterValueType):
##        u'Returns the Raster content that meet the selection criteria for the specified dynamic layer.'
##        #return ppImageResults
##
##    def QueryFeatureIDs2(self, MapName, pLayerDesciscription, Filter):
##        u'Returns the IDs of the features that meet the query filter selection criteria for the specified layer.'
##        #return FIDs
##
##    def ToMapPoints(self, MapDescription, mapDisplay, screenXValues, screenYValues):
##        u'Converts a screen location to a map coordinate.'
##        #return mapPoints
##
##    def Find(self, mapDesc, MapImage, searchString, Contains, searchFields, option, layerIds):
##        u'Returns a collection of Map Server Find Result objects that contain the given search string. If LayerIDs is Nothing/Null or empty, all layers are searched.'
##        #return findResults
##

class ILayerAction(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to methods and properties that identify the action as a layer action and allow those properties to be managed.'
    _iid_ = GUID('{CC018A6C-24FB-11D4-B34C-00104BA2ABCC}')
    _idlflags_ = ['oleautomation']
ILayerAction._methods_ = [
    COMMETHOD(['propget', helpstring(u'Tracking layer upon which the action is performed.')], HRESULT, 'Layer',
              ( ['retval', 'out'], POINTER(POINTER(ILayer)), 'Layer' )),
    COMMETHOD(['propputref', helpstring(u'Tracking layer upon which the action is performed.')], HRESULT, 'Layer',
              ( ['in'], POINTER(ILayer), 'Layer' )),
    COMMETHOD(['propget', helpstring(u'Number of the column containing EventID information.')], HRESULT, 'EventIdColumnNumber',
              ( ['retval', 'out'], POINTER(c_int), 'columnIndex' )),
    COMMETHOD(['propput', helpstring(u'Number of the column containing EventID information.')], HRESULT, 'EventIdColumnNumber',
              ( ['in'], c_int, 'columnIndex' )),
]
################################################################
## code template for ILayerAction implementation
##class ILayerAction_Impl(object):
##    def _get(self):
##        u'Number of the column containing EventID information.'
##        #return columnIndex
##    def _set(self, columnIndex):
##        u'Number of the column containing EventID information.'
##    EventIdColumnNumber = property(_get, _set, doc = _set.__doc__)
##
##    def Layer(self, Layer):
##        u'Tracking layer upon which the action is performed.'
##        #return 
##

IDataObjectGroupArray._methods_ = [
    COMMETHOD(['propget', helpstring(u'DataObjectGroup count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'DataObjectGroup at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IDataObjectGroup)), 'DataObjectGroup' )),
    COMMETHOD([helpstring(u'Removes the DataObjectGroup at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all DataObjectGroup elements.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Adds a DataObjectGroup.')], HRESULT, 'Add',
              ( ['in'], POINTER(IDataObjectGroup), 'DataObjectGroup' )),
    COMMETHOD([helpstring(u'Adds a DataObjectGroup at the specified position.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(IDataObjectGroup), 'DataObjectGroup' )),
]
################################################################
## code template for IDataObjectGroupArray implementation
##class IDataObjectGroupArray_Impl(object):
##    @property
##    def Count(self):
##        u'DataObjectGroup count.'
##        #return Count
##
##    def Insert(self, Index, DataObjectGroup):
##        u'Adds a DataObjectGroup at the specified position.'
##        #return 
##
##    def Remove(self, Index):
##        u'Removes the DataObjectGroup at the specified position.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'DataObjectGroup at the specified position.'
##        #return DataObjectGroup
##
##    def RemoveAll(self):
##        u'Removes all DataObjectGroup elements.'
##        #return 
##
##    def Add(self, DataObjectGroup):
##        u'Adds a DataObjectGroup.'
##        #return 
##

class ImageDescription(CoClass):
    u'The Image Description coclass contains settings of the image to be generated.'
    _reg_clsid_ = GUID('{8C9522A6-302F-4F1A-9316-CD15F971573C}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
ImageDescription._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IImageDescription, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

class WMTSLayerFactory(CoClass):
    u'Provides programmatic access to a WMTS server layer factory.'
    _reg_clsid_ = GUID('{9CD8C03C-9CA5-4D41-988C-BE6697B0DB0F}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
WMTSLayerFactory._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILayerFactory, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]

class MgrsGrid(CoClass):
    u'The Military Grid Reference System (MGRS) object.'
    _reg_clsid_ = GUID('{35F4D526-895D-4F85-B97F-1A3B84C629AD}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
MgrsGrid._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMapGrid, IMgrsGrid, IGridLadderLabels, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, IGraphicsComposite, IReferenceSystem]

IWMSMapLayer2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Dimensions for the WMS Map Layer image.')], HRESULT, 'DimensionValues',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet)), 'DimensionValues' )),
    COMMETHOD(['propputref', helpstring(u'Dimensions for the WMS Map Layer image.')], HRESULT, 'DimensionValues',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet), 'DimensionValues' )),
    COMMETHOD([helpstring(u'Clears the cache of images downloaded from the WMS server for drawing.')], HRESULT, 'ClearDrawCache'),
    COMMETHOD(['propget', helpstring(u'Background color for the WMS Map Layer image.')], HRESULT, 'BackgroundColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'ppColor' )),
    COMMETHOD(['propput', helpstring(u'Background color for the WMS Map Layer image.')], HRESULT, 'BackgroundColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'ppColor' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to make the background of the WMS Map Layer image transparent.')], HRESULT, 'TransparentBackground',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'transparent' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to make the background of the WMS Map Layer image transparent.')], HRESULT, 'TransparentBackground',
              ( ['in'], VARIANT_BOOL, 'transparent' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether transparency is suppported by the server.')], HRESULT, 'ServerSupportsTransparency',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'transparent' )),
    COMMETHOD(['propputref', helpstring(u'Associated WMSServiceDescription.')], HRESULT, 'WMSServiceDescription',
              ( ['in'], POINTER(comtypes.gen._746F6817_89BB_4490_9829_83CA25FD505A_0_10_2.IWMSServiceDescription), 'rhs' )),
]
################################################################
## code template for IWMSMapLayer2 implementation
##class IWMSMapLayer2_Impl(object):
##    def _get(self):
##        u'Indicates whether to make the background of the WMS Map Layer image transparent.'
##        #return transparent
##    def _set(self, transparent):
##        u'Indicates whether to make the background of the WMS Map Layer image transparent.'
##    TransparentBackground = property(_get, _set, doc = _set.__doc__)
##
##    def WMSServiceDescription(self, rhs):
##        u'Associated WMSServiceDescription.'
##        #return 
##
##    def _get(self):
##        u'Background color for the WMS Map Layer image.'
##        #return ppColor
##    def _set(self, ppColor):
##        u'Background color for the WMS Map Layer image.'
##    BackgroundColor = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def ServerSupportsTransparency(self):
##        u'Indicates whether transparency is suppported by the server.'
##        #return transparent
##
##    def DimensionValues(self, DimensionValues):
##        u'Dimensions for the WMS Map Layer image.'
##        #return 
##
##    def ClearDrawCache(self):
##        u'Clears the cache of images downloaded from the WMS server for drawing.'
##        #return 
##

IGpsConnection._methods_ = [
    COMMETHOD(['propget', helpstring(u'The communications port connected to the GPS receiver. Starts with 1 = COM1, and increases (i.e., 2 = COM2, 3 = COM3, etc.). Defaults to 1.')], HRESULT, 'CommPort',
              ( ['retval', 'out'], POINTER(c_short), 'pNumber' )),
    COMMETHOD(['propput', helpstring(u'The communications port connected to the GPS receiver. Starts with 1 = COM1, and increases (i.e., 2 = COM2, 3 = COM3, etc.). Defaults to 1.')], HRESULT, 'CommPort',
              ( ['in'], c_short, 'pNumber' )),
    COMMETHOD(['propget', helpstring(u'The baud rate for the communications port connected to the GPS receiver. Defaults to 9600.')], HRESULT, 'BaudRate',
              ( ['retval', 'out'], POINTER(c_short), 'pRate' )),
    COMMETHOD(['propput', helpstring(u'The baud rate for the communications port connected to the GPS receiver. Defaults to 9600.')], HRESULT, 'BaudRate',
              ( ['in'], c_short, 'pRate' )),
    COMMETHOD(['propget', helpstring(u'The data bits setting for the communications port connected to the GPS receiver. Data bits must be 5, 6, 7, or 8. Defaults to 8.')], HRESULT, 'DataBits',
              ( ['retval', 'out'], POINTER(c_short), 'pDataBits' )),
    COMMETHOD(['propput', helpstring(u'The data bits setting for the communications port connected to the GPS receiver. Data bits must be 5, 6, 7, or 8. Defaults to 8.')], HRESULT, 'DataBits',
              ( ['in'], c_short, 'pDataBits' )),
    COMMETHOD(['propget', helpstring(u'The stop bits setting for the communications port connected to the GPS receiver. Defaults to esriGpsStopBits1.')], HRESULT, 'StopBits',
              ( ['retval', 'out'], POINTER(esriGpsStopBits), 'pStopBits' )),
    COMMETHOD(['propput', helpstring(u'The stop bits setting for the communications port connected to the GPS receiver. Defaults to esriGpsStopBits1.')], HRESULT, 'StopBits',
              ( ['in'], esriGpsStopBits, 'pStopBits' )),
    COMMETHOD(['propget', helpstring(u'The parity setting for the communications port connected to the GPS receiver. Defaults to esriGpsParityNone.')], HRESULT, 'Parity',
              ( ['retval', 'out'], POINTER(esriGpsParity), 'pParity' )),
    COMMETHOD(['propput', helpstring(u'The parity setting for the communications port connected to the GPS receiver. Defaults to esriGpsParityNone.')], HRESULT, 'Parity',
              ( ['in'], esriGpsParity, 'pParity' )),
]
################################################################
## code template for IGpsConnection implementation
##class IGpsConnection_Impl(object):
##    def _get(self):
##        u'The data bits setting for the communications port connected to the GPS receiver. Data bits must be 5, 6, 7, or 8. Defaults to 8.'
##        #return pDataBits
##    def _set(self, pDataBits):
##        u'The data bits setting for the communications port connected to the GPS receiver. Data bits must be 5, 6, 7, or 8. Defaults to 8.'
##    DataBits = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The communications port connected to the GPS receiver. Starts with 1 = COM1, and increases (i.e., 2 = COM2, 3 = COM3, etc.). Defaults to 1.'
##        #return pNumber
##    def _set(self, pNumber):
##        u'The communications port connected to the GPS receiver. Starts with 1 = COM1, and increases (i.e., 2 = COM2, 3 = COM3, etc.). Defaults to 1.'
##    CommPort = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The baud rate for the communications port connected to the GPS receiver. Defaults to 9600.'
##        #return pRate
##    def _set(self, pRate):
##        u'The baud rate for the communications port connected to the GPS receiver. Defaults to 9600.'
##    BaudRate = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The stop bits setting for the communications port connected to the GPS receiver. Defaults to esriGpsStopBits1.'
##        #return pStopBits
##    def _set(self, pStopBits):
##        u'The stop bits setting for the communications port connected to the GPS receiver. Defaults to esriGpsStopBits1.'
##    StopBits = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The parity setting for the communications port connected to the GPS receiver. Defaults to esriGpsParityNone.'
##        #return pParity
##    def _set(self, pParity):
##        u'The parity setting for the communications port connected to the GPS receiver. Defaults to esriGpsParityNone.'
##    Parity = property(_get, _set, doc = _set.__doc__)
##

IBorder._methods_ = [
    COMMETHOD(['propget', helpstring(u'Name of the frame border.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'Name of the frame border.')], HRESULT, 'Name',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'Gap between the frame border and the subject in points.')], HRESULT, 'Gap',
              ( ['retval', 'out'], POINTER(c_double), 'Gap' )),
    COMMETHOD(['propput', helpstring(u'Gap between the frame border and the subject in points.')], HRESULT, 'Gap',
              ( ['in'], c_double, 'Gap' )),
    COMMETHOD([helpstring(u'Bounding rectangle of the geometry including the area covered by the border.')], HRESULT, 'QueryBounds',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'Geometry' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'Bounds' )),
    COMMETHOD([helpstring(u'Geometry used to draw the frame border.')], HRESULT, 'GetGeometry',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'Shape' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry)), 'Geometry' )),
    COMMETHOD([helpstring(u'Draws the frame border into the given display object.')], HRESULT, 'Draw',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'Geometry' )),
]
################################################################
## code template for IBorder implementation
##class IBorder_Impl(object):
##    def Draw(self, Display, Geometry):
##        u'Draws the frame border into the given display object.'
##        #return 
##
##    def GetGeometry(self, Display, Shape):
##        u'Geometry used to draw the frame border.'
##        #return Geometry
##
##    def QueryBounds(self, Display, Geometry, Bounds):
##        u'Bounding rectangle of the geometry including the area covered by the border.'
##        #return 
##
##    def _get(self):
##        u'Name of the frame border.'
##        #return Name
##    def _set(self, Name):
##        u'Name of the frame border.'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Gap between the frame border and the subject in points.'
##        #return Gap
##    def _set(self, Gap):
##        u'Gap between the frame border and the subject in points.'
##    Gap = property(_get, _set, doc = _set.__doc__)
##

ISymbolBorder._methods_ = [
    COMMETHOD(['propget', helpstring(u'Symbol used to draw the border.')], HRESULT, 'LineSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ILineSymbol)), 'Symbol' )),
    COMMETHOD(['propput', helpstring(u'Symbol used to draw the border.')], HRESULT, 'LineSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ILineSymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'Amount of corner rounding.  0 = fully square.  100 = fully round.')], HRESULT, 'CornerRounding',
              ( ['retval', 'out'], POINTER(c_short), 'rounding' )),
    COMMETHOD(['propput', helpstring(u'Amount of corner rounding.  0 = fully square.  100 = fully round.')], HRESULT, 'CornerRounding',
              ( ['in'], c_short, 'rounding' )),
]
################################################################
## code template for ISymbolBorder implementation
##class ISymbolBorder_Impl(object):
##    def _get(self):
##        u'Amount of corner rounding.  0 = fully square.  100 = fully round.'
##        #return rounding
##    def _set(self, rounding):
##        u'Amount of corner rounding.  0 = fully square.  100 = fully round.'
##    CornerRounding = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Symbol used to draw the border.'
##        #return Symbol
##    def _set(self, Symbol):
##        u'Symbol used to draw the border.'
##    LineSymbol = property(_get, _set, doc = _set.__doc__)
##

class ImageResult(CoClass):
    u'The Image Result coclass contains information about the generated image.'
    _reg_clsid_ = GUID('{2B43E5EF-BFE4-490C-8A1E-D28FBD645BCD}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
ImageResult._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IImageResult, IImageResult2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

ILayerDescriptions._methods_ = [
    COMMETHOD(['propget', helpstring(u'The layer description count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The layer description at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(ILayerDescription)), 'LayerDescription' )),
    COMMETHOD([helpstring(u'Removes the layer description at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all layer descriptions.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Adds a layer description.')], HRESULT, 'Add',
              ( ['in'], POINTER(ILayerDescription), 'LayerDescription' )),
    COMMETHOD([helpstring(u'Adds a layer description at the specified position.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(ILayerDescription), 'LayerDescription' )),
]
################################################################
## code template for ILayerDescriptions implementation
##class ILayerDescriptions_Impl(object):
##    @property
##    def Count(self):
##        u'The layer description count.'
##        #return Count
##
##    def Insert(self, Index, LayerDescription):
##        u'Adds a layer description at the specified position.'
##        #return 
##
##    def Remove(self, Index):
##        u'Removes the layer description at the specified position.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'The layer description at the specified position.'
##        #return LayerDescription
##
##    def RemoveAll(self):
##        u'Removes all layer descriptions.'
##        #return 
##
##    def Add(self, LayerDescription):
##        u'Adds a layer description.'
##        #return 
##

IBarrierProperties2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Weight of the barriers for this layer.')], HRESULT, 'Weight',
              ( ['retval', 'out'], POINTER(c_int), 'Weight' )),
    COMMETHOD(['propput', helpstring(u'Weight of the barriers for this layer.')], HRESULT, 'Weight',
              ( ['in'], c_int, 'Weight' )),
    COMMETHOD([helpstring(u'List of barriers within the specified extent, or all barriers if no extent given.')], HRESULT, 'QueryBarriers',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometryCollection), 'pBarriers' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'Extent' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'TrackCancel' )),
]
################################################################
## code template for IBarrierProperties2 implementation
##class IBarrierProperties2_Impl(object):
##    def QueryBarriers(self, Display, pBarriers, Extent, TrackCancel):
##        u'List of barriers within the specified extent, or all barriers if no extent given.'
##        #return 
##
##    def _get(self):
##        u'Weight of the barriers for this layer.'
##        #return Weight
##    def _set(self, Weight):
##        u'Weight of the barriers for this layer.'
##    Weight = property(_get, _set, doc = _set.__doc__)
##

ISecureLayer2._methods_ = [
    COMMETHOD([helpstring(u'Removes the passwords from the layer used to access data, and forces a reconnection to the data.')], HRESULT, 'ClearPassword',
              ( [], VARIANT_BOOL, 'bForceReconnect' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer is password protected.')], HRESULT, 'HasAuthentication',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'HasAuthentication' )),
]
################################################################
## code template for ISecureLayer2 implementation
##class ISecureLayer2_Impl(object):
##    def ClearPassword(self, bForceReconnect):
##        u'Removes the passwords from the layer used to access data, and forces a reconnection to the data.'
##        #return 
##
##    @property
##    def HasAuthentication(self):
##        u'Indicates if the layer is password protected.'
##        #return HasAuthentication
##

class CornerGridLabel(CoClass):
    u'A grid label with special corner display properties.'
    _reg_clsid_ = GUID('{FD52B61A-71CD-4108-A916-F818969404EA}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
CornerGridLabel._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGridLabel, IGridLabel2, ICornerGridLabel, IPrincipalDigitsGridLabel, IGridLabelExport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

class IActionState(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to methods that will allow the configuration or reset of internal state information.'
    _iid_ = GUID('{4FF83F84-8159-46E6-9D6F-DB91860190D7}')
    _idlflags_ = ['oleautomation']
IActionState._methods_ = [
    COMMETHOD([helpstring(u'Reset the State information to default.')], HRESULT, 'ResetToDefaultState'),
]
################################################################
## code template for IActionState implementation
##class IActionState_Impl(object):
##    def ResetToDefaultState(self):
##        u'Reset the State information to default.'
##        #return 
##

IMapServerBookmarks._methods_ = [
    COMMETHOD(['propget', helpstring(u'The bookmark count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The bookmark at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IMapServerBookmark)), 'bookmark' )),
    COMMETHOD([helpstring(u'Removes the bookmark at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all bookmarks.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Adds a bookmark.')], HRESULT, 'Add',
              ( ['in'], POINTER(IMapServerBookmark), 'bookmark' )),
    COMMETHOD([helpstring(u'Adds a bookmark at the specified position.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(IMapServerBookmark), 'bookmark' )),
]
################################################################
## code template for IMapServerBookmarks implementation
##class IMapServerBookmarks_Impl(object):
##    @property
##    def Count(self):
##        u'The bookmark count.'
##        #return Count
##
##    def Insert(self, Index, bookmark):
##        u'Adds a bookmark at the specified position.'
##        #return 
##
##    def Remove(self, Index):
##        u'Removes the bookmark at the specified position.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'The bookmark at the specified position.'
##        #return bookmark
##
##    def RemoveAll(self):
##        u'Removes all bookmarks.'
##        #return 
##
##    def Add(self, bookmark):
##        u'Adds a bookmark.'
##        #return 
##

IDataObjectGroups._methods_ = [
    COMMETHOD(['propget', helpstring(u'Array of DataObjectGroup elements.')], HRESULT, 'DataObjectGroupArray',
              ( ['retval', 'out'], POINTER(POINTER(IDataObjectGroupArray)), 'DataObjectGroupArray' )),
    COMMETHOD(['propget', helpstring(u'The spatial reference for the features in the set.')], HRESULT, 'SpatialReference',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference)), 'SpatialReference' )),
    COMMETHOD(['propget', helpstring(u'Time reference for the features in the array.')], HRESULT, 'TimeReference',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITimeReference)), 'TimeReference' )),
]
################################################################
## code template for IDataObjectGroups implementation
##class IDataObjectGroups_Impl(object):
##    @property
##    def DataObjectGroupArray(self):
##        u'Array of DataObjectGroup elements.'
##        #return DataObjectGroupArray
##
##    @property
##    def TimeReference(self):
##        u'Time reference for the features in the array.'
##        #return TimeReference
##
##    @property
##    def SpatialReference(self):
##        u'The spatial reference for the features in the set.'
##        #return SpatialReference
##

ITableEdit._methods_ = [
    COMMETHOD(['propget', helpstring(u'Objects to be added.')], HRESULT, 'Adds',
              ( ['retval', 'out'], POINTER(POINTER(IDataObjects)), 'addObjects' )),
    COMMETHOD(['propputref', helpstring(u'Objects to be added.')], HRESULT, 'Adds',
              ( ['in'], POINTER(IDataObjects), 'addObjects' )),
    COMMETHOD(['propget', helpstring(u'IDs of Objects to be deleted.')], HRESULT, 'Deletes',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray)), 'deleteOIDs' )),
    COMMETHOD(['propputref', helpstring(u'IDs of Objects to be deleted.')], HRESULT, 'Deletes',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'deleteOIDs' )),
    COMMETHOD(['propget', helpstring(u'Layer or table ID.')], HRESULT, 'LayerOrTableID',
              ( ['retval', 'out'], POINTER(c_int), 'LayerOrTableID' )),
    COMMETHOD(['propput', helpstring(u'Layer or table ID.')], HRESULT, 'LayerOrTableID',
              ( ['in'], c_int, 'LayerOrTableID' )),
    COMMETHOD(['propget', helpstring(u'Objects to be updated.')], HRESULT, 'Updates',
              ( ['retval', 'out'], POINTER(POINTER(IDataObjects)), 'updateObjects' )),
    COMMETHOD(['propputref', helpstring(u'Objects to be updated.')], HRESULT, 'Updates',
              ( ['in'], POINTER(IDataObjects), 'updateObjects' )),
]
################################################################
## code template for ITableEdit implementation
##class ITableEdit_Impl(object):
##    def _get(self):
##        u'Layer or table ID.'
##        #return LayerOrTableID
##    def _set(self, LayerOrTableID):
##        u'Layer or table ID.'
##    LayerOrTableID = property(_get, _set, doc = _set.__doc__)
##
##    def Adds(self, addObjects):
##        u'Objects to be added.'
##        #return 
##
##    def Updates(self, updateObjects):
##        u'Objects to be updated.'
##        #return 
##
##    def Deletes(self, deleteOIDs):
##        u'IDs of Objects to be deleted.'
##        #return 
##

class RasterCatalogLayer(CoClass):
    u'Raster catalog source and display options.'
    _reg_clsid_ = GUID('{1493C960-F620-11D3-8D6C-00C04F5B87B2}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
RasterCatalogLayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILayer2, IRasterCatalogLayer, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeoDataset, ILegendInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, IIdentify, ILayerInfo, IDataLayer, IDataLayer2, ILayerEffects, ILayerExtensions, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IConnectionPointContainer, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayAdmin, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayAdmin2, ILayerDrawingProperties, ILayerPosition, IPublishLayer, IRasterCatalogDisplayProps, IRasterCatalogDisplayProps2]
RasterCatalogLayer._outgoing_interfaces_ = [ILayerEvents]

class LayoutImage(CoClass):
    u'The Layout Image coclass contains information about the generated layout image.'
    _reg_clsid_ = GUID('{614DF187-68A3-480F-B760-26E8DD387D72}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
LayoutImage._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IImageResult, ILayoutImage, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

class IHighlightSuppressionAction(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to properties and methods needed to manage the highlight/suppression action.'
    _iid_ = GUID('{705AAFE4-568B-4818-A312-2386D3CFBDBA}')
    _idlflags_ = ['oleautomation']
IHighlightSuppressionAction._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates what type of action will be performed.')], HRESULT, 'ActionType',
              ( ['retval', 'out'], POINTER(enumHighlightSuppression), 'pVal' )),
    COMMETHOD(['propput', helpstring(u'Indicates what type of action will be performed.')], HRESULT, 'ActionType',
              ( ['in'], enumHighlightSuppression, 'pVal' )),
    COMMETHOD(['propget', helpstring(u'Symbol used to highlight the feature meeting highlight action criteria.')], HRESULT, 'HighlightSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol)), 'pVal' )),
    COMMETHOD(['propputref', helpstring(u'Symbol used to highlight the feature meeting highlight action criteria.')], HRESULT, 'HighlightSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol), 'pVal' )),
    COMMETHOD([helpstring(u'Indicates whether or not the highlight-suppression action is set to suppress features.')], HRESULT, 'IsSuppression',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'bResult' )),
    COMMETHOD([helpstring(u'Indicates whether or not feature is contained in the action.')], HRESULT, 'ContainsFeature',
              ( ['in'], c_int, 'OID' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'bResult' )),
    COMMETHOD([helpstring(u'Clears object array of all previous entries.')], HRESULT, 'ClearObjectArray'),
]
################################################################
## code template for IHighlightSuppressionAction implementation
##class IHighlightSuppressionAction_Impl(object):
##    def IsSuppression(self):
##        u'Indicates whether or not the highlight-suppression action is set to suppress features.'
##        #return bResult
##
##    def ContainsFeature(self, OID):
##        u'Indicates whether or not feature is contained in the action.'
##        #return bResult
##
##    def HighlightSymbol(self, pVal):
##        u'Symbol used to highlight the feature meeting highlight action criteria.'
##        #return 
##
##    def _get(self):
##        u'Indicates what type of action will be performed.'
##        #return pVal
##    def _set(self, pVal):
##        u'Indicates what type of action will be performed.'
##    ActionType = property(_get, _set, doc = _set.__doc__)
##
##    def ClearObjectArray(self):
##        u'Clears object array of all previous entries.'
##        #return 
##

IQuerySize._methods_ = [
    COMMETHOD([helpstring(u'Get the size in points.')], HRESULT, 'QuerySize',
              ( ['in', 'out'], POINTER(c_double), 'widthPoints' ),
              ( ['in', 'out'], POINTER(c_double), 'heightPoints' )),
]
################################################################
## code template for IQuerySize implementation
##class IQuerySize_Impl(object):
##    def QuerySize(self):
##        u'Get the size in points.'
##        #return widthPoints, heightPoints
##

IGraphicFeatureServerInit._methods_ = [
    COMMETHOD([helpstring(u'Initialize GraphicFeatureServer object with MapServer.')], HRESULT, 'Connect',
              ( ['in'], POINTER(IMapServer), 'MapServer' )),
    COMMETHOD(['propput'], HRESULT, 'EnableZDefaults',
              ( ['in'], VARIANT_BOOL, 'EnableZDefaults' )),
    COMMETHOD(['propget'], HRESULT, 'EnableZDefaults',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'EnableZDefaults' )),
    COMMETHOD(['propput'], HRESULT, 'ZDefaults',
              ( ['in'], c_double, 'ZDefaults' )),
    COMMETHOD(['propget'], HRESULT, 'ZDefaults',
              ( ['retval', 'out'], POINTER(c_double), 'ZDefaults' )),
]
################################################################
## code template for IGraphicFeatureServerInit implementation
##class IGraphicFeatureServerInit_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return ZDefaults
##    def _set(self, ZDefaults):
##        '-no docstring-'
##    ZDefaults = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        '-no docstring-'
##        #return EnableZDefaults
##    def _set(self, EnableZDefaults):
##        '-no docstring-'
##    EnableZDefaults = property(_get, _set, doc = _set.__doc__)
##
##    def Connect(self, MapServer):
##        u'Initialize GraphicFeatureServer object with MapServer.'
##        #return 
##

IMultiPartTextElement._methods_ = [
    COMMETHOD([helpstring(u'Converts the current element into a multipart element.')], HRESULT, 'ConvertToMultiPart',
              ( [], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'pDisplay' )),
    COMMETHOD([helpstring(u'Converts the current element into a single part element.')], HRESULT, 'ConvertToSinglePart'),
    COMMETHOD(['propget', helpstring(u'Indicates if the element is multi part.')], HRESULT, 'IsMultipart',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsMultiPartElement' )),
    COMMETHOD(['propget', helpstring(u'The number of parts in the multipart element.')], HRESULT, 'PartCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD([helpstring(u'Returns the part in the multipart element at the specified index.')], HRESULT, 'QueryPart',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IElement)), 'Element' )),
    COMMETHOD([helpstring(u'Replace a part in the multipart element at the specified index.')], HRESULT, 'ReplacePart',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Text' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'Geometry' )),
    COMMETHOD([helpstring(u'Insert a part in the multipart element at the specified index.')], HRESULT, 'InsertPart',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Text' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'Geometry' )),
    COMMETHOD([helpstring(u'Delete a part in the multipart element at the specified index.')], HRESULT, 'DeletePart',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Synchronize the geometry with the text of the element.')], HRESULT, 'SynchronizeParts',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'pDisplay' )),
]
################################################################
## code template for IMultiPartTextElement implementation
##class IMultiPartTextElement_Impl(object):
##    def QueryPart(self, Index):
##        u'Returns the part in the multipart element at the specified index.'
##        #return Element
##
##    @property
##    def PartCount(self):
##        u'The number of parts in the multipart element.'
##        #return Count
##
##    @property
##    def IsMultipart(self):
##        u'Indicates if the element is multi part.'
##        #return IsMultiPartElement
##
##    def ConvertToMultiPart(self, pDisplay):
##        u'Converts the current element into a multipart element.'
##        #return 
##
##    def ConvertToSinglePart(self):
##        u'Converts the current element into a single part element.'
##        #return 
##
##    def ReplacePart(self, Index, Text, Geometry):
##        u'Replace a part in the multipart element at the specified index.'
##        #return 
##
##    def InsertPart(self, Index, Text, Geometry):
##        u'Insert a part in the multipart element at the specified index.'
##        #return 
##
##    def DeletePart(self, Index):
##        u'Delete a part in the multipart element at the specified index.'
##        #return 
##
##    def SynchronizeParts(self, pDisplay):
##        u'Synchronize the geometry with the text of the element.'
##        #return 
##

ITerrainAttributeRenderer._methods_ = [
    COMMETHOD(['propput', helpstring(u'The name of the reserved field to be used to define drawing symbol.')], HRESULT, 'AttributeFieldName',
              ( ['in'], BSTR, 'pName' )),
    COMMETHOD(['propget', helpstring(u'The name of the reserved field to be used to define drawing symbol.')], HRESULT, 'AttributeFieldName',
              ( ['retval', 'out'], POINTER(BSTR), 'pName' )),
    COMMETHOD([helpstring(u'The embedded data sources to be rendered.')], HRESULT, 'SetDataSources',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'pDataSources' )),
    COMMETHOD([helpstring(u'The embedded data sources to be rendered.')], HRESULT, 'GetDataSources',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray)), 'ppDataSources' )),
    COMMETHOD([helpstring(u'Redefine drawing symbols based on cueernt data sources and attribute field name.')], HRESULT, 'RedefineSymbols'),
]
################################################################
## code template for ITerrainAttributeRenderer implementation
##class ITerrainAttributeRenderer_Impl(object):
##    def SetDataSources(self, pDataSources):
##        u'The embedded data sources to be rendered.'
##        #return 
##
##    def RedefineSymbols(self):
##        u'Redefine drawing symbols based on cueernt data sources and attribute field name.'
##        #return 
##
##    def GetDataSources(self):
##        u'The embedded data sources to be rendered.'
##        #return ppDataSources
##
##    def _get(self):
##        u'The name of the reserved field to be used to define drawing symbol.'
##        #return pName
##    def _set(self, pName):
##        u'The name of the reserved field to be used to define drawing symbol.'
##    AttributeFieldName = property(_get, _set, doc = _set.__doc__)
##

IElementShutdown._methods_ = [
    COMMETHOD([helpstring(u'Called when the element is about to be deleted.')], HRESULT, 'Shutdown'),
]
################################################################
## code template for IElementShutdown implementation
##class IElementShutdown_Impl(object):
##    def Shutdown(self):
##        u'Called when the element is about to be deleted.'
##        #return 
##

class LayerFile(CoClass):
    u'The LayerFile coclass is used to read and write layer document files.'
    _reg_clsid_ = GUID('{DDC2346D-62D0-4EA3-AB42-64A9557157C6}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
LayerFile._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILayerFile, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersion]

class DataObjectType(CoClass):
    u'DataObjectType co-class.'
    _reg_clsid_ = GUID('{13DAE93F-86F6-44B0-AA2B-F9653B4F3B3A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
DataObjectType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDataObjectType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class DataObjectTypes(CoClass):
    u'DataObjectTypes co-class.'
    _reg_clsid_ = GUID('{8D4C22E2-763D-4F62-9FEE-F98A76AA1A49}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
DataObjectTypes._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDataObjectTypes, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]


# values for enumeration 'esriMaplexLabelAnchorPoint'
esriMaplexCenterOfLabel = 0
esriMaplexNearestSideOfLabel = 1
esriMaplexFurthestSideOfLabel = 2
esriMaplexLabelAnchorPoint = c_int # enum

# values for enumeration 'esriMaplexStackingJustification'
esriMaplexChooseBestJustification = 0
esriMaplexConstrainJustificationLeftOrRight = 1
esriMaplexConstrainJustificationLeft = 2
esriMaplexConstrainJustificationRight = 3
esriMaplexConstrainJustificationCenter = 4
esriMaplexStackingJustification = c_int # enum
IMapLayers2._methods_ = [
    COMMETHOD([helpstring(u'Check if layer is visible.')], HRESULT, 'IsLayerVisibleEx',
              ( ['in'], POINTER(ILayer), 'Layer' ),
              ( ['out'], POINTER(VARIANT_BOOL), 'IsLayerVisible' ),
              ( ['out'], POINTER(VARIANT_BOOL), 'isParentLayerVisible' )),
]
################################################################
## code template for IMapLayers2 implementation
##class IMapLayers2_Impl(object):
##    def IsLayerVisibleEx(self, Layer):
##        u'Check if layer is visible.'
##        #return IsLayerVisible, isParentLayerVisible
##

class MosaicRule(CoClass):
    u'A mosaic rule class.'
    _reg_clsid_ = GUID('{33638700-D926-4ECD-9CE9-BCAA96E8E89C}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
MosaicRule._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMosaicRule, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class CoverageAnnotationLayer(CoClass):
    u'An Esri coverage annotation layer.'
    _reg_clsid_ = GUID('{0C22A4C9-DAFD-11D2-9F46-00C04F6BC78E}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
CoverageAnnotationLayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ICoverageAnnotationLayer, ICoverageAnnotationLayer2, ICoverageAnnotationSel, ICoverageAnnotationLayerWrite, ILayer, IFeatureLayer, ILayerFields, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITableFields, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeoDataset, IBarrierProperties, IBarrierProperties2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, ILayerInfo, IDataLayer, IDataLayer2, IAttributeTable, IFind, IPublishLayer, ILayerDrawingPhase, ILayerEffects, ILayerGeneralProperties, IDrawAnnotationGeometry, IDisplayRelationshipClass, IDisplayTable, IFeatureLayer2, IFeatureLayerDefinition, IFeatureLayerDefinition2, IFeatureSelection, IHotlinkContainer, IHotlinkMacro, IHotlinkExpression, IHyperlinkContainer, IIdentify, IIdentify2, ILayer2, ILayerDrawingProperties, ILayerExtensions, ILayerPosition, ILayerSymbologyExtents, IRelationshipClassCollection, IRelationshipClassCollectionEdit, ISecureLayer, ITableDefinition, ITableSelection, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITableCapabilities, ITemporaryLayer, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayAdmin, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayFilterManager, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IMapLevel, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IClass, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataset, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IObjectClassSchemaEvents, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySupport, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IConnectionPointContainer, IInteractiveSearch, IHTMLPopupInfo, IHTMLPopupInfo2, IHTMLPopupIdentify, IHTMLPopupIdentify2, IDisplayString, IIdentifyDisplay, IOrderedLayerFields, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspaceEvents]

ILegendItem3._methods_ = [
    COMMETHOD(['propget', helpstring(u'Name of the style.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the style is compatible with the specified layer.')], HRESULT, 'CanDisplay',
              ( ['in'], POINTER(ILayer), 'Layer' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'result' )),
    COMMETHOD(['propget', helpstring(u'Associated layer.')], HRESULT, 'Layer',
              ( ['retval', 'out'], POINTER(POINTER(ILayer)), 'Layer' )),
    COMMETHOD(['propputref', helpstring(u'Associated layer.')], HRESULT, 'Layer',
              ( ['in'], POINTER(ILayer), 'Layer' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the item starts a new column in the legend.')], HRESULT, 'NewColumn',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the item starts a new column in the legend.')], HRESULT, 'NewColumn',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Number of columns in the legend item.')], HRESULT, 'Columns',
              ( ['retval', 'out'], POINTER(c_short), 'Columns' )),
    COMMETHOD(['propput', helpstring(u'Number of columns in the legend item.')], HRESULT, 'Columns',
              ( ['in'], c_short, 'Columns' )),
    COMMETHOD(['propget', helpstring(u'Indicates if classes must appear in a single column or whether they can be split across multiple columns.')], HRESULT, 'KeepTogether',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if classes must appear in a single column or whether they can be split across multiple columns.')], HRESULT, 'KeepTogether',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates if layer name is visibile.')], HRESULT, 'ShowLayerName',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'ShowLayerName' )),
    COMMETHOD(['propput', helpstring(u'Indicates if layer name is visibile.')], HRESULT, 'ShowLayerName',
              ( ['in'], VARIANT_BOOL, 'ShowLayerName' )),
    COMMETHOD(['propget', helpstring(u'Text symbol used to draw the layer name.')], HRESULT, 'LayerNameSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol)), 'Symbol' )),
    COMMETHOD(['propput', helpstring(u'Text symbol used to draw the layer name.')], HRESULT, 'LayerNameSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'Zero-based index of the legend group shown by this item.  Use -1 to show all legend groups using this item.')], HRESULT, 'GroupIndex',
              ( ['retval', 'out'], POINTER(c_int), 'Index' )),
    COMMETHOD(['propput', helpstring(u'Zero-based index of the legend group shown by this item.  Use -1 to show all legend groups using this item.')], HRESULT, 'GroupIndex',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD(['propget', helpstring(u'Indicates if heading is visibile.')], HRESULT, 'ShowHeading',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'ShowHeading' )),
    COMMETHOD(['propput', helpstring(u'Indicates if heading is visibile.')], HRESULT, 'ShowHeading',
              ( ['in'], VARIANT_BOOL, 'ShowHeading' )),
    COMMETHOD(['propget', helpstring(u'Text symbol used to draw the heading.')], HRESULT, 'HeadingSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol)), 'Symbol' )),
    COMMETHOD(['propput', helpstring(u'Text symbol used to draw the heading.')], HRESULT, 'HeadingSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'Default formatting information for the legend classes.  Renderer may override.')], HRESULT, 'LegendClassFormat',
              ( ['retval', 'out'], POINTER(POINTER(ILegendClassFormat)), 'Format' )),
    COMMETHOD(['propput', helpstring(u'Default formatting information for the legend classes.  Renderer may override.')], HRESULT, 'LegendClassFormat',
              ( ['in'], POINTER(ILegendClassFormat), 'Format' )),
    COMMETHOD(['propget', helpstring(u'Indicates if labels are visible.')], HRESULT, 'ShowLabels',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'ShowLabels' )),
    COMMETHOD(['propput', helpstring(u'Indicates if labels are visible.')], HRESULT, 'ShowLabels',
              ( ['in'], VARIANT_BOOL, 'ShowLabels' )),
    COMMETHOD(['propget', helpstring(u'Indicates if descriptions are visible.')], HRESULT, 'ShowDescriptions',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'ShowDescriptions' )),
    COMMETHOD(['propput', helpstring(u'Indicates if descriptions are visible.')], HRESULT, 'ShowDescriptions',
              ( ['in'], VARIANT_BOOL, 'ShowDescriptions' )),
    COMMETHOD([helpstring(u'Rebuilds the list of graphics.  Call whenever the associated layer changes.')], HRESULT, 'CreateGraphics',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], POINTER(ILegendFormat), 'LegendFormat' )),
    COMMETHOD(['propget', helpstring(u'Width of the item in points. Must call CreateGraphics first.')], HRESULT, 'Width',
              ( ['retval', 'out'], POINTER(c_double), 'Width' )),
    COMMETHOD(['propget', helpstring(u'Height of the item in points. Must call CreateGraphics first.')], HRESULT, 'Height',
              ( ['retval', 'out'], POINTER(c_double), 'Height' )),
    COMMETHOD(['propget', helpstring(u'List of graphics that represent the legend item.  Must call CreateGraphics first.')], HRESULT, 'Graphics',
              ( ['retval', 'out'], POINTER(POINTER(IEnumElement)), 'Graphics' )),
    COMMETHOD([helpstring(u"Indicates if a legend's flow direction changes.  Update alignment settings.")], HRESULT, 'ChangeFlowDirection',
              ( [], VARIANT_BOOL, 'RightToLeft' )),
    COMMETHOD(['propget', helpstring(u"The ratio calculated by dividing the map reference scale by the map scale.  Allows legend symbols to honor the map's reference scale.")], HRESULT, 'ReferenceScaleRatio',
              ( ['retval', 'out'], POINTER(c_double), 'ratio' )),
    COMMETHOD(['propput', helpstring(u"The ratio calculated by dividing the map reference scale by the map scale.  Allows legend symbols to honor the map's reference scale.")], HRESULT, 'ReferenceScaleRatio',
              ( ['in'], c_double, 'ratio' )),
]
################################################################
## code template for ILegendItem3 implementation
##class ILegendItem3_Impl(object):
##    def Layer(self, Layer):
##        u'Associated layer.'
##        #return 
##
##    def _get(self):
##        u"The ratio calculated by dividing the map reference scale by the map scale.  Allows legend symbols to honor the map's reference scale."
##        #return ratio
##    def _set(self, ratio):
##        u"The ratio calculated by dividing the map reference scale by the map scale.  Allows legend symbols to honor the map's reference scale."
##    ReferenceScaleRatio = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        u'Name of the style.'
##        #return Name
##
##    def _get(self):
##        u'Indicates if layer name is visibile.'
##        #return ShowLayerName
##    def _set(self, ShowLayerName):
##        u'Indicates if layer name is visibile.'
##    ShowLayerName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if labels are visible.'
##        #return ShowLabels
##    def _set(self, ShowLabels):
##        u'Indicates if labels are visible.'
##    ShowLabels = property(_get, _set, doc = _set.__doc__)
##
##    def CreateGraphics(self, Display, LegendFormat):
##        u'Rebuilds the list of graphics.  Call whenever the associated layer changes.'
##        #return 
##
##    def _get(self):
##        u'Indicates if descriptions are visible.'
##        #return ShowDescriptions
##    def _set(self, ShowDescriptions):
##        u'Indicates if descriptions are visible.'
##    ShowDescriptions = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Height(self):
##        u'Height of the item in points. Must call CreateGraphics first.'
##        #return Height
##
##    def _get(self):
##        u'Indicates if heading is visibile.'
##        #return ShowHeading
##    def _set(self, ShowHeading):
##        u'Indicates if heading is visibile.'
##    ShowHeading = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Width(self):
##        u'Width of the item in points. Must call CreateGraphics first.'
##        #return Width
##
##    @property
##    def CanDisplay(self, Layer):
##        u'Indicates if the style is compatible with the specified layer.'
##        #return result
##
##    def _get(self):
##        u'Indicates if classes must appear in a single column or whether they can be split across multiple columns.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if classes must appear in a single column or whether they can be split across multiple columns.'
##    KeepTogether = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Text symbol used to draw the heading.'
##        #return Symbol
##    def _set(self, Symbol):
##        u'Text symbol used to draw the heading.'
##    HeadingSymbol = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Graphics(self):
##        u'List of graphics that represent the legend item.  Must call CreateGraphics first.'
##        #return Graphics
##
##    def ChangeFlowDirection(self, RightToLeft):
##        u"Indicates if a legend's flow direction changes.  Update alignment settings."
##        #return 
##
##    def _get(self):
##        u'Zero-based index of the legend group shown by this item.  Use -1 to show all legend groups using this item.'
##        #return Index
##    def _set(self, Index):
##        u'Zero-based index of the legend group shown by this item.  Use -1 to show all legend groups using this item.'
##    GroupIndex = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Text symbol used to draw the layer name.'
##        #return Symbol
##    def _set(self, Symbol):
##        u'Text symbol used to draw the layer name.'
##    LayerNameSymbol = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Default formatting information for the legend classes.  Renderer may override.'
##        #return Format
##    def _set(self, Format):
##        u'Default formatting information for the legend classes.  Renderer may override.'
##    LegendClassFormat = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Number of columns in the legend item.'
##        #return Columns
##    def _set(self, Columns):
##        u'Number of columns in the legend item.'
##    Columns = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the item starts a new column in the legend.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if the item starts a new column in the legend.'
##    NewColumn = property(_get, _set, doc = _set.__doc__)
##

class RulerSnap(CoClass):
    u'Snap to ruler agent.'
    _reg_clsid_ = GUID('{FC27FAB3-DB88-11D1-8778-0000F8751720}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
RulerSnap._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IPageLayoutSnap, IGraphicSnap, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

class GraphicFeatureLayers(CoClass):
    u'GraphicFeatureLayers co-class.'
    _reg_clsid_ = GUID('{92C36F80-E7CD-4A51-95B9-640BE8D4F5F2}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
GraphicFeatureLayers._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGraphicFeatureLayers, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

IImageServerObjects._methods_ = [
    COMMETHOD(['propget', helpstring(u'The mosaic dataset.')], HRESULT, 'MosaicDataset',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._8F0541A3_D5BE_4B3F_A8D9_062D5579E19B_0_10_2.IMosaicDataset)), 'ppMosaicDataset' )),
    COMMETHOD(['propget', helpstring(u'The raster dataset.')], HRESULT, 'RasterDataset',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterDataset)), 'ppRasterDataset' )),
    COMMETHOD(['propget', helpstring(u'The raster.')], HRESULT, 'Raster',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster)), 'ppRaster' )),
    COMMETHOD(['propget', helpstring(u'The time definition.')], HRESULT, 'TimeDefinition',
              ( ['retval', 'out'], POINTER(POINTER(ITimeTableDefinition)), 'ppTimeDefinition' )),
]
################################################################
## code template for IImageServerObjects implementation
##class IImageServerObjects_Impl(object):
##    @property
##    def Raster(self):
##        u'The raster.'
##        #return ppRaster
##
##    @property
##    def TimeDefinition(self):
##        u'The time definition.'
##        #return ppTimeDefinition
##
##    @property
##    def RasterDataset(self):
##        u'The raster dataset.'
##        #return ppRasterDataset
##
##    @property
##    def MosaicDataset(self):
##        u'The mosaic dataset.'
##        #return ppMosaicDataset
##

class MapDocument(CoClass):
    u'The MapDocument coclass is used to read and write map document files.'
    _reg_clsid_ = GUID('{2FE5E68E-3DA5-4BDA-BAF1-103C55115A1C}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
MapDocument._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMapDocument, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersion, IDocumentInfo, IDocumentInfo2, IDocumentPreview]

IClassBreaksDef._methods_ = [
    COMMETHOD(['propget', helpstring(u'Names of the classification field.')], HRESULT, 'ClassificationField',
              ( ['retval', 'out'], POINTER(BSTR), 'ClassificationField' )),
    COMMETHOD(['propput', helpstring(u'Names of the classification field.')], HRESULT, 'ClassificationField',
              ( ['in'], BSTR, 'ClassificationField' )),
    COMMETHOD(['propget', helpstring(u'Number of breaks.')], HRESULT, 'BreakCount',
              ( ['retval', 'out'], POINTER(c_int), 'BreakCount' )),
    COMMETHOD(['propput', helpstring(u'Number of breaks.')], HRESULT, 'BreakCount',
              ( ['in'], c_int, 'BreakCount' )),
    COMMETHOD(['propget', helpstring(u'Classification Method.')], HRESULT, 'ClassificationMethod',
              ( ['retval', 'out'], POINTER(esriClassifyMethod), 'classifyMethod' )),
    COMMETHOD(['propput', helpstring(u'Classification Method.')], HRESULT, 'ClassificationMethod',
              ( ['in'], esriClassifyMethod, 'classifyMethod' )),
    COMMETHOD(['propget', helpstring(u'Normalization field.')], HRESULT, 'NormalizationField',
              ( ['retval', 'out'], POINTER(BSTR), 'NormalizationField' )),
    COMMETHOD(['propput', helpstring(u'Normalization field.')], HRESULT, 'NormalizationField',
              ( ['in'], BSTR, 'NormalizationField' )),
    COMMETHOD(['propget', helpstring(u'Normalization Type.')], HRESULT, 'NormalizationType',
              ( ['retval', 'out'], POINTER(esriDataNormalization), 'NormalizationType' )),
    COMMETHOD(['propput', helpstring(u'Normalization Type.')], HRESULT, 'NormalizationType',
              ( ['in'], esriDataNormalization, 'NormalizationType' )),
    COMMETHOD(['propget', helpstring(u'Standard deviation interval.')], HRESULT, 'StandardDeviationInterval',
              ( ['retval', 'out'], POINTER(c_double), 'BreakCount' )),
    COMMETHOD(['propput', helpstring(u'Standard deviation interval.')], HRESULT, 'StandardDeviationInterval',
              ( ['in'], c_double, 'BreakCount' )),
]
################################################################
## code template for IClassBreaksDef implementation
##class IClassBreaksDef_Impl(object):
##    def _get(self):
##        u'Normalization field.'
##        #return NormalizationField
##    def _set(self, NormalizationField):
##        u'Normalization field.'
##    NormalizationField = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Classification Method.'
##        #return classifyMethod
##    def _set(self, classifyMethod):
##        u'Classification Method.'
##    ClassificationMethod = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Normalization Type.'
##        #return NormalizationType
##    def _set(self, NormalizationType):
##        u'Normalization Type.'
##    NormalizationType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Standard deviation interval.'
##        #return BreakCount
##    def _set(self, BreakCount):
##        u'Standard deviation interval.'
##    StandardDeviationInterval = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Number of breaks.'
##        #return BreakCount
##    def _set(self, BreakCount):
##        u'Number of breaks.'
##    BreakCount = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Names of the classification field.'
##        #return ClassificationField
##    def _set(self, ClassificationField):
##        u'Names of the classification field.'
##    ClassificationField = property(_get, _set, doc = _set.__doc__)
##

class GuideSnap(CoClass):
    u'Snap to guides agent.'
    _reg_clsid_ = GUID('{FC27FAB1-DB88-11D1-8778-0000F8751720}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
GuideSnap._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IPageLayoutSnap, IGraphicSnap, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

IMapSurroundEvents._methods_ = [
    COMMETHOD([helpstring(u'Fired when the contents of the map surround changes.')], HRESULT, 'ContentsChanged'),
    COMMETHOD([helpstring(u'Fired before drawing starts.')], HRESULT, 'BeforeDraw',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' )),
    COMMETHOD([helpstring(u'Fired after drawing completes.')], HRESULT, 'AfterDraw',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' )),
]
################################################################
## code template for IMapSurroundEvents implementation
##class IMapSurroundEvents_Impl(object):
##    def BeforeDraw(self, Display):
##        u'Fired before drawing starts.'
##        #return 
##
##    def ContentsChanged(self):
##        u'Fired when the contents of the map surround changes.'
##        #return 
##
##    def AfterDraw(self, Display):
##        u'Fired after drawing completes.'
##        #return 
##

IRasterFormatInfo._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates whether all files are searched for valid raster formats.')], HRESULT, 'ActiveBrowse',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pOpt' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether all files are searched for valid raster formats.')], HRESULT, 'ActiveBrowse',
              ( ['in'], VARIANT_BOOL, 'pOpt' )),
    COMMETHOD(['propget', helpstring(u'Format name.')], HRESULT, 'FormatName',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'Format name.')], HRESULT, 'FormatName',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'Default format extensions.')], HRESULT, 'DefaultExts',
              ( ['retval', 'out'], POINTER(BSTR), 'ext' )),
    COMMETHOD(['propput', helpstring(u'Default format extensions.')], HRESULT, 'DefaultExts',
              ( ['in'], BSTR, 'ext' )),
]
################################################################
## code template for IRasterFormatInfo implementation
##class IRasterFormatInfo_Impl(object):
##    def _get(self):
##        u'Default format extensions.'
##        #return ext
##    def _set(self, ext):
##        u'Default format extensions.'
##    DefaultExts = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Format name.'
##        #return Name
##    def _set(self, Name):
##        u'Format name.'
##    FormatName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether all files are searched for valid raster formats.'
##        #return pOpt
##    def _set(self, pOpt):
##        u'Indicates whether all files are searched for valid raster formats.'
##    ActiveBrowse = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'esriMapClipType'
esriMapClipNone = 0
esriMapClipShape = 1
esriMapClipMapExtent = 2
esriMapClipPageIndex = 3
esriMapClipType = c_int # enum
IImageCooker._methods_ = [
    COMMETHOD([helpstring(u'Connects an image server object to its cache location.')], HRESULT, 'Connect',
              ( ['in'], BSTR, 'Location' ),
              ( ['in'], POINTER(IImageServer), 'pImageServer' )),
    COMMETHOD([helpstring(u'Clears cache tiles with a given extent.')], HRESULT, 'Clear',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'pExtent' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' )),
    COMMETHOD([helpstring(u'Gets a tile at a given LOD, and column and row location.')], HRESULT, 'GetTile',
              ( ['in'], c_int, 'Level' ),
              ( ['in'], c_int, 'Row' ),
              ( ['in'], c_int, 'Column' ),
              ( ['retval', 'out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'ppTile' )),
    COMMETHOD([helpstring(u'Puts a tile at a given LOD, and column and row location.')], HRESULT, 'PutTile',
              ( ['in'], c_int, 'Level' ),
              ( ['in'], c_int, 'Row' ),
              ( ['in'], c_int, 'Column' ),
              ( ['in'], POINTER(_midlSAFEARRAY(c_ubyte)), 'ppTile' )),
    COMMETHOD([helpstring(u'Gets the cache directory/location.')], HRESULT, 'GetCacheDirectory',
              ( ['out'], POINTER(BSTR), 'pCacheDir' )),
    COMMETHOD([helpstring(u'Updates cache within a given extent.')], HRESULT, 'Update',
              ( ['in'], POINTER(IImageServer), 'pImageServer' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'pExtent' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'pLevels' ),
              ( ['in'], esriMapCacheUpdateMode, 'UpdateMode' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' )),
    COMMETHOD([helpstring(u'Updates cache within an area of interest defined by a given geometry.')], HRESULT, 'UpdateByGeometry',
              ( ['in'], POINTER(IImageServer), 'pImageServer' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'pGeometry' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'pLevels' ),
              ( ['in'], esriMapCacheUpdateMode, 'UpdateMode' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' )),
    COMMETHOD(['propget', helpstring(u'The number of Image Cooker instances for building tile cache.')], HRESULT, 'ThreadCount',
              ( ['retval', 'out'], POINTER(c_int), 'pThreadCount' )),
    COMMETHOD(['propput', helpstring(u'The number of Image Cooker instances for building tile cache.')], HRESULT, 'ThreadCount',
              ( ['in'], c_int, 'pThreadCount' )),
    COMMETHOD(['propget', helpstring(u'The maximum source image cellsize below which data are available.')], HRESULT, 'MaximumImageCellsize',
              ( ['retval', 'out'], POINTER(c_double), 'pMaxPS' )),
    COMMETHOD(['propput', helpstring(u'The maximum source image cellsize below which data are available.')], HRESULT, 'MaximumImageCellsize',
              ( ['in'], c_double, 'pMaxPS' )),
    COMMETHOD(['propget', helpstring(u'The ArcGIS server object to run the image cooker.')], HRESULT, 'ServerObjectName',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName)), 'ppName' )),
    COMMETHOD(['propputref', helpstring(u'The ArcGIS server object to run the image cooker.')], HRESULT, 'ServerObjectName',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName), 'ppName' )),
]
################################################################
## code template for IImageCooker implementation
##class IImageCooker_Impl(object):
##    def UpdateByGeometry(self, pImageServer, pGeometry, pLevels, UpdateMode, pTrackCancel):
##        u'Updates cache within an area of interest defined by a given geometry.'
##        #return 
##
##    def Clear(self, pExtent, pTrackCancel):
##        u'Clears cache tiles with a given extent.'
##        #return 
##
##    def Update(self, pImageServer, pExtent, pLevels, UpdateMode, pTrackCancel):
##        u'Updates cache within a given extent.'
##        #return 
##
##    def _get(self):
##        u'The number of Image Cooker instances for building tile cache.'
##        #return pThreadCount
##    def _set(self, pThreadCount):
##        u'The number of Image Cooker instances for building tile cache.'
##    ThreadCount = property(_get, _set, doc = _set.__doc__)
##
##    def GetTile(self, Level, Row, Column):
##        u'Gets a tile at a given LOD, and column and row location.'
##        #return ppTile
##
##    def ServerObjectName(self, ppName):
##        u'The ArcGIS server object to run the image cooker.'
##        #return 
##
##    def Connect(self, Location, pImageServer):
##        u'Connects an image server object to its cache location.'
##        #return 
##
##    def _get(self):
##        u'The maximum source image cellsize below which data are available.'
##        #return pMaxPS
##    def _set(self, pMaxPS):
##        u'The maximum source image cellsize below which data are available.'
##    MaximumImageCellsize = property(_get, _set, doc = _set.__doc__)
##
##    def PutTile(self, Level, Row, Column, ppTile):
##        u'Puts a tile at a given LOD, and column and row location.'
##        #return 
##
##    def GetCacheDirectory(self):
##        u'Gets the cache directory/location.'
##        #return pCacheDir
##

class GridSnap(CoClass):
    u'Snap to grid agent.'
    _reg_clsid_ = GUID('{FC27FAB0-DB88-11D1-8778-0000F8751720}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
GridSnap._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IPageLayoutSnap, IGraphicSnap, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

class FeatureLayerDrawingDescription(CoClass):
    u'Feature layer drawing description.'
    _reg_clsid_ = GUID('{AA66C2BA-55BF-4EAA-80AF-648B80228103}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
FeatureLayerDrawingDescription._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IFeatureLayerDrawingDescription, IFeatureLayerDrawingDescription2, ILayerDrawingDescription, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, ILayerEffects]

class GraphicSnapEnvironment(CoClass):
    u'Collection of Snap Agents used to snap a graphic point.'
    _reg_clsid_ = GUID('{56FD87F7-DDCE-11D1-8778-0000F8751720}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
GraphicSnapEnvironment._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGraphicSnapEnvironment, IGraphicSnapEnvironment2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

class DataObjectTables(CoClass):
    u'DataObjectTables co-class.'
    _reg_clsid_ = GUID('{5B33000E-64D3-43B6-89CB-A6E435B9B58D}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
DataObjectTables._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDataObjectTables, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

class PropertyInfo(CoClass):
    u'PropertyInfo co-class.'
    _reg_clsid_ = GUID('{749E6643-A33C-4E14-AE37-3BB51282546A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
PropertyInfo._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IPropertyInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]

IIdentifyObject._methods_ = [
    COMMETHOD(['propget', helpstring(u'Name of the identify object.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'Name of the identify object.')], HRESULT, 'Name',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'PropertySet of the identify object.')], HRESULT, 'PropertySet',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet)), 'PropertySet' )),
    COMMETHOD(['propputref', helpstring(u'PropertySet of the identify object.')], HRESULT, 'PropertySet',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet), 'PropertySet' )),
]
################################################################
## code template for IIdentifyObject implementation
##class IIdentifyObject_Impl(object):
##    def _get(self):
##        u'Name of the identify object.'
##        #return Name
##    def _set(self, Name):
##        u'Name of the identify object.'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def PropertySet(self, PropertySet):
##        u'PropertySet of the identify object.'
##        #return 
##

class IMaps2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members of map collection.'
    _iid_ = GUID('{EB3557EB-5F9A-4F83-821E-0826E5CBFD30}')
    _idlflags_ = ['oleautomation']
IMaps2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Number of maps.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The map at the given index.')], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IMap)), 'Map' )),
    COMMETHOD([helpstring(u'Creates a new map.')], HRESULT, 'Create',
              ( ['retval', 'out'], POINTER(POINTER(IMap)), 'Map' )),
    COMMETHOD([helpstring(u'Removes a map from the collection.')], HRESULT, 'Remove',
              ( ['in'], POINTER(IMap), 'Map' )),
    COMMETHOD(['hidden', helpstring(u'Adds a map to the collection.')], HRESULT, 'Add',
              ( ['in'], POINTER(IMap), 'Map' )),
    COMMETHOD([helpstring(u'Removes a map at the specified index.')], HRESULT, 'RemoveAt',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all maps from the collection.')], HRESULT, 'Reset'),
    COMMETHOD([helpstring(u'Moves the map to the given index.')], HRESULT, 'MoveItem',
              ( ['in'], POINTER(IMap), 'pMap' ),
              ( ['in'], c_int, 'toIndex' )),
]
################################################################
## code template for IMaps2 implementation
##class IMaps2_Impl(object):
##    @property
##    def Count(self):
##        u'Number of maps.'
##        #return Count
##
##    def Reset(self):
##        u'Removes all maps from the collection.'
##        #return 
##
##    def MoveItem(self, pMap, toIndex):
##        u'Moves the map to the given index.'
##        #return 
##
##    def Create(self):
##        u'Creates a new map.'
##        #return Map
##
##    def Remove(self, Map):
##        u'Removes a map from the collection.'
##        #return 
##
##    @property
##    def Item(self, Index):
##        u'The map at the given index.'
##        #return Map
##
##    def Add(self, Map):
##        u'Adds a map to the collection.'
##        #return 
##
##    def RemoveAt(self, Index):
##        u'Removes a map at the specified index.'
##        #return 
##

class ImageServiceInfo(CoClass):
    u'A class that provides information on an ArcGIS server image service.'
    _reg_clsid_ = GUID('{61520B29-0E78-4974-88AD-59A6A293085D}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
ImageServiceInfo._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IImageServiceInfo, IImageServiceInfo2, IImageServiceInfo3, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersionSupportGEN, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

IMapInset2._methods_ = [
    COMMETHOD(['propget', helpstring(u'The relative position of the inset to the associated map (used when the inset is live). The zoom amount is applied to this rectangle to determine the visible bounds that is actually drawn.')], HRESULT, 'MapBounds',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'Bounds' )),
    COMMETHOD(['propput', helpstring(u'The relative position of the inset to the associated map (used when the inset is live). The zoom amount is applied to this rectangle to determine the visible bounds that is actually drawn.')], HRESULT, 'MapBounds',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'Bounds' )),
    COMMETHOD(['propget', helpstring(u'The map extent shown by the inset (used when the inset is not live).')], HRESULT, 'VisibleBounds',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'VisibleBounds' )),
    COMMETHOD(['propput', helpstring(u'The map extent shown by the inset (used when the inset is not live).')], HRESULT, 'VisibleBounds',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'VisibleBounds' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the inset shows a live view of the underlying map.  False means a snapshot of the underlying map is taken at the time the flag is changed.')], HRESULT, 'IsLive',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsLive' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the inset shows a live view of the underlying map.  False means a snapshot of the underlying map is taken at the time the flag is changed.')], HRESULT, 'IsLive',
              ( ['in'], VARIANT_BOOL, 'IsLive' )),
    COMMETHOD(['propget', helpstring(u'Indicates if ZoomScale or ZoomPercent is being used.  The one specified last is being used.')], HRESULT, 'UsingZoomScale',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'UsingZoomScale' )),
    COMMETHOD(['propget', helpstring(u'Zoom amount as a percentage.  100 means show the underlying map at normal size.')], HRESULT, 'ZoomPercent',
              ( ['retval', 'out'], POINTER(c_double), 'percent' )),
    COMMETHOD(['propput', helpstring(u'Zoom amount as a percentage.  100 means show the underlying map at normal size.')], HRESULT, 'ZoomPercent',
              ( ['in'], c_double, 'percent' )),
    COMMETHOD(['propget', helpstring(u'The zoom amount as an absolute Scale (i.e., 1:20000).')], HRESULT, 'ZoomScale',
              ( ['retval', 'out'], POINTER(c_double), 'Scale' )),
    COMMETHOD(['propput', helpstring(u'The zoom amount as an absolute Scale (i.e., 1:20000).')], HRESULT, 'ZoomScale',
              ( ['in'], c_double, 'Scale' )),
    COMMETHOD(['propget', helpstring(u'Description reflecting the current settings of the MapInset.')], HRESULT, 'Description',
              ( ['retval', 'out'], POINTER(BSTR), 'Title' )),
    COMMETHOD([helpstring(u'Calculates the visible bounds by applying the zoom or scale parameter to MapBounds (used when snapshot is false).')], HRESULT, 'CalculateVisibleBounds'),
    COMMETHOD(['propget', helpstring(u'The maximum extent shown by the inset.')], HRESULT, 'FullExtent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'FullExtent' )),
    COMMETHOD(['propput', helpstring(u'The maximum extent shown by the inset.')], HRESULT, 'FullExtent',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'FullExtent' )),
    COMMETHOD(['propget', helpstring(u'Reference scale of the inset.')], HRESULT, 'ReferenceScale',
              ( ['retval', 'out'], POINTER(c_double), 'refScale' )),
    COMMETHOD(['propput', helpstring(u'Reference scale of the inset.')], HRESULT, 'ReferenceScale',
              ( ['in'], c_double, 'refScale' )),
    COMMETHOD([helpstring(u'Pixel extent of the inset.')], HRESULT, 'GetDeviceFrame',
              ( ['out'], POINTER(c_int), 'Left' ),
              ( ['out'], POINTER(c_int), 'top' ),
              ( ['out'], POINTER(c_int), 'Right' ),
              ( ['out'], POINTER(c_int), 'bottom' )),
    COMMETHOD([helpstring(u'Pixel extent of the inset.')], HRESULT, 'SetDeviceFrame',
              ( ['in'], c_int, 'Left' ),
              ( ['in'], c_int, 'top' ),
              ( ['in'], c_int, 'Right' ),
              ( ['in'], c_int, 'bottom' )),
]
################################################################
## code template for IMapInset2 implementation
##class IMapInset2_Impl(object):
##    @property
##    def UsingZoomScale(self):
##        u'Indicates if ZoomScale or ZoomPercent is being used.  The one specified last is being used.'
##        #return UsingZoomScale
##
##    def _get(self):
##        u'The relative position of the inset to the associated map (used when the inset is live). The zoom amount is applied to this rectangle to determine the visible bounds that is actually drawn.'
##        #return Bounds
##    def _set(self, Bounds):
##        u'The relative position of the inset to the associated map (used when the inset is live). The zoom amount is applied to this rectangle to determine the visible bounds that is actually drawn.'
##    MapBounds = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Description(self):
##        u'Description reflecting the current settings of the MapInset.'
##        #return Title
##
##    def GetDeviceFrame(self):
##        u'Pixel extent of the inset.'
##        #return Left, top, Right, bottom
##
##    def _get(self):
##        u'The zoom amount as an absolute Scale (i.e., 1:20000).'
##        #return Scale
##    def _set(self, Scale):
##        u'The zoom amount as an absolute Scale (i.e., 1:20000).'
##    ZoomScale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Zoom amount as a percentage.  100 means show the underlying map at normal size.'
##        #return percent
##    def _set(self, percent):
##        u'Zoom amount as a percentage.  100 means show the underlying map at normal size.'
##    ZoomPercent = property(_get, _set, doc = _set.__doc__)
##
##    def SetDeviceFrame(self, Left, top, Right, bottom):
##        u'Pixel extent of the inset.'
##        #return 
##
##    def _get(self):
##        u'Indicates if the inset shows a live view of the underlying map.  False means a snapshot of the underlying map is taken at the time the flag is changed.'
##        #return IsLive
##    def _set(self, IsLive):
##        u'Indicates if the inset shows a live view of the underlying map.  False means a snapshot of the underlying map is taken at the time the flag is changed.'
##    IsLive = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The maximum extent shown by the inset.'
##        #return FullExtent
##    def _set(self, FullExtent):
##        u'The maximum extent shown by the inset.'
##    FullExtent = property(_get, _set, doc = _set.__doc__)
##
##    def CalculateVisibleBounds(self):
##        u'Calculates the visible bounds by applying the zoom or scale parameter to MapBounds (used when snapshot is false).'
##        #return 
##
##    def _get(self):
##        u'The map extent shown by the inset (used when the inset is not live).'
##        #return VisibleBounds
##    def _set(self, VisibleBounds):
##        u'The map extent shown by the inset (used when the inset is not live).'
##    VisibleBounds = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Reference scale of the inset.'
##        #return refScale
##    def _set(self, refScale):
##        u'Reference scale of the inset.'
##    ReferenceScale = property(_get, _set, doc = _set.__doc__)
##

ILegendItem2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Name of the style.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the style is compatible with the specified layer.')], HRESULT, 'CanDisplay',
              ( ['in'], POINTER(ILayer), 'Layer' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'result' )),
    COMMETHOD(['propget', helpstring(u'Associated layer.')], HRESULT, 'Layer',
              ( ['retval', 'out'], POINTER(POINTER(ILayer)), 'Layer' )),
    COMMETHOD(['propputref', helpstring(u'Associated layer.')], HRESULT, 'Layer',
              ( ['in'], POINTER(ILayer), 'Layer' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the item starts a new column in the legend.')], HRESULT, 'NewColumn',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the item starts a new column in the legend.')], HRESULT, 'NewColumn',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Number of columns in the legend item.')], HRESULT, 'Columns',
              ( ['retval', 'out'], POINTER(c_short), 'Columns' )),
    COMMETHOD(['propput', helpstring(u'Number of columns in the legend item.')], HRESULT, 'Columns',
              ( ['in'], c_short, 'Columns' )),
    COMMETHOD(['propget', helpstring(u'Indicates if classes must appear in a single column or whether they can be split across multiple columns.')], HRESULT, 'KeepTogether',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if classes must appear in a single column or whether they can be split across multiple columns.')], HRESULT, 'KeepTogether',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates if layer name is visibile.')], HRESULT, 'ShowLayerName',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'ShowLayerName' )),
    COMMETHOD(['propput', helpstring(u'Indicates if layer name is visibile.')], HRESULT, 'ShowLayerName',
              ( ['in'], VARIANT_BOOL, 'ShowLayerName' )),
    COMMETHOD(['propget', helpstring(u'Text symbol used to draw the layer name.')], HRESULT, 'LayerNameSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol)), 'Symbol' )),
    COMMETHOD(['propput', helpstring(u'Text symbol used to draw the layer name.')], HRESULT, 'LayerNameSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'Zero-based index of the legend group shown by this item.  Use -1 to show all legend groups using this item.')], HRESULT, 'GroupIndex',
              ( ['retval', 'out'], POINTER(c_int), 'Index' )),
    COMMETHOD(['propput', helpstring(u'Zero-based index of the legend group shown by this item.  Use -1 to show all legend groups using this item.')], HRESULT, 'GroupIndex',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD(['propget', helpstring(u'Indicates if heading is visibile.')], HRESULT, 'ShowHeading',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'ShowHeading' )),
    COMMETHOD(['propput', helpstring(u'Indicates if heading is visibile.')], HRESULT, 'ShowHeading',
              ( ['in'], VARIANT_BOOL, 'ShowHeading' )),
    COMMETHOD(['propget', helpstring(u'Text symbol used to draw the heading.')], HRESULT, 'HeadingSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol)), 'Symbol' )),
    COMMETHOD(['propput', helpstring(u'Text symbol used to draw the heading.')], HRESULT, 'HeadingSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'Default formatting information for the legend classes.  Renderer may override.')], HRESULT, 'LegendClassFormat',
              ( ['retval', 'out'], POINTER(POINTER(ILegendClassFormat)), 'Format' )),
    COMMETHOD(['propput', helpstring(u'Default formatting information for the legend classes.  Renderer may override.')], HRESULT, 'LegendClassFormat',
              ( ['in'], POINTER(ILegendClassFormat), 'Format' )),
    COMMETHOD(['propget', helpstring(u'Indicates if labels are visible.')], HRESULT, 'ShowLabels',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'ShowLabels' )),
    COMMETHOD(['propput', helpstring(u'Indicates if labels are visible.')], HRESULT, 'ShowLabels',
              ( ['in'], VARIANT_BOOL, 'ShowLabels' )),
    COMMETHOD(['propget', helpstring(u'Indicates if descriptions are visible.')], HRESULT, 'ShowDescriptions',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'ShowDescriptions' )),
    COMMETHOD(['propput', helpstring(u'Indicates if descriptions are visible.')], HRESULT, 'ShowDescriptions',
              ( ['in'], VARIANT_BOOL, 'ShowDescriptions' )),
    COMMETHOD([helpstring(u'Rebuilds the list of graphics.  Call whenever the associated layer changes.')], HRESULT, 'CreateGraphics',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], POINTER(ILegendFormat), 'LegendFormat' )),
    COMMETHOD(['propget', helpstring(u'Width of the item in points. Must call CreateGraphics first.')], HRESULT, 'Width',
              ( ['retval', 'out'], POINTER(c_double), 'Width' )),
    COMMETHOD(['propget', helpstring(u'Height of the item in points. Must call CreateGraphics first.')], HRESULT, 'Height',
              ( ['retval', 'out'], POINTER(c_double), 'Height' )),
    COMMETHOD(['propget', helpstring(u'List of graphics that represent the legend item.  Must call CreateGraphics first.')], HRESULT, 'Graphics',
              ( ['retval', 'out'], POINTER(POINTER(IEnumElement)), 'Graphics' )),
    COMMETHOD([helpstring(u"Indicates if a legend's flow direction changes.  Update alignment settings.")], HRESULT, 'ChangeFlowDirection',
              ( [], VARIANT_BOOL, 'RightToLeft' )),
]
################################################################
## code template for ILegendItem2 implementation
##class ILegendItem2_Impl(object):
##    def Layer(self, Layer):
##        u'Associated layer.'
##        #return 
##
##    @property
##    def Name(self):
##        u'Name of the style.'
##        #return Name
##
##    def _get(self):
##        u'Indicates if layer name is visibile.'
##        #return ShowLayerName
##    def _set(self, ShowLayerName):
##        u'Indicates if layer name is visibile.'
##    ShowLayerName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if labels are visible.'
##        #return ShowLabels
##    def _set(self, ShowLabels):
##        u'Indicates if labels are visible.'
##    ShowLabels = property(_get, _set, doc = _set.__doc__)
##
##    def CreateGraphics(self, Display, LegendFormat):
##        u'Rebuilds the list of graphics.  Call whenever the associated layer changes.'
##        #return 
##
##    def _get(self):
##        u'Indicates if descriptions are visible.'
##        #return ShowDescriptions
##    def _set(self, ShowDescriptions):
##        u'Indicates if descriptions are visible.'
##    ShowDescriptions = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Height(self):
##        u'Height of the item in points. Must call CreateGraphics first.'
##        #return Height
##
##    def _get(self):
##        u'Indicates if heading is visibile.'
##        #return ShowHeading
##    def _set(self, ShowHeading):
##        u'Indicates if heading is visibile.'
##    ShowHeading = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Width(self):
##        u'Width of the item in points. Must call CreateGraphics first.'
##        #return Width
##
##    @property
##    def CanDisplay(self, Layer):
##        u'Indicates if the style is compatible with the specified layer.'
##        #return result
##
##    def _get(self):
##        u'Indicates if classes must appear in a single column or whether they can be split across multiple columns.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if classes must appear in a single column or whether they can be split across multiple columns.'
##    KeepTogether = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Text symbol used to draw the heading.'
##        #return Symbol
##    def _set(self, Symbol):
##        u'Text symbol used to draw the heading.'
##    HeadingSymbol = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Graphics(self):
##        u'List of graphics that represent the legend item.  Must call CreateGraphics first.'
##        #return Graphics
##
##    def ChangeFlowDirection(self, RightToLeft):
##        u"Indicates if a legend's flow direction changes.  Update alignment settings."
##        #return 
##
##    def _get(self):
##        u'Zero-based index of the legend group shown by this item.  Use -1 to show all legend groups using this item.'
##        #return Index
##    def _set(self, Index):
##        u'Zero-based index of the legend group shown by this item.  Use -1 to show all legend groups using this item.'
##    GroupIndex = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Text symbol used to draw the layer name.'
##        #return Symbol
##    def _set(self, Symbol):
##        u'Text symbol used to draw the layer name.'
##    LayerNameSymbol = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Default formatting information for the legend classes.  Renderer may override.'
##        #return Format
##    def _set(self, Format):
##        u'Default formatting information for the legend classes.  Renderer may override.'
##    LegendClassFormat = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Number of columns in the legend item.'
##        #return Columns
##    def _set(self, Columns):
##        u'Number of columns in the legend item.'
##    Columns = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the item starts a new column in the legend.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if the item starts a new column in the legend.'
##    NewColumn = property(_get, _set, doc = _set.__doc__)
##

class PropertyInfos(CoClass):
    u'PropertyInfos co-class.'
    _reg_clsid_ = GUID('{1D8936B7-C589-4140-8F7B-40DD8B17EDA5}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
PropertyInfos._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IPropertyInfos, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

IMaplexLabelStackingProperties._methods_ = [
    COMMETHOD(['propget', helpstring(u'Justification options for label stacking.')], HRESULT, 'StackJustification',
              ( ['retval', 'out'], POINTER(esriMaplexStackingJustification), 'option' )),
    COMMETHOD(['propput', helpstring(u'Justification options for label stacking.')], HRESULT, 'StackJustification',
              ( ['in'], esriMaplexStackingJustification, 'option' )),
    COMMETHOD([helpstring(u'Adds the specified separator to the collection.')], HRESULT, 'AddSeparator',
              ( ['in'], BSTR, 'Separator' ),
              ( ['in'], VARIANT_BOOL, 'Visible' ),
              ( ['in'], VARIANT_BOOL, 'splitForced' ),
              ( ['in'], VARIANT_BOOL, 'splitAfter' )),
    COMMETHOD(['propget', helpstring(u'The number of separator in the collection.')], HRESULT, 'SeparatorCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD([helpstring(u'Returns the separator in the collection at the specified index.')], HRESULT, 'QuerySeparator',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(BSTR), 'Separator' ),
              ( ['out'], POINTER(VARIANT_BOOL), 'Visible' ),
              ( ['out'], POINTER(VARIANT_BOOL), 'splitForced' ),
              ( ['out'], POINTER(VARIANT_BOOL), 'splitAfter' )),
    COMMETHOD([helpstring(u'Removes all the separators in the collection.')], HRESULT, 'ClearSeparators'),
    COMMETHOD(['propget', helpstring(u'Maximum number of lines on which the label may be stacked.')], HRESULT, 'MaximumNumberOfLines',
              ( ['retval', 'out'], POINTER(c_int), 'limit' )),
    COMMETHOD(['propput', helpstring(u'Maximum number of lines on which the label may be stacked.')], HRESULT, 'MaximumNumberOfLines',
              ( ['in'], c_int, 'limit' )),
    COMMETHOD(['propget', helpstring(u'Minimum number of characters required on each line.')], HRESULT, 'MinimumNumberOfCharsPerLine',
              ( ['retval', 'out'], POINTER(c_int), 'limit' )),
    COMMETHOD(['propput', helpstring(u'Minimum number of characters required on each line.')], HRESULT, 'MinimumNumberOfCharsPerLine',
              ( ['in'], c_int, 'limit' )),
    COMMETHOD(['propget', helpstring(u'Maximum number of characters allowed on a line.')], HRESULT, 'MaximumNumberOfCharsPerLine',
              ( ['retval', 'out'], POINTER(c_int), 'limit' )),
    COMMETHOD(['propput', helpstring(u'Maximum number of characters allowed on a line.')], HRESULT, 'MaximumNumberOfCharsPerLine',
              ( ['in'], c_int, 'limit' )),
]
################################################################
## code template for IMaplexLabelStackingProperties implementation
##class IMaplexLabelStackingProperties_Impl(object):
##    def _get(self):
##        u'Maximum number of lines on which the label may be stacked.'
##        #return limit
##    def _set(self, limit):
##        u'Maximum number of lines on which the label may be stacked.'
##    MaximumNumberOfLines = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SeparatorCount(self):
##        u'The number of separator in the collection.'
##        #return Count
##
##    def AddSeparator(self, Separator, Visible, splitForced, splitAfter):
##        u'Adds the specified separator to the collection.'
##        #return 
##
##    def QuerySeparator(self, Index):
##        u'Returns the separator in the collection at the specified index.'
##        #return Separator, Visible, splitForced, splitAfter
##
##    def _get(self):
##        u'Maximum number of characters allowed on a line.'
##        #return limit
##    def _set(self, limit):
##        u'Maximum number of characters allowed on a line.'
##    MaximumNumberOfCharsPerLine = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Minimum number of characters required on each line.'
##        #return limit
##    def _set(self, limit):
##        u'Minimum number of characters required on each line.'
##    MinimumNumberOfCharsPerLine = property(_get, _set, doc = _set.__doc__)
##
##    def ClearSeparators(self):
##        u'Removes all the separators in the collection.'
##        #return 
##
##    def _get(self):
##        u'Justification options for label stacking.'
##        #return option
##    def _set(self, option):
##        u'Justification options for label stacking.'
##    StackJustification = property(_get, _set, doc = _set.__doc__)
##

IDimensionClassExtension._methods_ = [
    COMMETHOD(['propget', helpstring(u'The collection of dimension styles associated with the dimension feature class.')], HRESULT, 'DimensionStyles',
              ( ['retval', 'out'], POINTER(POINTER(IDimensionStyles)), 'styles' )),
    COMMETHOD([helpstring(u"Updates the dimension featrue class' properties.")], HRESULT, 'UpdateProperties'),
    COMMETHOD([helpstring(u'Resets the in state of the dimension feature class properties.')], HRESULT, 'ResetProperties'),
    COMMETHOD(['propget', helpstring(u'The reference scale of the dimension feature class.')], HRESULT, 'ReferenceScale',
              ( ['retval', 'out'], POINTER(c_double), 'Scale' )),
    COMMETHOD(['propput', helpstring(u'The reference scale of the dimension feature class.')], HRESULT, 'ReferenceScale',
              ( ['in'], c_double, 'Scale' )),
    COMMETHOD(['propget', helpstring(u'The reference scale units of the dimension feature class.')], HRESULT, 'ReferenceScaleUnits',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits), 'Units' )),
    COMMETHOD(['propput', helpstring(u'The reference scale units of the dimension feature class.')], HRESULT, 'ReferenceScaleUnits',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits, 'Units' )),
    COMMETHOD(['propget', helpstring(u'The native display transformation of the dimension feature class.')], HRESULT, 'NativeTransformation',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ITransformation)), 'transformation' )),
]
################################################################
## code template for IDimensionClassExtension implementation
##class IDimensionClassExtension_Impl(object):
##    def UpdateProperties(self):
##        u"Updates the dimension featrue class' properties."
##        #return 
##
##    def ResetProperties(self):
##        u'Resets the in state of the dimension feature class properties.'
##        #return 
##
##    @property
##    def DimensionStyles(self):
##        u'The collection of dimension styles associated with the dimension feature class.'
##        #return styles
##
##    def _get(self):
##        u'The reference scale units of the dimension feature class.'
##        #return Units
##    def _set(self, Units):
##        u'The reference scale units of the dimension feature class.'
##    ReferenceScaleUnits = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def NativeTransformation(self):
##        u'The native display transformation of the dimension feature class.'
##        #return transformation
##
##    def _get(self):
##        u'The reference scale of the dimension feature class.'
##        #return Scale
##    def _set(self, Scale):
##        u'The reference scale of the dimension feature class.'
##    ReferenceScale = property(_get, _set, doc = _set.__doc__)
##

class MSDHelper(CoClass):
    u'Coclass implementing methods to open, save, repair mapserver definition files.'
    _reg_clsid_ = GUID('{5BE34EF4-371F-458B-8F77-AF42601740A7}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
MSDHelper._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMSDHelper, IMSDHelper2]

class ILineLabelPlacementDescription(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Line Label Placement Description Interface.'
    _iid_ = GUID('{8AB8C4FC-1B4C-48F8-A03A-DE1F7E85EA30}')
    _idlflags_ = ['oleautomation']
ILineLabelPlacementDescription._methods_ = [
    COMMETHOD(['propget', helpstring(u'Line Label Placement Type.')], HRESULT, 'Type',
              ( ['retval', 'out'], POINTER(esriServerLineLabelPlacementType), 'PlacementType' )),
    COMMETHOD(['propput', helpstring(u'Line Label Placement Type.')], HRESULT, 'Type',
              ( ['in'], esriServerLineLabelPlacementType, 'PlacementType' )),
]
################################################################
## code template for ILineLabelPlacementDescription implementation
##class ILineLabelPlacementDescription_Impl(object):
##    def _get(self):
##        u'Line Label Placement Type.'
##        #return PlacementType
##    def _set(self, PlacementType):
##        u'Line Label Placement Type.'
##    Type = property(_get, _set, doc = _set.__doc__)
##

IMapAdmin4._methods_ = [
    COMMETHOD(['propget', helpstring(u'Returns the layer which defines map domain, 0 if domain is the union of all layers.')], HRESULT, 'DomainDefiningLayer',
              ( ['retval', 'out'], POINTER(POINTER(ILayer)), 'Layer' )),
    COMMETHOD(['propput', helpstring(u'Returns the layer which defines map domain, 0 if domain is the union of all layers.')], HRESULT, 'DomainDefiningLayer',
              ( ['in'], POINTER(ILayer), 'Layer' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to simulate transparency and other effects in legends.')], HRESULT, 'SimulateLayerEffectsInLegends',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to simulate transparency and other effects in legends.')], HRESULT, 'SimulateLayerEffectsInLegends',
              ( ['in'], VARIANT_BOOL, 'flag' )),
]
################################################################
## code template for IMapAdmin4 implementation
##class IMapAdmin4_Impl(object):
##    def _get(self):
##        u'Returns the layer which defines map domain, 0 if domain is the union of all layers.'
##        #return Layer
##    def _set(self, Layer):
##        u'Returns the layer which defines map domain, 0 if domain is the union of all layers.'
##    DomainDefiningLayer = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether to simulate transparency and other effects in legends.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether to simulate transparency and other effects in legends.'
##    SimulateLayerEffectsInLegends = property(_get, _set, doc = _set.__doc__)
##

IMapBarriers._methods_ = [
    COMMETHOD(['propget', helpstring(u'The list of barriers and their weight for labeling.')], HRESULT, 'Barriers2',
              ( [], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'pExtent' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' ),
              ( ['retval', 'out'], POINTER(POINTER(IBarrierCollection)), 'Barriers' )),
]
################################################################
## code template for IMapBarriers implementation
##class IMapBarriers_Impl(object):
##    @property
##    def Barriers2(self, pExtent, pTrackCancel):
##        u'The list of barriers and their weight for labeling.'
##        #return Barriers
##

IDynamicLayerDescription._methods_ = [
    COMMETHOD(['propget', helpstring(u'Data source for dynamic table.')], HRESULT, 'Source',
              ( ['retval', 'out'], POINTER(POINTER(IMapServerSourceDescription)), 'ppMapServerSourceDescription' )),
    COMMETHOD(['propput', helpstring(u'Data source for dynamic table.')], HRESULT, 'Source',
              ( ['in'], POINTER(IMapServerSourceDescription), 'ppMapServerSourceDescription' )),
    COMMETHOD(['propputref', helpstring(u'Drawing Descriptions.')], HRESULT, 'DrawingDescription',
              ( ['in'], POINTER(ILayerDrawingDescription), 'ppLayerDrawingDescription' )),
    COMMETHOD(['propget', helpstring(u'Drawing Descriptions.')], HRESULT, 'DrawingDescription',
              ( ['retval', 'out'], POINTER(POINTER(ILayerDrawingDescription)), 'ppLayerDrawingDescription' )),
]
################################################################
## code template for IDynamicLayerDescription implementation
##class IDynamicLayerDescription_Impl(object):
##    def _get(self):
##        u'Data source for dynamic table.'
##        #return ppMapServerSourceDescription
##    def _set(self, ppMapServerSourceDescription):
##        u'Data source for dynamic table.'
##    Source = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def DrawingDescription(self, ppLayerDrawingDescription):
##        u'Drawing Descriptions.'
##        #return 
##

class GraphicFeature(CoClass):
    u'Graphic Feature co-class.'
    _reg_clsid_ = GUID('{B39950E4-4ACD-40E1-94BE-C2C236428459}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
GraphicFeature._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGraphicFeature, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class DataObjectArray(CoClass):
    u'DataObjectArray co-class.'
    _reg_clsid_ = GUID('{24E001B9-BFB0-4D5E-B8C1-EC954D9FB85A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
DataObjectArray._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDataObjectArray, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

IMapBarriers2._methods_ = [
    COMMETHOD(['propget', helpstring(u'The list of barriers and their weight for labeling.')], HRESULT, 'Barriers3',
              ( [], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'pExtent' ),
              ( ['in'], c_double, 'Scale' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' ),
              ( ['retval', 'out'], POINTER(POINTER(IBarrierCollection)), 'Barriers' )),
]
################################################################
## code template for IMapBarriers2 implementation
##class IMapBarriers2_Impl(object):
##    @property
##    def Barriers3(self, pExtent, Scale, pTrackCancel):
##        u'The list of barriers and their weight for labeling.'
##        #return Barriers
##

class IDimensionFeature(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a dimension feature.'
    _iid_ = GUID('{5C305710-DA7F-11D3-80CE-00C04F601565}')
    _idlflags_ = ['oleautomation']
IDimensionFeature._methods_ = [
    COMMETHOD(['propput', helpstring(u"The dimension feature's shape.")], HRESULT, 'DimensionShape',
              ( ['in'], POINTER(IDimensionShape), 'Shape' )),
    COMMETHOD(['propget', helpstring(u"The dimension feature's shape.")], HRESULT, 'DimensionShape',
              ( ['retval', 'out'], POINTER(POINTER(IDimensionShape)), 'Shape' )),
    COMMETHOD(['propget', helpstring(u"The dimension feature's style Id.")], HRESULT, 'StyleID',
              ( ['retval', 'out'], POINTER(c_int), 'ID' )),
    COMMETHOD(['propput', helpstring(u"The dimension feature's style Id.")], HRESULT, 'StyleID',
              ( ['in'], c_int, 'ID' )),
    COMMETHOD(['propget', helpstring(u"The dimension feature's length.")], HRESULT, 'Length',
              ( ['retval', 'out'], POINTER(c_double), 'Length' )),
    COMMETHOD(['propget', helpstring(u"The dimension feature's custom or user-defined length.")], HRESULT, 'CustomLength',
              ( ['retval', 'out'], POINTER(c_double), 'Length' )),
    COMMETHOD(['propput', helpstring(u"The dimension feature's custom or user-defined length.")], HRESULT, 'CustomLength',
              ( ['in'], c_double, 'Length' )),
    COMMETHOD(['propget', helpstring(u'Indicates if this dimension feature displays the dimension length or a custom length.')], HRESULT, 'UseCustomLength',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'use' )),
    COMMETHOD(['propput', helpstring(u'Indicates if this dimension feature displays the dimension length or a custom length.')], HRESULT, 'UseCustomLength',
              ( ['in'], VARIANT_BOOL, 'use' )),
    COMMETHOD(['propput', helpstring(u'The dimension line display for the feature.')], HRESULT, 'DimensionLineDisplay',
              ( ['in'], esriDimensionDisplay, 'displayOption' )),
    COMMETHOD(['propget', helpstring(u'The dimension line display for the feature.')], HRESULT, 'DimensionLineDisplay',
              ( ['retval', 'out'], POINTER(esriDimensionDisplay), 'displayOption' )),
    COMMETHOD(['propput', helpstring(u'The extension line display of the feature.')], HRESULT, 'ExtensionLineDisplay',
              ( ['in'], esriDimensionDisplay, 'displayOption' )),
    COMMETHOD(['propget', helpstring(u'The extension line display of the feature.')], HRESULT, 'ExtensionLineDisplay',
              ( ['retval', 'out'], POINTER(esriDimensionDisplay), 'displayOption' )),
    COMMETHOD(['propput', helpstring(u'The arrow display of the feature.')], HRESULT, 'MarkerDisplay',
              ( ['in'], esriDimensionDisplay, 'displayOption' )),
    COMMETHOD(['propget', helpstring(u'The arrow display of the feature.')], HRESULT, 'MarkerDisplay',
              ( ['retval', 'out'], POINTER(esriDimensionDisplay), 'displayOption' )),
    COMMETHOD(['propget', helpstring(u'The dimension type of the feature.')], HRESULT, 'DimensionType',
              ( ['retval', 'out'], POINTER(esriDimensionType), 'Type' )),
    COMMETHOD(['propput', helpstring(u'The dimension type of the feature.')], HRESULT, 'DimensionType',
              ( ['in'], esriDimensionType, 'Type' )),
]
################################################################
## code template for IDimensionFeature implementation
##class IDimensionFeature_Impl(object):
##    def _get(self):
##        u"The dimension feature's shape."
##        #return Shape
##    def _set(self, Shape):
##        u"The dimension feature's shape."
##    DimensionShape = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The extension line display of the feature.'
##        #return displayOption
##    def _set(self, displayOption):
##        u'The extension line display of the feature.'
##    ExtensionLineDisplay = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if this dimension feature displays the dimension length or a custom length.'
##        #return use
##    def _set(self, use):
##        u'Indicates if this dimension feature displays the dimension length or a custom length.'
##    UseCustomLength = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The arrow display of the feature.'
##        #return displayOption
##    def _set(self, displayOption):
##        u'The arrow display of the feature.'
##    MarkerDisplay = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The dimension line display for the feature.'
##        #return displayOption
##    def _set(self, displayOption):
##        u'The dimension line display for the feature.'
##    DimensionLineDisplay = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The dimension type of the feature.'
##        #return Type
##    def _set(self, Type):
##        u'The dimension type of the feature.'
##    DimensionType = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Length(self):
##        u"The dimension feature's length."
##        #return Length
##
##    def _get(self):
##        u"The dimension feature's style Id."
##        #return ID
##    def _set(self, ID):
##        u"The dimension feature's style Id."
##    StyleID = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u"The dimension feature's custom or user-defined length."
##        #return Length
##    def _set(self, Length):
##        u"The dimension feature's custom or user-defined length."
##    CustomLength = property(_get, _set, doc = _set.__doc__)
##

IMaplexOffsetAlongLineProperties._methods_ = [
    COMMETHOD(['propget', helpstring(u'Method of placing label along the line.')], HRESULT, 'PlacementMethod',
              ( ['retval', 'out'], POINTER(esriMaplexOffsetAlongLineMethod), 'option' )),
    COMMETHOD(['propput', helpstring(u'Method of placing label along the line.')], HRESULT, 'PlacementMethod',
              ( ['in'], esriMaplexOffsetAlongLineMethod, 'option' )),
    COMMETHOD(['propget', helpstring(u'Anchor point on label where distance is measured to.')], HRESULT, 'LabelAnchorPoint',
              ( ['retval', 'out'], POINTER(esriMaplexLabelAnchorPoint), 'option' )),
    COMMETHOD(['propput', helpstring(u'Anchor point on label where distance is measured to.')], HRESULT, 'LabelAnchorPoint',
              ( ['in'], esriMaplexLabelAnchorPoint, 'option' )),
    COMMETHOD(['propget', helpstring(u'Distance along the line.')], HRESULT, 'Distance',
              ( ['retval', 'out'], POINTER(c_double), 'Distance' )),
    COMMETHOD(['propput', helpstring(u'Distance along the line.')], HRESULT, 'Distance',
              ( ['in'], c_double, 'Distance' )),
    COMMETHOD(['propget', helpstring(u'Tolerance either side of the specified position.')], HRESULT, 'Tolerance',
              ( ['retval', 'out'], POINTER(c_double), 'Distance' )),
    COMMETHOD(['propput', helpstring(u'Tolerance either side of the specified position.')], HRESULT, 'Tolerance',
              ( ['in'], c_double, 'Distance' )),
    COMMETHOD(['propget', helpstring(u'The distance and tolerance are interpreted to be in this unit.')], HRESULT, 'DistanceUnit',
              ( ['retval', 'out'], POINTER(esriMaplexUnit), 'unit' )),
    COMMETHOD(['propput', helpstring(u'The distance and tolerance are interpreted to be in this unit.')], HRESULT, 'DistanceUnit',
              ( ['in'], esriMaplexUnit, 'unit' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to preserve the direction of line.')], HRESULT, 'UseLineDirection',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to preserve the direction of line.')], HRESULT, 'UseLineDirection',
              ( ['in'], VARIANT_BOOL, 'flag' )),
]
################################################################
## code template for IMaplexOffsetAlongLineProperties implementation
##class IMaplexOffsetAlongLineProperties_Impl(object):
##    def _get(self):
##        u'Distance along the line.'
##        #return Distance
##    def _set(self, Distance):
##        u'Distance along the line.'
##    Distance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Method of placing label along the line.'
##        #return option
##    def _set(self, option):
##        u'Method of placing label along the line.'
##    PlacementMethod = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The distance and tolerance are interpreted to be in this unit.'
##        #return unit
##    def _set(self, unit):
##        u'The distance and tolerance are interpreted to be in this unit.'
##    DistanceUnit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether to preserve the direction of line.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether to preserve the direction of line.'
##    UseLineDirection = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Tolerance either side of the specified position.'
##        #return Distance
##    def _set(self, Distance):
##        u'Tolerance either side of the specified position.'
##    Tolerance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Anchor point on label where distance is measured to.'
##        #return option
##    def _set(self, option):
##        u'Anchor point on label where distance is measured to.'
##    LabelAnchorPoint = property(_get, _set, doc = _set.__doc__)
##

INewDimensionFeedback._methods_ = [
    COMMETHOD(['propput', helpstring(u'The dimension style for the display feedback.')], HRESULT, 'Style',
              ( ['in'], POINTER(IDimensionStyle), 'rhs' )),
    COMMETHOD([helpstring(u'Starts the display feedback.')], HRESULT, 'Start',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'begin' )),
    COMMETHOD([helpstring(u'Adds a point to the display feedback.')], HRESULT, 'AddPoint',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'point' )),
    COMMETHOD([helpstring(u'Stops the display feedback and returns the points.')], HRESULT, 'Stop',
              ( ['retval', 'out'], POINTER(POINTER(IDimensionShape)), 'Shape' )),
    COMMETHOD(['propget', helpstring(u'The dimension type of the display feedback.')], HRESULT, 'DimensionType',
              ( ['retval', 'out'], POINTER(esriDimensionType), 'Type' )),
    COMMETHOD(['propput', helpstring(u'The dimension type of the display feedback.')], HRESULT, 'DimensionType',
              ( ['in'], esriDimensionType, 'Type' )),
    COMMETHOD(['propget', helpstring(u'The reference scale of the display feedback.')], HRESULT, 'ReferenceScale',
              ( ['retval', 'out'], POINTER(c_double), 'Scale' )),
    COMMETHOD(['propput', helpstring(u'The reference scale of the display feedback.')], HRESULT, 'ReferenceScale',
              ( ['in'], c_double, 'Scale' )),
    COMMETHOD(['propget', helpstring(u'The reference scale units of the display feedback.')], HRESULT, 'ReferenceScaleUnits',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits), 'Units' )),
    COMMETHOD(['propput', helpstring(u'The reference scale units of the display feedback.')], HRESULT, 'ReferenceScaleUnits',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits, 'Units' )),
]
################################################################
## code template for INewDimensionFeedback implementation
##class INewDimensionFeedback_Impl(object):
##    def AddPoint(self, point):
##        u'Adds a point to the display feedback.'
##        #return 
##
##    def _set(self, rhs):
##        u'The dimension style for the display feedback.'
##    Style = property(fset = _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The dimension type of the display feedback.'
##        #return Type
##    def _set(self, Type):
##        u'The dimension type of the display feedback.'
##    DimensionType = property(_get, _set, doc = _set.__doc__)
##
##    def Stop(self):
##        u'Stops the display feedback and returns the points.'
##        #return Shape
##
##    def Start(self, begin):
##        u'Starts the display feedback.'
##        #return 
##
##    def _get(self):
##        u'The reference scale units of the display feedback.'
##        #return Units
##    def _set(self, Units):
##        u'The reference scale units of the display feedback.'
##    ReferenceScaleUnits = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The reference scale of the display feedback.'
##        #return Scale
##    def _set(self, Scale):
##        u'The reference scale of the display feedback.'
##    ReferenceScale = property(_get, _set, doc = _set.__doc__)
##

ISelection._methods_ = [
    COMMETHOD([helpstring(u'Indicates if the selection can be cut.')], HRESULT, 'CanCut',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'result' )),
    COMMETHOD([helpstring(u'Indicates if the selection can be copied.')], HRESULT, 'CanCopy',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'result' )),
    COMMETHOD([helpstring(u'Indicates if paste is supported.')], HRESULT, 'CanPaste',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'result' )),
    COMMETHOD([helpstring(u'Indicates if the selection can be cleared.')], HRESULT, 'CanClear',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'result' )),
    COMMETHOD([helpstring(u"Indicates if there's something to select.")], HRESULT, 'CanSelectAll',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'result' )),
    COMMETHOD([helpstring(u'Cut the selected items to the clipboard.')], HRESULT, 'Cut'),
    COMMETHOD([helpstring(u'Copy the selected items to the clipboard.')], HRESULT, 'Copy'),
    COMMETHOD([helpstring(u'Paste clipboard contents.')], HRESULT, 'Paste'),
    COMMETHOD([helpstring(u'Clears all items in the selection.')], HRESULT, 'Clear'),
    COMMETHOD([helpstring(u'Selects all items.')], HRESULT, 'SelectAll'),
    COMMETHOD([helpstring(u'Draw the selected items.')], HRESULT, 'Draw',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'CancelTracker' )),
]
################################################################
## code template for ISelection implementation
##class ISelection_Impl(object):
##    def SelectAll(self):
##        u'Selects all items.'
##        #return 
##
##    def CanCopy(self):
##        u'Indicates if the selection can be copied.'
##        #return result
##
##    def Cut(self):
##        u'Cut the selected items to the clipboard.'
##        #return 
##
##    def Clear(self):
##        u'Clears all items in the selection.'
##        #return 
##
##    def Draw(self, Display, CancelTracker):
##        u'Draw the selected items.'
##        #return 
##
##    def CanPaste(self):
##        u'Indicates if paste is supported.'
##        #return result
##
##    def CanCut(self):
##        u'Indicates if the selection can be cut.'
##        #return result
##
##    def CanClear(self):
##        u'Indicates if the selection can be cleared.'
##        #return result
##
##    def CanSelectAll(self):
##        u"Indicates if there's something to select."
##        #return result
##
##    def Copy(self):
##        u'Copy the selected items to the clipboard.'
##        #return 
##
##    def Paste(self):
##        u'Paste clipboard contents.'
##        #return 
##

class IPolygonLabelPlacementDescription(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Polygon Label Placement Description Interface.'
    _iid_ = GUID('{2DC28F2E-9B84-4816-A9FC-5F9D3BD76836}')
    _idlflags_ = ['oleautomation']
IPolygonLabelPlacementDescription._methods_ = [
    COMMETHOD(['propget', helpstring(u'Polygon Label Placement Type.')], HRESULT, 'Type',
              ( ['retval', 'out'], POINTER(esriServerPolygonLabelPlacementType), 'PlacementType' )),
    COMMETHOD(['propput', helpstring(u'Polygon Label Placement Type.')], HRESULT, 'Type',
              ( ['in'], esriServerPolygonLabelPlacementType, 'PlacementType' )),
]
################################################################
## code template for IPolygonLabelPlacementDescription implementation
##class IPolygonLabelPlacementDescription_Impl(object):
##    def _get(self):
##        u'Polygon Label Placement Type.'
##        #return PlacementType
##    def _set(self, PlacementType):
##        u'Polygon Label Placement Type.'
##    Type = property(_get, _set, doc = _set.__doc__)
##

class LabelingDescription(CoClass):
    u'Labeling Description coclass.'
    _reg_clsid_ = GUID('{9D5143D0-9737-40EB-9C9B-AC134831C6E0}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
LabelingDescription._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILabelingDescription, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersionSupportGEN]

IMapAdmin._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The background to use when drawing to destinations other than a frame.')], HRESULT, 'NonFrameBackground',
              ( ['in'], POINTER(IBackground), 'rhs' )),
    COMMETHOD(['propput', helpstring(u'Specify a boundary to clip to.  Frame uses this to clip to border.')], HRESULT, 'ClipBounds',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'rhs' )),
    COMMETHOD([helpstring(u'Fire AfterDraw(esriViewForeground) event.')], HRESULT, 'FireAfterDraw',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE, 'hDC' )),
    COMMETHOD([helpstring(u'Notifies listeners that a version in the map changed.')], HRESULT, 'FireChangeVersion',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IVersion), 'oldVersion' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IVersion), 'newVersion' )),
    COMMETHOD([helpstring(u"Notifies listeners that the a layer's class has changed.")], HRESULT, 'FireChangeFeatureClass',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClass), 'oldClass' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClass), 'newClass' )),
]
################################################################
## code template for IMapAdmin implementation
##class IMapAdmin_Impl(object):
##    def FireChangeFeatureClass(self, oldClass, newClass):
##        u"Notifies listeners that the a layer's class has changed."
##        #return 
##
##    def FireChangeVersion(self, oldVersion, newVersion):
##        u'Notifies listeners that a version in the map changed.'
##        #return 
##
##    def FireAfterDraw(self, hDC):
##        u'Fire AfterDraw(esriViewForeground) event.'
##        #return 
##
##    def NonFrameBackground(self, rhs):
##        u'The background to use when drawing to destinations other than a frame.'
##        #return 
##
##    def _set(self, rhs):
##        u'Specify a boundary to clip to.  Frame uses this to clip to border.'
##    ClipBounds = property(fset = _set, doc = _set.__doc__)
##

class IFeatureFindData(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to data associated with each row in the MxFind dialog when finding features.(Obsolete at 8.1 use IFeatureFindData2).'
    _iid_ = GUID('{9305B83A-5D4D-11D2-A07B-0000F8775BF9}')
    _idlflags_ = ['oleautomation']
IFeatureFindData._methods_ = [
    COMMETHOD(['propget', helpstring(u'The feature.')], HRESULT, 'Feature',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeature)), 'ppFeature' )),
    COMMETHOD(['propget', helpstring(u'The Layer.')], HRESULT, 'Layer',
              ( ['retval', 'out'], POINTER(POINTER(ILayer)), 'ppLayer' )),
    COMMETHOD(['propget', helpstring(u'The active view.')], HRESULT, 'ActiveView',
              ( ['retval', 'out'], POINTER(POINTER(IActiveView)), 'ppActiveView' )),
    COMMETHOD(['propputref', helpstring(u'The feature.')], HRESULT, 'Feature',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeature), 'ppFeature' )),
    COMMETHOD(['propputref', helpstring(u'The Layer.')], HRESULT, 'Layer',
              ( ['in'], POINTER(ILayer), 'ppLayer' )),
    COMMETHOD(['propputref', helpstring(u'The active view.')], HRESULT, 'ActiveView',
              ( ['in'], POINTER(IActiveView), 'ppActiveView' )),
]
################################################################
## code template for IFeatureFindData implementation
##class IFeatureFindData_Impl(object):
##    def Layer(self, ppLayer):
##        u'The Layer.'
##        #return 
##
##    def ActiveView(self, ppActiveView):
##        u'The active view.'
##        #return 
##
##    def Feature(self, ppFeature):
##        u'The feature.'
##        #return 
##

class IMapFrameDescription(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the available properties of a map frame description object.'
    _iid_ = GUID('{42CABFCE-786D-43AA-BFA1-BB1F26ACEB6B}')
    _idlflags_ = ['oleautomation']
IMapFrameDescription._methods_ = [
    COMMETHOD(['propget', helpstring(u'The extent of the map frame on the page.')], HRESULT, 'PageLocation',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'Extent' )),
    COMMETHOD(['propget', helpstring(u'The map description for the map contained in the frame.')], HRESULT, 'MapDescription',
              ( ['retval', 'out'], POINTER(POINTER(IMapDescription)), 'mapDesc' )),
    COMMETHOD(['propputref', helpstring(u'The map description for the map contained in the frame.')], HRESULT, 'MapDescription',
              ( ['in'], POINTER(IMapDescription), 'mapDesc' )),
]
################################################################
## code template for IMapFrameDescription implementation
##class IMapFrameDescription_Impl(object):
##    @property
##    def PageLocation(self):
##        u'The extent of the map frame on the page.'
##        #return Extent
##
##    def MapDescription(self, mapDesc):
##        u'The map description for the map contained in the frame.'
##        #return 
##

class WCSImageServer(CoClass):
    u'The WCS Server Object Extension for Image Server services.'
    _reg_clsid_ = GUID('{54B08294-F19B-488E-BD44-CBED95B1898D}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
WCSImageServer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IWCSServer, comtypes.gen._18F2FC71_6B30_45B9_B101_037A8B868B66_0_10_2.IServerObjectExtension, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IObjectConstruct, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILogSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IWebRequestHandler, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]

class PngPictureElement(CoClass):
    u'Graphic Element to display PNG Pictures.'
    _reg_clsid_ = GUID('{85CD6330-D45A-11D3-A414-0004AC1B1D86}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
PngPictureElement._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IElement, IElementProperties, IElementProperties2, IElementProperties3, IFrameElement, IFrameDraw, IFrameProperties, IPictureElement, IPictureElement2, IPictureElement3, IPictureElement4, IPictureElement5, IGraphicElement, IBoundsProperties, IOlePictureElement, comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ITransform2D, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class Jp2PictureElement(CoClass):
    u'Graphic Element to display JPEG2000 Pictures.'
    _reg_clsid_ = GUID('{8BBF863B-D0C7-4B5F-88B0-21D5A4CA06FD}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
Jp2PictureElement._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IElement, IElementProperties, IElementProperties2, IElementProperties3, IFrameElement, IFrameDraw, IFrameProperties, IPictureElement, IPictureElement2, IPictureElement3, IPictureElement4, IPictureElement5, IGraphicElement, IBoundsProperties, IOlePictureElement, comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ITransform2D, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class IRemoteFindObj(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to remote objects found.'
    _iid_ = GUID('{50052F3B-0B42-47F1-87F7-B661A186105C}')
    _idlflags_ = ['oleautomation']
IRemoteFindObj._methods_ = [
    COMMETHOD([helpstring(u'Flash the found object.')], HRESULT, 'Flash',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IScreenDisplay), 'pDisplay' )),
    COMMETHOD([helpstring(u'Zoom to the found object.')], HRESULT, 'ZoomTo',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IScreenDisplay), 'pDisplay' )),
    COMMETHOD([helpstring(u'Identify the found object.')], HRESULT, 'Identify',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IScreenDisplay), 'pDisplay' ),
              ( ['in'], VARIANT, 'vIdentifyDialog' )),
    COMMETHOD([helpstring(u'Create bookmark at the found object.')], HRESULT, 'SetBookmark',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IScreenDisplay), 'pDisplay' )),
    COMMETHOD(['propget', helpstring(u'Indicates if layer is selectable.')], HRESULT, 'Selectable',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Value' )),
    COMMETHOD([helpstring(u'Select found features.')], HRESULT, 'Select',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IScreenDisplay), 'pDisplay' )),
    COMMETHOD([helpstring(u'Unselect found features.')], HRESULT, 'Unselect',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IScreenDisplay), 'pDisplay' )),
]
################################################################
## code template for IRemoteFindObj implementation
##class IRemoteFindObj_Impl(object):
##    def Flash(self, pDisplay):
##        u'Flash the found object.'
##        #return 
##
##    def ZoomTo(self, pDisplay):
##        u'Zoom to the found object.'
##        #return 
##
##    def Unselect(self, pDisplay):
##        u'Unselect found features.'
##        #return 
##
##    def SetBookmark(self, pDisplay):
##        u'Create bookmark at the found object.'
##        #return 
##
##    def Identify(self, pDisplay, vIdentifyDialog):
##        u'Identify the found object.'
##        #return 
##
##    @property
##    def Selectable(self):
##        u'Indicates if layer is selectable.'
##        #return Value
##
##    def Select(self, pDisplay):
##        u'Select found features.'
##        #return 
##

class RelatedRecordGroups(CoClass):
    u'A colcass that contains array of related record groups.'
    _reg_clsid_ = GUID('{BC684B24-E51C-4684-89E6-B8BBDB0452F6}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
RelatedRecordGroups._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRelatedRecordGroups, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

class FeatureServerLayerFactory(CoClass):
    u'Provides programmatic access to a map server layer factory.'
    _reg_clsid_ = GUID('{41F83D27-5F2A-4196-92A3-61B194F13EB8}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
FeatureServerLayerFactory._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILayerFactory, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]

IRelateInfos._methods_ = [
    COMMETHOD(['propget', helpstring(u'The Table info count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The Relate info at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IRelateInfo)), 'RelateInfo' )),
    COMMETHOD([helpstring(u'Removes the Relate info at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all Relate infos.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Adds a Relate info.')], HRESULT, 'Add',
              ( ['in'], POINTER(IRelateInfo), 'RelateInfo' )),
    COMMETHOD([helpstring(u'Adds a Relate info at the specified position.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(IRelateInfo), 'RelateInfo' )),
]
################################################################
## code template for IRelateInfos implementation
##class IRelateInfos_Impl(object):
##    @property
##    def Count(self):
##        u'The Table info count.'
##        #return Count
##
##    def Insert(self, Index, RelateInfo):
##        u'Adds a Relate info at the specified position.'
##        #return 
##
##    def Remove(self, Index):
##        u'Removes the Relate info at the specified position.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'The Relate info at the specified position.'
##        #return RelateInfo
##
##    def RemoveAll(self):
##        u'Removes all Relate infos.'
##        #return 
##
##    def Add(self, RelateInfo):
##        u'Adds a Relate info.'
##        #return 
##

class IDynamicLayer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that work with dynamic display.'
    _iid_ = GUID('{1C68D071-0261-4F0E-9824-20DAFD802527}')
    _idlflags_ = ['oleautomation']
IDynamicLayer._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if the dynamic layer has changed since last drawn for the specified draw phase.')], HRESULT, 'DynamicLayerDirty',
              ( ['in'], comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.esriDynamicDrawPhase, 'DynamicDrawPhase' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Dirty' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the dynamic layer has changed since last drawn for the specified draw phase.')], HRESULT, 'DynamicLayerDirty',
              ( ['in'], comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.esriDynamicDrawPhase, 'DynamicDrawPhase' ),
              ( ['in'], VARIANT_BOOL, 'Dirty' )),
    COMMETHOD(['propget', helpstring(u'Recompile Rate is the interval in milliseconds by which the dynamic layer draw method will be called, with the compiled draw phase.')], HRESULT, 'DynamicRecompileRate',
              ( ['retval', 'out'], POINTER(c_int), 'dynamicRecompileRateTimeMS' )),
    COMMETHOD([helpstring(u'Draws the layer to the specified display for the given draw phase.')], HRESULT, 'DrawDynamicLayer',
              ( ['in'], comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.esriDynamicDrawPhase, 'DynamicDrawPhase' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDynamicDisplay), 'DynamicDisplay' )),
]
################################################################
## code template for IDynamicLayer implementation
##class IDynamicLayer_Impl(object):
##    def DrawDynamicLayer(self, DynamicDrawPhase, Display, DynamicDisplay):
##        u'Draws the layer to the specified display for the given draw phase.'
##        #return 
##
##    @property
##    def DynamicRecompileRate(self):
##        u'Recompile Rate is the interval in milliseconds by which the dynamic layer draw method will be called, with the compiled draw phase.'
##        #return dynamicRecompileRateTimeMS
##
##    def _get(self, DynamicDrawPhase):
##        u'Indicates if the dynamic layer has changed since last drawn for the specified draw phase.'
##        #return Dirty
##    def _set(self, DynamicDrawPhase, Dirty):
##        u'Indicates if the dynamic layer has changed since last drawn for the specified draw phase.'
##    DynamicLayerDirty = property(_get, _set, doc = _set.__doc__)
##

ITinUniqueValueRenderer._methods_ = [
    COMMETHOD(['propget', helpstring(u'The default symbol used for unspecified values (may be NULL).')], HRESULT, 'DefaultSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol)), 'Symbol' )),
    COMMETHOD(['propputref', helpstring(u'The default symbol used for unspecified values (may be NULL).')], HRESULT, 'DefaultSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'The default label used for unspecified values.')], HRESULT, 'DefaultLabel',
              ( ['retval', 'out'], POINTER(BSTR), 'Label' )),
    COMMETHOD(['propput', helpstring(u'The default label used for unspecified values.')], HRESULT, 'DefaultLabel',
              ( ['in'], BSTR, 'Label' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the default symbol is used for drawing unspecified values.')], HRESULT, 'UseDefaultSymbol',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the default symbol is used for drawing unspecified values.')], HRESULT, 'UseDefaultSymbol',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'The number of values used to categorize the data.')], HRESULT, 'ValueCount',
              ( ['retval', 'out'], POINTER(c_int), 'ValueCount' )),
    COMMETHOD(['propget', helpstring(u'The value at the given index.')], HRESULT, 'Value',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Value' )),
    COMMETHOD(['propput', helpstring(u'The value at the given index.')], HRESULT, 'Value',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], BSTR, 'Value' )),
    COMMETHOD(['propget', helpstring(u'The reference value for the given value.')], HRESULT, 'ReferenceValue',
              ( ['in'], BSTR, 'Value' ),
              ( ['retval', 'out'], POINTER(BSTR), 'refValue' )),
    COMMETHOD([helpstring(u'Adds a value that references another value.')], HRESULT, 'AddReferenceValue',
              ( ['in'], BSTR, 'Value' ),
              ( ['in'], BSTR, 'refValue' )),
    COMMETHOD(['propget', helpstring(u'The symbol associated with the given value.')], HRESULT, 'Symbol',
              ( ['in'], BSTR, 'Value' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol)), 'Symbol' )),
    COMMETHOD(['propput', helpstring(u'The symbol associated with the given value.')], HRESULT, 'Symbol',
              ( ['in'], BSTR, 'Value' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'The label used to display the given value.')], HRESULT, 'Label',
              ( ['in'], BSTR, 'Value' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Label' )),
    COMMETHOD(['propput', helpstring(u'The label used to display the given value.')], HRESULT, 'Label',
              ( ['in'], BSTR, 'Value' ),
              ( ['in'], BSTR, 'Label' )),
    COMMETHOD(['propget', helpstring(u'The description for the label.')], HRESULT, 'Description',
              ( ['in'], BSTR, 'Value' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Text' )),
    COMMETHOD(['propput', helpstring(u'The description for the label.')], HRESULT, 'Description',
              ( ['in'], BSTR, 'Value' ),
              ( ['in'], BSTR, 'Text' )),
    COMMETHOD(['propget', helpstring(u'The heading in which the given value is contained.')], HRESULT, 'Heading',
              ( ['in'], BSTR, 'Value' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Heading' )),
    COMMETHOD(['propput', helpstring(u'The heading in which the given value is contained.')], HRESULT, 'Heading',
              ( ['in'], BSTR, 'Value' ),
              ( ['in'], BSTR, 'Heading' )),
    COMMETHOD([helpstring(u'Adds a value and a symbol to the list of categories, for multivariate Values, value is a comma separated list of values.')], HRESULT, 'AddValue',
              ( ['in'], BSTR, 'Value' ),
              ( ['in'], BSTR, 'Heading' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol), 'Symbol' )),
    COMMETHOD([helpstring(u'Removes a values from the list of categories.')], HRESULT, 'RemoveValue',
              ( ['in'], BSTR, 'Value' )),
    COMMETHOD([helpstring(u'Removes all values.')], HRESULT, 'RemoveAllValues'),
    COMMETHOD(['propget', helpstring(u'Name of Color Scheme (used in UI only).')], HRESULT, 'ColorScheme',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'Name of Color Scheme (used in UI only).')], HRESULT, 'ColorScheme',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'Name of Styleset for Lookup Symbols(used in UI only).')], HRESULT, 'LookupStyleset',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'Name of Styleset for Lookup Symbols(used in UI only).')], HRESULT, 'LookupStyleset',
              ( ['in'], BSTR, 'Name' )),
]
################################################################
## code template for ITinUniqueValueRenderer implementation
##class ITinUniqueValueRenderer_Impl(object):
##    def AddReferenceValue(self, Value, refValue):
##        u'Adds a value that references another value.'
##        #return 
##
##    def _get(self, Value):
##        u'The description for the label.'
##        #return Text
##    def _set(self, Value, Text):
##        u'The description for the label.'
##    Description = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Name of Color Scheme (used in UI only).'
##        #return Name
##    def _set(self, Name):
##        u'Name of Color Scheme (used in UI only).'
##    ColorScheme = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def ReferenceValue(self, Value):
##        u'The reference value for the given value.'
##        #return refValue
##
##    def _get(self, Value):
##        u'The symbol associated with the given value.'
##        #return Symbol
##    def _set(self, Value, Symbol):
##        u'The symbol associated with the given value.'
##    Symbol = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, Index):
##        u'The value at the given index.'
##        #return Value
##    def _set(self, Index, Value):
##        u'The value at the given index.'
##    Value = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, Value):
##        u'The label used to display the given value.'
##        #return Label
##    def _set(self, Value, Label):
##        u'The label used to display the given value.'
##    Label = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the default symbol is used for drawing unspecified values.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if the default symbol is used for drawing unspecified values.'
##    UseDefaultSymbol = property(_get, _set, doc = _set.__doc__)
##
##    def RemoveValue(self, Value):
##        u'Removes a values from the list of categories.'
##        #return 
##
##    @property
##    def ValueCount(self):
##        u'The number of values used to categorize the data.'
##        #return ValueCount
##
##    def RemoveAllValues(self):
##        u'Removes all values.'
##        #return 
##
##    def DefaultSymbol(self, Symbol):
##        u'The default symbol used for unspecified values (may be NULL).'
##        #return 
##
##    def _get(self):
##        u'Name of Styleset for Lookup Symbols(used in UI only).'
##        #return Name
##    def _set(self, Name):
##        u'Name of Styleset for Lookup Symbols(used in UI only).'
##    LookupStyleset = property(_get, _set, doc = _set.__doc__)
##
##    def AddValue(self, Value, Heading, Symbol):
##        u'Adds a value and a symbol to the list of categories, for multivariate Values, value is a comma separated list of values.'
##        #return 
##
##    def _get(self):
##        u'The default label used for unspecified values.'
##        #return Label
##    def _set(self, Label):
##        u'The default label used for unspecified values.'
##    DefaultLabel = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, Value):
##        u'The heading in which the given value is contained.'
##        #return Heading
##    def _set(self, Value, Heading):
##        u'The heading in which the given value is contained.'
##    Heading = property(_get, _set, doc = _set.__doc__)
##

class IDynamicLayer2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to layers that work with dynamic display.'
    _iid_ = GUID('{8BE22356-D39D-4747-A662-8B34B3FF4668}')
    _idlflags_ = ['oleautomation']
IDynamicLayer2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Allow retrieval of the object with the given object ID.')], HRESULT, 'ObjectById',
              ( ['in'], c_int, 'ID' ),
              ( ['in'], POINTER(ILayer), 'ILayer' ),
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppObject' )),
]
################################################################
## code template for IDynamicLayer2 implementation
##class IDynamicLayer2_Impl(object):
##    @property
##    def ObjectById(self, ID, ILayer):
##        u'Allow retrieval of the object with the given object ID.'
##        #return ppObject
##

IMxdServer._methods_ = [
    COMMETHOD([dispid(0), helpstring(u'Initializes the map server with an mxd file stored at the specified path.  The path must be able to be located by the server machine.')], HRESULT, 'Start',
              ( ['in'], BSTR, 'mxdPath' )),
    COMMETHOD([dispid(1), helpstring(u'An alternative to calling Start() with a document name, this method synthesizes a map document with a single layer based on the given IDataset object, and initializes the map server for processing.')], HRESULT, 'StartWithData',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataset), 'pDataset' )),
    COMMETHOD([dispid(2), helpstring(u'Clears out all of the map objects in memory.  The client must call one of the Start methods again before attempting any other operations.')], HRESULT, 'Stop'),
    COMMETHOD([dispid(3), helpstring(u'An array of MapDescriptor objects, where each map descriptor describes the characteristics of a data frame in the document.  The properties of a map descriptor object can be altered in order to draw the map image with different state than the default.'), 'propget'], HRESULT, 'MapDescriptors',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'MapDescriptors' )),
    COMMETHOD([dispid(4), helpstring(u'An array of LayerDescriptor objects for a given map name.  Each layer descriptor describes the characteristics of a layer in the map.  Default layer properties can be changed to change output.'), 'propget'], HRESULT, 'LayerDescriptors',
              ( ['in'], BSTR, 'MapName' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'LayerDescriptors' )),
    COMMETHOD([dispid(5), helpstring(u'The spatial bookmarks saved with the specified map, if any.'), 'propget'], HRESULT, 'Bookmarks',
              ( ['in'], BSTR, 'MapName' ),
              ( ['retval', 'out'], POINTER(POINTER(IEnumSpatialBookmark)), 'Bookmarks' )),
    COMMETHOD([dispid(6), helpstring(u'The thumbnail image stored with the map document, if any.  If the document has no thumbnail stored with it, this method will return E_FAIL and the returned IPictureDisp object will be null.'), 'propget'], HRESULT, 'Thumbnail',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IPictureDisp)), 'Image' )),
    COMMETHOD([dispid(7), helpstring(u'Generates a picture of the map, based on the given map descriptor, and returns the image as an IPictureDisp.  If pMapDescriptor is null, it draws a picture of the default map at the default extent.')], HRESULT, 'GetMapPicture',
              ( ['in'], POINTER(IMapDescriptor), 'MapDescriptor' ),
              ( ['in'], c_int, 'Dpi' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.tagRECT), 'pixelBounds' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IPictureDisp)), 'pict' )),
    COMMETHOD([dispid(8), helpstring(u'Generates a picture of the map, based on the given map descriptor, and returns an HBITMAP handle to the resulting image.  If you call this function, you absolutely MUST call ReleaseBitmapHandle() with the returned bitmap handle.')], HRESULT, 'GetMapBitmapHandle',
              ( ['in'], POINTER(IMapDescriptor), 'MapDescriptor' ),
              ( ['in'], c_int, 'Dpi' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.tagRECT), 'pixelBounds' ),
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE), 'hBmp' )),
    COMMETHOD([dispid(9), helpstring(u'Companion function to GetBitmapHandle().  Releases the bitmap handle that is returned from that function.')], HRESULT, 'ReleaseBitmapHandle',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE, 'hBmp' )),
    COMMETHOD([dispid(10), helpstring(u"Generates an image of the map, based on the given map descriptor, and writes the image to the specified file on disk.  Supported file types are: 'bmp', 'jpg', 'tif', 'png'/'png8', 'png24', 'emf' and 'pcx'.")], HRESULT, 'ExportMapImage',
              ( ['in'], POINTER(IMapDescriptor), 'MapDescriptor' ),
              ( ['in'], c_int, 'Dpi' ),
              ( ['in'], c_int, 'imageWidth' ),
              ( ['in'], c_int, 'imageHeight' ),
              ( ['in'], BSTR, 'fileType' ),
              ( ['in'], BSTR, 'outputFileName' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'fittedBounds' )),
    COMMETHOD([dispid(11), helpstring(u"Generates an image of the layout, based on the given array of map descriptors, and writes the image to a specified file on disk. Supported Image types are: 'bmp', 'jpg', 'tif', 'png', 'emf', 'eps', 'pdf', 'ai', 'pcx'.")], HRESULT, 'ExportLayout',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'MapDescriptors' ),
              ( ['in'], c_int, 'Dpi' ),
              ( ['in'], c_int, 'imageWidth' ),
              ( ['in'], c_int, 'imageHeight' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'pageExtent' ),
              ( ['in'], BSTR, 'fileType' ),
              ( ['in'], BSTR, 'outputFileName' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'fittedBounds' )),
    COMMETHOD([dispid(12), helpstring(u'Exports a legend to an image file.  The client can create the pLegend object and set its desired properties appropriately.  If pLegend is null, a default legend for the default map will be generated.')], HRESULT, 'ExportLegend',
              ( ['in'], POINTER(ILegend), 'Legend' ),
              ( ['in'], POINTER(IMapDescriptor), 'MapDescriptor' ),
              ( ['in'], c_int, 'Dpi' ),
              ( ['in'], c_int, 'imageWidth' ),
              ( ['in'], c_int, 'imageHeight' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'BackgroundColor' ),
              ( ['in'], BSTR, 'fileType' ),
              ( ['in'], BSTR, 'outputFileName' )),
    COMMETHOD([dispid(13), helpstring(u'Exports a scale bar to an image file.  The client can create the pScaleBar object and set its desired properties appropriately.  If pScaleBar is null, a default scale bar will be generated for the default map.')], HRESULT, 'ExportScaleBar',
              ( ['in'], POINTER(IScaleBar), 'Scalebar' ),
              ( ['in'], c_int, 'mapImageWidthPixels' ),
              ( ['in'], c_int, 'Dpi' ),
              ( ['in'], c_int, 'imageWidth' ),
              ( ['in'], c_int, 'imageHeight' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'BackgroundColor' ),
              ( ['in'], BSTR, 'fileType' ),
              ( ['in'], BSTR, 'outputFileName' )),
    COMMETHOD([dispid(14), helpstring(u'Exports a north arrow to an image file.  The client can create the pArrow object and set its desired properties appropriately.  If pArrow is null, a default north arrow will be generated for the default map.')], HRESULT, 'ExportNorthArrow',
              ( ['in'], POINTER(INorthArrow), 'arrow' ),
              ( ['in'], c_int, 'Dpi' ),
              ( ['in'], c_int, 'imageWidth' ),
              ( ['in'], c_int, 'imageHeight' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'BackgroundColor' ),
              ( ['in'], BSTR, 'fileType' ),
              ( ['in'], BSTR, 'outputFileName' )),
    COMMETHOD([dispid(15), helpstring(u'The TOC Information.'), 'propget'], HRESULT, 'TOCInfo',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], c_int, 'LayerID' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'tocGroups' )),
    COMMETHOD([dispid(16), helpstring(u'The TOC Information.'), 'propget'], HRESULT, 'DefaultMapName',
              ( ['retval', 'out'], POINTER(BSTR), 'MapName' )),
    COMMETHOD([dispid(17), helpstring(u'The value of the specified field for the specified feature.')], HRESULT, 'GetFeatureValue',
              ( ['in'], BSTR, 'MapName' ),
              ( ['in'], c_int, 'LayerID' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeature), 'Feature' ),
              ( ['in'], BSTR, 'FieldName' ),
              ( ['retval', 'out'], POINTER(BSTR), 'fieldValue' )),
]
################################################################
## code template for IMxdServer implementation
##class IMxdServer_Impl(object):
##    def ExportMapImage(self, MapDescriptor, Dpi, imageWidth, imageHeight, fileType, outputFileName):
##        u"Generates an image of the map, based on the given map descriptor, and writes the image to the specified file on disk.  Supported file types are: 'bmp', 'jpg', 'tif', 'png'/'png8', 'png24', 'emf' and 'pcx'."
##        #return fittedBounds
##
##    @property
##    def LayerDescriptors(self, MapName):
##        u'An array of LayerDescriptor objects for a given map name.  Each layer descriptor describes the characteristics of a layer in the map.  Default layer properties can be changed to change output.'
##        #return LayerDescriptors
##
##    def GetMapPicture(self, MapDescriptor, Dpi, pixelBounds):
##        u'Generates a picture of the map, based on the given map descriptor, and returns the image as an IPictureDisp.  If pMapDescriptor is null, it draws a picture of the default map at the default extent.'
##        #return pict
##
##    @property
##    def MapDescriptors(self):
##        u'An array of MapDescriptor objects, where each map descriptor describes the characteristics of a data frame in the document.  The properties of a map descriptor object can be altered in order to draw the map image with different state than the default.'
##        #return MapDescriptors
##
##    @property
##    def DefaultMapName(self):
##        u'The TOC Information.'
##        #return MapName
##
##    def StartWithData(self, pDataset):
##        u'An alternative to calling Start() with a document name, this method synthesizes a map document with a single layer based on the given IDataset object, and initializes the map server for processing.'
##        #return 
##
##    def ReleaseBitmapHandle(self, hBmp):
##        u'Companion function to GetBitmapHandle().  Releases the bitmap handle that is returned from that function.'
##        #return 
##
##    def Stop(self):
##        u'Clears out all of the map objects in memory.  The client must call one of the Start methods again before attempting any other operations.'
##        #return 
##
##    @property
##    def TOCInfo(self, MapName, LayerID):
##        u'The TOC Information.'
##        #return tocGroups
##
##    def ExportNorthArrow(self, arrow, Dpi, imageWidth, imageHeight, BackgroundColor, fileType, outputFileName):
##        u'Exports a north arrow to an image file.  The client can create the pArrow object and set its desired properties appropriately.  If pArrow is null, a default north arrow will be generated for the default map.'
##        #return 
##
##    def GetMapBitmapHandle(self, MapDescriptor, Dpi, pixelBounds):
##        u'Generates a picture of the map, based on the given map descriptor, and returns an HBITMAP handle to the resulting image.  If you call this function, you absolutely MUST call ReleaseBitmapHandle() with the returned bitmap handle.'
##        #return hBmp
##
##    def Start(self, mxdPath):
##        u'Initializes the map server with an mxd file stored at the specified path.  The path must be able to be located by the server machine.'
##        #return 
##
##    def GetFeatureValue(self, MapName, LayerID, Feature, FieldName):
##        u'The value of the specified field for the specified feature.'
##        #return fieldValue
##
##    def ExportLegend(self, Legend, MapDescriptor, Dpi, imageWidth, imageHeight, BackgroundColor, fileType, outputFileName):
##        u'Exports a legend to an image file.  The client can create the pLegend object and set its desired properties appropriately.  If pLegend is null, a default legend for the default map will be generated.'
##        #return 
##
##    @property
##    def Bookmarks(self, MapName):
##        u'The spatial bookmarks saved with the specified map, if any.'
##        #return Bookmarks
##
##    def ExportLayout(self, MapDescriptors, Dpi, imageWidth, imageHeight, pageExtent, fileType, outputFileName):
##        u"Generates an image of the layout, based on the given array of map descriptors, and writes the image to a specified file on disk. Supported Image types are: 'bmp', 'jpg', 'tif', 'png', 'emf', 'eps', 'pdf', 'ai', 'pcx'."
##        #return fittedBounds
##
##    @property
##    def Thumbnail(self):
##        u'The thumbnail image stored with the map document, if any.  If the document has no thumbnail stored with it, this method will return E_FAIL and the returned IPictureDisp object will be null.'
##        #return Image
##
##    def ExportScaleBar(self, Scalebar, mapImageWidthPixels, Dpi, imageWidth, imageHeight, BackgroundColor, fileType, outputFileName):
##        u'Exports a scale bar to an image file.  The client can create the pScaleBar object and set its desired properties appropriately.  If pScaleBar is null, a default scale bar will be generated for the default map.'
##        #return 
##

IMapServerLegendPatch._methods_ = [
    COMMETHOD(['propget', helpstring(u'The patch width (in points).')], HRESULT, 'PatchWidth',
              ( ['retval', 'out'], POINTER(c_double), 'widthPts' )),
    COMMETHOD(['propput', helpstring(u'The patch width (in points).')], HRESULT, 'PatchWidth',
              ( ['in'], c_double, 'widthPts' )),
    COMMETHOD(['propget', helpstring(u'The patch height (in points).')], HRESULT, 'PatchHeight',
              ( ['retval', 'out'], POINTER(c_double), 'heightPts' )),
    COMMETHOD(['propput', helpstring(u'The patch height (in points).')], HRESULT, 'PatchHeight',
              ( ['in'], c_double, 'heightPts' )),
    COMMETHOD(['propget', helpstring(u'The patch resolution (dots per inch).')], HRESULT, 'PatchResolution',
              ( ['retval', 'out'], POINTER(c_double), 'Dpi' )),
    COMMETHOD(['propput', helpstring(u'The patch resolution (dots per inch).')], HRESULT, 'PatchResolution',
              ( ['in'], c_double, 'Dpi' )),
    COMMETHOD(['propget', helpstring(u'The line patch.')], HRESULT, 'LinePatch',
              ( ['retval', 'out'], POINTER(POINTER(ILinePatch)), 'patch' )),
    COMMETHOD(['propput', helpstring(u'The line patch.')], HRESULT, 'LinePatch',
              ( ['in'], POINTER(ILinePatch), 'patch' )),
    COMMETHOD(['propget', helpstring(u'The area patch.')], HRESULT, 'AreaPatch',
              ( ['retval', 'out'], POINTER(POINTER(IAreaPatch)), 'patch' )),
    COMMETHOD(['propput', helpstring(u'The area patch.')], HRESULT, 'AreaPatch',
              ( ['in'], POINTER(IAreaPatch), 'patch' )),
]
################################################################
## code template for IMapServerLegendPatch implementation
##class IMapServerLegendPatch_Impl(object):
##    def _get(self):
##        u'The patch height (in points).'
##        #return heightPts
##    def _set(self, heightPts):
##        u'The patch height (in points).'
##    PatchHeight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The patch resolution (dots per inch).'
##        #return Dpi
##    def _set(self, Dpi):
##        u'The patch resolution (dots per inch).'
##    PatchResolution = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The patch width (in points).'
##        #return widthPts
##    def _set(self, widthPts):
##        u'The patch width (in points).'
##    PatchWidth = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The area patch.'
##        #return patch
##    def _set(self, patch):
##        u'The area patch.'
##    AreaPatch = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The line patch.'
##        #return patch
##    def _set(self, patch):
##        u'The line patch.'
##    LinePatch = property(_get, _set, doc = _set.__doc__)
##

IRelateInfo._methods_ = [
    COMMETHOD(['propget', helpstring(u'The name of the relationship to a table.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propget', helpstring(u'Identifies the specific relationship for a related table.')], HRESULT, 'RelationshipID',
              ( ['retval', 'out'], POINTER(c_int), 'RelationshipID' )),
    COMMETHOD(['propget', helpstring(u'ID of the table related to.')], HRESULT, 'RelatedTableID',
              ( ['retval', 'out'], POINTER(c_int), 'RelatedTableID' )),
]
################################################################
## code template for IRelateInfo implementation
##class IRelateInfo_Impl(object):
##    @property
##    def Name(self):
##        u'The name of the relationship to a table.'
##        #return Name
##
##    @property
##    def RelatedTableID(self):
##        u'ID of the table related to.'
##        #return RelatedTableID
##
##    @property
##    def RelationshipID(self):
##        u'Identifies the specific relationship for a related table.'
##        #return RelationshipID
##

IMapDescriptor._methods_ = [
    COMMETHOD([dispid(0), helpstring(u'The name of the map.'), 'propget'], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD([dispid(0), helpstring(u'The name of the map.'), 'propput'], HRESULT, 'Name',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD([dispid(1), helpstring(u'The full extent of the map.'), 'propget'], HRESULT, 'FullExtent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'Extent' )),
    COMMETHOD([dispid(1), helpstring(u'The full extent of the map.'), 'propput'], HRESULT, 'FullExtent',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'Extent' )),
    COMMETHOD([dispid(2), helpstring(u'The current extent of the map.'), 'propget'], HRESULT, 'Extent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'Extent' )),
    COMMETHOD([dispid(2), helpstring(u'The current extent of the map.'), 'propput'], HRESULT, 'Extent',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'Extent' )),
    COMMETHOD([dispid(3), helpstring(u'The spatial reference of the map.'), 'propget'], HRESULT, 'SpatialReference',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference)), 'SpatialReference' )),
    COMMETHOD([dispid(3), helpstring(u'The spatial reference of the map.'), 'propputref'], HRESULT, 'SpatialReference',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'SpatialReference' )),
    COMMETHOD([dispid(4), helpstring(u'The angle/rotation of the map in degrees, measured anti-clockwise.'), 'propget'], HRESULT, 'Angle',
              ( ['retval', 'out'], POINTER(c_double), 'angleDegrees' )),
    COMMETHOD([dispid(4), helpstring(u'The angle/rotation of the map in degrees, measured anti-clockwise.'), 'propput'], HRESULT, 'Angle',
              ( ['in'], c_double, 'angleDegrees' )),
    COMMETHOD([dispid(5), helpstring(u'The layer descriptors of the map.'), 'propget'], HRESULT, 'Layers',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'LayerDescriptors' )),
    COMMETHOD([dispid(5), helpstring(u'The layer descriptors of the map.'), 'propput'], HRESULT, 'Layers',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'LayerDescriptors' )),
    COMMETHOD([dispid(6), helpstring(u'The layer order for the map.  The VARIANT value is a SAFEARRAY of long integers that list the layerIDs in order.  The first element is top layer in the map.  Layers that are within groups are not listed in this array.'), 'propget'], HRESULT, 'LayerOrder',
              ( ['retval', 'out'], POINTER(VARIANT), 'layerIds' )),
    COMMETHOD([dispid(6), helpstring(u'The layer order for the map.  The VARIANT value is a SAFEARRAY of long integers that list the layerIDs in order.  The first element is top layer in the map.  Layers that are within groups are not listed in this array.'), 'propput'], HRESULT, 'LayerOrder',
              ( ['in'], VARIANT, 'layerIds' )),
    COMMETHOD([dispid(7), helpstring(u'Custom graphics of the map.'), 'propget'], HRESULT, 'CustomGraphics',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'Elements' )),
    COMMETHOD([dispid(7), helpstring(u'Custom graphics of the map.'), 'propput'], HRESULT, 'CustomGraphics',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'Elements' )),
    COMMETHOD([dispid(8), helpstring(u'The barriers used for labeling.'), 'propget'], HRESULT, 'LabelBarriers',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometryCollection)), 'Barriers' )),
    COMMETHOD([dispid(8), helpstring(u'The barriers used for labeling.'), 'propput'], HRESULT, 'LabelBarriers',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometryCollection), 'Barriers' )),
    COMMETHOD([dispid(9), helpstring(u'The scale of the map.'), 'propget'], HRESULT, 'MapScale',
              ( ['retval', 'out'], POINTER(c_double), 'MapScale' )),
    COMMETHOD([dispid(9), helpstring(u'The scale of the map.'), 'propput'], HRESULT, 'MapScale',
              ( ['in'], c_double, 'MapScale' )),
    COMMETHOD([dispid(10), helpstring(u'The center of the map.'), 'propget'], HRESULT, 'MapCenter',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint)), 'Center' )),
    COMMETHOD([dispid(10), helpstring(u'The center of the map.'), 'propput'], HRESULT, 'MapCenter',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'Center' )),
    COMMETHOD([dispid(11), helpstring(u'Indicates whether of not to maintain the aspect ratio.'), 'propget'], HRESULT, 'KeepAspectRatio',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'keep' )),
    COMMETHOD([dispid(11), helpstring(u'Indicates whether of not to maintain the aspect ratio.'), 'propput'], HRESULT, 'KeepAspectRatio',
              ( ['in'], VARIANT_BOOL, 'keep' )),
    COMMETHOD([dispid(12), helpstring(u'The background color of the map.'), 'propget'], HRESULT, 'BackgroundColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD([dispid(12), helpstring(u'The background color of the map.'), 'propput'], HRESULT, 'BackgroundColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD([dispid(13), helpstring(u'The color used for transparency (100 %).'), 'propget'], HRESULT, 'TransparentColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD([dispid(13), helpstring(u'The color used for transparency (100 %).'), 'propput'], HRESULT, 'TransparentColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD([dispid(14), helpstring(u'Call this multiple times to place surrounds on the surface of the map. Specify coordinates in pixels.  Origin is at lower left corner.')], HRESULT, 'AddMapSurround',
              ( [], POINTER(IMapSurround), 'surround' ),
              ( [], c_int, 'xPixelOrigin' ),
              ( [], c_int, 'yPixelOrigin' ),
              ( [], esriAnchorPointEnum, 'AnchorPoint' )),
    COMMETHOD([dispid(15), helpstring(u'Remove all surrounds from the map.')], HRESULT, 'ClearMapSurrounds'),
    COMMETHOD([dispid(16), helpstring(u'Call this multiple times to place graphics in pixel space on the map above Custom Graphics and Map Surrounds.  Specify coordinates in pixels.  Origin is at lower left corner.')], HRESULT, 'AddPixelGraphic',
              ( [], POINTER(IElement), 'graphic' )),
    COMMETHOD([dispid(17), helpstring(u'Remove all pixel graphics from the map.')], HRESULT, 'ClearPixelGraphics'),
]
################################################################
## code template for IMapDescriptor implementation
##class IMapDescriptor_Impl(object):
##    def _get(self):
##        u'The layer descriptors of the map.'
##        #return LayerDescriptors
##    def _set(self, LayerDescriptors):
##        u'The layer descriptors of the map.'
##    Layers = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The center of the map.'
##        #return Center
##    def _set(self, Center):
##        u'The center of the map.'
##    MapCenter = property(_get, _set, doc = _set.__doc__)
##
##    def AddPixelGraphic(self, graphic):
##        u'Call this multiple times to place graphics in pixel space on the map above Custom Graphics and Map Surrounds.  Specify coordinates in pixels.  Origin is at lower left corner.'
##        #return 
##
##    def _get(self):
##        u'Indicates whether of not to maintain the aspect ratio.'
##        #return keep
##    def _set(self, keep):
##        u'Indicates whether of not to maintain the aspect ratio.'
##    KeepAspectRatio = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The angle/rotation of the map in degrees, measured anti-clockwise.'
##        #return angleDegrees
##    def _set(self, angleDegrees):
##        u'The angle/rotation of the map in degrees, measured anti-clockwise.'
##    Angle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The name of the map.'
##        #return Name
##    def _set(self, Name):
##        u'The name of the map.'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The layer order for the map.  The VARIANT value is a SAFEARRAY of long integers that list the layerIDs in order.  The first element is top layer in the map.  Layers that are within groups are not listed in this array.'
##        #return layerIds
##    def _set(self, layerIds):
##        u'The layer order for the map.  The VARIANT value is a SAFEARRAY of long integers that list the layerIDs in order.  The first element is top layer in the map.  Layers that are within groups are not listed in this array.'
##    LayerOrder = property(_get, _set, doc = _set.__doc__)
##
##    def ClearPixelGraphics(self):
##        u'Remove all pixel graphics from the map.'
##        #return 
##
##    def _get(self):
##        u'The barriers used for labeling.'
##        #return Barriers
##    def _set(self, Barriers):
##        u'The barriers used for labeling.'
##    LabelBarriers = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The color used for transparency (100 %).'
##        #return Color
##    def _set(self, Color):
##        u'The color used for transparency (100 %).'
##    TransparentColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The background color of the map.'
##        #return Color
##    def _set(self, Color):
##        u'The background color of the map.'
##    BackgroundColor = property(_get, _set, doc = _set.__doc__)
##
##    def SpatialReference(self, SpatialReference):
##        u'The spatial reference of the map.'
##        #return 
##
##    def _get(self):
##        u'Custom graphics of the map.'
##        #return Elements
##    def _set(self, Elements):
##        u'Custom graphics of the map.'
##    CustomGraphics = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The scale of the map.'
##        #return MapScale
##    def _set(self, MapScale):
##        u'The scale of the map.'
##    MapScale = property(_get, _set, doc = _set.__doc__)
##
##    def ClearMapSurrounds(self):
##        u'Remove all surrounds from the map.'
##        #return 
##
##    def _get(self):
##        u'The current extent of the map.'
##        #return Extent
##    def _set(self, Extent):
##        u'The current extent of the map.'
##    Extent = property(_get, _set, doc = _set.__doc__)
##
##    def AddMapSurround(self, surround, xPixelOrigin, yPixelOrigin, AnchorPoint):
##        u'Call this multiple times to place surrounds on the surface of the map. Specify coordinates in pixels.  Origin is at lower left corner.'
##        #return 
##
##    def _get(self):
##        u'The full extent of the map.'
##        #return Extent
##    def _set(self, Extent):
##        u'The full extent of the map.'
##    FullExtent = property(_get, _set, doc = _set.__doc__)
##

IMapServerIdentifyResult._methods_ = [
    COMMETHOD(['propget', helpstring(u'The layer ID of the identified object.')], HRESULT, 'LayerID',
              ( ['retval', 'out'], POINTER(c_int), 'LayerID' )),
    COMMETHOD(['propget', helpstring(u'The name of the identified object.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Value' )),
    COMMETHOD(['propget', helpstring(u'A set of name-value pairs for the field names and values of the identified object.')], HRESULT, 'Properties',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet)), 'props' )),
    COMMETHOD(['propget', helpstring(u'The geometry of the identified object.')], HRESULT, 'Shape',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry)), 'Shape' )),
    COMMETHOD(['propget', helpstring(u'The related rows (relationships) of the identified object.')], HRESULT, 'RelatedRows',
              ( ['retval', 'out'], POINTER(POINTER(IMapServerRelationships)), 'relationships' )),
]
################################################################
## code template for IMapServerIdentifyResult implementation
##class IMapServerIdentifyResult_Impl(object):
##    @property
##    def Properties(self):
##        u'A set of name-value pairs for the field names and values of the identified object.'
##        #return props
##
##    @property
##    def RelatedRows(self):
##        u'The related rows (relationships) of the identified object.'
##        #return relationships
##
##    @property
##    def Shape(self):
##        u'The geometry of the identified object.'
##        #return Shape
##
##    @property
##    def Name(self):
##        u'The name of the identified object.'
##        #return Value
##
##    @property
##    def LayerID(self):
##        u'The layer ID of the identified object.'
##        #return LayerID
##

IMapServerHyperlinks._methods_ = [
    COMMETHOD(['propget', helpstring(u'The hyperlink count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The hyperlink at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IMapServerHyperlink)), 'Link' )),
    COMMETHOD([helpstring(u'Removes the hyperlink at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all hyperlinks.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Adds a hyperlink.')], HRESULT, 'Add',
              ( ['in'], POINTER(IMapServerHyperlink), 'Link' )),
    COMMETHOD([helpstring(u'Adds a hyperlink at the specified position.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(IMapServerHyperlink), 'Link' )),
]
################################################################
## code template for IMapServerHyperlinks implementation
##class IMapServerHyperlinks_Impl(object):
##    @property
##    def Count(self):
##        u'The hyperlink count.'
##        #return Count
##
##    def Insert(self, Index, Link):
##        u'Adds a hyperlink at the specified position.'
##        #return 
##
##    def Remove(self, Index):
##        u'Removes the hyperlink at the specified position.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'The hyperlink at the specified position.'
##        #return Link
##
##    def RemoveAll(self):
##        u'Removes all hyperlinks.'
##        #return 
##
##    def Add(self, Link):
##        u'Adds a hyperlink.'
##        #return 
##

ILayerDescriptor._methods_ = [
    COMMETHOD([dispid(0), helpstring(u'The layer ID.  This is a unique ID for the map, and is used to identify the layer in a number of method calls.'), 'propget'], HRESULT, 'ID',
              ( ['retval', 'out'], POINTER(c_int), 'LayerID' )),
    COMMETHOD([dispid(0), helpstring(u'The layer ID.  This is a unique ID for the map, and is used to identify the layer in a number of method calls.'), 'propput'], HRESULT, 'ID',
              ( ['in'], c_int, 'LayerID' )),
    COMMETHOD([dispid(1), helpstring(u'The name of the layer.'), 'propget'], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD([dispid(2), helpstring(u'Indicates whether the layer is visible.'), 'propget'], HRESULT, 'Visible',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Visible' )),
    COMMETHOD([dispid(2), helpstring(u'Indicates whether the layer is visible.'), 'propput'], HRESULT, 'Visible',
              ( ['in'], VARIANT_BOOL, 'Visible' )),
    COMMETHOD([dispid(3), helpstring(u'Indicates whether the layer should display its dynamic labels.'), 'propget'], HRESULT, 'ShowLabels',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Show' )),
    COMMETHOD([dispid(3), helpstring(u'Indicates whether the layer should display its dynamic labels.'), 'propput'], HRESULT, 'ShowLabels',
              ( ['in'], VARIANT_BOOL, 'Show' )),
    COMMETHOD([dispid(4), helpstring(u'The transparency of the layer.  The value represents the percentage of transparency, and should range from 0 (no transparency) to 100 (completely transparent).'), 'propget'], HRESULT, 'Transparency',
              ( ['retval', 'out'], POINTER(c_short), 'alphaValue' )),
    COMMETHOD([dispid(4), helpstring(u'The transparency of the layer.  The value represents the percentage of transparency, and should range from 0 (no transparency) to 100 (completely transparent).'), 'propput'], HRESULT, 'Transparency',
              ( ['in'], c_short, 'alphaValue' )),
    COMMETHOD([dispid(5), helpstring(u'The selection filter for the layer.  When drawing, the filter will be applied and the resulting selection will be displayed on the map.'), 'propput'], HRESULT, 'SelectionFilters',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'rhs' )),
    COMMETHOD([dispid(6), helpstring(u'The selection buffer distance.  When drawing, and if a selection filter is specified, a buffer zone of the specified distance will be displayed around the selected features.'), 'propget'], HRESULT, 'SelectionBufferDistance',
              ( ['retval', 'out'], POINTER(c_double), 'Distance' )),
    COMMETHOD([dispid(6), helpstring(u'The selection buffer distance.  When drawing, and if a selection filter is specified, a buffer zone of the specified distance will be displayed around the selected features.'), 'propput'], HRESULT, 'SelectionBufferDistance',
              ( ['in'], c_double, 'Distance' )),
    COMMETHOD([dispid(7), helpstring(u'Indicates whether the selection buffer should be displayed.'), 'propget'], HRESULT, 'ShowSelectionBuffer',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Show' )),
    COMMETHOD([dispid(7), helpstring(u'Indicates whether the selection buffer should be displayed.'), 'propput'], HRESULT, 'ShowSelectionBuffer',
              ( ['in'], VARIANT_BOOL, 'Show' )),
    COMMETHOD([dispid(8), helpstring(u'The definition expression for the layer.'), 'propget'], HRESULT, 'DefinitionExpression',
              ( ['retval', 'out'], POINTER(BSTR), 'Expression' )),
    COMMETHOD([dispid(8), helpstring(u'The definition expression for the layer.'), 'propput'], HRESULT, 'DefinitionExpression',
              ( ['in'], BSTR, 'Expression' )),
]
################################################################
## code template for ILayerDescriptor implementation
##class ILayerDescriptor_Impl(object):
##    @property
##    def Name(self):
##        u'The name of the layer.'
##        #return Name
##
##    def _get(self):
##        u'The selection buffer distance.  When drawing, and if a selection filter is specified, a buffer zone of the specified distance will be displayed around the selected features.'
##        #return Distance
##    def _set(self, Distance):
##        u'The selection buffer distance.  When drawing, and if a selection filter is specified, a buffer zone of the specified distance will be displayed around the selected features.'
##    SelectionBufferDistance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether the layer should display its dynamic labels.'
##        #return Show
##    def _set(self, Show):
##        u'Indicates whether the layer should display its dynamic labels.'
##    ShowLabels = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The definition expression for the layer.'
##        #return Expression
##    def _set(self, Expression):
##        u'The definition expression for the layer.'
##    DefinitionExpression = property(_get, _set, doc = _set.__doc__)
##
##    def _set(self, rhs):
##        u'The selection filter for the layer.  When drawing, the filter will be applied and the resulting selection will be displayed on the map.'
##    SelectionFilters = property(fset = _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether the selection buffer should be displayed.'
##        #return Show
##    def _set(self, Show):
##        u'Indicates whether the selection buffer should be displayed.'
##    ShowSelectionBuffer = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether the layer is visible.'
##        #return Visible
##    def _set(self, Visible):
##        u'Indicates whether the layer is visible.'
##    Visible = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The transparency of the layer.  The value represents the percentage of transparency, and should range from 0 (no transparency) to 100 (completely transparent).'
##        #return alphaValue
##    def _set(self, alphaValue):
##        u'The transparency of the layer.  The value represents the percentage of transparency, and should range from 0 (no transparency) to 100 (completely transparent).'
##    Transparency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The layer ID.  This is a unique ID for the map, and is used to identify the layer in a number of method calls.'
##        #return LayerID
##    def _set(self, LayerID):
##        u'The layer ID.  This is a unique ID for the map, and is used to identify the layer in a number of method calls.'
##    ID = property(_get, _set, doc = _set.__doc__)
##

IElementCollection2._methods_ = [
    COMMETHOD([helpstring(u'Adds an element to the collection.')], HRESULT, 'Add',
              ( ['in'], POINTER(IElement), 'Element' ),
              ( ['in', 'optional'], c_int, 'LinkedFeatureID', 0 ),
              ( ['in', 'optional'], c_int, 'AnnotationClassID', -1 ),
              ( ['in', 'optional'], esriAnnotationStatus, 'Status', 0 )),
    COMMETHOD(['propget', helpstring(u'Number of elements in the collection.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD([helpstring(u'Element at the given index.')], HRESULT, 'QueryItem',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(POINTER(IElement)), 'Element' ),
              ( ['out', 'optional'], POINTER(c_int), 'LinkedFeatureID', 0 ),
              ( ['out', 'optional'], POINTER(c_int), 'AnnotationClassID', 0 ),
              ( ['out', 'optional'], POINTER(esriAnnotationStatus), 'Status', 0 )),
    COMMETHOD([helpstring(u'Removes all the elements in the collection.')], HRESULT, 'Clear'),
    COMMETHOD([helpstring(u'Remove an element from the collection.')], HRESULT, 'Remove',
              ( ['in'], POINTER(IElement), 'Element' )),
]
################################################################
## code template for IElementCollection2 implementation
##class IElementCollection2_Impl(object):
##    @property
##    def Count(self):
##        u'Number of elements in the collection.'
##        #return Count
##
##    def QueryItem(self, Index):
##        u'Element at the given index.'
##        #return Element, LinkedFeatureID, AnnotationClassID, Status
##
##    def Add(self, Element, LinkedFeatureID, AnnotationClassID, Status):
##        u'Adds an element to the collection.'
##        #return 
##
##    def Clear(self):
##        u'Removes all the elements in the collection.'
##        #return 
##
##    def Remove(self, Element):
##        u'Remove an element from the collection.'
##        #return 
##

IACGradientFillSymbol._methods_ = [
    COMMETHOD(['propget', helpstring(u'The fill type.')], HRESULT, 'Type',
              ( ['retval', 'out'], POINTER(acGradientFillType), 'Type' )),
    COMMETHOD(['propput', helpstring(u'The fill type.')], HRESULT, 'Type',
              ( ['in'], acGradientFillType, 'Type' )),
    COMMETHOD(['propget', helpstring(u'The start color.')], HRESULT, 'StartColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'The start color.')], HRESULT, 'StartColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'The end color.')], HRESULT, 'FinishColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'The end color.')], HRESULT, 'FinishColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'Indicates if labels can overlap this symbol.')], HRESULT, 'Overlap',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if labels can overlap this symbol.')], HRESULT, 'Overlap',
              ( ['in'], VARIANT_BOOL, 'flag' )),
]
################################################################
## code template for IACGradientFillSymbol implementation
##class IACGradientFillSymbol_Impl(object):
##    def _get(self):
##        u'The end color.'
##        #return Color
##    def _set(self, Color):
##        u'The end color.'
##    FinishColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The start color.'
##        #return Color
##    def _set(self, Color):
##        u'The start color.'
##    StartColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The fill type.'
##        #return Type
##    def _set(self, Type):
##        u'The fill type.'
##    Type = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if labels can overlap this symbol.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if labels can overlap this symbol.'
##    Overlap = property(_get, _set, doc = _set.__doc__)
##

class AISRequest(CoClass):
    u'An executable AIS request on an Image Service.'
    _reg_clsid_ = GUID('{044BA42C-E832-4E5D-962C-3EE0C2DF4043}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
AISRequest._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IAISRequest, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class CalibratedMapGridBorder(CoClass):
    u'A map grid border that is calibrated.'
    _reg_clsid_ = GUID('{6CA416B0-E160-11D2-9F4E-00C04F6BC78E}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
CalibratedMapGridBorder._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMapGridBorder, ICalibratedMapGridBorder, IGraphicsComposite, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

class CalcRendererValues(CoClass):
    u'An object that calculates renderer statistics which are required for some uses of the ChartRenderer object.'
    _reg_clsid_ = GUID('{4B62F73D-0502-11D4-9F7C-00C04F6BC709}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
CalcRendererValues._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ICalcRendererValues, ICalcRendererValues2]


# values for enumeration 'esriGraphicFeatureServerErrors'
GFS_E_MISSING_PARAMETER = -2147221403
GFS_E_UNSUPPORTED_DATASOURCE_TYPE = -2147221402
GFS_E_NOLAYER_OR_TABLE_INITIALIZED = -2147221401
GFS_E_LAYER_TABLE_NOT_EDITABLE = -2147221400
GFS_E_FEATURE_UPDATE_FAILED_MISSING_M_VALUES = -2147221399
GFS_E_FEATURE_GEOMETRY_PUT_FAILED_FAILED_MISSING_Z_VALUES = -2147221398
GFS_E_EDITOR_TRACKING_TIMESTAMPS_IN_UTC_AND_DATABASETIME_ERROR = -2147221397
GFS_E_MISSING_EDITOR_TRACKING_TIMEZONE_ERROR = -2147221396
esriGraphicFeatureServerErrors = c_int # enum
IMapServerRelationships._methods_ = [
    COMMETHOD(['propget', helpstring(u'The relationship count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The relationship at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IMapServerRelationship)), 'rel' )),
    COMMETHOD([helpstring(u'Removes the relationship at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all relationships.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Adds a relationship.')], HRESULT, 'Add',
              ( ['in'], POINTER(IMapServerRelationship), 'rel' )),
    COMMETHOD([helpstring(u'Adds a relationship at the specified position.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(IMapServerRelationship), 'Row' )),
]
################################################################
## code template for IMapServerRelationships implementation
##class IMapServerRelationships_Impl(object):
##    @property
##    def Count(self):
##        u'The relationship count.'
##        #return Count
##
##    def Insert(self, Index, Row):
##        u'Adds a relationship at the specified position.'
##        #return 
##
##    def Remove(self, Index):
##        u'Removes the relationship at the specified position.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'The relationship at the specified position.'
##        #return rel
##
##    def RemoveAll(self):
##        u'Removes all relationships.'
##        #return 
##
##    def Add(self, rel):
##        u'Adds a relationship.'
##        #return 
##

IStandaloneTableDescription._methods_ = [
]
################################################################
## code template for IStandaloneTableDescription implementation
##class IStandaloneTableDescription_Impl(object):

ILayerDrawingDescription._methods_ = [
]
################################################################
## code template for ILayerDrawingDescription implementation
##class ILayerDrawingDescription_Impl(object):

class ACRasterShieldSymbol(CoClass):
    u'ArcIMS Raster Shield Symbol.'
    _reg_clsid_ = GUID('{8D574CAB-FF08-473E-8B73-BCB9E7605A20}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
ACRasterShieldSymbol._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IACAxl, IACSymbol, IACRasterShieldSymbol, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

ILayerFactoryHelper._methods_ = [
    COMMETHOD([helpstring(u'Given a name attempts to open it using the layer factories, if successful returns a layers enumerator.')], HRESULT, 'CreateLayersFromName',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName), 'Name' ),
              ( ['retval', 'out'], POINTER(POINTER(IEnumLayer)), 'Layer' )),
]
################################################################
## code template for ILayerFactoryHelper implementation
##class ILayerFactoryHelper_Impl(object):
##    def CreateLayersFromName(self, Name):
##        u'Given a name attempts to open it using the layer factories, if successful returns a layers enumerator.'
##        #return Layer
##

ITableIdentity._methods_ = [
    COMMETHOD(['propget'], HRESULT, 'ID',
              ( ['retval', 'out'], POINTER(c_int), 'ID' )),
    COMMETHOD(['propget'], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
]
################################################################
## code template for ITableIdentity implementation
##class ITableIdentity_Impl(object):
##    @property
##    def ID(self):
##        '-no docstring-'
##        #return ID
##
##    @property
##    def Name(self):
##        '-no docstring-'
##        #return Name
##

class IFieldDomainInfos(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Field Domain Information Array.'
    _iid_ = GUID('{97605DF9-6CFC-466E-8133-320C9CC086F4}')
    _idlflags_ = ['oleautomation']
ISubtypeInfo._methods_ = [
    COMMETHOD(['propget', helpstring(u'The Subtype Code.')], HRESULT, 'SubtypeCode',
              ( ['retval', 'out'], POINTER(c_int), 'pSubtypeCode' )),
    COMMETHOD(['propget', helpstring(u'The Subtype Name.')], HRESULT, 'SubtypeName',
              ( ['retval', 'out'], POINTER(BSTR), 'pSubtypeName' )),
    COMMETHOD(['propget', helpstring(u'The Array of Field Domains.')], HRESULT, 'FieldDomainInfos',
              ( ['retval', 'out'], POINTER(POINTER(IFieldDomainInfos)), 'ppFieldDomainInfos' )),
]
################################################################
## code template for ISubtypeInfo implementation
##class ISubtypeInfo_Impl(object):
##    @property
##    def SubtypeName(self):
##        u'The Subtype Name.'
##        #return pSubtypeName
##
##    @property
##    def SubtypeCode(self):
##        u'The Subtype Code.'
##        #return pSubtypeCode
##
##    @property
##    def FieldDomainInfos(self):
##        u'The Array of Field Domains.'
##        #return ppFieldDomainInfos
##

class ProportionalSymbolRenderer(CoClass):
    u'A proportional symbol renderer, used to draw symbols of varying size for each feature, sized in proportion to a field value.'
    _reg_clsid_ = GUID('{4EAB568E-8F9C-11D2-AB21-00C04FA334B3}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
ProportionalSymbolRenderer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IFeatureRenderer, IProportionalSymbolRenderer, IDataExclusion, IDataExclusion2, ILegendInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, IRotationRenderer, IRotationRenderer2, IDataNormalization, IBarrierProperties2, IExportSupport]

IDynamicHit._methods_ = [
    COMMETHOD(['propget', helpstring(u'The owner (layer) that is hit.')], HRESULT, 'Owner',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppOwner' )),
    COMMETHOD(['propputref', helpstring(u'The owner (layer) that is hit.')], HRESULT, 'Owner',
              ( ['in'], POINTER(IUnknown), 'ppOwner' )),
    COMMETHOD(['propget', helpstring(u'The object that is hit.')], HRESULT, 'Object',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppObject' )),
    COMMETHOD(['propputref', helpstring(u'The object that is hit.')], HRESULT, 'Object',
              ( ['in'], POINTER(IUnknown), 'ppObject' )),
    COMMETHOD(['propget', helpstring(u'The parent identifier.')], HRESULT, 'ParentID',
              ( ['retval', 'out'], POINTER(c_int), 'ID' )),
    COMMETHOD(['propput', helpstring(u'The parent identifier.')], HRESULT, 'ParentID',
              ( ['in'], c_int, 'ID' )),
    COMMETHOD(['propget', helpstring(u'The oject ID.')], HRESULT, 'ObjectID',
              ( ['retval', 'out'], POINTER(c_int), 'ID' )),
    COMMETHOD(['propput', helpstring(u'The oject ID.')], HRESULT, 'ObjectID',
              ( ['in'], c_int, 'ID' )),
    COMMETHOD(['propget', helpstring(u'Number of names (for internal use).')], HRESULT, 'NameCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propput', helpstring(u'Number of names (for internal use).')], HRESULT, 'NameCount',
              ( ['in'], c_int, 'Count' )),
]
################################################################
## code template for IDynamicHit implementation
##class IDynamicHit_Impl(object):
##    def Owner(self, ppOwner):
##        u'The owner (layer) that is hit.'
##        #return 
##
##    def Object(self, ppObject):
##        u'The object that is hit.'
##        #return 
##
##    def _get(self):
##        u'Number of names (for internal use).'
##        #return Count
##    def _set(self, Count):
##        u'Number of names (for internal use).'
##    NameCount = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The oject ID.'
##        #return ID
##    def _set(self, ID):
##        u'The oject ID.'
##    ObjectID = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The parent identifier.'
##        #return ID
##    def _set(self, ID):
##        u'The parent identifier.'
##    ParentID = property(_get, _set, doc = _set.__doc__)
##

class MapFrameDescription(CoClass):
    u'The Map Frame Description coclass contains settings of a map frame in the current document.'
    _reg_clsid_ = GUID('{6D72CDA6-8613-4F53-B4D7-AE8950DF8383}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
MapFrameDescription._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMapFrameDescription, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

IMapServerRows._methods_ = [
    COMMETHOD(['propget', helpstring(u'The row count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The row at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IMapServerRow)), 'Row' )),
    COMMETHOD([helpstring(u'Removes the row at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all rows.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Adds a row.')], HRESULT, 'Add',
              ( ['in'], POINTER(IMapServerRow), 'Row' )),
    COMMETHOD([helpstring(u'Adds a row at the specified position.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(IMapServerRow), 'Row' )),
]
################################################################
## code template for IMapServerRows implementation
##class IMapServerRows_Impl(object):
##    @property
##    def Count(self):
##        u'The row count.'
##        #return Count
##
##    def Insert(self, Index, Row):
##        u'Adds a row at the specified position.'
##        #return 
##
##    def Remove(self, Index):
##        u'Removes the row at the specified position.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'The row at the specified position.'
##        #return Row
##
##    def RemoveAll(self):
##        u'Removes all rows.'
##        #return 
##
##    def Add(self, Row):
##        u'Adds a row.'
##        #return 
##

class FieldInfo(CoClass):
    u'Stores extended field information.'
    _reg_clsid_ = GUID('{A2BAAE2D-969B-11D2-AE77-080009EC732A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
FieldInfo._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFieldInfo, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFieldInfo2, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFieldInfo3, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

IDimensionShape._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The begin dimension point.')], HRESULT, 'BeginDimensionPoint',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'point' )),
    COMMETHOD(['propget', helpstring(u'The begin dimension point.')], HRESULT, 'BeginDimensionPoint',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint)), 'point' )),
    COMMETHOD(['propputref', helpstring(u'The end dimension point.')], HRESULT, 'EndDimensionPoint',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'point' )),
    COMMETHOD(['propget', helpstring(u'The end dimension point.')], HRESULT, 'EndDimensionPoint',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint)), 'point' )),
    COMMETHOD(['propget', helpstring(u'The point which describes the height of the dimension line.')], HRESULT, 'DimensionLinePoint',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint)), 'point' )),
    COMMETHOD(['propputref', helpstring(u'The point which describes the height of the dimension line.')], HRESULT, 'DimensionLinePoint',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'point' )),
    COMMETHOD(['propget', helpstring(u'The point for the text placement.')], HRESULT, 'TextPoint',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint)), 'point' )),
    COMMETHOD(['propputref', helpstring(u'The point for the text placement.')], HRESULT, 'TextPoint',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'point' )),
    COMMETHOD(['propget', helpstring(u'The angle of the extension lines in radians.')], HRESULT, 'ExtensionLineAngle',
              ( ['retval', 'out'], POINTER(c_double), 'Angle' )),
    COMMETHOD(['propput', helpstring(u'The angle of the extension lines in radians.')], HRESULT, 'ExtensionLineAngle',
              ( ['in'], c_double, 'Angle' )),
    COMMETHOD(['propget', helpstring(u'The angle of the text in radians.')], HRESULT, 'TextAngle',
              ( ['retval', 'out'], POINTER(c_double), 'Angle' )),
    COMMETHOD(['propput', helpstring(u'The angle of the text in radians.')], HRESULT, 'TextAngle',
              ( ['in'], c_double, 'Angle' )),
]
################################################################
## code template for IDimensionShape implementation
##class IDimensionShape_Impl(object):
##    def _get(self):
##        u'The angle of the extension lines in radians.'
##        #return Angle
##    def _set(self, Angle):
##        u'The angle of the extension lines in radians.'
##    ExtensionLineAngle = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def EndDimensionPoint(self, point):
##        u'The end dimension point.'
##        #return 
##
##    @property
##    def BeginDimensionPoint(self, point):
##        u'The begin dimension point.'
##        #return 
##
##    def DimensionLinePoint(self, point):
##        u'The point which describes the height of the dimension line.'
##        #return 
##
##    def _get(self):
##        u'The angle of the text in radians.'
##        #return Angle
##    def _set(self, Angle):
##        u'The angle of the text in radians.'
##    TextAngle = property(_get, _set, doc = _set.__doc__)
##
##    def TextPoint(self, point):
##        u'The point for the text placement.'
##        #return 
##

class FrameElement(CoClass):
    u'The Frame element to provide a neatline or background.'
    _reg_clsid_ = GUID('{E01BA2C5-24B2-11D3-B8AA-00600802E603}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
FrameElement._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IElement, IElementProperties, IElementProperties2, IElementProperties3, IGraphicElement, IBoundsProperties, IFrameElement, IFrameDraw, IFrameProperties, comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ITransform2D, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class ILayerPropertySheet(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to layers that implement their own custom property sheet.'
    _iid_ = GUID('{2EEF47A6-9527-4D1A-A452-CDDDF4C5E080}')
    _idlflags_ = ['oleautomation']
ILayerPropertySheet._methods_ = [
    COMMETHOD([helpstring(u'Show the property sheet.')], HRESULT, 'ShowPropertySheet',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'ok' )),
]
################################################################
## code template for ILayerPropertySheet implementation
##class ILayerPropertySheet_Impl(object):
##    def ShowPropertySheet(self):
##        u'Show the property sheet.'
##        #return ok
##

ILabelEngineLayerProperties._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The text symbol used to draw the label.')], HRESULT, 'Symbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol), 'TextSymbol' )),
    COMMETHOD(['propget', helpstring(u'The text symbol used to draw the label.')], HRESULT, 'Symbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol)), 'TextSymbol' )),
    COMMETHOD(['propput', helpstring(u'The ID of the group symbol used to draw the label.')], HRESULT, 'SymbolID',
              ( ['in'], c_int, 'pSymbolID' )),
    COMMETHOD(['propget', helpstring(u'The ID of the group symbol used to draw the label.')], HRESULT, 'SymbolID',
              ( ['retval', 'out'], POINTER(c_int), 'pSymbolID' )),
    COMMETHOD(['propput', helpstring(u'The offset between the label and the feature.')], HRESULT, 'Offset',
              ( ['in'], c_double, 'Offset' )),
    COMMETHOD(['propget', helpstring(u'The offset between the label and the feature.')], HRESULT, 'Offset',
              ( ['retval', 'out'], POINTER(c_double), 'Offset' )),
    COMMETHOD(['propputref', helpstring(u'The overposter properties, which specify how labels are placed relative to features.')], HRESULT, 'BasicOverposterLayerProperties',
              ( ['in'], POINTER(IBasicOverposterLayerProperties), 'props' )),
    COMMETHOD(['propget', helpstring(u'The overposter properties, which specify how labels are placed relative to features.')], HRESULT, 'BasicOverposterLayerProperties',
              ( ['retval', 'out'], POINTER(POINTER(IBasicOverposterLayerProperties)), 'props' )),
    COMMETHOD(['propput', helpstring(u'The VBScript or JScript expression that evaluates and formats the label.')], HRESULT, 'Expression',
              ( ['in'], BSTR, 'Expression' )),
    COMMETHOD(['propget', helpstring(u'The VBScript or JScript expression that evaluates and formats the label.')], HRESULT, 'Expression',
              ( ['retval', 'out'], POINTER(BSTR), 'Expression' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the expression is simple.')], HRESULT, 'IsExpressionSimple',
              ( ['in'], VARIANT_BOOL, 'simpleExpression' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the expression is simple.')], HRESULT, 'IsExpressionSimple',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'simpleExpression' )),
    COMMETHOD(['propputref', helpstring(u'The object that interprets the expression.')], HRESULT, 'ExpressionParser',
              ( ['in'], POINTER(IAnnotationExpressionEngine), 'engine' )),
    COMMETHOD(['propget', helpstring(u'The object that interprets the expression.')], HRESULT, 'ExpressionParser',
              ( ['retval', 'out'], POINTER(POINTER(IAnnotationExpressionEngine)), 'engine' )),
]
################################################################
## code template for ILabelEngineLayerProperties implementation
##class ILabelEngineLayerProperties_Impl(object):
##    @property
##    def Symbol(self, TextSymbol):
##        u'The text symbol used to draw the label.'
##        #return 
##
##    def _get(self):
##        u'The ID of the group symbol used to draw the label.'
##        #return pSymbolID
##    def _set(self, pSymbolID):
##        u'The ID of the group symbol used to draw the label.'
##    SymbolID = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def ExpressionParser(self, engine):
##        u'The object that interprets the expression.'
##        #return 
##
##    @property
##    def BasicOverposterLayerProperties(self, props):
##        u'The overposter properties, which specify how labels are placed relative to features.'
##        #return 
##
##    def _get(self):
##        u'The offset between the label and the feature.'
##        #return Offset
##    def _set(self, Offset):
##        u'The offset between the label and the feature.'
##    Offset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the expression is simple.'
##        #return simpleExpression
##    def _set(self, simpleExpression):
##        u'Indicates if the expression is simple.'
##    IsExpressionSimple = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The VBScript or JScript expression that evaluates and formats the label.'
##        #return Expression
##    def _set(self, Expression):
##        u'The VBScript or JScript expression that evaluates and formats the label.'
##    Expression = property(_get, _set, doc = _set.__doc__)
##

class MaplexLabelStyleGalleryClass(CoClass):
    u'Use to create new Maplex Label style items.'
    _reg_clsid_ = GUID('{20664808-CBA7-11D2-9FA4-0FC04F6EC6A1}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
MaplexLabelStyleGalleryClass._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IStyleGalleryClass, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IStyleGalleryClass2]

IWMSLayer._methods_ = [
    COMMETHOD(['propget', helpstring(u'Associated WMSLayerDescription.')], HRESULT, 'WMSLayerDescription',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._746F6817_89BB_4490_9829_83CA25FD505A_0_10_2.IWMSLayerDescription)), 'pLayerDescription' )),
    COMMETHOD(['propget', helpstring(u'Associated WMSServiceDescription.')], HRESULT, 'WMSServiceDescription',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._746F6817_89BB_4490_9829_83CA25FD505A_0_10_2.IWMSServiceDescription)), 'ServiceDescription' )),
]
################################################################
## code template for IWMSLayer implementation
##class IWMSLayer_Impl(object):
##    @property
##    def WMSServiceDescription(self):
##        u'Associated WMSServiceDescription.'
##        #return ServiceDescription
##
##    @property
##    def WMSLayerDescription(self):
##        u'Associated WMSLayerDescription.'
##        #return pLayerDescription
##

class MapServerHyperlinks(CoClass):
    u'A collection of Map Server Hyperlink objects.'
    _reg_clsid_ = GUID('{9B389417-F5BF-420F-882D-C5D2BE6DE04A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
MapServerHyperlinks._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMapServerHyperlinks, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

class MapServerRows(CoClass):
    u'A collection of Map Server Row objects.'
    _reg_clsid_ = GUID('{EFD9858C-4F89-4059-91FA-39F97FF5B16C}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
MapServerRows._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMapServerRows, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

class MapServerLegendGroups(CoClass):
    u'A collection of Map Server Legend Group objects.'
    _reg_clsid_ = GUID('{6E28CE07-EA2E-41D4-9161-0622708D62AD}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
MapServerLegendGroups._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMapServerLegendGroups, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

class MapImages(CoClass):
    u'A collection of Map Image objects.'
    _reg_clsid_ = GUID('{58A06DEE-C4ED-4080-9FB8-AFF183F0CC47}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
MapImages._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMapImages, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

IACShieldSymbol._methods_ = [
    COMMETHOD(['propget', helpstring(u'The font name.')], HRESULT, 'Font',
              ( ['retval', 'out'], POINTER(BSTR), 'Font' )),
    COMMETHOD(['propput', helpstring(u'The font name.')], HRESULT, 'Font',
              ( ['in'], BSTR, 'Font' )),
    COMMETHOD(['propget', helpstring(u'The font style.')], HRESULT, 'FontStyle',
              ( ['retval', 'out'], POINTER(acFontStyle), 'FontStyle' )),
    COMMETHOD(['propput', helpstring(u'The font style.')], HRESULT, 'FontStyle',
              ( ['in'], acFontStyle, 'FontStyle' )),
    COMMETHOD(['propget', helpstring(u'The font size.')], HRESULT, 'FontSize',
              ( ['retval', 'out'], POINTER(c_int), 'FontSize' )),
    COMMETHOD(['propput', helpstring(u'The font size.')], HRESULT, 'FontSize',
              ( ['in'], c_int, 'FontSize' )),
    COMMETHOD(['propget', helpstring(u'The font color.')], HRESULT, 'FontColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'The font color.')], HRESULT, 'FontColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the shadow is used.')], HRESULT, 'Shadow',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the shadow is used.')], HRESULT, 'Shadow',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'The shadow color.')], HRESULT, 'ShadowColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propput', helpstring(u'The shadow color.')], HRESULT, 'ShadowColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'The label mode.')], HRESULT, 'LabelMode',
              ( ['retval', 'out'], POINTER(acLabelMode), 'LabelMode' )),
    COMMETHOD(['propput', helpstring(u'The label mode.')], HRESULT, 'LabelMode',
              ( ['in'], acLabelMode, 'LabelMode' )),
    COMMETHOD(['propget', helpstring(u'The shield size.')], HRESULT, 'MinSize',
              ( ['retval', 'out'], POINTER(c_int), 'Size' )),
    COMMETHOD(['propput', helpstring(u'The shield size.')], HRESULT, 'MinSize',
              ( ['in'], c_int, 'Size' )),
    COMMETHOD(['propget', helpstring(u'The shield type.')], HRESULT, 'Type',
              ( ['retval', 'out'], POINTER(acShieldSymbolType), 'Type' )),
    COMMETHOD(['propput', helpstring(u'The shield type.')], HRESULT, 'Type',
              ( ['in'], acShieldSymbolType, 'Type' )),
]
################################################################
## code template for IACShieldSymbol implementation
##class IACShieldSymbol_Impl(object):
##    def _get(self):
##        u'The font style.'
##        #return FontStyle
##    def _set(self, FontStyle):
##        u'The font style.'
##    FontStyle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The shield size.'
##        #return Size
##    def _set(self, Size):
##        u'The shield size.'
##    MinSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The shadow color.'
##        #return Color
##    def _set(self, Color):
##        u'The shadow color.'
##    ShadowColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The font size.'
##        #return FontSize
##    def _set(self, FontSize):
##        u'The font size.'
##    FontSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The font color.'
##        #return Color
##    def _set(self, Color):
##        u'The font color.'
##    FontColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the shadow is used.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if the shadow is used.'
##    Shadow = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The font name.'
##        #return Font
##    def _set(self, Font):
##        u'The font name.'
##    Font = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The shield type.'
##        #return Type
##    def _set(self, Type):
##        u'The shield type.'
##    Type = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The label mode.'
##        #return LabelMode
##    def _set(self, LabelMode):
##        u'The label mode.'
##    LabelMode = property(_get, _set, doc = _set.__doc__)
##

class MapServerRelationships(CoClass):
    u'A collection of Map Server Relationship objects.'
    _reg_clsid_ = GUID('{6FD540D3-CFC4-4512-A881-1948651D925A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
MapServerRelationships._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMapServerRelationships, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

class ACConnector(CoClass):
    u'An object that connects to ArcIMS servers.'
    _reg_clsid_ = GUID('{84B9FDAB-DFD4-11D3-9FF7-00C04F6BC6A5}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
ACConnector._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IACConnector]

class RasterRGBSymbol(CoClass):
    u'Esri RasterRGBSymbol for raster rendering.'
    _reg_clsid_ = GUID('{99DCCB66-2E09-11D3-A626-0008C7BF3347}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
RasterRGBSymbol._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IColorSymbol, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IMapLevel, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySupport]

IAnnotateMapProperties._methods_ = [
    COMMETHOD(['propputref', helpstring(u'A collection of annotate layer properties.')], HRESULT, 'AnnotateLayerPropertiesCollection',
              ( ['in'], POINTER(IAnnotateLayerPropertiesCollection), 'annoLayerPropsCol' )),
    COMMETHOD(['propget', helpstring(u'A collection of annotate layer properties.')], HRESULT, 'AnnotateLayerPropertiesCollection',
              ( ['retval', 'out'], POINTER(POINTER(IAnnotateLayerPropertiesCollection)), 'annoLayerPropsCol' )),
]
################################################################
## code template for IAnnotateMapProperties implementation
##class IAnnotateMapProperties_Impl(object):
##    @property
##    def AnnotateLayerPropertiesCollection(self, annoLayerPropsCol):
##        u'A collection of annotate layer properties.'
##        #return 
##

class ImageServerConfigurationFactory(CoClass):
    u'ImageServer Configuration Factory Class.'
    _reg_clsid_ = GUID('{2CEE6617-6B88-4700-8C95-6CDB87E02A94}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
ImageServerConfigurationFactory._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._18F2FC71_6B30_45B9_B101_037A8B868B66_0_10_2.IConfigurationFactory, comtypes.gen._18F2FC71_6B30_45B9_B101_037A8B868B66_0_10_2.IConfigurationFactory2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]

class MapServerLegendClasses(CoClass):
    u'A collection of Map Server Legend Class objects.'
    _reg_clsid_ = GUID('{C331EF53-0B91-4249-98DE-7927AB200BC2}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
MapServerLegendClasses._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMapServerLegendClasses, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]


# values for enumeration 'esriMapServerMsgCodeEnum'
esriMapServerMsgCode_MessageArrival_GetDocumentInfo = 10000
esriMapServerMsgCode_MessageProcessed_GetDocumentInfo = 10001
esriMapServerMsgCode_MessageArrival_GetMapCount = 10002
esriMapServerMsgCode_MessageProcessed_GetMapCount = 10003
esriMapServerMsgCode_MessageArrival_GetMapName = 10004
esriMapServerMsgCode_MessageProcessed_GetMapName = 10005
esriMapServerMsgCode_MessageArrival_GetDefaultMapName = 10006
esriMapServerMsgCode_MessageProcessed_GetDefaultMapName = 10007
esriMapServerMsgCode_MessageArrival_GetServerInfo = 10008
esriMapServerMsgCode_MessageProcessed_GetServerInfo = 10009
esriMapServerMsgCode_MessageArrival_ExportMapImage = 10010
esriMapServerMsgCode_MessageProcessed_ExportMapImage = 10011
esriMapServerMsgCode_MessageArrival_ExportScaleBar = 10012
esriMapServerMsgCode_MessageProcessed_ExportScaleBar = 10013
esriMapServerMsgCode_MessageArrival_Find = 10014
esriMapServerMsgCode_MessageProcessed_Find = 10015
esriMapServerMsgCode_MessageArrival_Identify = 10016
esriMapServerMsgCode_MessageProcessed_Identify = 10017
esriMapServerMsgCode_MessageArrival_QueryFeatureCount = 10018
esriMapServerMsgCode_MessageProcessed_QueryFatureCount = 10019
esriMapServerMsgCode_MessageArrival_QueryFeatureIDs = 10020
esriMapServerMsgCode_MessageProcessed_QueryFeatureIDs = 10021
esriMapServerMsgCode_MessageArrival_QueryFeatureData = 10022
esriMapServerMsgCode_MessageProcessed_QueryFeatureData = 10023
esriMapServerMsgCode_MessageArrival_QueryFeatureCount2 = 10024
esriMapServerMsgCode_MessageProcessed_QueryFeatureCount2 = 10025
esriMapServerMsgCode_MessageArrival_QueryFeatureIDs2 = 10026
esriMapServerMsgCode_MessageProcessed_QueryFeatureIDs2 = 10027
esriMapServerMsgCode_MessageArrival_QueryFeatureData2 = 10028
esriMapServerMsgCode_MessageProcessed_QueryFeatureData2 = 10029
esriMapServerMsgCode_MessageArrival_QueryHyperlinks = 10030
esriMapServerMsgCode_MessageProcessed_QueryHyperlinks = 10031
esriMapServerMsgCode_MessageArrival_ComputeScale = 10032
esriMapServerMsgCode_MessageProcessed_ComputeScale = 10033
esriMapServerMsgCode_MessageArrival_ComputeDistance = 10034
esriMapServerMsgCode_MessageProcessed_ComputeDistance = 10035
esriMapServerMsgCode_MessageArrival_ToMapPoints = 10036
esriMapServerMsgCode_MessageProcessed_ToMapPoints = 10037
esriMapServerMsgCode_MessageArrival_FromMapPoints = 10038
esriMapServerMsgCode_MessageProcessed_FromMapPoints = 10039
esriMapServerMsgCode_MessageArrival_GetLegendInfo = 10040
esriMapServerMsgCode_MessageProcessed_GetLegendInfo = 10041
esriMapServerMsgCode_MessageArrival_GetSQLSyntaxInfo = 10042
esriMapServerMsgCode_MessageProcessed_GetSQLSyntaxInfo = 10043
esriMapServerMsgCode_MessageArrival_GetSupportedImageReturnTypes = 10044
esriMapServerMsgCode_MessageProcessed_GetSupportedImageReturnTypes = 10045
esriMapServerMsgCode_MessageArrival_IsFixedScaleMap = 10046
esriMapServerMsgCode_MessageProcessed_IsFixedScaleMap = 10047
esriMapServerMsgCode_MessageArrival_HasSingleFusedMapCache = 10048
esriMapServerMsgCode_MessageProcessed_HasSingleFusedMapCache = 10049
esriMapServerMsgCode_MessageArrival_GetTileCacheInfo = 10050
esriMapServerMsgCode_MessageProcessed_GetTileCacheInfo = 10051
esriMapServerMsgCode_MessageArrival_GetTileImageInfo = 10052
esriMapServerMsgCode_MessageProcessed_GetTileImageInfo = 10053
esriMapServerMsgCode_MessageArrival_GetMapTile = 10054
esriMapServerMsgCode_MessageProcessed_GetMapTile = 10055
esriMapServerMsgCode_MessageArrival_HasLayerCache = 10056
esriMapServerMsgCode_MessageProcessed_HasLayerCache = 10057
esriMapServerMsgCode_MessageArrival_getLayerTile = 10058
esriMapServerMsgCode_MessageProcessed_GetLayerTile = 10059
esriMapServerMsgCode_MessageArrival_GetVirtualCacheDirectory = 10060
esriMapServerMsgCode_MessageProcessed_GetVirtualCacheDirectory = 10061
esriMapServerMsgCode_MessageArrival_GetCacheName = 10062
esriMapServerMsgCode_MessageProcessed_GetCacheName = 10063
esriMapServerMsgCode_MessageArrival_GetCacheDescriptionInfo = 10064
esriMapServerMsgCode_MessageProcessed_GetCacheDescriptionInfo = 10065
esriMapServerMsgCode_MessageArrival_GetCacheControlInfo = 10066
esriMapServerMsgCode_MessageProcessed_GetCacheControlInfo = 10067
esriMapServerMsgCode_MessageArrival_GetServiceConfigurationInfo = 10068
esriMapServerMsgCode_MessageProcessed_GetServiceConfigurationInfo = 10069
esriMapServerMsgCode_MessageArrival_ExportLayout = 10070
esriMapServerMsgCode_MessageProcessed_ExportLayout = 10071
esriMapServerMsgCode_MessageArrival_ExportLegend = 10072
esriMapServerMsgCode_MessageProcessed_ExportLegend = 10073
esriMapServerMsgCode_MessageArrival_ExportNorthArrow = 10074
esriMapServerMsgCode_MessageProcessed_ExportNorthArrow = 10075
esriMapServerMsgCode_MessageArrival_FromPagePoints = 10076
esriMapServerMsgCode_MessageProcessed_FromPagePoints = 10077
esriMapServerMsgCode_MessageArrival_ToPagePoints = 10078
esriMapServerMsgCode_MessageProcessed_ToPagePoints = 10079
esriMapServerMsgCode_MessageArrival_ApplyMapDescription = 10080
esriMapServerMsgCode_MessageProcessed_ApplyMapDescription = 10081
esriMapServerMsgCode_MessageArrival_RefreshServerObjecs = 10082
esriMapServerMsgCode_MessageProcessed_RefreshServerObjecs = 10083
esriMapServerMsgCode_Layer_Find_Start = 10084
esriMapServerMsgCode_Layer_Find_End = 10085
esriMapServerMsgCode_Layer_Identify_Start = 10086
esriMapServerMsgCode_Layer_Identify_End = 10087
esriMapServerMsgCode_Layer_QueryHyperlinks_Start = 10088
esriMapServerMsgCode_Layer_QueryHyperlinks_End = 10089
esriMapServerMsgCode_Layer_GetLegendInfo_Start = 10090
esriMapServerMsgCode_Layer_GetLegendInfo_End = 10091
esriMapServerMsgCode_MapReaderOpen_Start = 10092
esriMapServerMsgCode_MapReaderOpen_End = 10093
esriMapServerMsgCode_Preparation_Start = 10094
esriMapServerMsgCode_Preparation_End = 10095
esriMapServerMsgCode_QueryOperation_Start = 10096
esriMapServerMsgCode_QueryOperation_End = 10097
esriMapServerMsgCode_ImageGeneration_Started = 10098
esriMapServerMsgCode_ImageGeneration_End = 10099
esriMapServerMsgCode_MessageArrival_QueryRelatedRecords = 10100
esriMapServerMsgCode_MessageProcessed_QueryRelatedRecords = 10101
esriMapServerMsgCode_MessageArrival_QueryRowCount = 10102
esriMapServerMsgCode_MessageProcessed_QueryRowCount = 10103
esriMapServerMsgCode_MessageArrival_QueryRowIDs = 10104
esriMapServerMsgCode_MessageProcessed_QueryRowIDs = 10105
esriMapServerMsgCode_MessageArrival_QueryData = 10106
esriMapServerMsgCode_MessageProcessed_QueryData = 10107
esriMapServerMsgCode_MessageArrival_GetCacheStorageInfo = 10108
esriMapServerMsgCode_MessageProcessed_GetCacheStorageInfo = 10109
esriMapServerMsgCode_MessageArrival_QueryRasterValue = 10110
esriMapServerMsgCode_MessageProcessed_QueryRasterValue = 10111
esriMapServerMsgCode_MessageProcessed_QueryAttachmentInfos = 10112
esriMapServerMsgCode_MessageProcessed_QueryAttachmentData = 10113
esriMapServerMsgCode_MessageArrival_QueryAttachmentInfos = 10114
esriMapServerMsgCode_MessageArrival_QueryAttachmentData = 10115
esriMapServerMsgCode_MessageArrival_QueryHTMLPopups = 10116
esriMapServerMsgCode_MessageProcessed_QueryHTMLPopups = 10117
esriMapServerMsgCode_MessageArrival_GetDefaultLayerDrawingDescriptions = 10118
esriMapServerMsgCode_MessageProcessed_GetDefaultLayerDrawingDescriptions = 10119
esriMapServerMsgCode_MessageArrival_GetMapTableSubtypeInfos = 10120
esriMapServerMsgCode_MessageProcessed_GetMapTableSubtypeInfos = 10121
esriMapServerMsgCode_MessageArrival_QueryRelatedRecords2 = 10122
esriMapServerMsgCode_MessageProcessed_QueryRelatedRecords2 = 10123
esriMapServerMsgCode_MessageArrival_QueryRasterValue2 = 10124
esriMapServerMsgCode_MessageProcessed_QueryRasterValue2 = 10125
esriMapServerMsgCode_MessageArrival_QueryAttachmentInfos2 = 10126
esriMapServerMsgCode_MessageProcessed_QueryAttachmentInfos2 = 10127
esriMapServerMsgCode_MessageArrival_QueryAttachmentData2 = 10128
esriMapServerMsgCode_MessageProcessed_QueryAttachmentData2 = 10129
esriMapServerMsgCode_MessageArrival_QueryHTMLPopups2 = 10130
esriMapServerMsgCode_MessageProcessed_QueryHTMLPopups2 = 10131
esriMapServerMsgCode_MessageArrival_GetMapTableSubtypeInfos2 = 10132
esriMapServerMsgCode_MessageProcessed_GetMapTableSubtypeInfos2 = 10133
esriMapServerMsgCode_MessageArrival_QueryDataStatistics = 10134
esriMapServerMsgCode_MessageProcessed_QueryDataStatistics = 10135
esriMapServerMsgCode_MessageArrival_GenerateDataClasses = 10136
esriMapServerMsgCode_MessageProcessed_GenerateDataClasses = 10137
esriMapServerMsgCode_MessageInput_ExportMapImage = 10138
esriMapServerMsgCode_MapServerFailed = 10800
esriMapServerMsgCode_MapServerStartedWithInvalidLayers = 10801
esriMapServerMsgCode_InvalidLicense = 10802
esriMapServerMsgCode_UnsupportedRequest = 10803
esriMapServerMsgCode_CapabilityUnsupported = 10804
esriMapServerMsgCode_InvisibleOrInvalidFieldInSubField = 10805
esriMapServerMsgCode_DisconnectedFromData = 10806
esriMapServerMsgCode_SecureLayersEmbedded = 10807
esriMapServerMsgCode_FileInvalid = 10808
esriMapServerMsgCode_FileReadableByArcReaderOnly = 10809
esriMapServerMsgCode_PMFUnservableReason = 10810
esriMapServerMsgCode_PMFFilePasswordProtexted = 10811
esriMapServerMsgCode_PMFFileHasTimeOut = 10812
esriMapServerMsgCode_PMFReadMapError = 10813
esriMapServerMsgCode_PMFFileCanNotBeOpened = 10814
esriMapServerMsgCode_PMFGlobeEmbedded = 10815
esriMapServerMsgCode_FileOpenFailed = 10816
esriMapServerMsgCode_PMFInvalidFileType = 10817
esriMapServerMsgCode_PMFUnknownError = 10818
esriMapServerMsgCode_MissingParameter = 10819
esriMapServerMsgCode_OutputDirectoryNotFound = 10820
esriMapServerMsgCode_OutputDirectoryAccessDenied = 10821
esriMapServerMsgCode_PropertyFilePathUndefined = 10822
esriMapServerMsgCode_IsCacheMissing = 10823
esriMapServerMsgCode_CacheOnDemandMissing = 10824
esriMapServerMsgCode_IgnoreCacheMissing = 10825
esriMapServerMsgCode_ClientCachingAllowedMissing = 10826
esriMapServerMsgCode_OnStartFailed = 10827
esriMapServerMsgCode_OnStopFailed = 10828
esriMapServerMsgCode_CanNotIgnorecacheIfDisconnected = 10829
esriMapServerMsgCode_CanNotCacheOnDemandIfDisconnected = 10830
esriMapServerMsgCode_CanNotCacheOnDemandAndIgnoreCache = 10831
esriMapServerMsgCode_MissingServerEnvironment = 10832
esriMapServerMsgCode_LackingServerAdminPrevileges = 10833
esriMapServerMsgCode_CanNotConnectToCache = 10834
esriMapServerMsgCode_WMSNeedsOutputDirectory = 10835
esriMapServerMsgCode_MapNotFound = 10836
esriMapServerMsgCode_GeneralGeoDatabaseError = 10837
esriMapServerMsgCode_LayerIDNotFound = 10838
esriMapServerMsgCode_FieldNotFound = 10839
esriMapServerMsgCode_FormatNotSupported = 10840
esriMapServerMsgCode_ImageGenerationFailed = 10841
esriMapServerMsgCode_TableHasNoOIDHenceQueryFailed = 10842
esriMapServerMsgCode_DefaultSymbolGenerated = 10843
esriMapServerMsgCode_TooManyDomains = 10844
esriMapServerMsgCode_SymbologyNotConverted = 10845
esriMapServerMsgCode_LayerDrawingDescriptionNotValid = 10846
esriMapServerMsgCode_InvalidEmbeddedFont = 10847
esriMapServerMsgCode_DynamicDataSourceError = 10848
esriMapServerMsgCode_InvalidWhereClauseOrDefinitionExpression = 10849
esriMapServerMsgCodeEnum = c_int # enum
IPictureElement3._methods_ = [
    COMMETHOD(['propget', helpstring(u'Description of the Picture Element.')], HRESULT, 'PictureDescription',
              ( ['retval', 'out'], POINTER(BSTR), 'Description' )),
    COMMETHOD(['propget', helpstring(u'Filter used in CFileDialog.')], HRESULT, 'Filter',
              ( ['retval', 'out'], POINTER(BSTR), 'Filter' )),
    COMMETHOD(['propget', helpstring(u'Filter used in CFileDialog.')], HRESULT, 'PictureAspectRatio',
              ( ['retval', 'out'], POINTER(c_double), 'ratio' )),
    COMMETHOD(['propget', helpstring(u"Indicates if the resize box will maintain the picture's aspect ratio.")], HRESULT, 'MaintainAspectRatio',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'bRatio' )),
    COMMETHOD(['propput', helpstring(u"Indicates if the resize box will maintain the picture's aspect ratio.")], HRESULT, 'MaintainAspectRatio',
              ( ['in'], VARIANT_BOOL, 'bRatio' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the Picture will be stored in the Document.')], HRESULT, 'SavePictureInDocument',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'bSaveInDoc' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the Picture will be stored in the Document.')], HRESULT, 'SavePictureInDocument',
              ( ['in'], VARIANT_BOOL, 'bSaveInDoc' )),
    COMMETHOD([helpstring(u'File to be imported.')], HRESULT, 'ImportPictureFromFile',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD([helpstring(u'Get the intrinsic size of the picture in points.')], HRESULT, 'QueryIntrinsicSize',
              ( ['in', 'out'], POINTER(c_double), 'widthPoints' ),
              ( ['in', 'out'], POINTER(c_double), 'heightPoints' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether picture is a vector format as opposed to raster.')], HRESULT, 'IsVector',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propget', helpstring(u'The picture handle as a HBITMAP for bitmap pictures or an HENHMETAFILE for vector pictures.')], HRESULT, 'Handle',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE), 'Handle' )),
]
################################################################
## code template for IPictureElement3 implementation
##class IPictureElement3_Impl(object):
##    @property
##    def PictureAspectRatio(self):
##        u'Filter used in CFileDialog.'
##        #return ratio
##
##    def QueryIntrinsicSize(self):
##        u'Get the intrinsic size of the picture in points.'
##        #return widthPoints, heightPoints
##
##    @property
##    def IsVector(self):
##        u'Indicates whether picture is a vector format as opposed to raster.'
##        #return flag
##
##    def _get(self):
##        u"Indicates if the resize box will maintain the picture's aspect ratio."
##        #return bRatio
##    def _set(self, bRatio):
##        u"Indicates if the resize box will maintain the picture's aspect ratio."
##    MaintainAspectRatio = property(_get, _set, doc = _set.__doc__)
##
##    def ImportPictureFromFile(self, Name):
##        u'File to be imported.'
##        #return 
##
##    @property
##    def Filter(self):
##        u'Filter used in CFileDialog.'
##        #return Filter
##
##    @property
##    def Handle(self):
##        u'The picture handle as a HBITMAP for bitmap pictures or an HENHMETAFILE for vector pictures.'
##        #return Handle
##
##    @property
##    def PictureDescription(self):
##        u'Description of the Picture Element.'
##        #return Description
##
##    def _get(self):
##        u'Indicates if the Picture will be stored in the Document.'
##        #return bSaveInDoc
##    def _set(self, bSaveInDoc):
##        u'Indicates if the Picture will be stored in the Document.'
##    SavePictureInDocument = property(_get, _set, doc = _set.__doc__)
##

class FeatureServiceWorkspaceFactory(CoClass):
    u'FeatureService workspace factory.'
    _reg_clsid_ = GUID('{C81194E7-4DAA-418B-8C83-2942E65D2B8C}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
FeatureServiceWorkspaceFactory._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IPlugInWorkspaceFactoryHelper, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IPlugInWorkspaceFactoryHelper2, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspaceFactory, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspaceFactory2]

IPageDescription._methods_ = [
    COMMETHOD(['propget', helpstring(u'The height of the page.')], HRESULT, 'Height',
              ( ['retval', 'out'], POINTER(c_double), 'pageHeight' )),
    COMMETHOD(['propget', helpstring(u'The width of the page.')], HRESULT, 'Width',
              ( ['retval', 'out'], POINTER(c_double), 'pageWidth' )),
    COMMETHOD(['propget', helpstring(u'The page units.')], HRESULT, 'Units',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits), 'PageUnits' )),
    COMMETHOD(['propget', helpstring(u'The current extent of the page.')], HRESULT, 'Extent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'pageExtent' )),
    COMMETHOD(['propput', helpstring(u'The current extent of the page.')], HRESULT, 'Extent',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'pageExtent' )),
    COMMETHOD(['propget', helpstring(u'Custom graphics on the page.')], HRESULT, 'CustomGraphics',
              ( ['retval', 'out'], POINTER(POINTER(IGraphicElements)), 'Elements' )),
    COMMETHOD(['propput', helpstring(u'Custom graphics on the page.')], HRESULT, 'CustomGraphics',
              ( ['in'], POINTER(IGraphicElements), 'Elements' )),
    COMMETHOD(['propget', helpstring(u'Descriptions for the map frames on the page.')], HRESULT, 'MapFrames',
              ( ['retval', 'out'], POINTER(POINTER(IMapFrameDescriptions)), 'frames' )),
]
################################################################
## code template for IPageDescription implementation
##class IPageDescription_Impl(object):
##    def _get(self):
##        u'Custom graphics on the page.'
##        #return Elements
##    def _set(self, Elements):
##        u'Custom graphics on the page.'
##    CustomGraphics = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def MapFrames(self):
##        u'Descriptions for the map frames on the page.'
##        #return frames
##
##    @property
##    def Height(self):
##        u'The height of the page.'
##        #return pageHeight
##
##    @property
##    def Width(self):
##        u'The width of the page.'
##        #return pageWidth
##
##    def _get(self):
##        u'The current extent of the page.'
##        #return pageExtent
##    def _set(self, pageExtent):
##        u'The current extent of the page.'
##    Extent = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Units(self):
##        u'The page units.'
##        #return PageUnits
##

ISimpleRenderer._methods_ = [
    COMMETHOD(['propget', helpstring(u'Symbol used to draw each feature.')], HRESULT, 'Symbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol)), 'Symbol' )),
    COMMETHOD(['propputref', helpstring(u'Symbol used to draw each feature.')], HRESULT, 'Symbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'Renderer label.')], HRESULT, 'Label',
              ( ['retval', 'out'], POINTER(BSTR), 'Label' )),
    COMMETHOD(['propput', helpstring(u'Renderer label.')], HRESULT, 'Label',
              ( ['in'], BSTR, 'Label' )),
    COMMETHOD(['propget', helpstring(u'Renderer description.')], HRESULT, 'Description',
              ( ['retval', 'out'], POINTER(BSTR), 'Text' )),
    COMMETHOD(['propput', helpstring(u'Renderer description.')], HRESULT, 'Description',
              ( ['in'], BSTR, 'Text' )),
]
################################################################
## code template for ISimpleRenderer implementation
##class ISimpleRenderer_Impl(object):
##    def Symbol(self, Symbol):
##        u'Symbol used to draw each feature.'
##        #return 
##
##    def _get(self):
##        u'Renderer description.'
##        #return Text
##    def _set(self, Text):
##        u'Renderer description.'
##    Description = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Renderer label.'
##        #return Label
##    def _set(self, Label):
##        u'Renderer label.'
##    Label = property(_get, _set, doc = _set.__doc__)
##

class EditTemplate(CoClass):
    u'EditTemplate Class'
    _reg_clsid_ = GUID('{377035B9-34C7-4A40-866D-E596519A1B06}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
EditTemplate._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IEditTemplate, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

class MapServerLegendInfos(CoClass):
    u'A collection of Map Server Legend Info objects.'
    _reg_clsid_ = GUID('{6FB7B18B-E23E-4705-BAAE-56E559943ED8}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
MapServerLegendInfos._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMapServerLegendInfos, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

IAnnotateLayerPropertiesCollection._methods_ = [
    COMMETHOD([helpstring(u'Adds an item to the collection.')], HRESULT, 'Add',
              ( ['in'], POINTER(IAnnotateLayerProperties), 'Item' )),
    COMMETHOD(['propget', helpstring(u'The number of items in the collection.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD([helpstring(u'Returns the item in the collection at the specified index.')], HRESULT, 'QueryItem',
              ( ['in'], c_int, 'Index' ),
              ( ['out'], POINTER(POINTER(IAnnotateLayerProperties)), 'Item' ),
              ( ['out', 'optional'], POINTER(POINTER(IElementCollection)), 'placedElements', 0 ),
              ( ['out', 'optional'], POINTER(POINTER(IElementCollection)), 'unplacedElements', 0 )),
    COMMETHOD([helpstring(u'Removes all the items in the collection.')], HRESULT, 'Clear'),
    COMMETHOD([helpstring(u'Removes the item in the collection at the specified index.')], HRESULT, 'Remove',
              ( ['in'], POINTER(IAnnotateLayerProperties), 'Layerprops' )),
    COMMETHOD([helpstring(u'Sorts the items in the collection.')], HRESULT, 'Sort'),
]
################################################################
## code template for IAnnotateLayerPropertiesCollection implementation
##class IAnnotateLayerPropertiesCollection_Impl(object):
##    @property
##    def Count(self):
##        u'The number of items in the collection.'
##        #return Count
##
##    def QueryItem(self, Index):
##        u'Returns the item in the collection at the specified index.'
##        #return Item, placedElements, unplacedElements
##
##    def Clear(self):
##        u'Removes all the items in the collection.'
##        #return 
##
##    def Remove(self, Layerprops):
##        u'Removes the item in the collection at the specified index.'
##        #return 
##
##    def Add(self, Item):
##        u'Adds an item to the collection.'
##        #return 
##
##    def Sort(self):
##        u'Sorts the items in the collection.'
##        #return 
##

IImageType._methods_ = [
    COMMETHOD(['propget', helpstring(u'The image format.')], HRESULT, 'Format',
              ( ['retval', 'out'], POINTER(esriImageFormat), 'ImageFormat' )),
    COMMETHOD(['propput', helpstring(u'The image format.')], HRESULT, 'Format',
              ( ['in'], esriImageFormat, 'ImageFormat' )),
    COMMETHOD(['propget', helpstring(u'The return type.')], HRESULT, 'ReturnType',
              ( ['retval', 'out'], POINTER(esriImageReturnType), 'ReturnType' )),
    COMMETHOD(['propput', helpstring(u'The return type.')], HRESULT, 'ReturnType',
              ( ['in'], esriImageReturnType, 'ReturnType' )),
]
################################################################
## code template for IImageType implementation
##class IImageType_Impl(object):
##    def _get(self):
##        u'The return type.'
##        #return ReturnType
##    def _set(self, ReturnType):
##        u'The return type.'
##    ReturnType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The image format.'
##        #return ImageFormat
##    def _set(self, ImageFormat):
##        u'The image format.'
##    Format = property(_get, _set, doc = _set.__doc__)
##

IDataObjects._methods_ = [
    COMMETHOD(['propget', helpstring(u'Data Object Array.')], HRESULT, 'DataObjectArray',
              ( ['retval', 'out'], POINTER(POINTER(IDataObjectArray)), 'DataObjectArray' )),
    COMMETHOD(['propputref', helpstring(u'Data Object Array.')], HRESULT, 'DataObjectArray',
              ( ['in'], POINTER(IDataObjectArray), 'DataObjectArray' )),
    COMMETHOD(['propget', helpstring(u'The spatial reference for the features in the array.')], HRESULT, 'SpatialReference',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference)), 'SpatialReference' )),
    COMMETHOD(['propputref', helpstring(u'The spatial reference for the features in the array.')], HRESULT, 'SpatialReference',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'SpatialReference' )),
    COMMETHOD(['propget', helpstring(u'Time reference for the features in the array.')], HRESULT, 'TimeReference',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITimeReference)), 'TimeReference' )),
    COMMETHOD(['propputref', helpstring(u'Time reference for the features in the array.')], HRESULT, 'TimeReference',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITimeReference), 'TimeReference' )),
]
################################################################
## code template for IDataObjects implementation
##class IDataObjects_Impl(object):
##    def TimeReference(self, TimeReference):
##        u'Time reference for the features in the array.'
##        #return 
##
##    def DataObjectArray(self, DataObjectArray):
##        u'Data Object Array.'
##        #return 
##
##    def SpatialReference(self, SpatialReference):
##        u'The spatial reference for the features in the array.'
##        #return 
##

class CacheInfo(CoClass):
    u'A Cache Info object.'
    _reg_clsid_ = GUID('{262E345E-B6CB-41CD-9F88-5453741E63F4}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
CacheInfo._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ICacheInfo, ICacheInfo2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersionSupportGEN, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

IAnnotateLayerProperties._methods_ = [
    COMMETHOD(['propput', helpstring(u'Indicates if the output will be used.')], HRESULT, 'UseOutput',
              ( ['in'], VARIANT_BOOL, 'set' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the output will be used.')], HRESULT, 'UseOutput',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'set' )),
    COMMETHOD(['propget', helpstring(u'The extent to perform labeling in.')], HRESULT, 'Extent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'Extent' )),
    COMMETHOD(['propput', helpstring(u'The extent to perform labeling in.')], HRESULT, 'Extent',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'Extent' )),
    COMMETHOD(['hidden', helpstring(u'The annotated feature class.'), 'propget'], HRESULT, 'FeatureLayer',
              ( ['retval', 'out'], POINTER(POINTER(IFeatureLayer)), 'FeatureLayer' )),
    COMMETHOD(['hidden', helpstring(u'The annotated feature class.'), 'propputref'], HRESULT, 'FeatureLayer',
              ( ['in'], POINTER(IFeatureLayer), 'FeatureLayer' )),
    COMMETHOD(['propput', helpstring(u'The class name.')], HRESULT, 'Class',
              ( ['in'], BSTR, 'ClassName' )),
    COMMETHOD(['propget', helpstring(u'The class name.')], HRESULT, 'Class',
              ( ['retval', 'out'], POINTER(BSTR), 'ClassName' )),
    COMMETHOD(['propput', helpstring(u'The type of features labeled.')], HRESULT, 'LabelWhichFeatures',
              ( ['in'], esriLabelWhichFeatures, 'Type' )),
    COMMETHOD(['propget', helpstring(u'The type of features labeled.')], HRESULT, 'LabelWhichFeatures',
              ( ['retval', 'out'], POINTER(esriLabelWhichFeatures), 'Type' )),
    COMMETHOD(['propput', helpstring(u'Indicates if unplaced elements are created.')], HRESULT, 'CreateUnplacedElements',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates if unplaced elements are created.')], HRESULT, 'CreateUnplacedElements',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propget', helpstring(u'The minimum scale at which to display annotation.')], HRESULT, 'AnnotationMinimumScale',
              ( ['retval', 'out'], POINTER(c_double), 'MinScale' )),
    COMMETHOD(['propput', helpstring(u'The minimum scale at which to display annotation.')], HRESULT, 'AnnotationMinimumScale',
              ( ['in'], c_double, 'MinScale' )),
    COMMETHOD(['propget', helpstring(u'The maximum scale at which to display annotation.')], HRESULT, 'AnnotationMaximumScale',
              ( ['retval', 'out'], POINTER(c_double), 'MaxScale' )),
    COMMETHOD(['propput', helpstring(u'The maximum scale at which to display annotation.')], HRESULT, 'AnnotationMaximumScale',
              ( ['in'], c_double, 'MaxScale' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the text is feature linked.')], HRESULT, 'FeatureLinked',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the text is feature linked.')], HRESULT, 'FeatureLinked',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['hidden', helpstring(u'Priority for labels of this feature class (0 is highest).'), 'propput'], HRESULT, 'Priority',
              ( ['in'], c_int, 'Priority' )),
    COMMETHOD(['hidden', helpstring(u'Priority for labels of this feature class (0 is highest).'), 'propget'], HRESULT, 'Priority',
              ( ['retval', 'out'], POINTER(c_int), 'Priority' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer displays annotation.')], HRESULT, 'DisplayAnnotation',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Value' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the layer displays annotation.')], HRESULT, 'DisplayAnnotation',
              ( ['in'], VARIANT_BOOL, 'Value' )),
    COMMETHOD(['propput', helpstring(u'SQL where clause that determines which features are labeled.')], HRESULT, 'WhereClause',
              ( ['in'], BSTR, 'WhereClause' )),
    COMMETHOD(['propget', helpstring(u'SQL where clause that determines which features are labeled.')], HRESULT, 'WhereClause',
              ( ['retval', 'out'], POINTER(BSTR), 'WhereClause' )),
    COMMETHOD(['propputref', helpstring(u'The output graphics container for placed labels.')], HRESULT, 'GraphicsContainer',
              ( ['in'], POINTER(IGraphicsContainer), 'GraphicsContainer' )),
    COMMETHOD(['propget', helpstring(u'The output graphics container for placed labels.')], HRESULT, 'GraphicsContainer',
              ( ['retval', 'out'], POINTER(POINTER(IGraphicsContainer)), 'GraphicsContainer' )),
    COMMETHOD(['propget', helpstring(u'Indicates if overflow labels are put into a graphics container.')], HRESULT, 'AddUnplacedToGraphicsContainer',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Value' )),
    COMMETHOD(['propput', helpstring(u'Indicates if overflow labels are put into a graphics container.')], HRESULT, 'AddUnplacedToGraphicsContainer',
              ( ['in'], VARIANT_BOOL, 'Value' )),
]
################################################################
## code template for IAnnotateLayerProperties implementation
##class IAnnotateLayerProperties_Impl(object):
##    def _get(self):
##        u'Priority for labels of this feature class (0 is highest).'
##        #return Priority
##    def _set(self, Priority):
##        u'Priority for labels of this feature class (0 is highest).'
##    Priority = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the layer displays annotation.'
##        #return Value
##    def _set(self, Value):
##        u'Indicates if the layer displays annotation.'
##    DisplayAnnotation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The extent to perform labeling in.'
##        #return Extent
##    def _set(self, Extent):
##        u'The extent to perform labeling in.'
##    Extent = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'SQL where clause that determines which features are labeled.'
##        #return WhereClause
##    def _set(self, WhereClause):
##        u'SQL where clause that determines which features are labeled.'
##    WhereClause = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The minimum scale at which to display annotation.'
##        #return MinScale
##    def _set(self, MinScale):
##        u'The minimum scale at which to display annotation.'
##    AnnotationMinimumScale = property(_get, _set, doc = _set.__doc__)
##
##    def FeatureLayer(self, FeatureLayer):
##        u'The annotated feature class.'
##        #return 
##
##    @property
##    def GraphicsContainer(self, GraphicsContainer):
##        u'The output graphics container for placed labels.'
##        #return 
##
##    def _get(self):
##        u'Indicates if the text is feature linked.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if the text is feature linked.'
##    FeatureLinked = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The maximum scale at which to display annotation.'
##        #return MaxScale
##    def _set(self, MaxScale):
##        u'The maximum scale at which to display annotation.'
##    AnnotationMaximumScale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the output will be used.'
##        #return set
##    def _set(self, set):
##        u'Indicates if the output will be used.'
##    UseOutput = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The type of features labeled.'
##        #return Type
##    def _set(self, Type):
##        u'The type of features labeled.'
##    LabelWhichFeatures = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if unplaced elements are created.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if unplaced elements are created.'
##    CreateUnplacedElements = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The class name.'
##        #return ClassName
##    def _set(self, ClassName):
##        u'The class name.'
##    Class = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if overflow labels are put into a graphics container.'
##        #return Value
##    def _set(self, Value):
##        u'Indicates if overflow labels are put into a graphics container.'
##    AddUnplacedToGraphicsContainer = property(_get, _set, doc = _set.__doc__)
##

IEnumElement._methods_ = [
    COMMETHOD([helpstring(u'Returns the next element in the enumeration.')], HRESULT, 'Next',
              ( ['retval', 'out'], POINTER(POINTER(IElement)), 'pElement' )),
    COMMETHOD([helpstring(u'Start the enumeration at the beginning.')], HRESULT, 'Reset'),
]
################################################################
## code template for IEnumElement implementation
##class IEnumElement_Impl(object):
##    def Reset(self):
##        u'Start the enumeration at the beginning.'
##        #return 
##
##    def Next(self):
##        u'Returns the next element in the enumeration.'
##        #return pElement
##

class ICoverageAnnotationLayerFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that create/find coverage annotation layers.'
    _iid_ = GUID('{F75C243B-4019-40C5-BEA4-AFC422F41855}')
    _idlflags_ = ['oleautomation']
ICoverageAnnotationLayerFactory._methods_ = [
    COMMETHOD([helpstring(u'Create an annotation class (on disk), and returns a layer for it.')], HRESULT, 'CreateAnnotationLayer',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureWorkspace), 'pAnnotationWorkspace' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureDataset), 'pFeatureDataset' ),
              ( ['in'], BSTR, 'annotationLayerName' ),
              ( ['retval', 'out'], POINTER(POINTER(ILayer)), 'ppLayer' )),
    COMMETHOD([helpstring(u'Loads an annotation class (on disk), and returns a layer for it.')], HRESULT, 'OpenAnnotationLayer',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureWorkspace), 'pAnnotationWorkspace' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureDataset), 'pFeatureDataset' ),
              ( ['in'], BSTR, 'annotationLayerName' ),
              ( ['retval', 'out'], POINTER(POINTER(ILayer)), 'ppLayer' )),
    COMMETHOD([helpstring(u'Finds an annotation classes.')], HRESULT, 'FindAnnotationLayerNames',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureWorkspace), 'pAnnotationWorkspace' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IEnumBSTR)), 'ppNames' )),
]
################################################################
## code template for ICoverageAnnotationLayerFactory implementation
##class ICoverageAnnotationLayerFactory_Impl(object):
##    def OpenAnnotationLayer(self, pAnnotationWorkspace, pFeatureDataset, annotationLayerName):
##        u'Loads an annotation class (on disk), and returns a layer for it.'
##        #return ppLayer
##
##    def CreateAnnotationLayer(self, pAnnotationWorkspace, pFeatureDataset, annotationLayerName):
##        u'Create an annotation class (on disk), and returns a layer for it.'
##        #return ppLayer
##
##    def FindAnnotationLayerNames(self, pAnnotationWorkspace):
##        u'Finds an annotation classes.'
##        #return ppNames
##

class ITopologyLayer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the topology layer.'
    _iid_ = GUID('{FB6337E3-610A-4BC2-9142-760D954C22EB}')
    _idlflags_ = ['oleautomation']
ITopologyLayer._methods_ = [
    COMMETHOD(['propget', helpstring(u'The current topology.')], HRESULT, 'Topology',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITopology)), 'Topology' )),
    COMMETHOD(['propputref', helpstring(u'The current topology.')], HRESULT, 'Topology',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITopology), 'Topology' )),
    COMMETHOD(['propget', helpstring(u'Renderer used to draw the topology layer.')], HRESULT, 'Renderer',
              ( ['in'], esriTopologyRenderer, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IFeatureRenderer)), 'Renderer' )),
    COMMETHOD(['propputref', helpstring(u'Renderer used to draw the topology layer.')], HRESULT, 'Renderer',
              ( ['in'], esriTopologyRenderer, 'Index' ),
              ( ['in'], POINTER(IFeatureRenderer), 'Renderer' )),
]
################################################################
## code template for ITopologyLayer implementation
##class ITopologyLayer_Impl(object):
##    def Renderer(self, Index, Renderer):
##        u'Renderer used to draw the topology layer.'
##        #return 
##
##    def Topology(self, Topology):
##        u'The current topology.'
##        #return 
##

class CacheDescriptionInfo(CoClass):
    u'Cache description info object.'
    _reg_clsid_ = GUID('{5E567668-426A-4026-A86B-58F43E601AE3}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
CacheDescriptionInfo._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ICacheDescriptionInfo, ICacheDescriptionInfo2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersionSupportGEN, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class RasterLayer(CoClass):
    u'Raster layer source and display options.'
    _reg_clsid_ = GUID('{D02371C9-35F7-11D2-B1F2-00C04F8EDEFF}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
RasterLayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterLayer, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeoDataset, ILegendInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, IIdentify, ILayerInfo, IDataLayer, IDataLayer2, ILayerEffects, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayAdmin, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayAdmin2, IGeoReference, IDisplayTable, ITableSelection, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IClass, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IObjectClass, ILayerFields, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITableFields, IDisplayRelationshipClass, IRelationshipClassCollection, IRelationshipClassCollectionEdit, ILayerExtensions, ILayerDrawingProperties, ILayerGeneralProperties, ILayerPosition, IAttributeTable, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IConnectionPointContainer, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataset, IPublishLayer, IRasterSpatialSelection, comtypes.gen._8F0541A3_D5BE_4B3F_A8D9_062D5579E19B_0_10_2.IRasterDataManagementEvents, ITemporaryLayer, ILayer2, ITimeData, ITimeData2, ITimeDataDisplay, ITimeDimensionDefinition, ILayerDrawSetup, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IObjectClassSchemaEvents]
RasterLayer._outgoing_interfaces_ = [ILayerEvents, IGeoReferenceEvents]

class IConditionalAction4(IConditionalAction2):
    _case_insensitive_ = True
    u'Provides access to properties and methods needed to manage conditional actions.'
    _iid_ = GUID('{9EA7FB9C-109F-48E8-91D5-50BB5170244E}')
    _idlflags_ = ['oleautomation']
IConditionalAction4._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if the Attribute Query should be performed first and then the location test.')], HRESULT, 'FavorQuery',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pVal' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the Attribute Query should be performed first and then the location test.')], HRESULT, 'FavorQuery',
              ( ['in'], VARIANT_BOOL, 'pVal' )),
    COMMETHOD(['propputref', helpstring(u'Custom location trigger for the action if one is being used.')], HRESULT, 'LocationTrigger',
              ( ['in'], POINTER(ILocationTrigger), 'ppLocationTrigger' )),
    COMMETHOD(['propget', helpstring(u'Custom location trigger for the action if one is being used.')], HRESULT, 'LocationTrigger',
              ( ['retval', 'out'], POINTER(POINTER(ILocationTrigger)), 'ppLocationTrigger' )),
]
################################################################
## code template for IConditionalAction4 implementation
##class IConditionalAction4_Impl(object):
##    def _get(self):
##        u'Indicates if the Attribute Query should be performed first and then the location test.'
##        #return pVal
##    def _set(self, pVal):
##        u'Indicates if the Attribute Query should be performed first and then the location test.'
##    FavorQuery = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def LocationTrigger(self, ppLocationTrigger):
##        u'Custom location trigger for the action if one is being used.'
##        #return 
##

IImageServerInit2._methods_ = [
    COMMETHOD(['propput', helpstring(u'The physical directory for output files.')], HRESULT, 'OutputDirectory',
              ( ['in'], BSTR, 'pPath' )),
    COMMETHOD(['propget', helpstring(u'The physical directory for output files.')], HRESULT, 'OutputDirectory',
              ( ['retval', 'out'], POINTER(BSTR), 'pPath' )),
    COMMETHOD(['propput', helpstring(u'The virtual directory for output files.')], HRESULT, 'VirtualOutputDirectory',
              ( ['in'], BSTR, 'pPath' )),
    COMMETHOD(['propget', helpstring(u'The virtual directory for output files.')], HRESULT, 'VirtualOutputDirectory',
              ( ['retval', 'out'], POINTER(BSTR), 'pPath' )),
    COMMETHOD(['propput', helpstring(u'The physical directory for downloadable files.')], HRESULT, 'DownloadDirectory',
              ( ['in'], BSTR, 'pPath' )),
    COMMETHOD(['propget', helpstring(u'The physical directory for downloadable files.')], HRESULT, 'DownloadDirectory',
              ( ['retval', 'out'], POINTER(BSTR), 'pPath' )),
    COMMETHOD(['propput', helpstring(u'The virtual directory for downloading files.')], HRESULT, 'VirtualDownloadDirectory',
              ( ['in'], BSTR, 'pPath' )),
    COMMETHOD(['propget', helpstring(u'The virtual directory for downloading files.')], HRESULT, 'VirtualDownloadDirectory',
              ( ['retval', 'out'], POINTER(BSTR), 'pPath' )),
    COMMETHOD(['propput', helpstring(u'The workspace used for adding rasters.')], HRESULT, 'DynamicImageWorkspace',
              ( ['in'], BSTR, 'pPath' )),
    COMMETHOD(['propget', helpstring(u'The workspace used for adding rasters.')], HRESULT, 'DynamicImageWorkspace',
              ( ['retval', 'out'], POINTER(BSTR), 'pPath' )),
    COMMETHOD(['propput', helpstring(u'The list of excluded field names.')], HRESULT, 'ExcludedFields',
              ( ['in'], BSTR, 'pExcludedFields' )),
    COMMETHOD(['propget', helpstring(u'The list of excluded field names.')], HRESULT, 'ExcludedFields',
              ( ['retval', 'out'], POINTER(BSTR), 'pExcludedFields' )),
    COMMETHOD(['propget', helpstring(u'The maximum number of records returned for query results (GetCatalog).')], HRESULT, 'MaxRecordCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propput', helpstring(u'The maximum number of records returned for query results (GetCatalog).')], HRESULT, 'MaxRecordCount',
              ( ['in'], c_int, 'Count' )),
    COMMETHOD(['propget', helpstring(u'The maximum width in pixels of an image request.')], HRESULT, 'MaxImageWidth',
              ( ['retval', 'out'], POINTER(c_int), 'Width' )),
    COMMETHOD(['propput', helpstring(u'The maximum width in pixels of an image request.')], HRESULT, 'MaxImageWidth',
              ( ['in'], c_int, 'Width' )),
    COMMETHOD(['propget', helpstring(u'The maximum height in pixels of an image request.')], HRESULT, 'MaxImageHeight',
              ( ['retval', 'out'], POINTER(c_int), 'Height' )),
    COMMETHOD(['propput', helpstring(u'The maximum height in pixels of an image request.')], HRESULT, 'MaxImageHeight',
              ( ['in'], c_int, 'Height' )),
    COMMETHOD(['propput', helpstring(u'The list of allowed field names.')], HRESULT, 'AllowedFields',
              ( ['in'], BSTR, 'pAllowedFields' )),
    COMMETHOD(['propget', helpstring(u'The list of allowed field names.')], HRESULT, 'AllowedFields',
              ( ['retval', 'out'], POINTER(BSTR), 'pAllowedFields' )),
    COMMETHOD(['propput', helpstring(u'The list of allowed compressions, None, LZ77, and JPEG.')], HRESULT, 'AllowedCompressions',
              ( ['in'], BSTR, 'pAllowedCompressions' )),
    COMMETHOD(['propget', helpstring(u'The list of allowed compressions, None, LZ77, and JPEG.')], HRESULT, 'AllowedCompressions',
              ( ['retval', 'out'], POINTER(BSTR), 'pAllowedCompressions' )),
    COMMETHOD(['propput', helpstring(u'The list of allowed mosaic methods.')], HRESULT, 'AllowedMosaicMethods',
              ( ['in'], BSTR, 'pAllowedMosaicMethods' )),
    COMMETHOD(['propget', helpstring(u'The list of allowed mosaic methods.')], HRESULT, 'AllowedMosaicMethods',
              ( ['retval', 'out'], POINTER(BSTR), 'pAllowedMosaicMethods' )),
    COMMETHOD(['propput', helpstring(u'The allowed metadata, None, Basic, and Full.')], HRESULT, 'AllowedItemMetadata',
              ( ['in'], BSTR, 'pAllowedItemMetadata' )),
    COMMETHOD(['propget', helpstring(u'The allowed metadata, None, Basic, and Full.')], HRESULT, 'AllowedItemMetadata',
              ( ['retval', 'out'], POINTER(BSTR), 'pAllowedItemMetadata' )),
]
################################################################
## code template for IImageServerInit2 implementation
##class IImageServerInit2_Impl(object):
##    def _get(self):
##        u'The maximum number of records returned for query results (GetCatalog).'
##        #return Count
##    def _set(self, Count):
##        u'The maximum number of records returned for query results (GetCatalog).'
##    MaxRecordCount = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The list of excluded field names.'
##        #return pExcludedFields
##    def _set(self, pExcludedFields):
##        u'The list of excluded field names.'
##    ExcludedFields = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The workspace used for adding rasters.'
##        #return pPath
##    def _set(self, pPath):
##        u'The workspace used for adding rasters.'
##    DynamicImageWorkspace = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The maximum width in pixels of an image request.'
##        #return Width
##    def _set(self, Width):
##        u'The maximum width in pixels of an image request.'
##    MaxImageWidth = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The physical directory for output files.'
##        #return pPath
##    def _set(self, pPath):
##        u'The physical directory for output files.'
##    OutputDirectory = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The physical directory for downloadable files.'
##        #return pPath
##    def _set(self, pPath):
##        u'The physical directory for downloadable files.'
##    DownloadDirectory = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The list of allowed field names.'
##        #return pAllowedFields
##    def _set(self, pAllowedFields):
##        u'The list of allowed field names.'
##    AllowedFields = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The list of allowed compressions, None, LZ77, and JPEG.'
##        #return pAllowedCompressions
##    def _set(self, pAllowedCompressions):
##        u'The list of allowed compressions, None, LZ77, and JPEG.'
##    AllowedCompressions = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The allowed metadata, None, Basic, and Full.'
##        #return pAllowedItemMetadata
##    def _set(self, pAllowedItemMetadata):
##        u'The allowed metadata, None, Basic, and Full.'
##    AllowedItemMetadata = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The virtual directory for output files.'
##        #return pPath
##    def _set(self, pPath):
##        u'The virtual directory for output files.'
##    VirtualOutputDirectory = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The virtual directory for downloading files.'
##        #return pPath
##    def _set(self, pPath):
##        u'The virtual directory for downloading files.'
##    VirtualDownloadDirectory = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The maximum height in pixels of an image request.'
##        #return Height
##    def _set(self, Height):
##        u'The maximum height in pixels of an image request.'
##    MaxImageHeight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The list of allowed mosaic methods.'
##        #return pAllowedMosaicMethods
##    def _set(self, pAllowedMosaicMethods):
##        u'The list of allowed mosaic methods.'
##    AllowedMosaicMethods = property(_get, _set, doc = _set.__doc__)
##

class ACSimpleRenderer(CoClass):
    u'ArcIMS Simple Renderer.'
    _reg_clsid_ = GUID('{EE16A1E6-BDE9-47ED-BE03-D711DB3102E5}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
ACSimpleRenderer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IACAxl, IACRenderer, IACSimpleRenderer, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class IndexGrid(CoClass):
    u'A map grid that divides the map into a grid for indexing.'
    _reg_clsid_ = GUID('{03762C91-F4D0-11D1-ADE8-080009EC732A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
IndexGrid._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IIndexGrid, IMapGrid, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, IGraphicsComposite, IReferenceSystem]

class ACScaleDependentRenderer(CoClass):
    u'ArcIMS Scale Dependent Renderer.'
    _reg_clsid_ = GUID('{69D20498-F616-454E-9CCA-54E0F600C25A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
ACScaleDependentRenderer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IACAxl, IACRenderer, IACScaleDependentRenderer, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class ACGroupRenderer(CoClass):
    u'ArcIMS Group Renderer.'
    _reg_clsid_ = GUID('{1ACDEBE9-9F89-48DD-BC28-780ACD9D4256}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
ACGroupRenderer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IACAxl, IACRenderer, IACGroupRenderer, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]


# values for enumeration 'esriConversionStatus'
esriConversionStatusSuccess = 0
esriConversionStatusWarnings = 1
esriConversionStatusErrors = 2
esriConversionStatus = c_int # enum
class ACSimpleFillSymbol(CoClass):
    u'ArcIMS Simple Fill Symbol.'
    _reg_clsid_ = GUID('{B019758D-5F2B-4310-B409-C042391F6149}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
ACSimpleFillSymbol._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IACAxl, IACSimpleFillSymbol, IACSymbol, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class IMSGlobeXMLNode(CoClass):
    u'IMS Globe Sub Service.'
    _reg_clsid_ = GUID('{71E912B7-82B9-4CE3-B411-420EA42C8F2D}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
IMSGlobeXMLNode._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IIMSGlobeXMLNode]

IGraphicFeatureServerReplication._methods_ = [
    COMMETHOD([helpstring(u'Create Replica.')], HRESULT, 'CreateReplica',
              ( ['in'], BSTR, 'replicaName' ),
              ( ['in'], POINTER(IGFSReplicaDescription), 'replicaDescription' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPReplicaOptions), 'repOptions' ),
              ( ['in'], POINTER(comtypes.gen._A7C74158_1062_4664_B404_8694D490FCD1_0_10_2.IGDSExportOptions), 'exportOptions' ),
              ( ['in'], comtypes.gen._A7C74158_1062_4664_B404_8694D490FCD1_0_10_2.esriGDSTransportType, 'TransportType' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._A7C74158_1062_4664_B404_8694D490FCD1_0_10_2.IGDSData)), 'featureSericeReplicationPackage' )),
    COMMETHOD(['propget', helpstring(u"The replicas in the workspace of the mxd document's data source.")], HRESULT, 'Replicas',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPReplicas)), 'Replicas' )),
    COMMETHOD([helpstring(u'Unregister the replica.')], HRESULT, 'UnregisterReplica',
              ( ['in'], BSTR, 'replicaName' )),
    COMMETHOD([helpstring(u'Exports data changes for a replica.')], HRESULT, 'ExportReplicaDataChanges',
              ( ['in'], BSTR, 'replicaName' ),
              ( ['in'], POINTER(comtypes.gen._A7C74158_1062_4664_B404_8694D490FCD1_0_10_2.IGDSExportOptions), 'options' ),
              ( ['in'], comtypes.gen._A7C74158_1062_4664_B404_8694D490FCD1_0_10_2.esriGDSTransportType, 'TransportType' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._A7C74158_1062_4664_B404_8694D490FCD1_0_10_2.IGDSData)), 'result' )),
    COMMETHOD([helpstring(u'Import the data changes for a replica.')], HRESULT, 'ImportReplicaDataChanges',
              ( ['in'], comtypes.gen._A7C74158_1062_4664_B404_8694D490FCD1_0_10_2.esriGDSReplicaImportSource, 'sourceType' ),
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriReplicaReconcilePolicyType, 'reconcilePolicy' ),
              ( ['in'], POINTER(comtypes.gen._A7C74158_1062_4664_B404_8694D490FCD1_0_10_2.IGDSData), 'Data' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'conflictsFound' )),
    COMMETHOD([helpstring(u'Alter the definition of a replica.')], HRESULT, 'AlterReplica',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPReplica), 'Replica' )),
]
################################################################
## code template for IGraphicFeatureServerReplication implementation
##class IGraphicFeatureServerReplication_Impl(object):
##    def ExportReplicaDataChanges(self, replicaName, options, TransportType):
##        u'Exports data changes for a replica.'
##        #return result
##
##    def CreateReplica(self, replicaName, replicaDescription, repOptions, exportOptions, TransportType):
##        u'Create Replica.'
##        #return featureSericeReplicationPackage
##
##    @property
##    def Replicas(self):
##        u"The replicas in the workspace of the mxd document's data source."
##        #return Replicas
##
##    def AlterReplica(self, Replica):
##        u'Alter the definition of a replica.'
##        #return 
##
##    def ImportReplicaDataChanges(self, sourceType, reconcilePolicy, Data):
##        u'Import the data changes for a replica.'
##        #return conflictsFound
##
##    def UnregisterReplica(self, replicaName):
##        u'Unregister the replica.'
##        #return 
##

class ACSimpleLineSymbol(CoClass):
    u'ArcIMS Simple Line Symbol.'
    _reg_clsid_ = GUID('{D2EA35C1-D393-4066-901B-B44108163CB3}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
ACSimpleLineSymbol._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IACAxl, IACSymbol, IACSimpleLineSymbol, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class CacheControlInfo(CoClass):
    u'Cache control info object.'
    _reg_clsid_ = GUID('{7E2C75DE-7E34-4FAA-90ED-9800B8FB4AB6}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
CacheControlInfo._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ICacheControlInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersionSupportGEN, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

IBasicMap._methods_ = [
    COMMETHOD(['propget', helpstring(u'Name of the map.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'pName' )),
    COMMETHOD(['propput', helpstring(u'Name of the map.')], HRESULT, 'Name',
              ( ['in'], BSTR, 'pName' )),
    COMMETHOD(['propget', helpstring(u'Description of the map.')], HRESULT, 'Description',
              ( ['retval', 'out'], POINTER(BSTR), 'pDescr' )),
    COMMETHOD(['propput', helpstring(u'Description of the map.')], HRESULT, 'Description',
              ( ['in'], BSTR, 'pDescr' )),
    COMMETHOD(['propput', helpstring(u'Area of interest for the map.')], HRESULT, 'AreaOfInterest',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'rhs' )),
    COMMETHOD(['propget', helpstring(u'Number of layers in the map.')], HRESULT, 'LayerCount',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propget', helpstring(u'The layer at the given index.')], HRESULT, 'Layer',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(ILayer)), 'ppLayer' )),
    COMMETHOD(['propget', helpstring(u'The layers in the map of the type specified in the uid.  If recursive is true it will return layers in group layers.')], HRESULT, 'Layers',
              ( ['in', 'optional'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IUID), 'uid', 0 ),
              ( ['in', 'optional'], VARIANT_BOOL, 'recursive', True ),
              ( ['retval', 'out'], POINTER(POINTER(IEnumLayer)), 'ppLayers' )),
    COMMETHOD(['propget', helpstring(u'The spatial reference of the map.')], HRESULT, 'SpatialReference',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference)), 'ppSpatialRef' )),
    COMMETHOD(['propputref', helpstring(u'The spatial reference of the map.')], HRESULT, 'SpatialReference',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'ppSpatialRef' )),
    COMMETHOD([helpstring(u'Adds a layer to the map.')], HRESULT, 'AddLayer',
              ( ['in'], POINTER(ILayer), 'pLayer' )),
    COMMETHOD([helpstring(u'Adds multiple layers to the map, arranging them nicely if specified.')], HRESULT, 'AddLayers',
              ( ['in'], POINTER(IEnumLayer), 'pLayers' ),
              ( ['in'], VARIANT_BOOL, 'autoArrange' )),
    COMMETHOD([helpstring(u'Deletes a layer from the map.')], HRESULT, 'DeleteLayer',
              ( ['in'], POINTER(ILayer), 'pLayer' )),
    COMMETHOD([helpstring(u'Removes all layers from the map.')], HRESULT, 'ClearLayers'),
    COMMETHOD(['propget', helpstring(u'The basic graphics layer.')], HRESULT, 'BasicGraphicsLayer',
              ( ['retval', 'out'], POINTER(POINTER(IGraphicsLayer)), 'ppGraphicsLayer' )),
    COMMETHOD(['propget', helpstring(u'The active graphics layer.  If no graphic layers exist a basic memory graphics layer will be created.')], HRESULT, 'ActiveGraphicsLayer',
              ( ['retval', 'out'], POINTER(POINTER(ILayer)), 'ppGraphicsLayer' )),
    COMMETHOD(['propputref', helpstring(u'The active graphics layer.  If no graphic layers exist a basic memory graphics layer will be created.')], HRESULT, 'ActiveGraphicsLayer',
              ( ['in'], POINTER(ILayer), 'ppGraphicsLayer' )),
    COMMETHOD(['propget', helpstring(u'Number of selected features in the map.')], HRESULT, 'SelectionCount',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD([helpstring(u'Clears the map selection.')], HRESULT, 'ClearSelection'),
    COMMETHOD(['propget', helpstring(u"The map's feature selection.")], HRESULT, 'FeatureSelection',
              ( ['retval', 'out'], POINTER(POINTER(ISelection)), 'ppSelection' )),
    COMMETHOD(['propputref', helpstring(u"The map's feature selection.")], HRESULT, 'FeatureSelection',
              ( ['in'], POINTER(ISelection), 'ppSelection' )),
    COMMETHOD([helpstring(u'Selects features in the map given a shape and a selection environment (optional).')], HRESULT, 'SelectByShape',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'Shape' ),
              ( ['in'], POINTER(ISelectionEnvironment), 'env' ),
              ( ['in'], VARIANT_BOOL, 'justOne' )),
]
################################################################
## code template for IBasicMap implementation
##class IBasicMap_Impl(object):
##    @property
##    def Layers(self, uid, recursive):
##        u'The layers in the map of the type specified in the uid.  If recursive is true it will return layers in group layers.'
##        #return ppLayers
##
##    def ClearSelection(self):
##        u'Clears the map selection.'
##        #return 
##
##    @property
##    def Layer(self, Index):
##        u'The layer at the given index.'
##        #return ppLayer
##
##    def ClearLayers(self):
##        u'Removes all layers from the map.'
##        #return 
##
##    def _get(self):
##        u'Name of the map.'
##        #return pName
##    def _set(self, pName):
##        u'Name of the map.'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def AddLayers(self, pLayers, autoArrange):
##        u'Adds multiple layers to the map, arranging them nicely if specified.'
##        #return 
##
##    def DeleteLayer(self, pLayer):
##        u'Deletes a layer from the map.'
##        #return 
##
##    def SpatialReference(self, ppSpatialRef):
##        u'The spatial reference of the map.'
##        #return 
##
##    @property
##    def SelectionCount(self):
##        u'Number of selected features in the map.'
##        #return pCount
##
##    def ActiveGraphicsLayer(self, ppGraphicsLayer):
##        u'The active graphics layer.  If no graphic layers exist a basic memory graphics layer will be created.'
##        #return 
##
##    def _set(self, rhs):
##        u'Area of interest for the map.'
##    AreaOfInterest = property(fset = _set, doc = _set.__doc__)
##
##    @property
##    def LayerCount(self):
##        u'Number of layers in the map.'
##        #return pCount
##
##    @property
##    def BasicGraphicsLayer(self):
##        u'The basic graphics layer.'
##        #return ppGraphicsLayer
##
##    def FeatureSelection(self, ppSelection):
##        u"The map's feature selection."
##        #return 
##
##    def SelectByShape(self, Shape, env, justOne):
##        u'Selects features in the map given a shape and a selection environment (optional).'
##        #return 
##
##    def AddLayer(self, pLayer):
##        u'Adds a layer to the map.'
##        #return 
##
##    def _get(self):
##        u'Description of the map.'
##        #return pDescr
##    def _set(self, pDescr):
##        u'Description of the map.'
##    Description = property(_get, _set, doc = _set.__doc__)
##

ILayerDrawingDescriptions._methods_ = [
    COMMETHOD(['propget', helpstring(u'The LayerDrawingDescription count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The LayerDrawingDescription at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(ILayerDrawingDescription)), 'ppLayerDrawingDescription' )),
    COMMETHOD([helpstring(u'Removes the LayerDrawingDescription at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all LayerDrawingDescriptions.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Adds a LayerDrawingDescription.')], HRESULT, 'Add',
              ( ['in'], POINTER(ILayerDrawingDescription), 'pLayerDrawingDescription' )),
    COMMETHOD([helpstring(u'Adds a LayerDrawingDescription info at the specified position.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(ILayerDrawingDescription), 'pLayerDrawingDescription' )),
]
################################################################
## code template for ILayerDrawingDescriptions implementation
##class ILayerDrawingDescriptions_Impl(object):
##    @property
##    def Count(self):
##        u'The LayerDrawingDescription count.'
##        #return Count
##
##    def Insert(self, Index, pLayerDrawingDescription):
##        u'Adds a LayerDrawingDescription info at the specified position.'
##        #return 
##
##    def Remove(self, Index):
##        u'Removes the LayerDrawingDescription at the specified position.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'The LayerDrawingDescription at the specified position.'
##        #return ppLayerDrawingDescription
##
##    def RemoveAll(self):
##        u'Removes all LayerDrawingDescriptions.'
##        #return 
##
##    def Add(self, pLayerDrawingDescription):
##        u'Adds a LayerDrawingDescription.'
##        #return 
##

class TileImageInfo(CoClass):
    u'A Tile Image Info object.'
    _reg_clsid_ = GUID('{0CA787D5-FCAE-412D-85D8-61AA304B1AE1}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
TileImageInfo._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ITileImageInfo2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersionSupportGEN, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

ISelectionEvents._methods_ = [
    COMMETHOD([helpstring(u'Call this function to fire the selection changed event.')], HRESULT, 'SelectionChanged'),
]
################################################################
## code template for ISelectionEvents implementation
##class ISelectionEvents_Impl(object):
##    def SelectionChanged(self):
##        u'Call this function to fire the selection changed event.'
##        #return 
##

IMapServerSourceDescription._methods_ = [
]
################################################################
## code template for IMapServerSourceDescription implementation
##class IMapServerSourceDescription_Impl(object):

class ACSimplePolygonSymbol(CoClass):
    u'ArcIMS Simple Polygon Symbol.'
    _reg_clsid_ = GUID('{72341CC3-1A6B-4EE9-9810-BA77FD277A2A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
ACSimplePolygonSymbol._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IACAxl, IACSimplePolygonSymbol, IACSymbol, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

IServiceLayerCredits._methods_ = [
    COMMETHOD(['propget', helpstring(u'Get the service layer credits text.')], HRESULT, 'ServiceLayerCreditsText',
              ( ['in'], BSTR, 'Separator' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Credits' )),
]
################################################################
## code template for IServiceLayerCredits implementation
##class IServiceLayerCredits_Impl(object):
##    @property
##    def ServiceLayerCreditsText(self, Separator):
##        u'Get the service layer credits text.'
##        #return Credits
##

class CacheStorageInfo(CoClass):
    u'Cache storage info.'
    _reg_clsid_ = GUID('{4C99435B-A3F7-4662-8E16-38CF3A83554A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
CacheStorageInfo._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ICacheStorageInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class ACSimpleMarkerSymbol(CoClass):
    u'ArcIMS Simple Marker Symbol.'
    _reg_clsid_ = GUID('{7FE0318E-3246-483F-9590-ED69E9C09AF8}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
ACSimpleMarkerSymbol._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IACAxl, IACSimpleMarkerSymbol, IACSymbol, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

IImageServerInit3._methods_ = [
    COMMETHOD(['propput', helpstring(u'Indicates if a colormap image is to be converted to RGB.')], HRESULT, 'ColormapToRGB',
              ( ['in'], VARIANT_BOOL, 'rhs' )),
    COMMETHOD(['propput', helpstring(u'A list of comma delimited server raster function names.')], HRESULT, 'RasterFunctions',
              ( ['in'], BSTR, 'rhs' )),
    COMMETHOD(['propput', helpstring(u'A list of comma delimited server raster type names.')], HRESULT, 'RasterTypes',
              ( ['in'], BSTR, 'rhs' )),
    COMMETHOD(['propput', helpstring(u'The current user.')], HRESULT, 'User',
              ( ['in'], BSTR, 'rhs' )),
    COMMETHOD(['propput', helpstring(u'The physical directory for cache files.')], HRESULT, 'PhysicalCacheDirectory',
              ( ['in'], BSTR, 'pCacheDir' )),
    COMMETHOD(['propget', helpstring(u'The physical directory for cache files.')], HRESULT, 'PhysicalCacheDirectory',
              ( ['retval', 'out'], POINTER(BSTR), 'pCacheDir' )),
    COMMETHOD(['propput', helpstring(u'The physical directory for cache files.')], HRESULT, 'VirtualCacheDirectory',
              ( ['in'], BSTR, 'pVirtualCacheDir' )),
    COMMETHOD(['propget', helpstring(u'The physical directory for cache files.')], HRESULT, 'VirtualCacheDirectory',
              ( ['retval', 'out'], POINTER(BSTR), 'pVirtualCacheDir' )),
    COMMETHOD(['propputref', helpstring(u'The DEM for 3D mensuration.')], HRESULT, 'DEM',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'ppDEM' )),
    COMMETHOD(['propget', helpstring(u'The DEM for 3D mensuration.')], HRESULT, 'DEM',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster)), 'ppDEM' )),
    COMMETHOD([helpstring(u'Initialize DEM for 3D mensuration from a DEM file or service.')], HRESULT, 'InitializeDEM',
              ( ['in'], BSTR, 'URI' )),
    COMMETHOD(['propget', helpstring(u'The current image view ID.')], HRESULT, 'ViewID',
              ( ['retval', 'out'], POINTER(BSTR), 'pVID' )),
    COMMETHOD(['propput', helpstring(u'The current image view ID.')], HRESULT, 'ViewID',
              ( ['in'], BSTR, 'pVID' )),
    COMMETHOD(['propget', helpstring(u'The current image view.')], HRESULT, 'View',
              ( ['retval', 'out'], POINTER(POINTER(IImageView)), 'ppView' )),
    COMMETHOD(['propputref', helpstring(u'The current image view.')], HRESULT, 'View',
              ( ['in'], POINTER(IImageView), 'ppView' )),
    COMMETHOD([helpstring(u'Defines/creates a new, or overwrites an existing, view.')], HRESULT, 'DefineView',
              ( ['in'], POINTER(IImageView), 'pView' )),
    COMMETHOD([helpstring(u'Projects into a new spatial reference.')], HRESULT, 'Project',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'pSpatialReference' )),
    COMMETHOD(['propget', helpstring(u'The maximum source image cellsize.')], HRESULT, 'MaximumImageCellsize',
              ( ['retval', 'out'], POINTER(c_double), 'pMaximumCellsize' )),
]
################################################################
## code template for IImageServerInit3 implementation
##class IImageServerInit3_Impl(object):
##    def DefineView(self, pView):
##        u'Defines/creates a new, or overwrites an existing, view.'
##        #return 
##
##    def Project(self, pSpatialReference):
##        u'Projects into a new spatial reference.'
##        #return 
##
##    def _set(self, rhs):
##        u'A list of comma delimited server raster type names.'
##    RasterTypes = property(fset = _set, doc = _set.__doc__)
##
##    def _set(self, rhs):
##        u'Indicates if a colormap image is to be converted to RGB.'
##    ColormapToRGB = property(fset = _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The physical directory for cache files.'
##        #return pCacheDir
##    def _set(self, pCacheDir):
##        u'The physical directory for cache files.'
##    PhysicalCacheDirectory = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def DEM(self, ppDEM):
##        u'The DEM for 3D mensuration.'
##        #return 
##
##    def _set(self, rhs):
##        u'The current user.'
##    User = property(fset = _set, doc = _set.__doc__)
##
##    @property
##    def MaximumImageCellsize(self):
##        u'The maximum source image cellsize.'
##        #return pMaximumCellsize
##
##    def _get(self):
##        u'The physical directory for cache files.'
##        #return pVirtualCacheDir
##    def _set(self, pVirtualCacheDir):
##        u'The physical directory for cache files.'
##    VirtualCacheDirectory = property(_get, _set, doc = _set.__doc__)
##
##    def InitializeDEM(self, URI):
##        u'Initialize DEM for 3D mensuration from a DEM file or service.'
##        #return 
##
##    def View(self, ppView):
##        u'The current image view.'
##        #return 
##
##    def _get(self):
##        u'The current image view ID.'
##        #return pVID
##    def _set(self, pVID):
##        u'The current image view ID.'
##    ViewID = property(_get, _set, doc = _set.__doc__)
##
##    def _set(self, rhs):
##        u'A list of comma delimited server raster function names.'
##    RasterFunctions = property(fset = _set, doc = _set.__doc__)
##

IPropertyInfos._methods_ = [
    COMMETHOD(['propget', helpstring(u'PropertyInfo count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'PropertyInfo at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IPropertyInfo)), 'PropertyInfo' )),
    COMMETHOD([helpstring(u'Removes the PropertyInfo at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all PropertyInfo objects.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Adds a PropertyInfo.')], HRESULT, 'Add',
              ( ['in'], POINTER(IPropertyInfo), 'PropertyInfo' )),
    COMMETHOD([helpstring(u'Adds a PropertyInfo at the specified position.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(IPropertyInfo), 'PropertyInfo' )),
]
################################################################
## code template for IPropertyInfos implementation
##class IPropertyInfos_Impl(object):
##    @property
##    def Count(self):
##        u'PropertyInfo count.'
##        #return Count
##
##    def Insert(self, Index, PropertyInfo):
##        u'Adds a PropertyInfo at the specified position.'
##        #return 
##
##    def Remove(self, Index):
##        u'Removes the PropertyInfo at the specified position.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'PropertyInfo at the specified position.'
##        #return PropertyInfo
##
##    def RemoveAll(self):
##        u'Removes all PropertyInfo objects.'
##        #return 
##
##    def Add(self, PropertyInfo):
##        u'Adds a PropertyInfo.'
##        #return 
##

ILayerResultOptions._methods_ = [
    COMMETHOD(['propput', helpstring(u'Indicates whether we should include Geometry.')], HRESULT, 'IncludeGeometry',
              ( ['in'], VARIANT_BOOL, 'IncludeGeometry' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether we should include Geometry.')], HRESULT, 'IncludeGeometry',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IncludeGeometry' )),
    COMMETHOD(['propputref', helpstring(u'Indicates whether we need to modify Geometry.')], HRESULT, 'GeometryResultOptions',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeometryResultOptions), 'geometryOptions' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether we need to modify Geometry.')], HRESULT, 'GeometryResultOptions',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeometryResultOptions)), 'geometryOptions' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to include field name or alias.')], HRESULT, 'ReturnFieldNamesInResults',
              ( ['in'], VARIANT_BOOL, 'returnFieldName' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to include field name or alias.')], HRESULT, 'ReturnFieldNamesInResults',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'returnFieldName' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to format the values in results.')], HRESULT, 'FormatValuesInResults',
              ( ['in'], VARIANT_BOOL, 'Format' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to format the values in results.')], HRESULT, 'FormatValuesInResults',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Format' )),
]
################################################################
## code template for ILayerResultOptions implementation
##class ILayerResultOptions_Impl(object):
##    def _get(self):
##        u'Indicates whether to include field name or alias.'
##        #return returnFieldName
##    def _set(self, returnFieldName):
##        u'Indicates whether to include field name or alias.'
##    ReturnFieldNamesInResults = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether we should include Geometry.'
##        #return IncludeGeometry
##    def _set(self, IncludeGeometry):
##        u'Indicates whether we should include Geometry.'
##    IncludeGeometry = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether to format the values in results.'
##        #return Format
##    def _set(self, Format):
##        u'Indicates whether to format the values in results.'
##    FormatValuesInResults = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def GeometryResultOptions(self, geometryOptions):
##        u'Indicates whether we need to modify Geometry.'
##        #return 
##

IImageServerName._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The Image Server object construction properties.')], HRESULT, 'Properties',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet), 'ppProperties' )),
    COMMETHOD(['propget', helpstring(u'The Image Server object construction properties.')], HRESULT, 'Properties',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet)), 'ppProperties' )),
]
################################################################
## code template for IImageServerName implementation
##class IImageServerName_Impl(object):
##    @property
##    def Properties(self, ppProperties):
##        u'The Image Server object construction properties.'
##        #return 
##

class MapServerRESTSubLayer(CoClass):
    u'Provides programmatic access to a MapServer SubLayer.'
    _reg_clsid_ = GUID('{8AD8359A-D7F3-4CDB-83E4-FE54CA37CCFF}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
MapServerRESTSubLayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILayer, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeoDataset, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayAdmin, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayAdmin2, ILayerDrawingProperties, ILayerEffects, ICompositeLayer, ICompositeLayer2, ILayerGeneralProperties, ITimeData, ITimeData2, ITimeDataDisplay, ILegendInfo, ILayerExtensions, ILayer2]
MapServerRESTSubLayer._outgoing_interfaces_ = [ILayerEvents]

class RenderingRule(CoClass):
    u'An image service rendering rule class.'
    _reg_clsid_ = GUID('{912FC6F2-4B5F-4AA3-AF24-18704AB58F6E}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
RenderingRule._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRenderingRule, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class RasterItemDescription(CoClass):
    u'An image service rendering rule class.'
    _reg_clsid_ = GUID('{0618AA16-BC84-4266-9858-A43EA9738266}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
RasterItemDescription._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterItemDescription, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class RasterItemDescriptions(CoClass):
    u'A list of raster item description objects.'
    _reg_clsid_ = GUID('{8CDAC104-B36A-403C-A2BF-26F89C540878}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
RasterItemDescriptions._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterItemDescriptions, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

class FillSymbolStyleGalleryClass(CoClass):
    u'Use to create new Fill Symbol items.'
    _reg_clsid_ = GUID('{C2EAB0A1-9C06-11D1-A1C6-080009B6F22B}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
FillSymbolStyleGalleryClass._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IStyleGalleryClass, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IStyleGalleryClass2]

class IDataObjectTable2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Data Table interface 2'
    _iid_ = GUID('{40360777-48A5-48E3-AAE9-1296D6F890F3}')
    _idlflags_ = ['oleautomation']
IDataObjectTable2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Editor Tracking Info.')], HRESULT, 'EditorTrackingInfo',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IEditorTrackingInfo)), 'EditorTrackingInfo' )),
    COMMETHOD(['propget', helpstring(u'Feature Level Access Control')], HRESULT, 'OwnershipBasedAccessControl',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IOwnershipBasedAccessControl)), 'OwnershipBasedAccessControl' )),
    COMMETHOD(['propget', helpstring(u'Server can track chagnes for this layer/ table. The changes are returned during replica synchronization.')], HRESULT, 'SyncCanReturnChanges',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'canReturnChanges' )),
    COMMETHOD(['propget'], HRESULT, 'IsDataVersioned',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'isVersioned' )),
    COMMETHOD(['propget'], HRESULT, 'SupportsRollbackOnFailureParameter',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'supports' )),
]
################################################################
## code template for IDataObjectTable2 implementation
##class IDataObjectTable2_Impl(object):
##    @property
##    def IsDataVersioned(self):
##        '-no docstring-'
##        #return isVersioned
##
##    @property
##    def OwnershipBasedAccessControl(self):
##        u'Feature Level Access Control'
##        #return OwnershipBasedAccessControl
##
##    @property
##    def SupportsRollbackOnFailureParameter(self):
##        '-no docstring-'
##        #return supports
##
##    @property
##    def SyncCanReturnChanges(self):
##        u'Server can track chagnes for this layer/ table. The changes are returned during replica synchronization.'
##        #return canReturnChanges
##
##    @property
##    def EditorTrackingInfo(self):
##        u'Editor Tracking Info.'
##        #return EditorTrackingInfo
##

IFeatureLayerSelectionEvents._methods_ = [
    COMMETHOD([helpstring(u'Occurs when the selection changes.')], HRESULT, 'FeatureLayerSelectionChanged'),
]
################################################################
## code template for IFeatureLayerSelectionEvents implementation
##class IFeatureLayerSelectionEvents_Impl(object):
##    def FeatureLayerSelectionChanged(self):
##        u'Occurs when the selection changes.'
##        #return 
##

class EngineCadAnnotationLayerFactory(CoClass):
    u'Esri CAD Annotation Layer Factory.'
    _reg_clsid_ = GUID('{12D76758-E376-48EC-A310-78E4735BEBAF}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
EngineCadAnnotationLayerFactory._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILayerFactory]

IOverposter2._methods_ = [
    COMMETHOD(['propget', helpstring(u'The number of classes.')], HRESULT, 'NumClasses',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'Overposter capabilities for the specified layer.')], HRESULT, 'Capabilities',
              ( ['in'], POINTER(ILayer), 'Layer' ),
              ( ['retval', 'out'], POINTER(esriOverposterCaps), 'caps' )),
    COMMETHOD([helpstring(u'Adds a class to the overposter and specifies its properties.')], HRESULT, 'AddClass',
              ( ['in'], POINTER(IOverposterLayerProperties), 'props' ),
              ( ['retval', 'out'], POINTER(c_int), 'ClassIndex' )),
    COMMETHOD([helpstring(u'Inserts a class at a specific index, and specifies its peoperties.')], HRESULT, 'InsertClass',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(IOverposterLayerProperties), 'props' )),
    COMMETHOD([helpstring(u'Removes the class at the specified index from the overposter.')], HRESULT, 'RemoveClass',
              ( ['in'], c_int, 'ClassIndex' )),
    COMMETHOD([helpstring(u'Removes all classes from the overposter.')], HRESULT, 'ResetClasses'),
    COMMETHOD([helpstring(u'Initializes the overposter for drawing into the specified area of the map display.')], HRESULT, 'Initialize',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'Extent' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' )),
    COMMETHOD([helpstring(u'Adds a barrier object that placed objects must avoid.')], HRESULT, 'AddBarriers',
              ( ['in'], esriBasicOverposterWeight, 'Weight' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometryCollection), 'Barriers' )),
    COMMETHOD([helpstring(u'Adds a label object to be placed.')], HRESULT, 'AddLabel',
              ( ['in'], c_int, 'ClassIndex' ),
              ( ['in'], BSTR, 'Label' ),
              ( ['in'], c_double, 'Width' ),
              ( ['in'], c_double, 'Height' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'ControlShape' ),
              ( ['in'], c_int, 'FeatureId' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol), 'Symbol' )),
    COMMETHOD([helpstring(u'Adds a curved label object to be placed.')], HRESULT, 'AddCurvedLabel',
              ( ['in'], c_int, 'ClassIndex' ),
              ( ['in'], BSTR, 'Label' ),
              ( ['in'], VARIANT, 'widths' ),
              ( ['in'], VARIANT, 'ascents' ),
              ( ['in'], VARIANT, 'descents' ),
              ( ['in'], c_double, 'fontHeight' ),
              ( ['in'], c_double, 'fontDescent' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'ControlShape' ),
              ( ['in'], c_int, 'FeatureId' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol), 'Symbol' )),
    COMMETHOD([helpstring(u'Adds a symbol to be placed.')], HRESULT, 'AddSymbol',
              ( ['in'], c_int, 'ClassIndex' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol), 'Symbol' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'Geometry' ),
              ( ['in'], c_int, 'FeatureId' )),
    COMMETHOD([helpstring(u'Places objects using the overposter.')], HRESULT, 'PlaceObjects'),
    COMMETHOD([helpstring(u'The next object that was successfully placed.')], HRESULT, 'NextPlaced',
              ( ['in', 'out'], POINTER(POINTER(IPlacedObject)), 'Object' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'TrackCancel' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStepProgressor), 'StepProgressor' )),
    COMMETHOD([helpstring(u'The next object that was not successfully placed.')], HRESULT, 'NextUnplaced',
              ( ['out'], POINTER(POINTER(IPlacedObject)), 'Object' )),
    COMMETHOD([helpstring(u'The next object that was not used.')], HRESULT, 'NextUnused',
              ( ['out'], POINTER(POINTER(IPlacedObject)), 'Object' )),
    COMMETHOD([helpstring(u'Releases current objects from memory.')], HRESULT, 'ReleaseResources'),
    COMMETHOD(['propget', helpstring(u'The number of unplaced labels. Only valid after calling PlaceObjects.')], HRESULT, 'NumberOfUnplacedLabels',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The number of unplaced labels. Only valid after calling PlaceObjects.')], HRESULT, 'NumberOfPlacedLabels',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD([helpstring(u'Adds a label object to be placed.')], HRESULT, 'AddLabel2',
              ( ['in'], c_int, 'ClassIndex' ),
              ( ['in'], BSTR, 'Label' ),
              ( ['in'], c_double, 'Width' ),
              ( ['in'], c_double, 'Height' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'ControlShape' ),
              ( ['in'], c_int, 'FeatureId' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol), 'Symbol' ),
              ( ['in'], c_double, 'Angle' )),
]
################################################################
## code template for IOverposter2 implementation
##class IOverposter2_Impl(object):
##    @property
##    def NumberOfPlacedLabels(self):
##        u'The number of unplaced labels. Only valid after calling PlaceObjects.'
##        #return Count
##
##    def ResetClasses(self):
##        u'Removes all classes from the overposter.'
##        #return 
##
##    def AddCurvedLabel(self, ClassIndex, Label, widths, ascents, descents, fontHeight, fontDescent, ControlShape, FeatureId, Symbol):
##        u'Adds a curved label object to be placed.'
##        #return 
##
##    def PlaceObjects(self):
##        u'Places objects using the overposter.'
##        #return 
##
##    def NextUnplaced(self):
##        u'The next object that was not successfully placed.'
##        #return Object
##
##    def NextPlaced(self, TrackCancel, StepProgressor):
##        u'The next object that was successfully placed.'
##        #return Object
##
##    def AddBarriers(self, Weight, Barriers):
##        u'Adds a barrier object that placed objects must avoid.'
##        #return 
##
##    def RemoveClass(self, ClassIndex):
##        u'Removes the class at the specified index from the overposter.'
##        #return 
##
##    def InsertClass(self, Index, props):
##        u'Inserts a class at a specific index, and specifies its peoperties.'
##        #return 
##
##    def NextUnused(self):
##        u'The next object that was not used.'
##        #return Object
##
##    def AddLabel2(self, ClassIndex, Label, Width, Height, ControlShape, FeatureId, Symbol, Angle):
##        u'Adds a label object to be placed.'
##        #return 
##
##    def AddLabel(self, ClassIndex, Label, Width, Height, ControlShape, FeatureId, Symbol):
##        u'Adds a label object to be placed.'
##        #return 
##
##    @property
##    def Capabilities(self, Layer):
##        u'Overposter capabilities for the specified layer.'
##        #return caps
##
##    def Initialize(self, Extent, Display):
##        u'Initializes the overposter for drawing into the specified area of the map display.'
##        #return 
##
##    @property
##    def NumberOfUnplacedLabels(self):
##        u'The number of unplaced labels. Only valid after calling PlaceObjects.'
##        #return Count
##
##    @property
##    def NumClasses(self):
##        u'The number of classes.'
##        #return Count
##
##    def ReleaseResources(self):
##        u'Releases current objects from memory.'
##        #return 
##
##    def AddSymbol(self, ClassIndex, Symbol, Geometry, FeatureId):
##        u'Adds a symbol to be placed.'
##        #return 
##
##    def AddClass(self, props):
##        u'Adds a class to the overposter and specifies its properties.'
##        #return ClassIndex
##

class DimensionStyle(CoClass):
    u'A container of properties which dictate how a dimension feature is displayed.'
    _reg_clsid_ = GUID('{C08E2878-F9FF-11D3-80D3-00C04F601565}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
DimensionStyle._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDimensionStyle, IDimensionStyleDisplay, IDimensionStyleText, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class RepresentationLegendClass(CoClass):
    u'A legend class object identifying a representation rule.'
    _reg_clsid_ = GUID('{52212729-95AF-46AF-AC13-F8FB5DBF2DA6}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
RepresentationLegendClass._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRepresentationLegendClass, ILegendClass]

class EditResult(CoClass):
    u'EditResult co-class.'
    _reg_clsid_ = GUID('{F3FECF1B-7C05-4998-A116-0C2A32D159C4}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
EditResult._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IEditResult, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]

class ConvertLabelsToAnnotation(CoClass):
    u'An Esri convert labels to annotation helper class.'
    _reg_clsid_ = GUID('{12F35A5F-8A3C-472D-FE5A-2DE78EA9BBF1}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IConvertLabelsToAnnotation(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties that control the conversion of labels to annotation.'
    _iid_ = GUID('{0AE13BC3-F821-4AE4-8B20-1ECE97F78874}')
    _idlflags_ = ['oleautomation']
ConvertLabelsToAnnotation._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IConvertLabelsToAnnotation, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]

IRasterShader._methods_ = [
    COMMETHOD(['propput', helpstring(u'The brightness to be applied.')], HRESULT, 'Brightness',
              ( ['in'], c_short, 'Brightness' )),
    COMMETHOD(['propget', helpstring(u'The brightness to be applied.')], HRESULT, 'Brightness',
              ( ['retval', 'out'], POINTER(c_short), 'Brightness' )),
    COMMETHOD(['propput', helpstring(u'The contrast to be applied.')], HRESULT, 'Contrast',
              ( ['in'], c_short, 'Contrast' )),
    COMMETHOD(['propget', helpstring(u'The contrast to be applied.')], HRESULT, 'Contrast',
              ( ['retval', 'out'], POINTER(c_short), 'Contrast' )),
    COMMETHOD(['propput', helpstring(u'The gamma value to be applied.')], HRESULT, 'Gamma',
              ( ['in'], c_double, 'Gamma' )),
    COMMETHOD(['propget', helpstring(u'The gamma value to be applied.')], HRESULT, 'Gamma',
              ( ['retval', 'out'], POINTER(c_double), 'Gamma' )),
]
################################################################
## code template for IRasterShader implementation
##class IRasterShader_Impl(object):
##    def _get(self):
##        u'The gamma value to be applied.'
##        #return Gamma
##    def _set(self, Gamma):
##        u'The gamma value to be applied.'
##    Gamma = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The contrast to be applied.'
##        #return Contrast
##    def _set(self, Contrast):
##        u'The contrast to be applied.'
##    Contrast = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The brightness to be applied.'
##        #return Brightness
##    def _set(self, Brightness):
##        u'The brightness to be applied.'
##    Brightness = property(_get, _set, doc = _set.__doc__)
##

IMapFrameDescriptions._methods_ = [
    COMMETHOD(['propget', helpstring(u'The map frame description count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The map frame description at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IMapFrameDescription)), 'mapFrameDesc' )),
    COMMETHOD([helpstring(u'Removes the map frame description at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all map frame descriptions.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Adds a map frame description.')], HRESULT, 'Add',
              ( ['in'], POINTER(IMapFrameDescription), 'mapFrameDesc' )),
    COMMETHOD([helpstring(u'Adds a map frame description at the specified position.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(IMapFrameDescription), 'mapFrameDesc' )),
]
################################################################
## code template for IMapFrameDescriptions implementation
##class IMapFrameDescriptions_Impl(object):
##    @property
##    def Count(self):
##        u'The map frame description count.'
##        #return Count
##
##    def Insert(self, Index, mapFrameDesc):
##        u'Adds a map frame description at the specified position.'
##        #return 
##
##    def Remove(self, Index):
##        u'Removes the map frame description at the specified position.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'The map frame description at the specified position.'
##        #return mapFrameDesc
##
##    def RemoveAll(self):
##        u'Removes all map frame descriptions.'
##        #return 
##
##    def Add(self, mapFrameDesc):
##        u'Adds a map frame description.'
##        #return 
##

class IRealTimeFeedManager(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to basic properties of RealTimeFeedManager.'
    _iid_ = GUID('{BF309FCD-69AF-4311-8803-C4960F378659}')
    _idlflags_ = ['oleautomation']
IRealTimeFeedManager._methods_ = [
    COMMETHOD(['propget', helpstring(u'The real-time feed.')], HRESULT, 'RealTimeFeed',
              ( ['retval', 'out'], POINTER(POINTER(IRealTimeFeed)), 'ppRealTimeFeed' )),
    COMMETHOD(['propputref', helpstring(u'The real-time feed.')], HRESULT, 'RealTimeFeed',
              ( ['in'], POINTER(IRealTimeFeed), 'ppRealTimeFeed' )),
    COMMETHOD(['propget', helpstring(u'The map on which to display the current position.')], HRESULT, 'Map',
              ( ['retval', 'out'], POINTER(POINTER(IMap)), 'ppMap' )),
    COMMETHOD(['propputref', helpstring(u'The map on which to display the current position.')], HRESULT, 'Map',
              ( ['in'], POINTER(IMap), 'ppMap' )),
    COMMETHOD(['propget', helpstring(u'The GPS feed object.')], HRESULT, 'GpsFeed',
              ( ['retval', 'out'], POINTER(POINTER(IGpsFeed)), 'ppGpsFeed' )),
    COMMETHOD(['propget', helpstring(u'The real-time feed simulator.')], HRESULT, 'RealTimeFeedSimulator',
              ( ['retval', 'out'], POINTER(POINTER(IRealTimeFeedSimulator)), 'ppRealTimeFeedSimulator' )),
]
################################################################
## code template for IRealTimeFeedManager implementation
##class IRealTimeFeedManager_Impl(object):
##    def Map(self, ppMap):
##        u'The map on which to display the current position.'
##        #return 
##
##    @property
##    def RealTimeFeedSimulator(self):
##        u'The real-time feed simulator.'
##        #return ppRealTimeFeedSimulator
##
##    def RealTimeFeed(self, ppRealTimeFeed):
##        u'The real-time feed.'
##        #return 
##
##    @property
##    def GpsFeed(self):
##        u'The GPS feed object.'
##        #return ppGpsFeed
##

IBasicHistogram._methods_ = [
    COMMETHOD([helpstring(u'Histogram as an array of values (doubles) and a paired array of frequencies (longs).')], HRESULT, 'GetHistogram',
              ( ['out'], POINTER(VARIANT), 'doubleArrayValues' ),
              ( ['out'], POINTER(VARIANT), 'longArrayFrequencies' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'isSampled' )),
    COMMETHOD(['propput', helpstring(u'Custom minimum.')], HRESULT, 'CustomMin',
              ( ['in'], c_double, 'rhs' )),
    COMMETHOD(['propput', helpstring(u'Custom maximum.')], HRESULT, 'CustomMax',
              ( ['in'], c_double, 'rhs' )),
    COMMETHOD([helpstring(u'Resets custom minimum and maximum.')], HRESULT, 'ResetCustomMinMax'),
    COMMETHOD([helpstring(u'Causes to recreate the Histogram from the Table for the next GetHistogram call.')], HRESULT, 'Invalidate'),
]
################################################################
## code template for IBasicHistogram implementation
##class IBasicHistogram_Impl(object):
##    def _set(self, rhs):
##        u'Custom maximum.'
##    CustomMax = property(fset = _set, doc = _set.__doc__)
##
##    def Invalidate(self):
##        u'Causes to recreate the Histogram from the Table for the next GetHistogram call.'
##        #return 
##
##    def ResetCustomMinMax(self):
##        u'Resets custom minimum and maximum.'
##        #return 
##
##    def _set(self, rhs):
##        u'Custom minimum.'
##    CustomMin = property(fset = _set, doc = _set.__doc__)
##
##    def GetHistogram(self):
##        u'Histogram as an array of values (doubles) and a paired array of frequencies (longs).'
##        #return doubleArrayValues, longArrayFrequencies, isSampled
##

IBasemapLayer._methods_ = [
    COMMETHOD([helpstring(u'Notify Base map Layer that one of its layers changed.')], HRESULT, 'NotifyLayerChanged',
              ( ['in'], POINTER(ILayer), 'Layer' ),
              ( ['in'], esriLayerEventHint, 'eventHint' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IVariantArray), 'eventParam' )),
    COMMETHOD([helpstring(u'Indicates the conversion status of a given layer.')], HRESULT, 'GetConversionStatus',
              ( ['in'], POINTER(ILayer), 'Layer' ),
              ( ['retval', 'out'], POINTER(esriConversionStatus), 'Status' )),
    COMMETHOD([helpstring(u'Gets the wrapper for a layer. Creates a new BasemapSubLayer if necessary.')], HRESULT, 'GetLayerWrapper',
              ( ['in'], POINTER(ILayer), 'Layer' ),
              ( ['retval', 'out'], POINTER(POINTER(IBasemapSubLayer)), 'layerWrapper' )),
    COMMETHOD([helpstring(u'Gets the wrapper for a layer. Returns NULL if no BasemapSubLayer is found.')], HRESULT, 'FindLayerWrapper',
              ( ['in'], POINTER(ILayer), 'pLayer' ),
              ( ['retval', 'out'], POINTER(POINTER(IBasemapSubLayer)), 'ppLayerWrapper' )),
    COMMETHOD([helpstring(u'Returns True, if the layer draws something.')], HRESULT, 'CanDraw',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'bYesNo' )),
    COMMETHOD([helpstring(u"Invalidates layer's cache.")], HRESULT, 'InvalidateCache'),
    COMMETHOD(['propget', helpstring(u'Get array of pixel shaders.')], HRESULT, 'Shaders',
              ( ['retval', 'out'], POINTER(POINTER(IArrayOfIShader)), 'Shaders' )),
    COMMETHOD(['propputref', helpstring(u'Get array of pixel shaders.')], HRESULT, 'Shaders',
              ( ['in'], POINTER(IArrayOfIShader), 'Shaders' )),
    COMMETHOD([helpstring(u'Notify Base map Layer that the parent Map properties changed.')], HRESULT, 'NotifyMapPropertiesChanged',
              ( ['in'], POINTER(IMap), 'pMap' ),
              ( ['in'], VARIANT_BOOL, 'reconvertAll' )),
    COMMETHOD([helpstring(u'Returns if there is sufficient memory available for the Basemap Layer.')], HRESULT, 'HasSufficientMemory',
              ( ['in'], c_int, 'numberOfAdditionalBasemapLayers' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
]
################################################################
## code template for IBasemapLayer implementation
##class IBasemapLayer_Impl(object):
##    def GetConversionStatus(self, Layer):
##        u'Indicates the conversion status of a given layer.'
##        #return Status
##
##    def HasSufficientMemory(self, numberOfAdditionalBasemapLayers):
##        u'Returns if there is sufficient memory available for the Basemap Layer.'
##        #return flag
##
##    def FindLayerWrapper(self, pLayer):
##        u'Gets the wrapper for a layer. Returns NULL if no BasemapSubLayer is found.'
##        #return ppLayerWrapper
##
##    def NotifyLayerChanged(self, Layer, eventHint, eventParam):
##        u'Notify Base map Layer that one of its layers changed.'
##        #return 
##
##    def NotifyMapPropertiesChanged(self, pMap, reconvertAll):
##        u'Notify Base map Layer that the parent Map properties changed.'
##        #return 
##
##    def CanDraw(self):
##        u'Returns True, if the layer draws something.'
##        #return bYesNo
##
##    def InvalidateCache(self):
##        u"Invalidates layer's cache."
##        #return 
##
##    def Shaders(self, Shaders):
##        u'Get array of pixel shaders.'
##        #return 
##
##    def GetLayerWrapper(self, Layer):
##        u'Gets the wrapper for a layer. Creates a new BasemapSubLayer if necessary.'
##        #return layerWrapper
##

class ImageQueryFilter(CoClass):
    u'An image query filter.'
    _reg_clsid_ = GUID('{0B9D971A-D026-49F3-85A0-A5BE5F6BE888}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
ImageQueryFilter._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IImageQueryFilter, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITimeQueryFilter, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ISpatialFilter, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter2, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilterDefinition, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilterDefinition2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]

IReadingDirection._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if the reading direction is right to left.')], HRESULT, 'RightToLeft',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'RightToLeft' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the reading direction is right to left.')], HRESULT, 'RightToLeft',
              ( ['in'], VARIANT_BOOL, 'RightToLeft' )),
]
################################################################
## code template for IReadingDirection implementation
##class IReadingDirection_Impl(object):
##    def _get(self):
##        u'Indicates if the reading direction is right to left.'
##        #return RightToLeft
##    def _set(self, RightToLeft):
##        u'Indicates if the reading direction is right to left.'
##    RightToLeft = property(_get, _set, doc = _set.__doc__)
##

class SimpleMapImage(CoClass):
    u'A raster that is rendered using a renderer.'
    _reg_clsid_ = GUID('{611F5B19-E18C-4417-8D1F-C7A652B75799}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
SimpleMapImage._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IImageResult, IImageResult2, IMapImage, ISimpleMapImage, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize]

class RealTimeFeedManager(CoClass):
    u'The real-time feed manager object.'
    _reg_clsid_ = GUID('{D2F9A918-9DE3-42B4-9684-6E6461562D88}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
class IRealTimeFeedManagerEvents(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the events fired by a real-time feed manager object.'
    _iid_ = GUID('{0549F827-B3F4-4FC8-83CE-FBF6E5464F49}')
    _idlflags_ = ['oleautomation']
RealTimeFeedManager._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRealTimeFeedManager, IGpsDisplayProperties, IPositionTrails, IRealTimeLog, IRealTimeDestination, IRealTimeFeedSnap, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, IRealTimeFeedEvents, IActiveViewEvents, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IConnectionPointContainer]
RealTimeFeedManager._outgoing_interfaces_ = [IRealTimeFeedManagerEvents]


# values for enumeration 'esriExtentTypeEnum'
esriExtentDefault = 0
esriAutoExtentNone = 0
esriExtentScale = 1
esriAutoExtentScale = 1
esriExtentBounds = 2
esriAutoExtentBounds = 2
esriAutoExtentMarginPercent = 3
esriAutoExtentMarginMapUnits = 4
esriAutoExtentMarginPageUnits = 5
esriExtentPageIndex = 6
esriExtentTypeEnum = c_int # enum
IMapFrame._methods_ = [
    COMMETHOD(['propget', helpstring(u'The associated map.')], HRESULT, 'Map',
              ( ['retval', 'out'], POINTER(POINTER(IMap)), 'Map' )),
    COMMETHOD(['propputref', helpstring(u'The associated map.')], HRESULT, 'Map',
              ( ['in'], POINTER(IMap), 'Map' )),
    COMMETHOD(['propget', helpstring(u"The frame's container.")], HRESULT, 'Container',
              ( ['retval', 'out'], POINTER(POINTER(IGraphicsContainer)), 'Container' )),
    COMMETHOD(['propputref', helpstring(u"The frame's container.")], HRESULT, 'Container',
              ( ['in'], POINTER(IGraphicsContainer), 'Container' )),
    COMMETHOD(['propget', helpstring(u'The way in which the map extent of the frame is specified.')], HRESULT, 'ExtentType',
              ( ['retval', 'out'], POINTER(esriExtentTypeEnum), 'Type' )),
    COMMETHOD(['propput', helpstring(u'The way in which the map extent of the frame is specified.')], HRESULT, 'ExtentType',
              ( ['in'], esriExtentTypeEnum, 'Type' )),
    COMMETHOD(['propget', helpstring(u'The scale at which the map should be displayed.')], HRESULT, 'MapScale',
              ( ['retval', 'out'], POINTER(c_double), 'Scale' )),
    COMMETHOD(['propput', helpstring(u'The scale at which the map should be displayed.')], HRESULT, 'MapScale',
              ( ['in'], c_double, 'Scale' )),
    COMMETHOD(['propget', helpstring(u'The bounds of the map displayed by the frame.')], HRESULT, 'MapBounds',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'Bounds' )),
    COMMETHOD(['propput', helpstring(u'The bounds of the map displayed by the frame.')], HRESULT, 'MapBounds',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'Bounds' )),
    COMMETHOD([helpstring(u'Returns the map surround frame element of the type given in clsid.  An optional style object may be specified.')], HRESULT, 'CreateSurroundFrame',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IUID), 'clsid' ),
              ( ['in'], POINTER(IMapSurround), 'optionalStyle' ),
              ( ['retval', 'out'], POINTER(POINTER(IMapSurroundFrame)), 'MapSurroundFrame' )),
    COMMETHOD([helpstring(u'Add a new locator rectangle to the data frame.')], HRESULT, 'AddLocatorRectangle',
              ( ['in'], POINTER(ILocatorRectangle), 'locator' )),
    COMMETHOD([helpstring(u'Remove a locator rectangle from the data frame.')], HRESULT, 'RemoveLocatorRectangle',
              ( ['in'], POINTER(ILocatorRectangle), 'locator' )),
    COMMETHOD([helpstring(u'Remove all the locator rectangles from the data frame.')], HRESULT, 'RemoveAllLocatorRectangles'),
    COMMETHOD(['propget', helpstring(u'The number of locator rectangles.')], HRESULT, 'LocatorRectangleCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD([helpstring(u'Returns the locator rectangle at the specified index.')], HRESULT, 'LocatorRectangle',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(ILocatorRectangle)), 'locator' )),
]
################################################################
## code template for IMapFrame implementation
##class IMapFrame_Impl(object):
##    def Map(self, Map):
##        u'The associated map.'
##        #return 
##
##    def _get(self):
##        u'The way in which the map extent of the frame is specified.'
##        #return Type
##    def _set(self, Type):
##        u'The way in which the map extent of the frame is specified.'
##    ExtentType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The bounds of the map displayed by the frame.'
##        #return Bounds
##    def _set(self, Bounds):
##        u'The bounds of the map displayed by the frame.'
##    MapBounds = property(_get, _set, doc = _set.__doc__)
##
##    def RemoveAllLocatorRectangles(self):
##        u'Remove all the locator rectangles from the data frame.'
##        #return 
##
##    def CreateSurroundFrame(self, clsid, optionalStyle):
##        u'Returns the map surround frame element of the type given in clsid.  An optional style object may be specified.'
##        #return MapSurroundFrame
##
##    def RemoveLocatorRectangle(self, locator):
##        u'Remove a locator rectangle from the data frame.'
##        #return 
##
##    def LocatorRectangle(self, Index):
##        u'Returns the locator rectangle at the specified index.'
##        #return locator
##
##    @property
##    def LocatorRectangleCount(self):
##        u'The number of locator rectangles.'
##        #return Count
##
##    def _get(self):
##        u'The scale at which the map should be displayed.'
##        #return Scale
##    def _set(self, Scale):
##        u'The scale at which the map should be displayed.'
##    MapScale = property(_get, _set, doc = _set.__doc__)
##
##    def Container(self, Container):
##        u"The frame's container."
##        #return 
##
##    def AddLocatorRectangle(self, locator):
##        u'Add a new locator rectangle to the data frame.'
##        #return 
##

class ImageServerIdentifyResults(CoClass):
    u'A collection of Image Server Identify Result objects.'
    _reg_clsid_ = GUID('{018D762F-5CEA-44C5-BF16-701EF6517B36}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
ImageServerIdentifyResults._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IImageServerIdentifyResults, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

IFeatureLayer2._methods_ = [
    COMMETHOD(['propget', helpstring(u"The layer's feature class.")], HRESULT, 'FeatureClass',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClass)), 'fclass' )),
    COMMETHOD(['propputref', helpstring(u"The layer's feature class.")], HRESULT, 'FeatureClass',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClass), 'fclass' )),
    COMMETHOD(['propget', helpstring(u'Data source type.')], HRESULT, 'DataSourceType',
              ( ['retval', 'out'], POINTER(BSTR), 'Text' )),
    COMMETHOD(['propput', helpstring(u'Data source type.')], HRESULT, 'DataSourceType',
              ( ['in'], BSTR, 'Text' )),
    COMMETHOD(['propget', helpstring(u'Primary display field.')], HRESULT, 'DisplayField',
              ( ['retval', 'out'], POINTER(BSTR), 'FieldName' )),
    COMMETHOD(['propput', helpstring(u'Primary display field.')], HRESULT, 'DisplayField',
              ( ['in'], BSTR, 'FieldName' )),
    COMMETHOD(['propget', helpstring(u'Indicates if layer is selectable.')], HRESULT, 'Selectable',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Value' )),
    COMMETHOD(['propput', helpstring(u'Indicates if layer is selectable.')], HRESULT, 'Selectable',
              ( ['in'], VARIANT_BOOL, 'Value' )),
    COMMETHOD([helpstring(u'Creates a cursor based upon the search criteria.')], HRESULT, 'Search',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'queryFilter' ),
              ( ['in'], VARIANT_BOOL, 'recycling' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureCursor)), 'Cursor' )),
    COMMETHOD(['propget', helpstring(u'Indicates if symbols are scaled for the layer.')], HRESULT, 'ScaleSymbols',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Scale' )),
    COMMETHOD(['propput', helpstring(u'Indicates if symbols are scaled for the layer.')], HRESULT, 'ScaleSymbols',
              ( ['in'], VARIANT_BOOL, 'Scale' )),
    COMMETHOD(['propget', helpstring(u"The layer's shape type.")], HRESULT, 'ShapeType',
              ( ['retval', 'out'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.esriGeometryType), 'Type' )),
    COMMETHOD([helpstring(u"Expands the given geometry by an amount that will include the layer's symbology for the given display.")], HRESULT, 'ExpandRegionForSymbols',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'region' )),
]
################################################################
## code template for IFeatureLayer2 implementation
##class IFeatureLayer2_Impl(object):
##    def _get(self):
##        u'Primary display field.'
##        #return FieldName
##    def _set(self, FieldName):
##        u'Primary display field.'
##    DisplayField = property(_get, _set, doc = _set.__doc__)
##
##    def ExpandRegionForSymbols(self, Display, region):
##        u"Expands the given geometry by an amount that will include the layer's symbology for the given display."
##        #return 
##
##    @property
##    def ShapeType(self):
##        u"The layer's shape type."
##        #return Type
##
##    def _get(self):
##        u'Data source type.'
##        #return Text
##    def _set(self, Text):
##        u'Data source type.'
##    DataSourceType = property(_get, _set, doc = _set.__doc__)
##
##    def Search(self, queryFilter, recycling):
##        u'Creates a cursor based upon the search criteria.'
##        #return Cursor
##
##    def _get(self):
##        u'Indicates if symbols are scaled for the layer.'
##        #return Scale
##    def _set(self, Scale):
##        u'Indicates if symbols are scaled for the layer.'
##    ScaleSymbols = property(_get, _set, doc = _set.__doc__)
##
##    def FeatureClass(self, fclass):
##        u"The layer's feature class."
##        #return 
##
##    def _get(self):
##        u'Indicates if layer is selectable.'
##        #return Value
##    def _set(self, Value):
##        u'Indicates if layer is selectable.'
##    Selectable = property(_get, _set, doc = _set.__doc__)
##

class PageDescription(CoClass):
    u'The Page Description coclass contains a description of the page layout in the current document.'
    _reg_clsid_ = GUID('{B624B6A5-4AB5-4AF0-86F3-B09213836634}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
PageDescription._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IPageDescription, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

class GpsConnection(CoClass):
    u"Used to establish a connection to the computer's communication port."
    _reg_clsid_ = GUID('{8349D7D0-D5EC-41E5-9D14-C896F8617C3D}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
GpsConnection._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGpsConnection, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

class GeoReferenceEvents(CoClass):
    u'Helper coclass for working with the nondefault outbound IGeoReferenceEvents interface in VB.'
    _reg_clsid_ = GUID('{3DEC7F54-1EA3-43AF-9BF0-0EA1FAD10788}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
GeoReferenceEvents._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown]
GeoReferenceEvents._outgoing_interfaces_ = [IGeoReferenceEvents]

IRasterLayer._methods_ = [
    COMMETHOD(['propget', helpstring(u'Filepath of the data source.')], HRESULT, 'FilePath',
              ( ['retval', 'out'], POINTER(BSTR), 'FilePath' )),
    COMMETHOD(['propget', helpstring(u"Layer's Raster object.")], HRESULT, 'Raster',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster)), 'Raster' )),
    COMMETHOD([helpstring(u'Creates a layer from a Raster object.')], HRESULT, 'CreateFromRaster',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'Raster' )),
    COMMETHOD([helpstring(u'Creates a layer from a RasterDataset object.')], HRESULT, 'CreateFromDataset',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterDataset), 'RasterDataset' )),
    COMMETHOD([helpstring(u'Creates a layer from a file path to raster data.')], HRESULT, 'CreateFromFilePath',
              ( ['in'], BSTR, 'FilePath' )),
    COMMETHOD(['propget', helpstring(u"Layer's renderer.")], HRESULT, 'Renderer',
              ( ['retval', 'out'], POINTER(POINTER(IRasterRenderer)), 'Renderer' )),
    COMMETHOD(['propputref', helpstring(u"Layer's renderer.")], HRESULT, 'Renderer',
              ( ['in'], POINTER(IRasterRenderer), 'Renderer' )),
    COMMETHOD(['propget', helpstring(u'Number of bands in the layer.')], HRESULT, 'BandCount',
              ( ['retval', 'out'], POINTER(c_int), 'BandCount' )),
    COMMETHOD(['propget', helpstring(u'Number of columns in the layer.')], HRESULT, 'ColumnCount',
              ( ['retval', 'out'], POINTER(c_int), 'ColumnCount' )),
    COMMETHOD(['propget', helpstring(u'Number of rows in the layer.')], HRESULT, 'RowCount',
              ( ['retval', 'out'], POINTER(c_int), 'RowCount' )),
    COMMETHOD(['propget', helpstring(u'Indicates if pyramids are present for the layer.')], HRESULT, 'PyramidPresent',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbPyramidPresent' )),
    COMMETHOD(['propput', helpstring(u'Indicates if pyramids are present for the layer.')], HRESULT, 'PyramidPresent',
              ( ['in'], VARIANT_BOOL, 'pbPyramidPresent' )),
    COMMETHOD(['propget', helpstring(u'Extent of the dataframe that contains the layer.')], HRESULT, 'DataFrameExtent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'ppExtent' )),
    COMMETHOD(['propput', helpstring(u'Visible extent of the layer in the data frame.')], HRESULT, 'VisibleExtent',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'ppVisibleExtent' )),
    COMMETHOD(['propget', helpstring(u'Visible extent of the layer in the data frame.')], HRESULT, 'VisibleExtent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'ppVisibleExtent' )),
    COMMETHOD(['propput', helpstring(u"Layer's primary field.")], HRESULT, 'PrimaryField',
              ( ['in'], c_int, 'pnField' )),
    COMMETHOD(['propget', helpstring(u"Layer's primary field.")], HRESULT, 'PrimaryField',
              ( ['retval', 'out'], POINTER(c_int), 'pnField' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the raster resolution should be displayed in the Table of Contents.')], HRESULT, 'ShowResolution',
              ( ['in'], VARIANT_BOOL, 'b' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the raster resolution should be displayed in the Table of Contents.')], HRESULT, 'ShowResolution',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'b' )),
    COMMETHOD(['propput', helpstring(u'Display resolution factor.  Factor value is expressed as a percentage between 0 and 100.')], HRESULT, 'DisplayResolutionFactor',
              ( ['in'], c_int, 'pnFactor' )),
    COMMETHOD(['propget', helpstring(u'Display resolution factor.  Factor value is expressed as a percentage between 0 and 100.')], HRESULT, 'DisplayResolutionFactor',
              ( ['retval', 'out'], POINTER(c_int), 'pnFactor' )),
]
################################################################
## code template for IRasterLayer implementation
##class IRasterLayer_Impl(object):
##    @property
##    def ColumnCount(self):
##        u'Number of columns in the layer.'
##        #return ColumnCount
##
##    @property
##    def Raster(self):
##        u"Layer's Raster object."
##        #return Raster
##
##    def _get(self):
##        u'Indicates if pyramids are present for the layer.'
##        #return pbPyramidPresent
##    def _set(self, pbPyramidPresent):
##        u'Indicates if pyramids are present for the layer.'
##    PyramidPresent = property(_get, _set, doc = _set.__doc__)
##
##    def CreateFromDataset(self, RasterDataset):
##        u'Creates a layer from a RasterDataset object.'
##        #return 
##
##    @property
##    def FilePath(self):
##        u'Filepath of the data source.'
##        #return FilePath
##
##    def _get(self):
##        u'Display resolution factor.  Factor value is expressed as a percentage between 0 and 100.'
##        #return pnFactor
##    def _set(self, pnFactor):
##        u'Display resolution factor.  Factor value is expressed as a percentage between 0 and 100.'
##    DisplayResolutionFactor = property(_get, _set, doc = _set.__doc__)
##
##    def CreateFromRaster(self, Raster):
##        u'Creates a layer from a Raster object.'
##        #return 
##
##    def _get(self):
##        u'Indicates if the raster resolution should be displayed in the Table of Contents.'
##        #return b
##    def _set(self, b):
##        u'Indicates if the raster resolution should be displayed in the Table of Contents.'
##    ShowResolution = property(_get, _set, doc = _set.__doc__)
##
##    def CreateFromFilePath(self, FilePath):
##        u'Creates a layer from a file path to raster data.'
##        #return 
##
##    def _get(self):
##        u"Layer's primary field."
##        #return pnField
##    def _set(self, pnField):
##        u"Layer's primary field."
##    PrimaryField = property(_get, _set, doc = _set.__doc__)
##
##    def Renderer(self, Renderer):
##        u"Layer's renderer."
##        #return 
##
##    def _get(self):
##        u'Visible extent of the layer in the data frame.'
##        #return ppVisibleExtent
##    def _set(self, ppVisibleExtent):
##        u'Visible extent of the layer in the data frame.'
##    VisibleExtent = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def BandCount(self):
##        u'Number of bands in the layer.'
##        #return BandCount
##
##    @property
##    def DataFrameExtent(self):
##        u'Extent of the dataframe that contains the layer.'
##        #return ppExtent
##
##    @property
##    def RowCount(self):
##        u'Number of rows in the layer.'
##        #return RowCount
##

IRealTimeFeedManagerEvents._methods_ = [
    COMMETHOD([helpstring(u'Reports the change in the realtime feed object.')], HRESULT, 'RealTimeFeedChanged'),
    COMMETHOD([helpstring(u"Reports the current position when it is updated. 'estimate' is true if the signal is lost and the position is estimated.")], HRESULT, 'PositionUpdated',
              ( ['in'], POINTER(esriGpsPositionInfo), 'position' ),
              ( ['in'], VARIANT_BOOL, 'estimate' )),
    COMMETHOD([helpstring(u'Reports the current magnetic variance when it is updated.')], HRESULT, 'MagneticVarianceUpdated',
              ( ['in'], POINTER(esriGpsMagneticVariance), 'pMagneticVar' )),
    COMMETHOD([helpstring(u'Reports the current ground variance when it is updated.')], HRESULT, 'GroundCourseUpdated',
              ( ['in'], POINTER(esriGpsGroundCourse), 'pGroundCourse' )),
    COMMETHOD([helpstring(u'Reports the current DOP information when it is updated.')], HRESULT, 'DopInfoUpdated',
              ( ['in'], POINTER(esriGpsDOPInfo), 'pdop' )),
    COMMETHOD([helpstring(u'Reports the current satellite information when it is updated.')], HRESULT, 'SatelliteInfoUpdated',
              ( ['in'], c_int, 'satelliteCount' )),
    COMMETHOD([helpstring(u'Reports the date and time when it is updated.')], HRESULT, 'DateTimeUpdated',
              ( ['in'], POINTER(esriGpsDateTime), 'pNewDateTime' )),
    COMMETHOD([helpstring(u'Reports the DGPS information when it is updated.')], HRESULT, 'DgpsInfoUpdated',
              ( ['in'], POINTER(esriGpsDgpsInfo), 'pNewDGPSInfo' )),
    COMMETHOD([helpstring(u'Reports the connection information when it is updated.')], HRESULT, 'ConnectionStatusUpdated',
              ( ['in'], POINTER(esriGpsConnectionStatus), 'pConnectionStatus' )),
]
################################################################
## code template for IRealTimeFeedManagerEvents implementation
##class IRealTimeFeedManagerEvents_Impl(object):
##    def GroundCourseUpdated(self, pGroundCourse):
##        u'Reports the current ground variance when it is updated.'
##        #return 
##
##    def ConnectionStatusUpdated(self, pConnectionStatus):
##        u'Reports the connection information when it is updated.'
##        #return 
##
##    def DopInfoUpdated(self, pdop):
##        u'Reports the current DOP information when it is updated.'
##        #return 
##
##    def DgpsInfoUpdated(self, pNewDGPSInfo):
##        u'Reports the DGPS information when it is updated.'
##        #return 
##
##    def DateTimeUpdated(self, pNewDateTime):
##        u'Reports the date and time when it is updated.'
##        #return 
##
##    def RealTimeFeedChanged(self):
##        u'Reports the change in the realtime feed object.'
##        #return 
##
##    def MagneticVarianceUpdated(self, pMagneticVar):
##        u'Reports the current magnetic variance when it is updated.'
##        #return 
##
##    def SatelliteInfoUpdated(self, satelliteCount):
##        u'Reports the current satellite information when it is updated.'
##        #return 
##
##    def PositionUpdated(self, position, estimate):
##        u"Reports the current position when it is updated. 'estimate' is true if the signal is lost and the position is estimated."
##        #return 
##

class ImageServerIdentifyResult(CoClass):
    u'An Image Server Identify Result object.'
    _reg_clsid_ = GUID('{219BF1AD-A158-40C5-A5EC-FB63BD91BE0C}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
ImageServerIdentifyResult._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IImageServerIdentifyResult, IImageServerIdentifyResultEdit, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]

IDataGraphTAxisProperties._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates whether the graph axis is visible.')], HRESULT, 'Visible',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'b' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the graph axis is visible.')], HRESULT, 'Visible',
              ( ['in'], VARIANT_BOOL, 'b' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the graph axis has logarithmic scale.')], HRESULT, 'Logarithmic',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'b' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the graph axis has logarithmic scale.')], HRESULT, 'Logarithmic',
              ( ['in'], VARIANT_BOOL, 'b' )),
    COMMETHOD(['propget', helpstring(u'Title of an axis.')], HRESULT, 'Title',
              ( ['retval', 'out'], POINTER(BSTR), 'Title' )),
    COMMETHOD(['propput', helpstring(u'Title of an axis.')], HRESULT, 'Title',
              ( ['in'], BSTR, 'Title' )),
    COMMETHOD(['propget', helpstring(u'Format string for axis value labels.')], HRESULT, 'ValueFormat',
              ( ['retval', 'out'], POINTER(BSTR), 'Format' )),
    COMMETHOD(['propput', helpstring(u'Format string for axis value labels.')], HRESULT, 'ValueFormat',
              ( ['in'], BSTR, 'Format' )),
    COMMETHOD(['propget', helpstring(u'Format string for axis date/time labels.')], HRESULT, 'DateTimeFormat',
              ( ['retval', 'out'], POINTER(BSTR), 'Format' )),
    COMMETHOD(['propput', helpstring(u'Format string for axis date/time labels.')], HRESULT, 'DateTimeFormat',
              ( ['in'], BSTR, 'Format' )),
    COMMETHOD(['propget', helpstring(u"Indicates whether the graph axis calculates it's minimum.")], HRESULT, 'AutomaticMinimum',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'b' )),
    COMMETHOD(['propput', helpstring(u"Indicates whether the graph axis calculates it's minimum.")], HRESULT, 'AutomaticMinimum',
              ( ['in'], VARIANT_BOOL, 'b' )),
    COMMETHOD(['propget', helpstring(u"Indicates whether the graph axis calculates it's maximum.")], HRESULT, 'AutomaticMaximum',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'b' )),
    COMMETHOD(['propput', helpstring(u"Indicates whether the graph axis calculates it's maximum.")], HRESULT, 'AutomaticMaximum',
              ( ['in'], VARIANT_BOOL, 'b' )),
    COMMETHOD(['propget', helpstring(u'Minimum of the axis.')], HRESULT, 'Minimum',
              ( ['retval', 'out'], POINTER(VARIANT), 'var' )),
    COMMETHOD(['propput', helpstring(u'Minimum of the axis.')], HRESULT, 'Minimum',
              ( ['in'], VARIANT, 'var' )),
    COMMETHOD(['propget', helpstring(u'Maximum of the axis.')], HRESULT, 'Maximum',
              ( ['retval', 'out'], POINTER(VARIANT), 'var' )),
    COMMETHOD(['propput', helpstring(u'Maximum of the axis.')], HRESULT, 'Maximum',
              ( ['in'], VARIANT, 'var' )),
    COMMETHOD(['propget', helpstring(u'Indicates axis orientation.')], HRESULT, 'IsHorizontal',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'b' )),
]
################################################################
## code template for IDataGraphTAxisProperties implementation
##class IDataGraphTAxisProperties_Impl(object):
##    def _get(self):
##        u'Format string for axis value labels.'
##        #return Format
##    def _set(self, Format):
##        u'Format string for axis value labels.'
##    ValueFormat = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def IsHorizontal(self):
##        u'Indicates axis orientation.'
##        #return b
##
##    def _get(self):
##        u'Title of an axis.'
##        #return Title
##    def _set(self, Title):
##        u'Title of an axis.'
##    Title = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u"Indicates whether the graph axis calculates it's maximum."
##        #return b
##    def _set(self, b):
##        u"Indicates whether the graph axis calculates it's maximum."
##    AutomaticMaximum = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Maximum of the axis.'
##        #return var
##    def _set(self, var):
##        u'Maximum of the axis.'
##    Maximum = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether the graph axis is visible.'
##        #return b
##    def _set(self, b):
##        u'Indicates whether the graph axis is visible.'
##    Visible = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Minimum of the axis.'
##        #return var
##    def _set(self, var):
##        u'Minimum of the axis.'
##    Minimum = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Format string for axis date/time labels.'
##        #return Format
##    def _set(self, Format):
##        u'Format string for axis date/time labels.'
##    DateTimeFormat = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u"Indicates whether the graph axis calculates it's minimum."
##        #return b
##    def _set(self, b):
##        u"Indicates whether the graph axis calculates it's minimum."
##    AutomaticMinimum = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether the graph axis has logarithmic scale.'
##        #return b
##    def _set(self, b):
##        u'Indicates whether the graph axis has logarithmic scale.'
##    Logarithmic = property(_get, _set, doc = _set.__doc__)
##

IRelatedRecordGroups._methods_ = [
    COMMETHOD(['propget', helpstring(u'The map layer info count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The RelatedRecordGroup at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IRelatedRecordGroup)), 'RelatedRecordGroup' )),
    COMMETHOD([helpstring(u'Removes the RelatedRecordGroup at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all map layer infos.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Adds a RelatedRecordGroup.')], HRESULT, 'Add',
              ( ['in'], POINTER(IRelatedRecordGroup), 'RelatedRecordGroup' )),
    COMMETHOD([helpstring(u'Adds a map layer info at the specified position.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(IRelatedRecordGroup), 'RelatedRecordGroup' )),
]
################################################################
## code template for IRelatedRecordGroups implementation
##class IRelatedRecordGroups_Impl(object):
##    @property
##    def Count(self):
##        u'The map layer info count.'
##        #return Count
##
##    def Insert(self, Index, RelatedRecordGroup):
##        u'Adds a map layer info at the specified position.'
##        #return 
##
##    def Remove(self, Index):
##        u'Removes the RelatedRecordGroup at the specified position.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'The RelatedRecordGroup at the specified position.'
##        #return RelatedRecordGroup
##
##    def RemoveAll(self):
##        u'Removes all map layer infos.'
##        #return 
##
##    def Add(self, RelatedRecordGroup):
##        u'Adds a RelatedRecordGroup.'
##        #return 
##

class IElementEditVerticesOperation(IElementOperation):
    _case_insensitive_ = True
    u'Provides access to members that control Element Edit Vertices Operation.'
    _iid_ = GUID('{BF4FAD52-798A-11D2-A2D4-080009B6F22B}')
    _idlflags_ = ['oleautomation']
IElementEditVerticesOperation._methods_ = [
    COMMETHOD(['propput', helpstring(u'The new geometry.')], HRESULT, 'Geometry',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'rhs' )),
]
################################################################
## code template for IElementEditVerticesOperation implementation
##class IElementEditVerticesOperation_Impl(object):
##    def _set(self, rhs):
##        u'The new geometry.'
##    Geometry = property(fset = _set, doc = _set.__doc__)
##

IFeatureSelection._methods_ = [
    COMMETHOD(['propget', helpstring(u'The selected set of features.')], HRESULT, 'SelectionSet',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ISelectionSet)), 'SelectionSet' )),
    COMMETHOD(['propputref', helpstring(u'The selected set of features.')], HRESULT, 'SelectionSet',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ISelectionSet), 'SelectionSet' )),
    COMMETHOD(['propget', helpstring(u'Combination method for the selection.')], HRESULT, 'CombinationMethod',
              ( ['retval', 'out'], POINTER(esriSelectionResultEnum), 'Method' )),
    COMMETHOD(['propput', helpstring(u'Combination method for the selection.')], HRESULT, 'CombinationMethod',
              ( ['in'], esriSelectionResultEnum, 'Method' )),
    COMMETHOD(['propget', helpstring(u'Buffer distance used for the selection.')], HRESULT, 'BufferDistance',
              ( ['retval', 'out'], POINTER(c_double), 'Distance' )),
    COMMETHOD(['propput', helpstring(u'Buffer distance used for the selection.')], HRESULT, 'BufferDistance',
              ( ['in'], c_double, 'Distance' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the selected set of features is drawn using the SelectionSymbol.')], HRESULT, 'SetSelectionSymbol',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'setSymbol' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the selected set of features is drawn using the SelectionSymbol.')], HRESULT, 'SetSelectionSymbol',
              ( ['in'], VARIANT_BOOL, 'setSymbol' )),
    COMMETHOD(['propget', helpstring(u'Selection color.  (used when SetSelectionSymbol = FALSE).')], HRESULT, 'SelectionColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'Color' )),
    COMMETHOD(['propputref', helpstring(u'Selection color.  (used when SetSelectionSymbol = FALSE).')], HRESULT, 'SelectionColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'Color' )),
    COMMETHOD(['propget', helpstring(u'Selection symbol.')], HRESULT, 'SelectionSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol)), 'Symbol' )),
    COMMETHOD(['propputref', helpstring(u'Selection symbol.')], HRESULT, 'SelectionSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol), 'Symbol' )),
    COMMETHOD([helpstring(u'Adds a feature to the selection set.')], HRESULT, 'Add',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeature), 'Feature' )),
    COMMETHOD([helpstring(u'Selects features based upon the specifed criteria and combination method.')], HRESULT, 'SelectFeatures',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'Filter' ),
              ( ['in'], esriSelectionResultEnum, 'Method' ),
              ( ['in'], VARIANT_BOOL, 'justOne' )),
    COMMETHOD([helpstring(u'Clears the selection.')], HRESULT, 'Clear'),
    COMMETHOD([helpstring(u'Fires the features layer update event. Required when SelectionSet changes.')], HRESULT, 'SelectionChanged'),
]
################################################################
## code template for IFeatureSelection implementation
##class IFeatureSelection_Impl(object):
##    def Clear(self):
##        u'Clears the selection.'
##        #return 
##
##    def SelectFeatures(self, Filter, Method, justOne):
##        u'Selects features based upon the specifed criteria and combination method.'
##        #return 
##
##    def SelectionSymbol(self, Symbol):
##        u'Selection symbol.'
##        #return 
##
##    def SelectionChanged(self):
##        u'Fires the features layer update event. Required when SelectionSet changes.'
##        #return 
##
##    def _get(self):
##        u'Indicates if the selected set of features is drawn using the SelectionSymbol.'
##        #return setSymbol
##    def _set(self, setSymbol):
##        u'Indicates if the selected set of features is drawn using the SelectionSymbol.'
##    SetSelectionSymbol = property(_get, _set, doc = _set.__doc__)
##
##    def Add(self, Feature):
##        u'Adds a feature to the selection set.'
##        #return 
##
##    def _get(self):
##        u'Buffer distance used for the selection.'
##        #return Distance
##    def _set(self, Distance):
##        u'Buffer distance used for the selection.'
##    BufferDistance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Combination method for the selection.'
##        #return Method
##    def _set(self, Method):
##        u'Combination method for the selection.'
##    CombinationMethod = property(_get, _set, doc = _set.__doc__)
##
##    def SelectionSet(self, SelectionSet):
##        u'The selected set of features.'
##        #return 
##
##    def SelectionColor(self, Color):
##        u'Selection color.  (used when SetSelectionSymbol = FALSE).'
##        #return 
##

class RealTimeFeedSimulator(CoClass):
    u'The real-time feed simulator object.'
    _reg_clsid_ = GUID('{E10C2BAC-6B84-49E5-B50D-28E2F07DA2BE}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
RealTimeFeedSimulator._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRealTimeFeed, IRealTimeFeedSimulator, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IConnectionPointContainer]
RealTimeFeedSimulator._outgoing_interfaces_ = [IRealTimeFeedEvents]

IBasemapSubLayer._methods_ = [
    COMMETHOD(['propget', helpstring(u'Gets the contained layer.')], HRESULT, 'Layer',
              ( ['retval', 'out'], POINTER(POINTER(ILayer)), 'Layer' )),
    COMMETHOD([helpstring(u'Indicates the conversion status of a given layer.')], HRESULT, 'GetConversionStatus',
              ( ['retval', 'out'], POINTER(esriConversionStatus), 'Status' )),
]
################################################################
## code template for IBasemapSubLayer implementation
##class IBasemapSubLayer_Impl(object):
##    def GetConversionStatus(self):
##        u'Indicates the conversion status of a given layer.'
##        #return Status
##
##    @property
##    def Layer(self):
##        u'Gets the contained layer.'
##        #return Layer
##

IConvertLabelsToAnnotation._methods_ = [
    COMMETHOD([helpstring(u'Call this method first to initialize the converter.')], HRESULT, 'Initialize',
              ( ['in'], POINTER(IMap), 'pMap' ),
              ( ['in'], esriAnnotationStorageType, 'storageType' ),
              ( ['in'], esriLabelWhichFeatures, 'whichFeatures' ),
              ( ['in'], VARIANT_BOOL, 'generateUnplacedAnnotation' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' ),
              ( ['in', 'optional'], POINTER(IAnnotationErrorEvents), 'pAnnotationErrorEvents', 0 )),
    COMMETHOD([helpstring(u'Call this method for each feature layer be converted to annotation.')], HRESULT, 'AddFeatureLayer',
              ( ['in'], POINTER(IFeatureLayer), 'pFeatureLayer' ),
              ( ['in'], BSTR, 'annoLayerName' ),
              ( ['in', 'optional'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureWorkspace), 'pFeatureWorkspace', 0 ),
              ( ['in', 'optional'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureDataset), 'pFeatureDataset', 0 ),
              ( ['in', 'optional'], VARIANT_BOOL, 'FeatureLinked', False ),
              ( ['in', 'optional'], VARIANT_BOOL, 'appendMode', False ),
              ( ['in', 'optional'], VARIANT_BOOL, 'RequireSymbolID', False ),
              ( ['in', 'optional'], VARIANT_BOOL, 'AutoCreate', False ),
              ( ['in', 'optional'], VARIANT_BOOL, 'autoUpdate', False ),
              ( ['in', 'optional'], BSTR, 'configKeyword', u'' )),
    COMMETHOD([helpstring(u'Convert labels to annotation.')], HRESULT, 'ConvertLabels'),
    COMMETHOD(['propget', helpstring(u'New database annotation layers created by the conversion process.')], HRESULT, 'AnnoLayers',
              ( ['retval', 'out'], POINTER(POINTER(IEnumLayer)), 'Layers' )),
    COMMETHOD(['propget', helpstring(u'Error information generated by the conversion process.')], HRESULT, 'ErrorInfo',
              ( ['retval', 'out'], POINTER(BSTR), 'info' )),
]
################################################################
## code template for IConvertLabelsToAnnotation implementation
##class IConvertLabelsToAnnotation_Impl(object):
##    def Initialize(self, pMap, storageType, whichFeatures, generateUnplacedAnnotation, pTrackCancel, pAnnotationErrorEvents):
##        u'Call this method first to initialize the converter.'
##        #return 
##
##    def ConvertLabels(self):
##        u'Convert labels to annotation.'
##        #return 
##
##    @property
##    def AnnoLayers(self):
##        u'New database annotation layers created by the conversion process.'
##        #return Layers
##
##    @property
##    def ErrorInfo(self):
##        u'Error information generated by the conversion process.'
##        #return info
##
##    def AddFeatureLayer(self, pFeatureLayer, annoLayerName, pFeatureWorkspace, pFeatureDataset, FeatureLinked, appendMode, RequireSymbolID, AutoCreate, autoUpdate, configKeyword):
##        u'Call this method for each feature layer be converted to annotation.'
##        #return 
##

IMapAutoExtentOptions._methods_ = [
    COMMETHOD(['propget', helpstring(u'The way in which the map extent of the frame is specified.')], HRESULT, 'AutoExtentType',
              ( ['retval', 'out'], POINTER(esriExtentTypeEnum), 'Type' )),
    COMMETHOD(['propput', helpstring(u'The way in which the map extent of the frame is specified.')], HRESULT, 'AutoExtentType',
              ( ['in'], esriExtentTypeEnum, 'Type' )),
    COMMETHOD(['propget', helpstring(u'The scale at which the map should be displayed.')], HRESULT, 'AutoExtentScale',
              ( ['retval', 'out'], POINTER(c_double), 'Scale' )),
    COMMETHOD(['propput', helpstring(u'The scale at which the map should be displayed.')], HRESULT, 'AutoExtentScale',
              ( ['in'], c_double, 'Scale' )),
    COMMETHOD(['propget', helpstring(u'The bounds of the map displayed by the frame.')], HRESULT, 'AutoExtentBounds',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'Bounds' )),
    COMMETHOD(['propput', helpstring(u'The bounds of the map displayed by the frame.')], HRESULT, 'AutoExtentBounds',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'Bounds' )),
    COMMETHOD(['propget', helpstring(u'Auto extent map.  Derive extent from the extent of another map. See esriExtentTypeEnum.')], HRESULT, 'AutoExtentMap',
              ( ['retval', 'out'], POINTER(POINTER(IMap)), 'Map' )),
    COMMETHOD(['propputref', helpstring(u'Auto extent map.  Derive extent from the extent of another map. See esriExtentTypeEnum.')], HRESULT, 'AutoExtentMap',
              ( ['in'], POINTER(IMap), 'Map' )),
    COMMETHOD(['propget', helpstring(u'Auto extent margin.  Specified in AutoExtentMarginUnits. See esriExtentTypeEnum.')], HRESULT, 'AutoExtentMargin',
              ( ['retval', 'out'], POINTER(c_double), 'margin' )),
    COMMETHOD(['propput', helpstring(u'Auto extent margin.  Specified in AutoExtentMarginUnits. See esriExtentTypeEnum.')], HRESULT, 'AutoExtentMargin',
              ( ['in'], c_double, 'margin' )),
    COMMETHOD(['propget', helpstring(u'Auto extent margin units. See esriExtentTypeEnum.')], HRESULT, 'AutoExtentMarginUnits',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits), 'Units' )),
    COMMETHOD(['propput', helpstring(u'Auto extent margin units. See esriExtentTypeEnum.')], HRESULT, 'AutoExtentMarginUnits',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits, 'Units' )),
    COMMETHOD(['propget', helpstring(u'Auto extent features. See esriExtentTypeEnum.')], HRESULT, 'AutoExtentLayer',
              ( ['retval', 'out'], POINTER(POINTER(IFeatureLayer)), 'Layer' )),
    COMMETHOD(['propputref', helpstring(u'Auto extent features. See esriExtentTypeEnum.')], HRESULT, 'AutoExtentLayer',
              ( ['in'], POINTER(IFeatureLayer), 'Layer' )),
    COMMETHOD(['propget', helpstring(u'Check if the map can be zoomed.')], HRESULT, 'LockedZoom',
              ( [], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propget', helpstring(u'Check if the map can be panned.')], HRESULT, 'LockedPan',
              ( [], POINTER(VARIANT_BOOL), 'flag' )),
]
################################################################
## code template for IMapAutoExtentOptions implementation
##class IMapAutoExtentOptions_Impl(object):
##    def _get(self):
##        u'The way in which the map extent of the frame is specified.'
##        #return Type
##    def _set(self, Type):
##        u'The way in which the map extent of the frame is specified.'
##    AutoExtentType = property(_get, _set, doc = _set.__doc__)
##
##    def AutoExtentLayer(self, Layer):
##        u'Auto extent features. See esriExtentTypeEnum.'
##        #return 
##
##    def _get(self):
##        u'Auto extent margin.  Specified in AutoExtentMarginUnits. See esriExtentTypeEnum.'
##        #return margin
##    def _set(self, margin):
##        u'Auto extent margin.  Specified in AutoExtentMarginUnits. See esriExtentTypeEnum.'
##    AutoExtentMargin = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Auto extent margin units. See esriExtentTypeEnum.'
##        #return Units
##    def _set(self, Units):
##        u'Auto extent margin units. See esriExtentTypeEnum.'
##    AutoExtentMarginUnits = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def LockedPan(self, flag):
##        u'Check if the map can be panned.'
##        #return 
##
##    def AutoExtentMap(self, Map):
##        u'Auto extent map.  Derive extent from the extent of another map. See esriExtentTypeEnum.'
##        #return 
##
##    def _get(self):
##        u'The scale at which the map should be displayed.'
##        #return Scale
##    def _set(self, Scale):
##        u'The scale at which the map should be displayed.'
##    AutoExtentScale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The bounds of the map displayed by the frame.'
##        #return Bounds
##    def _set(self, Bounds):
##        u'The bounds of the map displayed by the frame.'
##    AutoExtentBounds = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def LockedZoom(self, flag):
##        u'Check if the map can be zoomed.'
##        #return 
##

class ImageServerDownloadResult(CoClass):
    u'An Image Server Download Result object.'
    _reg_clsid_ = GUID('{33C20B51-FADF-4B22-943A-2287833B2AA4}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
ImageServerDownloadResult._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IImageServerDownloadResult, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]

class GpsFeed(CoClass):
    u'Used to connected to a GPS unit through the communication port, implements IRealTimeFeed, and fires events when the GPS location changes.'
    _reg_clsid_ = GUID('{419D9D0E-CED4-4FE0-8BE0-5A7C3DCCB214}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
GpsFeed._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRealTimeFeed, IGpsFeed, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IConnectionPointContainer]
GpsFeed._outgoing_interfaces_ = [IRealTimeFeedEvents]

class ImageServerDownloadResults(CoClass):
    u'A collection of Image Server Download Result objects.'
    _reg_clsid_ = GUID('{9189AE19-5053-4F5A-A5CD-388223BDE7FD}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
ImageServerDownloadResults._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IImageServerDownloadResults, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

IEllipseElement._methods_ = [
]
################################################################
## code template for IEllipseElement implementation
##class IEllipseElement_Impl(object):

IRasterRenderer._methods_ = [
    COMMETHOD([helpstring(u'Indicates if the raster can be rendered.')], HRESULT, 'CanRender',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'Raster' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pCanRender' )),
    COMMETHOD(['propputref', helpstring(u'Raster to be rendered.')], HRESULT, 'Raster',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'Raster' )),
    COMMETHOD(['propget', helpstring(u'Raster to be rendered.')], HRESULT, 'Raster',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster)), 'Raster' )),
    COMMETHOD([helpstring(u'Draws the raster on the display.')], HRESULT, 'Draw',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'Raster' ),
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriDrawPhase, 'DrawPhase' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'pDisplay' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the renderer requires updating.')], HRESULT, 'Updated',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pUpdated' )),
    COMMETHOD([helpstring(u'Updates the renderer for any changes that have been made.')], HRESULT, 'Update'),
    COMMETHOD([helpstring(u'Selects a raster as the current copy object. ')], HRESULT, 'Copy',
              ( ['in'], POINTER(IRasterRenderer), 'pSource' )),
    COMMETHOD(['propget', helpstring(u'Resampling method for displaying a raster.')], HRESULT, 'ResamplingType',
              ( ['retval', 'out'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.rstResamplingTypes), 'pResamplingType' )),
    COMMETHOD(['propput', helpstring(u'Resampling method for displaying a raster.')], HRESULT, 'ResamplingType',
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.rstResamplingTypes, 'pResamplingType' )),
    COMMETHOD(['propput', helpstring(u'Display resolution factor.  Factor value is expressed as a percentage between 0 and 100.')], HRESULT, 'DisplayResolutionFactor',
              ( ['in'], c_int, 'pnFactor' )),
    COMMETHOD(['propget', helpstring(u'Display resolution factor.  Factor value is expressed as a percentage between 0 and 100.')], HRESULT, 'DisplayResolutionFactor',
              ( ['retval', 'out'], POINTER(c_int), 'pnFactor' )),
]
################################################################
## code template for IRasterRenderer implementation
##class IRasterRenderer_Impl(object):
##    @property
##    def Raster(self, Raster):
##        u'Raster to be rendered.'
##        #return 
##
##    def Draw(self, Raster, DrawPhase, pDisplay, pTrackCancel):
##        u'Draws the raster on the display.'
##        #return 
##
##    def Copy(self, pSource):
##        u'Selects a raster as the current copy object. '
##        #return 
##
##    def _get(self):
##        u'Display resolution factor.  Factor value is expressed as a percentage between 0 and 100.'
##        #return pnFactor
##    def _set(self, pnFactor):
##        u'Display resolution factor.  Factor value is expressed as a percentage between 0 and 100.'
##    DisplayResolutionFactor = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Updated(self):
##        u'Indicates whether the renderer requires updating.'
##        #return pUpdated
##
##    def Update(self):
##        u'Updates the renderer for any changes that have been made.'
##        #return 
##
##    def _get(self):
##        u'Resampling method for displaying a raster.'
##        #return pResamplingType
##    def _set(self, pResamplingType):
##        u'Resampling method for displaying a raster.'
##    ResamplingType = property(_get, _set, doc = _set.__doc__)
##
##    def CanRender(self, Raster):
##        u'Indicates if the raster can be rendered.'
##        #return pCanRender
##

class GraphicsLayerScale(CoClass):
    u'An Esri graphics layer scale.'
    _reg_clsid_ = GUID('{85C3DAC6-6578-11D3-9FBA-00C04F6BC6A5}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
GraphicsLayerScale._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGraphicsLayerScale, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

ILocatorRectangle._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The map frame being referenced.')], HRESULT, 'MapFrame',
              ( ['in'], POINTER(IMapFrame), 'MapFrame' )),
    COMMETHOD(['propget', helpstring(u'The map frame being referenced.')], HRESULT, 'MapFrame',
              ( ['retval', 'out'], POINTER(POINTER(IMapFrame)), 'MapFrame' )),
    COMMETHOD(['propget', helpstring(u'The page border.')], HRESULT, 'Border',
              ( ['retval', 'out'], POINTER(POINTER(IBorder)), 'Border' )),
    COMMETHOD(['propput', helpstring(u'The page border.')], HRESULT, 'Border',
              ( ['in'], POINTER(IBorder), 'Border' )),
    COMMETHOD(['propget', helpstring(u'The page background.')], HRESULT, 'Background',
              ( ['retval', 'out'], POINTER(POINTER(IBackground)), 'Background' )),
    COMMETHOD(['propput', helpstring(u'The page background.')], HRESULT, 'Background',
              ( ['in'], POINTER(IBackground), 'Background' )),
    COMMETHOD(['propput', helpstring(u'The symbol used to render the leader line.')], HRESULT, 'LeaderSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'The symbol used to render the leader line.')], HRESULT, 'LeaderSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol)), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'Indicates if leader lines should be drawn.')], HRESULT, 'ShowLeader',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if leader lines should be drawn.')], HRESULT, 'ShowLeader',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD([helpstring(u'Returns the bounds of the locator.')], HRESULT, 'QueryBounds',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], POINTER(IMapFrame), 'Parent' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'Bounds' )),
    COMMETHOD([helpstring(u'Obsolete.  Use DrawExtent and DrawLeader instead.')], HRESULT, 'Draw',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], POINTER(IMapFrame), 'Parent' )),
]
################################################################
## code template for ILocatorRectangle implementation
##class ILocatorRectangle_Impl(object):
##    def Draw(self, Display, Parent):
##        u'Obsolete.  Use DrawExtent and DrawLeader instead.'
##        #return 
##
##    def _get(self):
##        u'The page border.'
##        #return Border
##    def _set(self, Border):
##        u'The page border.'
##    Border = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The symbol used to render the leader line.'
##        #return Symbol
##    def _set(self, Symbol):
##        u'The symbol used to render the leader line.'
##    LeaderSymbol = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if leader lines should be drawn.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if leader lines should be drawn.'
##    ShowLeader = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def MapFrame(self, MapFrame):
##        u'The map frame being referenced.'
##        #return 
##
##    def _get(self):
##        u'The page background.'
##        #return Background
##    def _set(self, Background):
##        u'The page background.'
##    Background = property(_get, _set, doc = _set.__doc__)
##
##    def QueryBounds(self, Display, Parent, Bounds):
##        u'Returns the bounds of the locator.'
##        #return 
##

IFeatureFindData2._methods_ = [
    COMMETHOD(['propget', helpstring(u'The feature.')], HRESULT, 'Feature',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeature)), 'ppFeature' )),
    COMMETHOD(['propget', helpstring(u'The layer.')], HRESULT, 'Layer',
              ( ['retval', 'out'], POINTER(POINTER(ILayer)), 'ppLayer' )),
    COMMETHOD(['propputref', helpstring(u'The feature.')], HRESULT, 'Feature',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeature), 'ppFeature' )),
    COMMETHOD(['propputref', helpstring(u'The layer.')], HRESULT, 'Layer',
              ( ['in'], POINTER(ILayer), 'ppLayer' )),
]
################################################################
## code template for IFeatureFindData2 implementation
##class IFeatureFindData2_Impl(object):
##    def Layer(self, ppLayer):
##        u'The layer.'
##        #return 
##
##    def Feature(self, ppFeature):
##        u'The feature.'
##        #return 
##

class MapServerLP(CoClass):
    u'Map Server LAN Proxy.'
    _reg_clsid_ = GUID('{1DACEE3C-4A1B-4024-9BCF-76BC47E765C9}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
MapServerLP._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._746F6817_89BB_4490_9829_83CA25FD505A_0_10_2.IAGSServerObject2, comtypes.gen._746F6817_89BB_4490_9829_83CA25FD505A_0_10_2.IAGSServerObject, IMapServer, IMapServer2, IMapServer3, IMapServer4, ITiledMapServer, ITiledMapServer2, ITiledMapServer3]

class MultiPatchElement(CoClass):
    u'The MultiPatch Graphics Element CoClass.'
    _reg_clsid_ = GUID('{E91AE5C9-2C16-11D4-80E2-00C04FA0ADF8}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
MultiPatchElement._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IElement, IElementProperties, IElementProperties2, IElementProperties3, IFillShapeElement, IGraphicElement, IBoundsProperties, comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ITransform2D, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

IMapClipOptions._methods_ = [
    COMMETHOD(['propget', helpstring(u'Method used to clip layers in map.')], HRESULT, 'ClipType',
              ( ['retval', 'out'], POINTER(esriMapClipType), 'Type' )),
    COMMETHOD(['propput', helpstring(u'Method used to clip layers in map.')], HRESULT, 'ClipType',
              ( ['in'], esriMapClipType, 'Type' )),
    COMMETHOD(['propget', helpstring(u'Sets or returns extended clip type data, i.e., other Map when type is esriMapClipMapExtent.')], HRESULT, 'ClipData',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'Data' )),
    COMMETHOD(['propput', helpstring(u'Sets or returns extended clip type data, i.e., other Map when type is esriMapClipMapExtent.')], HRESULT, 'ClipData',
              ( ['in'], POINTER(IUnknown), 'Data' )),
    COMMETHOD(['propget', helpstring(u'A shape that layers in the map are clipped to.')], HRESULT, 'ClipGeometry',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry)), 'ClipGeometry' )),
    COMMETHOD(['propput', helpstring(u'A shape that layers in the map are clipped to.')], HRESULT, 'ClipGeometry',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'ClipGeometry' )),
    COMMETHOD(['propget', helpstring(u'An optional border drawn around ClipGeometry.')], HRESULT, 'ClipBorder',
              ( ['retval', 'out'], POINTER(POINTER(IBorder)), 'Border' )),
    COMMETHOD(['propput', helpstring(u'An optional border drawn around ClipGeometry.')], HRESULT, 'ClipBorder',
              ( ['in'], POINTER(IBorder), 'Border' )),
    COMMETHOD(['propget', helpstring(u'Sets or returns the set of layers that will be excluded from clipping.')], HRESULT, 'ClipFilter',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISet)), 'Layers' )),
    COMMETHOD(['propput', helpstring(u'Sets or returns the set of layers that will be excluded from clipping.')], HRESULT, 'ClipFilter',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISet), 'Layers' )),
    COMMETHOD(['propput', helpstring(u'Clip grids and grticules to data extent')], HRESULT, 'ClipGridAndGraticules',
              ( ['in'], VARIANT_BOOL, 'pClipGridAndGraticules' )),
    COMMETHOD(['propget', helpstring(u'Clip grids and grticules to data extent')], HRESULT, 'ClipGridAndGraticules',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pClipGridAndGraticules' )),
]
################################################################
## code template for IMapClipOptions implementation
##class IMapClipOptions_Impl(object):
##    def _get(self):
##        u'Sets or returns extended clip type data, i.e., other Map when type is esriMapClipMapExtent.'
##        #return Data
##    def _set(self, Data):
##        u'Sets or returns extended clip type data, i.e., other Map when type is esriMapClipMapExtent.'
##    ClipData = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'A shape that layers in the map are clipped to.'
##        #return ClipGeometry
##    def _set(self, ClipGeometry):
##        u'A shape that layers in the map are clipped to.'
##    ClipGeometry = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'An optional border drawn around ClipGeometry.'
##        #return Border
##    def _set(self, Border):
##        u'An optional border drawn around ClipGeometry.'
##    ClipBorder = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Clip grids and grticules to data extent'
##        #return pClipGridAndGraticules
##    def _set(self, pClipGridAndGraticules):
##        u'Clip grids and grticules to data extent'
##    ClipGridAndGraticules = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Method used to clip layers in map.'
##        #return Type
##    def _set(self, Type):
##        u'Method used to clip layers in map.'
##    ClipType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Sets or returns the set of layers that will be excluded from clipping.'
##        #return Layers
##    def _set(self, Layers):
##        u'Sets or returns the set of layers that will be excluded from clipping.'
##    ClipFilter = property(_get, _set, doc = _set.__doc__)
##

class FDOGraphicsSublayer(CoClass):
    u'A collection of properties for an annotation sublayer layer (feature data object graphics sublayer).'
    _reg_clsid_ = GUID('{4ABA3851-BC3A-43C2-8FBE-93A65AD91E83}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
FDOGraphicsSublayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IAnnotationSublayer, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, ILayer, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeoDataset, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayAdmin, ILayerDrawingPhase, ILayerGeneralProperties]

class RasterThumbnailBuilder(CoClass):
    u'A helper class for converting a Raster to an in-memory raster thumbnail.'
    _reg_clsid_ = GUID('{41431F16-46FE-448E-A049-BA48619D1649}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
RasterThumbnailBuilder._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._8F0541A3_D5BE_4B3F_A8D9_062D5579E19B_0_10_2.IRasterThumbnailBuilder, IRenderedThumbnailBuilder, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class SubtypeInfo(CoClass):
    u'A colcass that contains Subtype information including Domains.'
    _reg_clsid_ = GUID('{C6E6B470-3B4D-457C-894C-46717CF061EB}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
SubtypeInfo._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ISubtypeInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersionSupportGEN]

class SubtypeInfos(CoClass):
    u'A colcass that contains Array of Subtype information.'
    _reg_clsid_ = GUID('{472EF51C-BC89-4915-AE9B-0A53F74D3F74}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
SubtypeInfos._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ISubtypeInfos, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

IMapDescriptions._methods_ = [
    COMMETHOD(['propget', helpstring(u'The map description count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The map description at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IMapDescription)), 'mapDesc' )),
    COMMETHOD([helpstring(u'Removes the map description at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all map descriptions.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Adds a map description.')], HRESULT, 'Add',
              ( ['in'], POINTER(IMapDescription), 'mapDesc' )),
    COMMETHOD([helpstring(u'Adds a map description at the specified position.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(IMapDescription), 'mapDesc' )),
]
################################################################
## code template for IMapDescriptions implementation
##class IMapDescriptions_Impl(object):
##    @property
##    def Count(self):
##        u'The map description count.'
##        #return Count
##
##    def Insert(self, Index, mapDesc):
##        u'Adds a map description at the specified position.'
##        #return 
##
##    def Remove(self, Index):
##        u'Removes the map description at the specified position.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'The map description at the specified position.'
##        #return mapDesc
##
##    def RemoveAll(self):
##        u'Removes all map descriptions.'
##        #return 
##
##    def Add(self, mapDesc):
##        u'Adds a map description.'
##        #return 
##

class ClassBreaksRenderer(CoClass):
    u'A renderer that can be used to draw graduated color (choropleth) and graduated symbol maps.'
    _reg_clsid_ = GUID('{AE5F7EA2-8B48-11D0-8356-080009B996CC}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
ClassBreaksRenderer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IClassBreaksRenderer, IFeatureRenderer, IFeatureRendererUpdate, ILevelRenderer, ILegendInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, IClassBreaksUIProperties, IClassBreaksUIProperties2, IDataSampling, IDataExclusion, IDataExclusion2, IRotationRenderer, IRotationRenderer2, ISizeRenderer, IDataNormalization, IBarrierProperties2, ILookupSymbol, IRendererClasses, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, IExportSupport, ILookupLegendClass]

IDocumentInfo3._methods_ = [
    COMMETHOD(['propget', helpstring(u'The access constraints of document info.')], HRESULT, 'AccessConstraints',
              ( ['retval', 'out'], POINTER(BSTR), 'pConstraints' )),
    COMMETHOD(['propput', helpstring(u'The access constraints of document info.')], HRESULT, 'AccessConstraints',
              ( ['in'], BSTR, 'pConstraints' )),
    COMMETHOD(['propget', helpstring(u'The thumbnail of document info.')], HRESULT, 'Thumbnail',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IPicture)), 'ppThumbnail' )),
    COMMETHOD(['propput', helpstring(u'The thumbnail of document info.')], HRESULT, 'Thumbnail',
              ( ['in'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IPicture), 'ppThumbnail' )),
]
################################################################
## code template for IDocumentInfo3 implementation
##class IDocumentInfo3_Impl(object):
##    def _get(self):
##        u'The access constraints of document info.'
##        #return pConstraints
##    def _set(self, pConstraints):
##        u'The access constraints of document info.'
##    AccessConstraints = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The thumbnail of document info.'
##        #return ppThumbnail
##    def _set(self, ppThumbnail):
##        u'The thumbnail of document info.'
##    Thumbnail = property(_get, _set, doc = _set.__doc__)
##

IFeatureIndex._methods_ = [
    COMMETHOD(['propputref', helpstring(u'FeatureClass to index.')], HRESULT, 'FeatureClass',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClass), 'rhs' )),
    COMMETHOD(['propputref', helpstring(u'Cursor on feature class, to reduce the number of feature indexed (optional).')], HRESULT, 'FeatureCursor',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureCursor), 'rhs' )),
    COMMETHOD([helpstring(u'Creates index.')], HRESULT, 'Index',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'pQueryingGeometryFullExtent' )),
]
################################################################
## code template for IFeatureIndex implementation
##class IFeatureIndex_Impl(object):
##    def FeatureCursor(self, rhs):
##        u'Cursor on feature class, to reduce the number of feature indexed (optional).'
##        #return 
##
##    def FeatureClass(self, rhs):
##        u'FeatureClass to index.'
##        #return 
##
##    def Index(self, pTrackCancel, pQueryingGeometryFullExtent):
##        u'Creates index.'
##        #return 
##

class EngineNetworkLayerFactory(CoClass):
    u'The factory used to create NetworkLayers.'
    _reg_clsid_ = GUID('{8CA3F708-1043-483B-9F79-72762F84E61E}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
EngineNetworkLayerFactory._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILayerFactory]

class DefaultNetworkLayerSymbology(CoClass):
    u'The default network layer symbolizer that generates symbology for network layers.'
    _reg_clsid_ = GUID('{AB25AF95-7780-444D-8364-E5DF7DBBA75D}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
DefaultNetworkLayerSymbology._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, INetworkLayerSymbology]

IMapExtent._methods_ = [
    COMMETHOD(['propput', helpstring(u'The geographic extent of the map.')], HRESULT, 'Extent',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'rhs' )),
]
################################################################
## code template for IMapExtent implementation
##class IMapExtent_Impl(object):
##    def _set(self, rhs):
##        u'The geographic extent of the map.'
##    Extent = property(fset = _set, doc = _set.__doc__)
##

class ILocatedNetworkTrafficValue(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to traffic information for the current element id.'
    _iid_ = GUID('{7313CFA8-4E52-4880-88A5-8985FB75F6D1}')
    _idlflags_ = ['oleautomation']
ILocatedNetworkTrafficValue._methods_ = [
    COMMETHOD([helpstring(u'Retrieves the traffic speed ratio and traffic support status for the specified direction of the current element id.')], HRESULT, 'GetTrafficValue',
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriNetworkEdgeDirection, 'direction' ),
              ( ['out'], POINTER(VARIANT_BOOL), 'supportsTraffic' ),
              ( ['out'], POINTER(VARIANT_BOOL), 'supportsRealTimeValue' ),
              ( ['out'], POINTER(VARIANT_BOOL), 'hasRealTimeValue' ),
              ( ['out'], POINTER(c_double), 'attributeValueRatio' )),
]
################################################################
## code template for ILocatedNetworkTrafficValue implementation
##class ILocatedNetworkTrafficValue_Impl(object):
##    def GetTrafficValue(self, direction):
##        u'Retrieves the traffic speed ratio and traffic support status for the specified direction of the current element id.'
##        #return supportsTraffic, supportsRealTimeValue, hasRealTimeValue, attributeValueRatio
##

class DimensionFeature(CoClass):
    u'Esri Dimension Feature class.'
    _reg_clsid_ = GUID('{496764FC-E0C9-11D3-80CE-00C04F601565}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
DimensionFeature._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRowBuffer, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRow, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRowEdit, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRowEvents, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IValidate, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRowSubtypes, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IObject, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRelatedObjectEvents, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeature, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureBuffer, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureDraw, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureEdit, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureEdit2, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureChanges, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureEvents, IDimensionFeature, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRowChanges, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRowCompare, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureSimplify, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureSimplify2, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureProject]

ISimpleNetworkRenderer._methods_ = [
    COMMETHOD(['propget', helpstring(u'The symbol used to render elements.')], HRESULT, 'Symbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol)), 'Symbol' )),
    COMMETHOD(['propputref', helpstring(u'The symbol used to render elements.')], HRESULT, 'Symbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol), 'Symbol' )),
    COMMETHOD(['propget', helpstring(u'The descriptive symbol text.')], HRESULT, 'Label',
              ( ['retval', 'out'], POINTER(BSTR), 'Label' )),
    COMMETHOD(['propput', helpstring(u'The descriptive symbol text.')], HRESULT, 'Label',
              ( ['in'], BSTR, 'Label' )),
    COMMETHOD(['propget', helpstring(u'The description for the label.')], HRESULT, 'Description',
              ( ['retval', 'out'], POINTER(BSTR), 'Text' )),
    COMMETHOD(['propput', helpstring(u'The description for the label.')], HRESULT, 'Description',
              ( ['in'], BSTR, 'Text' )),
]
################################################################
## code template for ISimpleNetworkRenderer implementation
##class ISimpleNetworkRenderer_Impl(object):
##    def Symbol(self, Symbol):
##        u'The symbol used to render elements.'
##        #return 
##
##    def _get(self):
##        u'The description for the label.'
##        #return Text
##    def _set(self, Text):
##        u'The description for the label.'
##    Description = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The descriptive symbol text.'
##        #return Label
##    def _set(self, Label):
##        u'The descriptive symbol text.'
##    Label = property(_get, _set, doc = _set.__doc__)
##

ILayerInfo._methods_ = [
    COMMETHOD(['propget', helpstring(u'Small image that represents the layer.')], HRESULT, 'SmallImage',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE), 'hBitmap' )),
    COMMETHOD(['propget', helpstring(u'Small image that represents the layer when it is selected.')], HRESULT, 'SmallSelectedImage',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE), 'hBitmap' )),
    COMMETHOD(['propget', helpstring(u'Large image that represents the layer.')], HRESULT, 'LargeImage',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE), 'hBitmap' )),
    COMMETHOD(['propget', helpstring(u'Large image that represents the layer when it is selected.')], HRESULT, 'LargeSelectedImage',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE), 'hBitmap' )),
]
################################################################
## code template for ILayerInfo implementation
##class ILayerInfo_Impl(object):
##    @property
##    def SmallSelectedImage(self):
##        u'Small image that represents the layer when it is selected.'
##        #return hBitmap
##
##    @property
##    def LargeSelectedImage(self):
##        u'Large image that represents the layer when it is selected.'
##        #return hBitmap
##
##    @property
##    def LargeImage(self):
##        u'Large image that represents the layer.'
##        #return hBitmap
##
##    @property
##    def SmallImage(self):
##        u'Small image that represents the layer.'
##        #return hBitmap
##

class FieldDomainInfo(CoClass):
    u'A colcass that contains Field Domain information including Default Value.'
    _reg_clsid_ = GUID('{5D908CBF-20D9-455B-A2B6-8D6B7A566ED5}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
FieldDomainInfo._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IFieldDomainInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersionSupportGEN]

class ImageResults(CoClass):
    u'A coclass that contains Array of Image Result coclasses.'
    _reg_clsid_ = GUID('{C5055A69-17CD-4E4C-8E06-AF5A6798AC0B}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
ImageResults._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IImageResults, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class TopologyLayer(CoClass):
    u'A collection of properties for a topology layer.'
    _reg_clsid_ = GUID('{DE98BAD5-135E-4B36-9653-57B5513FB7B2}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
TopologyLayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILayer, IDataLayer, IDataLayer2, ITopologyLayer, ITopologyErrorSelection, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeoDataset, ILayerDrawingProperties, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, ILegendInfo, ILayerPosition, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayAdmin, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayFilterManager, ILayerEffects, ILayerInfo, IPublishLayer]

class FeatureCache(CoClass):
    u'A cache of features in memory for a particular spatial extent.'
    _reg_clsid_ = GUID('{A802BA70-D947-11D1-8484-0000F875B9C6}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
FeatureCache._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IFeatureCache, IFeatureCache2]

class FieldDomainInfos(CoClass):
    u'A colcass that contains Array of Field Domain information.'
    _reg_clsid_ = GUID('{2AA03FAD-ECE0-437C-9D1D-37F7BD88BBCF}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
FieldDomainInfos._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IFieldDomainInfos, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

INetworkRenderer._methods_ = [
    COMMETHOD([helpstring(u'Draws the network dataset.')], HRESULT, 'Draw',
              ( ['in'], POINTER(INetworkLayer), 'Layer' ),
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriDrawPhase, 'DrawPhase' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'TrackCancel' )),
    COMMETHOD([helpstring(u'Indicates if the renderer can draw.')], HRESULT, 'CanRender',
              ( ['in'], POINTER(INetworkLayer), 'Layer' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'CanRender' )),
    COMMETHOD(['propget', helpstring(u'The descriptive name of a renderer.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'The descriptive name of a renderer.')], HRESULT, 'Name',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'Indicates if renderer uses the specified draw phase.')], HRESULT, 'RenderPhase',
              ( [], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriDrawPhase, 'DrawPhase' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'result' )),
    COMMETHOD(['propget', helpstring(u'The type of the network renderer.')], HRESULT, 'RendererType',
              ( ['retval', 'out'], POINTER(esriNetworkRendererType), 'Type' )),
    COMMETHOD(['propput', helpstring(u'The type of the network renderer.')], HRESULT, 'RendererType',
              ( ['in'], esriNetworkRendererType, 'Type' )),
]
################################################################
## code template for INetworkRenderer implementation
##class INetworkRenderer_Impl(object):
##    def _get(self):
##        u'The type of the network renderer.'
##        #return Type
##    def _set(self, Type):
##        u'The type of the network renderer.'
##    RendererType = property(_get, _set, doc = _set.__doc__)
##
##    def Draw(self, Layer, DrawPhase, Display, TrackCancel):
##        u'Draws the network dataset.'
##        #return 
##
##    def CanRender(self, Layer, Display):
##        u'Indicates if the renderer can draw.'
##        #return CanRender
##
##    def _get(self):
##        u'The descriptive name of a renderer.'
##        #return Name
##    def _set(self, Name):
##        u'The descriptive name of a renderer.'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def RenderPhase(self, DrawPhase):
##        u'Indicates if renderer uses the specified draw phase.'
##        #return result
##

class LabelClassDescription(CoClass):
    u'Lable Class Description coclass.'
    _reg_clsid_ = GUID('{602631A1-C111-4AA1-8063-7699C003792C}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
LabelClassDescription._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILabelClassDescription, ILabelClassDescription2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersionSupportGEN]

class GraphicsSubLayer(CoClass):
    u'Graphic sublayer handed back by the composite graphics layer.'
    _reg_clsid_ = GUID('{D3A9D37D-EC3C-40C7-87B6-7057AEB605F2}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
GraphicsSubLayer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IConnectionPointContainer, ILayer, IGraphicsLayer, IGraphicsLayerScale, IGraphicsContainer, IBarrierProperties, IBarrierProperties2, ILayerEvents, ILayerGeneralProperties, ILayerInfo]

ITableIdentities._methods_ = [
    COMMETHOD(['propget'], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget'], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(ITableIdentity)), 'TableIdentity' )),
    COMMETHOD([], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([], HRESULT, 'RemoveAll'),
    COMMETHOD([], HRESULT, 'Add',
              ( ['in'], POINTER(ITableIdentity), 'TableIdentity' )),
    COMMETHOD([], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(ITableIdentity), 'TableIdentity' )),
]
################################################################
## code template for ITableIdentities implementation
##class ITableIdentities_Impl(object):
##    @property
##    def Count(self):
##        '-no docstring-'
##        #return Count
##
##    def Insert(self, Index, TableIdentity):
##        '-no docstring-'
##        #return 
##
##    def Remove(self, Index):
##        '-no docstring-'
##        #return 
##
##    @property
##    def Element(self, Index):
##        '-no docstring-'
##        #return TableIdentity
##
##    def RemoveAll(self):
##        '-no docstring-'
##        #return 
##
##    def Add(self, TableIdentity):
##        '-no docstring-'
##        #return 
##

class EngineTopologyLayerFactory(CoClass):
    u'A factory for creating topology layers.'
    _reg_clsid_ = GUID('{E8E95A26-4CA0-4C9B-9026-9C3355A3F148}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
EngineTopologyLayerFactory._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILayerFactory]

IWMSMapLayer._methods_ = [
    COMMETHOD([helpstring(u'Clears the cache of images downloaded from the WMS server for drawing.')], HRESULT, 'ClearDrawCache'),
    COMMETHOD(['propget', helpstring(u'Background color for the WMS Map Layer image.')], HRESULT, 'BackgroundColor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor)), 'ppColor' )),
    COMMETHOD(['propput', helpstring(u'Background color for the WMS Map Layer image.')], HRESULT, 'BackgroundColor',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColor), 'ppColor' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to make the background of the WMS Map Layer image transparent.')], HRESULT, 'TransparentBackground',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'transparent' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to make the background of the WMS Map Layer image transparent.')], HRESULT, 'TransparentBackground',
              ( ['in'], VARIANT_BOOL, 'transparent' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether transparency is suppported by the server.')], HRESULT, 'ServerSupportsTransparency',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'transparent' )),
    COMMETHOD(['propputref', helpstring(u'Associated WMSServiceDescription.')], HRESULT, 'WMSServiceDescription',
              ( ['in'], POINTER(comtypes.gen._746F6817_89BB_4490_9829_83CA25FD505A_0_10_2.IWMSServiceDescription), 'rhs' )),
]
################################################################
## code template for IWMSMapLayer implementation
##class IWMSMapLayer_Impl(object):
##    @property
##    def ServerSupportsTransparency(self):
##        u'Indicates whether transparency is suppported by the server.'
##        #return transparent
##
##    def ClearDrawCache(self):
##        u'Clears the cache of images downloaded from the WMS server for drawing.'
##        #return 
##
##    def _get(self):
##        u'Indicates whether to make the background of the WMS Map Layer image transparent.'
##        #return transparent
##    def _set(self, transparent):
##        u'Indicates whether to make the background of the WMS Map Layer image transparent.'
##    TransparentBackground = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Background color for the WMS Map Layer image.'
##        #return ppColor
##    def _set(self, ppColor):
##        u'Background color for the WMS Map Layer image.'
##    BackgroundColor = property(_get, _set, doc = _set.__doc__)
##
##    def WMSServiceDescription(self, rhs):
##        u'Associated WMSServiceDescription.'
##        #return 
##

class EngineCoverageAnnotationLayerFactory(CoClass):
    u'A factory for creating coverage annotation layers.'
    _reg_clsid_ = GUID('{54E3EE9D-BA9E-4318-A219-DC19FDA48C36}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
EngineCoverageAnnotationLayerFactory._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILayerFactory, ICoverageAnnotationLayerFactory]

IAdvancedShader._methods_ = [
    COMMETHOD([helpstring(u'Begin updating the shader.')], HRESULT, 'BeginUpdate'),
    COMMETHOD([helpstring(u'Pass an image tile to the shader.')], HRESULT, 'Update',
              ( ['in'], c_int, 'bitmapSize' ),
              ( ['in'], POINTER(c_ubyte), 'pBitmapBits' ),
              ( ['in'], c_int, 'Width' ),
              ( ['in'], c_int, 'Height' ),
              ( ['in'], c_int, 'scanLineWidthInBytes' )),
    COMMETHOD([helpstring(u'End updating the shader.')], HRESULT, 'EndUpdate'),
]
################################################################
## code template for IAdvancedShader implementation
##class IAdvancedShader_Impl(object):
##    def EndUpdate(self):
##        u'End updating the shader.'
##        #return 
##
##    def Update(self, bitmapSize, pBitmapBits, Width, Height, scanLineWidthInBytes):
##        u'Pass an image tile to the shader.'
##        #return 
##
##    def BeginUpdate(self):
##        u'Begin updating the shader.'
##        #return 
##

class SymbolBackground(CoClass):
    u'Background drawn using a symbol.'
    _reg_clsid_ = GUID('{1BAA33E9-E13B-11D2-B868-00600802E603}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
SymbolBackground._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IBackground, ISymbolBackground, IFrameDecoration, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, IGraphicsComposite, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize]

class FeatureServiceLayerEditExtension(CoClass):
    u'FeatureService Layer edit extension.'
    _reg_clsid_ = GUID('{9A2BDA48-AD26-4706-BB88-F47D7B0C8F32}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
FeatureServiceLayerEditExtension._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IFeatureServiceLayerEditExtension, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersionSupportGEN]

class EditTemplateFactory(CoClass):
    u'EditTemplateFactory Class'
    _reg_clsid_ = GUID('{09876368-3969-40F4-BF3A-60805EB29598}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
EditTemplateFactory._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IEditTemplateFactory]

class Text3DElement(CoClass):
    u'The Text3D Graphics Element CoClass.'
    _reg_clsid_ = GUID('{B9865D0B-EB37-11D4-A116-00508BD60CB9}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
Text3DElement._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IElement, IElementProperties, IText3DElement, IFillShapeElement, IGraphicElement, IBoundsProperties, comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ITransform2D, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, IElementProperties2, IElementProperties3]

class ExportInfoGenerator(CoClass):
    u'Generates information for exporting into the display.'
    _reg_clsid_ = GUID('{DA387BB5-5514-41C5-A3E7-3C02AC06B89D}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
ExportInfoGenerator._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IExportInfoGenerator, IFeatureExportInfoGenerator]

IIndexQuery2._methods_ = [
    COMMETHOD([helpstring(u'Finds the nearest feature in index to the input shape.')], HRESULT, 'NearestFeature',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'pShape' ),
              ( ['out'], POINTER(c_int), 'pClosestFeatureFID' ),
              ( ['out'], POINTER(c_double), 'pDistance' )),
    COMMETHOD(['propget', helpstring(u'Finds all features that the input shape lies within.')], HRESULT, 'Within',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'pShape' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureCursor)), 'ppFeatureCursor' )),
    COMMETHOD([helpstring(u'Finds all nearest features in index to the input shape (i.e. equal distance).')], HRESULT, 'NearestFeatures',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'pShape' ),
              ( ['out'], POINTER(VARIANT), 'pSAIds' ),
              ( ['out'], POINTER(c_double), 'pDistance' )),
    COMMETHOD([helpstring(u'Finds all intersected features in index to the input shape.')], HRESULT, 'IntersectedFeatures',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'pShape' ),
              ( ['out'], POINTER(VARIANT), 'pSAIds' )),
    COMMETHOD([helpstring(u'Finds the first feature that the input shape lies within.')], HRESULT, 'WithinFeature',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'pShape' ),
              ( ['retval', 'out'], POINTER(c_int), 'pWithinFeatureFID' )),
]
################################################################
## code template for IIndexQuery2 implementation
##class IIndexQuery2_Impl(object):
##    def NearestFeatures(self, pShape):
##        u'Finds all nearest features in index to the input shape (i.e. equal distance).'
##        #return pSAIds, pDistance
##
##    def NearestFeature(self, pShape):
##        u'Finds the nearest feature in index to the input shape.'
##        #return pClosestFeatureFID, pDistance
##
##    @property
##    def Within(self, pShape):
##        u'Finds all features that the input shape lies within.'
##        #return ppFeatureCursor
##
##    def WithinFeature(self, pShape):
##        u'Finds the first feature that the input shape lies within.'
##        #return pWithinFeatureFID
##
##    def IntersectedFeatures(self, pShape):
##        u'Finds all intersected features in index to the input shape.'
##        #return pSAIds
##

class ConvertFDOAnnoToCoverageAnno(CoClass):
    u'Performs the attribute transfer.'
    _reg_clsid_ = GUID('{32716F54-8B17-4960-945C-FED966B032E9}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
ConvertFDOAnnoToCoverageAnno._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IConvertFDOAnnoToCoverageAnno]

class LabelClassDescriptions(CoClass):
    u'A coclass that contains a collection of Lable Class Description coclasses.'
    _reg_clsid_ = GUID('{F0552A97-F4C8-4765-AB22-2FA4BFAD4B3E}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
LabelClassDescriptions._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILabelClassDescriptions, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

IMapArea._methods_ = [
    COMMETHOD(['propget', helpstring(u'The geographic extent of the map.')], HRESULT, 'Extent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'Extent' )),
]
################################################################
## code template for IMapArea implementation
##class IMapArea_Impl(object):
##    @property
##    def Extent(self):
##        u'The geographic extent of the map.'
##        #return Extent
##

class TinContourRenderer(CoClass):
    u'TIN contour renderer component.'
    _reg_clsid_ = GUID('{BEF75DC2-20E6-4965-85E5-A3BC797470BC}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
TinContourRenderer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ITinContourRenderer, ITinRenderer, IMultiResolutionRenderer, ILegendInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

ILayerDrawSetup._methods_ = [
    COMMETHOD([helpstring(u'Executes before the layer draws to the display for the given draw phase.')], HRESULT, 'BeforeDraw',
              ( ['in'], esriViewDrawPhase, 'viewPhase' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'TrackCancel' )),
    COMMETHOD([helpstring(u'Executes after the layer drawn to the display for the given draw phase.')], HRESULT, 'AfterDraw',
              ( ['in'], esriViewDrawPhase, 'viewPhase' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'Display' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'TrackCancel' )),
]
################################################################
## code template for ILayerDrawSetup implementation
##class ILayerDrawSetup_Impl(object):
##    def BeforeDraw(self, viewPhase, Display, TrackCancel):
##        u'Executes before the layer draws to the display for the given draw phase.'
##        #return 
##
##    def AfterDraw(self, viewPhase, Display, TrackCancel):
##        u'Executes after the layer drawn to the display for the given draw phase.'
##        #return 
##


# values for enumeration 'esriGraphicFeatureServerMsgCodeEnum'
esriGraphicFeatureServerMessageCode_ErrorMessage = 17000
esriGraphicFeatureServerMessageCode_WarningMessage = 17001
esriGraphicFeatureServerMessageCode_InfoMessage = 17002
esriGraphicFeatureServerMessageCode_DebugMessage = 17003
esriGraphicFeatureServerMessageCode_ConstructStarted = 17004
esriGraphicFeatureServerMsgCode_InvalidLicense = 17005
esriGraphicFeatureServerMessageCode_ConstructEnded = 17006
esriGraphicFeatureServerMsgCode_MixedEditingModeNotAllowed = 17007
esriGraphicFeatureServerMsgCode_RequestNotSupported = 17008
esriGraphicFeatureServerMsgCode_CapabilityNotSupported = 17009
esriGraphicFeatureServerMsgCode_TableLayerIDNotFound = 17010
esriGraphicFeatureServerMsgCode_TableLayerDoesNotSupportAttachments = 17011
esriGraphicFeatureServerMessageCode_NonSDEDataUsed = 17012
esriGraphicFeatureServerMessageCode_DefaultZValueReadingError = 17013
esriGraphicFeatureServerMessageCode_DefaultZValueBeingUsed = 17014
esriGraphicFeatureServeMsgCode_MissingParameter = 17015
esriGraphicFeatureServeMsgCode_InvalidLayerOrTableID = 17016
esriGraphicFeatureMsgCode_MessageArrival_Add = 17017
esriGraphicFeatureMsgCode_MessageProcessed_Add = 17018
esriGraphicFeatureMsgCode_MessageArrival_AddAttachments = 17019
esriGraphicFeatureMsgCode_MessageProcessed_AddAttachments = 17020
esriGraphicFeatureMsgCode_MessageArrival_ApplyEdits = 17021
esriGraphicFeatureMsgCode_MessageProcessed_ApplyEdits = 17022
esriGraphicFeatureMsgCode_MessageArrival_Delete = 17023
esriGraphicFeatureMsgCode_MessageProcessed_Delete = 17024
esriGraphicFeatureMsgCode_MessageArrival_DeleteAttachments = 17025
esriGraphicFeatureMsgCode_MessageProcessed_DeleteAttachments = 17026
esriGraphicFeatureMsgCode_MessageArrival_DeleteByID = 17027
esriGraphicFeatureMsgCode_MessageProcessed_DeleteByID = 17028
esriGraphicFeatureMsgCode_MessageArrival_GetCount = 17029
esriGraphicFeatureMsgCode_MessageProcessed_GetCount = 17030
esriGraphicFeatureMsgCode_MessageArrival_GetLayers = 17031
esriGraphicFeatureMsgCode_MessageProcessed_GetLayers = 17032
esriGraphicFeatureMsgCode_MessageArrival_GetServiceObjectCount = 17033
esriGraphicFeatureMsgCode_MessageProcessed_GetServiceObjectCount = 17034
esriGraphicFeatureMsgCode_MessageArrival_GetTables = 17035
esriGraphicFeatureMsgCode_MessageProcessed_GetTables = 17036
esriGraphicFeatureMsgCode_MessageArrival_Query = 17037
esriGraphicFeatureMsgCode_MessageProcessed_Query = 17038
esriGraphicFeatureMsgCode_MessageArrival_QueryAttachmentData = 17039
esriGraphicFeatureMsgCode_MessageProcessed_QueryAttachmentData = 17040
esriGraphicFeatureMsgCode_MessageArrival_QueryAttachmentInfos = 17041
esriGraphicFeatureMsgCode_MessageProcessed_QueryAttachmentInfos = 17042
esriGraphicFeatureMsgCode_MessageArrival_QueryFromService = 17043
esriGraphicFeatureMsgCode_MessageProcessed_QueryFromService = 17044
esriGraphicFeatureMsgCode_MessageArrival_QueryHTMLPopups = 17045
esriGraphicFeatureMsgCode_MessageProcessed_QueryHTMLPopups = 17046
esriGraphicFeatureMsgCode_MessageArrival_QueryIDs = 17047
esriGraphicFeatureMsgCode_MessageProcessed_QueryIDs = 17048
esriGraphicFeatureMsgCode_MessageArrival_QueryRelatedObjects = 17049
esriGraphicFeatureMsgCode_MessageProcessed_QueryRelatedObjects = 17050
esriGraphicFeatureMsgCode_MessageArrival_Update = 17051
esriGraphicFeatureMsgCode_MessageProcessed_Update = 17052
esriGraphicFeatureMsgCode_MessageArrival_UpdateAttachments = 17053
esriGraphicFeatureMsgCode_MessageProcessed_UpdateAttachments = 17054
esriGraphicFeatureMsgCode_MessageArrival_CreateReplica = 17055
esriGraphicFeatureMsgCode_MessageProcessed_CreateReplica = 17056
esriGraphicFeatureMsgCode_MessageArrival_ExportReplicaDataChanges = 17057
esriGraphicFeatureMsgCode_MessageProcessed_ExportReplicaDataChanges = 17058
esriGraphicFeatureMsgCode_MessageArrival_GetReplicas = 17059
esriGraphicFeatureMsgCode_MessageProcessed_GetReplicas = 17060
esriGraphicFeatureMsgCode_MessageArrival_ImportReplicaDataChanges = 17061
esriGraphicFeatureMsgCode_MessageProcessed_ImportReplicaDataChanges = 17062
esriGraphicFeatureMsgCode_MessageArrival_UnregisterReplica = 17063
esriGraphicFeatureMsgCode_MessageProcessed_UnregisterReplica = 17064
esriGraphicFeatureMsgCode_MessageArrival_AlterReplica = 17065
esriGraphicFeatureMsgCode_MessageProcessed_AlterReplica = 17066
esriGraphicFeatureMsgCode_Message_LayerTableNotEditable = 17067
esriGraphicFeatureMsgCode_Message_ErrorInitializingLayers = 17068
esriGraphicFeatureMsgCode_Message_ErrorInitializingTables = 17069
esriGraphicFeatureMsgCode_Message_ErrorMissingQueryCriteria = 17070
esriGraphicFeatureMsgCode_MessageArrival_GetServerInfo = 17071
esriGraphicFeatureMsgCode_MessageProcessed_GetServerInfo = 17072
esriGraphicFeatureMsgCode_CfgFactory_OnRemoveExStart = 17073
esriGraphicFeatureMsgCode_CfgFactory_OnRemoveExEnd = 17074
esriGraphicFeatureMsgCode_CfgFactory_NoInputDir = 17075
esriGraphicFeatureMsgCode_CfgFactory_InvalidInputDir = 17076
esriGraphicFeatureMsgCode_CfgFactory_NoCleanupRequired = 17077
esriGraphicFeatureMsgCode_CfgFactory_CleanupFailed = 17078
esriGraphicFeatureMsgCode_CfgFactory_MapServerConfigPropsMissing = 17079
esriGraphicFeatureMsgCode_CfgFactory_DeleteInfo = 17080
esriGraphicFeatureMsgCode_CfgFactory_CleanupRequired = 17081
esriGraphicFeatureMsgCode_CfgFactory_CleanupFinished = 17082
esriGraphicFeatureServerMsgCodeEnum = c_int # enum
ISelectionEnvironmentThreshold._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if warnings are displayed when the record count exceeds the selection warning threshold.')], HRESULT, 'ShowSelectionWarning',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'showWarning' )),
    COMMETHOD(['propput', helpstring(u'Indicates if warnings are displayed when the record count exceeds the selection warning threshold.')], HRESULT, 'ShowSelectionWarning',
              ( ['in'], VARIANT_BOOL, 'showWarning' )),
    COMMETHOD(['propget', helpstring(u'Threshold (number of records), above which selection warnings may be shown.')], HRESULT, 'WarningThreshold',
              ( ['retval', 'out'], POINTER(c_int), 'threshold' )),
    COMMETHOD(['propput', helpstring(u'Threshold (number of records), above which selection warnings may be shown.')], HRESULT, 'WarningThreshold',
              ( ['in'], c_int, 'threshold' )),
]
################################################################
## code template for ISelectionEnvironmentThreshold implementation
##class ISelectionEnvironmentThreshold_Impl(object):
##    def _get(self):
##        u'Indicates if warnings are displayed when the record count exceeds the selection warning threshold.'
##        #return showWarning
##    def _set(self, showWarning):
##        u'Indicates if warnings are displayed when the record count exceeds the selection warning threshold.'
##    ShowSelectionWarning = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Threshold (number of records), above which selection warnings may be shown.'
##        #return threshold
##    def _set(self, threshold):
##        u'Threshold (number of records), above which selection warnings may be shown.'
##    WarningThreshold = property(_get, _set, doc = _set.__doc__)
##

class PointLabelPlacementDescription(CoClass):
    u'Point Lable Placement Description coclass.'
    _reg_clsid_ = GUID('{6A458B37-055D-48DA-B3A5-856D9DC9525F}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
PointLabelPlacementDescription._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IPointLabelPlacementDescription, ILabelPlacementDescription, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersionSupportGEN]

IFieldDomainInfos._methods_ = [
    COMMETHOD(['propget', helpstring(u'The Field Domain info count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The Field Domain Info at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IFieldDomainInfo)), 'ppFieldDomainInfo' )),
    COMMETHOD([helpstring(u'Removes the Field Domain Info at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all Field Domain infos.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Adds a Field Domain Info.')], HRESULT, 'Add',
              ( ['in'], POINTER(IFieldDomainInfo), 'pFieldDomainInfo' )),
    COMMETHOD([helpstring(u'Adds a Field Domain info info at the specified position.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(IFieldDomainInfo), 'pFieldDomainInfo' )),
]
################################################################
## code template for IFieldDomainInfos implementation
##class IFieldDomainInfos_Impl(object):
##    @property
##    def Count(self):
##        u'The Field Domain info count.'
##        #return Count
##
##    def Insert(self, Index, pFieldDomainInfo):
##        u'Adds a Field Domain info info at the specified position.'
##        #return 
##
##    def Remove(self, Index):
##        u'Removes the Field Domain Info at the specified position.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'The Field Domain Info at the specified position.'
##        #return ppFieldDomainInfo
##
##    def RemoveAll(self):
##        u'Removes all Field Domain infos.'
##        #return 
##
##    def Add(self, pFieldDomainInfo):
##        u'Adds a Field Domain Info.'
##        #return 
##

IDomainInfo._methods_ = [
    COMMETHOD(['propget', helpstring(u'The domain that is different from the Layer.')], HRESULT, 'Domain',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDomain)), 'Domain' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the Domain of the Type is inherited from the Layer.')], HRESULT, 'Inherited',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsInherited' )),
]
################################################################
## code template for IDomainInfo implementation
##class IDomainInfo_Impl(object):
##    @property
##    def Domain(self):
##        u'The domain that is different from the Layer.'
##        #return Domain
##
##    @property
##    def Inherited(self):
##        u'Indicates if the Domain of the Type is inherited from the Layer.'
##        #return IsInherited
##

class MapImage(CoClass):
    u'The Map Image coclass contains information about the generated map image.'
    _reg_clsid_ = GUID('{C9D77BD2-8296-4411-8D11-6EFFFBB29CAD}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
MapImage._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IImageResult, IImageResult2, IMapImage, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class LineLabelPlacementDescription(CoClass):
    u'Line Lable Placement Description coclass.'
    _reg_clsid_ = GUID('{17729200-D19F-437F-8607-4A7995BC0928}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
LineLabelPlacementDescription._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILineLabelPlacementDescription, ILabelPlacementDescription, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersionSupportGEN]

class MapServerHyperlink(CoClass):
    u'The Map Server Hyperlink coclass contains settings about a hyperlink.'
    _reg_clsid_ = GUID('{E35FF9AE-6330-4D0C-BF7B-4CFE239A37C7}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
MapServerHyperlink._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMapServerHyperlink, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

IRasterRendererColorRamp._methods_ = [
    COMMETHOD(['propget', helpstring(u'The color scheme name.')], HRESULT, 'ColorScheme',
              ( ['retval', 'out'], POINTER(BSTR), 'ColorScheme' )),
    COMMETHOD(['propput', helpstring(u'The color scheme name.')], HRESULT, 'ColorScheme',
              ( ['in'], BSTR, 'ColorScheme' )),
    COMMETHOD(['propget', helpstring(u'The color ramp of the color map.')], HRESULT, 'ColorRamp',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColorRamp)), 'ppColorRamp' )),
    COMMETHOD(['propput', helpstring(u'The color ramp of the color map.')], HRESULT, 'ColorRamp',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColorRamp), 'ppColorRamp' )),
]
################################################################
## code template for IRasterRendererColorRamp implementation
##class IRasterRendererColorRamp_Impl(object):
##    def _get(self):
##        u'The color ramp of the color map.'
##        #return ppColorRamp
##    def _set(self, ppColorRamp):
##        u'The color ramp of the color map.'
##    ColorRamp = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The color scheme name.'
##        #return ColorScheme
##    def _set(self, ColorScheme):
##        u'The color scheme name.'
##    ColorScheme = property(_get, _set, doc = _set.__doc__)
##

class LabelStyle(CoClass):
    u'An object that controls label symbol and placement properties.'
    _reg_clsid_ = GUID('{4C90DE7B-CB77-11D2-9F34-00C04F6BC6A5}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
LabelStyle._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILabelStyle, ILabelStyle2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class IBufferProcessingSymbology(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that set and retrieve symbology to be applied for buffer output.'
    _iid_ = GUID('{8FC84C02-6BE1-4352-9164-A682BBFE894C}')
    _idlflags_ = ['oleautomation']
IBufferProcessingSymbology._methods_ = [
    COMMETHOD(['propputref', helpstring(u'Color ramp that is used for applying the symbology to the buffer output.')], HRESULT, 'ColorRamp',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColorRamp), 'ppColorRamp' )),
    COMMETHOD(['propget', helpstring(u'Color ramp that is used for applying the symbology to the buffer output.')], HRESULT, 'ColorRamp',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColorRamp)), 'ppColorRamp' )),
]
################################################################
## code template for IBufferProcessingSymbology implementation
##class IBufferProcessingSymbology_Impl(object):
##    @property
##    def ColorRamp(self, ppColorRamp):
##        u'Color ramp that is used for applying the symbology to the buffer output.'
##        #return 
##

class PolygonLabelPlacementDescription(CoClass):
    u'Polygon Lable Placement Description coclass.'
    _reg_clsid_ = GUID('{425D9BB2-BD95-4DB9-B9F2-2C7B4D44EC58}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
PolygonLabelPlacementDescription._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IPolygonLabelPlacementDescription, ILabelPlacementDescription, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersionSupportGEN]

ICenterAndScale._methods_ = [
    COMMETHOD(['propget', helpstring(u'The center of the map.')], HRESULT, 'Center',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint)), 'Center' )),
    COMMETHOD(['propput', helpstring(u'The center of the map.')], HRESULT, 'Center',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'Center' )),
    COMMETHOD(['propget', helpstring(u'The map scale.')], HRESULT, 'MapScale',
              ( ['retval', 'out'], POINTER(c_double), 'Scale' )),
    COMMETHOD(['propput', helpstring(u'The map scale.')], HRESULT, 'MapScale',
              ( ['in'], c_double, 'Scale' )),
]
################################################################
## code template for ICenterAndScale implementation
##class ICenterAndScale_Impl(object):
##    def _get(self):
##        u'The map scale.'
##        #return Scale
##    def _set(self, Scale):
##        u'The map scale.'
##    MapScale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The center of the map.'
##        #return Center
##    def _set(self, Center):
##        u'The center of the map.'
##    Center = property(_get, _set, doc = _set.__doc__)
##

class EditTemplateManager(CoClass):
    u'EditTemplateManager Class'
    _reg_clsid_ = GUID('{A0162E85-E170-4B10-A370-CEE08D8D4B8C}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
EditTemplateManager._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IEditTemplateManager, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

ILayerDrawingProperties._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if the layer drawing properties are dirty.')], HRESULT, 'DrawingPropsDirty',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Dirty' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the layer drawing properties are dirty.')], HRESULT, 'DrawingPropsDirty',
              ( ['in'], VARIANT_BOOL, 'Dirty' )),
]
################################################################
## code template for ILayerDrawingProperties implementation
##class ILayerDrawingProperties_Impl(object):
##    def _get(self):
##        u'Indicates if the layer drawing properties are dirty.'
##        #return Dirty
##    def _set(self, Dirty):
##        u'Indicates if the layer drawing properties are dirty.'
##    DrawingPropsDirty = property(_get, _set, doc = _set.__doc__)
##

class IMapIdentifyObject(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the map identify object.'
    _iid_ = GUID('{7F4AB189-ED0D-11D2-AB0E-000000000000}')
    _idlflags_ = ['oleautomation']
IMapIdentifyObject._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The map into an identify object.')], HRESULT, 'Map',
              ( ['in'], POINTER(IMap), 'rhs' )),
]
################################################################
## code template for IMapIdentifyObject implementation
##class IMapIdentifyObject_Impl(object):
##    def Map(self, rhs):
##        u'The map into an identify object.'
##        #return 
##

IBufferProcessingParameter._methods_ = [
    COMMETHOD(['propput', helpstring(u'Indicates if circles are adjusted in Projected Coordinate Systems.')], HRESULT, 'AdjustCirclesForProjection',
              ( ['in'], VARIANT_BOOL, 'AdjustCirclesForProjection' )),
    COMMETHOD(['propget', helpstring(u'Indicates if circles are adjusted in Projected Coordinate Systems.')], HRESULT, 'AdjustCirclesForProjection',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'AdjustCirclesForProjection' )),
    COMMETHOD(['propput', helpstring(u'Indicates if ring buffers (hollow) are created instead of disk buffers (filled).')], HRESULT, 'GenerateRings',
              ( ['in'], VARIANT_BOOL, 'GenerateRings' )),
    COMMETHOD(['propget', helpstring(u'Indicates if ring buffers (hollow) are created instead of disk buffers (filled).')], HRESULT, 'GenerateRings',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'GenerateRings' )),
    COMMETHOD(['propput', helpstring(u'Buffer output type (graphics or file).')], HRESULT, 'SaveAsGraphics',
              ( ['in'], VARIANT_BOOL, 'rhs' )),
    COMMETHOD(['propputref', helpstring(u'Establishes the reference to the source Feature Class, if any.')], HRESULT, 'FeatureClass',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClass), 'rhs' )),
    COMMETHOD(['propput', helpstring(u'Indicates which spatial reference should be used for the buffering process.')], HRESULT, 'BufferSpatialReference',
              ( ['in'], esriBufferSpatialReferenceType, 'rhs' )),
    COMMETHOD(['propput', helpstring(u'Indicates which spatial reference should be used for the buffer output.')], HRESULT, 'TargetSpatialReference',
              ( ['in'], esriBufferSpatialReferenceType, 'rhs' )),
    COMMETHOD(['propput', helpstring(u'Tells the buffer object explicitly that the input shapes contain polygons.')], HRESULT, 'InputHasPolygons',
              ( ['in'], VARIANT_BOOL, 'rhs' )),
    COMMETHOD(['propput', helpstring(u'Forces the buffer object to simplify the intermediate shapes during the buffer processing.')], HRESULT, 'SimplifyShapes',
              ( ['in'], VARIANT_BOOL, 'rhs' )),
]
################################################################
## code template for IBufferProcessingParameter implementation
##class IBufferProcessingParameter_Impl(object):
##    def _set(self, rhs):
##        u'Buffer output type (graphics or file).'
##    SaveAsGraphics = property(fset = _set, doc = _set.__doc__)
##
##    def _set(self, rhs):
##        u'Forces the buffer object to simplify the intermediate shapes during the buffer processing.'
##    SimplifyShapes = property(fset = _set, doc = _set.__doc__)
##
##    def _set(self, rhs):
##        u'Indicates which spatial reference should be used for the buffering process.'
##    BufferSpatialReference = property(fset = _set, doc = _set.__doc__)
##
##    def _set(self, rhs):
##        u'Indicates which spatial reference should be used for the buffer output.'
##    TargetSpatialReference = property(fset = _set, doc = _set.__doc__)
##
##    def FeatureClass(self, rhs):
##        u'Establishes the reference to the source Feature Class, if any.'
##        #return 
##
##    def _get(self):
##        u'Indicates if circles are adjusted in Projected Coordinate Systems.'
##        #return AdjustCirclesForProjection
##    def _set(self, AdjustCirclesForProjection):
##        u'Indicates if circles are adjusted in Projected Coordinate Systems.'
##    AdjustCirclesForProjection = property(_get, _set, doc = _set.__doc__)
##
##    def _set(self, rhs):
##        u'Tells the buffer object explicitly that the input shapes contain polygons.'
##    InputHasPolygons = property(fset = _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if ring buffers (hollow) are created instead of disk buffers (filled).'
##        #return GenerateRings
##    def _set(self, GenerateRings):
##        u'Indicates if ring buffers (hollow) are created instead of disk buffers (filled).'
##    GenerateRings = property(_get, _set, doc = _set.__doc__)
##

class CenterAndSize(CoClass):
    u'The Center And Size coclass allows you to change the spatial extent of a map by specifying the center, size and units.'
    _reg_clsid_ = GUID('{3FB43F0D-A000-4C23-9BEA-0976AEF39429}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{45AC68FF-DEFF-4884-B3A9-7D882EDCAEF1}', 10, 2)
CenterAndSize._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMapArea, ICenterAndSize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

IInvalidArea3._methods_ = [
    COMMETHOD([helpstring(u"Invalidates the display and considers a symbol's size in points.")], HRESULT, 'InvalidateEx',
              ( ['in'], c_short, 'screenCache' ),
              ( ['in'], c_double, 'symSizePoints' )),
]
################################################################
## code template for IInvalidArea3 implementation
##class IInvalidArea3_Impl(object):
##    def InvalidateEx(self, screenCache, symSizePoints):
##        u"Invalidates the display and considers a symbol's size in points."
##        #return 
##

IMapServerSublayer2._methods_ = [
    COMMETHOD(['propget', helpstring(u'The source ID of the layer.')], HRESULT, 'SourceID',
              ( ['retval', 'out'], POINTER(BSTR), 'SourceID' )),
    COMMETHOD(['propput', helpstring(u'The source ID of the layer.')], HRESULT, 'SourceID',
              ( ['in'], BSTR, 'SourceID' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the layer has labels to turn on and off.')], HRESULT, 'HasLabels',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'HasLabels' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the layer should display its dynamic labels.')], HRESULT, 'ShowLabels',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Show' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the layer should display its dynamic labels.')], HRESULT, 'ShowLabels',
              ( ['in'], VARIANT_BOOL, 'Show' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the layer should scale its symbols according to the reference scale.')], HRESULT, 'ScaleSymbols',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'ScaleSymbols' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the layer should scale its symbols according to the reference scale.')], HRESULT, 'ScaleSymbols',
              ( ['in'], VARIANT_BOOL, 'ScaleSymbols' )),
    COMMETHOD(['propget', helpstring(u'The layer description.')], HRESULT, 'LayerDescription',
              ( ['retval', 'out'], POINTER(POINTER(ILayerDescription)), 'layerDesc' )),
]
################################################################
## code template for IMapServerSublayer2 implementation
##class IMapServerSublayer2_Impl(object):
##    def _get(self):
##        u'The source ID of the layer.'
##        #return SourceID
##    def _set(self, SourceID):
##        u'The source ID of the layer.'
##    SourceID = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether the layer should display its dynamic labels.'
##        #return Show
##    def _set(self, Show):
##        u'Indicates whether the layer should display its dynamic labels.'
##    ShowLabels = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def LayerDescription(self):
##        u'The layer description.'
##        #return layerDesc
##
##    @property
##    def HasLabels(self):
##        u'Indicates if the layer has labels to turn on and off.'
##        #return HasLabels
##
##    def _get(self):
##        u'Indicates whether the layer should scale its symbols according to the reference scale.'
##        #return ScaleSymbols
##    def _set(self, ScaleSymbols):
##        u'Indicates whether the layer should scale its symbols according to the reference scale.'
##    ScaleSymbols = property(_get, _set, doc = _set.__doc__)
##

__all__ = ['esriTopSide',
           'esriGraphicFeatureServeMsgCode_InvalidLayerOrTableID',
           'LayerTablesAndDataMappings', 'esriConversionStatusErrors',
           'esriMobileServerMessageCode_InvalidPointer',
           'GFS_E_MISSING_PARAMETER', 'acHighLabelWeight',
           'IFeatureLayer',
           'esriImageServerMessageCode_ImageServerIdentify',
           'esriGlobeDocumentVersionInfoFail',
           'esriDimensionTextFitMoveEnd', 'IMapFrame',
           'esriAnnoStatusUnplaced',
           'esriGraphicFeatureMsgCode_MessageProcessed_GetServerInfo',
           'acGeometryNull', 'IMultiPartTextElement', 'ISymbolLevels',
           'IMSGlobeXMLParser', 'esriNetworkArrowSymbolOneWay',
           'IIdentifyGroup', 'BarrierCollection', 'IImageServerInit',
           'IOverposterOptions2', 'IFeatureRendererUpdate',
           'PropertyInfos', 'IColorSymbol', 'ICadLayer',
           'IDocumentPreview', 'esriCadastralParcel',
           'esriMapServerMsgCode_SymbologyNotConverted',
           'esriMapServerMsgCode_InvalidEmbeddedFont',
           'esriMobileServerMessageCode_InvalidSpatialQueryFilter',
           'IFeatureFindData2', 'ImageServiceInfo',
           'IAnnotationExpressionParser2',
           'IMaplexOverposterProperties',
           'IFeatureLayerDrawingDescription', 'IHTMLPopupInfo',
           'IParagraphTextElement', 'IHTMLPopupIdentify',
           'esriRasterStretchStats_AreaOfView', 'esriGpsStopBits15',
           'IFindObj',
           'esriGraphicFeatureServerMessageCode_DebugMessage',
           'esriMapServerMsgCode_MessageArrival_GetMapTableSubtypeInfos',
           'esriMaplexCenteredStraightOnLine', 'ColorSymbol',
           'esriMaplexUnambiguous', 'IPatch', 'IEnumDimensionStyle',
           'IIdentify2', 'IMap', 'esriAutoExtentMarginPercent',
           'Graticule', 'esriWMSServerMessageCode_Debug',
           'IGraphicFeatureServer', 'WCSLayer',
           'esriMaplexPlacementQualityLow', 'ITileCacheInfoEx',
           'IndexGrid',
           'esriGraphicFeatureMsgCode_MessageProcessed_QueryRelatedObjects',
           'RasterRGBSymbol', 'esriIdentifyVisibleWithHTMLPopup',
           'IRasterDiscreteColorRenderer', 'DynamicCacheLayerManager',
           'esriMapServerMsgCode_MessageArrival_GenerateDataClasses',
           'IDataObjectGroup',
           'esriMobileServerMessageCode_DirectoryInvalidOrAccessDenied',
           'IWMSGroupLayer', 'esriT3DOrientationPlane',
           'RasterClassifyColorRampRenderer',
           'esriMapServerMsgCode_QueryOperation_Start',
           'esriWMSServerMessageCode_ConstructStarted', 'MapReader',
           'IFeatureLayerDefinition',
           'esriMapServerMsgCode_MessageArrival_QueryDataStatistics',
           'esriWCSServerMessageCode_MapServerWCSParseKVP',
           'IDataObjectTable',
           'esriMapServerMsgCode_SecureLayersEmbedded',
           'esriMaplexLandParcelFeature', 'IMapTableTimeInfo',
           'IMapTableSubtypeInfo', 'IColumnProperties',
           'esriGridCornerLowerLeft', 'esriScaleBarBelow',
           'IMapLayers', 'MapCooker',
           'esriGraphicFeatureMsgCode_MessageProcessed_Delete',
           'MxdServer', 'ContinuousTabStyle', 'IInvalidArea2',
           'IInvalidArea3', 'IImageType', 'IViewManager',
           'esriLabelDescriptionPatch', 'TerrainLayerFactory',
           'esriRightSide', 'IGlobeDocument', 'esriImageSVGZ',
           'esriDataStatTypeAverage', 'esriMapAnnotation',
           'IAreaPatch', 'ITableSelection',
           'esriMaplexAfterEndOfLine', 'esriMaplexGAStraight',
           'ITinSingleSymbolRenderer',
           'esriMapServerMsgCode_TooManyDomains', 'INetworkLayer',
           'RasterItemDescription', 'esriLegendItemArrangement',
           'IEnumLayer', 'esriGpsSpeedMps',
           'IDynamicCacheLayerManager2', 'MapTitle',
           'esriNorthArrowType', 'esriDiamondBar',
           'esriWCSServerMessageCode_ImageServerWCSNotLicensed',
           'MapServerLegendClass', 'RepresentationLegendClass',
           'acOneLabelPerName', 'esriUseFeatureLayerLabelStyle',
           'acStarMarker', 'IBufferProcessingSymbology',
           'esriConversionStatus', 'ITableEdit', 'esriGpsSpeedMph',
           'esriMapServerMsgCode_GeneralGeoDatabaseError',
           'IScaleMarks',
           'esriMapServerMsgCode_MessageArrival_ExportMapImage',
           'esriMaplexAbbrevTypeKeyword', 'RasterLayerExport',
           'esriImageServiceDataTypeGeneric',
           'esriMappingMsgCode_CustomDrawBegin',
           'esriWMSServerMessageCode_RequestNotRecognized',
           'ICompositeMapSurround', 'IMobileSync',
           'IGraphicsContainer', 'esriGpsStopBits2',
           'esriGpsStopBits1', 'esriOnTopPoint',
           'esriMapServerMsgCode_CanNotCacheOnDemandAndIgnoreCache',
           'esriServerLinePlacementCenterEnd',
           'esriDynamicLegendTypeVisibility',
           'esriMapServerMsgCode_LayerDrawingDescriptionNotValid',
           'SimpleRenderer', 'ILabelPlacementDescription',
           'esriMaplexNorthwestOfPoint',
           'esriMapServerMsgCode_MessageArrival_GetDocumentInfo',
           'esriMobileServerMessageCode_ObjectInitializationFailure',
           'ISnapGuides', 'esriGpsBaudRate115200', 'acDashDotLine',
           'ICenterAndSize', 'esriScreenPositionTopRight',
           'IBasemapLayer', 'esriQueryResultJsonAsURL',
           'ILocatorRectangle2', 'esriMaplexGACurvedNoFlip',
           'esriMapServerMsgCode_MessageProcessed_FromPagePoints',
           'esriMobileServerMessageCode_FailedParseParam',
           'IDataGraphTLegendProperties',
           'esriMobileServerMessageCode_UnsupportedRequestName',
           'esriMapServerMsgCode_WMSNeedsOutputDirectory',
           'esriViewForeground', 'ICompositeGraphicsLayer2',
           'ImageServerLayer', 'IGraphicSnap',
           'esriWCSServerMessageCode_MapServerWCSParseXML',
           'IMapImage', 'acRoundCap',
           'esriServerLinePlacementAboveBefore',
           'esriGlobeDocumentVersionInfoUnknown', 'esriPlacedLabel',
           'esriSelectionResultNew', 'MapServerBasicSublayer',
           'esriMaskTiffUncompress', 'esriPageFormLegal',
           'ILasAttributeRenderer', 'esriRotateLabelRadians',
           'esriMaplexErodedCenter', 'IFDOGraphicsLayer2',
           'acRangeType', 'FeatureFindData',
           'ICadastralFabricSelection', 'IMobileLayerInfo',
           'esriPageToPrinterMapping', 'esriCacheCompressionMode',
           'esriMobileServerMessageCode_InvalidVariantType',
           'IIdentifyDisplay', 'esriLayerEventHint',
           'esriDataStatTypeVariance', 'IDataExclusion',
           'MapServerObjectDescription',
           'esriMapServerMsgCode_QueryOperation_End',
           'esriScaleBarAutoDivisions',
           'esriMobileServerMessageCode_FailedToRetrieveGIDs',
           'IRelationshipClassCollection', 'esriRectangleBar',
           'GFLayerTableDataMappings', 'esriNormalizeByArea',
           'GFS_E_UNSUPPORTED_DATASOURCE_TYPE', 'ArrayOfIShader',
           'StatisticsRequest', 'esriServerLinePlacementBelowAfter',
           'esriGpsPositionInfo', 'IQueryResult',
           'ServiceDataOptions', 'esriAutoExtentBounds',
           'AnnotationFeatureClassExtension', 'IDynamicLegendLayer',
           'esriGraphicFeatureMsgCode_MessageProcessed_DeleteAttachments',
           'esriGraphicFeatureMsgCode_MessageArrival_GetLayers',
           'IStandardAnnotateMap',
           'esriGraphicFeatureServerMessageCode_ErrorMessage',
           'esriMapServerMsgCode_MessageProcessed_RefreshServerObjecs',
           'esriLeft', 'acNoLabelWeight',
           'ICadastralFabricLayerEvents', 'esriDataGraphTLegendRight',
           'esriWMSServerMessageCode_CanNotReadPrecookingFile',
           'esriMobileServerMessageCode_UseOfInvalidPointer',
           'acLLPlaceOnTopHorizontal',
           'esriCadastralParcelEncumbrance',
           'IStandaloneTableDescription', 'IFeatureLayerDefinition2',
           'MosaicLayer', 'esriGpsDgpsInfo', 'esriPlacedSymbol',
           'IPieChartRenderer', 'IMapTimeDisplay2',
           'esriWCSServerMessageCode_MapServerWCSParseKVP11',
           'ACGradientFillSymbol', 'acLabelMode', 'IDataGraphT',
           'esriMaplexConstrainJustificationRight',
           'esriMapServerMsgCode_MessageArrival_QueryRasterValue2',
           'esriMobileServerMessageCode_ErrorProcessingRequest',
           'IPropertyInfos', 'esriMappingMsgCode_AnnotationDrawBegin',
           'esriMaplexPageAlignment', 'TinFaceValueRenderer',
           'esriOtherSpatialReference', 'esriStackedMultiArea',
           'esriGpsDateTime', 'WMSServer',
           'esriImageServerMessageCode_ImageServerGetPixelBlock',
           'IHorizontalBarLegendItem', 'FillSymbolStyleGalleryClass',
           'IMapArea', 'IDrawAnnotationGeometry',
           'esriBufferOutsideIncludeInside', 'IGFSReplicaDescription',
           'esriLabelExpressionVBScript', 'IRasterStretch2',
           'IRasterStretch3', 'ILegend', 'esriMaplexLineFeatureType',
           'ILegendInfo',
           'esriGraphicFeatureServerMsgCode_InvalidLicense',
           'esriDataGraphTLegendLeft',
           'esriMaplexKeyNumberResetTypeAlways',
           'esriDimensionDisplayEnd', 'MgrsGrid', 'IFDOGraphicsLayer',
           'ILineElement', 'MapServerFindResult',
           'IDefinitionExpressionEvents',
           'esriRasterPyramidNeverBuild',
           'esriGraphicFeatureMsgCode_MessageProcessed_GetServiceObjectCount',
           'esriGraphColorPalette', 'MapServerIdentifySublayer',
           'MobileServerObjectDescription', 'ITOCClass',
           'esriGpsGroundCourse', 'esriServerPictureOutputAsIPicture',
           'esriRasterRenderingFullMode', 'ILinePatch',
           'esriGpsSatelliteData', 'IACSimplePolygonSymbol',
           'esriGraphicFeatureServerMsgCode_RequestNotSupported',
           'DataObjectGroups', 'MapDescription', 'IMapServerInfo3',
           'IMapServerInfo2',
           'esriMobileServerMessageCode_FailedRetrievingSyncItems',
           'IPieSeriesProperties', 'IMapServerInfo4',
           'esriMapTimeExtentAllData',
           'esriGraphicFeatureServerMsgCode_TableLayerDoesNotSupportAttachments',
           'esriImageServiceDataTypeProcessed',
           'esriCadastralParcelPLSS', 'IMosaicLayer', 'enumServer',
           'ShadowStyleGalleryClass',
           'esriServerLinePlacementCenterAlong',
           'esriSymbolOverrideLeading',
           'esriMapServerMsgCode_MessageProcessed_GetDefaultMapName',
           'esriMapDocumentType',
           'GFS_E_NOLAYER_OR_TABLE_INITIALIZED',
           'esriMobileServerMessageCode_InvalidParameter',
           'esriMobileServerMessageCode_MissingParameter',
           'esriSymbolOverrideHorzAlignment', 'esriCenterPoint',
           'esriMaplexUnitMap',
           'esriMobileServerMessageCode_ConstructStart',
           'esriCadastralParcelConveyanceDivision',
           'ProportionalSymbolRenderer',
           'esriGraphicFeatureServeMsgCode_MissingParameter',
           'esriFeatureEditToolCircle',
           'esriMaplexStrategyFontReduction', 'esriSlantCubeBar',
           'esriMapServerMsgCode_LackingServerAdminPrevileges',
           'AnnotationJScriptEngine', 'StandaloneTable',
           'esriExtentBounds',
           'E_IMAGESERVER_INVALID_FUNCTION_DATASET',
           'IAnnotationLayerFactory', 'acGrayFill',
           'NetworkDirtyAreaRenderer', 'MobileLayerInfo',
           'IQueryTableDataSourceDescription',
           'E_IMAGESERVER_CANT_ACQUIRE_TILE_LOCK',
           'IMapCacheToRasterFunction', 'IPage',
           'esriIdentifyTopOneWithHTMLPopup',
           'esriMaplexMinimizeLabels', 'ILegendItem',
           'enumAlwaysTrigger',
           'esriMapServerMsgCode_PMFUnservableReason', 'IACMapAdmin',
           'esriMapServerMsgCode_MessageArrival_GetCacheControlInfo',
           'TemplateInfos', 'WMS_E_SERVICE_EXCEPTION', 'esriImageSVG',
           'enumLayerSubCollection',
           'esriMapServerMsgCode_MessageProcessed_ExportLegend',
           'IMapAutoExtentOptions',
           'esriMapServerMsgCode_MessageProcessed_Identify',
           'esriWMSServerMessageCode_ImageServerWMSUnknownRequest',
           'esriMapDocumentTypeMxd', 'ILODInfos', 'IPageLayout3',
           'IRelateDescription', 'esriISLFootprintDisplayPrimaryOnly',
           'IUniqueValueRenderer2', 'IBivariateRenderer',
           'esriMapServerMsgCode_Layer_Identify_End',
           'StandaloneTableDescription', 'esriGridSquareLabelCorners',
           'esriMensurationCentroid',
           'esriMappingMsgCode_FeatureCount', 'esriTrueNorth',
           'DIM_E_CONSTRUCTOR_TOOMANY_VERTICES',
           'ILayerResultOptions', 'acForegroundHashLine',
           'MaplexLabelStyleGalleryClass',
           'esriWCSServerMessageCode_ImageServerWCSGetData',
           'esriMapServerMsgCode_MapServerStartedWithInvalidLayers',
           'ILineSeriesProperties',
           'esriMapServerMsgCode_MessageProcessed_ApplyMapDescription',
           'esriMapServerMsgCode_MessageArrival_GetSQLSyntaxInfo',
           'esriBackgroundTabRoundedRectangle',
           'esriMapServerMsgCode_Layer_Identify_Start',
           'AnnotationElement', 'RasterCatalogLayer',
           'esriClassifyQuantile', 'IImageCooker',
           'ParagraphTextElement', 'esriMaplexUnitMM',
           'acGeometryPolygon', 'ICoverageAnnotationSel',
           'RasterIdentifyObj',
           'esriMapServerMsgCode_MessageArrival_QueryAttachmentData2',
           'IClassBreakInfo', 'esriMaplexChooseBestJustification',
           'DataObjectTables', 'IFeatureCursorBuffer',
           'esriGlobeDocumentTypeLyr', 'RectangleElement',
           'SimpleNetworkRenderer',
           'esriMapServerMsgCode_CanNotCacheOnDemandIfDisconnected',
           'BasicOverposterLayerProperties', 'esriGridCornerEnum',
           'ImageServerName', 'PageDescription',
           'esriGpsConnectionStatusReceiving',
           'esriMaplexKeyNumberHorizontalAlignmentRight', 'acDotLine',
           'IACLabelRenderer', 'IActiveView',
           'esriDynamicLegendTypeCount', 'IMultiResolutionRenderer',
           'esriImageFormat', 'acUSRoadShieldSymbol',
           'esriMapServerMsgCode_Layer_Find_End', 'AnnotationFeature',
           'esriLabelEnvLabelStyleMethod', 'acSquareCap',
           'IMapCooker', 'ILayerExtensions',
           'esriMapServerMsgCode_MessageProcessed_GetServiceConfigurationInfo',
           'esriMobileServerMessageCode_UploadFeaturesFailure',
           'MapImages', 'LayoutImage', 'IGeoFeatureLayer',
           'esriValueRepDistance', 'IHotlinkExpression',
           'IBarrierCollection', 'esriWCSServerMessageCodeEnum',
           'IMapNavigator', 'IImageQueryFilter', 'IInkGraphic',
           'IMapServerInit2', 'ACSimpleLabelRenderer',
           'RelatedRecordGroup', 'esriScaleBarNone',
           'IMapServerTimeInfo', 'esriIdentifyOption',
           'IGraphicSnapEnvironment2',
           'esriRasterTransparencyStateOpaque',
           'esriMobileServerMessageCode_GetFeaturesFailure',
           'ILegend3',
           'esriWCSServerMessageCode_MapServerWCSDescribeCoverage',
           'IRelatedRecordSet', 'ACAcetateLayer',
           'IConditionalAction', 'esriMapTimeReverseAfterPlaying',
           'esriGraphicFeatureMsgCode_MessageArrival_GetTables',
           'esriMobileServerMessageCode_FailedToGetRelatedAttachmentTable',
           'IMapTableDescription',
           'esriMobileServerMessageCode_ClientVersionUnderBaseline',
           'MapServerRelationship', 'IDMSGridLabel2',
           'esriServerLineLabelPlacementType', 'Overview',
           'esriT3DPlaneXZ', 'IWMSIdentifyObject',
           'esriGpsConnectionStatus', 'TerrainLayer', 'MapLayerInfos',
           'IActionState', 'esriInvPyramidBar',
           'esriScreenPositionMiddleCenter', 'ExportInfoGenerator',
           'ISelectionEnvironmentStorage',
           'esriWCSServerMessageCode_MapServerWCSGetCoverage',
           'RasterCatalogLayerFactory',
           'esriGraphicFeatureMsgCode_MessageArrival_GetServiceObjectCount',
           'IRasterDefaultsEnv', 'IMapServerLegendClass',
           'esriDynamicLegendTypeNone',
           'esriGraphicFeatureMsgCode_MessageProcessed_QueryIDs',
           'IMapCooker3', 'LineLabelPlacementPriorities',
           'esriMaplexOffsetCurvedFromLine',
           'esriMobileServerMessageCode_FileInvalidOrAccessDenied',
           'FrameElement', 'ISQLSyntaxInfo', 'IMapServerObjects',
           'IDimensionStyleDisplay',
           'esriMapServerMsgCode_MessageArrival_HasSingleFusedMapCache',
           'esriGpsParitySpace', 'esriMaplexGACurved',
           'esriTopLeftCorner',
           'esriGraphicFeatureMsgCode_Message_ErrorInitializingTables',
           'esriGridCornerUpperLeft', 'esriPageFormA0',
           'esriPageFormA3', 'IACFeatureLayer', 'esriPageFormA5',
           'esriPageFormA4', 'esriGpsSpeedUnits',
           'esriDataGraphTLegendTextXAndValue',
           'esriMobileServerMessageCode_FailedToGetVersionFeatureClass',
           'ScaleLine', 'IFeatureLayerDrawingDescription2',
           'esriCachedMapServiceType', 'IAnnotationClassExtension',
           'IMapAdmin2', 'IMapAdmin3', 'IMapAdmin4',
           'IISLFootprintDisplayProps', 'esriDimensionType',
           'esriMapServerMsgCode_MessageArrival_FromPagePoints',
           'esriDimensionMarkerFitTolerance', 'GpsConnection',
           'IMapBookmarks2', 'IMixedFontGridLabel2',
           'IDynamicCacheLayerManager', 'CenterAndSize',
           'IImageServerInit2', 'IImageServerInit3',
           'esriMapServerMsgCode_MessageProcessed_GetServerInfo',
           'esriOn', 'esriMobileServerMessageCode_InvalidRequest',
           'IRasterStretchColorRampRenderer',
           'esriMensurationAreaAndPerimeter3D',
           'IRasterCatalogRendererPicker',
           'esriMobileServerMessageCode_SynchronizeAttachmentInfosStats',
           'ISecureLayer', 'esriMaplexPlacementQuality',
           'esriGpsConnectionErrorUnableToCommunicateToDevice',
           'RasterCatalogRendererPickerDefault', 'ICircleElement',
           'esriImageServerMessageCode_ImageServerStarted',
           'esriMapCacheUpdateRecreateMissing',
           'RepresentationRuleStyleGalleryClass', 'RelatedRecordSet',
           'esriMaplexNorthOfPoint', 'INetworkEdgeRenderer',
           'esriMobileServerMessageCode_AttachToMemoryFailure',
           'esriMobileServerMessageCode_InvalidExtent',
           'esriGraphicFeatureMsgCode_MessageProcessed_QueryAttachmentInfos',
           'esriRasterTransparencyStateAlpha',
           'LabelClassDescriptions', 'esriSymbolOverrideColor',
           'esriScreenPositionMiddleRight', 'GifPictureElement',
           'IHotlinkMacro', 'ILegendLayout',
           'IMapServerIdentifyResults', 'esriT3DJustifyRight',
           'ACRasterMarkerSymbol', 'esriPyramidBar',
           'esriNormalizeByPercentOfTotal', 'IWMSLayer',
           'IDisplayString', 'IRealTimeDestination',
           'esriMapServerMsgCode_MessageProcessed_QueryAttachmentData2',
           'esriConversionStatusSuccess', 'IGridHatch',
           'IPrintAndExport', 'ILayerFields', 'esriTRLineErrors',
           'esriMobileServerMessageCode_ImportFromMemoryFailure',
           'esriMobileServerMessageCode_CloseVersionFailure',
           'IACScaleDependentRenderer', 'esriCadastralFabricRenderer',
           'IGraphicsLayerScale', 'ILayerCacheInfo', 'IDocumentInfo2',
           'esriDataGraphTSymbolDiagCross', 'esriViewInitialized',
           'ETPC_Chisel', 'TableEditResult', 'esriBufferInside',
           'esriGpsBaudRate2400', 'esriScaleBarAbove',
           'ISelectionLayerDefinition', 'ImageServerIP',
           'ICacheControlInfo', 'MaplexLabelStackingProperties',
           'esriSymbolOverrideCharWidth',
           'esriMaplexOffsetStraightFromLine',
           'esriMobileServerMessageCode_InvalidDecomposedQuery',
           'esriImageEMF', 'ICacheDescriptionInfo',
           'esriScaleBarAutoDivision',
           'esriMapServerMsgCode_MessageProcessed_ExportLayout',
           'IGlobeRasterStretch',
           'esriMobileServerMessageCode_DownloadAttachmentsFailure',
           'ColorRampStyleGalleryClass', 'IServerLayerExtension',
           'esriMaplexPerimeter', 'TableIdentity', 'IIMSGlobeXMLNode',
           'esriMobileServerMessageCode_NoOutputDirectory',
           'esriRasterSelectionMaskOp', 'ILevelRenderer',
           'E_IMAGESERVER_CANT_MEASURE_SHADOW',
           'esriWMSServerMessageCode_NotLicensed', 'IOverview2',
           'IGeoRefSaveAsDlg', 'esriImageServiceSourceTypeCatalog',
           'acLLPlaceParallel', 'LayerDescriptor',
           'ScaleDependentRenderer', 'InvalidArea',
           'esriDimensionTypeAligned', 'IFrameDraw',
           'IACValueMapLabelRenderer',
           'FeatureServerConfigurationFactory', 'esriEllipseBar',
           'CacheStorageInfo',
           'esriWCSServerMessageCode_ImageServerWCSInvalidCRS',
           'IWMSLayer2', 'LasPointElevationRenderer',
           'IGraphicSnapEnvironment', 'esriAfter',
           'esriServerLinePlacementAboveAfter',
           'esriTRLineExceptions', 'esriLabelRotationType',
           'StandaloneTableInfos', 'IGroupSymbolElement', 'ILayer2',
           'IClassBreaksUIProperties', 'DynamicDisplay',
           'ISizeRenderer', 'acCenterVTextAlignment',
           'IDimensionGraphic', 'esriCalculateBestPlacement',
           'acRangeOfValues',
           'esriGraphicFeatureMsgCode_MessageArrival_AddAttachments',
           'esriMapServerMsgCode_FileInvalid', 'IMapServerFindResult',
           'esriWCSServerMessageCode_GeoDataServerWCSNotLicensed',
           'esriNoLabelRestrictions', 'ANNO_E_FONT_NOT_FOUND',
           'esriMapServerMsgCode_MessageProcessed_ToMapPoints',
           'DefaultNetworkLayerSymbology', 'esriMaplexAroundPoint',
           'esriGpsLatLongFormat', 'IMapLayerInfo4', 'IMapLayerInfo2',
           'IMapLayerInfo3', 'IMapSurroundEvents', 'esriDataStatType',
           'esriMobileServerMessageCode_FailedToOpenEvaluateDataPackage',
           'MapServerRESTSubLayer', 'esriServerHTMLPopupTypeAsURL',
           'esriDataGraphTLegendTextValue', 'esriScaleBarResizeHint',
           'MapServerQuerySublayer', 'esriCadastralParcelHistory',
           'IHTMLPopupInfo2', 'IEditOperation', 'esriGpsBaudRate4800',
           'esriImageServerMessageCode_ImageServerGetImage',
           'IGraphicElement', 'E_IMAGESERVER_UNSUPPORTED_FORMAT',
           'IAnnotateLayerTransformationProperties',
           'ITableHistogram2', 'E_IMAGESERVER_NO_PERMISSION',
           'BasicTableHistogram', 'IMapLayerInfos', 'ILabelStyle',
           'esriMapCacheDecompress', 'ImageResult', 'acVerticalFill',
           'ITileImageInfo2', 'IAnnotationPropertiesConverter',
           'IArrayOfIShader', 'esriMaplexEastOfPoint',
           'esriCad3DRenderFlatShaded',
           'esriRasterStretch_MinimumMaximum',
           'ILineLabelPlacementDescription',
           'IDynamicLayerDescription', 'esriClassifyNaturalBreaks',
           'esriMapServerMsgCode_DynamicDataSourceError',
           'esriRotateLabelArithmetic', 'IRasterExporter',
           'ITableCollection',
           'esriFeatureSetOptimizedSpatialReference',
           'esriMobileServerMessageCode_FailedToPopulateADR',
           'esriNoWeight', 'SimpleMapServerIdentifyObject',
           'ESRITPCPenType', 'ILayerDrawingProperties',
           'esriViewGraphics', 'IJPIPServer', 'esriTRPointErrors',
           'esriMobileServerMessageCode_RequestedVersionNotFound',
           'esriMapServerMsgCode_MessageProcessed_ExportMapImage',
           'MapServerIP', 'IAnnotationElement',
           'esriServerLinePlacementBelowStart', 'IDataObjects',
           'IRasterItemDescription', 'IGridInteriorLabels',
           'esriFeatureEditToolFreehand', 'esriIdentifyVisibleLayers',
           'esriGraphicFeatureMsgCode_MessageArrival_Query',
           'esriPageFormA1',
           'esriMapServerMsgCode_MessageProcessed_HasSingleFusedMapCache',
           'ILayerInfo', 'HotLinkVBScriptEngine', 'acBDiagonalFill',
           'esriMapServerMsgCode_MessageProcessed_GetLayerTile',
           'esriT3DPlaneYZ', 'esriMaplexPlacementQualityHigh',
           'IAnnotateLayerPropertiesCollection', 'IMxdContents',
           'acLLPlaceHorizontal', 'IDynamicMap',
           'DoubleAlternatingScaleBar', 'ITiledMapServer',
           'esriDescriptionLabelPatch',
           'esriRasterUniqueRendererKeyString', 'esriMapCacheImport',
           'ILocatedNetworkTrafficValue', 'esriMaplexNoLadder',
           'DataObjectArray',
           'esriMapServerMsgCode_Layer_QueryHyperlinks_End',
           'ILineLabelPlacementPriorities', 'esriScaleBarPos',
           'esriWCSServerMessageCode_ImageServerWCSInitialized',
           'IWMSMapLayer', 'IPictureElement', 'esriPageMappingTile',
           'esriMaplexConnectionType', 'esriRandomRecords',
           'IProjectedGrid', 'esriMaplexCenteredPerpendicularOnLine',
           'IACTextMarkerSymbol', 'IACLineLabelPosition',
           'acItalicFont', 'DimensionShape',
           'IRasterStretchAdvancedLabels',
           'esriMobileServerMessageCode_ImportAttachmentsStats',
           'esriGraphicFeatureMsgCode_CfgFactory_InvalidInputDir',
           'ANNO_E_UNSUPPORTED_VERSION', 'IACAcetateLayer',
           'acOneLabelPerPart', 'IRelatedRecordGroups',
           'ILegendClasses', 'MapServerLegendGroups',
           'esriImageServerMessageCode_ImageServerGetVersion',
           'esriMapServerMsgCode_CacheOnDemandMissing',
           'IElementOperation', 'LegendClasses', 'IFindObject',
           'esriServerPointLabelPlacementAboveCenter',
           'ImgPictureElement', 'IHyperlink',
           'MaplexOffsetAlongLineProperties', 'TifPictureElement',
           'IScaleLine', 'MapSurroundFrame',
           'esriMobileServerMessageCode_FailedGenRep',
           'esriCanPlaceLabels', 'ETPC_Pen',
           'LayerDrawingDescriptionFactory',
           'esriWCSServerMessageCode_GeoDataServerWCSInvalidLayer',
           'LayerDescriptions', 'ITinContourRenderer',
           'esriServerPointLabelPlacementBelowRight',
           'RasterExporter', 'IFrameProperties',
           'E_IMAGESERVER_CANT_MEASURE_HEIGHT', 'IFrameDecoration',
           'esriRelateResultJsonAsMime', 'IDimensionLayer',
           'ILabelClassDescription', 'JPIPServer',
           'E_IMAGESERVER_CANT_ACCESS_RASTERID',
           'IRasterCatalogDisplayProps2', 'ACTextSymbol',
           'IUniqueValueInfo', 'IDocumentInfo3',
           'esriMapServerMsgCode_MessageProcessed_GetMapTile',
           'esriGpsDecimalDegrees',
           'esriWCSServerMessageCode_MapServerWCSInvalidCRS',
           'IDataSourceHelperLayer',
           'GFS_E_FEATURE_UPDATE_FAILED_MISSING_M_VALUES',
           'IMapServerTimeInfo2', 'MaplexLabelEngineLayerProperties',
           'ITiledImageServer', 'esriQueryResultJsonAsMime',
           'LayerDrawingDescriptions', 'EditResults',
           'esriMobileServerMessageCode_ExtInitSuccess',
           'esriMaplexStrategyIdentifier', 'IFeatureIndex2',
           'HollowScaleBar', 'esriMaplexKeyNumberResetTypeMaybe',
           'esriCadastralParcelUnlocked',
           'esriWMSServerMessageCode_ImageServerWMSFailed',
           'IScaleBar2',
           'esriMapServerMsgCode_MessageArrival_QueryHTMLPopups',
           'IDataObjectTables', 'GraphicsLayerScale',
           'IAnnotationFeature',
           'esriJPIPServerMessageCode_NotLicensed', 'esriRight',
           'ImageServerConfigurationFactory',
           'esriLabelExpressionSimple', 'TinBreaklineRenderer',
           'IMaplexOverposterLayerProperties2',
           'IMaplexOverposterLayerProperties3',
           'IMaplexOverposterLayerProperties4',
           'esriMaplexLeftOfLine', 'LayerCacheInfo',
           'esriHyperlinkType', 'esriRasterStretch_HistogramEqualize',
           'esriImageBMP', 'MosaicRule',
           'esriGraphicFeatureMsgCode_MessageArrival_DeleteByID',
           'esriRasterStretch_Count', 'IRasterDataSourceDescription',
           'esriJPIPServerMessageCode_Failed', 'IDisplayTable',
           'esriFindVisibleLayers', 'HotLinkExpressionParser',
           'esriPlacementUnplaced', 'IRasterRGBRenderer2',
           'LineElement', 'IDataObjectTable2', 'esriMaplexAboveLeft',
           'RasterLayerFactory', 'DataObjects', 'IWCSServer',
           'esriMobileServerMessageCode_SettingDefaultClientVersion',
           'GFSTableDescription',
           'esriMobileServerMessageCode_NoExistingChecksumForVersion',
           'IMapTimeDescription2', 'ILayerEvents',
           'esriServerLinePlacementAboveStart', 'LayerFile',
           'IEnumMap', 'ScaleTextStyleGalleryClass',
           'IClassBreakInfos', 'esriMobileServerMessageCodeEnum',
           'esriSymbolSubstituteColor',
           'esriMobileServerMessageCode_FailedToRetrieveRowsByGUID',
           'ILayerDrawingDescription', 'IDynamicLegendItem',
           'DimensionLayer', 'esriDMSGridLabelType',
           'esriGpsDegreesMinutesSeconds',
           'esriWCSServerMessageCode_GeoDataServerWCSDescribeCoverage',
           'esriServerPictureOutputType', 'INetworkLayerSymbology',
           'esriDataGraphTLegendTextRightPercent',
           'ILayerExtensionInvalidate', 'esriViewAll',
           'IMapServerLegendInfos', 'esriFeatureEditToolEllipse',
           'esriGraphicFeatureMsgCode_MessageProcessed_QueryHTMLPopups',
           'esriGraphicFeatureMsgCode_MessageArrival_QueryFromService',
           'esriMapServerMsgCode_MessageArrival_GetVirtualCacheDirectory',
           'esriScaleBarAboveRight', 'acOneLabelPerShape',
           'MarginSnap', 'esriDataGraphTSymbolRightTriangle',
           'FeatureExtent', 'ICFDataSourcePageExtension',
           'esriMobileServerMessageCode_FailedToEstablishItem',
           'ITileCacheInfo', 'AnnotationExpressionParser',
           'esriMapServerMsgCode_MessageProcessed_QueryHyperlinks',
           'esriMappingMsgCode_GraphicSelectionDrawBegin',
           'enumTriggerType', 'IColorRampSymbol2',
           'esriValueRepUnknown',
           'esriOverposterPolygonPlacementMethod',
           'esriMapServerMsgCode_InvalidWhereClauseOrDefinitionExpression',
           'IImageResult', 'E_IMAGESERVER_FAILED_TO_CREATE_VIEW',
           'esriSymbolSubstituteIndividualSubordinate',
           'esriSymbolRotation3DRandomX',
           'esriSymbolRotation3DRandomY', 'esriScaleBarBeforeLabels',
           'acVerticalGradientFill',
           'esriMapServerMsgCode_ImageGeneration_End',
           'MosaicLODInfoHelper', 'ClassBreaksDef',
           'esriMapCacheUpdateMode',
           'esriMobileServerMessageCode_FileAccessDenied',
           'acLabelWeight', 'MapServerBookmarks',
           'IRasterRendererMaker', 'esriScaleBarBelowLeft',
           'esriMaplexNoConstraint', 'esriDataStatTypeMax',
           'CacheDatasetInfo', 'RasterDRAShader', 'IMapEvents',
           'IAnnotationErrorEvents',
           'esriMapServerMsgCode_MessageArrival_GetDefaultLayerDrawingDescriptions',
           'esriBackgroundTabType',
           'esriMobileServerMessageCode_MobileSyncDebug',
           'esriMobileServerMessageCode_FailedToCreateDataPackage',
           'enumHighlightSuppression', 'IEditTemplateManager',
           'esriAnnotationStorageType', 'BasicOverposterProperties',
           'EngineCoverageAnnotationLayerFactory',
           'esriWMSServerMessageCode_UnknownInternalError',
           'DummyGraduatedMarkerLayer', 'IAOIBookmark',
           'esriMaplexRepeatAlongBoundary', 'IGraphicFeatureServer2',
           'acFullLabel',
           'esriMapServerMsgCode_MessageProcessed_QueryAttachmentData',
           'esriWCSServerMessageCode_GeoDataServerWCSWrongPixelType',
           'esriMaplexGraticuleAlignmentType',
           'esriMapServerMsgCode_DefaultSymbolGenerated',
           'esriOverposterPoint', 'acShieldSymbolType',
           'SimpleRasterIdentifyObj', 'ICalibratedMapGridBorder',
           'esriGpsConnectionErrorNone', 'DataObjectGroupArray',
           'esriMapServerMsgCode_MessageInput_ExportMapImage',
           'esriScreenPositionBottomRight',
           'esriGraphicFeatureMsgCode_MessageProcessed_AddAttachments',
           'IEditTemplate', 'IBasicMap',
           'ITableDataSourceDescription',
           'esriMapServerMsgCode_MessageProcessed_GetSupportedImageReturnTypes',
           'IChartRenderer', 'esriScaleBarFrequency',
           'esriMapServerMsgCode_Layer_Find_Start', 'acRoundJoin',
           'IFeatureLayerSelectionEvents',
           'esriMobileServerMessageCode_InvalidURLUseMIME',
           'IScaleText2', 'ILocatorRectangle', 'TrackCancel',
           'esriQueryResultKMLAsURL', 'IStandaloneTableInfo',
           'ILayerDrawingPhase', 'MaplexDictionaryEntry',
           'ISingleFillScaleBar',
           'esriMobileServerMessageCode_InvalidServerEnvironment',
           'esriMobileServerMessageCode_NoArcGISServerConn',
           'IHistogramSeriesProperties',
           'esriMaplexConstrainJustificationLeft', 'TinFaceRenderer',
           'MapServerInfo', 'esriLayerEventHintProperties',
           'CalcRendererValues', 'esriDataGraphTLegendTop',
           'ImageServerIdentifyResults', 'IDataGraphTEvents',
           'ImageServerIdentifyResult', 'TinEdgeRenderer',
           'esriMobileServerMessageCode_FailedToSyncFeatures',
           'esriGpsParity', 'IGridLadderLabels',
           'esriGridSquareLabelStyleEnum',
           'esriMensurationHeightFromTopAndTopShadow', 'IMSSubLayer',
           'esriCadastralParcelLocked',
           'esriMobileServerMessageCode_FailedToSyncAttachInfos',
           'esriFeatureEditToolNone', 'esriImagePNG',
           'ImageServerEditResult', 'IMapTableInfo2',
           'esriT3DRotateAxisZ',
           'esriMapServerMsgCode_MessageArrival_Identify',
           'IMapBarriers2', 'esriGpsConnectionError',
           'WMS_E_INVALIDURL', 'MapEvents', 'esriDMSGridLabelStacked',
           'esriBevelBar', 'esriPageFormID',
           'esriImageServerMessageCode_ImageServerConfig',
           'esriGpsDegreesMinutes', 'GridSnap',
           'esriScaleBarDivisionsAndFirstMidpoint',
           'LegendClassFormat', 'ICodedValueAttributes',
           'EngineCadFeatureLayerFactory', 'IChangeDatabaseVersion',
           'esriJPIPServerMessageCode_Started',
           'IMosaicLODInfoHelper', 'TinNodeRenderer',
           'IFeatureGeometryAccess', 'esriNetworkEdgeRenderer',
           'MapServerLegendGroup', 'esriDataGraphTSymbolLeftTriangle',
           'ILabelCache', 'IMaplexLabelStackingProperties',
           'esriMapServerMsgCode_Layer_GetLegendInfo_Start',
           'esriMapServerMsgCode_MessageArrival_GetCacheName',
           'esriMapServerMsgCode_MessageArrival_QueryFeatureIDs2',
           'esriMappingMsgCode_DrawingAsMaskingLayer',
           'esriGraphicFeatureMsgCode_Message_ErrorInitializingLayers',
           'LayerEventsHelper', 'esriMensurationCentroid3D',
           'IACImageLayerAdmin', 'esriT3DJustifyCenter',
           'MapSelection', 'esriImageServiceSourceTypeDataset',
           'IExportSupport', 'CornerGridLabel',
           'IBasicOverposterEvents', 'ITimeDataDisplay',
           'esriSymbolOverrideWordSpacing', 'esriImageJPGPNG',
           'UniqueValueRenderer', 'MapServer',
           'esriMaplexOneLabelPerPart', 'ICadastralFabricSubLayer2',
           'IFeatureLayer2', 'IRepresentationRenderer',
           'esriMapDocumentVersionInfoFail', 'ILabelingDescription',
           'esriMaplexBeforeStartOfLine', 'DataObjectGroup',
           'IDataSourceDescription', 'IMapTableSubtypeInfos',
           'esriMapServerMsgCode_ImageGeneration_Started',
           'IKmlConversion', 'IDimensionFeature',
           'esriMaplexKeyNumberHorizontalAlignmentAuto',
           'ImageServerMeasureResult',
           'esriMapServerMsgCode_PropertyFilePathUndefined',
           'IBasicOverposterLayerProperties4', 'ICompositeLayer2',
           'esriGpsConnectionStatusClosed',
           'IBasicOverposterLayerProperties3', 'ILevelMasking',
           'ClassBreakInfos', 'IFeatureCursorBuffer2',
           'esriScaleBarBelowRight', 'ICompositeGraphicsLayer',
           'INITFGraphicsLayer',
           'esriGraphicFeatureMsgCode_MessageArrival_Add',
           'esriFeatureEditToolPoint', 'ACValueMapRenderer',
           'esriGpsConnectionErrorCommportNotSupported',
           'ILabelEngineLayerProperties2', 'ILabelStyle2',
           'PMFTitleTextElement', 'GraphicsSubLayer',
           'IACCalloutMarkerSymbol', 'SimpleWMSIdentifyObject',
           'ColorStyleGalleryClass',
           'esriMapServerMsgCode_MessageArrival_ToMapPoints',
           'enumActionTypeUnspecified',
           'esriMappingMsgCode_LabelingBegin',
           'esriMobileServerMessageCode_FailedToCommitDataPackage',
           'ITimeDataCustomUI', 'TableIdentities',
           'esriMapServerMsgCode_MessageArrival_GetCacheDescriptionInfo',
           'esriT3DRotateAxisX', 'IOverview', 'IGridLabel',
           'AnnotationFeatureClassDescription', 'IReferenceSystem',
           'AISRequest', 'GFSReplicationAgent',
           'esriLayerSelectHaveTheirCenterIn', 'IPageEvents',
           'IQueryByLayer', 'esriTRAreaExceptions',
           'IElementShutdown', 'ITableHistogram', 'IPageDescription',
           'GFS_E_FEATURE_GEOMETRY_PUT_FAILED_FAILED_MISSING_Z_VALUES',
           'INetworkSourceRenderer', 'IMxdServerQuery', 'esriAbove',
           'IAISRequest', 'ISymbolCollectionElement',
           'ITimeDimensionDefinition', 'ISymbolBorder',
           'esriMaplexRotationAlignmentType', 'RasterTypeInfo',
           'esriMaplexRightOfLine', 'IDataObjectGroups',
           'IMaplexKeyNumberGroups', 'IBufferProcessingParameter',
           'esriImageReturnMimeData', 'esriRectGradientBar',
           'IBasicHistogram', 'esriT3DAlignment',
           'esriDataGraphTSymbolSmallDot', 'esriMultiBarType',
           'TileImageInfo', 'IMSDHelper', 'ITinRenderer',
           'esriBottomRightCorner', 'FeatureIDSet',
           'IDisplayRelationshipClass', 'IMapServerFindResults',
           'IMapServerLayout', 'IPolygonElement', 'acJoinType',
           'EditTemplateFactory', 'esriGridSquareLabelCenter',
           'IPMFTitleTextElement', 'ImageView',
           'IImageServerIdentifyResultEdit', 'esriQueryResultFormat',
           'IMapServer', 'esriValueRepWidth',
           'esriWMSServerMessageCode_ImageServerWMSStarted',
           'DMSGridLabel', 'ILineLabelPosition',
           'esriWCSServerMessageCode_MapServerWCSNotLicensed',
           'acCrossMarker', 'ILayerExtensionDraw', 'ITextElement',
           'GraphicElements', 'esriDimensionTextFitMoveBegin',
           'FeatureIndex', 'IACShieldSymbol',
           'esriWCSServerMessageCode_GeoDataServerWCSParseKVP',
           'esriGridCornerUpperRight',
           'esriWCSServerMessageCode_ImageServerWCSInvalidDataset',
           'esriSimpleNorth', 'esriRasterUniqueRendererKeyDouble',
           'IRasterRGBRenderer', 'SymbolBorder', 'esriHTMLPopupStyle',
           'esriMapSpatialReference',
           'esriMobileServerMessageCode_FailedToGetAttachmentInfo',
           'esriMobileServerMessageCode_InvalidParentVersion',
           'acBoldItalicFont', 'esriDimensionTextFit',
           'esriMaplexCenteredCurvedOnLine', 'WMSImageServer',
           'TinNodeValueRenderer', 'ImageServerDownloadResults',
           'esriWCSServerMessageCode_GeoDataServerWCSGetCoverage',
           'esriMaplexRotationAlignmentStraight',
           'IStatisticDescriptions', 'esriRasterSelectionMaskINVERT',
           'IMapCacheStorageFormatConvertor',
           'CadastralFabricLayerFactory', 'INetworkEdgeRenderer2',
           'MaplexOverposterProperties', 'RasterServiceHelper',
           'IMapTimeDisplay', 'AlternatingScaleBar',
           'IPrivateServerObjectLANProxy', 'IACLayer2',
           'IRectangleElement', 'esriMaplexGeometricCenter',
           'ILegend2',
           'esriMobileServerMessageCode_FailedToRetrieveCursor',
           'esriGpsConnectionStatusPoorSignal',
           'IDataSourceHelperStandaloneTable', 'ETPC_Highlighter',
           'IMapCooker2', 'LabelCache',
           'esriGraphicFeatureMsgCode_CfgFactory_CleanupFinished',
           'esriGpsSpeedFps', 'ILegendGroups',
           'esriMobileServerMessageCode_FailedToInitialize',
           'IAction', 'esriGpsParityOdd',
           'esriMappingMsgCode_SelectionDrawEnd',
           'esriGpsConnectionErrorInsufficientData',
           'LabelStyleGalleryClass', 'IMaplexRotationProperties',
           'TinAspectRenderer',
           'esriMapServerMsgCode_MessageArrival_QueryRowCount',
           'IMapServerLegendGroups', 'ANNO_E_NULL_NOT_SUPPORTED',
           'ITimeData2', 'LegendClass',
           'IBasicOverposterLayerProperties',
           'RasterUniqueValueRenderer', 'acBottomVTextAlignment',
           'esriScreenPosition', 'IDomainInfo', 'DimensionFeature',
           'MaplexDictionary', 'IRasterSpatialSelection',
           'IRasterTypeInfos', 'esriMaplexAbbrevType',
           'SQLSyntaxInfo', 'IMapServerIdentifyResult2',
           'IGridAxisTicks', 'acLLPlaceAtEitherEnd',
           'esriMapServerMsgCode_FileReadableByArcReaderOnly',
           'esriGraphicFeatureMsgCode_MessageProcessed_QueryAttachmentData',
           'esriWCSServerMessageCode_MapServerWCSGetData',
           'FeatureCursorBuffer', 'esriDimensionTextFitNone',
           'enumServerDSDCollection', 'BmpPictureElement',
           'acFillType', 'DIM_E_UNSUPPORTED_VERSION',
           'ITableIdentity',
           'esriMapServerMsgCode_MessageProcessed_ComputeDistance',
           'esriDimensionDisplay',
           'esriLayerSelectCrossedByTheOutlineOf',
           'IDataObjectGroupArray', 'ITableIdentities', 'acSolidLine',
           'ConvertLabelsToAnnotation', 'LegendFormat',
           'RasterDiscreteColorRenderer', 'CompositeGraphicsLayer',
           'esriScaleBarFixed', 'esriMaplexStraightInPolygon',
           'esriMobileServerMessageCode_DBFieldMappingMismatch',
           'IPublishLayer', 'IText3DElement', 'esriOneLabelPerPart',
           'esriGraphicFeatureMsgCode_MessageArrival_GetServerInfo',
           'esriMaplexOneLabelPerFeature',
           'esriWCSServerMessageCode_GeoDataServerWCSInvalidCRS',
           'IRendererFields', 'IMaplexKeyNumberGroup',
           'IMaplexLabelStyle', 'esriDimensionDisplayBegin',
           'esriGraphicFeatureMsgCode_CfgFactory_DeleteInfo',
           'esriWCSServerMessageCode_GeoDataServerWCSParseKVP11',
           'IMapServerLegendClasses',
           'esriWCSServerMessageCode_MapServerWCSGetCapabilities',
           'IGraphicFeatureServerInit', 'IRasterDataExclusion',
           'IDotDensityUIRenderer',
           'esriMapServerMsgCode_MessageProcessed_GetMapName',
           'esriWCSServerMessageCode_MapServerWCSUnknownRequest',
           'ISymbolSubstitution',
           'esriMapServerMsgCode_ClientCachingAllowedMissing',
           'IDataGroupSeriesProperties', 'esriNetworkRenderer',
           'esriGpsBaudRate56000', 'IPictureElement4',
           'esriValueRepresentations', 'CircleElement',
           'DocumentInfo', 'esriSymbolRotation3DUseExpressionZ',
           'esriSymbolRotation3DUseExpressionY',
           'esriSymbolRotation3DUseExpressionX',
           'E_IMAGESERVER_JPIP_NOT_LICENSED', 'esriImageServerError',
           'annoError', 'ISecureLayer2', 'ICadastralFabricLayer',
           'LineSymbolStyleGalleryClass',
           'GFS_E_LAYER_TABLE_NOT_EDITABLE',
           'esriRasterUniqueRendererKeyTypesEnum',
           'acCenterHTextAlignment', 'IBarrierProperties2',
           'IDataLayer2', 'esriMapTimeRepeatAfterPlaying',
           'enumTriggerTypeUnspecified',
           'esriNetworkJunctionRenderer', 'BiUniqueValueRenderer',
           'LinePatch',
           'esriMapServerMsgCode_MessageProcessed_QueryFeatureData2',
           'esriImageTIFF', 'esriSideMultiBar',
           'esriCadastralParcelOther', 'IMapServer3', 'ITilesTable',
           'IRasterRenderer', 'esriQueryResultRecordSetAsObject',
           'esriMapClipMapExtent', 'AnnotateMap',
           'esriMaplexCenterRight',
           'esriMaplexPolygonPlacementMethod',
           'esriMapServerMsgCode_MessageProcessed_GetTileImageInfo',
           'WMS_E_SRS_NOTUNSUPPORTED', 'enumServerMasterCollection',
           'esriMapServerMsgCode_MessageArrival_QueryData',
           'ILabelEnvironment',
           'GraphicFeatureServerObjectDescription', 'esriVertPosEnum',
           'IRasterCatalogLayer',
           'esriMobileServerMessageCode_RequestReadFailure',
           'IMapServer2', 'IRasterBasemapLayer', 'IMapServer4',
           'esriDataGraphTPenClear',
           'esriMensurationHeightFromBaseAndTopShadow',
           'ImageServerLP', 'ICacheInfo', 'ACSimpleMarkerSymbol',
           'ISymbolShadow',
           'esriMapServerMsgCode_MessageProcessed_QueryDataStatistics',
           'IImageServiceInfo', 'esriCadastralParcelSpecialSurvey',
           'IFeatureIDSet', 'IClassBreaksUIProperties2',
           'esriMaplexOneLabelPerSegment',
           'IDataGraphTSymbolProperties', 'BasicGeoprocessor',
           'acFDiagonalGradientFill', 'acCrossFill',
           'IRenderedThumbnailBuilder', 'esriSizeRendererFlags',
           'RenderingRule', 'MapInset',
           'esriServerLinePlacementAboveAlong', 'acBevelJoin',
           'esriMapServerMsgCode_Layer_QueryHyperlinks_Start',
           'RealTimeFeedSimulator', 'esriCad3DRenderHiddenLine',
           'esriMaplexAlongLineFromEnd',
           'esriMaplexKeyNumberResetType',
           'esriMobileServerMessageCode_FailedParseReqParam',
           'acTopVTextAlignment', 'esriArrowBar',
           'esriMaplexPolygonBoundaryFeature', 'LasDatasetLayer',
           'MapServerFindResults', 'enumLayerMasterCollection',
           'IWMSServer',
           'esriMapServerMsgCode_MessageProcessed_QueryHTMLPopups',
           'esriMaplexPolygonFeatureType',
           'esriMaplexCurvedInPolygon',
           'IMapGeographicTransformations',
           'esriDataGraphTSymbolStar',
           'esriMobileServerMessageCode_ExportMapImageFailed',
           'esriGlobeDocumentVersionInfoSuccess',
           'NetCDFTableFactory', 'PointLabelPlacementDescription',
           'WMTSLayer', 'IMapDescriptions',
           'esriMensurationDistanceAndAngle', 'IRotationRenderer',
           'IWMTSLayer', 'esriMensurationDistanceAndAngle3D',
           'IFeatureIndex', 'AOIBookmark', 'UINT_PTR',
           'IHorizontalLegendItem', 'IFeatureLayerSymbology',
           'ESRITPCStylusType', 'acGradientFillType',
           'ColorRampSymbol', 'esriMediumWeight', 'SymbolShadow',
           'ILayerGeneralProperties', 'IPolarSeriesProperties',
           'esriRasterTransparencyStateMask',
           'ILayerDrawingDescriptions', 'esriSelectionResultEnum',
           'esriSymbolSubstituteIndividualDominant',
           'ICoverageAnnotationLayerWrite', 'IMapDescription3',
           'IMapDescription2', 'esriRotateSymbolGeographic',
           'IDataObjectArray', 'StandaloneTableInfo',
           'IDimensionStyleText', 'esriDataGraphTSymbolCircle',
           'IElementEditVertices', 'IOverposter',
           'IRasterRendererUpdate', 'MultithreadedCommander',
           'esriGpsDOPInfo',
           'esriMapServerMsgCode_MessageArrival_HasLayerCache',
           'esriRasterRenderingBlockMode', 'IMapServerRelationship',
           'GFS_E_EDITOR_TRACKING_TIMESTAMPS_IN_UTC_AND_DATABASETIME_ERROR',
           'IAnnotationExpressionParser',
           'esriMapServerMsgCode_MapNotFound', 'PolygonElement',
           'IMaplexDictionaryEntry',
           'esriWCSServerMessageCode_ImageServerWCSDescribeCoverage',
           'esriMaplexBelowRight', 'IFDOAttributeConversion',
           'IGeoReference', 'esriBottomMidPoint', 'Map',
           'esriMapServerMsgCode_MessageArrival_ExportLayout',
           'IGpsDisplayProperties', 'esriPageFormC',
           'esriFeatureEditToolAutoCompleteFreehand',
           'esriDataGraphTLegendTextSyle',
           'AreaPatchStyleGalleryClass', 'ACFeatureLayer',
           'esriGpsConnectionErrorCommportInUse',
           'esriGlobeDocumentVersionInfo', 'IBarSeriesProperties',
           'esriImageServiceDataTypeElevation',
           'esriServerPointLabelPlacementBelowCenter',
           'HotLinkJScriptEngine', 'esriRasterTransparencyStateEnum',
           'MapServerFindSublayer', 'TextElement',
           'esriLayerSelectionMethod', 'IMapInset',
           'esriMaplexKeyNumberResetTypeNone',
           'esriMapServerMsgCode_MissingParameter', 'IGroupLayer',
           'esriFeatureEditTool', 'esriDataGraphTPenSmallDots',
           'IRasterRendererMaker2', 'acInterstateShieldSymbol',
           'ILayerDescriptor', 'esriImageServiceSourceTypeLayer',
           'RasterBasemapLayer', 'MapServerRESTLayer',
           'esriMaplexOffsetAlongLineMethod',
           'IGraphicFeatureServerReplication',
           'esriMapServerMsgCode_MessageArrival_ExportLegend',
           'IIdentifyObjWindow', 'ILayerMasking',
           'IDataNormalization', 'esriMaplexSoutheastOfPoint',
           'esriCadastralParcelType', 'esriServerHTMLPopupType',
           'IReadingDirection', 'IDisplayExpressionProperties',
           'IRasterRendererColorRamp', 'IJoinTableSourceDescription',
           'esriNetworkTrafficRenderer', 'acTriangleMarker',
           'esriGridCornerLowerRight', 'esriCFRLines',
           'esriMobileServerMessageCode_DirectoryAccessDenied',
           'esriWCSServerMessageCode_GeoDataServerWCSGetData',
           'esriMapServerMsgCode_OutputDirectoryNotFound',
           'SimpleTinIdentifyObj',
           'esriWCSServerMessageCode_GeoDataServerWCSParseXML',
           'TinElevationRenderer', 'IACHashLineSymbol',
           'esriBufferAll',
           'esriMapServerMsgCode_MessageArrival_ToPagePoints',
           'IAnnotationSublayer', 'esriT3DAlignHorizontal',
           'esriPageFormSameAsPrinter',
           'esriLayerSelectAreIdenticalTo', 'FeatureCache',
           'IMapExtent',
           'esriImageServerMessageCode_ImageServerDebug',
           'esriMaplexSouthwestOfPoint', 'TileCacheInfo',
           'esriMapServerMsgCode_MessageProcessed_QueryRowIDs',
           'FieldInfoSet', 'esriMaplexRotationAlignmentPerpendicular',
           'DisplayExpressionProperties', 'esriMaplexCurvedLadder',
           'esriMobileServerMessageCode_SchemaLayerExtractFail',
           'esriMapServerMsgCode_MessageArrival_QueryHyperlinks',
           'esriMaplexFurthestSideOfLabel', 'esriScaleBarAboveEnds',
           'esriMobileServerMessageCode_FailedToOpen',
           'IRasterLayerDrawingDescription', 'IViewRefresh',
           'IMapLayers2', 'acFDiagonalFill', 'CadAnnotationLayer',
           'IDynamicLegendRenderer', 'FieldDomainInfo',
           'esriCad3DRenderMode', 'IBorder',
           'esriCadastralParcelPLSSQuarterSection',
           'RasterBasemapLayerFactory',
           'esriWCSServerMessageCode_MapServerWCSInvalidLayer',
           'IElementCollection', 'esriEveryNthRecord',
           'ISelectionEnvironmentLayer', 'IStandaloneTableCollection',
           'ITemporaryLayer', 'IGraphicsContainerEvents',
           'IRasterDRAShader', 'IOverposterProperties',
           'esriVisibleFeatures', 'esriExtentTypeEnum',
           'esriMapServerMsgCode_FileOpenFailed',
           'esriCanPlaceSymbols', 'IMapServerIdentifyObject',
           'esriRasterRenderingTopToBottomMode',
           'E_IMAGESERVER_BAD_CACHE_SPATIALREFERENCE',
           'esriDataStatTypeCount', 'esriRotateLabelGeographic',
           'esriMaplexCenter',
           'esriWCSServerMessageCode_MapServerWCSParseWriteData',
           'IFeatureSelection', 'E_IMAGESERVER_UNSUPPORTED_OPERATION',
           'esriWCSServerMessageCode_MapServerWCSFailed',
           'IRasterFunctionInfos', 'InkGraphic',
           'esriMapTimeStopAfterPlaying',
           'TerrainPointAttributeRenderer',
           'esriMobileServerMessageCode_LayerNotEditable',
           'esriNetworkArrowType',
           'esriWMSServerMessageCode_ImageServerWMSGetToPost',
           'IHillShadeInfo', 'esriServerLinePlacementCenterAfter',
           'IRasterLayerExport3', 'ITinUniqueValueRenderer',
           'ICacheInfo2', 'SnapGrid',
           'E_IMAGESERVER_FAILED_TO_EXPORTIMAGE',
           'esriFeatureEditToolAutoCompletePolygon',
           'StatisticDescriptions', 'IElementEditVerticesOperation',
           'esriScaleBarDivisionsAndFirstSubdivisions',
           'esriScreenPositionTopLeft', 'ILayerCacheInfos',
           'IGFSTableDescriptions', 'MapFrame',
           'esriMapServerMsgCode_MessageArrival_GetSupportedImageReturnTypes',
           'esriServerPointLabelPlacementBelowLeft',
           'esriServerLinePlacementBelowEnd', 'esriGpsParityNone',
           'IMarkerNorthArrow', 'esriServerLinePlacementBelowAlong',
           'IFDOGraphicsLayerRead', 'IMapServerObjects2',
           'IMapServerObjects3',
           'esriGraphicFeatureServerMsgCodeEnum',
           'SingleDivisionScaleBar', 'MobileServerLP',
           'IACTextSymbol', 'IRasterIdentifyObj',
           'esriMapServerMsgCode_MessageProcessed_IsFixedScaleMap',
           'ChangeDatabaseVersion', 'IPushPin',
           'IPointSeriesProperties', 'IImageDescription',
           'IFillShapeElement', 'acDashDotDotLine',
           'esriGraphColorCustomEach', 'IMosaicRule',
           'E_IMAGESERVER_UNSUPPORTED_REQUEST',
           'esriMaplexPointPlacementMethod',
           'esriMaplexRiverPolygonFeature',
           'esriSizeRendererUseExpression',
           'esriMobileServerMessageCode_ConstructFinish',
           'ILayerFactory', 'esriMappingMsgCode_SelectionDrawBegin',
           'IACSimpleRenderer', 'FieldDomainInfos',
           'IMapServerLegendPatch', 'IDataGraphTPrivate',
           'esriGraphicFeatureMsgCode_MessageProcessed_GetReplicas',
           'ConvertFDOAnnoToCoverageAnno',
           'esriDataGraphTLegendTextXAndPercent',
           'esriGridAxisBottom', 'ISelection', 'acLLPlaceAbove',
           'esriMapServerMsgCode_Layer_GetLegendInfo_End',
           'esriAroundPoint', 'esriSymbolRotation3DFlags',
           'IDataSortSeriesProperties',
           'esriGraphicFeatureMsgCode_CfgFactory_NoCleanupRequired',
           'esriWMSServerMessageCode_ImageServerNotLicensed',
           'enumService', 'ITransparencyRenderer',
           'esriWMSServerMessageCodeEnum',
           'esriMobileServerMessageCode_InvalidVersionedWorkspace',
           'esriMixedStrategy', 'IFieldDomainInfo',
           'esriMapServerMsgCode_MessageArrival_GetMapTile',
           'esriSymbolOverrideXOffset', 'IOverposterLayerProperties',
           'esriMobileServerMessageCode_FileInvalid',
           'esriMobileServerMessageCode_FailedToGetFeatureCursor',
           'TerrainPointUniqueValueRenderer',
           'IRelationshipClassCollectionEdit',
           'esriMaplexUphillAlignment', 'esriViewGeography',
           'esriAnchorPointEnum', 'esriServerLinePlacementAboveEnd',
           'IIndexQuery2', 'IElementProperties', 'DynamicMapEvents',
           'WMSMapLayer', 'acVTextAlignment', 'ImageDescription',
           'esriFindOption',
           'esriGraphicFeatureMsgCode_MessageArrival_GetReplicas',
           'esriMapServerMsgCode_ImageGenerationFailed',
           'esriMappingMsgCode_CustomDrawEnd',
           'esriMaplexCenteredOnPoint',
           'esriMapCacheStorageModeCompact',
           'esriImageServerMessageCode_ImageServerExecuteAISRequest',
           'esriAllFeatures', 'MapTableSubtypeInfos',
           'IRenderedRaster', 'esriStackedMultiBar',
           'IACRasterFillSymbol', 'MobileMapInfo', 'acNumLabels',
           'esriMobileServerMessageCode_InvalidChildVersion',
           'MapImage', 'ITemplateInfo',
           'IAnnotateLayerPropertiesCollection2',
           'esriDescriptionPatchLabel',
           'IDataGraphTGeneralProperties', 'IActionProcessor',
           'GraphicsContainerEvents', 'IFind', 'ILocationTrigger',
           'BasemapLayer', 'esriImageServerMessageCodeEnum',
           'esriCadastralParcelUnknown', 'acGeometryPoint',
           'TilesTable', 'esriDataGraphTLegendTextLeftValue',
           'IAnnotationClassExtension2', 'IACGradientFillSymbol',
           'esriMaplexAbbrevTypeTranslation',
           'esriMapServerMsgCode_MessageArrival_QueryRelatedRecords',
           'IMosaicSubLayer', 'esriLabelWhichFeatures',
           'esriMapServerMsgCode_PMFFileCanNotBeOpened',
           'acSquareMarker', 'IMapServerDataAccess',
           'IConvertFDOAnnoToCoverageAnno',
           'esriGpsConnectionStatusOpen', 'MaplexKeyNumberGroup',
           'esriQueryResultKMLAsMime',
           'DIM_E_CONSTRUCTOR_TOOFEW_VERTICES',
           'acMexicanShieldSymbol',
           'esriMapServerMsgCode_MessageArrival_RefreshServerObjecs',
           'esriMapCacheUpdateRecreateAll', 'IMobileServer',
           'acLineType', 'esriGpsSpeedKph', 'esriViewNone',
           'ITiledMapServer2', 'ITiledMapServer3',
           'FormattedGridLabel', 'esriImageServiceDataTypeRGB',
           'esriMapServerMsgCode_MessageProcessed_QueryData',
           'IMapCacheToRasterFunctionArgument',
           'esriMappingMsgCode_GraphicCount', 'ILegendGroup',
           'esriDataGraphTLegendTextRightValue',
           'esriOneLabelPerShape',
           'esriWCSServerMessageCode_MapServerWCSAISInitialized',
           'ICartoItemInfoHelper',
           'esriMapServerMsgCode_InvalidLicense',
           'esriMapServerMsgCode_LayerIDNotFound',
           'acNumericOnlyLabel',
           'FeatureLayerDrawingDescriptionFactory', 'IMapBarriers',
           'esriGraphicFeatureMsgCode_MessageProcessed_GetLayers',
           'IDoubleFillScaleBar', 'IDynamicLegendClass',
           'esriDynamicLegendType', 'IACSimpleFillSymbol',
           'esriGraphColorMatch',
           'esriGraphicFeatureMsgCode_MessageArrival_QueryIDs',
           'IRelateInfo2', 'FeatureServiceWorkspaceFactory',
           'esriGraphicFeatureMsgCode_MessageProcessed_ImportReplicaDataChanges',
           'esriMapServerMsgCode_MessageArrival_QueryRelatedRecords2',
           'IMapClipOptions', 'IDataObjectEx', 'esriLowWeight',
           'esriImageJPG', 'IPlacedObject', 'IBasicMapIdentifyObject',
           'IRasterUniqueValueRenderer', 'LasUniqueValueRenderer',
           'esriMappingMsgCode_GraphicDrawBegin',
           'esriServerPointLabelPlacementAboveLeft',
           'esriMapServerMsgCode_MessageProcessed_HasLayerCache',
           'esriMapDocumentVersionInfoSuccess', 'IConditionalAction2',
           'IConditionalAction3', 'IConditionalAction4',
           'IMapServerSublayer2', 'esriNetworkArrowTypeEndpoint',
           'GroupLayerFactory', 'esriMaplexUnitInch',
           'ISimpleMapGridBorder', 'ITimeData', 'acLightGrayFill',
           'IRelateInfos', 'SimpleElementSelection',
           'esriMapServerMsgCode_MessageProcessed_QueryFeatureIDs',
           'esriGraphicFeatureMsgCode_MessageArrival_DeleteAttachments',
           'ICad3DRenderMode', 'esriScaleBarBeforeBar', 'LODInfo',
           'IGeoReferenceEvents', 'DataObjectTable',
           'acBackgroundHashLine', 'esriMaplexStrategyAbbreviation',
           'IRenderingRule', 'IStandaloneTableInfos',
           'esriGlobeDocumentTypeGmx',
           'esriLayerSelectCompletelyWithin', 'MapServerLegendInfo',
           'ITableEditResult', 'CacheDescriptionInfo',
           'IImageServer4', 'FeatureServiceEditExtension',
           'IIndexGrid', 'RasterLayer', 'esriRelateResultFormat',
           'IRealTimeFeed', 'esriSymbolOverrideBold',
           'esriHyperlinkTypeScript', 'esriValueRepRadius',
           'esriImageServerMessageCode_ImageServerComputeHistograms',
           'SidPictureElement',
           'esriGraphicFeatureMsgCode_MessageProcessed_Query',
           'SubtypeInfos', 'ChartRenderer', 'esriSymbolOverrideSize',
           'esriDataGraphTPenType',
           'esriMapServerMsgCode_IgnoreCacheMissing',
           'IEnumRasterUniqueValueColor', 'esriBottomSide',
           'QueryByLayer', 'IMapDocument', 'DynamicHit',
           'esriGridAxisTop', 'esriMaplexLinePlacementMethod',
           'esriGraphicFeatureServerMessageCode_NonSDEDataUsed',
           'esriWCSServerMessageCode_ImageServerWCSParseXML',
           'esriMobileServerMessageCode_NotLicensed',
           'esriIndividualLayerCaches', 'IACAcetateLayerAdmin',
           'esriMobileServerMessageCode_InvalidWorkspace',
           'enumNoCategory', 'IEditResult',
           'esriRasterStretch_DefaultFromSource', 'IDimensionStyles',
           'PictureElement', 'IMxdServerObjects',
           'IRasterDisplayProps', 'IGraphicFeature', 'EllipseElement',
           'esriMapServerMsgCode_MessageProcessed_GetLegendInfo',
           'esriMapServerMsgCode_PMFUnknownError',
           'esriDimensionMarkerFitText', 'IMapTableSourceDescription',
           'esriDataGraphTPenInsideFrame', 'dimError', 'IMapImages',
           'IFeatureCache', 'IRotationRenderer2',
           'GFLayerTableDataMapping', 'esriDimensionMarkerFitNone',
           'IFeatureServiceEditExtension', 'esriMaplexCenterOfLabel',
           'ACRasterFillSymbol', 'CadastralFabricLayer',
           'IStatisticsRequest', 'acHorizontalFill',
           'esriMapTimePlayOption', 'esriMensurationPoint3D',
           'WCSImageServer', 'IAnnotateMapProperties',
           'IFeatureRenderer', 'IRasterIdentifyObj2',
           'UniqueValueInfos', 'IFeatureSelectionRenderer',
           'FeatureServiceLayerEditExtension',
           'esriMappingMsgCode_GraphicSelectionDrawEnd',
           'esriMaplexAbbrevTypeEnding',
           'esriMappingMsgCode_GeographyDrawBegin', 'IAdvancedShader',
           'IOleFrame', 'esriSymbolOverrideCharSpacing',
           'IDataExclusion2',
           'esriMobileServerMessageCode_SynchronizeAttachmentStats',
           'esriCenter', 'esriRasterSelectionMaskSET',
           'esriMapServerMsgCode_MessageArrival_IsFixedScaleMap',
           'esriServerPointLabelPlacementCenterRight',
           'esriJPIPServerMessageCodeEnum', 'esriMapClipType',
           'esriLayerSelectWithinADistance',
           'esriMappingMsgCode_Rendering', 'IImageServerLayer',
           'IMapServerHyperlink', 'MarkerElement',
           'esriMobileServerMessageCode_InvalidProperty',
           'IIMSGlobeXMLParser', 'esriMaplexUnitPercentage',
           'ILegendClassFormat', 'esriMaplexNortheastOfPoint',
           'esriSideAllMultiBar', 'IMapAdmin',
           'IIMSGlobeSubServiceDescription',
           'IDimensionClassExtension2', 'esriSymbolOverrideFlipAngle',
           'esriMapServerMsgCode_MessageProcessed_QueryFeatureCount2',
           'esriMapServerMsgCode_MessageProcessed_GetSQLSyntaxInfo',
           'IFeatureLayerExtendedDefinition',
           'esriMapServerMsgCode_FormatNotSupported',
           'esriNetworkRendererLast', 'acLLPlaceAtEnd',
           'esriSpecifiedAngles', 'esriDataStatTypeSum',
           'esriMaplexCenterLeft', 'esriCadastralParcelLayerType',
           'esriWCSServerMessageCode_MapServerWCSInitialized',
           'esriMapServerMsgCode_PMFReadMapError',
           'esriSymbolOverrideYOffset',
           'E_IMAGESERVER_INVALID_VIEW_ID', 'IRowIdentifyObject',
           'QueryResultOptions', 'IMSSymbolImporter',
           'esriHyperlinkTypeURL',
           'esriGraphicFeatureMsgCode_MessageProcessed_QueryFromService',
           'esriMapTimeExtentOption', 'ITinIdentifyObj2',
           'ServerSymbolOutputOptions',
           'esriServerPictureOutputAsPNG', 'IMapServerRow',
           'IACImageLayer', 'esriMaintainDensityByDotSize',
           'IMapDescriptor', 'esriMaplexLabelAnchorPoint',
           'esriMobileServerMessageCode_SpatialReferenceDefault',
           'NewDimensionFeedback',
           'esriMapServerMsgCode_Preparation_Start', 'ISubtypeInfos',
           'esriMapDocumentVersionInfo', 'IElementProperties3',
           'IElementProperties2', 'ISelectionEnvironmentThreshold',
           'IIdentify',
           'esriWCSServerMessageCode_MapServerWCSDatasetInitialized',
           'esriScaleBarBelowEnds', 'IAnnotateMap',
           'MapServerIdentifyResult',
           'esriMappingMsgCode_LabelingLayers',
           'esriRelateResultAMFAsMime',
           'esriWCSServerMessageCode_GeoDataServerWCSParseXML11',
           'acLineLabelPosition', 'esriMaplexPlacementQualityMedium',
           'EngineNetworkLayerFactory', 'IPositionTrails',
           'esriNormalizeByField', 'DomainInfo',
           'esriImageServerMessageCode_ImageServerStart',
           'acLeftHTextAlignment', 'esriTRAreaErrors',
           'acMediumLabelWeight',
           'esriWMSServerMessageCode_ConstructEnded',
           'esriGraphicFeatureMsgCode_MessageArrival_GetCount',
           'ICadastralFabricParcelLayer', 'IMxdServerStatus',
           'IDataObjectType', 'BasicPlacedObject', 'ImageType',
           'esriGraphicFeatureServerMessageCode_WarningMessage',
           'esriMaplexAlongLineFromStart', 'IDocumentInfo',
           'IRotateOperation', 'MapServerLP',
           'esriWCSServerMessageCode_GeoDataServerWCSParseWriteData',
           'IScatterPlotMatrixSeriesProperties',
           'esriMobileServerMessageCode_SynchronizeFeatureStats',
           'SubtypeInfo', 'esriFeatureEditToolLine', 'ILayoutImage',
           'TinContourRenderer', 'IRasterLayerExport2',
           'esriMaplexBelowLeft', 'acFontStyle',
           'esriImageServerMessageCode_ImageServerExportMapImage',
           'esriDataGraphTSymbolCross', 'LasDatasetLayerFactory',
           'ImageServerDownloadResult', 'DataObjectType',
           'CalibratedMapGridBorder', 'esriScreenPositionNone',
           'esriMobileServerMessageCode_InvalidServerObject',
           'IPageLayout2', 'FeatureLayerDrawingDescription',
           'ICalcRendererValues', 'IMapServerSourceDescription',
           'IACRenderer',
           'esriGraphicFeatureMsgCode_Message_ErrorMissingQueryCriteria',
           'esriMapServerMsgCode_MessageProcessed_QueryRelatedRecords2',
           'esriMapServerMsgCode_MessageProcessed_ToPagePoints',
           'QueryTableDataSourceDescription',
           'EngineCadAnnotationLayerFactory',
           'HorizontalBarLegendItem', 'esriNetworkArrowTypeNoArrow',
           'esriImageServiceSourceType', 'ILayerPosition',
           'esriMapServerMsgCode_MessageArrival_QueryAttachmentData',
           'esriMobileServerMessageCode_FailedToConvert',
           'esriWMSServerMessageCode_ImageServerWMSGetCapabilities',
           'esriGraphicFeatureMsgCode_MessageProcessed_GetTables',
           'CacheInfo',
           'esriWCSServerMessageCode_ImageServerWCSWrongPixelType',
           'MapDescriptions', 'IFormattedGridLabel',
           'esriMapServerMsgCode_MapReaderOpen_Start',
           'IMapServerBookmarks',
           'esriCadastralParcelSimultaneousConveyance',
           'ACSimpleFillSymbol',
           'esriMapServerMsgCode_Preparation_End', 'DynamicGlyph',
           'esriMapClipPageIndex', 'IRasterRendererUniqueValues',
           'IMapOverposter', 'esriHTMLPopupStyleTwoColumnTable',
           'ITerrainRenderer', 'esriDataGraphTLegendTextXValue',
           'esriT3DAlignVertical',
           'esriMappingMsgCode_SymbolDrawTime', 'MapServerRow',
           'esriGraphicFeatureMsgCode_MessageArrival_ExportReplicaDataChanges',
           'esriLabelPatchDescription',
           'esriMapServerMsgCode_MessageArrival_GetMapCount',
           'esriCanAddBarriers', 'IAnnotateFeature',
           'esriStacked100MultiArea', 'ModifyDimensionFeedback',
           'esriBelow', 'IMSDHelper2', 'PointPlacementPriorities',
           'esriMobileServerMessageCode_CoreClassCreateFail',
           'esriPageMappingCrop', 'ILabelEngineLayerProperties',
           'IScaleDependentRenderer',
           'esriMapServerMsgCode_OutputDirectoryAccessDenied',
           'esriMobileServerMessageCode_ClientVersionReduction',
           'RealTimeFeedManager', 'StatisticDescription',
           'ITableEdits', 'esriSymbolRotation3DRandomZ',
           'esriCylinderBar',
           'esriGraphicFeatureMsgCode_MessageProcessed_DeleteByID',
           'FeatureLayerFactory',
           'esriWCSServerMessageCode_GeoDataServerWCSInvalidDataset',
           'esriMobileServerMessageCode_ExtInitFailure',
           'esriOverposterCaps', 'esriCadastralParcelPLSSTownship',
           'IProtectNameCarto', 'RasterTypeInfos', 'IServiceData',
           'esriMapServerMsgCode_MessageArrival_ExportScaleBar',
           'IStatisticDescription', 'IColorRampSymbol',
           'ANNO_E_INVALID_FONT_SIZE', 'IImageServerProxyImpl',
           'IRasterClassifyUIProperties', 'IMapFrameEvents',
           'IUniqueValuesDef', 'acLLPlaceInLine', 'enumRealtimeLayer',
           'esriAutoExtentMarginPageUnits', 'esriPageFormE',
           'esriBasicNumLabelsOption',
           'esriWMSServerMessageCode_ImageServerWMSGetMap',
           'IFeatureExportInfoGenerator', 'IIndexQuery',
           'esriGpsBaudRate300', 'RasterThumbnailBuilder',
           'SteppedScaleLine', 'esriMaplexBestPositionAlongLine',
           'esriMapCacheExport',
           'esriMapServerMsgCode_MessageProcessed_GetCacheName',
           'ICadIdentifyObj2', 'GraphicFeatures',
           'acOvalShieldSymbol', 'esriPageFormD',
           'esriMapServerMsgCode_MessageArrival_QueryFeatureIDs',
           'IImageServiceInfo3', 'IImageServiceInfo2',
           'esriCadastralParcelSeparatedRight',
           'esriMaplexRiverFeature', 'esriDimensionTextDisplay',
           'LinePatchStyleGalleryClass', 'NestedLegendItem',
           'esriGraphicFeatureMsgCode_MessageProcessed_Update',
           'IMapSurround',
           'esriMapServerMsgCode_MessageProcessed_GetCacheStorageInfo',
           'ISimpleRenderer', 'MapServerBookmark', 'esriBarStyle',
           'ITerrainAttributeRenderer', 'WMSLayer', 'INorthArrow2',
           'esriMaintainDensityBy', 'E_IMAGESERVER_CANT_MEASURE_3D',
           'IOverposterOptions',
           'esriServerPointLabelPlacementAboveRight', 'IImageServer',
           'LabelEnvironment', 'MapServerLegendInfos',
           'esriLabelExpressionJScript', 'IRasterDefaultsEnv2',
           'IRasterDefaultsEnv3', 'IRasterDefaultsEnv4',
           'IRasterDefaultsEnv5', 'IRasterDefaultsEnv6',
           'IRasterDefaultsEnv7', 'IRasterDefaultsEnv8',
           'IRasterDefaultsEnv9', 'esriQueryResultAMFAsMime',
           'IImageInset',
           'esriImageServerMessageCode_ImageServerExportImage',
           'ACMap', 'esriChooseLabelStyle',
           'esriDataGraphTSymbolRectangle', 'esriGpsBaudRate19200',
           'esriWCSServerMessageCode_GeoDataServerWCSGetCapabilities',
           'IIndexGridTabStyle', 'enumLayer',
           'esriMapServerMsgCode_MessageArrival_GetLegendInfo',
           'esriCadastralFeature', 'acRectangleShieldSymbol',
           'MaplexKeyNumberGroups', 'esriPlaceWhereClick',
           'esriLayerEventHintLayerAddedToGroup', 'IDatasetRenderer',
           'ITimeTableDefinition', 'esriMaplexConstrainOffset',
           'HorizontalLegendItem', 'IMapServerInit',
           'esriMaplexLineFeature', 'CacheRasterDatasetName',
           'IAreaSeriesProperties',
           'IRasterClassifyColorRampRenderer',
           'esriMobileServerMessageCode_GetBinaryFailure',
           'esriDataGraphTPenDash', 'acAllLowerPrintMode',
           'LayerFactoryHelper',
           'esriMapServerMsgCode_MessageArrival_GetDefaultMapName',
           'esriMapDocumentTypeUnknown',
           'esriMapServerMsgCode_MessageArrival_getLayerTile',
           'ILasDatasetLayer', 'esriMapServerMsgCode_IsCacheMissing',
           'esriMaplexUnitPoint', 'IDataGraphBase',
           'IOrderedLayerFields',
           'esriMapServerMsgCode_PMFGlobeEmbedded',
           'esriMapCacheStorageFormat', 'IACRasterMarkerSymbol',
           'LegendItemStyleGalleryClass', 'IAnnotationFeature2',
           'VerticalLegendItem', 'RelateInfo', 'IOlePictureElement',
           'IHTMLPopupIdentify2', 'IRasterFunctionInfo',
           'esriMobileServerMessageCode_InvalidPolyGeometry',
           'MapFrameDescriptions',
           'esriMapServerMsgCode_MessageArrival_FromMapPoints',
           'esriCFRLinePoints', 'esriGridAxisRight', 'RelateInfos',
           'esriMobileServerMessageCode_DeleteUploadDirFailure',
           'esriCad3DRenderWireFrame', 'esriSymbolSubstituteNone',
           'esriNoneMultiBar', 'esriMappingMsgCode_ExecutingQuery',
           'acMiterJoin', 'esriDataGraphTPenDashDotDot',
           'IDataGraphTAxisProperties',
           'IPolygonLabelPlacementDescription', 'IMapIdentifyObject',
           'MaplexOverposterLayerProperties',
           'esriMapServerMsgCode_OnStartFailed',
           'IEditTemplateFactory', 'ITemplateInfos',
           'esriGlobeDocumentTypeUnknown',
           'esriWCSServerMessageCode_GeoDataServerWCSDatasetInitialized',
           'DataObject', 'IACAxl', 'DummyLayer',
           'MapServerHyperlinks', 'ILayerSymbologyExtents',
           'LabelingDescription', 'esriAlwaysStraight',
           'ICalcRendererValues2',
           'esriMobileServerMessageCode_FailedToCreateVersion',
           'IIMSSubLayer',
           'esriMapServerMsgCode_MessageProcessed_GetDefaultLayerDrawingDescriptions',
           'esriGraphicFeatureMsgCode_MessageArrival_Update',
           'esriNormalizeByLog', 'IRealTimeFeedManager', 'ISnapGrid',
           'IQueryResultOptions', 'esriSelectedFeatures',
           'FeatureServerInfo', 'acUnderlineFont', 'acLLPlaceBelow',
           'ITemporalSearch', 'MapServerLegendClasses',
           'GraphicFeatureServerLP', 'esriHighWeight',
           'esriDimensionTDExpression', 'IHotlinkContainer',
           'acGeometryLine', 'esriAlwaysHorizontal',
           'ITimeDisplayTable', 'MapServerRelationships',
           'esriGraphicFeatureMsgCode_Message_LayerTableNotEditable',
           'esriRasterStretchTypesEnum', 'IRasterStretchMinMax',
           'IDynamicLayer', 'esriGpsBaudRate1200',
           'BackgroundStyleGalleryClass', 'IEllipseElement',
           'NorthArrowStyleGalleryClass',
           'esriImageServerMessageCode_CapabilityUnsupported',
           'RasterShader', 'esriMapTimeExtentUndefined',
           'esriMobileServerMessageCode_InvalidClientChecksum',
           'esriWMSServerMessageCode_CanNotParseSLD', 'PageLayout',
           'esriOverposterPointPlacementMethod', 'IMapTableInfo',
           'esriBasicOverposterWeight', 'IFeatureBookmark',
           'esriGraphicFeatureMsgCode_MessageArrival_QueryRelatedObjects',
           'IMeasuredGrid',
           'esriMapServerMsgCode_MessageProcessed_GetTileCacheInfo',
           'IACTrueTypeMarkerSymbol', 'IBasicMap2',
           'esriAutoExtentNone', 'esriMaplexStackingJustification',
           'IIMSSymbolImporter', 'IMapCache', 'IMapServerRESTLayer',
           'IMixedFontGridLabel', 'RasterColormapRenderer',
           'esriMapServerMsgCode_InvisibleOrInvalidFieldInSubField',
           'RelateDescription', 'ITOCGroup',
           'esriHTMLPopupStyleXSLStylesheet',
           'esriMaplexOffsetHorizontalFromLine',
           'esriMaplexRotationAlignmentHorizontal', 'ImageDisplay',
           'IMapLayerInfo', 'esriSingleFusedMapCache',
           'acCircleMarker', 'acAllUpperPrintMode',
           'esriServerLinePlacementBelowBefore', 'esriCFRParcels',
           'esriWCSServerMessageCode_GeoDataServerWCSUnknownRequest',
           'esriAnnotationStatus', 'ACRasterShieldSymbol',
           'esriWMSServerMessageCode_ImageServerWMSGetData',
           'MaplexLabelStyle',
           'esriMobileServerMessageCode_GetSchemaRequestError',
           'esriCadastralParcelPLSSSection', 'IEnumMapSurround',
           'esriRasterStretch_StandardDeviations',
           'esriISLFootprintDisplayOptEnum', 'NetCDFLayerFactory',
           'MapTableSourceDescription', 'TextSymbolStyleGalleryClass',
           'IEnumElement', 'CoverageAnnotationLayer',
           'esriMapTimeExtentSpecifiedLayer',
           'esriMaplexStrategyFontCompression',
           'esriRasterStretchStats_GlobalStats',
           'esriMapServerMsgCode_OnStopFailed',
           'esriScaleBarAfterBar',
           'esriWCSServerMessageCode_ImageServerWCSParseWriteData',
           'ACImageLayer', 'esriScaleTextRelative',
           'esriSymbolRotation3DNone',
           'esriScaleBarDivisionsAndSubdivisions', 'SymbolBackground',
           'esriMapServerMsgCode_MessageProcessed_Find',
           'esriBufferInsideExcludeRing',
           'esriMapServerMsgCode_DisconnectedFromData',
           'IDataLayerExtension', 'esriScreenPositionMiddleLeft',
           'IMapTimeDescription', 'ICacheDatasetInfo',
           'ILayerDrawingDescriptionFactory', 'IServiceDataOptions',
           'acButtCap', 'ILookupLegendClass',
           'IGraphicsContainerProperty', 'ILayerDescription',
           'LineLabelPosition', 'esriStacked100MultiBar',
           'IGraphicsComposite', 'esriBufferOutside',
           'esriScaleTextStyleEnum', 'GeoImageDescription',
           'esriViewGraphicSelection', 'esriSymbolSubstituteType',
           'esriMappingMsgCodeEnum',
           'esriWCSServerMessageCode_MapServerWCSStarted',
           'esriMaplexHorizontalInPolygon', 'esriPlacementCode',
           'esriWCSServerMessageCode_GeoDataServerWCSFailed',
           'esriGraphicFeatureServerMsgCode_MixedEditingModeNotAllowed',
           'esriMobileServerMessageCode_InvalidExtentType',
           'IImageServerObjects',
           'esriWCSServerMessageCode_GeoDataServerWCSAISInitialized',
           'esriServerHTMLPopupTypeNone', 'IMarker3DRotationAngles',
           'SelectionEnvironment', 'EditTemplateManager',
           'TinLayerFactory', 'esriLayerSelectBoundaryTouches',
           'esriMappingMsgCode_GeographyDrawEnd',
           'esriDataNormalization',
           'esriServerLinePlacementCenterStart',
           'esriMobileServerMessageCode_FileNotFound',
           'DimensionStyles', 'IMSGlobeConnection',
           'SimpleIdentifyObject',
           'esriImageServerMessageCode_ImageServerGetServiceInfo',
           'MaplexDictionaries',
           'esriWCSServerMessageCode_ImageServerWCSUnknownRequest',
           'esriSelectionResultAdd', 'IIdentifyObj',
           'esriWCSServerMessageCode_ImageServerWCSParseKVP',
           'IInteractiveSearch', 'IOverposterLayerProperties2',
           'IDataSourceHelperMap', 'ITinIllumination',
           'esriDataSampling', 'IMapServerProxyImpl',
           'esriMobileServerMessageCode_FailedToCompressToJPEG',
           'RasterLayerDrawingDescription', 'RelatedRecordGroups',
           'IShadow',
           'esriMapServerMsgCode_CanNotIgnorecacheIfDisconnected',
           'IImageDisplay2', 'esriDMSGridLabelStandard',
           'IFeatureCache2', 'esriSymbolOverrideEnum',
           'esriMobileServerMessageCode_InvalidLayerIndex',
           'INetworkIdentifyObj', 'esriSymbolOverrideUnderline',
           'esriViewBackground', 'LayerResultOptions',
           'esriClassifyGeometricalInterval',
           'esriMaplexKeyNumberHorizontalAlignment',
           'IRasterFormatInfo', 'esriImageGIF', 'Text3DElement',
           'IMapSurroundFrame', 'esriServerLinePlacementCenterBefore',
           'esriNoneMultiArea', 'esriGridAxisEnum', 'RoundedTabStyle',
           'esriMapServerMsgCode_MessageArrival_GetCacheStorageInfo',
           'esriMapServerMsgCode_MessageProcessed_GetVirtualCacheDirectory',
           'esriGraphicFeatureServerMessageCode_InfoMessage',
           'IHighlightSuppressionAction', 'esriPatchDescriptionLabel',
           'esriGpsBaudRate57600', 'ISeriesProperties',
           'IFrameElement', 'esriFeatureEditToolRectangle',
           'FieldInfo', 'ITerrainLayer2',
           'esriMapServerMsgCode_CanNotConnectToCache',
           'esriGpsConnectionErrorInApplication', 'WCSLayerFactory',
           'IRelatedRecordGroup',
           'esriRasterStretch_HistogramSpecification',
           'IMapServerInfo', 'TerrainDirtyAreaRenderer',
           'IMapTableTimeDescription', 'IColorChannelMapping',
           'esriDataGraphTSymbolTriangle', 'AnnotationPythonEngine',
           'esriMensurationPoint', 'RasterRGBRenderer', 'Scalebar',
           'ETPC_Ball', 'esriServerPolygonLabelPlacementType',
           'GraphicFeature', 'esriSymbolOverrideFontName',
           'esriHorzPosEnum',
           'esriMapServerMsgCode_MessageProcessed_QueryRasterValue',
           'EngineTopologyLayerFactory', 'PropertyInfo',
           'IUniqueValueRenderer', 'ILayerDrawSetup', 'ILegendClass',
           'IAnnotateMap2', 'ICacheStorageInfo',
           'esriWCSServerMessageCode_ImageServerWCSDatasetInitialized',
           'esriISLFootprintDisplayAll', 'esriMaplexPolygonFeature',
           'IDataGraphCollection', 'esriDimensionDisplayBoth',
           'DimensionStyle', 'RepresentationMarkerStyleGalleryClass',
           'esriMapServerMsgCode_MessageArrival_QueryHTMLPopups2',
           'esriMapServerMsgCode_MessageArrival_QueryRowIDs',
           'ScaleText', 'LabelStyle', 'ICadastralFabricSubLayer',
           'esriRasterPyramidAlwaysBuild',
           'esriMaplexGAStraightNoFlip',
           'esriGraphicFeatureServerMessageCode_ConstructStarted',
           'IMaplexRotationProperties2', 'IGFLayerTableDataMapping',
           'esriGraphicFeatureMsgCode_MessageArrival_ImportReplicaDataChanges',
           'NetworkLayer', 'IACSymbol', 'IImageDisplay',
           'IModifyDimensionFeedback', 'IACFeatureLayerAdmin',
           'RasterRendererMakerDefault',
           'esriGraphicFeatureServerMessageCode_ConstructEnded',
           'esriGraphicFeatureMsgCode_MessageProcessed_UnregisterReplica',
           'MapServerLayerFactory', 'ILODInfo',
           'HotLinkExpressionProperties', 'TableEditResults',
           'esriDataGraphTSymbolType',
           'esriMapServerMsgCode_MessageProcessed_QueryFeatureData',
           'IACSimpleLineSymbol', 'ITerrainRenderer2',
           'esriGlobeDocumentTypePmf', 'GFSTableDescriptions',
           'IGridLabelExport', 'esriGpsParityMark',
           'esriMobileServerMessageCode_RowUpdateFailure',
           'esriMapServerMsgCode_PMFFilePasswordProtexted',
           'IACSimpleLabelRenderer',
           'esriGraphicFeatureServerMessageCode_DefaultZValueReadingError',
           'esriMapServerMsgCode_MessageArrival_GetServiceConfigurationInfo',
           'IEditResults', 'RenderedRaster',
           'esriMapServerMsgCode_MessageArrival_QueryFeatureData2',
           'IRealTimeFeedSimulator', 'IImageView',
           'esriWCSServerMessageCode_ImageServerWCSParseKVP11',
           'esriNormalizeByNothing', 'TableEdit',
           'esriNetworkArrowTypeMidpoint', 'IPictureElement5',
           'MobileSync', 'esriRasterStretch_PercentMinimumMaximum',
           'IMapReader', 'IPictureElement3', 'IPictureElement2',
           'esriDataGraphTPenDashDot', 'IElementEditCallout',
           'IHotLinkExpressionProperties', 'ImageCooker',
           'esriGraphicFeatureServerMessageCode_DefaultZValueBeingUsed',
           'esriSelectionResultXOR',
           'esriMapServerMsgCode_MessageArrival_QueryAttachmentInfos',
           'IWMSMapLayer2', 'GroupElement', 'esriGlobeDocumentType',
           'ServerLayerExtension',
           'esriMapServerMsgCode_MessageProcessed_ExportNorthArrow',
           'esriWCSServerMessageCode_MapServerWCSParseXML11',
           'esriPageFormTabloid', 'IMaplexOverposterLayerProperties',
           'INestedLegendItem', 'GraphicSnapEnvironment',
           'MapTableSubtypeInfo', 'IStandaloneTable',
           'ImageQueryFilter',
           'esriMobileServerMessageCode_InvalidGIDIndex',
           'IBoxPlotSeriesProperties', 'EditTemplate', 'MeasuredGrid',
           'esriSymbolOverrideBackground',
           'esriRasterSelectionMaskCOPY', 'esriMaplexBelowLine',
           'acHorizontalGradientFill', 'StandaloneTableDescriptions',
           'esriMaplexNearestSideOfLabel',
           'esriServerPictureOutputAsPNGInMime',
           'esriRasterPyramidOptEnum',
           'esriGraphicFeatureMsgCode_MessageProcessed_GetCount',
           'ISelectionEvents', 'IBarrierProperties', 'acDashLine',
           'esriImageServerMessageCode_ImageServerFailed',
           'esriPageFormCUSTOM', 'esriMappingMsgCode_LayerDrawBegin',
           'IEnumSpatialBookmark', 'ImageServerObjectDescription',
           'esriValueRepArea', 'esriMaplexAboveCenter',
           'IFeatureFindData', 'esriPlacedObjectType',
           'IACGroupRenderer', 'IDimensionProtectNames',
           'esriTopMidPoint', 'AnnotateMapProperties',
           'IFeatureServerInfo', 'wmsError',
           'esriRelateResultAMFAsURL', 'MobileServer',
           'esriMapServerMsgCode_MessageArrival_GetMapName',
           'IDynamicHit', 'GroupLayer', 'IGraphicsLayer',
           'IGFSTableDescription',
           'esriImageServerMessageCode_ImageServerNotLicensed',
           'IMxdServer',
           'esriMobileServerMessageCode_PrepareMapServerFailed',
           'RasterFormatInfo', 'IDynamicMapTableDescription',
           'BasemapSubLayer', 'IMobileLayerInfos', 'FeatureLayer',
           'esriRotationField', 'IRasterTypeInfo',
           'esriExtentPageIndex', 'esriGpsSpeedKnots', 'esriImageAI',
           'IRelateInfo', 'IImageServerEditResults',
           'IUniqueValueInfos', 'IContextAnalyzer',
           'ACSimpleLineSymbol', 'ImageResults', 'IMapInset2',
           'CenterAndScale', 'LegendGroups',
           'esriGraphicFeatureMsgCode_MessageProcessed_ApplyEdits',
           'esriNetworkArrowSymbolBothWays', 'LocatorRectangle',
           'TinLayer', 'IFDOGraphicsContainer',
           'esriHTMLPopupStyleRedirectedHTML',
           'esriJPIPServerMessageCode_Initialized',
           'esriMapServerMsgCode_MessageProcessed_ExportScaleBar',
           'esriLayerEventHintVisibility', 'IBackgroundTabStyle',
           'HotLinkPythonEngine', 'enumAttributeTrigger',
           'MapLayerInfo', 'MapServerConfigurationFactory',
           'esriImageServerMessageCode_ImageServerMosaic',
           'IAnnoClassAdmin', 'IPageLayout',
           'esriMapServerMsgCode_MessageArrival_QueryFeatureCount',
           'EngineCadLayerFactory', 'IRasterStretch',
           'esriAnnoStatusPlaced', 'LabelClassDescription',
           'esriScreenPositionBottomCenter', 'IPictureNorthArrow',
           'esriScaleBarOne', 'enumActionCategory',
           'esriRelateResultJsonAsURL',
           'esriGraphicFeatureServerMsgCode_TableLayerIDNotFound',
           'GpsFeed', 'IDotDensityRenderer',
           'esriMobileServerMessageCode_SynchronizeAttachmentRate',
           'IProportionalSymbolRenderer', 'IDataBrowser',
           'ICoverageAnnotationLayerFactory',
           'esriGraphicFeatureMsgCode_MessageArrival_ApplyEdits',
           'IBasemapSubLayer', 'acRightHTextAlignment',
           'esriPlacementSystemError', 'IGridLabel2', 'IMSMapLayer',
           'acMarkerType', 'ITerrainLayer',
           'LineLabelPlacementDescription',
           'esriMobileServerMessageCode_FailedParseParams',
           'IMapTableInfo3', 'MarkerNorthArrow',
           'ILayerTablesAndDataMappings', 'esriT3DRotateAxisY',
           'UniqueValueInfo', 'IBackground', 'esriMapDocumentTypeLyr',
           'IDimensionClassExtension', 'WCSServer',
           'E_RASTERLAYER_UNKNOWN_ERROR', 'IMapFrameDescriptions',
           'esriScaleTextCustom', 'esriMapClipNone',
           'esriLabelExpressionPython', 'IGraphicsContainerSelect',
           'IBoundsProperties',
           'esriGraphicFeatureMsgCode_MessageProcessed_UpdateAttachments',
           'IMapServerData', 'acCapType',
           'esriServerHTMLPopupTypeAsHTMLText', 'acLLPlaceRight',
           'BorderStyleGalleryClass', 'IOverposter4',
           'IAnnoClassAdmin2', 'IAnnoClassAdmin3',
           'IMaplexOverposterProperties2',
           'esriCadastralControlPoint', 'IOverposter2',
           'IOverposter3', 'PngPictureElement',
           'esriIdentifyAllLayers', 'esriDimensionTypeLinear',
           'DimensionClassDescription', 'ScaleBarStyleGalleryClass',
           'E_IMAGESERVER_NO_DYNAMICIMAGEWORKSPACE',
           'IImageServerEditResult', 'ElementCollection',
           'ITopologyLayer', 'esriGpsBaudRate14400',
           'IAnnotationExpressionEngine', 'IWCSLayer',
           'esriMapServerMsgCode_MessageProcessed_GetMapTableSubtypeInfos',
           'FeatureBookmark', 'IMapServerLayer',
           'IGdbRasterCatalogLayer', 'IRasterShader',
           'esriWMSServerMessageCode_InvalidPointer', 'QueryResult',
           'GFSReplicaDescription', 'ACScaleDependentRenderer',
           'esriDataGraphTLegendTextPercent',
           'esriRelateResultRelatedRecordSetAsObject',
           'esriImageServerMessageCode_ImageServerUnknownRequest',
           'esriMensurationHeightFromBaseAndTop',
           'esriMapServerMsgCode_MissingServerEnvironment',
           'E_IMAGESERVER_FAILED_TO_GETIMAGE',
           'esriBufferSpatialReferenceType', 'TableEdits',
           'esriMobileServerMessageCode_InvalidFeatureLayer',
           'esriClassifyEqualInterval', 'ICoverageAnnotationLayer2',
           'esriMappingMsgCode_GroupLayerDrawEnd', 'IMobileSync2',
           'esriMapServerMsgCode_MessageArrival_ComputeDistance',
           'ISelectionEnvironment', 'IClassBreaksRenderer',
           'GFS_E_MISSING_EDITOR_TRACKING_TIMEZONE_ERROR',
           'CacheControlInfo', 'IIMSGlobeConnection',
           'esriMobileServerMessageCode_DirectoryNotFound',
           'IMapServerIdentifyResult', 'esriLeftSide',
           'IDataObjectTypes',
           'esriWCSServerMessageCode_MapServerWCSWrongPixelType',
           'DataObjectTypes', 'GeoReferenceEvents',
           'IRenderedRaster2', 'acLLPlaceLeft',
           'FeatureLayerSelectionEvents',
           'esriDataGraphTSymbolDownTriangle', 'esriCFRControlPoints',
           'IGpsConnection', 'IACSimpleMarkerSymbol',
           'esriMappingMsgCode_GraphicDrawEnd', 'IRasterRendererInfo',
           'esriExtentDefault', 'IIdentifyObject',
           'ACTextMarkerSymbol', 'esriDataGraphTLegendTextPlain',
           'GraphicFeatureServer',
           'esriMobileServerMessageCode_FailedToPopulateFDR',
           'esriGraphicFeatureMsgCode_MessageProcessed_Add',
           'esriDimensionTDPrefixSuffix', 'IMapSurroundFactory',
           'esriMobileServerMessageCode_ClientServerVersions',
           'esriMapServerMsgCode_MessageProcessed_GetMapCount',
           'acPrintMode', 'IMgrsGrid',
           'esriMapServerMsgCode_TableHasNoOIDHenceQueryFailed',
           'Hyperlink', 'esriNetworkTurnRenderer',
           'esriWCSServerMessageCode_GeoDataServerWCSInitialized',
           'esriMapClipShape',
           'esriMapServerMsgCode_PMFFileHasTimeOut',
           'IRepresentationLegendClass',
           'esriMapServerMsgCode_CapabilityUnsupported', 'MapEvents3',
           'esriMappingMsgCode_LabelingEnd', 'esriImageDIB',
           'SimpleMapImage', 'esriImageReturnURL',
           'esriDimensionTDValueOnly', 'enumSuppression',
           'IMapServerRelationships',
           'esriNetworkSystemJunctionRenderer',
           'esriMobileServerMessageCode_DownloadFeaturesFailure',
           'esriViewDrawPhase', 'IMarkerElement', 'IDynamicLayer2',
           'esriMobileServerMessageCode_FatalServerError',
           'esriMapServerMsgCode_MessageProcessed_QueryFatureCount',
           'esriRotateLabelAV3', 'esriGraphicFeatureServerErrors',
           'esriMapServerMsgCode_MessageProcessed_QueryAttachmentInfos',
           'esriImagePS', 'esriMaplexAboveRight',
           'esriTRPointExceptions', 'ButtonTabStyle',
           'IDotDensityRenderer2', 'IDataClassificationDef',
           'PrintAndExport', 'ILabelClassDescriptions',
           'IVerticalLegendItem', 'IDimensionStyle',
           'esriLabelEnvPlacement', 'IDMSGridLabel3',
           'acLLPlaceLeftRight', 'IGroupElement',
           'esriMobileServerMessageCode_FailedToSyncAttach',
           'esriWCSServerMessageCode_ImageServerWCSFailed',
           'IMapCacheExporter',
           'esriMapServerMsgCode_MessageArrival_QueryAttachmentInfos2',
           'esriFeatureEditToolPolygon', 'ACConnector',
           'acBDiagonalGradientFill', 'esriRotateSymbolArithmetic',
           'esriBackgroundTabRound',
           'esriMapServerMsgCode_FieldNotFound',
           'esriLabelExpressionType', 'IPointPlacementPriorities',
           'AnnotationVBScriptEngine',
           'esriMobileServerMessageCode_FailedToCreateUploadsClient',
           'FeatureServerLayerFactory', 'esriExtentScale',
           'esriMobileServerMessageCode_DirectoryInvalid',
           'ILabelClassDescription2',
           'esriMapServerMsgCode_MessageProcessed_QueryFeatureIDs2',
           'ILayerStatus', 'esriT3DPlaneXY',
           'CadastralFabricSubLayer', 'esriRasterSelectionMaskAND',
           'IMaps',
           'esriMapServerMsgCode_MessageArrival_QueryRasterValue',
           'E_IMAGESERVER_VIEW_DOESNT_EXIST',
           'IImageServerIdentifyResults', 'ImageServerLayerFactory',
           'IGpsFeed', 'IElementCollection2',
           'esriMapServerMsgCode_MessageProcessed_GetMapTableSubtypeInfos2',
           'esriSizeRendererNone',
           'esriWCSServerMessageCode_ImageServerWCSParseXML11',
           'esriMapTimeExtentAllVisibleLayers',
           'esriMaplexStrategyOverrun', 'GraphicFeatureLayers',
           'IGraphicElements',
           'esriMapServerMsgCode_MessageArrival_QueryFeatureCount2',
           'esriMaplexAboveLine', 'esriMapServerMsgCodeEnum',
           'IFeatureIdentifyObj', 'IACLayer', 'acLLPlaceNone',
           'esriViewGeoSelection', 'LODInfos', 'acRegularFont',
           'esriScreenPositionBottomLeft', 'ITinLayer2',
           'PolygonLabelPlacementDescription',
           'esriMaplexBelowCenter', 'ACTrueTypeMarkerSymbol',
           'esriWCSServerMessageCode_GeoDataServerWCSStarted',
           'IFunctionSeriesProperties', 'esriOneLabelPerName',
           'LayerDescription', 'acGeometryType',
           'esriRasterStretch_ESRI',
           'esriGraphicFeatureMsgCode_MessageProcessed_CreateReplica',
           'esriMobileServerMessageCode_FindFailure',
           'esriGpsParityEven', 'ITableExtensions',
           'IGeoImageDescription',
           'esriWCSServerMessageCode_MapServerWCSInvalidDataset',
           'esriConeBar', 'ILayerPropertySheet',
           'esriMaplexHorizontalAroundPolygon', 'acNoPrintMode',
           'esriGraphicFeatureMsgCode_MessageArrival_AlterReplica',
           'esriDataGraphTSymbolNothing', 'esriSizeRendererRandom',
           'esriScaleTextAbsolute',
           'esriMappingMsgCode_GroupLayerDrawBegin',
           'INetworkRenderer',
           'esriMobileServerMessageCode_FailedToGetAttachmentData',
           'MultiPatchElement', 'MaplexRotationProperties',
           'CadFeatureLayer', 'IDataGraphTPenProperties',
           'ImageInset', 'IDataSourceHelperMapDocument',
           'esriMaplexConstrainJustificationCenter',
           'esriGraphicFeatureMsgCode_CfgFactory_CleanupFailed',
           'GraphicFeatureServerIP', 'IAnnotateLayerProperties',
           'IMapGrid', 'GraphicFeatureLayer',
           'esriGraphicFeatureMsgCode_MessageArrival_Delete',
           'esriImagePNG32',
           'esriMapServerMsgCode_UnsupportedRequest',
           'LayerCacheInfos', 'esriClassifyStandardDeviation',
           'ILegendItem3', 'ILegendItem2',
           'esriMobileServerMessageCode_FailedToStartEditingWorkspace',
           'esriDimensionMarkerFit', 'IACValueMapRenderer',
           'esriDataGraphTLegendTextLeftPercent', 'IGraphicFeatures',
           'IExportInfoGenerator', 'ServiceData',
           'esriWMSServerMessageCode_ImageServerWMSDebug',
           'EditResult', 'esriPageFormLetter', 'esriClassifyMethod',
           'IGraticule', 'esriScaleBarBeforeAndAfterBar',
           'ImageServer', 'esriInvArrow', 'esriBefore',
           'esriGraphicFeatureMsgCode_MessageArrival_QueryHTMLPopups',
           'ITopologyErrorSelection',
           'esriMapServerMsgCode_MessageArrival_GetTileImageInfo',
           'LabelEngineLayerProperties', 'JoinTableSourceDescription',
           'esriNetworkRendererType',
           'WMS_E_IMAGEFORMAT_NOTUNSUPPORTED',
           'TableDataSourceDescription', 'esriTopologyRenderer',
           'IServerSymbolOutputOptions',
           'esriAutoExtentMarginMapUnits',
           'esriLayerEventHintLayerMovedWithinGroup',
           'IRealTimeFeedSnap', 'esriT3DJustifyLeft',
           'ILicensedComponent', 'IImageServerDownloadResult',
           'esriDataGraphTSymbolDiamond', 'IAnnotateFeature2',
           'MapServerRows', 'esriDimensionDisplayNone',
           'acLLPlaceAboveBelow', 'esriMapCacheUpdateDelete',
           'AreaPatch', 'esriSymbolRotationType',
           'DotDensityRenderer', 'IStandaloneTableDescriptions',
           'IMapServerSublayer', 'esriDMSGridLabelDM',
           'ISimpleNetworkRenderer', 'ICornerGridLabel',
           'esriDMSGridLabelDD', 'ISpatialBookmark', 'ACShieldSymbol',
           'IServiceLayerImageFormat', 'ILayerEffects',
           'MaplexAnnotationPropertiesConverter', 'IPageLayoutSnap',
           'esriScaleBarAfterLabels', 'esriDMSGridLabelDS',
           'esriMobileServerMessageCode_VersionAlreadyExists',
           'esriGpsStopBits', 'TopologyLayer',
           'esriDataGraphTPenSolid',
           'E_IMAGESERVER_NOT_ALLOW_FUNCTION', 'esriImagePDF',
           'esriScaleBarBeforeAndAfterLabels',
           'ACValueMapLabelRenderer',
           'esriMapServerMsgCode_MessageProcessed_QueryAttachmentInfos2',
           'IACConnector', 'esriMappingMsgCode_LayerDrawEnd',
           'esriMapServerMsgCode_MessageProcessed_GetCacheDescriptionInfo',
           'NITFGraphicsLayer', 'esriT3DRotationAxis',
           'esriFindAllLayers',
           'esriMapServerMsgCode_MessageArrival_GetTileCacheInfo',
           'ITinColorRampRenderer',
           'esriMappingMsgCode_LayerDrawingError',
           'esriMobileServerMessageCode_NoInserverConn',
           'IMapServerGeoTransformation',
           'esriGraphicFeatureMsgCode_MessageArrival_CreateReplica',
           'MapServerLayer',
           'esriMapServerMsgCode_MessageArrival_ExportNorthArrow',
           'UniqueValuesDef', 'esriMaplexContourFeature',
           'ISymbolBackground',
           'esriLayerEventHintLayerRemovedFromGroup',
           'IAnnotationLayer', 'acOutlineFont',
           'esriQueryResultAMFAsURL', 'IImageServerLayer2',
           'IImageServerLayer3', 'ILegendFormat', 'DimensionGraphic',
           'RulerSnap', 'esriRectanglePosition',
           'esriMaplexSouthOfPoint', 'IRasterRendererClassInfo',
           'esriRasterRenderingModeEnum',
           'esriNetworkArrowSymbolNoWay', 'IScaleText',
           'IImageResult2', 'IHyperlinkContainer',
           'esriRasterStretchStatsTypeEnum', 'IMapServerBookmark',
           'Jp2PictureElement',
           'esriMobileServerMessageCode_DeleteCountMismatch',
           'IFeatureServiceLayerFactory', 'esriPageFormA2',
           'esriCadastralParcelTax', 'IGraphicFeatureLayers',
           'Legend', 'E_IMAGESERVER_CANT_ADD_RASTERS',
           'esriPatchLabelDescription',
           'IPointLabelPlacementDescription', 'IPlacedObject3',
           'IPlacedObject2', 'esriMaplexOffsetPerpendicularFromLine',
           'esriGraphicFeatureMsgCode_MessageArrival_QueryAttachmentData',
           'esriSymbolOverrideVertAlignment', 'esriRightMidPoint',
           'SimpleMapGridBorder', 'MapDocument',
           'esriWCSServerMessageCode_ImageServerWCSAISInitialized',
           'IBubbleSeriesProperties',
           'esriBasicOverposterFeatureType', 'esriLeftMidPoint',
           'esriTopRightCorner', 'esriNetworkArrowSymbolType',
           'IImageResults', 'esriMapServerMsgCode_MapReaderOpen_End',
           'esriMaplexKeyNumberHorizontalAlignmentLeft',
           'esriDataGraphTLegendAlignment', 'RasterDefaultsEnv',
           'esriMobileServerMessageCode_UploadedItemNotFound',
           'ILayerEffectDIM', 'esriRasterSelectionMaskCLEAR',
           'esriMappingMsgCode_AnnotationDrawEnd',
           'esriMaplexMultiPartOption', 'IGraphicFeatureLayer2',
           'IMapServerHyperlinks', 'IGeoImageDescription2',
           'IGeoImageDescription3',
           'esriGraphicFeatureMsgCode_MessageArrival_QueryAttachmentInfos',
           'esriLayerSelectIntersect', 'IMSSubFeatureLayer',
           'TemplateInfo', 'ACSimplePolygonSymbol',
           'esriMaplexStreetFeature',
           'esriWCSServerMessageCode_ImageServerWCSGetCoverage',
           'ICenterAndScale', 'esriMaplexStraightLadder',
           'IMapEvents3', 'IMapEvents2',
           'esriWCSServerMessageCode_ImageServerWCSInvalidLayer',
           'FDOGraphicsLayerFactory', 'esriBackgroundTabRectangle',
           'RasterFunctionInfos', 'IActiveViewEvents',
           'MapDescriptor', 'IRemoteFindObj', 'ANNO_E_INVALID_SYM_ID',
           'MapServerHyperlink', 'esriScaleBarAboveLeft',
           'FDOGraphicsSublayer', 'FDOGraphicsLayer',
           'IRulerSettings', 'esriMaplexWestOfPoint',
           'esriMaplexZoneIdentifier', 'IMapDescription',
           'SnapGuides', 'LegendGroup', 'DimensionClassExtension',
           'MapExtent', 'RepresentationRenderer', 'RulerSettings',
           'esriServerPointLabelPlacementType',
           'esriScaleBarDivisions', 'ITableEditResults',
           'IIMSMapLayer', 'esriLayerSelectShareALineSegmentWith',
           'ITileDescription', 'IMXFeatureFindData',
           'IBasicOverposterLayerProperties2', 'esriMultiAreaType',
           'IMaplexDictionaries', 'esriMaplexAnchorPointType',
           'IDMSGridLabel', 'IDataSampling', 'IAttributeTable',
           'IConvertLabelsToAnnotation',
           'esriMaplexCurvedAroundPolygon', 'IFieldInfoSet',
           'IMapGrids', 'enumLocationTrigger',
           'EngineWMSMapLayerFactory',
           'esriMobileServerMessageCode_FailedToCreateSchema',
           'esriGraphicFeatureMsgCode_CfgFactory_CleanupRequired',
           'CadLayer', 'esriMaplexCenteredHorizontalOnLine',
           'esriImageOptimalPNG', 'IPageLayoutExtensions',
           'MarkerSymbolStyleGalleryClass', 'RasterItemDescriptions',
           'esriTRDirtyAreas', 'esriHyperlinkTypeDocument',
           'RasterLayerDrawingDescriptionFactory',
           'esriRasterUniqueRendererKeyError',
           'esriConversionStatusWarnings',
           'esriMaskImagineUncompress',
           'esriMapServerMsgCode_MessageArrival_GetServerInfo',
           'IImageServerObjectLANProxy', 'IShader',
           'IDisplayTableExchange',
           'esriImageServiceSourceTypeMosaicDataset', 'ITinLayer',
           'CadastralFabricLayerEventsHelper',
           'IMapServerLegendGroup', 'DataSourceHelper',
           'IRasterCatalogDisplayProps', 'ICompositeLayer',
           'IImageServerName', 'MSDHelper',
           'esriMobileServerMessageCode_FailedToAddField',
           'AnnotateLayerPropertiesCollection', 'esriIdentifyTopmost',
           'esriTop',
           'esriMapServerMsgCode_MessageArrival_GetMapTableSubtypeInfos2',
           'IMaps2', 'IMobileMapInfo',
           'esriMapServerMsgCode_PMFInvalidFileType',
           'esriCad3DRenderFlatFilled', 'esriImagePNG24',
           'ISubtypeInfo',
           'esriMobileServerMessageCode_InvalidLayerCount',
           'esriDataGraphTPenDot', 'IMSGlobeXMLNode',
           'esriT3DJustification', 'esriOverposterPolyline',
           'esriDatabaseAnnotation', 'IDataGraphCollectionEvents',
           'IGFSReplicationAgent', 'IGraphicFeatureLayer',
           'esriMapServerMsgCode_MessageArrival_ComputeScale',
           'esriPageMappingScale', 'IServiceLayerCredits',
           'ANNO_E_NO_SYM_OVERRIDE', 'IImageServerIdentifyResult',
           'IDimensionShape', 'IExtentStack',
           'esriSymbolOverrideItalic',
           'esriGraphicFeatureMsgCode_MessageProcessed_ExportReplicaDataChanges',
           'GdbRasterCatalogLayer', 'IEnumLocatedNetworkElement',
           'IRasterItemDescriptions', 'EngineIMSLayerFactory',
           'esriRasterStretch_Custom', 'esriGraphColorType',
           'acLLPlaceAtStart', 'esriFeatureOptimizedSpatialReference',
           'esriCad3DRenderGouraudShaded',
           'TerrainPointElevationRenderer', 'ACGroupRenderer',
           'esriServerPointLabelPlacementCenterLeft',
           'IMapServerObjectLANProxy',
           'esriFeatureClassSpatialReference', 'ACSimpleRenderer',
           'esriGpsBaudRate9600', 'JpgPictureElement',
           'ICoverageAnnotationLayer', 'IImageServerDownloadResults',
           'esriGpsConnectionStatusNoSignal', 'IElement',
           'esriMobileServerMessageCode_InvalidRasterLayer',
           'esriImageServerMessageCode_ImageServerCache',
           'esriMaplexContourAlignmentType', 'ICacheDescriptionInfo2',
           'esriCFRPoints', 'esriRasterStretchStats_Dataset',
           'IQuerySize',
           'esriMobileServerMessageCode_FlushUpdatesFailure',
           'esriInvCone', 'ACCalloutMarkerSymbol',
           'MapServerIdentifyResults', 'ACHashLineSymbol',
           'esriImageServiceDataType',
           'esriWCSServerMessageCode_ImageServerWCSGetCapabilities',
           'MobileServerIP', 'esriMapDocumentTypePmf',
           'IAnnotateProperties',
           'esriGraphicFeatureMsgCode_CfgFactory_NoInputDir',
           'IExpression', 'esriServerPointLabelPlacementCenterCenter',
           'IFeatureExtent', 'esriMaintainDensityByDotValue',
           'IParameterInfo', 'esriLayerSelectContains',
           'esriCadastralParcelPLSSSixteenthSection',
           'ICustomOverlayGrid', 'RasterDataSourceDescription',
           'esriImageServiceDataTypeThematic', 'ANNO_E_INVALID_ANGLE',
           'acSolidFill', 'IOverflowGraphicsContainer',
           'acHTextAlignment', 'ITinIdentifyObj',
           'esriMaplexConstrainJustificationLeftOrRight',
           'acLLPlaceOnTop', 'esriGpsBaudRate38400',
           'IRasterRenderer2', 'ITileCacheStats', 'IACLayerAdmin',
           'ClassBreaksRenderer', 'esriMapDocumentVersionInfoUnknown',
           'esriRasterSelectionMaskFileFormat', 'BackgroundTabStyle',
           'esriGraphicFeatureMsgCode_MessageArrival_UnregisterReplica',
           'IGroupElement2', 'IGroupElement3', 'esriBottomLeftCorner',
           'esriDataStatTypeStdDev',
           'esriImageServerMessageCode_ImageServerStop',
           'esriMaplexContourLadderType',
           'esriMobileServerMessageCode_ImportChangesStats',
           'esriMapServerMsgCode_MessageProcessed_GenerateDataClasses',
           'esriMapServerMsgCode_MessageProcessed_GetDocumentInfo',
           'INewDimensionFeedback', 'ILookupSymbol',
           'IMapFrameDescription', 'TinNodeElevationRenderer',
           'esriServerPolygonPlacementAlwaysHorizontal',
           'MapServerLegendPatch',
           'esriMapServerMsgCode_MapServerFailed',
           'IFieldDomainInfos', 'MapFrameDescription',
           'IActionCollection',
           'esriMapServerMsgCode_MessageProcessed_QueryRowCount',
           'IRendererClasses', 'IDataGraphTElement',
           'esriSelectionResultSubtract', 'TinSlopeRenderer',
           'esriMobileServerMessageCode_InvalidWorkspaceIndex',
           'esriImageReturnType',
           'esriGraphicFeatureMsgCode_MessageArrival_UpdateAttachments',
           'acDiagCrossFill', 'esriGpsBaudRate',
           'INetworkRendererCollection',
           'esriMapServerMsgCode_MessageArrival_ApplyMapDescription',
           'GuideSnap', 'acBoldFont', 'esriGpsBaudRate600',
           'RasterFunctionInfo', 'esriMaplexStreetAddressRange',
           'acTitleCapsPrintMode', 'ClassBreakInfo',
           'esriGpsMagneticVariance',
           'esriWCSServerMessageCode_ImageServerWCSStarted',
           'IRasterLayerExport', 'IDataLayer',
           'esriMapServerMsgCode_MessageProcessed_FromMapPoints',
           'esriDimensionTDNone',
           'esriMobileServerMessageCode_UnderlyingError',
           'IPropertyInfo', 'IACRasterShieldSymbol', 'esriMaplexUnit',
           'TimeQueryFilter', 'IMapGridBorder', 'ILayerAction',
           'ISimpleMapImage', 'CustomOverlayGrid',
           'esriMensurationOperation',
           'esriGraphicFeatureMsgCode_CfgFactory_MapServerConfigPropsMissing',
           'ITileImageInfo', 'IGFLayerTableDataMappings',
           'esriGridAxisNone', 'esriScreenPositionTopCenter',
           'esriMobileServerMessageCode_GetFeatureCountFailure',
           'esriRasterStretch_NONE',
           'esriMapServerMsgCode_MessageArrival_Find',
           'esriMobileServerMessageCode_ServerVersionReduction',
           'MapEvents2', 'IMaplexDictionary',
           'esriMapServerMsgCode_MessageProcessed_QueryRasterValue2',
           'esriBufferType', 'esriMapCacheCompress', 'enumHighlight',
           'ImageServerEditResults', 'esriLayerSelectContainedBy',
           'IFeatureServiceLayerEditExtension', 'IRealTimeLog',
           'esriMapServerMsgCode_MessageProcessed_QueryRelatedRecords',
           'IMaplexOffsetAlongLineProperties', 'acDarkGrayFill',
           'E_IMAGESERVER_NO_AIS_CONNECTION', 'ILayerDescriptions',
           'IBasicGeoprocessor',
           'esriMapServerMsgCode_MessageProcessed_GetCacheControlInfo',
           'MixedFontGridLabel', 'DynamicGlyphFactory',
           'MobileLayerInfos', 'IACMap', 'IRealTimeFeedManagerEvents',
           'IMapServerRow2', 'IAnnoClass',
           'esriGraphicFeatureMsgCode_CfgFactory_OnRemoveExStart',
           'acAllOtherValues', 'INetworkTrafficRenderer',
           'esriMapCacheStorageModeExploded',
           'esriGraphicFeatureMsgCode_CfgFactory_OnRemoveExEnd',
           'IRasterBasemapLayerFactory', 'acLLPlacePerpendicular',
           'esriLayerSelectCompletelyContains', 'ILegendFormat2',
           'esriImageNone', 'esriMaplexStrategyStacking',
           'esriSelfStackMultiBar',
           'E_IMAGESERVER_VIEW_ALREADY_EXIST',
           'esriMobileServerMessageCode_GetRasterTilesFailure',
           'esriScaleBarAutoDivisionAndDivisions', 'enumDualTrigger',
           'ILayerDescription2', 'ILayerDescription3',
           'NetworkTrafficRenderer', 'BasicOverposter', 'INorthArrow',
           'esriNetworkDirtyAreaRenderer',
           'esriGraphicFeatureMsgCode_MessageProcessed_AlterReplica',
           'acHashLineType', 'IMapServerRows',
           'esriRasterPyramidAlwaysPrompt',
           'esriGraphicFeatureServerMsgCode_CapabilityNotSupported',
           'IRealTimeFeedEvents', 'AnnotateFeature',
           'IPrincipalDigitsGridLabel', 'esriAllRecords',
           'IPluginImageLayer', 'esriAutoExtentScale',
           'IMapServerGroupLayer', 'IImageServerMeasureResult',
           'ITimeDisplayTable2', 'IScaleBar', 'EmfPictureElement',
           'esriMapServerMsgCode_MessageProcessed_ComputeScale',
           'esriScaleBarMajorDivisions', 'IFDOGraphicsLayerFactory',
           'ISDGenerator', 'ILayerFile', 'esriGridAxisLeft',
           'esriBottom', 'WMSGroupLayer', 'IImageServer2',
           'IImageServer3', 'esriGraphColorCustomAll',
           'esriDataStatTypeMin',
           'esriMaplexUnclippedGeometricCenter',
           'esriSelectionResultAnd', 'esriRasterLayerError',
           'esriPlacementOk', 'WMTSLayerFactory', 'IRasterLayer',
           'ILayer', 'esriHyperlinkTypeMacro',
           'esriCacheExporterMode',
           'esriMobileServerMessageCode_NoRasterSupport',
           'IDirectData', 'IClassBreaksDef',
           'esriMobileServerMessageCode_CreateVersionFailure',
           'esriMensurationAreaAndPerimeter',
           'esriMobileServerMessageCode_FailedToSetRowValues',
           'ILayerFactoryHelper', 'acExactValue',
           'esriCadastralParcelOwnership', 'ITableDefinition',
           'esriMapServerMsgCode_MessageArrival_QueryFeatureData',
           'Page', 'IMapServerLegendInfo',
           'esriMapServerMsgCode_MessageProcessed_QueryHTMLPopups2',
           'RasterStretchColorRampRenderer', 'esriOverposterPolygon',
           'esriDataGraphTLegendBottom', 'E_IMAGESERVER_NO_FILE',
           'IMapBookmarks', 'ITableFactory']
from comtypes import _check_version; _check_version('501')
