# -*- coding: mbcs -*-
typelib_path = u'C:\\Program Files (x86)\\ArcGIS\\Engine10.2\\com\\esriDataSourcesRaster.olb'
_lcid = 0 # change this if required
from ctypes import *
import comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0
from comtypes import GUID
from ctypes.wintypes import VARIANT_BOOL
from ctypes import HRESULT
from comtypes import helpstring
from comtypes import COMMETHOD
from comtypes import dispid
from comtypes import CoClass
import comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2
import comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2
from comtypes import IUnknown
from comtypes import BSTR
import comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2
from comtypes.automation import VARIANT
from comtypes.automation import VARIANT
from comtypes.automation import _midlSAFEARRAY
import comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2
STRING = c_char_p


class IGenerateOverviewsParameters(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control parameters for generating overview images in a mosaic dataset.'
    _iid_ = GUID('{D1BCACE5-6733-46AA-9680-ADD4D97A5E73}')
    _idlflags_ = ['oleautomation']
IGenerateOverviewsParameters._methods_ = [
    COMMETHOD(['propput', helpstring(u'Indicates whether missing overview images are generated.')], HRESULT, 'GenerateMissingImages',
              ( ['in'], VARIANT_BOOL, 'pbGenerateMissingImages' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether missing overview images are generated.')], HRESULT, 'GenerateMissingImages',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbGenerateMissingImages' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether overview images for stale items are rengenerated.')], HRESULT, 'GenerateStaleImages',
              ( ['in'], VARIANT_BOOL, 'pbGenerateStaleImages' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether overview images for stale items are rengenerated.')], HRESULT, 'GenerateStaleImages',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbGenerateStaleImages' )),
]
################################################################
## code template for IGenerateOverviewsParameters implementation
##class IGenerateOverviewsParameters_Impl(object):
##    def _get(self):
##        u'Indicates whether missing overview images are generated.'
##        #return pbGenerateMissingImages
##    def _set(self, pbGenerateMissingImages):
##        u'Indicates whether missing overview images are generated.'
##    GenerateMissingImages = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether overview images for stale items are rengenerated.'
##        #return pbGenerateStaleImages
##    def _set(self, pbGenerateStaleImages):
##        u'Indicates whether overview images for stale items are rengenerated.'
##    GenerateStaleImages = property(_get, _set, doc = _set.__doc__)
##

class DEWCSCoverage(CoClass):
    u'WCS Coverage Object Data Element object.'
    _reg_clsid_ = GUID('{54E1883E-3F44-4FC7-B588-A299B68CA9D4}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IDEWCSCoverage(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that describe WCS Coverage objects.'
    _iid_ = GUID('{DB9431B1-B871-44D0-A8B9-8AA0E07DBC0D}')
    _idlflags_ = ['oleautomation']
DEWCSCoverage._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDEWCSCoverage, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDEServerObject, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataElement, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IMetadata, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDescribe, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersionSupportGEN, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class SimplePixelResampler(CoClass):
    u'A simple pixel resampler class.'
    _reg_clsid_ = GUID('{461E899B-F634-4BE1-A45B-DC62A3E71B4B}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IPixelResampler(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a pixel resampler.'
    _iid_ = GUID('{25C98A24-1331-49A0-BCF2-4F5155E1E016}')
    _idlflags_ = ['oleautomation']
class ISimplePixelResampler(IPixelResampler):
    _case_insensitive_ = True
    u'Provides access to members that control a simple pixel resampler.'
    _iid_ = GUID('{DDB8B2BA-A3E9-40CD-8D69-1F720A4C8E7B}')
    _idlflags_ = ['oleautomation']
SimplePixelResampler._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ISimplePixelResampler]


# values for enumeration 'esriRequestSizeType'
esriRequestSizeTypePixels = 1
esriRequestSizeTypePixelSizeFactor = 2
esriRequestSizeTypePixelSize = 3
esriRequestSizeType = c_int # enum

# values for enumeration 'esriFunctionRasterDatasetProperty'
esriFunctionRasterDatasetPropertyGeodataXform = 1
esriFunctionRasterDatasetPropertyStatistics = 2
esriFunctionRasterDatasetPropertyHistograms = 4
esriFunctionRasterDatasetProperty = c_int # enum
class ImportGeometryParameters(CoClass):
    u"An object that controls how a mosaic dataset's geometry gets imported."
    _reg_clsid_ = GUID('{A60416BB-87A4-483F-9FD6-239159C32A62}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IMosaicDatasetOperationParameters(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control parameters to an operation on a mosaic dataset.'
    _iid_ = GUID('{379006F4-6F75-4C3B-B783-0C2E88A7B280}')
    _idlflags_ = ['oleautomation']
class ISelectionParameters(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control selection parameters.'
    _iid_ = GUID('{95627B93-1275-4714-94A7-A55DF27E70A2}')
    _idlflags_ = ['oleautomation']
class IImportGeometryParameters(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control how mosaic dataset geometry is imported.'
    _iid_ = GUID('{A63CC4B0-375B-4CF1-96D2-76B8EB882749}')
    _idlflags_ = ['oleautomation']
ImportGeometryParameters._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMosaicDatasetOperationParameters, ISelectionParameters, IImportGeometryParameters]

class ExportGeometryParameters(CoClass):
    u'An object that controls how geometries in a mosaic dataset are exported.'
    _reg_clsid_ = GUID('{1701C88C-81B0-4EFF-89D2-4A6EE56E37FE}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IExportGeometryParameters(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control parameters for exporting geometries to feature class.'
    _iid_ = GUID('{02560B79-529C-4F3F-8C80-8BA72867D177}')
    _idlflags_ = ['oleautomation']
ExportGeometryParameters._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMosaicDatasetOperationParameters, IExportGeometryParameters, ISelectionParameters]

class IRasterItemFunctionArguments(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control Raster Item function arguments.'
    _iid_ = GUID('{28CA1646-8E41-45B1-AA40-97B2AB2CB02F}')
    _idlflags_ = ['oleautomation']
IRasterItemFunctionArguments._methods_ = [
    COMMETHOD(['propget', helpstring(u'The image service that can be an image server or name object.')], HRESULT, 'ImageService',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppImageService' )),
    COMMETHOD(['propputref', helpstring(u'The image service that can be an image server or name object.')], HRESULT, 'ImageService',
              ( ['in'], POINTER(IUnknown), 'ppImageService' )),
    COMMETHOD(['propget', helpstring(u'The image service URL.')], HRESULT, 'URL',
              ( ['retval', 'out'], POINTER(BSTR), 'pURL' )),
    COMMETHOD(['propput', helpstring(u'The image service URL.')], HRESULT, 'URL',
              ( ['in'], BSTR, 'pURL' )),
    COMMETHOD(['propget', helpstring(u'The raster item ID.')], HRESULT, 'RasterID',
              ( ['retval', 'out'], POINTER(c_int), 'pRID' )),
    COMMETHOD(['propput', helpstring(u'The raster item ID.')], HRESULT, 'RasterID',
              ( ['in'], c_int, 'pRID' )),
]
################################################################
## code template for IRasterItemFunctionArguments implementation
##class IRasterItemFunctionArguments_Impl(object):
##    def ImageService(self, ppImageService):
##        u'The image service that can be an image server or name object.'
##        #return 
##
##    def _get(self):
##        u'The image service URL.'
##        #return pURL
##    def _set(self, pURL):
##        u'The image service URL.'
##    URL = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The raster item ID.'
##        #return pRID
##    def _set(self, pRID):
##        u'The raster item ID.'
##    RasterID = property(_get, _set, doc = _set.__doc__)
##

class AnalyzeParameters(CoClass):
    u'An object that controls how a mosaic dataset is analyzed.'
    _reg_clsid_ = GUID('{A411F679-9803-479D-885A-2318A4B373E9}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IAnalyzeParameters(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control how a mosaic dataset is analyzed.'
    _iid_ = GUID('{176CE686-AB2E-47DB-B520-37C81F517B6C}')
    _idlflags_ = ['oleautomation']
AnalyzeParameters._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMosaicDatasetOperationParameters, ISelectionParameters, IAnalyzeParameters]

class IArrayCrawler(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control an array crawler.'
    _iid_ = GUID('{A9BD38D7-5E0F-4608-B75C-2ED6CA429C08}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'esriCrawlerDataSourceType'
esriCrawlerDataSourceTypeUnknown = 0
esriCrawlerDataSourceTypeFile = 1
esriCrawlerDataSourceTypeFolder = 2
esriCrawlerDataSourceTypeString = 4
esriCrawlerDataSourceTypeOverviewItem = 8
esriCrawlerDataSourceTypeRow = 16
esriCrawlerDataSourceTypeCatalogItem = 32
esriCrawlerDataSourceTypeDatasetName = 64
esriCrawlerDataSourceTypeRasterDataset = 128
esriCrawlerDataSourceTypeImageService = 256
esriCrawlerDataSourceTypeTerrain = 512
esriCrawlerDataSourceTypeLasDataset = 1024
esriCrawlerDataSourceTypeSearchItem = 2048
esriCrawlerDataSourceTypeCustom = 32768
esriCrawlerDataSourceType = c_int # enum
IArrayCrawler._methods_ = [
    COMMETHOD(['propput', helpstring(u'The data source type associated with this crawler.')], HRESULT, 'CrawlerItemType',
              ( ['in'], esriCrawlerDataSourceType, 'rhs' )),
    COMMETHOD(['propputref', helpstring(u'The array of data source items to traverse.')], HRESULT, 'DataSourceItems',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray), 'ppDataSourceItems' )),
    COMMETHOD(['propget', helpstring(u'The array of data source items to traverse.')], HRESULT, 'DataSourceItems',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray)), 'ppDataSourceItems' )),
]
################################################################
## code template for IArrayCrawler implementation
##class IArrayCrawler_Impl(object):
##    def _set(self, rhs):
##        u'The data source type associated with this crawler.'
##    CrawlerItemType = property(fset = _set, doc = _set.__doc__)
##
##    @property
##    def DataSourceItems(self, ppDataSourceItems):
##        u'The array of data source items to traverse.'
##        #return 
##

class IRaster2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a raster.'
    _iid_ = GUID('{0D668D08-92C1-4999-9A77-490790821969}')
    _idlflags_ = ['oleautomation']
class IRasterXformer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control raster transformer.'
    _iid_ = GUID('{22803C42-60F8-46B6-9B2C-B0A282CD7324}')
    _idlflags_ = ['oleautomation']
IRaster2._methods_ = [
    COMMETHOD(['propget', helpstring(u'The geodata transform.')], HRESULT, 'GeodataXform',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeodataXform)), 'ppXform' )),
    COMMETHOD(['propput', helpstring(u'The geodata transform.')], HRESULT, 'GeodataXform',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeodataXform), 'ppXform' )),
    COMMETHOD(['propputref', helpstring(u'The set of geographic transformations to be applied.')], HRESULT, 'GeoTransformations',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeoTransformationOperationSet), 'ppGeoXforms' )),
    COMMETHOD(['propget', helpstring(u'The set of geographic transformations to be applied.')], HRESULT, 'GeoTransformations',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeoTransformationOperationSet)), 'ppGeoXforms' )),
    COMMETHOD(['propget', helpstring(u'The raster value attribute table.')], HRESULT, 'AttributeTable',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable)), 'ppVAT' )),
    COMMETHOD(['propputref', helpstring(u'The raster value attribute table.')], HRESULT, 'AttributeTable',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable), 'ppVAT' )),
    COMMETHOD(['propget', helpstring(u'The colormap.')], HRESULT, 'Colormap',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterColormap)), 'ppColormap' )),
    COMMETHOD(['propputref', helpstring(u'The colormap.')], HRESULT, 'Colormap',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterColormap), 'ppColormap' )),
    COMMETHOD(['propget', helpstring(u'The parent raster dataset.')], HRESULT, 'RasterDataset',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterDataset)), 'ppDataset' )),
    COMMETHOD([helpstring(u'Creates a cursor with a given pixel block size or native block size.')], HRESULT, 'CreateCursorEx',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IPnt), 'pBlockSize' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterCursor)), 'ppCursor' )),
    COMMETHOD(['propget', helpstring(u'The raster transformer.')], HRESULT, 'RasterXformer',
              ( ['retval', 'out'], POINTER(POINTER(IRasterXformer)), 'ppXformer' )),
    COMMETHOD([helpstring(u'Converts a location (x, y) in map space into pixel space.')], HRESULT, 'MapToPixel',
              ( ['in'], c_double, 'x' ),
              ( ['in'], c_double, 'y' ),
              ( ['out'], POINTER(c_int), 'pColumn' ),
              ( ['out'], POINTER(c_int), 'pRow' )),
    COMMETHOD([helpstring(u'Converts a location (column, row) in pixel space into map space.')], HRESULT, 'PixelToMap',
              ( ['in'], c_int, 'iColumn' ),
              ( ['in'], c_int, 'iRow' ),
              ( ['out'], POINTER(c_double), 'pX' ),
              ( ['out'], POINTER(c_double), 'pY' )),
    COMMETHOD([helpstring(u'Maps a x coordinate in map space to the pixel column.')], HRESULT, 'ToPixelColumn',
              ( ['in'], c_double, 'x' ),
              ( ['retval', 'out'], POINTER(c_int), 'pColumn' )),
    COMMETHOD([helpstring(u'Maps a y coordinate in map space to the pixel row.')], HRESULT, 'ToPixelRow',
              ( ['in'], c_double, 'y' ),
              ( ['retval', 'out'], POINTER(c_int), 'pRow' )),
    COMMETHOD([helpstring(u'Maps a pixel column to the x coordinate in map space.')], HRESULT, 'ToMapX',
              ( ['in'], c_int, 'iColumn' ),
              ( ['retval', 'out'], POINTER(c_double), 'pX' )),
    COMMETHOD([helpstring(u'Maps a pixel row to the y coordinate in map space.')], HRESULT, 'ToMapY',
              ( ['in'], c_int, 'iRow' ),
              ( ['retval', 'out'], POINTER(c_double), 'pY' )),
    COMMETHOD([helpstring(u'Gets the pixel value for a given band at a given column and row.')], HRESULT, 'GetPixelValue',
              ( ['in'], c_int, 'iBand' ),
              ( ['in'], c_int, 'iColumn' ),
              ( ['in'], c_int, 'iRow' ),
              ( ['retval', 'out'], POINTER(VARIANT), 'pPixelValue' )),
]
################################################################
## code template for IRaster2 implementation
##class IRaster2_Impl(object):
##    def ToMapX(self, iColumn):
##        u'Maps a pixel column to the x coordinate in map space.'
##        #return pX
##
##    def Colormap(self, ppColormap):
##        u'The colormap.'
##        #return 
##
##    @property
##    def RasterXformer(self):
##        u'The raster transformer.'
##        #return ppXformer
##
##    @property
##    def GeoTransformations(self, ppGeoXforms):
##        u'The set of geographic transformations to be applied.'
##        #return 
##
##    def ToMapY(self, iRow):
##        u'Maps a pixel row to the y coordinate in map space.'
##        #return pY
##
##    def _get(self):
##        u'The geodata transform.'
##        #return ppXform
##    def _set(self, ppXform):
##        u'The geodata transform.'
##    GeodataXform = property(_get, _set, doc = _set.__doc__)
##
##    def ToPixelColumn(self, x):
##        u'Maps a x coordinate in map space to the pixel column.'
##        #return pColumn
##
##    def CreateCursorEx(self, pBlockSize):
##        u'Creates a cursor with a given pixel block size or native block size.'
##        #return ppCursor
##
##    def AttributeTable(self, ppVAT):
##        u'The raster value attribute table.'
##        #return 
##
##    def ToPixelRow(self, y):
##        u'Maps a y coordinate in map space to the pixel row.'
##        #return pRow
##
##    def MapToPixel(self, x, y):
##        u'Converts a location (x, y) in map space into pixel space.'
##        #return pColumn, pRow
##
##    def GetPixelValue(self, iBand, iColumn, iRow):
##        u'Gets the pixel value for a given band at a given column and row.'
##        #return pPixelValue
##
##    @property
##    def RasterDataset(self):
##        u'The parent raster dataset.'
##        #return ppDataset
##
##    def PixelToMap(self, iColumn, iRow):
##        u'Converts a location (column, row) in pixel space into map space.'
##        #return pX, pY
##

class TableBuilder(CoClass):
    u'A raster builder for tables.'
    _reg_clsid_ = GUID('{EA44519B-5080-4001-8054-CD5A93B761CB}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IRasterBuilder(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a raster builder.'
    _iid_ = GUID('{B2E3F2D4-5182-4299-AFF5-41E5C9017D4F}')
    _idlflags_ = ['oleautomation']
class IRasterBuilder2(IRasterBuilder):
    _case_insensitive_ = True
    u'Provides access to members that control a raster builder.'
    _iid_ = GUID('{EC840D20-97C0-40A6-B86A-05179C79A745}')
    _idlflags_ = ['oleautomation']
class IRasterBuilderInit(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that initialize a raster builder.'
    _iid_ = GUID('{D8E71E5A-401B-43A8-A55D-46881C51134C}')
    _idlflags_ = ['oleautomation']
class ITableBuilder(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a table builder.'
    _iid_ = GUID('{30E5AB73-F4FD-4BAF-A47F-25928F13E76D}')
    _idlflags_ = ['oleautomation']
TableBuilder._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterBuilder2, IRasterBuilderInit, ITableBuilder]

class IRasterColormap2(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterColormap):
    _case_insensitive_ = True
    u'Provides access to members that control a raster colormap.'
    _iid_ = GUID('{A4D0D354-B981-4088-9384-2F82A19783A6}')
    _idlflags_ = ['oleautomation']
class IBinFunction(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a raster histogram bin function.'
    _iid_ = GUID('{07F78971-F990-11D2-80B0-00500462E955}')
    _idlflags_ = ['oleautomation']
IRasterColormap2._methods_ = [
    COMMETHOD(['propput', helpstring(u'The lookup table (OBJECTID, VALUE) for remaping from index to pixel value.')], HRESULT, 'LUT',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable), 'rhs' )),
    COMMETHOD(['propget', helpstring(u'The remapped colors using LUT from index to value (OBJECTID, VALUE).')], HRESULT, 'RemappedColors',
              ( ['retval', 'out'], POINTER(VARIANT), 'pColors' )),
    COMMETHOD(['propget', helpstring(u'The remapped Red color component values using LUT from index to value (OBJECTID, VALUE).')], HRESULT, 'RemappedRedValues',
              ( ['retval', 'out'], POINTER(VARIANT), 'pValues' )),
    COMMETHOD(['propget', helpstring(u'The remapped Green color component values using LUT from index to value (OBJECTID, VALUE).')], HRESULT, 'RemappedGreenValues',
              ( ['retval', 'out'], POINTER(VARIANT), 'pValues' )),
    COMMETHOD(['propget', helpstring(u'The remapped Blue color component values using LUT from index to value (OBJECTID, VALUE).')], HRESULT, 'RemappedBlueValues',
              ( ['retval', 'out'], POINTER(VARIANT), 'pValues' )),
    COMMETHOD(['propget', helpstring(u'The Bin function that maps pixel value into colormap index.')], HRESULT, 'BinFunction',
              ( ['retval', 'out'], POINTER(POINTER(IBinFunction)), 'ppBinFunction' )),
]
################################################################
## code template for IRasterColormap2 implementation
##class IRasterColormap2_Impl(object):
##    def _set(self, rhs):
##        u'The lookup table (OBJECTID, VALUE) for remaping from index to pixel value.'
##    LUT = property(fset = _set, doc = _set.__doc__)
##
##    @property
##    def RemappedGreenValues(self):
##        u'The remapped Green color component values using LUT from index to value (OBJECTID, VALUE).'
##        #return pValues
##
##    @property
##    def RemappedRedValues(self):
##        u'The remapped Red color component values using LUT from index to value (OBJECTID, VALUE).'
##        #return pValues
##
##    @property
##    def BinFunction(self):
##        u'The Bin function that maps pixel value into colormap index.'
##        #return ppBinFunction
##
##    @property
##    def RemappedBlueValues(self):
##        u'The remapped Blue color component values using LUT from index to value (OBJECTID, VALUE).'
##        #return pValues
##
##    @property
##    def RemappedColors(self):
##        u'The remapped colors using LUT from index to value (OBJECTID, VALUE).'
##        #return pColors
##

class ITableCrawler(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a crawler capable of traversing tables.'
    _iid_ = GUID('{6E943337-D364-4B76-94CC-F7432305A851}')
    _idlflags_ = ['oleautomation']
class ITableCrawler2(ITableCrawler):
    _case_insensitive_ = True
    u'Provides access to members that control a crawler capable of traversing tables.'
    _iid_ = GUID('{C0463461-E1E9-46BE-8006-0F6C1F49F8D1}')
    _idlflags_ = ['oleautomation']
ITableCrawler._methods_ = [
    COMMETHOD(['propput', helpstring(u'The type of item returned by the crawler.')], HRESULT, 'CrawlerItemType',
              ( ['in'], esriCrawlerDataSourceType, 'rhs' )),
    COMMETHOD(['propputref', helpstring(u"The query filter associated with the specified 'Table'. Only rows that match the specified filter's criteria are returned by the crawler.")], HRESULT, 'QueryFilter',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'ppQueryFilter' )),
    COMMETHOD(['propget', helpstring(u"The query filter associated with the specified 'Table'. Only rows that match the specified filter's criteria are returned by the crawler.")], HRESULT, 'QueryFilter',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter)), 'ppQueryFilter' )),
    COMMETHOD(['propputref', helpstring(u'The selection set as a source of the data to crawl.')], HRESULT, 'SelectionSet',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ISelectionSet), 'ppSelectionSet' )),
    COMMETHOD(['propget', helpstring(u'The selection set as a source of the data to crawl.')], HRESULT, 'SelectionSet',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ISelectionSet)), 'ppSelectionSet' )),
    COMMETHOD(['propputref', helpstring(u'The table as a source of the data to crawl.')], HRESULT, 'Table',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable), 'ppTable' )),
    COMMETHOD(['propget', helpstring(u'The table as a source of the data to crawl.')], HRESULT, 'Table',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable)), 'ppTable' )),
    COMMETHOD(['propput', helpstring(u'The name of the field that references the raster dataset.')], HRESULT, 'SourceField',
              ( ['in'], BSTR, 'pSourceField' )),
    COMMETHOD(['propget', helpstring(u'The name of the field that references the raster dataset.')], HRESULT, 'SourceField',
              ( ['retval', 'out'], POINTER(BSTR), 'pSourceField' )),
    COMMETHOD(['propput', helpstring(u'The name of the field that contains values that identify groups of related items.')], HRESULT, 'GroupField',
              ( ['in'], BSTR, 'pGroupField' )),
    COMMETHOD(['propget', helpstring(u'The name of the field that contains values that identify groups of related items.')], HRESULT, 'GroupField',
              ( ['retval', 'out'], POINTER(BSTR), 'pGroupField' )),
    COMMETHOD(['propput', helpstring(u'The name of the field that contains time stamp value associated with the row.')], HRESULT, 'TimeStampField',
              ( ['in'], BSTR, 'pTimeStampField' )),
    COMMETHOD(['propget', helpstring(u'The name of the field that contains time stamp value associated with the row.')], HRESULT, 'TimeStampField',
              ( ['retval', 'out'], POINTER(BSTR), 'pTimeStampField' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the table crawler orders rows by values in the group name field.')], HRESULT, 'OrderByGroup',
              ( ['in'], VARIANT_BOOL, 'pbOrderByGroup' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the table crawler orders rows by values in the group name field.')], HRESULT, 'OrderByGroup',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbOrderByGroup' )),
]
################################################################
## code template for ITableCrawler implementation
##class ITableCrawler_Impl(object):
##    def _get(self):
##        u'The name of the field that references the raster dataset.'
##        #return pSourceField
##    def _set(self, pSourceField):
##        u'The name of the field that references the raster dataset.'
##    SourceField = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether the table crawler orders rows by values in the group name field.'
##        #return pbOrderByGroup
##    def _set(self, pbOrderByGroup):
##        u'Indicates whether the table crawler orders rows by values in the group name field.'
##    OrderByGroup = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def QueryFilter(self, ppQueryFilter):
##        u"The query filter associated with the specified 'Table'. Only rows that match the specified filter's criteria are returned by the crawler."
##        #return 
##
##    def _get(self):
##        u'The name of the field that contains values that identify groups of related items.'
##        #return pGroupField
##    def _set(self, pGroupField):
##        u'The name of the field that contains values that identify groups of related items.'
##    GroupField = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Table(self, ppTable):
##        u'The table as a source of the data to crawl.'
##        #return 
##
##    def _set(self, rhs):
##        u'The type of item returned by the crawler.'
##    CrawlerItemType = property(fset = _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The name of the field that contains time stamp value associated with the row.'
##        #return pTimeStampField
##    def _set(self, pTimeStampField):
##        u'The name of the field that contains time stamp value associated with the row.'
##    TimeStampField = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SelectionSet(self, ppSelectionSet):
##        u'The selection set as a source of the data to crawl.'
##        #return 
##

class IMosaicDataset(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a mosaic dataset.'
    _iid_ = GUID('{73B65B1D-3314-444D-A1E1-64BAE578DF7A}')
    _idlflags_ = ['oleautomation']
ITableCrawler2._methods_ = [
    COMMETHOD(['propput', helpstring(u'The name of the field that contains values that identify blocks of related items.')], HRESULT, 'BlockField',
              ( ['in'], BSTR, 'pBlockField' )),
    COMMETHOD(['propget', helpstring(u'The name of the field that contains values that identify blocks of related items.')], HRESULT, 'BlockField',
              ( ['retval', 'out'], POINTER(BSTR), 'pBlockField' )),
    COMMETHOD(['propput', helpstring(u'The maximum number of crawled rows allowed in a merged record.')], HRESULT, 'MaximumMergeItemsCount',
              ( ['in'], c_int, 'pMaximumMergeItemsCount' )),
    COMMETHOD(['propget', helpstring(u'The maximum number of crawled rows allowed in a merged record.')], HRESULT, 'MaximumMergeItemsCount',
              ( ['retval', 'out'], POINTER(c_int), 'pMaximumMergeItemsCount' )),
    COMMETHOD(['propputref', helpstring(u'The mosaic datset being crawled by the crawler.')], HRESULT, 'MosaicDataset',
              ( ['in'], POINTER(IMosaicDataset), 'ppMosaicDataset' )),
    COMMETHOD(['propget', helpstring(u'The mosaic datset being crawled by the crawler.')], HRESULT, 'MosaicDataset',
              ( ['retval', 'out'], POINTER(POINTER(IMosaicDataset)), 'ppMosaicDataset' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the input mosaic dataset has thumbnail.')], HRESULT, 'HasThumbnail',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbHasThumbnail' )),
]
################################################################
## code template for ITableCrawler2 implementation
##class ITableCrawler2_Impl(object):
##    @property
##    def HasThumbnail(self):
##        u'Indicates whether the input mosaic dataset has thumbnail.'
##        #return pbHasThumbnail
##
##    def _get(self):
##        u'The name of the field that contains values that identify blocks of related items.'
##        #return pBlockField
##    def _set(self, pBlockField):
##        u'The name of the field that contains values that identify blocks of related items.'
##    BlockField = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The maximum number of crawled rows allowed in a merged record.'
##        #return pMaximumMergeItemsCount
##    def _set(self, pMaximumMergeItemsCount):
##        u'The maximum number of crawled rows allowed in a merged record.'
##    MaximumMergeItemsCount = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def MosaicDataset(self, ppMosaicDataset):
##        u'The mosaic datset being crawled by the crawler.'
##        #return 
##

class IRasterPyramid(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the pyramids for a raster dataset.'
    _iid_ = GUID('{81BD0A10-6FB6-11D3-A407-0004AC1B1D86}')
    _idlflags_ = ['oleautomation']
IRasterPyramid._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates whether pyramid layers exist.')], HRESULT, 'Present',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Present' )),
    COMMETHOD(['propput', helpstring(u'The minimum raster pyramid size.')], HRESULT, 'MinimumSize',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IPnt), 'ppVal' )),
    COMMETHOD(['propget', helpstring(u'The minimum raster pyramid size.')], HRESULT, 'MinimumSize',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IPnt)), 'ppVal' )),
    COMMETHOD([helpstring(u'Build raster pyramids for this raster.')], HRESULT, 'Create'),
]
################################################################
## code template for IRasterPyramid implementation
##class IRasterPyramid_Impl(object):
##    def Create(self):
##        u'Build raster pyramids for this raster.'
##        #return 
##
##    def _get(self):
##        u'The minimum raster pyramid size.'
##        #return ppVal
##    def _set(self, ppVal):
##        u'The minimum raster pyramid size.'
##    MinimumSize = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Present(self):
##        u'Indicates whether pyramid layers exist.'
##        #return Present
##


# values for enumeration 'esriRasterLasDataType'
esriRasterLasDataZ = 0
esriRasterLasDataI = 1
esriRasterLasDataType = c_int # enum
class SearchItemURI(CoClass):
    u'A URI that identifies a search result item.'
    _reg_clsid_ = GUID('{44365024-E442-43DC-B0B6-864D23373420}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IItemURI(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control an item URI.'
    _iid_ = GUID('{0FC1719B-B1AA-4D23-AF07-932490A18075}')
    _idlflags_ = ['oleautomation']
class IItemURI2(IItemURI):
    _case_insensitive_ = True
    u'Provides access to members that control an item URI.'
    _iid_ = GUID('{441DBE58-23EE-4296-9A3B-FDB44027B828}')
    _idlflags_ = ['oleautomation']
class IItemPaths(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control item paths.'
    _iid_ = GUID('{CAFD4E87-0672-43E0-B92D-175306C1A309}')
    _idlflags_ = ['oleautomation']
class IItemPaths2(IItemPaths):
    _case_insensitive_ = True
    u'Provides access to members that control item paths.'
    _iid_ = GUID('{9C76B127-61AC-4E66-99B0-8C14A9A386EA}')
    _idlflags_ = ['oleautomation']
class ISearchItemURI(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a search builder.'
    _iid_ = GUID('{30CC5156-F0CA-4B34-AAC5-6FA5BAA4AB8F}')
    _idlflags_ = []
SearchItemURI._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IItemURI, IItemURI2, IItemPaths, IItemPaths2, ISearchItemURI]

class IRasterFunctionTemplate(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a raster template function.'
    _iid_ = GUID('{C395D08B-7FC8-4A61-AC3F-C114D690BE52}')
    _idlflags_ = ['oleautomation']
class IRasterFunctionTemplate2(IRasterFunctionTemplate):
    _case_insensitive_ = True
    u'Provides access to members that control a raster template function.'
    _iid_ = GUID('{E312D8AF-1B60-482B-AE13-B8E111CFC894}')
    _idlflags_ = ['oleautomation']
class IRasterFunction(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a raster function.'
    _iid_ = GUID('{CF7B7F99-3698-4F1F-AFF8-E3430E106B1E}')
    _idlflags_ = ['oleautomation']
IRasterFunctionTemplate._methods_ = [
    COMMETHOD(['propget', helpstring(u'The raster function in the template.')], HRESULT, 'Function',
              ( ['retval', 'out'], POINTER(POINTER(IRasterFunction)), 'ppFunction' )),
    COMMETHOD(['propputref', helpstring(u'The raster function in the template.')], HRESULT, 'Function',
              ( ['in'], POINTER(IRasterFunction), 'ppFunction' )),
    COMMETHOD(['propputref', helpstring(u'The raster function arguments in the template.')], HRESULT, 'Arguments',
              ( ['in'], POINTER(IUnknown), 'ppArgumets' )),
    COMMETHOD(['propget', helpstring(u'The raster function arguments in the template.')], HRESULT, 'Arguments',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppArgumets' )),
    COMMETHOD(['propget', helpstring(u'The raster function variables in the template.')], HRESULT, 'Variables',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'ppVariables' )),
]
################################################################
## code template for IRasterFunctionTemplate implementation
##class IRasterFunctionTemplate_Impl(object):
##    def Function(self, ppFunction):
##        u'The raster function in the template.'
##        #return 
##
##    @property
##    def Variables(self):
##        u'The raster function variables in the template.'
##        #return ppVariables
##
##    @property
##    def Arguments(self, ppArgumets):
##        u'The raster function arguments in the template.'
##        #return 
##

IRasterFunctionTemplate2._methods_ = [
    COMMETHOD(['propget', helpstring(u'The help document URL.')], HRESULT, 'Help',
              ( ['retval', 'out'], POINTER(BSTR), 'pHelp' )),
    COMMETHOD(['propput', helpstring(u'The help document URL.')], HRESULT, 'Help',
              ( ['in'], BSTR, 'pHelp' )),
    COMMETHOD(['propget', helpstring(u'The properties.')], HRESULT, 'Properties',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet)), 'pProperties' )),
    COMMETHOD(['propputref', helpstring(u'The properties.')], HRESULT, 'Properties',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet), 'pProperties' )),
    COMMETHOD([helpstring(u'Finds raster functions in this template that match the given function CLSID.')], HRESULT, 'FindMemberFunctionsByCLSID',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IUID), 'rasterFunctionCLSID' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'ppMatchingRasterFunctions' )),
    COMMETHOD([helpstring(u'Finds raster functions in this template that match the given function name.')], HRESULT, 'FindMemberFunctionsByName',
              ( ['in'], BSTR, 'rasterFunctionName' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'ppMatchingRasterFunctions' )),
    COMMETHOD([helpstring(u'Finds raster function arguments in this template that match the given function arguments CLSID.')], HRESULT, 'FindMemberFunctionsArgumentsByCLSID',
              ( [], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IUID), 'functionArgumentsCLSID' ),
              ( [], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'ppMatchingFunctionArguments' )),
]
################################################################
## code template for IRasterFunctionTemplate2 implementation
##class IRasterFunctionTemplate2_Impl(object):
##    def FindMemberFunctionsByName(self, rasterFunctionName):
##        u'Finds raster functions in this template that match the given function name.'
##        #return ppMatchingRasterFunctions
##
##    def FindMemberFunctionsByCLSID(self, rasterFunctionCLSID):
##        u'Finds raster functions in this template that match the given function CLSID.'
##        #return ppMatchingRasterFunctions
##
##    def FindMemberFunctionsArgumentsByCLSID(self, functionArgumentsCLSID, ppMatchingFunctionArguments):
##        u'Finds raster function arguments in this template that match the given function arguments CLSID.'
##        #return 
##
##    def _get(self):
##        u'The help document URL.'
##        #return pHelp
##    def _set(self, pHelp):
##        u'The help document URL.'
##    Help = property(_get, _set, doc = _set.__doc__)
##
##    def Properties(self, pProperties):
##        u'The properties.'
##        #return 
##

class IPixelBlock2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a PixelBlock.'
    _iid_ = GUID('{22DDED84-D0A6-448E-95BE-284503AC9CAC}')
    _idlflags_ = ['oleautomation']
IPixelBlock2._methods_ = [
    COMMETHOD(['propget', helpstring(u'The number of pixel arrays contained in the PixelBlock.')], HRESULT, 'Planes',
              ( ['retval', 'out'], POINTER(c_int), 'pVal' )),
    COMMETHOD(['propget', helpstring(u'The width of the PixelBlock in pixels.')], HRESULT, 'Width',
              ( ['retval', 'out'], POINTER(c_int), 'pVal' )),
    COMMETHOD(['propget', helpstring(u'The height of the PixelBlock in pixels.')], HRESULT, 'Height',
              ( ['retval', 'out'], POINTER(c_int), 'pVal' )),
    COMMETHOD(['propget', helpstring(u'The pixel type of the PixelBlock.')], HRESULT, 'PixelType',
              ( ['in'], c_int, 'plane' ),
              ( ['retval', 'out'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.rstPixelType), 'pVal' )),
    COMMETHOD(['propput', helpstring(u'The pixel type of the PixelBlock.')], HRESULT, 'PixelType',
              ( ['in'], c_int, 'plane' ),
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.rstPixelType, 'pVal' )),
    COMMETHOD(['propget', helpstring(u'The number of bytes per pixel for the PixelBlock.')], HRESULT, 'BytesPerPixel',
              ( ['retval', 'out'], POINTER(c_int), 'pVal' )),
    COMMETHOD(['propget', helpstring(u'A variant SafeArray of pixels for a specified plane.')], HRESULT, 'SafeArrayByRef',
              ( ['in'], c_int, 'plane' ),
              ( ['retval', 'out'], POINTER(VARIANT), 'pVal' )),
    COMMETHOD([helpstring(u'The value for a specified pixel.')], HRESULT, 'GetVal',
              ( ['in'], c_int, 'plane' ),
              ( ['in'], c_int, 'x' ),
              ( ['in'], c_int, 'y' ),
              ( ['retval', 'out'], POINTER(VARIANT), 'pVal' )),
]
################################################################
## code template for IPixelBlock2 implementation
##class IPixelBlock2_Impl(object):
##    @property
##    def SafeArrayByRef(self, plane):
##        u'A variant SafeArray of pixels for a specified plane.'
##        #return pVal
##
##    def GetVal(self, plane, x, y):
##        u'The value for a specified pixel.'
##        #return pVal
##
##    def _get(self, plane):
##        u'The pixel type of the PixelBlock.'
##        #return pVal
##    def _set(self, plane, pVal):
##        u'The pixel type of the PixelBlock.'
##    PixelType = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Planes(self):
##        u'The number of pixel arrays contained in the PixelBlock.'
##        #return pVal
##
##    @property
##    def Height(self):
##        u'The height of the PixelBlock in pixels.'
##        #return pVal
##
##    @property
##    def Width(self):
##        u'The width of the PixelBlock in pixels.'
##        #return pVal
##
##    @property
##    def BytesPerPixel(self):
##        u'The number of bytes per pixel for the PixelBlock.'
##        #return pVal
##


# values for enumeration 'esriRasterLasClassType'
esriRasterLasClassAny = -1
esriRasterLasClassNeverClassified = 0
esriRasterLasClassUnclassified = 1
esriRasterLasClassGround = 2
esriRasterLasClassLowVegetation = 3
esriRasterLasClassMediumVegetation = 4
esriRasterLasClassHighVegetation = 5
esriRasterLasClassBuilding = 6
esriRasterLasClassNoisyLowPoint = 7
esriRasterLasClassModelKeyPoint = 8
esriRasterLasClassWater = 9
esriRasterLasClassRail = 10
esriRasterLasClassRoadSurface = 11
esriRasterLasClassReserved_12 = 12
esriRasterLasClassWireGuard = 13
esriRasterLasClassWireConductor = 14
esriRasterLasClassTransmissionTower = 15
esriRasterLasClassWireStructureConnector = 16
esriRasterLasClassBridgeDeck = 17
esriRasterLasClassHighNoise = 18
esriRasterLasClassType = c_int # enum
class IFileCrawler(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a file system crawler.'
    _iid_ = GUID('{F8C71017-2A6C-4156-A443-1C33791CCC0A}')
    _idlflags_ = ['oleautomation']
IFileCrawler._methods_ = [
    COMMETHOD(['propput', helpstring(u'The file or folder path to crawl.')], HRESULT, 'Path',
              ( ['in'], BSTR, 'pFileOrFolderPath' )),
    COMMETHOD(['propget', helpstring(u'The file or folder path to crawl.')], HRESULT, 'Path',
              ( ['retval', 'out'], POINTER(BSTR), 'pFileOrFolderPath' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether folders are recursively traversed.')], HRESULT, 'Recurse',
              ( ['in'], VARIANT_BOOL, 'pbParseRecursively' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether folders are recursively traversed.')], HRESULT, 'Recurse',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbParseRecursively' )),
]
################################################################
## code template for IFileCrawler implementation
##class IFileCrawler_Impl(object):
##    def _get(self):
##        u'The file or folder path to crawl.'
##        #return pFileOrFolderPath
##    def _set(self, pFileOrFolderPath):
##        u'The file or folder path to crawl.'
##    Path = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether folders are recursively traversed.'
##        #return pbParseRecursively
##    def _set(self, pbParseRecursively):
##        u'Indicates whether folders are recursively traversed.'
##    Recurse = property(_get, _set, doc = _set.__doc__)
##

class IAISImageServiceX(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'IAISImageService Interface'
    _iid_ = GUID('{E97D7801-6643-4529-B88F-9318A38206E6}')
    _idlflags_ = []
class IAISClientObjectX(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'IAISClientObject Interface'
    _iid_ = GUID('{5496A49E-D690-412E-AD57-ADF29E49BFE5}')
    _idlflags_ = ['nonextensible']
IAISImageServiceX._methods_ = [
    COMMETHOD([], HRESULT, 'Init',
              ( ['in'], BSTR, 'imageServiceSource' ),
              ( ['in'], BSTR, 'ServiceProperties' ),
              ( ['in'], POINTER(IAISClientObjectX), 'parentClientObject' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'retStatus' )),
    COMMETHOD(['propget'], HRESULT, 'ServiceInfo',
              ( ['retval', 'out'], POINTER(BSTR), 'serviceInfoXml' )),
    COMMETHOD([], HRESULT, 'GetMetaData',
              ( ['in'], BSTR, 'requestString' ),
              ( ['retval', 'out'], POINTER(BSTR), 'metadata' )),
    COMMETHOD(['propget'], HRESULT, 'ServiceProperties',
              ( ['retval', 'out'], POINTER(BSTR), 'pVal' )),
    COMMETHOD(['propput'], HRESULT, 'ServiceProperties',
              ( ['in'], BSTR, 'pVal' )),
    COMMETHOD([], HRESULT, 'ApplyServiceProperties',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'retStatus' )),
    COMMETHOD([], HRESULT, 'ExtractAoi',
              ( ['in'], c_double, 'x1' ),
              ( ['in'], c_double, 'y1' ),
              ( ['in'], c_double, 'x2' ),
              ( ['in'], c_double, 'y2' ),
              ( ['in'], c_int, 'nCols' ),
              ( ['in'], c_int, 'nRows' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'retStatus' )),
    COMMETHOD([helpstring(u'Returns the size of buffer required for the last request AOI image.')], HRESULT, 'GetBufferSize',
              ( ['retval', 'out'], POINTER(c_int), 'bufferSize' )),
    COMMETHOD([helpstring(u'Gets the last requested AOI image into the buffer provided. This method will not work on 64-bit platforms and has been deprecated. Use the new alternative method QueryImageData() on IAISImageService3X for the same purpose.')], HRESULT, 'GetImageInBuffer',
              ( ['in'], c_int, 'bufferPtr' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'retStatus' )),
    COMMETHOD([], HRESULT, 'GetImageMetadata',
              ( ['in'], BSTR, 'levelOfDetail' ),
              ( ['retval', 'out'], POINTER(BSTR), 'imageMetaData' )),
    COMMETHOD(['propget', helpstring(u'Returns a status XML string that defines the state of the last operation performed by this Image Service object.')], HRESULT, 'Status',
              ( ['retval', 'out'], POINTER(BSTR), 'pVal' )),
    COMMETHOD([helpstring(u'Set the value of the given property')], HRESULT, 'SetProperty',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Value' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'retStatus' )),
    COMMETHOD([helpstring(u'Get the value of the given property')], HRESULT, 'GetProperty',
              ( ['in'], BSTR, 'Name' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Value' )),
    COMMETHOD([helpstring(u'Shuts downs and cleans up the Image Service object. This function does not clean up other objects created by the Image Service object itself.')], HRESULT, 'Close'),
]
################################################################
## code template for IAISImageServiceX implementation
##class IAISImageServiceX_Impl(object):
##    @property
##    def Status(self):
##        u'Returns a status XML string that defines the state of the last operation performed by this Image Service object.'
##        #return pVal
##
##    def GetImageMetadata(self, levelOfDetail):
##        '-no docstring-'
##        #return imageMetaData
##
##    @property
##    def ServiceInfo(self):
##        '-no docstring-'
##        #return serviceInfoXml
##
##    def GetMetaData(self, requestString):
##        '-no docstring-'
##        #return metadata
##
##    def GetImageInBuffer(self, bufferPtr):
##        u'Gets the last requested AOI image into the buffer provided. This method will not work on 64-bit platforms and has been deprecated. Use the new alternative method QueryImageData() on IAISImageService3X for the same purpose.'
##        #return retStatus
##
##    def ApplyServiceProperties(self):
##        '-no docstring-'
##        #return retStatus
##
##    def _get(self):
##        '-no docstring-'
##        #return pVal
##    def _set(self, pVal):
##        '-no docstring-'
##    ServiceProperties = property(_get, _set, doc = _set.__doc__)
##
##    def GetBufferSize(self):
##        u'Returns the size of buffer required for the last request AOI image.'
##        #return bufferSize
##
##    def Init(self, imageServiceSource, ServiceProperties, parentClientObject):
##        '-no docstring-'
##        #return retStatus
##
##    def Close(self):
##        u'Shuts downs and cleans up the Image Service object. This function does not clean up other objects created by the Image Service object itself.'
##        #return 
##
##    def SetProperty(self, Name, Value):
##        u'Set the value of the given property'
##        #return retStatus
##
##    def GetProperty(self, Name):
##        u'Get the value of the given property'
##        #return Value
##
##    def ExtractAoi(self, x1, y1, x2, y2, nCols, nRows):
##        '-no docstring-'
##        #return retStatus
##

class IAdjustXform(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeodataXform):
    _case_insensitive_ = True
    u'Provides access to members that control an adjustment (rubber sheeting) transform.'
    _iid_ = GUID('{8A26D9EF-F002-4124-8939-9CA7A25F484C}')
    _idlflags_ = ['oleautomation']
IAdjustXform._methods_ = [
    COMMETHOD([helpstring(u'Defines an adjustement transform using control points.')], HRESULT, 'DefineFromControlPoints',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPointCollection), 'pSrcGCPs' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPointCollection), 'pDstGCPs' )),
    COMMETHOD([helpstring(u'Gets control points.')], HRESULT, 'GetControlPoints',
              ( ['out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPointCollection)), 'ppSrcGCPs' ),
              ( ['out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPointCollection)), 'ppDstGCPs' )),
    COMMETHOD(['propget', helpstring(u'Indicates if natural neighbor interpolation should be used.')], HRESULT, 'NaturalNeighbor',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pNaturalNeighbor' )),
    COMMETHOD(['propput', helpstring(u'Indicates if natural neighbor interpolation should be used.')], HRESULT, 'NaturalNeighbor',
              ( ['in'], VARIANT_BOOL, 'pNaturalNeighbor' )),
    COMMETHOD(['propget', helpstring(u'The polynomial for initial approximation.')], HRESULT, 'PolynomialApproximation',
              ( ['retval', 'out'], POINTER(c_int), 'pOrder' )),
    COMMETHOD(['propput', helpstring(u'The polynomial for initial approximation.')], HRESULT, 'PolynomialApproximation',
              ( ['in'], c_int, 'pOrder' )),
]
################################################################
## code template for IAdjustXform implementation
##class IAdjustXform_Impl(object):
##    def DefineFromControlPoints(self, pSrcGCPs, pDstGCPs):
##        u'Defines an adjustement transform using control points.'
##        #return 
##
##    def _get(self):
##        u'The polynomial for initial approximation.'
##        #return pOrder
##    def _set(self, pOrder):
##        u'The polynomial for initial approximation.'
##    PolynomialApproximation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if natural neighbor interpolation should be used.'
##        #return pNaturalNeighbor
##    def _set(self, pNaturalNeighbor):
##        u'Indicates if natural neighbor interpolation should be used.'
##    NaturalNeighbor = property(_get, _set, doc = _set.__doc__)
##
##    def GetControlPoints(self):
##        u'Gets control points.'
##        #return ppSrcGCPs, ppDstGCPs
##

class LSRXform(CoClass):
    u'A Local Space Rectangular transform class.'
    _reg_clsid_ = GUID('{15446949-7FD6-44B6-8BB2-1A66FF06837E}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class ILSRXform(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeodataXform):
    _case_insensitive_ = True
    u'Provides access to members that control a Local Space Rectangular transform.'
    _iid_ = GUID('{DEB5E788-AD75-43FB-97E5-1155AA717203}')
    _idlflags_ = ['oleautomation']
LSRXform._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILSRXform, comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ITransformation, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersionSupportGEN, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class SPOT5Xform(CoClass):
    u'A SPOT5 1A transform class.'
    _reg_clsid_ = GUID('{BBC93AE5-459D-4D82-A95F-2FA49E9AE0C7}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IGeodataXform2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to additional members that control sensor specific geodata transform.'
    _iid_ = GUID('{A079EE4B-9E92-40CE-B83D-6BD811E33A1C}')
    _idlflags_ = ['oleautomation']
class ISPOT5Xform(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeodataXform):
    _case_insensitive_ = True
    u'Provides access to members that control a SPOT5 1A transform.'
    _iid_ = GUID('{4A303832-7EE4-491C-8434-84521E353589}')
    _idlflags_ = ['oleautomation']
class ICustomXform(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a custom geodata transform.'
    _iid_ = GUID('{7506A3ED-4146-4268-92F5-C342EF1F6905}')
    _idlflags_ = ['oleautomation']
class ISensorXform(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control sensor specific geodata transform.'
    _iid_ = GUID('{4FC73B78-D994-457A-90EE-A6D0015B6548}')
    _idlflags_ = ['oleautomation']
SPOT5Xform._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeodataXform, IGeodataXform2, ISPOT5Xform, comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ITransformation, ICustomXform, ISensorXform, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersionSupportGEN, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class IRemoveSliversParameters(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control parameters for sliver removal.'
    _iid_ = GUID('{CD210B62-ECF0-4429-95AF-BDDD8B404740}')
    _idlflags_ = ['oleautomation']
IRemoveSliversParameters._methods_ = [
    COMMETHOD(['propput', helpstring(u'A number of points in a polygon below which it is eligible to be considered a sliver using minimum area or minimum circularity tests. A value of zero indicates that polygons are eligible.')], HRESULT, 'MinPointsForElimination',
              ( ['in'], c_int, 'pMinPointsForElimination' )),
    COMMETHOD(['propget', helpstring(u'A number of points in a polygon below which it is eligible to be considered a sliver using minimum area or minimum circularity tests. A value of zero indicates that polygons are eligible.')], HRESULT, 'MinPointsForElimination',
              ( ['retval', 'out'], POINTER(c_int), 'pMinPointsForElimination' )),
    COMMETHOD(['propput', helpstring(u'The area below which a polygon is considered a sliver.')], HRESULT, 'MinArea',
              ( ['in'], c_double, 'pMinArea' )),
    COMMETHOD(['propget', helpstring(u'The area below which a polygon is considered a sliver.')], HRESULT, 'MinArea',
              ( ['retval', 'out'], POINTER(c_double), 'pMinArea' )),
    COMMETHOD(['propput', helpstring(u'The circularity value below which a polygon is considered a sliver.')], HRESULT, 'MinCircularityRatio',
              ( ['in'], c_double, 'pMinCircularityRatio' )),
    COMMETHOD(['propget', helpstring(u'The circularity value below which a polygon is considered a sliver.')], HRESULT, 'MinCircularityRatio',
              ( ['retval', 'out'], POINTER(c_double), 'pMinCircularityRatio' )),
]
################################################################
## code template for IRemoveSliversParameters implementation
##class IRemoveSliversParameters_Impl(object):
##    def _get(self):
##        u'The area below which a polygon is considered a sliver.'
##        #return pMinArea
##    def _set(self, pMinArea):
##        u'The area below which a polygon is considered a sliver.'
##    MinArea = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'A number of points in a polygon below which it is eligible to be considered a sliver using minimum area or minimum circularity tests. A value of zero indicates that polygons are eligible.'
##        #return pMinPointsForElimination
##    def _set(self, pMinPointsForElimination):
##        u'A number of points in a polygon below which it is eligible to be considered a sliver using minimum area or minimum circularity tests. A value of zero indicates that polygons are eligible.'
##    MinPointsForElimination = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The circularity value below which a polygon is considered a sliver.'
##        #return pMinCircularityRatio
##    def _set(self, pMinCircularityRatio):
##        u'The circularity value below which a polygon is considered a sliver.'
##    MinCircularityRatio = property(_get, _set, doc = _set.__doc__)
##

class IRemoveSliversParameters2(IRemoveSliversParameters):
    _case_insensitive_ = True
    u'Provides access to members that control parameters for sliver removal.'
    _iid_ = GUID('{6F64A9EA-489A-4075-B5E3-99A56AD4F969}')
    _idlflags_ = ['oleautomation']
IRemoveSliversParameters2._methods_ = [
    COMMETHOD(['propput', helpstring(u'The maximum allowed area below which a polygon part may be considered a sliver based on MinCircularityRatio.')], HRESULT, 'MaxSliverArea',
              ( ['in'], c_double, 'pMaxSliverArea' )),
    COMMETHOD(['propget', helpstring(u'The maximum allowed area below which a polygon part may be considered a sliver based on MinCircularityRatio.')], HRESULT, 'MaxSliverArea',
              ( ['retval', 'out'], POINTER(c_double), 'pMaxSliverArea' )),
]
################################################################
## code template for IRemoveSliversParameters2 implementation
##class IRemoveSliversParameters2_Impl(object):
##    def _get(self):
##        u'The maximum allowed area below which a polygon part may be considered a sliver based on MinCircularityRatio.'
##        #return pMaxSliverArea
##    def _set(self, pMaxSliverArea):
##        u'The maximum allowed area below which a polygon part may be considered a sliver based on MinCircularityRatio.'
##    MaxSliverArea = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'esriRasterRemoveHazeMethod'
esriRasterRemoveHazeDarkPixel = 0
esriRasterRemoveHazeDarkPixelSlide = 1
esriRasterRemoveHazeDarkChannelPrior = 2
esriRasterRemoveHazeHOT = 3
esriRasterRemoveHazeMethod = c_int # enum
class IRasterResamplingControl(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that provides raster resampling control.'
    _iid_ = GUID('{DFEF659C-012D-41AE-965D-5E1EC4841ADD}')
    _idlflags_ = ['oleautomation']
IRasterResamplingControl._methods_ = [
    COMMETHOD(['propget', helpstring(u'The raster resampling hint.')], HRESULT, 'ResamplingHint',
              ( ['retval', 'out'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriRasterResamplingHint), 'pHint' )),
    COMMETHOD(['propput', helpstring(u'The raster resampling hint.')], HRESULT, 'ResamplingHint',
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriRasterResamplingHint, 'pHint' )),
]
################################################################
## code template for IRasterResamplingControl implementation
##class IRasterResamplingControl_Impl(object):
##    def _get(self):
##        u'The raster resampling hint.'
##        #return pHint
##    def _set(self, pHint):
##        u'The raster resampling hint.'
##    ResamplingHint = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'esriFocalStatisticType'
esriFocalStatisticMin = 1
esriFocalStatisticMax = 2
esriFocalStatisticMean = 3
esriFocalStatisticStandardDeviation = 4
esriFocalStatisticType = c_int # enum
class IPolygonMeasurement(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Polygon measurement and its associated uncertainty information.'
    _iid_ = GUID('{61A5E367-F808-433C-A274-CDD12879A513}')
    _idlflags_ = ['oleautomation']
IPolygonMeasurement._methods_ = [
    COMMETHOD(['propget', helpstring(u'The area measurement.')], HRESULT, 'AreaMeasurement',
              ( ['retval', 'out'], POINTER(c_double), 'AreaMeasurement' )),
    COMMETHOD(['propput', helpstring(u'The area measurement.')], HRESULT, 'AreaMeasurement',
              ( ['in'], c_double, 'AreaMeasurement' )),
    COMMETHOD(['propget', helpstring(u'The area measurement uncertainty.')], HRESULT, 'AreaUncertainty',
              ( ['retval', 'out'], POINTER(c_double), 'AreaUncertainty' )),
    COMMETHOD(['propput', helpstring(u'The area measurement uncertainty.')], HRESULT, 'AreaUncertainty',
              ( ['in'], c_double, 'AreaUncertainty' )),
    COMMETHOD(['propget', helpstring(u'The linear unit of this area measurment.')], HRESULT, 'LinearUnit',
              ( ['retval', 'out'], POINTER(BSTR), 'pLinearUnit' )),
    COMMETHOD(['propput', helpstring(u'The linear unit of this area measurment.')], HRESULT, 'LinearUnit',
              ( ['in'], BSTR, 'pLinearUnit' )),
    COMMETHOD(['propget', helpstring(u'The perimeter measurement.')], HRESULT, 'PerimeterMeasurement',
              ( ['retval', 'out'], POINTER(c_double), 'PerimeterMeasurement' )),
    COMMETHOD(['propput', helpstring(u'The perimeter measurement.')], HRESULT, 'PerimeterMeasurement',
              ( ['in'], c_double, 'PerimeterMeasurement' )),
    COMMETHOD(['propget', helpstring(u'The perimeter measurement uncertainty.')], HRESULT, 'PerimeterUncertainty',
              ( ['retval', 'out'], POINTER(c_double), 'PerimeterUncertainty' )),
    COMMETHOD(['propput', helpstring(u'The perimeter measurement uncertainty.')], HRESULT, 'PerimeterUncertainty',
              ( ['in'], c_double, 'PerimeterUncertainty' )),
    COMMETHOD([helpstring(u'Resets all the properties of this IPolygonMeasurement to their default values.')], HRESULT, 'Reset'),
]
################################################################
## code template for IPolygonMeasurement implementation
##class IPolygonMeasurement_Impl(object):
##    def Reset(self):
##        u'Resets all the properties of this IPolygonMeasurement to their default values.'
##        #return 
##
##    def _get(self):
##        u'The linear unit of this area measurment.'
##        #return pLinearUnit
##    def _set(self, pLinearUnit):
##        u'The linear unit of this area measurment.'
##    LinearUnit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The perimeter measurement.'
##        #return PerimeterMeasurement
##    def _set(self, PerimeterMeasurement):
##        u'The perimeter measurement.'
##    PerimeterMeasurement = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The perimeter measurement uncertainty.'
##        #return PerimeterUncertainty
##    def _set(self, PerimeterUncertainty):
##        u'The perimeter measurement uncertainty.'
##    PerimeterUncertainty = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The area measurement uncertainty.'
##        #return AreaUncertainty
##    def _set(self, AreaUncertainty):
##        u'The area measurement uncertainty.'
##    AreaUncertainty = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The area measurement.'
##        #return AreaMeasurement
##    def _set(self, AreaMeasurement):
##        u'The area measurement.'
##    AreaMeasurement = property(_get, _set, doc = _set.__doc__)
##

class IRasterDomainExtractor(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that extracts the raster domain.'
    _iid_ = GUID('{140BEE32-EC2F-11D4-B2B1-00508BCDC74B}')
    _idlflags_ = ['oleautomation']
IRasterDomainExtractor._methods_ = [
    COMMETHOD([helpstring(u'Extracts the raster domain.')], HRESULT, 'ExtractDomain',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' ),
              ( ['in'], VARIANT_BOOL, 'bPixelCenterBased' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPolygon)), 'domainPolygon' )),
]
################################################################
## code template for IRasterDomainExtractor implementation
##class IRasterDomainExtractor_Impl(object):
##    def ExtractDomain(self, pRaster, bPixelCenterBased):
##        u'Extracts the raster domain.'
##        #return domainPolygon
##

class RasterDomainExtractor(CoClass):
    u'A lightweight object for extracting raster domain.'
    _reg_clsid_ = GUID('{A48A92B0-EC2F-11D4-B2B1-00508BCDC74B}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
RasterDomainExtractor._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterDomainExtractor]

class MosaicRastersFunction(CoClass):
    u'The Mosaic Rasters function.'
    _reg_clsid_ = GUID('{33C422D8-B2E5-4BA3-BDD3-2D6000E49723}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
MosaicRastersFunction._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunction, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class IDefineOverviewsParameters(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control parameters for define overviews of a mosaic dataset.'
    _iid_ = GUID('{B22217BA-EF57-4F30-B2D4-337A1505A286}')
    _idlflags_ = ['oleautomation']
IDefineOverviewsParameters._methods_ = [
    COMMETHOD(['propput', helpstring(u'Indicates whether overview tiles are generated irrespective of existing primary or overview items in the specified area.')], HRESULT, 'ForceOverviewTiles',
              ( ['in'], VARIANT_BOOL, 'pbForceOverviewTiles' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether overview tiles are generated irrespective of existing primary or overview items in the specified area.')], HRESULT, 'ForceOverviewTiles',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbForceOverviewTiles' )),
    COMMETHOD(['propput', helpstring(u'The object ID of the raster type instance associated with a preview define overview operation. Properties that control how overview tiles are created are read from the matching raster type instance. A value here also indicates that no new schema is created by ?!?\x08?&')], HRESULT, 'InstanceID',
              ( ['in'], c_int, 'pInstanceID' )),
    COMMETHOD(['propget', helpstring(u'The object ID of the raster type instance associated with a preview define overview operation. Properties that control how overview tiles are created are read from the matching raster type instance. A value here also indicates that no new schema is created by ?!?\x08?&')], HRESULT, 'InstanceID',
              ( ['retval', 'out'], POINTER(c_int), 'pInstanceID' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether all existing overview instances are refreshed. A TRUE value also indicates that no new schema of overview tiles is created by the IMosaicDatasetOperation.DefineOverviews method.')], HRESULT, 'RefreshAllInstances',
              ( ['in'], VARIANT_BOOL, 'pbRefreshAllInstances' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether all existing overview instances are refreshed. A TRUE value also indicates that no new schema of overview tiles is created by the IMosaicDatasetOperation.DefineOverviews method.')], HRESULT, 'RefreshAllInstances',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbRefreshAllInstances' )),
]
################################################################
## code template for IDefineOverviewsParameters implementation
##class IDefineOverviewsParameters_Impl(object):
##    def _get(self):
##        u'The object ID of the raster type instance associated with a preview define overview operation. Properties that control how overview tiles are created are read from the matching raster type instance. A value here also indicates that no new schema is created by ?!?\x08?&'
##        #return pInstanceID
##    def _set(self, pInstanceID):
##        u'The object ID of the raster type instance associated with a preview define overview operation. Properties that control how overview tiles are created are read from the matching raster type instance. A value here also indicates that no new schema is created by ?!?\x08?&'
##    InstanceID = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether overview tiles are generated irrespective of existing primary or overview items in the specified area.'
##        #return pbForceOverviewTiles
##    def _set(self, pbForceOverviewTiles):
##        u'Indicates whether overview tiles are generated irrespective of existing primary or overview items in the specified area.'
##    ForceOverviewTiles = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether all existing overview instances are refreshed. A TRUE value also indicates that no new schema of overview tiles is created by the IMosaicDatasetOperation.DefineOverviews method.'
##        #return pbRefreshAllInstances
##    def _set(self, pbRefreshAllInstances):
##        u'Indicates whether all existing overview instances are refreshed. A TRUE value also indicates that no new schema of overview tiles is created by the IMosaicDatasetOperation.DefineOverviews method.'
##    RefreshAllInstances = property(_get, _set, doc = _set.__doc__)
##

IAISClientObjectX._methods_ = [
    COMMETHOD([helpstring(u'initialize the Server Connection with an ISCConfig file/string. ')], HRESULT, 'Init',
              ( ['in'], BSTR, 'iscConfig' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'retVal' )),
    COMMETHOD([helpstring(u'Shuts down and cleans up the Client object. ')], HRESULT, 'Close',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'retVal' )),
    COMMETHOD([helpstring(u'Returns the version number of Server on specified host and port. An empty port will use the default server port')], HRESULT, 'GetVersion',
              ( ['in'], BSTR, 'serverHost' ),
              ( ['in'], BSTR, 'serverPort' ),
              ( ['retval', 'out'], POINTER(c_float), 'Version' )),
    COMMETHOD([helpstring(u'Gets the information on the Server.')], HRESULT, 'GetServerInfo',
              ( ['in'], BSTR, 'requestString' ),
              ( ['retval', 'out'], POINTER(BSTR), 'serverInfo' )),
    COMMETHOD([helpstring(u'Opens an image service as defined by the fully qualified ')], HRESULT, 'OpenImageService',
              ( ['in'], BSTR, 'imageServiceSource' ),
              ( ['in'], BSTR, 'serviceInitializationProperties' ),
              ( ['retval', 'out'], POINTER(POINTER(IAISImageServiceX)), 'ImageService' )),
    COMMETHOD(['propget', helpstring(u'Returns an XML detailing the status of the last operation performed on this object.')], HRESULT, 'Status',
              ( ['retval', 'out'], POINTER(BSTR), 'Status' )),
    COMMETHOD([helpstring(u'This function is intended for internal use by other Image Service objects. ')], HRESULT, 'Report',
              ( ['in'], BSTR, 'statusString' )),
]
################################################################
## code template for IAISClientObjectX implementation
##class IAISClientObjectX_Impl(object):
##    @property
##    def Status(self):
##        u'Returns an XML detailing the status of the last operation performed on this object.'
##        #return Status
##
##    def GetServerInfo(self, requestString):
##        u'Gets the information on the Server.'
##        #return serverInfo
##
##    def Init(self, iscConfig):
##        u'initialize the Server Connection with an ISCConfig file/string. '
##        #return retVal
##
##    def Report(self, statusString):
##        u'This function is intended for internal use by other Image Service objects. '
##        #return 
##
##    def Close(self):
##        u'Shuts down and cleans up the Client object. '
##        #return retVal
##
##    def GetVersion(self, serverHost, serverPort):
##        u'Returns the version number of Server on specified host and port. An empty port will use the default server port'
##        #return Version
##
##    def OpenImageService(self, imageServiceSource, serviceInitializationProperties):
##        u'Opens an image service as defined by the fully qualified '
##        #return ImageService
##

class IExcludedAreaFunctionArguments(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control Excluded Area function arguments.'
    _iid_ = GUID('{DFFF1D7C-BEE4-4BF3-8781-F6092817FA98}')
    _idlflags_ = ['oleautomation']
IExcludedAreaFunctionArguments._methods_ = [
    COMMETHOD(['propget', helpstring(u'The input raster.')], HRESULT, 'Raster',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppRaster' )),
    COMMETHOD(['propputref', helpstring(u'The input raster.')], HRESULT, 'Raster',
              ( ['in'], POINTER(IUnknown), 'ppRaster' )),
    COMMETHOD(['propget', helpstring(u'The white threshold value.')], HRESULT, 'WhiteThreshold',
              ( ['retval', 'out'], POINTER(c_double), 'pValue' )),
    COMMETHOD(['propput', helpstring(u'The white threshold value.')], HRESULT, 'WhiteThreshold',
              ( ['in'], c_double, 'pValue' )),
    COMMETHOD(['propget', helpstring(u'The black threshold value.')], HRESULT, 'BlackThreshold',
              ( ['retval', 'out'], POINTER(c_double), 'pValue' )),
    COMMETHOD(['propput', helpstring(u'The black threshold value.')], HRESULT, 'BlackThreshold',
              ( ['in'], c_double, 'pValue' )),
    COMMETHOD(['propget', helpstring(u'The red threshold value.')], HRESULT, 'RedThreshold',
              ( ['retval', 'out'], POINTER(c_double), 'pValue' )),
    COMMETHOD(['propput', helpstring(u'The red threshold value.')], HRESULT, 'RedThreshold',
              ( ['in'], c_double, 'pValue' )),
    COMMETHOD(['propget', helpstring(u'The green threshold value.')], HRESULT, 'GreenThreshold',
              ( ['retval', 'out'], POINTER(c_double), 'pValue' )),
    COMMETHOD(['propput', helpstring(u'The green threshold value.')], HRESULT, 'GreenThreshold',
              ( ['in'], c_double, 'pValue' )),
    COMMETHOD(['propget', helpstring(u'The blue threshold value.')], HRESULT, 'BlueThreshold',
              ( ['retval', 'out'], POINTER(c_double), 'pValue' )),
    COMMETHOD(['propput', helpstring(u'The blue threshold value.')], HRESULT, 'BlueThreshold',
              ( ['in'], c_double, 'pValue' )),
    COMMETHOD(['propget', helpstring(u'The cyan threshold value.')], HRESULT, 'CyanThreshold',
              ( ['retval', 'out'], POINTER(c_double), 'pValue' )),
    COMMETHOD(['propput', helpstring(u'The cyan threshold value.')], HRESULT, 'CyanThreshold',
              ( ['in'], c_double, 'pValue' )),
    COMMETHOD(['propget', helpstring(u'The magita threshold value.')], HRESULT, 'MagitaThreshold',
              ( ['retval', 'out'], POINTER(c_double), 'pValue' )),
    COMMETHOD(['propput', helpstring(u'The magita threshold value.')], HRESULT, 'MagitaThreshold',
              ( ['in'], c_double, 'pValue' )),
    COMMETHOD(['propget', helpstring(u'The yellow threshold value.')], HRESULT, 'YellowThreshold',
              ( ['retval', 'out'], POINTER(c_double), 'pValue' )),
    COMMETHOD(['propput', helpstring(u'The yellow threshold value.')], HRESULT, 'YellowThreshold',
              ( ['in'], c_double, 'pValue' )),
    COMMETHOD(['propget', helpstring(u'The low histogram threshold value.')], HRESULT, 'LowHistogramThreshold',
              ( ['retval', 'out'], POINTER(c_double), 'pValue' )),
    COMMETHOD(['propput', helpstring(u'The low histogram threshold value.')], HRESULT, 'LowHistogramThreshold',
              ( ['in'], c_double, 'pValue' )),
    COMMETHOD(['propget', helpstring(u'The high histogram threshold value.')], HRESULT, 'HighHistogramThreshold',
              ( ['retval', 'out'], POINTER(c_double), 'pValue' )),
    COMMETHOD(['propput', helpstring(u'The high histogram threshold value.')], HRESULT, 'HighHistogramThreshold',
              ( ['in'], c_double, 'pValue' )),
    COMMETHOD(['propget', helpstring(u'The actual pixel bit depth.')], HRESULT, 'PixelBitDepth',
              ( ['retval', 'out'], POINTER(c_int), 'pValue' )),
    COMMETHOD(['propput', helpstring(u'The actual pixel bit depth.')], HRESULT, 'PixelBitDepth',
              ( ['in'], c_int, 'pValue' )),
]
################################################################
## code template for IExcludedAreaFunctionArguments implementation
##class IExcludedAreaFunctionArguments_Impl(object):
##    def Raster(self, ppRaster):
##        u'The input raster.'
##        #return 
##
##    def _get(self):
##        u'The yellow threshold value.'
##        #return pValue
##    def _set(self, pValue):
##        u'The yellow threshold value.'
##    YellowThreshold = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The blue threshold value.'
##        #return pValue
##    def _set(self, pValue):
##        u'The blue threshold value.'
##    BlueThreshold = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The actual pixel bit depth.'
##        #return pValue
##    def _set(self, pValue):
##        u'The actual pixel bit depth.'
##    PixelBitDepth = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The red threshold value.'
##        #return pValue
##    def _set(self, pValue):
##        u'The red threshold value.'
##    RedThreshold = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The cyan threshold value.'
##        #return pValue
##    def _set(self, pValue):
##        u'The cyan threshold value.'
##    CyanThreshold = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The high histogram threshold value.'
##        #return pValue
##    def _set(self, pValue):
##        u'The high histogram threshold value.'
##    HighHistogramThreshold = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The black threshold value.'
##        #return pValue
##    def _set(self, pValue):
##        u'The black threshold value.'
##    BlackThreshold = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The green threshold value.'
##        #return pValue
##    def _set(self, pValue):
##        u'The green threshold value.'
##    GreenThreshold = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The magita threshold value.'
##        #return pValue
##    def _set(self, pValue):
##        u'The magita threshold value.'
##    MagitaThreshold = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The low histogram threshold value.'
##        #return pValue
##    def _set(self, pValue):
##        u'The low histogram threshold value.'
##    LowHistogramThreshold = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The white threshold value.'
##        #return pValue
##    def _set(self, pValue):
##        u'The white threshold value.'
##    WhiteThreshold = property(_get, _set, doc = _set.__doc__)
##

class BasicRasterSdeLoader(CoClass):
    u'A mechanism to control creation of SDE Raster datasets and load raster data.'
    _reg_clsid_ = GUID('{84E88AC0-9639-4970-A039-FF7EB58FF15C}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IBasicRasterSdeConnection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the RasterSDE connection.'
    _iid_ = GUID('{055452C1-0582-4863-B73E-1185095C2CC9}')
    _idlflags_ = ['oleautomation']
class IRasterSdeStorage(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control RasterSDE storage.'
    _iid_ = GUID('{B4153F6E-FE14-11D3-B2BF-00C04F8EDEFF}')
    _idlflags_ = ['oleautomation']
class IRasterSdeServerOperation(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the RasterSDE operation.'
    _iid_ = GUID('{867A268A-0ED0-406B-955D-81EB20D806EA}')
    _idlflags_ = ['oleautomation']
class IRasterSdeStorage2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control RasterSDE storage.'
    _iid_ = GUID('{DDC9C0C4-0556-47B6-80E8-0CA036745441}')
    _idlflags_ = ['oleautomation']
class IRasterSdeServerOperation2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the RasterSDE operation.'
    _iid_ = GUID('{01540BA6-B1FD-43C7-AB8C-AA04389AD031}')
    _idlflags_ = ['oleautomation']
class IRasterSdeCatalog(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the RasterSDE connection.'
    _iid_ = GUID('{37A7AF98-CBDC-4E5F-B1B5-7706804DE6B0}')
    _idlflags_ = ['oleautomation']
BasicRasterSdeLoader._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IBasicRasterSdeConnection, IRasterSdeStorage, IRasterSdeServerOperation, IRasterSdeStorage2, IRasterSdeServerOperation2, IRasterSdeCatalog, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]


# values for enumeration 'esriDuplicateItemsAction'
esriDuplicateItemsAllow = 1
esriDuplicateItemsExclude = 2
esriDuplicateItemsOverwrite = 3
esriDuplicateItemsAction = c_int # enum
class ITableCrawler3(ITableCrawler2):
    _case_insensitive_ = True
    u'Provides access to members that control a crawler capable of traversing tables.'
    _iid_ = GUID('{557A0CE7-5525-4EBF-87E4-CEA03954BBAE}')
    _idlflags_ = []
ITableCrawler3._methods_ = [
    COMMETHOD([helpstring(u'Returns the requested row in the table being crawled.')], HRESULT, 'GetRow',
              ( ['in'], c_int, 'OID' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRow)), 'ppRow' )),
]
################################################################
## code template for ITableCrawler3 implementation
##class ITableCrawler3_Impl(object):
##    def GetRow(self, OID):
##        u'Returns the requested row in the table being crawled.'
##        #return ppRow
##

class SpectralConversionFunction(CoClass):
    u'The spectral conversion function.'
    _reg_clsid_ = GUID('{35EEAD6E-D973-41AC-837D-F16F6023E256}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
SpectralConversionFunction._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunction, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class Formosat2Xform(CoClass):
    u'A Formosat2 transform class.'
    _reg_clsid_ = GUID('{A334516D-DE73-43BD-9CC5-1CC324705EF8}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IFormosat2Xform(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeodataXform):
    _case_insensitive_ = True
    u'Provides access to members that control a Formosat2 transform.'
    _iid_ = GUID('{3D66C2C5-FF27-40F0-AAF6-FAF18BC07BD5}')
    _idlflags_ = ['oleautomation']
Formosat2Xform._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeodataXform, IGeodataXform2, IFormosat2Xform, comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ITransformation, ICustomXform, ISensorXform, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersionSupportGEN, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class Spot6FileCrawler(CoClass):
    u'A crawler for SPOT 6 files.'
    _reg_clsid_ = GUID('{D28525C9-F74C-4B0C-AF39-8C5B181C943E}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IDataSourceCrawler(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a data source crawler.'
    _iid_ = GUID('{A1631439-6F80-4AC3-B559-0D1836F6B13A}')
    _idlflags_ = ['oleautomation']
class IDataSourceCrawler2(IDataSourceCrawler):
    _case_insensitive_ = True
    u'Provides access to members that control a data source crawler.'
    _iid_ = GUID('{6585FBDE-358F-40A7-8748-79F99B374F5F}')
    _idlflags_ = ['oleautomation']
class IFileCrawler2(IFileCrawler):
    _case_insensitive_ = True
    u'Provides access to members that control a file system crawler.'
    _iid_ = GUID('{A6ABD342-BE4E-4C34-8322-93F43009E667}')
    _idlflags_ = []
Spot6FileCrawler._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDataSourceCrawler2, IFileCrawler, IFileCrawler2, IItemPaths, IItemPaths2]

class IMaskFunctionArguments(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control mask function arguments.'
    _iid_ = GUID('{0CEAECA7-5468-4124-B362-F65C7A49BCCB}')
    _idlflags_ = ['oleautomation']
IMaskFunctionArguments._methods_ = [
    COMMETHOD(['propget', helpstring(u'The input raster.')], HRESULT, 'Raster',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppRaster' )),
    COMMETHOD(['propputref', helpstring(u'The input raster.')], HRESULT, 'Raster',
              ( ['in'], POINTER(IUnknown), 'ppRaster' )),
    COMMETHOD(['propget', helpstring(u'The list of, space separated, NoData values, for each band.')], HRESULT, 'NoDataValues',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray)), 'ppValues' )),
    COMMETHOD(['propputref', helpstring(u'The list of, space separated, NoData values, for each band.')], HRESULT, 'NoDataValues',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray), 'ppValues' )),
    COMMETHOD(['propget', helpstring(u'The included value ranges, i.e. [min, max] for each band.')], HRESULT, 'IncludedRanges',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray)), 'ppRanges' )),
    COMMETHOD(['propputref', helpstring(u'The included value ranges, i.e. [min, max] for each band.')], HRESULT, 'IncludedRanges',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray), 'ppRanges' )),
]
################################################################
## code template for IMaskFunctionArguments implementation
##class IMaskFunctionArguments_Impl(object):
##    def IncludedRanges(self, ppRanges):
##        u'The included value ranges, i.e. [min, max] for each band.'
##        #return 
##
##    def Raster(self, ppRaster):
##        u'The input raster.'
##        #return 
##
##    def NoDataValues(self, ppValues):
##        u'The list of, space separated, NoData values, for each band.'
##        #return 
##

class IOverviewTileParameters(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control overview tile parameters.'
    _iid_ = GUID('{5A70D2D7-2810-4A5B-8791-5DB54AEC9BCF}')
    _idlflags_ = ['oleautomation']
IOverviewTileParameters._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The polygon within which overview tiles are created.')], HRESULT, 'AoiGeometry',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'ppAoiGeometry' )),
    COMMETHOD(['propget', helpstring(u'The polygon within which overview tiles are created.')], HRESULT, 'AoiGeometry',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry)), 'ppAoiGeometry' )),
    COMMETHOD(['propputref', helpstring(u'The origin of the grid containing overview tiles.')], HRESULT, 'Origin',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'ppOrigin' )),
    COMMETHOD(['propget', helpstring(u'The origin of the grid containing overview tiles.')], HRESULT, 'Origin',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint)), 'ppOrigin' )),
    COMMETHOD(['propput', helpstring(u'The cell size of the first level of overview tiles in the units of the coordinate system of the catalog. If this property is not specified, the default value is computed automatically.')], HRESULT, 'CellSize',
              ( ['in'], c_double, 'pCellsize' )),
    COMMETHOD(['propget', helpstring(u'The cell size of the first level of overview tiles in the units of the coordinate system of the catalog. If this property is not specified, the default value is computed automatically.')], HRESULT, 'CellSize',
              ( ['retval', 'out'], POINTER(c_double), 'pCellsize' )),
    COMMETHOD(['propput', helpstring(u'The recommended number of pixel columns in each overview tiles.')], HRESULT, 'TileCols',
              ( ['in'], c_int, 'pTileColPixels' )),
    COMMETHOD(['propget', helpstring(u'The recommended number of pixel columns in each overview tiles.')], HRESULT, 'TileCols',
              ( ['retval', 'out'], POINTER(c_int), 'pTileColPixels' )),
    COMMETHOD(['propput', helpstring(u'The recommended number of pixel rows in each overview tiles.')], HRESULT, 'TileRows',
              ( ['in'], c_int, 'pTileRowPixels' )),
    COMMETHOD(['propget', helpstring(u'The recommended number of pixel rows in each overview tiles.')], HRESULT, 'TileRows',
              ( ['retval', 'out'], POINTER(c_int), 'pTileRowPixels' )),
    COMMETHOD(['propput', helpstring(u'The number of levels of overview tiles created.')], HRESULT, 'Levels',
              ( ['in'], c_int, 'pLevels' )),
    COMMETHOD(['propget', helpstring(u'The number of levels of overview tiles created.')], HRESULT, 'Levels',
              ( ['retval', 'out'], POINTER(c_int), 'pLevels' )),
    COMMETHOD(['propput', helpstring(u'The factor by which two neighboring overview levels differ.')], HRESULT, 'OverviewFactor',
              ( ['in'], c_int, 'pOverviewFactor' )),
    COMMETHOD(['propget', helpstring(u'The factor by which two neighboring overview levels differ.')], HRESULT, 'OverviewFactor',
              ( ['retval', 'out'], POINTER(c_int), 'pOverviewFactor' )),
    COMMETHOD(['propput', helpstring(u'The recommended maximum size (in pixels) on any dimension for the lowest resolution overview item. A higher value for this property results in fewer levels of overviews. The operation continues to define a new level as long as the number of pixels of the overv?!?\x08?&')], HRESULT, 'MaximumSizeOfTopmostOverview',
              ( ['in'], c_int, 'pMaximumSizeOfTopmostOverview' )),
    COMMETHOD(['propget', helpstring(u'The recommended maximum size (in pixels) on any dimension for the lowest resolution overview item. A higher value for this property results in fewer levels of overviews. The operation continues to define a new level as long as the number of pixels of the overv?!?\x08?&')], HRESULT, 'MaximumSizeOfTopmostOverview',
              ( ['retval', 'out'], POINTER(c_int), 'pMaximumSizeOfTopmostOverview' )),
    COMMETHOD(['propputref', helpstring(u'The workspace name where overview raster datasets are generated and stored.')], HRESULT, 'WorkspaceName',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspaceName), 'ppOverviewWorkspaceName' )),
    COMMETHOD(['propget', helpstring(u'The workspace name where overview raster datasets are generated and stored.')], HRESULT, 'WorkspaceName',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspaceName)), 'ppOverviewWorkspaceName' )),
]
################################################################
## code template for IOverviewTileParameters implementation
##class IOverviewTileParameters_Impl(object):
##    @property
##    def Origin(self, ppOrigin):
##        u'The origin of the grid containing overview tiles.'
##        #return 
##
##    @property
##    def WorkspaceName(self, ppOverviewWorkspaceName):
##        u'The workspace name where overview raster datasets are generated and stored.'
##        #return 
##
##    def _get(self):
##        u'The recommended number of pixel columns in each overview tiles.'
##        #return pTileColPixels
##    def _set(self, pTileColPixels):
##        u'The recommended number of pixel columns in each overview tiles.'
##    TileCols = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The cell size of the first level of overview tiles in the units of the coordinate system of the catalog. If this property is not specified, the default value is computed automatically.'
##        #return pCellsize
##    def _set(self, pCellsize):
##        u'The cell size of the first level of overview tiles in the units of the coordinate system of the catalog. If this property is not specified, the default value is computed automatically.'
##    CellSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The number of levels of overview tiles created.'
##        #return pLevels
##    def _set(self, pLevels):
##        u'The number of levels of overview tiles created.'
##    Levels = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The recommended maximum size (in pixels) on any dimension for the lowest resolution overview item. A higher value for this property results in fewer levels of overviews. The operation continues to define a new level as long as the number of pixels of the overv?!?\x08?&'
##        #return pMaximumSizeOfTopmostOverview
##    def _set(self, pMaximumSizeOfTopmostOverview):
##        u'The recommended maximum size (in pixels) on any dimension for the lowest resolution overview item. A higher value for this property results in fewer levels of overviews. The operation continues to define a new level as long as the number of pixels of the overv?!?\x08?&'
##    MaximumSizeOfTopmostOverview = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The factor by which two neighboring overview levels differ.'
##        #return pOverviewFactor
##    def _set(self, pOverviewFactor):
##        u'The factor by which two neighboring overview levels differ.'
##    OverviewFactor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The recommended number of pixel rows in each overview tiles.'
##        #return pTileRowPixels
##    def _set(self, pTileRowPixels):
##        u'The recommended number of pixel rows in each overview tiles.'
##    TileRows = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def AoiGeometry(self, ppAoiGeometry):
##        u'The polygon within which overview tiles are created.'
##        #return 
##

class IXForm(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a transformation.'
    _iid_ = GUID('{A10A39EE-B9CA-11D2-8E30-00A0249480F0}')
    _idlflags_ = ['oleautomation', 'restricted']
class IGeodeticProjection(IXForm):
    _case_insensitive_ = True
    u'Provides access to members that contain information on the projection of a raster.'
    _iid_ = GUID('{559B8940-BAB1-11D2-8E30-00A0249480F0}')
    _idlflags_ = ['oleautomation', 'restricted']
IXForm._methods_ = [
    COMMETHOD(['propget', helpstring(u'Domain units.')], HRESULT, 'InUnit',
              ( ['retval', 'out'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.esriSRUnitType), 'pVal' )),
    COMMETHOD(['propput', helpstring(u'Domain units.')], HRESULT, 'InUnit',
              ( ['in'], comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.esriSRUnitType, 'pVal' )),
    COMMETHOD(['propget', helpstring(u'Range units.')], HRESULT, 'OutUnit',
              ( ['retval', 'out'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.esriSRUnitType), 'pVal' )),
    COMMETHOD(['propput', helpstring(u'Range units.')], HRESULT, 'OutUnit',
              ( ['in'], comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.esriSRUnitType, 'pVal' )),
    COMMETHOD([helpstring(u'Transforms input point.')], HRESULT, 'Map',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IPnt), 'x' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IPnt)), 'y' )),
    COMMETHOD([helpstring(u'Reverses mapping, if possible.')], HRESULT, 'Invert',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IPnt), 'y' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IPnt)), 'x' )),
    COMMETHOD([helpstring(u'Indicates if XForm does nothing.')], HRESULT, 'IsIdentity',
              ( ['retval', 'out'], POINTER(c_int), 'unity' )),
]
################################################################
## code template for IXForm implementation
##class IXForm_Impl(object):
##    def _get(self):
##        u'Domain units.'
##        #return pVal
##    def _set(self, pVal):
##        u'Domain units.'
##    InUnit = property(_get, _set, doc = _set.__doc__)
##
##    def Invert(self, y):
##        u'Reverses mapping, if possible.'
##        #return x
##
##    def Map(self, x):
##        u'Transforms input point.'
##        #return y
##
##    def IsIdentity(self):
##        u'Indicates if XForm does nothing.'
##        #return unity
##
##    def _get(self):
##        u'Range units.'
##        #return pVal
##    def _set(self, pVal):
##        u'Range units.'
##    OutUnit = property(_get, _set, doc = _set.__doc__)
##

IGeodeticProjection._methods_ = [
    COMMETHOD(['propget', helpstring(u'Property name.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'pVal' )),
    COMMETHOD(['propget', helpstring(u'SafeArray of doubles: raw parameter list.')], HRESULT, 'Parameters',
              ( ['retval', 'out'], POINTER(VARIANT), 'pVal' )),
    COMMETHOD(['propput', helpstring(u'SafeArray of doubles: raw parameter list.')], HRESULT, 'Parameters',
              ( ['in'], VARIANT, 'pVal' )),
    COMMETHOD(['propget', helpstring(u'Spheroid parameters.')], HRESULT, 'Spheroid',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpheroid)), 'pVal' )),
    COMMETHOD(['propput', helpstring(u'Spheroid parameters.')], HRESULT, 'Spheroid',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpheroid), 'pVal' )),
    COMMETHOD(['propget', helpstring(u'Datum parameters.')], HRESULT, 'Datum',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IDatum)), 'pVal' )),
    COMMETHOD(['propput', helpstring(u'Datum parameters.')], HRESULT, 'Datum',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IDatum), 'pVal' )),
]
################################################################
## code template for IGeodeticProjection implementation
##class IGeodeticProjection_Impl(object):
##    def _get(self):
##        u'Spheroid parameters.'
##        #return pVal
##    def _set(self, pVal):
##        u'Spheroid parameters.'
##    Spheroid = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Datum parameters.'
##        #return pVal
##    def _set(self, pVal):
##        u'Datum parameters.'
##    Datum = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        u'Property name.'
##        #return pVal
##
##    def _get(self):
##        u'SafeArray of doubles: raw parameter list.'
##        #return pVal
##    def _set(self, pVal):
##        u'SafeArray of doubles: raw parameter list.'
##    Parameters = property(_get, _set, doc = _set.__doc__)
##

class MatchATBuilder(CoClass):
    u'A raster builder for MatchAT files.'
    _reg_clsid_ = GUID('{6E34D5D3-4AE1-43BC-AFB3-0C12022184D6}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IMatchATBuilder(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the Match-AT builder.'
    _iid_ = GUID('{9F667B8F-B097-4F07-A99D-0B244E4994E1}')
    _idlflags_ = ['oleautomation']
MatchATBuilder._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterBuilder2, IRasterBuilderInit, IMatchATBuilder]

class IRasterClassNames(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control raster class names.'
    _iid_ = GUID('{A1F03E11-E88A-11D2-8EF1-00609770AD52}')
    _idlflags_ = ['oleautomation']
IRasterClassNames._methods_ = [
    COMMETHOD([helpstring(u'Create Class Names safe array.')], HRESULT, 'Create',
              ( ['in'], c_int, 'numNames' )),
    COMMETHOD(['propget', helpstring(u'The number of Class Names for the band.')], HRESULT, 'Size',
              ( ['retval', 'out'], POINTER(c_int), 'pNumNames' )),
    COMMETHOD(['propput', helpstring(u'The class name at the current entry.')], HRESULT, 'ClassName',
              ( ['in'], c_int, 'nEntry' ),
              ( [], BSTR, 'pClassName' )),
    COMMETHOD(['propget', helpstring(u'The class name at the current entry.')], HRESULT, 'ClassName',
              ( ['in'], c_int, 'nEntry' ),
              ( ['retval', 'out'], POINTER(BSTR), 'pClassName' )),
    COMMETHOD([helpstring(u'Converts pixels to indices.')], HRESULT, 'Bin',
              ( ['in'], c_double, 'pixval' ),
              ( ['retval', 'out'], POINTER(c_int), 'pIndex' )),
    COMMETHOD(['propget', helpstring(u'String array of class (category) names.')], HRESULT, 'Names',
              ( ['retval', 'out'], POINTER(VARIANT), 'pNames' )),
]
################################################################
## code template for IRasterClassNames implementation
##class IRasterClassNames_Impl(object):
##    def _get(self, nEntry):
##        u'The class name at the current entry.'
##        #return pClassName
##    def _set(self, nEntry, pClassName):
##        u'The class name at the current entry.'
##    ClassName = property(_get, _set, doc = _set.__doc__)
##
##    def Bin(self, pixval):
##        u'Converts pixels to indices.'
##        #return pIndex
##
##    def Create(self, numNames):
##        u'Create Class Names safe array.'
##        #return 
##
##    @property
##    def Names(self):
##        u'String array of class (category) names.'
##        #return pNames
##
##    @property
##    def Size(self):
##        u'The number of Class Names for the band.'
##        #return pNumNames
##

class ICsvCrawler(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a CSV file crawler.'
    _iid_ = GUID('{234790E2-C32A-425D-BAFC-945E7CB1DA8A}')
    _idlflags_ = ['oleautomation']
ICsvCrawler._methods_ = [
    COMMETHOD(['propput', helpstring(u'The CSV file to crawl.')], HRESULT, 'Path',
              ( ['in'], BSTR, 'pCsvFilePath' )),
    COMMETHOD(['propget', helpstring(u'The CSV file to crawl.')], HRESULT, 'Path',
              ( ['retval', 'out'], POINTER(BSTR), 'pCsvFilePath' )),
    COMMETHOD(['propput', helpstring(u'The name of the field that references the raster dataset.')], HRESULT, 'SourceField',
              ( ['in'], BSTR, 'pSourceField' )),
    COMMETHOD(['propget', helpstring(u'The name of the field that references the raster dataset.')], HRESULT, 'SourceField',
              ( ['retval', 'out'], POINTER(BSTR), 'pSourceField' )),
]
################################################################
## code template for ICsvCrawler implementation
##class ICsvCrawler_Impl(object):
##    def _get(self):
##        u'The CSV file to crawl.'
##        #return pCsvFilePath
##    def _set(self, pCsvFilePath):
##        u'The CSV file to crawl.'
##    Path = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The name of the field that references the raster dataset.'
##        #return pSourceField
##    def _set(self, pSourceField):
##        u'The name of the field that references the raster dataset.'
##    SourceField = property(_get, _set, doc = _set.__doc__)
##

class IRasterDatasetCrawler(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a raster dataset crawler.'
    _iid_ = GUID('{31D3DCE2-6908-44A1-BEC5-0026EC05DF76}')
    _idlflags_ = ['oleautomation']
IRasterDatasetCrawler._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The raster dataset to crawl.')], HRESULT, 'RasterDataset',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterDataset), 'ppRasterDataset' )),
    COMMETHOD(['propget', helpstring(u'The raster dataset to crawl.')], HRESULT, 'RasterDataset',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterDataset)), 'ppRasterDataset' )),
    COMMETHOD(['propputref', helpstring(u'The name object representing the raster dataset to crawl.')], HRESULT, 'DatasetName',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName), 'ppDatasetName' )),
    COMMETHOD(['propget', helpstring(u'The name object representing the raster dataset to crawl.')], HRESULT, 'DatasetName',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName)), 'ppDatasetName' )),
]
################################################################
## code template for IRasterDatasetCrawler implementation
##class IRasterDatasetCrawler_Impl(object):
##    @property
##    def DatasetName(self, ppDatasetName):
##        u'The name object representing the raster dataset to crawl.'
##        #return 
##
##    @property
##    def RasterDataset(self, ppRasterDataset):
##        u'The raster dataset to crawl.'
##        #return 
##

class IGenerateOverviewsParameters2(IGenerateOverviewsParameters):
    _case_insensitive_ = True
    u'Provides access to members that control parameters for generating overview images in a mosaic dataset.'
    _iid_ = GUID('{76253922-1EDF-4E4D-9EC9-2FFADF75EBFB}')
    _idlflags_ = ['oleautomation']
IGenerateOverviewsParameters2._methods_ = [
    COMMETHOD(['propput', helpstring(u'Indicates whether histogram statistics are computed for the mosaic dataset, if they are missing, upon successful completion of the overview generation process.')], HRESULT, 'ComputeStatistics',
              ( ['in'], VARIANT_BOOL, 'pbComputeStatistics' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether histogram statistics are computed for the mosaic dataset, if they are missing, upon successful completion of the overview generation process.')], HRESULT, 'ComputeStatistics',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbComputeStatistics' )),
]
################################################################
## code template for IGenerateOverviewsParameters2 implementation
##class IGenerateOverviewsParameters2_Impl(object):
##    def _get(self):
##        u'Indicates whether histogram statistics are computed for the mosaic dataset, if they are missing, upon successful completion of the overview generation process.'
##        #return pbComputeStatistics
##    def _set(self, pbComputeStatistics):
##        u'Indicates whether histogram statistics are computed for the mosaic dataset, if they are missing, upon successful completion of the overview generation process.'
##    ComputeStatistics = property(_get, _set, doc = _set.__doc__)
##

class StretchFunction(CoClass):
    u'A class for a stretch raster function.'
    _reg_clsid_ = GUID('{E0C3A6D6-8892-4076-B614-255717A5CFDF}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IRasterKeyProperties(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control raster key properties.'
    _iid_ = GUID('{01002227-F833-40AA-A0C9-429EA383C51F}')
    _idlflags_ = ['oleautomation']
StretchFunction._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunction, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, IRasterKeyProperties]

class IRasterInfos(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to an array of RasterInfos.'
    _iid_ = GUID('{8FE2A546-C990-4AE3-BA5F-2E6737944414}')
    _idlflags_ = ['oleautomation']
class IRasterInfo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a raster info object.'
    _iid_ = GUID('{94058B85-ACF1-49BA-A2A7-A9CCC6F4C26A}')
    _idlflags_ = ['oleautomation']
IRasterInfos._methods_ = [
    COMMETHOD(['propget', helpstring(u'The RasterInfo count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propget', helpstring(u'The RasterInfo at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'index' ),
              ( ['retval', 'out'], POINTER(POINTER(IRasterInfo)), 'pRasterInfo' )),
    COMMETHOD([helpstring(u'Removes the RasterInfo at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'index' )),
    COMMETHOD([helpstring(u'Removes all RasterInfos.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Adds a RasterInfo.')], HRESULT, 'Add',
              ( ['in'], POINTER(IRasterInfo), 'pRasterInfo' )),
    COMMETHOD([helpstring(u'Adds a RasterInfo at the specified position.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'index' ),
              ( ['in'], POINTER(IRasterInfo), 'pRasterInfo' )),
]
################################################################
## code template for IRasterInfos implementation
##class IRasterInfos_Impl(object):
##    @property
##    def Count(self):
##        u'The RasterInfo count.'
##        #return pCount
##
##    def Insert(self, index, pRasterInfo):
##        u'Adds a RasterInfo at the specified position.'
##        #return 
##
##    def Remove(self, index):
##        u'Removes the RasterInfo at the specified position.'
##        #return 
##
##    @property
##    def Element(self, index):
##        u'The RasterInfo at the specified position.'
##        #return pRasterInfo
##
##    def RemoveAll(self):
##        u'Removes all RasterInfos.'
##        #return 
##
##    def Add(self, pRasterInfo):
##        u'Adds a RasterInfo.'
##        #return 
##

class PixFileCrawler(CoClass):
    u'A crawler for PIX files.'
    _reg_clsid_ = GUID('{CD87C31A-CF00-49AF-9DCF-561CF08E2001}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
PixFileCrawler._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDataSourceCrawler2, IFileCrawler, IFileCrawler2, IItemPaths, IItemPaths2]

class ISATBuilder(CoClass):
    u'A raster builder for ISAT files.'
    _reg_clsid_ = GUID('{32012433-8DDF-4ACA-9686-31DEF28D0E28}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IISATBuilder(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the ISAT builder'
    _iid_ = GUID('{B99C3340-573B-4B45-9F27-6671C4F5517F}')
    _idlflags_ = ['oleautomation']
ISATBuilder._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterBuilder2, IRasterBuilderInit, IISATBuilder]


# values for enumeration 'esriSpeckleNoiseModel'
esriSpeckleNoiseMultiplicative = 0
esriSpeckleNoiseAdditive = 1
esriSpeckleNoiseBoth = 2
esriSpeckleNoiseModel = c_int # enum
class IRasterTypeEnvironment(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the raster type environment.'
    _iid_ = GUID('{3ECA95BB-3DD3-4F8B-8BB0-CB47071C456B}')
    _idlflags_ = ['oleautomation']
class IRasterType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a raster type.'
    _iid_ = GUID('{E5EEA64C-91C9-4DCA-B16A-516AF8A0CA0B}')
    _idlflags_ = ['oleautomation']
IRasterTypeEnvironment._methods_ = [
    COMMETHOD(['propget', helpstring(u'Names of all raster types installed on the system.')], HRESULT, 'RasterTypeNames',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray)), 'ppRasterTypeNames' )),
    COMMETHOD([helpstring(u'Loads an item URI object from a blob.')], HRESULT, 'LoadItemURI',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IMemoryBlobStream), 'pBlob' ),
              ( ['retval', 'out'], POINTER(POINTER(IItemURI)), 'ppItemURI' )),
    COMMETHOD([helpstring(u'Saves an item URI object to a blob.')], HRESULT, 'SaveItemURI',
              ( ['in'], POINTER(IItemURI), 'pItemURI' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IMemoryBlobStream)), 'ppBlob' )),
    COMMETHOD([helpstring(u'Loads a raster type object from a blob.')], HRESULT, 'LoadRasterType',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IMemoryBlobStream), 'pBlob' ),
              ( ['retval', 'out'], POINTER(POINTER(IRasterType)), 'ppRasterType' )),
    COMMETHOD([helpstring(u'Saves a raster type object to a blob.')], HRESULT, 'SaveRasterType',
              ( ['in'], POINTER(IRasterType), 'pRasterType' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IMemoryBlobStream)), 'ppBlob' )),
    COMMETHOD([helpstring(u'Returns a time stamp associated either with the present instance in time or with the optional file path.')], HRESULT, 'GetTimeStamp',
              ( ['in'], BSTR, 'FilePath' ),
              ( ['retval', 'out'], POINTER(c_double), 'pTimeStamp' )),
    COMMETHOD([helpstring(u'Replaces one or more parts of the specified input path using two arrays that map path values.')], HRESULT, 'ReplacePath',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray), 'pOldPaths' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray), 'pNewPaths' ),
              ( ['in'], BSTR, 'inputPath' ),
              ( ['retval', 'out'], POINTER(BSTR), 'pOutputPath' )),
]
################################################################
## code template for IRasterTypeEnvironment implementation
##class IRasterTypeEnvironment_Impl(object):
##    @property
##    def RasterTypeNames(self):
##        u'Names of all raster types installed on the system.'
##        #return ppRasterTypeNames
##
##    def SaveRasterType(self, pRasterType):
##        u'Saves a raster type object to a blob.'
##        #return ppBlob
##
##    def SaveItemURI(self, pItemURI):
##        u'Saves an item URI object to a blob.'
##        #return ppBlob
##
##    def LoadItemURI(self, pBlob):
##        u'Loads an item URI object from a blob.'
##        #return ppItemURI
##
##    def LoadRasterType(self, pBlob):
##        u'Loads a raster type object from a blob.'
##        #return ppRasterType
##
##    def GetTimeStamp(self, FilePath):
##        u'Returns a time stamp associated either with the present instance in time or with the optional file path.'
##        #return pTimeStamp
##
##    def ReplacePath(self, pOldPaths, pNewPaths, inputPath):
##        u'Replaces one or more parts of the specified input path using two arrays that map path values.'
##        #return pOutputPath
##

class IPixelFilter2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to additional members that control a pixel filter.'
    _iid_ = GUID('{ED30705B-437A-4FF4-93B3-F1947C70668B}')
    _idlflags_ = ['oleautomation']
IPixelFilter2._methods_ = [
    COMMETHOD([helpstring(u'Initializes this filter for a given area of interest.')], HRESULT, 'Init',
              ( ['in'], c_int, 'nCols' ),
              ( ['in'], c_int, 'nRows' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'pExtent' )),
    COMMETHOD([helpstring(u'Initialize this filter for a given pixel block.')], HRESULT, 'InitBlock',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IPnt), 'pTopLeft' ),
              ( ['in'], c_int, 'nBlkCols' ),
              ( ['in'], c_int, 'nBlkRows' )),
]
################################################################
## code template for IPixelFilter2 implementation
##class IPixelFilter2_Impl(object):
##    def Init(self, nCols, nRows, pExtent):
##        u'Initializes this filter for a given area of interest.'
##        #return 
##
##    def InitBlock(self, pTopLeft, nBlkCols, nBlkRows):
##        u'Initialize this filter for a given pixel block.'
##        #return 
##

class SpotBuilder(CoClass):
    u'A raster builder for SPOT files'
    _reg_clsid_ = GUID('{18453678-A175-4EF1-90FA-B793B1F33E6F}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
SpotBuilder._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterBuilder2, IRasterBuilderInit]

class AISImageServerManager(CoClass):
    u'Image Server Manager CoClass'
    _reg_clsid_ = GUID('{4E5DAA92-6358-4B49-9239-04AB2EBD5D50}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IAISImageServerManager(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Server Manager Interface'
    _iid_ = GUID('{386959AF-5544-4846-BA4B-934E1408008B}')
    _idlflags_ = ['nonextensible', 'oleautomation']
AISImageServerManager._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IAISImageServerManager]


# values for enumeration 'esriSpeckleFilterType'
esriSpeckleFilterLee = 0
esriSpeckleFilterEnhancedLee = 1
esriSpeckleFilterFrost = 2
esriSpeckleFilterKuan = 3
esriSpeckleFilterType = c_int # enum
class ISdeRasterTableName(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to member that identifies name information about an SDE raster table.'
    _iid_ = GUID('{74EFDCC0-FEC4-11D3-8D6F-00C04F5B87B2}')
    _idlflags_ = ['oleautomation']
ISdeRasterTableName._methods_ = [
]
################################################################
## code template for ISdeRasterTableName implementation
##class ISdeRasterTableName_Impl(object):

class IDEWMSMapType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the WMS Map Data Element Type.'
    _iid_ = GUID('{B0008E51-FA4F-4E1D-BB09-35A55C6ADF80}')
    _idlflags_ = ['oleautomation']
IDEWMSMapType._methods_ = [
]
################################################################
## code template for IDEWMSMapType implementation
##class IDEWMSMapType_Impl(object):

class MergeItemsParameters(CoClass):
    u'An object that controls how a mosaic dataset items are merged.'
    _reg_clsid_ = GUID('{61E87BBA-AA07-44AD-8F1C-296C31D6CE9D}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IMergeItemsParameters(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control how a mosaic dataset items are merged.'
    _iid_ = GUID('{CB02198B-08EC-4910-B860-2532833648A7}')
    _idlflags_ = ['oleautomation']
MergeItemsParameters._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMergeItemsParameters, ISelectionParameters]

class PointMeasurement(CoClass):
    u'Implements interface IPointMeasurement (point measurement with the associated error covariance matrix).'
    _reg_clsid_ = GUID('{73458106-BA07-42F8-B553-A93022530B17}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IPointMeasurement(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Point measurement and its associated uncertainty information.'
    _iid_ = GUID('{24610A3B-3AD6-43E7-BCC0-8C40139EE416}')
    _idlflags_ = ['oleautomation']
PointMeasurement._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IPointMeasurement]

class IMaskFunctionArguments2(IMaskFunctionArguments):
    _case_insensitive_ = True
    u'Provides access to members that control mask function arguments.'
    _iid_ = GUID('{D726FD4B-BF1E-4447-AB48-4E357EF6F134}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'esriNoDataInterpretation'
esriNoDataMatchAny = 0
esriNoDataMatchAll = 1
esriNoDataInterpretation = c_int # enum
IMaskFunctionArguments2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Defines how the NoData values should be interpreted.')], HRESULT, 'NoDataInterpretation',
              ( ['retval', 'out'], POINTER(esriNoDataInterpretation), 'pNoDataInterpretation' )),
    COMMETHOD(['propput', helpstring(u'Defines how the NoData values should be interpreted.')], HRESULT, 'NoDataInterpretation',
              ( ['in'], esriNoDataInterpretation, 'pNoDataInterpretation' )),
]
################################################################
## code template for IMaskFunctionArguments2 implementation
##class IMaskFunctionArguments2_Impl(object):
##    def _get(self):
##        u'Defines how the NoData values should be interpreted.'
##        #return pNoDataInterpretation
##    def _set(self, pNoDataInterpretation):
##        u'Defines how the NoData values should be interpreted.'
##    NoDataInterpretation = property(_get, _set, doc = _set.__doc__)
##

class CsvCrawler(CoClass):
    u'A crawler for CSV files.'
    _reg_clsid_ = GUID('{233D70DD-B202-4B84-8F0E-60F590BBA259}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
CsvCrawler._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDataSourceCrawler, ICsvCrawler]

class ProjectiveXform(CoClass):
    u'A projective transform class.'
    _reg_clsid_ = GUID('{CB7DC226-5AD2-4A40-88F4-3CEDB5D63BDE}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IProjectiveXform(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeodataXform):
    _case_insensitive_ = True
    u'Provides access to members that control a projective transform.'
    _iid_ = GUID('{E2FA80D1-EE50-43FA-834F-50D056AAE150}')
    _idlflags_ = ['oleautomation']
ProjectiveXform._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IProjectiveXform, comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ITransformation, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersionSupportGEN, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class RasterType(CoClass):
    u'A raster type object.'
    _reg_clsid_ = GUID('{C7EE2957-E230-4BE0-AE55-A459B9647E21}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IRasterTypeProperties(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control raster type properties.'
    _iid_ = GUID('{078C7800-66F2-46CF-A182-78E6C4AADE53}')
    _idlflags_ = ['oleautomation']
class IRasterTypeProperties2(IRasterTypeProperties):
    _case_insensitive_ = True
    u'Provides access to members that control raster type properties.'
    _iid_ = GUID('{7BD60984-38D6-4C55-94ED-1ED74A839727}')
    _idlflags_ = ['oleautomation']
class IRasterBuilderInit2(IRasterBuilderInit):
    _case_insensitive_ = True
    u'Provides access to members that initialize a raster builder.'
    _iid_ = GUID('{4D53F22D-3D94-41B8-9D5B-ACA99D46ECD7}')
    _idlflags_ = ['oleautomation']
class IRasterTypeOperation(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control raster type operation.'
    _iid_ = GUID('{2A83CE86-DC8D-4EB6-A6FD-BF3BAFCCD08E}')
    _idlflags_ = ['oleautomation']
RasterType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterType, IRasterTypeProperties, IRasterTypeProperties2, IRasterBuilder2, IRasterBuilderInit, IRasterBuilderInit2, IRasterTypeOperation, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class RasterXformHelper(CoClass):
    u'A Raster transform helper class.'
    _reg_clsid_ = GUID('{001A7AAD-3ACF-4D06-86FB-F9F0E7ED2016}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IRasterXformHelper(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Raster Xform Helper class.'
    _iid_ = GUID('{A17ED9EB-23D8-48B4-8F05-A6E55BDFFED7}')
    _idlflags_ = ['oleautomation']
RasterXformHelper._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterXformHelper]

class RasterHistograms(CoClass):
    u'An array of raster histograms.'
    _reg_clsid_ = GUID('{22185FBC-8AAE-43DF-BF15-9A0BD60AB0C4}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IRasterHistograms(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that controls a list of histograms.'
    _iid_ = GUID('{5BC31BB5-F7C3-4CAD-9B8E-176CD7399D22}')
    _idlflags_ = ['oleautomation']
RasterHistograms._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterHistograms]

class DEImageServer(CoClass):
    u'Image Service Object Data Element object.'
    _reg_clsid_ = GUID('{2DA8815F-1C55-4791-BA69-7856AF60F995}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IDEImageServer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that describe Image Service objects.'
    _iid_ = GUID('{9B872FB3-190A-400F-ADBC-759712F27C39}')
    _idlflags_ = ['oleautomation']
DEImageServer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDEImageServer, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDEServerObject, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataElement, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IMetadata, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDescribe, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersionSupportGEN, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class SplitMergedItemsParameters(CoClass):
    u'An object that controls how merged mosaic dataset items are split.'
    _reg_clsid_ = GUID('{A1CD9DBC-65E7-42E6-8412-EB9A1B2DE168}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class ISplitMergedItemsParameters(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control how merged mosaic dataset items are split.'
    _iid_ = GUID('{5C93F24B-CEA6-4C5F-9B12-9098FCEC36A3}')
    _idlflags_ = ['oleautomation']
SplitMergedItemsParameters._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ISplitMergedItemsParameters, ISelectionParameters]


# values for enumeration 'esriSpeckleFilterKernel'
esriSpeckleFilterKernel3x3 = 0
esriSpeckleFilterKernel5x5 = 1
esriSpeckleFilterKernel7x7 = 2
esriSpeckleFilterKernel9x9 = 3
esriSpeckleFilterKernel11x11 = 4
esriSpeckleFilterKernel = c_int # enum
class DmciiBuilder(CoClass):
    u'A raster builder for DMCii files.'
    _reg_clsid_ = GUID('{3EE0C703-E17D-49C3-ADAC-597CB7F24253}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
DmciiBuilder._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterBuilder2, IRasterBuilderInit]


# values for enumeration 'esriPansharpeningType'
esriPansharpeningIHS = 0
esriPansharpeningBrovey = 1
esriPansharpeningESRI = 2
esriPansharpeningMean = 3
esriPansharpeningGramSchmidt = 4
esriPansharpeningType = c_int # enum
class IRasterCacheArguments(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control item cache properties.'
    _iid_ = GUID('{454319D6-468A-4143-9BBC-571F0E51E656}')
    _idlflags_ = ['oleautomation']
IRasterCacheArguments._methods_ = [
    COMMETHOD(['propget', helpstring(u'Location where the item cache gets generated. This could be a workspace name or a table name')], HRESULT, 'CacheLocation',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName)), 'ppName' )),
    COMMETHOD(['propputref', helpstring(u'Location where the item cache gets generated. This could be a workspace name or a table name')], HRESULT, 'CacheLocation',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName), 'ppName' )),
]
################################################################
## code template for IRasterCacheArguments implementation
##class IRasterCacheArguments_Impl(object):
##    def CacheLocation(self, ppName):
##        u'Location where the item cache gets generated. This could be a workspace name or a table name'
##        #return 
##

class RGBToColormapFunction(CoClass):
    u'A class for a raster RGB-To-Colormap conversion function.'
    _reg_clsid_ = GUID('{465187C5-C8D4-462B-AF85-2B375DD7D7E6}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
RGBToColormapFunction._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunction, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class IRasterTypeFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a raster type factory.'
    _iid_ = GUID('{0ED63556-60D8-4492-9424-7951F0F62C57}')
    _idlflags_ = ['oleautomation']
IRasterTypeFactory._methods_ = [
    COMMETHOD(['propget', helpstring(u'The name of the raster type factory.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'pName' )),
    COMMETHOD(['propget', helpstring(u'The COM class ID of the raster type factory.')], HRESULT, 'CLSID',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IUID)), 'ppCLSID' )),
    COMMETHOD(['propget', helpstring(u'The raster type names created by this factory.')], HRESULT, 'RasterTypeNames',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray)), 'ppRasterTypeNames' )),
    COMMETHOD([helpstring(u'Creates a raster type object given a name.')], HRESULT, 'CreateRasterType',
              ( ['in'], BSTR, 'RasterTypeName' ),
              ( ['retval', 'out'], POINTER(POINTER(IRasterType)), 'ppRasterType' )),
]
################################################################
## code template for IRasterTypeFactory implementation
##class IRasterTypeFactory_Impl(object):
##    @property
##    def RasterTypeNames(self):
##        u'The raster type names created by this factory.'
##        #return ppRasterTypeNames
##
##    def CreateRasterType(self, RasterTypeName):
##        u'Creates a raster type object given a name.'
##        #return ppRasterType
##
##    @property
##    def Name(self):
##        u'The name of the raster type factory.'
##        #return pName
##
##    @property
##    def CLSID(self):
##        u'The COM class ID of the raster type factory.'
##        #return ppCLSID
##

class SocetSetBuilder(CoClass):
    u'A raster builder for SocetSet files.'
    _reg_clsid_ = GUID('{479A6290-46B1-4C6B-AD93-58BD17C83FA1}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
SocetSetBuilder._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterBuilder2, IRasterBuilderInit]

class IDefineNoDataParameters(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control parameters for defining NoData values for items in a mosaic dataset.'
    _iid_ = GUID('{9CFC869F-0BE0-485C-9E5A-9D4BDEA0CC4F}')
    _idlflags_ = ['oleautomation']
IDefineNoDataParameters._methods_ = [
    COMMETHOD(['propget', helpstring(u'The included value ranges, i.e. [min, max] for each band.')], HRESULT, 'IncludedRanges',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray)), 'ppRanges' )),
    COMMETHOD(['propputref', helpstring(u'The included value ranges, i.e. [min, max] for each band.')], HRESULT, 'IncludedRanges',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray), 'ppRanges' )),
    COMMETHOD(['propget', helpstring(u'The list of, space separated, NoData values, for each band.')], HRESULT, 'NoDataValues',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray)), 'ppValues' )),
    COMMETHOD(['propputref', helpstring(u'The list of, space separated, NoData values, for each band.')], HRESULT, 'NoDataValues',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray), 'ppValues' )),
]
################################################################
## code template for IDefineNoDataParameters implementation
##class IDefineNoDataParameters_Impl(object):
##    def IncludedRanges(self, ppRanges):
##        u'The included value ranges, i.e. [min, max] for each band.'
##        #return 
##
##    def NoDataValues(self, ppValues):
##        u'The list of, space separated, NoData values, for each band.'
##        #return 
##

class IAISImageService2X(IAISImageServiceX):
    _case_insensitive_ = True
    u'IAISImageService2X Interface'
    _iid_ = GUID('{715C27DB-B9D8-4425-85BC-EE730AA493DB}')
    _idlflags_ = []
IAISImageService2X._methods_ = [
    COMMETHOD([], HRESULT, 'GetImageInfo',
              ( ['out'], POINTER(c_double), 'XMin' ),
              ( ['out'], POINTER(c_double), 'YMin' ),
              ( ['out'], POINTER(c_double), 'XMax' ),
              ( ['out'], POINTER(c_double), 'YMax' ),
              ( ['out'], POINTER(c_int), 'nCols' ),
              ( ['out'], POINTER(c_int), 'nRows' )),
]
################################################################
## code template for IAISImageService2X implementation
##class IAISImageService2X_Impl(object):
##    def GetImageInfo(self):
##        '-no docstring-'
##        #return XMin, YMin, XMax, YMax, nCols, nRows
##

class FunctionRasterDatasetName(CoClass):
    u'A class for a function raster dataset name.'
    _reg_clsid_ = GUID('{EB07E8CC-EE78-438A-A2C1-BA80455ACB02}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IFunctionRasterDatasetName(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a function raster dataset name.'
    _iid_ = GUID('{5769D656-8973-4D0C-81CB-ACF0AC035AC2}')
    _idlflags_ = ['oleautomation']
FunctionRasterDatasetName._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDatasetName, IFunctionRasterDatasetName, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, IRasterKeyProperties]

class IGeodataXformApproximation(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control approximation for geodata transforms.'
    _iid_ = GUID('{F533CF88-29BD-4D4B-88D0-050622A46C3A}')
    _idlflags_ = ['oleautomation']
IGeodataXformApproximation._methods_ = [
    COMMETHOD(['propput', helpstring(u'The approximation error tolerance in distance in input space.')], HRESULT, 'Tolerance',
              ( ['in'], c_double, 'pTolerance' )),
    COMMETHOD(['propget', helpstring(u'The approximation error tolerance in distance in input space.')], HRESULT, 'Tolerance',
              ( ['retval', 'out'], POINTER(c_double), 'pTolerance' )),
    COMMETHOD(['propput', helpstring(u'The approximation grid size in pixels in output space.')], HRESULT, 'GridSize',
              ( ['in'], c_int, 'pSize' )),
    COMMETHOD(['propget', helpstring(u'The approximation grid size in pixels in output space.')], HRESULT, 'GridSize',
              ( ['retval', 'out'], POINTER(c_int), 'pSize' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the tolerance can be recalculated based on input cellsize.')], HRESULT, 'RecalculateTolerance',
              ( ['in'], VARIANT_BOOL, 'pRecalculateTolerance' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the tolerance can be recalculated based on input cellsize.')], HRESULT, 'RecalculateTolerance',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pRecalculateTolerance' )),
    COMMETHOD(['propget', helpstring(u'Indicates if approximation is on or off.')], HRESULT, 'Approximation',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pApproximation' )),
    COMMETHOD(['propput', helpstring(u'Indicates if approximation is on or off.')], HRESULT, 'Approximation',
              ( ['in'], VARIANT_BOOL, 'pApproximation' )),
]
################################################################
## code template for IGeodataXformApproximation implementation
##class IGeodataXformApproximation_Impl(object):
##    def _get(self):
##        u'Indicates if approximation is on or off.'
##        #return pApproximation
##    def _set(self, pApproximation):
##        u'Indicates if approximation is on or off.'
##    Approximation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the tolerance can be recalculated based on input cellsize.'
##        #return pRecalculateTolerance
##    def _set(self, pRecalculateTolerance):
##        u'Indicates if the tolerance can be recalculated based on input cellsize.'
##    RecalculateTolerance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The approximation grid size in pixels in output space.'
##        #return pSize
##    def _set(self, pSize):
##        u'The approximation grid size in pixels in output space.'
##    GridSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The approximation error tolerance in distance in input space.'
##        #return pTolerance
##    def _set(self, pTolerance):
##        u'The approximation error tolerance in distance in input space.'
##    Tolerance = property(_get, _set, doc = _set.__doc__)
##

class DEMosaicDataset(CoClass):
    u'The MosaicDataset Data Element object.'
    _reg_clsid_ = GUID('{F5B0862D-3E81-45F7-9C79-52236743C95D}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IDEMosaicDataset(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to a Mosaic Dataset Data Element.'
    _iid_ = GUID('{B29E01E9-F293-4B0F-9F1A-3BDAFC647EA4}')
    _idlflags_ = ['oleautomation']
class IDEMosaicDataset2(IDEMosaicDataset):
    _case_insensitive_ = True
    u'Provides access to a Mosaic Dataset Data Element.'
    _iid_ = GUID('{661474E7-4926-4BCB-B655-052C890EE010}')
    _idlflags_ = ['oleautomation']
DEMosaicDataset._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDEMosaicDataset2, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDERasterDataset, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataElement, IItemPaths, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDescribe, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IMetadata, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersionSupportGEN, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class PleiadesBuilder(CoClass):
    u'A raster builder for Pleiades files.'
    _reg_clsid_ = GUID('{A1C125DF-5101-4914-ABE7-5AEF60F84161}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
PleiadesBuilder._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterBuilder2, IRasterBuilderInit]

class AddNewerRastersParameters(CoClass):
    u'An object that controls how newwer rasters are added to a mosaic dataset.'
    _reg_clsid_ = GUID('{49FE5008-7722-499B-8D7B-23C9234D99A4}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IAddNewerRastersParameters(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control parameters for adding newer rasters to a mosaic dataset.'
    _iid_ = GUID('{17FECF8D-D46C-4739-A25C-3C678A4BEB16}')
    _idlflags_ = []
class IMosaicDatasetOperationParameters2(IMosaicDatasetOperationParameters):
    _case_insensitive_ = True
    u'Provides access to members that control parameters to an operation on a mosaic dataset.'
    _iid_ = GUID('{38662EB1-A3AE-42AB-A7D6-1F87EF453B32}')
    _idlflags_ = ['oleautomation']
class IThreadedOperationParameters(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control threaded operation parameters.'
    _iid_ = GUID('{B4A72532-B2FD-41EE-9216-2FA2921AF897}')
    _idlflags_ = ['oleautomation', 'hidden']
AddNewerRastersParameters._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IAddNewerRastersParameters, IMosaicDatasetOperationParameters, IMosaicDatasetOperationParameters2, IThreadedOperationParameters]

class IScalar(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a scalar.'
    _iid_ = GUID('{3F1DF485-3892-4EE3-BC03-403C63460005}')
    _idlflags_ = ['oleautomation']
IScalar._methods_ = [
    COMMETHOD(['propget', helpstring(u'The scalar value.')], HRESULT, 'Value',
              ( ['retval', 'out'], POINTER(VARIANT), 'pValue' )),
    COMMETHOD(['propput', helpstring(u'The scalar value.')], HRESULT, 'Value',
              ( ['in'], VARIANT, 'pValue' )),
]
################################################################
## code template for IScalar implementation
##class IScalar_Impl(object):
##    def _get(self):
##        u'The scalar value.'
##        #return pValue
##    def _set(self, pValue):
##        u'The scalar value.'
##    Value = property(_get, _set, doc = _set.__doc__)
##

class PushbroomUtilities(CoClass):
    u'Pushbroom Xforms Utilities class.'
    _reg_clsid_ = GUID('{7612154F-6EE3-4F71-ADA0-04B070FCBD03}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IPushbroomUtilities(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Pushbroom Xform Utilities.'
    _iid_ = GUID('{BFEFEDB3-12CB-42C9-B59B-1092998414BB}')
    _idlflags_ = ['oleautomation']
PushbroomUtilities._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IPushbroomUtilities]

class LasBuilder(CoClass):
    u'A raster builder for LAS files'
    _reg_clsid_ = GUID('{DA19B110-389B-4300-9C8A-49687E41E4BD}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class ILasBuilder(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control LAS to raster conversion.'
    _iid_ = GUID('{A30DB5DB-FB72-40A9-8FF0-F493D09CE949}')
    _idlflags_ = ['oleautomation']
LasBuilder._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterBuilder2, IRasterBuilderInit, ILasBuilder]


# values for enumeration 'esriRaster3DToRasterFunctionErrors'
E_3D_TO_RASTER_FUNCTIONS__MISSING_SPATIAL_REFERENCE = -2147205119
E_3D_TO_RASTER_FUNCTIONS__MISSING_3DANALYST_LICENSE = -2147205118
E_3D_TO_RASTER_FUNCTIONS__DIFFERENT_SPATIAL_REFERENCES = -2147205117
E_3D_TO_RASTER_FUNCTIONS__CELL_SIZE_TOO_SMALL_FOR_CACHING = -2147205116
E_3D_TO_RASTER_FUNCTIONS__SPATIAL_REFERENCE_IN_WKT_FORMAT_DETECTED = -2147205115
esriRaster3DToRasterFunctionErrors = c_int # enum

# values for enumeration 'esriRasterClippingType'
esriRasterClippingOutside = 1
esriRasterClippingInside = 2
esriRasterClippingType = c_int # enum
class RadarBuilder(CoClass):
    u'A raster builder for Radar files.'
    _reg_clsid_ = GUID('{A3C4E211-E019-45B9-9709-E7C609BF82D8}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IRadarBuilder(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the Radar builder.'
    _iid_ = GUID('{2F61DA6D-5E2F-40A4-AEC1-6992166EEAF4}')
    _idlflags_ = ['oleautomation']
RadarBuilder._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterBuilder2, IRasterBuilderInit, IRadarBuilder]

class IItemURIFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control an item URI filter.'
    _iid_ = GUID('{7AAF922E-A33F-4628-9040-EA408E7A747C}')
    _idlflags_ = ['oleautomation']
IItemURIFilter._methods_ = [
    COMMETHOD(['propput', helpstring(u'The name of the item URI filter.')], HRESULT, 'Name',
              ( ['in'], BSTR, 'pFilterName' )),
    COMMETHOD(['propget', helpstring(u'The name of the item URI filter.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'pFilterName' )),
    COMMETHOD(['propputref', helpstring(u'The list of supported template names.')], HRESULT, 'SupportedTemplateNames',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray), 'ppTemplateNames' )),
    COMMETHOD(['propget', helpstring(u'The list of supported template names.')], HRESULT, 'SupportedTemplateNames',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray)), 'ppTemplateNames' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the item URI filter supports ortho-rectification.')], HRESULT, 'SupportsOrthorectification',
              ( ['in'], VARIANT_BOOL, 'pbSupportsOrthorectification' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the item URI filter supports ortho-rectification.')], HRESULT, 'SupportsOrthorectification',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbSupportsOrthorectification' )),
    COMMETHOD([helpstring(u'Indicates whether the specified item URI object pass through the filter.')], HRESULT, 'ApplyFilter',
              ( ['in'], POINTER(IItemURI), 'pItemURI' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pIncludeItemURI' )),
]
################################################################
## code template for IItemURIFilter implementation
##class IItemURIFilter_Impl(object):
##    def ApplyFilter(self, pItemURI):
##        u'Indicates whether the specified item URI object pass through the filter.'
##        #return pIncludeItemURI
##
##    def _get(self):
##        u'Indicates whether the item URI filter supports ortho-rectification.'
##        #return pbSupportsOrthorectification
##    def _set(self, pbSupportsOrthorectification):
##        u'Indicates whether the item URI filter supports ortho-rectification.'
##    SupportsOrthorectification = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The name of the item URI filter.'
##        #return pFilterName
##    def _set(self, pFilterName):
##        u'The name of the item URI filter.'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SupportedTemplateNames(self, ppTemplateNames):
##        u'The list of supported template names.'
##        #return 
##

class IRasterTypeDataSourceHandler(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the raster type data source handler.'
    _iid_ = GUID('{CA1D1AB9-63CC-40E6-AC24-5A69D2BBDE4D}')
    _idlflags_ = ['oleautomation']
class IRasterTypeDataSourceHandler2(IRasterTypeDataSourceHandler):
    _case_insensitive_ = True
    u'Provides access to members that control the raster type data source handler.'
    _iid_ = GUID('{D14B8350-B7CE-4F80-B61D-5E93FA4ADBDB}')
    _idlflags_ = ['oleautomation']
class IRasterTypeDataSourceHandlerParameters(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control parameters to raster type data source handler.'
    _iid_ = GUID('{5F88E212-6325-4C5A-BB8F-EEAE77A56F87}')
    _idlflags_ = ['oleautomation']
class IBuilderItem(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a builder item.'
    _iid_ = GUID('{49944736-3DD8-4E4E-B346-46868E0CF13F}')
    _idlflags_ = ['oleautomation']
IRasterTypeDataSourceHandler._methods_ = [
    COMMETHOD([helpstring(u"Indicates whether a valid raster type is available in the specified collection that's capable of opening the given data source and returns a collection of all such valid raster types. This method uses all sensor raster types if IRasterTypeDataSourceHandlerPara?!?\x08?&")], HRESULT, 'CanOpen',
              ( ['in'], POINTER(IRasterTypeDataSourceHandlerParameters), 'pParameters' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'ppEligibleRasterTypes' )),
    COMMETHOD([helpstring(u'Searches the given folder path, non-recursively, for files that can be opened by the specified collection of raster types and returns an array of valid file paths. This method uses all sensor raster types if IRasterTypeDataSourceHandlerParameters.AllowBuilderI?!?\x08?&')], HRESULT, 'QuerySupportedFilesInFolder',
              ( ['in'], POINTER(IRasterTypeDataSourceHandlerParameters), 'pParameters' ),
              ( ['out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray)), 'ppSupportedFilePaths' ),
              ( ['out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'ppAssociatedRasterTypes' )),
    COMMETHOD([helpstring(u'Builds the specified data source using the specified raster types and returns the constructed function raster dataset. This method uses all sensor raster types if no input raster type array is supplied. The method will set IRasterTypeDataSourceHandlerParameter?!?\x08?&')], HRESULT, 'Open',
              ( ['in'], POINTER(IRasterTypeDataSourceHandlerParameters), 'pParameters' ),
              ( ['retval', 'out'], POINTER(POINTER(IBuilderItem)), 'ppBuilderItem' )),
]
################################################################
## code template for IRasterTypeDataSourceHandler implementation
##class IRasterTypeDataSourceHandler_Impl(object):
##    def CanOpen(self, pParameters):
##        u"Indicates whether a valid raster type is available in the specified collection that's capable of opening the given data source and returns a collection of all such valid raster types. This method uses all sensor raster types if IRasterTypeDataSourceHandlerPara?!?\x08?&"
##        #return ppEligibleRasterTypes
##
##    def Open(self, pParameters):
##        u'Builds the specified data source using the specified raster types and returns the constructed function raster dataset. This method uses all sensor raster types if no input raster type array is supplied. The method will set IRasterTypeDataSourceHandlerParameter?!?\x08?&'
##        #return ppBuilderItem
##
##    def QuerySupportedFilesInFolder(self, pParameters):
##        u'Searches the given folder path, non-recursively, for files that can be opened by the specified collection of raster types and returns an array of valid file paths. This method uses all sensor raster types if IRasterTypeDataSourceHandlerParameters.AllowBuilderI?!?\x08?&'
##        #return ppSupportedFilePaths, ppAssociatedRasterTypes
##

IRasterTypeDataSourceHandler2._methods_ = [
    COMMETHOD([helpstring(u'Opens the specified data source as a raster dataset or builds it using the specified raster types and returns the set of constructed IRasterDataset and/or IBuilderItem objects depending on the values of IRasterTypeDataSourceHandlerParameters.AllowRasterDataset?!?\x08?&')], HRESULT, 'OpenEx',
              ( ['in'], POINTER(IRasterTypeDataSourceHandlerParameters), 'pParameters' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'ppDatasetsOrItems' )),
]
################################################################
## code template for IRasterTypeDataSourceHandler2 implementation
##class IRasterTypeDataSourceHandler2_Impl(object):
##    def OpenEx(self, pParameters):
##        u'Opens the specified data source as a raster dataset or builds it using the specified raster types and returns the set of constructed IRasterDataset and/or IBuilderItem objects depending on the values of IRasterTypeDataSourceHandlerParameters.AllowRasterDataset?!?\x08?&'
##        #return ppDatasetsOrItems
##

class IAISImageService3X(IAISImageService2X):
    _case_insensitive_ = True
    u'IAISImageService3X Interface'
    _iid_ = GUID('{AFA68CA6-A23D-42F5-A69B-AE12E0899804}')
    _idlflags_ = []
IAISImageService3X._methods_ = [
    COMMETHOD([helpstring(u'Gets the last requested AOI image.')], HRESULT, 'QueryImageData',
              ( ['in'], POINTER(_midlSAFEARRAY(c_ubyte)), 'pImageData' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pRetStatus' )),
]
################################################################
## code template for IAISImageService3X implementation
##class IAISImageService3X_Impl(object):
##    def QueryImageData(self, pImageData):
##        u'Gets the last requested AOI image.'
##        #return pRetStatus
##

class IRasterFunctionTemplate3(IRasterFunctionTemplate2):
    _case_insensitive_ = True
    u'Provides access to members that control a raster template function.'
    _iid_ = GUID('{A4D65F9B-2ACE-4089-941D-EB9ADE49A29B}')
    _idlflags_ = ['oleautomation']
class IRasterFunctionTemplateMapper(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a raster function template mapper object.'
    _iid_ = GUID('{FAD854E0-E6E6-42B3-9505-A44D62607932}')
    _idlflags_ = ['oleautomation']
IRasterFunctionTemplate3._methods_ = [
    COMMETHOD([helpstring(u'Saves raster function template to JSON.')], HRESULT, 'ToJSON',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IJSONObject)), 'pJSON' )),
    COMMETHOD([helpstring(u'Loads raster function template from JSON.')], HRESULT, 'FromJSON',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IJSONObject), 'pJSON' ),
              ( ['in'], POINTER(IRasterFunctionTemplateMapper), 'pOptRFTMapper' )),
]
################################################################
## code template for IRasterFunctionTemplate3 implementation
##class IRasterFunctionTemplate3_Impl(object):
##    def ToJSON(self):
##        u'Saves raster function template to JSON.'
##        #return pJSON
##
##    def FromJSON(self, pJSON, pOptRFTMapper):
##        u'Loads raster function template from JSON.'
##        #return 
##

class IRasterFunctionVariable(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a raster function variable.'
    _iid_ = GUID('{BF661E16-879D-4B7E-8A05-96E2476EEF17}')
    _idlflags_ = ['oleautomation']
IRasterFunctionVariable._methods_ = [
    COMMETHOD(['propget', helpstring(u'The variable name.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'pName' )),
    COMMETHOD(['propput', helpstring(u'The variable name.')], HRESULT, 'Name',
              ( ['in'], BSTR, 'pName' )),
    COMMETHOD(['propget', helpstring(u'The variable value.')], HRESULT, 'Value',
              ( ['retval', 'out'], POINTER(VARIANT), 'pValue' )),
    COMMETHOD(['propput', helpstring(u'The variable value.')], HRESULT, 'Value',
              ( ['in'], VARIANT, 'pValue' )),
    COMMETHOD([helpstring(u'Resolves the variable using a set of values.')], HRESULT, 'Resolve',
              ( ['in'], POINTER(IUnknown), 'pArgumentValues' )),
    COMMETHOD(['propput', helpstring(u"The variable's description.")], HRESULT, 'Description',
              ( ['in'], BSTR, 'pDescription' )),
    COMMETHOD(['propget', helpstring(u"The variable's description.")], HRESULT, 'Description',
              ( ['retval', 'out'], POINTER(BSTR), 'pDescription' )),
    COMMETHOD(['propputref', helpstring(u"The variable's aliases.")], HRESULT, 'Aliases',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray), 'ppAliases' )),
    COMMETHOD(['propget', helpstring(u"The variable's aliases.")], HRESULT, 'Aliases',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray)), 'ppAliases' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the variable is a dataset.')], HRESULT, 'IsDataset',
              ( ['in'], VARIANT_BOOL, 'pbIsDataset' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the variable is a dataset.')], HRESULT, 'IsDataset',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbIsDataset' )),
]
################################################################
## code template for IRasterFunctionVariable implementation
##class IRasterFunctionVariable_Impl(object):
##    def Resolve(self, pArgumentValues):
##        u'Resolves the variable using a set of values.'
##        #return 
##
##    def _get(self):
##        u'The variable name.'
##        #return pName
##    def _set(self, pName):
##        u'The variable name.'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether the variable is a dataset.'
##        #return pbIsDataset
##    def _set(self, pbIsDataset):
##        u'Indicates whether the variable is a dataset.'
##    IsDataset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The variable value.'
##        #return pValue
##    def _set(self, pValue):
##        u'The variable value.'
##    Value = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u"The variable's description."
##        #return pDescription
##    def _set(self, pDescription):
##        u"The variable's description."
##    Description = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Aliases(self, ppAliases):
##        u"The variable's aliases."
##        #return 
##

class IOverviewTileParameters2(IOverviewTileParameters):
    _case_insensitive_ = True
    u'Provides access to members that control overview image parameters.'
    _iid_ = GUID('{9C4965AB-519A-4FBB-80FC-9F1965D06F3E}')
    _idlflags_ = ['oleautomation']
IOverviewTileParameters2._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The cell size of the first level of overview tiles. If this property is not specified, the value in IOverviewTileParameters.CellSize is used.')], HRESULT, 'BaseCellSize',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'ppBaseCellSize' )),
    COMMETHOD(['propget', helpstring(u'The cell size of the first level of overview tiles. If this property is not specified, the value in IOverviewTileParameters.CellSize is used.')], HRESULT, 'BaseCellSize',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint)), 'ppBaseCellSize' )),
]
################################################################
## code template for IOverviewTileParameters2 implementation
##class IOverviewTileParameters2_Impl(object):
##    @property
##    def BaseCellSize(self, ppBaseCellSize):
##        u'The cell size of the first level of overview tiles. If this property is not specified, the value in IOverviewTileParameters.CellSize is used.'
##        #return 
##


# values for enumeration 'esriRasterThresholdType'
esriRasterThresholdConstant = 0
esriRasterThresholdOtsu = 1
esriRasterThresholdTsai = 2
esriRasterThresholdKapur = 3
esriRasterThresholdKittler = 4
esriRasterThresholdRosin = 5
esriRasterThresholdType = c_int # enum
IRasterBuilderInit._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The mosaic dataset associated with this operation.')], HRESULT, 'MosaicDataset',
              ( ['in'], POINTER(IMosaicDataset), 'ppMosaicDataset' )),
    COMMETHOD(['propget', helpstring(u'The mosaic dataset associated with this operation.')], HRESULT, 'MosaicDataset',
              ( ['retval', 'out'], POINTER(POINTER(IMosaicDataset)), 'ppMosaicDataset' )),
    COMMETHOD(['propputref', helpstring(u'The cancel tracker associated with this operation.')], HRESULT, 'TrackCancel',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'ppTrackCancel' )),
    COMMETHOD(['propget', helpstring(u'The cancel tracker associated with this operation.')], HRESULT, 'TrackCancel',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel)), 'ppTrackCancel' )),
    COMMETHOD(['propputref', helpstring(u"The default spatial reference associated with the collection of items built by this raster type. A raster type applies the default spatial reference to every incoming dataset that doesn't have an associated spatial reference.")], HRESULT, 'DefaultSpatialReference',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'ppDefaultSrs' )),
    COMMETHOD(['propget', helpstring(u"The default spatial reference associated with the collection of items built by this raster type. A raster type applies the default spatial reference to every incoming dataset that doesn't have an associated spatial reference.")], HRESULT, 'DefaultSpatialReference',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference)), 'ppDefaultSrs' )),
    COMMETHOD(['propputref', helpstring(u'The raster type operation helper object associated with this raster type. It provides the raster type with functions that aid construction of URIs and builder items.')], HRESULT, 'RasterTypeOperation',
              ( ['in'], POINTER(IRasterTypeOperation), 'ppRasterTypeOperation' )),
    COMMETHOD(['propget', helpstring(u'The raster type operation helper object associated with this raster type. It provides the raster type with functions that aid construction of URIs and builder items.')], HRESULT, 'RasterTypeOperation',
              ( ['retval', 'out'], POINTER(POINTER(IRasterTypeOperation)), 'ppRasterTypeOperation' )),
]
################################################################
## code template for IRasterBuilderInit implementation
##class IRasterBuilderInit_Impl(object):
##    @property
##    def TrackCancel(self, ppTrackCancel):
##        u'The cancel tracker associated with this operation.'
##        #return 
##
##    @property
##    def RasterTypeOperation(self, ppRasterTypeOperation):
##        u'The raster type operation helper object associated with this raster type. It provides the raster type with functions that aid construction of URIs and builder items.'
##        #return 
##
##    @property
##    def MosaicDataset(self, ppMosaicDataset):
##        u'The mosaic dataset associated with this operation.'
##        #return 
##
##    @property
##    def DefaultSpatialReference(self, ppDefaultSrs):
##        u"The default spatial reference associated with the collection of items built by this raster type. A raster type applies the default spatial reference to every incoming dataset that doesn't have an associated spatial reference."
##        #return 
##

class SearchBuilder(CoClass):
    u'A raster builder for search items.'
    _reg_clsid_ = GUID('{C196379C-6FAD-4CC0-82AF-8DEE2A62C635}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class ISearchBuilder(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a search builder.'
    _iid_ = GUID('{1B9AD6B0-5E7E-40D5-AD70-64EADBEB9DDB}')
    _idlflags_ = []
SearchBuilder._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ISearchBuilder, IRasterBuilder2, IRasterBuilderInit]

class IDefineNoDataParameters2(IDefineNoDataParameters):
    _case_insensitive_ = True
    u'Provides access to members that control parameters for defining NoData values for items in a mosaic dataset.'
    _iid_ = GUID('{46E8419E-07AB-40CC-8A5D-8566F8C8918D}')
    _idlflags_ = ['oleautomation']
IDefineNoDataParameters2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Defines how the NoData values should be interpreted.')], HRESULT, 'NoDataInterpretation',
              ( ['retval', 'out'], POINTER(esriNoDataInterpretation), 'pNoDataInterpretation' )),
    COMMETHOD(['propput', helpstring(u'Defines how the NoData values should be interpreted.')], HRESULT, 'NoDataInterpretation',
              ( ['in'], esriNoDataInterpretation, 'pNoDataInterpretation' )),
]
################################################################
## code template for IDefineNoDataParameters2 implementation
##class IDefineNoDataParameters2_Impl(object):
##    def _get(self):
##        u'Defines how the NoData values should be interpreted.'
##        #return pNoDataInterpretation
##    def _set(self, pNoDataInterpretation):
##        u'Defines how the NoData values should be interpreted.'
##    NoDataInterpretation = property(_get, _set, doc = _set.__doc__)
##

class OverviewItemURI(CoClass):
    u'An overview item URI object.'
    _reg_clsid_ = GUID('{550753DE-479A-46BA-A1C7-6EB86070D89C}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IOverviewItemURI(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control an overview item URI.'
    _iid_ = GUID('{7061751B-3279-4719-86DF-BDFF9C73C809}')
    _idlflags_ = ['oleautomation']
class ICellSizeLevel(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a cell size level.'
    _iid_ = GUID('{CB2F5079-E498-4D7C-AEDC-F7ECB4DEB021}')
    _idlflags_ = ['oleautomation']
OverviewItemURI._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IItemURI, IOverviewItemURI, ICellSizeLevel, IItemPaths]

IOverviewItemURI._methods_ = [
    COMMETHOD(['propput', helpstring(u'Name of the overview item.')], HRESULT, 'ItemName',
              ( ['in'], BSTR, 'pItemName' )),
    COMMETHOD(['propget', helpstring(u'Name of the overview item.')], HRESULT, 'ItemName',
              ( ['retval', 'out'], POINTER(BSTR), 'pItemName' )),
    COMMETHOD(['propputref', helpstring(u'Name of the storage location for the overview raster dataset.')], HRESULT, 'StorageName',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName), 'ppStorageName' )),
    COMMETHOD(['propget', helpstring(u'Name of the storage location for the overview raster dataset.')], HRESULT, 'StorageName',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName)), 'ppStorageName' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the overview raster dataset exists in the storage location.')], HRESULT, 'DatasetExists',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbDatasetExists' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the mosaic dataset manages the lifetime of the overview raster dataset. Raster datasets associated with managed overview items are moved, copied, and deleted along with the parent mosaic dataset.')], HRESULT, 'IsManagedDataset',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbIsManagedDataset' )),
    COMMETHOD([helpstring(u'Deletes the overview raster dataset.')], HRESULT, 'DeleteDataset'),
    COMMETHOD([helpstring(u'Regenerates and returns the overview raster dataset using a raster object and storage definition.')], HRESULT, 'UpdateDataset',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' ),
              ( ['in'], BSTR, 'imageFormatName' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterStorageDef), 'pRasterStorageDef' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterDataset)), 'ppRasterDataset' )),
    COMMETHOD(['propput', helpstring(u'The row offset of the overview tile in the grid.')], HRESULT, 'TileRowOffset',
              ( ['in'], c_int, 'pTileRowOffset' )),
    COMMETHOD(['propget', helpstring(u'The row offset of the overview tile in the grid.')], HRESULT, 'TileRowOffset',
              ( ['retval', 'out'], POINTER(c_int), 'pTileRowOffset' )),
    COMMETHOD(['propput', helpstring(u'The column offset of the overview tile in the grid.')], HRESULT, 'TileColOffset',
              ( ['in'], c_int, 'pTileColOffset' )),
    COMMETHOD(['propget', helpstring(u'The column offset of the overview tile in the grid.')], HRESULT, 'TileColOffset',
              ( ['retval', 'out'], POINTER(c_int), 'pTileColOffset' )),
    COMMETHOD(['propputref', helpstring(u'The original extent of the overview item URI.')], HRESULT, 'NativeExtent',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'ppEnvelope' )),
    COMMETHOD(['propget', helpstring(u'The original extent of the overview item URI.')], HRESULT, 'NativeExtent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'ppEnvelope' )),
    COMMETHOD(['propputref', helpstring(u'The RasterInfo object describing a dummy overview tile.')], HRESULT, 'RasterInfo',
              ( ['in'], POINTER(IRasterInfo), 'ppRasterInfo' )),
    COMMETHOD(['propget', helpstring(u'The RasterInfo object describing a dummy overview tile.')], HRESULT, 'RasterInfo',
              ( ['retval', 'out'], POINTER(POINTER(IRasterInfo)), 'ppRasterInfo' )),
]
################################################################
## code template for IOverviewItemURI implementation
##class IOverviewItemURI_Impl(object):
##    @property
##    def DatasetExists(self):
##        u'Indicates whether the overview raster dataset exists in the storage location.'
##        #return pbDatasetExists
##
##    def _get(self):
##        u'The column offset of the overview tile in the grid.'
##        #return pTileColOffset
##    def _set(self, pTileColOffset):
##        u'The column offset of the overview tile in the grid.'
##    TileColOffset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The row offset of the overview tile in the grid.'
##        #return pTileRowOffset
##    def _set(self, pTileRowOffset):
##        u'The row offset of the overview tile in the grid.'
##    TileRowOffset = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def NativeExtent(self, ppEnvelope):
##        u'The original extent of the overview item URI.'
##        #return 
##
##    @property
##    def RasterInfo(self, ppRasterInfo):
##        u'The RasterInfo object describing a dummy overview tile.'
##        #return 
##
##    def UpdateDataset(self, pRaster, imageFormatName, pRasterStorageDef):
##        u'Regenerates and returns the overview raster dataset using a raster object and storage definition.'
##        #return ppRasterDataset
##
##    @property
##    def StorageName(self, ppStorageName):
##        u'Name of the storage location for the overview raster dataset.'
##        #return 
##
##    def DeleteDataset(self):
##        u'Deletes the overview raster dataset.'
##        #return 
##
##    def _get(self):
##        u'Name of the overview item.'
##        #return pItemName
##    def _set(self, pItemName):
##        u'Name of the overview item.'
##    ItemName = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def IsManagedDataset(self):
##        u'Indicates whether the mosaic dataset manages the lifetime of the overview raster dataset. Raster datasets associated with managed overview items are moved, copied, and deleted along with the parent mosaic dataset.'
##        #return pbIsManagedDataset
##

class ITableFunctionArguments(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control table arguments.'
    _iid_ = GUID('{02E11CA1-FA17-4BE1-A31A-C7C91DBD031A}')
    _idlflags_ = ['oleautomation']
ITableFunctionArguments._methods_ = [
    COMMETHOD(['propget', helpstring(u'The source raster object.')], HRESULT, 'Raster',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppRaster' )),
    COMMETHOD(['propputref', helpstring(u'The source raster object.')], HRESULT, 'Raster',
              ( ['in'], POINTER(IUnknown), 'ppRaster' )),
    COMMETHOD(['propget', helpstring(u'The raster attribute table.')], HRESULT, 'AttributeTable',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppRAT' )),
    COMMETHOD(['propputref', helpstring(u'The raster attribute table.')], HRESULT, 'AttributeTable',
              ( ['in'], POINTER(IUnknown), 'ppRAT' )),
]
################################################################
## code template for ITableFunctionArguments implementation
##class ITableFunctionArguments_Impl(object):
##    def Raster(self, ppRaster):
##        u'The source raster object.'
##        #return 
##
##    def AttributeTable(self, ppRAT):
##        u'The raster attribute table.'
##        #return 
##

class IGCSShiftXform(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeodataXform):
    _case_insensitive_ = True
    u'Provides access to members that control a GCS shift geodata transform.'
    _iid_ = GUID('{CC0593EF-718F-46C4-B278-B7FBB3C12CF4}')
    _idlflags_ = ['oleautomation']
IGCSShiftXform._methods_ = [
    COMMETHOD(['propget', helpstring(u'The left longitude source GCS.')], HRESULT, 'LeftLongitude',
              ( ['retval', 'out'], POINTER(c_double), 'pLon' )),
    COMMETHOD(['propput', helpstring(u'The left longitude source GCS.')], HRESULT, 'LeftLongitude',
              ( ['in'], c_double, 'pLon' )),
    COMMETHOD(['propget', helpstring(u'Indicates if reversely shifting to the left longitude.')], HRESULT, 'ReverseShift',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pReverseShift' )),
    COMMETHOD(['propput', helpstring(u'Indicates if reversely shifting to the left longitude.')], HRESULT, 'ReverseShift',
              ( ['in'], VARIANT_BOOL, 'pReverseShift' )),
]
################################################################
## code template for IGCSShiftXform implementation
##class IGCSShiftXform_Impl(object):
##    def _get(self):
##        u'The left longitude source GCS.'
##        #return pLon
##    def _set(self, pLon):
##        u'The left longitude source GCS.'
##    LeftLongitude = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if reversely shifting to the left longitude.'
##        #return pReverseShift
##    def _set(self, pReverseShift):
##        u'Indicates if reversely shifting to the left longitude.'
##    ReverseShift = property(_get, _set, doc = _set.__doc__)
##

class IConstantFunctionArguments(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control constant function arguments.'
    _iid_ = GUID('{0346AD7C-02DA-48D1-BA9A-CE8CDB31E2AB}')
    _idlflags_ = ['oleautomation']
IConstantFunctionArguments._methods_ = [
    COMMETHOD(['propget', helpstring(u'The raster information.')], HRESULT, 'RasterInfo',
              ( ['retval', 'out'], POINTER(POINTER(IRasterInfo)), 'ppRasterInfo' )),
    COMMETHOD(['propputref', helpstring(u'The raster information.')], HRESULT, 'RasterInfo',
              ( ['in'], POINTER(IRasterInfo), 'ppRasterInfo' )),
    COMMETHOD(['propget', helpstring(u'The constant value.')], HRESULT, 'Constant',
              ( ['retval', 'out'], POINTER(VARIANT), 'pValue' )),
    COMMETHOD(['propput', helpstring(u'The constant value.')], HRESULT, 'Constant',
              ( ['in'], VARIANT, 'pValue' )),
    COMMETHOD([helpstring(u'Initializes from a reference raster and a constant value.')], HRESULT, 'Init',
              ( [], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' ),
              ( [], VARIANT, 'Value' )),
]
################################################################
## code template for IConstantFunctionArguments implementation
##class IConstantFunctionArguments_Impl(object):
##    def Init(self, pRaster, Value):
##        u'Initializes from a reference raster and a constant value.'
##        #return 
##
##    def _get(self):
##        u'The constant value.'
##        #return pValue
##    def _set(self, pValue):
##        u'The constant value.'
##    Constant = property(_get, _set, doc = _set.__doc__)
##
##    def RasterInfo(self, ppRasterInfo):
##        u'The raster information.'
##        #return 
##

class HREBuilder(CoClass):
    u'A raster builder for HRE files.'
    _reg_clsid_ = GUID('{1E076602-A69E-4FF6-9C2C-E23F1FF2CD80}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
HREBuilder._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterBuilder2, IRasterBuilderInit]

class IBuildBoundaryParameters(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control parameters for building the boundary of a mosaic dataset.'
    _iid_ = GUID('{B178F641-6536-4C94-9A99-20974850DB45}')
    _idlflags_ = ['oleautomation']
class IBuildBoundaryParameters2(IBuildBoundaryParameters):
    _case_insensitive_ = True
    u'Provides access to members that control parameters for building the boundary of a mosaic dataset.'
    _iid_ = GUID('{F7251E46-2901-4E68-9D46-51DAF31C04BD}')
    _idlflags_ = ['oleautomation']
IBuildBoundaryParameters._methods_ = [
    COMMETHOD(['propput', helpstring(u'Indicates whether the computed boundary geometry is merged with existing mosaic boundary.')], HRESULT, 'AppendToExistingBoundary',
              ( ['in'], VARIANT_BOOL, 'pbAppendToExistingBoundary' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the computed boundary geometry is merged with existing mosaic boundary.')], HRESULT, 'AppendToExistingBoundary',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbAppendToExistingBoundary' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the computed boundary geometry is run through a point-weeding routine.')], HRESULT, 'PerformWeeding',
              ( ['in'], VARIANT_BOOL, 'pbPerformWeeding' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the computed boundary geometry is run through a point-weeding routine.')], HRESULT, 'PerformWeeding',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbPerformWeeding' )),
    COMMETHOD(['propput', helpstring(u'The tolerance for weeding points.')], HRESULT, 'WeedTolerance',
              ( ['in'], c_double, 'pWeedTolerance' )),
    COMMETHOD(['propget', helpstring(u'The tolerance for weeding points.')], HRESULT, 'WeedTolerance',
              ( ['retval', 'out'], POINTER(c_double), 'pWeedTolerance' )),
    COMMETHOD(['propput', helpstring(u'The buffer factor applied on each item footprint before it is merged with the cumulative boundary geometry.')], HRESULT, 'BufferDistanceFactor',
              ( ['in'], c_double, 'pBufferDistanceFactor' )),
    COMMETHOD(['propget', helpstring(u'The buffer factor applied on each item footprint before it is merged with the cumulative boundary geometry.')], HRESULT, 'BufferDistanceFactor',
              ( ['retval', 'out'], POINTER(c_double), 'pBufferDistanceFactor' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether polygons designated as slivers are removed from the boundary geometry.')], HRESULT, 'RemoveSlivers',
              ( ['in'], VARIANT_BOOL, 'pbRemoveSlivers' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether polygons designated as slivers are removed from the boundary geometry.')], HRESULT, 'RemoveSlivers',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbRemoveSlivers' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the mosaic dataset is updated with the computed boundary geometry.')], HRESULT, 'UpdateBoundary',
              ( ['in'], VARIANT_BOOL, 'pbUpdateBoundary' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the mosaic dataset is updated with the computed boundary geometry.')], HRESULT, 'UpdateBoundary',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbUpdateBoundary' )),
]
################################################################
## code template for IBuildBoundaryParameters implementation
##class IBuildBoundaryParameters_Impl(object):
##    def _get(self):
##        u'Indicates whether the computed boundary geometry is merged with existing mosaic boundary.'
##        #return pbAppendToExistingBoundary
##    def _set(self, pbAppendToExistingBoundary):
##        u'Indicates whether the computed boundary geometry is merged with existing mosaic boundary.'
##    AppendToExistingBoundary = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The buffer factor applied on each item footprint before it is merged with the cumulative boundary geometry.'
##        #return pBufferDistanceFactor
##    def _set(self, pBufferDistanceFactor):
##        u'The buffer factor applied on each item footprint before it is merged with the cumulative boundary geometry.'
##    BufferDistanceFactor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether the mosaic dataset is updated with the computed boundary geometry.'
##        #return pbUpdateBoundary
##    def _set(self, pbUpdateBoundary):
##        u'Indicates whether the mosaic dataset is updated with the computed boundary geometry.'
##    UpdateBoundary = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The tolerance for weeding points.'
##        #return pWeedTolerance
##    def _set(self, pWeedTolerance):
##        u'The tolerance for weeding points.'
##    WeedTolerance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether polygons designated as slivers are removed from the boundary geometry.'
##        #return pbRemoveSlivers
##    def _set(self, pbRemoveSlivers):
##        u'Indicates whether polygons designated as slivers are removed from the boundary geometry.'
##    RemoveSlivers = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether the computed boundary geometry is run through a point-weeding routine.'
##        #return pbPerformWeeding
##    def _set(self, pbPerformWeeding):
##        u'Indicates whether the computed boundary geometry is run through a point-weeding routine.'
##    PerformWeeding = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'esriGeometrySimplificationMethod'
esriGeometrySimplificationMethodNone = 0
esriGeometrySimplificationMethodConvexHull = 1
esriGeometrySimplificationMethodEnvelope = 2
esriGeometrySimplificationMethod = c_int # enum
IBuildBoundaryParameters2._methods_ = [
    COMMETHOD(['propget', helpstring(u'The simplification method to simplify the geometry of the mosaic dataset boundary')], HRESULT, 'BoundarySimplificationMethod',
              ( ['retval', 'out'], POINTER(esriGeometrySimplificationMethod), 'pSimplificationMethod' )),
    COMMETHOD(['propput', helpstring(u'The simplification method to simplify the geometry of the mosaic dataset boundary')], HRESULT, 'BoundarySimplificationMethod',
              ( ['in'], esriGeometrySimplificationMethod, 'pSimplificationMethod' )),
]
################################################################
## code template for IBuildBoundaryParameters2 implementation
##class IBuildBoundaryParameters2_Impl(object):
##    def _get(self):
##        u'The simplification method to simplify the geometry of the mosaic dataset boundary'
##        #return pSimplificationMethod
##    def _set(self, pSimplificationMethod):
##        u'The simplification method to simplify the geometry of the mosaic dataset boundary'
##    BoundarySimplificationMethod = property(_get, _set, doc = _set.__doc__)
##

class DblPnt(CoClass):
    u'A simple point class.'
    _reg_clsid_ = GUID('{1F1A2725-6B9D-44A5-B75E-9E4CD9B9F90A}')
    _idlflags_ = ['hidden']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
DblPnt._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IPnt]

class IExportItemsParameters(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control parameters for exporting items in a mosaic dataset.'
    _iid_ = GUID('{DB45460E-82A8-426F-90FE-67A8454101EF}')
    _idlflags_ = ['oleautomation']
IExportItemsParameters._methods_ = [
    COMMETHOD(['propput', helpstring(u'The output folder.')], HRESULT, 'OutputFolder',
              ( ['in'], BSTR, 'pFolder' )),
    COMMETHOD(['propget', helpstring(u'The output folder.')], HRESULT, 'OutputFolder',
              ( ['retval', 'out'], POINTER(BSTR), 'pFolder' )),
    COMMETHOD(['propput', helpstring(u'The output format.')], HRESULT, 'Format',
              ( ['in'], BSTR, 'pFormat' )),
    COMMETHOD(['propget', helpstring(u'The output format.')], HRESULT, 'Format',
              ( ['retval', 'out'], POINTER(BSTR), 'pFormat' )),
    COMMETHOD(['propput', helpstring(u'The basename.')], HRESULT, 'BaseName',
              ( ['in'], BSTR, 'pName' )),
    COMMETHOD(['propget', helpstring(u'The basename.')], HRESULT, 'BaseName',
              ( ['retval', 'out'], POINTER(BSTR), 'pName' )),
    COMMETHOD(['propputref', helpstring(u'The spatial reference.')], HRESULT, 'SpatialRef',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'ppSR' )),
    COMMETHOD(['propget', helpstring(u'The spatial reference.')], HRESULT, 'SpatialRef',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference)), 'ppSR' )),
    COMMETHOD(['propputref', helpstring(u'The storagedef.')], HRESULT, 'StorageDef',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterStorageDef), 'ppDef' )),
    COMMETHOD(['propget', helpstring(u'The storagedef.')], HRESULT, 'StorageDef',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterStorageDef)), 'ppDef' )),
    COMMETHOD(['propput', helpstring(u'The resampling type.')], HRESULT, 'ResamplingType',
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.rstResamplingTypes, 'pType' )),
    COMMETHOD(['propget', helpstring(u'The resampling type.')], HRESULT, 'ResamplingType',
              ( ['retval', 'out'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.rstResamplingTypes), 'pType' )),
    COMMETHOD(['propputref', helpstring(u'The extent.')], HRESULT, 'Extent',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'ppExtent' )),
    COMMETHOD(['propget', helpstring(u'The extent.')], HRESULT, 'Extent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'ppExtent' )),
    COMMETHOD(['propputref', helpstring(u'The clipping geometry.')], HRESULT, 'ClippingGeometry',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'ppGeometry' )),
    COMMETHOD(['propget', helpstring(u'The clipping geometry.')], HRESULT, 'ClippingGeometry',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry)), 'ppGeometry' )),
    COMMETHOD(['propputref', helpstring(u'The cellsize.')], HRESULT, 'CellSize',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'ppCellsize' )),
    COMMETHOD(['propget', helpstring(u'The cellsize.')], HRESULT, 'CellSize',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint)), 'ppCellsize' )),
    COMMETHOD(['propput', helpstring(u'The nodata.')], HRESULT, 'NoData',
              ( ['in'], BSTR, 'pNodata' )),
    COMMETHOD(['propget', helpstring(u'The nodata.')], HRESULT, 'NoData',
              ( ['retval', 'out'], POINTER(BSTR), 'pNodata' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether histogram statistics are computed for each raster dataset associated with each selected catalog item.')], HRESULT, 'ComputeStatistics',
              ( ['in'], VARIANT_BOOL, 'pbComputeStatistics' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether histogram statistics are computed for each raster dataset associated with each selected catalog item.')], HRESULT, 'ComputeStatistics',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbComputeStatistics' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether pyramids are built for each raster dataset associated with each selected catalog item.')], HRESULT, 'BuildPyramids',
              ( ['in'], VARIANT_BOOL, 'pbBuildPyramids' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether pyramids are built for each raster dataset associated with each selected catalog item.')], HRESULT, 'BuildPyramids',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbBuildPyramids' )),
    COMMETHOD(['propputref', helpstring(u"The reference raster whose bottom-left corner (XMin, YMin) is used for snapping the output raster's bottom-left corner.")], HRESULT, 'SnapRaster',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'ppRaster' )),
    COMMETHOD(['propget', helpstring(u"The reference raster whose bottom-left corner (XMin, YMin) is used for snapping the output raster's bottom-left corner.")], HRESULT, 'SnapRaster',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster)), 'ppRaster' )),
]
################################################################
## code template for IExportItemsParameters implementation
##class IExportItemsParameters_Impl(object):
##    def _get(self):
##        u'Indicates whether pyramids are built for each raster dataset associated with each selected catalog item.'
##        #return pbBuildPyramids
##    def _set(self, pbBuildPyramids):
##        u'Indicates whether pyramids are built for each raster dataset associated with each selected catalog item.'
##    BuildPyramids = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The nodata.'
##        #return pNodata
##    def _set(self, pNodata):
##        u'The nodata.'
##    NoData = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SpatialRef(self, ppSR):
##        u'The spatial reference.'
##        #return 
##
##    @property
##    def ClippingGeometry(self, ppGeometry):
##        u'The clipping geometry.'
##        #return 
##
##    def _get(self):
##        u'The output format.'
##        #return pFormat
##    def _set(self, pFormat):
##        u'The output format.'
##    Format = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SnapRaster(self, ppRaster):
##        u"The reference raster whose bottom-left corner (XMin, YMin) is used for snapping the output raster's bottom-left corner."
##        #return 
##
##    def _get(self):
##        u'The basename.'
##        #return pName
##    def _set(self, pName):
##        u'The basename.'
##    BaseName = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def CellSize(self, ppCellsize):
##        u'The cellsize.'
##        #return 
##
##    @property
##    def StorageDef(self, ppDef):
##        u'The storagedef.'
##        #return 
##
##    def _get(self):
##        u'Indicates whether histogram statistics are computed for each raster dataset associated with each selected catalog item.'
##        #return pbComputeStatistics
##    def _set(self, pbComputeStatistics):
##        u'Indicates whether histogram statistics are computed for each raster dataset associated with each selected catalog item.'
##    ComputeStatistics = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Extent(self, ppExtent):
##        u'The extent.'
##        #return 
##
##    def _get(self):
##        u'The resampling type.'
##        #return pType
##    def _set(self, pType):
##        u'The resampling type.'
##    ResamplingType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The output folder.'
##        #return pFolder
##    def _set(self, pFolder):
##        u'The output folder.'
##    OutputFolder = property(_get, _set, doc = _set.__doc__)
##

class IMosaicOperator(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control custom mosaic operators.'
    _iid_ = GUID('{7D94E2C9-CD9A-41A6-BB5B-64EF0E7F784D}')
    _idlflags_ = ['oleautomation']
IMosaicOperator._methods_ = [
    COMMETHOD(['propget', helpstring(u'Mosaic operator properties.')], HRESULT, 'Properties',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet)), 'ppProperties' )),
    COMMETHOD(['propput', helpstring(u'Mosaic operator properties.')], HRESULT, 'Properties',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet), 'ppProperties' )),
    COMMETHOD([helpstring(u'Initializes a mosaic operator.')], HRESULT, 'Init',
              ( ['in'], c_int, 'nBands' ),
              ( ['in'], c_int, 'nBlockCols' ),
              ( ['in'], c_int, 'nBlockRows' )),
    COMMETHOD(['propput', helpstring(u'The current band index.')], HRESULT, 'CurrentBand',
              ( ['in'], c_int, 'rhs' )),
    COMMETHOD([helpstring(u'Operates on two integer values and returns a new one.')], HRESULT, 'Operate',
              ( ['in'], c_int, 'x' ),
              ( ['in'], c_int, 'y' ),
              ( ['in'], c_int, 'v1' ),
              ( ['in', 'out'], POINTER(c_int), 'v2' )),
]
################################################################
## code template for IMosaicOperator implementation
##class IMosaicOperator_Impl(object):
##    def _set(self, rhs):
##        u'The current band index.'
##    CurrentBand = property(fset = _set, doc = _set.__doc__)
##
##    def Init(self, nBands, nBlockCols, nBlockRows):
##        u'Initializes a mosaic operator.'
##        #return 
##
##    def Operate(self, x, y, v1):
##        u'Operates on two integer values and returns a new one.'
##        #return v2
##
##    def _get(self):
##        u'Mosaic operator properties.'
##        #return ppProperties
##    def _set(self, ppProperties):
##        u'Mosaic operator properties.'
##    Properties = property(_get, _set, doc = _set.__doc__)
##

class IBackgroundFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a background filter.'
    _iid_ = GUID('{B0AACB96-C31C-49B6-BE07-A013BBC454E4}')
    _idlflags_ = ['oleautomation']
IBackgroundFilter._methods_ = [
    COMMETHOD(['propget', helpstring(u'The background value to be filtered.')], HRESULT, 'Background',
              ( ['retval', 'out'], POINTER(VARIANT), 'Value' )),
    COMMETHOD(['propput', helpstring(u'The background value to be filtered.')], HRESULT, 'Background',
              ( ['in'], VARIANT, 'Value' )),
]
################################################################
## code template for IBackgroundFilter implementation
##class IBackgroundFilter_Impl(object):
##    def _get(self):
##        u'The background value to be filtered.'
##        #return Value
##    def _set(self, Value):
##        u'The background value to be filtered.'
##    Background = property(_get, _set, doc = _set.__doc__)
##

class ITiePointOperation(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control an image tie point operation.'
    _iid_ = GUID('{3E402866-3F8D-4B54-ADD2-AB6D5BB0F0E8}')
    _idlflags_ = []
class IImageMatchPoints(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties of a list of image match points.'
    _iid_ = GUID('{F690343B-ABBD-418B-B135-0EF2602840FB}')
    _idlflags_ = []
ITiePointOperation._methods_ = [
    COMMETHOD([helpstring(u'Initializes a tie point collection with a tie point table.')], HRESULT, 'Init',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable), 'pTiePoints' )),
    COMMETHOD([helpstring(u'Saves all tie points to a given tie point table.')], HRESULT, 'SaveTo',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable), 'pTiePoints' )),
    COMMETHOD([helpstring(u'Adds a list of match points.')], HRESULT, 'AddPoints',
              ( ['in'], POINTER(IImageMatchPoints), 'pMatchPoints' )),
    COMMETHOD([helpstring(u'Computes tiepoints.')], HRESULT, 'Compute',
              ( ['in'], POINTER(IUnknown), 'pCatalog' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'pQueryFilter' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable), 'pTiePoints' )),
]
################################################################
## code template for ITiePointOperation implementation
##class ITiePointOperation_Impl(object):
##    def AddPoints(self, pMatchPoints):
##        u'Adds a list of match points.'
##        #return 
##
##    def Init(self, pTiePoints):
##        u'Initializes a tie point collection with a tie point table.'
##        #return 
##
##    def Compute(self, pCatalog, pQueryFilter, pTiePoints):
##        u'Computes tiepoints.'
##        #return 
##
##    def SaveTo(self, pTiePoints):
##        u'Saves all tie points to a given tie point table.'
##        #return 
##

class IComputeDirtyAreaParameters(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u"Provides access to members that control how a mosaic dataset's dirty area is computed."
    _iid_ = GUID('{8952C566-4515-4E70-B6AB-4ABAB0C633F1}')
    _idlflags_ = ['oleautomation']
IComputeDirtyAreaParameters._methods_ = [
    COMMETHOD(['propput', helpstring(u'The instance in time used for selecting newer mosaic dataset items that contribute to the dirty area. Use the ITime.QueryOleTime method to convert from other formats for encoding time.')], HRESULT, 'TimeStamp',
              ( ['in'], c_double, 'pTimeStamp' )),
    COMMETHOD(['propget', helpstring(u'The instance in time used for selecting newer mosaic dataset items that contribute to the dirty area. Use the ITime.QueryOleTime method to convert from other formats for encoding time.')], HRESULT, 'TimeStamp',
              ( ['retval', 'out'], POINTER(c_double), 'pTimeStamp' )),
    COMMETHOD(['propputref', helpstring(u'The polygon resulting from the dirty area computation. The polygon defines a region encompassing the footprints of all items that have been modified or synchronized since a specified point in time.')], HRESULT, 'ComputedDirtyArea',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'ppComputedDirtyArea' )),
    COMMETHOD(['propget', helpstring(u'The polygon resulting from the dirty area computation. The polygon defines a region encompassing the footprints of all items that have been modified or synchronized since a specified point in time.')], HRESULT, 'ComputedDirtyArea',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry)), 'ppComputedDirtyArea' )),
]
################################################################
## code template for IComputeDirtyAreaParameters implementation
##class IComputeDirtyAreaParameters_Impl(object):
##    def _get(self):
##        u'The instance in time used for selecting newer mosaic dataset items that contribute to the dirty area. Use the ITime.QueryOleTime method to convert from other formats for encoding time.'
##        #return pTimeStamp
##    def _set(self, pTimeStamp):
##        u'The instance in time used for selecting newer mosaic dataset items that contribute to the dirty area. Use the ITime.QueryOleTime method to convert from other formats for encoding time.'
##    TimeStamp = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def ComputedDirtyArea(self, ppComputedDirtyArea):
##        u'The polygon resulting from the dirty area computation. The polygon defines a region encompassing the footprints of all items that have been modified or synchronized since a specified point in time.'
##        #return 
##

class IDEImageServerType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Image Service Data Element Type.'
    _iid_ = GUID('{74F74D37-CCA3-48A2-BAE0-0CD2395884D7}')
    _idlflags_ = ['oleautomation']
IDEImageServerType._methods_ = [
]
################################################################
## code template for IDEImageServerType implementation
##class IDEImageServerType_Impl(object):

class Scalar(CoClass):
    u'The class for a scalar value.'
    _reg_clsid_ = GUID('{A5B2BF59-7876-4BAC-AB34-7C2F3684B95F}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
Scalar._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IScalar, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]


# values for enumeration 'esriImageAdjustmentType'
esriImageAdjustmentInsert = -1
esriImageAdjustmentAppend = 0
esriImageAdjustmentReplace = 1
esriImageAdjustmentReset = 2
esriImageAdjustmentApply = 3
esriImageAdjustmentType = c_int # enum
class GeometricXform(CoClass):
    u'A geometric transform class.'
    _reg_clsid_ = GUID('{067C3B10-6091-4804-82AB-1E066F3151A6}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IGeometricXform(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeodataXform):
    _case_insensitive_ = True
    u'Provides access to members that control a geometric transform.'
    _iid_ = GUID('{E6924FCB-4067-491B-A731-C175917A4AF7}')
    _idlflags_ = ['oleautomation']
GeometricXform._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGeometricXform, comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ITransformation, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersionSupportGEN, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class ICreateMosaicDatasetParameters(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control mosaic dataset creation parameters.'
    _iid_ = GUID('{BE94FFC7-98F4-48D0-8FAD-C3F1834C768F}')
    _idlflags_ = ['oleautomation']
class ICreateMosaicDatasetParameters2(ICreateMosaicDatasetParameters):
    _case_insensitive_ = True
    u'Provides access to members that control mosaic dataset creation parameters.'
    _iid_ = GUID('{98D47342-25E0-4FCA-8A23-34D006E312AE}')
    _idlflags_ = ['oleautomation']
class IMosaicLODInfos(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control mosaic LOD information.'
    _iid_ = GUID('{DFD25C61-79F5-4735-8CBC-1606947ACFDE}')
    _idlflags_ = ['oleautomation']
ICreateMosaicDatasetParameters._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The definition (spatial selection) geometry on the source catalog.')], HRESULT, 'DefinitionGeometry',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'ppGeometry' )),
    COMMETHOD(['propget', helpstring(u'The definition (spatial selection) geometry on the source catalog.')], HRESULT, 'DefinitionGeometry',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry)), 'ppGeometry' )),
    COMMETHOD(['propput', helpstring(u'The cell-size value above which no mosaicking occurs.')], HRESULT, 'MaximumVisibleCellsize',
              ( ['in'], c_double, 'pCellsize' )),
    COMMETHOD(['propget', helpstring(u'The cell-size value above which no mosaicking occurs.')], HRESULT, 'MaximumVisibleCellsize',
              ( ['retval', 'out'], POINTER(c_double), 'pCellsize' )),
    COMMETHOD(['propputref', helpstring(u'The levels of detail associated with the mosaic dataset.')], HRESULT, 'LODInfos',
              ( ['in'], POINTER(IMosaicLODInfos), 'ppLODInfos' )),
    COMMETHOD(['propget', helpstring(u'The levels of detail associated with the mosaic dataset.')], HRESULT, 'LODInfos',
              ( ['retval', 'out'], POINTER(POINTER(IMosaicLODInfos)), 'ppLODInfos' )),
    COMMETHOD(['propput', helpstring(u'The pixel-type of the mosaic dataset.')], HRESULT, 'PixelType',
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.rstPixelType, 'pPixelType' )),
    COMMETHOD(['propget', helpstring(u'The pixel-type of the mosaic dataset.')], HRESULT, 'PixelType',
              ( ['retval', 'out'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.rstPixelType), 'pPixelType' )),
    COMMETHOD(['propput', helpstring(u'The number of bands in the mosaic dataset.')], HRESULT, 'BandCount',
              ( ['in'], c_int, 'pCount' )),
    COMMETHOD(['propget', helpstring(u'The number of bands in the mosaic dataset.')], HRESULT, 'BandCount',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propput', helpstring(u'The name of the field that contains minimum visible cell-size values for items in the mosaic dataset.')], HRESULT, 'MinCellsizeFieldName',
              ( ['in'], BSTR, 'pMinCellsizeFieldName' )),
    COMMETHOD(['propget', helpstring(u'The name of the field that contains minimum visible cell-size values for items in the mosaic dataset.')], HRESULT, 'MinCellsizeFieldName',
              ( ['retval', 'out'], POINTER(BSTR), 'pMinCellsizeFieldName' )),
    COMMETHOD(['propput', helpstring(u'The name of the field that contains maximum visible cell-size values for items in the mosaic dataset.')], HRESULT, 'MaxCellsizeFieldName',
              ( ['in'], BSTR, 'pMaxCellsizeFieldName' )),
    COMMETHOD(['propget', helpstring(u'The name of the field that contains maximum visible cell-size values for items in the mosaic dataset.')], HRESULT, 'MaxCellsizeFieldName',
              ( ['retval', 'out'], POINTER(BSTR), 'pMaxCellsizeFieldName' )),
    COMMETHOD(['propput', helpstring(u'The name of the field that contains scale values for items in the mosaic dataset.')], HRESULT, 'LODFieldName',
              ( ['in'], BSTR, 'pLODFieldName' )),
    COMMETHOD(['propget', helpstring(u'The name of the field that contains scale values for items in the mosaic dataset.')], HRESULT, 'LODFieldName',
              ( ['retval', 'out'], POINTER(BSTR), 'pLODFieldName' )),
    COMMETHOD(['propputref', helpstring(u'The definition selection set on the source catalog.')], HRESULT, 'DefinitionFIDs',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFIDSet), 'ppFIDs' )),
    COMMETHOD(['propget', helpstring(u'The definition selection set on the source catalog.')], HRESULT, 'DefinitionFIDs',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFIDSet)), 'ppFIDs' )),
]
################################################################
## code template for ICreateMosaicDatasetParameters implementation
##class ICreateMosaicDatasetParameters_Impl(object):
##    def _get(self):
##        u'The cell-size value above which no mosaicking occurs.'
##        #return pCellsize
##    def _set(self, pCellsize):
##        u'The cell-size value above which no mosaicking occurs.'
##    MaximumVisibleCellsize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The name of the field that contains scale values for items in the mosaic dataset.'
##        #return pLODFieldName
##    def _set(self, pLODFieldName):
##        u'The name of the field that contains scale values for items in the mosaic dataset.'
##    LODFieldName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The name of the field that contains minimum visible cell-size values for items in the mosaic dataset.'
##        #return pMinCellsizeFieldName
##    def _set(self, pMinCellsizeFieldName):
##        u'The name of the field that contains minimum visible cell-size values for items in the mosaic dataset.'
##    MinCellsizeFieldName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The pixel-type of the mosaic dataset.'
##        #return pPixelType
##    def _set(self, pPixelType):
##        u'The pixel-type of the mosaic dataset.'
##    PixelType = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def DefinitionFIDs(self, ppFIDs):
##        u'The definition selection set on the source catalog.'
##        #return 
##
##    @property
##    def LODInfos(self, ppLODInfos):
##        u'The levels of detail associated with the mosaic dataset.'
##        #return 
##
##    def _get(self):
##        u'The name of the field that contains maximum visible cell-size values for items in the mosaic dataset.'
##        #return pMaxCellsizeFieldName
##    def _set(self, pMaxCellsizeFieldName):
##        u'The name of the field that contains maximum visible cell-size values for items in the mosaic dataset.'
##    MaxCellsizeFieldName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The number of bands in the mosaic dataset.'
##        #return pCount
##    def _set(self, pCount):
##        u'The number of bands in the mosaic dataset.'
##    BandCount = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def DefinitionGeometry(self, ppGeometry):
##        u'The definition (spatial selection) geometry on the source catalog.'
##        #return 
##

ICreateMosaicDatasetParameters2._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The mosaic dataset from which key properties are copied over to the newly created mosaic dataset.')], HRESULT, 'TemplateMosaicDataset',
              ( ['in'], POINTER(IMosaicDataset), 'ppMosaicDataset' )),
    COMMETHOD(['propget', helpstring(u'The mosaic dataset from which key properties are copied over to the newly created mosaic dataset.')], HRESULT, 'TemplateMosaicDataset',
              ( ['retval', 'out'], POINTER(POINTER(IMosaicDataset)), 'ppMosaicDataset' )),
    COMMETHOD(['propput', helpstring(u'The band definition keyword to be set on the mosaic dataset.')], HRESULT, 'BandDefinitionKeyword',
              ( ['in'], BSTR, 'pBandDefinitionKeyword' )),
    COMMETHOD(['propget', helpstring(u'The band definition keyword to be set on the mosaic dataset.')], HRESULT, 'BandDefinitionKeyword',
              ( ['retval', 'out'], POINTER(BSTR), 'pBandDefinitionKeyword' )),
    COMMETHOD(['propputref', helpstring(u'Key band properties to be set on the mosaic dataset.')], HRESULT, 'BandProperties',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'ppArrayOfPropertySet' )),
    COMMETHOD(['propget', helpstring(u'Key band properties to be set on the mosaic dataset.')], HRESULT, 'BandProperties',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'ppArrayOfPropertySet' )),
]
################################################################
## code template for ICreateMosaicDatasetParameters2 implementation
##class ICreateMosaicDatasetParameters2_Impl(object):
##    @property
##    def BandProperties(self, ppArrayOfPropertySet):
##        u'Key band properties to be set on the mosaic dataset.'
##        #return 
##
##    def _get(self):
##        u'The band definition keyword to be set on the mosaic dataset.'
##        #return pBandDefinitionKeyword
##    def _set(self, pBandDefinitionKeyword):
##        u'The band definition keyword to be set on the mosaic dataset.'
##    BandDefinitionKeyword = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def TemplateMosaicDataset(self, ppMosaicDataset):
##        u'The mosaic dataset from which key properties are copied over to the newly created mosaic dataset.'
##        #return 
##

class RemapFunction(CoClass):
    u'A class for a remap raster function.'
    _reg_clsid_ = GUID('{19156A32-B9A0-4DDF-B79F-61D74F367F93}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
RemapFunction._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunction, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class RasterDataManagementEventsHelper(CoClass):
    u'The raster data management events broadcaster.'
    _reg_clsid_ = GUID('{0F57D4C3-BD86-4F4D-AC8D-0A0754D87C19}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IRasterDataManagementEvents(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to events that occur with an raster dataset.'
    _iid_ = GUID('{5901C657-D66F-4C40-8976-05B663CB38E2}')
    _idlflags_ = ['oleautomation']
RasterDataManagementEventsHelper._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IConnectionPoint]
RasterDataManagementEventsHelper._outgoing_interfaces_ = [IRasterDataManagementEvents]

class RemapFunctionArguments(CoClass):
    u'A class for remap raster function arguments.'
    _reg_clsid_ = GUID('{86ACB7D5-A0E7-4345-9FBF-8BF59D5C87B2}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IRasterFunctionArguments(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control raster function arguments.'
    _iid_ = GUID('{04AA081E-28B0-47E4-B375-F367046DA924}')
    _idlflags_ = ['oleautomation']
class IRasterFunctionArguments2(IRasterFunctionArguments):
    _case_insensitive_ = True
    u'Provides access to members that control raster function arguments.'
    _iid_ = GUID('{FD4F0D2D-1F81-4B2D-8AE5-90CEF59C3CFE}')
    _idlflags_ = ['oleautomation']
class IRemapFunctionArguments(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control remap function arguments.'
    _iid_ = GUID('{6997F806-48BE-4F4B-AFCC-F2D765541CDD}')
    _idlflags_ = ['oleautomation']
RemapFunctionArguments._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunctionArguments, IRasterFunctionArguments2, IRemapFunctionArguments, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class Mensuration(CoClass):
    u'Implenments interface IMensuration to provide commercial basic mensuration services for the Esri Mensuration System.'
    _reg_clsid_ = GUID('{D23E855F-5D4D-4469-8C05-031E0169BCD9}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IMensuration(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides basic mensuration functionality utilizing sensor models that are compliant with the Community Sensor Model (CSM) specification.'
    _iid_ = GUID('{63AE4F70-BF55-480E-B2E0-49C5528BC4F2}')
    _idlflags_ = ['oleautomation']
class IMensuration3D(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides basic 3D mensuration functionality.'
    _iid_ = GUID('{829A4F6B-A404-4590-AE37-1196AF7FF6A0}')
    _idlflags_ = ['oleautomation']
Mensuration._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMensuration, IMensuration3D, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]

class RasterCommandResult(CoClass):
    u'The coclass for a raster command result from executing a raster command.'
    _reg_clsid_ = GUID('{80432F64-DC41-4A7D-9C49-1AEBE9266229}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IRasterCommandResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to member that control a raster command result.'
    _iid_ = GUID('{33C156E6-9808-4DDA-ACCB-9A698751C970}')
    _idlflags_ = ['oleautomation']
RasterCommandResult._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterCommandResult]

IRasterXformer._methods_ = [
    COMMETHOD(['propget', helpstring(u'The current approximation error tolerance in number (fraction) of pixels.')], HRESULT, 'ApproximationTolerance',
              ( ['retval', 'out'], POINTER(c_double), 'pNumPixels' )),
    COMMETHOD(['propput', helpstring(u'The current approximation error tolerance in number (fraction) of pixels.')], HRESULT, 'ApproximationTolerance',
              ( ['in'], c_double, 'pNumPixels' )),
    COMMETHOD(['propget', helpstring(u'The current raster resampler.')], HRESULT, 'PixelResampler',
              ( ['retval', 'out'], POINTER(POINTER(IPixelResampler)), 'ppResampler' )),
    COMMETHOD(['propputref', helpstring(u'The current raster resampler.')], HRESULT, 'PixelResampler',
              ( ['in'], POINTER(IPixelResampler), 'ppResampler' )),
    COMMETHOD(['propput', helpstring(u'The raster to be transformed.')], HRESULT, 'Raster',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'rhs' )),
    COMMETHOD([helpstring(u'Updates the raster transformer with the changed raster.')], HRESULT, 'Update',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' )),
    COMMETHOD([helpstring(u'Reads a pixel block.')], HRESULT, 'Read',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IPnt), 'tlc' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IPixelBlock), 'pPixelBlock' )),
]
################################################################
## code template for IRasterXformer implementation
##class IRasterXformer_Impl(object):
##    def Read(self, tlc, pPixelBlock):
##        u'Reads a pixel block.'
##        #return 
##
##    def _set(self, rhs):
##        u'The raster to be transformed.'
##    Raster = property(fset = _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The current approximation error tolerance in number (fraction) of pixels.'
##        #return pNumPixels
##    def _set(self, pNumPixels):
##        u'The current approximation error tolerance in number (fraction) of pixels.'
##    ApproximationTolerance = property(_get, _set, doc = _set.__doc__)
##
##    def Update(self, pRaster):
##        u'Updates the raster transformer with the changed raster.'
##        #return 
##
##    def PixelResampler(self, ppResampler):
##        u'The current raster resampler.'
##        #return 
##

class IThresholdFunctionArguments(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control threshold function arguments.'
    _iid_ = GUID('{3F809515-E6C8-4BA4-9DAD-0DF349B3F704}')
    _idlflags_ = ['oleautomation']
IThresholdFunctionArguments._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The source raster object.')], HRESULT, 'Raster',
              ( ['in'], POINTER(IUnknown), 'ppRaster' )),
    COMMETHOD(['propget', helpstring(u'The source raster object.')], HRESULT, 'Raster',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppRaster' )),
    COMMETHOD(['propget', helpstring(u'The binary thresholding types.')], HRESULT, 'ThresholdType',
              ( ['retval', 'out'], POINTER(esriRasterThresholdType), 'pThresholdType' )),
    COMMETHOD(['propput', helpstring(u'The binary thresholding types.')], HRESULT, 'ThresholdType',
              ( ['in'], esriRasterThresholdType, 'pThresholdType' )),
    COMMETHOD(['propget', helpstring(u'The binary thresholding values.')], HRESULT, 'Thresholds',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray)), 'ppThresholds' )),
    COMMETHOD(['propputref', helpstring(u'The binary thresholding values.')], HRESULT, 'Thresholds',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray), 'ppThresholds' )),
    COMMETHOD(['propget', helpstring(u'The raster band histograms.')], HRESULT, 'Histograms',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'ppHistograms' )),
    COMMETHOD(['propputref', helpstring(u'The raster band histograms.')], HRESULT, 'Histograms',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'ppHistograms' )),
]
################################################################
## code template for IThresholdFunctionArguments implementation
##class IThresholdFunctionArguments_Impl(object):
##    @property
##    def Raster(self, ppRaster):
##        u'The source raster object.'
##        #return 
##
##    def Thresholds(self, ppThresholds):
##        u'The binary thresholding values.'
##        #return 
##
##    def Histograms(self, ppHistograms):
##        u'The raster band histograms.'
##        #return 
##
##    def _get(self):
##        u'The binary thresholding types.'
##        #return pThresholdType
##    def _set(self, pThresholdType):
##        u'The binary thresholding types.'
##    ThresholdType = property(_get, _set, doc = _set.__doc__)
##

ISensorXform._methods_ = [
    COMMETHOD(['propget', helpstring(u'The constant Z value in meters.')], HRESULT, 'ConstantZ',
              ( ['retval', 'out'], POINTER(c_double), 'z' )),
    COMMETHOD(['propput', helpstring(u'The constant Z value in meters.')], HRESULT, 'ConstantZ',
              ( ['in'], c_double, 'z' )),
    COMMETHOD(['propget', helpstring(u'The conversion factor from DEM Z unit to meters.')], HRESULT, 'ZFactor',
              ( ['retval', 'out'], POINTER(c_double), 'ZFactor' )),
    COMMETHOD(['propput', helpstring(u'The conversion factor from DEM Z unit to meters.')], HRESULT, 'ZFactor',
              ( ['in'], c_double, 'ZFactor' )),
    COMMETHOD(['propget', helpstring(u'The Z offset in meters applied to DEM.')], HRESULT, 'ZOffset',
              ( ['retval', 'out'], POINTER(c_double), 'ZOffset' )),
    COMMETHOD(['propput', helpstring(u'The Z offset in meters applied to DEM.')], HRESULT, 'ZOffset',
              ( ['in'], c_double, 'ZOffset' )),
    COMMETHOD(['propget', helpstring(u'The Digital Elevation Model (DEM).')], HRESULT, 'DEM',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster)), 'ppDEM' )),
    COMMETHOD(['propputref', helpstring(u'The Digital Elevation Model (DEM).')], HRESULT, 'DEM',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'ppDEM' )),
    COMMETHOD(['propget', helpstring(u'Indicates if DEM is required for applying this transform.')], HRESULT, 'RequireDEM',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pRequireDEM' )),
    COMMETHOD(['propput', helpstring(u'Indicates if DEM is required for applying this transform.')], HRESULT, 'RequireDEM',
              ( ['in'], VARIANT_BOOL, 'pRequireDEM' )),
    COMMETHOD(['propget', helpstring(u'Indicates if Geoid correction is needed.')], HRESULT, 'CorrectGeoid',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pCorrection' )),
    COMMETHOD(['propput', helpstring(u'Indicates if Geoid correction is needed.')], HRESULT, 'CorrectGeoid',
              ( ['in'], VARIANT_BOOL, 'pCorrection' )),
]
################################################################
## code template for ISensorXform implementation
##class ISensorXform_Impl(object):
##    def _get(self):
##        u'Indicates if DEM is required for applying this transform.'
##        #return pRequireDEM
##    def _set(self, pRequireDEM):
##        u'Indicates if DEM is required for applying this transform.'
##    RequireDEM = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The Z offset in meters applied to DEM.'
##        #return ZOffset
##    def _set(self, ZOffset):
##        u'The Z offset in meters applied to DEM.'
##    ZOffset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if Geoid correction is needed.'
##        #return pCorrection
##    def _set(self, pCorrection):
##        u'Indicates if Geoid correction is needed.'
##    CorrectGeoid = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The conversion factor from DEM Z unit to meters.'
##        #return ZFactor
##    def _set(self, ZFactor):
##        u'The conversion factor from DEM Z unit to meters.'
##    ZFactor = property(_get, _set, doc = _set.__doc__)
##
##    def DEM(self, ppDEM):
##        u'The Digital Elevation Model (DEM).'
##        #return 
##
##    def _get(self):
##        u'The constant Z value in meters.'
##        #return z
##    def _set(self, z):
##        u'The constant Z value in meters.'
##    ConstantZ = property(_get, _set, doc = _set.__doc__)
##

class RasterInfo(CoClass):
    u'A class for a raster info value object containing information about a raster.'
    _reg_clsid_ = GUID('{4F1E5FCA-2334-4280-B109-17B3CAF9290E}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IRasterInfo2(IRasterInfo):
    _case_insensitive_ = True
    u'Provides access to members that control a raster info object.'
    _iid_ = GUID('{28E745A8-0617-4EB0-B8BD-272A945ED117}')
    _idlflags_ = ['oleautomation']
RasterInfo._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterInfo, IRasterInfo2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class PolynomialXform(CoClass):
    u'A polynomial transform class.'
    _reg_clsid_ = GUID('{B3CAA849-5523-4490-AA2D-780ACA41E1DD}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IPolynomialXform(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeodataXform):
    _case_insensitive_ = True
    u'Provides access to members that control a polynomial transform.'
    _iid_ = GUID('{B8A34DB7-E73B-4A09-8815-A7B729E33504}')
    _idlflags_ = ['oleautomation']
PolynomialXform._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IPolynomialXform, comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ITransformation, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersionSupportGEN, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class IRasterServiceHelper(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that controls web services.'
    _iid_ = GUID('{57326724-E6CA-4162-9DE3-11510201CC30}')
    _idlflags_ = ['oleautomation']
class IRasterServiceHelper2(IRasterServiceHelper):
    _case_insensitive_ = True
    u'Provides access to members that controls web services.'
    _iid_ = GUID('{6EE84CB4-696C-4CBA-B544-5A153E1A20EB}')
    _idlflags_ = ['oleautomation']
IRasterServiceHelper._methods_ = [
    COMMETHOD([helpstring(u'Creates a raster dataset given a WCS or Image Service name object.')], HRESULT, 'Open',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName), 'pName' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterDataset)), 'ppDataset' )),
    COMMETHOD([helpstring(u'Creates a raster dataset given an Image Service Reference file.')], HRESULT, 'OpenFromFile',
              ( ['in'], BSTR, 'urlString' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterDataset)), 'ppDataset' )),
]
################################################################
## code template for IRasterServiceHelper implementation
##class IRasterServiceHelper_Impl(object):
##    def Open(self, pName):
##        u'Creates a raster dataset given a WCS or Image Service name object.'
##        #return ppDataset
##
##    def OpenFromFile(self, urlString):
##        u'Creates a raster dataset given an Image Service Reference file.'
##        #return ppDataset
##

IRasterServiceHelper2._methods_ = [
    COMMETHOD([helpstring(u'Creates a raster dataset given a WMS/WCS or Image Service name object, connection properties and other properties like pixel size etc.')], HRESULT, 'OpenWMSConnection',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName), 'pName' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet), 'pConnectionProperties' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet), 'pWMSParameters' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterDataset)), 'ppDataset' )),
    COMMETHOD([helpstring(u'Opens the image service referenced by the URL as a raster dataset.')], HRESULT, 'OpenFromURL',
              ( ['in'], BSTR, 'URL' ),
              ( ['in'], BSTR, 'RasterTypeName' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet), 'pWMSParameters' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterDataset)), 'ppDataset' )),
    COMMETHOD([helpstring(u'Gets the WMS layer names from the URL.')], HRESULT, 'GetLayerPropertiesFromURL',
              ( ['in'], BSTR, 'URL' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet)), 'ppLayerProps' )),
]
################################################################
## code template for IRasterServiceHelper2 implementation
##class IRasterServiceHelper2_Impl(object):
##    def OpenFromURL(self, URL, RasterTypeName, pWMSParameters):
##        u'Opens the image service referenced by the URL as a raster dataset.'
##        #return ppDataset
##
##    def GetLayerPropertiesFromURL(self, URL):
##        u'Gets the WMS layer names from the URL.'
##        #return ppLayerProps
##
##    def OpenWMSConnection(self, pName, pConnectionProperties, pWMSParameters):
##        u'Creates a raster dataset given a WMS/WCS or Image Service name object, connection properties and other properties like pixel size etc.'
##        #return ppDataset
##


# values for enumeration 'esriRasterPrjMethodTypeEnum'
esriRasterPrjMethodGlobal = 0
esriRasteraPrjMethodPieceWise1 = 1
esriRasterPrjMethodPieceWise2 = 2
esriRasterPrjMethodFull = 3
esriRasterPrjMethodUserDefinedBlkSize = 4
esriRasterPrjMethodTypeEnum = c_int # enum
class IRasterGeometryProc(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that allow raster geometry processing.'
    _iid_ = GUID('{2B473C3C-B18E-11D3-A650-0008C7DF88A8}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'esriGeoTransTypeEnum'
esriGeoTransProjective = -3
esriGeoTransPolyOrder0 = -2
esriGeoTransRubberSheeting = -1
esriGeoTransSpline = 0
esriGeoTransPolyOrder1 = 1
esriGeoTransPolyOrder2 = 2
esriGeoTransPolyOrder3 = 3
esriGeoTransPolyOrderUndefined = 4
esriGeoTransTypeEnum = c_int # enum
IRasterGeometryProc._methods_ = [
    COMMETHOD([helpstring(u'Flips the input raster.')], HRESULT, 'Flip',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' )),
    COMMETHOD([helpstring(u'Mirrors the input raster.')], HRESULT, 'Mirror',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' )),
    COMMETHOD([helpstring(u'Shifts the input raster by deltaX and deltaY map units.')], HRESULT, 'Shift',
              ( ['in'], c_double, 'deltaX' ),
              ( ['in'], c_double, 'deltaY' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' )),
    COMMETHOD([helpstring(u'Scales the input raster by the specified x and y scale factors.')], HRESULT, 'ReScale',
              ( ['in'], c_double, 'xScale' ),
              ( ['in'], c_double, 'yScale' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' )),
    COMMETHOD([helpstring(u'Rotates the input raster around the specified pivot by an angle specified in degrees.')], HRESULT, 'Rotate',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'pPivotPoint' ),
              ( ['in'], c_double, 'rotateAngle' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' )),
    COMMETHOD([helpstring(u'Warps the input raster based upon the input control points using the transformation type specified.')], HRESULT, 'Warp',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPointCollection), 'sourceControlPoints' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPointCollection), 'targetControlPoints' ),
              ( ['in'], esriGeoTransTypeEnum, 'transformType' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' )),
    COMMETHOD([helpstring(u'Performs a Hermite transformation on the input raster based upon the 2 input control point pairs.')], HRESULT, 'TwoPointsAdjust',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPointCollection), 'sourceControlPoints' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPointCollection), 'targetControlPoints' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' )),
    COMMETHOD([helpstring(u'Transforms a set of points based upon the transformation being applied to the input raster.')], HRESULT, 'PointsTransform',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPointCollection), 'inPoints' ),
              ( ['in'], VARIANT_BOOL, 'isForward' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPointCollection)), 'outPoints' )),
    COMMETHOD([helpstring(u'Computes a least squares fit for the input control points.')], HRESULT, 'LeastSquareFit',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPointCollection), 'sourceControlPoints' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPointCollection), 'targetControlPoints' ),
              ( ['in'], esriGeoTransTypeEnum, 'transformType' ),
              ( ['in'], VARIANT_BOOL, 'forwardTransformation' ),
              ( ['in'], VARIANT_BOOL, 'returnTransformationCoef' ),
              ( ['retval', 'out'], POINTER(VARIANT), 'pVar' )),
    COMMETHOD([helpstring(u'Resets the input raster to its native coordinate space.')], HRESULT, 'Reset',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' )),
    COMMETHOD([helpstring(u'Persists the input raster to a new dataset of the specified format.')], HRESULT, 'Rectify',
              ( ['in'], BSTR, 'saveas_name' ),
              ( ['in'], BSTR, 'Format' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' )),
    COMMETHOD([helpstring(u'Outputs the current transformation properties to the dataset header or auxilliary file.')], HRESULT, 'Register',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' )),
    COMMETHOD([helpstring(u'Clips the input raster based on the specified envelope.')], HRESULT, 'Clip',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'ipRectangle' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' )),
    COMMETHOD([helpstring(u'Projects the input raster using a single polynomial fit to compute the adjustment between coordinate systems.')], HRESULT, 'ProjectFast',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'pNewSR' ),
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.rstResamplingTypes, 'resampleType' ),
              ( ['in', 'optional'], POINTER(VARIANT), 'pCellsize' ),
              ( ['in', 'optional'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' )),
    COMMETHOD(['restricted', helpstring(u'Projects the input raster using specified transformation type.')], HRESULT, 'Project',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'pNewSR' ),
              ( ['in'], esriRasterPrjMethodTypeEnum, 'PrjMethodType' ),
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.rstResamplingTypes, 'resampleType' ),
              ( ['in'], c_double, 'newCellsize' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' )),
    COMMETHOD([helpstring(u'Merges the input rasters into a single dataset.')], HRESULT, 'Merge',
              ( ['in'], BSTR, 'saveas_name' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspace), 'ipWorkspace' ),
              ( ['in'], BSTR, 'outRasterFormat' ),
              ( ['in'], c_double, 'CellSize' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'ipSR' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster)), 'ippOutRaster' )),
    COMMETHOD([helpstring(u'Mosaics the input rasters into a single dataset.')], HRESULT, 'Mosaic',
              ( ['in'], BSTR, 'saveas_name' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspace), 'pWorkspace' ),
              ( ['in'], BSTR, 'outRasterFormat' ),
              ( ['in'], c_double, 'CellSize' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'pSR' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster)), 'ppOutRaster' )),
    COMMETHOD([helpstring(u'Resamples the input raster to a new cellsize.')], HRESULT, 'Resample',
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.rstResamplingTypes, 'resampleType' ),
              ( ['in'], c_double, 'newCellsize' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the transformation of pixel to map is simple.')], HRESULT, 'IsPixelToMapTransSimple',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'isSimple' )),
]
################################################################
## code template for IRasterGeometryProc implementation
##class IRasterGeometryProc_Impl(object):
##    def Reset(self, pRaster):
##        u'Resets the input raster to its native coordinate space.'
##        #return 
##
##    def Resample(self, resampleType, newCellsize, pRaster):
##        u'Resamples the input raster to a new cellsize.'
##        #return 
##
##    def Rotate(self, pPivotPoint, rotateAngle, pRaster):
##        u'Rotates the input raster around the specified pivot by an angle specified in degrees.'
##        #return 
##
##    @property
##    def IsPixelToMapTransSimple(self, pRaster):
##        u'Indicates if the transformation of pixel to map is simple.'
##        #return isSimple
##
##    def Clip(self, ipRectangle, pRaster):
##        u'Clips the input raster based on the specified envelope.'
##        #return 
##
##    def Rectify(self, saveas_name, Format, pRaster):
##        u'Persists the input raster to a new dataset of the specified format.'
##        #return 
##
##    def ReScale(self, xScale, yScale, pRaster):
##        u'Scales the input raster by the specified x and y scale factors.'
##        #return 
##
##    def Shift(self, deltaX, deltaY, pRaster):
##        u'Shifts the input raster by deltaX and deltaY map units.'
##        #return 
##
##    def Register(self, pRaster):
##        u'Outputs the current transformation properties to the dataset header or auxilliary file.'
##        #return 
##
##    def Flip(self, pRaster):
##        u'Flips the input raster.'
##        #return 
##
##    def Warp(self, sourceControlPoints, targetControlPoints, transformType, pRaster):
##        u'Warps the input raster based upon the input control points using the transformation type specified.'
##        #return 
##
##    def Project(self, pNewSR, PrjMethodType, resampleType, newCellsize, pRaster):
##        u'Projects the input raster using specified transformation type.'
##        #return 
##
##    def Merge(self, saveas_name, ipWorkspace, outRasterFormat, CellSize, ipSR, pRaster):
##        u'Merges the input rasters into a single dataset.'
##        #return ippOutRaster
##
##    def Mosaic(self, saveas_name, pWorkspace, outRasterFormat, CellSize, pSR, pRaster):
##        u'Mosaics the input rasters into a single dataset.'
##        #return ppOutRaster
##
##    def PointsTransform(self, inPoints, isForward, pRaster):
##        u'Transforms a set of points based upon the transformation being applied to the input raster.'
##        #return outPoints
##
##    def LeastSquareFit(self, sourceControlPoints, targetControlPoints, transformType, forwardTransformation, returnTransformationCoef):
##        u'Computes a least squares fit for the input control points.'
##        #return pVar
##
##    def Mirror(self, pRaster):
##        u'Mirrors the input raster.'
##        #return 
##
##    def TwoPointsAdjust(self, sourceControlPoints, targetControlPoints, pRaster):
##        u'Performs a Hermite transformation on the input raster based upon the 2 input control point pairs.'
##        #return 
##
##    def ProjectFast(self, pNewSR, resampleType, pCellsize, pRaster):
##        u'Projects the input raster using a single polynomial fit to compute the adjustment between coordinate systems.'
##        #return 
##

class RPFItemURI(CoClass):
    u'An item URI that identifes aN RPF file.'
    _reg_clsid_ = GUID('{B619C7C1-05A3-429B-9126-15EEAC97383D}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IFileItemURI(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a file item URI.'
    _iid_ = GUID('{522E65B4-FF5E-4E61-AC22-A5BA51A73F12}')
    _idlflags_ = ['oleautomation']
class IRPFItemURI(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control an RPF or DTED item URI.'
    _iid_ = GUID('{011B6933-85C1-408B-9A2E-D7E676936063}')
    _idlflags_ = ['oleautomation']
class IItemURICompare(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that compare an item URI.'
    _iid_ = GUID('{CE980784-6E16-46DA-A51A-D973E93D18AE}')
    _idlflags_ = ['oleautomation']
RPFItemURI._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IItemURI, IItemURI2, IItemPaths, IItemPaths2, IFileItemURI, IRPFItemURI, IItemURICompare]

class BandArithmeticFunction(CoClass):
    u'A class for a raster Band Arithmetic function.'
    _reg_clsid_ = GUID('{D2455FD9-9A43-4630-B928-5CC89E52BF4C}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
BandArithmeticFunction._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunction, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class LandsatMSSBuilder(CoClass):
    u'A raster builder for Landsat 1-5 MSS products'
    _reg_clsid_ = GUID('{8E0A8DD6-DF21-4E83-859F-64E53841981C}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
LandsatMSSBuilder._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterBuilder, IRasterBuilder2, IRasterBuilderInit]

class IFormatData(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that provide access to information about specific raster formats.'
    _iid_ = GUID('{43E890D1-5ED9-11D3-80EA-00500462E955}')
    _idlflags_ = ['oleautomation']
IFormatData._methods_ = [
    COMMETHOD(['propget', helpstring(u'Implementor name of format.')], HRESULT, 'Title',
              ( ['retval', 'out'], POINTER(BSTR), 'pVal' )),
    COMMETHOD(['propget', helpstring(u'User legible name of format.')], HRESULT, 'UITitle',
              ( ['retval', 'out'], POINTER(BSTR), 'pVal' )),
    COMMETHOD(['propget', helpstring(u'Order to display in UI.')], HRESULT, 'Order',
              ( ['retval', 'out'], POINTER(c_int), 'pVal' )),
    COMMETHOD(['propget', helpstring(u'Wildcard string for file matching.')], HRESULT, 'Templ',
              ( ['retval', 'out'], POINTER(BSTR), 'pVal' )),
    COMMETHOD(['propget', helpstring(u'Indicates if wildcard match is enough for verification.')], HRESULT, 'Pseudo',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pVal' )),
    COMMETHOD(['propget', helpstring(u'Default extension (without the dot).')], HRESULT, 'Extension',
              ( ['retval', 'out'], POINTER(BSTR), 'pVal' )),
    COMMETHOD(['propget', helpstring(u'Name used for icon registration.')], HRESULT, 'ShortName',
              ( ['retval', 'out'], POINTER(BSTR), 'pVal' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether this format is directory based, as opposed to file based.')], HRESULT, 'Directory',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pVal' )),
    COMMETHOD(['propget', helpstring(u"Indicates whether this format supports 'SaveAs'.")], HRESULT, 'Creatable',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pVal' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether this format is intended for display to user (eg. NOT *.rrd, or *.aux).')], HRESULT, 'UserFile',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pVal' )),
]
################################################################
## code template for IFormatData implementation
##class IFormatData_Impl(object):
##    @property
##    def Extension(self):
##        u'Default extension (without the dot).'
##        #return pVal
##
##    @property
##    def Title(self):
##        u'Implementor name of format.'
##        #return pVal
##
##    @property
##    def Creatable(self):
##        u"Indicates whether this format supports 'SaveAs'."
##        #return pVal
##
##    @property
##    def UserFile(self):
##        u'Indicates whether this format is intended for display to user (eg. NOT *.rrd, or *.aux).'
##        #return pVal
##
##    @property
##    def Pseudo(self):
##        u'Indicates if wildcard match is enough for verification.'
##        #return pVal
##
##    @property
##    def Templ(self):
##        u'Wildcard string for file matching.'
##        #return pVal
##
##    @property
##    def Directory(self):
##        u'Indicates whether this format is directory based, as opposed to file based.'
##        #return pVal
##
##    @property
##    def ShortName(self):
##        u'Name used for icon registration.'
##        #return pVal
##
##    @property
##    def UITitle(self):
##        u'User legible name of format.'
##        #return pVal
##
##    @property
##    def Order(self):
##        u'Order to display in UI.'
##        #return pVal
##

class LandsatBuilder(CoClass):
    u'A raster builder for Landsat files'
    _reg_clsid_ = GUID('{661CF6C7-CD79-4E72-A023-7DF0A413041F}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
LandsatBuilder._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterBuilder2, IRasterBuilderInit]

ISearchBuilder._methods_ = [
]
################################################################
## code template for ISearchBuilder implementation
##class ISearchBuilder_Impl(object):

class ISeamlineTaskInfo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control information defining a seamline task.'
    _iid_ = GUID('{528269BF-E314-4FC5-ADCC-2D6DBB812411}')
    _idlflags_ = ['oleautomation']
class IMosaicFunction(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control mosaic function.'
    _iid_ = GUID('{2E7A3BB4-76E1-4B84-A359-68233D60450A}')
    _idlflags_ = ['oleautomation']
ISeamlineTaskInfo._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The footprint geometry of the item for which the seamline is being computed.')], HRESULT, 'ItemGeometry',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'ppItemGeometry' )),
    COMMETHOD(['propget', helpstring(u'The footprint geometry of the item for which the seamline is being computed.')], HRESULT, 'ItemGeometry',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry)), 'ppItemGeometry' )),
    COMMETHOD(['propput', helpstring(u'The object ID of the item for which the seamline is being computed.')], HRESULT, 'ItemID',
              ( ['in'], c_int, 'pItemID' )),
    COMMETHOD(['propget', helpstring(u'The object ID of the item for which the seamline is being computed.')], HRESULT, 'ItemID',
              ( ['retval', 'out'], POINTER(c_int), 'pItemID' )),
    COMMETHOD(['propputref', helpstring(u'The cell size at which seamlines are computed.')], HRESULT, 'CellSize',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'ppCellsize' )),
    COMMETHOD(['propget', helpstring(u'The cell size at which seamlines are computed.')], HRESULT, 'CellSize',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint)), 'ppCellsize' )),
    COMMETHOD(['propputref', helpstring(u'The geometry of the mosaic built using all items that appear below the selected item.')], HRESULT, 'MosaicGeometry',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'ppMosaicGeometry' )),
    COMMETHOD(['propget', helpstring(u'The geometry of the mosaic built using all items that appear below the selected item.')], HRESULT, 'MosaicGeometry',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry)), 'ppMosaicGeometry' )),
    COMMETHOD(['propputref', helpstring(u'The object IDs of all items that appear below the selected item.')], HRESULT, 'MosaicItemIDs',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFIDSet), 'ppMosaicItemIDs' )),
    COMMETHOD(['propget', helpstring(u'The object IDs of all items that appear below the selected item.')], HRESULT, 'MosaicItemIDs',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFIDSet)), 'ppMosaicItemIDs' )),
    COMMETHOD(['propputref', helpstring(u'The mosaic function associated with the mosaic dataset.')], HRESULT, 'MosaicFunction',
              ( ['in'], POINTER(IMosaicFunction), 'ppMosaicFunction' )),
    COMMETHOD(['propget', helpstring(u'The mosaic function associated with the mosaic dataset.')], HRESULT, 'MosaicFunction',
              ( ['retval', 'out'], POINTER(POINTER(IMosaicFunction)), 'ppMosaicFunction' )),
    COMMETHOD(['propputref', helpstring(u'The difference raster built using the selected item raster and the accumulated mosaic raster.')], HRESULT, 'DifferenceRaster',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'ppDifferenceRaster' )),
    COMMETHOD(['propget', helpstring(u'The difference raster built using the selected item raster and the accumulated mosaic raster.')], HRESULT, 'DifferenceRaster',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster)), 'ppDifferenceRaster' )),
    COMMETHOD(['propputref', helpstring(u'The recommended start point for the creation of the seamline.')], HRESULT, 'StartPoint',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'ppStartPoint' )),
    COMMETHOD(['propget', helpstring(u'The recommended start point for the creation of the seamline.')], HRESULT, 'StartPoint',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint)), 'ppStartPoint' )),
    COMMETHOD(['propputref', helpstring(u'The recommended end point for the creation of the seamline.')], HRESULT, 'EndPoint',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'ppEndPoint' )),
    COMMETHOD(['propget', helpstring(u'The recommended end point for the creation of the seamline.')], HRESULT, 'EndPoint',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint)), 'ppEndPoint' )),
    COMMETHOD(['propget', helpstring(u'The request size.')], HRESULT, 'RequestSize',
              ( ['retval', 'out'], POINTER(c_int), 'pRequestSize' )),
    COMMETHOD(['propput', helpstring(u'The request size.')], HRESULT, 'RequestSize',
              ( ['in'], c_int, 'pRequestSize' )),
]
################################################################
## code template for ISeamlineTaskInfo implementation
##class ISeamlineTaskInfo_Impl(object):
##    def _get(self):
##        u'The object ID of the item for which the seamline is being computed.'
##        #return pItemID
##    def _set(self, pItemID):
##        u'The object ID of the item for which the seamline is being computed.'
##    ItemID = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def ItemGeometry(self, ppItemGeometry):
##        u'The footprint geometry of the item for which the seamline is being computed.'
##        #return 
##
##    @property
##    def EndPoint(self, ppEndPoint):
##        u'The recommended end point for the creation of the seamline.'
##        #return 
##
##    @property
##    def MosaicGeometry(self, ppMosaicGeometry):
##        u'The geometry of the mosaic built using all items that appear below the selected item.'
##        #return 
##
##    @property
##    def MosaicFunction(self, ppMosaicFunction):
##        u'The mosaic function associated with the mosaic dataset.'
##        #return 
##
##    @property
##    def CellSize(self, ppCellsize):
##        u'The cell size at which seamlines are computed.'
##        #return 
##
##    @property
##    def MosaicItemIDs(self, ppMosaicItemIDs):
##        u'The object IDs of all items that appear below the selected item.'
##        #return 
##
##    @property
##    def DifferenceRaster(self, ppDifferenceRaster):
##        u'The difference raster built using the selected item raster and the accumulated mosaic raster.'
##        #return 
##
##    def _get(self):
##        u'The request size.'
##        #return pRequestSize
##    def _set(self, pRequestSize):
##        u'The request size.'
##    RequestSize = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def StartPoint(self, ppStartPoint):
##        u'The recommended start point for the creation of the seamline.'
##        #return 
##

class DistanceMeasurement(CoClass):
    u'Implements interface IDistanceMeasurement (distance measurement and the associated uncertainty information).'
    _reg_clsid_ = GUID('{7ABC913A-A245-47B5-A306-D94626C004E4}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IDistanceMeasurement(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Distance measurement and its associated uncertainty information.'
    _iid_ = GUID('{C997D6A9-2B49-42DA-97DD-34EB32A14A02}')
    _idlflags_ = ['oleautomation']
DistanceMeasurement._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDistanceMeasurement]

class IContrastBrightnessFunctionArguments(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Adjusts brightness and contrast of a raster.'
    _iid_ = GUID('{C00501C8-3CDA-4D36-80C0-0D66634221CE}')
    _idlflags_ = ['oleautomation']
IContrastBrightnessFunctionArguments._methods_ = [
    COMMETHOD(['propget', helpstring(u'The input raster.')], HRESULT, 'Raster',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppRaster' )),
    COMMETHOD(['propputref', helpstring(u'The input raster.')], HRESULT, 'Raster',
              ( ['in'], POINTER(IUnknown), 'ppRaster' )),
    COMMETHOD(['propput', helpstring(u'The contrast offset.')], HRESULT, 'ContrastOffset',
              ( ['in'], c_double, 'pContrastOffset' )),
    COMMETHOD(['propget', helpstring(u'The contrast offset.')], HRESULT, 'ContrastOffset',
              ( ['retval', 'out'], POINTER(c_double), 'pContrastOffset' )),
    COMMETHOD(['propget', helpstring(u'The brightness offset.')], HRESULT, 'BrightnessOffset',
              ( ['retval', 'out'], POINTER(c_double), 'pBrightnessOffset' )),
    COMMETHOD(['propput', helpstring(u'The brightness offset.')], HRESULT, 'BrightnessOffset',
              ( ['in'], c_double, 'pBrightnessOffset' )),
]
################################################################
## code template for IContrastBrightnessFunctionArguments implementation
##class IContrastBrightnessFunctionArguments_Impl(object):
##    def Raster(self, ppRaster):
##        u'The input raster.'
##        #return 
##
##    def _get(self):
##        u'The brightness offset.'
##        #return pBrightnessOffset
##    def _set(self, pBrightnessOffset):
##        u'The brightness offset.'
##    BrightnessOffset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The contrast offset.'
##        #return pContrastOffset
##    def _set(self, pContrastOffset):
##        u'The contrast offset.'
##    ContrastOffset = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'esriReferenceGeoidType'
esriGeoidTypeUnknown = -1
esriGeoidTypeWGS84EGM96 = 0
esriReferenceGeoidType = c_int # enum
class AngularMeasurement(CoClass):
    u'Implements interface IAngularMeasurement (angular measurement and the associated uncertainty information).'
    _reg_clsid_ = GUID('{B2ABC03E-5DBE-495D-A9CC-E429171E3892}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IAngularMeasurement(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Angular measurement and its associated uncertainty information.'
    _iid_ = GUID('{CDFE6612-D2D4-475E-A682-54033C62F93A}')
    _idlflags_ = ['oleautomation']
AngularMeasurement._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IAngularMeasurement]

IFunctionRasterDatasetName._methods_ = [
    COMMETHOD(['propput', helpstring(u'The full path name.')], HRESULT, 'FullName',
              ( ['in'], BSTR, 'pName' )),
    COMMETHOD(['propget', helpstring(u'The full path name.')], HRESULT, 'FullName',
              ( ['retval', 'out'], POINTER(BSTR), 'pName' )),
    COMMETHOD(['propget', helpstring(u'The raster function.')], HRESULT, 'Function',
              ( ['retval', 'out'], POINTER(POINTER(IRasterFunction)), 'ppFunction' )),
    COMMETHOD(['propputref', helpstring(u'The raster function.')], HRESULT, 'Function',
              ( ['in'], POINTER(IRasterFunction), 'ppFunction' )),
    COMMETHOD(['propget', helpstring(u'The raster function argument(s).')], HRESULT, 'Arguments',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppArguments' )),
    COMMETHOD(['propputref', helpstring(u'The raster function argument(s).')], HRESULT, 'Arguments',
              ( ['in'], POINTER(IUnknown), 'ppArguments' )),
    COMMETHOD(['propputref', helpstring(u'The function raster dataset proprties.')], HRESULT, 'Properties',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet), 'ppProperties' )),
    COMMETHOD(['propget', helpstring(u'The function raster dataset proprties.')], HRESULT, 'Properties',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet)), 'ppProperties' )),
    COMMETHOD(['propput', helpstring(u'The browse name.')], HRESULT, 'BrowseName',
              ( ['in'], BSTR, 'pName' )),
    COMMETHOD(['propget', helpstring(u'The browse name.')], HRESULT, 'BrowseName',
              ( ['retval', 'out'], POINTER(BSTR), 'pName' )),
]
################################################################
## code template for IFunctionRasterDatasetName implementation
##class IFunctionRasterDatasetName_Impl(object):
##    def Function(self, ppFunction):
##        u'The raster function.'
##        #return 
##
##    def _get(self):
##        u'The browse name.'
##        #return pName
##    def _set(self, pName):
##        u'The browse name.'
##    BrowseName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The full path name.'
##        #return pName
##    def _set(self, pName):
##        u'The full path name.'
##    FullName = property(_get, _set, doc = _set.__doc__)
##
##    def Arguments(self, ppArguments):
##        u'The raster function argument(s).'
##        #return 
##
##    @property
##    def Properties(self, ppProperties):
##        u'The function raster dataset proprties.'
##        #return 
##

class FileItemURI(CoClass):
    u'An item URI that identifes a file.'
    _reg_clsid_ = GUID('{D637C34B-9EDF-4AF2-B44F-0C4B5DE216D3}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
FileItemURI._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IItemURI, IItemURI2, IItemPaths, IItemPaths2, IFileItemURI]

class IRasterAnalysisProps(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the properties for raster analysis.'
    _iid_ = GUID('{31E5FF30-2DAD-11D3-A3F6-0004AC1B1D86}')
    _idlflags_ = ['oleautomation']
IRasterAnalysisProps._methods_ = [
    COMMETHOD(['propput', helpstring(u'The pixel width in ground resolution.')], HRESULT, 'PixelWidth',
              ( ['in'], c_double, 'Width' )),
    COMMETHOD(['propget', helpstring(u'The pixel width in ground resolution.')], HRESULT, 'PixelWidth',
              ( ['retval', 'out'], POINTER(c_double), 'Width' )),
    COMMETHOD(['propput', helpstring(u'The pixel height in ground resolution.')], HRESULT, 'PixelHeight',
              ( ['in'], c_double, 'Height' )),
    COMMETHOD(['propget', helpstring(u'The pixel height in ground resolution.')], HRESULT, 'PixelHeight',
              ( ['retval', 'out'], POINTER(c_double), 'Height' )),
    COMMETHOD(['propget', helpstring(u'The analysis extent of the raster.')], HRESULT, 'AnalysisExtent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'ppExtent' )),
    COMMETHOD(['propputref', helpstring(u'The analysis extent of the raster.')], HRESULT, 'AnalysisExtent',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'ppExtent' )),
    COMMETHOD(['propget', helpstring(u'The RasterDataset, if there is one.')], HRESULT, 'RasterDataset',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterDataset)), 'RasterDataset' )),
    COMMETHOD([helpstring(u'Makes a temporary raster a permanent raster dataset.')], HRESULT, 'MakePermanent'),
]
################################################################
## code template for IRasterAnalysisProps implementation
##class IRasterAnalysisProps_Impl(object):
##    @property
##    def RasterDataset(self):
##        u'The RasterDataset, if there is one.'
##        #return RasterDataset
##
##    def _get(self):
##        u'The pixel height in ground resolution.'
##        #return Height
##    def _set(self, Height):
##        u'The pixel height in ground resolution.'
##    PixelHeight = property(_get, _set, doc = _set.__doc__)
##
##    def AnalysisExtent(self, ppExtent):
##        u'The analysis extent of the raster.'
##        #return 
##
##    def MakePermanent(self):
##        u'Makes a temporary raster a permanent raster dataset.'
##        #return 
##
##    def _get(self):
##        u'The pixel width in ground resolution.'
##        #return Width
##    def _set(self, Width):
##        u'The pixel width in ground resolution.'
##    PixelWidth = property(_get, _set, doc = _set.__doc__)
##

class SplineXform(CoClass):
    u'A Thin Plate Spline transform class.'
    _reg_clsid_ = GUID('{4C777D30-C7AE-45BF-9781-19AF061A62E9}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class ISplineXform(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeodataXform):
    _case_insensitive_ = True
    u'Provides access to members that control a Thin Plate Spline transform.'
    _iid_ = GUID('{B5E683CA-8651-4F27-B987-5F391ADCB366}')
    _idlflags_ = ['oleautomation']
SplineXform._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ISplineXform, comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ITransformation, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersionSupportGEN, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

IRasterTypeDataSourceHandlerParameters._methods_ = [
    COMMETHOD(['propput', helpstring(u'The data source to be supplied to handler operations.')], HRESULT, 'DataSource',
              ( ['in'], VARIANT, 'pvtDataSource' )),
    COMMETHOD(['propget', helpstring(u'The data source to be supplied to handler operations.')], HRESULT, 'DataSource',
              ( ['retval', 'out'], POINTER(VARIANT), 'pvtDataSource' )),
    COMMETHOD(['propputref', helpstring(u'The collection of raster types on which the handler operates.')], HRESULT, 'RasterTypes',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'ppRasterTypes' )),
    COMMETHOD(['propget', helpstring(u'The collection of raster types on which the handler operates.')], HRESULT, 'RasterTypes',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'ppRasterTypes' )),
    COMMETHOD(['propputref', helpstring(u'The cancel tracker associated with handler operations.')], HRESULT, 'TrackCancel',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'ppTrackCancel' )),
    COMMETHOD(['propget', helpstring(u'The cancel tracker associated with handler operations.')], HRESULT, 'TrackCancel',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel)), 'ppTrackCancel' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether handler operations perform only cursory checks (via IRasterBuilder.CanBuild) on data sources to identify candidate raster types and templates.')], HRESULT, 'TryQuickCheckOnly',
              ( ['in'], VARIANT_BOOL, 'pbTryQuickCheckOnly' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether handler operations perform only cursory checks (via IRasterBuilder.CanBuild) on data sources to identify candidate raster types and templates.')], HRESULT, 'TryQuickCheckOnly',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbTryQuickCheckOnly' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether handler operations stops searching for candidate raster types or templates once the first candidate is found.')], HRESULT, 'StopAtFirstFind',
              ( ['in'], VARIANT_BOOL, 'pbStopAtFirstFind' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether handler operations stops searching for candidate raster types or templates once the first candidate is found.')], HRESULT, 'StopAtFirstFind',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbStopAtFirstFind' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether ancillary dataset generated by complex raster type item templates are to be allowed by handler operations.')], HRESULT, 'AllowAncillaryDatasets',
              ( ['in'], VARIANT_BOOL, 'pbAllowAncillaryDatasets' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether ancillary dataset generated by complex raster type item templates are to be allowed by handler operations.')], HRESULT, 'AllowAncillaryDatasets',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbAllowAncillaryDatasets' )),
]
################################################################
## code template for IRasterTypeDataSourceHandlerParameters implementation
##class IRasterTypeDataSourceHandlerParameters_Impl(object):
##    @property
##    def TrackCancel(self, ppTrackCancel):
##        u'The cancel tracker associated with handler operations.'
##        #return 
##
##    @property
##    def RasterTypes(self, ppRasterTypes):
##        u'The collection of raster types on which the handler operates.'
##        #return 
##
##    def _get(self):
##        u'Indicates whether handler operations stops searching for candidate raster types or templates once the first candidate is found.'
##        #return pbStopAtFirstFind
##    def _set(self, pbStopAtFirstFind):
##        u'Indicates whether handler operations stops searching for candidate raster types or templates once the first candidate is found.'
##    StopAtFirstFind = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether handler operations perform only cursory checks (via IRasterBuilder.CanBuild) on data sources to identify candidate raster types and templates.'
##        #return pbTryQuickCheckOnly
##    def _set(self, pbTryQuickCheckOnly):
##        u'Indicates whether handler operations perform only cursory checks (via IRasterBuilder.CanBuild) on data sources to identify candidate raster types and templates.'
##    TryQuickCheckOnly = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The data source to be supplied to handler operations.'
##        #return pvtDataSource
##    def _set(self, pvtDataSource):
##        u'The data source to be supplied to handler operations.'
##    DataSource = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether ancillary dataset generated by complex raster type item templates are to be allowed by handler operations.'
##        #return pbAllowAncillaryDatasets
##    def _set(self, pbAllowAncillaryDatasets):
##        u'Indicates whether ancillary dataset generated by complex raster type item templates are to be allowed by handler operations.'
##    AllowAncillaryDatasets = property(_get, _set, doc = _set.__doc__)
##

class MapPoint(CoClass):
    u'Implements interface IMapPoint (a point in map space).'
    _reg_clsid_ = GUID('{30CC063F-CF45-402E-966B-E2FCB47EFDCA}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IMapPoint(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint):
    _case_insensitive_ = True
    u'A point in map space (easting, northing) or (longitude, latitude) with its associated uncertainty information.'
    _iid_ = GUID('{5F3A89C1-3ED5-4F56-BDF5-22008D23B143}')
    _idlflags_ = ['oleautomation']
MapPoint._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMapPoint]

class IColorspaceConversionFunctionArguments(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control colorspace conversion function arguments.'
    _iid_ = GUID('{30A52A27-CC15-4185-BFF7-58C7B3C99195}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'esriColorspaceConversionType'
esriColorspaceConversionRGBToHSV = 0
esriColorspaceConversionHSVToRGB = 1
esriColorspaceConversionType = c_int # enum
IColorspaceConversionFunctionArguments._methods_ = [
    COMMETHOD(['propget', helpstring(u'The source raster object.')], HRESULT, 'Raster',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppRaster' )),
    COMMETHOD(['propputref', helpstring(u'The source raster object.')], HRESULT, 'Raster',
              ( ['in'], POINTER(IUnknown), 'ppRaster' )),
    COMMETHOD(['propget', helpstring(u'The colorspace conversion type.')], HRESULT, 'ConversionType',
              ( ['retval', 'out'], POINTER(esriColorspaceConversionType), 'pConversionType' )),
    COMMETHOD(['propput', helpstring(u'The colorspace conversion type.')], HRESULT, 'ConversionType',
              ( ['in'], esriColorspaceConversionType, 'pConversionType' )),
]
################################################################
## code template for IColorspaceConversionFunctionArguments implementation
##class IColorspaceConversionFunctionArguments_Impl(object):
##    def Raster(self, ppRaster):
##        u'The source raster object.'
##        #return 
##
##    def _get(self):
##        u'The colorspace conversion type.'
##        #return pConversionType
##    def _set(self, pConversionType):
##        u'The colorspace conversion type.'
##    ConversionType = property(_get, _set, doc = _set.__doc__)
##

class BandArithmeticFunctionArguments(CoClass):
    u'A class for Band Arithmetic raster function arguments.'
    _reg_clsid_ = GUID('{6F19D624-24FE-4EAC-BF1F-A117928DE308}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IBandArithmeticFunctionArguments(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control Band Arithmetic function arguments.'
    _iid_ = GUID('{9F61EE8E-8B7F-43ED-B59A-3D866BDF3F10}')
    _idlflags_ = ['oleautomation']
BandArithmeticFunctionArguments._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunctionArguments, IRasterFunctionArguments2, IBandArithmeticFunctionArguments, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class RasterFunctionTemplateArguments(CoClass):
    u'A class for template function arguments.'
    _reg_clsid_ = GUID('{E7E9FA4F-FCC6-483D-9450-FF38B6A2C315}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
RasterFunctionTemplateArguments._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunctionArguments, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class RPCXform(CoClass):
    u'A Rational Polynomial Coefficient (RPC) transform class.'
    _reg_clsid_ = GUID('{7485F1C6-398F-465A-910E-50F69C6F6F79}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IRPCXform(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeodataXform):
    _case_insensitive_ = True
    u'Provides access to members that control a RPC transform.'
    _iid_ = GUID('{FBFC2EEA-2177-48E2-B79B-5451FB6FD123}')
    _idlflags_ = ['oleautomation']
class IRasterXform(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control raster specific geodata transform.'
    _iid_ = GUID('{45B14F29-01B8-489A-9F55-CD21EA84FD7F}')
    _idlflags_ = ['oleautomation']
RPCXform._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeodataXform, IGeodataXform2, IRPCXform, IRasterXform, ISensorXform, comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ITransformation, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersionSupportGEN, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class CachedRasterFunctionArguments(CoClass):
    u'The cached raster function arguments.'
    _reg_clsid_ = GUID('{4D463957-3B81-46BA-AA8C-4654DE7D94E5}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class ICachedRasterFunctionArguments(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control Band Arithmetic function arguments.'
    _iid_ = GUID('{3CCF7E76-79C5-4F18-B2E3-4B5E25D89912}')
    _idlflags_ = ['oleautomation']
CachedRasterFunctionArguments._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunctionArguments, ICachedRasterFunctionArguments, IRasterCacheArguments, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class FunctionRasterDataset(CoClass):
    u'A class for a function raster dataset.'
    _reg_clsid_ = GUID('{D0CC7770-AA1A-4FE3-BD82-1D8BB7B3781F}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IFunctionRasterDataset(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a function raster dataset.'
    _iid_ = GUID('{8ACCD1A4-1F81-42A8-AC88-B27564EB84DD}')
    _idlflags_ = ['oleautomation']
class IFunctionRasterDataset2(IFunctionRasterDataset):
    _case_insensitive_ = True
    u'Provides access to members that control a function raster dataset.'
    _iid_ = GUID('{07C65BF7-D69A-41F6-BFB4-D3C79C4AC50D}')
    _idlflags_ = ['oleautomation']
class IRasterBandCollection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a collection of RasterBands.'
    _iid_ = GUID('{7ACA3D10-0629-11D2-8D24-0000F8780535}')
    _idlflags_ = ['oleautomation']
class ITemporaryDataset(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control temporary datasets.'
    _iid_ = GUID('{C9E5B7D0-3758-11D4-A421-0004AC1B1D86}')
    _idlflags_ = ['oleautomation']
class IRasterDatasetContainer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control subdatasets.'
    _iid_ = GUID('{EFF39177-B690-40A3-BF51-59CEA71FD197}')
    _idlflags_ = ['oleautomation']
FunctionRasterDataset._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IFunctionRasterDataset, IFunctionRasterDataset2, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterDataset, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterDataset2, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterDataset3, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataset, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeoDataset, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeoDataset2, IRasterBandCollection, IItemPaths, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.INativeTypeInfo, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IMetadata, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IMetadataEdit, ITemporaryDataset, IRasterDatasetContainer, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

IMapPoint._methods_ = [
    COMMETHOD(['propget', helpstring(u'The image ID of this IMapPoint.')], HRESULT, 'ImageID',
              ( ['retval', 'out'], POINTER(BSTR), 'pImageID' )),
    COMMETHOD(['propput', helpstring(u'The image ID of this IMapPoint.')], HRESULT, 'ImageID',
              ( ['in'], BSTR, 'pImageID' )),
    COMMETHOD(['propget', helpstring(u'The identification string of this IMapPoint.')], HRESULT, 'MapPointID',
              ( ['retval', 'out'], POINTER(BSTR), 'pMapPointID' )),
    COMMETHOD(['propput', helpstring(u'The identification string of this IMapPoint.')], HRESULT, 'MapPointID',
              ( ['in'], BSTR, 'pMapPointID' )),
    COMMETHOD(['propget', helpstring(u'The pointing error covariance matrix that is associated with this IMapPoint.')], HRESULT, 'PointingErrorCovarianceMatrix',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray)), 'ppPointingErrCovMatrix' )),
    COMMETHOD(['propput', helpstring(u'The pointing error covariance matrix that is associated with this IMapPoint.')], HRESULT, 'PointingErrorCovarianceMatrix',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray), 'ppPointingErrCovMatrix' )),
]
################################################################
## code template for IMapPoint implementation
##class IMapPoint_Impl(object):
##    def _get(self):
##        u'The identification string of this IMapPoint.'
##        #return pMapPointID
##    def _set(self, pMapPointID):
##        u'The identification string of this IMapPoint.'
##    MapPointID = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The pointing error covariance matrix that is associated with this IMapPoint.'
##        #return ppPointingErrCovMatrix
##    def _set(self, ppPointingErrCovMatrix):
##        u'The pointing error covariance matrix that is associated with this IMapPoint.'
##    PointingErrorCovarianceMatrix = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The image ID of this IMapPoint.'
##        #return pImageID
##    def _set(self, pImageID):
##        u'The image ID of this IMapPoint.'
##    ImageID = property(_get, _set, doc = _set.__doc__)
##

class ISlopeScalingArguments(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control hillshade/slope function arguments.'
    _iid_ = GUID('{B2A1643A-41CD-4B9D-A568-6CA85B7E7031}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'esriSlopeType'
esriSlopeDegree = 1
esriSlopePercentRise = 2
esriSlopeScaled = 3
esriSlopeType = c_int # enum
ISlopeScalingArguments._methods_ = [
    COMMETHOD(['propget', helpstring(u'Pixel size power')], HRESULT, 'PixelSizePower',
              ( ['retval', 'out'], POINTER(c_double), 'psPower' )),
    COMMETHOD(['propput', helpstring(u'Pixel size power')], HRESULT, 'PixelSizePower',
              ( ['in'], c_double, 'psPower' )),
    COMMETHOD(['propget', helpstring(u'The Z scale factor that converts z value to a function of x and y.')], HRESULT, 'PixelSizeFactor',
              ( ['retval', 'out'], POINTER(c_double), 'psZFactor' )),
    COMMETHOD(['propput', helpstring(u'The Z scale factor that converts z value to a function of x and y.')], HRESULT, 'PixelSizeFactor',
              ( ['in'], c_double, 'psZFactor' )),
    COMMETHOD(['propget', helpstring(u'The output scaling method.')], HRESULT, 'ScalingType',
              ( ['retval', 'out'], POINTER(esriSlopeType), 'ScalingType' )),
    COMMETHOD(['propput', helpstring(u'The output scaling method.')], HRESULT, 'ScalingType',
              ( ['in'], esriSlopeType, 'ScalingType' )),
    COMMETHOD(['propget', helpstring(u'Flag to remove seams from multi resolution datasets.')], HRESULT, 'RemoveEdgeEffect',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pRemoveEdgeEffect' )),
    COMMETHOD(['propput', helpstring(u'Flag to remove seams from multi resolution datasets.')], HRESULT, 'RemoveEdgeEffect',
              ( ['in'], VARIANT_BOOL, 'pRemoveEdgeEffect' )),
]
################################################################
## code template for ISlopeScalingArguments implementation
##class ISlopeScalingArguments_Impl(object):
##    def _get(self):
##        u'Pixel size power'
##        #return psPower
##    def _set(self, psPower):
##        u'Pixel size power'
##    PixelSizePower = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The Z scale factor that converts z value to a function of x and y.'
##        #return psZFactor
##    def _set(self, psZFactor):
##        u'The Z scale factor that converts z value to a function of x and y.'
##    PixelSizeFactor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Flag to remove seams from multi resolution datasets.'
##        #return pRemoveEdgeEffect
##    def _set(self, pRemoveEdgeEffect):
##        u'Flag to remove seams from multi resolution datasets.'
##    RemoveEdgeEffect = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The output scaling method.'
##        #return ScalingType
##    def _set(self, ScalingType):
##        u'The output scaling method.'
##    ScalingType = property(_get, _set, doc = _set.__doc__)
##

class RasterItemFunction(CoClass):
    u'A class for a raster item function.'
    _reg_clsid_ = GUID('{31E67A19-ED23-4825-BF1E-6A7D7B0EF190}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
RasterItemFunction._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunction, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class ItemTemplateArray(CoClass):
    u'An array of item templates.'
    _reg_clsid_ = GUID('{1C88B823-C61B-4D18-B860-AD464DE7E77A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IItemTemplateArray(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control an item template array.'
    _iid_ = GUID('{261BE5CB-6940-4064-A07A-E3B826EB72F5}')
    _idlflags_ = ['oleautomation']
ItemTemplateArray._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IItemTemplateArray, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

IFunctionRasterDataset._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The name of this function raster dataset.')], HRESULT, 'FullName',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName), 'rhs' )),
    COMMETHOD([helpstring(u'Initializes this function raster dataset.')], HRESULT, 'Init',
              ( ['in'], POINTER(IRasterFunction), 'pFunction' ),
              ( ['in'], POINTER(IUnknown), 'pArguments' )),
    COMMETHOD(['propget', helpstring(u'The raster function.')], HRESULT, 'Function',
              ( ['retval', 'out'], POINTER(POINTER(IRasterFunction)), 'ppFunction' )),
    COMMETHOD(['propputref', helpstring(u'The raster function.')], HRESULT, 'Function',
              ( ['in'], POINTER(IRasterFunction), 'ppFunction' )),
    COMMETHOD(['propget', helpstring(u'The raster function arguments.')], HRESULT, 'Arguments',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppArguments' )),
    COMMETHOD(['propputref', helpstring(u'The raster function arguments.')], HRESULT, 'Arguments',
              ( ['in'], POINTER(IUnknown), 'ppArguments' )),
    COMMETHOD(['propget', helpstring(u'The function raster dataset proprties.')], HRESULT, 'Properties',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet)), 'ppProperties' )),
    COMMETHOD(['propputref', helpstring(u'The function raster dataset proprties.')], HRESULT, 'Properties',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet), 'ppProperties' )),
    COMMETHOD(['propget', helpstring(u'The raster information.')], HRESULT, 'RasterInfo',
              ( ['retval', 'out'], POINTER(POINTER(IRasterInfo)), 'ppRasterInfo' )),
    COMMETHOD([helpstring(u'Saves any changes made to this dataset.')], HRESULT, 'AlterDefinition'),
    COMMETHOD(['propget', helpstring(u'The constituent raster datasets in this function raster dataset.')], HRESULT, 'MemberRasterDatasets',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'ppRasterDatasets' )),
    COMMETHOD(['propget', helpstring(u'The constituent datasets names referenced by this function raster dataset.')], HRESULT, 'MemberDatasetNames',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'ppDatasetNames' )),
    COMMETHOD([helpstring(u'Finds raster functions in this dataset that match the given function CLSID.')], HRESULT, 'FindMemberFunctionsByCLSID',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IUID), 'rasterFunctionCLSID' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'ppMatchingRasterFunctions' )),
    COMMETHOD([helpstring(u'Finds raster functions in this dataset that match the given function name.')], HRESULT, 'FindMemberFunctionsByName',
              ( ['in'], BSTR, 'rasterFunctionName' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'ppMatchingRasterFunctions' )),
    COMMETHOD([helpstring(u'Finds raster function arguments in this dataset that match the given function arguments CLSID.')], HRESULT, 'FindMemberFunctionsArgumentsByCLSID',
              ( [], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IUID), 'functionArgumentsCLSID' ),
              ( [], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'ppMatchingFunctionArguments' )),
    COMMETHOD([helpstring(u'Simplifies the function raster dataset by removing redundant raster functions.')], HRESULT, 'Simplify'),
]
################################################################
## code template for IFunctionRasterDataset implementation
##class IFunctionRasterDataset_Impl(object):
##    def Function(self, ppFunction):
##        u'The raster function.'
##        #return 
##
##    def Simplify(self):
##        u'Simplifies the function raster dataset by removing redundant raster functions.'
##        #return 
##
##    def FindMemberFunctionsByCLSID(self, rasterFunctionCLSID):
##        u'Finds raster functions in this dataset that match the given function CLSID.'
##        #return ppMatchingRasterFunctions
##
##    def AlterDefinition(self):
##        u'Saves any changes made to this dataset.'
##        #return 
##
##    @property
##    def RasterInfo(self):
##        u'The raster information.'
##        #return ppRasterInfo
##
##    def FindMemberFunctionsByName(self, rasterFunctionName):
##        u'Finds raster functions in this dataset that match the given function name.'
##        #return ppMatchingRasterFunctions
##
##    def Init(self, pFunction, pArguments):
##        u'Initializes this function raster dataset.'
##        #return 
##
##    def Arguments(self, ppArguments):
##        u'The raster function arguments.'
##        #return 
##
##    @property
##    def MemberRasterDatasets(self):
##        u'The constituent raster datasets in this function raster dataset.'
##        #return ppRasterDatasets
##
##    @property
##    def MemberDatasetNames(self):
##        u'The constituent datasets names referenced by this function raster dataset.'
##        #return ppDatasetNames
##
##    def FullName(self, rhs):
##        u'The name of this function raster dataset.'
##        #return 
##
##    def FindMemberFunctionsArgumentsByCLSID(self, functionArgumentsCLSID, ppMatchingFunctionArguments):
##        u'Finds raster function arguments in this dataset that match the given function arguments CLSID.'
##        #return 
##
##    def Properties(self, ppProperties):
##        u'The function raster dataset proprties.'
##        #return 
##

class IRasterTransaction(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that provide undo support.'
    _iid_ = GUID('{3BE922F3-6934-40A5-A82E-C368CB13995B}')
    _idlflags_ = ['oleautomation']
IRasterTransaction._methods_ = [
    COMMETHOD(['propput', helpstring(u'Maximum number of reversible operations.')], HRESULT, 'UndoLevels',
              ( ['in'], c_int, 'num_undo' )),
    COMMETHOD([helpstring(u'Sends all pending changes to persistent storage.')], HRESULT, 'Commit'),
    COMMETHOD([helpstring(u'Starts double buffering edits for undo support.')], HRESULT, 'Start'),
    COMMETHOD([helpstring(u'Commits changes and stops double buffering.')], HRESULT, 'End'),
    COMMETHOD([helpstring(u'Reverses last N changes.')], HRESULT, 'Undo',
              ( ['in'], c_int, 'N' ),
              ( ['retval', 'out'], POINTER(c_int), 'pending' )),
    COMMETHOD(['propget', helpstring(u'Maximum number of reversible operations.')], HRESULT, 'UndoLevels',
              ( ['retval', 'out'], POINTER(c_int), 'num_undo' )),
]
################################################################
## code template for IRasterTransaction implementation
##class IRasterTransaction_Impl(object):
##    def Commit(self):
##        u'Sends all pending changes to persistent storage.'
##        #return 
##
##    def End(self):
##        u'Commits changes and stops double buffering.'
##        #return 
##
##    def _get(self):
##        u'Maximum number of reversible operations.'
##        #return num_undo
##    def _set(self, num_undo):
##        u'Maximum number of reversible operations.'
##    UndoLevels = property(_get, _set, doc = _set.__doc__)
##
##    def Undo(self, N):
##        u'Reverses last N changes.'
##        #return pending
##
##    def Start(self):
##        u'Starts double buffering edits for undo support.'
##        #return 
##


# values for enumeration 'esriDisplayCoordUnitType'
esriDisplayCUTypeUnknown = -1
esriDCUTypeDecimalDegrees = 0
esriDCUTypeDegreesDecimalMinutes = 1
esriDCUTypeDegreesMinutesSeconds = 2
esriDCUTypeMGRS = 3
esriDCUTypeUSNationalGrid = 4
esriDCUTypeUTM = 5
esriDisplayCoordUnitType = c_int # enum
class ISynchronizeParameters(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control parameters for synchronizing items in a mosaic dataset.'
    _iid_ = GUID('{241B22C3-75EF-468B-A4A3-758FD9DA08DF}')
    _idlflags_ = ['oleautomation']
class ISynchronizeParameters2(ISynchronizeParameters):
    _case_insensitive_ = True
    u'Provides access to members that control parameters for synchronizing items in a mosaic dataset.'
    _iid_ = GUID('{A1234642-E293-419A-B650-6CA72C69D9D7}')
    _idlflags_ = ['oleautomation']
class IRasterThumbnailBuilder(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a raster thumbnail builder.'
    _iid_ = GUID('{8AF44654-44C9-4CFA-9A27-C04A61D1E6CE}')
    _idlflags_ = ['oleautomation']
ISynchronizeParameters._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The default spatial reference used by all raster types for those dataset which do not have an associated native spatial reference.')], HRESULT, 'DefaultSpatialReference',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'ppDefaultSrs' )),
    COMMETHOD(['propget', helpstring(u'The default spatial reference used by all raster types for those dataset which do not have an associated native spatial reference.')], HRESULT, 'DefaultSpatialReference',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference)), 'ppDefaultSrs' )),
    COMMETHOD(['propput', helpstring(u'Indicates if only those items found to be stale are synchronized.')], HRESULT, 'SyncOnlyStaleItems',
              ( ['in'], VARIANT_BOOL, 'pbSyncOnlyStaleItems' )),
    COMMETHOD(['propget', helpstring(u'Indicates if only those items found to be stale are synchronized.')], HRESULT, 'SyncOnlyStaleItems',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbSyncOnlyStaleItems' )),
    COMMETHOD(['propput', helpstring(u"Indicates whether items with category set to 'Incomplete' or items that cannot be rebuilt using their corresponding data sources are removed from the mosaic dataset.")], HRESULT, 'RemoveInvalidItems',
              ( ['in'], VARIANT_BOOL, 'pbRemoveInvalidItems' )),
    COMMETHOD(['propget', helpstring(u"Indicates whether items with category set to 'Incomplete' or items that cannot be rebuilt using their corresponding data sources are removed from the mosaic dataset.")], HRESULT, 'RemoveInvalidItems',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbRemoveInvalidItems' )),
    COMMETHOD(['propput', helpstring(u'The maximum number of pyramid levels to use from the function raster dataset associated with a synchronized item. A value of -1 indicates all available levels.')], HRESULT, 'MaximumPyramidLevel',
              ( ['in'], c_int, 'pMaximumPyramidLevel' )),
    COMMETHOD(['propget', helpstring(u'The maximum number of pyramid levels to use from the function raster dataset associated with a synchronized item. A value of -1 indicates all available levels.')], HRESULT, 'MaximumPyramidLevel',
              ( ['retval', 'out'], POINTER(c_int), 'pMaximumPyramidLevel' )),
    COMMETHOD(['propput', helpstring(u'The minimum number of pixel rows allowed at the top-most pyramid level in the function raster dataset associated with a synchronized item. Higher values in this property indicate fewer pyramid levels. A value of zero indicates an absence of any constraints on ?!?\x08?&')], HRESULT, 'MinimumRows',
              ( ['in'], c_int, 'pMinimumRows' )),
    COMMETHOD(['propget', helpstring(u'The minimum number of pixel rows allowed at the top-most pyramid level in the function raster dataset associated with a synchronized item. Higher values in this property indicate fewer pyramid levels. A value of zero indicates an absence of any constraints on ?!?\x08?&')], HRESULT, 'MinimumRows',
              ( ['retval', 'out'], POINTER(c_int), 'pMinimumRows' )),
    COMMETHOD(['propput', helpstring(u'The minimum number of pixel columnns allowed at the top-most pyramid level in the function raster dataset associated with a synchronized item. Higher values in this property indicate fewer pyramid levels. A value of zero indicates an absence of any constraints?!?\x08?&')], HRESULT, 'MinimumColumns',
              ( ['in'], c_int, 'pMinimumColumns' )),
    COMMETHOD(['propget', helpstring(u'The minimum number of pixel columnns allowed at the top-most pyramid level in the function raster dataset associated with a synchronized item. Higher values in this property indicate fewer pyramid levels. A value of zero indicates an absence of any constraints?!?\x08?&')], HRESULT, 'MinimumColumns',
              ( ['retval', 'out'], POINTER(c_int), 'pMinimumColumns' )),
    COMMETHOD(['propput', helpstring(u'The maximum allowed computed value for the high pixel size for the function raster dataset associated with a synchronized item. Lower values in this property indicate fewer pyramid levels. A value of zero indicates an absence of any constraints on the resultin?!?\x08?&')], HRESULT, 'MaximumHighCellSize',
              ( ['in'], c_double, 'pMaximumHighCellSize' )),
    COMMETHOD(['propget', helpstring(u'The maximum allowed computed value for the high pixel size for the function raster dataset associated with a synchronized item. Lower values in this property indicate fewer pyramid levels. A value of zero indicates an absence of any constraints on the resultin?!?\x08?&')], HRESULT, 'MaximumHighCellSize',
              ( ['retval', 'out'], POINTER(c_double), 'pMaximumHighCellSize' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether histogram statistics are computed for each raster dataset associated with each selected catalog item.')], HRESULT, 'ComputeStatistics',
              ( ['in'], VARIANT_BOOL, 'pbComputeStatistics' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether histogram statistics are computed for each raster dataset associated with each selected catalog item.')], HRESULT, 'ComputeStatistics',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbComputeStatistics' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether pyramids are built for each raster dataset associated with each selected catalog item.')], HRESULT, 'BuildPyramids',
              ( ['in'], VARIANT_BOOL, 'pbBuildPyramids' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether pyramids are built for each raster dataset associated with each selected catalog item.')], HRESULT, 'BuildPyramids',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbBuildPyramids' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether items thumbnails are built and saved.')], HRESULT, 'BuildThumbnail',
              ( ['in'], VARIANT_BOOL, 'pbBuildThumbnail' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether items thumbnails are built and saved.')], HRESULT, 'BuildThumbnail',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbBuildThumbnail' )),
    COMMETHOD(['propputref', helpstring(u'The thumbnail builder object associated with this operation. If not specified, a default builder is used for generating item thumbnails.')], HRESULT, 'ThumbnailBuilder',
              ( ['in'], POINTER(IRasterThumbnailBuilder), 'ppThumbnailBuilder' )),
    COMMETHOD(['propget', helpstring(u'The thumbnail builder object associated with this operation. If not specified, a default builder is used for generating item thumbnails.')], HRESULT, 'ThumbnailBuilder',
              ( ['retval', 'out'], POINTER(POINTER(IRasterThumbnailBuilder)), 'ppThumbnailBuilder' )),
    COMMETHOD(['propput', helpstring(u"The maximum segment length value as a factor of each incoming dataset fooprint's average dimension. Footprint polygon is densified only if the spatial reference of the footprint geometry differs form the spatial reference of the geometry column of the mosaic c?!?\x08?&")], HRESULT, 'DensificationFactor',
              ( ['in'], c_double, 'pDensificationFactor' )),
    COMMETHOD(['propget', helpstring(u"The maximum segment length value as a factor of each incoming dataset fooprint's average dimension. Footprint polygon is densified only if the spatial reference of the footprint geometry differs form the spatial reference of the geometry column of the mosaic c?!?\x08?&")], HRESULT, 'DensificationFactor',
              ( ['retval', 'out'], POINTER(c_double), 'pDensificationFactor' )),
    COMMETHOD(['propput', helpstring(u"Indicates whether each selected item's visibility values (MinPS and MaxPS) are reset to null.")], HRESULT, 'ResetVisibility',
              ( ['in'], VARIANT_BOOL, 'pbResetVisibility' )),
    COMMETHOD(['propget', helpstring(u"Indicates whether each selected item's visibility values (MinPS and MaxPS) are reset to null.")], HRESULT, 'ResetVisibility',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbResetVisibility' )),
]
################################################################
## code template for ISynchronizeParameters implementation
##class ISynchronizeParameters_Impl(object):
##    def _get(self):
##        u'Indicates whether pyramids are built for each raster dataset associated with each selected catalog item.'
##        #return pbBuildPyramids
##    def _set(self, pbBuildPyramids):
##        u'Indicates whether pyramids are built for each raster dataset associated with each selected catalog item.'
##    BuildPyramids = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u"Indicates whether each selected item's visibility values (MinPS and MaxPS) are reset to null."
##        #return pbResetVisibility
##    def _set(self, pbResetVisibility):
##        u"Indicates whether each selected item's visibility values (MinPS and MaxPS) are reset to null."
##    ResetVisibility = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether items thumbnails are built and saved.'
##        #return pbBuildThumbnail
##    def _set(self, pbBuildThumbnail):
##        u'Indicates whether items thumbnails are built and saved.'
##    BuildThumbnail = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The maximum number of pyramid levels to use from the function raster dataset associated with a synchronized item. A value of -1 indicates all available levels.'
##        #return pMaximumPyramidLevel
##    def _set(self, pMaximumPyramidLevel):
##        u'The maximum number of pyramid levels to use from the function raster dataset associated with a synchronized item. A value of -1 indicates all available levels.'
##    MaximumPyramidLevel = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if only those items found to be stale are synchronized.'
##        #return pbSyncOnlyStaleItems
##    def _set(self, pbSyncOnlyStaleItems):
##        u'Indicates if only those items found to be stale are synchronized.'
##    SyncOnlyStaleItems = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The maximum allowed computed value for the high pixel size for the function raster dataset associated with a synchronized item. Lower values in this property indicate fewer pyramid levels. A value of zero indicates an absence of any constraints on the resultin?!?\x08?&'
##        #return pMaximumHighCellSize
##    def _set(self, pMaximumHighCellSize):
##        u'The maximum allowed computed value for the high pixel size for the function raster dataset associated with a synchronized item. Lower values in this property indicate fewer pyramid levels. A value of zero indicates an absence of any constraints on the resultin?!?\x08?&'
##    MaximumHighCellSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u"The maximum segment length value as a factor of each incoming dataset fooprint's average dimension. Footprint polygon is densified only if the spatial reference of the footprint geometry differs form the spatial reference of the geometry column of the mosaic c?!?\x08?&"
##        #return pDensificationFactor
##    def _set(self, pDensificationFactor):
##        u"The maximum segment length value as a factor of each incoming dataset fooprint's average dimension. Footprint polygon is densified only if the spatial reference of the footprint geometry differs form the spatial reference of the geometry column of the mosaic c?!?\x08?&"
##    DensificationFactor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The minimum number of pixel rows allowed at the top-most pyramid level in the function raster dataset associated with a synchronized item. Higher values in this property indicate fewer pyramid levels. A value of zero indicates an absence of any constraints on ?!?\x08?&'
##        #return pMinimumRows
##    def _set(self, pMinimumRows):
##        u'The minimum number of pixel rows allowed at the top-most pyramid level in the function raster dataset associated with a synchronized item. Higher values in this property indicate fewer pyramid levels. A value of zero indicates an absence of any constraints on ?!?\x08?&'
##    MinimumRows = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The minimum number of pixel columnns allowed at the top-most pyramid level in the function raster dataset associated with a synchronized item. Higher values in this property indicate fewer pyramid levels. A value of zero indicates an absence of any constraints?!?\x08?&'
##        #return pMinimumColumns
##    def _set(self, pMinimumColumns):
##        u'The minimum number of pixel columnns allowed at the top-most pyramid level in the function raster dataset associated with a synchronized item. Higher values in this property indicate fewer pyramid levels. A value of zero indicates an absence of any constraints?!?\x08?&'
##    MinimumColumns = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u"Indicates whether items with category set to 'Incomplete' or items that cannot be rebuilt using their corresponding data sources are removed from the mosaic dataset."
##        #return pbRemoveInvalidItems
##    def _set(self, pbRemoveInvalidItems):
##        u"Indicates whether items with category set to 'Incomplete' or items that cannot be rebuilt using their corresponding data sources are removed from the mosaic dataset."
##    RemoveInvalidItems = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def DefaultSpatialReference(self, ppDefaultSrs):
##        u'The default spatial reference used by all raster types for those dataset which do not have an associated native spatial reference.'
##        #return 
##
##    @property
##    def ThumbnailBuilder(self, ppThumbnailBuilder):
##        u'The thumbnail builder object associated with this operation. If not specified, a default builder is used for generating item thumbnails.'
##        #return 
##
##    def _get(self):
##        u'Indicates whether histogram statistics are computed for each raster dataset associated with each selected catalog item.'
##        #return pbComputeStatistics
##    def _set(self, pbComputeStatistics):
##        u'Indicates whether histogram statistics are computed for each raster dataset associated with each selected catalog item.'
##    ComputeStatistics = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'esriGeodataXformApplyMethod'
esriGeodataXformApplyAppend = 0
esriGeodataXformApplyReplace = 1
esriGeodataXformApplyOverwrite = 2
esriGeodataXformApplyMethod = c_int # enum
ISynchronizeParameters2._methods_ = [
    COMMETHOD(['propputref', helpstring(u'A field value property set that maps field names to possible metadata values. These values take precedence over the metadata from the dataset.')], HRESULT, 'AuxiliaryFieldValues',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet), 'ppFieldValues' )),
    COMMETHOD(['propget', helpstring(u'A field value property set that maps field names to possible metadata values. These values take precedence over the metadata from the dataset.')], HRESULT, 'AuxiliaryFieldValues',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet)), 'ppFieldValues' )),
    COMMETHOD(['propget', helpstring(u'The minimum visible pixel size factor.')], HRESULT, 'MinimumCellSizeFactor',
              ( ['retval', 'out'], POINTER(c_double), 'pMinCellSizeFactor' )),
    COMMETHOD(['propput', helpstring(u'The minimum visible pixel size factor.')], HRESULT, 'MinimumCellSizeFactor',
              ( ['in'], c_double, 'pMinCellSizeFactor' )),
    COMMETHOD(['propget', helpstring(u'The maximum visible pixel size factor.')], HRESULT, 'MaximumCellSizeFactor',
              ( ['retval', 'out'], POINTER(c_double), 'pMaxCellSizeFactor' )),
    COMMETHOD(['propput', helpstring(u'The maximum visible pixel size factor.')], HRESULT, 'MaximumCellSizeFactor',
              ( ['in'], c_double, 'pMaxCellSizeFactor' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the original datasource added to the mosaic dataset will be rebuilt in order to update the metadata fields.')], HRESULT, 'RebuildDataSource',
              ( ['in'], VARIANT_BOOL, 'pbRebuildDataSource' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the original datasource added to the mosaic dataset will be rebuilt in order to update the metadata fields.')], HRESULT, 'RebuildDataSource',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbRebuildDataSource' )),
    COMMETHOD(['propputref', helpstring(u'The collection of field names that are excluded from being updated during synchronization.')], HRESULT, 'ExcludedFields',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray), 'ppExcludedFields' )),
    COMMETHOD(['propget', helpstring(u'The collection of field names that are excluded from being updated during synchronization.')], HRESULT, 'ExcludedFields',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray)), 'ppExcludedFields' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether an attempt is made to refresh the cache of the selected mosaic dataset items.')], HRESULT, 'RefreshCache',
              ( ['in'], VARIANT_BOOL, 'pbRefreshCache' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether an attempt is made to refresh the cache of the selected mosaic dataset items.')], HRESULT, 'RefreshCache',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbRefreshCache' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether an attempt is made to define cache of the selected mosaic dataset items.')], HRESULT, 'DefineCache',
              ( ['in'], VARIANT_BOOL, 'pbDefineCache' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether an attempt is made to define cache of the selected mosaic dataset items.')], HRESULT, 'DefineCache',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbDefineCache' )),
    COMMETHOD(['propget', helpstring(u'The parameters used for defining cache of the selected mosaic dataset items.')], HRESULT, 'CacheParameters',
              ( ['retval', 'out'], POINTER(POINTER(ICachedRasterFunctionArguments)), 'ppParameters' )),
    COMMETHOD(['propputref', helpstring(u'The parameters used for defining cache of the selected mosaic dataset items.')], HRESULT, 'CacheParameters',
              ( ['in'], POINTER(ICachedRasterFunctionArguments), 'ppParameters' )),
    COMMETHOD(['propget', helpstring(u'The georefencing of the raster item.')], HRESULT, 'GeodataXform',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeodataXform)), 'ppXf' )),
    COMMETHOD(['propputref', helpstring(u'The georefencing of the raster item.')], HRESULT, 'GeodataXform',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeodataXform), 'ppXf' )),
    COMMETHOD(['propget', helpstring(u'The method used for applying the GeodataXform.')], HRESULT, 'GeodataXformApplyMethod',
              ( ['retval', 'out'], POINTER(esriGeodataXformApplyMethod), 'pMethod' )),
    COMMETHOD(['propput', helpstring(u'The method used for applying the GeodataXform.')], HRESULT, 'GeodataXformApplyMethod',
              ( ['in'], esriGeodataXformApplyMethod, 'pMethod' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to overwrite the native spatial reference in a dataset with the one specified in the default spatial reference property.')], HRESULT, 'ForceDefaultSpatialReference',
              ( ['in'], VARIANT_BOOL, 'pbForceDefaultSpatialReference' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to overwrite the native spatial reference in a dataset with the one specified in the default spatial reference property.')], HRESULT, 'ForceDefaultSpatialReference',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbForceDefaultSpatialReference' )),
    COMMETHOD(['propput', helpstring(u"Indicates whether mosaic dataset items are updated as part of the synchronization operation. Setting this property to false would ensure that no item is updated regardless of whether it is rebuilt. This property can be used in conjunction with the 'RemoveInval?!?\x08?&")], HRESULT, 'UpdateExistingItems',
              ( ['in'], VARIANT_BOOL, 'pbUpdateExistingItems' )),
    COMMETHOD(['propget', helpstring(u"Indicates whether mosaic dataset items are updated as part of the synchronization operation. Setting this property to false would ensure that no item is updated regardless of whether it is rebuilt. This property can be used in conjunction with the 'RemoveInval?!?\x08?&")], HRESULT, 'UpdateExistingItems',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbUpdateExistingItems' )),
]
################################################################
## code template for ISynchronizeParameters2 implementation
##class ISynchronizeParameters2_Impl(object):
##    @property
##    def ExcludedFields(self, ppExcludedFields):
##        u'The collection of field names that are excluded from being updated during synchronization.'
##        #return 
##
##    def GeodataXform(self, ppXf):
##        u'The georefencing of the raster item.'
##        #return 
##
##    def _get(self):
##        u'Indicates whether an attempt is made to refresh the cache of the selected mosaic dataset items.'
##        #return pbRefreshCache
##    def _set(self, pbRefreshCache):
##        u'Indicates whether an attempt is made to refresh the cache of the selected mosaic dataset items.'
##    RefreshCache = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The minimum visible pixel size factor.'
##        #return pMinCellSizeFactor
##    def _set(self, pMinCellSizeFactor):
##        u'The minimum visible pixel size factor.'
##    MinimumCellSizeFactor = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def AuxiliaryFieldValues(self, ppFieldValues):
##        u'A field value property set that maps field names to possible metadata values. These values take precedence over the metadata from the dataset.'
##        #return 
##
##    def CacheParameters(self, ppParameters):
##        u'The parameters used for defining cache of the selected mosaic dataset items.'
##        #return 
##
##    def _get(self):
##        u"Indicates whether mosaic dataset items are updated as part of the synchronization operation. Setting this property to false would ensure that no item is updated regardless of whether it is rebuilt. This property can be used in conjunction with the 'RemoveInval?!?\x08?&"
##        #return pbUpdateExistingItems
##    def _set(self, pbUpdateExistingItems):
##        u"Indicates whether mosaic dataset items are updated as part of the synchronization operation. Setting this property to false would ensure that no item is updated regardless of whether it is rebuilt. This property can be used in conjunction with the 'RemoveInval?!?\x08?&"
##    UpdateExistingItems = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The method used for applying the GeodataXform.'
##        #return pMethod
##    def _set(self, pMethod):
##        u'The method used for applying the GeodataXform.'
##    GeodataXformApplyMethod = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether to overwrite the native spatial reference in a dataset with the one specified in the default spatial reference property.'
##        #return pbForceDefaultSpatialReference
##    def _set(self, pbForceDefaultSpatialReference):
##        u'Indicates whether to overwrite the native spatial reference in a dataset with the one specified in the default spatial reference property.'
##    ForceDefaultSpatialReference = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The maximum visible pixel size factor.'
##        #return pMaxCellSizeFactor
##    def _set(self, pMaxCellSizeFactor):
##        u'The maximum visible pixel size factor.'
##    MaximumCellSizeFactor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether an attempt is made to define cache of the selected mosaic dataset items.'
##        #return pbDefineCache
##    def _set(self, pbDefineCache):
##        u'Indicates whether an attempt is made to define cache of the selected mosaic dataset items.'
##    DefineCache = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether the original datasource added to the mosaic dataset will be rebuilt in order to update the metadata fields.'
##        #return pbRebuildDataSource
##    def _set(self, pbRebuildDataSource):
##        u'Indicates whether the original datasource added to the mosaic dataset will be rebuilt in order to update the metadata fields.'
##    RebuildDataSource = property(_get, _set, doc = _set.__doc__)
##

class ITiePoint(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control an image tie point.'
    _iid_ = GUID('{D022064B-B03A-43F2-9A38-0378E16D7258}')
    _idlflags_ = []
ITiePoint._methods_ = [
    COMMETHOD(['propget', helpstring(u'The tie point ID.')], HRESULT, 'PointID',
              ( ['retval', 'out'], POINTER(c_int), 'pPointID' )),
    COMMETHOD(['propput', helpstring(u'The tie point ID.')], HRESULT, 'PointID',
              ( ['in'], c_int, 'pPointID' )),
    COMMETHOD(['propget', helpstring(u"The tie point's image ID.")], HRESULT, 'ImageID',
              ( ['retval', 'out'], POINTER(c_int), 'pImageID' )),
    COMMETHOD(['propput', helpstring(u"The tie point's image ID.")], HRESULT, 'ImageID',
              ( ['in'], c_int, 'pImageID' )),
    COMMETHOD(['propget', helpstring(u'The tie point location.')], HRESULT, 'Location',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint)), 'ppLocation' )),
    COMMETHOD(['propputref', helpstring(u'The tie point location.')], HRESULT, 'Location',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'ppLocation' )),
    COMMETHOD(['propget', helpstring(u"The tie point's quality score.")], HRESULT, 'Score',
              ( ['retval', 'out'], POINTER(c_double), 'pScore' )),
    COMMETHOD(['propput', helpstring(u"The tie point's quality score.")], HRESULT, 'Score',
              ( ['in'], c_double, 'pScore' )),
    COMMETHOD([helpstring(u'Checks if it equals another tie point.')], HRESULT, 'Equals',
              ( ['in'], POINTER(ITiePoint), 'pTiePoint' )),
]
################################################################
## code template for ITiePoint implementation
##class ITiePoint_Impl(object):
##    def Equals(self, pTiePoint):
##        u'Checks if it equals another tie point.'
##        #return 
##
##    def _get(self):
##        u"The tie point's quality score."
##        #return pScore
##    def _set(self, pScore):
##        u"The tie point's quality score."
##    Score = property(_get, _set, doc = _set.__doc__)
##
##    def Location(self, ppLocation):
##        u'The tie point location.'
##        #return 
##
##    def _get(self):
##        u'The tie point ID.'
##        #return pPointID
##    def _set(self, pPointID):
##        u'The tie point ID.'
##    PointID = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u"The tie point's image ID."
##        #return pImageID
##    def _set(self, pImageID):
##        u"The tie point's image ID."
##    ImageID = property(_get, _set, doc = _set.__doc__)
##

class MultiPartItemURI(CoClass):
    u'A multi-part item URI object.'
    _reg_clsid_ = GUID('{105A7798-3C02-4E2F-B543-F4B3098ACE4E}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IMultiPartItemURI(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a multi-part item URI'
    _iid_ = GUID('{BE8282F6-A3B2-4B38-AD61-54444BC1809F}')
    _idlflags_ = ['oleautomation']
MultiPartItemURI._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IItemURI, IItemURI2, IItemPaths, IMultiPartItemURI]

class GCSShiftXform(CoClass):
    u'A GCS shift geodata transform class.'
    _reg_clsid_ = GUID('{CF32BE9A-58C6-4F36-AC65-9263FCFEDE88}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
GCSShiftXform._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGCSShiftXform, comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ITransformation, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersionSupportGEN, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class IReplacePathsParameters(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control parameters to replace paths.'
    _iid_ = GUID('{D9179EDC-C88A-4B6F-818F-F53D83A05519}')
    _idlflags_ = ['oleautomation']
IReplacePathsParameters._methods_ = [
    COMMETHOD(['propput', helpstring(u'Indicates whether paths in mosaic dataset level objects are replaced.')], HRESULT, 'ReplaceMosaicDatasetPaths',
              ( ['in'], VARIANT_BOOL, 'pbReplaceMosaicPaths' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether paths in mosaic dataset level objects are replaced.')], HRESULT, 'ReplaceMosaicDatasetPaths',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbReplaceMosaicPaths' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether paths in selected mosaic catalog items are replaced.')], HRESULT, 'ReplaceCatalogItemPaths',
              ( ['in'], VARIANT_BOOL, 'pbReplaceCatalogPaths' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether paths in selected mosaic catalog items are replaced.')], HRESULT, 'ReplaceCatalogItemPaths',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbReplaceCatalogPaths' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether paths in item URIs are replaced.')], HRESULT, 'ReplaceItemURIPaths',
              ( ['in'], VARIANT_BOOL, 'pbReplaceURIPaths' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether paths in item URIs are replaced.')], HRESULT, 'ReplaceItemURIPaths',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbReplaceURIPaths' )),
    COMMETHOD(['propputref', helpstring(u'The array of source paths to be replaced.')], HRESULT, 'OldPaths',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray), 'ppPaths' )),
    COMMETHOD(['propget', helpstring(u'The array of source paths to be replaced.')], HRESULT, 'OldPaths',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray)), 'ppPaths' )),
    COMMETHOD(['propputref', helpstring(u'The array of possible target paths that each item is replaced with.')], HRESULT, 'NewPaths',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray), 'ppPaths' )),
    COMMETHOD(['propget', helpstring(u'The array of possible target paths that each item is replaced with.')], HRESULT, 'NewPaths',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray)), 'ppPaths' )),
]
################################################################
## code template for IReplacePathsParameters implementation
##class IReplacePathsParameters_Impl(object):
##    def _get(self):
##        u'Indicates whether paths in item URIs are replaced.'
##        #return pbReplaceURIPaths
##    def _set(self, pbReplaceURIPaths):
##        u'Indicates whether paths in item URIs are replaced.'
##    ReplaceItemURIPaths = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether paths in selected mosaic catalog items are replaced.'
##        #return pbReplaceCatalogPaths
##    def _set(self, pbReplaceCatalogPaths):
##        u'Indicates whether paths in selected mosaic catalog items are replaced.'
##    ReplaceCatalogItemPaths = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether paths in mosaic dataset level objects are replaced.'
##        #return pbReplaceMosaicPaths
##    def _set(self, pbReplaceMosaicPaths):
##        u'Indicates whether paths in mosaic dataset level objects are replaced.'
##    ReplaceMosaicDatasetPaths = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def NewPaths(self, ppPaths):
##        u'The array of possible target paths that each item is replaced with.'
##        #return 
##
##    @property
##    def OldPaths(self, ppPaths):
##        u'The array of source paths to be replaced.'
##        #return 
##

class ApproximationXform(CoClass):
    u'A transformation that approximates other transformations.'
    _reg_clsid_ = GUID('{C072EAE6-F85D-470F-ABB5-7CAD9657D16A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IApproximationXform(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeodataXform):
    _case_insensitive_ = True
    u'Provides access to members that control transformation approximation.'
    _iid_ = GUID('{59B8596F-2C6A-4DFD-BB63-D413B4703851}')
    _idlflags_ = ['oleautomation']
ApproximationXform._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeodataXform, IGeodataXform2, IApproximationXform, IRasterXform, ISensorXform, IGeodataXformApproximation, comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ITransformation, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersionSupportGEN, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class ItemPathsOptions(CoClass):
    u'Parameters that indicate path query and replacement options.'
    _reg_clsid_ = GUID('{21A197DB-67E1-4F40-88C4-FB8518F9EF6F}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IItemPathsOptions(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control item paths options.'
    _iid_ = GUID('{03AB09FC-CC80-4F8B-B09C-E0AC241E5912}')
    _idlflags_ = ['oleautomation']
ItemPathsOptions._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IItemPathsOptions, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersionSupportGEN]

class ICSMXform(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeodataXform):
    _case_insensitive_ = True
    u'Provides access to members and transformation employing the Community Sensor Model (CSM).'
    _iid_ = GUID('{DF60C06E-DA9F-4B13-9A9A-35701D9E5B75}')
    _idlflags_ = ['oleautomation']
ICSMXform._methods_ = [
    COMMETHOD([helpstring(u'Gets a property value of the sensor model currently being used by this ICSMXform.')], HRESULT, 'GetSensorModelProperty',
              ( ['in'], BSTR, 'propertyName' ),
              ( ['retval', 'out'], POINTER(VARIANT), 'pPropertyValue' )),
    COMMETHOD(['propget', helpstring(u'Fully qualified (NITF) file name of this ICSMXform.')], HRESULT, 'ImageFile',
              ( ['retval', 'out'], POINTER(BSTR), 'pNITFImageFile' )),
    COMMETHOD(['propput', helpstring(u'Fully qualified (NITF) file name of this ICSMXform.')], HRESULT, 'ImageFile',
              ( ['in'], BSTR, 'pNITFImageFile' )),
    COMMETHOD(['propget', helpstring(u'Precision value to be used for iterative processes.')], HRESULT, 'IterPrecision',
              ( ['retval', 'out'], POINTER(c_double), 'pPrecision' )),
    COMMETHOD(['propput', helpstring(u'Precision value to be used for iterative processes.')], HRESULT, 'IterPrecision',
              ( ['in'], c_double, 'pPrecision' )),
    COMMETHOD([helpstring(u'Sets a property value of the sensor model.')], HRESULT, 'PutSensorModelProperty',
              ( ['in'], BSTR, 'propertyKey' ),
              ( ['in'], BSTR, 'propertyValue' )),
]
################################################################
## code template for ICSMXform implementation
##class ICSMXform_Impl(object):
##    def _get(self):
##        u'Fully qualified (NITF) file name of this ICSMXform.'
##        #return pNITFImageFile
##    def _set(self, pNITFImageFile):
##        u'Fully qualified (NITF) file name of this ICSMXform.'
##    ImageFile = property(_get, _set, doc = _set.__doc__)
##
##    def PutSensorModelProperty(self, propertyKey, propertyValue):
##        u'Sets a property value of the sensor model.'
##        #return 
##
##    def _get(self):
##        u'Precision value to be used for iterative processes.'
##        #return pPrecision
##    def _set(self, pPrecision):
##        u'Precision value to be used for iterative processes.'
##    IterPrecision = property(_get, _set, doc = _set.__doc__)
##
##    def GetSensorModelProperty(self, propertyName):
##        u'Gets a property value of the sensor model currently being used by this ICSMXform.'
##        #return pPropertyValue
##

class DEWCSCoverageType(CoClass):
    u'WCS Coverage Object Data Element object Type.'
    _reg_clsid_ = GUID('{7D78E744-3499-4124-BD1B-369965EE500C}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IDEWCSCoverageType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the WCS Coverage Data Element Type.'
    _iid_ = GUID('{C1BFA658-6F83-40D6-B4A3-9A43D75A8073}')
    _idlflags_ = ['oleautomation']
DEWCSCoverageType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDEWCSCoverageType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDEServerObjectType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGxFilterInfo, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataElementType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class IRenderedRasterFunctionArguments(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control rendered raster function arguments.'
    _iid_ = GUID('{D705A977-BD3C-4041-82B4-DA006BC29CD1}')
    _idlflags_ = ['oleautomation']
IRenderedRasterFunctionArguments._methods_ = [
    COMMETHOD(['propget', helpstring(u'The input raster.')], HRESULT, 'Raster',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppRaster' )),
    COMMETHOD(['propputref', helpstring(u'The input raster.')], HRESULT, 'Raster',
              ( ['in'], POINTER(IUnknown), 'ppRaster' )),
    COMMETHOD(['propget', helpstring(u'The input raster renderer.')], HRESULT, 'RasterRenderer',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppRasterRenderer' )),
    COMMETHOD(['propputref', helpstring(u'The input raster renderer.')], HRESULT, 'RasterRenderer',
              ( ['in'], POINTER(IUnknown), 'ppRasterRenderer' )),
]
################################################################
## code template for IRenderedRasterFunctionArguments implementation
##class IRenderedRasterFunctionArguments_Impl(object):
##    def Raster(self, ppRaster):
##        u'The input raster.'
##        #return 
##
##    def RasterRenderer(self, ppRasterRenderer):
##        u'The input raster renderer.'
##        #return 
##

class FileCrawler(CoClass):
    u'A crawler for files that reside on the file-system.'
    _reg_clsid_ = GUID('{1B13F960-8914-4440-A2D5-08B1B16C916D}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
FileCrawler._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDataSourceCrawler, IFileCrawler, IFileCrawler2, IItemPaths]

class FootprintFunctionArguments(CoClass):
    u'The arguments for the Footprint raster function.'
    _reg_clsid_ = GUID('{80FF48A6-E886-4F70-8022-ABF1B9275D31}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IFootprintFunctionArguments(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control Footprint function arguments.'
    _iid_ = GUID('{8CECE0C4-30F2-479B-97F0-3C0AFB10FBE5}')
    _idlflags_ = ['oleautomation']
FootprintFunctionArguments._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunctionArguments, IFootprintFunctionArguments, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class CachedRasterFunction(CoClass):
    u'The cached raster function for caching function raster datasets.'
    _reg_clsid_ = GUID('{ACA03769-2D4E-484D-8E14-1BC4ACB17A59}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IRasterFunction2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a raster function.'
    _iid_ = GUID('{CB7476D9-8621-4A5E-A693-ADBA10F25308}')
    _idlflags_ = ['oleautomation']
CachedRasterFunction._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunction, IRasterFunction2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, IRasterKeyProperties]

class ExcludedAreaFunction(CoClass):
    u'The raster function for generating excluded area.'
    _reg_clsid_ = GUID('{FC9A46CE-E198-48DB-AEC2-08486D19E605}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
ExcludedAreaFunction._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunction, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class RasterInfos(CoClass):
    u'An array of RasterInfo objects.'
    _reg_clsid_ = GUID('{F01B2CC6-A685-456D-B23F-909596DFD9A2}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
RasterInfos._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterInfos, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist]

class MergeRastersFunction(CoClass):
    u'The Tiled Raster function.'
    _reg_clsid_ = GUID('{96E60D70-6BF9-4486-B9ED-C41181259F71}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
MergeRastersFunction._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunction, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class ICoordinateXform(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeodataXform):
    _case_insensitive_ = True
    u'Provides access to members that control a coordinate (projection) transform.'
    _iid_ = GUID('{64F70678-9CC7-48DB-ACD1-FAA7E9E8E5C7}')
    _idlflags_ = ['oleautomation']
class ICoordinateXform2(ICoordinateXform):
    _case_insensitive_ = True
    u'Provides access to members that control a coordinate (projection) transform.'
    _iid_ = GUID('{71ABCACF-B2AC-4074-A99B-F6AE0264F293}')
    _idlflags_ = ['oleautomation']
ICoordinateXform._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The geographic transformations.')], HRESULT, 'GeoTransformations',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeoTransformationOperationSet), 'ppGeoXforms' )),
    COMMETHOD(['propget', helpstring(u'The geographic transformations.')], HRESULT, 'GeoTransformations',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeoTransformationOperationSet)), 'ppGeoXforms' )),
]
################################################################
## code template for ICoordinateXform implementation
##class ICoordinateXform_Impl(object):
##    @property
##    def GeoTransformations(self, ppGeoXforms):
##        u'The geographic transformations.'
##        #return 
##

ICoordinateXform2._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The source spatial reference.')], HRESULT, 'InputSpatialReference',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'ppSpatialRefence' )),
    COMMETHOD(['propget', helpstring(u'The source spatial reference.')], HRESULT, 'InputSpatialReference',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference)), 'ppSpatialRefence' )),
]
################################################################
## code template for ICoordinateXform2 implementation
##class ICoordinateXform2_Impl(object):
##    @property
##    def InputSpatialReference(self, ppSpatialRefence):
##        u'The source spatial reference.'
##        #return 
##

class IReprojectFunctionArguments(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control reproject function arguments.'
    _iid_ = GUID('{13B37F70-95D1-4ADD-93B8-D4CA83B0AF66}')
    _idlflags_ = ['oleautomation']
IReprojectFunctionArguments._methods_ = [
    COMMETHOD(['propget', helpstring(u'The source raster object.')], HRESULT, 'Raster',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppRaster' )),
    COMMETHOD(['propputref', helpstring(u'The source raster object.')], HRESULT, 'Raster',
              ( ['in'], POINTER(IUnknown), 'ppRaster' )),
    COMMETHOD(['propget', helpstring(u'The output spatial reference.')], HRESULT, 'SpatialReference',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppSRS' )),
    COMMETHOD(['propputref', helpstring(u'The output spatial reference.')], HRESULT, 'SpatialReference',
              ( ['in'], POINTER(IUnknown), 'ppSRS' )),
    COMMETHOD(['propget', helpstring(u'The X cell size.')], HRESULT, 'XCellsize',
              ( ['retval', 'out'], POINTER(c_double), 'pXCellsize' )),
    COMMETHOD(['propput', helpstring(u'The X cell size.')], HRESULT, 'XCellsize',
              ( ['in'], c_double, 'pXCellsize' )),
    COMMETHOD(['propget', helpstring(u'The Y cell size.')], HRESULT, 'YCellsize',
              ( ['retval', 'out'], POINTER(c_double), 'pYCellsize' )),
    COMMETHOD(['propput', helpstring(u'The Y cell size.')], HRESULT, 'YCellsize',
              ( ['in'], c_double, 'pYCellsize' )),
    COMMETHOD(['propget', helpstring(u'The X origin.')], HRESULT, 'XOrigin',
              ( ['retval', 'out'], POINTER(c_double), 'pXOrigin' )),
    COMMETHOD(['propput', helpstring(u'The X origin.')], HRESULT, 'XOrigin',
              ( ['in'], c_double, 'pXOrigin' )),
    COMMETHOD(['propget', helpstring(u'The Y origin.')], HRESULT, 'YOrigin',
              ( ['retval', 'out'], POINTER(c_double), 'pYOrigin' )),
    COMMETHOD(['propput', helpstring(u'The Y origin.')], HRESULT, 'YOrigin',
              ( ['in'], c_double, 'pYOrigin' )),
]
################################################################
## code template for IReprojectFunctionArguments implementation
##class IReprojectFunctionArguments_Impl(object):
##    def Raster(self, ppRaster):
##        u'The source raster object.'
##        #return 
##
##    def SpatialReference(self, ppSRS):
##        u'The output spatial reference.'
##        #return 
##
##    def _get(self):
##        u'The Y origin.'
##        #return pYOrigin
##    def _set(self, pYOrigin):
##        u'The Y origin.'
##    YOrigin = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The Y cell size.'
##        #return pYCellsize
##    def _set(self, pYCellsize):
##        u'The Y cell size.'
##    YCellsize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The X cell size.'
##        #return pXCellsize
##    def _set(self, pXCellsize):
##        u'The X cell size.'
##    XCellsize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The X origin.'
##        #return pXOrigin
##    def _set(self, pXOrigin):
##        u'The X origin.'
##    XOrigin = property(_get, _set, doc = _set.__doc__)
##

class IDownsampleFunctionArguments(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control downsample raster function arguments.'
    _iid_ = GUID('{1BF50257-9523-4587-95C3-C0CEAA34F0D0}')
    _idlflags_ = ['oleautomation']
IDownsampleFunctionArguments._methods_ = [
    COMMETHOD(['propget', helpstring(u'The input raster.')], HRESULT, 'Raster',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppRaster' )),
    COMMETHOD(['propputref', helpstring(u'The input raster.')], HRESULT, 'Raster',
              ( ['in'], POINTER(IUnknown), 'ppRaster' )),
    COMMETHOD(['propget', helpstring(u'The sampling method used (optional).')], HRESULT, 'ResamplingMethod',
              ( ['retval', 'out'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.rstResamplingTypes), 'pResamplingMethod' )),
    COMMETHOD(['propput', helpstring(u'The sampling method used (optional).')], HRESULT, 'ResamplingMethod',
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.rstResamplingTypes, 'pResamplingMethod' )),
    COMMETHOD(['propget', helpstring(u'Blur at this or larger downsampling factor (optional).')], HRESULT, 'StartBlurAtScaleFactor',
              ( ['retval', 'out'], POINTER(c_double), 'pScaleFactor' )),
    COMMETHOD(['propput', helpstring(u'Blur at this or larger downsampling factor (optional).')], HRESULT, 'StartBlurAtScaleFactor',
              ( ['in'], c_double, 'pScaleFactor' )),
    COMMETHOD(['propget', helpstring(u'At this downsampling factor, stop blurring all pixels, do only selected instead (optional).')], HRESULT, 'StopBlurAllAtScaleFactor',
              ( ['retval', 'out'], POINTER(c_double), 'pScaleFactor' )),
    COMMETHOD(['propput', helpstring(u'At this downsampling factor, stop blurring all pixels, do only selected instead (optional).')], HRESULT, 'StopBlurAllAtScaleFactor',
              ( ['in'], c_double, 'pScaleFactor' )),
]
################################################################
## code template for IDownsampleFunctionArguments implementation
##class IDownsampleFunctionArguments_Impl(object):
##    def Raster(self, ppRaster):
##        u'The input raster.'
##        #return 
##
##    def _get(self):
##        u'Blur at this or larger downsampling factor (optional).'
##        #return pScaleFactor
##    def _set(self, pScaleFactor):
##        u'Blur at this or larger downsampling factor (optional).'
##    StartBlurAtScaleFactor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'At this downsampling factor, stop blurring all pixels, do only selected instead (optional).'
##        #return pScaleFactor
##    def _set(self, pScaleFactor):
##        u'At this downsampling factor, stop blurring all pixels, do only selected instead (optional).'
##    StopBlurAllAtScaleFactor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The sampling method used (optional).'
##        #return pResamplingMethod
##    def _set(self, pResamplingMethod):
##        u'The sampling method used (optional).'
##    ResamplingMethod = property(_get, _set, doc = _set.__doc__)
##

class ReflectanceFunction(CoClass):
    u'The Reflectance function.'
    _reg_clsid_ = GUID('{5E5C1828-ECD1-4620-9CA1-970D2AA450DE}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
ReflectanceFunction._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunction, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class IndexedItemURI(CoClass):
    u'An indexed item URI object.'
    _reg_clsid_ = GUID('{A5FD773E-7C6A-4B12-87A7-17020A76DB66}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IIndexedItemURI(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control an item URI that references an indexed item within a container dataset.'
    _iid_ = GUID('{8B7F1A06-3A1F-4802-A5F7-5379750E5884}')
    _idlflags_ = ['oleautomation']
IndexedItemURI._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IItemURI, IItemURI2, IIndexedItemURI, IItemPaths, IItemPaths2]

class DeleteMosaicDatasetParameters(CoClass):
    u'Parameters that control what to delete with a Mosaic Dataset'
    _reg_clsid_ = GUID('{6651DD88-26F4-4816-A431-87F65F01901C}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IDeleteMosaicDatasetParameters(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control what all gets deleted when a mosaic dataset is deleted.'
    _iid_ = GUID('{A2CB3F23-6154-4ED1-836D-131D64FBC764}')
    _idlflags_ = ['oleautomation']
DeleteMosaicDatasetParameters._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDeleteMosaicDatasetParameters]

IFunctionRasterDataset2._methods_ = [
    COMMETHOD([helpstring(u'Computes the footprint.')], HRESULT, 'ComputeFootprint',
              ( ['in'], c_int, 'MaximumVertices' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry)), 'ppFootprint' )),
    COMMETHOD([helpstring(u'Refresh raster cache.')], HRESULT, 'RefreshCache'),
    COMMETHOD([helpstring(u'Clear the cache.')], HRESULT, 'ClearCache'),
    COMMETHOD(['propget', helpstring(u'Indicates if the raster cache is stale and needs to be refreshed.')], HRESULT, 'IsCacheStale',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pIsStale' )),
    COMMETHOD([helpstring(u'Gets source files within a given clipping geometry.')], HRESULT, 'GetFiles',
              ( [], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'pGeometry' ),
              ( [], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray)), 'ppFiles' )),
    COMMETHOD([helpstring(u'Synchronizes changes.')], HRESULT, 'Synchronize'),
]
################################################################
## code template for IFunctionRasterDataset2 implementation
##class IFunctionRasterDataset2_Impl(object):
##    def GetFiles(self, pGeometry, ppFiles):
##        u'Gets source files within a given clipping geometry.'
##        #return 
##
##    def ClearCache(self):
##        u'Clear the cache.'
##        #return 
##
##    def RefreshCache(self):
##        u'Refresh raster cache.'
##        #return 
##
##    def ComputeFootprint(self, MaximumVertices):
##        u'Computes the footprint.'
##        #return ppFootprint
##
##    def Synchronize(self):
##        u'Synchronizes changes.'
##        #return 
##
##    @property
##    def IsCacheStale(self):
##        u'Indicates if the raster cache is stale and needs to be refreshed.'
##        #return pIsStale
##

class ICompositeXform(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeodataXform):
    _case_insensitive_ = True
    u'Provides access to members that control a collection of geodata transform.'
    _iid_ = GUID('{17AC03FF-547D-4714-AF19-C474E1F1C153}')
    _idlflags_ = ['oleautomation']
ICompositeXform._methods_ = [
    COMMETHOD(['propget', helpstring(u'The geodata transform count of the collection.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propget', helpstring(u'The geodata transform at a given index in the collection.')], HRESULT, 'GeodataXform',
              ( ['in'], c_int, 'index' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeodataXform)), 'ppXform' )),
    COMMETHOD(['propget', helpstring(u'The first geodata transform in the collection.')], HRESULT, 'FirstXform',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeodataXform)), 'ppXform' )),
    COMMETHOD(['propget', helpstring(u'The last geodata transform in the collection.')], HRESULT, 'LastXform',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeodataXform)), 'ppXform' )),
    COMMETHOD([helpstring(u'Adds a geodata transform to the end of the collection.')], HRESULT, 'Add',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeodataXform), 'pXform' )),
    COMMETHOD([helpstring(u'Inserts a geodata transform to the collection at a specified index.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'index' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeodataXform), 'pXform' )),
    COMMETHOD([helpstring(u'Removes a geodata transform at a given index from the collection.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'index' )),
    COMMETHOD([helpstring(u'Empties the collection.')], HRESULT, 'Empty'),
    COMMETHOD([helpstring(u'Validates the collection after changes.')], HRESULT, 'Validate'),
]
################################################################
## code template for ICompositeXform implementation
##class ICompositeXform_Impl(object):
##    @property
##    def Count(self):
##        u'The geodata transform count of the collection.'
##        #return pCount
##
##    def Insert(self, index, pXform):
##        u'Inserts a geodata transform to the collection at a specified index.'
##        #return 
##
##    @property
##    def GeodataXform(self, index):
##        u'The geodata transform at a given index in the collection.'
##        #return ppXform
##
##    def Remove(self, index):
##        u'Removes a geodata transform at a given index from the collection.'
##        #return 
##
##    def Add(self, pXform):
##        u'Adds a geodata transform to the end of the collection.'
##        #return 
##
##    @property
##    def LastXform(self):
##        u'The last geodata transform in the collection.'
##        #return ppXform
##
##    @property
##    def FirstXform(self):
##        u'The first geodata transform in the collection.'
##        #return ppXform
##
##    def Validate(self):
##        u'Validates the collection after changes.'
##        #return 
##
##    def Empty(self):
##        u'Empties the collection.'
##        #return 
##

IGeometricXform._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The domains in output space.')], HRESULT, 'Domains',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometryCollection), 'rhs' )),
    COMMETHOD(['propget', helpstring(u'The geometric transformation to be applied.')], HRESULT, 'Transformation',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ITransformation)), 'ppTransformation' )),
    COMMETHOD(['propputref', helpstring(u'The geometric transformation to be applied.')], HRESULT, 'Transformation',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ITransformation), 'ppTransformation' )),
]
################################################################
## code template for IGeometricXform implementation
##class IGeometricXform_Impl(object):
##    def Domains(self, rhs):
##        u'The domains in output space.'
##        #return 
##
##    def Transformation(self, ppTransformation):
##        u'The geometric transformation to be applied.'
##        #return 
##

IFootprintFunctionArguments._methods_ = [
    COMMETHOD(['propget', helpstring(u'The input raster for conversion.')], HRESULT, 'Raster',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppRaster' )),
    COMMETHOD(['propputref', helpstring(u'The input raster for conversion.')], HRESULT, 'Raster',
              ( ['in'], POINTER(IUnknown), 'ppRaster' )),
    COMMETHOD(['propget', helpstring(u'The included value ranges, i.e. [min, max] for each band.')], HRESULT, 'IncludedRanges',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray)), 'ppRanges' )),
    COMMETHOD(['propputref', helpstring(u'The included value ranges, i.e. [min, max] for each band.')], HRESULT, 'IncludedRanges',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray), 'ppRanges' )),
]
################################################################
## code template for IFootprintFunctionArguments implementation
##class IFootprintFunctionArguments_Impl(object):
##    def IncludedRanges(self, ppRanges):
##        u'The included value ranges, i.e. [min, max] for each band.'
##        #return 
##
##    def Raster(self, ppRaster):
##        u'The input raster for conversion.'
##        #return 
##

class RGB32ToRGBFunction(CoClass):
    u'A class for a packed RGBA to 3 band RGB conversion raster function.'
    _reg_clsid_ = GUID('{EE26ADD9-F748-45CD-B0AE-795979090A79}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
RGB32ToRGBFunction._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunction, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class IQueryPathsParameters(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control parameters to query paths.'
    _iid_ = GUID('{437435D9-EF2E-4018-AE93-21D3A29643DD}')
    _idlflags_ = ['oleautomation']
IQueryPathsParameters._methods_ = [
    COMMETHOD(['propput', helpstring(u'Indicates whether paths associated with each raster dataset are queried.')], HRESULT, 'QueryDatasetPaths',
              ( ['in'], VARIANT_BOOL, 'pbQueryDatasetPaths' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether paths associated with each raster dataset are queried.')], HRESULT, 'QueryDatasetPaths',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbQueryDatasetPaths' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether paths from URI objects that identify source to the raster type are queried.')], HRESULT, 'QueryItemURIPaths',
              ( ['in'], VARIANT_BOOL, 'pbQueryURIPaths' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether paths from URI objects that identify source to the raster type are queried.')], HRESULT, 'QueryItemURIPaths',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbQueryURIPaths' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether only broken paths are returned.')], HRESULT, 'BrokenPathsOnly',
              ( ['in'], VARIANT_BOOL, 'pbBrokenOnly' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether only broken paths are returned.')], HRESULT, 'BrokenPathsOnly',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbBrokenOnly' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether only folder paths are returned.')], HRESULT, 'FoldersOnly',
              ( ['in'], VARIANT_BOOL, 'pbFoldersOnly' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether only folder paths are returned.')], HRESULT, 'FoldersOnly',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbFoldersOnly' )),
    COMMETHOD(['propput', helpstring(u'The maximum depth of each folder path returned.')], HRESULT, 'PathDepth',
              ( ['in'], c_int, 'pPathDepth' )),
    COMMETHOD(['propget', helpstring(u'The maximum depth of each folder path returned.')], HRESULT, 'PathDepth',
              ( ['retval', 'out'], POINTER(c_int), 'pPathDepth' )),
]
################################################################
## code template for IQueryPathsParameters implementation
##class IQueryPathsParameters_Impl(object):
##    def _get(self):
##        u'Indicates whether paths associated with each raster dataset are queried.'
##        #return pbQueryDatasetPaths
##    def _set(self, pbQueryDatasetPaths):
##        u'Indicates whether paths associated with each raster dataset are queried.'
##    QueryDatasetPaths = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether only broken paths are returned.'
##        #return pbBrokenOnly
##    def _set(self, pbBrokenOnly):
##        u'Indicates whether only broken paths are returned.'
##    BrokenPathsOnly = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether only folder paths are returned.'
##        #return pbFoldersOnly
##    def _set(self, pbFoldersOnly):
##        u'Indicates whether only folder paths are returned.'
##    FoldersOnly = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether paths from URI objects that identify source to the raster type are queried.'
##        #return pbQueryURIPaths
##    def _set(self, pbQueryURIPaths):
##        u'Indicates whether paths from URI objects that identify source to the raster type are queried.'
##    QueryItemURIPaths = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The maximum depth of each folder path returned.'
##        #return pPathDepth
##    def _set(self, pPathDepth):
##        u'The maximum depth of each folder path returned.'
##    PathDepth = property(_get, _set, doc = _set.__doc__)
##

class ITiePointCollection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control an image tie point collection.'
    _iid_ = GUID('{7467BABC-08F2-4696-97AC-1C3A6798C2F4}')
    _idlflags_ = []
ITiePointCollection._methods_ = [
    COMMETHOD(['propget', helpstring(u'The image tie point count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propget', helpstring(u'The image tie point at the specified position.')], HRESULT, 'Point',
              ( ['in'], c_int, 'index' ),
              ( ['retval', 'out'], POINTER(POINTER(ITiePoint)), 'ppPoint' )),
    COMMETHOD([helpstring(u'Appends an image tie point.')], HRESULT, 'Append',
              ( ['in'], POINTER(ITiePoint), 'pPoint' )),
    COMMETHOD([helpstring(u'Replaces an image tie point at the specified position.')], HRESULT, 'Replace',
              ( ['in'], c_int, 'index' ),
              ( ['in'], POINTER(ITiePoint), 'pPoint' )),
    COMMETHOD([helpstring(u'Inserts an image tie point after the specified position.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'index' ),
              ( ['in'], POINTER(ITiePoint), 'pPoint' )),
    COMMETHOD([helpstring(u'Removes the image tie point at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'index' )),
    COMMETHOD([helpstring(u'Removes all image tie points.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Adds an image tie point.')], HRESULT, 'Add',
              ( ['in'], POINTER(ITiePoint), 'pPoint' )),
]
################################################################
## code template for ITiePointCollection implementation
##class ITiePointCollection_Impl(object):
##    @property
##    def Count(self):
##        u'The image tie point count.'
##        #return pCount
##
##    def Insert(self, index, pPoint):
##        u'Inserts an image tie point after the specified position.'
##        #return 
##
##    @property
##    def Point(self, index):
##        u'The image tie point at the specified position.'
##        #return ppPoint
##
##    def Remove(self, index):
##        u'Removes the image tie point at the specified position.'
##        #return 
##
##    def Replace(self, index, pPoint):
##        u'Replaces an image tie point at the specified position.'
##        #return 
##
##    def RemoveAll(self):
##        u'Removes all image tie points.'
##        #return 
##
##    def Add(self, pPoint):
##        u'Adds an image tie point.'
##        #return 
##
##    def Append(self, pPoint):
##        u'Appends an image tie point.'
##        #return 
##

class RasterFunctionHelper(CoClass):
    u'A class for a raster function helper.'
    _reg_clsid_ = GUID('{B55F1F83-3745-4C88-BBE1-4FC7A0273409}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IRasterFunctionHelper(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a raster function helper.'
    _iid_ = GUID('{D6DEB4C8-8D59-4CCA-8174-8C7C95A5707A}')
    _idlflags_ = ['oleautomation']
RasterFunctionHelper._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunctionHelper]

ICustomXform._methods_ = [
    COMMETHOD([helpstring(u'Initializes a custom geodata transform.')], HRESULT, 'Initialize',
              ( ['in'], BSTR, 'filename' ),
              ( ['in'], BSTR, 'Data' )),
    COMMETHOD(['propget', helpstring(u'Indicates if approximation is desired.')], HRESULT, 'Approximation',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pApproximation' )),
]
################################################################
## code template for ICustomXform implementation
##class ICustomXform_Impl(object):
##    def Initialize(self, filename, Data):
##        u'Initializes a custom geodata transform.'
##        #return 
##
##    @property
##    def Approximation(self):
##        u'Indicates if approximation is desired.'
##        #return pApproximation
##

class DEWMSMap(CoClass):
    u'WMS Map Data Element object.'
    _reg_clsid_ = GUID('{0957B24F-209D-4372-B29B-61A708249CA7}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IDEWMSMap(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that describe WMS Map objects.'
    _iid_ = GUID('{6B0B1818-47D6-4551-BA69-6F595DF5EC81}')
    _idlflags_ = ['oleautomation']
DEWMSMap._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDEWMSMap, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDEServerObject, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataElement, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IMetadata, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPValue, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDescribe, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersionSupportGEN, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class CoordinateXform(CoClass):
    u'A coordinate transform class.'
    _reg_clsid_ = GUID('{A11AF4AB-9861-4E86-AC25-775668372108}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
CoordinateXform._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ICoordinateXform, ICoordinateXform2, IRasterXform, IGeodataXformApproximation, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersionSupportGEN, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class URIProductNameFilter(CoClass):
    u'A URI filter object for product names.'
    _reg_clsid_ = GUID('{227397D1-C518-4EDB-ADDF-A07160AAD029}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IURIProductNameFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a filter based on URI product name.'
    _iid_ = GUID('{B137CF0D-5EBE-44AB-8A6D-1634C043D342}')
    _idlflags_ = ['oleautomation']
URIProductNameFilter._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IItemURIFilter, IURIProductNameFilter]

class IRasterInfoFunctionArguments(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control raster info function arguments.'
    _iid_ = GUID('{43CD7AD2-77FD-4D83-A95B-4F015FCB9E87}')
    _idlflags_ = ['oleautomation']
IRasterInfoFunctionArguments._methods_ = [
    COMMETHOD(['propget', helpstring(u'The input image.')], HRESULT, 'Raster',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppRaster' )),
    COMMETHOD(['propputref', helpstring(u'The input image.')], HRESULT, 'Raster',
              ( ['in'], POINTER(IUnknown), 'ppRaster' )),
    COMMETHOD(['propget', helpstring(u'The specified raster info object.')], HRESULT, 'RasterInfo',
              ( ['retval', 'out'], POINTER(POINTER(IRasterInfo)), 'ppRasterInfo' )),
    COMMETHOD(['propputref', helpstring(u'The specified raster info object.')], HRESULT, 'RasterInfo',
              ( ['in'], POINTER(IRasterInfo), 'ppRasterInfo' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the raster info will be cached.')], HRESULT, 'Caching',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pCaching' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the raster info will be cached.')], HRESULT, 'Caching',
              ( ['in'], VARIANT_BOOL, 'pCaching' )),
]
################################################################
## code template for IRasterInfoFunctionArguments implementation
##class IRasterInfoFunctionArguments_Impl(object):
##    def _get(self):
##        u'Indicates if the raster info will be cached.'
##        #return pCaching
##    def _set(self, pCaching):
##        u'Indicates if the raster info will be cached.'
##    Caching = property(_get, _set, doc = _set.__doc__)
##
##    def Raster(self, ppRaster):
##        u'The input image.'
##        #return 
##
##    def RasterInfo(self, ppRasterInfo):
##        u'The specified raster info object.'
##        #return 
##

class ApplanixBuilder(CoClass):
    u'A raster builder for Applanix files.'
    _reg_clsid_ = GUID('{0B5FC20F-59A7-46DC-8F75-C58CA4C8C9E1}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IApplanixBuilder(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the applanix builder'
    _iid_ = GUID('{646616CF-75CE-48DC-85E6-B1DA9F76BE9F}')
    _idlflags_ = ['oleautomation']
class IFrameCameraParameters(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control camera definition'
    _iid_ = GUID('{3527133D-1C63-4211-80C9-8444B1669C47}')
    _idlflags_ = ['oleautomation']
ApplanixBuilder._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterBuilder2, IRasterBuilderInit, IApplanixBuilder, IFrameCameraParameters]

class GeometricFunctionArguments(CoClass):
    u'A class for raster geometric function arguments.'
    _reg_clsid_ = GUID('{562F6FF5-2351-42D1-B464-BA03DE92E7EF}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IGeometricFunctionArguments(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control geometric function arguments.'
    _iid_ = GUID('{EE17FF50-4762-46B4-A1D0-E111FD7FFDE1}')
    _idlflags_ = ['oleautomation']
GeometricFunctionArguments._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunctionArguments, IRasterFunctionArguments2, IGeometricFunctionArguments, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class KompsatBuilder(CoClass):
    u'A raster builder for KOMPSAT files'
    _reg_clsid_ = GUID('{CA963330-4125-4D21-B05D-DFB766C79243}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
KompsatBuilder._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterBuilder2, IRasterBuilderInit]

class IImageFeaturePoint(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control an image feature point.'
    _iid_ = GUID('{313B1AC4-D7EB-4994-BEBE-BD1AE67F8947}')
    _idlflags_ = []
IImageFeaturePoint._methods_ = [
    COMMETHOD(['propget', helpstring(u'The feature point location.')], HRESULT, 'Location',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint)), 'ppLocation' )),
    COMMETHOD(['propputref', helpstring(u'The feature point location.')], HRESULT, 'Location',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'ppLocation' )),
    COMMETHOD(['propget', helpstring(u'The feature point signature value.')], HRESULT, 'Signature',
              ( ['retval', 'out'], POINTER(VARIANT), 'pSignature' )),
    COMMETHOD(['propput', helpstring(u'The feature point signature value.')], HRESULT, 'Signature',
              ( ['in'], VARIANT, 'pSignature' )),
]
################################################################
## code template for IImageFeaturePoint implementation
##class IImageFeaturePoint_Impl(object):
##    def Location(self, ppLocation):
##        u'The feature point location.'
##        #return 
##
##    def _get(self):
##        u'The feature point signature value.'
##        #return pSignature
##    def _set(self, pSignature):
##        u'The feature point signature value.'
##    Signature = property(_get, _set, doc = _set.__doc__)
##

class IImageRegistration(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control an image registration.'
    _iid_ = GUID('{EC48C884-EBEB-4D94-849E-F1533A0A32DA}')
    _idlflags_ = []

# values for enumeration 'esriMatchPointRefinementType'
esriNoneRefinement = 0
esriLeastSquareRefinement = 1
esriCrossCorrelationRefinement = 2
esriMatchPointRefinementType = c_int # enum

# values for enumeration 'esriImageBlockingType'
esriCenterBlocking = 0
esriRandomBlocking = 1
esriRegularBlocking = 2
esriImageBlockingType = c_int # enum
class IImageFeaturePoints(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the properties of a list of image feature points.'
    _iid_ = GUID('{3FD7CB64-F18F-4380-B128-135206147E75}')
    _idlflags_ = []
IImageRegistration._methods_ = [
    COMMETHOD(['propget', helpstring(u'The match point refinement to be applied.')], HRESULT, 'Refinement',
              ( ['retval', 'out'], POINTER(esriMatchPointRefinementType), 'pRefinement' )),
    COMMETHOD(['propput', helpstring(u'The match point refinement to be applied.')], HRESULT, 'Refinement',
              ( ['in'], esriMatchPointRefinementType, 'pRefinement' )),
    COMMETHOD(['propget', helpstring(u'The image registration parameters.')], HRESULT, 'Parameters',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet)), 'ppParameters' )),
    COMMETHOD(['propputref', helpstring(u'The image registration parameters.')], HRESULT, 'Parameters',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet), 'ppParameters' )),
    COMMETHOD([helpstring(u'Gets a named parameter.')], HRESULT, 'GetParameter',
              ( ['in'], BSTR, 'Name' ),
              ( ['retval', 'out'], POINTER(VARIANT), 'pValue' )),
    COMMETHOD([helpstring(u'Sets a named parameter.')], HRESULT, 'SetParameter',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT, 'Value' )),
    COMMETHOD(['propget', helpstring(u'The blocking/sampling type for large images.')], HRESULT, 'BlockingType',
              ( ['retval', 'out'], POINTER(esriImageBlockingType), 'pBlockingType' )),
    COMMETHOD(['propput', helpstring(u'The blocking/sampling type for large images.')], HRESULT, 'BlockingType',
              ( ['in'], esriImageBlockingType, 'pBlockingType' )),
    COMMETHOD(['propget', helpstring(u'The number of instances for image registration.')], HRESULT, 'ThreadCount',
              ( ['retval', 'out'], POINTER(c_int), 'pThreadCount' )),
    COMMETHOD(['propput', helpstring(u'The number of instances for image registration.')], HRESULT, 'ThreadCount',
              ( ['in'], c_int, 'pThreadCount' )),
    COMMETHOD(['propget', helpstring(u'The ArcGIS server object to perform image registration.')], HRESULT, 'ServerObjectName',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName)), 'ppName' )),
    COMMETHOD(['propputref', helpstring(u'The ArcGIS server object to perform image registration.')], HRESULT, 'ServerObjectName',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName), 'ppName' )),
    COMMETHOD([helpstring(u'Extracts feature points from a given image.')], HRESULT, 'ExtractFeaturePoints',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pImage' ),
              ( ['retval', 'out'], POINTER(POINTER(IImageFeaturePoints)), 'ppFeaturePoints' )),
    COMMETHOD([helpstring(u'Matches two sets of feature points.')], HRESULT, 'MatchFeaturePoints',
              ( ['in'], POINTER(IImageFeaturePoints), 'pFeaturePoints' ),
              ( [], POINTER(IImageFeaturePoints), 'pOthers' ),
              ( ['retval', 'out'], POINTER(POINTER(IImageMatchPoints)), 'ppMatchPoints' )),
    COMMETHOD([helpstring(u'Extracts match points between a reference image, and a raw image.')], HRESULT, 'ExtractMatchPoints',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pImage' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRefImage' ),
              ( ['retval', 'out'], POINTER(POINTER(IImageMatchPoints)), 'ppMatchPoints' )),
    COMMETHOD([helpstring(u'Extracts all match points between a collection of reference images, and a raw image.')], HRESULT, 'ExtractAllMatchPoints',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pImage' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'pRefImages' ),
              ( ['retval', 'out'], POINTER(POINTER(IImageMatchPoints)), 'ppMatchPoints' )),
    COMMETHOD([helpstring(u'Finds the closest feature point from an images around the given point.')], HRESULT, 'FindClosestFeaturePoint',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pImage' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'pPoint' ),
              ( ['retval', 'out'], POINTER(POINTER(IImageFeaturePoint)), 'ppFeaturePoint' )),
    COMMETHOD([helpstring(u'Refines given match points between source and target images.')], HRESULT, 'RefineMatchPoints',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pImage' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRefImage' ),
              ( ['in', 'out'], POINTER(IImageMatchPoints), 'pMatchPoints' )),
    COMMETHOD([helpstring(u'Creates a feature point table.')], HRESULT, 'CreateFeaturePointTable',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspace), 'pWorkspace' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'pSpatialReference' ),
              ( ['in'], BSTR, 'configKeyword' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable)), 'ppFeaturePointTable' )),
    COMMETHOD([helpstring(u'Creates a control point table.')], HRESULT, 'CreateControlPointTable',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspace), 'pWorkspace' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'pSpatialReference' ),
              ( ['in'], BSTR, 'configKeyword' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable)), 'ppControlPointTable' )),
    COMMETHOD([helpstring(u'Creates a solution table.')], HRESULT, 'CreateSolutionTable',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspace), 'pWorkspace' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'pSpatialReference' ),
              ( ['in'], BSTR, 'configKeyword' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable)), 'ppSolutionTable' )),
    COMMETHOD([helpstring(u'Computes feature points for a collection of images.')], HRESULT, 'ComputeFeaturePoints',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataset), 'pCatalog' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'pQueryFilter' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable), 'pAOI' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'pAOIQueryFilter' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable), 'pFeaturePointTable' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' )),
    COMMETHOD([helpstring(u'Computes matching/tie points from a collection of feature points.')], HRESULT, 'ComputeTiePoints',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable), 'pFeaturePointTable' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'pQueryFilter' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable), 'pTiePointTable' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' )),
    COMMETHOD([helpstring(u'Computes links from a list control points.')], HRESULT, 'ComputeLinks',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable), 'pControlPointTable' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'pQueryFilter' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable), 'pSolutionTable' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' )),
    COMMETHOD([helpstring(u'Computes simple polynomial adjustments.')], HRESULT, 'ComputeAdjustments',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataset), 'pCatalog' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'pQueryFilter' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable), 'pSolutionTable' ),
              ( ['in'], c_int, 'Order' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' )),
    COMMETHOD([helpstring(u'Applies adjustments from a solution table.')], HRESULT, 'Adjust',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataset), 'pCatalog' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'pQueryFilter' ),
              ( ['in'], esriImageAdjustmentType, 'Type' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable), 'pSolutionTable' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' )),
]
################################################################
## code template for IImageRegistration implementation
##class IImageRegistration_Impl(object):
##    def _get(self):
##        u'The blocking/sampling type for large images.'
##        #return pBlockingType
##    def _set(self, pBlockingType):
##        u'The blocking/sampling type for large images.'
##    BlockingType = property(_get, _set, doc = _set.__doc__)
##
##    def ExtractFeaturePoints(self, pImage):
##        u'Extracts feature points from a given image.'
##        #return ppFeaturePoints
##
##    def ExtractAllMatchPoints(self, pImage, pRefImages):
##        u'Extracts all match points between a collection of reference images, and a raw image.'
##        #return ppMatchPoints
##
##    def MatchFeaturePoints(self, pFeaturePoints, pOthers):
##        u'Matches two sets of feature points.'
##        #return ppMatchPoints
##
##    def RefineMatchPoints(self, pImage, pRefImage):
##        u'Refines given match points between source and target images.'
##        #return pMatchPoints
##
##    def Parameters(self, ppParameters):
##        u'The image registration parameters.'
##        #return 
##
##    def ServerObjectName(self, ppName):
##        u'The ArcGIS server object to perform image registration.'
##        #return 
##
##    def ComputeFeaturePoints(self, pCatalog, pQueryFilter, pAOI, pAOIQueryFilter, pFeaturePointTable, pTrackCancel):
##        u'Computes feature points for a collection of images.'
##        #return 
##
##    def ComputeAdjustments(self, pCatalog, pQueryFilter, pSolutionTable, Order, pTrackCancel):
##        u'Computes simple polynomial adjustments.'
##        #return 
##
##    def GetParameter(self, Name):
##        u'Gets a named parameter.'
##        #return pValue
##
##    def _get(self):
##        u'The number of instances for image registration.'
##        #return pThreadCount
##    def _set(self, pThreadCount):
##        u'The number of instances for image registration.'
##    ThreadCount = property(_get, _set, doc = _set.__doc__)
##
##    def ExtractMatchPoints(self, pImage, pRefImage):
##        u'Extracts match points between a reference image, and a raw image.'
##        #return ppMatchPoints
##
##    def _get(self):
##        u'The match point refinement to be applied.'
##        #return pRefinement
##    def _set(self, pRefinement):
##        u'The match point refinement to be applied.'
##    Refinement = property(_get, _set, doc = _set.__doc__)
##
##    def ComputeLinks(self, pControlPointTable, pQueryFilter, pSolutionTable, pTrackCancel):
##        u'Computes links from a list control points.'
##        #return 
##
##    def ComputeTiePoints(self, pFeaturePointTable, pQueryFilter, pTiePointTable, pTrackCancel):
##        u'Computes matching/tie points from a collection of feature points.'
##        #return 
##
##    def CreateSolutionTable(self, pWorkspace, Name, pSpatialReference, configKeyword):
##        u'Creates a solution table.'
##        #return ppSolutionTable
##
##    def CreateControlPointTable(self, pWorkspace, Name, pSpatialReference, configKeyword):
##        u'Creates a control point table.'
##        #return ppControlPointTable
##
##    def SetParameter(self, Name, Value):
##        u'Sets a named parameter.'
##        #return 
##
##    def Adjust(self, pCatalog, pQueryFilter, Type, pSolutionTable, pTrackCancel):
##        u'Applies adjustments from a solution table.'
##        #return 
##
##    def FindClosestFeaturePoint(self, pImage, pPoint):
##        u'Finds the closest feature point from an images around the given point.'
##        #return ppFeaturePoint
##
##    def CreateFeaturePointTable(self, pWorkspace, Name, pSpatialReference, configKeyword):
##        u'Creates a feature point table.'
##        #return ppFeaturePointTable
##

IItemPaths._methods_ = [
    COMMETHOD([helpstring(u'Returns all paths associated with the object.')], HRESULT, 'GetPaths',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray)), 'ppPaths' )),
    COMMETHOD([helpstring(u'Updates all paths associated with the object using the specified mapping rule. The number of values in the two arrays must be the same.')], HRESULT, 'ReplacePaths',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray), 'pOldPaths' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray), 'pNewPaths' )),
]
################################################################
## code template for IItemPaths implementation
##class IItemPaths_Impl(object):
##    def GetPaths(self):
##        u'Returns all paths associated with the object.'
##        #return ppPaths
##
##    def ReplacePaths(self, pOldPaths, pNewPaths):
##        u'Updates all paths associated with the object using the specified mapping rule. The number of values in the two arrays must be the same.'
##        #return 
##

class IRasterCalcUniqueValues(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that controls calculation of unique values.'
    _iid_ = GUID('{B065F7F9-C202-466C-B111-F6A89C55AB29}')
    _idlflags_ = ['oleautomation']
class IUniqueValues(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that controls unique values.'
    _iid_ = GUID('{B2768AB2-E583-4CCF-831D-36237C2F520A}')
    _idlflags_ = ['oleautomation']
IRasterCalcUniqueValues._methods_ = [
    COMMETHOD([helpstring(u'Adds values of a field of a table.')], HRESULT, 'AddFromTable',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ICursor), 'pCursor' ),
              ( ['in'], c_int, 'iValueField' ),
              ( ['in'], c_int, 'iCountField' ),
              ( ['in'], POINTER(IUniqueValues), 'pUniqueValues' )),
    COMMETHOD([helpstring(u'Adds values from a given band of a Raster.')], HRESULT, 'AddFromRaster',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' ),
              ( ['in'], c_int, 'iBand' ),
              ( ['in'], POINTER(IUniqueValues), 'pUniqueValues' )),
    COMMETHOD([helpstring(u'Adds decimal values truncated to a given precision from a given band of a Raster.')], HRESULT, 'AddFromRasterAsDecimal',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' ),
              ( ['in'], c_int, 'iBand' ),
              ( ['in'], c_double, 'precision' ),
              ( ['in'], POINTER(IUniqueValues), 'pUniqueValues' )),
]
################################################################
## code template for IRasterCalcUniqueValues implementation
##class IRasterCalcUniqueValues_Impl(object):
##    def AddFromRaster(self, pRaster, iBand, pUniqueValues):
##        u'Adds values from a given band of a Raster.'
##        #return 
##
##    def AddFromRasterAsDecimal(self, pRaster, iBand, precision, pUniqueValues):
##        u'Adds decimal values truncated to a given precision from a given band of a Raster.'
##        #return 
##
##    def AddFromTable(self, pCursor, iValueField, iCountField, pUniqueValues):
##        u'Adds values of a field of a table.'
##        #return 
##

class RasterTypeDataSourceHandlerParameters(CoClass):
    u'Parameters that control raster type data source handler operations.'
    _reg_clsid_ = GUID('{98AB60AA-951A-4835-94CA-2C45561B4C57}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
RasterTypeDataSourceHandlerParameters._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterTypeDataSourceHandlerParameters]

class AdjustXform(CoClass):
    u'An adjustment (rubber sheeting) transform class.'
    _reg_clsid_ = GUID('{1610EE70-8D50-41E8-B2F3-9B3002BE7BAA}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
AdjustXform._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IAdjustXform, comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ITransformation, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersionSupportGEN, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]


# values for enumeration 'esriBlendType'
esriBlendTypeBoth = 1
esriBlendTypeInside = 2
esriBlendTypeOutside = 3
esriBlendType = c_int # enum

# values for enumeration 'esriRasterError'
E_RASTER_FILE_NOT_FOUND = -2147217407
E_RASTER_FILE_INVALID_EXTENSION = -2147217406
E_RASTER_RENDERER_INVALID_BAND_INDEX = -2147217405
E_RASTER_FILE_FAILED_TO_RENAME = -2147217404
E_RASTER_FILE_FAILED_TO_COPY = -2147217403
E_RASTER_FILE_LZW_FAILED = -2147217402
E_RASTER_ACCESS_IS_DENIED = -2147217401
E_RASTER_DATASET_EXIST = -2147217400
E_RASTER_FAILED_TO_OPEN_CONNECTION = -2147217398
E_RASTER_FAILED_TO_OPEN_WORKSPACE = -2147217397
E_RASTER_EMPTY_WORKSPACE = -2147217396
E_RASTER_FAILED_TO_CREATE_CATALOG_ITEM = -2147217395
E_RASTER_INVALID_RASTER_VALUE = -2147217394
E_RASTER_FAILED_TO_OPEN_CATALOG = -2147217393
E_RASTER_UNSUPPORTED_PCS = -2147217392
E_RASTER_CANNT_BUILD_VAT = -2147217391
E_RASTER_CANNT_ALTER_VAT = -2147217390
E_RASTER_FAILED_TO_CALC_STATS = -2147217389
E_RASTER_FAILED_TO_CALC_HISTOGRAM = -2147217388
E_RASTER_FAILED_TO_ALTER_STATS = -2147217387
E_RASTER_FAILED_TO_ALTER_HISTOGRAM = -2147217386
E_RASTER_FAILED_TO_CREATE_DATASET = -2147217385
E_RASTER_FAILED_TO_OPEN_DATASET = -2147217384
E_RASTER_FAILED_TO_COPY_DATASET = -2147217383
E_RASTER_FAILED_TO_RENAME_DATASET = -2147217382
E_RASTER_FAILED_TO_DELETE_DATASET = -2147217381
E_RASTER_FAILED_TO_ALTER_GEODATAXFORM = -2147217380
E_RASTER_FAILED_TO_BUILD_PYRAMID = -2147217379
E_RASTER_UNSUPPORTED_FORMAT = -2147217378
E_RASTER_TOO_MANY_UNIQUE_VALUES = -2147217377
E_RASTER_UNSUPPORTED_PIXEL_TYPE = -2147217376
E_RASTER_CANT_MOSAIC_COLORMAPED = -2147217375
E_RASTER_CANT_LOAD_FORMAT_DLL = -2147217374
E_RASTER_CANT_FIND_FORMAT_FUNCTION = -2147217373
E_RASTER_FAILED_TO_REGISTER_FORMAT = -2147217372
E_RASTER_INVALID_CELLSIZE = -2147217371
E_RASTER_OPERATION_CANCELED = -2147217370
E_RASTER_FAILED_TO_WRITE_AUX = -2147217369
E_RASTER_UNKNOWN_PIXELTYPE = -2147217368
E_RASTER_NO_WRITE_PERMISSION = -2147217367
E_RASTER_VAT_COUNT_TOO_LARGE = -2147217366
E_RASTER_BLOCKSIZE_TOO_LARGE = -2147217365
E_RASTER_TOO_MANY_DIRECTORIES = -2147217364
E_RASTER_COLORCORRECTION_NOT_LICENSED = -2147217363
E_RASTER_MOSAIC_NOT_LICENSED = -2147217362
E_RASTER_IN_LOAD_ONLY = -2147217361
E_ESIRGRID_FAILED_TOO_LONG = -2147217360
E_INVALID_RASTER_COMMAND = -2147217359
E_MISSING_RASTER = -2147217358
E_FAILED_TO_OPEN_RASTER_ITEM = -2147217357
E_RASTER_NOT_ENOUGH_LINKS = -2147217356
E_RASTER_UNKNOWN_ERROR = -2147217408
esriRasterError = c_int # enum
class IBinFunction2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a raster histogram bin function.'
    _iid_ = GUID('{B64BFD4C-672B-491E-A21C-F671DE292DEB}')
    _idlflags_ = ['oleautomation']
IBinFunction2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Number of bins (same as rows in table).')], HRESULT, 'NumBins',
              ( ['retval', 'out'], POINTER(c_int), 'pVal' )),
    COMMETHOD([helpstring(u'Converts pixel values to columns in the descriptor table.')], HRESULT, 'ValueToIndex',
              ( ['in'], c_double, 'pixval' ),
              ( ['retval', 'out'], POINTER(c_int), 'row_index' )),
    COMMETHOD([helpstring(u'Returns upper and lower limits of bin.')], HRESULT, 'Invert',
              ( ['in'], c_int, 'Bin' ),
              ( ['out'], POINTER(c_double), 'upper' ),
              ( ['out'], POINTER(c_double), 'lower' )),
    COMMETHOD([helpstring(u'Name of bin function.')], HRESULT, 'Title',
              ( ['out'], POINTER(BSTR), 'Title' )),
    COMMETHOD([helpstring(u'Create Stock Binfunction.')], HRESULT, 'CreateFromTitle',
              ( ['in'], BSTR, 'Title' ),
              ( ['in'], c_int, 'NumBins' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'psa' )),
]
################################################################
## code template for IBinFunction2 implementation
##class IBinFunction2_Impl(object):
##    def ValueToIndex(self, pixval):
##        u'Converts pixel values to columns in the descriptor table.'
##        #return row_index
##
##    def CreateFromTitle(self, Title, NumBins, psa):
##        u'Create Stock Binfunction.'
##        #return 
##
##    def Invert(self, Bin):
##        u'Returns upper and lower limits of bin.'
##        #return upper, lower
##
##    @property
##    def NumBins(self):
##        u'Number of bins (same as rows in table).'
##        #return pVal
##
##    def Title(self):
##        u'Name of bin function.'
##        #return Title
##

class IRasterBandEdit(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a raster band.'
    _iid_ = GUID('{0AB74C4D-7574-440E-B45A-2A36F22C57C8}')
    _idlflags_ = ['oleautomation']
class IRasterBandEdit2(IRasterBandEdit):
    _case_insensitive_ = True
    u'Provides access to members that control a raster band.'
    _iid_ = GUID('{400F6DDF-D613-4DD0-A803-E7504DCBACAF}')
    _idlflags_ = ['oleautomation']
class IRasterStatistics(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control raster statistics.'
    _iid_ = GUID('{7E7E6103-FA34-11D1-8D22-0000F8780535}')
    _idlflags_ = ['oleautomation']
class IRasterHistogram(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a raster histogram.'
    _iid_ = GUID('{7ACA3D0B-0629-11D2-8D24-0000F8780535}')
    _idlflags_ = ['oleautomation']
IRasterBandEdit._methods_ = [
    COMMETHOD([helpstring(u'Alters statistics.')], HRESULT, 'AlterStatistics',
              ( ['in'], POINTER(IRasterStatistics), 'pStats' )),
    COMMETHOD([helpstring(u'Alters histogram.')], HRESULT, 'AlterHistogram',
              ( ['in'], POINTER(IRasterHistogram), 'pHistogram' )),
    COMMETHOD([helpstring(u'Calculates statistics and histogram from a given pyramid level.')], HRESULT, 'ComputeStatsHistogram',
              ( ['in'], c_int, 'PyramidLevel' )),
]
################################################################
## code template for IRasterBandEdit implementation
##class IRasterBandEdit_Impl(object):
##    def AlterHistogram(self, pHistogram):
##        u'Alters histogram.'
##        #return 
##
##    def ComputeStatsHistogram(self, PyramidLevel):
##        u'Calculates statistics and histogram from a given pyramid level.'
##        #return 
##
##    def AlterStatistics(self, pStats):
##        u'Alters statistics.'
##        #return 
##

IRasterBandEdit2._methods_ = [
    COMMETHOD([helpstring(u'Calculates statistics and histogram for a given skip factor.')], HRESULT, 'ComputeStatisticsHistogram',
              ( ['in'], c_int, 'skipx' ),
              ( ['in'], c_int, 'skipy' ),
              ( ['in'], VARIANT, 'IgnoreValues' ),
              ( ['in'], VARIANT_BOOL, 'requireHistogram' )),
]
################################################################
## code template for IRasterBandEdit2 implementation
##class IRasterBandEdit2_Impl(object):
##    def ComputeStatisticsHistogram(self, skipx, skipy, IgnoreValues, requireHistogram):
##        u'Calculates statistics and histogram for a given skip factor.'
##        #return 
##


# values for enumeration 'esriRadarCalibration'
esriRadarCalibrationBeta = 0
esriRadarCalibrationSigma = 1
esriRadarCalibrationGamma = 2
esriRadarCalibrationNone = 3
esriRadarCalibration = c_int # enum
class IPixelBlock4(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a PixelBlock.'
    _iid_ = GUID('{7007286C-BE43-4C88-8DB6-B6EE88BAD01B}')
    _idlflags_ = ['oleautomation']
IPixelBlock4._methods_ = [
    COMMETHOD([helpstring(u'Initializes the pixel block.')], HRESULT, 'Create',
              ( ['in'], c_int, 'Planes' ),
              ( ['in'], c_int, 'nCols' ),
              ( ['in'], c_int, 'nRows' ),
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.rstPixelType, 'PixelType' )),
    COMMETHOD([helpstring(u'Initializes the pixel block using another pixel block.')], HRESULT, 'CreateFromPixelBlock',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IPixelBlock), 'pBlock' ),
              ( [], VARIANT, 'NoData' )),
    COMMETHOD([helpstring(u'Clears the pixel block.')], HRESULT, 'Clear'),
    COMMETHOD([helpstring(u'Exports to a byte array.')], HRESULT, 'ExportToBytes',
              ( ['retval', 'out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'pData' )),
    COMMETHOD([helpstring(u'Checks if a PixelBlock contains NoData.')], HRESULT, 'HasNoData',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pvbHasNoData' )),
    COMMETHOD([helpstring(u'Checks if a PixelBlock contains any data pixels.')], HRESULT, 'HasData',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pvbHasData' )),
]
################################################################
## code template for IPixelBlock4 implementation
##class IPixelBlock4_Impl(object):
##    def CreateFromPixelBlock(self, pBlock, NoData):
##        u'Initializes the pixel block using another pixel block.'
##        #return 
##
##    def Create(self, Planes, nCols, nRows, PixelType):
##        u'Initializes the pixel block.'
##        #return 
##
##    def ExportToBytes(self):
##        u'Exports to a byte array.'
##        #return pData
##
##    def HasData(self):
##        u'Checks if a PixelBlock contains any data pixels.'
##        #return pvbHasData
##
##    def HasNoData(self):
##        u'Checks if a PixelBlock contains NoData.'
##        #return pvbHasNoData
##
##    def Clear(self):
##        u'Clears the pixel block.'
##        #return 
##

class IFolderSort(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a folder content sorter.'
    _iid_ = GUID('{C4872B0F-1BFE-4D8C-905A-0E77EB600DE7}')
    _idlflags_ = []
IFileCrawler2._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The folder sorter object associated with the crawler.')], HRESULT, 'FolderSort',
              ( ['in'], POINTER(IFolderSort), 'ppFolderSort' )),
    COMMETHOD(['propget', helpstring(u'The folder sorter object associated with the crawler.')], HRESULT, 'FolderSort',
              ( ['retval', 'out'], POINTER(POINTER(IFolderSort)), 'ppFolderSort' )),
]
################################################################
## code template for IFileCrawler2 implementation
##class IFileCrawler2_Impl(object):
##    @property
##    def FolderSort(self, ppFolderSort):
##        u'The folder sorter object associated with the crawler.'
##        #return 
##


# values for enumeration 'esriCellsizeType'
esriCellsizeFirstOf = 0
esriCellsizeMinOf = 1
esriCellsizeMaxOf = 2
esriCellsizeMeanOf = 3
esriCellsizeLastOf = 4
esriCellsizeType = c_int # enum
class IUniqueDoubleValues(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that controls unique double values.'
    _iid_ = GUID('{D8D8E1EF-D10F-45E9-804A-DD1994C9AFE3}')
    _idlflags_ = ['oleautomation']
IUniqueDoubleValues._methods_ = [
    COMMETHOD([helpstring(u'Looks up unique index of a given value.')], HRESULT, 'Lookup',
              ( ['in'], c_double, 'Value' ),
              ( ['retval', 'out'], POINTER(c_int), 'index' )),
    COMMETHOD([helpstring(u'Adds a value if necessary and returns its value ID.')], HRESULT, 'Add',
              ( ['in'], c_double, 'Value' ),
              ( ['in'], c_int, 'Count' ),
              ( ['retval', 'out'], POINTER(c_int), 'index' )),
    COMMETHOD([helpstring(u'Deletes a value.')], HRESULT, 'Delete',
              ( ['in'], c_double, 'Value' )),
]
################################################################
## code template for IUniqueDoubleValues implementation
##class IUniqueDoubleValues_Impl(object):
##    def Add(self, Value, Count):
##        u'Adds a value if necessary and returns its value ID.'
##        #return index
##
##    def Lookup(self, Value):
##        u'Looks up unique index of a given value.'
##        #return index
##
##    def Delete(self, Value):
##        u'Deletes a value.'
##        #return 
##


# values for enumeration 'esriRasterProperties'
esriRasterPixelType = 1
esriRasterNoData = 2
esriRasterDimension = 4
esriRasterResamplingType = 8
esriRasterBandID = 16
esriRasterProperties = c_int # enum
class ICellSizeLevels(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control cell size levels.'
    _iid_ = GUID('{F06297C0-C9EC-4A79-97C3-B487C6619081}')
    _idlflags_ = ['oleautomation']
ICellSizeLevels._methods_ = [
    COMMETHOD(['propget', helpstring(u'The property count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'Returns the cell size level at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'index' ),
              ( ['retval', 'out'], POINTER(POINTER(ICellSizeLevel)), 'ppCellSizeLevel' )),
    COMMETHOD([helpstring(u'Removes the cell size level at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'index' )),
    COMMETHOD([helpstring(u'Removes all cell size levels.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Adds a cell size level.')], HRESULT, 'Add',
              ( ['in'], POINTER(ICellSizeLevel), 'pCellSizeLevel' )),
    COMMETHOD([helpstring(u'Adds a cell size level at the specified position.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'index' ),
              ( ['in'], POINTER(ICellSizeLevel), 'pCellSizeLevels' )),
    COMMETHOD([helpstring(u'Finds the cell size level closest to the specified cell size value and returns its index within the collection.')], HRESULT, 'Find',
              ( ['in'], c_double, 'searchCellSize' ),
              ( ['retval', 'out'], POINTER(c_int), 'pCellSizeLevelItemIndex' )),
]
################################################################
## code template for ICellSizeLevels implementation
##class ICellSizeLevels_Impl(object):
##    @property
##    def Count(self):
##        u'The property count.'
##        #return Count
##
##    def Insert(self, index, pCellSizeLevels):
##        u'Adds a cell size level at the specified position.'
##        #return 
##
##    def Remove(self, index):
##        u'Removes the cell size level at the specified position.'
##        #return 
##
##    @property
##    def Element(self, index):
##        u'Returns the cell size level at the specified position.'
##        #return ppCellSizeLevel
##
##    def RemoveAll(self):
##        u'Removes all cell size levels.'
##        #return 
##
##    def Add(self, pCellSizeLevel):
##        u'Adds a cell size level.'
##        #return 
##
##    def Find(self, searchCellSize):
##        u'Finds the cell size level closest to the specified cell size value and returns its index within the collection.'
##        #return pCellSizeLevelItemIndex
##


# values for enumeration 'esriMosaicMethod'
esriMosaicNone = 0
esriMosaicCenter = 1
esriMosaicNadir = 2
esriMosaicViewpoint = 3
esriMosaicAttribute = 4
esriMosaicLockRaster = 5
esriMosaicNorthwest = 6
esriMosaicSeamline = 7
esriMosaicMethod = c_int # enum
IAngularMeasurement._methods_ = [
    COMMETHOD(['propget', helpstring(u'The angular measurment.')], HRESULT, 'AngleMeasurement',
              ( ['retval', 'out'], POINTER(c_double), 'pAngleMeasurement' )),
    COMMETHOD(['propput', helpstring(u'The angular measurment.')], HRESULT, 'AngleMeasurement',
              ( ['in'], c_double, 'pAngleMeasurement' )),
    COMMETHOD(['propget', helpstring(u'The angular measurment uncertainty.')], HRESULT, 'AngleUncertainty',
              ( ['retval', 'out'], POINTER(c_double), 'pAngleUncertainty' )),
    COMMETHOD(['propput', helpstring(u'The angular measurment uncertainty.')], HRESULT, 'AngleUncertainty',
              ( ['in'], c_double, 'pAngleUncertainty' )),
    COMMETHOD(['propget', helpstring(u'The angular unit of this angular measurment object.')], HRESULT, 'AngularUnit',
              ( ['retval', 'out'], POINTER(BSTR), 'pAngularUnit' )),
    COMMETHOD(['propput', helpstring(u'The angular unit of this angular measurment object.')], HRESULT, 'AngularUnit',
              ( ['in'], BSTR, 'pAngularUnit' )),
    COMMETHOD(['propget', helpstring(u'The height measurement at the first point.')], HRESULT, 'HeightAtPoint1',
              ( ['retval', 'out'], POINTER(c_double), 'pHeightAtPoint1' )),
    COMMETHOD(['propput', helpstring(u'The height measurement at the first point.')], HRESULT, 'HeightAtPoint1',
              ( ['in'], c_double, 'pHeightAtPoint1' )),
    COMMETHOD(['propget', helpstring(u'The height measurement at the second point.')], HRESULT, 'HeightAtPoint2',
              ( ['retval', 'out'], POINTER(c_double), 'pHeightAtPoint2' )),
    COMMETHOD(['propput', helpstring(u'The height measurement at the second point.')], HRESULT, 'HeightAtPoint2',
              ( ['in'], c_double, 'pHeightAtPoint2' )),
    COMMETHOD(['propget', helpstring(u'The linear unit of this angular measurment.')], HRESULT, 'LinearUnit',
              ( ['retval', 'out'], POINTER(BSTR), 'pLinearUnit' )),
    COMMETHOD(['propput', helpstring(u'The linear unit of this angular measurment.')], HRESULT, 'LinearUnit',
              ( ['in'], BSTR, 'pLinearUnit' )),
    COMMETHOD([helpstring(u'Resets all the properties of this IAngularMeasurement to their default values.')], HRESULT, 'Reset'),
]
################################################################
## code template for IAngularMeasurement implementation
##class IAngularMeasurement_Impl(object):
##    def Reset(self):
##        u'Resets all the properties of this IAngularMeasurement to their default values.'
##        #return 
##
##    def _get(self):
##        u'The angular unit of this angular measurment object.'
##        #return pAngularUnit
##    def _set(self, pAngularUnit):
##        u'The angular unit of this angular measurment object.'
##    AngularUnit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The linear unit of this angular measurment.'
##        #return pLinearUnit
##    def _set(self, pLinearUnit):
##        u'The linear unit of this angular measurment.'
##    LinearUnit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The height measurement at the second point.'
##        #return pHeightAtPoint2
##    def _set(self, pHeightAtPoint2):
##        u'The height measurement at the second point.'
##    HeightAtPoint2 = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The height measurement at the first point.'
##        #return pHeightAtPoint1
##    def _set(self, pHeightAtPoint1):
##        u'The height measurement at the first point.'
##    HeightAtPoint1 = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The angular measurment uncertainty.'
##        #return pAngleUncertainty
##    def _set(self, pAngleUncertainty):
##        u'The angular measurment uncertainty.'
##    AngleUncertainty = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The angular measurment.'
##        #return pAngleMeasurement
##    def _set(self, pAngleMeasurement):
##        u'The angular measurment.'
##    AngleMeasurement = property(_get, _set, doc = _set.__doc__)
##

IRasterFunction._methods_ = [
    COMMETHOD(['propget', helpstring(u'The raster function name.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'pName' )),
    COMMETHOD(['propput', helpstring(u'The raster function name.')], HRESULT, 'Name',
              ( ['in'], BSTR, 'pName' )),
    COMMETHOD(['propget', helpstring(u'The raster function description.')], HRESULT, 'Description',
              ( ['retval', 'out'], POINTER(BSTR), 'pDescription' )),
    COMMETHOD(['propput', helpstring(u'The raster function description.')], HRESULT, 'Description',
              ( ['in'], BSTR, 'pDescription' )),
    COMMETHOD(['propget', helpstring(u'The output pixel type.')], HRESULT, 'PixelType',
              ( ['retval', 'out'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.rstPixelType), 'pPixelType' )),
    COMMETHOD(['propput', helpstring(u'The output pixel type.')], HRESULT, 'PixelType',
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.rstPixelType, 'pPixelType' )),
    COMMETHOD([helpstring(u'Binds function arguments to this raster function.')], HRESULT, 'Bind',
              ( ['in'], POINTER(IUnknown), 'pArguments' )),
    COMMETHOD(['propget', helpstring(u'Indicates if this function is valid, e.g. bound to an object, and etc.')], HRESULT, 'Valid',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pValid' )),
    COMMETHOD([helpstring(u'Updates using newly available information from bound object.')], HRESULT, 'Update'),
    COMMETHOD(['propget', helpstring(u'The raster information after this function is applied to an object.')], HRESULT, 'RasterInfo',
              ( ['retval', 'out'], POINTER(POINTER(IRasterInfo)), 'ppRasterInfo' )),
    COMMETHOD([helpstring(u'Reads a pixel block starting from the top left corner.')], HRESULT, 'Read',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IPnt), 'pTlc' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IPixelBlock), 'pPixelBlock' )),
]
################################################################
## code template for IRasterFunction implementation
##class IRasterFunction_Impl(object):
##    def _get(self):
##        u'The raster function name.'
##        #return pName
##    def _set(self, pName):
##        u'The raster function name.'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def Read(self, pTlc, pRaster, pPixelBlock):
##        u'Reads a pixel block starting from the top left corner.'
##        #return 
##
##    def _get(self):
##        u'The output pixel type.'
##        #return pPixelType
##    def _set(self, pPixelType):
##        u'The output pixel type.'
##    PixelType = property(_get, _set, doc = _set.__doc__)
##
##    def Update(self):
##        u'Updates using newly available information from bound object.'
##        #return 
##
##    @property
##    def Valid(self):
##        u'Indicates if this function is valid, e.g. bound to an object, and etc.'
##        #return pValid
##
##    def Bind(self, pArguments):
##        u'Binds function arguments to this raster function.'
##        #return 
##
##    @property
##    def RasterInfo(self):
##        u'The raster information after this function is applied to an object.'
##        #return ppRasterInfo
##
##    def _get(self):
##        u'The raster function description.'
##        #return pDescription
##    def _set(self, pDescription):
##        u'The raster function description.'
##    Description = property(_get, _set, doc = _set.__doc__)
##

class IBuildFootprintsParameters(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control parameters to the build footprints operation.'
    _iid_ = GUID('{9F80035D-A4E5-4D7E-AF00-9BF94ED5C4B2}')
    _idlflags_ = ['oleautomation']
class IBuildFootprintsParameters2(IBuildFootprintsParameters):
    _case_insensitive_ = True
    u'Provides access to members that control parameters to the build footprints operation.'
    _iid_ = GUID('{74648190-BA1D-499B-97E1-7BAD62AE4357}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'esriBuildFootprintsMethods'
esriBuildFootprintsByGeometry = 0
esriBuildFootprintsByRadiometry = 1
esriBuildFootprintsByShrinking = 2
esriBuildFootprintsByCopyToSiblings = 3
esriBuildFootprintsMethods = c_int # enum
IBuildFootprintsParameters._methods_ = [
    COMMETHOD(['propput', helpstring(u'The method that determines how item footprints are computed.')], HRESULT, 'Method',
              ( ['in'], esriBuildFootprintsMethods, 'Method' )),
    COMMETHOD(['propget', helpstring(u'The method that determines how item footprints are computed.')], HRESULT, 'Method',
              ( ['retval', 'out'], POINTER(esriBuildFootprintsMethods), 'Method' )),
]
################################################################
## code template for IBuildFootprintsParameters implementation
##class IBuildFootprintsParameters_Impl(object):
##    def _get(self):
##        u'The method that determines how item footprints are computed.'
##        #return Method
##    def _set(self, Method):
##        u'The method that determines how item footprints are computed.'
##    Method = property(_get, _set, doc = _set.__doc__)
##

IBuildFootprintsParameters2._methods_ = [
    COMMETHOD(['propput', helpstring(u'The method that determines how footprint geometry is simplified.')], HRESULT, 'FootprintSimplificationMethod',
              ( ['in'], esriGeometrySimplificationMethod, 'pSimplificationMethod' )),
    COMMETHOD(['propget', helpstring(u'The method that determines how footprint geometry is simplified.')], HRESULT, 'FootprintSimplificationMethod',
              ( ['retval', 'out'], POINTER(esriGeometrySimplificationMethod), 'pSimplificationMethod' )),
]
################################################################
## code template for IBuildFootprintsParameters2 implementation
##class IBuildFootprintsParameters2_Impl(object):
##    def _get(self):
##        u'The method that determines how footprint geometry is simplified.'
##        #return pSimplificationMethod
##    def _set(self, pSimplificationMethod):
##        u'The method that determines how footprint geometry is simplified.'
##    FootprintSimplificationMethod = property(_get, _set, doc = _set.__doc__)
##

IRasterDataManagementEvents._methods_ = [
    COMMETHOD([helpstring(u'Performs operation on the raster data management event.')], HRESULT, 'OnEvent',
              ( ['in'], BSTR, 'EventName' ),
              ( ['in'], VARIANT, 'vParam' )),
]
################################################################
## code template for IRasterDataManagementEvents implementation
##class IRasterDataManagementEvents_Impl(object):
##    def OnEvent(self, EventName, vParam):
##        u'Performs operation on the raster data management event.'
##        #return 
##

class NITFBuilder(CoClass):
    u'A raster builder for NITF files.'
    _reg_clsid_ = GUID('{2C2351F9-9B7C-4208-8D17-34D7496007EE}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
NITFBuilder._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterBuilder2, IRasterBuilderInit]

class DEMosaicDatasetType(CoClass):
    u'The MosaicDataset Data Element object Type.'
    _reg_clsid_ = GUID('{704B42CB-266C-4169-BB3E-F4CA3A3256A0}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IDEMosaicDatasetType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to a Mosaic Dataset Data Element Type.'
    _iid_ = GUID('{445BEC21-30AF-421A-B163-E272B2E9DAF2}')
    _idlflags_ = ['oleautomation']
DEMosaicDatasetType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDEMosaicDatasetType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDERasterDatasetType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataElementType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGxFilterInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class OverviewBuilder(CoClass):
    u'A raster builder for overview datasets.'
    _reg_clsid_ = GUID('{24939700-BA0B-439D-954E-09D6F140CB71}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IOverviewBuilder(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control an overview builder.'
    _iid_ = GUID('{82FDD302-43C6-4F56-8E8E-5F11BBF920EB}')
    _idlflags_ = ['oleautomation']
OverviewBuilder._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterBuilder2, IRasterBuilderInit, IOverviewBuilder]

class IBuildFootprintsByGeometryParameters(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control parameters to the build footprints by Geometry operation.'
    _iid_ = GUID('{79D6FE35-A7F6-4975-84EC-EA08D359864D}')
    _idlflags_ = ['oleautomation']
IBuildFootprintsByGeometryParameters._methods_ = [
    COMMETHOD(['propput', helpstring(u'The maximum number of vertices in the output footprint.')], HRESULT, 'MaximumVertices',
              ( ['in'], c_int, 'pMaximumVertices' )),
    COMMETHOD(['propget', helpstring(u'The maximum number of vertices in the output footprint.')], HRESULT, 'MaximumVertices',
              ( ['retval', 'out'], POINTER(c_int), 'pMaximumVertices' )),
]
################################################################
## code template for IBuildFootprintsByGeometryParameters implementation
##class IBuildFootprintsByGeometryParameters_Impl(object):
##    def _get(self):
##        u'The maximum number of vertices in the output footprint.'
##        #return pMaximumVertices
##    def _set(self, pMaximumVertices):
##        u'The maximum number of vertices in the output footprint.'
##    MaximumVertices = property(_get, _set, doc = _set.__doc__)
##

class IRasterStatusEvent2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the raster status event.'
    _iid_ = GUID('{3872F080-B932-4A24-941D-21EC0D43F0B7}')
    _idlflags_ = ['oleautomation']
IRasterStatusEvent2._methods_ = [
    COMMETHOD([helpstring(u'The title of the event.')], HRESULT, 'Title',
              ( ['in'], BSTR, 'Title' )),
    COMMETHOD([helpstring(u'The message of the event.')], HRESULT, 'Message',
              ( ['in'], BSTR, 'Message' )),
    COMMETHOD([helpstring(u'Indicates whether the operation should be continued.')], HRESULT, 'Continue',
              ( ['out'], POINTER(VARIANT_BOOL), 'bContinue' )),
]
################################################################
## code template for IRasterStatusEvent2 implementation
##class IRasterStatusEvent2_Impl(object):
##    def Message(self, Message):
##        u'The message of the event.'
##        #return 
##
##    def Continue(self):
##        u'Indicates whether the operation should be continued.'
##        #return bContinue
##
##    def Title(self, Title):
##        u'The title of the event.'
##        #return 
##

class QuickBirdFileCrawler(CoClass):
    u'A crawler for QuickBird and WorldView files.'
    _reg_clsid_ = GUID('{6D09023D-535F-48FB-BD5F-BC500C451FEA}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
QuickBirdFileCrawler._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDataSourceCrawler2, IFileCrawler, IFileCrawler2, IItemPaths, IItemPaths2]


# values for enumeration 'esriCachedRasterCompressionType'
esriCachedRasterCompressionNone = 0
esriCachedRasterCompressionLossless = 1
esriCachedRasterCompressionLossy = 2
esriCachedRasterCompressionType = c_int # enum

# values for enumeration 'esriRasterKonradyType'
esriRasterKonradyESRI = 1
esriRasterKonradyUSGS = 2
esriRasterKonradyType = c_int # enum
class IRGB32PixelResampler(IPixelResampler):
    _case_insensitive_ = True
    u'Provides access to members that control a RGB 32-bit packed pixel resampler.'
    _iid_ = GUID('{7B45924F-D423-446A-BC51-2338DD853E23}')
    _idlflags_ = ['oleautomation']
IPixelResampler._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if this resampler can accept simplified point array for simple linear scaling.')], HRESULT, 'SupportLinearScaling',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pSupportLinearScaling' )),
    COMMETHOD(['propget', helpstring(u'Indicates if only linear scaling is necessary.')], HRESULT, 'LinearScaling',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pLinearScaling' )),
    COMMETHOD(['propput', helpstring(u'Indicates if only linear scaling is necessary.')], HRESULT, 'LinearScaling',
              ( ['in'], VARIANT_BOOL, 'pLinearScaling' )),
    COMMETHOD(['propget', helpstring(u'The resampling window size in terms of number of source pixels.')], HRESULT, 'WindowSize',
              ( ['retval', 'out'], POINTER(c_int), 'pNumPixels' )),
    COMMETHOD(['propget', helpstring(u'Indicates if this is a down sampling only type of resampler.')], HRESULT, 'DownSampling',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pDownSampling' )),
    COMMETHOD([helpstring(u'Resamples an input pixel block into an output pixel block.')], HRESULT, 'Resample',
              ( ['in'], c_int, 'iCol' ),
              ( ['in'], c_int, 'iRow' ),
              ( ['in'], c_int, 'nCols' ),
              ( ['in'], c_int, 'nRows' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPoint), 'points' ),
              ( ['in'], c_double, 'ulx' ),
              ( ['in'], c_double, 'uly' ),
              ( ['in'], c_double, 'Dx' ),
              ( ['in'], c_double, 'Dy' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IPixelBlock), 'pSrcPixelBlock' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IPixelBlock), 'pDstPixelBlock' )),
]
################################################################
## code template for IPixelResampler implementation
##class IPixelResampler_Impl(object):
##    @property
##    def WindowSize(self):
##        u'The resampling window size in terms of number of source pixels.'
##        #return pNumPixels
##
##    @property
##    def DownSampling(self):
##        u'Indicates if this is a down sampling only type of resampler.'
##        #return pDownSampling
##
##    @property
##    def SupportLinearScaling(self):
##        u'Indicates if this resampler can accept simplified point array for simple linear scaling.'
##        #return pSupportLinearScaling
##
##    def Resample(self, iCol, iRow, nCols, nRows, points, ulx, uly, Dx, Dy, pSrcPixelBlock, pDstPixelBlock):
##        u'Resamples an input pixel block into an output pixel block.'
##        #return 
##
##    def _get(self):
##        u'Indicates if only linear scaling is necessary.'
##        #return pLinearScaling
##    def _set(self, pLinearScaling):
##        u'Indicates if only linear scaling is necessary.'
##    LinearScaling = property(_get, _set, doc = _set.__doc__)
##

IRGB32PixelResampler._methods_ = [
    COMMETHOD(['propget', helpstring(u'The resampling method.')], HRESULT, 'ResamplingMethod',
              ( ['retval', 'out'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.rstResamplingTypes), 'pMethod' )),
    COMMETHOD(['propput', helpstring(u'The resampling method.')], HRESULT, 'ResamplingMethod',
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.rstResamplingTypes, 'pMethod' )),
    COMMETHOD(['propget', helpstring(u'The background value.')], HRESULT, 'Background',
              ( ['retval', 'out'], POINTER(VARIANT), 'pBackground' )),
    COMMETHOD(['propput', helpstring(u'The background value.')], HRESULT, 'Background',
              ( ['in'], VARIANT, 'pBackground' )),
]
################################################################
## code template for IRGB32PixelResampler implementation
##class IRGB32PixelResampler_Impl(object):
##    def _get(self):
##        u'The background value.'
##        #return pBackground
##    def _set(self, pBackground):
##        u'The background value.'
##    Background = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The resampling method.'
##        #return pMethod
##    def _set(self, pMethod):
##        u'The resampling method.'
##    ResamplingMethod = property(_get, _set, doc = _set.__doc__)
##

IRasterFunctionArguments._methods_ = [
    COMMETHOD([helpstring(u'Gets a named argument value.')], HRESULT, 'GetValue',
              ( ['in'], BSTR, 'Name' ),
              ( ['retval', 'out'], POINTER(VARIANT), 'pValue' )),
    COMMETHOD([helpstring(u'Puts a named argument value.')], HRESULT, 'PutValue',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], VARIANT, 'Value' )),
    COMMETHOD([helpstring(u'Removes a named argument value.')], HRESULT, 'Remove',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD([helpstring(u'Removes all argument values.')], HRESULT, 'RemoveAll'),
    COMMETHOD(['propget', helpstring(u'The list of all argument names.')], HRESULT, 'Names',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray)), 'ppNames' )),
    COMMETHOD(['propget', helpstring(u'The list of all arguments.')], HRESULT, 'Values',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IVariantArray)), 'ppArguments' )),
    COMMETHOD(['propget', helpstring(u'The list of all files associated with the arguments.')], HRESULT, 'FileList',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray)), 'ppFiles' )),
    COMMETHOD([helpstring(u'Resolves function variables using a row and set of properties.')], HRESULT, 'Resolve',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRow), 'pRow' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet), 'pPropertySet' )),
    COMMETHOD([helpstring(u'Updates function variables using a row and set of properties.')], HRESULT, 'Update',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRow), 'pRow' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet), 'pPropertySet' ),
              ( ['in'], POINTER(IRasterFunctionArguments), 'pTemplateArguments' )),
]
################################################################
## code template for IRasterFunctionArguments implementation
##class IRasterFunctionArguments_Impl(object):
##    def PutValue(self, Name, Value):
##        u'Puts a named argument value.'
##        #return 
##
##    def Resolve(self, pRow, pPropertySet):
##        u'Resolves function variables using a row and set of properties.'
##        #return 
##
##    def Update(self, pRow, pPropertySet, pTemplateArguments):
##        u'Updates function variables using a row and set of properties.'
##        #return 
##
##    def Remove(self, Name):
##        u'Removes a named argument value.'
##        #return 
##
##    def GetValue(self, Name):
##        u'Gets a named argument value.'
##        #return pValue
##
##    def RemoveAll(self):
##        u'Removes all argument values.'
##        #return 
##
##    @property
##    def Values(self):
##        u'The list of all arguments.'
##        #return ppArguments
##
##    @property
##    def Names(self):
##        u'The list of all argument names.'
##        #return ppNames
##
##    @property
##    def FileList(self):
##        u'The list of all files associated with the arguments.'
##        #return ppFiles
##

IRasterFunctionArguments2._methods_ = [
    COMMETHOD([helpstring(u'Saves raster function arguments to JSON.')], HRESULT, 'ToJSON',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IJSONObject)), 'pJSON' )),
    COMMETHOD([helpstring(u'Loads raster function arguments from JSON.')], HRESULT, 'FromJSON',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IJSONObject), 'pJSON' ),
              ( ['in'], POINTER(IRasterFunctionTemplateMapper), 'pOptRFTMapper' )),
]
################################################################
## code template for IRasterFunctionArguments2 implementation
##class IRasterFunctionArguments2_Impl(object):
##    def ToJSON(self):
##        u'Saves raster function arguments to JSON.'
##        #return pJSON
##
##    def FromJSON(self, pJSON, pOptRFTMapper):
##        u'Loads raster function arguments from JSON.'
##        #return 
##

class ShadedReliefFunctionArguments(CoClass):
    u'The Shaded Relief function arguments.'
    _reg_clsid_ = GUID('{C0C4F4DB-7F2A-4050-A1E2-89CD7868C43A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IShadedReliefFunctionArguments(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control shaded relief function arguments.'
    _iid_ = GUID('{9604BBDB-CEA1-4F79-AA62-CEA3A0A50853}')
    _idlflags_ = ['oleautomation']
ShadedReliefFunctionArguments._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunctionArguments, IRasterFunctionArguments2, IShadedReliefFunctionArguments, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class IRasterBand(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a raster band object.'
    _iid_ = GUID('{31E6C041-EC46-11D1-8D21-0000F8780535}')
    _idlflags_ = ['oleautomation']
class IEnumRasterBand(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a raster band enumerator object.'
    _iid_ = GUID('{7ACA3D03-0629-11D2-8D24-0000F8780535}')
    _idlflags_ = ['oleautomation']
IRasterBandCollection._methods_ = [
    COMMETHOD([helpstring(u'Adds a RasterBand to the band collection.')], HRESULT, 'Add',
              ( ['in'], POINTER(IRasterBand), 'Element' ),
              ( ['in'], c_int, 'index' )),
    COMMETHOD(['propget', helpstring(u'The number of bands in the collection.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD([helpstring(u'Removes all the elements in the collection.')], HRESULT, 'Clear'),
    COMMETHOD([helpstring(u'Removes an element from the collection.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'index' )),
    COMMETHOD(['propget', helpstring(u'The index of a RasterBand given its name.')], HRESULT, 'BandIndex',
              ( ['in'], BSTR, 'Name' ),
              ( ['retval', 'out'], POINTER(c_int), 'BandIndex' )),
    COMMETHOD(['propget', helpstring(u'A RasterBand given its name.')], HRESULT, 'BandByName',
              ( ['in'], BSTR, 'Name' ),
              ( ['retval', 'out'], POINTER(POINTER(IRasterBand)), 'band' )),
    COMMETHOD(['propget', helpstring(u'All the bands in the collection as an interface to the RasterBands enumerator object.')], HRESULT, 'Bands',
              ( ['retval', 'out'], POINTER(POINTER(IEnumRasterBand)), 'Bands' )),
    COMMETHOD([helpstring(u'Returns a RasterBand given its index.')], HRESULT, 'Item',
              ( ['in'], c_int, 'BandIndex' ),
              ( ['retval', 'out'], POINTER(POINTER(IRasterBand)), 'band' )),
    COMMETHOD([helpstring(u'Creates a new persistent RasterDataset with the bands in the collection.')], HRESULT, 'SaveAs',
              ( ['in'], BSTR, 'new_name' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspace), 'worksp' ),
              ( ['in'], BSTR, 'Format' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataset)), 'rds' )),
    COMMETHOD([helpstring(u'Appends a RasterBand to the band collection.')], HRESULT, 'AppendBand',
              ( ['in'], POINTER(IRasterBand), 'Element' )),
    COMMETHOD([helpstring(u'Appends a collection of RasterBands to the band collection.')], HRESULT, 'AppendBands',
              ( ['in'], POINTER(IRasterBandCollection), 'Bands' )),
]
################################################################
## code template for IRasterBandCollection implementation
##class IRasterBandCollection_Impl(object):
##    @property
##    def Count(self):
##        u'The number of bands in the collection.'
##        #return Count
##
##    def SaveAs(self, new_name, worksp, Format):
##        u'Creates a new persistent RasterDataset with the bands in the collection.'
##        #return rds
##
##    def Item(self, BandIndex):
##        u'Returns a RasterBand given its index.'
##        #return band
##
##    @property
##    def Bands(self):
##        u'All the bands in the collection as an interface to the RasterBands enumerator object.'
##        #return Bands
##
##    def Clear(self):
##        u'Removes all the elements in the collection.'
##        #return 
##
##    def Remove(self, index):
##        u'Removes an element from the collection.'
##        #return 
##
##    def AppendBands(self, Bands):
##        u'Appends a collection of RasterBands to the band collection.'
##        #return 
##
##    @property
##    def BandByName(self, Name):
##        u'A RasterBand given its name.'
##        #return band
##
##    def Add(self, Element, index):
##        u'Adds a RasterBand to the band collection.'
##        #return 
##
##    def AppendBand(self, Element):
##        u'Appends a RasterBand to the band collection.'
##        #return 
##
##    @property
##    def BandIndex(self, Name):
##        u'The index of a RasterBand given its name.'
##        #return BandIndex
##

class IRasterTypeDataSourceHandlerParameters2(IRasterTypeDataSourceHandlerParameters):
    _case_insensitive_ = True
    u'Provides access to members that control parameters to raster type data source handler.'
    _iid_ = GUID('{2127D1AE-1E6F-4B55-8295-EC0D343E5893}')
    _idlflags_ = []
IRasterTypeDataSourceHandlerParameters2._methods_ = [
    COMMETHOD(['propputref', helpstring(u'Override parameters injected into the raster types while contructing a function raster dataset from a data source.')], HRESULT, 'RasterTypeParameters',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet), 'ppRasterTypeParameters' )),
    COMMETHOD(['propget', helpstring(u'Override parameters injected into the raster types while contructing a function raster dataset from a data source.')], HRESULT, 'RasterTypeParameters',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet)), 'ppRasterTypeParameters' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether sensor raster types are used in the attempt to load the data source.')], HRESULT, 'AllowBuilderItems',
              ( ['in'], VARIANT_BOOL, 'pbAllowBuilderItems' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether sensor raster types are used in the attempt to load the data source.')], HRESULT, 'AllowBuilderItems',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbAllowBuilderItems' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether an attempt is made to load the data source as a non-sensor-dataset: i.e., a regular raster dataset, a mosaic dataset or a raster catalog item, a web service or image service item URL.')], HRESULT, 'AllowRasterDatasets',
              ( ['in'], VARIANT_BOOL, 'pbAllowRasterDatasets' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether an attempt is made to load the data source as a non-sensor-dataset: i.e., a regular raster dataset, a mosaic dataset or a raster catalog item, a web service or image service item URL.')], HRESULT, 'AllowRasterDatasets',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbAllowRasterDatasets' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether an applicable data source (like a mosaic dataset item) loads with only basic information. Preventing it from connecting to pixel data (referenced by the underlying rasters in the function stack) can substantially improve performance of IRaste?!?\x08?&')], HRESULT, 'AllowQuickOpen',
              ( ['in'], VARIANT_BOOL, 'pbAllowQuickOpen' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether an applicable data source (like a mosaic dataset item) loads with only basic information. Preventing it from connecting to pixel data (referenced by the underlying rasters in the function stack) can substantially improve performance of IRaste?!?\x08?&')], HRESULT, 'AllowQuickOpen',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbAllowQuickOpen' )),
]
################################################################
## code template for IRasterTypeDataSourceHandlerParameters2 implementation
##class IRasterTypeDataSourceHandlerParameters2_Impl(object):
##    def _get(self):
##        u'Indicates whether sensor raster types are used in the attempt to load the data source.'
##        #return pbAllowBuilderItems
##    def _set(self, pbAllowBuilderItems):
##        u'Indicates whether sensor raster types are used in the attempt to load the data source.'
##    AllowBuilderItems = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether an attempt is made to load the data source as a non-sensor-dataset: i.e., a regular raster dataset, a mosaic dataset or a raster catalog item, a web service or image service item URL.'
##        #return pbAllowRasterDatasets
##    def _set(self, pbAllowRasterDatasets):
##        u'Indicates whether an attempt is made to load the data source as a non-sensor-dataset: i.e., a regular raster dataset, a mosaic dataset or a raster catalog item, a web service or image service item URL.'
##    AllowRasterDatasets = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether an applicable data source (like a mosaic dataset item) loads with only basic information. Preventing it from connecting to pixel data (referenced by the underlying rasters in the function stack) can substantially improve performance of IRaste?!?\x08?&'
##        #return pbAllowQuickOpen
##    def _set(self, pbAllowQuickOpen):
##        u'Indicates whether an applicable data source (like a mosaic dataset item) loads with only basic information. Preventing it from connecting to pixel data (referenced by the underlying rasters in the function stack) can substantially improve performance of IRaste?!?\x08?&'
##    AllowQuickOpen = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def RasterTypeParameters(self, ppRasterTypeParameters):
##        u'Override parameters injected into the raster types while contructing a function raster dataset from a data source.'
##        #return 
##

class IRadarCalibrationFunctionArguments(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control radiometric calibration for radar imagery.'
    _iid_ = GUID('{7C3D23E7-0F17-4EAF-A44B-9E7A97352FBD}')
    _idlflags_ = ['oleautomation']
IRadarCalibrationFunctionArguments._methods_ = [
    COMMETHOD(['propget', helpstring(u'The source raster object.')], HRESULT, 'Raster',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppRaster' )),
    COMMETHOD(['propputref', helpstring(u'The source raster object.')], HRESULT, 'Raster',
              ( ['in'], POINTER(IUnknown), 'ppRaster' )),
    COMMETHOD(['propput', helpstring(u'The type of calibration.')], HRESULT, 'CalibrationType',
              ( ['in'], esriRadarCalibration, 'pType' )),
    COMMETHOD(['propget', helpstring(u'The type of calibration.')], HRESULT, 'CalibrationType',
              ( ['retval', 'out'], POINTER(esriRadarCalibration), 'pType' )),
]
################################################################
## code template for IRadarCalibrationFunctionArguments implementation
##class IRadarCalibrationFunctionArguments_Impl(object):
##    def Raster(self, ppRaster):
##        u'The source raster object.'
##        #return 
##
##    def _get(self):
##        u'The type of calibration.'
##        #return pType
##    def _set(self, pType):
##        u'The type of calibration.'
##    CalibrationType = property(_get, _set, doc = _set.__doc__)
##

IRasterFunctionHelper._methods_ = [
    COMMETHOD([helpstring(u'Binds function arguments to the associated raster function.')], HRESULT, 'Bind',
              ( ['in'], POINTER(IUnknown), 'pArguments' )),
    COMMETHOD(['propget', helpstring(u'The raster information after this function is applied to an object.')], HRESULT, 'RasterInfo',
              ( ['retval', 'out'], POINTER(POINTER(IRasterInfo)), 'ppRasterInfo' )),
    COMMETHOD([helpstring(u'Reads a pixel block starting from the top left corner.')], HRESULT, 'Read',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IPnt), 'pTlc' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pReferenceRaster' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IPixelBlock), 'pPixelBlock' )),
    COMMETHOD(['propget', helpstring(u'Indicates if this raster source wants to perform resampling.')], HRESULT, 'Resampling',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pResampling' )),
    COMMETHOD(['propput', helpstring(u'Indicates if this raster source wants to perform resampling.')], HRESULT, 'Resampling',
              ( ['in'], VARIANT_BOOL, 'pResampling' )),
    COMMETHOD(['propget', helpstring(u'The properties to be used in reference raster.')], HRESULT, 'ReferenceProperties',
              ( ['retval', 'out'], POINTER(c_int), 'pReferenceProperties' )),
    COMMETHOD(['propput', helpstring(u'The properties to be used in reference raster.')], HRESULT, 'ReferenceProperties',
              ( ['in'], c_int, 'pReferenceProperties' )),
    COMMETHOD(['propget', helpstring(u'Indicates if this function supports band selection.')], HRESULT, 'SupportBandSelection',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pSupportBandSelection' )),
    COMMETHOD(['propput', helpstring(u'Indicates if this function supports band selection.')], HRESULT, 'SupportBandSelection',
              ( ['in'], VARIANT_BOOL, 'pSupportBandSelection' )),
    COMMETHOD([helpstring(u'Creates a new raster using a given reference raster.')], HRESULT, 'CreateRaster',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pReferenceRaster' ),
              ( ['out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray)), 'ppBandIDs' ),
              ( ['out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster)), 'ppNewRaster' )),
    COMMETHOD(['propget', helpstring(u'The current source raster.')], HRESULT, 'Raster',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster)), 'ppRaster' )),
]
################################################################
## code template for IRasterFunctionHelper implementation
##class IRasterFunctionHelper_Impl(object):
##    @property
##    def Raster(self):
##        u'The current source raster.'
##        #return ppRaster
##
##    def _get(self):
##        u'Indicates if this raster source wants to perform resampling.'
##        #return pResampling
##    def _set(self, pResampling):
##        u'Indicates if this raster source wants to perform resampling.'
##    Resampling = property(_get, _set, doc = _set.__doc__)
##
##    def Read(self, pTlc, pRaster, pReferenceRaster, pPixelBlock):
##        u'Reads a pixel block starting from the top left corner.'
##        #return 
##
##    def Bind(self, pArguments):
##        u'Binds function arguments to the associated raster function.'
##        #return 
##
##    def _get(self):
##        u'Indicates if this function supports band selection.'
##        #return pSupportBandSelection
##    def _set(self, pSupportBandSelection):
##        u'Indicates if this function supports band selection.'
##    SupportBandSelection = property(_get, _set, doc = _set.__doc__)
##
##    def CreateRaster(self, pRaster, pReferenceRaster):
##        u'Creates a new raster using a given reference raster.'
##        #return ppBandIDs, ppNewRaster
##
##    @property
##    def RasterInfo(self):
##        u'The raster information after this function is applied to an object.'
##        #return ppRasterInfo
##
##    def _get(self):
##        u'The properties to be used in reference raster.'
##        #return pReferenceProperties
##    def _set(self, pReferenceProperties):
##        u'The properties to be used in reference raster.'
##    ReferenceProperties = property(_get, _set, doc = _set.__doc__)
##

IRasterHistogram._methods_ = [
    COMMETHOD(['propget', helpstring(u'Count array in doubles.')], HRESULT, 'Counts',
              ( ['retval', 'out'], POINTER(VARIANT), 'pVal' )),
    COMMETHOD(['propput', helpstring(u'Count array in doubles.')], HRESULT, 'Counts',
              ( ['in'], VARIANT, 'pVal' )),
    COMMETHOD([helpstring(u'Translates pixel values to integer Bin index.')], HRESULT, 'Bin',
              ( ['in'], c_double, 'pixval' ),
              ( ['retval', 'out'], POINTER(c_int), 'Bin' )),
    COMMETHOD(['propget', helpstring(u'The Bin function that maps pixel value into histogram index.')], HRESULT, 'BinFunction',
              ( ['retval', 'out'], POINTER(POINTER(IBinFunction)), 'pVal' )),
]
################################################################
## code template for IRasterHistogram implementation
##class IRasterHistogram_Impl(object):
##    def Bin(self, pixval):
##        u'Translates pixel values to integer Bin index.'
##        #return Bin
##
##    def _get(self):
##        u'Count array in doubles.'
##        #return pVal
##    def _set(self, pVal):
##        u'Count array in doubles.'
##    Counts = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def BinFunction(self):
##        u'The Bin function that maps pixel value into histogram index.'
##        #return pVal
##

class IRemapFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a remap filter.'
    _iid_ = GUID('{2F07BE89-35D7-4CF3-BE0D-2F13E56948F0}')
    _idlflags_ = ['oleautomation']
IRemapFilter._methods_ = [
    COMMETHOD(['propget', helpstring(u'The number of remapped classes.')], HRESULT, 'ClassCount',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD([helpstring(u'Adds a remap class that remaps values in [minvalue,maxvalue) to a give new value.')], HRESULT, 'AddClass',
              ( ['in'], c_double, 'minvalue' ),
              ( ['in'], c_double, 'maxvalue' ),
              ( ['in'], c_double, 'newvalue' )),
    COMMETHOD([helpstring(u'Adds a remap class that remaps values in [minvalue,maxvalue) to NoData.')], HRESULT, 'AddNoDataClass',
              ( ['in'], c_double, 'minvalue' ),
              ( ['in'], c_double, 'maxvalue' )),
    COMMETHOD([helpstring(u'Queries a remap class at a given class index (starting from 0).')], HRESULT, 'QueryClass',
              ( ['in'], c_int, 'index' ),
              ( ['out'], POINTER(c_double), 'minvalue' ),
              ( ['out'], POINTER(c_double), 'maxvalue' ),
              ( ['out'], POINTER(c_double), 'newvalue' )),
    COMMETHOD([helpstring(u'Puts a remap class at a given class index (starting from 0).')], HRESULT, 'PutClass',
              ( ['in'], c_int, 'index' ),
              ( ['in'], c_double, 'minvalue' ),
              ( ['in'], c_double, 'maxvalue' ),
              ( ['in'], c_double, 'newvalue' )),
    COMMETHOD([helpstring(u'Removes all classes.')], HRESULT, 'Empty'),
    COMMETHOD(['propget', helpstring(u'Indicates if unmatched values should be passed through.')], HRESULT, 'AllowUnmatched',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pAllowUnmatched' )),
    COMMETHOD(['propput', helpstring(u'Indicates if unmatched values should be passed through.')], HRESULT, 'AllowUnmatched',
              ( ['in'], VARIANT_BOOL, 'pAllowUnmatched' )),
]
################################################################
## code template for IRemapFilter implementation
##class IRemapFilter_Impl(object):
##    def PutClass(self, index, minvalue, maxvalue, newvalue):
##        u'Puts a remap class at a given class index (starting from 0).'
##        #return 
##
##    def AddNoDataClass(self, minvalue, maxvalue):
##        u'Adds a remap class that remaps values in [minvalue,maxvalue) to NoData.'
##        #return 
##
##    @property
##    def ClassCount(self):
##        u'The number of remapped classes.'
##        #return pCount
##
##    def _get(self):
##        u'Indicates if unmatched values should be passed through.'
##        #return pAllowUnmatched
##    def _set(self, pAllowUnmatched):
##        u'Indicates if unmatched values should be passed through.'
##    AllowUnmatched = property(_get, _set, doc = _set.__doc__)
##
##    def QueryClass(self, index):
##        u'Queries a remap class at a given class index (starting from 0).'
##        #return minvalue, maxvalue, newvalue
##
##    def Empty(self):
##        u'Removes all classes.'
##        #return 
##
##    def AddClass(self, minvalue, maxvalue, newvalue):
##        u'Adds a remap class that remaps values in [minvalue,maxvalue) to a give new value.'
##        #return 
##

class IAddRastersParameters(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control parameters for adding rasters to a mosaic dataset.'
    _iid_ = GUID('{88062D66-B095-4616-BBBE-5931B1FE1C4D}')
    _idlflags_ = ['oleautomation']
IAddRastersParameters._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The data source crawler that provides incoming data source items.')], HRESULT, 'Crawler',
              ( ['in'], POINTER(IDataSourceCrawler), 'ppCrawler' )),
    COMMETHOD(['propget', helpstring(u'The data source crawler that provides incoming data source items.')], HRESULT, 'Crawler',
              ( ['retval', 'out'], POINTER(POINTER(IDataSourceCrawler)), 'ppCrawler' )),
    COMMETHOD(['propputref', helpstring(u'The raster type used for constructing raster datasets using incoming data source items.')], HRESULT, 'RasterType',
              ( ['in'], POINTER(IRasterType), 'ppRasterType' )),
    COMMETHOD(['propget', helpstring(u'The raster type used for constructing raster datasets using incoming data source items.')], HRESULT, 'RasterType',
              ( ['retval', 'out'], POINTER(POINTER(IRasterType)), 'ppRasterType' )),
    COMMETHOD(['propput', helpstring(u'Indicates how incoming duplicates items are handled. Item URIs with the same key value are assumed to be duplicate.')], HRESULT, 'DuplicateItemsAction',
              ( ['in'], esriDuplicateItemsAction, 'pAction' )),
    COMMETHOD(['propget', helpstring(u'Indicates how incoming duplicates items are handled. Item URIs with the same key value are assumed to be duplicate.')], HRESULT, 'DuplicateItemsAction',
              ( ['retval', 'out'], POINTER(esriDuplicateItemsAction), 'pAction' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether catalog items are synchronized once added to the mosaic dataset.')], HRESULT, 'SynchronizeItems',
              ( ['in'], VARIANT_BOOL, 'pbSynchronizeItems' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether catalog items are synchronized once added to the mosaic dataset.')], HRESULT, 'SynchronizeItems',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbSynchronizeItems' )),
    COMMETHOD(['propput', helpstring(u'Inidicates whether to allow items to be build as soon as they are added to the mosaic dataset (as long as the raster type allows in-place synchronization).')], HRESULT, 'AllowInPlaceSync',
              ( ['in'], VARIANT_BOOL, 'pbAllowInPlaceSync' )),
    COMMETHOD(['propget', helpstring(u'Inidicates whether to allow items to be build as soon as they are added to the mosaic dataset (as long as the raster type allows in-place synchronization).')], HRESULT, 'AllowInPlaceSync',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbAllowInPlaceSync' )),
    COMMETHOD(['propput', helpstring(u"Regular expression formed using wild card characters ('*', '?', or '.') for matching data source items created by the crawler. No item URIs are requested for those data sources don't match the specified regular expression.")], HRESULT, 'Filter',
              ( ['in'], BSTR, 'pFilter' )),
    COMMETHOD(['propget', helpstring(u"Regular expression formed using wild card characters ('*', '?', or '.') for matching data source items created by the crawler. No item URIs are requested for those data sources don't match the specified regular expression.")], HRESULT, 'Filter',
              ( ['retval', 'out'], POINTER(BSTR), 'pFilter' )),
    COMMETHOD(['propputref', helpstring(u"The range of allowed time value for Item URIs. Item URIs with 'SourceTimeStamp' that don't lie within the specified range are filtered out.")], HRESULT, 'TimeExtent',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITimeExtent), 'ppTimeExtent' )),
    COMMETHOD(['propget', helpstring(u"The range of allowed time value for Item URIs. Item URIs with 'SourceTimeStamp' that don't lie within the specified range are filtered out.")], HRESULT, 'TimeExtent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITimeExtent)), 'ppTimeExtent' )),
]
################################################################
## code template for IAddRastersParameters implementation
##class IAddRastersParameters_Impl(object):
##    def _get(self):
##        u'Indicates how incoming duplicates items are handled. Item URIs with the same key value are assumed to be duplicate.'
##        #return pAction
##    def _set(self, pAction):
##        u'Indicates how incoming duplicates items are handled. Item URIs with the same key value are assumed to be duplicate.'
##    DuplicateItemsAction = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def TimeExtent(self, ppTimeExtent):
##        u"The range of allowed time value for Item URIs. Item URIs with 'SourceTimeStamp' that don't lie within the specified range are filtered out."
##        #return 
##
##    def _get(self):
##        u'Inidicates whether to allow items to be build as soon as they are added to the mosaic dataset (as long as the raster type allows in-place synchronization).'
##        #return pbAllowInPlaceSync
##    def _set(self, pbAllowInPlaceSync):
##        u'Inidicates whether to allow items to be build as soon as they are added to the mosaic dataset (as long as the raster type allows in-place synchronization).'
##    AllowInPlaceSync = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u"Regular expression formed using wild card characters ('*', '?', or '.') for matching data source items created by the crawler. No item URIs are requested for those data sources don't match the specified regular expression."
##        #return pFilter
##    def _set(self, pFilter):
##        u"Regular expression formed using wild card characters ('*', '?', or '.') for matching data source items created by the crawler. No item URIs are requested for those data sources don't match the specified regular expression."
##    Filter = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def RasterType(self, ppRasterType):
##        u'The raster type used for constructing raster datasets using incoming data source items.'
##        #return 
##
##    def _get(self):
##        u'Indicates whether catalog items are synchronized once added to the mosaic dataset.'
##        #return pbSynchronizeItems
##    def _set(self, pbSynchronizeItems):
##        u'Indicates whether catalog items are synchronized once added to the mosaic dataset.'
##    SynchronizeItems = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Crawler(self, ppCrawler):
##        u'The data source crawler that provides incoming data source items.'
##        #return 
##

class IBuildFootprintsByRadiometryParameters(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control parameters to the build footprints by Radiometry operation.'
    _iid_ = GUID('{A32544A5-BABA-47D6-B3A8-ED87AFE334F6}')
    _idlflags_ = ['oleautomation']
class IBuildFootprintsByRadiometryParameters2(IBuildFootprintsByRadiometryParameters):
    _case_insensitive_ = True
    u'Provides access to members that control parameters to the build footprints operation.'
    _iid_ = GUID('{5BA3D476-D8AE-4E69-810C-57A8ECF2BFD0}')
    _idlflags_ = ['oleautomation']
IBuildFootprintsByRadiometryParameters._methods_ = [
    COMMETHOD(['propput', helpstring(u'The minimum valid pixel value.')], HRESULT, 'MinimumValidDataValue',
              ( ['in'], c_double, 'pMinimumDataValue' )),
    COMMETHOD(['propget', helpstring(u'The minimum valid pixel value.')], HRESULT, 'MinimumValidDataValue',
              ( ['retval', 'out'], POINTER(c_double), 'pMinimumDataValue' )),
    COMMETHOD(['propput', helpstring(u'The maximum valid pixel value.')], HRESULT, 'MaximumValidDataValue',
              ( ['in'], c_double, 'pMaximumDataValue' )),
    COMMETHOD(['propget', helpstring(u'The maximum valid pixel value.')], HRESULT, 'MaximumValidDataValue',
              ( ['retval', 'out'], POINTER(c_double), 'pMaximumDataValue' )),
    COMMETHOD(['propput', helpstring(u'The recommended number of pixels (in any one dimension) of the resampled raster requested off the dataset associated with each selected item. A lower value in this parameter translates to a lower resolution raster and results in a coarser footprint geometry.')], HRESULT, 'RequestSize',
              ( ['in'], c_int, 'pRequestSize' )),
    COMMETHOD(['propget', helpstring(u'The recommended number of pixels (in any one dimension) of the resampled raster requested off the dataset associated with each selected item. A lower value in this parameter translates to a lower resolution raster and results in a coarser footprint geometry.')], HRESULT, 'RequestSize',
              ( ['retval', 'out'], POINTER(c_int), 'pRequestSize' )),
    COMMETHOD(['propput', helpstring(u'The maximum number of vertices in the computed footprint geometry.')], HRESULT, 'MaximumVertices',
              ( ['in'], c_int, 'pMaximumVertices' )),
    COMMETHOD(['propget', helpstring(u'The maximum number of vertices in the computed footprint geometry.')], HRESULT, 'MaximumVertices',
              ( ['retval', 'out'], POINTER(c_int), 'pMaximumVertices' )),
    COMMETHOD(['propput', helpstring(u'The minimum number of pixels used for computing valid region.')], HRESULT, 'MinimumRegionSize',
              ( ['in'], c_int, 'pMinimumRegionSize' )),
    COMMETHOD(['propget', helpstring(u'The minimum number of pixels used for computing valid region.')], HRESULT, 'MinimumRegionSize',
              ( ['retval', 'out'], POINTER(c_int), 'pMinimumRegionSize' )),
]
################################################################
## code template for IBuildFootprintsByRadiometryParameters implementation
##class IBuildFootprintsByRadiometryParameters_Impl(object):
##    def _get(self):
##        u'The minimum valid pixel value.'
##        #return pMinimumDataValue
##    def _set(self, pMinimumDataValue):
##        u'The minimum valid pixel value.'
##    MinimumValidDataValue = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The maximum number of vertices in the computed footprint geometry.'
##        #return pMaximumVertices
##    def _set(self, pMaximumVertices):
##        u'The maximum number of vertices in the computed footprint geometry.'
##    MaximumVertices = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The minimum number of pixels used for computing valid region.'
##        #return pMinimumRegionSize
##    def _set(self, pMinimumRegionSize):
##        u'The minimum number of pixels used for computing valid region.'
##    MinimumRegionSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The recommended number of pixels (in any one dimension) of the resampled raster requested off the dataset associated with each selected item. A lower value in this parameter translates to a lower resolution raster and results in a coarser footprint geometry.'
##        #return pRequestSize
##    def _set(self, pRequestSize):
##        u'The recommended number of pixels (in any one dimension) of the resampled raster requested off the dataset associated with each selected item. A lower value in this parameter translates to a lower resolution raster and results in a coarser footprint geometry.'
##    RequestSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The maximum valid pixel value.'
##        #return pMaximumDataValue
##    def _set(self, pMaximumDataValue):
##        u'The maximum valid pixel value.'
##    MaximumValidDataValue = property(_get, _set, doc = _set.__doc__)
##

IBuildFootprintsByRadiometryParameters2._methods_ = [
    COMMETHOD(['propput', helpstring(u'The circularity value below which a polygon is considered a sliver.')], HRESULT, 'MinimumCircularity',
              ( ['in'], c_double, 'pMinimumDataValue' )),
    COMMETHOD(['propget', helpstring(u'The circularity value below which a polygon is considered a sliver.')], HRESULT, 'MinimumCircularity',
              ( ['retval', 'out'], POINTER(c_double), 'pMinimumDataValue' )),
    COMMETHOD(['propput', helpstring(u'The maximum allowed size (in pixels) below which a polygon may be considered as a sliver.')], HRESULT, 'MaximumSliverSize',
              ( ['in'], c_int, 'pMaxSliverSize' )),
    COMMETHOD(['propget', helpstring(u'The maximum allowed size (in pixels) below which a polygon may be considered as a sliver.')], HRESULT, 'MaximumSliverSize',
              ( ['retval', 'out'], POINTER(c_int), 'pMaxSliverSize' )),
]
################################################################
## code template for IBuildFootprintsByRadiometryParameters2 implementation
##class IBuildFootprintsByRadiometryParameters2_Impl(object):
##    def _get(self):
##        u'The maximum allowed size (in pixels) below which a polygon may be considered as a sliver.'
##        #return pMaxSliverSize
##    def _set(self, pMaxSliverSize):
##        u'The maximum allowed size (in pixels) below which a polygon may be considered as a sliver.'
##    MaximumSliverSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The circularity value below which a polygon is considered a sliver.'
##        #return pMinimumDataValue
##    def _set(self, pMinimumDataValue):
##        u'The circularity value below which a polygon is considered a sliver.'
##    MinimumCircularity = property(_get, _set, doc = _set.__doc__)
##

class IPixelFilterCollection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a raster filter collection.'
    _iid_ = GUID('{9E73CB76-57E8-4D93-BB45-1F4552A9C8DE}')
    _idlflags_ = ['oleautomation']
class IPixelFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a pixel filter.'
    _iid_ = GUID('{90E3DE9D-4FFF-4575-B833-3AD29A57EECA}')
    _idlflags_ = ['oleautomation']
IPixelFilterCollection._methods_ = [
    COMMETHOD(['propget', helpstring(u'The number of filters in this collection.')], HRESULT, 'FilterCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD([helpstring(u'Inserts a raster filter at a given index.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'index' ),
              ( ['in'], POINTER(IPixelFilter), 'pFilter' )),
    COMMETHOD([helpstring(u'Appends a raster filter to the end.')], HRESULT, 'Append',
              ( ['in'], POINTER(IPixelFilter), 'pFilter' )),
    COMMETHOD([helpstring(u'Removes a raster filter at a given index.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'index' )),
    COMMETHOD([helpstring(u'Finds a given raster filter and returns its index position.')], HRESULT, 'Find',
              ( ['in'], POINTER(IPixelFilter), 'pFilter' ),
              ( ['retval', 'out'], POINTER(c_int), 'index' )),
    COMMETHOD([helpstring(u'Gets the raster filter at a given index position.')], HRESULT, 'Get',
              ( ['in'], c_int, 'index' ),
              ( ['retval', 'out'], POINTER(POINTER(IPixelFilter)), 'ppFilter' )),
    COMMETHOD([helpstring(u'Sets the raster filter at a given index position.')], HRESULT, 'Set',
              ( ['in'], c_int, 'index' ),
              ( ['in'], POINTER(IPixelFilter), 'pFilter' )),
    COMMETHOD([helpstring(u'Empties this raster filter collection.')], HRESULT, 'Empty'),
]
################################################################
## code template for IPixelFilterCollection implementation
##class IPixelFilterCollection_Impl(object):
##    def Insert(self, index, pFilter):
##        u'Inserts a raster filter at a given index.'
##        #return 
##
##    def Set(self, index, pFilter):
##        u'Sets the raster filter at a given index position.'
##        #return 
##
##    def Get(self, index):
##        u'Gets the raster filter at a given index position.'
##        #return ppFilter
##
##    @property
##    def FilterCount(self):
##        u'The number of filters in this collection.'
##        #return Count
##
##    def Remove(self, index):
##        u'Removes a raster filter at a given index.'
##        #return 
##
##    def Empty(self):
##        u'Empties this raster filter collection.'
##        #return 
##
##    def Find(self, pFilter):
##        u'Finds a given raster filter and returns its index position.'
##        #return index
##
##    def Append(self, pFilter):
##        u'Appends a raster filter to the end.'
##        #return 
##

class RasterInfoFunction(CoClass):
    u'The raster info function for modifying raster properties.'
    _reg_clsid_ = GUID('{D44242BF-18E8-4670-9F0A-132F0AA58B17}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
RasterInfoFunction._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunction, IRasterFunction2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, IRasterKeyProperties]

class IRasterColormapToRGBConversion(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that convert between colormap and RGB Raster.'
    _iid_ = GUID('{2B37ACD6-314F-420B-A2E7-CA85465488FE}')
    _idlflags_ = ['oleautomation']
IRasterColormapToRGBConversion._methods_ = [
    COMMETHOD([helpstring(u'Converts a RGB raster dataset to a colormap raster dataset.')], HRESULT, 'RGBToColormap',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterDataset), 'pRasterDataset' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspace), 'pWorkspace' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Format' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName)), 'ppName' )),
    COMMETHOD([helpstring(u'Converts a RGB raster to a colormap raster dataset.')], HRESULT, 'RGBRasterToColormap',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspace), 'pWorkspace' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Format' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName)), 'ppName' )),
    COMMETHOD([helpstring(u'Converts a colormap raster dataset to a RGB raster dataset.')], HRESULT, 'ColormapToRGB',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterDataset), 'pRasterDataset' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspace), 'pWorkspace' ),
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Format' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName)), 'ppName' )),
    COMMETHOD([helpstring(u'Creates a RGB multiband raster from a colormap raster dataset.')], HRESULT, 'CreateRGBRaster',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterDataset), 'pRasterDataset' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster)), 'ppRaster' )),
]
################################################################
## code template for IRasterColormapToRGBConversion implementation
##class IRasterColormapToRGBConversion_Impl(object):
##    def RGBToColormap(self, pRasterDataset, pWorkspace, Name, Format):
##        u'Converts a RGB raster dataset to a colormap raster dataset.'
##        #return ppName
##
##    def RGBRasterToColormap(self, pRaster, pWorkspace, Name, Format):
##        u'Converts a RGB raster to a colormap raster dataset.'
##        #return ppName
##
##    def ColormapToRGB(self, pRasterDataset, pWorkspace, Name, Format):
##        u'Converts a colormap raster dataset to a RGB raster dataset.'
##        #return ppName
##
##    def CreateRGBRaster(self, pRasterDataset):
##        u'Creates a RGB multiband raster from a colormap raster dataset.'
##        #return ppRaster
##

class ReplacePathsParameters(CoClass):
    u'An object that controls how paths referenced by a mosaic dataset and items in the mosaic dataset are updated.'
    _reg_clsid_ = GUID('{9EDF6058-1368-4A4B-9FA6-E437E24FC8CA}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IReplacePathsParameters2(IReplacePathsParameters):
    _case_insensitive_ = True
    u'Provides access to members that control parameters to replace paths.'
    _iid_ = GUID('{8D43CB3F-8856-440C-A182-46E78843D80E}')
    _idlflags_ = ['oleautomation']
ReplacePathsParameters._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMosaicDatasetOperationParameters, IReplacePathsParameters2, ISelectionParameters]


# values for enumeration 'esriRasterFunctionErrors'
E_FUNCTION_MISSING_BAND = -2147209215
E_FUNCTION_MISSING_BAND_WAVELENGTH_PROPERTIES = -2147209214
E_FUNCTION_MATCHING_BAND_WAVELENGTH_NOT_FOUND = -2147209213
E_FUNCTION_MISSING_BAND_IDS = -2147209212
E_FUNCTION_NBANDS_MISMATCH = -2147209211
E_FUNCTION_RASTERSIZE_EXCEEDS_LIMIT = -2147209210
E_FUNCTION_CANNOT_CREATE_CACHE_DIR = -2147209209
E_FUNCTION_MISSING_SPATIALREFERENCE = -2147209208
esriRasterFunctionErrors = c_int # enum
class ReflectanceFunctionArguments(CoClass):
    u'A class for Apparent Reflectance raster function arguments.'
    _reg_clsid_ = GUID('{082DC874-8ACC-4FD8-A1D1-AEAF73CA899A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IReflectanceFunctionArguments(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control Apparent Reflectance raster function arguments.'
    _iid_ = GUID('{A8E7E036-D6F4-48C1-A201-487F3EC757AC}')
    _idlflags_ = ['oleautomation']
ReflectanceFunctionArguments._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunctionArguments, IRasterFunctionArguments2, IReflectanceFunctionArguments, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class IClipFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a clipping filter.'
    _iid_ = GUID('{37BE075C-FAEA-43EE-9314-16140D101F8D}')
    _idlflags_ = ['oleautomation']
IClipFilter._methods_ = [
    COMMETHOD([helpstring(u'Adds a clipping geometry.')], HRESULT, 'Add',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'pClippingGeometry' )),
    COMMETHOD([helpstring(u'Removes all clipping geometries.')], HRESULT, 'Empty'),
]
################################################################
## code template for IClipFilter implementation
##class IClipFilter_Impl(object):
##    def Add(self, pClippingGeometry):
##        u'Adds a clipping geometry.'
##        #return 
##
##    def Empty(self):
##        u'Removes all clipping geometries.'
##        #return 
##

class DEImageServerType(CoClass):
    u'Image Service Object Data Element object Type.'
    _reg_clsid_ = GUID('{50FECFEB-6E65-4D46-AAD9-66CA5E2D918E}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
DEImageServerType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDEImageServerType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDEServerObjectType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGxFilterInfo, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataElementType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class ITerrainToRasterFunctionArguments(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control terrain to raster conversion.'
    _iid_ = GUID('{C21EC208-CC2F-4E31-A3FF-272D1812C9C1}')
    _idlflags_ = ['oleautomation']
ITerrainToRasterFunctionArguments._methods_ = [
    COMMETHOD(['propget', helpstring(u'The input terrain or terrain name.')], HRESULT, 'Terrain',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppTerrain' )),
    COMMETHOD(['propputref', helpstring(u'The input terrain or terrain name.')], HRESULT, 'Terrain',
              ( ['in'], POINTER(IUnknown), 'ppTerrain' )),
    COMMETHOD(['propget', helpstring(u'Cell width.')], HRESULT, 'CellWidth',
              ( ['retval', 'out'], POINTER(c_double), 'pCellWidth' )),
    COMMETHOD(['propput', helpstring(u'Cell width.')], HRESULT, 'CellWidth',
              ( ['in'], c_double, 'pCellWidth' )),
    COMMETHOD(['propget', helpstring(u'Tin to raster interpolation type (how to rasterize the tin: Linear or NN).')], HRESULT, 'TinToRasterInterpolationType',
              ( ['retval', 'out'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriSurfaceInterpolationType), 'pType' )),
    COMMETHOD(['propput', helpstring(u'Tin to raster interpolation type (how to rasterize the tin: Linear or NN).')], HRESULT, 'TinToRasterInterpolationType',
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriSurfaceInterpolationType, 'pType' )),
    COMMETHOD(['propget', helpstring(u'Maximum number of different surfaces kept in this cache folder.')], HRESULT, 'CacheMaxNumSurfaces',
              ( ['retval', 'out'], POINTER(c_int), 'pMaxNumSurfaces' )),
    COMMETHOD(['propput', helpstring(u'Maximum number of different surfaces kept in this cache folder.')], HRESULT, 'CacheMaxNumSurfaces',
              ( ['in'], c_int, 'pMaxNumSurfaces' )),
    COMMETHOD(['propget', helpstring(u'Z tolerance for rasters in the image cache folder, used for compression.')], HRESULT, 'CacheRasterZTolerance',
              ( ['retval', 'out'], POINTER(c_double), 'pZTolerance' )),
    COMMETHOD(['propput', helpstring(u'Z tolerance for rasters in the image cache folder, used for compression.')], HRESULT, 'CacheRasterZTolerance',
              ( ['in'], c_double, 'pZTolerance' )),
]
################################################################
## code template for ITerrainToRasterFunctionArguments implementation
##class ITerrainToRasterFunctionArguments_Impl(object):
##    def _get(self):
##        u'Cell width.'
##        #return pCellWidth
##    def _set(self, pCellWidth):
##        u'Cell width.'
##    CellWidth = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Z tolerance for rasters in the image cache folder, used for compression.'
##        #return pZTolerance
##    def _set(self, pZTolerance):
##        u'Z tolerance for rasters in the image cache folder, used for compression.'
##    CacheRasterZTolerance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Maximum number of different surfaces kept in this cache folder.'
##        #return pMaxNumSurfaces
##    def _set(self, pMaxNumSurfaces):
##        u'Maximum number of different surfaces kept in this cache folder.'
##    CacheMaxNumSurfaces = property(_get, _set, doc = _set.__doc__)
##
##    def Terrain(self, ppTerrain):
##        u'The input terrain or terrain name.'
##        #return 
##
##    def _get(self):
##        u'Tin to raster interpolation type (how to rasterize the tin: Linear or NN).'
##        #return pType
##    def _set(self, pType):
##        u'Tin to raster interpolation type (how to rasterize the tin: Linear or NN).'
##    TinToRasterInterpolationType = property(_get, _set, doc = _set.__doc__)
##

class MaskFunction(CoClass):
    u'The mask function for masking out background values.'
    _reg_clsid_ = GUID('{A5A0861F-1B50-420C-934B-53685732F07C}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
MaskFunction._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunction, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

ISearchItemURI._methods_ = [
]
################################################################
## code template for ISearchItemURI implementation
##class ISearchItemURI_Impl(object):

class RasterRouteFinder(CoClass):
    u'A seamline modifier that finds a route along the difference raster.'
    _reg_clsid_ = GUID('{1192F4AD-7BE9-4635-B800-62650A980704}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class ISeamlineModifier(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a seamline modifier.'
    _iid_ = GUID('{655E1CF3-C906-4EC9-8E92-289B9B256CB5}')
    _idlflags_ = ['oleautomation']
class ISeamlineModifierInit(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control initialization of a seamline modifier.'
    _iid_ = GUID('{EDB2353C-3627-41BC-85C1-7436F98F3C21}')
    _idlflags_ = ['oleautomation']
RasterRouteFinder._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ISeamlineModifier, ISeamlineModifierInit]

class ILasToRasterFunctionArguments(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control Las to raster conversion.'
    _iid_ = GUID('{38CFFCFE-BA62-442F-A702-8F0D7F96E581}')
    _idlflags_ = ['oleautomation']
ILasBuilder._methods_ = [
    COMMETHOD(['propput', helpstring(u'Treats a collection of LAS files as a single dataset.')], HRESULT, 'FolderAsDataset',
              ( ['in'], VARIANT_BOOL, 'pbFolderAsDataset' )),
    COMMETHOD(['propget', helpstring(u'Treats a collection of LAS files as a single dataset.')], HRESULT, 'FolderAsDataset',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbFolderAsDataset' )),
    COMMETHOD(['propput', helpstring(u'Z Factor.')], HRESULT, 'ZFactor',
              ( ['in'], c_double, 'pZfactor' )),
    COMMETHOD(['propget', helpstring(u'Z Factor.')], HRESULT, 'ZFactor',
              ( ['retval', 'out'], POINTER(c_double), 'pZfactor' )),
    COMMETHOD(['propputref', helpstring(u'The parameters controlling LAS files to raster properties built by this raster type.')], HRESULT, 'LasToRasterArguments',
              ( ['in'], POINTER(ILasToRasterFunctionArguments), 'ppLasToRasterFunctionArgs' )),
    COMMETHOD(['propget', helpstring(u'The parameters controlling LAS files to raster properties built by this raster type.')], HRESULT, 'LasToRasterArguments',
              ( ['retval', 'out'], POINTER(POINTER(ILasToRasterFunctionArguments)), 'ppLasToRasterFunctionArgs' )),
]
################################################################
## code template for ILasBuilder implementation
##class ILasBuilder_Impl(object):
##    @property
##    def LasToRasterArguments(self, ppLasToRasterFunctionArgs):
##        u'The parameters controlling LAS files to raster properties built by this raster type.'
##        #return 
##
##    def _get(self):
##        u'Treats a collection of LAS files as a single dataset.'
##        #return pbFolderAsDataset
##    def _set(self, pbFolderAsDataset):
##        u'Treats a collection of LAS files as a single dataset.'
##    FolderAsDataset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Z Factor.'
##        #return pZfactor
##    def _set(self, pZfactor):
##        u'Z Factor.'
##    ZFactor = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'esriRasterCatalogType'
esriRasterCatalogTypeRegular = 0
esriRasterCatalogTypeMilitaryAnalyst = 1
esriRasterCatalogTypeImageService = 2
esriRasterCatalogType = c_int # enum
class IMosaicFunctionArguments(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control mosaic function arguments.'
    _iid_ = GUID('{1A16C6F0-8F1C-498E-81AF-26D50A8DDDD3}')
    _idlflags_ = ['oleautomation']
IMosaicDataset._methods_ = [
    COMMETHOD(['propget', helpstring(u'The catalog.')], HRESULT, 'Catalog',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClass)), 'ppCatalog' )),
    COMMETHOD(['propput', helpstring(u'The device DPI.')], HRESULT, 'DeviceDpi',
              ( ['in'], c_double, 'pDpi' )),
    COMMETHOD(['propget', helpstring(u'The device DPI.')], HRESULT, 'DeviceDpi',
              ( ['retval', 'out'], POINTER(c_double), 'pDpi' )),
    COMMETHOD(['propget', helpstring(u'Indicates if this is a referenced mosaic dataset.')], HRESULT, 'Referenced',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pReferenced' )),
    COMMETHOD(['propput', helpstring(u'Indicates if this is a referenced mosaic dataset.')], HRESULT, 'Referenced',
              ( ['in'], VARIANT_BOOL, 'pReferenced' )),
    COMMETHOD(['propget', helpstring(u'The raster catalog type.')], HRESULT, 'CatalogType',
              ( ['retval', 'out'], POINTER(esriRasterCatalogType), 'pRasterCatalogType' )),
    COMMETHOD(['propget', helpstring(u'The associated boundary.')], HRESULT, 'Boundary',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClass)), 'ppBoundary' )),
    COMMETHOD(['propget', helpstring(u'The associated boundary as a geometry.')], HRESULT, 'BoundaryGeometry',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry)), 'ppBoundaryGeometry' )),
    COMMETHOD(['propget', helpstring(u'The associated seamline table.')], HRESULT, 'Seamline',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClass)), 'ppSeamline' )),
    COMMETHOD(['propget', helpstring(u'The associated stereo table.')], HRESULT, 'StereoTable',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable)), 'ppStereoTable' )),
    COMMETHOD(['propget', helpstring(u'The associated color correction table.')], HRESULT, 'DodgingTable',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable)), 'ppDodgingTable' )),
    COMMETHOD(['propget', helpstring(u'The associated raster types.')], HRESULT, 'RasterTypeTable',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable)), 'ppRasterTypeTable' )),
    COMMETHOD(['propputref', helpstring(u'The associated raster types.')], HRESULT, 'RasterTypeTable',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable), 'ppRasterTypeTable' )),
    COMMETHOD(['propget', helpstring(u'The associated overview table.')], HRESULT, 'OverviewTable',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable)), 'ppOverviewTable' )),
    COMMETHOD(['propputref', helpstring(u'The associated overview table.')], HRESULT, 'OverviewTable',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable), 'ppOverviewTable' )),
    COMMETHOD(['propget', helpstring(u'The associated log table.')], HRESULT, 'LogTable',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable)), 'ppLogTable' )),
    COMMETHOD(['propputref', helpstring(u'The associated log table.')], HRESULT, 'LogTable',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable), 'ppLogTable' )),
    COMMETHOD(['propget', helpstring(u'The associated cell size levels table.')], HRESULT, 'LevelsTable',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable)), 'ppLevelsTable' )),
    COMMETHOD(['propputref', helpstring(u'The associated cell size levels table.')], HRESULT, 'LevelsTable',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable), 'ppLevelsTable' )),
    COMMETHOD(['propget', helpstring(u'The visible fields in a mosaic dataset')], HRESULT, 'VisibleFields',
              ( ['retval', 'out'], POINTER(BSTR), 'pVisibleFields' )),
    COMMETHOD(['propget', helpstring(u'The mosaic dataset owned tables.')], HRESULT, 'Children',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IEnumName)), 'ppNames' )),
    COMMETHOD(['propget', helpstring(u'The mosaic function.')], HRESULT, 'MosaicFunction',
              ( ['retval', 'out'], POINTER(POINTER(IMosaicFunction)), 'ppFunction' )),
    COMMETHOD(['propget', helpstring(u'The mosaic function arguments.')], HRESULT, 'MosaicFunctionArguments',
              ( ['retval', 'out'], POINTER(POINTER(IMosaicFunctionArguments)), 'ppArguments' )),
    COMMETHOD([helpstring(u'Applies a given function to this mosaic dataset on top of all existing functions.')], HRESULT, 'ApplyFunction',
              ( ['in'], POINTER(IRasterFunction), 'pFunction' ),
              ( ['in'], POINTER(IUnknown), 'pArguments' ),
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD([helpstring(u'Clears all functions appied to this mosaic dataset.')], HRESULT, 'ClearFunction'),
    COMMETHOD(['propget', helpstring(u"The msoaic dataset's relative path.")], HRESULT, 'RelativePath',
              ( ['retval', 'out'], POINTER(BSTR), 'pPath' )),
    COMMETHOD(['propput', helpstring(u"The msoaic dataset's relative path.")], HRESULT, 'RelativePath',
              ( ['in'], BSTR, 'pPath' )),
]
################################################################
## code template for IMosaicDataset implementation
##class IMosaicDataset_Impl(object):
##    def _get(self):
##        u'Indicates if this is a referenced mosaic dataset.'
##        #return pReferenced
##    def _set(self, pReferenced):
##        u'Indicates if this is a referenced mosaic dataset.'
##    Referenced = property(_get, _set, doc = _set.__doc__)
##
##    def LogTable(self, ppLogTable):
##        u'The associated log table.'
##        #return 
##
##    @property
##    def CatalogType(self):
##        u'The raster catalog type.'
##        #return pRasterCatalogType
##
##    @property
##    def VisibleFields(self):
##        u'The visible fields in a mosaic dataset'
##        #return pVisibleFields
##
##    def ApplyFunction(self, pFunction, pArguments, Name):
##        u'Applies a given function to this mosaic dataset on top of all existing functions.'
##        #return 
##
##    @property
##    def MosaicFunctionArguments(self):
##        u'The mosaic function arguments.'
##        #return ppArguments
##
##    def RasterTypeTable(self, ppRasterTypeTable):
##        u'The associated raster types.'
##        #return 
##
##    @property
##    def MosaicFunction(self):
##        u'The mosaic function.'
##        #return ppFunction
##
##    @property
##    def Children(self):
##        u'The mosaic dataset owned tables.'
##        #return ppNames
##
##    def LevelsTable(self, ppLevelsTable):
##        u'The associated cell size levels table.'
##        #return 
##
##    @property
##    def Catalog(self):
##        u'The catalog.'
##        #return ppCatalog
##
##    def ClearFunction(self):
##        u'Clears all functions appied to this mosaic dataset.'
##        #return 
##
##    def _get(self):
##        u'The device DPI.'
##        #return pDpi
##    def _set(self, pDpi):
##        u'The device DPI.'
##    DeviceDpi = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u"The msoaic dataset's relative path."
##        #return pPath
##    def _set(self, pPath):
##        u"The msoaic dataset's relative path."
##    RelativePath = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def DodgingTable(self):
##        u'The associated color correction table.'
##        #return ppDodgingTable
##
##    @property
##    def Boundary(self):
##        u'The associated boundary.'
##        #return ppBoundary
##
##    @property
##    def StereoTable(self):
##        u'The associated stereo table.'
##        #return ppStereoTable
##
##    @property
##    def Seamline(self):
##        u'The associated seamline table.'
##        #return ppSeamline
##
##    def OverviewTable(self, ppOverviewTable):
##        u'The associated overview table.'
##        #return 
##
##    @property
##    def BoundaryGeometry(self):
##        u'The associated boundary as a geometry.'
##        #return ppBoundaryGeometry
##


# values for enumeration 'esriExtentType'
esriExtentFirstOf = 0
esriExtentIntersectionOf = 1
esriExtentUnionOf = 2
esriExtentLastOf = 3
esriExtentType = c_int # enum
class IWorldFileExport(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that export Georeference information to a WorldFile.'
    _iid_ = GUID('{7D436852-EBEA-11D4-B2B0-00508BCDC74B}')
    _idlflags_ = ['oleautomation']
IWorldFileExport._methods_ = [
    COMMETHOD([helpstring(u'Creates a World File.')], HRESULT, 'Write'),
]
################################################################
## code template for IWorldFileExport implementation
##class IWorldFileExport_Impl(object):
##    def Write(self):
##        u'Creates a World File.'
##        #return 
##

class ThresholdFunctionArguments(CoClass):
    u'A class for binary thresholding function arguments.'
    _reg_clsid_ = GUID('{8D5B16DA-C8E0-4F6A-808A-208AB336D8E5}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
ThresholdFunctionArguments._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunctionArguments, IRasterFunctionArguments2, IThresholdFunctionArguments, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class IItemTemplate(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control an item template.'
    _iid_ = GUID('{205B20A1-3BC1-4270-ACC9-6F73C1840007}')
    _idlflags_ = ['oleautomation']
IItemTemplate._methods_ = [
    COMMETHOD(['propput', helpstring(u'The name of the item template.')], HRESULT, 'Name',
              ( ['in'], BSTR, 'pItemTemplateName' )),
    COMMETHOD(['propget', helpstring(u'The name of the item template.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'pItemTemplateName' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the item template is active.')], HRESULT, 'Enabled',
              ( ['in'], VARIANT_BOOL, 'pbEnabled' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the item template is active.')], HRESULT, 'Enabled',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbEnabled' )),
    COMMETHOD(['propputref', helpstring(u'The raster function template associated with the item template.')], HRESULT, 'RasterFunctionTemplate',
              ( ['in'], POINTER(IRasterFunctionTemplate), 'ppFunctionTemplate' )),
    COMMETHOD(['propget', helpstring(u'The raster function template associated with the item template.')], HRESULT, 'RasterFunctionTemplate',
              ( ['retval', 'out'], POINTER(POINTER(IRasterFunctionTemplate)), 'ppFunctionTemplate' )),
    COMMETHOD(['propput', helpstring(u'The output dataset tag associated with the item template. This property determines the tag of the outgoing item constructed using this template.')], HRESULT, 'OutputDatasetTag',
              ( ['in'], BSTR, 'pOutputDatasetTag' )),
    COMMETHOD(['propget', helpstring(u'The output dataset tag associated with the item template. This property determines the tag of the outgoing item constructed using this template.')], HRESULT, 'OutputDatasetTag',
              ( ['retval', 'out'], POINTER(BSTR), 'pOutputDatasetTag' )),
    COMMETHOD(['propput', helpstring(u'Tag identifying the item URI that references a dataset from which all properties are copied over to the outgoing dataset.')], HRESULT, 'PrimaryInputDatasetTag',
              ( ['in'], BSTR, 'pPrimaryInputDatasetTag' )),
    COMMETHOD(['propget', helpstring(u'Tag identifying the item URI that references a dataset from which all properties are copied over to the outgoing dataset.')], HRESULT, 'PrimaryInputDatasetTag',
              ( ['retval', 'out'], POINTER(BSTR), 'pPrimaryInputDatasetTag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the footprint of items constructed using this template is computed using the intersection of the footprints of all participating input items.')], HRESULT, 'IntersectFootprints',
              ( ['in'], VARIANT_BOOL, 'pbIntersectFootprints' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the footprint of items constructed using this template is computed using the intersection of the footprints of all participating input items.')], HRESULT, 'IntersectFootprints',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbIntersectFootprints' )),
]
################################################################
## code template for IItemTemplate implementation
##class IItemTemplate_Impl(object):
##    def _get(self):
##        u'The output dataset tag associated with the item template. This property determines the tag of the outgoing item constructed using this template.'
##        #return pOutputDatasetTag
##    def _set(self, pOutputDatasetTag):
##        u'The output dataset tag associated with the item template. This property determines the tag of the outgoing item constructed using this template.'
##    OutputDatasetTag = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The name of the item template.'
##        #return pItemTemplateName
##    def _set(self, pItemTemplateName):
##        u'The name of the item template.'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether the item template is active.'
##        #return pbEnabled
##    def _set(self, pbEnabled):
##        u'Indicates whether the item template is active.'
##    Enabled = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether the footprint of items constructed using this template is computed using the intersection of the footprints of all participating input items.'
##        #return pbIntersectFootprints
##    def _set(self, pbIntersectFootprints):
##        u'Indicates whether the footprint of items constructed using this template is computed using the intersection of the footprints of all participating input items.'
##    IntersectFootprints = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def RasterFunctionTemplate(self, ppFunctionTemplate):
##        u'The raster function template associated with the item template.'
##        #return 
##
##    def _get(self):
##        u'Tag identifying the item URI that references a dataset from which all properties are copied over to the outgoing dataset.'
##        #return pPrimaryInputDatasetTag
##    def _set(self, pPrimaryInputDatasetTag):
##        u'Tag identifying the item URI that references a dataset from which all properties are copied over to the outgoing dataset.'
##    PrimaryInputDatasetTag = property(_get, _set, doc = _set.__doc__)
##

class IRasterColormap3(IRasterColormap2):
    _case_insensitive_ = True
    u'Provides access to members that control a raster colormap.'
    _iid_ = GUID('{0EAD5A24-A135-46EE-ACC2-2CB6181F1C2B}')
    _idlflags_ = ['oleautomation']
IRasterColormap3._methods_ = [
    COMMETHOD([helpstring(u'Loads colors from an Esri .clr file.')], HRESULT, 'LoadFrom',
              ( ['in'], BSTR, 'colormapFileName' )),
    COMMETHOD([helpstring(u'Saves colors to an Esri .clr file.')], HRESULT, 'SaveTo',
              ( ['in'], BSTR, 'colormapFileName' )),
]
################################################################
## code template for IRasterColormap3 implementation
##class IRasterColormap3_Impl(object):
##    def SaveTo(self, colormapFileName):
##        u'Saves colors to an Esri .clr file.'
##        #return 
##
##    def LoadFrom(self, colormapFileName):
##        u'Loads colors from an Esri .clr file.'
##        #return 
##

class FocalMeanFilter(CoClass):
    u'A class for focal mean filter.'
    _reg_clsid_ = GUID('{5156EEA7-EC14-44AF-B36E-6D1957218AE7}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IFocalMeanFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a focal mean filter.'
    _iid_ = GUID('{170014CE-9272-4400-B94F-3CDF7B396253}')
    _idlflags_ = ['oleautomation']
FocalMeanFilter._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IPixelFilter, IFocalMeanFilter]


# values for enumeration 'esriApplanixCameraModel'
esriApplanixCameraModelDSS322 = 0
esriApplanixCameraModelDSS439 = 1
esriApplanixCameraModel = c_int # enum

# values for enumeration 'esriFrameCameraUnits'
esriFrameCameraUnitsCentimeters = 0
esriFrameCameraUnitsDecimeters = 1
esriFrameCameraUnitsMillimeters = 2
esriFrameCameraUnitsMicrons = 3
esriFrameCameraUnits = c_int # enum

# values for enumeration 'esriDistortionType'
esriDistortionTypeKonrady = 0
esriDistortionTypeRadial = 1
esriDistortionType = c_int # enum
IFrameCameraParameters._methods_ = [
    COMMETHOD(['propput', helpstring(u'Camera model number')], HRESULT, 'CameraModel',
              ( ['in'], esriApplanixCameraModel, 'pVal' )),
    COMMETHOD(['propget', helpstring(u'Camera model number')], HRESULT, 'CameraModel',
              ( ['retval', 'out'], POINTER(esriApplanixCameraModel), 'pVal' )),
    COMMETHOD(['propput', helpstring(u'Camera focal length')], HRESULT, 'FocalLength',
              ( ['in'], c_double, 'pFocalLength' )),
    COMMETHOD(['propget', helpstring(u'Camera focal length')], HRESULT, 'FocalLength',
              ( ['retval', 'out'], POINTER(c_double), 'pFocalLength' )),
    COMMETHOD(['propput', helpstring(u'Focal length units')], HRESULT, 'FocalLengthUnits',
              ( ['in'], esriFrameCameraUnits, 'pVal' )),
    COMMETHOD(['propget', helpstring(u'Focal length units')], HRESULT, 'FocalLengthUnits',
              ( ['retval', 'out'], POINTER(esriFrameCameraUnits), 'pVal' )),
    COMMETHOD(['propput', helpstring(u'Principal point of autocollimation along X axis.')], HRESULT, 'PPAX',
              ( ['in'], c_double, 'pPpax' )),
    COMMETHOD(['propget', helpstring(u'Principal point of autocollimation along X axis.')], HRESULT, 'PPAX',
              ( ['retval', 'out'], POINTER(c_double), 'pPpax' )),
    COMMETHOD(['propput', helpstring(u'PPAX units')], HRESULT, 'PPAXUnits',
              ( ['in'], esriFrameCameraUnits, 'pVal' )),
    COMMETHOD(['propget', helpstring(u'PPAX units')], HRESULT, 'PPAXUnits',
              ( ['retval', 'out'], POINTER(esriFrameCameraUnits), 'pVal' )),
    COMMETHOD(['propput', helpstring(u'Principal point of autocollimation along Y axis.')], HRESULT, 'PPAY',
              ( ['in'], c_double, 'pPpay' )),
    COMMETHOD(['propget', helpstring(u'Principal point of autocollimation along Y axis.')], HRESULT, 'PPAY',
              ( ['retval', 'out'], POINTER(c_double), 'pPpay' )),
    COMMETHOD(['propput', helpstring(u'PPAY units')], HRESULT, 'PPAYUnits',
              ( ['in'], esriFrameCameraUnits, 'pVal' )),
    COMMETHOD(['propget', helpstring(u'PPAY units')], HRESULT, 'PPAYUnits',
              ( ['retval', 'out'], POINTER(esriFrameCameraUnits), 'pVal' )),
    COMMETHOD(['propput', helpstring(u'Type of Distortion.')], HRESULT, 'DistortionType',
              ( ['in'], esriDistortionType, 'pVal' )),
    COMMETHOD(['propget', helpstring(u'Type of Distortion.')], HRESULT, 'DistortionType',
              ( ['retval', 'out'], POINTER(esriDistortionType), 'pVal' )),
    COMMETHOD(['propput', helpstring(u'Radial lens distortion coefficient method.')], HRESULT, 'DistortionMethod',
              ( ['in'], esriRasterKonradyType, 'pVal' )),
    COMMETHOD(['propget', helpstring(u'Radial lens distortion coefficient method.')], HRESULT, 'DistortionMethod',
              ( ['retval', 'out'], POINTER(esriRasterKonradyType), 'pVal' )),
    COMMETHOD(['propput', helpstring(u'Zeroth Konrady coefficient.')], HRESULT, 'K0',
              ( ['in'], c_double, 'pK0' )),
    COMMETHOD(['propget', helpstring(u'Zeroth Konrady coefficient.')], HRESULT, 'K0',
              ( ['retval', 'out'], POINTER(c_double), 'pK0' )),
    COMMETHOD(['propput', helpstring(u'First Konrady coefficient.')], HRESULT, 'K1',
              ( ['in'], c_double, 'pK1' )),
    COMMETHOD(['propget', helpstring(u'First Konrady coefficient.')], HRESULT, 'K1',
              ( ['retval', 'out'], POINTER(c_double), 'pK1' )),
    COMMETHOD(['propput', helpstring(u'Second Konrady coefficient.')], HRESULT, 'K2',
              ( ['in'], c_double, 'pK2' )),
    COMMETHOD(['propget', helpstring(u'Second Konrady coefficient.')], HRESULT, 'K2',
              ( ['retval', 'out'], POINTER(c_double), 'pK2' )),
    COMMETHOD(['propputref', helpstring(u'Radial Distances Array.')], HRESULT, 'RadialDistances',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray), 'pDistances' )),
    COMMETHOD(['propget', helpstring(u'Radial Distances Array.')], HRESULT, 'RadialDistances',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray)), 'pDistances' )),
    COMMETHOD(['propputref', helpstring(u'Radial Distortions Array.')], HRESULT, 'RadialDistortions',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray), 'pDistortions' )),
    COMMETHOD(['propget', helpstring(u'Radial Distortions Array.')], HRESULT, 'RadialDistortions',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray)), 'pDistortions' )),
    COMMETHOD(['propput', helpstring(u'Number of columns.')], HRESULT, 'Columns',
              ( ['in'], c_int, 'pCols' )),
    COMMETHOD(['propget', helpstring(u'Number of columns.')], HRESULT, 'Columns',
              ( ['retval', 'out'], POINTER(c_int), 'pCols' )),
    COMMETHOD(['propput', helpstring(u'Number of rows.')], HRESULT, 'Rows',
              ( ['in'], c_int, 'pRows' )),
    COMMETHOD(['propget', helpstring(u'Number of rows.')], HRESULT, 'Rows',
              ( ['retval', 'out'], POINTER(c_int), 'pRows' )),
    COMMETHOD(['propput', helpstring(u'Pixel size for the camera.')], HRESULT, 'PixelSize',
              ( ['in'], c_double, 'pPixelSize' )),
    COMMETHOD(['propget', helpstring(u'Pixel size for the camera.')], HRESULT, 'PixelSize',
              ( ['retval', 'out'], POINTER(c_double), 'pPixelSize' )),
]
################################################################
## code template for IFrameCameraParameters implementation
##class IFrameCameraParameters_Impl(object):
##    def _get(self):
##        u'Focal length units'
##        #return pVal
##    def _set(self, pVal):
##        u'Focal length units'
##    FocalLengthUnits = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'PPAY units'
##        #return pVal
##    def _set(self, pVal):
##        u'PPAY units'
##    PPAYUnits = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Number of rows.'
##        #return pRows
##    def _set(self, pRows):
##        u'Number of rows.'
##    Rows = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Second Konrady coefficient.'
##        #return pK2
##    def _set(self, pK2):
##        u'Second Konrady coefficient.'
##    K2 = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Camera focal length'
##        #return pFocalLength
##    def _set(self, pFocalLength):
##        u'Camera focal length'
##    FocalLength = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Radial lens distortion coefficient method.'
##        #return pVal
##    def _set(self, pVal):
##        u'Radial lens distortion coefficient method.'
##    DistortionMethod = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def RadialDistances(self, pDistances):
##        u'Radial Distances Array.'
##        #return 
##
##    def _get(self):
##        u'PPAX units'
##        #return pVal
##    def _set(self, pVal):
##        u'PPAX units'
##    PPAXUnits = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'First Konrady coefficient.'
##        #return pK1
##    def _set(self, pK1):
##        u'First Konrady coefficient.'
##    K1 = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Type of Distortion.'
##        #return pVal
##    def _set(self, pVal):
##        u'Type of Distortion.'
##    DistortionType = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def RadialDistortions(self, pDistortions):
##        u'Radial Distortions Array.'
##        #return 
##
##    def _get(self):
##        u'Zeroth Konrady coefficient.'
##        #return pK0
##    def _set(self, pK0):
##        u'Zeroth Konrady coefficient.'
##    K0 = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Pixel size for the camera.'
##        #return pPixelSize
##    def _set(self, pPixelSize):
##        u'Pixel size for the camera.'
##    PixelSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Camera model number'
##        #return pVal
##    def _set(self, pVal):
##        u'Camera model number'
##    CameraModel = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Number of columns.'
##        #return pCols
##    def _set(self, pCols):
##        u'Number of columns.'
##    Columns = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Principal point of autocollimation along Y axis.'
##        #return pPpay
##    def _set(self, pPpay):
##        u'Principal point of autocollimation along Y axis.'
##    PPAY = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Principal point of autocollimation along X axis.'
##        #return pPpax
##    def _set(self, pPpax):
##        u'Principal point of autocollimation along X axis.'
##    PPAX = property(_get, _set, doc = _set.__doc__)
##

class IRasterCalcStatsHistogram(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that controls calculation of stats and histogram.'
    _iid_ = GUID('{04DDBB5F-DBA3-4ACC-8641-43E22E8DE599}')
    _idlflags_ = ['oleautomation']
class IRasterCalcStatsHistogram2(IRasterCalcStatsHistogram):
    _case_insensitive_ = True
    u'Provides access to members that controls calculation of stats and histogram.'
    _iid_ = GUID('{5EA490EE-8638-4412-9DF6-1FDA5B9A8937}')
    _idlflags_ = ['oleautomation']
class IRasterCalcStatsHistogram3(IRasterCalcStatsHistogram2):
    _case_insensitive_ = True
    u'Provides access to members that controls calculation of stats and histogram.'
    _iid_ = GUID('{16CE5BE0-F053-497C-A930-A68204949FEE}')
    _idlflags_ = ['oleautomation']
class IStatsHistogram(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that controls stats and histogram.'
    _iid_ = GUID('{2B9062E8-DF44-4012-A0E4-CF0EFAA21693}')
    _idlflags_ = ['oleautomation']
IRasterCalcStatsHistogram._methods_ = [
    COMMETHOD([helpstring(u'Computes stats and histogram from a given Raster.')], HRESULT, 'ComputeFromRaster',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' ),
              ( ['in'], c_int, 'iBand' ),
              ( ['in'], POINTER(IStatsHistogram), 'pStatsHistogram' )),
    COMMETHOD([helpstring(u'Computes stats and histogram from a given RasterBand.')], HRESULT, 'LoadFromRasterBand',
              ( ['in'], POINTER(IRasterBand), 'pBand' ),
              ( ['in'], VARIANT, 'NoData' ),
              ( ['in'], POINTER(IStatsHistogram), 'pStatsHistogram' )),
]
################################################################
## code template for IRasterCalcStatsHistogram implementation
##class IRasterCalcStatsHistogram_Impl(object):
##    def LoadFromRasterBand(self, pBand, NoData, pStatsHistogram):
##        u'Computes stats and histogram from a given RasterBand.'
##        #return 
##
##    def ComputeFromRaster(self, pRaster, iBand, pStatsHistogram):
##        u'Computes stats and histogram from a given Raster.'
##        #return 
##

IRasterCalcStatsHistogram2._methods_ = [
    COMMETHOD([helpstring(u'Computes stats and histogram from a given Raster.')], HRESULT, 'ComputeAllFromRaster',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'pStatsHistograms' )),
]
################################################################
## code template for IRasterCalcStatsHistogram2 implementation
##class IRasterCalcStatsHistogram2_Impl(object):
##    def ComputeAllFromRaster(self, pRaster, pStatsHistograms):
##        u'Computes stats and histogram from a given Raster.'
##        #return 
##

IRasterCalcStatsHistogram3._methods_ = [
    COMMETHOD([helpstring(u'Computes stats and histogram from a pixel block.')], HRESULT, 'ComputeAllFromBlock',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IPixelBlock), 'pBlock' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'pStatsHistograms' )),
    COMMETHOD([helpstring(u'Computes stats and histogram from a given RasterBand.')], HRESULT, 'LoadFromRasterBandEx',
              ( ['in'], POINTER(IRasterBand), 'pBand' ),
              ( ['in'], VARIANT, 'NoData' ),
              ( ['in'], VARIANT_BOOL, 'Approximation' ),
              ( ['in'], POINTER(IStatsHistogram), 'pStatsHistogram' )),
]
################################################################
## code template for IRasterCalcStatsHistogram3 implementation
##class IRasterCalcStatsHistogram3_Impl(object):
##    def ComputeAllFromBlock(self, pBlock, pStatsHistograms):
##        u'Computes stats and histogram from a pixel block.'
##        #return 
##
##    def LoadFromRasterBandEx(self, pBand, NoData, Approximation, pStatsHistogram):
##        u'Computes stats and histogram from a given RasterBand.'
##        #return 
##


# values for enumeration 'esriRasterCatalogItemCategory'
esriRasterCatalogItemCategoryUnknown = 0
esriRasterCatalogItemCategoryPrimary = 1
esriRasterCatalogItemCategoryOverview = 2
esriRasterCatalogItemCategoryUnprocessedOverview = 3
esriRasterCatalogItemCategoryPartialOverview = 4
esriRasterCatalogItemCategoryUploaded = 253
esriRasterCatalogItemCategoryIncomplete = 254
esriesriRasterCatalogItemCategoryCustom = 255
esriRasterCatalogItemCategory = c_int # enum
IRasterTypeOperation._methods_ = [
    COMMETHOD([helpstring(u'Constructs a builder item object given an item URI and the associated raster dataset.')], HRESULT, 'CreateBuilderItem',
              ( ['in'], POINTER(IItemURI), 'pItemURI' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterDataset), 'pDataset' ),
              ( ['in'], esriRasterCatalogItemCategory, 'eRasterCategory' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'pDefaultRasterSrs' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'pItemFootprint' ),
              ( ['retval', 'out'], POINTER(POINTER(IBuilderItem)), 'ppBuilderItem' )),
    COMMETHOD([helpstring(u'Opens a raster dataset even if it does not exist.')], HRESULT, 'OpenRasterDataset',
              ( ['in'], BSTR, 'DataSource' ),
              ( ['in'], POINTER(IRasterInfo), 'pRasterInfo' ),
              ( ['in'], VARIANT_BOOL, 'overwrite' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterDataset)), 'ppRasterDataset' )),
    COMMETHOD([helpstring(u'Clips the raster dataset to the associated footprint geometry referenced by the with specified builder item.')], HRESULT, 'ClipDatasetToItemFootprint',
              ( ['in'], POINTER(IBuilderItem), 'pBuilderItem' )),
    COMMETHOD([helpstring(u'Builds pyramids and computes statistics for all raster dataset referenced by the top-level function raster dataset in the builder item. The associated AddRastersParameters and SynchronizeParameters objects are used to control how pyramids and statistics are bu?!?\x08?&')], HRESULT, 'ProcessItem',
              ( ['in'], POINTER(IBuilderItem), 'pBuilderItem' )),
    COMMETHOD([helpstring(u'Adds (or updates) a geometric function associated with the function raster dataset.')], HRESULT, 'ApplyOrthorectification',
              ( ['in'], POINTER(IFunctionRasterDataset), 'pDataset' ),
              ( ['retval', 'out'], POINTER(POINTER(IFunctionRasterDataset)), 'ppDataset' )),
]
################################################################
## code template for IRasterTypeOperation implementation
##class IRasterTypeOperation_Impl(object):
##    def OpenRasterDataset(self, DataSource, pRasterInfo, overwrite):
##        u'Opens a raster dataset even if it does not exist.'
##        #return ppRasterDataset
##
##    def ProcessItem(self, pBuilderItem):
##        u'Builds pyramids and computes statistics for all raster dataset referenced by the top-level function raster dataset in the builder item. The associated AddRastersParameters and SynchronizeParameters objects are used to control how pyramids and statistics are bu?!?\x08?&'
##        #return 
##
##    def ApplyOrthorectification(self, pDataset):
##        u'Adds (or updates) a geometric function associated with the function raster dataset.'
##        #return ppDataset
##
##    def CreateBuilderItem(self, pItemURI, pDataset, eRasterCategory, pDefaultRasterSrs, pItemFootprint):
##        u'Constructs a builder item object given an item URI and the associated raster dataset.'
##        #return ppBuilderItem
##
##    def ClipDatasetToItemFootprint(self, pBuilderItem):
##        u'Clips the raster dataset to the associated footprint geometry referenced by the with specified builder item.'
##        #return 
##

class RasterStatistics(CoClass):
    u'A raster statistics class.'
    _reg_clsid_ = GUID('{8446EB83-3251-4F20-8B79-1D5421E39D4A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IRasterStatistics2(IRasterStatistics):
    _case_insensitive_ = True
    u'Provides access to members that control raster statistics.'
    _iid_ = GUID('{DC667A54-7969-4486-AA5A-F7EC40D4B707}')
    _idlflags_ = ['oleautomation']
RasterStatistics._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterStatistics, IRasterStatistics2]

class MaskFunctionArguments(CoClass):
    u'The raster mask function arguments.'
    _reg_clsid_ = GUID('{350D8526-9FAD-4842-A77D-B2A6EC143DBF}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
MaskFunctionArguments._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunctionArguments, IRasterFunctionArguments2, IMaskFunctionArguments, IMaskFunctionArguments2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class MosaicFunctionArguments(CoClass):
    u'A class for raster mosaic function arguments.'
    _reg_clsid_ = GUID('{62C333ED-A776-4A2E-8062-1959C70D2704}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IMosaicFunctionArguments2(IMosaicFunctionArguments):
    _case_insensitive_ = True
    u'Provides access to members that control mosaic function arguments.'
    _iid_ = GUID('{FDE976A9-5D17-45DE-96B6-09BE21077CAE}')
    _idlflags_ = ['oleautomation']
MosaicFunctionArguments._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunctionArguments, IMosaicFunctionArguments, IMosaicFunctionArguments2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class IItemURIArray(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control an item URI array.'
    _iid_ = GUID('{84AE2BFF-9DDF-4EDD-9505-F86E83AAAE23}')
    _idlflags_ = ['oleautomation']
IItemURIArray._methods_ = [
    COMMETHOD(['propget', helpstring(u'The property count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'Returns the item template at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'index' ),
              ( ['retval', 'out'], POINTER(POINTER(IItemURI)), 'ppItemURI' )),
    COMMETHOD([helpstring(u'Removes the item template at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'index' )),
    COMMETHOD([helpstring(u'Removes all item templates.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Adds an item template.')], HRESULT, 'Add',
              ( ['in'], POINTER(IItemURI), 'pItemURI' )),
    COMMETHOD([helpstring(u'Adds an item template at the specified position.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'index' ),
              ( ['in'], POINTER(IItemURI), 'pItemURI' )),
]
################################################################
## code template for IItemURIArray implementation
##class IItemURIArray_Impl(object):
##    @property
##    def Count(self):
##        u'The property count.'
##        #return Count
##
##    def Insert(self, index, pItemURI):
##        u'Adds an item template at the specified position.'
##        #return 
##
##    def Remove(self, index):
##        u'Removes the item template at the specified position.'
##        #return 
##
##    @property
##    def Element(self, index):
##        u'Returns the item template at the specified position.'
##        #return ppItemURI
##
##    def RemoveAll(self):
##        u'Removes all item templates.'
##        #return 
##
##    def Add(self, pItemURI):
##        u'Adds an item template.'
##        #return 
##

class SAIFunction(CoClass):
    u'The Slope-Aspect Index (SAI) function.'
    _reg_clsid_ = GUID('{0BDC2211-71C1-48DA-9CF6-6903730E302D}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
SAIFunction._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunction, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]


# values for enumeration 'rstMosaicColormapMode'
MM_REJECT = 0
MM_FIRST = 1
MM_LAST = 2
MM_MATCH = 3
rstMosaicColormapMode = c_int # enum
class ILasDatasetToRasterFunctionArguments(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control LasDataset to raster conversion.'
    _iid_ = GUID('{52A1576C-57F7-4D8F-BB44-A1ABE8DA34C1}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'esriRasterLasCellAggregationType'
esriRasterLasCellMin = 0
esriRasterLasCellMax = 1
esriRasterLasCellSum = 2
esriRasterLasCellMean = 3
esriRasterLasCellMeanDistanceWeighted = 4
esriRasterLasCellAggregationType = c_int # enum

# values for enumeration 'esriRasterLasVoidFillMethod'
esriRasterLasVoidFillNone = 0
esriRasterLasVoidFillSimple = 1
esriRasterLasVoidFillPlaneIDW = 2
esriRasterLasVoidFillTinLinear = 3
esriRasterLasVoidFillTinNaturalNeighbor = 4
esriRasterLasVoidFillMethod = c_int # enum
ILasDatasetToRasterFunctionArguments._methods_ = [
    COMMETHOD(['propget', helpstring(u'The input Las dataset or Las dataset name.')], HRESULT, 'LasDataset',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppLasDataset' )),
    COMMETHOD(['propputref', helpstring(u'The input Las dataset or Las dataset name.')], HRESULT, 'LasDataset',
              ( ['in'], POINTER(IUnknown), 'ppLasDataset' )),
    COMMETHOD(['propget', helpstring(u'Return types selected, e.g., esriRasterLasReturnFirst, 13.')], HRESULT, 'ReturnTypesSelected',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray)), 'ppReturnTypesSelected' )),
    COMMETHOD(['propputref', helpstring(u'Return types selected, e.g., esriRasterLasReturnFirst, 13.')], HRESULT, 'ReturnTypesSelected',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'ppReturnTypesSelected' )),
    COMMETHOD(['propget', helpstring(u'Class types selected, e.g., esriRasterLasClassGround, or 217.')], HRESULT, 'ClassTypesSelected',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray)), 'ppClassTypesSelected' )),
    COMMETHOD(['propputref', helpstring(u'Class types selected, e.g., esriRasterLasClassGround, or 217.')], HRESULT, 'ClassTypesSelected',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'ppClassTypesSelected' )),
    COMMETHOD(['propget', helpstring(u'Cell width.')], HRESULT, 'CellWidth',
              ( ['retval', 'out'], POINTER(c_double), 'pCellWidth' )),
    COMMETHOD(['propput', helpstring(u'Cell width.')], HRESULT, 'CellWidth',
              ( ['in'], c_double, 'pCellWidth' )),
    COMMETHOD(['propget', helpstring(u'Use tinning.')], HRESULT, 'UseTinning',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pUseTinning' )),
    COMMETHOD(['propput', helpstring(u'Use tinning.')], HRESULT, 'UseTinning',
              ( ['in'], VARIANT_BOOL, 'pUseTinning' )),
    COMMETHOD(['propget', helpstring(u'Tin to raster interpolation type (how to rasterize the tin: Linear or NN).')], HRESULT, 'TinToRasterInterpolationType',
              ( ['retval', 'out'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriSurfaceInterpolationType), 'pType' )),
    COMMETHOD(['propput', helpstring(u'Tin to raster interpolation type (how to rasterize the tin: Linear or NN).')], HRESULT, 'TinToRasterInterpolationType',
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriSurfaceInterpolationType, 'pType' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to use 3D constraints included in the LasDataset or not.')], HRESULT, 'UseConstraints',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbUseConstraints' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to use 3D constraints included in the LasDataset or not.')], HRESULT, 'UseConstraints',
              ( ['in'], VARIANT_BOOL, 'pbUseConstraints' )),
    COMMETHOD(['propget', helpstring(u'Cell aggregation type (how to bin).')], HRESULT, 'CellAggregationType',
              ( ['retval', 'out'], POINTER(esriRasterLasCellAggregationType), 'pCellAggType' )),
    COMMETHOD(['propput', helpstring(u'Cell aggregation type (how to bin).')], HRESULT, 'CellAggregationType',
              ( ['in'], esriRasterLasCellAggregationType, 'pCellAggType' )),
    COMMETHOD(['propget', helpstring(u'Data type.')], HRESULT, 'DataType',
              ( ['retval', 'out'], POINTER(esriRasterLasDataType), 'pDataType' )),
    COMMETHOD(['propput', helpstring(u'Data type.')], HRESULT, 'DataType',
              ( ['in'], esriRasterLasDataType, 'pDataType' )),
    COMMETHOD(['propget', helpstring(u'Void fill method.')], HRESULT, 'VoidFillMethod',
              ( ['retval', 'out'], POINTER(esriRasterLasVoidFillMethod), 'pVoidFillMethod' )),
    COMMETHOD(['propput', helpstring(u'Void fill method.')], HRESULT, 'VoidFillMethod',
              ( ['in'], esriRasterLasVoidFillMethod, 'pVoidFillMethod' )),
    COMMETHOD(['propget', helpstring(u'Fill holes up to this width or height by interpolation from hole boundaries.')], HRESULT, 'MaxHoleWidthFilled',
              ( ['retval', 'out'], POINTER(c_double), 'pMaxHoleWidth' )),
    COMMETHOD(['propput', helpstring(u'Fill holes up to this width or height by interpolation from hole boundaries.')], HRESULT, 'MaxHoleWidthFilled',
              ( ['in'], c_double, 'pMaxHoleWidth' )),
    COMMETHOD(['propget', helpstring(u'The spatial reference to be used, if NOT set in the LasDataset.')], HRESULT, 'SpatialReference',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference)), 'ppSpatialReference' )),
    COMMETHOD(['propputref', helpstring(u'The spatial reference to be used, if NOT set in the LasDataset.')], HRESULT, 'SpatialReference',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'ppSpatialReference' )),
    COMMETHOD(['propget', helpstring(u'Maximum number of different Las surfaces kept in this cache folder.')], HRESULT, 'CacheMaxNumSurfaces',
              ( ['retval', 'out'], POINTER(c_int), 'pMaxNumSurfaces' )),
    COMMETHOD(['propput', helpstring(u'Maximum number of different Las surfaces kept in this cache folder.')], HRESULT, 'CacheMaxNumSurfaces',
              ( ['in'], c_int, 'pMaxNumSurfaces' )),
    COMMETHOD(['propget', helpstring(u'Z tolerance for Las rasters in the image cache folder, used for compression.')], HRESULT, 'CacheRasterZTolerance',
              ( ['retval', 'out'], POINTER(c_double), 'pZTolerance' )),
    COMMETHOD(['propput', helpstring(u'Z tolerance for Las rasters in the image cache folder, used for compression.')], HRESULT, 'CacheRasterZTolerance',
              ( ['in'], c_double, 'pZTolerance' )),
    COMMETHOD(['propget', helpstring(u'The input Las file version (the latest if multiple found).')], HRESULT, 'LasFileVersion',
              ( ['retval', 'out'], POINTER(BSTR), 'LasFileVersion' )),
    COMMETHOD(['propput', helpstring(u'The input Las file version (the latest if multiple found).')], HRESULT, 'LasFileVersion',
              ( ['in'], BSTR, 'LasFileVersion' )),
    COMMETHOD(['propget', helpstring(u'Total number of points for all Las files, all return types.')], HRESULT, 'NumPointsTotal',
              ( ['retval', 'out'], POINTER(c_double), 'pNumPointsTotal' )),
    COMMETHOD(['propput', helpstring(u'Total number of points for all Las files, all return types.')], HRESULT, 'NumPointsTotal',
              ( ['in'], c_double, 'pNumPointsTotal' )),
    COMMETHOD(['propget', helpstring(u'Average point spacing.')], HRESULT, 'AvgPointSpacing',
              ( ['retval', 'out'], POINTER(c_double), 'pAvgPointSpacing' )),
    COMMETHOD(['propput', helpstring(u'Average point spacing.')], HRESULT, 'AvgPointSpacing',
              ( ['in'], c_double, 'pAvgPointSpacing' )),
    COMMETHOD(['propget', helpstring(u'Z Min.')], HRESULT, 'ZMin',
              ( ['retval', 'out'], POINTER(c_double), 'pZMin' )),
    COMMETHOD(['propput', helpstring(u'Z Min.')], HRESULT, 'ZMin',
              ( ['in'], c_double, 'pZMin' )),
    COMMETHOD(['propget', helpstring(u'Z Max.')], HRESULT, 'ZMax',
              ( ['retval', 'out'], POINTER(c_double), 'pZMax' )),
    COMMETHOD(['propput', helpstring(u'Z Max.')], HRESULT, 'ZMax',
              ( ['in'], c_double, 'pZMax' )),
]
################################################################
## code template for ILasDatasetToRasterFunctionArguments implementation
##class ILasDatasetToRasterFunctionArguments_Impl(object):
##    def _get(self):
##        u'Tin to raster interpolation type (how to rasterize the tin: Linear or NN).'
##        #return pType
##    def _set(self, pType):
##        u'Tin to raster interpolation type (how to rasterize the tin: Linear or NN).'
##    TinToRasterInterpolationType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Use tinning.'
##        #return pUseTinning
##    def _set(self, pUseTinning):
##        u'Use tinning.'
##    UseTinning = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Total number of points for all Las files, all return types.'
##        #return pNumPointsTotal
##    def _set(self, pNumPointsTotal):
##        u'Total number of points for all Las files, all return types.'
##    NumPointsTotal = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Void fill method.'
##        #return pVoidFillMethod
##    def _set(self, pVoidFillMethod):
##        u'Void fill method.'
##    VoidFillMethod = property(_get, _set, doc = _set.__doc__)
##
##    def LasDataset(self, ppLasDataset):
##        u'The input Las dataset or Las dataset name.'
##        #return 
##
##    def _get(self):
##        u'Cell width.'
##        #return pCellWidth
##    def _set(self, pCellWidth):
##        u'Cell width.'
##    CellWidth = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Data type.'
##        #return pDataType
##    def _set(self, pDataType):
##        u'Data type.'
##    DataType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Cell aggregation type (how to bin).'
##        #return pCellAggType
##    def _set(self, pCellAggType):
##        u'Cell aggregation type (how to bin).'
##    CellAggregationType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Z Min.'
##        #return pZMin
##    def _set(self, pZMin):
##        u'Z Min.'
##    ZMin = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether to use 3D constraints included in the LasDataset or not.'
##        #return pbUseConstraints
##    def _set(self, pbUseConstraints):
##        u'Indicates whether to use 3D constraints included in the LasDataset or not.'
##    UseConstraints = property(_get, _set, doc = _set.__doc__)
##
##    def SpatialReference(self, ppSpatialReference):
##        u'The spatial reference to be used, if NOT set in the LasDataset.'
##        #return 
##
##    def _get(self):
##        u'Z Max.'
##        #return pZMax
##    def _set(self, pZMax):
##        u'Z Max.'
##    ZMax = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Fill holes up to this width or height by interpolation from hole boundaries.'
##        #return pMaxHoleWidth
##    def _set(self, pMaxHoleWidth):
##        u'Fill holes up to this width or height by interpolation from hole boundaries.'
##    MaxHoleWidthFilled = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Z tolerance for Las rasters in the image cache folder, used for compression.'
##        #return pZTolerance
##    def _set(self, pZTolerance):
##        u'Z tolerance for Las rasters in the image cache folder, used for compression.'
##    CacheRasterZTolerance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Average point spacing.'
##        #return pAvgPointSpacing
##    def _set(self, pAvgPointSpacing):
##        u'Average point spacing.'
##    AvgPointSpacing = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Maximum number of different Las surfaces kept in this cache folder.'
##        #return pMaxNumSurfaces
##    def _set(self, pMaxNumSurfaces):
##        u'Maximum number of different Las surfaces kept in this cache folder.'
##    CacheMaxNumSurfaces = property(_get, _set, doc = _set.__doc__)
##
##    def ReturnTypesSelected(self, ppReturnTypesSelected):
##        u'Return types selected, e.g., esriRasterLasReturnFirst, 13.'
##        #return 
##
##    def ClassTypesSelected(self, ppClassTypesSelected):
##        u'Class types selected, e.g., esriRasterLasClassGround, or 217.'
##        #return 
##
##    def _get(self):
##        u'The input Las file version (the latest if multiple found).'
##        #return LasFileVersion
##    def _set(self, LasFileVersion):
##        u'The input Las file version (the latest if multiple found).'
##    LasFileVersion = property(_get, _set, doc = _set.__doc__)
##

class IClipFilter2(IClipFilter):
    _case_insensitive_ = True
    u'Provides access to additional members that control a clipping filter.'
    _iid_ = GUID('{D7D83C7A-A9F0-4A47-BEDB-F4FE8BD45907}')
    _idlflags_ = ['oleautomation']
IClipFilter2._methods_ = [
    COMMETHOD(['propget', helpstring(u'The raster clipping type.')], HRESULT, 'ClippingType',
              ( ['retval', 'out'], POINTER(esriRasterClippingType), 'pClippingType' )),
    COMMETHOD(['propput', helpstring(u'The raster clipping type.')], HRESULT, 'ClippingType',
              ( ['in'], esriRasterClippingType, 'pClippingType' )),
]
################################################################
## code template for IClipFilter2 implementation
##class IClipFilter2_Impl(object):
##    def _get(self):
##        u'The raster clipping type.'
##        #return pClippingType
##    def _set(self, pClippingType):
##        u'The raster clipping type.'
##    ClippingType = property(_get, _set, doc = _set.__doc__)
##

class ExcludedAreaFunctionArguments(CoClass):
    u'The arguments for the ExcludedArea raster function.'
    _reg_clsid_ = GUID('{32248838-455A-42CA-98CD-F938E502F495}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
ExcludedAreaFunctionArguments._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunctionArguments, IExcludedAreaFunctionArguments, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

IExportGeometryParameters._methods_ = [
    COMMETHOD(['propput', helpstring(u'The geometry type.')], HRESULT, 'GeometryType',
              ( ['in'], BSTR, 'pType' )),
    COMMETHOD(['propget', helpstring(u'The geometry type.')], HRESULT, 'GeometryType',
              ( ['retval', 'out'], POINTER(BSTR), 'pType' )),
    COMMETHOD(['propput', helpstring(u'The name of output feature class.')], HRESULT, 'OutFeatureClassName',
              ( ['in'], BSTR, 'Path' )),
    COMMETHOD(['propget', helpstring(u'The name of output feature class.')], HRESULT, 'OutFeatureClassName',
              ( ['retval', 'out'], POINTER(BSTR), 'Path' )),
    COMMETHOD(['propputref', helpstring(u'The output workspace.')], HRESULT, 'OutWorkspace',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspace), 'ppWorkspace' )),
    COMMETHOD(['propget', helpstring(u'The output workspace.')], HRESULT, 'OutWorkspace',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspace)), 'ppWorkspace' )),
]
################################################################
## code template for IExportGeometryParameters implementation
##class IExportGeometryParameters_Impl(object):
##    def _get(self):
##        u'The name of output feature class.'
##        #return Path
##    def _set(self, Path):
##        u'The name of output feature class.'
##    OutFeatureClassName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The geometry type.'
##        #return pType
##    def _set(self, pType):
##        u'The geometry type.'
##    GeometryType = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def OutWorkspace(self, ppWorkspace):
##        u'The output workspace.'
##        #return 
##

IRasterFunctionTemplateMapper._methods_ = [
    COMMETHOD([helpstring(u'Constructs a raster function template from a known template name.')], HRESULT, 'ToRasterFunctionTemplate',
              ( ['in'], BSTR, 'Name' ),
              ( ['retval', 'out'], POINTER(POINTER(IRasterFunctionTemplate)), 'ppTemplate' )),
]
################################################################
## code template for IRasterFunctionTemplateMapper implementation
##class IRasterFunctionTemplateMapper_Impl(object):
##    def ToRasterFunctionTemplate(self, Name):
##        u'Constructs a raster function template from a known template name.'
##        #return ppTemplate
##

class IRasterCollection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a raster collection.'
    _iid_ = GUID('{BD52F6E3-FC16-4C2C-9472-94CABF907FD0}')
    _idlflags_ = ['oleautomation']
IRasterCollection._methods_ = [
    COMMETHOD(['propget', helpstring(u'The number of rasters in this raster collection.')], HRESULT, 'RasterCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD([helpstring(u'Inserts a raster at a given index.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'index' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' )),
    COMMETHOD([helpstring(u'Appends a raster to the end.')], HRESULT, 'Append',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' )),
    COMMETHOD([helpstring(u'Removes a raster at a given index.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'index' )),
    COMMETHOD([helpstring(u'Finds a given raster and returns its index position.')], HRESULT, 'Find',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' ),
              ( ['retval', 'out'], POINTER(c_int), 'index' )),
    COMMETHOD([helpstring(u'Gets the raster at a given index position.')], HRESULT, 'Get',
              ( ['in'], c_int, 'index' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster)), 'ppRaster' )),
    COMMETHOD([helpstring(u'Sets the raster at a given index position.')], HRESULT, 'Set',
              ( ['in'], c_int, 'index' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' )),
    COMMETHOD([helpstring(u'Empties this raster collection.')], HRESULT, 'Empty'),
    COMMETHOD([helpstring(u'Populates this raster collection from associated RasterCatalog.')], HRESULT, 'Populate',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'pExtent' )),
]
################################################################
## code template for IRasterCollection implementation
##class IRasterCollection_Impl(object):
##    def Insert(self, index, pRaster):
##        u'Inserts a raster at a given index.'
##        #return 
##
##    def Set(self, index, pRaster):
##        u'Sets the raster at a given index position.'
##        #return 
##
##    def Populate(self, pExtent):
##        u'Populates this raster collection from associated RasterCatalog.'
##        #return 
##
##    def Get(self, index):
##        u'Gets the raster at a given index position.'
##        #return ppRaster
##
##    def Remove(self, index):
##        u'Removes a raster at a given index.'
##        #return 
##
##    def Empty(self):
##        u'Empties this raster collection.'
##        #return 
##
##    @property
##    def RasterCount(self):
##        u'The number of rasters in this raster collection.'
##        #return Count
##
##    def Find(self, pRaster):
##        u'Finds a given raster and returns its index position.'
##        #return index
##
##    def Append(self, pRaster):
##        u'Appends a raster to the end.'
##        #return 
##

IMosaicFunctionArguments._methods_ = [
    COMMETHOD(['propget', helpstring(u'The source catalog.')], HRESULT, 'Catalog',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppCatalog' )),
    COMMETHOD(['propputref', helpstring(u'The source catalog.')], HRESULT, 'Catalog',
              ( ['in'], POINTER(IUnknown), 'ppCatalog' )),
    COMMETHOD(['propget', helpstring(u'The mosaic seamline table.')], HRESULT, 'Seamline',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppSeamline' )),
    COMMETHOD(['propputref', helpstring(u'The mosaic seamline table.')], HRESULT, 'Seamline',
              ( ['in'], POINTER(IUnknown), 'ppSeamline' )),
    COMMETHOD(['propget', helpstring(u'The mosaic boundary.')], HRESULT, 'Boundary',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppBoundary' )),
    COMMETHOD(['propputref', helpstring(u'The mosaic boundary.')], HRESULT, 'Boundary',
              ( ['in'], POINTER(IUnknown), 'ppBoundary' )),
    COMMETHOD(['propget', helpstring(u'The color mapping information for color correction.')], HRESULT, 'DodgingTable',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppDodgingTable' )),
    COMMETHOD(['propputref', helpstring(u'The color mapping information for color correction.')], HRESULT, 'DodgingTable',
              ( ['in'], POINTER(IUnknown), 'ppDodgingTable' )),
    COMMETHOD(['propget', helpstring(u'The raster info.')], HRESULT, 'RasterInfo',
              ( ['retval', 'out'], POINTER(POINTER(IRasterInfo)), 'ppRasterInfo' )),
    COMMETHOD(['propputref', helpstring(u'The raster info.')], HRESULT, 'RasterInfo',
              ( ['in'], POINTER(IRasterInfo), 'ppRasterInfo' )),
    COMMETHOD(['propget', helpstring(u'The stereo pair table.')], HRESULT, 'StereoTable',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppStereoTable' )),
    COMMETHOD(['propputref', helpstring(u'The stereo pair table.')], HRESULT, 'StereoTable',
              ( ['in'], POINTER(IUnknown), 'ppStereoTable' )),
]
################################################################
## code template for IMosaicFunctionArguments implementation
##class IMosaicFunctionArguments_Impl(object):
##    def Catalog(self, ppCatalog):
##        u'The source catalog.'
##        #return 
##
##    def DodgingTable(self, ppDodgingTable):
##        u'The color mapping information for color correction.'
##        #return 
##
##    def Boundary(self, ppBoundary):
##        u'The mosaic boundary.'
##        #return 
##
##    def StereoTable(self, ppStereoTable):
##        u'The stereo pair table.'
##        #return 
##
##    def Seamline(self, ppSeamline):
##        u'The mosaic seamline table.'
##        #return 
##
##    def RasterInfo(self, ppRasterInfo):
##        u'The raster info.'
##        #return 
##

IMosaicFunctionArguments2._methods_ = [
    COMMETHOD(['propput', helpstring(u'The cellsize tolerance for sorting on cellsize.')], HRESULT, 'CellSizeTolerance',
              ( ['in'], c_double, 'pCellSizeTolerance' )),
    COMMETHOD(['propget', helpstring(u'The cellsize tolerance for sorting on cellsize.')], HRESULT, 'CellSizeTolerance',
              ( ['retval', 'out'], POINTER(c_double), 'pCellSizeTolerance' )),
]
################################################################
## code template for IMosaicFunctionArguments2 implementation
##class IMosaicFunctionArguments2_Impl(object):
##    def _get(self):
##        u'The cellsize tolerance for sorting on cellsize.'
##        #return pCellSizeTolerance
##    def _set(self, pCellSizeTolerance):
##        u'The cellsize tolerance for sorting on cellsize.'
##    CellSizeTolerance = property(_get, _set, doc = _set.__doc__)
##

class INoDataFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a NoData conversion filter.'
    _iid_ = GUID('{A373B8B2-B46A-4F62-88F8-B75BCFB55757}')
    _idlflags_ = ['oleautomation']
INoDataFilter._methods_ = [
    COMMETHOD(['propget', helpstring(u'The valid pixel value to be assigned to NoData pixels.')], HRESULT, 'NoDataToPixelValue',
              ( ['retval', 'out'], POINTER(c_double), 'pValue' )),
    COMMETHOD(['propput', helpstring(u'The valid pixel value to be assigned to NoData pixels.')], HRESULT, 'NoDataToPixelValue',
              ( ['in'], c_double, 'pValue' )),
]
################################################################
## code template for INoDataFilter implementation
##class INoDataFilter_Impl(object):
##    def _get(self):
##        u'The valid pixel value to be assigned to NoData pixels.'
##        #return pValue
##    def _set(self, pValue):
##        u'The valid pixel value to be assigned to NoData pixels.'
##    NoDataToPixelValue = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'esriRasterArithmeticOperation'
esriRasterPlus = 1
esriRasterMinus = 2
esriRasterMultiply = 3
esriRasterDivide = 4
esriRasterPower = 5
esriRasterMode = 6
esriRasterArithmeticOperation = c_int # enum

# values for enumeration 'esriRasterColorInterpretation'
esriRasterCIUnknown = 0
esriRasterCIGrayIndex = 1
esriRasterCIPaletteIndex = 2
esriRasterCIRedBand = 3
esriRasterCIGreenBand = 4
esriRasterCIBlueBand = 5
esriRasterCIAlphaBand = 6
esriRasterCIHueBand = 7
esriRasterCISaturationBand = 8
esriRasterCILightnessBand = 9
esriRasterCICyanBand = 10
esriRasterCIMagentaBand = 11
esriRasterCIYellowBand = 12
esriRasterCIBlackBand = 13
esriRasterCIYCbCrYBand = 14
esriRasterCIYCbCrCbBand = 15
esriRasterCIYCbCrCrBand = 16
esriRasterCIRGB32 = 32
esriRasterCISAI32 = 33
esriRasterColorInterpretation = c_int # enum
IImageFeaturePoints._methods_ = [
    COMMETHOD(['propget', helpstring(u'The image feature point count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propget', helpstring(u'The image feature point at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'index' ),
              ( ['retval', 'out'], POINTER(POINTER(IImageFeaturePoint)), 'ppFeaturePoint' )),
    COMMETHOD([helpstring(u'Removes the image feature point at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'index' )),
    COMMETHOD([helpstring(u'Removes all image feature points.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Adds a image feature point.')], HRESULT, 'Add',
              ( ['in'], POINTER(IImageFeaturePoint), 'pFeaturePoint' )),
    COMMETHOD([helpstring(u'Adds a image feature point at the specified position.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'index' ),
              ( ['in'], POINTER(IImageFeaturePoint), 'pFeaturePoint' )),
    COMMETHOD(['propget', helpstring(u"The feature points' image ID.")], HRESULT, 'ImageID',
              ( ['retval', 'out'], POINTER(c_int), 'pImageID' )),
    COMMETHOD(['propput', helpstring(u"The feature points' image ID.")], HRESULT, 'ImageID',
              ( ['in'], c_int, 'pImageID' )),
    COMMETHOD(['propget', helpstring(u'The extent within which feature points are extracted.')], HRESULT, 'Extent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'ppExtent' )),
    COMMETHOD(['propput', helpstring(u'The extent within which feature points are extracted.')], HRESULT, 'Extent',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'ppExtent' )),
    COMMETHOD(['propget', helpstring(u'The cell size at which feature points are extracted.')], HRESULT, 'CellSize',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IPnt)), 'ppCellsize' )),
    COMMETHOD(['propput', helpstring(u'The cell size at which feature points are extracted.')], HRESULT, 'CellSize',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IPnt), 'ppCellsize' )),
    COMMETHOD([helpstring(u"Converts a feature point's location from map (x, y) to pixel (colum, row).")], HRESULT, 'MapToPixel',
              ( ['in'], POINTER(IImageFeaturePoint), 'pFeaturePoint' ),
              ( ['out'], POINTER(c_double), 'Column' ),
              ( ['out'], POINTER(c_double), 'Row' )),
    COMMETHOD([helpstring(u"Converts a feature point's location from pixel (colum, row) to map (x, y).")], HRESULT, 'PixelToMap',
              ( ['in'], c_double, 'Column' ),
              ( ['in'], c_double, 'Row' ),
              ( ['in'], POINTER(IImageFeaturePoint), 'pFeaturePoint' )),
]
################################################################
## code template for IImageFeaturePoints implementation
##class IImageFeaturePoints_Impl(object):
##    @property
##    def Count(self):
##        u'The image feature point count.'
##        #return pCount
##
##    def Insert(self, index, pFeaturePoint):
##        u'Adds a image feature point at the specified position.'
##        #return 
##
##    def PixelToMap(self, Column, Row, pFeaturePoint):
##        u"Converts a feature point's location from pixel (colum, row) to map (x, y)."
##        #return 
##
##    def Remove(self, index):
##        u'Removes the image feature point at the specified position.'
##        #return 
##
##    @property
##    def Element(self, index):
##        u'The image feature point at the specified position.'
##        #return ppFeaturePoint
##
##    def RemoveAll(self):
##        u'Removes all image feature points.'
##        #return 
##
##    def Add(self, pFeaturePoint):
##        u'Adds a image feature point.'
##        #return 
##
##    def _get(self):
##        u'The extent within which feature points are extracted.'
##        #return ppExtent
##    def _set(self, ppExtent):
##        u'The extent within which feature points are extracted.'
##    Extent = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The cell size at which feature points are extracted.'
##        #return ppCellsize
##    def _set(self, ppCellsize):
##        u'The cell size at which feature points are extracted.'
##    CellSize = property(_get, _set, doc = _set.__doc__)
##
##    def MapToPixel(self, pFeaturePoint):
##        u"Converts a feature point's location from map (x, y) to pixel (colum, row)."
##        #return Column, Row
##
##    def _get(self):
##        u"The feature points' image ID."
##        #return pImageID
##    def _set(self, pImageID):
##        u"The feature points' image ID."
##    ImageID = property(_get, _set, doc = _set.__doc__)
##

IFocalMeanFilter._methods_ = [
    COMMETHOD([helpstring(u'Sets the size of the focal filter.')], HRESULT, 'SetSize',
              ( ['in'], c_int, 'nColumns' ),
              ( ['in'], c_int, 'nRows' )),
]
################################################################
## code template for IFocalMeanFilter implementation
##class IFocalMeanFilter_Impl(object):
##    def SetSize(self, nColumns, nRows):
##        u'Sets the size of the focal filter.'
##        #return 
##

class IDrLoader(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that controls a distributed raster catalog loader.'
    _iid_ = GUID('{5E1714CD-CBCA-458E-88CE-06F0CA5CCCDF}')
    _idlflags_ = ['oleautomation']
class IRasterCatalogLoader(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control rastercatalog loading.'
    _iid_ = GUID('{C285B597-951B-4763-BB62-A7E2074FBAC5}')
    _idlflags_ = ['oleautomation']
IDrLoader._methods_ = [
    COMMETHOD(['propget', helpstring(u'The ArcGIS server name to host loaders.')], HRESULT, 'ServerName',
              ( ['retval', 'out'], POINTER(BSTR), 'pServerName' )),
    COMMETHOD(['propput', helpstring(u'The ArcGIS server name to host loaders.')], HRESULT, 'ServerName',
              ( ['in'], BSTR, 'pServerName' )),
    COMMETHOD(['propget', helpstring(u'The raster catalog loader to be distributed.')], HRESULT, 'RasterCatalogLoader',
              ( ['retval', 'out'], POINTER(POINTER(IRasterCatalogLoader)), 'ppLoader' )),
    COMMETHOD(['propputref', helpstring(u'The raster catalog loader to be distributed.')], HRESULT, 'RasterCatalogLoader',
              ( ['in'], POINTER(IRasterCatalogLoader), 'ppLoader' )),
    COMMETHOD(['propget', helpstring(u'The current list of semicolon delimited failed dataset names.')], HRESULT, 'InvalidDatasets',
              ( ['retval', 'out'], POINTER(BSTR), 'pInvalidDatasets' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the loader is currently busy.')], HRESULT, 'IsBusy',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pIsBusy' )),
    COMMETHOD(['propget', helpstring(u'The last loading error.')], HRESULT, 'LastError',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IErrorInfo)), 'ppErrorInfo' )),
    COMMETHOD([helpstring(u'Loads all datasets in a directory into a given raster catalog.')], HRESULT, 'Load',
              ( ['in'], BSTR, 'Catalog' ),
              ( ['in'], BSTR, 'Directory' )),
    COMMETHOD([helpstring(u'Loads all datasets in a name list into a given raster catalog.')], HRESULT, 'LoadDatasets',
              ( ['in'], BSTR, 'Catalog' ),
              ( ['in'], BSTR, 'namelist' )),
    COMMETHOD([helpstring(u'Cancels loading.')], HRESULT, 'Cancel'),
    COMMETHOD([helpstring(u'Gets the current loading stats.')], HRESULT, 'GetStats',
              ( ['out'], POINTER(BSTR), 'pName' ),
              ( ['out'], POINTER(c_double), 'pMillis' )),
    COMMETHOD([helpstring(u'Gets the loading thread handle.')], HRESULT, 'GetThreadHandle',
              ( ['retval', 'out'], POINTER(c_int), 'pHandle' )),
]
################################################################
## code template for IDrLoader implementation
##class IDrLoader_Impl(object):
##    def Load(self, Catalog, Directory):
##        u'Loads all datasets in a directory into a given raster catalog.'
##        #return 
##
##    def GetThreadHandle(self):
##        u'Gets the loading thread handle.'
##        #return pHandle
##
##    def RasterCatalogLoader(self, ppLoader):
##        u'The raster catalog loader to be distributed.'
##        #return 
##
##    def _get(self):
##        u'The ArcGIS server name to host loaders.'
##        #return pServerName
##    def _set(self, pServerName):
##        u'The ArcGIS server name to host loaders.'
##    ServerName = property(_get, _set, doc = _set.__doc__)
##
##    def LoadDatasets(self, Catalog, namelist):
##        u'Loads all datasets in a name list into a given raster catalog.'
##        #return 
##
##    def GetStats(self):
##        u'Gets the current loading stats.'
##        #return pName, pMillis
##
##    def Cancel(self):
##        u'Cancels loading.'
##        #return 
##
##    @property
##    def IsBusy(self):
##        u'Indicates if the loader is currently busy.'
##        #return pIsBusy
##
##    @property
##    def LastError(self):
##        u'The last loading error.'
##        #return ppErrorInfo
##
##    @property
##    def InvalidDatasets(self):
##        u'The current list of semicolon delimited failed dataset names.'
##        #return pInvalidDatasets
##

class TableFunction(CoClass):
    u'A class for a table raster function.'
    _reg_clsid_ = GUID('{A3DA7CE4-0AF9-4130-954C-EA3294F549ED}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
TableFunction._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunction, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class IRasterFunction3(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control mask-data syncing for pixel blocks produced from raster functions.'
    _iid_ = GUID('{1B2C9C83-514C-4E5C-B9CF-7EE517DE43AA}')
    _idlflags_ = ['oleautomation']
IRasterFunction3._methods_ = [
    COMMETHOD(['propget'], HRESULT, 'ApplyMask',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbApplyMask' )),
    COMMETHOD(['propput'], HRESULT, 'ApplyMask',
              ( [], VARIANT_BOOL, 'pbApplyMask' )),
]
################################################################
## code template for IRasterFunction3 implementation
##class IRasterFunction3_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return pbApplyMask
##    def _set(self, pbApplyMask):
##        '-no docstring-'
##    ApplyMask = property(_get, _set, doc = _set.__doc__)
##

IRasterXform._methods_ = [
    COMMETHOD(['propget', helpstring(u'The full output extent within which this xform is applied.')], HRESULT, 'FullExtent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'ppFullExtent' )),
    COMMETHOD(['propput', helpstring(u'The full output extent within which this xform is applied.')], HRESULT, 'FullExtent',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'ppFullExtent' )),
    COMMETHOD([helpstring(u'Prepares the xform for a given extent and cellsize within a domain.')], HRESULT, 'Prepare',
              ( ['in'], c_int, 'iDomain' ),
              ( ['in'], c_double, 'Dx' ),
              ( ['in'], c_double, 'Dy' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'pExtent' )),
]
################################################################
## code template for IRasterXform implementation
##class IRasterXform_Impl(object):
##    def _get(self):
##        u'The full output extent within which this xform is applied.'
##        #return ppFullExtent
##    def _set(self, ppFullExtent):
##        u'The full output extent within which this xform is applied.'
##    FullExtent = property(_get, _set, doc = _set.__doc__)
##
##    def Prepare(self, iDomain, Dx, Dy, pExtent):
##        u'Prepares the xform for a given extent and cellsize within a domain.'
##        #return 
##

IItemURI._methods_ = [
    COMMETHOD(['propput', helpstring(u"A phrase that uniquely identifies the item's data source in the mosaic dataset. The value in this property is used for computing a 'signature' that appears in the URIHash field of the mosaic catalog.")], HRESULT, 'Key',
              ( ['in'], BSTR, 'pKeyString' )),
    COMMETHOD(['propget', helpstring(u"A phrase that uniquely identifies the item's data source in the mosaic dataset. The value in this property is used for computing a 'signature' that appears in the URIHash field of the mosaic catalog.")], HRESULT, 'Key',
              ( ['retval', 'out'], POINTER(BSTR), 'pKeyString' )),
    COMMETHOD(['propput', helpstring(u'The unique identifier of the item within a group. The value in this property appears in the Tag field of the mosaic catalog.')], HRESULT, 'Tag',
              ( ['in'], BSTR, 'pItemTag' )),
    COMMETHOD(['propget', helpstring(u'The unique identifier of the item within a group. The value in this property appears in the Tag field of the mosaic catalog.')], HRESULT, 'Tag',
              ( ['retval', 'out'], POINTER(BSTR), 'pItemTag' )),
    COMMETHOD(['propput', helpstring(u'The name of the collection to which the item belongs. The value in this property appears in the GroupName field of the mosaic catalog.')], HRESULT, 'Group',
              ( ['in'], BSTR, 'pItemGroup' )),
    COMMETHOD(['propget', helpstring(u'The name of the collection to which the item belongs. The value in this property appears in the GroupName field of the mosaic catalog.')], HRESULT, 'Group',
              ( ['retval', 'out'], POINTER(BSTR), 'pItemGroup' )),
    COMMETHOD(['propput', helpstring(u'The friendly-name identifying this item in the mosaic dataset. The value in this property appears in the Name field of the mosaic catalog.')], HRESULT, 'DisplayName',
              ( ['in'], BSTR, 'pDisplayName' )),
    COMMETHOD(['propget', helpstring(u'The friendly-name identifying this item in the mosaic dataset. The value in this property appears in the Name field of the mosaic catalog.')], HRESULT, 'DisplayName',
              ( ['retval', 'out'], POINTER(BSTR), 'pDisplayName' )),
    COMMETHOD(['propput', helpstring(u"The name of the sensor product associated with the item's data source. The value in this property appears in the ProductName field of the mosaic catalog.")], HRESULT, 'ProductName',
              ( ['in'], BSTR, 'pProductName' )),
    COMMETHOD(['propget', helpstring(u"The name of the sensor product associated with the item's data source. The value in this property appears in the ProductName field of the mosaic catalog.")], HRESULT, 'ProductName',
              ( ['retval', 'out'], POINTER(BSTR), 'pProductName' )),
    COMMETHOD(['propput', helpstring(u'The timestamp associated with the data source referenced by this item URI.')], HRESULT, 'SourceTimeStamp',
              ( ['in'], c_double, 'pSourceTimeStamp' )),
    COMMETHOD(['propget', helpstring(u'The timestamp associated with the data source referenced by this item URI.')], HRESULT, 'SourceTimeStamp',
              ( ['retval', 'out'], POINTER(c_double), 'pSourceTimeStamp' )),
    COMMETHOD(['propputref', helpstring(u'Paths to all auxiliary data source items that aid in the construction of this item.')], HRESULT, 'AuxiliaryPaths',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray), 'ppAuxiliaryPaths' )),
    COMMETHOD(['propget', helpstring(u'Paths to all auxiliary data source items that aid in the construction of this item.')], HRESULT, 'AuxiliaryPaths',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray)), 'ppAuxiliaryPaths' )),
]
################################################################
## code template for IItemURI implementation
##class IItemURI_Impl(object):
##    def _get(self):
##        u'The friendly-name identifying this item in the mosaic dataset. The value in this property appears in the Name field of the mosaic catalog.'
##        #return pDisplayName
##    def _set(self, pDisplayName):
##        u'The friendly-name identifying this item in the mosaic dataset. The value in this property appears in the Name field of the mosaic catalog.'
##    DisplayName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The timestamp associated with the data source referenced by this item URI.'
##        #return pSourceTimeStamp
##    def _set(self, pSourceTimeStamp):
##        u'The timestamp associated with the data source referenced by this item URI.'
##    SourceTimeStamp = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u"The name of the sensor product associated with the item's data source. The value in this property appears in the ProductName field of the mosaic catalog."
##        #return pProductName
##    def _set(self, pProductName):
##        u"The name of the sensor product associated with the item's data source. The value in this property appears in the ProductName field of the mosaic catalog."
##    ProductName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The unique identifier of the item within a group. The value in this property appears in the Tag field of the mosaic catalog.'
##        #return pItemTag
##    def _set(self, pItemTag):
##        u'The unique identifier of the item within a group. The value in this property appears in the Tag field of the mosaic catalog.'
##    Tag = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u"A phrase that uniquely identifies the item's data source in the mosaic dataset. The value in this property is used for computing a 'signature' that appears in the URIHash field of the mosaic catalog."
##        #return pKeyString
##    def _set(self, pKeyString):
##        u"A phrase that uniquely identifies the item's data source in the mosaic dataset. The value in this property is used for computing a 'signature' that appears in the URIHash field of the mosaic catalog."
##    Key = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The name of the collection to which the item belongs. The value in this property appears in the GroupName field of the mosaic catalog.'
##        #return pItemGroup
##    def _set(self, pItemGroup):
##        u'The name of the collection to which the item belongs. The value in this property appears in the GroupName field of the mosaic catalog.'
##    Group = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def AuxiliaryPaths(self, ppAuxiliaryPaths):
##        u'Paths to all auxiliary data source items that aid in the construction of this item.'
##        #return 
##

class SdeRasterTableName(CoClass):
    u'A container for name information about an SDE Raster.'
    _reg_clsid_ = GUID('{942AC1C0-FEC4-11D3-8D6F-00C04F5B87B2}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
SdeRasterTableName._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDatasetName, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, ISdeRasterTableName, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ISQLPrivilege]

class ComplexFunction(CoClass):
    u'A class for a Complex value conversion function.'
    _reg_clsid_ = GUID('{7F9B9795-6D98-4F8B-AEB8-71FC8FE92E49}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
ComplexFunction._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunction, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]


# values for enumeration 'esriRasterBandArithmeticMethod'
esriBandArithmeticUserDefined = 0
esriBandArithmeticNDVI = 1
esriBandArithmeticSAVI = 2
esriBandArithmeticTSAVI = 3
esriBandArithmeticMSAVI = 4
esriBandArithmeticGEMI = 5
esriBandArithmeticPVI = 6
esriBandArithmeticGVITM = 7
esriBandArithmeticSultan = 8
esriRasterBandArithmeticMethod = c_int # enum
class IRasterTypeItemURI(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a raster type item URI.'
    _iid_ = GUID('{28C1476A-CC64-4254-9082-44A9893B54D3}')
    _idlflags_ = ['oleautomation']
IRasterTypeItemURI._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The item URI objects associated with this container URI object.')], HRESULT, 'Items',
              ( ['in'], POINTER(IItemURIArray), 'ppItemURIArray' )),
    COMMETHOD(['propget', helpstring(u'The item URI objects associated with this container URI object.')], HRESULT, 'Items',
              ( ['retval', 'out'], POINTER(POINTER(IItemURIArray)), 'ppItemURIArray' )),
    COMMETHOD(['propput', helpstring(u'The index to the item template contained within the parent raster type that corresponds to this item URI.')], HRESULT, 'ItemTemplateIndex',
              ( ['in'], c_int, 'pTemplateIndex' )),
    COMMETHOD(['propget', helpstring(u'The index to the item template contained within the parent raster type that corresponds to this item URI.')], HRESULT, 'ItemTemplateIndex',
              ( ['retval', 'out'], POINTER(c_int), 'pTemplateIndex' )),
]
################################################################
## code template for IRasterTypeItemURI implementation
##class IRasterTypeItemURI_Impl(object):
##    def _get(self):
##        u'The index to the item template contained within the parent raster type that corresponds to this item URI.'
##        #return pTemplateIndex
##    def _set(self, pTemplateIndex):
##        u'The index to the item template contained within the parent raster type that corresponds to this item URI.'
##    ItemTemplateIndex = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Items(self, ppItemURIArray):
##        u'The item URI objects associated with this container URI object.'
##        #return 
##

class IFocalStatisticsFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a focal statistics filter.'
    _iid_ = GUID('{D08FD5FB-E3BA-4858-AE1D-D0423827DBBC}')
    _idlflags_ = ['oleautomation']
IFocalStatisticsFilter._methods_ = [
    COMMETHOD(['propget', helpstring(u'The focal statistic type.')], HRESULT, 'Type',
              ( ['retval', 'out'], POINTER(esriFocalStatisticType), 'pType' )),
    COMMETHOD(['propput', helpstring(u'The focal statistic type.')], HRESULT, 'Type',
              ( ['in'], esriFocalStatisticType, 'pType' )),
    COMMETHOD([helpstring(u'Sets the size of the focal filter.')], HRESULT, 'SetSize',
              ( ['in'], c_int, 'nColumns' ),
              ( ['in'], c_int, 'nRows' )),
]
################################################################
## code template for IFocalStatisticsFilter implementation
##class IFocalStatisticsFilter_Impl(object):
##    def SetSize(self, nColumns, nRows):
##        u'Sets the size of the focal filter.'
##        #return 
##
##    def _get(self):
##        u'The focal statistic type.'
##        #return pType
##    def _set(self, pType):
##        u'The focal statistic type.'
##    Type = property(_get, _set, doc = _set.__doc__)
##

class IRemoveItemsParameters(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control parameters for removing rasters from a mosaic dataset.'
    _iid_ = GUID('{A907CB6A-6CFC-4FB5-8D80-93EA185416D7}')
    _idlflags_ = ['oleautomation']
class IRemoveItemsParameters2(IRemoveItemsParameters):
    _case_insensitive_ = True
    u'Provides access to members that control parameters for removing rasters from a mosaic dataset.'
    _iid_ = GUID('{1392AC33-0BE8-4C56-93B8-AE0644297C68}')
    _idlflags_ = ['oleautomation']
IRemoveItemsParameters._methods_ = [
    COMMETHOD(['propput', helpstring(u'Indicates whether the raster dataset associated with selected overview items are deleted as well. Overview images created within the geodatabase are owned and managed by the mosaic dataset. These managed overview images are always deleted along with the corres?!?\x08?&')], HRESULT, 'DeleteOverviewImages',
              ( ['in'], VARIANT_BOOL, 'pbDeleteOverviewImages' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the raster dataset associated with selected overview items are deleted as well. Overview images created within the geodatabase are owned and managed by the mosaic dataset. These managed overview images are always deleted along with the corres?!?\x08?&')], HRESULT, 'DeleteOverviewImages',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbDeleteOverviewImages' )),
    COMMETHOD(['propput', helpstring(u"Indicates whether to remove the raster type instances for those which don't have any associated catalog items.")], HRESULT, 'RemoveUnreferencedInstances',
              ( ['in'], VARIANT_BOOL, 'pbRemoveUnreferencedInstances' )),
    COMMETHOD(['propget', helpstring(u"Indicates whether to remove the raster type instances for those which don't have any associated catalog items.")], HRESULT, 'RemoveUnreferencedInstances',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbRemoveUnreferencedInstances' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to update the time stamp of all overview items affected by the removal of selected primary items.')], HRESULT, 'TouchAffectedOverviewItems',
              ( ['in'], VARIANT_BOOL, 'pbTouchAffectedOverviewItems' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to update the time stamp of all overview items affected by the removal of selected primary items.')], HRESULT, 'TouchAffectedOverviewItems',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbTouchAffectedOverviewItems' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether only catalog items with broken paths are removed.')], HRESULT, 'RemoveBrokenItemsOnly',
              ( ['in'], VARIANT_BOOL, 'pbRemoveBrokenItemsOnly' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether only catalog items with broken paths are removed.')], HRESULT, 'RemoveBrokenItemsOnly',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbRemoveBrokenItemsOnly' )),
]
################################################################
## code template for IRemoveItemsParameters implementation
##class IRemoveItemsParameters_Impl(object):
##    def _get(self):
##        u'Indicates whether only catalog items with broken paths are removed.'
##        #return pbRemoveBrokenItemsOnly
##    def _set(self, pbRemoveBrokenItemsOnly):
##        u'Indicates whether only catalog items with broken paths are removed.'
##    RemoveBrokenItemsOnly = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether to update the time stamp of all overview items affected by the removal of selected primary items.'
##        #return pbTouchAffectedOverviewItems
##    def _set(self, pbTouchAffectedOverviewItems):
##        u'Indicates whether to update the time stamp of all overview items affected by the removal of selected primary items.'
##    TouchAffectedOverviewItems = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether the raster dataset associated with selected overview items are deleted as well. Overview images created within the geodatabase are owned and managed by the mosaic dataset. These managed overview images are always deleted along with the corres?!?\x08?&'
##        #return pbDeleteOverviewImages
##    def _set(self, pbDeleteOverviewImages):
##        u'Indicates whether the raster dataset associated with selected overview items are deleted as well. Overview images created within the geodatabase are owned and managed by the mosaic dataset. These managed overview images are always deleted along with the corres?!?\x08?&'
##    DeleteOverviewImages = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u"Indicates whether to remove the raster type instances for those which don't have any associated catalog items."
##        #return pbRemoveUnreferencedInstances
##    def _set(self, pbRemoveUnreferencedInstances):
##        u"Indicates whether to remove the raster type instances for those which don't have any associated catalog items."
##    RemoveUnreferencedInstances = property(_get, _set, doc = _set.__doc__)
##

IRemoveItemsParameters2._methods_ = [
    COMMETHOD(['propput', helpstring(u'Indicates whether the cache files associated with selected mosaic dataset items are deleted.')], HRESULT, 'DeleteItemCache',
              ( ['in'], VARIANT_BOOL, 'pbDeleteItemCache' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the cache files associated with selected mosaic dataset items are deleted.')], HRESULT, 'DeleteItemCache',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbDeleteItemCache' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether selected mosaic dataset items are deleted from the mosaic dataset.')], HRESULT, 'RemoveItem',
              ( ['in'], VARIANT_BOOL, 'pbRemoveItem' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether selected mosaic dataset items are deleted from the mosaic dataset.')], HRESULT, 'RemoveItem',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbRemoveItem' )),
]
################################################################
## code template for IRemoveItemsParameters2 implementation
##class IRemoveItemsParameters2_Impl(object):
##    def _get(self):
##        u'Indicates whether the cache files associated with selected mosaic dataset items are deleted.'
##        #return pbDeleteItemCache
##    def _set(self, pbDeleteItemCache):
##        u'Indicates whether the cache files associated with selected mosaic dataset items are deleted.'
##    DeleteItemCache = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether selected mosaic dataset items are deleted from the mosaic dataset.'
##        #return pbRemoveItem
##    def _set(self, pbRemoveItem):
##        u'Indicates whether selected mosaic dataset items are deleted from the mosaic dataset.'
##    RemoveItem = property(_get, _set, doc = _set.__doc__)
##

class DEWMSMapType(CoClass):
    u'WMS Map Data Element object Type.'
    _reg_clsid_ = GUID('{3B36C081-2A17-4B08-BAB1-B88ACAE72640}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
DEWMSMapType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDEWMSMapType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDEServerObjectType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGxFilterInfo, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataElementType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGPDataType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone]

class IRasterGeometryProc2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that allow raster geometry processing.'
    _iid_ = GUID('{9092C7C1-5C8F-4CE8-BB2C-5A98E2574EE7}')
    _idlflags_ = ['oleautomation']
IRasterGeometryProc2._methods_ = [
    COMMETHOD([helpstring(u'Flips the input raster.')], HRESULT, 'Flip',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' )),
    COMMETHOD([helpstring(u'Mirrors the input raster.')], HRESULT, 'Mirror',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' )),
    COMMETHOD([helpstring(u'Shifts the input raster by deltaX and deltaY map units.')], HRESULT, 'Shift',
              ( ['in'], c_double, 'deltaX' ),
              ( ['in'], c_double, 'deltaY' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' )),
    COMMETHOD([helpstring(u'Scales the input raster by the specified x and y scale factors.')], HRESULT, 'ReScale',
              ( ['in'], c_double, 'xScale' ),
              ( ['in'], c_double, 'yScale' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' )),
    COMMETHOD([helpstring(u'Rotates the input raster around the specified pivot by an angle specified in degrees.')], HRESULT, 'Rotate',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'ipPivotPoint' ),
              ( ['in'], c_double, 'rotateAngle' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' )),
    COMMETHOD([helpstring(u'Warps the input raster based upon the input control points using the transformation type specified.')], HRESULT, 'Warp',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPointCollection), 'sourceControlPoints' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPointCollection), 'targetControlPoints' ),
              ( ['in'], esriGeoTransTypeEnum, 'transformType' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' )),
    COMMETHOD([helpstring(u'Performs a Hermite transformation on the input raster based upon the 2 input control point pairs.')], HRESULT, 'TwoPointsAdjust',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPointCollection), 'sourceControlPoints' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPointCollection), 'targetControlPoints' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' )),
    COMMETHOD([helpstring(u'Transforms a set of points based upon the transformation being applied to the input raster.')], HRESULT, 'PointsTransform',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPointCollection), 'inPoints' ),
              ( ['in'], VARIANT_BOOL, 'isForward' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPointCollection)), 'outPoints' )),
    COMMETHOD([helpstring(u'Computes a least squares fit for the input control points.')], HRESULT, 'LeastSquareFit',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPointCollection), 'sourceControlPoints' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPointCollection), 'targetControlPoints' ),
              ( ['in'], esriGeoTransTypeEnum, 'transformType' ),
              ( ['in'], VARIANT_BOOL, 'forwardTransformation' ),
              ( ['in'], VARIANT_BOOL, 'returnTransformationCoef' ),
              ( ['retval', 'out'], POINTER(VARIANT), 'pVar' )),
    COMMETHOD([helpstring(u'Resets the input raster to its native coordinate space.')], HRESULT, 'Reset',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' )),
    COMMETHOD([helpstring(u'Persists the input raster to a new dataset of the specified format.')], HRESULT, 'Rectify',
              ( ['in'], BSTR, 'saveas_name' ),
              ( ['in'], BSTR, 'Format' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' )),
    COMMETHOD([helpstring(u'Outputs the current transformation properties to the dataset header or auxilliary file.')], HRESULT, 'Register',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' )),
    COMMETHOD([helpstring(u'Clips the input raster based on the specified envelope.')], HRESULT, 'Clip',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'ipRectangle' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' )),
    COMMETHOD([helpstring(u'Projects the input raster using a single polynomial fit to compute the adjustment between coordinate systems.')], HRESULT, 'ProjectFast',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'pNewSR' ),
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.rstResamplingTypes, 'resampleType' ),
              ( ['in', 'optional'], POINTER(VARIANT), 'CellSize' ),
              ( ['in', 'optional'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' )),
    COMMETHOD(['restricted', helpstring(u'Projects the input raster using specified transformation type.')], HRESULT, 'Project',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'ipNewSR' ),
              ( ['in'], esriRasterPrjMethodTypeEnum, 'PrjMethodType' ),
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.rstResamplingTypes, 'resampleType' ),
              ( ['in'], c_double, 'newCellsize' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' )),
    COMMETHOD([helpstring(u'Merges the input rasters into a single dataset.')], HRESULT, 'Merge',
              ( ['in'], BSTR, 'saveas_name' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspace), 'ipWorkspace' ),
              ( ['in'], BSTR, 'outRasterFormat' ),
              ( ['in'], c_double, 'CellSize' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'ipSR' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster)), 'ippOutRaster' )),
    COMMETHOD([helpstring(u'Mosaics the input rasters into a single dataset.')], HRESULT, 'Mosaic',
              ( ['in'], BSTR, 'saveas_name' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspace), 'ipWorkspace' ),
              ( ['in'], BSTR, 'outRasterFormat' ),
              ( ['in'], c_double, 'CellSize' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'ipSR' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster)), 'ippOutRaster' )),
    COMMETHOD([helpstring(u'Resamples the input raster to a new cellsize.')], HRESULT, 'Resample',
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.rstResamplingTypes, 'resampleType' ),
              ( ['in'], c_double, 'newCellsize' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the transformation of pixel to map is simple.')], HRESULT, 'IsPixelToMapTransSimple',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'isSimple' )),
    COMMETHOD([helpstring(u'Gets the number of transformations.')], HRESULT, 'GetRasterXFormCount',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' ),
              ( ['in'], c_int, 'band' ),
              ( ['retval', 'out'], POINTER(c_int), 'XFormCount' )),
    COMMETHOD([helpstring(u'Gets the polynomial order of the indexed transformation.')], HRESULT, 'GetRasterXFormOrderByIndex',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' ),
              ( ['in'], c_int, 'band' ),
              ( ['in'], c_int, 'index' ),
              ( ['retval', 'out'], POINTER(esriGeoTransTypeEnum), 'Order' )),
    COMMETHOD([helpstring(u'Gets the polynomial order and the polynomial coefficients of the indexed transformation.')], HRESULT, 'GetRasterXFormByIndex',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' ),
              ( ['in'], c_int, 'band' ),
              ( ['in'], VARIANT_BOOL, 'forward' ),
              ( ['in'], c_int, 'index' ),
              ( ['in', 'out'], POINTER(esriGeoTransTypeEnum), 'Order' ),
              ( ['in', 'out'], POINTER(VARIANT), 'pVar' )),
    COMMETHOD([helpstring(u'Sets a polynomial transformation to the Raster.')], HRESULT, 'PutRasterXForm',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' ),
              ( ['in'], VARIANT_BOOL, 'clean' ),
              ( ['in'], esriGeoTransTypeEnum, 'Order' ),
              ( ['in'], POINTER(VARIANT), 'pVar' )),
    COMMETHOD([helpstring(u'Performs the map to pixel transformation.')], HRESULT, 'WKSPointsMap2PixelTransform',
              ( ['in'], c_int, 'pointsCount' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPoint), 'inPoints' ),
              ( ['in'], VARIANT_BOOL, 'isForward' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' ),
              ( ['in', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPoint), 'outPoints' )),
]
################################################################
## code template for IRasterGeometryProc2 implementation
##class IRasterGeometryProc2_Impl(object):
##    def LeastSquareFit(self, sourceControlPoints, targetControlPoints, transformType, forwardTransformation, returnTransformationCoef):
##        u'Computes a least squares fit for the input control points.'
##        #return pVar
##
##    def ProjectFast(self, pNewSR, resampleType, CellSize, pRaster):
##        u'Projects the input raster using a single polynomial fit to compute the adjustment between coordinate systems.'
##        #return 
##
##    def GetRasterXFormCount(self, pRaster, band):
##        u'Gets the number of transformations.'
##        #return XFormCount
##
##    def Resample(self, resampleType, newCellsize, pRaster):
##        u'Resamples the input raster to a new cellsize.'
##        #return 
##
##    def Warp(self, sourceControlPoints, targetControlPoints, transformType, pRaster):
##        u'Warps the input raster based upon the input control points using the transformation type specified.'
##        #return 
##
##    def Mosaic(self, saveas_name, ipWorkspace, outRasterFormat, CellSize, ipSR, pRaster):
##        u'Mosaics the input rasters into a single dataset.'
##        #return ippOutRaster
##
##    def Reset(self, pRaster):
##        u'Resets the input raster to its native coordinate space.'
##        #return 
##
##    def Rotate(self, ipPivotPoint, rotateAngle, pRaster):
##        u'Rotates the input raster around the specified pivot by an angle specified in degrees.'
##        #return 
##
##    @property
##    def IsPixelToMapTransSimple(self, pRaster):
##        u'Indicates if the transformation of pixel to map is simple.'
##        #return isSimple
##
##    def ReScale(self, xScale, yScale, pRaster):
##        u'Scales the input raster by the specified x and y scale factors.'
##        #return 
##
##    def Shift(self, deltaX, deltaY, pRaster):
##        u'Shifts the input raster by deltaX and deltaY map units.'
##        #return 
##
##    def Register(self, pRaster):
##        u'Outputs the current transformation properties to the dataset header or auxilliary file.'
##        #return 
##
##    def Flip(self, pRaster):
##        u'Flips the input raster.'
##        #return 
##
##    def Project(self, ipNewSR, PrjMethodType, resampleType, newCellsize, pRaster):
##        u'Projects the input raster using specified transformation type.'
##        #return 
##
##    def Merge(self, saveas_name, ipWorkspace, outRasterFormat, CellSize, ipSR, pRaster):
##        u'Merges the input rasters into a single dataset.'
##        #return ippOutRaster
##
##    def WKSPointsMap2PixelTransform(self, pointsCount, inPoints, isForward, pRaster):
##        u'Performs the map to pixel transformation.'
##        #return outPoints
##
##    def PointsTransform(self, inPoints, isForward, pRaster):
##        u'Transforms a set of points based upon the transformation being applied to the input raster.'
##        #return outPoints
##
##    def PutRasterXForm(self, pRaster, clean, Order, pVar):
##        u'Sets a polynomial transformation to the Raster.'
##        #return 
##
##    def GetRasterXFormOrderByIndex(self, pRaster, band, index):
##        u'Gets the polynomial order of the indexed transformation.'
##        #return Order
##
##    def Clip(self, ipRectangle, pRaster):
##        u'Clips the input raster based on the specified envelope.'
##        #return 
##
##    def Rectify(self, saveas_name, Format, pRaster):
##        u'Persists the input raster to a new dataset of the specified format.'
##        #return 
##
##    def Mirror(self, pRaster):
##        u'Mirrors the input raster.'
##        #return 
##
##    def GetRasterXFormByIndex(self, pRaster, band, forward, index):
##        u'Gets the polynomial order and the polynomial coefficients of the indexed transformation.'
##        #return Order, pVar
##
##    def TwoPointsAdjust(self, sourceControlPoints, targetControlPoints, pRaster):
##        u'Performs a Hermite transformation on the input raster based upon the 2 input control point pairs.'
##        #return 
##

class IUniqueDoubleValues2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that controls unique double values.'
    _iid_ = GUID('{E07D1C59-C0DA-4A19-BDFA-C555CA4E0971}')
    _idlflags_ = ['oleautomation']
IUniqueDoubleValues2._methods_ = [
    COMMETHOD([helpstring(u'Adds a value if necessary and returns its value ID.')], HRESULT, 'Add',
              ( ['in'], c_double, 'Value' ),
              ( ['in'], c_double, 'Count' ),
              ( ['retval', 'out'], POINTER(c_int), 'index' )),
]
################################################################
## code template for IUniqueDoubleValues2 implementation
##class IUniqueDoubleValues2_Impl(object):
##    def Add(self, Value, Count):
##        u'Adds a value if necessary and returns its value ID.'
##        #return index
##

class StatisticsFunction(CoClass):
    u'A class for a statistic raster function.'
    _reg_clsid_ = GUID('{DD760853-675F-4770-B678-AD1600E6DB5E}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
StatisticsFunction._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunction, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class PixelBlock(CoClass):
    u'Esri PixelBlock, a container of pixel data.'
    _reg_clsid_ = GUID('{AB1B6868-B08C-443A-B7EF-F6B2FDEC434C}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IPixelBlock3(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a PixelBlock.'
    _iid_ = GUID('{0ED55C8F-1EC2-4B40-A5D9-F3DA548F1F40}')
    _idlflags_ = ['oleautomation']
PixelBlock._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IPixelBlock, IPixelBlock2, IPixelBlock3, IPixelBlock4]

class RasterNativeType(CoClass):
    u'Native type for raster datasets.'
    _reg_clsid_ = GUID('{385BA7AE-3491-4AA7-8A5B-83DC6B6BB059}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
RasterNativeType._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.INativeType, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.INativeTypeSearch]

class IRasterTypeName(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a raster type name.'
    _iid_ = GUID('{3DE899F9-7C59-4D03-9AFA-5F526398A6B5}')
    _idlflags_ = ['oleautomation']
IRasterTypeName._methods_ = [
    COMMETHOD(['propput', helpstring(u"The string representation of the raster type object. This can either be a name of an installed raster type object (like 'Raster Dataset' or 'Landsat 7 ETM+'), or path to a .ART file, or a fully-qualified path to a raster type instanced stored within a mosaic d?!?\x08?&")], HRESULT, 'Name',
              ( ['in'], BSTR, 'pName' )),
    COMMETHOD(['propget', helpstring(u"The string representation of the raster type object. This can either be a name of an installed raster type object (like 'Raster Dataset' or 'Landsat 7 ETM+'), or path to a .ART file, or a fully-qualified path to a raster type instanced stored within a mosaic d?!?\x08?&")], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'pName' )),
    COMMETHOD(['propputref', helpstring(u'The mosaic dataset name object that stores the raster type instance referenced by this raster type name object.')], HRESULT, 'MosaicDatasetName',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IMosaicDatasetName), 'ppMosaicDatasetName' )),
    COMMETHOD(['propget', helpstring(u'The mosaic dataset name object that stores the raster type instance referenced by this raster type name object.')], HRESULT, 'MosaicDatasetName',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IMosaicDatasetName)), 'ppMosaicDatasetName' )),
    COMMETHOD(['propput', helpstring(u'The object ID within the mosaic dataset of the raster type instance referenced by this raster type name object.')], HRESULT, 'InstanceID',
              ( ['in'], c_int, 'pInstanceID' )),
    COMMETHOD(['propget', helpstring(u'The object ID within the mosaic dataset of the raster type instance referenced by this raster type name object.')], HRESULT, 'InstanceID',
              ( ['retval', 'out'], POINTER(c_int), 'pInstanceID' )),
]
################################################################
## code template for IRasterTypeName implementation
##class IRasterTypeName_Impl(object):
##    @property
##    def MosaicDatasetName(self, ppMosaicDatasetName):
##        u'The mosaic dataset name object that stores the raster type instance referenced by this raster type name object.'
##        #return 
##
##    def _get(self):
##        u'The object ID within the mosaic dataset of the raster type instance referenced by this raster type name object.'
##        #return pInstanceID
##    def _set(self, pInstanceID):
##        u'The object ID within the mosaic dataset of the raster type instance referenced by this raster type name object.'
##    InstanceID = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u"The string representation of the raster type object. This can either be a name of an installed raster type object (like 'Raster Dataset' or 'Landsat 7 ETM+'), or path to a .ART file, or a fully-qualified path to a raster type instanced stored within a mosaic d?!?\x08?&"
##        #return pName
##    def _set(self, pName):
##        u"The string representation of the raster type object. This can either be a name of an installed raster type object (like 'Raster Dataset' or 'Landsat 7 ETM+'), or path to a .ART file, or a fully-qualified path to a raster type instanced stored within a mosaic d?!?\x08?&"
##    Name = property(_get, _set, doc = _set.__doc__)
##

class IPixelFilter3(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to additional members that control a pixel filter.'
    _iid_ = GUID('{0ED41A27-9699-4B09-B3AF-7CFFD9F57C28}')
    _idlflags_ = ['oleautomation']
IPixelFilter3._methods_ = [
    COMMETHOD([helpstring(u'Synchronizes this filter when raster properties are changed.')], HRESULT, 'Synchronize',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' )),
]
################################################################
## code template for IPixelFilter3 implementation
##class IPixelFilter3_Impl(object):
##    def Synchronize(self, pRaster):
##        u'Synchronizes this filter when raster properties are changed.'
##        #return 
##

class IGenericObjectCrawler(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control an object crawler.'
    _iid_ = GUID('{1C43CCBB-7FDB-4E06-9583-5197A9CB2388}')
    _idlflags_ = ['oleautomation']
IGenericObjectCrawler._methods_ = [
    COMMETHOD(['propput', helpstring(u'The data source type associated with this crawler.')], HRESULT, 'CrawlerItemType',
              ( ['in'], esriCrawlerDataSourceType, 'rhs' )),
    COMMETHOD(['propputref', helpstring(u'The object to crawl.')], HRESULT, 'Object',
              ( ['in'], POINTER(IUnknown), 'ppObject' )),
    COMMETHOD(['propget', helpstring(u'The object to crawl.')], HRESULT, 'Object',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppObject' )),
]
################################################################
## code template for IGenericObjectCrawler implementation
##class IGenericObjectCrawler_Impl(object):
##    def _set(self, rhs):
##        u'The data source type associated with this crawler.'
##    CrawlerItemType = property(fset = _set, doc = _set.__doc__)
##
##    @property
##    def Object(self, ppObject):
##        u'The object to crawl.'
##        #return 
##

class QuickBirdBuilder(CoClass):
    u'A raster builder for QuickBird files'
    _reg_clsid_ = GUID('{BF0D25E4-B429-417A-9EA1-2ABED24D106D}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
QuickBirdBuilder._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterBuilder2, IRasterBuilderInit]


# values for enumeration 'esriRasterLasReturnType'
esriRasterLasReturnAny = -1
esriRasterLasReturnFirst = 1
esriRasterLasReturnSecond = 2
esriRasterLasReturnThird = 3
esriRasterLasReturnFourth = 4
esriRasterLasReturnFifth = 5
esriRasterLasReturnSixth = 6
esriRasterLasReturnSeventh = 7
esriRasterLasReturnEighth = 8
esriRasterLasReturnNinth = 9
esriRasterLasReturnTenth = 10
esriRasterLasReturnEleventh = 11
esriRasterLasReturnTwelfth = 12
esriRasterLasReturnThirteenth = 13
esriRasterLasReturnFourteenth = 14
esriRasterLasReturnFifteenth = 15
esriRasterLasReturnLast = 256
esriRasterLasReturnType = c_int # enum
class RasterStatusEventHelper(CoClass):
    u'The raster status event helper class for broadcasting events.'
    _reg_clsid_ = GUID('{7131DAC0-5836-11D4-8D9B-00C04F5B87B2}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IRasterStatusEvent(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the raster status event.'
    _iid_ = GUID('{3424B100-5836-11D4-8D9B-00C04F5B87B2}')
    _idlflags_ = ['oleautomation']
RasterStatusEventHelper._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IConnectionPoint]
RasterStatusEventHelper._outgoing_interfaces_ = [IRasterStatusEvent]

class ImageRegistration(CoClass):
    u'The Image Registration class.'
    _reg_clsid_ = GUID('{3688D80C-3154-4719-958C-68C7FD9D976D}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
ImageRegistration._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IImageRegistration]

ILasToRasterFunctionArguments._methods_ = [
    COMMETHOD(['propget', helpstring(u'Extent specified by the user, or extracted from the LAS files.')], HRESULT, 'Extent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'ppExtent' )),
    COMMETHOD(['propputref', helpstring(u'Extent specified by the user, or extracted from the LAS files.')], HRESULT, 'Extent',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'ppExtent' )),
    COMMETHOD(['propget', helpstring(u'Return types selected, e.g., esriRasterLasReturnFirst, 13.')], HRESULT, 'ReturnTypesSelected',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray)), 'ppReturnTypesSelected' )),
    COMMETHOD(['propputref', helpstring(u'Return types selected, e.g., esriRasterLasReturnFirst, 13.')], HRESULT, 'ReturnTypesSelected',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'ppReturnTypesSelected' )),
    COMMETHOD(['propget', helpstring(u'Class types selected, e.g., esriRasterLasClassGround, 217.')], HRESULT, 'ClassTypesSelected',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray)), 'ppClassTypesSelected' )),
    COMMETHOD(['propputref', helpstring(u'Class types selected, e.g., esriRasterLasClassGround, 217.')], HRESULT, 'ClassTypesSelected',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'ppClassTypesSelected' )),
    COMMETHOD(['propget', helpstring(u'Cell width.')], HRESULT, 'CellWidth',
              ( ['retval', 'out'], POINTER(c_double), 'pCellWidth' )),
    COMMETHOD(['propput', helpstring(u'Cell width.')], HRESULT, 'CellWidth',
              ( ['in'], c_double, 'pCellWidth' )),
    COMMETHOD(['propget', helpstring(u'Use tinning.')], HRESULT, 'UseTinning',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pUseTinning' )),
    COMMETHOD(['propput', helpstring(u'Use tinning.')], HRESULT, 'UseTinning',
              ( ['in'], VARIANT_BOOL, 'pUseTinning' )),
    COMMETHOD(['propget', helpstring(u'Tin to raster interpolation type (how to rasterize the tin: Linear or NN).')], HRESULT, 'TinToRasterInterpolationType',
              ( ['retval', 'out'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriSurfaceInterpolationType), 'pType' )),
    COMMETHOD(['propput', helpstring(u'Tin to raster interpolation type (how to rasterize the tin: Linear or NN).')], HRESULT, 'TinToRasterInterpolationType',
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriSurfaceInterpolationType, 'pType' )),
    COMMETHOD(['propget', helpstring(u'Cell aggregation type (how to bin).')], HRESULT, 'CellAggregationType',
              ( ['retval', 'out'], POINTER(esriRasterLasCellAggregationType), 'pCellAggType' )),
    COMMETHOD(['propput', helpstring(u'Cell aggregation type (how to bin).')], HRESULT, 'CellAggregationType',
              ( ['in'], esriRasterLasCellAggregationType, 'pCellAggType' )),
    COMMETHOD(['propget', helpstring(u'Data type.')], HRESULT, 'DataType',
              ( ['retval', 'out'], POINTER(esriRasterLasDataType), 'pDataType' )),
    COMMETHOD(['propput', helpstring(u'Data type.')], HRESULT, 'DataType',
              ( ['in'], esriRasterLasDataType, 'pDataType' )),
    COMMETHOD(['propget', helpstring(u'Void fill method.')], HRESULT, 'VoidFillMethod',
              ( ['retval', 'out'], POINTER(esriRasterLasVoidFillMethod), 'pVoidFillMethod' )),
    COMMETHOD(['propput', helpstring(u'Void fill method.')], HRESULT, 'VoidFillMethod',
              ( ['in'], esriRasterLasVoidFillMethod, 'pVoidFillMethod' )),
    COMMETHOD(['propget', helpstring(u'Fill holes up to this width or height by interpolation from hole boundaries.')], HRESULT, 'MaxHoleWidthFilled',
              ( ['retval', 'out'], POINTER(c_double), 'pMaxHoleWidth' )),
    COMMETHOD(['propput', helpstring(u'Fill holes up to this width or height by interpolation from hole boundaries.')], HRESULT, 'MaxHoleWidthFilled',
              ( ['in'], c_double, 'pMaxHoleWidth' )),
    COMMETHOD(['propget', helpstring(u'The spatial reference to be used, if NOT set in the Las file(s).')], HRESULT, 'SpatialReference',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference)), 'ppSpatialReference' )),
    COMMETHOD(['propputref', helpstring(u'The spatial reference to be used, if NOT set in the Las file(s).')], HRESULT, 'SpatialReference',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'ppSpatialReference' )),
    COMMETHOD(['propget', helpstring(u'Ignore spatial reference in Las files.')], HRESULT, 'IgnoreSpatialReferenceInLasFiles',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pIgnoreLasSR' )),
    COMMETHOD(['propput', helpstring(u'Ignore spatial reference in Las files.')], HRESULT, 'IgnoreSpatialReferenceInLasFiles',
              ( ['in'], VARIANT_BOOL, 'pIgnoreLasSR' )),
    COMMETHOD(['propget', helpstring(u'Maximum number of different Las surfaces kept in this cache folder.')], HRESULT, 'CacheMaxNumSurfaces',
              ( ['retval', 'out'], POINTER(c_int), 'pMaxNumSurfaces' )),
    COMMETHOD(['propput', helpstring(u'Maximum number of different Las surfaces kept in this cache folder.')], HRESULT, 'CacheMaxNumSurfaces',
              ( ['in'], c_int, 'pMaxNumSurfaces' )),
    COMMETHOD(['propget', helpstring(u'Z tolerance for Las rasters in the image cache folder, used for compression.')], HRESULT, 'CacheRasterZTolerance',
              ( ['retval', 'out'], POINTER(c_double), 'pZTolerance' )),
    COMMETHOD(['propput', helpstring(u'Z tolerance for Las rasters in the image cache folder, used for compression.')], HRESULT, 'CacheRasterZTolerance',
              ( ['in'], c_double, 'pZTolerance' )),
    COMMETHOD(['propget', helpstring(u'The input Las file.')], HRESULT, 'LasFile',
              ( ['retval', 'out'], POINTER(BSTR), 'filename' )),
    COMMETHOD(['propput', helpstring(u'The input Las file.')], HRESULT, 'LasFile',
              ( ['in'], BSTR, 'filename' )),
    COMMETHOD(['propget', helpstring(u'The input Las folder.')], HRESULT, 'LasFolder',
              ( ['retval', 'out'], POINTER(BSTR), 'foldername' )),
    COMMETHOD(['propput', helpstring(u'The input Las folder.')], HRESULT, 'LasFolder',
              ( ['in'], BSTR, 'foldername' )),
    COMMETHOD(['propget', helpstring(u'The input Las file version.')], HRESULT, 'LasFileVersion',
              ( ['retval', 'out'], POINTER(BSTR), 'LasFileVersion' )),
    COMMETHOD(['propput', helpstring(u'The input Las file version.')], HRESULT, 'LasFileVersion',
              ( ['in'], BSTR, 'LasFileVersion' )),
    COMMETHOD(['propget', helpstring(u'Total number of points for all Las files, all return types.')], HRESULT, 'NumPointsTotal',
              ( ['retval', 'out'], POINTER(c_double), 'pNumPointsTotal' )),
    COMMETHOD(['propput', helpstring(u'Total number of points for all Las files, all return types.')], HRESULT, 'NumPointsTotal',
              ( ['in'], c_double, 'pNumPointsTotal' )),
    COMMETHOD(['propget', helpstring(u'Average point spacing.')], HRESULT, 'AvgPointSpacing',
              ( ['retval', 'out'], POINTER(c_double), 'pAvgPointSpacing' )),
    COMMETHOD(['propput', helpstring(u'Average point spacing.')], HRESULT, 'AvgPointSpacing',
              ( ['in'], c_double, 'pAvgPointSpacing' )),
    COMMETHOD(['propget', helpstring(u'Z Min.')], HRESULT, 'ZMin',
              ( ['retval', 'out'], POINTER(c_double), 'pZMin' )),
    COMMETHOD(['propput', helpstring(u'Z Min.')], HRESULT, 'ZMin',
              ( ['in'], c_double, 'pZMin' )),
    COMMETHOD(['propget', helpstring(u'Z Max.')], HRESULT, 'ZMax',
              ( ['retval', 'out'], POINTER(c_double), 'pZMax' )),
    COMMETHOD(['propput', helpstring(u'Z Max.')], HRESULT, 'ZMax',
              ( ['in'], c_double, 'pZMax' )),
]
################################################################
## code template for ILasToRasterFunctionArguments implementation
##class ILasToRasterFunctionArguments_Impl(object):
##    def _get(self):
##        u'Tin to raster interpolation type (how to rasterize the tin: Linear or NN).'
##        #return pType
##    def _set(self, pType):
##        u'Tin to raster interpolation type (how to rasterize the tin: Linear or NN).'
##    TinToRasterInterpolationType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Use tinning.'
##        #return pUseTinning
##    def _set(self, pUseTinning):
##        u'Use tinning.'
##    UseTinning = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Total number of points for all Las files, all return types.'
##        #return pNumPointsTotal
##    def _set(self, pNumPointsTotal):
##        u'Total number of points for all Las files, all return types.'
##    NumPointsTotal = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Void fill method.'
##        #return pVoidFillMethod
##    def _set(self, pVoidFillMethod):
##        u'Void fill method.'
##    VoidFillMethod = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The input Las folder.'
##        #return foldername
##    def _set(self, foldername):
##        u'The input Las folder.'
##    LasFolder = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Cell width.'
##        #return pCellWidth
##    def _set(self, pCellWidth):
##        u'Cell width.'
##    CellWidth = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Data type.'
##        #return pDataType
##    def _set(self, pDataType):
##        u'Data type.'
##    DataType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Cell aggregation type (how to bin).'
##        #return pCellAggType
##    def _set(self, pCellAggType):
##        u'Cell aggregation type (how to bin).'
##    CellAggregationType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Z Min.'
##        #return pZMin
##    def _set(self, pZMin):
##        u'Z Min.'
##    ZMin = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Ignore spatial reference in Las files.'
##        #return pIgnoreLasSR
##    def _set(self, pIgnoreLasSR):
##        u'Ignore spatial reference in Las files.'
##    IgnoreSpatialReferenceInLasFiles = property(_get, _set, doc = _set.__doc__)
##
##    def SpatialReference(self, ppSpatialReference):
##        u'The spatial reference to be used, if NOT set in the Las file(s).'
##        #return 
##
##    def _get(self):
##        u'Z Max.'
##        #return pZMax
##    def _set(self, pZMax):
##        u'Z Max.'
##    ZMax = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The input Las file.'
##        #return filename
##    def _set(self, filename):
##        u'The input Las file.'
##    LasFile = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Fill holes up to this width or height by interpolation from hole boundaries.'
##        #return pMaxHoleWidth
##    def _set(self, pMaxHoleWidth):
##        u'Fill holes up to this width or height by interpolation from hole boundaries.'
##    MaxHoleWidthFilled = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Z tolerance for Las rasters in the image cache folder, used for compression.'
##        #return pZTolerance
##    def _set(self, pZTolerance):
##        u'Z tolerance for Las rasters in the image cache folder, used for compression.'
##    CacheRasterZTolerance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Average point spacing.'
##        #return pAvgPointSpacing
##    def _set(self, pAvgPointSpacing):
##        u'Average point spacing.'
##    AvgPointSpacing = property(_get, _set, doc = _set.__doc__)
##
##    def Extent(self, ppExtent):
##        u'Extent specified by the user, or extracted from the LAS files.'
##        #return 
##
##    def _get(self):
##        u'Maximum number of different Las surfaces kept in this cache folder.'
##        #return pMaxNumSurfaces
##    def _set(self, pMaxNumSurfaces):
##        u'Maximum number of different Las surfaces kept in this cache folder.'
##    CacheMaxNumSurfaces = property(_get, _set, doc = _set.__doc__)
##
##    def ReturnTypesSelected(self, ppReturnTypesSelected):
##        u'Return types selected, e.g., esriRasterLasReturnFirst, 13.'
##        #return 
##
##    def ClassTypesSelected(self, ppClassTypesSelected):
##        u'Class types selected, e.g., esriRasterLasClassGround, 217.'
##        #return 
##
##    def _get(self):
##        u'The input Las file version.'
##        #return LasFileVersion
##    def _set(self, LasFileVersion):
##        u'The input Las file version.'
##    LasFileVersion = property(_get, _set, doc = _set.__doc__)
##

class StatsHistogram(CoClass):
    u'A raster statistics and histogram class.'
    _reg_clsid_ = GUID('{BA3027C1-49CA-4788-8B5A-3A6B387DE78C}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IStatsHistogram2(IStatsHistogram):
    _case_insensitive_ = True
    u'Provides access to members that controls stats and histogram.'
    _iid_ = GUID('{0A69BFA0-D411-468D-BE27-3042E80A9CC0}')
    _idlflags_ = ['oleautomation']
class IStatsHistogram3(IStatsHistogram2):
    _case_insensitive_ = True
    u'Provides access to members that controls stats and histogram.'
    _iid_ = GUID('{DBE269BF-6BDE-43F2-9BFB-D90551D7EFE3}')
    _idlflags_ = ['oleautomation']
StatsHistogram._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IStatsHistogram, IStatsHistogram2, IStatsHistogram3, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

IPushbroomUtilities._methods_ = [
    COMMETHOD([helpstring(u'Normalize a vector so its length is 1.0.')], HRESULT, 'VectorNormalize',
              ( ['in'], POINTER(c_double), 'v1' ),
              ( ['retval', 'out'], POINTER(c_double), 'v2' )),
    COMMETHOD([helpstring(u'Calculate cross product of two vectors.')], HRESULT, 'VectorCross',
              ( ['in'], POINTER(c_double), 'v1' ),
              ( ['in'], POINTER(c_double), 'v2' ),
              ( ['retval', 'out'], POINTER(c_double), 'vResult' )),
    COMMETHOD([helpstring(u'Express a 3D vector in polar coords (lon, lat).')], HRESULT, 'VectorDirection',
              ( ['in'], POINTER(c_double), 'v' ),
              ( [], POINTER(c_double), 'lon' ),
              ( [], POINTER(c_double), 'lat' )),
    COMMETHOD([helpstring(u'Intersect a vector with an ellipsoidal surface plus height')], HRESULT, 'VectorIntersectEllipsoid',
              ( ['in'], POINTER(c_double), 'vP' ),
              ( ['in'], POINTER(c_double), 'vU3' ),
              ( ['in'], c_double, 'htAboveEllipsoid' ),
              ( ['out'], POINTER(c_double), 'lon' ),
              ( ['out'], POINTER(c_double), 'lat' )),
    COMMETHOD([helpstring(u'Rotate a vector about 3 axes (inputs radians)')], HRESULT, 'VectorRotate3Axes',
              ( ['in'], POINTER(c_double), 'vIn' ),
              ( ['in'], c_double, 'xRot' ),
              ( ['in'], c_double, 'yRot' ),
              ( ['in'], c_double, 'zRot' ),
              ( ['retval', 'out'], POINTER(c_double), 'vOut' )),
    COMMETHOD([helpstring(u'Convert longitude, latitude, elevation to ECEF coordinates')], HRESULT, 'convertLonLatToECEF',
              ( ['in'], c_double, 'lon' ),
              ( ['in'], c_double, 'lat' ),
              ( ['in'], c_double, 'elev' ),
              ( ['out'], POINTER(c_double), 'x' ),
              ( ['out'], POINTER(c_double), 'y' ),
              ( ['out'], POINTER(c_double), 'z' )),
    COMMETHOD([helpstring(u'Convert ECEF coordinates to longitude, latitude, elevation')], HRESULT, 'convertECEFtoLonLat',
              ( ['in'], c_double, 'x' ),
              ( ['in'], c_double, 'y' ),
              ( ['in'], c_double, 'z' ),
              ( ['out'], POINTER(c_double), 'lon' ),
              ( ['out'], POINTER(c_double), 'lat' ),
              ( ['out'], POINTER(c_double), 'elev' )),
    COMMETHOD([helpstring(u'Express DIMAP time string as fraction of a day')], HRESULT, 'evalDIMAPTimeString',
              ( ['in'], STRING, 'time_str' ),
              ( ['out'], POINTER(c_int), 'jDayPtr' ),
              ( ['out'], POINTER(c_double), 'fraction' )),
]
################################################################
## code template for IPushbroomUtilities implementation
##class IPushbroomUtilities_Impl(object):
##    def VectorNormalize(self, v1):
##        u'Normalize a vector so its length is 1.0.'
##        #return v2
##
##    def evalDIMAPTimeString(self, time_str):
##        u'Express DIMAP time string as fraction of a day'
##        #return jDayPtr, fraction
##
##    def VectorRotate3Axes(self, vIn, xRot, yRot, zRot):
##        u'Rotate a vector about 3 axes (inputs radians)'
##        #return vOut
##
##    def convertLonLatToECEF(self, lon, lat, elev):
##        u'Convert longitude, latitude, elevation to ECEF coordinates'
##        #return x, y, z
##
##    def VectorIntersectEllipsoid(self, vP, vU3, htAboveEllipsoid):
##        u'Intersect a vector with an ellipsoidal surface plus height'
##        #return lon, lat
##
##    def VectorCross(self, v1, v2):
##        u'Calculate cross product of two vectors.'
##        #return vResult
##
##    def VectorDirection(self, v, lon, lat):
##        u'Express a 3D vector in polar coords (lon, lat).'
##        #return 
##
##    def convertECEFtoLonLat(self, x, y, z):
##        u'Convert ECEF coordinates to longitude, latitude, elevation'
##        #return lon, lat, elev
##

IDEWCSCoverageType._methods_ = [
]
################################################################
## code template for IDEWCSCoverageType implementation
##class IDEWCSCoverageType_Impl(object):

class RasterStatusEvent2Helper(CoClass):
    u'The raster status event helper class for broadcasting events.'
    _reg_clsid_ = GUID('{16C4B0D7-997D-48E1-AB0A-EB5866C4FA37}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
RasterStatusEvent2Helper._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IConnectionPoint]
RasterStatusEvent2Helper._outgoing_interfaces_ = [IRasterStatusEvent2]

IAISImageServerManager._methods_ = [
    COMMETHOD([helpstring(u'Connects to an image server given host name and port.')], HRESULT, 'Connect',
              ( ['in'], BSTR, 'serverHost' ),
              ( ['in'], BSTR, 'serverPort' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'retStatus' )),
    COMMETHOD([helpstring(u'Starts the image server service on the specified host machine using the default port or the last saved configuration on the host machine.')], HRESULT, 'StartServer',
              ( ['in'], BSTR, 'serverHost' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'retStatus' )),
    COMMETHOD([helpstring(u'Stops the image server service. Can be invoked only after connecting to the image server.')], HRESULT, 'StopServer',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'retStatus' )),
    COMMETHOD([helpstring(u'Obtains server information containing the list of all image service providers and image services as an XML string.')], HRESULT, 'GetServerInfo',
              ( ['retval', 'out'], POINTER(BSTR), 'serverInfo' )),
    COMMETHOD([helpstring(u'Obtains the current configuration of the image server service as an XML string. The XML is defined by ISSConfig.xsd.')], HRESULT, 'GetServerConfiguration',
              ( ['retval', 'out'], POINTER(BSTR), 'serverConfigXml' )),
    COMMETHOD([helpstring(u'Updates configuration of the image server using the specified XML. The XML is defined by ISSConfig.xsd.')], HRESULT, 'UpdateServerConfiguration',
              ( ['in'], BSTR, 'serverConfigXml' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'retStatus' )),
    COMMETHOD([helpstring(u'Obtains the current configuration of the specified image service provider as an XML string defined by ISPConfig.xsd')], HRESULT, 'GetServiceProviderConfiguration',
              ( ['in'], BSTR, 'ispName' ),
              ( ['retval', 'out'], POINTER(BSTR), 'configXml' )),
    COMMETHOD([helpstring(u'Updates configuration of an image service provider using the specifed XML. The XML is defined by ISPConfig.xsd')], HRESULT, 'UpdateServiceProviderConfiguration',
              ( ['in'], BSTR, 'ispName' ),
              ( ['in'], BSTR, 'ispConfigXml' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'retStatus' )),
    COMMETHOD([helpstring(u'Starts the specified image service provider using either the default or the last saved configuration.')], HRESULT, 'StartServiceProvider',
              ( ['in'], BSTR, 'ispName' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'retStatus' )),
    COMMETHOD([helpstring(u'Stops the specified image service provider.')], HRESULT, 'StopServiceProvider',
              ( ['in'], BSTR, 'ispName' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'retStatus' )),
    COMMETHOD([helpstring(u'Add a new image service provider using the specified friendly name on the specified host machine and port.')], HRESULT, 'AddServiceProvider',
              ( ['in'], BSTR, 'ispName' ),
              ( ['in'], BSTR, 'ispHostMachine' ),
              ( ['in'], BSTR, 'ispHostPort' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'retStatus' )),
    COMMETHOD([helpstring(u'Removes the specified image service provider.')], HRESULT, 'RemoveServiceProvider',
              ( ['in'], BSTR, 'ispName' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'retStatus' )),
    COMMETHOD([helpstring(u'Obtains current configuration of all image services hosted by the image server as an XML string. The XML is defined by ISServices.xsd.')], HRESULT, 'GetServiceConfiguration',
              ( ['retval', 'out'], POINTER(BSTR), 'serviceConfigXml' )),
    COMMETHOD([helpstring(u'Updates configuration of the image server pertaining all image services using the specified XML string. The XML is defined by ISServices.xsd.')], HRESULT, 'UpdateServiceConfiguration',
              ( ['in'], BSTR, 'serviceConfigXml' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'retStatus' )),
    COMMETHOD([helpstring(u'Publishes the specified compiled service definition file as an image service on the image service providers specified when the service was added.')], HRESULT, 'StartService',
              ( ['in'], BSTR, 'serviceName' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'retStatus' )),
    COMMETHOD([helpstring(u'Stops an image service on the image service providers specified when the service was added.')], HRESULT, 'StopService',
              ( ['in'], BSTR, 'serviceName' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'retStatus' )),
    COMMETHOD([helpstring(u'Removes an image service from specified image service providers. Pass an empty array to indicate all available image service providers known by the server. ServiceName is optional.')], HRESULT, 'RemoveService',
              ( ['in'], BSTR, 'serviceName' ),
              ( ['in'], POINTER(_midlSAFEARRAY(BSTR)), 'ispNames' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'retStatus' )),
    COMMETHOD([helpstring(u'Adds an image service to the specified image service providers. Pass an empty array to indicate all available image service providers known by the server. Service name and service properties are optional.')], HRESULT, 'AddService',
              ( ['in'], BSTR, 'servicePath' ),
              ( ['in'], BSTR, 'serviceName' ),
              ( ['in'], BSTR, 'ServiceProperties' ),
              ( ['in'], POINTER(_midlSAFEARRAY(BSTR)), 'ispNames' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'retStatus' )),
    COMMETHOD([helpstring(u'Gets the service name of the image service, given the path to compiled service. Returns an empty string if the service was never published or has not been started.')], HRESULT, 'GetServiceDefinitionName',
              ( ['in'], BSTR, 'servicePath' ),
              ( ['retval', 'out'], POINTER(BSTR), 'serviceName' )),
    COMMETHOD([helpstring(u'Reloads the given service.')], HRESULT, 'RefreshService',
              ( ['in'], BSTR, 'serviceName' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'retStatus' )),
    COMMETHOD([helpstring(u'Reloads all the services.')], HRESULT, 'RefreshAllServices',
              ( [], POINTER(VARIANT_BOOL), 'retStatus' )),
    COMMETHOD([helpstring(u'Registers the server to a given ArcGIS Server Object Manager SOM.')], HRESULT, 'RegisterToSOM',
              ( ['in'], BSTR, 'SOMHost' ),
              ( ['in'], BSTR, 'serverHost' ),
              ( ['in'], BSTR, 'serverPort' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'retStatus' )),
    COMMETHOD([helpstring(u'Gets the server registered to a given host.')], HRESULT, 'GetSOMRegisteredServer',
              ( ['in'], BSTR, 'SOMHost' ),
              ( ['out'], POINTER(BSTR), 'serverHost' ),
              ( ['out'], POINTER(BSTR), 'serverPort' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'retStatus' )),
    COMMETHOD([helpstring(u'Gets the status XML details for any failure.')], HRESULT, 'GetStatus',
              ( ['retval', 'out'], POINTER(BSTR), 'serverStatusXml' )),
]
################################################################
## code template for IAISImageServerManager implementation
##class IAISImageServerManager_Impl(object):
##    def GetServerInfo(self):
##        u'Obtains server information containing the list of all image service providers and image services as an XML string.'
##        #return serverInfo
##
##    def StartServiceProvider(self, ispName):
##        u'Starts the specified image service provider using either the default or the last saved configuration.'
##        #return retStatus
##
##    def GetServiceConfiguration(self):
##        u'Obtains current configuration of all image services hosted by the image server as an XML string. The XML is defined by ISServices.xsd.'
##        #return serviceConfigXml
##
##    def UpdateServiceProviderConfiguration(self, ispName, ispConfigXml):
##        u'Updates configuration of an image service provider using the specifed XML. The XML is defined by ISPConfig.xsd'
##        #return retStatus
##
##    def RefreshService(self, serviceName):
##        u'Reloads the given service.'
##        #return retStatus
##
##    def GetServiceDefinitionName(self, servicePath):
##        u'Gets the service name of the image service, given the path to compiled service. Returns an empty string if the service was never published or has not been started.'
##        #return serviceName
##
##    def UpdateServerConfiguration(self, serverConfigXml):
##        u'Updates configuration of the image server using the specified XML. The XML is defined by ISSConfig.xsd.'
##        #return retStatus
##
##    def AddServiceProvider(self, ispName, ispHostMachine, ispHostPort):
##        u'Add a new image service provider using the specified friendly name on the specified host machine and port.'
##        #return retStatus
##
##    def RemoveService(self, serviceName, ispNames):
##        u'Removes an image service from specified image service providers. Pass an empty array to indicate all available image service providers known by the server. ServiceName is optional.'
##        #return retStatus
##
##    def RefreshAllServices(self, retStatus):
##        u'Reloads all the services.'
##        #return 
##
##    def GetServiceProviderConfiguration(self, ispName):
##        u'Obtains the current configuration of the specified image service provider as an XML string defined by ISPConfig.xsd'
##        #return configXml
##
##    def RegisterToSOM(self, SOMHost, serverHost, serverPort):
##        u'Registers the server to a given ArcGIS Server Object Manager SOM.'
##        #return retStatus
##
##    def StopService(self, serviceName):
##        u'Stops an image service on the image service providers specified when the service was added.'
##        #return retStatus
##
##    def GetServerConfiguration(self):
##        u'Obtains the current configuration of the image server service as an XML string. The XML is defined by ISSConfig.xsd.'
##        #return serverConfigXml
##
##    def GetStatus(self):
##        u'Gets the status XML details for any failure.'
##        #return serverStatusXml
##
##    def GetSOMRegisteredServer(self, SOMHost):
##        u'Gets the server registered to a given host.'
##        #return serverHost, serverPort, retStatus
##
##    def StartService(self, serviceName):
##        u'Publishes the specified compiled service definition file as an image service on the image service providers specified when the service was added.'
##        #return retStatus
##
##    def UpdateServiceConfiguration(self, serviceConfigXml):
##        u'Updates configuration of the image server pertaining all image services using the specified XML string. The XML is defined by ISServices.xsd.'
##        #return retStatus
##
##    def StopServiceProvider(self, ispName):
##        u'Stops the specified image service provider.'
##        #return retStatus
##
##    def StartServer(self, serverHost):
##        u'Starts the image server service on the specified host machine using the default port or the last saved configuration on the host machine.'
##        #return retStatus
##
##    def StopServer(self):
##        u'Stops the image server service. Can be invoked only after connecting to the image server.'
##        #return retStatus
##
##    def Connect(self, serverHost, serverPort):
##        u'Connects to an image server given host name and port.'
##        #return retStatus
##
##    def AddService(self, servicePath, serviceName, ServiceProperties, ispNames):
##        u'Adds an image service to the specified image service providers. Pass an empty array to indicate all available image service providers known by the server. Service name and service properties are optional.'
##        #return retStatus
##
##    def RemoveServiceProvider(self, ispName):
##        u'Removes the specified image service provider.'
##        #return retStatus
##


# values for enumeration 'esriRasterFormatSupportLevel'
esriRasterFormatSupportCore = 1
esriRasterFormatSupportImaging = 2
esriRasterFormatSupportLevel = c_int # enum
class RasterCalcStatsHistogram(CoClass):
    u'A helper class for calculating raster statistics and histogram.'
    _reg_clsid_ = GUID('{B6195CBE-DFC1-4797-A4E2-E9DDD408D323}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
RasterCalcStatsHistogram._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterCalcStatsHistogram, IRasterCalcStatsHistogram2, IRasterCalcStatsHistogram3]

class ImageFeaturePoint(CoClass):
    u'The Image Feature Point class.'
    _reg_clsid_ = GUID('{A5C64D18-A64A-4CF5-9AA2-F6925B291DDD}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
ImageFeaturePoint._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IImageFeaturePoint]

class RasterCatalogLoader(CoClass):
    u'A raster catalog loader class.'
    _reg_clsid_ = GUID('{B34AD778-A8E9-4CAB-8469-CF3C16CAE0FA}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
RasterCatalogLoader._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterCatalogLoader, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]

ISeamlineModifierInit._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The mosaic dataset for which seamlines are being computed.')], HRESULT, 'MosaicDataset',
              ( ['in'], POINTER(IMosaicDataset), 'ppMosaicDataset' )),
    COMMETHOD(['propget', helpstring(u'The mosaic dataset for which seamlines are being computed.')], HRESULT, 'MosaicDataset',
              ( ['retval', 'out'], POINTER(POINTER(IMosaicDataset)), 'ppMosaicDataset' )),
]
################################################################
## code template for ISeamlineModifierInit implementation
##class ISeamlineModifierInit_Impl(object):
##    @property
##    def MosaicDataset(self, ppMosaicDataset):
##        u'The mosaic dataset for which seamlines are being computed.'
##        #return 
##

class RasterStatus(CoClass):
    u'The raster event listener object.'
    _reg_clsid_ = GUID('{83220700-5844-11D4-8D9B-00C04F5B87B2}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IRasterStatus(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the raster status.'
    _iid_ = GUID('{6C58CB80-5834-11D4-8D9B-00C04F5B87B2}')
    _idlflags_ = ['oleautomation']
class IRasterStatus2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the raster status 2.'
    _iid_ = GUID('{B3B4BCDD-B999-4DBE-8FEC-7BCEDCE6DAF3}')
    _idlflags_ = ['oleautomation']
class IRasterStatus3(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the raster status 3.'
    _iid_ = GUID('{01C2B5DD-7586-42A6-984A-342A7A78FE8C}')
    _idlflags_ = ['oleautomation']
RasterStatus._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterStatus, IRasterStatus2, IRasterStatus3]

class DblRect(CoClass):
    u'A simple rectangle class.'
    _reg_clsid_ = GUID('{4EA0BFBF-90CF-4983-9B3E-5C1F367E946B}')
    _idlflags_ = ['hidden']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IRect(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a rectangle.'
    _iid_ = GUID('{A10A39E8-B9CA-11D2-8E30-00A0249480F0}')
    _idlflags_ = ['oleautomation', 'hidden']
DblRect._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRect]

class IQueryPathsParameters2(IQueryPathsParameters):
    _case_insensitive_ = True
    u'Provides access to members that control parameters to query paths.'
    _iid_ = GUID('{204481D8-B38B-4B7B-897A-C33D112F5574}')
    _idlflags_ = ['oleautomation']
IQueryPathsParameters2._methods_ = [
    COMMETHOD(['propput', helpstring(u'Indicates whether paths associated with raster types are queried.')], HRESULT, 'QueryRasterTypePaths',
              ( ['in'], VARIANT_BOOL, 'pbQueryRasterTypePaths' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether paths associated with raster types are queried.')], HRESULT, 'QueryRasterTypePaths',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbQueryRasterTypePaths' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether paths associated with raster dataset cache are queried.')], HRESULT, 'QueryCachePaths',
              ( ['in'], VARIANT_BOOL, 'pbQueryCachePaths' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether paths associated with raster dataset cache are queried.')], HRESULT, 'QueryCachePaths',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbQueryCachePaths' )),
]
################################################################
## code template for IQueryPathsParameters2 implementation
##class IQueryPathsParameters2_Impl(object):
##    def _get(self):
##        u'Indicates whether paths associated with raster dataset cache are queried.'
##        #return pbQueryCachePaths
##    def _set(self, pbQueryCachePaths):
##        u'Indicates whether paths associated with raster dataset cache are queried.'
##    QueryCachePaths = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether paths associated with raster types are queried.'
##        #return pbQueryRasterTypePaths
##    def _set(self, pbQueryRasterTypePaths):
##        u'Indicates whether paths associated with raster types are queried.'
##    QueryRasterTypePaths = property(_get, _set, doc = _set.__doc__)
##

class IRasterTypeItemURI2(IRasterTypeItemURI):
    _case_insensitive_ = True
    u'Provides access to members that control a raster type item URI.'
    _iid_ = GUID('{FE3640C8-162C-4396-B40A-97F0F4EDE0F6}')
    _idlflags_ = ['oleautomation']
IRasterTypeItemURI2._methods_ = [
    COMMETHOD(['propput', helpstring(u"The originally set output dataset tag associated with the parent raster type item template that created the URI. This property enables the raster type to correctly connect an item template's primary or ancillary properties with a raster type item URI.")], HRESULT, 'ItemTemplateTag',
              ( ['in'], BSTR, 'pItemTemplateTag' )),
    COMMETHOD(['propget', helpstring(u"The originally set output dataset tag associated with the parent raster type item template that created the URI. This property enables the raster type to correctly connect an item template's primary or ancillary properties with a raster type item URI.")], HRESULT, 'ItemTemplateTag',
              ( ['retval', 'out'], POINTER(BSTR), 'pItemTemplateTag' )),
    COMMETHOD(['propput', helpstring(u'The name of raster function template associated with the item template that built the raster type item URI.')], HRESULT, 'FunctionTemplateName',
              ( ['in'], BSTR, 'pFunctionTemplateName' )),
    COMMETHOD(['propget', helpstring(u'The name of raster function template associated with the item template that built the raster type item URI.')], HRESULT, 'FunctionTemplateName',
              ( ['retval', 'out'], POINTER(BSTR), 'pFunctionTemplateName' )),
    COMMETHOD(['propput', helpstring(u'In the case where the URI is associated with an ancillary dataset, this property indicates the name of the raster function variable within the primary raster function template onto which the ancillary tepmlate reconnects (as a form of post-processing).')], HRESULT, 'PrimaryChainConnector',
              ( ['in'], BSTR, 'pPrimaryChainConnector' )),
    COMMETHOD(['propget', helpstring(u'In the case where the URI is associated with an ancillary dataset, this property indicates the name of the raster function variable within the primary raster function template onto which the ancillary tepmlate reconnects (as a form of post-processing).')], HRESULT, 'PrimaryChainConnector',
              ( ['retval', 'out'], POINTER(BSTR), 'pPrimaryChainConnector' )),
]
################################################################
## code template for IRasterTypeItemURI2 implementation
##class IRasterTypeItemURI2_Impl(object):
##    def _get(self):
##        u'In the case where the URI is associated with an ancillary dataset, this property indicates the name of the raster function variable within the primary raster function template onto which the ancillary tepmlate reconnects (as a form of post-processing).'
##        #return pPrimaryChainConnector
##    def _set(self, pPrimaryChainConnector):
##        u'In the case where the URI is associated with an ancillary dataset, this property indicates the name of the raster function variable within the primary raster function template onto which the ancillary tepmlate reconnects (as a form of post-processing).'
##    PrimaryChainConnector = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u"The originally set output dataset tag associated with the parent raster type item template that created the URI. This property enables the raster type to correctly connect an item template's primary or ancillary properties with a raster type item URI."
##        #return pItemTemplateTag
##    def _set(self, pItemTemplateTag):
##        u"The originally set output dataset tag associated with the parent raster type item template that created the URI. This property enables the raster type to correctly connect an item template's primary or ancillary properties with a raster type item URI."
##    ItemTemplateTag = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The name of raster function template associated with the item template that built the raster type item URI.'
##        #return pFunctionTemplateName
##    def _set(self, pFunctionTemplateName):
##        u'The name of raster function template associated with the item template that built the raster type item URI.'
##    FunctionTemplateName = property(_get, _set, doc = _set.__doc__)
##

class IItemPathsQuery(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that allow querying for paths stored in a mosaic dataset.'
    _iid_ = GUID('{BBB69B14-C57A-47E4-9416-35CFD44F6D93}')
    _idlflags_ = ['oleautomation']
IItemPathsQuery._methods_ = [
    COMMETHOD(['propget', helpstring(u'Parameters that control how paths stored in the mosaic dataset are queried.')], HRESULT, 'QueryPathsParameters',
              ( ['retval', 'out'], POINTER(POINTER(IQueryPathsParameters)), 'ppQueryPathsParameters' )),
    COMMETHOD(['propputref', helpstring(u'Parameters that control how paths stored in the mosaic dataset are queried.')], HRESULT, 'QueryPathsParameters',
              ( ['in'], POINTER(IQueryPathsParameters), 'ppQueryPathsParameters' )),
    COMMETHOD(['propget', helpstring(u'The array of paths stored at the mosaic dataset (top) level.')], HRESULT, 'MosaicDatasetPaths',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray)), 'ppPaths' )),
    COMMETHOD([helpstring(u'Parses the raster dataset and item URI attributes of the specified mosaic catalog row and returns an array of paths.')], HRESULT, 'GetItemPaths',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRow), 'pRow' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray)), 'ppItemPaths' )),
    COMMETHOD([helpstring(u'Exports paths associated with the raster datasets and the data sources of selected catalog items to the specified table in the target workspace.')], HRESULT, 'ExportPaths',
              ( ['in'], VARIANT_BOOL, 'bQueryMosaicPaths' ),
              ( ['in'], VARIANT_BOOL, 'bQueryCatalogItemPaths' ),
              ( ['in'], BSTR, 'exportTableName' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspace), 'pWorkspace' ),
              ( ['in'], BSTR, 'configurationKeyword' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' )),
]
################################################################
## code template for IItemPathsQuery implementation
##class IItemPathsQuery_Impl(object):
##    def QueryPathsParameters(self, ppQueryPathsParameters):
##        u'Parameters that control how paths stored in the mosaic dataset are queried.'
##        #return 
##
##    def GetItemPaths(self, pRow):
##        u'Parses the raster dataset and item URI attributes of the specified mosaic catalog row and returns an array of paths.'
##        #return ppItemPaths
##
##    def ExportPaths(self, bQueryMosaicPaths, bQueryCatalogItemPaths, exportTableName, pWorkspace, configurationKeyword, pTrackCancel):
##        u'Exports paths associated with the raster datasets and the data sources of selected catalog items to the specified table in the target workspace.'
##        #return 
##
##    @property
##    def MosaicDatasetPaths(self):
##        u'The array of paths stored at the mosaic dataset (top) level.'
##        #return ppPaths
##

class IHistogramSpecification(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control histogram specification.'
    _iid_ = GUID('{978BBC66-4461-44BC-A068-0572A7F2D828}')
    _idlflags_ = ['oleautomation']
IHistogramSpecification._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The collection of histograms that describe the distribution of input values.')], HRESULT, 'InputHistogram',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'ppInputHistograms' )),
    COMMETHOD(['propget', helpstring(u'The collection of histograms that describe the distribution of input values.')], HRESULT, 'InputHistogram',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'ppInputHistograms' )),
    COMMETHOD(['propputref', helpstring(u'The collection of target histograms that describe the desired distribution of output values. These are the histograms to which each input histogram is matched.')], HRESULT, 'TargetHistogram',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'ppTargetHistograms' )),
    COMMETHOD(['propget', helpstring(u'The collection of target histograms that describe the desired distribution of output values. These are the histograms to which each input histogram is matched.')], HRESULT, 'TargetHistogram',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'ppTargetHistograms' )),
    COMMETHOD([helpstring(u'Recalculates the look-up that maps input values -- having a distribution described by the input histograms -- to output values that have a distribution described by the target histograms.')], HRESULT, 'Update'),
    COMMETHOD([helpstring(u'Returns the look-up array for the requested band for remapping pixel values.')], HRESULT, 'GetLookup',
              ( ['in'], c_int, 'iBand' ),
              ( ['retval', 'out'], POINTER(VARIANT), 'pvtLookup' )),
]
################################################################
## code template for IHistogramSpecification implementation
##class IHistogramSpecification_Impl(object):
##    @property
##    def TargetHistogram(self, ppTargetHistograms):
##        u'The collection of target histograms that describe the desired distribution of output values. These are the histograms to which each input histogram is matched.'
##        #return 
##
##    @property
##    def InputHistogram(self, ppInputHistograms):
##        u'The collection of histograms that describe the distribution of input values.'
##        #return 
##
##    def Update(self):
##        u'Recalculates the look-up that maps input values -- having a distribution described by the input histograms -- to output values that have a distribution described by the target histograms.'
##        #return 
##
##    def GetLookup(self, iBand):
##        u'Returns the look-up array for the requested band for remapping pixel values.'
##        #return pvtLookup
##

IRasterStatus3._methods_ = [
    COMMETHOD(['propput', helpstring(u'The status to be suspended.')], HRESULT, 'Suspend',
              ( ['in'], VARIANT_BOOL, 'b' )),
    COMMETHOD(['propget', helpstring(u'The status to be suspended.')], HRESULT, 'Suspend',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'b' )),
]
################################################################
## code template for IRasterStatus3 implementation
##class IRasterStatus3_Impl(object):
##    def _get(self):
##        u'The status to be suspended.'
##        #return b
##    def _set(self, b):
##        u'The status to be suspended.'
##    Suspend = property(_get, _set, doc = _set.__doc__)
##

class IRasterTypeHistory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control raster type history.'
    _iid_ = GUID('{0F0862A7-C315-4E51-8F20-BE91D2D13BBD}')
    _idlflags_ = ['oleautomation']
class IRasterTypeHistory2(IRasterTypeHistory):
    _case_insensitive_ = True
    u'Provides access to members that control raster type history.'
    _iid_ = GUID('{FDF0E9FC-B966-41B1-8E3B-FB396F44396D}')
    _idlflags_ = ['oleautomation']
IRasterTypeHistory._methods_ = [
    COMMETHOD([helpstring(u'Returns the raster type object associated with the specified instance ID.')], HRESULT, 'GetRasterTypeInstance',
              ( ['in'], c_int, 'InstanceID' ),
              ( ['retval', 'out'], POINTER(POINTER(IRasterType)), 'ppRasterTypeInstance' )),
    COMMETHOD([helpstring(u'Returns all available raster type instances.')], HRESULT, 'GetAllRasterTypeInstances',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'ppRasterTypeInstanceArray' )),
    COMMETHOD([helpstring(u'Returns all raster type instances corresponding to overview schemas.')], HRESULT, 'GetOverviewInstances',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'ppOverviewRasterTypeInstances' )),
    COMMETHOD([helpstring(u'Updates or adds the specified raster type object to the collection. Returns the ID of the updated or newly added instance.')], HRESULT, 'UpdateRasterTypeInstance',
              ( ['in'], POINTER(IRasterType), 'pRasterTypeInstance' ),
              ( ['retval', 'out'], POINTER(c_int), 'pInstanceID' )),
    COMMETHOD([helpstring(u'Returns all raster type instances associated with selected catalog items.')], HRESULT, 'GetSelectedRasterTypeInstances',
              ( ['in'], POINTER(ISelectionParameters), 'pSelectionParameters' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'ppRasterTypeInstanceArray' )),
]
################################################################
## code template for IRasterTypeHistory implementation
##class IRasterTypeHistory_Impl(object):
##    def UpdateRasterTypeInstance(self, pRasterTypeInstance):
##        u'Updates or adds the specified raster type object to the collection. Returns the ID of the updated or newly added instance.'
##        #return pInstanceID
##
##    def GetAllRasterTypeInstances(self):
##        u'Returns all available raster type instances.'
##        #return ppRasterTypeInstanceArray
##
##    def GetOverviewInstances(self):
##        u'Returns all raster type instances corresponding to overview schemas.'
##        #return ppOverviewRasterTypeInstances
##
##    def GetSelectedRasterTypeInstances(self, pSelectionParameters):
##        u'Returns all raster type instances associated with selected catalog items.'
##        #return ppRasterTypeInstanceArray
##
##    def GetRasterTypeInstance(self, InstanceID):
##        u'Returns the raster type object associated with the specified instance ID.'
##        #return ppRasterTypeInstance
##

IRasterTypeHistory2._methods_ = [
    COMMETHOD([helpstring(u'Returns all available raster type instances IDs (ObjectIDs of all rows in the associated raster type table).')], HRESULT, 'GetAllRasterTypeInstanceIDs',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFIDSet)), 'ppInstanceIDs' )),
]
################################################################
## code template for IRasterTypeHistory2 implementation
##class IRasterTypeHistory2_Impl(object):
##    def GetAllRasterTypeInstanceIDs(self):
##        u'Returns all available raster type instances IDs (ObjectIDs of all rows in the associated raster type table).'
##        #return ppInstanceIDs
##

class RemapFilter(CoClass):
    u'A class for remap filter.'
    _reg_clsid_ = GUID('{2AA277E1-0772-4941-A322-F07B2B6AE782}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
RemapFilter._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IPixelFilter, IRemapFilter]

IISATBuilder._methods_ = [
    COMMETHOD(['propput', helpstring(u'Path to photo file.')], HRESULT, 'PhotoFile',
              ( ['in'], BSTR, 'ppPhFilePath' )),
    COMMETHOD(['propget', helpstring(u'Path to photo file.')], HRESULT, 'PhotoFile',
              ( ['retval', 'out'], POINTER(BSTR), 'ppPhFilePath' )),
    COMMETHOD(['propput', helpstring(u'Path to camera file.')], HRESULT, 'CameraFile',
              ( ['in'], BSTR, 'ppCamFilePath' )),
    COMMETHOD(['propget', helpstring(u'Path to camera file.')], HRESULT, 'CameraFile',
              ( ['retval', 'out'], POINTER(BSTR), 'ppCamFilePath' )),
]
################################################################
## code template for IISATBuilder implementation
##class IISATBuilder_Impl(object):
##    def _get(self):
##        u'Path to camera file.'
##        #return ppCamFilePath
##    def _set(self, ppCamFilePath):
##        u'Path to camera file.'
##    CameraFile = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Path to photo file.'
##        #return ppPhFilePath
##    def _set(self, ppPhFilePath):
##        u'Path to photo file.'
##    PhotoFile = property(_get, _set, doc = _set.__doc__)
##

class ColorspaceConversionFunction(CoClass):
    u'The class for a colorspace conversion function.'
    _reg_clsid_ = GUID('{13B16685-CA39-478E-9B4C-02F12A73552E}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
ColorspaceConversionFunction._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunction, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class IRasterCalcUniqueValues2(IRasterCalcUniqueValues):
    _case_insensitive_ = True
    u'Provides access to members that controls calculation of unique values.'
    _iid_ = GUID('{7C39B731-A6A8-4843-A734-FF607331E57A}')
    _idlflags_ = ['oleautomation']
IRasterCalcUniqueValues2._methods_ = [
    COMMETHOD(['propget', helpstring(u'The maximum number of unique values.')], HRESULT, 'MaxUniqueValueCount',
              ( ['retval', 'out'], POINTER(c_int), 'pMaxCount' )),
    COMMETHOD(['propput', helpstring(u'The maximum number of unique values.')], HRESULT, 'MaxUniqueValueCount',
              ( ['in'], c_int, 'pMaxCount' )),
]
################################################################
## code template for IRasterCalcUniqueValues2 implementation
##class IRasterCalcUniqueValues2_Impl(object):
##    def _get(self):
##        u'The maximum number of unique values.'
##        #return pMaxCount
##    def _set(self, pMaxCount):
##        u'The maximum number of unique values.'
##    MaxUniqueValueCount = property(_get, _set, doc = _set.__doc__)
##

IItemURICompare._methods_ = [
    COMMETHOD([helpstring(u'Compares the object with the specified item URI. Returns 0 if object = pItemURI, -1 if object < pItemURI, and +1 if object > pItemURI.')], HRESULT, 'Compare',
              ( ['in'], POINTER(IItemURI), 'pItemURI' ),
              ( ['retval', 'out'], POINTER(c_int), 'pResult' )),
]
################################################################
## code template for IItemURICompare implementation
##class IItemURICompare_Impl(object):
##    def Compare(self, pItemURI):
##        u'Compares the object with the specified item URI. Returns 0 if object = pItemURI, -1 if object < pItemURI, and +1 if object > pItemURI.'
##        #return pResult
##

class ICachedRasterFunction(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a cached raster function.'
    _iid_ = GUID('{D19975B1-D6D1-46C2-9BD4-F27F2D1E23AD}')
    _idlflags_ = ['oleautomation']
ICachedRasterFunction._methods_ = [
    COMMETHOD(['propget', helpstring(u'The name of the cached raster file.')], HRESULT, 'CachedRasterFileName',
              ( ['retval', 'out'], POINTER(BSTR), 'pFileName' )),
]
################################################################
## code template for ICachedRasterFunction implementation
##class ICachedRasterFunction_Impl(object):
##    @property
##    def CachedRasterFileName(self):
##        u'The name of the cached raster file.'
##        #return pFileName
##

IRasterType._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The full name of the raster type object.')], HRESULT, 'FullName',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName), 'ppRasterTypeName' )),
    COMMETHOD(['propget', helpstring(u'The full name of the raster type object.')], HRESULT, 'FullName',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName)), 'ppRasterTypeName' )),
    COMMETHOD(['propputref', helpstring(u'The inner raster builder associated with the raster type.')], HRESULT, 'RasterBuilder',
              ( ['in'], POINTER(IRasterBuilder), 'ppRasterBuilder' )),
    COMMETHOD(['propget', helpstring(u'The inner raster builder associated with the raster type.')], HRESULT, 'RasterBuilder',
              ( ['retval', 'out'], POINTER(POINTER(IRasterBuilder)), 'ppRasterBuilder' )),
    COMMETHOD(['propputref', helpstring(u'The active URI filter associated with the raster type.')], HRESULT, 'URIFilter',
              ( ['in'], POINTER(IItemURIFilter), 'ppItemURIFilter' )),
    COMMETHOD(['propget', helpstring(u'The active URI filter associated with the raster type.')], HRESULT, 'URIFilter',
              ( ['retval', 'out'], POINTER(POINTER(IItemURIFilter)), 'ppItemURIFilter' )),
    COMMETHOD(['propputref', helpstring(u'The collection of item templates associated with the raster type.')], HRESULT, 'ItemTemplates',
              ( ['in'], POINTER(IItemTemplateArray), 'ppItemTemplateArray' )),
    COMMETHOD(['propget', helpstring(u'The collection of item templates associated with the raster type.')], HRESULT, 'ItemTemplates',
              ( ['retval', 'out'], POINTER(POINTER(IItemTemplateArray)), 'ppItemTemplateArray' )),
    COMMETHOD(['propget', helpstring(u'The collection of all variables associated with all item templates contained in the raster type.')], HRESULT, 'DefaultParameters',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet)), 'ppDefaultParameters' )),
    COMMETHOD(['propputref', helpstring(u'Overriding parameter values bound to function variables.')], HRESULT, 'Parameters',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet), 'ppInputParameters' )),
    COMMETHOD(['propget', helpstring(u'Overriding parameter values bound to function variables.')], HRESULT, 'Parameters',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet)), 'ppInputParameters' )),
]
################################################################
## code template for IRasterType implementation
##class IRasterType_Impl(object):
##    @property
##    def Parameters(self, ppInputParameters):
##        u'Overriding parameter values bound to function variables.'
##        #return 
##
##    @property
##    def RasterBuilder(self, ppRasterBuilder):
##        u'The inner raster builder associated with the raster type.'
##        #return 
##
##    @property
##    def ItemTemplates(self, ppItemTemplateArray):
##        u'The collection of item templates associated with the raster type.'
##        #return 
##
##    @property
##    def URIFilter(self, ppItemURIFilter):
##        u'The active URI filter associated with the raster type.'
##        #return 
##
##    @property
##    def DefaultParameters(self):
##        u'The collection of all variables associated with all item templates contained in the raster type.'
##        #return ppDefaultParameters
##
##    @property
##    def FullName(self, ppRasterTypeName):
##        u'The full name of the raster type object.'
##        #return 
##

ISplitMergedItemsParameters._methods_ = [
]
################################################################
## code template for ISplitMergedItemsParameters implementation
##class ISplitMergedItemsParameters_Impl(object):

class IMergeRastersFunctionArguments(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    _iid_ = GUID('{8223C812-31C2-4BFD-8C4E-D8E4D53F6A94}')
    _idlflags_ = ['oleautomation']
IMergeRastersFunctionArguments._methods_ = [
    COMMETHOD(['propget', helpstring(u'The list of rasters.')], HRESULT, 'Rasters',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppRasters' )),
    COMMETHOD(['propputref', helpstring(u'The list of rasters.')], HRESULT, 'Rasters',
              ( ['in'], POINTER(IUnknown), 'ppRasters' )),
    COMMETHOD(['propget', helpstring(u'The optional list of matching footprints to which each corresponding raster is clipped.')], HRESULT, 'Footprints',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppFootprintGeometries' )),
    COMMETHOD(['propputref', helpstring(u'The optional list of matching footprints to which each corresponding raster is clipped.')], HRESULT, 'Footprints',
              ( ['in'], POINTER(IUnknown), 'ppFootprintGeometries' )),
]
################################################################
## code template for IMergeRastersFunctionArguments implementation
##class IMergeRastersFunctionArguments_Impl(object):
##    def Rasters(self, ppRasters):
##        u'The list of rasters.'
##        #return 
##
##    def Footprints(self, ppFootprintGeometries):
##        u'The optional list of matching footprints to which each corresponding raster is clipped.'
##        #return 
##

IRasterStatus2._methods_ = [
    COMMETHOD([helpstring(u'Broadcasts the title of the operation.')], HRESULT, 'FireTitle',
              ( ['in'], BSTR, 'Title' )),
    COMMETHOD([helpstring(u'Broadcasts the message of the operation.')], HRESULT, 'FireMessage',
              ( ['in'], BSTR, 'Message' )),
    COMMETHOD([helpstring(u'Broadcasts if the operation should be continued.')], HRESULT, 'FireContinue',
              ( ['out'], POINTER(VARIANT_BOOL), 'bContinue' )),
]
################################################################
## code template for IRasterStatus2 implementation
##class IRasterStatus2_Impl(object):
##    def FireMessage(self, Message):
##        u'Broadcasts the message of the operation.'
##        #return 
##
##    def FireContinue(self):
##        u'Broadcasts if the operation should be continued.'
##        #return bContinue
##
##    def FireTitle(self, Title):
##        u'Broadcasts the title of the operation.'
##        #return 
##

class DefaultRasterStatusEvent(CoClass):
    u'The default listener of the raster related events.'
    _reg_clsid_ = GUID('{7A0A76A0-5836-11D4-8D9B-00C04F5B87B2}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IERasterStatus(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that get events from the Raster Engine.'
    _iid_ = GUID('{CE4BCC80-2758-11D3-80CE-00500462E955}')
    _idlflags_ = ['oleautomation', 'hidden']
DefaultRasterStatusEvent._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterStatusEvent, IRasterStatusEvent2, IERasterStatus]

class IGrayscaleFunctionArguments(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control greyscale conversion function arguments.'
    _iid_ = GUID('{8CE85547-6AD1-4748-BC50-446FE423AEA3}')
    _idlflags_ = ['oleautomation']
IGrayscaleFunctionArguments._methods_ = [
    COMMETHOD(['propget', helpstring(u'The input raster for conversion.')], HRESULT, 'Raster',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppRaster' )),
    COMMETHOD(['propputref', helpstring(u'The input raster for conversion.')], HRESULT, 'Raster',
              ( ['in'], POINTER(IUnknown), 'ppRaster' )),
    COMMETHOD(['propget', helpstring(u'The greyscale coversion parameters (weights).')], HRESULT, 'ConversionParameters',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray)), 'ppParameters' )),
    COMMETHOD(['propputref', helpstring(u'The greyscale coversion parameters (weights).')], HRESULT, 'ConversionParameters',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray), 'ppParameters' )),
]
################################################################
## code template for IGrayscaleFunctionArguments implementation
##class IGrayscaleFunctionArguments_Impl(object):
##    def ConversionParameters(self, ppParameters):
##        u'The greyscale coversion parameters (weights).'
##        #return 
##
##    def Raster(self, ppRaster):
##        u'The input raster for conversion.'
##        #return 
##

class SpeckleFunction(CoClass):
    u'A class for a speckle raster function.'
    _reg_clsid_ = GUID('{1C11C9E1-25F1-4042-B6E8-E9953D85392F}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
SpeckleFunction._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunction, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class IRasterCommands(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to member that control a list of raster command.'
    _iid_ = GUID('{80729C30-3E01-4B32-8075-55C1CC4AB070}')
    _idlflags_ = ['oleautomation']
class IRasterCommand(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to member that control a raster command.'
    _iid_ = GUID('{7015C99D-2F08-44F9-88F0-8F85A766CB2B}')
    _idlflags_ = ['oleautomation']
IRasterCommands._methods_ = [
    COMMETHOD([helpstring(u'Returns the next raster command.')], HRESULT, 'Next',
              ( ['retval', 'out'], POINTER(POINTER(IRasterCommand)), 'pCommand' )),
]
################################################################
## code template for IRasterCommands implementation
##class IRasterCommands_Impl(object):
##    def Next(self):
##        u'Returns the next raster command.'
##        #return pCommand
##

class ImageMatchPoint(CoClass):
    u'The Image Match Point class.'
    _reg_clsid_ = GUID('{0E2AB92A-B323-4B92-AA1E-7C2BA1C81CEE}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IImageMatchPoint(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a match point.'
    _iid_ = GUID('{652A79E7-758A-4F83-B7A5-F3FC8507C9DF}')
    _idlflags_ = []
ImageMatchPoint._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IImageMatchPoint]

class ConvolutionFunction(CoClass):
    u'A class for a convolution raster function.'
    _reg_clsid_ = GUID('{35DBACDC-18E0-4C5B-A087-C6C5BB692289}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
ConvolutionFunction._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunction, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

IAddNewerRastersParameters._methods_ = [
    COMMETHOD(['propput', helpstring(u'Indicates whether existing mosaic dataset items are updated with datasets that have been modified on disk. When set to false, the operation skips over modified data source items that already exist in the mosaic dataset.')], HRESULT, 'OverwriteExisting',
              ( ['in'], VARIANT_BOOL, 'pbOverwriteExisting' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether existing mosaic dataset items are updated with datasets that have been modified on disk. When set to false, the operation skips over modified data source items that already exist in the mosaic dataset.')], HRESULT, 'OverwriteExisting',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbOverwriteExisting' )),
]
################################################################
## code template for IAddNewerRastersParameters implementation
##class IAddNewerRastersParameters_Impl(object):
##    def _get(self):
##        u'Indicates whether existing mosaic dataset items are updated with datasets that have been modified on disk. When set to false, the operation skips over modified data source items that already exist in the mosaic dataset.'
##        #return pbOverwriteExisting
##    def _set(self, pbOverwriteExisting):
##        u'Indicates whether existing mosaic dataset items are updated with datasets that have been modified on disk. When set to false, the operation skips over modified data source items that already exist in the mosaic dataset.'
##    OverwriteExisting = property(_get, _set, doc = _set.__doc__)
##

class IPansharpeningFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a pansharpening filter.'
    _iid_ = GUID('{A9D01E68-5E2E-4DBD-B878-4EC48F565120}')
    _idlflags_ = ['oleautomation']
IPansharpeningFilter._methods_ = [
    COMMETHOD(['propget', helpstring(u'The panchromatic image.')], HRESULT, 'PanImage',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster)), 'ppPanImage' )),
    COMMETHOD(['propputref', helpstring(u'The panchromatic image.')], HRESULT, 'PanImage',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'ppPanImage' )),
    COMMETHOD(['propget', helpstring(u'The current pansharpening type.')], HRESULT, 'PansharpeningType',
              ( ['retval', 'out'], POINTER(esriPansharpeningType), 'pSharpeningType' )),
    COMMETHOD(['propput', helpstring(u'The current pansharpening type.')], HRESULT, 'PansharpeningType',
              ( ['in'], esriPansharpeningType, 'pSharpeningType' )),
    COMMETHOD([helpstring(u'Gets the Red, Green, Blue, and Infrared weights contributing to panchromatic image.')], HRESULT, 'QueryWeights',
              ( ['out'], POINTER(c_double), 'pRW' ),
              ( ['out'], POINTER(c_double), 'pGW' ),
              ( ['out'], POINTER(c_double), 'pBW' ),
              ( ['out'], POINTER(c_double), 'pIW' )),
    COMMETHOD([helpstring(u'Puts the Red, Green, Blue, and Infrared weights contributing to panchromatic image.')], HRESULT, 'PutWeights',
              ( ['in'], c_double, 'RW' ),
              ( ['in'], c_double, 'GW' ),
              ( ['in'], c_double, 'BW' ),
              ( ['in'], c_double, 'IW' )),
    COMMETHOD(['propget', helpstring(u'The optional infrared image.')], HRESULT, 'InfraredImage',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster)), 'ppInfraredImage' )),
    COMMETHOD(['propputref', helpstring(u'The optional infrared image.')], HRESULT, 'InfraredImage',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'ppInfraredImage' )),
]
################################################################
## code template for IPansharpeningFilter implementation
##class IPansharpeningFilter_Impl(object):
##    def InfraredImage(self, ppInfraredImage):
##        u'The optional infrared image.'
##        #return 
##
##    def PutWeights(self, RW, GW, BW, IW):
##        u'Puts the Red, Green, Blue, and Infrared weights contributing to panchromatic image.'
##        #return 
##
##    def QueryWeights(self):
##        u'Gets the Red, Green, Blue, and Infrared weights contributing to panchromatic image.'
##        #return pRW, pGW, pBW, pIW
##
##    def _get(self):
##        u'The current pansharpening type.'
##        #return pSharpeningType
##    def _set(self, pSharpeningType):
##        u'The current pansharpening type.'
##    PansharpeningType = property(_get, _set, doc = _set.__doc__)
##
##    def PanImage(self, ppPanImage):
##        u'The panchromatic image.'
##        #return 
##

class IRasterFormatControl(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control raster format support level.'
    _iid_ = GUID('{07F9AF37-9121-480B-82E9-760C96E16618}')
    _idlflags_ = ['oleautomation']
IRasterFormatControl._methods_ = [
    COMMETHOD(['propget', helpstring(u'The current raster format support level.')], HRESULT, 'FormatSupportLevel',
              ( ['retval', 'out'], POINTER(esriRasterFormatSupportLevel), 'pSupportLevel' )),
    COMMETHOD(['propput', helpstring(u'The current raster format support level.')], HRESULT, 'FormatSupportLevel',
              ( ['in'], esriRasterFormatSupportLevel, 'pSupportLevel' )),
]
################################################################
## code template for IRasterFormatControl implementation
##class IRasterFormatControl_Impl(object):
##    def _get(self):
##        u'The current raster format support level.'
##        #return pSupportLevel
##    def _set(self, pSupportLevel):
##        u'The current raster format support level.'
##    FormatSupportLevel = property(_get, _set, doc = _set.__doc__)
##

class IMergeItemsParameters2(IMergeItemsParameters):
    _case_insensitive_ = True
    u'Provides access to members that control how a mosaic dataset items are merged.'
    _iid_ = GUID('{3D80F4A6-43CB-4E2C-B7B4-92233CE04018}')
    _idlflags_ = []
IMergeItemsParameters._methods_ = [
]
################################################################
## code template for IMergeItemsParameters implementation
##class IMergeItemsParameters_Impl(object):

IMergeItemsParameters2._methods_ = [
    COMMETHOD(['propput', helpstring(u'The name of the field that contains values that identify blocks of related items.')], HRESULT, 'BlockField',
              ( ['in'], BSTR, 'pBlockField' )),
    COMMETHOD(['propget', helpstring(u'The name of the field that contains values that identify blocks of related items.')], HRESULT, 'BlockField',
              ( ['retval', 'out'], POINTER(BSTR), 'pBlockField' )),
    COMMETHOD(['propput', helpstring(u'The maximum number of mosaic dataset items allowed in a merged item.')], HRESULT, 'MaximumMergeItemsCount',
              ( ['in'], c_int, 'pMaximumMergeItemsCount' )),
    COMMETHOD(['propget', helpstring(u'The maximum number of mosaic dataset items allowed in a merged item.')], HRESULT, 'MaximumMergeItemsCount',
              ( ['retval', 'out'], POINTER(c_int), 'pMaximumMergeItemsCount' )),
]
################################################################
## code template for IMergeItemsParameters2 implementation
##class IMergeItemsParameters2_Impl(object):
##    def _get(self):
##        u'The name of the field that contains values that identify blocks of related items.'
##        #return pBlockField
##    def _set(self, pBlockField):
##        u'The name of the field that contains values that identify blocks of related items.'
##    BlockField = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The maximum number of mosaic dataset items allowed in a merged item.'
##        #return pMaximumMergeItemsCount
##    def _set(self, pMaximumMergeItemsCount):
##        u'The maximum number of mosaic dataset items allowed in a merged item.'
##    MaximumMergeItemsCount = property(_get, _set, doc = _set.__doc__)
##

IRasterCommand._methods_ = [
    COMMETHOD(['propget', helpstring(u'The command name, e.g. CalculateStatistics, BuildPyramids, and etc.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'pName' )),
    COMMETHOD(['propget', helpstring(u'The command ID.')], HRESULT, 'ID',
              ( ['retval', 'out'], POINTER(c_int), 'pID' )),
    COMMETHOD(['propget', helpstring(u'The command argument(s).')], HRESULT, 'Argument',
              ( ['retval', 'out'], POINTER(VARIANT), 'pArgument' )),
    COMMETHOD([helpstring(u'Initializes a raster command.')], HRESULT, 'Init',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'ID' ),
              ( ['in'], VARIANT, 'Argument' )),
]
################################################################
## code template for IRasterCommand implementation
##class IRasterCommand_Impl(object):
##    def Init(self, Name, ID, Argument):
##        u'Initializes a raster command.'
##        #return 
##
##    @property
##    def Argument(self):
##        u'The command argument(s).'
##        #return pArgument
##
##    @property
##    def Name(self):
##        u'The command name, e.g. CalculateStatistics, BuildPyramids, and etc.'
##        #return pName
##
##    @property
##    def ID(self):
##        u'The command ID.'
##        #return pID
##

class IdentityXform(CoClass):
    u'An identity transform class.'
    _reg_clsid_ = GUID('{C4709A2E-299E-4609-9904-6C595319B30F}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
IdentityXform._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IIdentityXform, comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ITransformation, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersionSupportGEN, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class ImageFeaturePoints(CoClass):
    u'The Image Feature Point collection class.'
    _reg_clsid_ = GUID('{3DAEBBA2-FAB8-4E11-A259-1ED658AD2146}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
ImageFeaturePoints._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IImageFeaturePoints]

IRasterCommandResult._methods_ = [
    COMMETHOD(['propget', helpstring(u'The executed command.')], HRESULT, 'Command',
              ( ['retval', 'out'], POINTER(POINTER(IRasterCommand)), 'ppCommand' )),
    COMMETHOD(['propget', helpstring(u'The return value.')], HRESULT, 'Value',
              ( ['retval', 'out'], POINTER(VARIANT), 'pValue' )),
    COMMETHOD(['propget', helpstring(u'The return status.')], HRESULT, 'Status',
              ( ['retval', 'out'], POINTER(HRESULT), 'pStatus' )),
    COMMETHOD([helpstring(u'Initializes a raster command result.')], HRESULT, 'Init',
              ( ['in'], POINTER(IRasterCommand), 'pCommand' ),
              ( ['in'], VARIANT, 'Value' ),
              ( ['in'], HRESULT, 'Status' )),
]
################################################################
## code template for IRasterCommandResult implementation
##class IRasterCommandResult_Impl(object):
##    @property
##    def Status(self):
##        u'The return status.'
##        #return pStatus
##
##    def Init(self, pCommand, Value, Status):
##        u'Initializes a raster command result.'
##        #return 
##
##    @property
##    def Command(self):
##        u'The executed command.'
##        #return ppCommand
##
##    @property
##    def Value(self):
##        u'The return value.'
##        #return pValue
##

class IStretchFunctionArguments(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control stretch function arguments.'
    _iid_ = GUID('{3E5A8CA3-6A10-4A3E-A49B-BBC4C86E23FE}')
    _idlflags_ = ['oleautomation']
class IStretchFunctionArguments2(IStretchFunctionArguments):
    _case_insensitive_ = True
    u'Provides access to members that control stretch function arguments.'
    _iid_ = GUID('{248E30E5-B730-487D-822B-0E25E8BBCF1C}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'esriRasterStretchType'
esriRasterStretchNone = 0
esriRasterStretchStandardDeviation = 3
esriRasterStretchHistogramEqualization = 4
esriRasterStretchMinimumMaximum = 5
esriRasterStretchPercentMinimumMaximum = 6
esriRasterStretchGaussian = 7
esriRasterStretchHistogramSpecification = 8
esriRasterStretchType = c_int # enum
IStretchFunctionArguments._methods_ = [
    COMMETHOD(['propget', helpstring(u'The source raster object.')], HRESULT, 'Raster',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppRaster' )),
    COMMETHOD(['propputref', helpstring(u'The source raster object.')], HRESULT, 'Raster',
              ( ['in'], POINTER(IUnknown), 'ppRaster' )),
    COMMETHOD(['propget', helpstring(u'The stretch type.')], HRESULT, 'StretchType',
              ( ['retval', 'out'], POINTER(esriRasterStretchType), 'pStretchType' )),
    COMMETHOD(['propput', helpstring(u'The stretch type.')], HRESULT, 'StretchType',
              ( ['in'], esriRasterStretchType, 'pStretchType' )),
    COMMETHOD(['propget', helpstring(u'The list of Gamma value(s).')], HRESULT, 'Gamma',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray)), 'ppGamma' )),
    COMMETHOD(['propputref', helpstring(u'The list of Gamma value(s).')], HRESULT, 'Gamma',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray), 'ppGamma' )),
    COMMETHOD(['propget', helpstring(u'The custom raster stretch statistics.')], HRESULT, 'Statistics',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'ppStats' )),
    COMMETHOD(['propputref', helpstring(u'The custom raster stretch statistics.')], HRESULT, 'Statistics',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'ppStats' )),
    COMMETHOD(['propget', helpstring(u'The custom raster stretch histogram.')], HRESULT, 'Histograms',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'ppHistograms' )),
    COMMETHOD(['propputref', helpstring(u'The custom raster stretch histogram.')], HRESULT, 'Histograms',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'ppHistograms' )),
    COMMETHOD(['propput', helpstring(u'The number of standard deviations for standard deviation stretch.')], HRESULT, 'NumberOfStandardDeviations',
              ( ['in'], c_double, 'pNumStdDevs' )),
    COMMETHOD(['propget', helpstring(u'The number of standard deviations for standard deviation stretch.')], HRESULT, 'NumberOfStandardDeviations',
              ( ['retval', 'out'], POINTER(c_double), 'pNumStdDevs' )),
    COMMETHOD(['propget', helpstring(u'Indicates if applies Gamma stretch.')], HRESULT, 'UseGamma',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pUseGamma' )),
    COMMETHOD(['propput', helpstring(u'Indicates if applies Gamma stretch.')], HRESULT, 'UseGamma',
              ( ['in'], VARIANT_BOOL, 'pUseGamma' )),
    COMMETHOD(['propget', helpstring(u'The current minimum output value.')], HRESULT, 'Min',
              ( ['retval', 'out'], POINTER(c_double), 'pMinValue' )),
    COMMETHOD(['propput', helpstring(u'The current minimum output value.')], HRESULT, 'Min',
              ( ['in'], c_double, 'pMinValue' )),
    COMMETHOD(['propget', helpstring(u'The current maximum output value.')], HRESULT, 'Max',
              ( ['retval', 'out'], POINTER(c_double), 'pMaxValue' )),
    COMMETHOD(['propput', helpstring(u'The current maximum output value.')], HRESULT, 'Max',
              ( ['in'], c_double, 'pMaxValue' )),
    COMMETHOD(['propget', helpstring(u'The current minimum percent value.')], HRESULT, 'MinPercent',
              ( ['retval', 'out'], POINTER(c_double), 'pPercent' )),
    COMMETHOD(['propput', helpstring(u'The current minimum percent value.')], HRESULT, 'MinPercent',
              ( ['in'], c_double, 'pPercent' )),
    COMMETHOD(['propget', helpstring(u'The current maximum percent value.')], HRESULT, 'MaxPercent',
              ( ['retval', 'out'], POINTER(c_double), 'pPercent' )),
    COMMETHOD(['propput', helpstring(u'The current maximum percent value.')], HRESULT, 'MaxPercent',
              ( ['in'], c_double, 'pPercent' )),
]
################################################################
## code template for IStretchFunctionArguments implementation
##class IStretchFunctionArguments_Impl(object):
##    def Raster(self, ppRaster):
##        u'The source raster object.'
##        #return 
##
##    def Statistics(self, ppStats):
##        u'The custom raster stretch statistics.'
##        #return 
##
##    def _get(self):
##        u'The current minimum output value.'
##        #return pMinValue
##    def _set(self, pMinValue):
##        u'The current minimum output value.'
##    Min = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The number of standard deviations for standard deviation stretch.'
##        #return pNumStdDevs
##    def _set(self, pNumStdDevs):
##        u'The number of standard deviations for standard deviation stretch.'
##    NumberOfStandardDeviations = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The current maximum percent value.'
##        #return pPercent
##    def _set(self, pPercent):
##        u'The current maximum percent value.'
##    MaxPercent = property(_get, _set, doc = _set.__doc__)
##
##    def Histograms(self, ppHistograms):
##        u'The custom raster stretch histogram.'
##        #return 
##
##    def _get(self):
##        u'Indicates if applies Gamma stretch.'
##        #return pUseGamma
##    def _set(self, pUseGamma):
##        u'Indicates if applies Gamma stretch.'
##    UseGamma = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The current maximum output value.'
##        #return pMaxValue
##    def _set(self, pMaxValue):
##        u'The current maximum output value.'
##    Max = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The stretch type.'
##        #return pStretchType
##    def _set(self, pStretchType):
##        u'The stretch type.'
##    StretchType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The current minimum percent value.'
##        #return pPercent
##    def _set(self, pPercent):
##        u'The current minimum percent value.'
##    MinPercent = property(_get, _set, doc = _set.__doc__)
##
##    def Gamma(self, ppGamma):
##        u'The list of Gamma value(s).'
##        #return 
##

IStretchFunctionArguments2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if Dynamic Range Adjustment should be applied.')], HRESULT, 'DRA',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pDRA' )),
    COMMETHOD(['propput', helpstring(u'Indicates if Dynamic Range Adjustment should be applied.')], HRESULT, 'DRA',
              ( ['in'], VARIANT_BOOL, 'pDRA' )),
    COMMETHOD(['propget', helpstring(u'Indicates if statistics and histograms should be computed (estimated) if none existss.')], HRESULT, 'EstimateStatsHistogram',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pEstimateStatsHistogram' )),
    COMMETHOD(['propput', helpstring(u'Indicates if statistics and histograms should be computed (estimated) if none existss.')], HRESULT, 'EstimateStatsHistogram',
              ( ['in'], VARIANT_BOOL, 'pEstimateStatsHistogram' )),
    COMMETHOD(['propget', helpstring(u'Indicates if gamma values should be computed by default.')], HRESULT, 'ComputeGamma',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pComputeGamma' )),
    COMMETHOD(['propput', helpstring(u'Indicates if gamma values should be computed by default.')], HRESULT, 'ComputeGamma',
              ( ['in'], VARIANT_BOOL, 'pComputeGamma' )),
]
################################################################
## code template for IStretchFunctionArguments2 implementation
##class IStretchFunctionArguments2_Impl(object):
##    def _get(self):
##        u'Indicates if Dynamic Range Adjustment should be applied.'
##        #return pDRA
##    def _set(self, pDRA):
##        u'Indicates if Dynamic Range Adjustment should be applied.'
##    DRA = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if statistics and histograms should be computed (estimated) if none existss.'
##        #return pEstimateStatsHistogram
##    def _set(self, pEstimateStatsHistogram):
##        u'Indicates if statistics and histograms should be computed (estimated) if none existss.'
##    EstimateStatsHistogram = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if gamma values should be computed by default.'
##        #return pComputeGamma
##    def _set(self, pComputeGamma):
##        u'Indicates if gamma values should be computed by default.'
##    ComputeGamma = property(_get, _set, doc = _set.__doc__)
##

IRasterBuilder._methods_ = [
    COMMETHOD([helpstring(u'Returns a crawler best suited for data source as recommended by the raster builder.')], HRESULT, 'GetRecommendedCrawler',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet), 'pDataSourceProperties' ),
              ( ['retval', 'out'], POINTER(POINTER(IDataSourceCrawler)), 'ppRecommendedCrawler' )),
    COMMETHOD([helpstring(u'Initializes the raster builder for URI construction given a valid data source crawler object.')], HRESULT, 'BeginConstruction',
              ( ['in'], POINTER(IDataSourceCrawler), 'pCrawler' )),
    COMMETHOD([helpstring(u'Constructs one or more item URI objects given the crawled data source item.')], HRESULT, 'ConstructURIs',
              ( ['in'], VARIANT, 'crawlerItem' )),
    COMMETHOD([helpstring(u'Returns the next available item URI object.')], HRESULT, 'GetNextURI',
              ( ['retval', 'out'], POINTER(POINTER(IItemURI)), 'ppItemURI' )),
    COMMETHOD([helpstring(u'Shuts down the raster builder object upon completion of URI construction. Once all item URIs are constructed and returned via repated calls to the GetNextURI, this method might return an array of item URIs possibly created as a result of the shut down process.?!?\x08?&')], HRESULT, 'EndConstruction',
              ( ['retval', 'out'], POINTER(POINTER(IItemURIArray)), 'ppRemainingItemURIs' )),
    COMMETHOD([helpstring(u'Indicates whether the data source referenced by the specified item URI has been updated since the item URI was last constructed.')], HRESULT, 'IsStale',
              ( ['in'], POINTER(IItemURI), 'pItemURI' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pIsStale' )),
    COMMETHOD([helpstring(u'Construct a builder item using the specified item URI.')], HRESULT, 'Build',
              ( ['in'], POINTER(IItemURI), 'pItemURI' ),
              ( ['retval', 'out'], POINTER(POINTER(IBuilderItem)), 'ppBuilderItem' )),
    COMMETHOD(['propputref', helpstring(u'The raster dataset builder properties.')], HRESULT, 'Properties',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet), 'ppBuilderPoperties' )),
    COMMETHOD(['propget', helpstring(u'The raster dataset builder properties.')], HRESULT, 'Properties',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet)), 'ppBuilderPoperties' )),
    COMMETHOD(['propputref', helpstring(u'Fields to be created and populated in the raster catalog when a builder is used.')], HRESULT, 'AuxiliaryFields',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFields), 'ppAuxiliaryFields' )),
    COMMETHOD(['propget', helpstring(u'Fields to be created and populated in the raster catalog when a builder is used.')], HRESULT, 'AuxiliaryFields',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFields)), 'ppAuxiliaryFields' )),
    COMMETHOD(['propputref', helpstring(u'Optional look-up that maps field names to possile metadata property names.')], HRESULT, 'AuxiliaryFieldAlias',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet), 'ppFieldNameMap' )),
    COMMETHOD(['propget', helpstring(u'Optional look-up that maps field names to possile metadata property names.')], HRESULT, 'AuxiliaryFieldAlias',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet)), 'ppFieldNameMap' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the raster type can build an item URI as soon as it is contructed.')], HRESULT, 'CanBuildInPlace',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbCanBuildInPlace' )),
]
################################################################
## code template for IRasterBuilder implementation
##class IRasterBuilder_Impl(object):
##    def IsStale(self, pItemURI):
##        u'Indicates whether the data source referenced by the specified item URI has been updated since the item URI was last constructed.'
##        #return pIsStale
##
##    def ConstructURIs(self, crawlerItem):
##        u'Constructs one or more item URI objects given the crawled data source item.'
##        #return 
##
##    def BeginConstruction(self, pCrawler):
##        u'Initializes the raster builder for URI construction given a valid data source crawler object.'
##        #return 
##
##    def GetRecommendedCrawler(self, pDataSourceProperties):
##        u'Returns a crawler best suited for data source as recommended by the raster builder.'
##        #return ppRecommendedCrawler
##
##    @property
##    def AuxiliaryFieldAlias(self, ppFieldNameMap):
##        u'Optional look-up that maps field names to possile metadata property names.'
##        #return 
##
##    @property
##    def AuxiliaryFields(self, ppAuxiliaryFields):
##        u'Fields to be created and populated in the raster catalog when a builder is used.'
##        #return 
##
##    def GetNextURI(self):
##        u'Returns the next available item URI object.'
##        #return ppItemURI
##
##    @property
##    def CanBuildInPlace(self):
##        u'Indicates whether the raster type can build an item URI as soon as it is contructed.'
##        #return pbCanBuildInPlace
##
##    def EndConstruction(self):
##        u'Shuts down the raster builder object upon completion of URI construction. Once all item URIs are constructed and returned via repated calls to the GetNextURI, this method might return an array of item URIs possibly created as a result of the shut down process.?!?\x08?&'
##        #return ppRemainingItemURIs
##
##    @property
##    def Properties(self, ppBuilderPoperties):
##        u'The raster dataset builder properties.'
##        #return 
##
##    def Build(self, pItemURI):
##        u'Construct a builder item using the specified item URI.'
##        #return ppBuilderItem
##

class ICellSizeLevel2(ICellSizeLevel):
    _case_insensitive_ = True
    u'Provides access to members that control a cell size level.'
    _iid_ = GUID('{A5C2A545-736D-493F-A981-F0F23531D3D2}')
    _idlflags_ = ['oleautomation']
ICellSizeLevel._methods_ = [
    COMMETHOD(['propput', helpstring(u'The cell size value assocated with the level.')], HRESULT, 'CellSize',
              ( ['in'], c_double, 'pCellsize' )),
    COMMETHOD(['propget', helpstring(u'The cell size value assocated with the level.')], HRESULT, 'CellSize',
              ( ['retval', 'out'], POINTER(c_double), 'pCellsize' )),
    COMMETHOD(['propputref', helpstring(u'The geometry defining the boundary of the cell size level.')], HRESULT, 'Geometry',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'ppLevelBoundary' )),
    COMMETHOD(['propget', helpstring(u'The geometry defining the boundary of the cell size level.')], HRESULT, 'Geometry',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry)), 'ppLevelBoundary' )),
    COMMETHOD(['propput', helpstring(u'The minimum cell size value associated with the level.')], HRESULT, 'MinimumCellSize',
              ( ['in'], c_double, 'pMinimumCellSize' )),
    COMMETHOD(['propget', helpstring(u'The minimum cell size value associated with the level.')], HRESULT, 'MinimumCellSize',
              ( ['retval', 'out'], POINTER(c_double), 'pMinimumCellSize' )),
    COMMETHOD(['propput', helpstring(u'The maximum cell size value associated with the level.')], HRESULT, 'MaximumCellSize',
              ( ['in'], c_double, 'pMaximumCellSize' )),
    COMMETHOD(['propget', helpstring(u'The maximum cell size value associated with the level.')], HRESULT, 'MaximumCellSize',
              ( ['retval', 'out'], POINTER(c_double), 'pMaximumCellSize' )),
    COMMETHOD(['propput', helpstring(u'The unique ID associated with the cell size level.')], HRESULT, 'ID',
              ( ['in'], c_int, 'pDescriptionID' )),
    COMMETHOD(['propget', helpstring(u'The unique ID associated with the cell size level.')], HRESULT, 'ID',
              ( ['retval', 'out'], POINTER(c_int), 'pDescriptionID' )),
]
################################################################
## code template for ICellSizeLevel implementation
##class ICellSizeLevel_Impl(object):
##    @property
##    def Geometry(self, ppLevelBoundary):
##        u'The geometry defining the boundary of the cell size level.'
##        #return 
##
##    def _get(self):
##        u'The maximum cell size value associated with the level.'
##        #return pMaximumCellSize
##    def _set(self, pMaximumCellSize):
##        u'The maximum cell size value associated with the level.'
##    MaximumCellSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The minimum cell size value associated with the level.'
##        #return pMinimumCellSize
##    def _set(self, pMinimumCellSize):
##        u'The minimum cell size value associated with the level.'
##    MinimumCellSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The unique ID associated with the cell size level.'
##        #return pDescriptionID
##    def _set(self, pDescriptionID):
##        u'The unique ID associated with the cell size level.'
##    ID = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The cell size value assocated with the level.'
##        #return pCellsize
##    def _set(self, pCellsize):
##        u'The cell size value assocated with the level.'
##    CellSize = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'esriCellSizeLevelCategory'
esriCellSizeLevelCategoryUnknown = 0
esriCellSizeLevelCategoryPrimary = 1
esriCellSizeLevelCategoryOverview = 2
esriCellSizeLevelCategorySeamline = 4
esriCellSizeLevelCategory = c_int # enum
ICellSizeLevel2._methods_ = [
    COMMETHOD(['propput', helpstring(u'The category associated with the cell size level.')], HRESULT, 'Category',
              ( ['in'], esriCellSizeLevelCategory, 'pCategory' )),
    COMMETHOD(['propget', helpstring(u'The category associated with the cell size level.')], HRESULT, 'Category',
              ( ['retval', 'out'], POINTER(esriCellSizeLevelCategory), 'pCategory' )),
]
################################################################
## code template for ICellSizeLevel2 implementation
##class ICellSizeLevel2_Impl(object):
##    def _get(self):
##        u'The category associated with the cell size level.'
##        #return pCategory
##    def _set(self, pCategory):
##        u'The category associated with the cell size level.'
##    Category = property(_get, _set, doc = _set.__doc__)
##

class ImageMatchPoints(CoClass):
    u'The Image Match Point collection class.'
    _reg_clsid_ = GUID('{F4565965-EE18-46DD-A622-4CFBAF10D010}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
ImageMatchPoints._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IImageMatchPoints]

class RasterItemFunctionArguments(CoClass):
    u'A class for raster item function arguments.'
    _reg_clsid_ = GUID('{A2A534D3-D721-4C8C-BFAF-98C6D835DAF2}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
RasterItemFunctionArguments._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunctionArguments, IRasterItemFunctionArguments, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class MosaicRaster(CoClass):
    u'A mosaic of rasters.'
    _reg_clsid_ = GUID('{1375C45E-1F1E-4687-A62F-13EA270772C5}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IMosaicRaster(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a MosaicRaster.'
    _iid_ = GUID('{6CCD314B-1153-42B5-A5F1-AA56E070159C}')
    _idlflags_ = ['oleautomation']
class IMosaicRaster2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a MosaicRaster.'
    _iid_ = GUID('{77D428CF-3F55-497D-BD5C-9FB7B2D708A9}')
    _idlflags_ = ['oleautomation']
class IRasterProps(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the most common raster properties.'
    _iid_ = GUID('{4B7B1BD0-A705-11D2-8E30-00A0249480F0}')
    _idlflags_ = ['oleautomation']
class IPixelOperation(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a pixel operation on a raster.'
    _iid_ = GUID('{467F7216-8AC1-4AAC-98BB-E656C135567A}')
    _idlflags_ = ['oleautomation']
MosaicRaster._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMosaicRaster, IMosaicRaster2, IRasterCollection, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster, IRasterProps, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeoDataset, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ISaveAs, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ISaveAs2, IPixelOperation, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]

class RasterColormap(CoClass):
    u'A container for a colormap used to display a raster band.'
    _reg_clsid_ = GUID('{92195722-5732-11D2-AAAD-00C04FA375FB}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IRasterColormap4(IRasterColormap3):
    _case_insensitive_ = True
    u'Provides access to members that control a raster colormap.'
    _iid_ = GUID('{706F687A-AE96-416F-AEEB-BD234BBB7DC9}')
    _idlflags_ = ['oleautomation']
RasterColormap._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterColormap, IRasterColormap2, IRasterColormap3, IRasterColormap4, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

class IRasterWorkspace(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a raster workspace.'
    _iid_ = GUID('{AAE25031-35FB-11D2-B1F2-00C04F8EDEFF}')
    _idlflags_ = ['oleautomation']
IRasterWorkspace._methods_ = [
    COMMETHOD([helpstring(u'Opens a RasterDataset in the workspace given its name.')], HRESULT, 'OpenRasterDataset',
              ( ['in'], BSTR, 'Name' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterDataset)), 'RasterDataset' )),
    COMMETHOD(['restricted', helpstring(u'Creates a RasterDataset in the workspace given its name.')], HRESULT, 'CreateRasterDataset',
              ( ['in'], BSTR, 'Name' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterDataset)), 'RasterDataset' )),
    COMMETHOD(['restricted', helpstring(u'Opens a RasterBand in the workspace given its name.')], HRESULT, 'OpenRasterBand',
              ( ['in'], BSTR, 'Name' ),
              ( ['retval', 'out'], POINTER(POINTER(IRasterBand)), 'RasterBand' )),
    COMMETHOD(['restricted', helpstring(u'Creates a RasterBand in the workspace given its name.')], HRESULT, 'CreateRasterBand',
              ( ['in'], BSTR, 'Name' ),
              ( ['retval', 'out'], POINTER(POINTER(IRasterBand)), 'RasterBand' )),
    COMMETHOD([helpstring(u'Indicates if the file path specified is a raster workspace.')], HRESULT, 'IsWorkspace',
              ( ['in'], BSTR, 'Name' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsWorkspace' )),
    COMMETHOD([helpstring(u'Indicates if this dataset can be copied.')], HRESULT, 'CanCopy',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'CanCopy' )),
    COMMETHOD([helpstring(u'Copies this workspace to a new workspace with the specified name.')], HRESULT, 'Copy',
              ( ['in'], BSTR, 'copyName' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspace), 'copyWorkspace' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataset)), 'copyDataset' )),
]
################################################################
## code template for IRasterWorkspace implementation
##class IRasterWorkspace_Impl(object):
##    def CanCopy(self):
##        u'Indicates if this dataset can be copied.'
##        #return CanCopy
##
##    def OpenRasterBand(self, Name):
##        u'Opens a RasterBand in the workspace given its name.'
##        #return RasterBand
##
##    def CreateRasterDataset(self, Name):
##        u'Creates a RasterDataset in the workspace given its name.'
##        #return RasterDataset
##
##    def OpenRasterDataset(self, Name):
##        u'Opens a RasterDataset in the workspace given its name.'
##        #return RasterDataset
##
##    def CreateRasterBand(self, Name):
##        u'Creates a RasterBand in the workspace given its name.'
##        #return RasterBand
##
##    def Copy(self, copyName, copyWorkspace):
##        u'Copies this workspace to a new workspace with the specified name.'
##        #return copyDataset
##
##    def IsWorkspace(self, Name):
##        u'Indicates if the file path specified is a raster workspace.'
##        #return IsWorkspace
##

class CSMXform(CoClass):
    u'CSM transformation class.'
    _reg_clsid_ = GUID('{5F801A53-8D2A-4A41-B933-FEFFCF0CCAF8}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
CSMXform._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ICSMXform, ICustomXform, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeodataXform, IGeodataXform2, ISensorXform, comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ITransformation, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersionSupportGEN, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

IReplacePathsParameters2._methods_ = [
    COMMETHOD(['propput', helpstring(u'Indicates whether paths in raster types are replaced.')], HRESULT, 'ReplaceRasterTypePaths',
              ( ['in'], VARIANT_BOOL, 'pbReplaceRasterTypePaths' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether paths in raster types are replaced.')], HRESULT, 'ReplaceRasterTypePaths',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbReplaceRasterTypePaths' )),
    COMMETHOD(['propputref', helpstring(u'The collection of raster type instances for which paths are replaced. If this property is not set, paths are replaced for only those raster type instances associated with selected mosaic dataset items.')], HRESULT, 'RasterTypeInstanceIDs',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFIDSet), 'ppRasterTypeInstanceIDs' )),
    COMMETHOD(['propget', helpstring(u'The collection of raster type instances for which paths are replaced. If this property is not set, paths are replaced for only those raster type instances associated with selected mosaic dataset items.')], HRESULT, 'RasterTypeInstanceIDs',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFIDSet)), 'ppRasterTypeInstanceIDs' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether paths in raster dataset cache are replaced.')], HRESULT, 'ReplaceCachePaths',
              ( ['in'], VARIANT_BOOL, 'pbReplaceCachePaths' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether paths in raster dataset cache are replaced.')], HRESULT, 'ReplaceCachePaths',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbReplaceCachePaths' )),
]
################################################################
## code template for IReplacePathsParameters2 implementation
##class IReplacePathsParameters2_Impl(object):
##    @property
##    def RasterTypeInstanceIDs(self, ppRasterTypeInstanceIDs):
##        u'The collection of raster type instances for which paths are replaced. If this property is not set, paths are replaced for only those raster type instances associated with selected mosaic dataset items.'
##        #return 
##
##    def _get(self):
##        u'Indicates whether paths in raster types are replaced.'
##        #return pbReplaceRasterTypePaths
##    def _set(self, pbReplaceRasterTypePaths):
##        u'Indicates whether paths in raster types are replaced.'
##    ReplaceRasterTypePaths = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether paths in raster dataset cache are replaced.'
##        #return pbReplaceCachePaths
##    def _set(self, pbReplaceCachePaths):
##        u'Indicates whether paths in raster dataset cache are replaced.'
##    ReplaceCachePaths = property(_get, _set, doc = _set.__doc__)
##

IIndexedItemURI._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The name object associated with the container dataset.')], HRESULT, 'DatasetName',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName), 'ppDatasetName' )),
    COMMETHOD(['propget', helpstring(u'The name object associated with the container dataset.')], HRESULT, 'DatasetName',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName)), 'ppDatasetName' )),
    COMMETHOD(['propput', helpstring(u'The ID of the data source within the container dataset referenced by the item URI.')], HRESULT, 'ItemID',
              ( ['in'], c_int, 'pItemID' )),
    COMMETHOD(['propget', helpstring(u'The ID of the data source within the container dataset referenced by the item URI.')], HRESULT, 'ItemID',
              ( ['retval', 'out'], POINTER(c_int), 'pItemID' )),
]
################################################################
## code template for IIndexedItemURI implementation
##class IIndexedItemURI_Impl(object):
##    def _get(self):
##        u'The ID of the data source within the container dataset referenced by the item URI.'
##        #return pItemID
##    def _set(self, pItemID):
##        u'The ID of the data source within the container dataset referenced by the item URI.'
##    ItemID = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def DatasetName(self, ppDatasetName):
##        u'The name object associated with the container dataset.'
##        #return 
##

class ITerrainBuilder(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control terrain to raster conversion.'
    _iid_ = GUID('{4FEAF55C-10CB-4B34-81AF-D5788F231EC0}')
    _idlflags_ = ['oleautomation']
ITerrainBuilder._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The parameters controlling terrain to raster properties built by this raster type.')], HRESULT, 'TerrainToRasterArguments',
              ( ['in'], POINTER(ITerrainToRasterFunctionArguments), 'ppTerrainToRasterFunctionArgs' )),
    COMMETHOD(['propget', helpstring(u'The parameters controlling terrain to raster properties built by this raster type.')], HRESULT, 'TerrainToRasterArguments',
              ( ['retval', 'out'], POINTER(POINTER(ITerrainToRasterFunctionArguments)), 'ppTerrainToRasterFunctionArgs' )),
]
################################################################
## code template for ITerrainBuilder implementation
##class ITerrainBuilder_Impl(object):
##    @property
##    def TerrainToRasterArguments(self, ppTerrainToRasterFunctionArgs):
##        u'The parameters controlling terrain to raster properties built by this raster type.'
##        #return 
##

IRPCXform._methods_ = [
    COMMETHOD(['propget', helpstring(u'The forward transformation from native to GCS WGS84.')], HRESULT, 'ForwardXform',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeodataXform)), 'ppXf' )),
    COMMETHOD(['propputref', helpstring(u'The forward transformation from native to GCS WGS84.')], HRESULT, 'ForwardXform',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeodataXform), 'ppXf' )),
    COMMETHOD([helpstring(u'Defines a RPC transform from 90 coefficients.')], HRESULT, 'DefineFromCoefficients',
              ( ['in'], POINTER(VARIANT), 'pRPC' )),
    COMMETHOD([helpstring(u'Gets the rational polynomial coefficients.')], HRESULT, 'GetCoefficients',
              ( ['retval', 'out'], POINTER(VARIANT), 'pRPC' )),
    COMMETHOD([helpstring(u'Puts the rational polynomial coefficients.')], HRESULT, 'PutCoefficients',
              ( ['in'], POINTER(c_double), 'RPC' )),
    COMMETHOD([helpstring(u'Queries the rational polynomial coefficients.')], HRESULT, 'QueryCoefficients',
              ( ['in'], POINTER(c_double), 'RPC' )),
]
################################################################
## code template for IRPCXform implementation
##class IRPCXform_Impl(object):
##    def GetCoefficients(self):
##        u'Gets the rational polynomial coefficients.'
##        #return pRPC
##
##    def PutCoefficients(self, RPC):
##        u'Puts the rational polynomial coefficients.'
##        #return 
##
##    def ForwardXform(self, ppXf):
##        u'The forward transformation from native to GCS WGS84.'
##        #return 
##
##    def DefineFromCoefficients(self, pRPC):
##        u'Defines a RPC transform from 90 coefficients.'
##        #return 
##
##    def QueryCoefficients(self, RPC):
##        u'Queries the rational polynomial coefficients.'
##        #return 
##

class ILutFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a LookUp Table filter.'
    _iid_ = GUID('{D6358C16-C5F9-46C9-8283-952D79F3C2D5}')
    _idlflags_ = ['oleautomation']
ILutFilter._methods_ = [
    COMMETHOD(['propget', helpstring(u'The min LUT value.')], HRESULT, 'Min',
              ( ['retval', 'out'], POINTER(c_int), 'Value' )),
    COMMETHOD(['propput', helpstring(u'The min LUT value.')], HRESULT, 'Min',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD(['propget', helpstring(u'The LUT size.')], HRESULT, 'Size',
              ( ['retval', 'out'], POINTER(c_int), 'Size' )),
    COMMETHOD(['propput', helpstring(u'The LUT size.')], HRESULT, 'Size',
              ( ['in'], c_int, 'Size' )),
    COMMETHOD([helpstring(u'Looks a value.')], HRESULT, 'Get',
              ( ['in'], c_int, 'v1' ),
              ( ['retval', 'out'], POINTER(c_int), 'v2' )),
    COMMETHOD([helpstring(u'Sets a LUT value mapping.')], HRESULT, 'Set',
              ( ['in'], c_int, 'v1' ),
              ( ['in'], c_int, 'v2' )),
]
################################################################
## code template for ILutFilter implementation
##class ILutFilter_Impl(object):
##    def Set(self, v1, v2):
##        u'Sets a LUT value mapping.'
##        #return 
##
##    def Get(self, v1):
##        u'Looks a value.'
##        #return v2
##
##    def _get(self):
##        u'The LUT size.'
##        #return Size
##    def _set(self, Size):
##        u'The LUT size.'
##    Size = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The min LUT value.'
##        #return Value
##    def _set(self, Value):
##        u'The min LUT value.'
##    Min = property(_get, _set, doc = _set.__doc__)
##

class ColormapFilter(CoClass):
    u'A raster colormap filter.'
    _reg_clsid_ = GUID('{F4F73571-4B44-47F3-94FC-E0C81F8BAC8B}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IColormapFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a colormap filter.'
    _iid_ = GUID('{09D1A037-40EF-42B0-85A6-96C0F4641F19}')
    _idlflags_ = ['oleautomation']
ColormapFilter._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IPixelFilter, IColormapFilter]

class BackgroundFilter(CoClass):
    u'A raster background filter.'
    _reg_clsid_ = GUID('{9CD915D3-B580-4EC3-BBAF-360FAC60F6C3}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
BackgroundFilter._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IPixelFilter, IBackgroundFilter]

class IBuildSeamlinesParameters(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control parameters to the build seamlines operation.'
    _iid_ = GUID('{2448F092-CD7F-4629-9D60-1A33A2DD6EA5}')
    _idlflags_ = ['oleautomation']
class IBuildSeamlinesParameters2(IBuildSeamlinesParameters):
    _case_insensitive_ = True
    u'Provides access to members that control parameters to the build seamlines operation.'
    _iid_ = GUID('{CB6DBC1B-4664-4748-A408-D2E5F8309873}')
    _idlflags_ = ['oleautomation']
class IBuildSeamlinesParameters3(IBuildSeamlinesParameters2):
    _case_insensitive_ = True
    u'Provides access to members that control parameters to the build seamlines operation.'
    _iid_ = GUID('{041FAE1F-F36B-4540-A699-7D40A9698E1A}')
    _idlflags_ = []
IBuildSeamlinesParameters._methods_ = [
    COMMETHOD(['propput', helpstring(u'Inidicates whether seamline order (SOrder) attribute is updated.')], HRESULT, 'UpdateSeamlineOrder',
              ( ['in'], VARIANT_BOOL, 'pbUpdateSeamlineOrder' )),
    COMMETHOD(['propget', helpstring(u'Inidicates whether seamline order (SOrder) attribute is updated.')], HRESULT, 'UpdateSeamlineOrder',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbUpdateSeamlineOrder' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether seamline geometry is updated for selected items.')], HRESULT, 'ModifySeamlines',
              ( ['in'], VARIANT_BOOL, 'pbModifySeamlines' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether seamline geometry is updated for selected items.')], HRESULT, 'ModifySeamlines',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbModifySeamlines' )),
    COMMETHOD(['propput', helpstring(u'The factor controlling clustering of cell sizes values. Two cell size values with a difference factor less than the value in this property are considered one.')], HRESULT, 'CellSizeClusterTolerance',
              ( ['in'], c_double, 'pCellSizeClusterTolerance' )),
    COMMETHOD(['propget', helpstring(u'The factor controlling clustering of cell sizes values. Two cell size values with a difference factor less than the value in this property are considered one.')], HRESULT, 'CellSizeClusterTolerance',
              ( ['retval', 'out'], POINTER(c_double), 'pCellSizeClusterTolerance' )),
    COMMETHOD(['propputref', helpstring(u'The cursor of mosaic items that determines the order in which items are seamline mosaicked.')], HRESULT, 'Cursor',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ICursor), 'pInputCursor' )),
    COMMETHOD(['propget', helpstring(u'The cursor of mosaic items that determines the order in which items are seamline mosaicked.')], HRESULT, 'Cursor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ICursor)), 'pInputCursor' )),
    COMMETHOD(['propputref', helpstring(u"The optional raster function template used for generating the 'difference' between each item raster and the mosaic raster for computing the item's seamline geometry. The template makes use of at least two dataset type raster function variables with names: Item?!?\x08?&")], HRESULT, 'DifferenceFunctionTemplate',
              ( ['in'], POINTER(IRasterFunctionTemplate), 'ppDifferenceFunction' )),
    COMMETHOD(['propget', helpstring(u"The optional raster function template used for generating the 'difference' between each item raster and the mosaic raster for computing the item's seamline geometry. The template makes use of at least two dataset type raster function variables with names: Item?!?\x08?&")], HRESULT, 'DifferenceFunctionTemplate',
              ( ['retval', 'out'], POINTER(POINTER(IRasterFunctionTemplate)), 'ppDifferenceFunction' )),
    COMMETHOD(['propputref', helpstring(u'The optional seamline modifier object used for building seamlines.')], HRESULT, 'SeamlineModifier',
              ( ['in'], POINTER(ISeamlineModifier), 'ppSeamlineModifier' )),
    COMMETHOD(['propget', helpstring(u'The optional seamline modifier object used for building seamlines.')], HRESULT, 'SeamlineModifier',
              ( ['retval', 'out'], POINTER(POINTER(ISeamlineModifier)), 'ppSeamlineModifier' )),
]
################################################################
## code template for IBuildSeamlinesParameters implementation
##class IBuildSeamlinesParameters_Impl(object):
##    def _get(self):
##        u'Inidicates whether seamline order (SOrder) attribute is updated.'
##        #return pbUpdateSeamlineOrder
##    def _set(self, pbUpdateSeamlineOrder):
##        u'Inidicates whether seamline order (SOrder) attribute is updated.'
##    UpdateSeamlineOrder = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The factor controlling clustering of cell sizes values. Two cell size values with a difference factor less than the value in this property are considered one.'
##        #return pCellSizeClusterTolerance
##    def _set(self, pCellSizeClusterTolerance):
##        u'The factor controlling clustering of cell sizes values. Two cell size values with a difference factor less than the value in this property are considered one.'
##    CellSizeClusterTolerance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether seamline geometry is updated for selected items.'
##        #return pbModifySeamlines
##    def _set(self, pbModifySeamlines):
##        u'Indicates whether seamline geometry is updated for selected items.'
##    ModifySeamlines = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SeamlineModifier(self, ppSeamlineModifier):
##        u'The optional seamline modifier object used for building seamlines.'
##        #return 
##
##    @property
##    def Cursor(self, pInputCursor):
##        u'The cursor of mosaic items that determines the order in which items are seamline mosaicked.'
##        #return 
##
##    @property
##    def DifferenceFunctionTemplate(self, ppDifferenceFunction):
##        u"The optional raster function template used for generating the 'difference' between each item raster and the mosaic raster for computing the item's seamline geometry. The template makes use of at least two dataset type raster function variables with names: Item?!?\x08?&"
##        #return 
##


# values for enumeration 'esriBuildSeamlinesMethod'
esriBuildSeamlinesByGeometry = 1
esriBuildSeamlinesByRadiometry = 2
esriBuildSeamlinesByCopyFootprint = 3
esriBuildSeamlinesByCopyToSiblings = 4
esriBuildSeamlinesByEdgeDetection = 5
esriBuildSeamlinesMethod = c_int # enum
IBuildSeamlinesParameters2._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The  cell size values.')], HRESULT, 'CellSizes',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray), 'ppCellSizes' )),
    COMMETHOD(['propget', helpstring(u'The  cell size values.')], HRESULT, 'CellSizes',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray)), 'ppCellSizes' )),
    COMMETHOD(['propput', helpstring(u'Method to use for building seamlines')], HRESULT, 'Method',
              ( ['in'], esriBuildSeamlinesMethod, 'pBuildSealineMethod' )),
    COMMETHOD(['propget', helpstring(u'Method to use for building seamlines')], HRESULT, 'Method',
              ( ['retval', 'out'], POINTER(esriBuildSeamlinesMethod), 'pBuildSealineMethod' )),
    COMMETHOD(['propput', helpstring(u'Mosaic method to use for calculating the sorder')], HRESULT, 'SortMethod',
              ( ['in'], esriMosaicMethod, 'pBuildSealineMethod' )),
    COMMETHOD(['propget', helpstring(u'Mosaic method to use for calculating the sorder')], HRESULT, 'SortMethod',
              ( ['retval', 'out'], POINTER(esriMosaicMethod), 'pBuildSealineMethod' )),
    COMMETHOD(['propget', helpstring(u'The field to order by if mosaic method is by attribute')], HRESULT, 'OrderByFieldName',
              ( ['retval', 'out'], POINTER(BSTR), 'pName' )),
    COMMETHOD(['propput', helpstring(u'The field to order by if mosaic method is by attribute')], HRESULT, 'OrderByFieldName',
              ( ['in'], BSTR, 'pName' )),
    COMMETHOD(['propget', helpstring(u'The Order By base value.')], HRESULT, 'OrderByBaseValue',
              ( ['retval', 'out'], POINTER(VARIANT), 'pValue' )),
    COMMETHOD(['propput', helpstring(u'The Order By base value.')], HRESULT, 'OrderByBaseValue',
              ( ['in'], VARIANT, 'pValue' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the ascending flag of OrderBy.')], HRESULT, 'Ascending',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pAscending' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the ascending flag of OrderBy.')], HRESULT, 'Ascending',
              ( ['in'], VARIANT_BOOL, 'pAscending' )),
    COMMETHOD(['propget', helpstring(u'The view point.')], HRESULT, 'Viewpoint',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint)), 'ppViewpoint' )),
    COMMETHOD(['propputref', helpstring(u'The view point.')], HRESULT, 'Viewpoint',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'ppViewpoint' )),
    COMMETHOD(['propget', helpstring(u'The blend width.')], HRESULT, 'BlendWidth',
              ( ['retval', 'out'], POINTER(c_double), 'pBlendWidth' )),
    COMMETHOD(['propput', helpstring(u'The blend width.')], HRESULT, 'BlendWidth',
              ( ['in'], c_double, 'pBlendWidth' )),
    COMMETHOD(['propget', helpstring(u'The blend type.')], HRESULT, 'BlendType',
              ( ['retval', 'out'], POINTER(esriBlendType), 'pBlendType' )),
    COMMETHOD(['propput', helpstring(u'The blend type.')], HRESULT, 'BlendType',
              ( ['in'], esriBlendType, 'pBlendType' )),
    COMMETHOD(['propget', helpstring(u'The request size.')], HRESULT, 'RequestSize',
              ( ['retval', 'out'], POINTER(c_int), 'pRequestSize' )),
    COMMETHOD(['propput', helpstring(u'The request size.')], HRESULT, 'RequestSize',
              ( ['in'], c_int, 'pRequestSize' )),
    COMMETHOD(['propget', helpstring(u'The unit of the request size is determined by request size type.')], HRESULT, 'RequestSizeType',
              ( ['retval', 'out'], POINTER(esriRequestSizeType), 'pRequestSizeType' )),
    COMMETHOD(['propput', helpstring(u'The unit of the request size is determined by request size type.')], HRESULT, 'RequestSizeType',
              ( ['in'], esriRequestSizeType, 'pRequestSizeType' )),
]
################################################################
## code template for IBuildSeamlinesParameters2 implementation
##class IBuildSeamlinesParameters2_Impl(object):
##    def _get(self):
##        u'The request size.'
##        #return pRequestSize
##    def _set(self, pRequestSize):
##        u'The request size.'
##    RequestSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The blend width.'
##        #return pBlendWidth
##    def _set(self, pBlendWidth):
##        u'The blend width.'
##    BlendWidth = property(_get, _set, doc = _set.__doc__)
##
##    def Viewpoint(self, ppViewpoint):
##        u'The view point.'
##        #return 
##
##    def _get(self):
##        u'The unit of the request size is determined by request size type.'
##        #return pRequestSizeType
##    def _set(self, pRequestSizeType):
##        u'The unit of the request size is determined by request size type.'
##    RequestSizeType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The field to order by if mosaic method is by attribute'
##        #return pName
##    def _set(self, pName):
##        u'The field to order by if mosaic method is by attribute'
##    OrderByFieldName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Mosaic method to use for calculating the sorder'
##        #return pBuildSealineMethod
##    def _set(self, pBuildSealineMethod):
##        u'Mosaic method to use for calculating the sorder'
##    SortMethod = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether the ascending flag of OrderBy.'
##        #return pAscending
##    def _set(self, pAscending):
##        u'Indicates whether the ascending flag of OrderBy.'
##    Ascending = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The Order By base value.'
##        #return pValue
##    def _set(self, pValue):
##        u'The Order By base value.'
##    OrderByBaseValue = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The blend type.'
##        #return pBlendType
##    def _set(self, pBlendType):
##        u'The blend type.'
##    BlendType = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def CellSizes(self, ppCellSizes):
##        u'The  cell size values.'
##        #return 
##
##    def _get(self):
##        u'Method to use for building seamlines'
##        #return pBuildSealineMethod
##    def _set(self, pBuildSealineMethod):
##        u'Method to use for building seamlines'
##    Method = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'esriBlendWidthUnits'
esriBlendWidthUnitsPixels = 1
esriBlendWidthUnitsGroundUnits = 2
esriBlendWidthUnits = c_int # enum
IBuildSeamlinesParameters3._methods_ = [
    COMMETHOD(['propget', helpstring(u'The blend width unit.')], HRESULT, 'BlendWidthUnits',
              ( ['retval', 'out'], POINTER(esriBlendWidthUnits), 'pBlendWidthUnits' )),
    COMMETHOD(['propput', helpstring(u'The blend width unit.')], HRESULT, 'BlendWidthUnits',
              ( ['in'], esriBlendWidthUnits, 'pBlendWidthUnits' )),
]
################################################################
## code template for IBuildSeamlinesParameters3 implementation
##class IBuildSeamlinesParameters3_Impl(object):
##    def _get(self):
##        u'The blend width unit.'
##        #return pBlendWidthUnits
##    def _set(self, pBlendWidthUnits):
##        u'The blend width unit.'
##    BlendWidthUnits = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'esriImportGeometryTarget'
esriImportGeometryTargetFootprint = 1
esriImportGeometryTargetBoundary = 2
esriImportGeometryTargetSeamline = 3
esriImportGeometryTarget = c_int # enum
IImportGeometryParameters._methods_ = [
    COMMETHOD(['propput', helpstring(u'The target feature class of this import operation.')], HRESULT, 'Target',
              ( ['in'], esriImportGeometryTarget, 'pImportTarget' )),
    COMMETHOD(['propget', helpstring(u'The target feature class of this import operation.')], HRESULT, 'Target',
              ( ['retval', 'out'], POINTER(esriImportGeometryTarget), 'pImportTarget' )),
    COMMETHOD(['propput', helpstring(u'The mosaic dataset field name that participates in the table join that attempts to associate a row in the source feature class with every selected row in the target feature class.')], HRESULT, 'TargetJoinField',
              ( ['in'], BSTR, 'pTargetJoinField' )),
    COMMETHOD(['propget', helpstring(u'The mosaic dataset field name that participates in the table join that attempts to associate a row in the source feature class with every selected row in the target feature class.')], HRESULT, 'TargetJoinField',
              ( ['retval', 'out'], POINTER(BSTR), 'pTargetJoinField' )),
    COMMETHOD(['propputref', helpstring(u'The source feature class from which geometry is imported.')], HRESULT, 'SourceTable',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClass), 'ppSourceTable' )),
    COMMETHOD(['propget', helpstring(u'The source feature class from which geometry is imported.')], HRESULT, 'SourceTable',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClass)), 'ppSourceTable' )),
    COMMETHOD(['propput', helpstring(u'The name of the field in the source feature class that participates in the table join.')], HRESULT, 'SourceJoinField',
              ( ['in'], BSTR, 'pSourceJoinField' )),
    COMMETHOD(['propget', helpstring(u'The name of the field in the source feature class that participates in the table join.')], HRESULT, 'SourceJoinField',
              ( ['retval', 'out'], POINTER(BSTR), 'pSourceJoinField' )),
]
################################################################
## code template for IImportGeometryParameters implementation
##class IImportGeometryParameters_Impl(object):
##    def _get(self):
##        u'The mosaic dataset field name that participates in the table join that attempts to associate a row in the source feature class with every selected row in the target feature class.'
##        #return pTargetJoinField
##    def _set(self, pTargetJoinField):
##        u'The mosaic dataset field name that participates in the table join that attempts to associate a row in the source feature class with every selected row in the target feature class.'
##    TargetJoinField = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The name of the field in the source feature class that participates in the table join.'
##        #return pSourceJoinField
##    def _set(self, pSourceJoinField):
##        u'The name of the field in the source feature class that participates in the table join.'
##    SourceJoinField = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The target feature class of this import operation.'
##        #return pImportTarget
##    def _set(self, pImportTarget):
##        u'The target feature class of this import operation.'
##    Target = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SourceTable(self, ppSourceTable):
##        u'The source feature class from which geometry is imported.'
##        #return 
##

class ICompositeItemURI(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a composite item URI.'
    _iid_ = GUID('{511CE406-16C6-4C8D-8BD4-D4B00FAFB9F1}')
    _idlflags_ = ['oleautomation']
ICompositeItemURI._methods_ = [
    COMMETHOD(['propputref', helpstring(u"An array of string phrases that, together, uniquely identifies the item's data source in the mosaic dataset. The values in this property are used for computing a 'signature' that appears in the URIHash field of the mosaic catalog.")], HRESULT, 'KeyPartNames',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray), 'ppKeyPartNames' )),
    COMMETHOD(['propget', helpstring(u"An array of string phrases that, together, uniquely identifies the item's data source in the mosaic dataset. The values in this property are used for computing a 'signature' that appears in the URIHash field of the mosaic catalog.")], HRESULT, 'KeyPartNames',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray)), 'ppKeyPartNames' )),
    COMMETHOD(['propputref', helpstring(u'Additional pieces of non-identifying information associated with the composite item URI object.')], HRESULT, 'AuxiliaryPartNames',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray), 'ppAuxPartNames' )),
    COMMETHOD(['propget', helpstring(u'Additional pieces of non-identifying information associated with the composite item URI object.')], HRESULT, 'AuxiliaryPartNames',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray)), 'ppAuxPartNames' )),
]
################################################################
## code template for ICompositeItemURI implementation
##class ICompositeItemURI_Impl(object):
##    @property
##    def AuxiliaryPartNames(self, ppAuxPartNames):
##        u'Additional pieces of non-identifying information associated with the composite item URI object.'
##        #return 
##
##    @property
##    def KeyPartNames(self, ppKeyPartNames):
##        u"An array of string phrases that, together, uniquely identifies the item's data source in the mosaic dataset. The values in this property are used for computing a 'signature' that appears in the URIHash field of the mosaic catalog."
##        #return 
##


# values for enumeration 'esriRadarPolarization'
esriRadarPolarizationAll = 0
esriRadarPolarizationHH = 1
esriRadarPolarizationVV = 2
esriRadarPolarizationHV = 3
esriRadarPolarizationVH = 4
esriRadarPolarizationHH_HV = 5
esriRadarPolarizationVV_VH = 6
esriRadarPolarizationHH_VV_HV_VH = 7
esriRadarPolarization = c_int # enum
IRadarBuilder._methods_ = [
    COMMETHOD(['propput', helpstring(u'Type of radar calibration to be applied.')], HRESULT, 'RadarCalibration',
              ( ['in'], esriRadarCalibration, 'bCalibration' )),
    COMMETHOD(['propget', helpstring(u'Type of radar calibration to be applied.')], HRESULT, 'RadarCalibration',
              ( ['retval', 'out'], POINTER(esriRadarCalibration), 'bCalibration' )),
    COMMETHOD(['propput', helpstring(u'Type of polarization to be added.')], HRESULT, 'RadarPolarization',
              ( ['in'], esriRadarPolarization, 'bPolarization' )),
    COMMETHOD(['propget', helpstring(u'Type of polarization to be added.')], HRESULT, 'RadarPolarization',
              ( ['retval', 'out'], POINTER(esriRadarPolarization), 'bPolarization' )),
]
################################################################
## code template for IRadarBuilder implementation
##class IRadarBuilder_Impl(object):
##    def _get(self):
##        u'Type of radar calibration to be applied.'
##        #return bCalibration
##    def _set(self, bCalibration):
##        u'Type of radar calibration to be applied.'
##    RadarCalibration = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Type of polarization to be added.'
##        #return bPolarization
##    def _set(self, bPolarization):
##        u'Type of polarization to be added.'
##    RadarPolarization = property(_get, _set, doc = _set.__doc__)
##

class IStatisticsFunctionArguments(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control focal statistics function arguments.'
    _iid_ = GUID('{9D5D6CF6-1ED8-4D3A-B91F-B743444722C2}')
    _idlflags_ = ['oleautomation']
IStatisticsFunctionArguments._methods_ = [
    COMMETHOD(['propget', helpstring(u'The source raster object.')], HRESULT, 'Raster',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppRaster' )),
    COMMETHOD(['propputref', helpstring(u'The source raster object.')], HRESULT, 'Raster',
              ( ['in'], POINTER(IUnknown), 'ppRaster' )),
    COMMETHOD(['propget', helpstring(u'The focal statistic type.')], HRESULT, 'Type',
              ( ['retval', 'out'], POINTER(esriFocalStatisticType), 'pType' )),
    COMMETHOD(['propput', helpstring(u'The focal statistic type.')], HRESULT, 'Type',
              ( ['in'], esriFocalStatisticType, 'pType' )),
    COMMETHOD(['propput', helpstring(u'The number of columns in the focal function.')], HRESULT, 'Columns',
              ( ['in'], c_int, 'pColumns' )),
    COMMETHOD(['propget', helpstring(u'The number of columns in the focal function.')], HRESULT, 'Columns',
              ( ['retval', 'out'], POINTER(c_int), 'pColumns' )),
    COMMETHOD(['propput', helpstring(u'The number of rows in the focal function.')], HRESULT, 'Rows',
              ( ['in'], c_int, 'pRows' )),
    COMMETHOD(['propget', helpstring(u'The number of rows in the focal function.')], HRESULT, 'Rows',
              ( ['retval', 'out'], POINTER(c_int), 'pRows' )),
]
################################################################
## code template for IStatisticsFunctionArguments implementation
##class IStatisticsFunctionArguments_Impl(object):
##    def Raster(self, ppRaster):
##        u'The source raster object.'
##        #return 
##
##    def _get(self):
##        u'The number of rows in the focal function.'
##        #return pRows
##    def _set(self, pRows):
##        u'The number of rows in the focal function.'
##    Rows = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The focal statistic type.'
##        #return pType
##    def _set(self, pType):
##        u'The focal statistic type.'
##    Type = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The number of columns in the focal function.'
##        #return pColumns
##    def _set(self, pColumns):
##        u'The number of columns in the focal function.'
##    Columns = property(_get, _set, doc = _set.__doc__)
##

class LutFilter(CoClass):
    u'A raster LookUp Table filter.'
    _reg_clsid_ = GUID('{E825FC58-151A-4BC6-8AB5-2CC1481FE403}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
LutFilter._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IPixelFilter, ILutFilter]

IRasterStatus._methods_ = [
    COMMETHOD([helpstring(u'Fires a Start of a raster status event.')], HRESULT, 'FireStart',
              ( ['in'], c_int, 'Min' ),
              ( ['in'], c_int, 'Max' )),
    COMMETHOD([helpstring(u'Fires a Step of a raster status event.')], HRESULT, 'FireStep',
              ( ['in'], c_int, 'pos' )),
    COMMETHOD([helpstring(u'Fires a Step of a raster status event.')], HRESULT, 'FireStop'),
]
################################################################
## code template for IRasterStatus implementation
##class IRasterStatus_Impl(object):
##    def FireStart(self, Min, Max):
##        u'Fires a Start of a raster status event.'
##        #return 
##
##    def FireStep(self, pos):
##        u'Fires a Step of a raster status event.'
##        #return 
##
##    def FireStop(self):
##        u'Fires a Step of a raster status event.'
##        #return 
##


# values for enumeration 'esriRasterFilterTypeEnum'
esriRasterFilterUserDefined = -1
esriRasterFilterLineDetectionHorizontal = 0
esriRasterFilterLineDetectionVertical = 1
esriRasterFilterLineDetectionLeftDiagonal = 2
esriRasterFilterLineDetectionRightDiagonal = 3
esriRasterFilterGradientNorth = 4
esriRasterFilterGradientWest = 5
esriRasterFilterGradientEast = 6
esriRasterFilterGradientSouth = 7
esriRasterFilterGradientNorthEast = 8
esriRasterFilterGradientNorthWest = 9
esriRasterFilterSmoothArithmeticMean = 10
esriRasterFilterSmoothing3x3 = 11
esriRasterFilterSmoothing5x5 = 12
esriRasterFilterSharpening3x3 = 13
esriRasterFilterSharpening5x5 = 14
esriRasterFilterLaplacian3x3 = 15
esriRasterFilterLaplacian5x5 = 16
esriRasterFilterSobelHorizontal = 17
esriRasterFilterSobelVertical = 18
esriRasterFilterSharpen = 19
esriRasterFilterSharpen2 = 20
esriRasterFilterPointSpread = 21
esriRasterFilterNone = 255
esriRasterFilterTypeEnum = c_int # enum
class MeanMosaicker(CoClass):
    u'A custom raster mosaic operator for performing mean value mosaic.'
    _reg_clsid_ = GUID('{8B65A2E0-EFB3-4E14-8B82-7499331B691A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IMosaicOperator2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a custom mosaic operator.'
    _iid_ = GUID('{54C7EC1D-AFE2-40EC-87CD-8136364EEAD6}')
    _idlflags_ = ['oleautomation']
MeanMosaicker._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMosaicOperator, IMosaicOperator2]

class MosaicLODInfos(CoClass):
    u'A class containing mosaic LOD information.'
    _reg_clsid_ = GUID('{E3F15E14-512A-49AF-8078-EF31813D6EAB}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
MosaicLODInfos._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMosaicLODInfos, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

IMultiPartItemURI._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The item URI objects associated with this container URI object.')], HRESULT, 'Parts',
              ( ['in'], POINTER(IItemURIArray), 'ppItemURIArray' )),
    COMMETHOD(['propget', helpstring(u'The item URI objects associated with this container URI object.')], HRESULT, 'Parts',
              ( ['retval', 'out'], POINTER(POINTER(IItemURIArray)), 'ppItemURIArray' )),
]
################################################################
## code template for IMultiPartItemURI implementation
##class IMultiPartItemURI_Impl(object):
##    @property
##    def Parts(self, ppItemURIArray):
##        u'The item URI objects associated with this container URI object.'
##        #return 
##

class IPixelBlockCursor(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control pixel block cursor.'
    _iid_ = GUID('{54DFC56A-BC14-46AC-A815-07DEA8CB9CFB}')
    _idlflags_ = ['oleautomation']
class IRawPixels(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control pixel reading and writing from a RasterBand.'
    _iid_ = GUID('{5A2D94AE-190A-479C-93B9-D6645BB121E6}')
    _idlflags_ = ['oleautomation']
IPixelBlockCursor._methods_ = [
    COMMETHOD([helpstring(u'Initializes the cursor by the raw pixel interface.')], HRESULT, 'InitByRawPixels',
              ( ['in'], POINTER(IRawPixels), 'pRowPixels' ),
              ( ['in'], c_int, 'BlockSizeX' ),
              ( ['in'], c_int, 'BlockSizeY' )),
    COMMETHOD([helpstring(u'Initializes the cursor by the raster interface.')], HRESULT, 'InitByRaster',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' )),
    COMMETHOD([helpstring(u'Updates the cursor block size.')], HRESULT, 'UpdateBlockSize',
              ( ['in'], c_int, 'BlockSizeX' ),
              ( ['in'], c_int, 'BlockSizeY' )),
    COMMETHOD([helpstring(u'Gets the cursor block size.')], HRESULT, 'GetBlockSize',
              ( ['in', 'out'], POINTER(c_int), 'pBlockSizeX' ),
              ( ['in', 'out'], POINTER(c_int), 'pBlockSizeY' )),
    COMMETHOD(['propput', helpstring(u'The cursor scan mode: Line = 0, LineSerpent = 1, Serpent2 = 3, alaGIF = 4.')], HRESULT, 'ScanMode',
              ( ['in'], c_int, 'rhs' )),
    COMMETHOD([helpstring(u'Obtains the next pixel block from the cursor.')], HRESULT, 'NextBlock',
              ( ['in', 'out'], POINTER(c_int), 'pLeft' ),
              ( ['in', 'out'], POINTER(c_int), 'pTop' ),
              ( ['in', 'out'], POINTER(c_int), 'pSizeX' ),
              ( ['in', 'out'], POINTER(c_int), 'pSizeY' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IPixelBlock)), 'ppPixelBlock' )),
]
################################################################
## code template for IPixelBlockCursor implementation
##class IPixelBlockCursor_Impl(object):
##    def UpdateBlockSize(self, BlockSizeX, BlockSizeY):
##        u'Updates the cursor block size.'
##        #return 
##
##    def InitByRaster(self, pRaster):
##        u'Initializes the cursor by the raster interface.'
##        #return 
##
##    def NextBlock(self):
##        u'Obtains the next pixel block from the cursor.'
##        #return pLeft, pTop, pSizeX, pSizeY, ppPixelBlock
##
##    def InitByRawPixels(self, pRowPixels, BlockSizeX, BlockSizeY):
##        u'Initializes the cursor by the raw pixel interface.'
##        #return 
##
##    def GetBlockSize(self):
##        u'Gets the cursor block size.'
##        #return pBlockSizeX, pBlockSizeY
##
##    def _set(self, rhs):
##        u'The cursor scan mode: Line = 0, LineSerpent = 1, Serpent2 = 3, alaGIF = 4.'
##    ScanMode = property(fset = _set, doc = _set.__doc__)
##

IRPFItemURI._methods_ = [
    COMMETHOD(['propput', helpstring(u'Production date associated with the RPF file.')], HRESULT, 'ProductionDate',
              ( ['in'], BSTR, 'pProductionDate' )),
    COMMETHOD(['propget', helpstring(u'Production date associated with the RPF file.')], HRESULT, 'ProductionDate',
              ( ['retval', 'out'], POINTER(BSTR), 'pProductionDate' )),
    COMMETHOD(['propget', helpstring(u'The data edition associated with the DTED file.')], HRESULT, 'DTEDEdition',
              ( ['retval', 'out'], POINTER(BSTR), 'pEdition' )),
    COMMETHOD(['propput', helpstring(u'The data edition associated with the DTED file.')], HRESULT, 'DTEDEdition',
              ( ['in'], BSTR, 'pEdition' )),
    COMMETHOD(['propput', helpstring(u'The data version associated with the RPF/DTED file.')], HRESULT, 'Version',
              ( ['in'], BSTR, 'pVersion' )),
    COMMETHOD(['propget', helpstring(u'The data version associated with the RPF/DTED file.')], HRESULT, 'Version',
              ( ['retval', 'out'], POINTER(BSTR), 'pVersion' )),
    COMMETHOD(['propput', helpstring(u'The data compilation date associated with the DTED file.')], HRESULT, 'CompilationDate',
              ( ['in'], BSTR, 'pCompilationDate' )),
    COMMETHOD(['propget', helpstring(u'The data compilation date associated with the DTED file.')], HRESULT, 'CompilationDate',
              ( ['retval', 'out'], POINTER(BSTR), 'pCompilationDate' )),
    COMMETHOD(['propput', helpstring(u'The maintenance date associated with the DTED file.')], HRESULT, 'MaintenanceDate',
              ( ['in'], BSTR, 'pMaintenanceDate' )),
    COMMETHOD(['propget', helpstring(u'The maintenance date associated with the DTED file.')], HRESULT, 'MaintenanceDate',
              ( ['retval', 'out'], POINTER(BSTR), 'pMaintenanceDate' )),
    COMMETHOD(['propput', helpstring(u'The latitude associated with the DTED file.')], HRESULT, 'Latitude',
              ( ['in'], BSTR, 'pLatitude' )),
    COMMETHOD(['propget', helpstring(u'The latitude associated with the DTED file.')], HRESULT, 'Latitude',
              ( ['retval', 'out'], POINTER(BSTR), 'pLatitude' )),
    COMMETHOD(['propput', helpstring(u'The longitude associated with the DTED file.')], HRESULT, 'Longitude',
              ( ['in'], BSTR, 'pLongitude' )),
    COMMETHOD(['propget', helpstring(u'The longitude associated with the DTED file.')], HRESULT, 'Longitude',
              ( ['retval', 'out'], POINTER(BSTR), 'pLongitude' )),
]
################################################################
## code template for IRPFItemURI implementation
##class IRPFItemURI_Impl(object):
##    def _get(self):
##        u'The data edition associated with the DTED file.'
##        #return pEdition
##    def _set(self, pEdition):
##        u'The data edition associated with the DTED file.'
##    DTEDEdition = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The longitude associated with the DTED file.'
##        #return pLongitude
##    def _set(self, pLongitude):
##        u'The longitude associated with the DTED file.'
##    Longitude = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The data compilation date associated with the DTED file.'
##        #return pCompilationDate
##    def _set(self, pCompilationDate):
##        u'The data compilation date associated with the DTED file.'
##    CompilationDate = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The data version associated with the RPF/DTED file.'
##        #return pVersion
##    def _set(self, pVersion):
##        u'The data version associated with the RPF/DTED file.'
##    Version = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The latitude associated with the DTED file.'
##        #return pLatitude
##    def _set(self, pLatitude):
##        u'The latitude associated with the DTED file.'
##    Latitude = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Production date associated with the RPF file.'
##        #return pProductionDate
##    def _set(self, pProductionDate):
##        u'Production date associated with the RPF file.'
##    ProductionDate = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The maintenance date associated with the DTED file.'
##        #return pMaintenanceDate
##    def _set(self, pMaintenanceDate):
##        u'The maintenance date associated with the DTED file.'
##    MaintenanceDate = property(_get, _set, doc = _set.__doc__)
##

IDistanceMeasurement._methods_ = [
    COMMETHOD(['propget', helpstring(u'The angular unit of the distance measurment.')], HRESULT, 'AngularUnit',
              ( ['retval', 'out'], POINTER(BSTR), 'pAngularUnit' )),
    COMMETHOD(['propput', helpstring(u'The angular unit of the distance measurment.')], HRESULT, 'AngularUnit',
              ( ['in'], BSTR, 'pAngularUnit' )),
    COMMETHOD(['propget', helpstring(u'The azimuth angle of the distance measurement.')], HRESULT, 'AzimuthAngle',
              ( ['retval', 'out'], POINTER(c_double), 'pAzimuthAngle' )),
    COMMETHOD(['propput', helpstring(u'The azimuth angle of the distance measurement.')], HRESULT, 'AzimuthAngle',
              ( ['in'], c_double, 'pAzimuthAngle' )),
    COMMETHOD(['propget', helpstring(u'The uncertainty of the azimuth angle measurement.')], HRESULT, 'AzimuthAngleUncertainty',
              ( ['retval', 'out'], POINTER(c_double), 'pAzAngleUncertainty' )),
    COMMETHOD(['propput', helpstring(u'The uncertainty of the azimuth angle measurement.')], HRESULT, 'AzimuthAngleUncertainty',
              ( ['in'], c_double, 'pAzAngleUncertainty' )),
    COMMETHOD(['propget', helpstring(u'The distance measurement.')], HRESULT, 'DistanceMeasurement',
              ( ['retval', 'out'], POINTER(c_double), 'pDistMeasurement' )),
    COMMETHOD(['propput', helpstring(u'The distance measurement.')], HRESULT, 'DistanceMeasurement',
              ( ['in'], c_double, 'pDistMeasurement' )),
    COMMETHOD(['propget', helpstring(u'The uncertainty of the diatance measurement.')], HRESULT, 'DistanceUncertainty',
              ( ['retval', 'out'], POINTER(c_double), 'pDistUncertainty' )),
    COMMETHOD(['propput', helpstring(u'The uncertainty of the diatance measurement.')], HRESULT, 'DistanceUncertainty',
              ( ['in'], c_double, 'pDistUncertainty' )),
    COMMETHOD(['propget', helpstring(u'The elevation angle of the distance measurement.')], HRESULT, 'ElevationAngle',
              ( ['retval', 'out'], POINTER(c_double), 'pElevationAngle' )),
    COMMETHOD(['propput', helpstring(u'The elevation angle of the distance measurement.')], HRESULT, 'ElevationAngle',
              ( ['in'], c_double, 'pElevationAngle' )),
    COMMETHOD(['propget', helpstring(u'The uncertainty of the elevation angle measurement.')], HRESULT, 'ElevationAngleUncertainty',
              ( ['retval', 'out'], POINTER(c_double), 'pElevAngleUncertainty' )),
    COMMETHOD(['propput', helpstring(u'The uncertainty of the elevation angle measurement.')], HRESULT, 'ElevationAngleUncertainty',
              ( ['in'], c_double, 'pElevAngleUncertainty' )),
    COMMETHOD(['propget', helpstring(u'The height measurement at the first point.')], HRESULT, 'HeightAtPoint1',
              ( ['retval', 'out'], POINTER(c_double), 'pHeightAtPoint1' )),
    COMMETHOD(['propput', helpstring(u'The height measurement at the first point.')], HRESULT, 'HeightAtPoint1',
              ( ['in'], c_double, 'pHeightAtPoint1' )),
    COMMETHOD(['propget', helpstring(u'The height measurement at the second point.')], HRESULT, 'HeightAtPoint2',
              ( ['retval', 'out'], POINTER(c_double), 'pHeightAtPoint2' )),
    COMMETHOD(['propput', helpstring(u'The height measurement at the second point.')], HRESULT, 'HeightAtPoint2',
              ( ['in'], c_double, 'pHeightAtPoint2' )),
    COMMETHOD(['propget', helpstring(u'The horizontal distance measurement.')], HRESULT, 'HorizontalDistanceMeasurement',
              ( ['retval', 'out'], POINTER(c_double), 'pHorizDistMeasurement' )),
    COMMETHOD(['propput', helpstring(u'The horizontal distance measurement.')], HRESULT, 'HorizontalDistanceMeasurement',
              ( ['in'], c_double, 'pHorizDistMeasurement' )),
    COMMETHOD(['propget', helpstring(u'The horizontal distance measurement uncertainty.')], HRESULT, 'HorizontalDistanceUncertainty',
              ( ['retval', 'out'], POINTER(c_double), 'pHorizDistUncertainty' )),
    COMMETHOD(['propput', helpstring(u'The horizontal distance measurement uncertainty.')], HRESULT, 'HorizontalDistanceUncertainty',
              ( ['in'], c_double, 'pHorizDistUncertainty' )),
    COMMETHOD(['propget', helpstring(u'The linear unit of this distance measurment.')], HRESULT, 'LinearUnit',
              ( ['retval', 'out'], POINTER(BSTR), 'pLinearUnit' )),
    COMMETHOD(['propput', helpstring(u'The linear unit of this distance measurment.')], HRESULT, 'LinearUnit',
              ( ['in'], BSTR, 'pLinearUnit' )),
    COMMETHOD([helpstring(u'Resets all the properties of this IAngularMeasurement to their default values.')], HRESULT, 'Reset'),
    COMMETHOD(['propget', helpstring(u'The vertical distance measurement.')], HRESULT, 'VerticalDistanceMeasurement',
              ( ['retval', 'out'], POINTER(c_double), 'pVertDistMeasurement' )),
    COMMETHOD(['propput', helpstring(u'The vertical distance measurement.')], HRESULT, 'VerticalDistanceMeasurement',
              ( ['in'], c_double, 'pVertDistMeasurement' )),
    COMMETHOD(['propget', helpstring(u'The vertical distance measurement uncertainty.')], HRESULT, 'VerticalDistanceUncertainty',
              ( ['retval', 'out'], POINTER(c_double), 'pVertDistUncertainty' )),
    COMMETHOD(['propput', helpstring(u'The vertical distance measurement uncertainty.')], HRESULT, 'VerticalDistanceUncertainty',
              ( ['in'], c_double, 'pVertDistUncertainty' )),
]
################################################################
## code template for IDistanceMeasurement implementation
##class IDistanceMeasurement_Impl(object):
##    def _get(self):
##        u'The uncertainty of the azimuth angle measurement.'
##        #return pAzAngleUncertainty
##    def _set(self, pAzAngleUncertainty):
##        u'The uncertainty of the azimuth angle measurement.'
##    AzimuthAngleUncertainty = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The distance measurement.'
##        #return pDistMeasurement
##    def _set(self, pDistMeasurement):
##        u'The distance measurement.'
##    DistanceMeasurement = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The angular unit of the distance measurment.'
##        #return pAngularUnit
##    def _set(self, pAngularUnit):
##        u'The angular unit of the distance measurment.'
##    AngularUnit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The height measurement at the second point.'
##        #return pHeightAtPoint2
##    def _set(self, pHeightAtPoint2):
##        u'The height measurement at the second point.'
##    HeightAtPoint2 = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The linear unit of this distance measurment.'
##        #return pLinearUnit
##    def _set(self, pLinearUnit):
##        u'The linear unit of this distance measurment.'
##    LinearUnit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The uncertainty of the diatance measurement.'
##        #return pDistUncertainty
##    def _set(self, pDistUncertainty):
##        u'The uncertainty of the diatance measurement.'
##    DistanceUncertainty = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The height measurement at the first point.'
##        #return pHeightAtPoint1
##    def _set(self, pHeightAtPoint1):
##        u'The height measurement at the first point.'
##    HeightAtPoint1 = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The horizontal distance measurement uncertainty.'
##        #return pHorizDistUncertainty
##    def _set(self, pHorizDistUncertainty):
##        u'The horizontal distance measurement uncertainty.'
##    HorizontalDistanceUncertainty = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The elevation angle of the distance measurement.'
##        #return pElevationAngle
##    def _set(self, pElevationAngle):
##        u'The elevation angle of the distance measurement.'
##    ElevationAngle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The vertical distance measurement uncertainty.'
##        #return pVertDistUncertainty
##    def _set(self, pVertDistUncertainty):
##        u'The vertical distance measurement uncertainty.'
##    VerticalDistanceUncertainty = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The vertical distance measurement.'
##        #return pVertDistMeasurement
##    def _set(self, pVertDistMeasurement):
##        u'The vertical distance measurement.'
##    VerticalDistanceMeasurement = property(_get, _set, doc = _set.__doc__)
##
##    def Reset(self):
##        u'Resets all the properties of this IAngularMeasurement to their default values.'
##        #return 
##
##    def _get(self):
##        u'The azimuth angle of the distance measurement.'
##        #return pAzimuthAngle
##    def _set(self, pAzimuthAngle):
##        u'The azimuth angle of the distance measurement.'
##    AzimuthAngle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The horizontal distance measurement.'
##        #return pHorizDistMeasurement
##    def _set(self, pHorizDistMeasurement):
##        u'The horizontal distance measurement.'
##    HorizontalDistanceMeasurement = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The uncertainty of the elevation angle measurement.'
##        #return pElevAngleUncertainty
##    def _set(self, pElevAngleUncertainty):
##        u'The uncertainty of the elevation angle measurement.'
##    ElevationAngleUncertainty = property(_get, _set, doc = _set.__doc__)
##

class RasterAttributeTableManager(CoClass):
    u'A class for managing the association between a raster attribute table and its geodataset.'
    _reg_clsid_ = GUID('{FE143BF3-8D4E-415A-A7E9-A3AC29AB65A7}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IRasterAttributeTableManager(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that controls raster attribute manager.'
    _iid_ = GUID('{D2270488-5946-430E-A1B3-26454A7C1687}')
    _idlflags_ = ['oleautomation']
RasterAttributeTableManager._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterAttributeTableManager]

IBuilderItem._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The URI object associated with the builder item.')], HRESULT, 'URI',
              ( ['in'], POINTER(IItemURI), 'ppItemURI' )),
    COMMETHOD(['propget', helpstring(u'The URI object associated with the builder item.')], HRESULT, 'URI',
              ( ['retval', 'out'], POINTER(POINTER(IItemURI)), 'ppItemURI' )),
    COMMETHOD(['propputref', helpstring(u'The function raster dataset associated with builder item.')], HRESULT, 'Dataset',
              ( ['in'], POINTER(IFunctionRasterDataset), 'ppDataset' )),
    COMMETHOD(['propget', helpstring(u'The function raster dataset associated with builder item.')], HRESULT, 'Dataset',
              ( ['retval', 'out'], POINTER(POINTER(IFunctionRasterDataset)), 'ppDataset' )),
    COMMETHOD(['propget', helpstring(u'The footprint geometry of the function raster dataset that defines regions of valid pixels in the dataset. The footprint geometry may have a coordinate system different from the corresponding dataset.')], HRESULT, 'Footprint',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry)), 'ppFootprint' )),
    COMMETHOD(['propputref', helpstring(u'The footprint geometry of the function raster dataset that defines regions of valid pixels in the dataset. The footprint geometry may have a coordinate system different from the corresponding dataset.')], HRESULT, 'Footprint',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'ppFootprint' )),
    COMMETHOD(['propget', helpstring(u'The seamline geometry associated with this builder item.')], HRESULT, 'Seamline',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry)), 'ppSeamline' )),
    COMMETHOD(['propputref', helpstring(u'The seamline geometry associated with this builder item.')], HRESULT, 'Seamline',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'ppSeamline' )),
    COMMETHOD(['propput', helpstring(u'The stereo ID associated with this builder item.')], HRESULT, 'StereoID',
              ( ['in'], BSTR, 'pStereoID' )),
    COMMETHOD(['propget', helpstring(u'The stereo ID associated with this builder item.')], HRESULT, 'StereoID',
              ( ['retval', 'out'], POINTER(BSTR), 'pStereoID' )),
    COMMETHOD(['propputref', helpstring(u'The stereo IDs of all items that can be paired with this builder item.')], HRESULT, 'StereoPairs',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray), 'ppStereoPairs' )),
    COMMETHOD(['propget', helpstring(u'The stereo IDs of all items that can be paired with this builder item.')], HRESULT, 'StereoPairs',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray)), 'ppStereoPairs' )),
    COMMETHOD(['propputref', helpstring(u'The collection of variables associated with this item.')], HRESULT, 'Variables',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet), 'ppVariables' )),
    COMMETHOD(['propget', helpstring(u'The collection of variables associated with this item.')], HRESULT, 'Variables',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet)), 'ppVariables' )),
    COMMETHOD([helpstring(u"Adds a variable to this item's collection given the variable name, value, and a flag that indicates whether the item URI's tag is prefixed with the variable name and separated by a period.")], HRESULT, 'AddVariable',
              ( ['in'], BSTR, 'variableName' ),
              ( ['in'], VARIANT, 'vtVariableValue' ),
              ( ['in'], VARIANT_BOOL, 'bPrefixWithTag' )),
    COMMETHOD(['propput', helpstring(u'The catagory of builder item. The value in this property appears in the Category field of the mosaic catalog.')], HRESULT, 'Category',
              ( ['in'], esriRasterCatalogItemCategory, 'pItemCategory' )),
    COMMETHOD(['propget', helpstring(u'The catagory of builder item. The value in this property appears in the Category field of the mosaic catalog.')], HRESULT, 'Category',
              ( ['retval', 'out'], POINTER(esriRasterCatalogItemCategory), 'pItemCategory' )),
]
################################################################
## code template for IBuilderItem implementation
##class IBuilderItem_Impl(object):
##    def _get(self):
##        u'The catagory of builder item. The value in this property appears in the Category field of the mosaic catalog.'
##        #return pItemCategory
##    def _set(self, pItemCategory):
##        u'The catagory of builder item. The value in this property appears in the Category field of the mosaic catalog.'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The stereo ID associated with this builder item.'
##        #return pStereoID
##    def _set(self, pStereoID):
##        u'The stereo ID associated with this builder item.'
##    StereoID = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def StereoPairs(self, ppStereoPairs):
##        u'The stereo IDs of all items that can be paired with this builder item.'
##        #return 
##
##    @property
##    def Variables(self, ppVariables):
##        u'The collection of variables associated with this item.'
##        #return 
##
##    @property
##    def URI(self, ppItemURI):
##        u'The URI object associated with the builder item.'
##        #return 
##
##    def AddVariable(self, variableName, vtVariableValue, bPrefixWithTag):
##        u"Adds a variable to this item's collection given the variable name, value, and a flag that indicates whether the item URI's tag is prefixed with the variable name and separated by a period."
##        #return 
##
##    @property
##    def Dataset(self, ppDataset):
##        u'The function raster dataset associated with builder item.'
##        #return 
##
##    def Footprint(self, ppFootprint):
##        u'The footprint geometry of the function raster dataset that defines regions of valid pixels in the dataset. The footprint geometry may have a coordinate system different from the corresponding dataset.'
##        #return 
##
##    def Seamline(self, ppSeamline):
##        u'The seamline geometry associated with this builder item.'
##        #return 
##

class IStatisticsFunctionArguments2(IStatisticsFunctionArguments):
    _case_insensitive_ = True
    u'Provides access to members that control focal statistics function arguments.'
    _iid_ = GUID('{2506BF76-253A-4262-8440-ED00DB372A32}')
    _idlflags_ = ['oleautomation']
IStatisticsFunctionArguments2._methods_ = [
    COMMETHOD(['propput', helpstring(u'Option to fill only no data with pixel value.')], HRESULT, 'FillNoDataOnly',
              ( ['in'], VARIANT_BOOL, 'pbFillNoData' )),
    COMMETHOD(['propget', helpstring(u'Option to fill only no data with pixel value.')], HRESULT, 'FillNoDataOnly',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbFillNoData' )),
]
################################################################
## code template for IStatisticsFunctionArguments2 implementation
##class IStatisticsFunctionArguments2_Impl(object):
##    def _get(self):
##        u'Option to fill only no data with pixel value.'
##        #return pbFillNoData
##    def _set(self, pbFillNoData):
##        u'Option to fill only no data with pixel value.'
##    FillNoDataOnly = property(_get, _set, doc = _set.__doc__)
##

class IRasterCommandResults(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to member that control a list of raster command results.'
    _iid_ = GUID('{A2A402A8-DB1E-4943-A887-243B83FAE327}')
    _idlflags_ = ['oleautomation']
IRasterCommandResults._methods_ = [
    COMMETHOD([helpstring(u'Returns the next raster command.')], HRESULT, 'Next',
              ( ['retval', 'out'], POINTER(POINTER(IRasterCommandResult)), 'pResult' )),
]
################################################################
## code template for IRasterCommandResults implementation
##class IRasterCommandResults_Impl(object):
##    def Next(self):
##        u'Returns the next raster command.'
##        #return pResult
##

class IMosaicDatasetOperation(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to additional members that control a moasaic definition'
    _iid_ = GUID('{FF02CBC0-BC6E-4F16-8652-BED3F04CA23F}')
    _idlflags_ = ['oleautomation']
class IMosaicDatasetOperation2(IMosaicDatasetOperation):
    _case_insensitive_ = True
    u'Provides access to additional members that control a moasaic definition'
    _iid_ = GUID('{99ECF2DD-1B1F-4432-8C5B-192B5FF1DC5A}')
    _idlflags_ = ['oleautomation']
class ICalculateCellSizeRangesParameters(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control parameters for computing cell size ranges in a mosaic dataset.'
    _iid_ = GUID('{6B9CEB1D-7C5F-4DE3-A1A8-843851FA1904}')
    _idlflags_ = ['oleautomation']
IMosaicDatasetOperation._methods_ = [
    COMMETHOD([helpstring(u'Adds raster datasets to the mosaic dataset.')], HRESULT, 'AddRasters',
              ( ['in'], POINTER(IAddRastersParameters), 'pParameters' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' )),
    COMMETHOD([helpstring(u'Rebuilds selected catalog items and synchronizes them with the corresponding data source.')], HRESULT, 'Synchronize',
              ( ['in'], POINTER(ISynchronizeParameters), 'pParameters' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' )),
    COMMETHOD([helpstring(u'Calculates cell size ranges that control visibility of selected catalog items.')], HRESULT, 'CalculateCellSizeRanges',
              ( ['in'], POINTER(ICalculateCellSizeRangesParameters), 'pParameters' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' )),
    COMMETHOD([helpstring(u'Builds the boundary geometry of the mosaic dataset using selected catalog items.')], HRESULT, 'BuildBoundary',
              ( ['in'], POINTER(IBuildBoundaryParameters), 'pParameters' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' )),
    COMMETHOD([helpstring(u'Defines a new (or refreshes an existing) overview tiling scheme.')], HRESULT, 'DefineOverviews',
              ( ['in'], POINTER(IDefineOverviewsParameters), 'pParameters' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' )),
    COMMETHOD([helpstring(u'Generates overview images corresponding to selected catalog items.')], HRESULT, 'GenerateOverviews',
              ( ['in'], POINTER(IGenerateOverviewsParameters), 'pParameters' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' )),
    COMMETHOD([helpstring(u'Removes selected catalog items.')], HRESULT, 'RemoveItems',
              ( ['in'], POINTER(IRemoveItemsParameters), 'pParameters' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' )),
    COMMETHOD([helpstring(u'Rebuilds footprint geometry of selected catalog items.')], HRESULT, 'BuildFootprints',
              ( ['in'], POINTER(IBuildFootprintsParameters), 'pParameters' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' )),
    COMMETHOD([helpstring(u'Builds seamline geometry of selected catalog items.')], HRESULT, 'BuildSeamlines',
              ( ['in'], POINTER(IBuildSeamlinesParameters), 'pParameters' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' )),
    COMMETHOD([helpstring(u'Replaces paths associated with the raster datasets and the data sources of selected catalog items.')], HRESULT, 'ReplacePaths',
              ( ['in'], POINTER(IReplacePathsParameters), 'pParameters' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' )),
    COMMETHOD([helpstring(u'Applies a mask with specified NoData values on selected catalog items.')], HRESULT, 'DefineNoData',
              ( ['in'], POINTER(IDefineNoDataParameters), 'pParameters' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' )),
    COMMETHOD([helpstring(u'Computes a polygon that defines a region containing mosaic dataset items newer than a specified point in time.')], HRESULT, 'ComputeDirtyArea',
              ( ['in'], POINTER(IComputeDirtyAreaParameters), 'pParameters' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' )),
    COMMETHOD([helpstring(u'Returns the spatial index and grid sizes of the mosaic catalog.')], HRESULT, 'QuerySpatialIndex',
              ( ['out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IIndex)), 'ppSpatialIndex' ),
              ( ['out'], POINTER(c_double), 'pGridSize1' ),
              ( ['out'], POINTER(c_double), 'pGridSize2' ),
              ( ['out'], POINTER(c_double), 'pGridSize3' )),
    COMMETHOD([helpstring(u'Resets spatial index on the mosaic catalog. Creates a new spatial index if none is found.')], HRESULT, 'ResetSpatialIndex',
              ( ['in'], c_double, 'gridSize1' ),
              ( ['in'], c_double, 'gridSize2' ),
              ( ['in'], c_double, 'gridSize3' )),
    COMMETHOD([helpstring(u'Updates the time stamp value of selected catalog items.')], HRESULT, 'UpdateTimeStamp',
              ( ['in'], POINTER(ISelectionParameters), 'pParameters' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' )),
    COMMETHOD([helpstring(u'Imports external geometry into the mosaic dataset.')], HRESULT, 'ImportGeometry',
              ( ['in'], POINTER(IImportGeometryParameters), 'pParameters' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' )),
    COMMETHOD(['propget', helpstring(u'The default workspace for storing overview raster dataset associated with the mosaic dataset.')], HRESULT, 'DefaultOverviewWorkspace',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspaceName)), 'ppDefaultOverviewWorkspaceName' )),
    COMMETHOD([helpstring(u'Returns a search cursor with mosaic dataset items matching all specified criteria.')], HRESULT, 'Search',
              ( ['in'], POINTER(ISelectionParameters), 'pParameters' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'pAdditionalQuery' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ICursor)), 'ppCursor' )),
    COMMETHOD([helpstring(u'Re-crawls all data source paths associated with selected catalog items for newer data sources and adds these new items to the mosaic dataset.')], HRESULT, 'AddNewerRasters',
              ( ['in'], POINTER(ISelectionParameters), 'pSelectionParameters' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' )),
    COMMETHOD([helpstring(u"Returns the cell size levels associated with the specified raster type instance. An 'instanceID' value of -1 indicates a request for cell size levels associated with the mosaic dataset.")], HRESULT, 'GetCellSizeLevels',
              ( ['in'], c_int, 'InstanceID' ),
              ( ['retval', 'out'], POINTER(POINTER(ICellSizeLevels)), 'ppCellSizeLevels' )),
    COMMETHOD([helpstring(u"Stores the cell size levels associated with the specified raster type instance ID. An 'instanceID' value of -1 indicates that cell size levels associated with the mosaic dataset is being updated.")], HRESULT, 'UpdateCellSizeLevels',
              ( ['in'], c_int, 'InstanceID' ),
              ( ['in'], POINTER(ICellSizeLevels), 'pCellSizeLevels' )),
]
################################################################
## code template for IMosaicDatasetOperation implementation
##class IMosaicDatasetOperation_Impl(object):
##    def ReplacePaths(self, pParameters, pTrackCancel):
##        u'Replaces paths associated with the raster datasets and the data sources of selected catalog items.'
##        #return 
##
##    def CalculateCellSizeRanges(self, pParameters, pTrackCancel):
##        u'Calculates cell size ranges that control visibility of selected catalog items.'
##        #return 
##
##    def AddRasters(self, pParameters, pTrackCancel):
##        u'Adds raster datasets to the mosaic dataset.'
##        #return 
##
##    def GetCellSizeLevels(self, InstanceID):
##        u"Returns the cell size levels associated with the specified raster type instance. An 'instanceID' value of -1 indicates a request for cell size levels associated with the mosaic dataset."
##        #return ppCellSizeLevels
##
##    def BuildSeamlines(self, pParameters, pTrackCancel):
##        u'Builds seamline geometry of selected catalog items.'
##        #return 
##
##    def UpdateCellSizeLevels(self, InstanceID, pCellSizeLevels):
##        u"Stores the cell size levels associated with the specified raster type instance ID. An 'instanceID' value of -1 indicates that cell size levels associated with the mosaic dataset is being updated."
##        #return 
##
##    def AddNewerRasters(self, pSelectionParameters, pTrackCancel):
##        u'Re-crawls all data source paths associated with selected catalog items for newer data sources and adds these new items to the mosaic dataset.'
##        #return 
##
##    def ImportGeometry(self, pParameters, pTrackCancel):
##        u'Imports external geometry into the mosaic dataset.'
##        #return 
##
##    def BuildBoundary(self, pParameters, pTrackCancel):
##        u'Builds the boundary geometry of the mosaic dataset using selected catalog items.'
##        #return 
##
##    def ResetSpatialIndex(self, gridSize1, gridSize2, gridSize3):
##        u'Resets spatial index on the mosaic catalog. Creates a new spatial index if none is found.'
##        #return 
##
##    def Synchronize(self, pParameters, pTrackCancel):
##        u'Rebuilds selected catalog items and synchronizes them with the corresponding data source.'
##        #return 
##
##    def DefineNoData(self, pParameters, pTrackCancel):
##        u'Applies a mask with specified NoData values on selected catalog items.'
##        #return 
##
##    @property
##    def DefaultOverviewWorkspace(self):
##        u'The default workspace for storing overview raster dataset associated with the mosaic dataset.'
##        #return ppDefaultOverviewWorkspaceName
##
##    def DefineOverviews(self, pParameters, pTrackCancel):
##        u'Defines a new (or refreshes an existing) overview tiling scheme.'
##        #return 
##
##    def QuerySpatialIndex(self):
##        u'Returns the spatial index and grid sizes of the mosaic catalog.'
##        #return ppSpatialIndex, pGridSize1, pGridSize2, pGridSize3
##
##    def GenerateOverviews(self, pParameters, pTrackCancel):
##        u'Generates overview images corresponding to selected catalog items.'
##        #return 
##
##    def RemoveItems(self, pParameters, pTrackCancel):
##        u'Removes selected catalog items.'
##        #return 
##
##    def Search(self, pParameters, pAdditionalQuery):
##        u'Returns a search cursor with mosaic dataset items matching all specified criteria.'
##        #return ppCursor
##
##    def UpdateTimeStamp(self, pParameters, pTrackCancel):
##        u'Updates the time stamp value of selected catalog items.'
##        #return 
##
##    def ComputeDirtyArea(self, pParameters, pTrackCancel):
##        u'Computes a polygon that defines a region containing mosaic dataset items newer than a specified point in time.'
##        #return 
##
##    def BuildFootprints(self, pParameters, pTrackCancel):
##        u'Rebuilds footprint geometry of selected catalog items.'
##        #return 
##


# values for enumeration 'esriMosaicDatasetSideTable'
esriMosaicDatasetSideTableCatalog = 1
esriMosaicDatasetSideTableBoundary = 2
esriMosaicDatasetSideTableRasterType = 4
esriMosaicDatasetSideTableLevels = 8
esriMosaicDatasetSideTableLog = 16
esriMosaicDatasetSideTableOverview = 32
esriMosaicDatasetSideTableSeamline = 64
esriMosaicDatasetSideTableDodging = 128
esriMosaicDatasetSideTableStereo = 256
esriMosaicDatasetSideTableAnalysis = 512
esriMosaicDatasetSideTableStatus = 1024
esriMosaicDatasetSideTableView = 2048
esriMosaicDatasetSideTableCache = 4096
esriMosaicDatasetSideTable = c_int # enum
IMosaicDatasetOperation2._methods_ = [
    COMMETHOD([helpstring(u'Analyzes the mosaic dataset for errors.')], HRESULT, 'Analyze',
              ( ['in'], POINTER(IAnalyzeParameters), 'pAnalyzeParameters' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' )),
    COMMETHOD([helpstring(u'Creates all mosaic dataset side-tables and their relationships. Also creates all auxiliary fields in the mosaic catalog based on the collection of raster type name objects.')], HRESULT, 'PrepareSchema',
              ( ['in'], esriMosaicDatasetSideTable, 'sideTables' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'pRasterTypeNameObjects' )),
    COMMETHOD(['propget', helpstring(u'The default workspace for storing cached datasets associated with the mosaic dataset.')], HRESULT, 'DefaultCacheWorkspace',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspaceName)), 'ppDefaultCacheWorkspaceName' )),
    COMMETHOD([helpstring(u'Indicates whether the specified row is stale. An item is stale primarily when the data source referenced by the row has changed since the last time the item was created or synchronized. Other examples of stale items include those with null, zero, or a negative?!?\x08?&')], HRESULT, 'IsStale',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRow), 'pRow' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbIsStale' )),
    COMMETHOD([helpstring(u'Deletes the mosaic dataset.')], HRESULT, 'DeleteMosaicDataset',
              ( ['in'], POINTER(IDeleteMosaicDatasetParameters), 'pMDDeleteParams' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' )),
    COMMETHOD(['propget', helpstring(u'Returns a raster type object recommended as a possible default for this mosaic dataset.')], HRESULT, 'RecommendedRasterType',
              ( ['retval', 'out'], POINTER(POINTER(IRasterType)), 'ppDefaultRasterType' )),
    COMMETHOD([helpstring(u'Combines selected items into one or more new mosaic dataset items.')], HRESULT, 'MergeItems',
              ( ['in'], POINTER(IMergeItemsParameters), 'pParameters' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' )),
    COMMETHOD([helpstring(u'Creates new mosaic dataset items based on the constituent parts of a previously merged item.')], HRESULT, 'SplitMergedItems',
              ( ['in'], POINTER(ISplitMergedItemsParameters), 'pParameters' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' )),
    COMMETHOD([helpstring(u'Updates the boundary associated with the mosaic dataset to be the specified geometry.')], HRESULT, 'UpdateBoundary',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'pBoundaryGeometry' )),
    COMMETHOD([helpstring(u'Repairs a referenced mosaic dataset to point to the spcecified target mosaic dataset or raster catalog.')], HRESULT, 'RepairReferencedSideTables',
              ( ['in'], POINTER(IUnknown), 'pTargetCatalogOrMosaicDataset' )),
    COMMETHOD([helpstring(u'Repairs the managed overview paths for mosaic datasets that have been moved.')], HRESULT, 'RepairManagedOverviews',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' )),
]
################################################################
## code template for IMosaicDatasetOperation2 implementation
##class IMosaicDatasetOperation2_Impl(object):
##    def IsStale(self, pRow):
##        u'Indicates whether the specified row is stale. An item is stale primarily when the data source referenced by the row has changed since the last time the item was created or synchronized. Other examples of stale items include those with null, zero, or a negative?!?\x08?&'
##        #return pbIsStale
##
##    def PrepareSchema(self, sideTables, pRasterTypeNameObjects):
##        u'Creates all mosaic dataset side-tables and their relationships. Also creates all auxiliary fields in the mosaic catalog based on the collection of raster type name objects.'
##        #return 
##
##    @property
##    def RecommendedRasterType(self):
##        u'Returns a raster type object recommended as a possible default for this mosaic dataset.'
##        #return ppDefaultRasterType
##
##    def RepairReferencedSideTables(self, pTargetCatalogOrMosaicDataset):
##        u'Repairs a referenced mosaic dataset to point to the spcecified target mosaic dataset or raster catalog.'
##        #return 
##
##    def UpdateBoundary(self, pBoundaryGeometry):
##        u'Updates the boundary associated with the mosaic dataset to be the specified geometry.'
##        #return 
##
##    def RepairManagedOverviews(self, pTrackCancel):
##        u'Repairs the managed overview paths for mosaic datasets that have been moved.'
##        #return 
##
##    def SplitMergedItems(self, pParameters, pTrackCancel):
##        u'Creates new mosaic dataset items based on the constituent parts of a previously merged item.'
##        #return 
##
##    def DeleteMosaicDataset(self, pMDDeleteParams, pTrackCancel):
##        u'Deletes the mosaic dataset.'
##        #return 
##
##    def MergeItems(self, pParameters, pTrackCancel):
##        u'Combines selected items into one or more new mosaic dataset items.'
##        #return 
##
##    def Analyze(self, pAnalyzeParameters, pTrackCancel):
##        u'Analyzes the mosaic dataset for errors.'
##        #return 
##
##    @property
##    def DefaultCacheWorkspace(self):
##        u'The default workspace for storing cached datasets associated with the mosaic dataset.'
##        #return ppDefaultCacheWorkspaceName
##

class IUniqueStringValues(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that controls unique string values.'
    _iid_ = GUID('{B39479E3-EC24-49CE-B268-556375700B8A}')
    _idlflags_ = ['oleautomation']
IUniqueStringValues._methods_ = [
    COMMETHOD([helpstring(u'Looks up unique index of a given value.')], HRESULT, 'Lookup',
              ( ['in'], BSTR, 'Value' ),
              ( ['retval', 'out'], POINTER(c_int), 'index' )),
    COMMETHOD([helpstring(u'Adds a value if necessary and returns its value ID.')], HRESULT, 'Add',
              ( ['in'], BSTR, 'Value' ),
              ( ['in'], c_int, 'Count' ),
              ( ['retval', 'out'], POINTER(c_int), 'index' )),
    COMMETHOD([helpstring(u'Deletes a value.')], HRESULT, 'Delete',
              ( ['in'], BSTR, 'Value' )),
]
################################################################
## code template for IUniqueStringValues implementation
##class IUniqueStringValues_Impl(object):
##    def Add(self, Value, Count):
##        u'Adds a value if necessary and returns its value ID.'
##        #return index
##
##    def Lookup(self, Value):
##        u'Looks up unique index of a given value.'
##        #return index
##
##    def Delete(self, Value):
##        u'Deletes a value.'
##        #return 
##

class IConvolutionFunctionArguments(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a kernel-based convolution function.'
    _iid_ = GUID('{C99E8C28-55EE-4C9C-8E6D-B6624B925878}')
    _idlflags_ = ['oleautomation']
IConvolutionFunctionArguments._methods_ = [
    COMMETHOD(['propget', helpstring(u'The source raster object.')], HRESULT, 'Raster',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppRaster' )),
    COMMETHOD(['propputref', helpstring(u'The source raster object.')], HRESULT, 'Raster',
              ( ['in'], POINTER(IUnknown), 'ppRaster' )),
    COMMETHOD(['propput', helpstring(u'The type of the stock kernel filter.')], HRESULT, 'Type',
              ( ['in'], esriRasterFilterTypeEnum, 'pType' )),
    COMMETHOD(['propget', helpstring(u'The type of the stock kernel filter.')], HRESULT, 'Type',
              ( ['retval', 'out'], POINTER(esriRasterFilterTypeEnum), 'pType' )),
    COMMETHOD(['propput', helpstring(u'The number of columns of the kernel filter.')], HRESULT, 'Columns',
              ( ['in'], c_int, 'pColumns' )),
    COMMETHOD(['propget', helpstring(u'The number of columns of the kernel filter.')], HRESULT, 'Columns',
              ( ['retval', 'out'], POINTER(c_int), 'pColumns' )),
    COMMETHOD(['propput', helpstring(u'The number of rows of the kernel filter.')], HRESULT, 'Rows',
              ( ['in'], c_int, 'pRows' )),
    COMMETHOD(['propget', helpstring(u'The number of rows of the kernel filter.')], HRESULT, 'Rows',
              ( ['retval', 'out'], POINTER(c_int), 'pRows' )),
    COMMETHOD(['propget', helpstring(u'The convolution filter kernel values.')], HRESULT, 'Kernel',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray)), 'ppKernel' )),
    COMMETHOD(['propput', helpstring(u'The convolution filter kernel values.')], HRESULT, 'Kernel',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray), 'ppKernel' )),
]
################################################################
## code template for IConvolutionFunctionArguments implementation
##class IConvolutionFunctionArguments_Impl(object):
##    def Raster(self, ppRaster):
##        u'The source raster object.'
##        #return 
##
##    def _get(self):
##        u'The number of rows of the kernel filter.'
##        #return pRows
##    def _set(self, pRows):
##        u'The number of rows of the kernel filter.'
##    Rows = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The type of the stock kernel filter.'
##        #return pType
##    def _set(self, pType):
##        u'The type of the stock kernel filter.'
##    Type = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The number of columns of the kernel filter.'
##        #return pColumns
##    def _set(self, pColumns):
##        u'The number of columns of the kernel filter.'
##    Columns = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The convolution filter kernel values.'
##        #return ppKernel
##    def _set(self, ppKernel):
##        u'The convolution filter kernel values.'
##    Kernel = property(_get, _set, doc = _set.__doc__)
##

class RasterDatasetCrawler(CoClass):
    u'A crawler for raster datasets.'
    _reg_clsid_ = GUID('{6A5BB65A-9CF2-4AA4-9EB1-D7E8DE9A6DD6}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
RasterDatasetCrawler._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDataSourceCrawler, IFileCrawler, IRasterDatasetCrawler]

class TableCrawler(CoClass):
    u'A crawler for tables.'
    _reg_clsid_ = GUID('{8B77C68D-71BA-4707-AA03-2FB6E4A2C52B}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
TableCrawler._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDataSourceCrawler, ITableCrawler, ITableCrawler2, ITableCrawler3, IItemPaths]

IRawPixels._methods_ = [
    COMMETHOD([helpstring(u'Allocates a PixelBlock of size requested and type of this band.')], HRESULT, 'CreatePixelBlock',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IPnt), 'Size' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IPixelBlock)), 'pxls' )),
    COMMETHOD([helpstring(u'Read a block of pixels starting from tlc (top left corner).')], HRESULT, 'Read',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IPnt), 'tlc' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IPixelBlock), 'pxls' )),
    COMMETHOD([helpstring(u'Write a block of pixels starting from tlc (top left corner).')], HRESULT, 'Write',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IPnt), 'tlc' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IPixelBlock), 'pxls' )),
    COMMETHOD([helpstring(u'Gets reference to edit cache.')], HRESULT, 'AcquireCache',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'cache' )),
    COMMETHOD([helpstring(u'Restores edit cache to previous state.')], HRESULT, 'ReturnCache',
              ( ['in'], POINTER(IUnknown), 'cache' ),
              ( ['retval', 'out'], POINTER(c_int), 'num_refs' )),
    COMMETHOD(['hidden', helpstring(u'Number of outstanding cache references'), 'propget'], HRESULT, 'NumCacheRefs',
              ( ['retval', 'out'], POINTER(c_int), 'num_refs' )),
]
################################################################
## code template for IRawPixels implementation
##class IRawPixels_Impl(object):
##    def Read(self, tlc, pxls):
##        u'Read a block of pixels starting from tlc (top left corner).'
##        #return 
##
##    @property
##    def NumCacheRefs(self):
##        u'Number of outstanding cache references'
##        #return num_refs
##
##    def Write(self, tlc, pxls):
##        u'Write a block of pixels starting from tlc (top left corner).'
##        #return 
##
##    def AcquireCache(self):
##        u'Gets reference to edit cache.'
##        #return cache
##
##    def ReturnCache(self, cache):
##        u'Restores edit cache to previous state.'
##        #return num_refs
##
##    def CreatePixelBlock(self, Size):
##        u'Allocates a PixelBlock of size requested and type of this band.'
##        #return pxls
##

IMosaicOperator2._methods_ = [
    COMMETHOD([helpstring(u'Operates on two floating-point values and returns a new one.')], HRESULT, 'Operate',
              ( ['in'], c_int, 'x' ),
              ( ['in'], c_int, 'y' ),
              ( ['in'], c_double, 'v1' ),
              ( ['in', 'out'], POINTER(c_double), 'v2' )),
]
################################################################
## code template for IMosaicOperator2 implementation
##class IMosaicOperator2_Impl(object):
##    def Operate(self, x, y, v1):
##        u'Operates on two floating-point values and returns a new one.'
##        #return v2
##

IRasterAttributeTableManager._methods_ = [
    COMMETHOD([helpstring(u'Finds the associated geodataset of a given raster attribute table.')], HRESULT, 'FindGeoDataset',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable), 'pVAT' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeoDataset)), 'ppDataset' )),
]
################################################################
## code template for IRasterAttributeTableManager implementation
##class IRasterAttributeTableManager_Impl(object):
##    def FindGeoDataset(self, pVAT):
##        u'Finds the associated geodataset of a given raster attribute table.'
##        #return ppDataset
##

class IFocalStatisticsFilter2(IFocalStatisticsFilter):
    _case_insensitive_ = True
    u'Provides access to members that control a focal statistics filter.'
    _iid_ = GUID('{831BCC6A-9BCD-4285-A9EE-ADBC296D93FF}')
    _idlflags_ = ['oleautomation']
IFocalStatisticsFilter2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Option to fill only no data with pixel value.')], HRESULT, 'FillNoDataOnly',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pFillNoData' )),
    COMMETHOD(['propput', helpstring(u'Option to fill only no data with pixel value.')], HRESULT, 'FillNoDataOnly',
              ( ['in'], VARIANT_BOOL, 'pFillNoData' )),
]
################################################################
## code template for IFocalStatisticsFilter2 implementation
##class IFocalStatisticsFilter2_Impl(object):
##    def _get(self):
##        u'Option to fill only no data with pixel value.'
##        #return pFillNoData
##    def _set(self, pFillNoData):
##        u'Option to fill only no data with pixel value.'
##    FillNoDataOnly = property(_get, _set, doc = _set.__doc__)
##

IAnalyzeParameters._methods_ = [
    COMMETHOD(['propput', helpstring(u'Indicates whether the error and status tables are cleared prior to the analysis.')], HRESULT, 'ClearErrors',
              ( ['in'], VARIANT_BOOL, 'pbClearErrors' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the error and status tables are cleared prior to the analysis.')], HRESULT, 'ClearErrors',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbClearErrors' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the geometry associated with each selected mosaic dataset item is analyzed.')], HRESULT, 'AnalyzeFootprints',
              ( ['in'], VARIANT_BOOL, 'pbAnalyzeFootprints' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the geometry associated with each selected mosaic dataset item is analyzed.')], HRESULT, 'AnalyzeFootprints',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbAnalyzeFootprints' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether paths stored in the RASTER and URI columns associated with each selected mosaic dataset item are analyzed.')], HRESULT, 'AnalyzeDatasetPaths',
              ( ['in'], VARIANT_BOOL, 'pbAnalyzeDatasetPaths' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether paths stored in the RASTER and URI columns associated with each selected mosaic dataset item are analyzed.')], HRESULT, 'AnalyzeDatasetPaths',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbAnalyzeDatasetPaths' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether raster dataset associated with each selected mosaic dataset item is analyzed.')], HRESULT, 'AnalyzeDatasets',
              ( ['in'], VARIANT_BOOL, 'pbAnalyzeDatasets' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether raster dataset associated with each selected mosaic dataset item is analyzed.')], HRESULT, 'AnalyzeDatasets',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbAnalyzeDatasets' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether each raster function associated with each selected mosaic dataset item is analyzed.')], HRESULT, 'AnalyzeFunctions',
              ( ['in'], VARIANT_BOOL, 'pbAnalyzeFunctions' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether each raster function associated with each selected mosaic dataset item is analyzed.')], HRESULT, 'AnalyzeFunctions',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbAnalyzeFunctions' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the visibility of each selected mosaic dataset item is analyzed.')], HRESULT, 'AnalyzeVisibility',
              ( ['in'], VARIANT_BOOL, 'pbAnalyzeVisibility' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the visibility of each selected mosaic dataset item is analyzed.')], HRESULT, 'AnalyzeVisibility',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbAnalyzeVisibility' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether statistics on selected mosaic dataset item are collected.')], HRESULT, 'CollectStatistics',
              ( ['in'], VARIANT_BOOL, 'pbCollectStatistics' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether statistics on selected mosaic dataset item are collected.')], HRESULT, 'CollectStatistics',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbCollectStatistics' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether performance of selected mosaic dataset item and of the mosaic dataset as a whole is analyzed.')], HRESULT, 'AnalyzePerformance',
              ( ['in'], VARIANT_BOOL, 'pbAnalyzePerformance' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether performance of selected mosaic dataset item and of the mosaic dataset as a whole is analyzed.')], HRESULT, 'AnalyzePerformance',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbAnalyzePerformance' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether selected mosaic dataset item are analyzed for being stale.')], HRESULT, 'AnalyzeStaleItems',
              ( ['in'], VARIANT_BOOL, 'pbAnalyzeStaleItems' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether selected mosaic dataset item are analyzed for being stale.')], HRESULT, 'AnalyzeStaleItems',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbAnalyzeStaleItems' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether raster statistics associated with selected mosaic dataset items are analyzed.')], HRESULT, 'AnalyzeStatistics',
              ( ['in'], VARIANT_BOOL, 'pbAnalyzeStatistics' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether raster statistics associated with selected mosaic dataset items are analyzed.')], HRESULT, 'AnalyzeStatistics',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbAnalyzeStatistics' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether raster pyramids associated with selected mosaic dataset items are analyzed.')], HRESULT, 'AnalyzePyramids',
              ( ['in'], VARIANT_BOOL, 'pbAnalyzePyramids' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether raster pyramids associated with selected mosaic dataset items are analyzed.')], HRESULT, 'AnalyzePyramids',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbAnalyzePyramids' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether raster key properties associated with selected mosaic dataset items are analyzed.')], HRESULT, 'AnalyzeKeyProperties',
              ( ['in'], VARIANT_BOOL, 'pbAnalyzeKeyProperties' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether raster key properties associated with selected mosaic dataset items are analyzed.')], HRESULT, 'AnalyzeKeyProperties',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbAnalyzeKeyProperties' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the validity of data source referenced by the selected selected mosaic dataset items is analyzed.')], HRESULT, 'AnalyzeDataSourceValidity',
              ( ['in'], VARIANT_BOOL, 'pbAnalyzeDataSourceValidity' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the validity of data source referenced by the selected selected mosaic dataset items is analyzed.')], HRESULT, 'AnalyzeDataSourceValidity',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbAnalyzeDataSourceValidity' )),
]
################################################################
## code template for IAnalyzeParameters implementation
##class IAnalyzeParameters_Impl(object):
##    def _get(self):
##        u'Indicates whether the validity of data source referenced by the selected selected mosaic dataset items is analyzed.'
##        #return pbAnalyzeDataSourceValidity
##    def _set(self, pbAnalyzeDataSourceValidity):
##        u'Indicates whether the validity of data source referenced by the selected selected mosaic dataset items is analyzed.'
##    AnalyzeDataSourceValidity = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether the error and status tables are cleared prior to the analysis.'
##        #return pbClearErrors
##    def _set(self, pbClearErrors):
##        u'Indicates whether the error and status tables are cleared prior to the analysis.'
##    ClearErrors = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether paths stored in the RASTER and URI columns associated with each selected mosaic dataset item are analyzed.'
##        #return pbAnalyzeDatasetPaths
##    def _set(self, pbAnalyzeDatasetPaths):
##        u'Indicates whether paths stored in the RASTER and URI columns associated with each selected mosaic dataset item are analyzed.'
##    AnalyzeDatasetPaths = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether raster pyramids associated with selected mosaic dataset items are analyzed.'
##        #return pbAnalyzePyramids
##    def _set(self, pbAnalyzePyramids):
##        u'Indicates whether raster pyramids associated with selected mosaic dataset items are analyzed.'
##    AnalyzePyramids = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether raster statistics associated with selected mosaic dataset items are analyzed.'
##        #return pbAnalyzeStatistics
##    def _set(self, pbAnalyzeStatistics):
##        u'Indicates whether raster statistics associated with selected mosaic dataset items are analyzed.'
##    AnalyzeStatistics = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether the geometry associated with each selected mosaic dataset item is analyzed.'
##        #return pbAnalyzeFootprints
##    def _set(self, pbAnalyzeFootprints):
##        u'Indicates whether the geometry associated with each selected mosaic dataset item is analyzed.'
##    AnalyzeFootprints = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether each raster function associated with each selected mosaic dataset item is analyzed.'
##        #return pbAnalyzeFunctions
##    def _set(self, pbAnalyzeFunctions):
##        u'Indicates whether each raster function associated with each selected mosaic dataset item is analyzed.'
##    AnalyzeFunctions = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether selected mosaic dataset item are analyzed for being stale.'
##        #return pbAnalyzeStaleItems
##    def _set(self, pbAnalyzeStaleItems):
##        u'Indicates whether selected mosaic dataset item are analyzed for being stale.'
##    AnalyzeStaleItems = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether performance of selected mosaic dataset item and of the mosaic dataset as a whole is analyzed.'
##        #return pbAnalyzePerformance
##    def _set(self, pbAnalyzePerformance):
##        u'Indicates whether performance of selected mosaic dataset item and of the mosaic dataset as a whole is analyzed.'
##    AnalyzePerformance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether statistics on selected mosaic dataset item are collected.'
##        #return pbCollectStatistics
##    def _set(self, pbCollectStatistics):
##        u'Indicates whether statistics on selected mosaic dataset item are collected.'
##    CollectStatistics = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether raster dataset associated with each selected mosaic dataset item is analyzed.'
##        #return pbAnalyzeDatasets
##    def _set(self, pbAnalyzeDatasets):
##        u'Indicates whether raster dataset associated with each selected mosaic dataset item is analyzed.'
##    AnalyzeDatasets = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether the visibility of each selected mosaic dataset item is analyzed.'
##        #return pbAnalyzeVisibility
##    def _set(self, pbAnalyzeVisibility):
##        u'Indicates whether the visibility of each selected mosaic dataset item is analyzed.'
##    AnalyzeVisibility = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether raster key properties associated with selected mosaic dataset items are analyzed.'
##        #return pbAnalyzeKeyProperties
##    def _set(self, pbAnalyzeKeyProperties):
##        u'Indicates whether raster key properties associated with selected mosaic dataset items are analyzed.'
##    AnalyzeKeyProperties = property(_get, _set, doc = _set.__doc__)
##

class HillshadeFunction(CoClass):
    u'The Hillshade function Class.'
    _reg_clsid_ = GUID('{77B291D1-4581-4B4F-A802-791DE874BC89}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
HillshadeFunction._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunction, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class IUniqueStringValues2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that controls unique string values.'
    _iid_ = GUID('{066DD15A-3646-4C71-BEDF-3B3C9DCB1E4A}')
    _idlflags_ = ['oleautomation']
IUniqueStringValues2._methods_ = [
    COMMETHOD([helpstring(u'Adds a value if necessary and returns its value ID.')], HRESULT, 'Add',
              ( ['in'], BSTR, 'Value' ),
              ( ['in'], c_double, 'Count' ),
              ( ['retval', 'out'], POINTER(c_int), 'index' )),
]
################################################################
## code template for IUniqueStringValues2 implementation
##class IUniqueStringValues2_Impl(object):
##    def Add(self, Value, Count):
##        u'Adds a value if necessary and returns its value ID.'
##        #return index
##

ITableBuilder._methods_ = [
    COMMETHOD(['propput', helpstring(u'The name of the field that contains a friendly name for an item.')], HRESULT, 'NameField',
              ( ['in'], BSTR, 'pNameField' )),
    COMMETHOD(['propget', helpstring(u'The name of the field that contains a friendly name for an item.')], HRESULT, 'NameField',
              ( ['retval', 'out'], POINTER(BSTR), 'pNameField' )),
    COMMETHOD(['propput', helpstring(u'The name of the field that contains either a path to a raster dataset or stores a raster value object.')], HRESULT, 'RasterField',
              ( ['in'], BSTR, 'pRasterField' )),
    COMMETHOD(['propget', helpstring(u'The name of the field that contains either a path to a raster dataset or stores a raster value object.')], HRESULT, 'RasterField',
              ( ['retval', 'out'], POINTER(BSTR), 'pRasterField' )),
    COMMETHOD(['propput', helpstring(u'The name of the field that contains values that identify groups of related items.')], HRESULT, 'GroupField',
              ( ['in'], BSTR, 'pGroupField' )),
    COMMETHOD(['propget', helpstring(u'The name of the field that contains values that identify groups of related items.')], HRESULT, 'GroupField',
              ( ['retval', 'out'], POINTER(BSTR), 'pGroupField' )),
    COMMETHOD(['propput', helpstring(u'The name of the field that provides an item with a tag that unique identifies the item within a group.')], HRESULT, 'TagField',
              ( ['in'], BSTR, 'pTagField' )),
    COMMETHOD(['propget', helpstring(u'The name of the field that provides an item with a tag that unique identifies the item within a group.')], HRESULT, 'TagField',
              ( ['retval', 'out'], POINTER(BSTR), 'pTagField' )),
]
################################################################
## code template for ITableBuilder implementation
##class ITableBuilder_Impl(object):
##    def _get(self):
##        u'The name of the field that provides an item with a tag that unique identifies the item within a group.'
##        #return pTagField
##    def _set(self, pTagField):
##        u'The name of the field that provides an item with a tag that unique identifies the item within a group.'
##    TagField = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The name of the field that contains either a path to a raster dataset or stores a raster value object.'
##        #return pRasterField
##    def _set(self, pRasterField):
##        u'The name of the field that contains either a path to a raster dataset or stores a raster value object.'
##    RasterField = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The name of the field that contains a friendly name for an item.'
##        #return pNameField
##    def _set(self, pNameField):
##        u'The name of the field that contains a friendly name for an item.'
##    NameField = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The name of the field that contains values that identify groups of related items.'
##        #return pGroupField
##    def _set(self, pGroupField):
##        u'The name of the field that contains values that identify groups of related items.'
##    GroupField = property(_get, _set, doc = _set.__doc__)
##

IMatchATBuilder._methods_ = [
    COMMETHOD(['propput', helpstring(u'Path to camera file.')], HRESULT, 'CameraFile',
              ( ['in'], BSTR, 'ppCamFilePath' )),
    COMMETHOD(['propget', helpstring(u'Path to camera file.')], HRESULT, 'CameraFile',
              ( ['retval', 'out'], POINTER(BSTR), 'ppCamFilePath' )),
]
################################################################
## code template for IMatchATBuilder implementation
##class IMatchATBuilder_Impl(object):
##    def _get(self):
##        u'Path to camera file.'
##        #return ppCamFilePath
##    def _set(self, ppCamFilePath):
##        u'Path to camera file.'
##    CameraFile = property(_get, _set, doc = _set.__doc__)
##

class RapidEyeBuilder(CoClass):
    u'A raster builder for RapidEye files'
    _reg_clsid_ = GUID('{DF477DC1-4AD8-4E27-9EA1-2B971536AC36}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
RapidEyeBuilder._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterBuilder2, IRasterBuilderInit]

class FocalStatisticsFilter(CoClass):
    u'A class for focal statistics filter.'
    _reg_clsid_ = GUID('{AA224ECD-AEC2-4872-8CD2-135AFC7F5E1C}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
FocalStatisticsFilter._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IPixelFilter, IFocalStatisticsFilter, IFocalStatisticsFilter2]

class IWorldFileExport2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that export georeferencing and spatial reference.'
    _iid_ = GUID('{DE7A3592-7ADD-4929-9773-27EBA630EF35}')
    _idlflags_ = ['oleautomation']
IWorldFileExport2._methods_ = [
    COMMETHOD([helpstring(u'Create a binary AUX file containing georeferencing and spatial reference.')], HRESULT, 'WriteBinaryAuxFile'),
]
################################################################
## code template for IWorldFileExport2 implementation
##class IWorldFileExport2_Impl(object):
##    def WriteBinaryAuxFile(self):
##        u'Create a binary AUX file containing georeferencing and spatial reference.'
##        #return 
##

class INDVIFunctionArguments(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control NDVI function arguments.'
    _iid_ = GUID('{B8C15BA4-ED8C-4E85-9166-F4F149CC3170}')
    _idlflags_ = ['oleautomation']
INDVIFunctionArguments._methods_ = [
    COMMETHOD(['propget', helpstring(u'The input raster.')], HRESULT, 'Raster',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppRaster' )),
    COMMETHOD(['propputref', helpstring(u'The input raster.')], HRESULT, 'Raster',
              ( ['in'], POINTER(IUnknown), 'ppRaster' )),
    COMMETHOD(['propget', helpstring(u'The visible band id.')], HRESULT, 'VisibleBandID',
              ( ['retval', 'out'], POINTER(c_int), 'pVisibleBandID' )),
    COMMETHOD(['propput', helpstring(u'The visible band id.')], HRESULT, 'VisibleBandID',
              ( ['in'], c_int, 'pVisibleBandID' )),
    COMMETHOD(['propget', helpstring(u'The infrared band id.')], HRESULT, 'InfraredBandID',
              ( ['retval', 'out'], POINTER(c_int), 'pInfraredBandID' )),
    COMMETHOD(['propput', helpstring(u'The infrared band id.')], HRESULT, 'InfraredBandID',
              ( ['in'], c_int, 'pInfraredBandID' )),
]
################################################################
## code template for INDVIFunctionArguments implementation
##class INDVIFunctionArguments_Impl(object):
##    def Raster(self, ppRaster):
##        u'The input raster.'
##        #return 
##
##    def _get(self):
##        u'The infrared band id.'
##        #return pInfraredBandID
##    def _set(self, pInfraredBandID):
##        u'The infrared band id.'
##    InfraredBandID = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The visible band id.'
##        #return pVisibleBandID
##    def _set(self, pVisibleBandID):
##        u'The visible band id.'
##    VisibleBandID = property(_get, _set, doc = _set.__doc__)
##

class RasterFunctionTemplate(CoClass):
    u'A class for a template raster function.'
    _reg_clsid_ = GUID('{0B67BD89-4783-4A6F-BE52-143DB3660C11}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
RasterFunctionTemplate._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunction, IRasterFunctionTemplate, IRasterFunctionTemplate2, IRasterFunctionTemplate3, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class ReprojectFunction(CoClass):
    u'The Reproject function Class.'
    _reg_clsid_ = GUID('{23D7CD5B-224B-42F3-945D-13ADFBB71B9F}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
ReprojectFunction._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunction, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

IFolderSort._methods_ = [
    COMMETHOD([helpstring(u'Reorders the content of a folder.')], HRESULT, 'Sort',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray), 'pFolderContents' )),
]
################################################################
## code template for IFolderSort implementation
##class IFolderSort_Impl(object):
##    def Sort(self, pFolderContents):
##        u'Reorders the content of a folder.'
##        #return 
##

class ClipFunction(CoClass):
    u'The class for a raster clipping function.'
    _reg_clsid_ = GUID('{DFF0D3B8-FD42-4250-BE65-842828DC8E99}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
ClipFunction._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunction, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class SpeckleFilter(CoClass):
    u'A class for speckle filter.'
    _reg_clsid_ = GUID('{5FD8DD36-A4B1-484B-8EDA-B3888CB7977D}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class ISpeckleFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a speckle filter.'
    _iid_ = GUID('{CE529581-0814-4970-8D0B-3F48F760FF24}')
    _idlflags_ = ['oleautomation']
SpeckleFilter._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IPixelFilter, ISpeckleFilter]

class ConstantFunction(CoClass):
    u'The raster function of a constant value.'
    _reg_clsid_ = GUID('{1423A723-2865-4B58-98AD-01928DAF4CE8}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
ConstantFunction._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunction, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class RGB32PixelResampler(CoClass):
    u'A 32-bit RGB(A) pixel resampler class.'
    _reg_clsid_ = GUID('{FE5D7778-565C-449E-A194-1A35432CC156}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
RGB32PixelResampler._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IPixelResampler, IRGB32PixelResampler]

class IGeometricFunction(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control geometric function.'
    _iid_ = GUID('{381ACE7D-B284-4494-BC7A-0DDCFE466F24}')
    _idlflags_ = ['oleautomation']
IGeometricFunction._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if resampling will be performed.')], HRESULT, 'Resampling',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pResampling' )),
    COMMETHOD(['propput', helpstring(u'Indicates if resampling will be performed.')], HRESULT, 'Resampling',
              ( ['in'], VARIANT_BOOL, 'pResampling' )),
]
################################################################
## code template for IGeometricFunction implementation
##class IGeometricFunction_Impl(object):
##    def _get(self):
##        u'Indicates if resampling will be performed.'
##        #return pResampling
##    def _set(self, pResampling):
##        u'Indicates if resampling will be performed.'
##    Resampling = property(_get, _set, doc = _set.__doc__)
##

class BlendMosaicker(CoClass):
    u'A custom raster mosaic operator for performing blend value mosaic.'
    _reg_clsid_ = GUID('{E94B7EFB-45F9-4C1E-B9B2-AC31588733BA}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IMosaicOperator3(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control custom mosaic operators.'
    _iid_ = GUID('{7A7D028C-C5D4-450C-9460-8AD92008C235}')
    _idlflags_ = ['oleautomation']
BlendMosaicker._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMosaicOperator, IMosaicOperator2, IMosaicOperator3]

IApproximationXform._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The geodataxform to be approximated.')], HRESULT, 'GeodataXform',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeodataXform), 'ppXform' )),
    COMMETHOD(['propget', helpstring(u'The geodataxform to be approximated.')], HRESULT, 'GeodataXform',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeodataXform)), 'ppXform' )),
]
################################################################
## code template for IApproximationXform implementation
##class IApproximationXform_Impl(object):
##    @property
##    def GeodataXform(self, ppXform):
##        u'The geodataxform to be approximated.'
##        #return 
##

class ClipFunctionArguments(CoClass):
    u'The class for a raster clipping function arguments.'
    _reg_clsid_ = GUID('{F72BE5E4-FA3F-4626-95CF-4A78102F5F6E}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IClipFunctionArguments(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control raster clipping function arguments.'
    _iid_ = GUID('{6C38E640-980E-4076-9751-ABDBDB87D4B3}')
    _idlflags_ = ['oleautomation']
ClipFunctionArguments._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunctionArguments, IRasterFunctionArguments2, IClipFunctionArguments, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]


# values for enumeration 'esriTileState'
esriTileStateRegular = 0
esriTileStateResampledOnNoData = 1
esriTileStateResampledOnFailure = 2
esriTileState = c_int # enum
class IDescRow(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a descriptor table row.'
    _iid_ = GUID('{2A415FE2-F8F9-11D2-8EF2-00609770AD52}')
    _idlflags_ = ['oleautomation', 'restricted']
IDescRow._methods_ = [
    COMMETHOD(['propget', helpstring(u'Number of fields in the row.')], HRESULT, 'NumFields',
              ( ['retval', 'out'], POINTER(c_int), 'pVal' )),
    COMMETHOD(['propget', helpstring(u'The value of the ith entry in the row.')], HRESULT, 'GetValue',
              ( ['in'], c_int, 'index' ),
              ( ['retval', 'out'], POINTER(VARIANT), 'pVal' )),
    COMMETHOD(['propget', helpstring(u'The value of the ith entry in the row.')], HRESULT, 'PutValue',
              ( ['in'], c_int, 'index' ),
              ( ['in'], POINTER(VARIANT), 'pVal' )),
    COMMETHOD(['propget', helpstring(u'The index of the desired field.')], HRESULT, 'FindField',
              ( ['in'], BSTR, 'strtofind' ),
              ( ['retval', 'out'], POINTER(c_int), 'index' )),
]
################################################################
## code template for IDescRow implementation
##class IDescRow_Impl(object):
##    @property
##    def PutValue(self, index, pVal):
##        u'The value of the ith entry in the row.'
##        #return 
##
##    @property
##    def FindField(self, strtofind):
##        u'The index of the desired field.'
##        #return index
##
##    @property
##    def NumFields(self):
##        u'Number of fields in the row.'
##        #return pVal
##
##    @property
##    def GetValue(self, index):
##        u'The value of the ith entry in the row.'
##        #return pVal
##

class RasterTypeFactory(CoClass):
    u'A raster type factory object.'
    _reg_clsid_ = GUID('{8F2800F4-5842-47DF-AD1D-2077A7966BBF}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IRasterTypeFactory2(IRasterTypeFactory):
    _case_insensitive_ = True
    u'Provides access to members that control a raster type factory.'
    _iid_ = GUID('{DB9BE81C-0BB0-4661-A2B4-66B7627421BA}')
    _idlflags_ = ['oleautomation']
RasterTypeFactory._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterTypeFactory2]

class IConstantFunctionArguments2(IConstantFunctionArguments):
    _case_insensitive_ = True
    u'Provides access to members that control constant function arguments.'
    _iid_ = GUID('{4738FA2C-1E23-4920-9859-6A86808350DB}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'esriRasterPaintMethod'
esriRasterPaintConstantColor = 0
esriRasterPaintCheckerboard = 1
esriRasterPaintMethod = c_int # enum
IConstantFunctionArguments2._methods_ = [
    COMMETHOD(['propget', helpstring(u'The current minimum color value used for checkerboard pattern.')], HRESULT, 'MinColor',
              ( ['retval', 'out'], POINTER(VARIANT), 'pMinValue' )),
    COMMETHOD(['propput', helpstring(u'The current minimum color value used for checkerboard pattern.')], HRESULT, 'MinColor',
              ( ['in'], VARIANT, 'pMinValue' )),
    COMMETHOD(['propget', helpstring(u'The current maximum color value used for checkerboard pattern.')], HRESULT, 'MaxColor',
              ( ['retval', 'out'], POINTER(VARIANT), 'pMaxValue' )),
    COMMETHOD(['propput', helpstring(u'The current maximum color value used for checkerboard pattern.')], HRESULT, 'MaxColor',
              ( ['in'], VARIANT, 'pMaxValue' )),
    COMMETHOD(['propget', helpstring(u'Defines how the raster is painted.')], HRESULT, 'Method',
              ( ['retval', 'out'], POINTER(esriRasterPaintMethod), 'pMethod' )),
    COMMETHOD(['propput', helpstring(u'Defines how the raster is painted.')], HRESULT, 'Method',
              ( ['in'], esriRasterPaintMethod, 'pMethod' )),
]
################################################################
## code template for IConstantFunctionArguments2 implementation
##class IConstantFunctionArguments2_Impl(object):
##    def _get(self):
##        u'The current minimum color value used for checkerboard pattern.'
##        #return pMinValue
##    def _set(self, pMinValue):
##        u'The current minimum color value used for checkerboard pattern.'
##    MinColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The current maximum color value used for checkerboard pattern.'
##        #return pMaxValue
##    def _set(self, pMaxValue):
##        u'The current maximum color value used for checkerboard pattern.'
##    MaxColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Defines how the raster is painted.'
##        #return pMethod
##    def _set(self, pMethod):
##        u'Defines how the raster is painted.'
##    Method = property(_get, _set, doc = _set.__doc__)
##

IItemTemplateArray._methods_ = [
    COMMETHOD(['propget', helpstring(u'The property count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'Returns the item template at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'index' ),
              ( ['retval', 'out'], POINTER(POINTER(IItemTemplate)), 'ppItemTemplate' )),
    COMMETHOD([helpstring(u'Removes the item template at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'index' )),
    COMMETHOD([helpstring(u'Removes all item templates.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Adds an item template.')], HRESULT, 'Add',
              ( ['in'], POINTER(IItemTemplate), 'pItemTemplate' )),
    COMMETHOD([helpstring(u'Adds an item template at the specified position.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'index' ),
              ( ['in'], POINTER(IItemTemplate), 'pItemTemplate' )),
]
################################################################
## code template for IItemTemplateArray implementation
##class IItemTemplateArray_Impl(object):
##    @property
##    def Count(self):
##        u'The property count.'
##        #return Count
##
##    def Insert(self, index, pItemTemplate):
##        u'Adds an item template at the specified position.'
##        #return 
##
##    def Remove(self, index):
##        u'Removes the item template at the specified position.'
##        #return 
##
##    @property
##    def Element(self, index):
##        u'Returns the item template at the specified position.'
##        #return ppItemTemplate
##
##    def RemoveAll(self):
##        u'Removes all item templates.'
##        #return 
##
##    def Add(self, pItemTemplate):
##        u'Adds an item template.'
##        #return 
##

class UniqueValues(CoClass):
    u'A raster unique value class.'
    _reg_clsid_ = GUID('{9C81F1C7-792B-467E-AC80-069E4FDF4DEF}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IUniqueValues2(IUniqueValues):
    _case_insensitive_ = True
    u'Provides access to members that controls large unique values.'
    _iid_ = GUID('{BCF576FB-5E01-4B39-B062-D5B167A2E3E5}')
    _idlflags_ = ['oleautomation']
class IUniqueMutliStringValues(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    _iid_ = GUID('{F6A0372D-21FD-4167-AC40-270C7B2CFE56}')
    _idlflags_ = ['oleautomation']
UniqueValues._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IUniqueValues, IUniqueValues2, IUniqueStringValues, IUniqueStringValues2, IUniqueMutliStringValues, IUniqueDoubleValues, IUniqueDoubleValues2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize]

class ISlopeFunctionArguments(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control slope function arguments.'
    _iid_ = GUID('{AFA7C443-CB8A-4263-8FBF-927B38EDF1B8}')
    _idlflags_ = ['oleautomation']
ISlopeFunctionArguments._methods_ = [
    COMMETHOD(['propget', helpstring(u'The input elevation model.')], HRESULT, 'DEM',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppDEM' )),
    COMMETHOD(['propputref', helpstring(u'The input elevation model.')], HRESULT, 'DEM',
              ( ['in'], POINTER(IUnknown), 'ppDEM' )),
    COMMETHOD(['propget', helpstring(u'The Z scale factor that converts z value to the unit of x and y.')], HRESULT, 'ZFactor',
              ( ['retval', 'out'], POINTER(c_double), 'pZfactor' )),
    COMMETHOD(['propput', helpstring(u'The Z scale factor that converts z value to the unit of x and y.')], HRESULT, 'ZFactor',
              ( ['in'], c_double, 'pZfactor' )),
]
################################################################
## code template for ISlopeFunctionArguments implementation
##class ISlopeFunctionArguments_Impl(object):
##    def _get(self):
##        u'The Z scale factor that converts z value to the unit of x and y.'
##        #return pZfactor
##    def _set(self, pZfactor):
##        u'The Z scale factor that converts z value to the unit of x and y.'
##    ZFactor = property(_get, _set, doc = _set.__doc__)
##
##    def DEM(self, ppDEM):
##        u'The input elevation model.'
##        #return 
##

class ConvolutionFunctionArguments(CoClass):
    u'A class for convolution raster function arguments.'
    _reg_clsid_ = GUID('{78F85973-AFD4-4DFA-9A65-246E40EA1EF9}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
ConvolutionFunctionArguments._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunctionArguments, IRasterFunctionArguments2, IConvolutionFunctionArguments, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class KompsatFileCrawler(CoClass):
    u'A crawler for KOMPSAT-2 files.'
    _reg_clsid_ = GUID('{846CDCAF-1C49-4AB5-8790-AD680AB4236D}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
KompsatFileCrawler._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDataSourceCrawler2, IFileCrawler, IFileCrawler2, IItemPaths, IItemPaths2]

class PansharpeningFunctionArguments(CoClass):
    u'A class for sharpening raster function arguments.'
    _reg_clsid_ = GUID('{09BF8DB7-1A82-4AD2-A366-AEE762487F75}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IPansharpeningFunctionArguments(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control pansharpening function arguments.'
    _iid_ = GUID('{152F5ADD-6A59-4A06-B826-A949E2CEF3DF}')
    _idlflags_ = ['oleautomation']
class IPansharpeningFunctionArguments2(IPansharpeningFunctionArguments):
    _case_insensitive_ = True
    u'Provides access to members that control pansharpening function arguments.'
    _iid_ = GUID('{CF0A1F4E-5A42-4DFB-A80F-92B6C3369E37}')
    _idlflags_ = ['oleautomation']
PansharpeningFunctionArguments._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunctionArguments, IPansharpeningFunctionArguments, IPansharpeningFunctionArguments2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class NoDataFilter(CoClass):
    u'A class for NoData conversion filter.'
    _reg_clsid_ = GUID('{57E02DB1-85BD-454A-ABB9-D16A7F8AE1D2}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
NoDataFilter._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IPixelFilter, INoDataFilter]

class RenderedRasterFunction(CoClass):
    u'A class for a rendered raster function.'
    _reg_clsid_ = GUID('{EED089C5-98F5-496D-903C-CE3F2A1956DC}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
RenderedRasterFunction._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunction, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class AspectFunction(CoClass):
    u'The Aspect function.'
    _reg_clsid_ = GUID('{D8730557-5A60-4B99-9E63-43F56CC1259A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
AspectFunction._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunction, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class ISeamlineTaskInfo2(ISeamlineTaskInfo):
    _case_insensitive_ = True
    u'Provides access to members that control information defining a seamline task.'
    _iid_ = GUID('{FA85970C-6C4C-43D6-800D-38CEFCF8E842}')
    _idlflags_ = ['oleautomation']
ISeamlineTaskInfo2._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The item raster for which the seamline is being computed.')], HRESULT, 'ItemRaster',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'ppItemRaster' )),
    COMMETHOD(['propget', helpstring(u'The item raster for which the seamline is being computed.')], HRESULT, 'ItemRaster',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster)), 'ppItemRaster' )),
    COMMETHOD(['propputref', helpstring(u'The mosaic raster used for computing the seamline')], HRESULT, 'MosaicRaster',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'ppMosaicRaster' )),
    COMMETHOD(['propget', helpstring(u'The mosaic raster used for computing the seamline')], HRESULT, 'MosaicRaster',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster)), 'ppMosaicRaster' )),
    COMMETHOD(['propget', helpstring(u"The unit of the value specified for the 'RequestSize' property.")], HRESULT, 'RequestSizeType',
              ( ['retval', 'out'], POINTER(esriRequestSizeType), 'pRequestSizeType' )),
    COMMETHOD(['propput', helpstring(u"The unit of the value specified for the 'RequestSize' property.")], HRESULT, 'RequestSizeType',
              ( ['in'], esriRequestSizeType, 'pRequestSizeType' )),
]
################################################################
## code template for ISeamlineTaskInfo2 implementation
##class ISeamlineTaskInfo2_Impl(object):
##    @property
##    def ItemRaster(self, ppItemRaster):
##        u'The item raster for which the seamline is being computed.'
##        #return 
##
##    @property
##    def MosaicRaster(self, ppMosaicRaster):
##        u'The mosaic raster used for computing the seamline'
##        #return 
##
##    def _get(self):
##        u"The unit of the value specified for the 'RequestSize' property."
##        #return pRequestSizeType
##    def _set(self, pRequestSizeType):
##        u"The unit of the value specified for the 'RequestSize' property."
##    RequestSizeType = property(_get, _set, doc = _set.__doc__)
##

class ISpectralConversionFunctionArguments(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control spectral conversion function arguments.'
    _iid_ = GUID('{28B79FD7-9AB2-45C5-97D5-02E2A1EED116}')
    _idlflags_ = ['oleautomation']
ISpectralConversionFunctionArguments._methods_ = [
    COMMETHOD(['propget', helpstring(u'The input raster for conversion.')], HRESULT, 'Raster',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppRaster' )),
    COMMETHOD(['propputref', helpstring(u'The input raster for conversion.')], HRESULT, 'Raster',
              ( ['in'], POINTER(IUnknown), 'ppRaster' )),
    COMMETHOD(['propget', helpstring(u'The spectral conversion matrix.')], HRESULT, 'ConversionMatrix',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray)), 'ppMatrix' )),
    COMMETHOD(['propputref', helpstring(u'The spectral conversion matrix.')], HRESULT, 'ConversionMatrix',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray), 'ppMatrix' )),
]
################################################################
## code template for ISpectralConversionFunctionArguments implementation
##class ISpectralConversionFunctionArguments_Impl(object):
##    def Raster(self, ppRaster):
##        u'The input raster for conversion.'
##        #return 
##
##    def ConversionMatrix(self, ppMatrix):
##        u'The spectral conversion matrix.'
##        #return 
##

class RasterGeometryProc(CoClass):
    u'A mechanism to perform raster geometric operations, such as flip, rotate, and merge on rasters.'
    _reg_clsid_ = GUID('{2B473C40-B18E-11D3-A650-0008C7DF88A8}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IRasterGeometryProc3(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that allow raster geometry processing.'
    _iid_ = GUID('{DED6B7B3-5158-4F28-A970-86529C5D0696}')
    _idlflags_ = ['oleautomation']
RasterGeometryProc._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterGeometryProc, IRasterGeometryProc3, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]

class CancelListener(CoClass):
    u'A raster status event listener for handling cancel events.'
    _reg_clsid_ = GUID('{2585D67E-609B-4F43-B2F2-ABBA6CB27A6F}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class ICancelListener(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a raster cancel listener.'
    _iid_ = GUID('{5AB22D9C-392D-4A9E-873A-3A67ABDAA9A7}')
    _idlflags_ = ['oleautomation']
CancelListener._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterStatusEvent2, ICancelListener]

class RasterFunctionCollection(CoClass):
    u'A class for a raster function collection.'
    _reg_clsid_ = GUID('{1F120F8F-17AA-4B8E-8CD8-6007E0DEDB80}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IRasterFunctionCollection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a raster function collection.'
    _iid_ = GUID('{3A71F515-4156-4275-AAD7-06C16F2C8F18}')
    _idlflags_ = ['oleautomation']
RasterFunctionCollection._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunction, IRasterFunctionCollection, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class RenderedRasterFunctionArguments(CoClass):
    u'A class for rendered raster function arguments.'
    _reg_clsid_ = GUID('{A6E9CA22-4C2B-4B4C-AEA5-DA37566C3130}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
RenderedRasterFunctionArguments._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunctionArguments, IRenderedRasterFunctionArguments, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class ISAIFunctionArguments(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control slope-aspect index (SAI) function arguments.'
    _iid_ = GUID('{B1B58723-1FE1-4158-8AFE-A77EC8EC8785}')
    _idlflags_ = ['oleautomation']
ISAIFunctionArguments._methods_ = [
    COMMETHOD(['propget', helpstring(u'The input elevation model.')], HRESULT, 'DEM',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppDEM' )),
    COMMETHOD(['propputref', helpstring(u'The input elevation model.')], HRESULT, 'DEM',
              ( ['in'], POINTER(IUnknown), 'ppDEM' )),
    COMMETHOD(['propget', helpstring(u'The Z scale factor that converts z value to the unit of x and y.')], HRESULT, 'ZFactor',
              ( ['retval', 'out'], POINTER(c_double), 'pZfactor' )),
    COMMETHOD(['propput', helpstring(u'The Z scale factor that converts z value to the unit of x and y.')], HRESULT, 'ZFactor',
              ( ['in'], c_double, 'pZfactor' )),
]
################################################################
## code template for ISAIFunctionArguments implementation
##class ISAIFunctionArguments_Impl(object):
##    def _get(self):
##        u'The Z scale factor that converts z value to the unit of x and y.'
##        #return pZfactor
##    def _set(self, pZfactor):
##        u'The Z scale factor that converts z value to the unit of x and y.'
##    ZFactor = property(_get, _set, doc = _set.__doc__)
##
##    def DEM(self, ppDEM):
##        u'The input elevation model.'
##        #return 
##

class ConstantFunctionArguments(CoClass):
    u'The arguments for the constant raster function.'
    _reg_clsid_ = GUID('{4036254E-3CC0-460E-98BE-8E9FB309F0A3}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
ConstantFunctionArguments._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunctionArguments, IConstantFunctionArguments, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class ISpectralConversionFunctionArguments2(ISpectralConversionFunctionArguments):
    _case_insensitive_ = True
    u'Provides access to members that control the validation of band information for the spectral conversion function.'
    _iid_ = GUID('{071550CE-88C6-4510-86F2-B074139DECC1}')
    _idlflags_ = ['oleautomation']
ISpectralConversionFunctionArguments2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates whether the output is a pseudo-color raster.')], HRESULT, 'IsPseudoColorOutput',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbIsPseudoColorOutput' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the output is a pseudo-color raster.')], HRESULT, 'IsPseudoColorOutput',
              ( [], VARIANT_BOOL, 'pbIsPseudoColorOutput' )),
]
################################################################
## code template for ISpectralConversionFunctionArguments2 implementation
##class ISpectralConversionFunctionArguments2_Impl(object):
##    def _get(self):
##        u'Indicates whether the output is a pseudo-color raster.'
##        #return pbIsPseudoColorOutput
##    def _set(self, pbIsPseudoColorOutput):
##        u'Indicates whether the output is a pseudo-color raster.'
##    IsPseudoColorOutput = property(_get, _set, doc = _set.__doc__)
##

class RasterColormapToRGBConverter(CoClass):
    u'A helper class for converting between colormap to RGB raster.'
    _reg_clsid_ = GUID('{D0A4F887-3497-45E9-925D-C417B7EB6690}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
RasterColormapToRGBConverter._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterColormapToRGBConversion]

class GeometricFunction(CoClass):
    u'A class for a raster geometric function.'
    _reg_clsid_ = GUID('{1013A267-0E0E-428F-8816-5551F450D711}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
GeometricFunction._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunction, IRasterFunction2, IGeometricFunction, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, IRasterKeyProperties]

class StretchFunctionArguments(CoClass):
    u'A class for stretch raster function arguments.'
    _reg_clsid_ = GUID('{D8261E56-178A-4A52-915B-788F9393951C}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
StretchFunctionArguments._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunctionArguments, IRasterFunctionArguments2, IStretchFunctionArguments, IStretchFunctionArguments2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

IDeleteMosaicDatasetParameters._methods_ = [
    COMMETHOD(['propput', helpstring(u'Delete overview images')], HRESULT, 'DeleteOverviewImages',
              ( ['in'], VARIANT_BOOL, 'pbDeleteOverviewImages' )),
    COMMETHOD(['propget', helpstring(u'Delete overview images')], HRESULT, 'DeleteOverviewImages',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbDeleteOverviewImages' )),
    COMMETHOD(['propput', helpstring(u'Delete item cache (for example, LAS Cache)')], HRESULT, 'DeleteItemCache',
              ( ['in'], VARIANT_BOOL, 'pbDeleteItemCache' )),
    COMMETHOD(['propget', helpstring(u'Delete item cache (for example, LAS Cache)')], HRESULT, 'DeleteItemCache',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbDeleteItemCache' )),
]
################################################################
## code template for IDeleteMosaicDatasetParameters implementation
##class IDeleteMosaicDatasetParameters_Impl(object):
##    def _get(self):
##        u'Delete item cache (for example, LAS Cache)'
##        #return pbDeleteItemCache
##    def _set(self, pbDeleteItemCache):
##        u'Delete item cache (for example, LAS Cache)'
##    DeleteItemCache = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Delete overview images'
##        #return pbDeleteOverviewImages
##    def _set(self, pbDeleteOverviewImages):
##        u'Delete overview images'
##    DeleteOverviewImages = property(_get, _set, doc = _set.__doc__)
##

class BuildFootprintsParameters(CoClass):
    u'An object that controls how footrints of items in a mosaic dataset are computed.'
    _reg_clsid_ = GUID('{EEB74063-1AAD-4578-8131-EDE565724F61}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IBuildFootprintsByShrinkingParameters(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control parameters to the build footprints by shrinking operation.'
    _iid_ = GUID('{61988965-736B-42C2-86C8-0D989995E82F}')
    _idlflags_ = ['oleautomation']
BuildFootprintsParameters._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMosaicDatasetOperationParameters, IBuildFootprintsParameters, IBuildFootprintsParameters2, IBuildFootprintsByRadiometryParameters, IBuildFootprintsByRadiometryParameters2, IBuildFootprintsByGeometryParameters, IBuildFootprintsByShrinkingParameters, ISelectionParameters, IThreadedOperationParameters]

class IDERasterUtilities(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Raster Data Element Utilities.'
    _iid_ = GUID('{0715B5C1-F163-4458-BC1B-EFFEEAA14B70}')
    _idlflags_ = ['oleautomation']
IDERasterUtilities._methods_ = [
    COMMETHOD([helpstring(u'Assign raster dataset properties.')], HRESULT, 'AssignRasterDatasetProperties',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterDataset), 'pDataset' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataElement), 'pDataElement' )),
    COMMETHOD([helpstring(u'Assign raster band properties.')], HRESULT, 'AssignRasterBandProperties',
              ( ['in'], POINTER(IRasterBand), 'pDataset' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataElement), 'pDataElement' )),
]
################################################################
## code template for IDERasterUtilities implementation
##class IDERasterUtilities_Impl(object):
##    def AssignRasterBandProperties(self, pDataset, pDataElement):
##        u'Assign raster band properties.'
##        #return 
##
##    def AssignRasterDatasetProperties(self, pDataset, pDataElement):
##        u'Assign raster dataset properties.'
##        #return 
##

class IRasterLoader(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control data loading.'
    _iid_ = GUID('{DDAF901C-90E5-4CD5-845E-7B19CC57B629}')
    _idlflags_ = ['oleautomation']
IRasterLoader._methods_ = [
    COMMETHOD(['propget', helpstring(u'The pixel alignment tolerance.')], HRESULT, 'PixelAlignmentTolerance',
              ( ['retval', 'out'], POINTER(c_double), 'Tolerance' )),
    COMMETHOD(['propput', helpstring(u'The pixel alignment tolerance.')], HRESULT, 'PixelAlignmentTolerance',
              ( ['in'], c_double, 'Tolerance' )),
    COMMETHOD(['propget', helpstring(u'The background value to filtered.')], HRESULT, 'Background',
              ( ['retval', 'out'], POINTER(VARIANT), 'Background' )),
    COMMETHOD(['propput', helpstring(u'The background value to filtered.')], HRESULT, 'Background',
              ( ['in'], VARIANT, 'Background' )),
    COMMETHOD(['propget', helpstring(u'The foreground value for 1-Bit images.')], HRESULT, 'Foreground',
              ( ['retval', 'out'], POINTER(VARIANT), 'Foreground' )),
    COMMETHOD(['propput', helpstring(u'The foreground value for 1-Bit images.')], HRESULT, 'Foreground',
              ( ['in'], VARIANT, 'Foreground' )),
    COMMETHOD(['propget', helpstring(u'The colormap mode for loading psdeucolor raster datasets.')], HRESULT, 'MosaicColormapMode',
              ( ['retval', 'out'], POINTER(rstMosaicColormapMode), 'Mode' )),
    COMMETHOD(['propput', helpstring(u'The colormap mode for loading psdeucolor raster datasets.')], HRESULT, 'MosaicColormapMode',
              ( ['in'], rstMosaicColormapMode, 'Mode' )),
    COMMETHOD([helpstring(u'Loads (mosaics) a Raster into a RasterDataset.')], HRESULT, 'Load',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterDataset), 'pDataset' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'Raster' )),
    COMMETHOD([helpstring(u'Loads (mosaics) an array of Rasters into a RasterDataset.')], HRESULT, 'LoadRasters',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterDataset), 'pDataset' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'Rasters' )),
]
################################################################
## code template for IRasterLoader implementation
##class IRasterLoader_Impl(object):
##    def Load(self, pDataset, Raster):
##        u'Loads (mosaics) a Raster into a RasterDataset.'
##        #return 
##
##    def _get(self):
##        u'The foreground value for 1-Bit images.'
##        #return Foreground
##    def _set(self, Foreground):
##        u'The foreground value for 1-Bit images.'
##    Foreground = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The pixel alignment tolerance.'
##        #return Tolerance
##    def _set(self, Tolerance):
##        u'The pixel alignment tolerance.'
##    PixelAlignmentTolerance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The colormap mode for loading psdeucolor raster datasets.'
##        #return Mode
##    def _set(self, Mode):
##        u'The colormap mode for loading psdeucolor raster datasets.'
##    MosaicColormapMode = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The background value to filtered.'
##        #return Background
##    def _set(self, Background):
##        u'The background value to filtered.'
##    Background = property(_get, _set, doc = _set.__doc__)
##
##    def LoadRasters(self, pDataset, Rasters):
##        u'Loads (mosaics) an array of Rasters into a RasterDataset.'
##        #return 
##

class NDVIFunction(CoClass):
    u'A class for a raster NDVI function.'
    _reg_clsid_ = GUID('{1F3AC8E8-3011-4B87-8D4A-8150A81FDC58}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
NDVIFunction._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunction, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class ITrendFunctionArguments(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control trend function arguments.'
    _iid_ = GUID('{1B183727-8275-436C-9227-BAEEF6E04BFB}')
    _idlflags_ = ['oleautomation']
ITrendFunctionArguments._methods_ = [
    COMMETHOD(['propget', helpstring(u'The input raster for conversion.')], HRESULT, 'Raster',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppRaster' )),
    COMMETHOD(['propputref', helpstring(u'The input raster for conversion.')], HRESULT, 'Raster',
              ( ['in'], POINTER(IUnknown), 'ppRaster' )),
    COMMETHOD(['propget', helpstring(u'The plane trend surface parameters.')], HRESULT, 'PlaneParameters',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray)), 'ppParameters' )),
    COMMETHOD(['propputref', helpstring(u'The plane trend surface parameters.')], HRESULT, 'PlaneParameters',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray), 'ppParameters' )),
    COMMETHOD(['propget', helpstring(u'The simple curve trend surface parameters.')], HRESULT, 'CurveParameters',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray)), 'ppParameters' )),
    COMMETHOD(['propputref', helpstring(u'The simple curve trend surface parameters.')], HRESULT, 'CurveParameters',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray), 'ppParameters' )),
]
################################################################
## code template for ITrendFunctionArguments implementation
##class ITrendFunctionArguments_Impl(object):
##    def Raster(self, ppRaster):
##        u'The input raster for conversion.'
##        #return 
##
##    def CurveParameters(self, ppParameters):
##        u'The simple curve trend surface parameters.'
##        #return 
##
##    def PlaneParameters(self, ppParameters):
##        u'The plane trend surface parameters.'
##        #return 
##

class LasDatasetBuilder(CoClass):
    u'A raster builder for LAS files'
    _reg_clsid_ = GUID('{1E7B6221-2AC3-43D3-A5FB-0A986D25C99A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class ILasDatasetBuilder(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control LasDataset to raster conversion.'
    _iid_ = GUID('{7CF3433E-74BD-454A-B613-296361833ACC}')
    _idlflags_ = ['oleautomation']
LasDatasetBuilder._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterBuilderInit, ILasDatasetBuilder]

class SpectralConversionFunctionArguments(CoClass):
    u'The spectral conversion function arguments.'
    _reg_clsid_ = GUID('{F5E78815-251E-4008-9C5B-F63ABDB3799E}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
SpectralConversionFunctionArguments._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunctionArguments, ISpectralConversionFunctionArguments, ISpectralConversionFunctionArguments2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class ThresholdFunction(CoClass):
    u'A class for a binary thresholding function.'
    _reg_clsid_ = GUID('{2F5F4C61-4C87-4A13-9249-017914A6BB57}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
ThresholdFunction._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunction, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

IItemPaths2._methods_ = [
    COMMETHOD([helpstring(u'Returns all paths associated with the object.')], HRESULT, 'GetPathsEx',
              ( ['in'], POINTER(IItemPathsOptions), 'pOptions' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray)), 'ppPaths' )),
]
################################################################
## code template for IItemPaths2 implementation
##class IItemPaths2_Impl(object):
##    def GetPathsEx(self, pOptions):
##        u'Returns all paths associated with the object.'
##        #return ppPaths
##

class ClipFilter(CoClass):
    u'A class for clipping filter.'
    _reg_clsid_ = GUID('{DE8E0D02-0974-47D3-8A80-38ECB0069BE5}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
ClipFilter._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IPixelFilter, IPixelFilter2, IClipFilter, IClipFilter2]

class DownsampleFunction(CoClass):
    u'The downsample function.'
    _reg_clsid_ = GUID('{8790A923-ED71-45C4-94A7-BAC1134304C2}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
DownsampleFunction._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunction, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class RadarCalibrationFunctionArguments(CoClass):
    u'A class for radiometric calibration function arguments.'
    _reg_clsid_ = GUID('{A78DFA71-D2D3-4766-85DD-C70C17DBE6B3}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
RadarCalibrationFunctionArguments._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunctionArguments, IRadarCalibrationFunctionArguments, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

IPansharpeningFunctionArguments._methods_ = [
    COMMETHOD(['propget', helpstring(u'The multispectrum image.')], HRESULT, 'MSImage',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppMSImage' )),
    COMMETHOD(['propputref', helpstring(u'The multispectrum image.')], HRESULT, 'MSImage',
              ( ['in'], POINTER(IUnknown), 'ppMSImage' )),
    COMMETHOD(['propget', helpstring(u'The panchromatic image.')], HRESULT, 'PanImage',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppPanImage' )),
    COMMETHOD(['propputref', helpstring(u'The panchromatic image.')], HRESULT, 'PanImage',
              ( ['in'], POINTER(IUnknown), 'ppPanImage' )),
    COMMETHOD(['propget', helpstring(u'The optional infrared image.')], HRESULT, 'InfraredImage',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppInfraredImage' )),
    COMMETHOD(['propputref', helpstring(u'The optional infrared image.')], HRESULT, 'InfraredImage',
              ( ['in'], POINTER(IUnknown), 'ppInfraredImage' )),
    COMMETHOD(['propget', helpstring(u'The current pansharpening type.')], HRESULT, 'PansharpeningType',
              ( ['retval', 'out'], POINTER(esriPansharpeningType), 'pSharpeningType' )),
    COMMETHOD(['propput', helpstring(u'The current pansharpening type.')], HRESULT, 'PansharpeningType',
              ( ['in'], esriPansharpeningType, 'pSharpeningType' )),
    COMMETHOD(['propget', helpstring(u'The Red, Green, Blue, and Infrared weights contributing to panchromatic image.')], HRESULT, 'Weights',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray)), 'ppWeights' )),
    COMMETHOD(['propputref', helpstring(u'The Red, Green, Blue, and Infrared weights contributing to panchromatic image.')], HRESULT, 'Weights',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray), 'ppWeights' )),
]
################################################################
## code template for IPansharpeningFunctionArguments implementation
##class IPansharpeningFunctionArguments_Impl(object):
##    def PanImage(self, ppPanImage):
##        u'The panchromatic image.'
##        #return 
##
##    def _get(self):
##        u'The current pansharpening type.'
##        #return pSharpeningType
##    def _set(self, pSharpeningType):
##        u'The current pansharpening type.'
##    PansharpeningType = property(_get, _set, doc = _set.__doc__)
##
##    def InfraredImage(self, ppInfraredImage):
##        u'The optional infrared image.'
##        #return 
##
##    def MSImage(self, ppMSImage):
##        u'The multispectrum image.'
##        #return 
##
##    def Weights(self, ppWeights):
##        u'The Red, Green, Blue, and Infrared weights contributing to panchromatic image.'
##        #return 
##

class URIPropertiesFilter(CoClass):
    u'A URI filter that uses property names and values for filtering out incoming item URIs.'
    _reg_clsid_ = GUID('{AA3E2F92-B23B-427B-8E2A-68C0EECA4DFA}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IURIPropertiesFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a filter based on properties in an item uri.'
    _iid_ = GUID('{9556E694-EFF8-41D6-9D4A-CD7F8A490722}')
    _idlflags_ = ['oleautomation']
URIPropertiesFilter._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IItemURIFilter, IURIPropertiesFilter]

class IMosaicFunction2(IMosaicFunction):
    _case_insensitive_ = True
    u'Provides access to members that control mosaic function.'
    _iid_ = GUID('{9BEAEF50-906F-4BB9-A693-92C9A63BAABC}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'rstMosaicOperatorType'
MT_FIRST = 1
MT_LAST = 2
MT_MIN = 3
MT_MAX = 4
MT_MEAN = 5
MT_BLEND = 6
MT_SUM = 7
MT_CUSTOM = 64
rstMosaicOperatorType = c_int # enum
IMosaicFunction._methods_ = [
    COMMETHOD(['propget', helpstring(u'The definition expression on the source catalog.')], HRESULT, 'DefinitionExpression',
              ( ['retval', 'out'], POINTER(BSTR), 'pExpression' )),
    COMMETHOD(['propput', helpstring(u'The definition expression on the source catalog.')], HRESULT, 'DefinitionExpression',
              ( ['in'], BSTR, 'pExpression' )),
    COMMETHOD(['propget', helpstring(u'The definition (spatial selection) geometry on the source catalog.')], HRESULT, 'DefinitionGeometry',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry)), 'ppGeometry' )),
    COMMETHOD(['propputref', helpstring(u'The definition (spatial selection) geometry on the source catalog.')], HRESULT, 'DefinitionGeometry',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'ppGeometry' )),
    COMMETHOD(['propputref', helpstring(u'The definition selection set on the source catalog.')], HRESULT, 'DefinitionFIDs',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFIDSet), 'ppFIDs' )),
    COMMETHOD(['propget', helpstring(u'The definition selection set on the source catalog.')], HRESULT, 'DefinitionFIDs',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFIDSet)), 'ppFIDs' )),
    COMMETHOD(['propget', helpstring(u'The raster field name in the source catalog.')], HRESULT, 'RasterFieldName',
              ( ['retval', 'out'], POINTER(BSTR), 'pRasterFieldName' )),
    COMMETHOD(['propput', helpstring(u'The raster field name in the source catalog.')], HRESULT, 'RasterFieldName',
              ( ['in'], BSTR, 'pRasterFieldName' )),
    COMMETHOD(['propget', helpstring(u'The native raster cellsize field name.')], HRESULT, 'CellsizeFieldName',
              ( ['retval', 'out'], POINTER(BSTR), 'pCellsizeFieldName' )),
    COMMETHOD(['propput', helpstring(u'The native raster cellsize field name.')], HRESULT, 'CellsizeFieldName',
              ( ['in'], BSTR, 'pCellsizeFieldName' )),
    COMMETHOD(['propget', helpstring(u'The minimum cellsize field name.')], HRESULT, 'MinCellsizeFieldName',
              ( ['retval', 'out'], POINTER(BSTR), 'pMinCellsizeFieldName' )),
    COMMETHOD(['propput', helpstring(u'The minimum cellsize field name.')], HRESULT, 'MinCellsizeFieldName',
              ( ['in'], BSTR, 'pMinCellsizeFieldName' )),
    COMMETHOD(['propget', helpstring(u'The maximum cellsize field name.')], HRESULT, 'MaxCellsizeFieldName',
              ( ['retval', 'out'], POINTER(BSTR), 'pMaxCellsizeFieldName' )),
    COMMETHOD(['propput', helpstring(u'The maximum cellsize field name.')], HRESULT, 'MaxCellsizeFieldName',
              ( ['in'], BSTR, 'pMaxCellsizeFieldName' )),
    COMMETHOD(['propget', helpstring(u'The LOD field name.')], HRESULT, 'LODFieldName',
              ( ['retval', 'out'], POINTER(BSTR), 'pLODFieldName' )),
    COMMETHOD(['propput', helpstring(u'The LOD field name.')], HRESULT, 'LODFieldName',
              ( ['in'], BSTR, 'pLODFieldName' )),
    COMMETHOD(['propget', helpstring(u'The current mosaic LOD information.')], HRESULT, 'LODInfos',
              ( ['retval', 'out'], POINTER(POINTER(IMosaicLODInfos)), 'ppLODInfos' )),
    COMMETHOD(['propputref', helpstring(u'The current mosaic LOD information.')], HRESULT, 'LODInfos',
              ( ['in'], POINTER(IMosaicLODInfos), 'ppLODInfos' )),
    COMMETHOD(['propget', helpstring(u'The maximum visible cellsize.')], HRESULT, 'MaximumVisibleCellsize',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IPnt)), 'ppCellsize' )),
    COMMETHOD(['propput', helpstring(u'The maximum visible cellsize.')], HRESULT, 'MaximumVisibleCellsize',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IPnt), 'ppCellsize' )),
    COMMETHOD(['propget', helpstring(u'Indicates if to draw footprints.')], HRESULT, 'DrawFootprint',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pDraw' )),
    COMMETHOD(['propput', helpstring(u'Indicates if to draw footprints.')], HRESULT, 'DrawFootprint',
              ( ['in'], VARIANT_BOOL, 'pDraw' )),
    COMMETHOD(['propget', helpstring(u'The symbol used to draw footprints.')], HRESULT, 'FootprintSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol)), 'ppSymbol' )),
    COMMETHOD(['propputref', helpstring(u'The symbol used to draw footprints.')], HRESULT, 'FootprintSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol), 'ppSymbol' )),
    COMMETHOD(['propget', helpstring(u'The mosaic method.')], HRESULT, 'MosaicMethod',
              ( ['retval', 'out'], POINTER(esriMosaicMethod), 'pMosaicMethod' )),
    COMMETHOD(['propput', helpstring(u'The mosaic method.')], HRESULT, 'MosaicMethod',
              ( ['in'], esriMosaicMethod, 'pMosaicMethod' )),
    COMMETHOD(['propget', helpstring(u'The Order By field on the source catalog.')], HRESULT, 'OrderByFieldName',
              ( ['retval', 'out'], POINTER(BSTR), 'pName' )),
    COMMETHOD(['propput', helpstring(u'The Order By field on the source catalog.')], HRESULT, 'OrderByFieldName',
              ( ['in'], BSTR, 'pName' )),
    COMMETHOD(['propget', helpstring(u'The Order By base value.')], HRESULT, 'OrderByBaseValue',
              ( ['retval', 'out'], POINTER(VARIANT), 'pValue' )),
    COMMETHOD(['propput', helpstring(u'The Order By base value.')], HRESULT, 'OrderByBaseValue',
              ( ['in'], VARIANT, 'pValue' )),
    COMMETHOD(['propget', helpstring(u'The lock raster ID field name in the source catalog.')], HRESULT, 'LockRasterFieldName',
              ( ['retval', 'out'], POINTER(BSTR), 'pLockFieldName' )),
    COMMETHOD(['propput', helpstring(u'The lock raster ID field name in the source catalog.')], HRESULT, 'LockRasterFieldName',
              ( ['in'], BSTR, 'pLockFieldName' )),
    COMMETHOD(['propget', helpstring(u'The lock raster ID.')], HRESULT, 'LockRasterID',
              ( ['retval', 'out'], POINTER(BSTR), 'pRasterID' )),
    COMMETHOD(['propput', helpstring(u'The lock raster ID.')], HRESULT, 'LockRasterID',
              ( ['in'], BSTR, 'pRasterID' )),
    COMMETHOD(['propget', helpstring(u'The view point.')], HRESULT, 'Viewpoint',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint)), 'ppViewpoint' )),
    COMMETHOD(['propputref', helpstring(u'The view point.')], HRESULT, 'Viewpoint',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'ppViewpoint' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the ascending flag of OrderBy.')], HRESULT, 'Ascending',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pAscending' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the ascending flag of OrderBy.')], HRESULT, 'Ascending',
              ( ['in'], VARIANT_BOOL, 'pAscending' )),
    COMMETHOD(['propget', helpstring(u'The current mosaic operator type.')], HRESULT, 'MosaicOperatorType',
              ( ['retval', 'out'], POINTER(rstMosaicOperatorType), 'Type' )),
    COMMETHOD(['propput', helpstring(u'The current mosaic operator type.')], HRESULT, 'MosaicOperatorType',
              ( ['in'], rstMosaicOperatorType, 'Type' )),
    COMMETHOD(['propget', helpstring(u'The current mosaic operator.')], HRESULT, 'MosaicOperator',
              ( ['retval', 'out'], POINTER(POINTER(IMosaicOperator)), 'op' )),
    COMMETHOD(['propputref', helpstring(u'The current mosaic operator.')], HRESULT, 'MosaicOperator',
              ( ['in'], POINTER(IMosaicOperator), 'op' )),
    COMMETHOD(['propget', helpstring(u'The SQL selection where clause expression.')], HRESULT, 'WhereClause',
              ( ['retval', 'out'], POINTER(BSTR), 'pExpression' )),
    COMMETHOD(['propput', helpstring(u'The SQL selection where clause expression.')], HRESULT, 'WhereClause',
              ( ['in'], BSTR, 'pExpression' )),
    COMMETHOD(['propputref', helpstring(u'The current selection set on the source catalog.')], HRESULT, 'FIDs',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFIDSet), 'ppFIDs' )),
    COMMETHOD(['propget', helpstring(u'The current selection set on the source catalog.')], HRESULT, 'FIDs',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFIDSet)), 'ppFIDs' )),
    COMMETHOD([helpstring(u'Locks LOD at a given cellsize.')], HRESULT, 'LockCellsize',
              ( ['in'], c_double, 'CellSize' )),
    COMMETHOD([helpstring(u'Unlocks LOD from the locked cellsize.')], HRESULT, 'UnlockCellsize'),
    COMMETHOD(['propget', helpstring(u'The catalog.')], HRESULT, 'Catalog',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable)), 'ppCatalog' )),
    COMMETHOD(['propget', helpstring(u'The raster field index.')], HRESULT, 'RasterFieldIndex',
              ( ['retval', 'out'], POINTER(c_int), 'pRasterFieldIndex' )),
    COMMETHOD(['propget', helpstring(u'The minimum cellsize field index.')], HRESULT, 'MinCellsizeFieldIndex',
              ( ['retval', 'out'], POINTER(c_int), 'pMinCellsizeFieldIndex' )),
    COMMETHOD(['propget', helpstring(u'The maximum cellsize field index.')], HRESULT, 'MaxCellsizeFieldIndex',
              ( ['retval', 'out'], POINTER(c_int), 'pMaxCellsizeFieldIndex' )),
    COMMETHOD([helpstring(u'Checks if a given pixel size is visible.')], HRESULT, 'IsVisible',
              ( ['in'], c_double, 'Dx' ),
              ( ['in'], c_double, 'Dy' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pvbVisible' )),
    COMMETHOD(['propget', helpstring(u'The maximum number of rasters used per request.')], HRESULT, 'MaxMosaicImageCount',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propput', helpstring(u'The maximum number of rasters used per request.')], HRESULT, 'MaxMosaicImageCount',
              ( ['in'], c_int, 'pCount' )),
    COMMETHOD(['propget', helpstring(u'Indicates if individual images will be clipped to their footprints.')], HRESULT, 'ClipToFootprint',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pClipping' )),
    COMMETHOD(['propput', helpstring(u'Indicates if individual images will be clipped to their footprints.')], HRESULT, 'ClipToFootprint',
              ( ['in'], VARIANT_BOOL, 'pClipping' )),
    COMMETHOD(['propget', helpstring(u'Indicates if color correction needs to be applied.')], HRESULT, 'ApplyColorCorrection',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pApplyColorCorrection' )),
    COMMETHOD(['propput', helpstring(u'Indicates if color correction needs to be applied.')], HRESULT, 'ApplyColorCorrection',
              ( ['in'], VARIANT_BOOL, 'pApplyColorCorrection' )),
    COMMETHOD([helpstring(u'Constructs a query expression (WHERE clause).')], HRESULT, 'ConstructQueryExpression',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'pCellsize' ),
              ( ['retval', 'out'], POINTER(BSTR), 'pQueryExpression' )),
    COMMETHOD([helpstring(u'Searches the catalog using current mosaic rules.')], HRESULT, 'Search',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'pQueryFilter' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'pCellsize' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ICursor)), 'ppCursor' )),
]
################################################################
## code template for IMosaicFunction implementation
##class IMosaicFunction_Impl(object):
##    def _get(self):
##        u'The native raster cellsize field name.'
##        #return pCellsizeFieldName
##    def _set(self, pCellsizeFieldName):
##        u'The native raster cellsize field name.'
##    CellsizeFieldName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The raster field name in the source catalog.'
##        #return pRasterFieldName
##    def _set(self, pRasterFieldName):
##        u'The raster field name in the source catalog.'
##    RasterFieldName = property(_get, _set, doc = _set.__doc__)
##
##    def IsVisible(self, Dx, Dy):
##        u'Checks if a given pixel size is visible.'
##        #return pvbVisible
##
##    def _get(self):
##        u'Indicates if to draw footprints.'
##        #return pDraw
##    def _set(self, pDraw):
##        u'Indicates if to draw footprints.'
##    DrawFootprint = property(_get, _set, doc = _set.__doc__)
##
##    def ConstructQueryExpression(self, pCellsize):
##        u'Constructs a query expression (WHERE clause).'
##        #return pQueryExpression
##
##    def _get(self):
##        u'The maximum visible cellsize.'
##        #return ppCellsize
##    def _set(self, ppCellsize):
##        u'The maximum visible cellsize.'
##    MaximumVisibleCellsize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The current mosaic operator type.'
##        #return Type
##    def _set(self, Type):
##        u'The current mosaic operator type.'
##    MosaicOperatorType = property(_get, _set, doc = _set.__doc__)
##
##    def Viewpoint(self, ppViewpoint):
##        u'The view point.'
##        #return 
##
##    @property
##    def MaxCellsizeFieldIndex(self):
##        u'The maximum cellsize field index.'
##        #return pMaxCellsizeFieldIndex
##
##    @property
##    def DefinitionFIDs(self, ppFIDs):
##        u'The definition selection set on the source catalog.'
##        #return 
##
##    def _get(self):
##        u'Indicates whether the ascending flag of OrderBy.'
##        #return pAscending
##    def _set(self, pAscending):
##        u'Indicates whether the ascending flag of OrderBy.'
##    Ascending = property(_get, _set, doc = _set.__doc__)
##
##    def LODInfos(self, ppLODInfos):
##        u'The current mosaic LOD information.'
##        #return 
##
##    def _get(self):
##        u'The maximum cellsize field name.'
##        #return pMaxCellsizeFieldName
##    def _set(self, pMaxCellsizeFieldName):
##        u'The maximum cellsize field name.'
##    MaxCellsizeFieldName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The lock raster ID field name in the source catalog.'
##        #return pLockFieldName
##    def _set(self, pLockFieldName):
##        u'The lock raster ID field name in the source catalog.'
##    LockRasterFieldName = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def MinCellsizeFieldIndex(self):
##        u'The minimum cellsize field index.'
##        #return pMinCellsizeFieldIndex
##
##    def _get(self):
##        u'The LOD field name.'
##        #return pLODFieldName
##    def _set(self, pLODFieldName):
##        u'The LOD field name.'
##    LODFieldName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The minimum cellsize field name.'
##        #return pMinCellsizeFieldName
##    def _set(self, pMinCellsizeFieldName):
##        u'The minimum cellsize field name.'
##    MinCellsizeFieldName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if color correction needs to be applied.'
##        #return pApplyColorCorrection
##    def _set(self, pApplyColorCorrection):
##        u'Indicates if color correction needs to be applied.'
##    ApplyColorCorrection = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def FIDs(self, ppFIDs):
##        u'The current selection set on the source catalog.'
##        #return 
##
##    @property
##    def RasterFieldIndex(self):
##        u'The raster field index.'
##        #return pRasterFieldIndex
##
##    def LockCellsize(self, CellSize):
##        u'Locks LOD at a given cellsize.'
##        #return 
##
##    def _get(self):
##        u'The Order By base value.'
##        #return pValue
##    def _set(self, pValue):
##        u'The Order By base value.'
##    OrderByBaseValue = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Catalog(self):
##        u'The catalog.'
##        #return ppCatalog
##
##    def Search(self, pQueryFilter, pCellsize):
##        u'Searches the catalog using current mosaic rules.'
##        #return ppCursor
##
##    def DefinitionGeometry(self, ppGeometry):
##        u'The definition (spatial selection) geometry on the source catalog.'
##        #return 
##
##    def FootprintSymbol(self, ppSymbol):
##        u'The symbol used to draw footprints.'
##        #return 
##
##    def _get(self):
##        u'The maximum number of rasters used per request.'
##        #return pCount
##    def _set(self, pCount):
##        u'The maximum number of rasters used per request.'
##    MaxMosaicImageCount = property(_get, _set, doc = _set.__doc__)
##
##    def MosaicOperator(self, op):
##        u'The current mosaic operator.'
##        #return 
##
##    def _get(self):
##        u'The definition expression on the source catalog.'
##        #return pExpression
##    def _set(self, pExpression):
##        u'The definition expression on the source catalog.'
##    DefinitionExpression = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The Order By field on the source catalog.'
##        #return pName
##    def _set(self, pName):
##        u'The Order By field on the source catalog.'
##    OrderByFieldName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The lock raster ID.'
##        #return pRasterID
##    def _set(self, pRasterID):
##        u'The lock raster ID.'
##    LockRasterID = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The mosaic method.'
##        #return pMosaicMethod
##    def _set(self, pMosaicMethod):
##        u'The mosaic method.'
##    MosaicMethod = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The SQL selection where clause expression.'
##        #return pExpression
##    def _set(self, pExpression):
##        u'The SQL selection where clause expression.'
##    WhereClause = property(_get, _set, doc = _set.__doc__)
##
##    def UnlockCellsize(self):
##        u'Unlocks LOD from the locked cellsize.'
##        #return 
##
##    def _get(self):
##        u'Indicates if individual images will be clipped to their footprints.'
##        #return pClipping
##    def _set(self, pClipping):
##        u'Indicates if individual images will be clipped to their footprints.'
##    ClipToFootprint = property(_get, _set, doc = _set.__doc__)
##

IMosaicFunction2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if the mosaic dataset will be clipped to its boundary.')], HRESULT, 'ClipToBoundary',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pClipping' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the mosaic dataset will be clipped to its boundary.')], HRESULT, 'ClipToBoundary',
              ( ['in'], VARIANT_BOOL, 'pClipping' )),
    COMMETHOD(['propget', helpstring(u'The background raster.')], HRESULT, 'BackgroundRaster',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster)), 'ppRaster' )),
    COMMETHOD(['propputref', helpstring(u'The background raster.')], HRESULT, 'BackgroundRaster',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'ppRaster' )),
    COMMETHOD(['propget', helpstring(u'The blending width for Blend mosaic operator.')], HRESULT, 'BlendingWidth',
              ( ['retval', 'out'], POINTER(c_int), 'pWidth' )),
    COMMETHOD(['propput', helpstring(u'The blending width for Blend mosaic operator.')], HRESULT, 'BlendingWidth',
              ( ['in'], c_int, 'pWidth' )),
    COMMETHOD(['propget', helpstring(u"Indicates whether the footprint geometry associated with each raster may contain NoData pixels. Setting this property to false while clipping to fooptrint enables the system to assume that only valid pixels exist within a raster's footprint towards optimizing ?!?\x08?&")], HRESULT, 'FootprintMayContainNoData',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbFootprintMayContainNoData' )),
    COMMETHOD(['propput', helpstring(u"Indicates whether the footprint geometry associated with each raster may contain NoData pixels. Setting this property to false while clipping to fooptrint enables the system to assume that only valid pixels exist within a raster's footprint towards optimizing ?!?\x08?&")], HRESULT, 'FootprintMayContainNoData',
              ( ['in'], VARIANT_BOOL, 'pbFootprintMayContainNoData' )),
]
################################################################
## code template for IMosaicFunction2 implementation
##class IMosaicFunction2_Impl(object):
##    def _get(self):
##        u'The blending width for Blend mosaic operator.'
##        #return pWidth
##    def _set(self, pWidth):
##        u'The blending width for Blend mosaic operator.'
##    BlendingWidth = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the mosaic dataset will be clipped to its boundary.'
##        #return pClipping
##    def _set(self, pClipping):
##        u'Indicates if the mosaic dataset will be clipped to its boundary.'
##    ClipToBoundary = property(_get, _set, doc = _set.__doc__)
##
##    def BackgroundRaster(self, ppRaster):
##        u'The background raster.'
##        #return 
##
##    def _get(self):
##        u"Indicates whether the footprint geometry associated with each raster may contain NoData pixels. Setting this property to false while clipping to fooptrint enables the system to assume that only valid pixels exist within a raster's footprint towards optimizing ?!?\x08?&"
##        #return pbFootprintMayContainNoData
##    def _set(self, pbFootprintMayContainNoData):
##        u"Indicates whether the footprint geometry associated with each raster may contain NoData pixels. Setting this property to false while clipping to fooptrint enables the system to assume that only valid pixels exist within a raster's footprint towards optimizing ?!?\x08?&"
##    FootprintMayContainNoData = property(_get, _set, doc = _set.__doc__)
##

class ColormapToRGBFunction(CoClass):
    u'A class for a raster Colormap-To-RGB conversion function.'
    _reg_clsid_ = GUID('{6A8D5AAE-8C8E-4B67-89B2-25E1E393557F}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
ColormapToRGBFunction._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunction, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class CustomMensuration(CoClass):
    u'Implenments interface IMensuration to provide custom basic mensuration service utilizing sensor models that are compliant with the Community Sensor Model (CSM) specification.'
    _reg_clsid_ = GUID('{DE6A4175-0B89-43C8-8A92-F3C943AF1947}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
CustomMensuration._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMensuration, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]

class MosaicFunction(CoClass):
    u'A class for a raster mosaic function.'
    _reg_clsid_ = GUID('{7406B10E-6009-4366-85FF-5A067B54B2AD}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IMosaicFunction3(IMosaicFunction2):
    _case_insensitive_ = True
    u'Provides access to members that control mosaic function.'
    _iid_ = GUID('{9A90A3D9-9ED9-4DF3-87B1-F1F563928C98}')
    _idlflags_ = ['oleautomation']
MosaicFunction._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunction, IMosaicFunction, IMosaicFunction2, IMosaicFunction3, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class DownsampleFunctionArguments(CoClass):
    u'A class for downsample raster function arguments.'
    _reg_clsid_ = GUID('{1CF1F1E0-C1E0-4F7B-ACA7-4F53522310FA}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
DownsampleFunctionArguments._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunctionArguments, IDownsampleFunctionArguments, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class IBuilderItem2(IBuilderItem):
    _case_insensitive_ = True
    u'Provides access to members that control a builder item.'
    _iid_ = GUID('{607661EC-F105-4641-BE8B-4F1CB0D6F48C}')
    _idlflags_ = ['oleautomation']
IBuilderItem2._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The raster dataset name associated with builder item.')], HRESULT, 'DatasetName',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName), 'ppDatasetName' )),
    COMMETHOD(['propget', helpstring(u'The raster dataset name associated with builder item.')], HRESULT, 'DatasetName',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName)), 'ppDatasetName' )),
    COMMETHOD(['propputref', helpstring(u'Variables supporting seamline operation.')], HRESULT, 'SeamlineProperties',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet), 'ppPropertySet' )),
    COMMETHOD(['propget', helpstring(u'Variables supporting seamline operation.')], HRESULT, 'SeamlineProperties',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet)), 'ppPropertySet' )),
    COMMETHOD(['propputref', helpstring(u'Variables supporting color correction operation.')], HRESULT, 'ColorCorrectionProperties',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet), 'ppPropertySet' )),
    COMMETHOD(['propget', helpstring(u'Variables supporting color correction operation.')], HRESULT, 'ColorCorrectionProperties',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet)), 'ppPropertySet' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the builder item has a valid thumbnail.')], HRESULT, 'HasThumbnail',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbHasThumbnail' )),
    COMMETHOD(['propput', helpstring(u'The thumbnail associated with the builder item.')], HRESULT, 'Thumbnail',
              ( ['in'], VARIANT, 'pvtThumbnailBlob' )),
    COMMETHOD(['propget', helpstring(u'The thumbnail associated with the builder item.')], HRESULT, 'Thumbnail',
              ( ['retval', 'out'], POINTER(VARIANT), 'pvtThumbnailBlob' )),
]
################################################################
## code template for IBuilderItem2 implementation
##class IBuilderItem2_Impl(object):
##    @property
##    def HasThumbnail(self):
##        u'Indicates whether the builder item has a valid thumbnail.'
##        #return pbHasThumbnail
##
##    @property
##    def SeamlineProperties(self, ppPropertySet):
##        u'Variables supporting seamline operation.'
##        #return 
##
##    @property
##    def DatasetName(self, ppDatasetName):
##        u'The raster dataset name associated with builder item.'
##        #return 
##
##    @property
##    def ColorCorrectionProperties(self, ppPropertySet):
##        u'Variables supporting color correction operation.'
##        #return 
##
##    def _get(self):
##        u'The thumbnail associated with the builder item.'
##        #return pvtThumbnailBlob
##    def _set(self, pvtThumbnailBlob):
##        u'The thumbnail associated with the builder item.'
##    Thumbnail = property(_get, _set, doc = _set.__doc__)
##

class IDescTable(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a descriptor table.'
    _iid_ = GUID('{D777C1A0-F41A-11D2-80A7-00500462E955}')
    _idlflags_ = ['oleautomation', 'restricted']
class IDescColumn(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a descriptor table column.'
    _iid_ = GUID('{2A415FE1-F8F9-11D2-8EF2-00609770AD52}')
    _idlflags_ = ['oleautomation', 'restricted']
IDescTable._methods_ = [
    COMMETHOD(['propget', helpstring(u'Number of fields in the descriptor table.')], HRESULT, 'NumFields',
              ( ['retval', 'out'], POINTER(c_int), 'pVal' )),
    COMMETHOD([helpstring(u'Provides a description of the field.')], HRESULT, 'FieldDesc',
              ( ['in'], c_int, 'index' ),
              ( ['out'], POINTER(BSTR), 'Name' ),
              ( ['out'], POINTER(c_short), 'Type' ),
              ( ['out'], POINTER(c_int), 'Width' )),
    COMMETHOD(['propget', helpstring(u'Pixel to Row tranlator.')], HRESULT, 'BinFunction',
              ( ['retval', 'out'], POINTER(POINTER(IBinFunction)), 'pVal' )),
    COMMETHOD([helpstring(u'Converts pixel values to rows in the descriptor table.')], HRESULT, 'ValueToIndex',
              ( ['in'], c_double, 'pixval' ),
              ( ['retval', 'out'], POINTER(c_int), 'row_index' )),
    COMMETHOD([helpstring(u'Returns a row from the the descriptor table.')], HRESULT, 'ReadRow',
              ( ['in'], c_int, 'row_index' ),
              ( ['retval', 'out'], POINTER(POINTER(IDescRow)), 'Row' )),
    COMMETHOD([helpstring(u'Writes row of data to the descriptor table.')], HRESULT, 'WriteRow',
              ( ['in'], c_int, 'row_index' ),
              ( ['in'], POINTER(IDescRow), 'Row' )),
    COMMETHOD([helpstring(u'Reads a column from the descriptor table.')], HRESULT, 'ReadColumn',
              ( ['in'], c_int, 'col_index' ),
              ( ['retval', 'out'], POINTER(POINTER(IDescColumn)), 'col' )),
    COMMETHOD([helpstring(u'Writes column to the descriptor table.')], HRESULT, 'WriteColumn',
              ( ['in'], c_int, 'col_index' ),
              ( ['retval', 'out'], POINTER(POINTER(IDescColumn)), 'col' )),
    COMMETHOD([helpstring(u'Finds a field in the descriptor table.')], HRESULT, 'FindField',
              ( ['in'], BSTR, 'strtofind' ),
              ( ['retval', 'out'], POINTER(c_int), 'pVal' )),
    COMMETHOD([helpstring(u'Adds a column to the descriptor table.')], HRESULT, 'AddColumn',
              ( ['in'], c_int, 'col_index' ),
              ( ['in'], POINTER(IDescColumn), 'col' )),
    COMMETHOD([helpstring(u'Deletes a column from the descriptor table.')], HRESULT, 'DeleteColumn',
              ( ['in'], c_int, 'col_index' )),
]
################################################################
## code template for IDescTable implementation
##class IDescTable_Impl(object):
##    def WriteColumn(self, col_index):
##        u'Writes column to the descriptor table.'
##        #return col
##
##    @property
##    def NumFields(self):
##        u'Number of fields in the descriptor table.'
##        #return pVal
##
##    def WriteRow(self, row_index, Row):
##        u'Writes row of data to the descriptor table.'
##        #return 
##
##    def DeleteColumn(self, col_index):
##        u'Deletes a column from the descriptor table.'
##        #return 
##
##    def FindField(self, strtofind):
##        u'Finds a field in the descriptor table.'
##        #return pVal
##
##    def ReadColumn(self, col_index):
##        u'Reads a column from the descriptor table.'
##        #return col
##
##    @property
##    def BinFunction(self):
##        u'Pixel to Row tranlator.'
##        #return pVal
##
##    def FieldDesc(self, index):
##        u'Provides a description of the field.'
##        #return Name, Type, Width
##
##    def ReadRow(self, row_index):
##        u'Returns a row from the the descriptor table.'
##        #return Row
##
##    def ValueToIndex(self, pixval):
##        u'Converts pixel values to rows in the descriptor table.'
##        #return row_index
##
##    def AddColumn(self, col_index, col):
##        u'Adds a column to the descriptor table.'
##        #return 
##

IItemURI2._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The item uri properties.')], HRESULT, 'Properties',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet), 'ppBuilderPoperties' )),
    COMMETHOD(['propget', helpstring(u'The item uri properties.')], HRESULT, 'Properties',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet)), 'ppBuilderPoperties' )),
]
################################################################
## code template for IItemURI2 implementation
##class IItemURI2_Impl(object):
##    @property
##    def Properties(self, ppBuilderPoperties):
##        u'The item uri properties.'
##        #return 
##

IRasterCatalogLoader._methods_ = [
    COMMETHOD(['propget', helpstring(u'The GeoDatabase connection properties.')], HRESULT, 'ConnectionProperties',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet)), 'ppConnectionProperties' )),
    COMMETHOD(['propputref', helpstring(u'The GeoDatabase connection properties.')], HRESULT, 'ConnectionProperties',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet), 'ppConnectionProperties' )),
    COMMETHOD(['propget', helpstring(u'The GeoDatabase workspace.')], HRESULT, 'Workspace',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspace)), 'pWorkspace' )),
    COMMETHOD(['propputref', helpstring(u'The GeoDatabase workspace.')], HRESULT, 'Workspace',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspace), 'pWorkspace' )),
    COMMETHOD(['propget', helpstring(u'The background value to filtered.')], HRESULT, 'Background',
              ( ['retval', 'out'], POINTER(VARIANT), 'Background' )),
    COMMETHOD(['propput', helpstring(u'The background value to filtered.')], HRESULT, 'Background',
              ( ['in'], VARIANT, 'Background' )),
    COMMETHOD(['propget', helpstring(u'The foreground value for 1-Bit images.')], HRESULT, 'Foreground',
              ( ['retval', 'out'], POINTER(VARIANT), 'Foreground' )),
    COMMETHOD(['propput', helpstring(u'The foreground value for 1-Bit images.')], HRESULT, 'Foreground',
              ( ['in'], VARIANT, 'Foreground' )),
    COMMETHOD(['propget', helpstring(u'The GeoDatabase storage definition.')], HRESULT, 'StorageDef',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterStorageDef)), 'ppStorageDef' )),
    COMMETHOD(['propputref', helpstring(u'The GeoDatabase storage definition.')], HRESULT, 'StorageDef',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterStorageDef), 'ppStorageDef' )),
    COMMETHOD(['propget', helpstring(u'Indicates if datasets are to be transformed on loading.')], HRESULT, 'Transformed',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'xformed' )),
    COMMETHOD(['propput', helpstring(u'Indicates if datasets are to be transformed on loading.')], HRESULT, 'Transformed',
              ( ['in'], VARIANT_BOOL, 'xformed' )),
    COMMETHOD(['propget', helpstring(u'Indicates if datasets are to be reprojected on loading.')], HRESULT, 'Projected',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Projected' )),
    COMMETHOD(['propput', helpstring(u'Indicates if datasets are to be reprojected on loading.')], HRESULT, 'Projected',
              ( ['in'], VARIANT_BOOL, 'Projected' )),
    COMMETHOD(['propget', helpstring(u'Indicates if statistics should be built on loading.')], HRESULT, 'EnableBuildStatistics',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pEnableBuildStats' )),
    COMMETHOD(['propput', helpstring(u'Indicates if statistics should be built on loading.')], HRESULT, 'EnableBuildStatistics',
              ( ['in'], VARIANT_BOOL, 'pEnableBuildStats' )),
    COMMETHOD(['propget', helpstring(u'The X skip factor for statistics.')], HRESULT, 'XSkipFactor',
              ( ['retval', 'out'], POINTER(c_int), 'XSkipFactor' )),
    COMMETHOD(['propput', helpstring(u'The X skip factor for statistics.')], HRESULT, 'XSkipFactor',
              ( ['in'], c_int, 'XSkipFactor' )),
    COMMETHOD(['propget', helpstring(u'The Y skip factor for statistics.')], HRESULT, 'YSkipFactor',
              ( ['retval', 'out'], POINTER(c_int), 'YSkipFactor' )),
    COMMETHOD(['propput', helpstring(u'The Y skip factor for statistics.')], HRESULT, 'YSkipFactor',
              ( ['in'], c_int, 'YSkipFactor' )),
    COMMETHOD(['propget', helpstring(u'The ignore values for statistics.')], HRESULT, 'IgnoreValues',
              ( ['retval', 'out'], POINTER(VARIANT), 'vIgnoreValues' )),
    COMMETHOD(['propput', helpstring(u'The ignore values for statistics.')], HRESULT, 'IgnoreValues',
              ( ['in'], VARIANT, 'vIgnoreValues' )),
    COMMETHOD([helpstring(u'Loads all raster datasets in a given directory into a raster catalog.')], HRESULT, 'Load',
              ( ['in'], BSTR, 'Catalog' ),
              ( ['in'], BSTR, 'Directory' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pCancelTracker' )),
    COMMETHOD([helpstring(u'Loads all raster datasets in a given name list file into a raster catalog.')], HRESULT, 'LoadDatasets',
              ( ['in'], BSTR, 'Catalog' ),
              ( ['in'], BSTR, 'namelist' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pCancelTracker' )),
    COMMETHOD(['propget', helpstring(u'The last loading error.')], HRESULT, 'LastError',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IErrorInfo)), 'ppErrorInfo' )),
    COMMETHOD(['propget', helpstring(u'The current list of newline delimited failed dataset names.')], HRESULT, 'InvalidDatasets',
              ( ['retval', 'out'], POINTER(BSTR), 'pInvalidDatasetNames' )),
    COMMETHOD(['propget', helpstring(u'The last loaded dataset name.')], HRESULT, 'LastLoadedDataset',
              ( ['retval', 'out'], POINTER(BSTR), 'pDatasetName' )),
]
################################################################
## code template for IRasterCatalogLoader implementation
##class IRasterCatalogLoader_Impl(object):
##    def Load(self, Catalog, Directory, pCancelTracker):
##        u'Loads all raster datasets in a given directory into a raster catalog.'
##        #return 
##
##    def _get(self):
##        u'The foreground value for 1-Bit images.'
##        #return Foreground
##    def _set(self, Foreground):
##        u'The foreground value for 1-Bit images.'
##    Foreground = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The X skip factor for statistics.'
##        #return XSkipFactor
##    def _set(self, XSkipFactor):
##        u'The X skip factor for statistics.'
##    XSkipFactor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The ignore values for statistics.'
##        #return vIgnoreValues
##    def _set(self, vIgnoreValues):
##        u'The ignore values for statistics.'
##    IgnoreValues = property(_get, _set, doc = _set.__doc__)
##
##    def Workspace(self, pWorkspace):
##        u'The GeoDatabase workspace.'
##        #return 
##
##    @property
##    def LastLoadedDataset(self):
##        u'The last loaded dataset name.'
##        #return pDatasetName
##
##    @property
##    def LastError(self):
##        u'The last loading error.'
##        #return ppErrorInfo
##
##    def _get(self):
##        u'The Y skip factor for statistics.'
##        #return YSkipFactor
##    def _set(self, YSkipFactor):
##        u'The Y skip factor for statistics.'
##    YSkipFactor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if statistics should be built on loading.'
##        #return pEnableBuildStats
##    def _set(self, pEnableBuildStats):
##        u'Indicates if statistics should be built on loading.'
##    EnableBuildStatistics = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if datasets are to be reprojected on loading.'
##        #return Projected
##    def _set(self, Projected):
##        u'Indicates if datasets are to be reprojected on loading.'
##    Projected = property(_get, _set, doc = _set.__doc__)
##
##    def StorageDef(self, ppStorageDef):
##        u'The GeoDatabase storage definition.'
##        #return 
##
##    def LoadDatasets(self, Catalog, namelist, pCancelTracker):
##        u'Loads all raster datasets in a given name list file into a raster catalog.'
##        #return 
##
##    def _get(self):
##        u'Indicates if datasets are to be transformed on loading.'
##        #return xformed
##    def _set(self, xformed):
##        u'Indicates if datasets are to be transformed on loading.'
##    Transformed = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The background value to filtered.'
##        #return Background
##    def _set(self, Background):
##        u'The background value to filtered.'
##    Background = property(_get, _set, doc = _set.__doc__)
##
##    def ConnectionProperties(self, ppConnectionProperties):
##        u'The GeoDatabase connection properties.'
##        #return 
##
##    @property
##    def InvalidDatasets(self):
##        u'The current list of newline delimited failed dataset names.'
##        #return pInvalidDatasetNames
##

class RasterFunctionVariable(CoClass):
    u'The class for template raster function arguments.'
    _reg_clsid_ = GUID('{1799317A-C5AB-4AEE-8C99-96A5CF1BA0E6}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
RasterFunctionVariable._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunctionVariable, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class SlopeFunctionArguments(CoClass):
    u'The Slope function arguments.'
    _reg_clsid_ = GUID('{C39388B1-0EB2-4B50-97F6-47BEB2C60D86}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
SlopeFunctionArguments._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunctionArguments, IRasterFunctionArguments2, ISlopeFunctionArguments, ISlopeScalingArguments, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class CompositeBandFunction(CoClass):
    u'A class for a band composition raster function.'
    _reg_clsid_ = GUID('{B314F443-3D35-4E34-A389-C0822A187395}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
CompositeBandFunction._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunction, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

IItemPathsOptions._methods_ = [
    COMMETHOD(['propput', helpstring(u'Indicates whether only broken paths are returned.')], HRESULT, 'BrokenPathsOnly',
              ( ['in'], VARIANT_BOOL, 'pbBrokenOnly' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether only broken paths are returned.')], HRESULT, 'BrokenPathsOnly',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbBrokenOnly' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether only folder paths are returned.')], HRESULT, 'FoldersOnly',
              ( ['in'], VARIANT_BOOL, 'pbFoldersOnly' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether only folder paths are returned.')], HRESULT, 'FoldersOnly',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbFoldersOnly' )),
]
################################################################
## code template for IItemPathsOptions implementation
##class IItemPathsOptions_Impl(object):
##    def _get(self):
##        u'Indicates whether only broken paths are returned.'
##        #return pbBrokenOnly
##    def _set(self, pbBrokenOnly):
##        u'Indicates whether only broken paths are returned.'
##    BrokenPathsOnly = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether only folder paths are returned.'
##        #return pbFoldersOnly
##    def _set(self, pbFoldersOnly):
##        u'Indicates whether only folder paths are returned.'
##    FoldersOnly = property(_get, _set, doc = _set.__doc__)
##

IMensuration3D._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if 3D mensuration is supported.')], HRESULT, 'CanMeasure3D',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'p3DMensurationCapable' )),
    COMMETHOD([helpstring(u'Computes a 3D point given a 2D map points.')], HRESULT, 'GetPoint3D',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'pInPoint' ),
              ( ['out'], POINTER(POINTER(IPointMeasurement)), 'ppPointMeasurement' )),
    COMMETHOD([helpstring(u'Computes the 3D centroid of a 2D polygon with no interior holes..')], HRESULT, 'GetCentroid3D',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPolygon), 'pPolygon' ),
              ( ['out'], POINTER(POINTER(IPointMeasurement)), 'ppPointMeasurement' )),
    COMMETHOD([helpstring(u'Computes the 3D actual distance between two points given their 2D map points.')], HRESULT, 'GetDistance3D',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'pFirstPoint' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'pSecondPoint' ),
              ( ['out'], POINTER(POINTER(IDistanceMeasurement)), 'ppDistMeasurement' )),
    COMMETHOD([helpstring(u'Computes the 3D angle of the line connecting the two input 2D map points.')], HRESULT, 'GetAngle3D',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'pFirstPoint' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'pSecondPoint' ),
              ( ['out'], POINTER(POINTER(IAngularMeasurement)), 'ppAzimuthAngle' ),
              ( ['out'], POINTER(POINTER(IAngularMeasurement)), 'ppElevationAngle' )),
    COMMETHOD([helpstring(u'Computes the 3D area and perimeter of a 2D polygon with no interior holes.')], HRESULT, 'GetAreaAndPerimeter3D',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPolygon), 'pPolygon' ),
              ( ['out'], POINTER(POINTER(IPolygonMeasurement)), 'ppPolygonMeasurement' )),
]
################################################################
## code template for IMensuration3D implementation
##class IMensuration3D_Impl(object):
##    def GetDistance3D(self, pFirstPoint, pSecondPoint):
##        u'Computes the 3D actual distance between two points given their 2D map points.'
##        #return ppDistMeasurement
##
##    def GetPoint3D(self, pInPoint):
##        u'Computes a 3D point given a 2D map points.'
##        #return ppPointMeasurement
##
##    @property
##    def CanMeasure3D(self):
##        u'Indicates if 3D mensuration is supported.'
##        #return p3DMensurationCapable
##
##    def GetAngle3D(self, pFirstPoint, pSecondPoint):
##        u'Computes the 3D angle of the line connecting the two input 2D map points.'
##        #return ppAzimuthAngle, ppElevationAngle
##
##    def GetAreaAndPerimeter3D(self, pPolygon):
##        u'Computes the 3D area and perimeter of a 2D polygon with no interior holes.'
##        #return ppPolygonMeasurement
##
##    def GetCentroid3D(self, pPolygon):
##        u'Computes the 3D centroid of a 2D polygon with no interior holes..'
##        #return ppPointMeasurement
##

class INDVIFunctionArguments2(INDVIFunctionArguments):
    _case_insensitive_ = True
    u'Provides access to members that control NDVI function arguments.'
    _iid_ = GUID('{191462D1-D3F7-460C-9508-A5E1268E3D5F}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'esriMissingBandAction'
esriMissingBandActionFindBestMatch = 0
esriMissingBandActionFail = 1
esriMissingBandAction = c_int # enum
INDVIFunctionArguments2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates how the raster function behaves when a request band (specified by index, name, or wavelength) is not found in the input raster.')], HRESULT, 'MissingBandAction',
              ( ['retval', 'out'], POINTER(esriMissingBandAction), 'pMissingBandAction' )),
    COMMETHOD(['propput', helpstring(u'Indicates how the raster function behaves when a request band (specified by index, name, or wavelength) is not found in the input raster.')], HRESULT, 'MissingBandAction',
              ( ['in'], esriMissingBandAction, 'pMissingBandAction' )),
    COMMETHOD(['propget', helpstring(u'The wavelength tolerance value in nanometers. For a raster band to be associated with a requested wavelength, the two wavelengths must lie within this tolerance.')], HRESULT, 'WavelengthMatchTolerance',
              ( ['retval', 'out'], POINTER(c_double), 'pWavelengthMatchTolerance' )),
    COMMETHOD(['propput', helpstring(u'The wavelength tolerance value in nanometers. For a raster band to be associated with a requested wavelength, the two wavelengths must lie within this tolerance.')], HRESULT, 'WavelengthMatchTolerance',
              ( ['in'], c_double, 'pWavelengthMatchTolerance' )),
    COMMETHOD(['propget', helpstring(u'Visible band name.')], HRESULT, 'VisibleBandName',
              ( ['retval', 'out'], POINTER(BSTR), 'pVisibleBandName' )),
    COMMETHOD(['propput', helpstring(u'Visible band name.')], HRESULT, 'VisibleBandName',
              ( ['in'], BSTR, 'pVisibleBandName' )),
    COMMETHOD(['propget', helpstring(u'Infrared band name.')], HRESULT, 'InfraredBandName',
              ( ['retval', 'out'], POINTER(BSTR), 'pInfraredBandName' )),
    COMMETHOD(['propput', helpstring(u'Infrared band name.')], HRESULT, 'InfraredBandName',
              ( ['in'], BSTR, 'pInfraredBandName' )),
    COMMETHOD(['propget', helpstring(u'Visible band wavelength.')], HRESULT, 'VisibleBandWavelength',
              ( ['retval', 'out'], POINTER(c_double), 'pVisibleBandWavelength' )),
    COMMETHOD(['propput', helpstring(u'Visible band wavelength.')], HRESULT, 'VisibleBandWavelength',
              ( ['in'], c_double, 'pVisibleBandWavelength' )),
    COMMETHOD(['propget', helpstring(u'Infrared band wavelength.')], HRESULT, 'InfraredBandWavelength',
              ( ['retval', 'out'], POINTER(c_double), 'pInfraredBandWavelength' )),
    COMMETHOD(['propput', helpstring(u'Infrared band wavelength.')], HRESULT, 'InfraredBandWavelength',
              ( ['in'], c_double, 'pInfraredBandWavelength' )),
]
################################################################
## code template for INDVIFunctionArguments2 implementation
##class INDVIFunctionArguments2_Impl(object):
##    def _get(self):
##        u'Infrared band wavelength.'
##        #return pInfraredBandWavelength
##    def _set(self, pInfraredBandWavelength):
##        u'Infrared band wavelength.'
##    InfraredBandWavelength = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates how the raster function behaves when a request band (specified by index, name, or wavelength) is not found in the input raster.'
##        #return pMissingBandAction
##    def _set(self, pMissingBandAction):
##        u'Indicates how the raster function behaves when a request band (specified by index, name, or wavelength) is not found in the input raster.'
##    MissingBandAction = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Infrared band name.'
##        #return pInfraredBandName
##    def _set(self, pInfraredBandName):
##        u'Infrared band name.'
##    InfraredBandName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The wavelength tolerance value in nanometers. For a raster band to be associated with a requested wavelength, the two wavelengths must lie within this tolerance.'
##        #return pWavelengthMatchTolerance
##    def _set(self, pWavelengthMatchTolerance):
##        u'The wavelength tolerance value in nanometers. For a raster band to be associated with a requested wavelength, the two wavelengths must lie within this tolerance.'
##    WavelengthMatchTolerance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Visible band wavelength.'
##        #return pVisibleBandWavelength
##    def _set(self, pVisibleBandWavelength):
##        u'Visible band wavelength.'
##    VisibleBandWavelength = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Visible band name.'
##        #return pVisibleBandName
##    def _set(self, pVisibleBandName):
##        u'Visible band name.'
##    VisibleBandName = property(_get, _set, doc = _set.__doc__)
##

IRasterInfo._methods_ = [
    COMMETHOD(['propget', helpstring(u'The tiling origin.')], HRESULT, 'Origin',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint)), 'ppOrigin' )),
    COMMETHOD(['propputref', helpstring(u'The tiling origin.')], HRESULT, 'Origin',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'ppOrigin' )),
    COMMETHOD(['propget', helpstring(u'The block width in pixels.')], HRESULT, 'BlockWidth',
              ( ['retval', 'out'], POINTER(c_int), 'pWidth' )),
    COMMETHOD(['propput', helpstring(u'The block width in pixels.')], HRESULT, 'BlockWidth',
              ( ['in'], c_int, 'pWidth' )),
    COMMETHOD(['propget', helpstring(u'The block height in pixels.')], HRESULT, 'BlockHeight',
              ( ['retval', 'out'], POINTER(c_int), 'pHeight' )),
    COMMETHOD(['propput', helpstring(u'The block height in pixels.')], HRESULT, 'BlockHeight',
              ( ['in'], c_int, 'pHeight' )),
    COMMETHOD(['propget', helpstring(u'The first pyramid level.')], HRESULT, 'FirstPyramidLevel',
              ( ['retval', 'out'], POINTER(c_int), 'pLevel' )),
    COMMETHOD(['propput', helpstring(u'The first pyramid level.')], HRESULT, 'FirstPyramidLevel',
              ( ['in'], c_int, 'pLevel' )),
    COMMETHOD(['propget', helpstring(u'The maximum pyramid level.')], HRESULT, 'MaximumPyramidLevel',
              ( ['retval', 'out'], POINTER(c_int), 'pLevel' )),
    COMMETHOD(['propput', helpstring(u'The maximum pyramid level.')], HRESULT, 'MaximumPyramidLevel',
              ( ['in'], c_int, 'pLevel' )),
    COMMETHOD(['propget', helpstring(u'The raster GeoData transform.')], HRESULT, 'GeodataXform',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeodataXform)), 'ppXf' )),
    COMMETHOD(['propputref', helpstring(u'The raster GeoData transform.')], HRESULT, 'GeodataXform',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeodataXform), 'ppXf' )),
    COMMETHOD(['propget', helpstring(u'The raster spatial reference.')], HRESULT, 'SpatialReference',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference)), 'ppSpatialReference' )),
    COMMETHOD(['propget', helpstring(u'The raster extent.')], HRESULT, 'Extent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'ppExtent' )),
    COMMETHOD(['propput', helpstring(u'The raster extent.')], HRESULT, 'Extent',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'ppExtent' )),
    COMMETHOD(['propget', helpstring(u'The native raster spatial reference before GeoData transform.')], HRESULT, 'NativeSpatialReference',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference)), 'ppSpatialReference' )),
    COMMETHOD(['propputref', helpstring(u'The native raster spatial reference before GeoData transform.')], HRESULT, 'NativeSpatialReference',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'ppSpatialReference' )),
    COMMETHOD(['propget', helpstring(u'The native raster extent before GeoData transform.')], HRESULT, 'NativeExtent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'ppExtent' )),
    COMMETHOD(['propput', helpstring(u'The native raster extent before GeoData transform.')], HRESULT, 'NativeExtent',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'ppExtent' )),
    COMMETHOD(['propget', helpstring(u'The raster cell size.')], HRESULT, 'CellSize',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IPnt)), 'ppCellsize' )),
    COMMETHOD(['propput', helpstring(u'The raster cell size.')], HRESULT, 'CellSize',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IPnt), 'ppCellsize' )),
    COMMETHOD(['propget', helpstring(u'The raster width in pixels.')], HRESULT, 'Width',
              ( ['retval', 'out'], POINTER(c_int), 'pWidth' )),
    COMMETHOD(['propget', helpstring(u'The raster height in pixels.')], HRESULT, 'Height',
              ( ['retval', 'out'], POINTER(c_int), 'pHeight' )),
    COMMETHOD(['propget', helpstring(u'The number of bands in the Raster.')], HRESULT, 'BandCount',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propput', helpstring(u'The number of bands in the Raster.')], HRESULT, 'BandCount',
              ( ['in'], c_int, 'pCount' )),
    COMMETHOD(['propget', helpstring(u'The raster pixel type.')], HRESULT, 'PixelType',
              ( ['retval', 'out'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.rstPixelType), 'pPixelType' )),
    COMMETHOD(['propput', helpstring(u'The raster pixel type.')], HRESULT, 'PixelType',
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.rstPixelType, 'pPixelType' )),
    COMMETHOD(['propget', helpstring(u'The NoData value used to indicate invalid or excluded data.')], HRESULT, 'NoData',
              ( ['retval', 'out'], POINTER(VARIANT), 'pvNoData' )),
    COMMETHOD(['propput', helpstring(u'The NoData value used to indicate invalid or excluded data.')], HRESULT, 'NoData',
              ( ['in'], VARIANT, 'pvNoData' )),
    COMMETHOD(['propget', helpstring(u'Indicates if this raster source wants to perform resampling.')], HRESULT, 'Resampling',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pResampling' )),
    COMMETHOD(['propput', helpstring(u'Indicates if this raster source wants to perform resampling.')], HRESULT, 'Resampling',
              ( ['in'], VARIANT_BOOL, 'pResampling' )),
    COMMETHOD(['propget', helpstring(u'Indicates if this function supports band selection.')], HRESULT, 'SupportBandSelection',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pSupportBandSelection' )),
    COMMETHOD(['propput', helpstring(u'Indicates if this function supports band selection.')], HRESULT, 'SupportBandSelection',
              ( ['in'], VARIANT_BOOL, 'pSupportBandSelection' )),
    COMMETHOD(['propget', helpstring(u'The raster format, e.g. TIFF, NITF, and etc.')], HRESULT, 'Format',
              ( ['retval', 'out'], POINTER(BSTR), 'pFormat' )),
    COMMETHOD(['propput', helpstring(u'The raster format, e.g. TIFF, NITF, and etc.')], HRESULT, 'Format',
              ( ['in'], BSTR, 'pFormat' )),
]
################################################################
## code template for IRasterInfo implementation
##class IRasterInfo_Impl(object):
##    def Origin(self, ppOrigin):
##        u'The tiling origin.'
##        #return 
##
##    def _get(self):
##        u'The number of bands in the Raster.'
##        #return pCount
##    def _set(self, pCount):
##        u'The number of bands in the Raster.'
##    BandCount = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The block width in pixels.'
##        #return pWidth
##    def _set(self, pWidth):
##        u'The block width in pixels.'
##    BlockWidth = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The NoData value used to indicate invalid or excluded data.'
##        #return pvNoData
##    def _set(self, pvNoData):
##        u'The NoData value used to indicate invalid or excluded data.'
##    NoData = property(_get, _set, doc = _set.__doc__)
##
##    def GeodataXform(self, ppXf):
##        u'The raster GeoData transform.'
##        #return 
##
##    def _get(self):
##        u'The raster pixel type.'
##        #return pPixelType
##    def _set(self, pPixelType):
##        u'The raster pixel type.'
##    PixelType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The maximum pyramid level.'
##        #return pLevel
##    def _set(self, pLevel):
##        u'The maximum pyramid level.'
##    MaximumPyramidLevel = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The native raster extent before GeoData transform.'
##        #return ppExtent
##    def _set(self, ppExtent):
##        u'The native raster extent before GeoData transform.'
##    NativeExtent = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SpatialReference(self):
##        u'The raster spatial reference.'
##        #return ppSpatialReference
##
##    def _get(self):
##        u'Indicates if this raster source wants to perform resampling.'
##        #return pResampling
##    def _set(self, pResampling):
##        u'Indicates if this raster source wants to perform resampling.'
##    Resampling = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Width(self):
##        u'The raster width in pixels.'
##        #return pWidth
##
##    def _get(self):
##        u'The raster format, e.g. TIFF, NITF, and etc.'
##        #return pFormat
##    def _set(self, pFormat):
##        u'The raster format, e.g. TIFF, NITF, and etc.'
##    Format = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Height(self):
##        u'The raster height in pixels.'
##        #return pHeight
##
##    def _get(self):
##        u'The raster extent.'
##        #return ppExtent
##    def _set(self, ppExtent):
##        u'The raster extent.'
##    Extent = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The first pyramid level.'
##        #return pLevel
##    def _set(self, pLevel):
##        u'The first pyramid level.'
##    FirstPyramidLevel = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The block height in pixels.'
##        #return pHeight
##    def _set(self, pHeight):
##        u'The block height in pixels.'
##    BlockHeight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if this function supports band selection.'
##        #return pSupportBandSelection
##    def _set(self, pSupportBandSelection):
##        u'Indicates if this function supports band selection.'
##    SupportBandSelection = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The raster cell size.'
##        #return ppCellsize
##    def _set(self, ppCellsize):
##        u'The raster cell size.'
##    CellSize = property(_get, _set, doc = _set.__doc__)
##
##    def NativeSpatialReference(self, ppSpatialReference):
##        u'The native raster spatial reference before GeoData transform.'
##        #return 
##

IRasterInfo2._methods_ = [
    COMMETHOD([helpstring(u'Initializes from a raster.')], HRESULT, 'Init',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' )),
    COMMETHOD([helpstring(u'Removes all band statistics and histograms.')], HRESULT, 'RemoveStatsHistograms'),
    COMMETHOD(['propget', helpstring(u'The tiling Levels Of Details.')], HRESULT, 'LODInfos',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterLODInfos)), 'ppLODInfos' )),
    COMMETHOD(['propputref', helpstring(u'The tiling Levels Of Details.')], HRESULT, 'LODInfos',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterLODInfos), 'ppLODInfos' )),
    COMMETHOD(['propget', helpstring(u'The raster colormap.')], HRESULT, 'Colormap',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterColormap)), 'ppColormap' )),
    COMMETHOD(['propputref', helpstring(u'The raster colormap.')], HRESULT, 'Colormap',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterColormap), 'ppColormap' )),
    COMMETHOD(['propget', helpstring(u'The raster attribute table.')], HRESULT, 'AttributeTable',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable)), 'ppTable' )),
    COMMETHOD(['propputref', helpstring(u'The raster attribute table.')], HRESULT, 'AttributeTable',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable), 'ppTable' )),
    COMMETHOD(['propget', helpstring(u'The statistics of a given band.')], HRESULT, 'Statistics',
              ( ['in'], c_int, 'iBand' ),
              ( ['retval', 'out'], POINTER(POINTER(IRasterStatistics)), 'ppStats' )),
    COMMETHOD(['propputref', helpstring(u'The statistics of a given band.')], HRESULT, 'Statistics',
              ( ['in'], c_int, 'iBand' ),
              ( ['in'], POINTER(IRasterStatistics), 'ppStats' )),
    COMMETHOD(['propget', helpstring(u'The histogram of a given band.')], HRESULT, 'Histogram',
              ( ['in'], c_int, 'iBand' ),
              ( ['retval', 'out'], POINTER(POINTER(IRasterHistogram)), 'ppHistogram' )),
    COMMETHOD(['propputref', helpstring(u'The histogram of a given band.')], HRESULT, 'Histogram',
              ( ['in'], c_int, 'iBand' ),
              ( ['in'], POINTER(IRasterHistogram), 'ppHistogram' )),
    COMMETHOD(['propget', helpstring(u'The current raster resampler.')], HRESULT, 'PixelResampler',
              ( ['retval', 'out'], POINTER(POINTER(IPixelResampler)), 'ppResampler' )),
    COMMETHOD(['propputref', helpstring(u'The current raster resampler.')], HRESULT, 'PixelResampler',
              ( ['in'], POINTER(IPixelResampler), 'ppResampler' )),
    COMMETHOD(['propget', helpstring(u'The maximum cell size associated with this raster.')], HRESULT, 'MaximumCellSize',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IPnt)), 'ppMaximumCellSize' )),
    COMMETHOD(['propput', helpstring(u'The maximum cell size associated with this raster.')], HRESULT, 'MaximumCellSize',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IPnt), 'ppMaximumCellSize' )),
]
################################################################
## code template for IRasterInfo2 implementation
##class IRasterInfo2_Impl(object):
##    def _get(self):
##        u'The maximum cell size associated with this raster.'
##        #return ppMaximumCellSize
##    def _set(self, ppMaximumCellSize):
##        u'The maximum cell size associated with this raster.'
##    MaximumCellSize = property(_get, _set, doc = _set.__doc__)
##
##    def Statistics(self, iBand, ppStats):
##        u'The statistics of a given band.'
##        #return 
##
##    def Colormap(self, ppColormap):
##        u'The raster colormap.'
##        #return 
##
##    def AttributeTable(self, ppTable):
##        u'The raster attribute table.'
##        #return 
##
##    def Histogram(self, iBand, ppHistogram):
##        u'The histogram of a given band.'
##        #return 
##
##    def LODInfos(self, ppLODInfos):
##        u'The tiling Levels Of Details.'
##        #return 
##
##    def Init(self, pRaster):
##        u'Initializes from a raster.'
##        #return 
##
##    def PixelResampler(self, ppResampler):
##        u'The current raster resampler.'
##        #return 
##
##    def RemoveStatsHistograms(self):
##        u'Removes all band statistics and histograms.'
##        #return 
##

class RasterTypeName(CoClass):
    u'The raster type name object.'
    _reg_clsid_ = GUID('{507E980B-D338-4636-A729-A939BFCAA124}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
RasterTypeName._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName, IRasterTypeName, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream]

IPansharpeningFunctionArguments2._methods_ = [
    COMMETHOD(['propget', helpstring(u"Indicates if the input MS image's statistics and histogram should be kept.")], HRESULT, 'KeepStatsHistogram',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pKeep' )),
    COMMETHOD(['propput', helpstring(u"Indicates if the input MS image's statistics and histogram should be kept.")], HRESULT, 'KeepStatsHistogram',
              ( ['in'], VARIANT_BOOL, 'pKeep' )),
    COMMETHOD(['propget', helpstring(u"The maximum cellsize, in Pan image's SR, below which pansharpening will be applied.")], HRESULT, 'MaximumPansharpeningCellsize',
              ( ['retval', 'out'], POINTER(c_double), 'CellSize' )),
    COMMETHOD(['propput', helpstring(u"The maximum cellsize, in Pan image's SR, below which pansharpening will be applied.")], HRESULT, 'MaximumPansharpeningCellsize',
              ( ['in'], c_double, 'CellSize' )),
]
################################################################
## code template for IPansharpeningFunctionArguments2 implementation
##class IPansharpeningFunctionArguments2_Impl(object):
##    def _get(self):
##        u"The maximum cellsize, in Pan image's SR, below which pansharpening will be applied."
##        #return CellSize
##    def _set(self, CellSize):
##        u"The maximum cellsize, in Pan image's SR, below which pansharpening will be applied."
##    MaximumPansharpeningCellsize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u"Indicates if the input MS image's statistics and histogram should be kept."
##        #return pKeep
##    def _set(self, pKeep):
##        u"Indicates if the input MS image's statistics and histogram should be kept."
##    KeepStatsHistogram = property(_get, _set, doc = _set.__doc__)
##

class ILasToRasterFunctionArguments2(ILasToRasterFunctionArguments):
    _case_insensitive_ = True
    u'Provides access to members that control Las to raster conversion.'
    _iid_ = GUID('{F2C05C0D-B828-4DFA-87EB-75EEE7DFCB5C}')
    _idlflags_ = ['oleautomation']
ILasToRasterFunctionArguments2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Disconnect from Las files.')], HRESULT, 'DisconnectFromLasFiles',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pDisconnect' )),
    COMMETHOD(['propput', helpstring(u'Disconnect from Las files.')], HRESULT, 'DisconnectFromLasFiles',
              ( ['in'], VARIANT_BOOL, 'pDisconnect' )),
]
################################################################
## code template for ILasToRasterFunctionArguments2 implementation
##class ILasToRasterFunctionArguments2_Impl(object):
##    def _get(self):
##        u'Disconnect from Las files.'
##        #return pDisconnect
##    def _set(self, pDisconnect):
##        u'Disconnect from Las files.'
##    DisconnectFromLasFiles = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'esriMosaicDatasetErrors'
E_MOSAIC_ABORT = -2147213311
E_MOSAIC_CANNOT_ADD_DATASET = -2147213310
E_MOSAIC_CANNOT_COMPUTE_LOW_HIGH_CELL = -2147213309
E_MOSAIC_CANNOT_FILTERGEOMETRY = -2147213308
E_MOSAIC_CANNOT_GET_CATALOG_FIELDS = -2147213307
E_MOSAIC_CANNOT_GET_CATALOG_SRS = -2147213306
E_MOSAIC_CANNOT_GET_RASTER_DEF = -2147213305
E_MOSAIC_CANNOT_GET_RASTER_SRS = -2147213304
E_MOSAIC_CANNOT_GET_UNION = -2147213303
E_MOSAIC_CANNOT_UPDATE_RASTER_VALUE = -2147213302
E_MOSAIC_CANNOT_WEED = -2147213301
E_MOSAIC_COMPUTE_FOOTPRINT_FAILED = -2147213300
E_MOSAIC_CREATE_AUX_FIELDS = -2147213299
E_MOSAIC_CREATE_INSERT_CURSOR = -2147213298
E_MOSAIC_CREATE_ROW_BUFFER = -2147213297
E_MOSAIC_INSERT_ROW = -2147213296
E_MOSAIC_INVALID_RPDEF = -2147213295
E_MOSAIC_MISSING_DATASET_FOOTPRINT = -2147213294
E_MOSAIC_MISSING_ITEM_DATA_SOURCE = -2147213293
E_MOSAIC_MISSING_LINK_TO_VALID_RASTER_CATALOG = -2147213292
E_MOSAIC_MISSING_MOSAIC_FUNCTION = -2147213291
E_MOSAIC_NOTHING_SELECTED = -2147213290
E_MOSAIC_PREPARE_CANNOT_UPDATE_REFERENCED_DATASET = -2147213289
E_MOSAIC_ADD_CANNOT_BUILD_ITEM = -2147213288
E_MOSAIC_SYNC_CANNOT_BUILD_ITEM = -2147213287
E_MOSAIC_SYNC_CANNOT_UPDATE_ROW = -2147213286
E_MOSAIC_UNION_EMPTY = -2147213285
E_MOSAIC_NO_SHAPE_FIELD = -2147213284
E_MOSAIC_BAD_DATASET_ENVELOPE = -2147213283
E_MOSAIC_NO_ITEMS_SELECTED = -2147213282
E_MOSAIC_UNKNOWN_SRS = -2147213281
E_MOSAIC_NO_BOUNDARY_FEATURE_CLASS = -2147213280
E_MOSAIC_CANNOT_GENERATE_OVERVIEW_IMAGE = -2147213279
E_MOSAIC_MISSING_RASTERFIELD_FROM_TABLE = -2147213278
E_MOSAIC_DEFINE_NODATA_FAILED = -2147213277
E_MOSAIC_SYNC_CANNOT_UPDATE_CATALOG = -2147213276
E_MOSAIC_INVALID_OVERVIEW_WORKSPACE = -2147213275
E_MOSAIC_INVALID_CSV_FILE = -2147213274
E_MOSAIC_CANNOT_CREATE = -2147213273
E_MOSAIC_INVALID_FILE = -2147213272
E_MOSAIC_UPDATE_ROW = -2147213271
E_MOSAIC_CANNOT_BUILD_ISDEF_ITEM = -2147213270
E_MOSAIC_CANNOT_CONVERT_RASTER_PROCESS = -2147213269
E_MOSAIC_UNPROCESSED_OVERVIEWS_FOUND = -2147213268
E_MOSAIC_TOO_MANY_ITEMS_SELECTED = -2147213267
E_MOSAIC_CANNOT_UPDATE_ITEM_SEAMLINE = -2147213266
E_MOSAIC_IN_LOAD_ONLY = -2147213265
E_MOSAIC_NO_FRAMES = -2147213264
E_MOSAIC_NO_IMAGEFOLDER = -2147213263
E_MOSAIC_NO_FOCALLENGTH = -2147213262
E_MOSAIC_NO_COLUMNS = -2147213261
E_MOSAIC_NO_ROWS = -2147213260
E_MOSAIC_NO_PIXELSIZE = -2147213259
E_MOSAIC_NO_AVERAGEZ = -2147213258
E_MOSAIC_CAMFILE_NOTEXISTS = -2147213257
E_MOSAIC_NO_CAMINFO = -2147213256
E_MOSAIC_NO_CAMFILE = -2147213255
E_MOSAIC_NO_PHFILE = -2147213254
E_MOSAIC_PHFILE_NOTEXISTS = -2147213253
E_MOSAIC_CANNOT_EDIT_REFERENCED_DATASET = -2147213252
E_MOSAIC_RPDEF_INVALID_RASTER_ID = -2147213251
E_MOSAIC_CANNOT_RECOMMEND_CRAWLER = -2147213250
E_MOSAIC_FAILED_TO_OPEN_DATASET = -2147213249
E_MOSAIC_CANNOT_PREPARE_SCHEMA = -2147213248
E_MOSAIC_VALIDATION_FAILED = -2147213247
E_MOSAIC_VALIDATION_LIDAR_CELLSIZE = -2147213246
E_MOSAIC_RASTER_TYPE_NON_PERSISTENT = -2147213245
E_MOSAIC_CANT_DISABLE_SINDEX = -2147213244
E_MOSAIC_DATASET_MISSING_BAND_KEY_PROPERTIES = -2147213243
E_MOSAIC_UNRECOGNIZED_SENSOR_NAME = -2147213242
E_MOSAIC_VALIDATION_TERRAIN_CELLSIZE = -2147213241
E_MOSAIC_INVALID_FOOTPRINT_GEOMETRY = -2147213240
E_MOSAIC_CANNOT_OPEN_OVERVIEW_STORAGE = -2147213239
E_MOSAIC_TABLE_CRAWLER_MISSING_TABLE = -2147213238
E_MOSAIC_SYNC_FAILED_FOR_CURRENT_RASTER_TYPE = -2147213237
E_MOSAIC_VALIDATION_LASDATASET_CELLSIZE = -2147213236
E_MOSAIC_BOUNDARY_OUTSIDE_HORIZON = -2147213235
E_MOSAIC_FOOTPRINT_OUTSIDE_HORIZON = -2147213234
E_MOSAIC_INCOMPATIBLE_VERSION = -2147213233
E_MOSAIC_NOT_OWNER = -2147213232
E_MOSAIC_MISSING_DATASET_SR = -2147213231
E_MOSAIC_MISSING_FOOTPRINT_SR = -2147213230
E_MOSAIC_CAN_BUILD_MISSING_IN_SENSOR_TYPE = -2147213229
E_MOSAIC_NO_ITEMS_TO_SPLIT = -2147213228
E_MOSAIC_CANNOT_PROJECT_TO_MD_SR = -2147213227
E_MOSAIC_CANNOT_GROUP_ITEMS_FOR_MERGING = -2147213226
E_MOSAIC_CANNOT_REFRESH_CACHE = -2147213225
E_MOSAIC_CANNOT_UPDATE_ITEM_COLOR_CORRECTION = -2147213224
E_MOSAIC_CANNOT_SYNC_MERGED_ITEM = -2147213223
E_MOSAIC_CANNOT_PROCESS_BUILT_ITEMS = -2147213222
E_MOSAIC_CANNOT_PROCESS_UPDATED_ITEMS = -2147213221
E_MOSAIC_INVALID_RASTER_COMMAND_RESULT = -2147213220
E_MOSAIC_ERRORS_BUILDING_BOUNDARY = -2147213219
E_MOSAIC_UNBUILDABLE_ITEMS = -2147213218
E_MOSAIC_NO_ITEM_ADDED = -2147213217
E_MOSAIC_LEVELS_CATEGORY_NOT_COMPUTED = -2147213216
E_MOSAIC_LEVELS_TABLE_SCHEMA_NOT_UPGRADED = -2147213215
E_MOSAIC_SYNC_CANNOT_SIMPLIFY_ITEM = -2147213214
E_MOSAIC_SYNC_CANNOT_BUILD_THUMBNAIL = -2147213213
E_MOSAIC_CANNOT_PROCESS_OVERVIEW_ITEM = -2147213212
E_MOSAIC_CANNOT_PROCESS_ANALYSIS_RESULTS = -2147213211
E_MOSAIC_CANNOT_CREATE_FOLDER = -2147213210
E_MOSAIC_INVALID_OVERVIEW_CELL_SIZE = -2147213209
E_MOSAIC_DISJOINT_OVERVIEW_TILE = -2147213208
E_MOSAIC_CANNOT_PROCESS_SEAMLINE_ITEM = -2147213207
E_MOSAIC_SYNC_CANNOT_VALIDATE_FOOTPRINT = -2147213206
E_MOSAIC_INVALID_OVERVIEW_ITEM_FIELD_VALUES = -2147213205
E_MOSAIC_CANNOT_PROCESS_ITEM = -2147213204
E_MOSAIC_RASTER_TYPE_UNSUPPORTED_PIXEL_TYPE = -2147213203
E_MOSAIC_RASTER_TYPE_HIGH_RADIOMETRIC_RANGE = -2147213202
E_MOSAIC_CANNOT_INIT_PARALLEL_PROCESSING = -2147213201
E_MOSAIC_INVALID_WHERE_CLAUSE = -2147213200
E_MOSAIC_CANNOT_PROCESS_EMPTY_SEAMLINE = -2147213199
E_MOSAIC_SYNC_CANNOT_UPDATE_STEREO_TABLE = -2147213198
E_MOSAIC_OVERVIEW_SLIVER = -2147213197
E_MOSAIC_LEVELS_MISSING = -2147213196
E_MOSAIC_NON_CACHED_MAPSERVICE = -2147213195
E_MOSAIC_INVALID_SEARCH_CRAWLER = -2147213194
E_MOSAIC_BUILDER_INIT_CRAWLER = -2147213193
E_MOSAIC_EMPTY_FEATURECLASS = -2147213192
E_MOSAIC_UNKNOWN = -2147209217
esriMosaicDatasetErrors = c_int # enum
IRemapFunctionArguments._methods_ = [
    COMMETHOD(['propget', helpstring(u'The source raster object.')], HRESULT, 'Raster',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppRaster' )),
    COMMETHOD(['propputref', helpstring(u'The source raster object.')], HRESULT, 'Raster',
              ( ['in'], POINTER(IUnknown), 'ppRaster' )),
    COMMETHOD(['propget', helpstring(u'Indicates if unmatched values should be passed through.')], HRESULT, 'AllowUnmatched',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbAllowUnmatched' )),
    COMMETHOD(['propput', helpstring(u'Indicates if unmatched values should be passed through.')], HRESULT, 'AllowUnmatched',
              ( ['in'], VARIANT_BOOL, 'pbAllowUnmatched' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the attribute table should be used for remapping.')], HRESULT, 'UseTable',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbUseTable' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the attribute table should be used for remapping.')], HRESULT, 'UseTable',
              ( ['in'], VARIANT_BOOL, 'pbUseTable' )),
    COMMETHOD(['propget', helpstring(u'Field in the Attribute table that contains pixel values.')], HRESULT, 'InputField',
              ( ['retval', 'out'], POINTER(BSTR), 'pInputField' )),
    COMMETHOD(['propput', helpstring(u'Field in the Attribute table that contains pixel values.')], HRESULT, 'InputField',
              ( ['in'], BSTR, 'pInputField' )),
    COMMETHOD(['propget', helpstring(u'Field in the attribute table containing the remapped values.')], HRESULT, 'OutputField',
              ( ['retval', 'out'], POINTER(BSTR), 'pOutputField' )),
    COMMETHOD(['propput', helpstring(u'Field in the attribute table containing the remapped values.')], HRESULT, 'OutputField',
              ( ['in'], BSTR, 'pOutputField' )),
    COMMETHOD(['propget', helpstring(u'The table used to lookup pixel values.')], HRESULT, 'Table',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable)), 'ppTable' )),
    COMMETHOD(['propputref', helpstring(u'The table used to lookup pixel values.')], HRESULT, 'Table',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable), 'ppTable' )),
    COMMETHOD(['propget', helpstring(u"The collection of min-max value pairs indicating input remap classes. Pixel values of the input raster in the range [min,max) are mapped to the corresponding value in the 'OutputValues' collection.")], HRESULT, 'InputRanges',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray)), 'ppInputRanges' )),
    COMMETHOD(['propputref', helpstring(u"The collection of min-max value pairs indicating input remap classes. Pixel values of the input raster in the range [min,max) are mapped to the corresponding value in the 'OutputValues' collection.")], HRESULT, 'InputRanges',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray), 'ppInputRanges' )),
    COMMETHOD(['propget', helpstring(u"The collection of output values to which each input value pair in the 'InputRanges' collection is remapped.")], HRESULT, 'OutputValues',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray)), 'ppOutputValues' )),
    COMMETHOD(['propputref', helpstring(u"The collection of output values to which each input value pair in the 'InputRanges' collection is remapped.")], HRESULT, 'OutputValues',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray), 'ppOutputValues' )),
    COMMETHOD(['propget', helpstring(u'The collection of min-max value pairs indicating NoData. Pixel values of the input raster in the range [min,max) are set as NoData.')], HRESULT, 'NoDataRanges',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray)), 'ppNoDataRanges' )),
    COMMETHOD(['propputref', helpstring(u'The collection of min-max value pairs indicating NoData. Pixel values of the input raster in the range [min,max) are set as NoData.')], HRESULT, 'NoDataRanges',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray), 'ppNoDataRanges' )),
]
################################################################
## code template for IRemapFunctionArguments implementation
##class IRemapFunctionArguments_Impl(object):
##    def Raster(self, ppRaster):
##        u'The source raster object.'
##        #return 
##
##    def _get(self):
##        u'Field in the Attribute table that contains pixel values.'
##        #return pInputField
##    def _set(self, pInputField):
##        u'Field in the Attribute table that contains pixel values.'
##    InputField = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if unmatched values should be passed through.'
##        #return pbAllowUnmatched
##    def _set(self, pbAllowUnmatched):
##        u'Indicates if unmatched values should be passed through.'
##    AllowUnmatched = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Field in the attribute table containing the remapped values.'
##        #return pOutputField
##    def _set(self, pOutputField):
##        u'Field in the attribute table containing the remapped values.'
##    OutputField = property(_get, _set, doc = _set.__doc__)
##
##    def InputRanges(self, ppInputRanges):
##        u"The collection of min-max value pairs indicating input remap classes. Pixel values of the input raster in the range [min,max) are mapped to the corresponding value in the 'OutputValues' collection."
##        #return 
##
##    def NoDataRanges(self, ppNoDataRanges):
##        u'The collection of min-max value pairs indicating NoData. Pixel values of the input raster in the range [min,max) are set as NoData.'
##        #return 
##
##    def Table(self, ppTable):
##        u'The table used to lookup pixel values.'
##        #return 
##
##    def OutputValues(self, ppOutputValues):
##        u"The collection of output values to which each input value pair in the 'InputRanges' collection is remapped."
##        #return 
##
##    def _get(self):
##        u'Indicates if the attribute table should be used for remapping.'
##        #return pbUseTable
##    def _set(self, pbUseTable):
##        u'Indicates if the attribute table should be used for remapping.'
##    UseTable = property(_get, _set, doc = _set.__doc__)
##

class IPanSharpenGramSchmidtFunctionArguments(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to Pan Sharpen Gram Schmidt function arguments.'
    _iid_ = GUID('{E6648351-91A2-4921-BE82-76E8FA834026}')
    _idlflags_ = ['oleautomation']
IPanSharpenGramSchmidtFunctionArguments._methods_ = [
    COMMETHOD(['propget', helpstring(u'The multispectrum image.')], HRESULT, 'MSImage',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppMSImage' )),
    COMMETHOD(['propputref', helpstring(u'The multispectrum image.')], HRESULT, 'MSImage',
              ( ['in'], POINTER(IUnknown), 'ppMSImage' )),
    COMMETHOD(['propget', helpstring(u'The panchromatic image.')], HRESULT, 'PanImage',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppPanImage' )),
    COMMETHOD(['propputref', helpstring(u'The panchromatic image.')], HRESULT, 'PanImage',
              ( ['in'], POINTER(IUnknown), 'ppPanImage' )),
    COMMETHOD(['propget', helpstring(u'The Red, Green, Blue, and Infrared weights contributing to panchromatic image.')], HRESULT, 'Weights',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray)), 'ppWeights' )),
    COMMETHOD(['propputref', helpstring(u'The Red, Green, Blue, and Infrared weights contributing to panchromatic image.')], HRESULT, 'Weights',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray), 'ppWeights' )),
]
################################################################
## code template for IPanSharpenGramSchmidtFunctionArguments implementation
##class IPanSharpenGramSchmidtFunctionArguments_Impl(object):
##    def PanImage(self, ppPanImage):
##        u'The panchromatic image.'
##        #return 
##
##    def Weights(self, ppWeights):
##        u'The Red, Green, Blue, and Infrared weights contributing to panchromatic image.'
##        #return 
##
##    def MSImage(self, ppMSImage):
##        u'The multispectrum image.'
##        #return 
##

class GrayscaleFunction(CoClass):
    u'The greyscale conversion function.'
    _reg_clsid_ = GUID('{060CC78F-D651-4DF3-AA47-95E1D0D1D311}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
GrayscaleFunction._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunction, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class IBuilderItem3(IBuilderItem2):
    _case_insensitive_ = True
    u'Provides access to members that control a builder item.'
    _iid_ = GUID('{E0E41C47-72EC-4E66-8D6C-C6A90F6D1C21}')
    _idlflags_ = []
IBuilderItem3._methods_ = [
    COMMETHOD(['propputref', helpstring(u"The field values corresponding to the AuxiliaryFields of the parent raster builder described by a property set that maps field names to fields values. These values take precedence over metadata from the BuilderItem's function raster dataset.")], HRESULT, 'AuxiliaryFieldValues',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet), 'ppAuxiliaryFieldValues' )),
    COMMETHOD(['propget', helpstring(u"The field values corresponding to the AuxiliaryFields of the parent raster builder described by a property set that maps field names to fields values. These values take precedence over metadata from the BuilderItem's function raster dataset.")], HRESULT, 'AuxiliaryFieldValues',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet)), 'ppAuxiliaryFieldValues' )),
]
################################################################
## code template for IBuilderItem3 implementation
##class IBuilderItem3_Impl(object):
##    @property
##    def AuxiliaryFieldValues(self, ppAuxiliaryFieldValues):
##        u"The field values corresponding to the AuxiliaryFields of the parent raster builder described by a property set that maps field names to fields values. These values take precedence over metadata from the BuilderItem's function raster dataset."
##        #return 
##

class ExtractBandFunctionArguments(CoClass):
    u'A class for band extraction/selection raster function arguments.'
    _reg_clsid_ = GUID('{E35F696D-DC8D-4274-B5A6-7A15FB0CF512}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IExtractBandFunctionArguments(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control band extraction function argument(s).'
    _iid_ = GUID('{8DE0F45A-83D0-4B7B-87AD-69ACA8C11080}')
    _idlflags_ = ['oleautomation']
class IExtractBandFunctionArguments2(IExtractBandFunctionArguments):
    _case_insensitive_ = True
    u'Provides access to members that control band extraction function argument(s).'
    _iid_ = GUID('{EE22AFBB-419C-474B-BF29-457A4B9899D8}')
    _idlflags_ = ['oleautomation']
ExtractBandFunctionArguments._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunctionArguments, IRasterFunctionArguments2, IExtractBandFunctionArguments, IExtractBandFunctionArguments2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class StockFrequencyDistributionHistogram(CoClass):
    u'A class for stock frequency distribution histogram.'
    _reg_clsid_ = GUID('{766C96DD-1896-442B-85FD-52591C7F28A6}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IStockFrequencyDistributionHistogram(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control stock frequency distribution histograms.'
    _iid_ = GUID('{EA83381D-C3A8-4677-931E-62671AF63B19}')
    _idlflags_ = ['oleautomation']
StockFrequencyDistributionHistogram._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IStockFrequencyDistributionHistogram]

class ExtractBandFunction(CoClass):
    u'A class for a band extraction/selection raster function.'
    _reg_clsid_ = GUID('{F9FE7BB2-8910-4B5A-BCB5-FE990BD3E517}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
ExtractBandFunction._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunction, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, IRasterKeyProperties]

class HistogramSpecification(CoClass):
    u'A class for histogram specification.'
    _reg_clsid_ = GUID('{B66278B0-8352-499B-AD5C-5140C54EC52F}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
HistogramSpecification._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IHistogramSpecification, IStockFrequencyDistributionHistogram, IPixelFilter]

IRasterTypeProperties._methods_ = [
    COMMETHOD(['propput', helpstring(u'Name of the raster type.')], HRESULT, 'Name',
              ( ['in'], BSTR, 'pRasterTypeName' )),
    COMMETHOD(['propget', helpstring(u'Name of the raster type.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'pRasterTypeName' )),
    COMMETHOD(['propput', helpstring(u'Description of the raster type.')], HRESULT, 'Description',
              ( ['in'], BSTR, 'pRasterTypeDescription' )),
    COMMETHOD(['propget', helpstring(u'Description of the raster type.')], HRESULT, 'Description',
              ( ['retval', 'out'], POINTER(BSTR), 'pRasterTypeDescription' )),
    COMMETHOD(['propput', helpstring(u'The types of input data source types as a bitwise combination of esriCrawlerDataSourceType values.')], HRESULT, 'InputDataSourceTypes',
              ( ['in'], c_int, 'pInputDataSourceTypes' )),
    COMMETHOD(['propget', helpstring(u'The types of input data source types as a bitwise combination of esriCrawlerDataSourceType values.')], HRESULT, 'InputDataSourceTypes',
              ( ['retval', 'out'], POINTER(c_int), 'pInputDataSourceTypes' )),
    COMMETHOD(['propput', helpstring(u"Regular expression formed using wild card characters ('*', '?', or '.') for matching data source items requested for URI constructions. No item URIs are created for input that doesn't match the specified regular expression.")], HRESULT, 'DataSourceFilter',
              ( ['in'], BSTR, 'pDataSourceFilter' )),
    COMMETHOD(['propget', helpstring(u"Regular expression formed using wild card characters ('*', '?', or '.') for matching data source items requested for URI constructions. No item URIs are created for input that doesn't match the specified regular expression.")], HRESULT, 'DataSourceFilter',
              ( ['retval', 'out'], POINTER(BSTR), 'pDataSourceFilter' )),
    COMMETHOD(['propputref', helpstring(u'Default URI filters supported by the raster type.')], HRESULT, 'SupportedURIFilters',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'pppItemURIFilterArray' )),
    COMMETHOD(['propget', helpstring(u'Default URI filters supported by the raster type.')], HRESULT, 'SupportedURIFilters',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'pppItemURIFilterArray' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the raster type supports orthorectification.')], HRESULT, 'SupportsOrthorectification',
              ( ['in'], VARIANT_BOOL, 'pbSupportsOrthorectification' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the raster type supports orthorectification.')], HRESULT, 'SupportsOrthorectification',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbSupportsOrthorectification' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the raster type supports stereo.')], HRESULT, 'SupportsStereo',
              ( ['in'], VARIANT_BOOL, 'pbSupportsStereo' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the raster type supports stereo.')], HRESULT, 'SupportsStereo',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbSupportsStereo' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the raster type supports seamline.')], HRESULT, 'SupportsSeamline',
              ( ['in'], VARIANT_BOOL, 'pbSupportsSeamline' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the raster type supports seamline.')], HRESULT, 'SupportsSeamline',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbSupportsSeamline' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether datasets are clipped to their footprints.')], HRESULT, 'EnableClipToFootprint',
              ( ['in'], VARIANT_BOOL, 'pbEnableClipToFootprint' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether datasets are clipped to their footprints.')], HRESULT, 'EnableClipToFootprint',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbEnableClipToFootprint' )),
    COMMETHOD(['propput', helpstring(u'The parameters controlling how rasters are added using this raster type.')], HRESULT, 'AddRastersParameters',
              ( ['in'], POINTER(IAddRastersParameters), 'ppAddRastersParameters' )),
    COMMETHOD(['propget', helpstring(u'The parameters controlling how rasters are added using this raster type.')], HRESULT, 'AddRastersParameters',
              ( ['retval', 'out'], POINTER(POINTER(IAddRastersParameters)), 'ppAddRastersParameters' )),
    COMMETHOD(['propput', helpstring(u'The parameters controlling how rasters are synchronized using this raster type instance.')], HRESULT, 'SynchronizeParameters',
              ( ['in'], POINTER(ISynchronizeParameters), 'ppSynchronizeParameters' )),
    COMMETHOD(['propget', helpstring(u'The parameters controlling how rasters are synchronized using this raster type instance.')], HRESULT, 'SynchronizeParameters',
              ( ['retval', 'out'], POINTER(POINTER(ISynchronizeParameters)), 'ppSynchronizeParameters' )),
    COMMETHOD(['propputref', helpstring(u'The parameters controlling orthorectification of raster datasets built by this raster type.')], HRESULT, 'OrthorectificationParameters',
              ( ['in'], POINTER(IGeometricFunctionArguments), 'ppIGeometricFunctionArguments' )),
    COMMETHOD(['propget', helpstring(u'The parameters controlling orthorectification of raster datasets built by this raster type.')], HRESULT, 'OrthorectificationParameters',
              ( ['retval', 'out'], POINTER(POINTER(IGeometricFunctionArguments)), 'ppIGeometricFunctionArguments' )),
    COMMETHOD(['propput', helpstring(u"The time when this raster type was first used for adding rasters to the mosaic dataset. The value in this property also appears in the moasic dataset's raster type table.")], HRESULT, 'FirstAddTimeStamp',
              ( ['in'], c_double, 'pFirstAddTimeStamp' )),
    COMMETHOD(['propget', helpstring(u"The time when this raster type was first used for adding rasters to the mosaic dataset. The value in this property also appears in the moasic dataset's raster type table.")], HRESULT, 'FirstAddTimeStamp',
              ( ['retval', 'out'], POINTER(c_double), 'pFirstAddTimeStamp' )),
    COMMETHOD(['propput', helpstring(u"The time when this raster type was last used for adding rasters to the mosaic dataset. The value in this property also appears in the moasic dataset's raster type table.")], HRESULT, 'LastAddTimeStamp',
              ( ['in'], c_double, 'pLastAddTimeStamp' )),
    COMMETHOD(['propget', helpstring(u"The time when this raster type was last used for adding rasters to the mosaic dataset. The value in this property also appears in the moasic dataset's raster type table.")], HRESULT, 'LastAddTimeStamp',
              ( ['retval', 'out'], POINTER(c_double), 'pLastAddTimeStamp' )),
    COMMETHOD(['propput', helpstring(u"The time when this raster type was last used for synchronizing one or more rasters in the mosaic dataset. The value in this property also appears in the moasic dataset's raster type table.")], HRESULT, 'LastSyncTimeStamp',
              ( ['in'], c_double, 'pLastSyncTimeStamp' )),
    COMMETHOD(['propget', helpstring(u"The time when this raster type was last used for synchronizing one or more rasters in the mosaic dataset. The value in this property also appears in the moasic dataset's raster type table.")], HRESULT, 'LastSyncTimeStamp',
              ( ['retval', 'out'], POINTER(c_double), 'pLastSyncTimeStamp' )),
    COMMETHOD(['propput', helpstring(u'A user-identifiable description of the collection of items added by this raster type instance.')], HRESULT, 'OperationDescription',
              ( ['in'], BSTR, 'pOperationDescription' )),
    COMMETHOD(['propget', helpstring(u'A user-identifiable description of the collection of items added by this raster type instance.')], HRESULT, 'OperationDescription',
              ( ['retval', 'out'], POINTER(BSTR), 'pOperationDescription' )),
]
################################################################
## code template for IRasterTypeProperties implementation
##class IRasterTypeProperties_Impl(object):
##    @property
##    def OrthorectificationParameters(self, ppIGeometricFunctionArguments):
##        u'The parameters controlling orthorectification of raster datasets built by this raster type.'
##        #return 
##
##    def _get(self):
##        u"The time when this raster type was last used for synchronizing one or more rasters in the mosaic dataset. The value in this property also appears in the moasic dataset's raster type table."
##        #return pLastSyncTimeStamp
##    def _set(self, pLastSyncTimeStamp):
##        u"The time when this raster type was last used for synchronizing one or more rasters in the mosaic dataset. The value in this property also appears in the moasic dataset's raster type table."
##    LastSyncTimeStamp = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u"The time when this raster type was last used for adding rasters to the mosaic dataset. The value in this property also appears in the moasic dataset's raster type table."
##        #return pLastAddTimeStamp
##    def _set(self, pLastAddTimeStamp):
##        u"The time when this raster type was last used for adding rasters to the mosaic dataset. The value in this property also appears in the moasic dataset's raster type table."
##    LastAddTimeStamp = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'A user-identifiable description of the collection of items added by this raster type instance.'
##        #return pOperationDescription
##    def _set(self, pOperationDescription):
##        u'A user-identifiable description of the collection of items added by this raster type instance.'
##    OperationDescription = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u"Regular expression formed using wild card characters ('*', '?', or '.') for matching data source items requested for URI constructions. No item URIs are created for input that doesn't match the specified regular expression."
##        #return pDataSourceFilter
##    def _set(self, pDataSourceFilter):
##        u"Regular expression formed using wild card characters ('*', '?', or '.') for matching data source items requested for URI constructions. No item URIs are created for input that doesn't match the specified regular expression."
##    DataSourceFilter = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The types of input data source types as a bitwise combination of esriCrawlerDataSourceType values.'
##        #return pInputDataSourceTypes
##    def _set(self, pInputDataSourceTypes):
##        u'The types of input data source types as a bitwise combination of esriCrawlerDataSourceType values.'
##    InputDataSourceTypes = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The parameters controlling how rasters are added using this raster type.'
##        #return ppAddRastersParameters
##    def _set(self, ppAddRastersParameters):
##        u'The parameters controlling how rasters are added using this raster type.'
##    AddRastersParameters = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether the raster type supports stereo.'
##        #return pbSupportsStereo
##    def _set(self, pbSupportsStereo):
##        u'Indicates whether the raster type supports stereo.'
##    SupportsStereo = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether datasets are clipped to their footprints.'
##        #return pbEnableClipToFootprint
##    def _set(self, pbEnableClipToFootprint):
##        u'Indicates whether datasets are clipped to their footprints.'
##    EnableClipToFootprint = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether the raster type supports seamline.'
##        #return pbSupportsSeamline
##    def _set(self, pbSupportsSeamline):
##        u'Indicates whether the raster type supports seamline.'
##    SupportsSeamline = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether the raster type supports orthorectification.'
##        #return pbSupportsOrthorectification
##    def _set(self, pbSupportsOrthorectification):
##        u'Indicates whether the raster type supports orthorectification.'
##    SupportsOrthorectification = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u"The time when this raster type was first used for adding rasters to the mosaic dataset. The value in this property also appears in the moasic dataset's raster type table."
##        #return pFirstAddTimeStamp
##    def _set(self, pFirstAddTimeStamp):
##        u"The time when this raster type was first used for adding rasters to the mosaic dataset. The value in this property also appears in the moasic dataset's raster type table."
##    FirstAddTimeStamp = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Description of the raster type.'
##        #return pRasterTypeDescription
##    def _set(self, pRasterTypeDescription):
##        u'Description of the raster type.'
##    Description = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SupportedURIFilters(self, pppItemURIFilterArray):
##        u'Default URI filters supported by the raster type.'
##        #return 
##
##    def _get(self):
##        u'The parameters controlling how rasters are synchronized using this raster type instance.'
##        #return ppSynchronizeParameters
##    def _set(self, ppSynchronizeParameters):
##        u'The parameters controlling how rasters are synchronized using this raster type instance.'
##    SynchronizeParameters = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Name of the raster type.'
##        #return pRasterTypeName
##    def _set(self, pRasterTypeName):
##        u'Name of the raster type.'
##    Name = property(_get, _set, doc = _set.__doc__)
##

IRasterTypeProperties2._methods_ = [
    COMMETHOD(['propput', helpstring(u'Indicates whether the raster type processes sensor data sources (as opposed to regular raster data sources).')], HRESULT, 'IsSensorRasterType',
              ( ['in'], VARIANT_BOOL, 'pbIsSensorRasterType' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the raster type processes sensor data sources (as opposed to regular raster data sources).')], HRESULT, 'IsSensorRasterType',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbIsSensorRasterType' )),
    COMMETHOD(['propputref', helpstring(u'All the names, in addition to the primary name, by which the raster type may be referenced. ')], HRESULT, 'Aliases',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray), 'ppAliases' )),
    COMMETHOD(['propget', helpstring(u'All the names, in addition to the primary name, by which the raster type may be referenced. ')], HRESULT, 'Aliases',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray)), 'ppAliases' )),
    COMMETHOD(['propput', helpstring(u"Indicates whether the function raster datasets generated by the raster type should be simplified before being added to the mosaic dataset by 'AddRasters' or 'SynchronizeItems' operations.")], HRESULT, 'AllowSimplification',
              ( ['in'], VARIANT_BOOL, 'pbAllowSimplification' )),
    COMMETHOD(['propget', helpstring(u"Indicates whether the function raster datasets generated by the raster type should be simplified before being added to the mosaic dataset by 'AddRasters' or 'SynchronizeItems' operations.")], HRESULT, 'AllowSimplification',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbAllowSimplification' )),
    COMMETHOD(['propput', helpstring(u'The version number associated with the raster type.')], HRESULT, 'Version',
              ( ['in'], c_int, 'pVersion' )),
    COMMETHOD(['propget', helpstring(u'The version number associated with the raster type.')], HRESULT, 'Version',
              ( ['retval', 'out'], POINTER(c_int), 'pVersion' )),
    COMMETHOD(['propget', helpstring(u"Indicates how the raster type behaves when a band requested by the mosaic dataset's band definition is not found in the input raster.")], HRESULT, 'MissingBandAction',
              ( ['retval', 'out'], POINTER(esriMissingBandAction), 'pMissingBandAction' )),
    COMMETHOD(['propput', helpstring(u"Indicates how the raster type behaves when a band requested by the mosaic dataset's band definition is not found in the input raster.")], HRESULT, 'MissingBandAction',
              ( ['in'], esriMissingBandAction, 'pMissingBandAction' )),
    COMMETHOD(['propputref', helpstring(u'The CLSID of the raster type factory that created the raster type.')], HRESULT, 'FactoryCLSID',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IUID), 'ppFactoryClsid' )),
    COMMETHOD(['propget', helpstring(u'The CLSID of the raster type factory that created the raster type.')], HRESULT, 'FactoryCLSID',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IUID)), 'ppFactoryClsid' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the raster type supports color correction.')], HRESULT, 'SupportsColorCorrection',
              ( ['in'], VARIANT_BOOL, 'pbSupportsColorCorrection' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the raster type supports color correction.')], HRESULT, 'SupportsColorCorrection',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbSupportsColorCorrection' )),
]
################################################################
## code template for IRasterTypeProperties2 implementation
##class IRasterTypeProperties2_Impl(object):
##    def _get(self):
##        u'Indicates whether the raster type processes sensor data sources (as opposed to regular raster data sources).'
##        #return pbIsSensorRasterType
##    def _set(self, pbIsSensorRasterType):
##        u'Indicates whether the raster type processes sensor data sources (as opposed to regular raster data sources).'
##    IsSensorRasterType = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def FactoryCLSID(self, ppFactoryClsid):
##        u'The CLSID of the raster type factory that created the raster type.'
##        #return 
##
##    def _get(self):
##        u"Indicates how the raster type behaves when a band requested by the mosaic dataset's band definition is not found in the input raster."
##        #return pMissingBandAction
##    def _set(self, pMissingBandAction):
##        u"Indicates how the raster type behaves when a band requested by the mosaic dataset's band definition is not found in the input raster."
##    MissingBandAction = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The version number associated with the raster type.'
##        #return pVersion
##    def _set(self, pVersion):
##        u'The version number associated with the raster type.'
##    Version = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Aliases(self, ppAliases):
##        u'All the names, in addition to the primary name, by which the raster type may be referenced. '
##        #return 
##
##    def _get(self):
##        u'Indicates whether the raster type supports color correction.'
##        #return pbSupportsColorCorrection
##    def _set(self, pbSupportsColorCorrection):
##        u'Indicates whether the raster type supports color correction.'
##    SupportsColorCorrection = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u"Indicates whether the function raster datasets generated by the raster type should be simplified before being added to the mosaic dataset by 'AddRasters' or 'SynchronizeItems' operations."
##        #return pbAllowSimplification
##    def _set(self, pbAllowSimplification):
##        u"Indicates whether the function raster datasets generated by the raster type should be simplified before being added to the mosaic dataset by 'AddRasters' or 'SynchronizeItems' operations."
##    AllowSimplification = property(_get, _set, doc = _set.__doc__)
##

class PansharpeningFunction(CoClass):
    u'A class for a sharpening raster function.'
    _reg_clsid_ = GUID('{B54E8861-FCF0-4642-908A-360E1BF5EA79}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
PansharpeningFunction._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunction, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class ArrayCrawler(CoClass):
    u'A crawler for an array of strings.'
    _reg_clsid_ = GUID('{4A5FF13E-95AE-411B-A8AE-3DFDCBBFBDEC}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
ArrayCrawler._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDataSourceCrawler, IArrayCrawler]

class IRasterFunctionHelper2(IRasterFunctionHelper):
    _case_insensitive_ = True
    u'Provides access to members that control a raster function helper.'
    _iid_ = GUID('{EB3AA1A6-1FA8-4F1B-9A4A-653A5D553212}')
    _idlflags_ = ['oleautomation']
IRasterFunctionHelper2._methods_ = [
    COMMETHOD([helpstring(u'Clears referenced objects in this raster function helper.')], HRESULT, 'Clear'),
]
################################################################
## code template for IRasterFunctionHelper2 implementation
##class IRasterFunctionHelper2_Impl(object):
##    def Clear(self):
##        u'Clears referenced objects in this raster function helper.'
##        #return 
##

class IArithmeticFunctionArguments(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control arithmetic function arguments.'
    _iid_ = GUID('{F1A4A7AF-BDDD-43B8-89C0-6768675DDD0D}')
    _idlflags_ = ['oleautomation']
class IArithmeticFunctionArguments2(IArithmeticFunctionArguments):
    _case_insensitive_ = True
    u'Provides access to additional members that control arithmetic function arguments.'
    _iid_ = GUID('{F2063A93-E7B8-4654-809D-9E045B3BEDB7}')
    _idlflags_ = ['oleautomation']
IArithmeticFunctionArguments._methods_ = [
    COMMETHOD(['propget', helpstring(u'The 1st raster object.')], HRESULT, 'Raster',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppRaster' )),
    COMMETHOD(['propputref', helpstring(u'The 1st raster object.')], HRESULT, 'Raster',
              ( ['in'], POINTER(IUnknown), 'ppRaster' )),
    COMMETHOD(['propget', helpstring(u'The 2nd raster object.')], HRESULT, 'Raster2',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppRaster' )),
    COMMETHOD(['propputref', helpstring(u'The 2nd raster object.')], HRESULT, 'Raster2',
              ( ['in'], POINTER(IUnknown), 'ppRaster' )),
    COMMETHOD(['propput', helpstring(u'The arithmetic operation.')], HRESULT, 'Operation',
              ( ['in'], esriRasterArithmeticOperation, 'pOperation' )),
    COMMETHOD(['propget', helpstring(u'The arithmetic operation.')], HRESULT, 'Operation',
              ( ['retval', 'out'], POINTER(esriRasterArithmeticOperation), 'pOperation' )),
]
################################################################
## code template for IArithmeticFunctionArguments implementation
##class IArithmeticFunctionArguments_Impl(object):
##    def Raster2(self, ppRaster):
##        u'The 2nd raster object.'
##        #return 
##
##    def Raster(self, ppRaster):
##        u'The 1st raster object.'
##        #return 
##
##    def _get(self):
##        u'The arithmetic operation.'
##        #return pOperation
##    def _set(self, pOperation):
##        u'The arithmetic operation.'
##    Operation = property(_get, _set, doc = _set.__doc__)
##

IArithmeticFunctionArguments2._methods_ = [
    COMMETHOD(['propget', helpstring(u'The different ways for estimating extent.')], HRESULT, 'ExtentType',
              ( ['retval', 'out'], POINTER(esriExtentType), 'pType' )),
    COMMETHOD(['propput', helpstring(u'The different ways for estimating extent.')], HRESULT, 'ExtentType',
              ( ['in'], esriExtentType, 'pType' )),
    COMMETHOD(['propget', helpstring(u'The different ways for estimating cellsize.')], HRESULT, 'CellsizeType',
              ( ['retval', 'out'], POINTER(esriCellsizeType), 'pType' )),
    COMMETHOD(['propput', helpstring(u'The different ways for estimating cellsize.')], HRESULT, 'CellsizeType',
              ( ['in'], esriCellsizeType, 'pType' )),
]
################################################################
## code template for IArithmeticFunctionArguments2 implementation
##class IArithmeticFunctionArguments2_Impl(object):
##    def _get(self):
##        u'The different ways for estimating extent.'
##        #return pType
##    def _set(self, pType):
##        u'The different ways for estimating extent.'
##    ExtentType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The different ways for estimating cellsize.'
##        #return pType
##    def _set(self, pType):
##        u'The different ways for estimating cellsize.'
##    CellsizeType = property(_get, _set, doc = _set.__doc__)
##

class GenericObjectCrawler(CoClass):
    u'A crawler for objects.'
    _reg_clsid_ = GUID('{FFA21592-9238-4402-98F6-0253312512DD}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
GenericObjectCrawler._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDataSourceCrawler, IGenericObjectCrawler]

class AddRastersParameters(CoClass):
    u'An object that controls how rasters are added to a mosaic dataset.'
    _reg_clsid_ = GUID('{50088AFF-736A-4448-B00A-18EB0C4971EA}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IBuildPyramidsParameters(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control parameters for building pyramids of a mosaic dataset.'
    _iid_ = GUID('{A4A2E058-841D-43FC-A6B6-0783E5473A84}')
    _idlflags_ = ['oleautomation']
class ICalculateStatisticsParameters(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control parameters for calculating statistics of a mosaic dataset.'
    _iid_ = GUID('{CE8ED17C-1C4D-4EEC-8259-77B784CD8DE9}')
    _idlflags_ = ['oleautomation']
AddRastersParameters._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMosaicDatasetOperationParameters, IMosaicDatasetOperationParameters2, IAddRastersParameters, ISynchronizeParameters, ISynchronizeParameters2, IBuildPyramidsParameters, ICalculateStatisticsParameters, IThreadedOperationParameters]

class ItemURIArray(CoClass):
    u'An array of item URI objects.'
    _reg_clsid_ = GUID('{CF04981C-4CEE-43CD-AA52-86DCF456409B}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
ItemURIArray._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IItemURIArray, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class ExportItemsParameters(CoClass):
    u'An object that controls how items in a mosaic dataset are exported.'
    _reg_clsid_ = GUID('{67BF4302-F17B-491C-B0FD-CAA67B7992B3}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IBuildPyramidsParameters2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control parameters for building pyramids of a mosaic dataset.'
    _iid_ = GUID('{D686E327-7F25-4840-BD11-A91A072C7044}')
    _idlflags_ = ['oleautomation']
ExportItemsParameters._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMosaicDatasetOperationParameters, IExportItemsParameters, IBuildPyramidsParameters, IBuildPyramidsParameters2, ICalculateStatisticsParameters, ISelectionParameters, IThreadedOperationParameters]

class PixelBlockCursor(CoClass):
    u'A PixelBlock cursor class.'
    _reg_clsid_ = GUID('{A0DC85B9-FB40-4839-B4FB-AA0EA4FB4229}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
PixelBlockCursor._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IPixelBlockCursor]

class BuilderItem(CoClass):
    u'An item built by a raster builder.'
    _reg_clsid_ = GUID('{E9432EF9-9A04-4E89-A956-E3757DAE3F5C}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
BuilderItem._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IBuilderItem, IBuilderItem2, IBuilderItem3, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersionSupportGEN]

IRasterColormap4._methods_ = [
    COMMETHOD(['propget', helpstring(u'The list of pixel values.')], HRESULT, 'Values',
              ( ['retval', 'out'], POINTER(VARIANT), 'pValues' )),
    COMMETHOD(['propput', helpstring(u'The list of pixel values.')], HRESULT, 'Values',
              ( ['in'], VARIANT, 'pValues' )),
    COMMETHOD([helpstring(u'Queries minimum and maximum pixel values.')], HRESULT, 'QueryMinMax',
              ( ['out'], POINTER(c_int), 'Min' ),
              ( ['out'], POINTER(c_int), 'Max' )),
    COMMETHOD([helpstring(u'Loads from a colormap definition string.')], HRESULT, 'LoadFromString',
              ( ['in'], BSTR, 'colormapDefinition' )),
    COMMETHOD(['propget', helpstring(u'The number of colors in this colormap.')], HRESULT, 'Size',
              ( ['retval', 'out'], POINTER(c_int), 'Size' )),
]
################################################################
## code template for IRasterColormap4 implementation
##class IRasterColormap4_Impl(object):
##    def QueryMinMax(self):
##        u'Queries minimum and maximum pixel values.'
##        #return Min, Max
##
##    @property
##    def Size(self):
##        u'The number of colors in this colormap.'
##        #return Size
##
##    def _get(self):
##        u'The list of pixel values.'
##        #return pValues
##    def _set(self, pValues):
##        u'The list of pixel values.'
##    Values = property(_get, _set, doc = _set.__doc__)
##
##    def LoadFromString(self, colormapDefinition):
##        u'Loads from a colormap definition string.'
##        #return 
##

class RasterBand(CoClass):
    u'A representation of a single band of a raster dataset on disk.'
    _reg_clsid_ = GUID('{7ACA3D08-0629-11D2-8D24-0000F8780535}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IRasterTable(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a raster table.'
    _iid_ = GUID('{7ACA3D04-0629-11D2-8D24-0000F8780535}')
    _idlflags_ = ['oleautomation']
class IRawBlocks(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control raw pixel block access.'
    _iid_ = GUID('{F20FF8FF-643A-4669-A465-E14A5095E7DD}')
    _idlflags_ = ['oleautomation']
class IRasterBandColormap(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the colormap of a raster band.'
    _iid_ = GUID('{9D6C37EE-982A-4D99-8BA1-4EBDD6D772F8}')
    _idlflags_ = ['oleautomation', 'hidden']
RasterBand._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterBand, IRasterBandEdit, IRasterBandEdit2, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.INativeTypeInfo, IRasterProps, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataset, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IObjectClass, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeoDataset, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterDataset, IRasterTable, IRasterPyramid, IRawPixels, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IMetadata, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IMetadataEdit, IRasterTransaction, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, IRawBlocks, IRasterBandColormap]

class CalculateCellSizeRangesParameters(CoClass):
    u'An object that controls how visibility ranges for items in a mosaic dataset are computed.'
    _reg_clsid_ = GUID('{0B50D766-210D-4526-8919-C324BA171507}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
CalculateCellSizeRangesParameters._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMosaicDatasetOperationParameters, ICalculateCellSizeRangesParameters, ISelectionParameters]

class FootprintFunction(CoClass):
    u'The raster function for generating a raster footprint.'
    _reg_clsid_ = GUID('{4861CC7D-5D08-4AF2-B69B-49C8E90CA84B}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
FootprintFunction._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunction, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class PanSharpenGramSchmidtFunctionArguments(CoClass):
    u'Pan Sharpen Gram Schmidt function arguments.'
    _reg_clsid_ = GUID('{767381FF-3ECC-4685-8997-4F2E0F523CEC}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
PanSharpenGramSchmidtFunctionArguments._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunctionArguments, IPanSharpenGramSchmidtFunctionArguments, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

IRawBlocks._methods_ = [
    COMMETHOD(['propget', helpstring(u'The raster information.')], HRESULT, 'RasterInfo',
              ( ['retval', 'out'], POINTER(POINTER(IRasterInfo)), 'ppRasterInfo' )),
    COMMETHOD([helpstring(u'Create a compatible pixel block.')], HRESULT, 'CreatePixelBlock',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IPixelBlock)), 'ppPixelBlock' )),
    COMMETHOD([helpstring(u'Reads a raw pixel block.')], HRESULT, 'ReadBlock',
              ( ['in'], c_int, 'tx' ),
              ( ['in'], c_int, 'ty' ),
              ( ['in'], c_int, 'Level' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IPixelBlock), 'pPixelBlock' )),
    COMMETHOD([helpstring(u'Writes a raw pixel block.')], HRESULT, 'WriteBlock',
              ( ['in'], c_int, 'tx' ),
              ( ['in'], c_int, 'ty' ),
              ( ['in'], c_int, 'Level' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IPixelBlock), 'pPixelBlock' )),
    COMMETHOD([helpstring(u'Flushes buffered data.')], HRESULT, 'Flush'),
]
################################################################
## code template for IRawBlocks implementation
##class IRawBlocks_Impl(object):
##    def WriteBlock(self, tx, ty, Level, pPixelBlock):
##        u'Writes a raw pixel block.'
##        #return 
##
##    def Flush(self):
##        u'Flushes buffered data.'
##        #return 
##
##    @property
##    def RasterInfo(self):
##        u'The raster information.'
##        #return ppRasterInfo
##
##    def ReadBlock(self, tx, ty, Level, pPixelBlock):
##        u'Reads a raw pixel block.'
##        #return 
##
##    def CreatePixelBlock(self):
##        u'Create a compatible pixel block.'
##        #return ppPixelBlock
##

class KauthThomasFunction(CoClass):
    u'The Tasseled Cap (Kauth-Thomas) function.'
    _reg_clsid_ = GUID('{A19473EA-D62D-4610-833F-F2B3D4BCB8E4}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
KauthThomasFunction._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunction, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

IPointMeasurement._methods_ = [
    COMMETHOD(['propget', helpstring(u'The error covariance matrix that is associated with this IPointMeasurement.')], HRESULT, 'ErrorCovarianceMatrix',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray)), 'ppErrorCovMatrix' )),
    COMMETHOD(['propput', helpstring(u'The error covariance matrix that is associated with this IPointMeasurement.')], HRESULT, 'ErrorCovarianceMatrix',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray), 'ppErrorCovMatrix' )),
    COMMETHOD(['propget', helpstring(u'The unit of the horizontal axes for this IPointMeasurement.')], HRESULT, 'HorizontalUnit',
              ( ['retval', 'out'], POINTER(BSTR), 'pHorizontalUnit' )),
    COMMETHOD(['propput', helpstring(u'The unit of the horizontal axes for this IPointMeasurement.')], HRESULT, 'HorizontalUnit',
              ( ['in'], BSTR, 'pHorizontalUnit' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the unit of the horizontal axes is a linear unit.')], HRESULT, 'IsHorizontalUnitLinear',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pIsLinearUnit' )),
    COMMETHOD([helpstring(u'Resets all the properties of this IPointMeasurement to their default values.')], HRESULT, 'Reset'),
    COMMETHOD(['propget', helpstring(u'The unit of the vertical axis for this IPointMeasurement.')], HRESULT, 'VerticalUnit',
              ( ['retval', 'out'], POINTER(BSTR), 'pVeritcalUnit' )),
    COMMETHOD(['propput', helpstring(u'The unit of the vertical axis for this IPointMeasurement.')], HRESULT, 'VerticalUnit',
              ( ['in'], BSTR, 'pVeritcalUnit' )),
    COMMETHOD(['propget', helpstring(u'The X or longitude measurement.')], HRESULT, 'XCoordinate',
              ( ['retval', 'out'], POINTER(c_double), 'pXCoordinate' )),
    COMMETHOD(['propput', helpstring(u'The X or longitude measurement.')], HRESULT, 'XCoordinate',
              ( ['in'], c_double, 'pXCoordinate' )),
    COMMETHOD(['propget', helpstring(u'The Y or latitude measurement.')], HRESULT, 'YCoordinate',
              ( ['retval', 'out'], POINTER(c_double), 'pYCoordinate' )),
    COMMETHOD(['propput', helpstring(u'The Y or latitude measurement.')], HRESULT, 'YCoordinate',
              ( ['in'], c_double, 'pYCoordinate' )),
    COMMETHOD(['propget', helpstring(u'The Z or orthometric height measurement.')], HRESULT, 'ZCoordinate',
              ( ['retval', 'out'], POINTER(c_double), 'pZCoordinate' )),
    COMMETHOD(['propput', helpstring(u'The Z or orthometric height measurement.')], HRESULT, 'ZCoordinate',
              ( ['in'], c_double, 'pZCoordinate' )),
]
################################################################
## code template for IPointMeasurement implementation
##class IPointMeasurement_Impl(object):
##    def Reset(self):
##        u'Resets all the properties of this IPointMeasurement to their default values.'
##        #return 
##
##    def _get(self):
##        u'The X or longitude measurement.'
##        #return pXCoordinate
##    def _set(self, pXCoordinate):
##        u'The X or longitude measurement.'
##    XCoordinate = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def IsHorizontalUnitLinear(self):
##        u'Indicates if the unit of the horizontal axes is a linear unit.'
##        #return pIsLinearUnit
##
##    def _get(self):
##        u'The unit of the horizontal axes for this IPointMeasurement.'
##        #return pHorizontalUnit
##    def _set(self, pHorizontalUnit):
##        u'The unit of the horizontal axes for this IPointMeasurement.'
##    HorizontalUnit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The error covariance matrix that is associated with this IPointMeasurement.'
##        #return ppErrorCovMatrix
##    def _set(self, ppErrorCovMatrix):
##        u'The error covariance matrix that is associated with this IPointMeasurement.'
##    ErrorCovarianceMatrix = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The unit of the vertical axis for this IPointMeasurement.'
##        #return pVeritcalUnit
##    def _set(self, pVeritcalUnit):
##        u'The unit of the vertical axis for this IPointMeasurement.'
##    VerticalUnit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The Y or latitude measurement.'
##        #return pYCoordinate
##    def _set(self, pYCoordinate):
##        u'The Y or latitude measurement.'
##    YCoordinate = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The Z or orthometric height measurement.'
##        #return pZCoordinate
##    def _set(self, pZCoordinate):
##        u'The Z or orthometric height measurement.'
##    ZCoordinate = property(_get, _set, doc = _set.__doc__)
##

IImageMatchPoints._methods_ = [
    COMMETHOD(['propget', helpstring(u'The image match point count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propget', helpstring(u'The image match point at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'index' ),
              ( ['retval', 'out'], POINTER(POINTER(IImageMatchPoint)), 'ppMatchPoint' )),
    COMMETHOD([helpstring(u'Removes the image match point at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'index' )),
    COMMETHOD([helpstring(u'Removes all image match points.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Adds a image match point.')], HRESULT, 'Add',
              ( ['in'], POINTER(IImageMatchPoint), 'pMatchPoint' )),
    COMMETHOD([helpstring(u'Adds a image match point at the specified position.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'index' ),
              ( ['in'], POINTER(IImageMatchPoint), 'pMatchPoint' )),
    COMMETHOD(['propget', helpstring(u"The match points' From image ID.")], HRESULT, 'FromImageID',
              ( ['retval', 'out'], POINTER(c_int), 'pImageID' )),
    COMMETHOD(['propput', helpstring(u"The match points' From image ID.")], HRESULT, 'FromImageID',
              ( ['in'], c_int, 'pImageID' )),
    COMMETHOD(['propget', helpstring(u"The match points' To image ID.")], HRESULT, 'ToImageID',
              ( ['retval', 'out'], POINTER(c_int), 'pImageID' )),
    COMMETHOD(['propput', helpstring(u"The match points' To image ID.")], HRESULT, 'ToImageID',
              ( ['in'], c_int, 'pImageID' )),
]
################################################################
## code template for IImageMatchPoints implementation
##class IImageMatchPoints_Impl(object):
##    @property
##    def Count(self):
##        u'The image match point count.'
##        #return pCount
##
##    def Insert(self, index, pMatchPoint):
##        u'Adds a image match point at the specified position.'
##        #return 
##
##    def _get(self):
##        u"The match points' From image ID."
##        #return pImageID
##    def _set(self, pImageID):
##        u"The match points' From image ID."
##    FromImageID = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u"The match points' To image ID."
##        #return pImageID
##    def _set(self, pImageID):
##        u"The match points' To image ID."
##    ToImageID = property(_get, _set, doc = _set.__doc__)
##
##    def Remove(self, index):
##        u'Removes the image match point at the specified position.'
##        #return 
##
##    @property
##    def Element(self, index):
##        u'The image match point at the specified position.'
##        #return ppMatchPoint
##
##    def RemoveAll(self):
##        u'Removes all image match points.'
##        #return 
##
##    def Add(self, pMatchPoint):
##        u'Adds a image match point.'
##        #return 
##

IRasterFunctionCollection._methods_ = [
]
################################################################
## code template for IRasterFunctionCollection implementation
##class IRasterFunctionCollection_Impl(object):

class GrayscaleFunctionArguments(CoClass):
    u'The greyscale conversion function arguments.'
    _reg_clsid_ = GUID('{CD0E53BF-6D15-48B6-A7C4-3971365813AA}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
GrayscaleFunctionArguments._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunctionArguments, IRasterFunctionArguments2, IGrayscaleFunctionArguments, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class IdentityFunction(CoClass):
    u'A class for an identity raster function.'
    _reg_clsid_ = GUID('{DC71D132-E02E-4DFF-852B-7E1F10024D9B}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
IdentityFunction._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunction, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, IRasterKeyProperties]

class IRasterDatasetJukebox(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control subdatasets.'
    _iid_ = GUID('{93607A44-E66B-4E6F-BD9B-E34CB8DE213E}')
    _idlflags_ = ['oleautomation']
IRasterDatasetJukebox._methods_ = [
    COMMETHOD(['propget', helpstring(u'The number of subdatasets.')], HRESULT, 'SubdatasetCount',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propget', helpstring(u'The current active subdataset.')], HRESULT, 'Subdataset',
              ( ['retval', 'out'], POINTER(c_int), 'pSubdatasetID' )),
    COMMETHOD(['propput', helpstring(u'The current active subdataset.')], HRESULT, 'Subdataset',
              ( ['in'], c_int, 'pSubdatasetID' )),
    COMMETHOD(['propget', helpstring(u'The given subdataset name.')], HRESULT, 'SubdatasetName',
              ( ['in'], c_int, 'SubdatasetID' ),
              ( ['retval', 'out'], POINTER(BSTR), 'pName' )),
    COMMETHOD(['propget', helpstring(u'The given subdataset description.')], HRESULT, 'SubdatasetDescription',
              ( ['in'], c_int, 'SubdatasetID' ),
              ( ['retval', 'out'], POINTER(BSTR), 'pDescription' )),
]
################################################################
## code template for IRasterDatasetJukebox implementation
##class IRasterDatasetJukebox_Impl(object):
##    def _get(self):
##        u'The current active subdataset.'
##        #return pSubdatasetID
##    def _set(self, pSubdatasetID):
##        u'The current active subdataset.'
##    Subdataset = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SubdatasetCount(self):
##        u'The number of subdatasets.'
##        #return pCount
##
##    @property
##    def SubdatasetName(self, SubdatasetID):
##        u'The given subdataset name.'
##        #return pName
##
##    @property
##    def SubdatasetDescription(self, SubdatasetID):
##        u'The given subdataset description.'
##        #return pDescription
##

class RasterTypeEnvironment(CoClass):
    u'The raster type environment.'
    _reg_clsid_ = GUID('{D7083778-3135-4BF9-A727-B37E5DDC3FE7}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IRasterTypeEnvironment2(IRasterTypeEnvironment):
    _case_insensitive_ = True
    u'Provides access to members that control the raster type environment.'
    _iid_ = GUID('{FBEFE2CD-7605-48B6-9663-E0588776E120}')
    _idlflags_ = ['oleautomation']
RasterTypeEnvironment._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterTypeEnvironment, IRasterTypeEnvironment2, IRasterTypeDataSourceHandler]

class IPixelReader(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a pixel reader.'
    _iid_ = GUID('{8A3B7C7C-4ACE-4628-8C24-F67834FA2577}')
    _idlflags_ = ['oleautomation']
class IPixelReader2(IPixelReader):
    _case_insensitive_ = True
    u'Provides access to members that control a pixel reader.'
    _iid_ = GUID('{E0F724C5-5ABE-4A4D-8916-702CDA40EAA8}')
    _idlflags_ = ['oleautomation']
IPixelReader._methods_ = [
    COMMETHOD(['propget', helpstring(u'The source pixel type.')], HRESULT, 'PixelType',
              ( ['retval', 'out'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.rstPixelType), 'pPixelType' )),
    COMMETHOD(['propget', helpstring(u'The number of source bands.')], HRESULT, 'BandCount',
              ( ['retval', 'out'], POINTER(c_int), 'pBandCount' )),
    COMMETHOD(['propget', helpstring(u'The source full extent.')], HRESULT, 'Extent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'ppExtent' )),
    COMMETHOD(['propget', helpstring(u'The source original cell size.')], HRESULT, 'CellSize',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IPnt)), 'ppCellsize' )),
    COMMETHOD(['propget', helpstring(u'The maximum available source pyramid level.')], HRESULT, 'MaximumPyramidLevel',
              ( ['retval', 'out'], POINTER(c_int), 'pMaxLevel' )),
    COMMETHOD(['propget', helpstring(u'The first available source pyramid level.')], HRESULT, 'FirstPyramidLevel',
              ( ['retval', 'out'], POINTER(c_int), 'pFirstLevel' )),
    COMMETHOD(['propget', helpstring(u'The current source pyramid level.')], HRESULT, 'PyramidLevel',
              ( ['retval', 'out'], POINTER(c_int), 'pLevel' )),
    COMMETHOD(['propput', helpstring(u'The current source pyramid level.')], HRESULT, 'PyramidLevel',
              ( ['in'], c_int, 'pLevel' )),
    COMMETHOD([helpstring(u'Reads a pixel block.')], HRESULT, 'Read',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IPnt), 'tlc' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IPixelBlock), 'pPixelBlock' )),
    COMMETHOD([helpstring(u'Snaps a given cellsize to a proper pyramid level.')], HRESULT, 'Snap',
              ( ['in'], c_double, 'Dx' ),
              ( ['in'], c_double, 'Dy' ),
              ( ['retval', 'out'], POINTER(c_int), 'pLevel' )),
    COMMETHOD([helpstring(u'Gets X and Y resolution (cellsize) at a given level.')], HRESULT, 'GetResolution',
              ( ['in'], c_int, 'Level' ),
              ( ['out'], POINTER(c_double), 'pXResolution' ),
              ( ['out'], POINTER(c_double), 'pYResolution' )),
]
################################################################
## code template for IPixelReader implementation
##class IPixelReader_Impl(object):
##    def Read(self, tlc, pPixelBlock):
##        u'Reads a pixel block.'
##        #return 
##
##    @property
##    def PixelType(self):
##        u'The source pixel type.'
##        #return pPixelType
##
##    def _get(self):
##        u'The current source pyramid level.'
##        #return pLevel
##    def _set(self, pLevel):
##        u'The current source pyramid level.'
##    PyramidLevel = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def MaximumPyramidLevel(self):
##        u'The maximum available source pyramid level.'
##        #return pMaxLevel
##
##    @property
##    def CellSize(self):
##        u'The source original cell size.'
##        #return ppCellsize
##
##    @property
##    def Extent(self):
##        u'The source full extent.'
##        #return ppExtent
##
##    def Snap(self, Dx, Dy):
##        u'Snaps a given cellsize to a proper pyramid level.'
##        #return pLevel
##
##    @property
##    def FirstPyramidLevel(self):
##        u'The first available source pyramid level.'
##        #return pFirstLevel
##
##    @property
##    def BandCount(self):
##        u'The number of source bands.'
##        #return pBandCount
##
##    def GetResolution(self, Level):
##        u'Gets X and Y resolution (cellsize) at a given level.'
##        #return pXResolution, pYResolution
##

IPixelReader2._methods_ = [
    COMMETHOD([helpstring(u'Snaps a given cellsize to a proper pyramid level.')], HRESULT, 'Snap2',
              ( ['in'], c_double, 'Dx' ),
              ( ['in'], c_double, 'Dy' ),
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriRasterResamplingHint, 'hint' ),
              ( ['retval', 'out'], POINTER(c_int), 'pLevel' )),
]
################################################################
## code template for IPixelReader2 implementation
##class IPixelReader2_Impl(object):
##    def Snap2(self, Dx, Dy, hint):
##        u'Snaps a given cellsize to a proper pyramid level.'
##        #return pLevel
##

class DefineOverviewsParameters(CoClass):
    u'An object that controls how new overview items are created in a mosaic dataset.'
    _reg_clsid_ = GUID('{3C8017CE-5091-4B09-BA2E-62F15454589A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IOverviewImageParameters(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control overview image parameters.'
    _iid_ = GUID('{DE785FA7-36FA-4B0E-A26C-E04EC264973A}')
    _idlflags_ = ['oleautomation']
DefineOverviewsParameters._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMosaicDatasetOperationParameters, IDefineOverviewsParameters, IOverviewTileParameters, IOverviewTileParameters2, IOverviewImageParameters, ISelectionParameters, IBuildBoundaryParameters, ICalculateCellSizeRangesParameters, IThreadedOperationParameters]

class SimplePixelReader(CoClass):
    u'A simple pixel resampler class.'
    _reg_clsid_ = GUID('{E7B8A209-1EA3-426E-83F7-77740A000E24}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class ISimplePixelReader(IPixelReader):
    _case_insensitive_ = True
    u'Provides access to members that control a simple pixel reader.'
    _iid_ = GUID('{6D4BE802-E5D0-4DAD-B022-B58366952794}')
    _idlflags_ = ['oleautomation']
SimplePixelReader._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IPixelReader, ISimplePixelReader]

class Raster(CoClass):
    u'An in-memory representation of a dynamic raster that can perform resampling and reprojection.'
    _reg_clsid_ = GUID('{C0A039BA-5329-11D2-AAAD-00C04FA375FB}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IRasterEdit(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control pixel block level editing operations.'
    _iid_ = GUID('{32656121-4DF9-45F3-BDD1-507D481E9B49}')
    _idlflags_ = ['oleautomation']
class IRasterDefaultProps(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the default raster properties.'
    _iid_ = GUID('{E3AFBEE0-2DAD-11D3-A3F6-0004AC1B1D86}')
    _idlflags_ = ['oleautomation']
Raster._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster, IRaster2, IRasterEdit, IRasterProps, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeoDataset, IRasterBandCollection, IRasterDefaultProps, IRasterAnalysisProps, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ISaveAs, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ISaveAs2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, IPixelOperation, IRawBlocks, IRasterResamplingControl]

class IItemTemplate2(IItemTemplate):
    _case_insensitive_ = True
    u'Provides access to members that control an item template.'
    _iid_ = GUID('{63215C2B-86B2-4B41-84FB-50283CAD0A7A}')
    _idlflags_ = ['oleautomation']
class IGeoTransformationHelper(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to member that control a geographic transformation helper.'
    _iid_ = GUID('{1E0BD206-6370-4A39-B79A-CAE98F94640B}')
    _idlflags_ = ['oleautomation']
IItemTemplate2._methods_ = [
    COMMETHOD(['propput', helpstring(u'Indicates whether the item template contains functions that enhance a dataset.')], HRESULT, 'SupportsEnhancement',
              ( ['in'], VARIANT_BOOL, 'pbSupportsEnhancement' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the item template contains functions that enhance a dataset.')], HRESULT, 'SupportsEnhancement',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbSupportsEnhancement' )),
    COMMETHOD([helpstring(u'Enable or disable functions that enhance a dataset.')], HRESULT, 'EnableEnhancement',
              ( ['in'], VARIANT_BOOL, 'bEnableEnhancement' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the item template will enhance datasets.')], HRESULT, 'IsEnhancementEnabled',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbEnable' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the item template can be used to build sensor data sources (as opposed to regular raster data sources).')], HRESULT, 'IsSensorTemplate',
              ( ['in'], VARIANT_BOOL, 'pbIsSensorTemplate' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the item template can be used to build sensor data sources (as opposed to regular raster data sources).')], HRESULT, 'IsSensorTemplate',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbIsSensorTemplate' )),
    COMMETHOD(['propputref', helpstring(u"The geographic tranformation helper object, set by the calling application, that enables the item template to install geotransformation method in to the system's GeoTransformationOperationSet.")], HRESULT, 'GeoTransformationHelper',
              ( ['in'], POINTER(IGeoTransformationHelper), 'ppGeoTransformationHelper' )),
    COMMETHOD(['propget', helpstring(u"The geographic tranformation helper object, set by the calling application, that enables the item template to install geotransformation method in to the system's GeoTransformationOperationSet.")], HRESULT, 'GeoTransformationHelper',
              ( ['retval', 'out'], POINTER(POINTER(IGeoTransformationHelper)), 'ppGeoTransformationHelper' )),
    COMMETHOD([helpstring(u'Adds additional outgoing tags for non-primary datasets that can be built using this item template. This method also accepts an optional name of a template function that resides within the primary raster function template associated within this item template wh?!?\x08?&')], HRESULT, 'AddAncillaryDataset',
              ( ['in'], BSTR, 'sOutputDatasetTag' ),
              ( ['in'], BSTR, 'sFunctionTemplateName' ),
              ( ['in'], BSTR, 'sPrimaryChainConnectorVariable' )),
    COMMETHOD([helpstring(u'Returns a collection of tags and associated function template names and connector variables of all non-primary datasets built by the item template.')], HRESULT, 'GetAncillaryDatasets',
              ( ['out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray)), 'ppOutputDatasetTags' ),
              ( ['out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray)), 'ppFunctionTemplateNames' ),
              ( ['out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray)), 'ppPrimaryChainConnectorVariables' )),
]
################################################################
## code template for IItemTemplate2 implementation
##class IItemTemplate2_Impl(object):
##    @property
##    def IsEnhancementEnabled(self):
##        u'Indicates whether the item template will enhance datasets.'
##        #return pbEnable
##
##    def _get(self):
##        u'Indicates whether the item template can be used to build sensor data sources (as opposed to regular raster data sources).'
##        #return pbIsSensorTemplate
##    def _set(self, pbIsSensorTemplate):
##        u'Indicates whether the item template can be used to build sensor data sources (as opposed to regular raster data sources).'
##    IsSensorTemplate = property(_get, _set, doc = _set.__doc__)
##
##    def GetAncillaryDatasets(self):
##        u'Returns a collection of tags and associated function template names and connector variables of all non-primary datasets built by the item template.'
##        #return ppOutputDatasetTags, ppFunctionTemplateNames, ppPrimaryChainConnectorVariables
##
##    @property
##    def GeoTransformationHelper(self, ppGeoTransformationHelper):
##        u"The geographic tranformation helper object, set by the calling application, that enables the item template to install geotransformation method in to the system's GeoTransformationOperationSet."
##        #return 
##
##    def AddAncillaryDataset(self, sOutputDatasetTag, sFunctionTemplateName, sPrimaryChainConnectorVariable):
##        u'Adds additional outgoing tags for non-primary datasets that can be built using this item template. This method also accepts an optional name of a template function that resides within the primary raster function template associated within this item template wh?!?\x08?&'
##        #return 
##
##    def _get(self):
##        u'Indicates whether the item template contains functions that enhance a dataset.'
##        #return pbSupportsEnhancement
##    def _set(self, pbSupportsEnhancement):
##        u'Indicates whether the item template contains functions that enhance a dataset.'
##    SupportsEnhancement = property(_get, _set, doc = _set.__doc__)
##
##    def EnableEnhancement(self, bEnableEnhancement):
##        u'Enable or disable functions that enhance a dataset.'
##        #return 
##

class TerrainBuilder(CoClass):
    u'A raster builder for Terrain data.'
    _reg_clsid_ = GUID('{EA7603F9-A5B5-40C4-A96A-2044965279D8}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
TerrainBuilder._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterBuilder2, IRasterBuilderInit, ITerrainBuilder]

IGeoTransformationHelper._methods_ = [
    COMMETHOD([helpstring(u'Initializes the object given a primary set of geographic transformation operators (GT + direction). Previously installed geotransformation methods are removed from the system.')], HRESULT, 'Init',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeoTransformationOperationSet), 'pGTs' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeographicCoordinateSystem), 'pCompositionGCS' )),
    COMMETHOD([helpstring(u'Sets the system default geographic transformation on the primary operation set if missing.')], HRESULT, 'Install',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'pSourceSR' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'pTargetSR' ),
              ( ['in'], VARIANT_BOOL, 'bAddNew' )),
    COMMETHOD([helpstring(u'All previously installed geotransformation methods are removed from the system.')], HRESULT, 'RemoveAll'),
    COMMETHOD(['propputref', helpstring(u"The collection of ISpatialReference objects used as default target coordinate systems by the 'Install' method if the 'pTargetSR' argument is not specified.")], HRESULT, 'DefaultTargetCoordinateSystems',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'ppDefaultTargetCoordinateSystems' )),
    COMMETHOD(['propget', helpstring(u"The collection of ISpatialReference objects used as default target coordinate systems by the 'Install' method if the 'pTargetSR' argument is not specified.")], HRESULT, 'DefaultTargetCoordinateSystems',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'ppDefaultTargetCoordinateSystems' )),
    COMMETHOD([helpstring(u'Sets the system default geographic transformation on the primary operation set if missing.')], HRESULT, 'Set',
              ( ['in'], comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.esriTransformDirection, 'direction' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeoTransformation), 'pGT' ),
              ( ['in'], VARIANT_BOOL, 'bAddNew' )),
]
################################################################
## code template for IGeoTransformationHelper implementation
##class IGeoTransformationHelper_Impl(object):
##    def RemoveAll(self):
##        u'All previously installed geotransformation methods are removed from the system.'
##        #return 
##
##    def Init(self, pGTs, pCompositionGCS):
##        u'Initializes the object given a primary set of geographic transformation operators (GT + direction). Previously installed geotransformation methods are removed from the system.'
##        #return 
##
##    def Set(self, direction, pGT, bAddNew):
##        u'Sets the system default geographic transformation on the primary operation set if missing.'
##        #return 
##
##    @property
##    def DefaultTargetCoordinateSystems(self, ppDefaultTargetCoordinateSystems):
##        u"The collection of ISpatialReference objects used as default target coordinate systems by the 'Install' method if the 'pTargetSR' argument is not specified."
##        #return 
##
##    def Install(self, pSourceSR, pTargetSR, bAddNew):
##        u'Sets the system default geographic transformation on the primary operation set if missing.'
##        #return 
##

class GenerateOverviewsParameters(CoClass):
    u"An object that controls how a mosaic dataset's overview images are generated."
    _reg_clsid_ = GUID('{34A5DCBE-B169-4A81-884D-DB98EA237F82}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
GenerateOverviewsParameters._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMosaicDatasetOperationParameters, IGenerateOverviewsParameters, IGenerateOverviewsParameters2, ICalculateStatisticsParameters, ISelectionParameters, IThreadedOperationParameters]

IProjectiveXform._methods_ = [
    COMMETHOD([helpstring(u'Defines a projective XForm from control points.')], HRESULT, 'DefineFromControlPoints',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPointCollection), 'pSrcPoints' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPointCollection), 'pTarPoints' )),
    COMMETHOD([helpstring(u'Defines a projective XForm from coefficients.')], HRESULT, 'DefineFromCoefficients',
              ( ['in'], comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.esriTransformDirection, 'direction' ),
              ( ['in'], POINTER(VARIANT), 'pCoef' )),
    COMMETHOD([helpstring(u'Gets control points used in defining the projective transform. ')], HRESULT, 'GetControlPoints',
              ( ['out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPointCollection)), 'ppSrcPoints' ),
              ( ['out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPointCollection)), 'ppTarPoints' )),
    COMMETHOD([helpstring(u'Gets the coefficients of the projective transform.')], HRESULT, 'GetCoefficients',
              ( ['in'], comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.esriTransformDirection, 'direction' ),
              ( ['retval', 'out'], POINTER(VARIANT), 'pPolyCoef' )),
    COMMETHOD([helpstring(u'Gets the system residuals.')], HRESULT, 'GetSystemResidual',
              ( ['in'], comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.esriTransformDirection, 'direction' ),
              ( ['retval', 'out'], POINTER(VARIANT), 'pResidual' )),
    COMMETHOD([helpstring(u'Gets the system RMS.')], HRESULT, 'GetSystemRMS',
              ( ['in'], comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.esriTransformDirection, 'direction' ),
              ( ['retval', 'out'], POINTER(c_double), 'rms' )),
]
################################################################
## code template for IProjectiveXform implementation
##class IProjectiveXform_Impl(object):
##    def GetSystemRMS(self, direction):
##        u'Gets the system RMS.'
##        #return rms
##
##    def GetCoefficients(self, direction):
##        u'Gets the coefficients of the projective transform.'
##        #return pPolyCoef
##
##    def GetSystemResidual(self, direction):
##        u'Gets the system residuals.'
##        #return pResidual
##
##    def DefineFromCoefficients(self, direction, pCoef):
##        u'Defines a projective XForm from coefficients.'
##        #return 
##
##    def DefineFromControlPoints(self, pSrcPoints, pTarPoints):
##        u'Defines a projective XForm from control points.'
##        #return 
##
##    def GetControlPoints(self):
##        u'Gets control points used in defining the projective transform. '
##        #return ppSrcPoints, ppTarPoints
##

IBasicRasterSdeConnection._methods_ = [
    COMMETHOD(['propput', helpstring(u'The server name.')], HRESULT, 'ServerName',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'The server name.')], HRESULT, 'ServerName',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'The server instance.')], HRESULT, 'Instance',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'The server instance.')], HRESULT, 'Instance',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'The database name.')], HRESULT, 'Database',
              ( ['in'], BSTR, 'databaseName' )),
    COMMETHOD(['propget', helpstring(u'The database name.')], HRESULT, 'Database',
              ( ['retval', 'out'], POINTER(BSTR), 'databaseName' )),
    COMMETHOD(['propput', helpstring(u'The output raster dataset name.')], HRESULT, 'SdeRasterName',
              ( ['in'], BSTR, 'outputName' )),
    COMMETHOD(['propget', helpstring(u'The output raster dataset name.')], HRESULT, 'SdeRasterName',
              ( ['retval', 'out'], POINTER(BSTR), 'outputName' )),
    COMMETHOD(['propput', helpstring(u'The username.')], HRESULT, 'UserName',
              ( ['in'], BSTR, 'UserName' )),
    COMMETHOD(['propget', helpstring(u'The username.')], HRESULT, 'UserName',
              ( ['retval', 'out'], POINTER(BSTR), 'UserName' )),
    COMMETHOD(['propput', helpstring(u'The password.')], HRESULT, 'Password',
              ( ['in'], BSTR, 'Password' )),
    COMMETHOD(['propget', helpstring(u'The password.')], HRESULT, 'Password',
              ( ['retval', 'out'], POINTER(BSTR), 'Password' )),
    COMMETHOD(['propput', helpstring(u'The input raster dataset name.')], HRESULT, 'InputRasterName',
              ( ['in'], BSTR, 'inputName' )),
    COMMETHOD(['propget', helpstring(u'The input raster dataset name.')], HRESULT, 'InputRasterName',
              ( ['retval', 'out'], POINTER(BSTR), 'inputName' )),
    COMMETHOD(['propput', helpstring(u'The input 1-bit raster dataset name to be used as mask.')], HRESULT, 'InputBitMaskName',
              ( ['in'], BSTR, 'bitMaskName' )),
    COMMETHOD(['propget', helpstring(u'The input 1-bit raster dataset name to be used as mask.')], HRESULT, 'InputBitMaskName',
              ( ['retval', 'out'], POINTER(BSTR), 'bitMaskName' )),
    COMMETHOD(['propput', helpstring(u'The SDE Connection, set through WorkspaceName object.')], HRESULT, 'SdeWorkspaceName',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspaceName), 'rhs' )),
    COMMETHOD(['propget', helpstring(u'The input raster to be loaded to SDE.')], HRESULT, 'Raster',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster)), 'Raster' )),
    COMMETHOD(['propputref', helpstring(u'The input raster to be loaded to SDE.')], HRESULT, 'Raster',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'Raster' )),
    COMMETHOD(['propget', helpstring(u'The input raster mask to be loaded to SDE.')], HRESULT, 'MaskRaster',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster)), 'MaskRaster' )),
    COMMETHOD(['propputref', helpstring(u'The input raster mask to be loaded to SDE.')], HRESULT, 'MaskRaster',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'MaskRaster' )),
]
################################################################
## code template for IBasicRasterSdeConnection implementation
##class IBasicRasterSdeConnection_Impl(object):
##    def _get(self):
##        u'The username.'
##        #return UserName
##    def _set(self, UserName):
##        u'The username.'
##    UserName = property(_get, _set, doc = _set.__doc__)
##
##    def Raster(self, Raster):
##        u'The input raster to be loaded to SDE.'
##        #return 
##
##    def MaskRaster(self, MaskRaster):
##        u'The input raster mask to be loaded to SDE.'
##        #return 
##
##    def _get(self):
##        u'The database name.'
##        #return databaseName
##    def _set(self, databaseName):
##        u'The database name.'
##    Database = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The output raster dataset name.'
##        #return outputName
##    def _set(self, outputName):
##        u'The output raster dataset name.'
##    SdeRasterName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The server name.'
##        #return Name
##    def _set(self, Name):
##        u'The server name.'
##    ServerName = property(_get, _set, doc = _set.__doc__)
##
##    def _set(self, rhs):
##        u'The SDE Connection, set through WorkspaceName object.'
##    SdeWorkspaceName = property(fset = _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The input 1-bit raster dataset name to be used as mask.'
##        #return bitMaskName
##    def _set(self, bitMaskName):
##        u'The input 1-bit raster dataset name to be used as mask.'
##    InputBitMaskName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The server instance.'
##        #return Name
##    def _set(self, Name):
##        u'The server instance.'
##    Instance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The input raster dataset name.'
##        #return inputName
##    def _set(self, inputName):
##        u'The input raster dataset name.'
##    InputRasterName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The password.'
##        #return Password
##    def _set(self, Password):
##        u'The password.'
##    Password = property(_get, _set, doc = _set.__doc__)
##

class FrameXform(CoClass):
    u'A standard frame camera model transformation class.'
    _reg_clsid_ = GUID('{D3E347AC-80E5-4A75-B4A8-1E7AC5D50710}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IFrameXform(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeodataXform):
    _case_insensitive_ = True
    u'Provides access to members that control a standard frame camera transform.'
    _iid_ = GUID('{68F50E4B-6E2D-4950-BD52-D9646ACC8A97}')
    _idlflags_ = ['oleautomation']
FrameXform._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeodataXform, IGeodataXform2, IFrameXform, IRasterXform, ISensorXform, comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ITransformation, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersionSupportGEN, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class ArithmeticFunctionArguments(CoClass):
    u'A class for colormap raster function arguments.'
    _reg_clsid_ = GUID('{073C8688-949B-4483-9F34-8289ED1D1072}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
ArithmeticFunctionArguments._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunctionArguments, IRasterFunctionArguments2, IArithmeticFunctionArguments, IArithmeticFunctionArguments2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class RasterLoader(CoClass):
    u'A raster loader class.'
    _reg_clsid_ = GUID('{4A8E08B2-A38C-4CBE-8278-85B313A63FA7}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
RasterLoader._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterLoader, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]

class BuildSeamlinesParameters(CoClass):
    u'An object that controls how the seamline geometry for items in a mosiac dataset are computed.'
    _reg_clsid_ = GUID('{FDF16309-E5E2-421B-9ACE-0D2360B13E96}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
BuildSeamlinesParameters._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMosaicDatasetOperationParameters, IBuildSeamlinesParameters, IBuildSeamlinesParameters2, ISelectionParameters, IThreadedOperationParameters]

class TiePointCollection(CoClass):
    u'The Image Tie point collection class.'
    _reg_clsid_ = GUID('{A76F5CE9-6E37-4B4F-AE17-789EC6499C81}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
TiePointCollection._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ITiePointCollection, ITiePointOperation]

IRasterTypeFactory2._methods_ = [
    COMMETHOD([helpstring(u'Resets properties of the raster type based on an optional mosaic dataset and an optional data source crawler.')], HRESULT, 'UpdateRasterTypeDefaults',
              ( ['in'], POINTER(IRasterType), 'pRasterType' ),
              ( ['in'], POINTER(IMosaicDataset), 'pMosaicDataset' ),
              ( ['in'], POINTER(IDataSourceCrawler), 'pCrawler' )),
]
################################################################
## code template for IRasterTypeFactory2 implementation
##class IRasterTypeFactory2_Impl(object):
##    def UpdateRasterTypeDefaults(self, pRasterType, pMosaicDataset, pCrawler):
##        u'Resets properties of the raster type based on an optional mosaic dataset and an optional data source crawler.'
##        #return 
##


# values for enumeration 'rstRepresentationType'
DT_THEMATIC = 0
DT_ATHEMATIC = 1
DT_EITHER = 2
rstRepresentationType = c_int # enum
class PixelFilterCollection(CoClass):
    u'A raster filter collection.'
    _reg_clsid_ = GUID('{E6DB06FB-51BC-4CC4-B328-A3202B743E92}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IMultibandFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a multiband filter.'
    _iid_ = GUID('{B6C6883C-5487-4B5A-9162-AC8E2DA34F5A}')
    _idlflags_ = ['oleautomation']
PixelFilterCollection._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IPixelFilter, IPixelFilter2, IPixelFilter3, IPixelFilterCollection, IMultibandFilter]

class ColormapFunction(CoClass):
    u'A class for a colormap raster function.'
    _reg_clsid_ = GUID('{5A5B350D-C1F0-4E50-983C-358DBC9C40B5}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
ColormapFunction._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunction, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class CellSizeLevels(CoClass):
    u'A collection of one or more cell size level objects.'
    _reg_clsid_ = GUID('{44C50016-34C2-41C7-88DB-498DF3BFF9E6}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
CellSizeLevels._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ICellSizeLevels, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class QueryPathsParameters(CoClass):
    u'An object that controls how paths referenced by a mosaic dataset and items in the mosaic dataset are queried.'
    _reg_clsid_ = GUID('{950D3CD2-730B-46F9-90A1-81A73FF3441F}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
QueryPathsParameters._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMosaicDatasetOperationParameters, IQueryPathsParameters2, ISelectionParameters]

class IHillshadeFunctionArguments(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control hillshade function arguments.'
    _iid_ = GUID('{14A88F3B-6BEE-4F29-940B-F0D30D241D0D}')
    _idlflags_ = ['oleautomation']
IHillshadeFunctionArguments._methods_ = [
    COMMETHOD(['propget', helpstring(u'The input elevation model.')], HRESULT, 'DEM',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppDEM' )),
    COMMETHOD(['propputref', helpstring(u'The input elevation model.')], HRESULT, 'DEM',
              ( ['in'], POINTER(IUnknown), 'ppDEM' )),
    COMMETHOD(['propget', helpstring(u'The solar azimuth angle in degrees with 0 toward North.')], HRESULT, 'Azimuth',
              ( ['retval', 'out'], POINTER(c_double), 'pAzimuth' )),
    COMMETHOD(['propput', helpstring(u'The solar azimuth angle in degrees with 0 toward North.')], HRESULT, 'Azimuth',
              ( ['in'], c_double, 'pAzimuth' )),
    COMMETHOD(['propget', helpstring(u'The solar altitude angle in degrees.')], HRESULT, 'Altitude',
              ( ['retval', 'out'], POINTER(c_double), 'pAltitude' )),
    COMMETHOD(['propput', helpstring(u'The solar altitude angle in degrees.')], HRESULT, 'Altitude',
              ( ['in'], c_double, 'pAltitude' )),
    COMMETHOD(['propget', helpstring(u'The Z scale factor that converts z value to the unit of x and y.')], HRESULT, 'ZFactor',
              ( ['retval', 'out'], POINTER(c_double), 'pZfactor' )),
    COMMETHOD(['propput', helpstring(u'The Z scale factor that converts z value to the unit of x and y.')], HRESULT, 'ZFactor',
              ( ['in'], c_double, 'pZfactor' )),
]
################################################################
## code template for IHillshadeFunctionArguments implementation
##class IHillshadeFunctionArguments_Impl(object):
##    def _get(self):
##        u'The solar altitude angle in degrees.'
##        #return pAltitude
##    def _set(self, pAltitude):
##        u'The solar altitude angle in degrees.'
##    Altitude = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The Z scale factor that converts z value to the unit of x and y.'
##        #return pZfactor
##    def _set(self, pZfactor):
##        u'The Z scale factor that converts z value to the unit of x and y.'
##    ZFactor = property(_get, _set, doc = _set.__doc__)
##
##    def DEM(self, ppDEM):
##        u'The input elevation model.'
##        #return 
##
##    def _get(self):
##        u'The solar azimuth angle in degrees with 0 toward North.'
##        #return pAzimuth
##    def _set(self, pAzimuth):
##        u'The solar azimuth angle in degrees with 0 toward North.'
##    Azimuth = property(_get, _set, doc = _set.__doc__)
##

class ShadedReliefFunction(CoClass):
    u'The Shaded Relief function.'
    _reg_clsid_ = GUID('{ECB818C5-BC4E-4359-B40A-D2EF9E6717C2}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
ShadedReliefFunction._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunction, ISlopeScalingArguments, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class RasterWorkspace(CoClass):
    u'The raster workspace object.'
    _reg_clsid_ = GUID('{AAE25032-35FB-11D2-B1F2-00C04F8EDEFF}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IRasterWorkspace3(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to additional members that control a raster workspace.'
    _iid_ = GUID('{8FF5CE38-BFE5-4CC7-A76C-DA1564B560D1}')
    _idlflags_ = ['oleautomation']
RasterWorkspace._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspace, IRasterWorkspace, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterWorkspace2, IRasterWorkspace3, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataset, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspaceProperties]

class PleiadesFileCrawler(CoClass):
    u'A crawler for Pleiades files.'
    _reg_clsid_ = GUID('{EB095F2F-8093-41ED-A7C3-16FAA4A4D122}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
PleiadesFileCrawler._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDataSourceCrawler2, IFileCrawler, IFileCrawler2, IItemPaths, IItemPaths2]

IDEWCSCoverage._methods_ = [
    COMMETHOD(['propget', helpstring(u'The extent of the WCS Coverage.')], HRESULT, 'Extent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'Extent' )),
    COMMETHOD(['propputref', helpstring(u'The extent of the WCS Coverage.')], HRESULT, 'Extent',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'Extent' )),
    COMMETHOD(['propget', helpstring(u'The spatial reference of the WCS Coverage.')], HRESULT, 'SpatialReference',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference)), 'SpatialReference' )),
    COMMETHOD(['propputref', helpstring(u'The spatial reference of the WCS Coverage.')], HRESULT, 'SpatialReference',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'SpatialReference' )),
    COMMETHOD(['propget', helpstring(u'The number of bands in the collection.')], HRESULT, 'BandCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propput', helpstring(u'The number of bands in the collection.')], HRESULT, 'BandCount',
              ( ['in'], c_int, 'Count' )),
]
################################################################
## code template for IDEWCSCoverage implementation
##class IDEWCSCoverage_Impl(object):
##    def _get(self):
##        u'The number of bands in the collection.'
##        #return Count
##    def _set(self, Count):
##        u'The number of bands in the collection.'
##    BandCount = property(_get, _set, doc = _set.__doc__)
##
##    def Extent(self, Extent):
##        u'The extent of the WCS Coverage.'
##        #return 
##
##    def SpatialReference(self, SpatialReference):
##        u'The spatial reference of the WCS Coverage.'
##        #return 
##

class RasterDatasetBuilder(CoClass):
    u'A raster builder for raster datasets.'
    _reg_clsid_ = GUID('{62F7D26F-0053-4514-B9F5-E58A1B0AAB84}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IRasterDatasetBuilder(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Indicator interface for raster dataset builders.'
    _iid_ = GUID('{ABEBC0B7-91EC-465F-97BE-0DDA62DE8A19}')
    _idlflags_ = ['oleautomation']
RasterDatasetBuilder._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterBuilder2, IRasterBuilderInit, IRasterBuilderInit2, IRasterDatasetBuilder]

class CellSizeLevel(CoClass):
    u'A cell size level object.'
    _reg_clsid_ = GUID('{7FDE6784-3E1F-416F-B801-67750E5BAA1D}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
CellSizeLevel._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ICellSizeLevel, ICellSizeLevel2, IItemURI]

class IRasterXformer2(IRasterXformer):
    _case_insensitive_ = True
    u'Provides access to members that control raster transformer.'
    _iid_ = GUID('{9DDCE4E9-D076-4DFC-B157-0924DE623897}')
    _idlflags_ = ['oleautomation']
IRasterXformer2._methods_ = [
    COMMETHOD(['propget', helpstring(u'The output extent.')], HRESULT, 'Extent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'ppExtent' )),
    COMMETHOD(['propput', helpstring(u'The output extent.')], HRESULT, 'Extent',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'ppExtent' )),
    COMMETHOD(['propget', helpstring(u'The output width in pixels.')], HRESULT, 'Width',
              ( ['retval', 'out'], POINTER(c_int), 'pWidth' )),
    COMMETHOD(['propget', helpstring(u'The output height in pixels.')], HRESULT, 'Height',
              ( ['retval', 'out'], POINTER(c_int), 'pHeight' )),
    COMMETHOD(['propget', helpstring(u'The output cell size.')], HRESULT, 'CellSize',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IPnt)), 'ppCellsize' )),
    COMMETHOD(['propput', helpstring(u'The output cell size.')], HRESULT, 'CellSize',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IPnt), 'ppCellsize' )),
    COMMETHOD(['propget', helpstring(u'The current geodata transform to be applied.')], HRESULT, 'GeodataXform',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeodataXform)), 'ppXform' )),
    COMMETHOD(['propputref', helpstring(u'The current geodata transform to be applied.')], HRESULT, 'GeodataXform',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeodataXform), 'ppXform' )),
    COMMETHOD(['propget', helpstring(u'The current pixel reader for reading source pixels.')], HRESULT, 'PixelReader',
              ( ['retval', 'out'], POINTER(POINTER(IPixelReader)), 'ppReader' )),
    COMMETHOD(['propputref', helpstring(u'The current pixel reader for reading source pixels.')], HRESULT, 'PixelReader',
              ( ['in'], POINTER(IPixelReader), 'ppReader' )),
]
################################################################
## code template for IRasterXformer2 implementation
##class IRasterXformer2_Impl(object):
##    def PixelReader(self, ppReader):
##        u'The current pixel reader for reading source pixels.'
##        #return 
##
##    def GeodataXform(self, ppXform):
##        u'The current geodata transform to be applied.'
##        #return 
##
##    def _get(self):
##        u'The output cell size.'
##        #return ppCellsize
##    def _set(self, ppCellsize):
##        u'The output cell size.'
##    CellSize = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Width(self):
##        u'The output width in pixels.'
##        #return pWidth
##
##    def _get(self):
##        u'The output extent.'
##        #return ppExtent
##    def _set(self, ppExtent):
##        u'The output extent.'
##    Extent = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Height(self):
##        u'The output height in pixels.'
##        #return pHeight
##

class DefineNoDataParameters(CoClass):
    u'An object that controls how NoData values are defined for items in a mosaic dataset.'
    _reg_clsid_ = GUID('{B32BF91B-51EF-43DC-B74E-F686C30F23A1}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
DefineNoDataParameters._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMosaicDatasetOperationParameters, IDefineNoDataParameters, IDefineNoDataParameters2, ISelectionParameters]

IMosaicLODInfos._methods_ = [
    COMMETHOD(['propget', helpstring(u'The number of levels.')], HRESULT, 'NumLevels',
              ( ['retval', 'out'], POINTER(c_int), 'pNumLevels' )),
    COMMETHOD([helpstring(u'Adds a LOD.')], HRESULT, 'Add',
              ( ['in'], c_double, 'resolution' ),
              ( ['in'], c_double, 'LOD' )),
    COMMETHOD([helpstring(u'Queries a LOD.')], HRESULT, 'Get',
              ( ['in'], c_int, 'index' ),
              ( ['out'], POINTER(c_double), 'pResolution' ),
              ( ['out'], POINTER(c_double), 'pLOD' )),
    COMMETHOD([helpstring(u'Empties all LODs.')], HRESULT, 'Empty'),
    COMMETHOD(['propput', helpstring(u'The DPI at which the raster is generated.')], HRESULT, 'Dpi',
              ( ['in'], c_double, 'pDpi' )),
    COMMETHOD(['propget', helpstring(u'The DPI at which the raster is generated.')], HRESULT, 'Dpi',
              ( ['retval', 'out'], POINTER(c_double), 'pDpi' )),
    COMMETHOD(['propput', helpstring(u'The device DPI.')], HRESULT, 'DeviceDpi',
              ( ['in'], c_double, 'pDpi' )),
    COMMETHOD(['propget', helpstring(u'The device DPI.')], HRESULT, 'DeviceDpi',
              ( ['retval', 'out'], POINTER(c_double), 'pDpi' )),
    COMMETHOD([helpstring(u'Snaps to a LOD.')], HRESULT, 'Snap',
              ( ['in'], c_double, 'resolution' ),
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriRasterResamplingHint, 'hint' ),
              ( ['out'], POINTER(c_double), 'pResolution' ),
              ( ['out'], POINTER(c_double), 'pLOD' )),
]
################################################################
## code template for IMosaicLODInfos implementation
##class IMosaicLODInfos_Impl(object):
##    def Empty(self):
##        u'Empties all LODs.'
##        #return 
##
##    def Get(self, index):
##        u'Queries a LOD.'
##        #return pResolution, pLOD
##
##    @property
##    def NumLevels(self):
##        u'The number of levels.'
##        #return pNumLevels
##
##    def Add(self, resolution, LOD):
##        u'Adds a LOD.'
##        #return 
##
##    def _get(self):
##        u'The DPI at which the raster is generated.'
##        #return pDpi
##    def _set(self, pDpi):
##        u'The DPI at which the raster is generated.'
##    Dpi = property(_get, _set, doc = _set.__doc__)
##
##    def Snap(self, resolution, hint):
##        u'Snaps to a LOD.'
##        #return pResolution, pLOD
##
##    def _get(self):
##        u'The device DPI.'
##        #return pDpi
##    def _set(self, pDpi):
##        u'The device DPI.'
##    DeviceDpi = property(_get, _set, doc = _set.__doc__)
##

IRasterThumbnailBuilder._methods_ = [
    COMMETHOD(['propput', helpstring(u'The format string defining the layout of the byte array used for encoding the thumbnail pixels.')], HRESULT, 'ThumbnailFormat',
              ( ['in'], BSTR, 'pThumbnailFormat' )),
    COMMETHOD(['propget', helpstring(u'The format string defining the layout of the byte array used for encoding the thumbnail pixels.')], HRESULT, 'ThumbnailFormat',
              ( ['retval', 'out'], POINTER(BSTR), 'pThumbnailFormat' )),
    COMMETHOD([helpstring(u'Renders and returns a thumbnail (as an of bytes in the requested format) associated with the specified item URI and the corresponding raster.')], HRESULT, 'BuildThumbnail',
              ( ['in'], POINTER(IItemURI), 'pItemURI' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' ),
              ( ['retval', 'out'], POINTER(_midlSAFEARRAY(c_ubyte)), 'ppThumbnailBytes' )),
]
################################################################
## code template for IRasterThumbnailBuilder implementation
##class IRasterThumbnailBuilder_Impl(object):
##    def _get(self):
##        u'The format string defining the layout of the byte array used for encoding the thumbnail pixels.'
##        #return pThumbnailFormat
##    def _set(self, pThumbnailFormat):
##        u'The format string defining the layout of the byte array used for encoding the thumbnail pixels.'
##    ThumbnailFormat = property(_get, _set, doc = _set.__doc__)
##
##    def BuildThumbnail(self, pItemURI, pRaster):
##        u'Renders and returns a thumbnail (as an of bytes in the requested format) associated with the specified item URI and the corresponding raster.'
##        #return ppThumbnailBytes
##

IStockFrequencyDistributionHistogram._methods_ = [
    COMMETHOD([helpstring(u'Returns a histogram containing a specified number of bins describing a normal/gaussian distribution with a specified mean and standard deviation.')], HRESULT, 'GetNormalDistribution',
              ( ['in'], c_int, 'nBins' ),
              ( ['in'], c_double, 'Mean' ),
              ( ['in'], c_double, 'StdDev' ),
              ( ['retval', 'out'], POINTER(POINTER(IRasterHistogram)), 'ppHistogram' )),
    COMMETHOD([helpstring(u'Returns a histogram containing a specified number of bins describing a uniform distribution.')], HRESULT, 'GetUniformDistribution',
              ( ['in'], c_int, 'nBins' ),
              ( ['retval', 'out'], POINTER(POINTER(IRasterHistogram)), 'ppHistogram' )),
]
################################################################
## code template for IStockFrequencyDistributionHistogram implementation
##class IStockFrequencyDistributionHistogram_Impl(object):
##    def GetUniformDistribution(self, nBins):
##        u'Returns a histogram containing a specified number of bins describing a uniform distribution.'
##        #return ppHistogram
##
##    def GetNormalDistribution(self, nBins, Mean, StdDev):
##        u'Returns a histogram containing a specified number of bins describing a normal/gaussian distribution with a specified mean and standard deviation.'
##        #return ppHistogram
##

class RasterBands(CoClass):
    u'An enumerator useful for iterating through a set of raster bands.'
    _reg_clsid_ = GUID('{BC25E124-168B-11D2-8D25-0000F8780535}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
RasterBands._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IEnumDataset, IEnumRasterBand]

class IReflectanceFunctionArguments2(IReflectanceFunctionArguments):
    _case_insensitive_ = True
    u'Provides access to members that control albedo option.'
    _iid_ = GUID('{B94271DA-7FEE-4AA7-B695-44A77382C093}')
    _idlflags_ = ['oleautomation']
IReflectanceFunctionArguments._methods_ = [
    COMMETHOD(['propget', helpstring(u'The input raster.')], HRESULT, 'Raster',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppRaster' )),
    COMMETHOD(['propputref', helpstring(u'The input raster.')], HRESULT, 'Raster',
              ( ['in'], POINTER(IUnknown), 'ppRaster' )),
    COMMETHOD(['propget', helpstring(u'The radiance gain values for each band.')], HRESULT, 'RadianceGainValues',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray)), 'ppRanges' )),
    COMMETHOD(['propputref', helpstring(u'The radiance gain values for each band.')], HRESULT, 'RadianceGainValues',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray), 'ppRanges' )),
    COMMETHOD(['propget', helpstring(u'The radiance bias values for each band.')], HRESULT, 'RadianceBiasValues',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray)), 'ppRanges' )),
    COMMETHOD(['propputref', helpstring(u'The radiance bias values for each band.')], HRESULT, 'RadianceBiasValues',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray), 'ppRanges' )),
    COMMETHOD(['propget', helpstring(u'The Sun Elevation of the sensor when the image was captured')], HRESULT, 'SunElevation',
              ( ['retval', 'out'], POINTER(c_double), 'pSunElevation' )),
    COMMETHOD(['propput', helpstring(u'The Sun Elevation of the sensor when the image was captured')], HRESULT, 'SunElevation',
              ( ['in'], c_double, 'pSunElevation' )),
]
################################################################
## code template for IReflectanceFunctionArguments implementation
##class IReflectanceFunctionArguments_Impl(object):
##    def RadianceBiasValues(self, ppRanges):
##        u'The radiance bias values for each band.'
##        #return 
##
##    def Raster(self, ppRaster):
##        u'The input raster.'
##        #return 
##
##    def RadianceGainValues(self, ppRanges):
##        u'The radiance gain values for each band.'
##        #return 
##
##    def _get(self):
##        u'The Sun Elevation of the sensor when the image was captured'
##        #return pSunElevation
##    def _set(self, pSunElevation):
##        u'The Sun Elevation of the sensor when the image was captured'
##    SunElevation = property(_get, _set, doc = _set.__doc__)
##

IReflectanceFunctionArguments2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Get the albedo option for apparent reflectance function')], HRESULT, 'Albedo',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbDoAlbedo' )),
    COMMETHOD(['propput', helpstring(u'Get the albedo option for apparent reflectance function')], HRESULT, 'Albedo',
              ( ['in'], VARIANT_BOOL, 'pbDoAlbedo' )),
]
################################################################
## code template for IReflectanceFunctionArguments2 implementation
##class IReflectanceFunctionArguments2_Impl(object):
##    def _get(self):
##        u'Get the albedo option for apparent reflectance function'
##        #return pbDoAlbedo
##    def _set(self, pbDoAlbedo):
##        u'Get the albedo option for apparent reflectance function'
##    Albedo = property(_get, _set, doc = _set.__doc__)
##

class RasterCalcUniqueValues(CoClass):
    u'A helper class for calculating raster unique values.'
    _reg_clsid_ = GUID('{E218975B-E6A0-4EEC-9716-06C10ED2359F}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
RasterCalcUniqueValues._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterCalcUniqueValues, IRasterCalcUniqueValues2]

class CompositeURIFilter(CoClass):
    u'A composite URI filter object.'
    _reg_clsid_ = GUID('{56965C22-3ADE-4A4A-B35A-523C21438921}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class ICompositeURIFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a composite URI filter.'
    _iid_ = GUID('{DBA0E8E1-CB71-427F-BB01-7236315ED267}')
    _idlflags_ = ['oleautomation']
CompositeURIFilter._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IItemURIFilter, ICompositeURIFilter]

class RPFBuilder(CoClass):
    u'A raster buider for RPF files.'
    _reg_clsid_ = GUID('{A9965BFE-7862-4077-A76D-83C3A943D258}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
RPFBuilder._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterBuilder2, IRasterBuilderInit]

class IMosaicRastersFunctionArguments(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control mosaicrasters function arguments.'
    _iid_ = GUID('{C67E338B-BDC7-4F41-9CAA-854871C2BE85}')
    _idlflags_ = ['oleautomation']
IMosaicRastersFunctionArguments._methods_ = [
    COMMETHOD(['propget', helpstring(u'The list of rasters.')], HRESULT, 'Rasters',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppRasters' )),
    COMMETHOD(['propputref', helpstring(u'The list of rasters.')], HRESULT, 'Rasters',
              ( ['in'], POINTER(IUnknown), 'ppRasters' )),
    COMMETHOD(['propget', helpstring(u'The current mosaic type.')], HRESULT, 'MosaicType',
              ( ['retval', 'out'], POINTER(rstMosaicOperatorType), 'pMosaicType' )),
    COMMETHOD(['propput', helpstring(u'The current mosaic type.')], HRESULT, 'MosaicType',
              ( ['in'], rstMosaicOperatorType, 'pMosaicType' )),
]
################################################################
## code template for IMosaicRastersFunctionArguments implementation
##class IMosaicRastersFunctionArguments_Impl(object):
##    def Rasters(self, ppRasters):
##        u'The list of rasters.'
##        #return 
##
##    def _get(self):
##        u'The current mosaic type.'
##        #return pMosaicType
##    def _set(self, pMosaicType):
##        u'The current mosaic type.'
##    MosaicType = property(_get, _set, doc = _set.__doc__)
##

IRasterSdeCatalog._methods_ = [
    COMMETHOD(['propput', helpstring(u'The ArcSDE raster catalog name.')], HRESULT, 'CatalogName',
              ( ['in'], BSTR, 'catalogElementName' )),
    COMMETHOD(['propget', helpstring(u'The ArcSDE raster catalog name.')], HRESULT, 'CatalogName',
              ( ['retval', 'out'], POINTER(BSTR), 'catalogElementName' )),
    COMMETHOD(['propput', helpstring(u'The ArcSDE raster name.')], HRESULT, 'RasterName',
              ( ['in'], BSTR, 'RasterName' )),
    COMMETHOD(['propget', helpstring(u'The ArcSDE raster name.')], HRESULT, 'RasterName',
              ( ['retval', 'out'], POINTER(BSTR), 'RasterName' )),
]
################################################################
## code template for IRasterSdeCatalog implementation
##class IRasterSdeCatalog_Impl(object):
##    def _get(self):
##        u'The ArcSDE raster name.'
##        #return RasterName
##    def _set(self, RasterName):
##        u'The ArcSDE raster name.'
##    RasterName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The ArcSDE raster catalog name.'
##        #return catalogElementName
##    def _set(self, catalogElementName):
##        u'The ArcSDE raster catalog name.'
##    CatalogName = property(_get, _set, doc = _set.__doc__)
##

IPixelOperation._methods_ = [
    COMMETHOD(['propget', helpstring(u'The pixel filter for filtering pixel values.')], HRESULT, 'PixelFilter',
              ( ['retval', 'out'], POINTER(POINTER(IPixelFilter)), 'ppFilter' )),
    COMMETHOD(['propputref', helpstring(u'The pixel filter for filtering pixel values.')], HRESULT, 'PixelFilter',
              ( ['in'], POINTER(IPixelFilter), 'ppFilter' )),
]
################################################################
## code template for IPixelOperation implementation
##class IPixelOperation_Impl(object):
##    def PixelFilter(self, ppFilter):
##        u'The pixel filter for filtering pixel values.'
##        #return 
##

class PixFileBuilder(CoClass):
    u'A raster buider for PIX files.'
    _reg_clsid_ = GUID('{C055B1FF-F26C-488C-B811-1F871B00F4A6}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
PixFileBuilder._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterBuilder2, IRasterBuilderInit]

class IRasterCatalogTable(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a raster catalog table.'
    _iid_ = GUID('{AC0E9740-0742-11D4-8D75-00C04F5B87B2}')
    _idlflags_ = ['oleautomation']
IMosaicRaster2._methods_ = [
    COMMETHOD(['propget', helpstring(u'The source raster catalog table.')], HRESULT, 'RasterCatalogTable',
              ( ['retval', 'out'], POINTER(POINTER(IRasterCatalogTable)), 'ppCatalogTable' )),
    COMMETHOD(['propputref', helpstring(u'The source raster catalog table.')], HRESULT, 'RasterCatalogTable',
              ( ['in'], POINTER(IRasterCatalogTable), 'ppCatalogTable' )),
    COMMETHOD([helpstring(u'Recalculates the cellsize as (min, max, or mean) of all cellsizes.')], HRESULT, 'RecalculateCellsize',
              ( ['in'], esriCellsizeType, 'Type' )),
]
################################################################
## code template for IMosaicRaster2 implementation
##class IMosaicRaster2_Impl(object):
##    def RecalculateCellsize(self, Type):
##        u'Recalculates the cellsize as (min, max, or mean) of all cellsizes.'
##        #return 
##
##    def RasterCatalogTable(self, ppCatalogTable):
##        u'The source raster catalog table.'
##        #return 
##

class SeamlineTaskInfo(CoClass):
    u'A seamline task information object.'
    _reg_clsid_ = GUID('{DE221C73-5C88-4A0D-B78E-13E3520E2061}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
SeamlineTaskInfo._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ISeamlineTaskInfo, ISeamlineTaskInfo2]

class RGB32Function(CoClass):
    u'A class for a packed RGBA raster function.'
    _reg_clsid_ = GUID('{95CD2068-42A4-43EE-BF08-7B2E562A9B47}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
RGB32Function._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunction, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class ItemTemplate(CoClass):
    u'An item template.'
    _reg_clsid_ = GUID('{C61177D5-3626-44AD-B443-6A8308307CC3}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
ItemTemplate._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IItemTemplate2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

IDEWMSMap._methods_ = [
    COMMETHOD(['propget', helpstring(u'The extent of the WMS Map.')], HRESULT, 'Extent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'Extent' )),
    COMMETHOD(['propputref', helpstring(u'The extent of the WMS Map.')], HRESULT, 'Extent',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'Extent' )),
    COMMETHOD(['propget', helpstring(u'The spatial reference of the WMS Map.')], HRESULT, 'SpatialReference',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference)), 'SpatialReference' )),
    COMMETHOD(['propputref', helpstring(u'The spatial reference of the WMS Map.')], HRESULT, 'SpatialReference',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'SpatialReference' )),
    COMMETHOD(['propget', helpstring(u'The number of bands in the collection.')], HRESULT, 'BandCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propput', helpstring(u'The number of bands in the collection.')], HRESULT, 'BandCount',
              ( ['in'], c_int, 'Count' )),
    COMMETHOD(['propget', helpstring(u'The WMS connection name object.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName)), 'ppWMSConnectionName' )),
    COMMETHOD(['propputref', helpstring(u'The WMS connection name object.')], HRESULT, 'Name',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName), 'ppWMSConnectionName' )),
]
################################################################
## code template for IDEWMSMap implementation
##class IDEWMSMap_Impl(object):
##    def _get(self):
##        u'The number of bands in the collection.'
##        #return Count
##    def _set(self, Count):
##        u'The number of bands in the collection.'
##    BandCount = property(_get, _set, doc = _set.__doc__)
##
##    def Name(self, ppWMSConnectionName):
##        u'The WMS connection name object.'
##        #return 
##
##    def Extent(self, Extent):
##        u'The extent of the WMS Map.'
##        #return 
##
##    def SpatialReference(self, SpatialReference):
##        u'The spatial reference of the WMS Map.'
##        #return 
##

class IMosaicWorkspaceExtensionHelper(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides a helper for working with a mosaic dataset workspace extension.'
    _iid_ = GUID('{80F8593E-099C-4B2A-B0A7-CC4CCEBCE522}')
    _idlflags_ = ['oleautomation']
class IMosaicWorkspaceExtension(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a mosaic dataset workspace extension.'
    _iid_ = GUID('{6C2CC1C8-88E9-41B6-9DFC-28B477A4BF7D}')
    _idlflags_ = ['oleautomation']
IMosaicWorkspaceExtensionHelper._methods_ = [
    COMMETHOD([helpstring(u'Find mosaic dataset workspace extension.')], HRESULT, 'FindExtension',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspace), 'pWorkspace' ),
              ( ['retval', 'out'], POINTER(POINTER(IMosaicWorkspaceExtension)), 'ppExtension' )),
]
################################################################
## code template for IMosaicWorkspaceExtensionHelper implementation
##class IMosaicWorkspaceExtensionHelper_Impl(object):
##    def FindExtension(self, pWorkspace):
##        u'Find mosaic dataset workspace extension.'
##        #return ppExtension
##

class ContrastBrightnessFunction(CoClass):
    u'The Contrast/Brighntess function.'
    _reg_clsid_ = GUID('{E5986C48-1F76-4914-BA6E-5EA65231D7DF}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
ContrastBrightnessFunction._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunction, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class ClipFootprintToMosaic(CoClass):
    u'A seamline modifier that simply clips the item footprint to the aggregating mosaic geometry.'
    _reg_clsid_ = GUID('{7B7BEAE1-093A-43B8-B283-D0D794B7AF48}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
ClipFootprintToMosaic._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ISeamlineModifier, ISeamlineModifierInit]

IMosaicOperator3._methods_ = [
    COMMETHOD([helpstring(u'Initializes a mosaic operator.')], HRESULT, 'Init',
              ( ['in'], c_int, 'iCol' ),
              ( ['in'], c_int, 'iRow' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IPixelBlock), 'pBlock' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IPixelBlock), 'pMosaicBlock' )),
]
################################################################
## code template for IMosaicOperator3 implementation
##class IMosaicOperator3_Impl(object):
##    def Init(self, iCol, iRow, pBlock, pMosaicBlock):
##        u'Initializes a mosaic operator.'
##        #return 
##

class IMosaicDataset2(IMosaicDataset):
    _case_insensitive_ = True
    u'Provides access to members that control a mosaic dataset.'
    _iid_ = GUID('{63C4A7C3-A7DD-46A8-9E12-5ED568517FAC}')
    _idlflags_ = ['oleautomation']
IMosaicDataset2._methods_ = [
    COMMETHOD(['propget', helpstring(u'The associated status table.')], HRESULT, 'StatusTable',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable)), 'ppStatusTable' )),
    COMMETHOD(['propputref', helpstring(u'The associated status table.')], HRESULT, 'StatusTable',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable), 'ppStatusTable' )),
    COMMETHOD(['propget', helpstring(u'The associated analysis results table.')], HRESULT, 'AnalysisResults',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable)), 'ppAnalysisResultsTable' )),
    COMMETHOD(['propputref', helpstring(u'The associated analysis results table.')], HRESULT, 'AnalysisResults',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable), 'ppAnalysisResultsTable' )),
    COMMETHOD([helpstring(u'Computes the smallest low cell size and the largest high cell size values from items in the mosaic catalog. The values returned are in the same units as the spatial references of the catalog.')], HRESULT, 'ComputeCellSizes',
              ( ['out'], POINTER(c_double), 'pLowCellSize' ),
              ( ['out'], POINTER(c_double), 'pHighCellSize' )),
    COMMETHOD(['propget', helpstring(u'The associated view table.')], HRESULT, 'ViewTable',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable)), 'ppViewTable' )),
    COMMETHOD(['propputref', helpstring(u'The associated view table.')], HRESULT, 'ViewTable',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable), 'ppViewTable' )),
    COMMETHOD(['propget', helpstring(u'The cache table associated with the mosaic dataset.')], HRESULT, 'CacheTable',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable)), 'ppCacheTable' )),
    COMMETHOD(['propputref', helpstring(u'The cache table associated with the mosaic dataset.')], HRESULT, 'CacheTable',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable), 'ppCacheTable' )),
]
################################################################
## code template for IMosaicDataset2 implementation
##class IMosaicDataset2_Impl(object):
##    def ViewTable(self, ppViewTable):
##        u'The associated view table.'
##        #return 
##
##    def StatusTable(self, ppStatusTable):
##        u'The associated status table.'
##        #return 
##
##    def ComputeCellSizes(self):
##        u'Computes the smallest low cell size and the largest high cell size values from items in the mosaic catalog. The values returned are in the same units as the spatial references of the catalog.'
##        #return pLowCellSize, pHighCellSize
##
##    def CacheTable(self, ppCacheTable):
##        u'The cache table associated with the mosaic dataset.'
##        #return 
##
##    def AnalysisResults(self, ppAnalysisResultsTable):
##        u'The associated analysis results table.'
##        #return 
##

IShadedReliefFunctionArguments._methods_ = [
    COMMETHOD(['propget', helpstring(u'The input image.')], HRESULT, 'Raster',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppRaster' )),
    COMMETHOD(['propputref', helpstring(u'The input image.')], HRESULT, 'Raster',
              ( ['in'], POINTER(IUnknown), 'ppRaster' )),
    COMMETHOD(['propget', helpstring(u'The input RGB image.')], HRESULT, 'RGB',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppRaster' )),
    COMMETHOD(['propputref', helpstring(u'The input RGB image.')], HRESULT, 'RGB',
              ( ['in'], POINTER(IUnknown), 'ppRaster' )),
    COMMETHOD(['propget', helpstring(u'The colorramp.')], HRESULT, 'ColorRamp',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColorRamp)), 'ppColorRamp' )),
    COMMETHOD(['propputref', helpstring(u'The colorramp.')], HRESULT, 'ColorRamp',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColorRamp), 'ppColorRamp' )),
    COMMETHOD(['propget', helpstring(u'The raster colormap.')], HRESULT, 'Colormap',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterColormap)), 'ppColormap' )),
    COMMETHOD(['propputref', helpstring(u'The raster colormap.')], HRESULT, 'Colormap',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterColormap), 'ppColormap' )),
    COMMETHOD(['propget', helpstring(u'The zfactor.')], HRESULT, 'ZFactor',
              ( ['retval', 'out'], POINTER(c_double), 'pZfactor' )),
    COMMETHOD(['propput', helpstring(u'The zfactor.')], HRESULT, 'ZFactor',
              ( ['in'], c_double, 'pZfactor' )),
    COMMETHOD(['propget', helpstring(u'The solar azimuth angle in degrees with 0 toward North.')], HRESULT, 'Azimuth',
              ( ['retval', 'out'], POINTER(c_double), 'pAzimuth' )),
    COMMETHOD(['propput', helpstring(u'The solar azimuth angle in degrees with 0 toward North.')], HRESULT, 'Azimuth',
              ( ['in'], c_double, 'pAzimuth' )),
    COMMETHOD(['propget', helpstring(u'The solar altitude angle in degrees.')], HRESULT, 'Altitude',
              ( ['retval', 'out'], POINTER(c_double), 'pAltitude' )),
    COMMETHOD(['propput', helpstring(u'The solar altitude angle in degrees.')], HRESULT, 'Altitude',
              ( ['in'], c_double, 'pAltitude' )),
]
################################################################
## code template for IShadedReliefFunctionArguments implementation
##class IShadedReliefFunctionArguments_Impl(object):
##    def Raster(self, ppRaster):
##        u'The input image.'
##        #return 
##
##    def Colormap(self, ppColormap):
##        u'The raster colormap.'
##        #return 
##
##    def _get(self):
##        u'The solar altitude angle in degrees.'
##        #return pAltitude
##    def _set(self, pAltitude):
##        u'The solar altitude angle in degrees.'
##    Altitude = property(_get, _set, doc = _set.__doc__)
##
##    def RGB(self, ppRaster):
##        u'The input RGB image.'
##        #return 
##
##    def _get(self):
##        u'The zfactor.'
##        #return pZfactor
##    def _set(self, pZfactor):
##        u'The zfactor.'
##    ZFactor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The solar azimuth angle in degrees with 0 toward North.'
##        #return pAzimuth
##    def _set(self, pAzimuth):
##        u'The solar azimuth angle in degrees with 0 toward North.'
##    Azimuth = property(_get, _set, doc = _set.__doc__)
##
##    def ColorRamp(self, ppColorRamp):
##        u'The colorramp.'
##        #return 
##

class RPDefBuilder(CoClass):
    u'A raster builder for Raster Process Definition files'
    _reg_clsid_ = GUID('{BC7C6260-C8FB-40AC-9845-8067F1185F92}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
RPDefBuilder._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterBuilder2, IRasterBuilderInit]

IPixelFilter._methods_ = [
    COMMETHOD(['hidden', helpstring(u'Gets dimension of the filter.')], HRESULT, 'GetSize',
              ( ['in', 'out'], POINTER(c_int), 'Columns' ),
              ( ['in', 'out'], POINTER(c_int), 'Rows' )),
    COMMETHOD(['hidden', helpstring(u'Gets center position of the filter.')], HRESULT, 'GetCenterPosition',
              ( ['in', 'out'], POINTER(c_int), 'atColumn' ),
              ( ['in', 'out'], POINTER(c_int), 'atRow' )),
    COMMETHOD([helpstring(u'Filters a pixel block.')], HRESULT, 'Filter',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IPixelBlock), 'pBlock' )),
]
################################################################
## code template for IPixelFilter implementation
##class IPixelFilter_Impl(object):
##    def GetSize(self):
##        u'Gets dimension of the filter.'
##        #return Columns, Rows
##
##    def Filter(self, pBlock):
##        u'Filters a pixel block.'
##        #return 
##
##    def GetCenterPosition(self):
##        u'Gets center position of the filter.'
##        #return atColumn, atRow
##

class ISDefBuilder(CoClass):
    u'A raster builder for an Image Service Definition file.'
    _reg_clsid_ = GUID('{3F2555FA-4674-4685-B77C-BE3D3ED75E5E}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
ISDefBuilder._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterBuilder2, IRasterBuilderInit]

class SeamlineByEdge(CoClass):
    u'A seamline modifier that finds a route along the edges.'
    _reg_clsid_ = GUID('{97741FDA-5211-4794-9D6E-8B23CB8FDFB8}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
SeamlineByEdge._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ISeamlineModifier, ISeamlineModifierInit]

IRasterTypeEnvironment2._methods_ = [
    COMMETHOD([helpstring(u'Resets properties of the raster type based on an optional mosaic dataset and an optional data source crawler.')], HRESULT, 'UpdateRasterTypeDefaults',
              ( ['in'], POINTER(IRasterType), 'pRasterType' ),
              ( ['in'], POINTER(IMosaicDataset), 'pMosaicDataset' ),
              ( ['in'], POINTER(IDataSourceCrawler), 'pCrawler' )),
]
################################################################
## code template for IRasterTypeEnvironment2 implementation
##class IRasterTypeEnvironment2_Impl(object):
##    def UpdateRasterTypeDefaults(self, pRasterType, pMosaicDataset, pCrawler):
##        u'Resets properties of the raster type based on an optional mosaic dataset and an optional data source crawler.'
##        #return 
##

ILSRXform._methods_ = [
    COMMETHOD(['propget', helpstring(u'The sensor position.')], HRESULT, 'PerspectiveCenter',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint)), 'ppCenter' )),
    COMMETHOD(['propputref', helpstring(u'The sensor position.')], HRESULT, 'PerspectiveCenter',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'ppCenter' )),
    COMMETHOD(['propget', helpstring(u'The 3x3 rotation matrix.')], HRESULT, 'RotationMatrix',
              ( ['retval', 'out'], POINTER(VARIANT), 'pMatrix' )),
    COMMETHOD(['propput', helpstring(u'The 3x3 rotation matrix.')], HRESULT, 'RotationMatrix',
              ( ['in'], VARIANT, 'pMatrix' )),
    COMMETHOD(['propget', helpstring(u'The earth flattening.')], HRESULT, 'Flattening',
              ( ['retval', 'out'], POINTER(c_double), 'pFlattening' )),
    COMMETHOD(['propput', helpstring(u'The earth flattening.')], HRESULT, 'Flattening',
              ( ['in'], c_double, 'pFlattening' )),
    COMMETHOD(['propget', helpstring(u'The earth Equatorial radius.')], HRESULT, 'EquatorialRadius',
              ( ['retval', 'out'], POINTER(c_double), 'pRadius' )),
    COMMETHOD(['propput', helpstring(u'The earth Equatorial radius.')], HRESULT, 'EquatorialRadius',
              ( ['in'], c_double, 'pRadius' )),
]
################################################################
## code template for ILSRXform implementation
##class ILSRXform_Impl(object):
##    def _get(self):
##        u'The earth flattening.'
##        #return pFlattening
##    def _set(self, pFlattening):
##        u'The earth flattening.'
##    Flattening = property(_get, _set, doc = _set.__doc__)
##
##    def PerspectiveCenter(self, ppCenter):
##        u'The sensor position.'
##        #return 
##
##    def _get(self):
##        u'The earth Equatorial radius.'
##        #return pRadius
##    def _set(self, pRadius):
##        u'The earth Equatorial radius.'
##    EquatorialRadius = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The 3x3 rotation matrix.'
##        #return pMatrix
##    def _set(self, pMatrix):
##        u'The 3x3 rotation matrix.'
##    RotationMatrix = property(_get, _set, doc = _set.__doc__)
##

IMosaicRaster._methods_ = [
    COMMETHOD(['propget', helpstring(u'The base RasterCatalog.')], HRESULT, 'RasterCatalog',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterCatalog)), 'ppCatalog' )),
    COMMETHOD(['propputref', helpstring(u'The base RasterCatalog.')], HRESULT, 'RasterCatalog',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterCatalog), 'ppCatalog' )),
    COMMETHOD(['propget', helpstring(u'The Where Clause on the base RasterCatalog.')], HRESULT, 'WhereClause',
              ( ['retval', 'out'], POINTER(BSTR), 'WhereClause' )),
    COMMETHOD(['propput', helpstring(u'The Where Clause on the base RasterCatalog.')], HRESULT, 'WhereClause',
              ( ['in'], BSTR, 'WhereClause' )),
    COMMETHOD(['propget', helpstring(u'The Order By fields on the base RasterCatalog.')], HRESULT, 'OrderByField',
              ( ['retval', 'out'], POINTER(BSTR), 'OrderByField' )),
    COMMETHOD(['propput', helpstring(u'The Order By fields on the base RasterCatalog.')], HRESULT, 'OrderByField',
              ( ['in'], BSTR, 'OrderByField' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the ascending flag of OrderBy.')], HRESULT, 'Ascending',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Ascending' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the ascending flag of OrderBy.')], HRESULT, 'Ascending',
              ( ['in'], VARIANT_BOOL, 'Ascending' )),
    COMMETHOD(['propget', helpstring(u'The current mosaic operator type.')], HRESULT, 'MosaicOperatorType',
              ( ['retval', 'out'], POINTER(rstMosaicOperatorType), 'Type' )),
    COMMETHOD(['propput', helpstring(u'The current mosaic operator type.')], HRESULT, 'MosaicOperatorType',
              ( ['in'], rstMosaicOperatorType, 'Type' )),
    COMMETHOD(['propget', helpstring(u'The current mosaic operator.')], HRESULT, 'MosaicOperator',
              ( ['retval', 'out'], POINTER(POINTER(IMosaicOperator)), 'op' )),
    COMMETHOD(['propputref', helpstring(u'The current mosaic operator.')], HRESULT, 'MosaicOperator',
              ( ['in'], POINTER(IMosaicOperator), 'op' )),
    COMMETHOD(['propget', helpstring(u'The current mode for mosaicking pseucolor rasters.')], HRESULT, 'MosaicColormapMode',
              ( ['retval', 'out'], POINTER(rstMosaicColormapMode), 'Mode' )),
    COMMETHOD(['propput', helpstring(u'The current mode for mosaicking pseucolor rasters.')], HRESULT, 'MosaicColormapMode',
              ( ['in'], rstMosaicColormapMode, 'Mode' )),
    COMMETHOD(['propget', helpstring(u'The colormap to be used.')], HRESULT, 'Colormap',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterColormap)), 'ppColormap' )),
    COMMETHOD(['propput', helpstring(u'The colormap to be used.')], HRESULT, 'Colormap',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterColormap), 'ppColormap' )),
]
################################################################
## code template for IMosaicRaster implementation
##class IMosaicRaster_Impl(object):
##    def _get(self):
##        u'The current mosaic operator type.'
##        #return Type
##    def _set(self, Type):
##        u'The current mosaic operator type.'
##    MosaicOperatorType = property(_get, _set, doc = _set.__doc__)
##
##    def RasterCatalog(self, ppCatalog):
##        u'The base RasterCatalog.'
##        #return 
##
##    def MosaicOperator(self, op):
##        u'The current mosaic operator.'
##        #return 
##
##    def _get(self):
##        u'The Order By fields on the base RasterCatalog.'
##        #return OrderByField
##    def _set(self, OrderByField):
##        u'The Order By fields on the base RasterCatalog.'
##    OrderByField = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The current mode for mosaicking pseucolor rasters.'
##        #return Mode
##    def _set(self, Mode):
##        u'The current mode for mosaicking pseucolor rasters.'
##    MosaicColormapMode = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether the ascending flag of OrderBy.'
##        #return Ascending
##    def _set(self, Ascending):
##        u'Indicates whether the ascending flag of OrderBy.'
##    Ascending = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The Where Clause on the base RasterCatalog.'
##        #return WhereClause
##    def _set(self, WhereClause):
##        u'The Where Clause on the base RasterCatalog.'
##    WhereClause = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The colormap to be used.'
##        #return ppColormap
##    def _set(self, ppColormap):
##        u'The colormap to be used.'
##    Colormap = property(_get, _set, doc = _set.__doc__)
##

class MosaicWorkspaceExtension(CoClass):
    u'A mosaic dataset workspace extension.'
    _reg_clsid_ = GUID('{4FC3B53D-CA2C-47FB-BEB0-B3EBCD3D68F5}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
MosaicWorkspaceExtension._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMosaicWorkspaceExtension, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspaceExtension, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspaceExtension2, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspaceExtensionControl, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDatasetContainer, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDatasetContainer2, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDatasetContainer3]

class IPansharpeningFilter2(IPansharpeningFilter):
    _case_insensitive_ = True
    u'Provides access to additional members that control a pansharpening filter.'
    _iid_ = GUID('{64FA96AD-E00F-4AA1-82F7-B7EA95648B18}')
    _idlflags_ = ['oleautomation']
IPansharpeningFilter2._methods_ = [
    COMMETHOD([helpstring(u'Applies pansharpening to a pixel (R, G, B, I).')], HRESULT, 'Sharpen',
              ( ['in'], c_double, 'P' ),
              ( ['in', 'out'], POINTER(c_double), 'R' ),
              ( ['in', 'out'], POINTER(c_double), 'G' ),
              ( ['in', 'out'], POINTER(c_double), 'b' ),
              ( ['in', 'out'], POINTER(c_double), 'I' )),
    COMMETHOD(['propget', helpstring(u"The maximum cellsize, in Pan image's SR, below which pansharpening will be applied.")], HRESULT, 'MaximumPansharpeningCellsize',
              ( ['retval', 'out'], POINTER(c_double), 'CellSize' )),
    COMMETHOD(['propput', helpstring(u"The maximum cellsize, in Pan image's SR, below which pansharpening will be applied.")], HRESULT, 'MaximumPansharpeningCellsize',
              ( ['in'], c_double, 'CellSize' )),
]
################################################################
## code template for IPansharpeningFilter2 implementation
##class IPansharpeningFilter2_Impl(object):
##    def Sharpen(self, P):
##        u'Applies pansharpening to a pixel (R, G, B, I).'
##        #return R, G, b, I
##
##    def _get(self):
##        u"The maximum cellsize, in Pan image's SR, below which pansharpening will be applied."
##        #return CellSize
##    def _set(self, CellSize):
##        u"The maximum cellsize, in Pan image's SR, below which pansharpening will be applied."
##    MaximumPansharpeningCellsize = property(_get, _set, doc = _set.__doc__)
##

class IHeightMeasurement(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Height measurement and the associated uncertainty information.'
    _iid_ = GUID('{02F7A546-A7FB-4859-A4C2-9C6A4B298D9F}')
    _idlflags_ = ['oleautomation']
IHeightMeasurement._methods_ = [
    COMMETHOD(['propget', helpstring(u'The angular unit of this height measurment.')], HRESULT, 'AngularUnit',
              ( ['retval', 'out'], POINTER(BSTR), 'pAngularUnit' )),
    COMMETHOD(['propput', helpstring(u'The angular unit of this height measurment.')], HRESULT, 'AngularUnit',
              ( ['in'], BSTR, 'pAngularUnit' )),
    COMMETHOD(['propget', helpstring(u"The object's base azimuth angle.")], HRESULT, 'AzimuthAngleAtBase',
              ( ['retval', 'out'], POINTER(c_double), 'pAzimuthAngleAtBase' )),
    COMMETHOD(['propput', helpstring(u"The object's base azimuth angle.")], HRESULT, 'AzimuthAngleAtBase',
              ( ['in'], c_double, 'pAzimuthAngleAtBase' )),
    COMMETHOD(['propget', helpstring(u"The object's top azimuth angle.")], HRESULT, 'AzimuthAngleAtTop',
              ( ['retval', 'out'], POINTER(c_double), 'pAzimuthAngleAtTop' )),
    COMMETHOD(['propput', helpstring(u"The object's top azimuth angle.")], HRESULT, 'AzimuthAngleAtTop',
              ( ['in'], c_double, 'pAzimuthAngleAtTop' )),
    COMMETHOD(['propget', helpstring(u"The object's ground projected azimuth angle.")], HRESULT, 'GroundProjectedAzimuthAngle',
              ( ['retval', 'out'], POINTER(c_double), 'pGroundPrjAzimuthAngle' )),
    COMMETHOD(['propput', helpstring(u"The object's ground projected azimuth angle.")], HRESULT, 'GroundProjectedAzimuthAngle',
              ( ['in'], c_double, 'pGroundPrjAzimuthAngle' )),
    COMMETHOD(['propget', helpstring(u'The height measurement.')], HRESULT, 'HeightMeasurement',
              ( ['retval', 'out'], POINTER(c_double), 'pHeightMeasurement' )),
    COMMETHOD(['propput', helpstring(u'The height measurement.')], HRESULT, 'HeightMeasurement',
              ( ['in'], c_double, 'pHeightMeasurement' )),
    COMMETHOD(['propget', helpstring(u'The height measurement uncertainty.')], HRESULT, 'HeightUncertainty',
              ( ['retval', 'out'], POINTER(c_double), 'pHeightUncertainty' )),
    COMMETHOD(['propput', helpstring(u'The height measurement uncertainty.')], HRESULT, 'HeightUncertainty',
              ( ['in'], c_double, 'pHeightUncertainty' )),
    COMMETHOD(['propget', helpstring(u'The linear unit of this height measurment.')], HRESULT, 'LinearUnit',
              ( ['retval', 'out'], POINTER(BSTR), 'pLinearUnit' )),
    COMMETHOD(['propput', helpstring(u'The linear unit of this height measurment.')], HRESULT, 'LinearUnit',
              ( ['in'], BSTR, 'pLinearUnit' )),
    COMMETHOD(['propget', helpstring(u'The minimum distance between the two points measured.')], HRESULT, 'MinimumDistance',
              ( ['retval', 'out'], POINTER(c_double), 'pMinimumDistance' )),
    COMMETHOD(['propput', helpstring(u'The minimum distance between the two points measured.')], HRESULT, 'MinimumDistance',
              ( ['in'], c_double, 'pMinimumDistance' )),
    COMMETHOD([helpstring(u'Resets all the properties of this IHeightMeasurement to their default values.')], HRESULT, 'Reset'),
    COMMETHOD(['propget', helpstring(u"The object's shadow azimuth angle.")], HRESULT, 'ShadowAzimuthAngle',
              ( ['retval', 'out'], POINTER(c_double), 'pShadowAzimuthAngle' )),
    COMMETHOD(['propput', helpstring(u"The object's shadow azimuth angle.")], HRESULT, 'ShadowAzimuthAngle',
              ( ['in'], c_double, 'pShadowAzimuthAngle' )),
]
################################################################
## code template for IHeightMeasurement implementation
##class IHeightMeasurement_Impl(object):
##    def Reset(self):
##        u'Resets all the properties of this IHeightMeasurement to their default values.'
##        #return 
##
##    def _get(self):
##        u'The height measurement.'
##        #return pHeightMeasurement
##    def _set(self, pHeightMeasurement):
##        u'The height measurement.'
##    HeightMeasurement = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The angular unit of this height measurment.'
##        #return pAngularUnit
##    def _set(self, pAngularUnit):
##        u'The angular unit of this height measurment.'
##    AngularUnit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The linear unit of this height measurment.'
##        #return pLinearUnit
##    def _set(self, pLinearUnit):
##        u'The linear unit of this height measurment.'
##    LinearUnit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u"The object's top azimuth angle."
##        #return pAzimuthAngleAtTop
##    def _set(self, pAzimuthAngleAtTop):
##        u"The object's top azimuth angle."
##    AzimuthAngleAtTop = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u"The object's base azimuth angle."
##        #return pAzimuthAngleAtBase
##    def _set(self, pAzimuthAngleAtBase):
##        u"The object's base azimuth angle."
##    AzimuthAngleAtBase = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The minimum distance between the two points measured.'
##        #return pMinimumDistance
##    def _set(self, pMinimumDistance):
##        u'The minimum distance between the two points measured.'
##    MinimumDistance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The height measurement uncertainty.'
##        #return pHeightUncertainty
##    def _set(self, pHeightUncertainty):
##        u'The height measurement uncertainty.'
##    HeightUncertainty = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u"The object's ground projected azimuth angle."
##        #return pGroundPrjAzimuthAngle
##    def _set(self, pGroundPrjAzimuthAngle):
##        u"The object's ground projected azimuth angle."
##    GroundProjectedAzimuthAngle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u"The object's shadow azimuth angle."
##        #return pShadowAzimuthAngle
##    def _set(self, pShadowAzimuthAngle):
##        u"The object's shadow azimuth angle."
##    ShadowAzimuthAngle = property(_get, _set, doc = _set.__doc__)
##

class ContrastBrightnessFunctionArguments(CoClass):
    u'The Contrast/Brighntess arguments.'
    _reg_clsid_ = GUID('{634CBD5D-BB9D-4372-A908-230FB8BA5355}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
ContrastBrightnessFunctionArguments._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunctionArguments, IRasterFunctionArguments2, IContrastBrightnessFunctionArguments, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class RasterTypeItemURI(CoClass):
    u'An item URI constructed by the raster type object.'
    _reg_clsid_ = GUID('{3EF7BE5B-961F-48B2-AF26-439CC2271F57}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
RasterTypeItemURI._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IItemURI, IItemURI2, IItemPaths, IRasterTypeItemURI, IRasterTypeItemURI2]

class IkonosFileCrawler(CoClass):
    u'A crawler for IKONOS and GeoEye-1 files.'
    _reg_clsid_ = GUID('{D796C3CE-7D3A-4BBD-8D43-74212B14E2B5}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
IkonosFileCrawler._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDataSourceCrawler2, IFileCrawler, IFileCrawler2, IItemPaths, IItemPaths2]

class TiePoint(CoClass):
    u'The Image Tie Point class.'
    _reg_clsid_ = GUID('{B7BAD47D-91E4-4228-9457-E8D8EC47A283}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
TiePoint._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ITiePoint]

IRasterWorkspace3._methods_ = [
    COMMETHOD([helpstring(u'Opens a RasterDataset from an in-memry image.')], HRESULT, 'OpenRasterDatasetFromBytes',
              ( ['in'], POINTER(_midlSAFEARRAY(c_ubyte)), 'ppBytes' ),
              ( ['in'], VARIANT_BOOL, 'Copy' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterDataset)), 'ppRasterDataset' )),
]
################################################################
## code template for IRasterWorkspace3 implementation
##class IRasterWorkspace3_Impl(object):
##    def OpenRasterDatasetFromBytes(self, ppBytes, Copy):
##        u'Opens a RasterDataset from an in-memry image.'
##        #return ppRasterDataset
##

IGeodataXform2._methods_ = [
    COMMETHOD([helpstring(u'Transforms a set of 3D points in a given direction.')], HRESULT, 'Transform3D',
              ( ['in'], comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.esriTransformDirection, 'direction' ),
              ( ['in'], c_int, 'npoints' ),
              ( ['in', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPointZ), 'points' )),
    COMMETHOD([helpstring(u'Transforms a collection of 3D points in a given direction')], HRESULT, 'Transform3DPoints',
              ( ['in'], comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.esriTransformDirection, 'direction' ),
              ( ['in', 'out'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPointCollection), 'pPoints' )),
    COMMETHOD([helpstring(u'Computes the footprint in a given direction for a given input extent/footprint.')], HRESULT, 'ComputeFootprint',
              ( ['in'], comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.esriTransformDirection, 'direction' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'pExtent' ),
              ( ['in'], c_int, 'MaximumVertices' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry)), 'ppFootprint' )),
    COMMETHOD([helpstring(u'Gets Z value for a given location (x,y) in map space.')], HRESULT, 'GetZ',
              ( ['in'], c_double, 'x' ),
              ( ['in'], c_double, 'y' ),
              ( ['retval', 'out'], POINTER(c_double), 'z' )),
    COMMETHOD([helpstring(u'Simplifies into a simple geodataxform.')], HRESULT, 'Simplify',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeodataXform)), 'ppNewXf' )),
]
################################################################
## code template for IGeodataXform2 implementation
##class IGeodataXform2_Impl(object):
##    def ComputeFootprint(self, direction, pExtent, MaximumVertices):
##        u'Computes the footprint in a given direction for a given input extent/footprint.'
##        #return ppFootprint
##
##    def Transform3DPoints(self, direction):
##        u'Transforms a collection of 3D points in a given direction'
##        #return pPoints
##
##    def Transform3D(self, direction, npoints):
##        u'Transforms a set of 3D points in a given direction.'
##        #return points
##
##    def GetZ(self, x, y):
##        u'Gets Z value for a given location (x,y) in map space.'
##        #return z
##
##    def Simplify(self):
##        u'Simplifies into a simple geodataxform.'
##        #return ppNewXf
##

IRasterBandColormap._methods_ = [
    COMMETHOD([helpstring(u'Indicates if this band has a colormap.')], HRESULT, 'HasColormap',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'b' )),
    COMMETHOD(['propget', helpstring(u'The colormap of this raster band.')], HRESULT, 'Colormap',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterColormap)), 'Colormap' )),
    COMMETHOD(['propput', helpstring(u'The colormap of this raster band.')], HRESULT, 'Colormap',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterColormap), 'Colormap' )),
]
################################################################
## code template for IRasterBandColormap implementation
##class IRasterBandColormap_Impl(object):
##    def _get(self):
##        u'The colormap of this raster band.'
##        #return Colormap
##    def _set(self, Colormap):
##        u'The colormap of this raster band.'
##    Colormap = property(_get, _set, doc = _set.__doc__)
##
##    def HasColormap(self):
##        u'Indicates if this band has a colormap.'
##        #return b
##

IUniqueValues._methods_ = [
    COMMETHOD([helpstring(u'Looks up unique index of a given value.')], HRESULT, 'Lookup',
              ( ['in'], c_int, 'Value' ),
              ( ['retval', 'out'], POINTER(c_int), 'index' )),
    COMMETHOD([helpstring(u'Adds a value if necessary and returns its value ID.')], HRESULT, 'Add',
              ( ['in'], c_int, 'Value' ),
              ( ['in'], c_int, 'Count' ),
              ( ['retval', 'out'], POINTER(c_int), 'index' )),
    COMMETHOD([helpstring(u'Deletes a value.')], HRESULT, 'Delete',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD([helpstring(u'Empties unique values.')], HRESULT, 'Empty'),
    COMMETHOD(['propget', helpstring(u'The unique value at a given index.')], HRESULT, 'UniqueValue',
              ( ['in'], c_int, 'index' ),
              ( ['retval', 'out'], POINTER(VARIANT), 'UniqueValue' )),
    COMMETHOD(['propget', helpstring(u'The unique value count at a given index.')], HRESULT, 'UniqueCount',
              ( ['in'], c_int, 'idnex' ),
              ( ['retval', 'out'], POINTER(c_int), 'UniqueCount' )),
    COMMETHOD(['propget', helpstring(u'The total number of unique values.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The minimum of values.')], HRESULT, 'Min',
              ( ['retval', 'out'], POINTER(c_int), 'Min' )),
    COMMETHOD(['propget', helpstring(u'The maximum of values.')], HRESULT, 'Max',
              ( ['retval', 'out'], POINTER(c_int), 'Max' )),
    COMMETHOD([helpstring(u'The historgram of values.')], HRESULT, 'GetHistogram',
              ( ['out'], POINTER(VARIANT), 'pUniqueValues' ),
              ( ['out'], POINTER(VARIANT), 'pCounts' )),
]
################################################################
## code template for IUniqueValues implementation
##class IUniqueValues_Impl(object):
##    @property
##    def Count(self):
##        u'The total number of unique values.'
##        #return Count
##
##    @property
##    def UniqueCount(self, idnex):
##        u'The unique value count at a given index.'
##        #return UniqueCount
##
##    @property
##    def Min(self):
##        u'The minimum of values.'
##        #return Min
##
##    @property
##    def Max(self):
##        u'The maximum of values.'
##        #return Max
##
##    def GetHistogram(self):
##        u'The historgram of values.'
##        #return pUniqueValues, pCounts
##
##    @property
##    def UniqueValue(self, index):
##        u'The unique value at a given index.'
##        #return UniqueValue
##
##    def Add(self, Value, Count):
##        u'Adds a value if necessary and returns its value ID.'
##        #return index
##
##    def Lookup(self, Value):
##        u'Looks up unique index of a given value.'
##        #return index
##
##    def Empty(self):
##        u'Empties unique values.'
##        #return 
##
##    def Delete(self, Value):
##        u'Deletes a value.'
##        #return 
##

IUniqueValues2._methods_ = [
    COMMETHOD(['propget', helpstring(u'The unique value count at a given index.')], HRESULT, 'LargeUniqueCount',
              ( ['in'], c_int, 'idnex' ),
              ( ['retval', 'out'], POINTER(c_double), 'UniqueCount' )),
    COMMETHOD([helpstring(u'The historgram of values.')], HRESULT, 'GetLargeHistogram',
              ( ['out'], POINTER(VARIANT), 'pUniqueValues' ),
              ( ['out'], POINTER(VARIANT), 'pCounts' )),
]
################################################################
## code template for IUniqueValues2 implementation
##class IUniqueValues2_Impl(object):
##    def GetLargeHistogram(self):
##        u'The historgram of values.'
##        #return pUniqueValues, pCounts
##
##    @property
##    def LargeUniqueCount(self, idnex):
##        u'The unique value count at a given index.'
##        #return UniqueCount
##

IMosaicDatasetOperationParameters._methods_ = [
    COMMETHOD(['propputref', helpstring(u'All parameters associated with the mosaic dataset operation.')], HRESULT, 'Parameters',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet), 'ppAllParameters' )),
    COMMETHOD(['propget', helpstring(u'All parameters associated with the mosaic dataset operation.')], HRESULT, 'Parameters',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet)), 'ppAllParameters' )),
    COMMETHOD(['propputref', helpstring(u'The external progressor object associated with the mosaic dataset operation.')], HRESULT, 'Progressor',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IProgressor), 'ppProgressor' )),
    COMMETHOD(['propget', helpstring(u'The external progressor object associated with the mosaic dataset operation.')], HRESULT, 'Progressor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IProgressor)), 'ppProgressor' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the mosaic dataset is in read-only mode. Mosaic dataset operations do not perform write operations on a read-only mosaic.')], HRESULT, 'IsDatasetReadOnly',
              ( ['in'], VARIANT_BOOL, 'pbIsDatasetReadOnly' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the mosaic dataset is in read-only mode. Mosaic dataset operations do not perform write operations on a read-only mosaic.')], HRESULT, 'IsDatasetReadOnly',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbIsDatasetReadOnly' )),
    COMMETHOD(['propputref', helpstring(u'The properties of the result associated with the mosaic dataset operation.')], HRESULT, 'Results',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet), 'ppOperationResults' )),
    COMMETHOD(['propget', helpstring(u'The properties of the result associated with the mosaic dataset operation.')], HRESULT, 'Results',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet)), 'ppOperationResults' )),
]
################################################################
## code template for IMosaicDatasetOperationParameters implementation
##class IMosaicDatasetOperationParameters_Impl(object):
##    def _get(self):
##        u'Indicates whether the mosaic dataset is in read-only mode. Mosaic dataset operations do not perform write operations on a read-only mosaic.'
##        #return pbIsDatasetReadOnly
##    def _set(self, pbIsDatasetReadOnly):
##        u'Indicates whether the mosaic dataset is in read-only mode. Mosaic dataset operations do not perform write operations on a read-only mosaic.'
##    IsDatasetReadOnly = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Progressor(self, ppProgressor):
##        u'The external progressor object associated with the mosaic dataset operation.'
##        #return 
##
##    @property
##    def Results(self, ppOperationResults):
##        u'The properties of the result associated with the mosaic dataset operation.'
##        #return 
##
##    @property
##    def Parameters(self, ppAllParameters):
##        u'All parameters associated with the mosaic dataset operation.'
##        #return 
##

class IRasterXform2(IRasterXform):
    _case_insensitive_ = True
    u'Provides access to members that control raster specific geodata transform.'
    _iid_ = GUID('{8B498CF9-34C7-4A68-BF7C-989CDBDC1AB9}')
    _idlflags_ = ['oleautomation']
IRasterXform2._methods_ = [
    COMMETHOD([helpstring(u'Finishes up and gives a geodataxform a chance to clean up.')], HRESULT, 'Finish'),
]
################################################################
## code template for IRasterXform2 implementation
##class IRasterXform2_Impl(object):
##    def Finish(self):
##        u'Finishes up and gives a geodataxform a chance to clean up.'
##        #return 
##


# values for enumeration 'esriRasterLoaderError'
E_RASTERLOADER_FAILED_TO_LOAD = -2147217407
E_RASTERLOADER_UNKNOWN_ERROR = -2147217408
esriRasterLoaderError = c_int # enum
ICancelListener._methods_ = [
    COMMETHOD(['propget', helpstring(u'The current cancel tracker.')], HRESULT, 'CancelTracker',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel)), 'ppCancel' )),
    COMMETHOD(['propputref', helpstring(u'The current cancel tracker.')], HRESULT, 'CancelTracker',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'ppCancel' )),
]
################################################################
## code template for ICancelListener implementation
##class ICancelListener_Impl(object):
##    def CancelTracker(self, ppCancel):
##        u'The current cancel tracker.'
##        #return 
##

IDEImageServer._methods_ = [
    COMMETHOD(['propget', helpstring(u'The extent of the image service object.')], HRESULT, 'Extent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'Extent' )),
    COMMETHOD(['propputref', helpstring(u'The extent of the image service object.')], HRESULT, 'Extent',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'Extent' )),
    COMMETHOD(['propget', helpstring(u'The spatial reference of the image service object.')], HRESULT, 'SpatialReference',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference)), 'SpatialReference' )),
    COMMETHOD(['propputref', helpstring(u'The spatial reference of the image service object.')], HRESULT, 'SpatialReference',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'SpatialReference' )),
    COMMETHOD(['propget', helpstring(u'The number of bands in the collection.')], HRESULT, 'BandCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propput', helpstring(u'The number of bands in the collection.')], HRESULT, 'BandCount',
              ( ['in'], c_int, 'Count' )),
    COMMETHOD(['propget', helpstring(u'Mosaic property of Image Server Layer.')], HRESULT, 'MosaicProps',
              ( ['retval', 'out'], POINTER(BSTR), 'Mosaic' )),
    COMMETHOD(['propput', helpstring(u'Mosaic property of Image Server Layer.')], HRESULT, 'MosaicProps',
              ( ['in'], BSTR, 'Mosaic' )),
    COMMETHOD(['propget', helpstring(u'ClientXADef property of Image Server Layer.')], HRESULT, 'ClientXADefProps',
              ( ['retval', 'out'], POINTER(BSTR), 'ClientXADef' )),
    COMMETHOD(['propput', helpstring(u'ClientXADef property of Image Server Layer.')], HRESULT, 'ClientXADefProps',
              ( ['in'], BSTR, 'ClientXADef' )),
]
################################################################
## code template for IDEImageServer implementation
##class IDEImageServer_Impl(object):
##    def _get(self):
##        u'Mosaic property of Image Server Layer.'
##        #return Mosaic
##    def _set(self, Mosaic):
##        u'Mosaic property of Image Server Layer.'
##    MosaicProps = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The number of bands in the collection.'
##        #return Count
##    def _set(self, Count):
##        u'The number of bands in the collection.'
##    BandCount = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'ClientXADef property of Image Server Layer.'
##        #return ClientXADef
##    def _set(self, ClientXADef):
##        u'ClientXADef property of Image Server Layer.'
##    ClientXADefProps = property(_get, _set, doc = _set.__doc__)
##
##    def Extent(self, Extent):
##        u'The extent of the image service object.'
##        #return 
##
##    def SpatialReference(self, SpatialReference):
##        u'The spatial reference of the image service object.'
##        #return 
##


# values for enumeration 'esriRasterSdePyramidOptEnum'
esriRasterSdePyramidDonotBuild = 0
esriRasterSdePyramidBuildSkipFirstLevel = 1
esriRasterSdePyramidBuildWithFirstLevel = 2
esriRasterSdePyramidOptEnum = c_int # enum
class IFormatTest(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that provide information on the format of a raster .'
    _iid_ = GUID('{3D3E5180-6C5D-11D3-80EE-00500462E955}')
    _idlflags_ = ['oleautomation']
IFormatTest._methods_ = [
    COMMETHOD([helpstring(u'Tests whether a dataset is a raster format given a title.')], HRESULT, 'FormatVerify',
              ( ['in'], BSTR, 'Path' ),
              ( ['in'], BSTR, 'Title' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'itis1' )),
    COMMETHOD([helpstring(u"The title of the dataset's format, if supported.")], HRESULT, 'FormatIdentify',
              ( ['in'], BSTR, 'Path' ),
              ( ['retval', 'out'], POINTER(POINTER(IFormatData)), 'Data' )),
]
################################################################
## code template for IFormatTest implementation
##class IFormatTest_Impl(object):
##    def FormatVerify(self, Path, Title):
##        u'Tests whether a dataset is a raster format given a title.'
##        #return itis1
##
##    def FormatIdentify(self, Path):
##        u"The title of the dataset's format, if supported."
##        #return Data
##

IURIPropertiesFilter._methods_ = [
    COMMETHOD(['propputref', helpstring(u'Set of name-value pairs that are expected to appear as part of incoming item URIs.')], HRESULT, 'Values',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet), 'ppValues' )),
    COMMETHOD(['propget', helpstring(u'Set of name-value pairs that are expected to appear as part of incoming item URIs.')], HRESULT, 'Values',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet)), 'ppValues' )),
]
################################################################
## code template for IURIPropertiesFilter implementation
##class IURIPropertiesFilter_Impl(object):
##    @property
##    def Values(self, ppValues):
##        u'Set of name-value pairs that are expected to appear as part of incoming item URIs.'
##        #return 
##

class ColorspaceConversionFunctionArguments(CoClass):
    u'The class for raster colorspace conversion arguments.'
    _reg_clsid_ = GUID('{069B72CD-D41C-4C1F-8784-76609830AB8A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
ColorspaceConversionFunctionArguments._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunctionArguments, IRasterFunctionArguments2, IColorspaceConversionFunctionArguments, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class TrendFunction(CoClass):
    u'The Trend function.'
    _reg_clsid_ = GUID('{12038DE4-0D34-4772-9F71-A1EA4D1EA83A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
TrendFunction._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunction, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

IRect._methods_ = [
    COMMETHOD(['propget', helpstring(u'Maximum X value of the rectangle.')], HRESULT, 'XMax',
              ( ['retval', 'out'], POINTER(c_double), 'pVal' )),
    COMMETHOD(['propput', helpstring(u'Maximum X value of the rectangle.')], HRESULT, 'XMax',
              ( ['in'], c_double, 'pVal' )),
    COMMETHOD(['propget', helpstring(u'Minimum X value of the rectangle.')], HRESULT, 'XMin',
              ( ['retval', 'out'], POINTER(c_double), 'pVal' )),
    COMMETHOD(['propput', helpstring(u'Minimum X value of the rectangle.')], HRESULT, 'XMin',
              ( ['in'], c_double, 'pVal' )),
    COMMETHOD(['propget', helpstring(u'Maximum Y value of the rectangle.')], HRESULT, 'YMax',
              ( ['retval', 'out'], POINTER(c_double), 'pVal' )),
    COMMETHOD(['propput', helpstring(u'Maximum Y value of the rectangle.')], HRESULT, 'YMax',
              ( ['in'], c_double, 'pVal' )),
    COMMETHOD(['propget', helpstring(u'Minimum Y value of the rectangle.')], HRESULT, 'YMin',
              ( ['retval', 'out'], POINTER(c_double), 'pVal' )),
    COMMETHOD(['propput', helpstring(u'Minimum Y value of the rectangle.')], HRESULT, 'YMin',
              ( ['in'], c_double, 'pVal' )),
    COMMETHOD([helpstring(u"Reset from Esri's Envelope Object.")], HRESULT, 'Set2Env',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'env' )),
    COMMETHOD([helpstring(u"Set Esri's Envelope Object from a rectangle.")], HRESULT, 'Convert2Env',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'env' )),
]
################################################################
## code template for IRect implementation
##class IRect_Impl(object):
##    def _get(self):
##        u'Maximum Y value of the rectangle.'
##        #return pVal
##    def _set(self, pVal):
##        u'Maximum Y value of the rectangle.'
##    YMax = property(_get, _set, doc = _set.__doc__)
##
##    def Set2Env(self, env):
##        u"Reset from Esri's Envelope Object."
##        #return 
##
##    def Convert2Env(self, env):
##        u"Set Esri's Envelope Object from a rectangle."
##        #return 
##
##    def _get(self):
##        u'Maximum X value of the rectangle.'
##        #return pVal
##    def _set(self, pVal):
##        u'Maximum X value of the rectangle.'
##    XMax = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Minimum X value of the rectangle.'
##        #return pVal
##    def _set(self, pVal):
##        u'Minimum X value of the rectangle.'
##    XMin = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Minimum Y value of the rectangle.'
##        #return pVal
##    def _set(self, pVal):
##        u'Minimum Y value of the rectangle.'
##    YMin = property(_get, _set, doc = _set.__doc__)
##

class PanSharpenGramSchmidtFunction(CoClass):
    u'Pan Sharpen Gram Schmidt function.'
    _reg_clsid_ = GUID('{47775611-00DD-44DD-B771-A50932EBCD40}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
PanSharpenGramSchmidtFunction._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunction, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class IRasterMapModel(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to member that control RasterMapModel.'
    _iid_ = GUID('{A10A39E4-B9CA-11D2-8E30-00A0249480F0}')
    _idlflags_ = ['oleautomation', 'restricted']
IRasterMapModel._methods_ = [
    COMMETHOD(['bindable', helpstring(u'The AngularUnit of the map model.'), 'propget'], HRESULT, 'AngularUnit',
              ( ['retval', 'out'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.esriSRUnitType), 'pVal' )),
    COMMETHOD(['bindable', helpstring(u'The AngularUnit of the map model.'), 'propput'], HRESULT, 'AngularUnit',
              ( ['in'], comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.esriSRUnitType, 'pVal' )),
    COMMETHOD(['bindable', helpstring(u'The LinearUnit of the map model.'), 'propget'], HRESULT, 'LinearUnit',
              ( ['retval', 'out'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.esriSRUnitType), 'pVal' )),
    COMMETHOD(['bindable', helpstring(u'The LinearUnit of the map model.'), 'propput'], HRESULT, 'LinearUnit',
              ( ['in'], comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.esriSRUnitType, 'pVal' )),
    COMMETHOD(['bindable', helpstring(u'The Spheroid of the map model.'), 'propget'], HRESULT, 'Spheroid',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpheroid)), 'pVal' )),
    COMMETHOD(['bindable', helpstring(u'The Spheroid of the map model.'), 'propput'], HRESULT, 'Spheroid',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpheroid), 'pVal' )),
    COMMETHOD(['bindable', helpstring(u'The Datum of the map model.'), 'propget'], HRESULT, 'Datum',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IDatum)), 'pVal' )),
    COMMETHOD(['bindable', helpstring(u'The Datum of the map model.'), 'propput'], HRESULT, 'Datum',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IDatum), 'pVal' )),
    COMMETHOD(['bindable', helpstring(u'The Transformation of the map model.'), 'propget'], HRESULT, 'XForm',
              ( ['retval', 'out'], POINTER(POINTER(IXForm)), 'pVal' )),
    COMMETHOD(['bindable', helpstring(u'The Transformation of the map model.'), 'propput'], HRESULT, 'XForm',
              ( ['in'], POINTER(IXForm), 'pVal' )),
    COMMETHOD(['bindable', helpstring(u'The Extent of the map model.'), 'propget'], HRESULT, 'Extent',
              ( ['retval', 'out'], POINTER(POINTER(IRect)), 'pVal' )),
    COMMETHOD(['bindable', helpstring(u'The Extent of the map model.'), 'propput'], HRESULT, 'Extent',
              ( ['in'], POINTER(IRect), 'pVal' )),
    COMMETHOD(['bindable', helpstring(u'The Projection of the map model.'), 'propget'], HRESULT, 'Projection',
              ( ['retval', 'out'], POINTER(POINTER(IGeodeticProjection)), 'pVal' )),
    COMMETHOD(['bindable', helpstring(u'The Projection of the map model.'), 'propput'], HRESULT, 'Projection',
              ( ['in'], POINTER(IGeodeticProjection), 'pVal' )),
    COMMETHOD([helpstring(u'Converts to Esri Spatial Reference.')], HRESULT, 'Convert2SR',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReferenceFactory), 'factory' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference)), 'ppSR' )),
    COMMETHOD([helpstring(u'Resets to Esri Spatial Reference.')], HRESULT, 'Set2SR',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'pSR' )),
    COMMETHOD([helpstring(u'Sets MapModel for updating.')], HRESULT, 'Touch',
              ( ['in'], c_int, 'disp_id' )),
]
################################################################
## code template for IRasterMapModel implementation
##class IRasterMapModel_Impl(object):
##    def _get(self):
##        u'The AngularUnit of the map model.'
##        #return pVal
##    def _set(self, pVal):
##        u'The AngularUnit of the map model.'
##    AngularUnit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The Spheroid of the map model.'
##        #return pVal
##    def _set(self, pVal):
##        u'The Spheroid of the map model.'
##    Spheroid = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The LinearUnit of the map model.'
##        #return pVal
##    def _set(self, pVal):
##        u'The LinearUnit of the map model.'
##    LinearUnit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The Datum of the map model.'
##        #return pVal
##    def _set(self, pVal):
##        u'The Datum of the map model.'
##    Datum = property(_get, _set, doc = _set.__doc__)
##
##    def Convert2SR(self, factory):
##        u'Converts to Esri Spatial Reference.'
##        #return ppSR
##
##    def _get(self):
##        u'The Extent of the map model.'
##        #return pVal
##    def _set(self, pVal):
##        u'The Extent of the map model.'
##    Extent = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The Projection of the map model.'
##        #return pVal
##    def _set(self, pVal):
##        u'The Projection of the map model.'
##    Projection = property(_get, _set, doc = _set.__doc__)
##
##    def Touch(self, disp_id):
##        u'Sets MapModel for updating.'
##        #return 
##
##    def Set2SR(self, pSR):
##        u'Resets to Esri Spatial Reference.'
##        #return 
##
##    def _get(self):
##        u'The Transformation of the map model.'
##        #return pVal
##    def _set(self, pVal):
##        u'The Transformation of the map model.'
##    XForm = property(_get, _set, doc = _set.__doc__)
##

IRasterSdeServerOperation._methods_ = [
    COMMETHOD([helpstring(u'Creates a raster dataset on an SDE server.')], HRESULT, 'Create'),
    COMMETHOD([helpstring(u'Updates properties of raster dataset on SDE server.')], HRESULT, 'Update'),
    COMMETHOD([helpstring(u'Deletes raster dataset from SDE server.')], HRESULT, 'Delete'),
    COMMETHOD([helpstring(u'Instructs Raster SDE Server to mosaic data based on the defined storage properties.')], HRESULT, 'Mosaic'),
    COMMETHOD([helpstring(u'Instructs Raster SDE Server to build pyramid layers based on the defined storage properties.')], HRESULT, 'BuildPyramids'),
    COMMETHOD([helpstring(u'Computes statistics on a raster SDE.')], HRESULT, 'ComputeStatistics'),
]
################################################################
## code template for IRasterSdeServerOperation implementation
##class IRasterSdeServerOperation_Impl(object):
##    def BuildPyramids(self):
##        u'Instructs Raster SDE Server to build pyramid layers based on the defined storage properties.'
##        #return 
##
##    def Create(self):
##        u'Creates a raster dataset on an SDE server.'
##        #return 
##
##    def Update(self):
##        u'Updates properties of raster dataset on SDE server.'
##        #return 
##
##    def ComputeStatistics(self):
##        u'Computes statistics on a raster SDE.'
##        #return 
##
##    def Mosaic(self):
##        u'Instructs Raster SDE Server to mosaic data based on the defined storage properties.'
##        #return 
##
##    def Delete(self):
##        u'Deletes raster dataset from SDE server.'
##        #return 
##

class RasterWorkspaceFactory(CoClass):
    u'Provides access to members that control creation of raster workspaces.'
    _reg_clsid_ = GUID('{4C91D963-3390-11D2-8D25-0000F8780535}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
RasterWorkspaceFactory._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspaceFactory, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspaceFactory2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]

class ItemURI(CoClass):
    u'An item URI object that identifies an item returned by a raster builder.'
    _reg_clsid_ = GUID('{FD27E0BE-6D83-40DF-A226-CFB614F7655D}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
ItemURI._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IItemURI, IItemURI2]

class SynchronizeParameters(CoClass):
    u'An object that controls how items in a mosaic dataset are synchronized.'
    _reg_clsid_ = GUID('{737C8139-853B-4C31-A58A-A1C4D7624E34}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
SynchronizeParameters._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMosaicDatasetOperationParameters, IMosaicDatasetOperationParameters2, ISynchronizeParameters, ISynchronizeParameters2, IBuildPyramidsParameters, ICalculateStatisticsParameters, ISelectionParameters, IThreadedOperationParameters]

IRasterDefaultProps._methods_ = [
    COMMETHOD(['propget', helpstring(u'The default pixel size in X.')], HRESULT, 'DefaultPixelWidth',
              ( ['retval', 'out'], POINTER(c_double), 'Width' )),
    COMMETHOD(['propget', helpstring(u'The  default pixel size in Y.')], HRESULT, 'DefaultPixelHeight',
              ( ['retval', 'out'], POINTER(c_double), 'Height' )),
    COMMETHOD(['propget', helpstring(u'The default union extent.')], HRESULT, 'DefaultUnionExtent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'Extent' )),
    COMMETHOD(['propget', helpstring(u'The default intersect extent.')], HRESULT, 'DefaultIntersectExtent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'Extent' )),
    COMMETHOD(['propget', helpstring(u'The default spatial reference.')], HRESULT, 'DefaultSpatialReference',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference)), 'SpatialRef' )),
    COMMETHOD(['hidden', helpstring(u'Resets the raster to default state')], HRESULT, 'ResetToDefault'),
]
################################################################
## code template for IRasterDefaultProps implementation
##class IRasterDefaultProps_Impl(object):
##    @property
##    def DefaultPixelHeight(self):
##        u'The  default pixel size in Y.'
##        #return Height
##
##    @property
##    def DefaultIntersectExtent(self):
##        u'The default intersect extent.'
##        #return Extent
##
##    def ResetToDefault(self):
##        u'Resets the raster to default state'
##        #return 
##
##    @property
##    def DefaultSpatialReference(self):
##        u'The default spatial reference.'
##        #return SpatialRef
##
##    @property
##    def DefaultPixelWidth(self):
##        u'The default pixel size in X.'
##        #return Width
##
##    @property
##    def DefaultUnionExtent(self):
##        u'The default union extent.'
##        #return Extent
##

IExtractBandFunctionArguments._methods_ = [
    COMMETHOD(['propget', helpstring(u'The source raster object.')], HRESULT, 'Raster',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppRaster' )),
    COMMETHOD(['propputref', helpstring(u'The source raster object.')], HRESULT, 'Raster',
              ( ['in'], POINTER(IUnknown), 'ppRaster' )),
    COMMETHOD(['propget', helpstring(u'The list of band IDs (0 based) to be extracted.')], HRESULT, 'BandIDs',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray)), 'ppBandIDs' )),
    COMMETHOD(['propputref', helpstring(u'The list of band IDs (0 based) to be extracted.')], HRESULT, 'BandIDs',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray), 'ppBandIDs' )),
]
################################################################
## code template for IExtractBandFunctionArguments implementation
##class IExtractBandFunctionArguments_Impl(object):
##    def Raster(self, ppRaster):
##        u'The source raster object.'
##        #return 
##
##    def BandIDs(self, ppBandIDs):
##        u'The list of band IDs (0 based) to be extracted.'
##        #return 
##

ISpeckleFilter._methods_ = [
    COMMETHOD(['propget', helpstring(u'The speckle filter type.')], HRESULT, 'FilterType',
              ( ['retval', 'out'], POINTER(esriSpeckleFilterType), 'pType' )),
    COMMETHOD(['propput', helpstring(u'The speckle filter type.')], HRESULT, 'FilterType',
              ( ['in'], esriSpeckleFilterType, 'pType' )),
    COMMETHOD([helpstring(u'Sets the size of the speckle filter kernel.')], HRESULT, 'SetSize',
              ( ['in'], c_int, 'nColumns' ),
              ( ['in'], c_int, 'nRows' )),
    COMMETHOD([helpstring(u'Gets the size of the speckle filter kernel.')], HRESULT, 'GetSize',
              ( ['in', 'out'], POINTER(c_int), 'nColumns' ),
              ( ['in', 'out'], POINTER(c_int), 'nRows' )),
    COMMETHOD([helpstring(u'Gets the center position of the speckle filter kernel.')], HRESULT, 'GetCenterPosition',
              ( ['in', 'out'], POINTER(c_int), 'atColumn' ),
              ( ['in', 'out'], POINTER(c_int), 'atRow' )),
    COMMETHOD(['propget', helpstring(u'The speckle noise model. This parameter is used only for the Lee filter type.')], HRESULT, 'NoiseModel',
              ( ['retval', 'out'], POINTER(esriSpeckleNoiseModel), 'pType' )),
    COMMETHOD(['propput', helpstring(u'The speckle noise model. This parameter is used only for the Lee filter type.')], HRESULT, 'NoiseModel',
              ( ['in'], esriSpeckleNoiseModel, 'pType' )),
    COMMETHOD(['propput', helpstring(u'The noise variance. This parameter is used only for Lee filter with Additive or Additive and Multiplicative(both) noise models.')], HRESULT, 'NoiseVariance',
              ( ['in'], c_double, 'noiseVar' )),
    COMMETHOD(['propget', helpstring(u'The noise variance. This parameter is used only for Lee filter with Additive or Additive and Multiplicative(both) noise models.')], HRESULT, 'NoiseVariance',
              ( ['retval', 'out'], POINTER(c_double), 'noiseVar' )),
    COMMETHOD(['propput', helpstring(u'The mean additive noise. This parameter is used only for Lee filter with Additive and Multiplicative(both) noise models.')], HRESULT, 'AdditiveNoiseMean',
              ( ['in'], c_double, 'addNoiseMean' )),
    COMMETHOD(['propget', helpstring(u'The mean additive noise. This parameter is used only for Lee filter with Additive and Multiplicative(both) noise models.')], HRESULT, 'AdditiveNoiseMean',
              ( ['retval', 'out'], POINTER(c_double), 'addNoiseMean' )),
    COMMETHOD(['propput', helpstring(u'The mean multiplicative noise. This parameter is used only for Lee filter with Multiplicative or Additive and Multiplicative(both) noise models.')], HRESULT, 'MultiplicativeNoiseMean',
              ( ['in'], c_double, 'mulNoiseMean' )),
    COMMETHOD(['propget', helpstring(u'The mean multiplicative noise. This parameter is used only for Lee filter with Multiplicative or Additive and Multiplicative(both) noise models.')], HRESULT, 'MultiplicativeNoiseMean',
              ( ['retval', 'out'], POINTER(c_double), 'mulNoiseMean' )),
    COMMETHOD(['propput', helpstring(u'The number of looks. This parameter is used only for Lee filter with Multiplicative noise model as well as the Enhanced Lee filter.')], HRESULT, 'NLooks',
              ( ['in'], c_int, 'NLooks' )),
    COMMETHOD(['propget', helpstring(u'The number of looks. This parameter is used only for Lee filter with Multiplicative noise model as well as the Enhanced Lee filter.')], HRESULT, 'NLooks',
              ( ['retval', 'out'], POINTER(c_int), 'NLooks' )),
    COMMETHOD(['propput', helpstring(u'The extent of damping applied. This parameter is used only for Enhanced Lee filter and Frost filter.')], HRESULT, 'DampFactor',
              ( ['in'], c_double, 'DampFactor' )),
    COMMETHOD(['propget', helpstring(u'The extent of damping applied. This parameter is used only for Enhanced Lee filter and Frost filter.')], HRESULT, 'DampFactor',
              ( ['retval', 'out'], POINTER(c_double), 'DampFactor' )),
]
################################################################
## code template for ISpeckleFilter implementation
##class ISpeckleFilter_Impl(object):
##    def _get(self):
##        u'The mean multiplicative noise. This parameter is used only for Lee filter with Multiplicative or Additive and Multiplicative(both) noise models.'
##        #return mulNoiseMean
##    def _set(self, mulNoiseMean):
##        u'The mean multiplicative noise. This parameter is used only for Lee filter with Multiplicative or Additive and Multiplicative(both) noise models.'
##    MultiplicativeNoiseMean = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The extent of damping applied. This parameter is used only for Enhanced Lee filter and Frost filter.'
##        #return DampFactor
##    def _set(self, DampFactor):
##        u'The extent of damping applied. This parameter is used only for Enhanced Lee filter and Frost filter.'
##    DampFactor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The mean additive noise. This parameter is used only for Lee filter with Additive and Multiplicative(both) noise models.'
##        #return addNoiseMean
##    def _set(self, addNoiseMean):
##        u'The mean additive noise. This parameter is used only for Lee filter with Additive and Multiplicative(both) noise models.'
##    AdditiveNoiseMean = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The number of looks. This parameter is used only for Lee filter with Multiplicative noise model as well as the Enhanced Lee filter.'
##        #return NLooks
##    def _set(self, NLooks):
##        u'The number of looks. This parameter is used only for Lee filter with Multiplicative noise model as well as the Enhanced Lee filter.'
##    NLooks = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The noise variance. This parameter is used only for Lee filter with Additive or Additive and Multiplicative(both) noise models.'
##        #return noiseVar
##    def _set(self, noiseVar):
##        u'The noise variance. This parameter is used only for Lee filter with Additive or Additive and Multiplicative(both) noise models.'
##    NoiseVariance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The speckle filter type.'
##        #return pType
##    def _set(self, pType):
##        u'The speckle filter type.'
##    FilterType = property(_get, _set, doc = _set.__doc__)
##
##    def GetSize(self):
##        u'Gets the size of the speckle filter kernel.'
##        #return nColumns, nRows
##
##    def GetCenterPosition(self):
##        u'Gets the center position of the speckle filter kernel.'
##        #return atColumn, atRow
##
##    def SetSize(self, nColumns, nRows):
##        u'Sets the size of the speckle filter kernel.'
##        #return 
##
##    def _get(self):
##        u'The speckle noise model. This parameter is used only for the Lee filter type.'
##        #return pType
##    def _set(self, pType):
##        u'The speckle noise model. This parameter is used only for the Lee filter type.'
##    NoiseModel = property(_get, _set, doc = _set.__doc__)
##

IRasterSdeServerOperation2._methods_ = [
    COMMETHOD([helpstring(u'Creates a raster dataset on an SDE server.')], HRESULT, 'Create'),
    COMMETHOD([helpstring(u'Updates properties of raster dataset on SDE server.')], HRESULT, 'Update'),
    COMMETHOD([helpstring(u'Deletes raster dataset from SDE server.')], HRESULT, 'Delete'),
    COMMETHOD([helpstring(u'Instructs Raster SDE Server to mosaic data based on the defined storage properties.')], HRESULT, 'Mosaic'),
    COMMETHOD([helpstring(u'Instructs Raster SDE Server to build pyramid layers based on the defined storage properties.')], HRESULT, 'BuildPyramids'),
    COMMETHOD([helpstring(u'Computes statistics on a raster SDE.')], HRESULT, 'ComputeStatistics'),
    COMMETHOD([helpstring(u'Insert a raster into a raster catalog on an ArcSDE server.')], HRESULT, 'Insert'),
]
################################################################
## code template for IRasterSdeServerOperation2 implementation
##class IRasterSdeServerOperation2_Impl(object):
##    def Insert(self):
##        u'Insert a raster into a raster catalog on an ArcSDE server.'
##        #return 
##
##    def BuildPyramids(self):
##        u'Instructs Raster SDE Server to build pyramid layers based on the defined storage properties.'
##        #return 
##
##    def Create(self):
##        u'Creates a raster dataset on an SDE server.'
##        #return 
##
##    def Update(self):
##        u'Updates properties of raster dataset on SDE server.'
##        #return 
##
##    def ComputeStatistics(self):
##        u'Computes statistics on a raster SDE.'
##        #return 
##
##    def Mosaic(self):
##        u'Instructs Raster SDE Server to mosaic data based on the defined storage properties.'
##        #return 
##
##    def Delete(self):
##        u'Deletes raster dataset from SDE server.'
##        #return 
##

class Library(object):
    u'Esri DataSourcesRaster Object Library 10.2'
    name = u'esriDataSourcesRaster'
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)

IDEMosaicDataset._methods_ = [
    COMMETHOD(['propget', helpstring(u'The mosaic dataset content.')], HRESULT, 'Content',
              ( ['retval', 'out'], POINTER(VARIANT), 'pContent' )),
    COMMETHOD(['propput', helpstring(u'The mosaic dataset content.')], HRESULT, 'Content',
              ( ['in'], VARIANT, 'pContent' )),
    COMMETHOD(['propget', helpstring(u'Indicates if this is a referenced mosaic dataset.')], HRESULT, 'Referenced',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pReferenced' )),
    COMMETHOD(['propput', helpstring(u'Indicates if this is a referenced mosaic dataset.')], HRESULT, 'Referenced',
              ( ['in'], VARIANT_BOOL, 'pReferenced' )),
    COMMETHOD(['propget', helpstring(u'The mosaic dataset table names.')], HRESULT, 'ChildrenNames',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray)), 'ppNames' )),
    COMMETHOD(['propputref', helpstring(u'The mosaic dataset table names.')], HRESULT, 'ChildrenNames',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray), 'ppNames' )),
    COMMETHOD(['propget', helpstring(u'The DE raster catalog.')], HRESULT, 'DERasterCatalog',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDERasterCatalog)), 'ppDECatalog' )),
    COMMETHOD(['propputref', helpstring(u'The DE raster catalog.')], HRESULT, 'DERasterCatalog',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDERasterCatalog), 'ppDECatalog' )),
    COMMETHOD(['propget', helpstring(u'The definition query on raster catalog.')], HRESULT, 'DefinitionQuery',
              ( ['retval', 'out'], POINTER(BSTR), 'pQuery' )),
    COMMETHOD(['propput', helpstring(u'The definition query on raster catalog.')], HRESULT, 'DefinitionQuery',
              ( ['in'], BSTR, 'pQuery' )),
    COMMETHOD(['propget', helpstring(u'The mosaic dataset creation parameters.')], HRESULT, 'Parameters',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet)), 'ppParameters' )),
    COMMETHOD(['propputref', helpstring(u'The mosaic dataset creation parameters.')], HRESULT, 'Parameters',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet), 'ppParameters' )),
]
################################################################
## code template for IDEMosaicDataset implementation
##class IDEMosaicDataset_Impl(object):
##    def ChildrenNames(self, ppNames):
##        u'The mosaic dataset table names.'
##        #return 
##
##    def _get(self):
##        u'Indicates if this is a referenced mosaic dataset.'
##        #return pReferenced
##    def _set(self, pReferenced):
##        u'Indicates if this is a referenced mosaic dataset.'
##    Referenced = property(_get, _set, doc = _set.__doc__)
##
##    def Parameters(self, ppParameters):
##        u'The mosaic dataset creation parameters.'
##        #return 
##
##    def _get(self):
##        u'The mosaic dataset content.'
##        #return pContent
##    def _set(self, pContent):
##        u'The mosaic dataset content.'
##    Content = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The definition query on raster catalog.'
##        #return pQuery
##    def _set(self, pQuery):
##        u'The definition query on raster catalog.'
##    DefinitionQuery = property(_get, _set, doc = _set.__doc__)
##
##    def DERasterCatalog(self, ppDECatalog):
##        u'The DE raster catalog.'
##        #return 
##

class RasterConvolutionFilter(CoClass):
    u'A raster kernel-based filter.'
    _reg_clsid_ = GUID('{040C1C88-9399-4990-AD7B-907FB45757BE}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IRasterConvolutionFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a raster kernel-based filter.'
    _iid_ = GUID('{64DB07DF-FC21-4C9A-8441-7CB9791855EA}')
    _idlflags_ = ['oleautomation']
class IStockConvolutionFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a kernel-based stock filter.'
    _iid_ = GUID('{4B0CC599-D839-46FD-9865-33BDB167CDC6}')
    _idlflags_ = ['oleautomation']
RasterConvolutionFilter._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IPixelFilter, IRasterConvolutionFilter, IStockConvolutionFilter]

IDescColumn._methods_ = [
    COMMETHOD(['propget', helpstring(u'Name of the descriptor table.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'Name of the descriptor table.')], HRESULT, 'Name',
              ( ['in'], BSTR, 'Name' )),
    COMMETHOD(['propget', helpstring(u'Width of the descriptor table.')], HRESULT, 'Width',
              ( ['retval', 'out'], POINTER(c_int), 'Width' )),
    COMMETHOD([helpstring(u'The type of the values in this column of the descriptor table.')], HRESULT, 'Type',
              ( ['retval', 'out'], POINTER(c_short), 'Type' )),
    COMMETHOD([helpstring(u'Read data from the descriptor table.')], HRESULT, 'Read',
              ( ['in'], c_int, 'Start' ),
              ( ['in'], c_int, 'Count' ),
              ( ['retval', 'out'], POINTER(VARIANT), 'array' )),
    COMMETHOD([helpstring(u'Writes data to the descriptor table.')], HRESULT, 'Write',
              ( ['in'], c_int, 'Start' ),
              ( ['in'], c_int, 'Count' ),
              ( ['in'], POINTER(VARIANT), 'array' )),
    COMMETHOD([helpstring(u'Converts pixel values to columns in the descriptor table.')], HRESULT, 'ValueToIndex',
              ( ['in'], c_double, 'pixval' ),
              ( ['retval', 'out'], POINTER(c_int), 'row_index' )),
]
################################################################
## code template for IDescColumn implementation
##class IDescColumn_Impl(object):
##    def _get(self):
##        u'Name of the descriptor table.'
##        #return Name
##    def _set(self, Name):
##        u'Name of the descriptor table.'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def Read(self, Start, Count):
##        u'Read data from the descriptor table.'
##        #return array
##
##    def Write(self, Start, Count, array):
##        u'Writes data to the descriptor table.'
##        #return 
##
##    @property
##    def Width(self):
##        u'Width of the descriptor table.'
##        #return Width
##
##    def ValueToIndex(self, pixval):
##        u'Converts pixel values to columns in the descriptor table.'
##        #return row_index
##
##    def Type(self):
##        u'The type of the values in this column of the descriptor table.'
##        #return Type
##

IERasterStatus._methods_ = [
    COMMETHOD([helpstring(u'Raster Engine has started a different subtask.')], HRESULT, 'UpdateTaskName',
              ( ['in'], BSTR, 'new_task' )),
    COMMETHOD([helpstring(u'Raster Engine asks if user has decided to quit.')], HRESULT, 'QueryCancel',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'give_up' )),
    COMMETHOD([helpstring(u'Raster Engine reports job status.')], HRESULT, 'UpdateTaskStatus',
              ( ['in'], BSTR, 'taskname' ),
              ( ['in'], c_double, 'percent_finished' )),
    COMMETHOD([helpstring(u"Raster Engine acknowledges user's desire to abort.")], HRESULT, 'ResetCancel'),
]
################################################################
## code template for IERasterStatus implementation
##class IERasterStatus_Impl(object):
##    def ResetCancel(self):
##        u"Raster Engine acknowledges user's desire to abort."
##        #return 
##
##    def QueryCancel(self):
##        u'Raster Engine asks if user has decided to quit.'
##        #return give_up
##
##    def UpdateTaskStatus(self, taskname, percent_finished):
##        u'Raster Engine reports job status.'
##        #return 
##
##    def UpdateTaskName(self, new_task):
##        u'Raster Engine has started a different subtask.'
##        #return 
##

ILasDatasetBuilder._methods_ = [
    COMMETHOD(['propput', helpstring(u'Z Factor.')], HRESULT, 'ZFactor',
              ( ['in'], c_double, 'pZfactor' )),
    COMMETHOD(['propget', helpstring(u'Z Factor.')], HRESULT, 'ZFactor',
              ( ['retval', 'out'], POINTER(c_double), 'pZfactor' )),
    COMMETHOD(['propputref', helpstring(u'The parameters controlling LasDataset to raster properties built by this raster type.')], HRESULT, 'LasDatasetToRasterArguments',
              ( ['in'], POINTER(ILasDatasetToRasterFunctionArguments), 'ppLasDSToRasterFunctionArgs' )),
    COMMETHOD(['propget', helpstring(u'The parameters controlling LasDataset to raster properties built by this raster type.')], HRESULT, 'LasDatasetToRasterArguments',
              ( ['retval', 'out'], POINTER(POINTER(ILasDatasetToRasterFunctionArguments)), 'ppLasDSToRasterFunctionArgs' )),
]
################################################################
## code template for ILasDatasetBuilder implementation
##class ILasDatasetBuilder_Impl(object):
##    def _get(self):
##        u'Z Factor.'
##        #return pZfactor
##    def _set(self, pZfactor):
##        u'Z Factor.'
##    ZFactor = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def LasDatasetToRasterArguments(self, ppLasDSToRasterFunctionArgs):
##        u'The parameters controlling LasDataset to raster properties built by this raster type.'
##        #return 
##

class MosaicDatasetSelectionParameters(CoClass):
    u'An object that controls how rasters in a mosaic dataset are selected.'
    _reg_clsid_ = GUID('{BE17E20A-C88F-4871-891E-D15561818267}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
MosaicDatasetSelectionParameters._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMosaicDatasetOperationParameters, ISelectionParameters]

class IFormatList(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that contain information about all raster formats currently supported.'
    _iid_ = GUID('{34BD97E1-5ED8-11D3-80EA-00500462E955}')
    _idlflags_ = ['oleautomation']
IFormatList._methods_ = [
    COMMETHOD(['propget', helpstring(u'Total number of formats.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'pVal' )),
    COMMETHOD([helpstring(u'Returns format information for a given index.')], HRESULT, 'Item',
              ( ['in'], c_int, 'index' ),
              ( ['retval', 'out'], POINTER(POINTER(IFormatData)), 'fdata' )),
    COMMETHOD(['propget', helpstring(u'Index of currently accessed format information.')], HRESULT, 'CurrentRecord',
              ( ['retval', 'out'], POINTER(c_int), 'pVal' )),
    COMMETHOD(['propput', helpstring(u'Index of currently accessed format information.')], HRESULT, 'CurrentRecord',
              ( ['in'], c_int, 'pVal' )),
]
################################################################
## code template for IFormatList implementation
##class IFormatList_Impl(object):
##    @property
##    def Count(self):
##        u'Total number of formats.'
##        #return pVal
##
##    def Item(self, index):
##        u'Returns format information for a given index.'
##        #return fdata
##
##    def _get(self):
##        u'Index of currently accessed format information.'
##        #return pVal
##    def _set(self, pVal):
##        u'Index of currently accessed format information.'
##    CurrentRecord = property(_get, _set, doc = _set.__doc__)
##

IRasterDatasetBuilder._methods_ = [
]
################################################################
## code template for IRasterDatasetBuilder implementation
##class IRasterDatasetBuilder_Impl(object):

class FolderCrawler(CoClass):
    u'A crawler for folders that reside on the file-system.'
    _reg_clsid_ = GUID('{939D5A4F-0AB2-4AAB-96A6-C66F481C118B}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
FolderCrawler._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IFileCrawler, IFileCrawler2, IItemPaths]

IFileItemURI._methods_ = [
    COMMETHOD(['propput', helpstring(u'The path to the file associated with this item URI.')], HRESULT, 'FilePath',
              ( ['in'], BSTR, 'pFilePath' )),
    COMMETHOD(['propget', helpstring(u'The path to the file associated with this item URI.')], HRESULT, 'FilePath',
              ( ['retval', 'out'], POINTER(BSTR), 'pFilePath' )),
]
################################################################
## code template for IFileItemURI implementation
##class IFileItemURI_Impl(object):
##    def _get(self):
##        u'The path to the file associated with this item URI.'
##        #return pFilePath
##    def _set(self, pFilePath):
##        u'The path to the file associated with this item URI.'
##    FilePath = property(_get, _set, doc = _set.__doc__)
##

class DERasterUtilities(CoClass):
    u'Raster Data Element Utilities object.'
    _reg_clsid_ = GUID('{DF5DAF98-6E9D-4703-81B8-F543AC47FAAF}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
DERasterUtilities._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDERasterUtilities]

class RasterCommand(CoClass):
    u'The raster command class.'
    _reg_clsid_ = GUID('{069189E3-29F5-4F06-B1DB-89FC4A56C731}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
RasterCommand._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterCommand]

IMensuration._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if the sensor model associated with the current image segment supports error propagation.')], HRESULT, 'CanErrorPropagate',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pErrorPropagationCapable' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the specified image segment can be used for mensuration.')], HRESULT, 'CanMeasure',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pMensurationCapable' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the sensor model associated with the current image segment supports height mensuration.')], HRESULT, 'CanMeasureHeightBaseToTop',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pHeightMensurationCapable' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the sensor model associated with the current image segment supports monoscopic mensuration.')], HRESULT, 'CanMeasureMonoscopic',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pMonoscopicMensurationCapable' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the sensor model associated with the current image segment supports multi-image mensuration.')], HRESULT, 'CanMeasureMultiImages',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pMultiImageMensurationCapable' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the sensor model associated with the current image segment supports shadow mensuration.')], HRESULT, 'CanMeasureHeightTopToTopShadow',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pShadowMensurationCapable' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the sensor model associated with the current image segment supports shadow mensuration.')], HRESULT, 'CanMeasureHeightBaseToTopShadow',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pShadowMensurationCapable' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the sensor model associated with the current image segment supports stereoscopic mensuration.')], HRESULT, 'CanMeasureStereoscopic',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pStereoscopicMensurationCapable' )),
    COMMETHOD([helpstring(u"Converts angular measurement from 'fromUnit' to 'toUnit.")], HRESULT, 'ConvertAngular',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriDirectionUnits, 'fromUnit' ),
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriDirectionUnits, 'toUnit' ),
              ( ['in'], c_double, 'inputValue' ),
              ( ['out'], POINTER(c_double), 'pOutputValue' )),
    COMMETHOD([helpstring(u"Converts area measurement from 'fromUnit' to 'toUnit.")], HRESULT, 'ConvertArea',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriAreaUnits, 'fromUnit' ),
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriAreaUnits, 'toUnit' ),
              ( ['in'], c_double, 'inputValue' ),
              ( ['out'], POINTER(c_double), 'pOutputValue' )),
    COMMETHOD([helpstring(u'Gets different coordinate unit display representation for input point (latitude, longitude).')], HRESULT, 'ConvertDisplayCoordUnit',
              ( ['in'], esriDisplayCoordUnitType, 'desiredDisplayUnit' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'pGeographicPt' ),
              ( ['retval', 'out'], POINTER(BSTR), 'pDisplayUnit' )),
    COMMETHOD([helpstring(u"Converts linear measurement from 'fromUnit' to 'toUnit.")], HRESULT, 'ConvertLinear',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits, 'fromUnit' ),
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits, 'toUnit' ),
              ( ['in'], c_double, 'inputValue' ),
              ( ['out'], POINTER(c_double), 'pOutputValue' )),
    COMMETHOD([helpstring(u"Converts the covariance matrix's units.")], HRESULT, 'ConvertErrCovarianceUnits',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriDirectionUnits, 'inHorizAngularUnit' ),
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriDirectionUnits, 'outHorizAngularUnit' ),
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits, 'inHorizLinearUnit' ),
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits, 'outHorizLinearUnit' ),
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits, 'inVertUnit' ),
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriUnits, 'outVertUnit' ),
              ( ['in'], c_int, 'horizontalUnitType' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray), 'pCovariance' )),
    COMMETHOD(['propget', helpstring(u'Default pointing error covariance matrix.')], HRESULT, 'DefaultPointingErrCovariance',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray)), 'ppPointingErrCovMatrix' )),
    COMMETHOD(['propput', helpstring(u'Default pointing error covariance matrix.')], HRESULT, 'DefaultPointingErrCovariance',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray), 'ppPointingErrCovMatrix' )),
    COMMETHOD(['propget', helpstring(u'The DEM for the raster to be used for mensuration.')], HRESULT, 'DEM',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster)), 'ppRaster' )),
    COMMETHOD(['propputref', helpstring(u'The DEM for the raster to be used for mensuration.')], HRESULT, 'DEM',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'ppRaster' )),
    COMMETHOD(['propget', helpstring(u'The iteration precision of the image-to-ground and ground-to-image calculations.')], HRESULT, 'DesiredPrecision',
              ( ['retval', 'out'], POINTER(c_double), 'pPrecision' )),
    COMMETHOD(['propput', helpstring(u'The iteration precision of the image-to-ground and ground-to-image calculations.')], HRESULT, 'DesiredPrecision',
              ( ['in'], c_double, 'pPrecision' )),
    COMMETHOD([helpstring(u'Computes the area and perimeter of a polygon with no interior holes.')], HRESULT, 'GetAreaAndPerimeter',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPolygon), 'pPolygon' ),
              ( ['out'], POINTER(POINTER(IPolygonMeasurement)), 'ppPolygonMeasurement' )),
    COMMETHOD([helpstring(u'Computes the azimuth angle of the line connecting the two input map points.')], HRESULT, 'GetAzimuthAngle',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'pFirstPoint' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'pSecondPoint' ),
              ( ['out'], POINTER(POINTER(IAngularMeasurement)), 'ppAngleMeasurement' )),
    COMMETHOD([helpstring(u'Gets the coordinates of the centroid of a polygon and the associated error covariance matrix.')], HRESULT, 'GetCentroid',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPolygon), 'pPolygon' ),
              ( ['out'], POINTER(POINTER(IPointMeasurement)), 'ppPointMeasurement' )),
    COMMETHOD([helpstring(u'Computes the actual distance between two points given their map points.')], HRESULT, 'GetDistance',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'pFirstPoint' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'pSecondPoint' ),
              ( ['out'], POINTER(POINTER(IDistanceMeasurement)), 'ppDistMeasurement' )),
    COMMETHOD([helpstring(u'Estimates the height of an object given the base and the top map points of the object.')], HRESULT, 'GetHeightFromBaseAndTop',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'pBaseOfObject' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'pTopOfObject' ),
              ( ['out'], POINTER(POINTER(IHeightMeasurement)), 'ppHtMeasurement' )),
    COMMETHOD([helpstring(u"Estimates the height of an object given the map point of the object's base and the tip of the object's top shadow.")], HRESULT, 'GetHeightFromBaseAndTopShadow',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'pBaseOfObject' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'pTopShadowOfObject' ),
              ( ['out'], POINTER(POINTER(IHeightMeasurement)), 'ppHtMeasurement' )),
    COMMETHOD([helpstring(u"Estimates the height of an object given the top map point of the object and the tip of the object's top shadow.")], HRESULT, 'GetHeightFromTopAndTopShadow',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'pTopOfObject' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'pTopShadowOfObject' ),
              ( ['out'], POINTER(POINTER(IHeightMeasurement)), 'ppHtMeasurement' )),
    COMMETHOD([helpstring(u'Gets the coordinates of a map point and the associated error covariance matrix.')], HRESULT, 'GetPoint',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'pPoint' ),
              ( ['out'], POINTER(POINTER(IPointMeasurement)), 'ppPointMeasurement' )),
    COMMETHOD([helpstring(u'Gets a property value of the sensor model currently being used by this IMensuration.')], HRESULT, 'GetSensorModelProperty',
              ( ['in'], BSTR, 'propertyName' ),
              ( ['retval', 'out'], POINTER(VARIANT), 'pPropertyValue' )),
    COMMETHOD(['propget', helpstring(u'The name of this IMensuration object.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'pName' )),
    COMMETHOD([helpstring(u'Sets a property value of the sensor model.')], HRESULT, 'PutSensorModelProperty',
              ( ['in'], BSTR, 'propertyKey' ),
              ( ['in'], BSTR, 'propertyValue' )),
    COMMETHOD([helpstring(u'Sets the name of the terrain model and the associated terrain model data source information.')], HRESULT, 'PutTerrainParameters',
              ( ['in'], BSTR, 'terrainModelDataSrc' ),
              ( ['in'], BSTR, 'terrainModelName' )),
    COMMETHOD(['propputref', helpstring(u'The raster object to be used for mensuration.')], HRESULT, 'Raster',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'rhs' )),
    COMMETHOD(['propget', helpstring(u'The name of the sensor model currently being used by this IMensuration object.')], HRESULT, 'SensorModel',
              ( ['retval', 'out'], POINTER(BSTR), 'pSensorModelName' )),
    COMMETHOD(['propget', helpstring(u'The properties of the current sensor model.')], HRESULT, 'SensorModelProperties',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet)), 'ppSensorModelProperties' )),
    COMMETHOD([helpstring(u'Truncates input mensuration and uncertainty values based on acceptable rules for reporting measurement and uncertianty values.')], HRESULT, 'SignificantFigures',
              ( ['in'], c_double, 'measurementValue' ),
              ( ['in'], c_double, 'uncertainty' ),
              ( ['out'], POINTER(BSTR), 'pMeasurement' ),
              ( ['out'], POINTER(BSTR), 'pUncertainty' )),
    COMMETHOD(['propget', helpstring(u'The name of the TerrainModel used by this IMensuration object.')], HRESULT, 'TMName',
              ( ['retval', 'out'], POINTER(BSTR), 'pTerrainModelName' )),
    COMMETHOD(['propget', helpstring(u'Indicates if all the required system parameters and resources of this IMensuration have been successfully initialized.')], HRESULT, 'Valid',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pSysInitialized' )),
    COMMETHOD(['propget', helpstring(u'The version of this IMensuration.')], HRESULT, 'Version',
              ( ['retval', 'out'], POINTER(BSTR), 'pServiceVersion' )),
]
################################################################
## code template for IMensuration implementation
##class IMensuration_Impl(object):
##    def GetAzimuthAngle(self, pFirstPoint, pSecondPoint):
##        u'Computes the azimuth angle of the line connecting the two input map points.'
##        #return ppAngleMeasurement
##
##    def Raster(self, rhs):
##        u'The raster object to be used for mensuration.'
##        #return 
##
##    @property
##    def CanMeasureMonoscopic(self):
##        u'Indicates if the sensor model associated with the current image segment supports monoscopic mensuration.'
##        #return pMonoscopicMensurationCapable
##
##    def GetHeightFromTopAndTopShadow(self, pTopOfObject, pTopShadowOfObject):
##        u"Estimates the height of an object given the top map point of the object and the tip of the object's top shadow."
##        #return ppHtMeasurement
##
##    @property
##    def TMName(self):
##        u'The name of the TerrainModel used by this IMensuration object.'
##        #return pTerrainModelName
##
##    @property
##    def Valid(self):
##        u'Indicates if all the required system parameters and resources of this IMensuration have been successfully initialized.'
##        #return pSysInitialized
##
##    def DEM(self, ppRaster):
##        u'The DEM for the raster to be used for mensuration.'
##        #return 
##
##    def GetHeightFromBaseAndTopShadow(self, pBaseOfObject, pTopShadowOfObject):
##        u"Estimates the height of an object given the map point of the object's base and the tip of the object's top shadow."
##        #return ppHtMeasurement
##
##    @property
##    def CanMeasure(self):
##        u'Indicates if the specified image segment can be used for mensuration.'
##        #return pMensurationCapable
##
##    def _get(self):
##        u'Default pointing error covariance matrix.'
##        #return ppPointingErrCovMatrix
##    def _set(self, ppPointingErrCovMatrix):
##        u'Default pointing error covariance matrix.'
##    DefaultPointingErrCovariance = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SensorModelProperties(self):
##        u'The properties of the current sensor model.'
##        #return ppSensorModelProperties
##
##    def GetAreaAndPerimeter(self, pPolygon):
##        u'Computes the area and perimeter of a polygon with no interior holes.'
##        #return ppPolygonMeasurement
##
##    def PutTerrainParameters(self, terrainModelDataSrc, terrainModelName):
##        u'Sets the name of the terrain model and the associated terrain model data source information.'
##        #return 
##
##    def ConvertArea(self, fromUnit, toUnit, inputValue):
##        u"Converts area measurement from 'fromUnit' to 'toUnit."
##        #return pOutputValue
##
##    def GetPoint(self, pPoint):
##        u'Gets the coordinates of a map point and the associated error covariance matrix.'
##        #return ppPointMeasurement
##
##    @property
##    def CanMeasureStereoscopic(self):
##        u'Indicates if the sensor model associated with the current image segment supports stereoscopic mensuration.'
##        #return pStereoscopicMensurationCapable
##
##    def PutSensorModelProperty(self, propertyKey, propertyValue):
##        u'Sets a property value of the sensor model.'
##        #return 
##
##    def GetCentroid(self, pPolygon):
##        u'Gets the coordinates of the centroid of a polygon and the associated error covariance matrix.'
##        #return ppPointMeasurement
##
##    @property
##    def Name(self):
##        u'The name of this IMensuration object.'
##        #return pName
##
##    def SignificantFigures(self, measurementValue, uncertainty):
##        u'Truncates input mensuration and uncertainty values based on acceptable rules for reporting measurement and uncertianty values.'
##        #return pMeasurement, pUncertainty
##
##    def ConvertErrCovarianceUnits(self, inHorizAngularUnit, outHorizAngularUnit, inHorizLinearUnit, outHorizLinearUnit, inVertUnit, outVertUnit, horizontalUnitType, pCovariance):
##        u"Converts the covariance matrix's units."
##        #return 
##
##    @property
##    def CanMeasureHeightBaseToTop(self):
##        u'Indicates if the sensor model associated with the current image segment supports height mensuration.'
##        #return pHeightMensurationCapable
##
##    def GetSensorModelProperty(self, propertyName):
##        u'Gets a property value of the sensor model currently being used by this IMensuration.'
##        #return pPropertyValue
##
##    @property
##    def CanErrorPropagate(self):
##        u'Indicates if the sensor model associated with the current image segment supports error propagation.'
##        #return pErrorPropagationCapable
##
##    @property
##    def SensorModel(self):
##        u'The name of the sensor model currently being used by this IMensuration object.'
##        #return pSensorModelName
##
##    @property
##    def CanMeasureHeightBaseToTopShadow(self):
##        u'Indicates if the sensor model associated with the current image segment supports shadow mensuration.'
##        #return pShadowMensurationCapable
##
##    def GetDistance(self, pFirstPoint, pSecondPoint):
##        u'Computes the actual distance between two points given their map points.'
##        #return ppDistMeasurement
##
##    def ConvertLinear(self, fromUnit, toUnit, inputValue):
##        u"Converts linear measurement from 'fromUnit' to 'toUnit."
##        #return pOutputValue
##
##    def ConvertAngular(self, fromUnit, toUnit, inputValue):
##        u"Converts angular measurement from 'fromUnit' to 'toUnit."
##        #return pOutputValue
##
##    def ConvertDisplayCoordUnit(self, desiredDisplayUnit, pGeographicPt):
##        u'Gets different coordinate unit display representation for input point (latitude, longitude).'
##        #return pDisplayUnit
##
##    def _get(self):
##        u'The iteration precision of the image-to-ground and ground-to-image calculations.'
##        #return pPrecision
##    def _set(self, pPrecision):
##        u'The iteration precision of the image-to-ground and ground-to-image calculations.'
##    DesiredPrecision = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Version(self):
##        u'The version of this IMensuration.'
##        #return pServiceVersion
##
##    def GetHeightFromBaseAndTop(self, pBaseOfObject, pTopOfObject):
##        u'Estimates the height of an object given the base and the top map points of the object.'
##        #return ppHtMeasurement
##
##    @property
##    def CanMeasureHeightTopToTopShadow(self):
##        u'Indicates if the sensor model associated with the current image segment supports shadow mensuration.'
##        #return pShadowMensurationCapable
##
##    @property
##    def CanMeasureMultiImages(self):
##        u'Indicates if the sensor model associated with the current image segment supports multi-image mensuration.'
##        #return pMultiImageMensurationCapable
##

class MultibandFilter(CoClass):
    u'A class for multiband filter.'
    _reg_clsid_ = GUID('{E09F6D8B-90A8-43FB-857A-9ADC30F9A6E7}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
MultibandFilter._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IPixelFilter, IPixelFilterCollection, IMultibandFilter]

ICalculateStatisticsParameters._methods_ = [
    COMMETHOD(['propget', helpstring(u'The X skip factor for statistics.')], HRESULT, 'XSkipFactor',
              ( ['retval', 'out'], POINTER(c_int), 'XSkipFactor' )),
    COMMETHOD(['propput', helpstring(u'The X skip factor for statistics.')], HRESULT, 'XSkipFactor',
              ( ['in'], c_int, 'XSkipFactor' )),
    COMMETHOD(['propget', helpstring(u'The Y skip factor for statistics.')], HRESULT, 'YSkipFactor',
              ( ['retval', 'out'], POINTER(c_int), 'YSkipFactor' )),
    COMMETHOD(['propput', helpstring(u'The Y skip factor for statistics.')], HRESULT, 'YSkipFactor',
              ( ['in'], c_int, 'YSkipFactor' )),
    COMMETHOD(['propget', helpstring(u'The ignore values for statistics.')], HRESULT, 'IgnoreValues',
              ( ['retval', 'out'], POINTER(VARIANT), 'vIgnoreValues' )),
    COMMETHOD(['propput', helpstring(u'The ignore values for statistics.')], HRESULT, 'IgnoreValues',
              ( ['in'], VARIANT, 'vIgnoreValues' )),
]
################################################################
## code template for ICalculateStatisticsParameters implementation
##class ICalculateStatisticsParameters_Impl(object):
##    def _get(self):
##        u'The Y skip factor for statistics.'
##        #return YSkipFactor
##    def _set(self, YSkipFactor):
##        u'The Y skip factor for statistics.'
##    YSkipFactor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The X skip factor for statistics.'
##        #return XSkipFactor
##    def _set(self, XSkipFactor):
##        u'The X skip factor for statistics.'
##    XSkipFactor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The ignore values for statistics.'
##        #return vIgnoreValues
##    def _set(self, vIgnoreValues):
##        u'The ignore values for statistics.'
##    IgnoreValues = property(_get, _set, doc = _set.__doc__)
##

IMosaicWorkspaceExtension._methods_ = [
    COMMETHOD([helpstring(u'Creates a mosaic dataset.')], HRESULT, 'CreateMosaicDataset',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'pSpatialReference' ),
              ( ['in'], POINTER(ICreateMosaicDatasetParameters), 'pParameters' ),
              ( ['in'], BSTR, 'configurationKeyword' ),
              ( ['retval', 'out'], POINTER(POINTER(IMosaicDataset)), 'ppMosaicDataset' )),
    COMMETHOD([helpstring(u'Creates a referenced mosaic dataset from an external raster catalog.')], HRESULT, 'CreateReferencedMosaicDataset',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'pSpatialReference' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterCatalog), 'pExternalCatalog' ),
              ( ['in'], BSTR, 'DefinitionQuery' ),
              ( ['in'], POINTER(ICreateMosaicDatasetParameters), 'pParameters' ),
              ( ['in'], BSTR, 'configurationKeyword' ),
              ( ['retval', 'out'], POINTER(POINTER(IMosaicDataset)), 'ppMosaicDataset' )),
    COMMETHOD([helpstring(u'Opens a mosaic dataset for a given name.')], HRESULT, 'OpenMosaicDataset',
              ( ['in'], BSTR, 'Name' ),
              ( ['retval', 'out'], POINTER(POINTER(IMosaicDataset)), 'ppMosaicDataset' )),
    COMMETHOD([helpstring(u'Deletes a mosaic dataset.')], HRESULT, 'DeleteMosaicDataset',
              ( ['in'], BSTR, 'Name' )),
]
################################################################
## code template for IMosaicWorkspaceExtension implementation
##class IMosaicWorkspaceExtension_Impl(object):
##    def DeleteMosaicDataset(self, Name):
##        u'Deletes a mosaic dataset.'
##        #return 
##
##    def OpenMosaicDataset(self, Name):
##        u'Opens a mosaic dataset for a given name.'
##        #return ppMosaicDataset
##
##    def CreateReferencedMosaicDataset(self, Name, pSpatialReference, pExternalCatalog, DefinitionQuery, pParameters, configurationKeyword):
##        u'Creates a referenced mosaic dataset from an external raster catalog.'
##        #return ppMosaicDataset
##
##    def CreateMosaicDataset(self, Name, pSpatialReference, pParameters, configurationKeyword):
##        u'Creates a mosaic dataset.'
##        #return ppMosaicDataset
##

IRasterSdeStorage._methods_ = [
    COMMETHOD(['propput', helpstring(u'The tile width.')], HRESULT, 'TileWidth',
              ( ['in'], c_int, 'Width' )),
    COMMETHOD(['propget', helpstring(u'The tile width.')], HRESULT, 'TileWidth',
              ( ['retval', 'out'], POINTER(c_int), 'Width' )),
    COMMETHOD(['propput', helpstring(u'The tile height.')], HRESULT, 'TileHeight',
              ( ['in'], c_int, 'Height' )),
    COMMETHOD(['propget', helpstring(u'The tile height.')], HRESULT, 'TileHeight',
              ( ['retval', 'out'], POINTER(c_int), 'Height' )),
    COMMETHOD(['propput', helpstring(u'The resampling method.')], HRESULT, 'PyramidResampleType',
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.rstResamplingTypes, 'Method' )),
    COMMETHOD(['propget', helpstring(u'The resampling method.')], HRESULT, 'PyramidResampleType',
              ( ['retval', 'out'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.rstResamplingTypes), 'Method' )),
    COMMETHOD(['propget', helpstring(u'The SpatialReference.')], HRESULT, 'SpatialReference',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference)), 'spRef' )),
    COMMETHOD(['propputref', helpstring(u'The SpatialReference.')], HRESULT, 'SpatialReference',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'spRef' )),
    COMMETHOD(['propput', helpstring(u'The option for building pyramids.')], HRESULT, 'PyramidOption',
              ( ['in'], esriRasterSdePyramidOptEnum, 'option' )),
    COMMETHOD(['propget', helpstring(u'The option for building pyramids.')], HRESULT, 'PyramidOption',
              ( ['retval', 'out'], POINTER(esriRasterSdePyramidOptEnum), 'option' )),
    COMMETHOD(['propput', helpstring(u'The compression type.')], HRESULT, 'CompressionType',
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriRasterSdeCompressionTypeEnum, 'Type' )),
    COMMETHOD(['propget', helpstring(u'The compression type.')], HRESULT, 'CompressionType',
              ( ['retval', 'out'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriRasterSdeCompressionTypeEnum), 'Type' )),
    COMMETHOD(['propput', helpstring(u'The keyword.')], HRESULT, 'Keyword',
              ( ['in'], BSTR, 'Keyword' )),
    COMMETHOD(['propget', helpstring(u'The keyword.')], HRESULT, 'Keyword',
              ( ['retval', 'out'], POINTER(BSTR), 'Keyword' )),
    COMMETHOD(['propput', helpstring(u'The mosaicing tolerance.')], HRESULT, 'MosaicingTolerance',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'rhs' )),
]
################################################################
## code template for IRasterSdeStorage implementation
##class IRasterSdeStorage_Impl(object):
##    def _get(self):
##        u'The compression type.'
##        #return Type
##    def _set(self, Type):
##        u'The compression type.'
##    CompressionType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The keyword.'
##        #return Keyword
##    def _set(self, Keyword):
##        u'The keyword.'
##    Keyword = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The tile height.'
##        #return Height
##    def _set(self, Height):
##        u'The tile height.'
##    TileHeight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The tile width.'
##        #return Width
##    def _set(self, Width):
##        u'The tile width.'
##    TileWidth = property(_get, _set, doc = _set.__doc__)
##
##    def _set(self, rhs):
##        u'The mosaicing tolerance.'
##    MosaicingTolerance = property(fset = _set, doc = _set.__doc__)
##
##    def SpatialReference(self, spRef):
##        u'The SpatialReference.'
##        #return 
##
##    def _get(self):
##        u'The option for building pyramids.'
##        #return option
##    def _set(self, option):
##        u'The option for building pyramids.'
##    PyramidOption = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The resampling method.'
##        #return Method
##    def _set(self, Method):
##        u'The resampling method.'
##    PyramidResampleType = property(_get, _set, doc = _set.__doc__)
##

IMosaicFunction3._methods_ = [
    COMMETHOD(['propget', helpstring(u'The blending width for Blend mosaic operator.')], HRESULT, 'BlendingWidth2',
              ( ['retval', 'out'], POINTER(c_double), 'pWidth' )),
    COMMETHOD(['propput', helpstring(u'The blending width for Blend mosaic operator.')], HRESULT, 'BlendingWidth2',
              ( ['in'], c_double, 'pWidth' )),
    COMMETHOD(['propget', helpstring(u'The units associated with the blending width for Blend mosaic operator.')], HRESULT, 'BlendingWidthUnits',
              ( ['retval', 'out'], POINTER(esriBlendWidthUnits), 'units' )),
    COMMETHOD(['propput', helpstring(u'The units associated with the blending width for Blend mosaic operator.')], HRESULT, 'BlendingWidthUnits',
              ( ['in'], esriBlendWidthUnits, 'units' )),
]
################################################################
## code template for IMosaicFunction3 implementation
##class IMosaicFunction3_Impl(object):
##    def _get(self):
##        u'The blending width for Blend mosaic operator.'
##        #return pWidth
##    def _set(self, pWidth):
##        u'The blending width for Blend mosaic operator.'
##    BlendingWidth2 = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The units associated with the blending width for Blend mosaic operator.'
##        #return units
##    def _set(self, units):
##        u'The units associated with the blending width for Blend mosaic operator.'
##    BlendingWidthUnits = property(_get, _set, doc = _set.__doc__)
##

IBuildPyramidsParameters2._methods_ = [
    COMMETHOD(['propput', helpstring(u'Indicates whether pyramids are built with the first level skipped.')], HRESULT, 'SkipFirstLevel',
              ( ['in'], VARIANT_BOOL, 'pbSkipFirstLevel' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether pyramids are built with the first level skipped.')], HRESULT, 'SkipFirstLevel',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbSkipFirstLevel' )),
]
################################################################
## code template for IBuildPyramidsParameters2 implementation
##class IBuildPyramidsParameters2_Impl(object):
##    def _get(self):
##        u'Indicates whether pyramids are built with the first level skipped.'
##        #return pbSkipFirstLevel
##    def _set(self, pbSkipFirstLevel):
##        u'Indicates whether pyramids are built with the first level skipped.'
##    SkipFirstLevel = property(_get, _set, doc = _set.__doc__)
##

class GeoTransformationHelper(CoClass):
    u'The geograpgic transformation (datum conversion) helper class.'
    _reg_clsid_ = GUID('{212F1227-8E51-4545-A7B9-18C5C1531E63}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
GeoTransformationHelper._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGeoTransformationHelper]

class NDVIFunctionArguments(CoClass):
    u'A class for NDVI raster function arguments.'
    _reg_clsid_ = GUID('{F7871DDD-26CD-40D1-B86E-F5308E3828E2}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
NDVIFunctionArguments._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunctionArguments, IRasterFunctionArguments2, INDVIFunctionArguments, INDVIFunctionArguments2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

IBinFunction._methods_ = [
    COMMETHOD(['propget', helpstring(u'Number of bins (same as rows in table).')], HRESULT, 'NumBins',
              ( ['retval', 'out'], POINTER(c_int), 'pVal' )),
    COMMETHOD([helpstring(u'Converts pixel values to columns in the descriptor table.')], HRESULT, 'ValueToIndex',
              ( ['in'], c_double, 'pixval' ),
              ( ['retval', 'out'], POINTER(c_int), 'row_index' )),
    COMMETHOD([helpstring(u'Returns upper and lower limits of bin.')], HRESULT, 'Invert',
              ( ['in'], c_int, 'Bin' ),
              ( ['out'], POINTER(c_double), 'upper' ),
              ( ['out'], POINTER(c_double), 'lower' )),
    COMMETHOD([helpstring(u'Name of bin function.')], HRESULT, 'Title',
              ( ['out'], POINTER(BSTR), 'Title' )),
]
################################################################
## code template for IBinFunction implementation
##class IBinFunction_Impl(object):
##    def ValueToIndex(self, pixval):
##        u'Converts pixel values to columns in the descriptor table.'
##        #return row_index
##
##    def Invert(self, Bin):
##        u'Returns upper and lower limits of bin.'
##        #return upper, lower
##
##    @property
##    def NumBins(self):
##        u'Number of bins (same as rows in table).'
##        #return pVal
##
##    def Title(self):
##        u'Name of bin function.'
##        #return Title
##

IThreadedOperationParameters._methods_ = [
    COMMETHOD(['propput', helpstring(u'The URL to the server object name where parts of the operation may be remotely executed.')], HRESULT, 'ServerName',
              ( ['in'], BSTR, 'pServerUrl' )),
    COMMETHOD(['propget', helpstring(u'The URL to the server object name where parts of the operation may be remotely executed.')], HRESULT, 'ServerName',
              ( ['retval', 'out'], POINTER(BSTR), 'pServerUrl' )),
    COMMETHOD(['propput', helpstring(u'The number of parallel threads that execute parts of the associated operation.')], HRESULT, 'NumThreads',
              ( ['in'], c_int, 'pNumThreads' )),
    COMMETHOD(['propget', helpstring(u'The number of parallel threads that execute parts of the associated operation.')], HRESULT, 'NumThreads',
              ( ['retval', 'out'], POINTER(c_int), 'pNumThreads' )),
    COMMETHOD(['propget', helpstring(u'The number of parallel threads of execution recommended by the system.')], HRESULT, 'RecommendedNumThreads',
              ( [], POINTER(c_int), 'pRecommendedNumThreads' )),
]
################################################################
## code template for IThreadedOperationParameters implementation
##class IThreadedOperationParameters_Impl(object):
##    def _get(self):
##        u'The number of parallel threads that execute parts of the associated operation.'
##        #return pNumThreads
##    def _set(self, pNumThreads):
##        u'The number of parallel threads that execute parts of the associated operation.'
##    NumThreads = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The URL to the server object name where parts of the operation may be remotely executed.'
##        #return pServerUrl
##    def _set(self, pServerUrl):
##        u'The URL to the server object name where parts of the operation may be remotely executed.'
##    ServerName = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def RecommendedNumThreads(self, pRecommendedNumThreads):
##        u'The number of parallel threads of execution recommended by the system.'
##        #return 
##

IMosaicDatasetOperationParameters2._methods_ = [
    COMMETHOD(['propput', helpstring(u'Indicates whether the result associated with the mosaic dataset operation will be generated and made available in the \u2018Results\u2019 property.')], HRESULT, 'PrepareResults',
              ( ['in'], VARIANT_BOOL, 'pbPrepareResults' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the result associated with the mosaic dataset operation will be generated and made available in the \u2018Results\u2019 property.')], HRESULT, 'PrepareResults',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbPrepareResults' )),
]
################################################################
## code template for IMosaicDatasetOperationParameters2 implementation
##class IMosaicDatasetOperationParameters2_Impl(object):
##    def _get(self):
##        u'Indicates whether the result associated with the mosaic dataset operation will be generated and made available in the \u2018Results\u2019 property.'
##        #return pbPrepareResults
##    def _set(self, pbPrepareResults):
##        u'Indicates whether the result associated with the mosaic dataset operation will be generated and made available in the \u2018Results\u2019 property.'
##    PrepareResults = property(_get, _set, doc = _set.__doc__)
##

class HeightMeasurement(CoClass):
    u'Implements interface IHeightMeasurement (height measurement and its associated uncertainty information).'
    _reg_clsid_ = GUID('{D368C7C7-D8F7-49C2-86EC-28C33356A6EA}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
HeightMeasurement._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IHeightMeasurement]

IBuildFootprintsByShrinkingParameters._methods_ = [
    COMMETHOD(['propput', helpstring(u'The shrink distance in the coordinate system of the geometry column of the mosaic catalog.')], HRESULT, 'ShrinkDistance',
              ( ['in'], c_double, 'pShrinkDistance' )),
    COMMETHOD(['propget', helpstring(u'The shrink distance in the coordinate system of the geometry column of the mosaic catalog.')], HRESULT, 'ShrinkDistance',
              ( ['retval', 'out'], POINTER(c_double), 'pShrinkDistance' )),
    COMMETHOD(['propput', helpstring(u'The minimum distance below which points in the footprint geometry are snapped to the envelope of the raster.')], HRESULT, 'SnapEdgesTolerance',
              ( ['in'], c_double, 'pTolerance' )),
    COMMETHOD(['propget', helpstring(u'The minimum distance below which points in the footprint geometry are snapped to the envelope of the raster.')], HRESULT, 'SnapEdgesTolerance',
              ( ['retval', 'out'], POINTER(c_double), 'pTolerance' )),
    COMMETHOD(['propput', helpstring(u'The minimum distance (in resampled pixels) below which points in the footprint geometry are snapped to the envelope of the raster.')], HRESULT, 'SnapEdgesToleranceInPixels',
              ( ['in'], c_int, 'pToleranceInPixels' )),
    COMMETHOD(['propget', helpstring(u'The minimum distance (in resampled pixels) below which points in the footprint geometry are snapped to the envelope of the raster.')], HRESULT, 'SnapEdgesToleranceInPixels',
              ( ['retval', 'out'], POINTER(c_int), 'pToleranceInPixels' )),
]
################################################################
## code template for IBuildFootprintsByShrinkingParameters implementation
##class IBuildFootprintsByShrinkingParameters_Impl(object):
##    def _get(self):
##        u'The minimum distance below which points in the footprint geometry are snapped to the envelope of the raster.'
##        #return pTolerance
##    def _set(self, pTolerance):
##        u'The minimum distance below which points in the footprint geometry are snapped to the envelope of the raster.'
##    SnapEdgesTolerance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The shrink distance in the coordinate system of the geometry column of the mosaic catalog.'
##        #return pShrinkDistance
##    def _set(self, pShrinkDistance):
##        u'The shrink distance in the coordinate system of the geometry column of the mosaic catalog.'
##    ShrinkDistance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The minimum distance (in resampled pixels) below which points in the footprint geometry are snapped to the envelope of the raster.'
##        #return pToleranceInPixels
##    def _set(self, pToleranceInPixels):
##        u'The minimum distance (in resampled pixels) below which points in the footprint geometry are snapped to the envelope of the raster.'
##    SnapEdgesToleranceInPixels = property(_get, _set, doc = _set.__doc__)
##

class CreateMosaicDatasetParameters(CoClass):
    u'An object that controls how a mosaic dataset is created.'
    _reg_clsid_ = GUID('{9031F735-38D2-400B-A613-8BC0B511EED6}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
CreateMosaicDatasetParameters._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMosaicDatasetOperationParameters, ICreateMosaicDatasetParameters, ICreateMosaicDatasetParameters2]

IBandArithmeticFunctionArguments._methods_ = [
    COMMETHOD(['propget', helpstring(u'The input raster.')], HRESULT, 'Raster',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppRaster' )),
    COMMETHOD(['propputref', helpstring(u'The input raster.')], HRESULT, 'Raster',
              ( ['in'], POINTER(IUnknown), 'ppRaster' )),
    COMMETHOD(['propget', helpstring(u'The method or calculation to perform.')], HRESULT, 'Method',
              ( ['retval', 'out'], POINTER(esriRasterBandArithmeticMethod), 'pBandArithmeticMethod' )),
    COMMETHOD(['propput', helpstring(u'The method or calculation to perform.')], HRESULT, 'Method',
              ( ['in'], esriRasterBandArithmeticMethod, 'pBandArithmeticMethod' )),
    COMMETHOD(['propget', helpstring(u'The band indexes used in the calculation.')], HRESULT, 'BandIndexes',
              ( ['retval', 'out'], POINTER(BSTR), 'pBandIndexes' )),
    COMMETHOD(['propput', helpstring(u'The band indexes used in the calculation.')], HRESULT, 'BandIndexes',
              ( ['in'], BSTR, 'pBandIndexes' )),
]
################################################################
## code template for IBandArithmeticFunctionArguments implementation
##class IBandArithmeticFunctionArguments_Impl(object):
##    def _get(self):
##        u'The band indexes used in the calculation.'
##        #return pBandIndexes
##    def _set(self, pBandIndexes):
##        u'The band indexes used in the calculation.'
##    BandIndexes = property(_get, _set, doc = _set.__doc__)
##
##    def Raster(self, ppRaster):
##        u'The input raster.'
##        #return 
##
##    def _get(self):
##        u'The method or calculation to perform.'
##        #return pBandArithmeticMethod
##    def _set(self, pBandArithmeticMethod):
##        u'The method or calculation to perform.'
##    Method = property(_get, _set, doc = _set.__doc__)
##

class ReprojectFunctionArguments(CoClass):
    u'The Reproject function arguments.'
    _reg_clsid_ = GUID('{453FBF56-CA41-410D-92CF-FB727CFDC1D1}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
ReprojectFunctionArguments._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunctionArguments, IReprojectFunctionArguments, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

ICalculateCellSizeRangesParameters._methods_ = [
    COMMETHOD(['propput', helpstring(u'Indicates whether minimum visibility values are calculated for selected items.')], HRESULT, 'CalculateRasterMinCellSizes',
              ( ['in'], VARIANT_BOOL, 'pbDoCalculateMin' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether minimum visibility values are calculated for selected items.')], HRESULT, 'CalculateRasterMinCellSizes',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbDoCalculateMin' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether maximum visibility values are calculated for selected items.')], HRESULT, 'CalculateRasterMaxCellSizes',
              ( ['in'], VARIANT_BOOL, 'pbDoCalculateMax' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether maximum visibility values are calculated for selected items.')], HRESULT, 'CalculateRasterMaxCellSizes',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbDoCalculateMax' )),
    COMMETHOD(['propput', helpstring(u"Indicates whether mosaic dataset's maximum visible cell size is calculated.")], HRESULT, 'CalculateMosaicCellSizes',
              ( ['in'], VARIANT_BOOL, 'pbDoMosaicCellSizeRanges' )),
    COMMETHOD(['propget', helpstring(u"Indicates whether mosaic dataset's maximum visible cell size is calculated.")], HRESULT, 'CalculateMosaicCellSizes',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbDoMosaicCellSizeRanges' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether all unique cell size levels for the mosaic dataset are computed and stored.')], HRESULT, 'CalculateLevels',
              ( ['in'], VARIANT_BOOL, 'pbCalculateLevels' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether all unique cell size levels for the mosaic dataset are computed and stored.')], HRESULT, 'CalculateLevels',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbCalculateLevels' )),
    COMMETHOD(['propput', helpstring(u"The multiplicative factor used for computing maximum visibility of those items that don't their footprints completely covered by footprints of lower resolution items. The maximum pixel size values of such items are computed by multiplying the corresponding low?!?\x08?&")], HRESULT, 'MaxRangeFactor',
              ( ['in'], c_double, 'pMaxRangeFactor' )),
    COMMETHOD(['propget', helpstring(u"The multiplicative factor used for computing maximum visibility of those items that don't their footprints completely covered by footprints of lower resolution items. The maximum pixel size values of such items are computed by multiplying the corresponding low?!?\x08?&")], HRESULT, 'MaxRangeFactor',
              ( ['retval', 'out'], POINTER(c_double), 'pMaxRangeFactor' )),
    COMMETHOD(['propput', helpstring(u'The multiplicative factor used for computing the maximum visibility of the top-most (lowest resolution) overview items.')], HRESULT, 'MaxOverviewFactor',
              ( ['in'], c_double, 'pMaxOverviewFactor' )),
    COMMETHOD(['propget', helpstring(u'The multiplicative factor used for computing the maximum visibility of the top-most (lowest resolution) overview items.')], HRESULT, 'MaxOverviewFactor',
              ( ['retval', 'out'], POINTER(c_double), 'pMaxOverviewFactor' )),
    COMMETHOD(['propput', helpstring(u'The factor controlling clustering of cell sizes values. Two cell size values with a difference factor less than the value in this property are considered one.')], HRESULT, 'CellSizeClusterTolerance',
              ( ['in'], c_double, 'pCellSizeClusterTolerance' )),
    COMMETHOD(['propget', helpstring(u'The factor controlling clustering of cell sizes values. Two cell size values with a difference factor less than the value in this property are considered one.')], HRESULT, 'CellSizeClusterTolerance',
              ( ['retval', 'out'], POINTER(c_double), 'pCellSizeClusterTolerance' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether only those rows where MinPS or MaxPS is either null or -1 are updated.')], HRESULT, 'UpdateMissingValuesOnly',
              ( ['in'], VARIANT_BOOL, 'pbUpdateMissingValuesOnly' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether only those rows where MinPS or MaxPS is either null or -1 are updated.')], HRESULT, 'UpdateMissingValuesOnly',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbUpdateMissingValuesOnly' )),
]
################################################################
## code template for ICalculateCellSizeRangesParameters implementation
##class ICalculateCellSizeRangesParameters_Impl(object):
##    def _get(self):
##        u"The multiplicative factor used for computing maximum visibility of those items that don't their footprints completely covered by footprints of lower resolution items. The maximum pixel size values of such items are computed by multiplying the corresponding low?!?\x08?&"
##        #return pMaxRangeFactor
##    def _set(self, pMaxRangeFactor):
##        u"The multiplicative factor used for computing maximum visibility of those items that don't their footprints completely covered by footprints of lower resolution items. The maximum pixel size values of such items are computed by multiplying the corresponding low?!?\x08?&"
##    MaxRangeFactor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether all unique cell size levels for the mosaic dataset are computed and stored.'
##        #return pbCalculateLevels
##    def _set(self, pbCalculateLevels):
##        u'Indicates whether all unique cell size levels for the mosaic dataset are computed and stored.'
##    CalculateLevels = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The factor controlling clustering of cell sizes values. Two cell size values with a difference factor less than the value in this property are considered one.'
##        #return pCellSizeClusterTolerance
##    def _set(self, pCellSizeClusterTolerance):
##        u'The factor controlling clustering of cell sizes values. Two cell size values with a difference factor less than the value in this property are considered one.'
##    CellSizeClusterTolerance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u"Indicates whether mosaic dataset's maximum visible cell size is calculated."
##        #return pbDoMosaicCellSizeRanges
##    def _set(self, pbDoMosaicCellSizeRanges):
##        u"Indicates whether mosaic dataset's maximum visible cell size is calculated."
##    CalculateMosaicCellSizes = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether maximum visibility values are calculated for selected items.'
##        #return pbDoCalculateMax
##    def _set(self, pbDoCalculateMax):
##        u'Indicates whether maximum visibility values are calculated for selected items.'
##    CalculateRasterMaxCellSizes = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether only those rows where MinPS or MaxPS is either null or -1 are updated.'
##        #return pbUpdateMissingValuesOnly
##    def _set(self, pbUpdateMissingValuesOnly):
##        u'Indicates whether only those rows where MinPS or MaxPS is either null or -1 are updated.'
##    UpdateMissingValuesOnly = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The multiplicative factor used for computing the maximum visibility of the top-most (lowest resolution) overview items.'
##        #return pMaxOverviewFactor
##    def _set(self, pMaxOverviewFactor):
##        u'The multiplicative factor used for computing the maximum visibility of the top-most (lowest resolution) overview items.'
##    MaxOverviewFactor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether minimum visibility values are calculated for selected items.'
##        #return pbDoCalculateMin
##    def _set(self, pbDoCalculateMin):
##        u'Indicates whether minimum visibility values are calculated for selected items.'
##    CalculateRasterMinCellSizes = property(_get, _set, doc = _set.__doc__)
##

class SlopeFunction(CoClass):
    u'The Slope function.'
    _reg_clsid_ = GUID('{BAF9A2DE-8B1A-4DC5-AEAE-138E2A7BCF3D}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
SlopeFunction._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunction, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

ISeamlineModifier._methods_ = [
    COMMETHOD([helpstring(u'Recomputes and returns the seamline geometry for the item referenced by the specified seamline task info object.')], HRESULT, 'Update',
              ( ['in'], POINTER(ISeamlineTaskInfo), 'pSeamlineTaskInfo' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry)), 'ppSeamlinePolygon' )),
]
################################################################
## code template for ISeamlineModifier implementation
##class ISeamlineModifier_Impl(object):
##    def Update(self, pSeamlineTaskInfo, pTrackCancel):
##        u'Recomputes and returns the seamline geometry for the item referenced by the specified seamline task info object.'
##        #return ppSeamlinePolygon
##

class RemoveItemsParameters(CoClass):
    u'An object that controls how items are removed from a mosaic dataset.'
    _reg_clsid_ = GUID('{CE6AF0DC-6EBD-4655-B287-C851D1C52AB6}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
RemoveItemsParameters._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMosaicDatasetOperationParameters, IMosaicDatasetOperationParameters2, IRemoveItemsParameters, IRemoveItemsParameters2, ISelectionParameters]

IRasterProps._methods_ = [
    COMMETHOD(['propget', helpstring(u'Width in pixels.')], HRESULT, 'Width',
              ( ['retval', 'out'], POINTER(c_int), 'pVal' )),
    COMMETHOD(['propput', helpstring(u'Width in pixels.')], HRESULT, 'Width',
              ( ['in'], c_int, 'pVal' )),
    COMMETHOD(['propget', helpstring(u'Height in pixels.')], HRESULT, 'Height',
              ( ['retval', 'out'], POINTER(c_int), 'pVal' )),
    COMMETHOD(['propput', helpstring(u'Height in pixels.')], HRESULT, 'Height',
              ( ['in'], c_int, 'pVal' )),
    COMMETHOD(['propget', helpstring(u'Data type of the pixels.')], HRESULT, 'PixelType',
              ( ['retval', 'out'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.rstPixelType), 'pVal' )),
    COMMETHOD(['propput', helpstring(u'Data type of the pixels.')], HRESULT, 'PixelType',
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.rstPixelType, 'pVal' )),
    COMMETHOD(['restricted', helpstring(u'Map to raster transformation information.'), 'propget'], HRESULT, 'MapModel',
              ( ['retval', 'out'], POINTER(POINTER(IRasterMapModel)), 'pVal' )),
    COMMETHOD(['restricted', helpstring(u'Map to raster transformation information.'), 'propput'], HRESULT, 'MapModel',
              ( ['in'], POINTER(IRasterMapModel), 'pVal' )),
    COMMETHOD(['propget', helpstring(u'Data value used to indicate invalid or excluded data.')], HRESULT, 'NoDataValue',
              ( ['retval', 'out'], POINTER(VARIANT), 'pVal' )),
    COMMETHOD(['propput', helpstring(u'Data value used to indicate invalid or excluded data.')], HRESULT, 'NoDataValue',
              ( ['in'], VARIANT, 'pVal' )),
    COMMETHOD([helpstring(u'Returns the approximate cell size of the raster.')], HRESULT, 'MeanCellSize',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IPnt)), 'pSize' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the data is integer.')], HRESULT, 'IsInteger',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pVal' )),
    COMMETHOD(['propget', helpstring(u'SpatialReference of the Raster.')], HRESULT, 'SpatialReference',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference)), 'ppSpref' )),
    COMMETHOD(['propput', helpstring(u'SpatialReference of the Raster.')], HRESULT, 'SpatialReference',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'ppSpref' )),
    COMMETHOD(['propget', helpstring(u'The extent of the Raster.')], HRESULT, 'Extent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'ppExtent' )),
    COMMETHOD(['propput', helpstring(u'The extent of the Raster.')], HRESULT, 'Extent',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'ppExtent' )),
]
################################################################
## code template for IRasterProps implementation
##class IRasterProps_Impl(object):
##    def _get(self):
##        u'SpatialReference of the Raster.'
##        #return ppSpref
##    def _set(self, ppSpref):
##        u'SpatialReference of the Raster.'
##    SpatialReference = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Data type of the pixels.'
##        #return pVal
##    def _set(self, pVal):
##        u'Data type of the pixels.'
##    PixelType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Data value used to indicate invalid or excluded data.'
##        #return pVal
##    def _set(self, pVal):
##        u'Data value used to indicate invalid or excluded data.'
##    NoDataValue = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Width in pixels.'
##        #return pVal
##    def _set(self, pVal):
##        u'Width in pixels.'
##    Width = property(_get, _set, doc = _set.__doc__)
##
##    def MeanCellSize(self):
##        u'Returns the approximate cell size of the raster.'
##        #return pSize
##
##    def _get(self):
##        u'The extent of the Raster.'
##        #return ppExtent
##    def _set(self, ppExtent):
##        u'The extent of the Raster.'
##    Extent = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Map to raster transformation information.'
##        #return pVal
##    def _set(self, pVal):
##        u'Map to raster transformation information.'
##    MapModel = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Height in pixels.'
##        #return pVal
##    def _set(self, pVal):
##        u'Height in pixels.'
##    Height = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def IsInteger(self):
##        u'Indicates if the data is integer.'
##        #return pVal
##

IRasterKeyProperties._methods_ = [
    COMMETHOD([helpstring(u'Returns the requested key property by name.')], HRESULT, 'GetProperty',
              ( ['in'], BSTR, 'sName' ),
              ( ['retval', 'out'], POINTER(VARIANT), 'pvtValue' )),
    COMMETHOD([helpstring(u'Updates the value of the specified key property by name.')], HRESULT, 'SetProperty',
              ( ['in'], BSTR, 'sName' ),
              ( ['in'], VARIANT, 'vtValue' )),
    COMMETHOD([helpstring(u'Removes all occurrences of the specified key property.')], HRESULT, 'RemoveProperty',
              ( ['in'], BSTR, 'sName' )),
    COMMETHOD([helpstring(u'Queries all available key properties.')], HRESULT, 'GetAllProperties',
              ( ['out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray)), 'ppNames' ),
              ( ['out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IVariantArray)), 'ppValues' )),
    COMMETHOD([helpstring(u'Returns the requested key property by name for a given band.')], HRESULT, 'GetBandProperty',
              ( ['in'], BSTR, 'sName' ),
              ( ['in'], c_int, 'BandIndex' ),
              ( ['retval', 'out'], POINTER(VARIANT), 'pvtValue' )),
    COMMETHOD([helpstring(u'Updates the value of the specified key property by name for a given band.')], HRESULT, 'SetBandProperty',
              ( ['in'], BSTR, 'sName' ),
              ( ['in'], c_int, 'BandIndex' ),
              ( ['in'], VARIANT, 'vtValue' )),
    COMMETHOD([helpstring(u'Removes all occurrences of the specified key property for a given band.')], HRESULT, 'RemoveBandProperty',
              ( ['in'], BSTR, 'sName' ),
              ( ['in'], c_int, 'BandIndex' )),
    COMMETHOD([helpstring(u'Queries all available band-specific key properties.')], HRESULT, 'GetAllBandProperties',
              ( ['in'], c_int, 'BandIndex' ),
              ( ['out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray)), 'ppNames' ),
              ( ['out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IVariantArray)), 'ppValues' )),
]
################################################################
## code template for IRasterKeyProperties implementation
##class IRasterKeyProperties_Impl(object):
##    def GetProperty(self, sName):
##        u'Returns the requested key property by name.'
##        #return pvtValue
##
##    def SetBandProperty(self, sName, BandIndex, vtValue):
##        u'Updates the value of the specified key property by name for a given band.'
##        #return 
##
##    def GetBandProperty(self, sName, BandIndex):
##        u'Returns the requested key property by name for a given band.'
##        #return pvtValue
##
##    def GetAllBandProperties(self, BandIndex):
##        u'Queries all available band-specific key properties.'
##        #return ppNames, ppValues
##
##    def RemoveBandProperty(self, sName, BandIndex):
##        u'Removes all occurrences of the specified key property for a given band.'
##        #return 
##
##    def RemoveProperty(self, sName):
##        u'Removes all occurrences of the specified key property.'
##        #return 
##
##    def SetProperty(self, sName, vtValue):
##        u'Updates the value of the specified key property by name.'
##        #return 
##
##    def GetAllProperties(self):
##        u'Queries all available key properties.'
##        #return ppNames, ppValues
##

IRasterConvolutionFilter._methods_ = [
    COMMETHOD([helpstring(u'Sets the size of the kernel filter.')], HRESULT, 'SetSize',
              ( ['in'], c_int, 'nColumns' ),
              ( ['in'], c_int, 'nRows' )),
    COMMETHOD([helpstring(u'Gets the size of the kernel filter.')], HRESULT, 'GetSize',
              ( ['in', 'out'], POINTER(c_int), 'nColumns' ),
              ( ['in', 'out'], POINTER(c_int), 'nRows' )),
    COMMETHOD([helpstring(u'Sets the center position of the kernel filter.')], HRESULT, 'SetCenterPosition',
              ( ['in'], c_int, 'atColumn' ),
              ( ['in'], c_int, 'atRow' )),
    COMMETHOD([helpstring(u'Gets the center position of the kernel filter.')], HRESULT, 'GetCenterPosition',
              ( ['in', 'out'], POINTER(c_int), 'atColumn' ),
              ( ['in', 'out'], POINTER(c_int), 'atRow' )),
    COMMETHOD([helpstring(u'Sets the element coefficients of the kernel filter.')], HRESULT, 'PutCoefficients',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'coefList' )),
    COMMETHOD([helpstring(u'Gets the element coefficients of the kernel filter.')], HRESULT, 'QueryCoefficients',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'coefList' )),
    COMMETHOD(['propput', helpstring(u'The gain factor of the kernel filter.')], HRESULT, 'GainFactor',
              ( ['in'], c_double, 'GainFactor' )),
    COMMETHOD(['propget', helpstring(u'The gain factor of the kernel filter.')], HRESULT, 'GainFactor',
              ( ['retval', 'out'], POINTER(c_double), 'GainFactor' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the filter is recursive.')], HRESULT, 'Recursive',
              ( ['in'], VARIANT_BOOL, 'Recursive' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the filter is recursive.')], HRESULT, 'Recursive',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Recursive' )),
    COMMETHOD([helpstring(u'Normalizes the filter.')], HRESULT, 'Normalize'),
    COMMETHOD(['propget', helpstring(u'Indicates whether the filter is normalized.')], HRESULT, 'IsNormalized',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'normalized' )),
    COMMETHOD([helpstring(u'Scales the filter coefficients.')], HRESULT, 'ScaleBy',
              ( ['in'], c_double, 'scaleFactor' )),
]
################################################################
## code template for IRasterConvolutionFilter implementation
##class IRasterConvolutionFilter_Impl(object):
##    def Normalize(self):
##        u'Normalizes the filter.'
##        #return 
##
##    def PutCoefficients(self):
##        u'Sets the element coefficients of the kernel filter.'
##        #return coefList
##
##    @property
##    def IsNormalized(self):
##        u'Indicates whether the filter is normalized.'
##        #return normalized
##
##    def _get(self):
##        u'Indicates whether the filter is recursive.'
##        #return Recursive
##    def _set(self, Recursive):
##        u'Indicates whether the filter is recursive.'
##    Recursive = property(_get, _set, doc = _set.__doc__)
##
##    def QueryCoefficients(self):
##        u'Gets the element coefficients of the kernel filter.'
##        #return coefList
##
##    def SetCenterPosition(self, atColumn, atRow):
##        u'Sets the center position of the kernel filter.'
##        #return 
##
##    def _get(self):
##        u'The gain factor of the kernel filter.'
##        #return GainFactor
##    def _set(self, GainFactor):
##        u'The gain factor of the kernel filter.'
##    GainFactor = property(_get, _set, doc = _set.__doc__)
##
##    def GetSize(self):
##        u'Gets the size of the kernel filter.'
##        #return nColumns, nRows
##
##    def ScaleBy(self, scaleFactor):
##        u'Scales the filter coefficients.'
##        #return 
##
##    def SetSize(self, nColumns, nRows):
##        u'Sets the size of the kernel filter.'
##        #return 
##
##    def GetCenterPosition(self):
##        u'Gets the center position of the kernel filter.'
##        #return atColumn, atRow
##

class ComputeDirtyAreaParameters(CoClass):
    u"An object that controls how a mosaic dataset's dirty area geometry is computed."
    _reg_clsid_ = GUID('{E9DE847A-2888-4FF1-B384-BE60FFDAE6F6}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
ComputeDirtyAreaParameters._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMosaicDatasetOperationParameters, IComputeDirtyAreaParameters, ISelectionParameters, IThreadedOperationParameters]

IDEMosaicDataset2._methods_ = [
    COMMETHOD(['propget', helpstring(u'The raster attribute table.')], HRESULT, 'DERasterAttributeTable',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDETable)), 'ppTable' )),
    COMMETHOD(['propputref', helpstring(u'The raster attribute table.')], HRESULT, 'DERasterAttributeTable',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDETable), 'ppTable' )),
]
################################################################
## code template for IDEMosaicDataset2 implementation
##class IDEMosaicDataset2_Impl(object):
##    def DERasterAttributeTable(self, ppTable):
##        u'The raster attribute table.'
##        #return 
##

IBuildPyramidsParameters._methods_ = [
    COMMETHOD(['propput', helpstring(u'The method used for pyramid resampling.')], HRESULT, 'PyramidResampleType',
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.rstResamplingTypes, 'pMethod' )),
    COMMETHOD(['propget', helpstring(u'The method used for pyramid resampling.')], HRESULT, 'PyramidResampleType',
              ( ['retval', 'out'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.rstResamplingTypes), 'pMethod' )),
    COMMETHOD(['propput', helpstring(u'The number of pyramid levels.')], HRESULT, 'PyramidLevel',
              ( ['in'], c_int, 'pLevel' )),
    COMMETHOD(['propget', helpstring(u'The number of pyramid levels.')], HRESULT, 'PyramidLevel',
              ( ['retval', 'out'], POINTER(c_int), 'pLevel' )),
    COMMETHOD(['propput', helpstring(u'The pyramid compression type.')], HRESULT, 'CompressionType',
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriRasterCompressionType, 'pType' )),
    COMMETHOD(['propget', helpstring(u'The pyramid compression type.')], HRESULT, 'CompressionType',
              ( ['retval', 'out'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriRasterCompressionType), 'pType' )),
    COMMETHOD(['propput', helpstring(u'The pyramid compression quality.')], HRESULT, 'CompressionQuality',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD(['propget', helpstring(u'The pyramid compression quality.')], HRESULT, 'CompressionQuality',
              ( ['retval', 'out'], POINTER(c_int), 'Value' )),
]
################################################################
## code template for IBuildPyramidsParameters implementation
##class IBuildPyramidsParameters_Impl(object):
##    def _get(self):
##        u'The pyramid compression type.'
##        #return pType
##    def _set(self, pType):
##        u'The pyramid compression type.'
##    CompressionType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The number of pyramid levels.'
##        #return pLevel
##    def _set(self, pLevel):
##        u'The number of pyramid levels.'
##    PyramidLevel = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The method used for pyramid resampling.'
##        #return pMethod
##    def _set(self, pMethod):
##        u'The method used for pyramid resampling.'
##    PyramidResampleType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The pyramid compression quality.'
##        #return Value
##    def _set(self, Value):
##        u'The pyramid compression quality.'
##    CompressionQuality = property(_get, _set, doc = _set.__doc__)
##

ISelectionParameters._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The selection set that identifies the collection of catalog items on which to perform the associated operation.')], HRESULT, 'SelectionSet',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ISelectionSet), 'ppSelectionSet' )),
    COMMETHOD(['propget', helpstring(u'The selection set that identifies the collection of catalog items on which to perform the associated operation.')], HRESULT, 'SelectionSet',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ISelectionSet)), 'ppSelectionSet' )),
    COMMETHOD(['propputref', helpstring(u'The query filter applied on the selection set to identify the collection of catalog items on which to perform the associated operation. If no selection is specified, the query filter is applied on the entire catalog.')], HRESULT, 'QueryFilter',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter), 'ppQueryFilter' )),
    COMMETHOD(['propget', helpstring(u'The query filter applied on the selection set to identify the collection of catalog items on which to perform the associated operation. If no selection is specified, the query filter is applied on the entire catalog.')], HRESULT, 'QueryFilter',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IQueryFilter)), 'ppQueryFilter' )),
]
################################################################
## code template for ISelectionParameters implementation
##class ISelectionParameters_Impl(object):
##    @property
##    def QueryFilter(self, ppQueryFilter):
##        u'The query filter applied on the selection set to identify the collection of catalog items on which to perform the associated operation. If no selection is specified, the query filter is applied on the entire catalog.'
##        #return 
##
##    @property
##    def SelectionSet(self, ppSelectionSet):
##        u'The selection set that identifies the collection of catalog items on which to perform the associated operation.'
##        #return 
##

class RasterXformer(CoClass):
    u'A raster transformer class.'
    _reg_clsid_ = GUID('{779BCAAD-7557-4AAE-A2A9-1A4B19573AD4}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
RasterXformer._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterXformer, IRasterXformer2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]

class RasterCatalogTable(CoClass):
    u'A special type of table used to display multiple rasters simultaneously.'
    _reg_clsid_ = GUID('{358E55F5-8A1A-487D-884A-8226147B6499}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
RasterCatalogTable._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterCatalogTable, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeoDataset]

IDEMosaicDatasetType._methods_ = [
]
################################################################
## code template for IDEMosaicDatasetType implementation
##class IDEMosaicDatasetType_Impl(object):

IRasterSdeStorage2._methods_ = [
    COMMETHOD(['propput', helpstring(u'The tile width.')], HRESULT, 'TileWidth',
              ( ['in'], c_int, 'Width' )),
    COMMETHOD(['propget', helpstring(u'The tile width.')], HRESULT, 'TileWidth',
              ( ['retval', 'out'], POINTER(c_int), 'Width' )),
    COMMETHOD(['propput', helpstring(u'The tile height.')], HRESULT, 'TileHeight',
              ( ['in'], c_int, 'Height' )),
    COMMETHOD(['propget', helpstring(u'The tile height.')], HRESULT, 'TileHeight',
              ( ['retval', 'out'], POINTER(c_int), 'Height' )),
    COMMETHOD(['propput', helpstring(u'The resampling method.')], HRESULT, 'PyramidResampleType',
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.rstResamplingTypes, 'Method' )),
    COMMETHOD(['propget', helpstring(u'The resampling method.')], HRESULT, 'PyramidResampleType',
              ( ['retval', 'out'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.rstResamplingTypes), 'Method' )),
    COMMETHOD(['propget', helpstring(u'The SpatialReference.')], HRESULT, 'SpatialReference',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference)), 'spRef' )),
    COMMETHOD(['propputref', helpstring(u'The SpatialReference.')], HRESULT, 'SpatialReference',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'spRef' )),
    COMMETHOD(['propput', helpstring(u'The option for building pyramids.')], HRESULT, 'PyramidOption',
              ( ['in'], esriRasterSdePyramidOptEnum, 'option' )),
    COMMETHOD(['propget', helpstring(u'The option for building pyramids.')], HRESULT, 'PyramidOption',
              ( ['retval', 'out'], POINTER(esriRasterSdePyramidOptEnum), 'option' )),
    COMMETHOD(['propput', helpstring(u'The compression type.')], HRESULT, 'CompressionType',
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriRasterSdeCompressionTypeEnum, 'Type' )),
    COMMETHOD(['propget', helpstring(u'The compression type.')], HRESULT, 'CompressionType',
              ( ['retval', 'out'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriRasterSdeCompressionTypeEnum), 'Type' )),
    COMMETHOD(['propput', helpstring(u'The keyword.')], HRESULT, 'Keyword',
              ( ['in'], BSTR, 'Keyword' )),
    COMMETHOD(['propget', helpstring(u'The keyword.')], HRESULT, 'Keyword',
              ( ['retval', 'out'], POINTER(BSTR), 'Keyword' )),
    COMMETHOD(['propput', helpstring(u'The mosaicing tolerance.')], HRESULT, 'MosaicingTolerance',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'rhs' )),
    COMMETHOD(['propput', helpstring(u'The compression quality.')], HRESULT, 'CompressionQuality',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD(['propget', helpstring(u'The compression quality.')], HRESULT, 'CompressionQuality',
              ( ['retval', 'out'], POINTER(c_int), 'Value' )),
]
################################################################
## code template for IRasterSdeStorage2 implementation
##class IRasterSdeStorage2_Impl(object):
##    def _get(self):
##        u'The compression type.'
##        #return Type
##    def _set(self, Type):
##        u'The compression type.'
##    CompressionType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The keyword.'
##        #return Keyword
##    def _set(self, Keyword):
##        u'The keyword.'
##    Keyword = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The tile height.'
##        #return Height
##    def _set(self, Height):
##        u'The tile height.'
##    TileHeight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The tile width.'
##        #return Width
##    def _set(self, Width):
##        u'The tile width.'
##    TileWidth = property(_get, _set, doc = _set.__doc__)
##
##    def _set(self, rhs):
##        u'The mosaicing tolerance.'
##    MosaicingTolerance = property(fset = _set, doc = _set.__doc__)
##
##    def SpatialReference(self, spRef):
##        u'The SpatialReference.'
##        #return 
##
##    def _get(self):
##        u'The option for building pyramids.'
##        #return option
##    def _set(self, option):
##        u'The option for building pyramids.'
##    PyramidOption = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The compression quality.'
##        #return Value
##    def _set(self, Value):
##        u'The compression quality.'
##    CompressionQuality = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The resampling method.'
##        #return Method
##    def _set(self, Method):
##        u'The resampling method.'
##    PyramidResampleType = property(_get, _set, doc = _set.__doc__)
##

class HillshadeFunctionArguments(CoClass):
    u'The Hillshade function arguments.'
    _reg_clsid_ = GUID('{80186241-15DF-4C3A-94DA-50FA3F73FCB2}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
HillshadeFunctionArguments._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunctionArguments, IRasterFunctionArguments2, IHillshadeFunctionArguments, ISlopeScalingArguments, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class MosaicDataset(CoClass):
    u'A mosaic dataset object.'
    _reg_clsid_ = GUID('{018EA77B-8F1B-4FF9-91C1-9E590D6FC0D6}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IItemPathsQuery2(IItemPathsQuery):
    _case_insensitive_ = True
    u'Provides access to members that allow querying for paths stored in a mosaic dataset.'
    _iid_ = GUID('{E85A7589-1AD8-4ACC-9DCD-F7C32F4239E7}')
    _idlflags_ = ['oleautomation']
MosaicDataset._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IFunctionRasterDataset, IMosaicDataset, IMosaicDataset2, IMosaicDatasetOperation, IMosaicDatasetOperation2, IRasterTypeHistory, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDatasetAnalyze, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IObjectClassSchemaEvents, IItemPaths, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ISchemaLock, IItemPathsQuery2, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDatasetComponent]

IRasterDatasetContainer._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates the collection is dynamic.')], HRESULT, 'IsDynamic',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pIsDynamic' )),
    COMMETHOD([helpstring(u'The number of subdatasets.')], HRESULT, 'GetSubRasterDatasetCount',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD([helpstring(u"The given subdataset's name.")], HRESULT, 'GetSubRasterDatasetName',
              ( ['in'], c_int, 'SubdatasetID' ),
              ( ['retval', 'out'], POINTER(BSTR), 'pName' )),
    COMMETHOD([helpstring(u"The given subdataset's complete name.")], HRESULT, 'GetSubRasterDatasetCompleteName',
              ( ['in'], c_int, 'SubdatasetID' ),
              ( ['retval', 'out'], POINTER(BSTR), 'pName' )),
    COMMETHOD([helpstring(u"The given subdataset's full name.")], HRESULT, 'GetSubRasterDatasetFullName',
              ( ['in'], c_int, 'SubdatasetID' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName)), 'ppName' )),
    COMMETHOD([helpstring(u'The given subdataset by id.')], HRESULT, 'GetSubRasterDatasetByID',
              ( ['in'], c_int, 'SubdatasetID' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterDataset)), 'ppRasterDataset' )),
    COMMETHOD([helpstring(u'The given subdataset by name.')], HRESULT, 'GetSubRasterDatasetByName',
              ( ['in'], BSTR, 'SubdatasetName' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterDataset)), 'ppRasterDataset' )),
]
################################################################
## code template for IRasterDatasetContainer implementation
##class IRasterDatasetContainer_Impl(object):
##    def GetSubRasterDatasetByID(self, SubdatasetID):
##        u'The given subdataset by id.'
##        #return ppRasterDataset
##
##    def GetSubRasterDatasetName(self, SubdatasetID):
##        u"The given subdataset's name."
##        #return pName
##
##    def GetSubRasterDatasetFullName(self, SubdatasetID):
##        u"The given subdataset's full name."
##        #return ppName
##
##    def GetSubRasterDatasetByName(self, SubdatasetName):
##        u'The given subdataset by name.'
##        #return ppRasterDataset
##
##    @property
##    def IsDynamic(self):
##        u'Indicates the collection is dynamic.'
##        #return pIsDynamic
##
##    def GetSubRasterDatasetCount(self):
##        u'The number of subdatasets.'
##        #return pCount
##
##    def GetSubRasterDatasetCompleteName(self, SubdatasetID):
##        u"The given subdataset's complete name."
##        #return pName
##

class MergeRastersFunctionArguments(CoClass):
    u'A class for tiled raster function arguments.'
    _reg_clsid_ = GUID('{9A388281-B984-4BD3-B799-348D01A05605}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
MergeRastersFunctionArguments._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunctionArguments, IMergeRastersFunctionArguments, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

IStockConvolutionFilter._methods_ = [
    COMMETHOD(['propput', helpstring(u'The type of the stock kernel filter.')], HRESULT, 'Type',
              ( ['in'], esriRasterFilterTypeEnum, 'FilterType' )),
    COMMETHOD(['propget', helpstring(u'The type of the stock kernel filter.')], HRESULT, 'Type',
              ( ['retval', 'out'], POINTER(esriRasterFilterTypeEnum), 'FilterType' )),
]
################################################################
## code template for IStockConvolutionFilter implementation
##class IStockConvolutionFilter_Impl(object):
##    def _get(self):
##        u'The type of the stock kernel filter.'
##        #return FilterType
##    def _set(self, FilterType):
##        u'The type of the stock kernel filter.'
##    Type = property(_get, _set, doc = _set.__doc__)
##

class SAIFunctionArguments(CoClass):
    u'The Slope-Aspect Index (SAI) function arguments.'
    _reg_clsid_ = GUID('{314E643B-44A2-43AD-9374-6F4EEADE11E9}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
SAIFunctionArguments._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunctionArguments, ISAIFunctionArguments, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class IkonosBuilder(CoClass):
    u'A raster builder for IKONOS files'
    _reg_clsid_ = GUID('{BADFFA86-5C20-44B1-8A66-0ABC611B8AAE}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
IkonosBuilder._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterBuilder2, IRasterBuilderInit]

IRasterStatistics._methods_ = [
    COMMETHOD(['propget', helpstring(u'Approximate smallest value.')], HRESULT, 'Minimum',
              ( ['retval', 'out'], POINTER(c_double), 'pVal' )),
    COMMETHOD(['propput', helpstring(u'Approximate smallest value.')], HRESULT, 'Minimum',
              ( ['in'], c_double, 'pVal' )),
    COMMETHOD(['propget', helpstring(u'Approximate largest value.')], HRESULT, 'Maximum',
              ( ['retval', 'out'], POINTER(c_double), 'pVal' )),
    COMMETHOD(['propput', helpstring(u'Approximate largest value.')], HRESULT, 'Maximum',
              ( ['in'], c_double, 'pVal' )),
    COMMETHOD(['propget', helpstring(u'Approximate average value.')], HRESULT, 'Mean',
              ( ['retval', 'out'], POINTER(c_double), 'pVal' )),
    COMMETHOD(['propput', helpstring(u'Approximate average value.')], HRESULT, 'Mean',
              ( ['in'], c_double, 'pVal' )),
    COMMETHOD(['propget', helpstring(u'Measures spread of pixel values about the mean.')], HRESULT, 'StandardDeviation',
              ( ['retval', 'out'], POINTER(c_double), 'pVal' )),
    COMMETHOD(['propput', helpstring(u'Measures spread of pixel values about the mean.')], HRESULT, 'StandardDeviation',
              ( ['in'], c_double, 'pVal' )),
    COMMETHOD(['propget', helpstring(u'Divides pixel population approximately in halves.')], HRESULT, 'Median',
              ( ['retval', 'out'], POINTER(c_double), 'pVal' )),
    COMMETHOD(['propget', helpstring(u'Approximate most popular pixel value.')], HRESULT, 'Mode',
              ( ['retval', 'out'], POINTER(c_double), 'pVal' )),
    COMMETHOD(['propget', helpstring(u'Indicates if statistics are fresh.')], HRESULT, 'IsValid',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pVal' )),
    COMMETHOD(['propput', helpstring(u'Indicates if statistics are fresh.')], HRESULT, 'IsValid',
              ( ['in'], VARIANT_BOOL, 'pVal' )),
    COMMETHOD(['propget', helpstring(u'Array of doubles indicating the pixel values not included in the statistics calculation.')], HRESULT, 'IgnoredValues',
              ( ['retval', 'out'], POINTER(VARIANT), 'pVal' )),
    COMMETHOD(['propput', helpstring(u'Array of doubles indicating the pixel values not included in the statistics calculation.')], HRESULT, 'IgnoredValues',
              ( ['in'], VARIANT, 'pVal' )),
    COMMETHOD(['propget', helpstring(u'Number of horizontal pixels between samples for purposes of calculating statistics.')], HRESULT, 'SkipFactorX',
              ( ['retval', 'out'], POINTER(c_int), 'pVal' )),
    COMMETHOD(['propput', helpstring(u'Number of horizontal pixels between samples for purposes of calculating statistics.')], HRESULT, 'SkipFactorX',
              ( ['in'], c_int, 'pVal' )),
    COMMETHOD(['propget', helpstring(u'Number of vertical pixels between samples for purposes of calculating statistics.')], HRESULT, 'SkipFactorY',
              ( ['retval', 'out'], POINTER(c_int), 'pVal' )),
    COMMETHOD(['propput', helpstring(u'Number of vertical pixels between samples for purposes of calculating statistics.')], HRESULT, 'SkipFactorY',
              ( ['in'], c_int, 'pVal' )),
    COMMETHOD(['hidden', helpstring(u'The RasterBand.'), 'propput'], HRESULT, 'RasterBand',
              ( ['in'], POINTER(IRasterBand), 'rhs' )),
    COMMETHOD([helpstring(u'Recalculate statistics based upon current skip factors and ignored values.')], HRESULT, 'Recalculate'),
]
################################################################
## code template for IRasterStatistics implementation
##class IRasterStatistics_Impl(object):
##    def _set(self, rhs):
##        u'The RasterBand.'
##    RasterBand = property(fset = _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if statistics are fresh.'
##        #return pVal
##    def _set(self, pVal):
##        u'Indicates if statistics are fresh.'
##    IsValid = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Number of vertical pixels between samples for purposes of calculating statistics.'
##        #return pVal
##    def _set(self, pVal):
##        u'Number of vertical pixels between samples for purposes of calculating statistics.'
##    SkipFactorY = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Number of horizontal pixels between samples for purposes of calculating statistics.'
##        #return pVal
##    def _set(self, pVal):
##        u'Number of horizontal pixels between samples for purposes of calculating statistics.'
##    SkipFactorX = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Median(self):
##        u'Divides pixel population approximately in halves.'
##        #return pVal
##
##    def _get(self):
##        u'Measures spread of pixel values about the mean.'
##        #return pVal
##    def _set(self, pVal):
##        u'Measures spread of pixel values about the mean.'
##    StandardDeviation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Approximate largest value.'
##        #return pVal
##    def _set(self, pVal):
##        u'Approximate largest value.'
##    Maximum = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Approximate smallest value.'
##        #return pVal
##    def _set(self, pVal):
##        u'Approximate smallest value.'
##    Minimum = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Mode(self):
##        u'Approximate most popular pixel value.'
##        #return pVal
##
##    def _get(self):
##        u'Array of doubles indicating the pixel values not included in the statistics calculation.'
##        #return pVal
##    def _set(self, pVal):
##        u'Array of doubles indicating the pixel values not included in the statistics calculation.'
##    IgnoredValues = property(_get, _set, doc = _set.__doc__)
##
##    def Recalculate(self):
##        u'Recalculate statistics based upon current skip factors and ignored values.'
##        #return 
##
##    def _get(self):
##        u'Approximate average value.'
##        #return pVal
##    def _set(self, pVal):
##        u'Approximate average value.'
##    Mean = property(_get, _set, doc = _set.__doc__)
##

IOverviewImageParameters._methods_ = [
    COMMETHOD(['propget', helpstring(u'The raster storage definition.')], HRESULT, 'StorageDef',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterStorageDef)), 'ppStorageDef' )),
    COMMETHOD(['propputref', helpstring(u'The raster storage definition.')], HRESULT, 'StorageDef',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterStorageDef), 'ppStorageDef' )),
    COMMETHOD(['propput', helpstring(u'The sampling method used on the mosaic dataset while generating the overview raster dataset.')], HRESULT, 'ResamplingMethod',
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.rstResamplingTypes, 'pSamplingMethod' )),
    COMMETHOD(['propget', helpstring(u'The sampling method used on the mosaic dataset while generating the overview raster dataset.')], HRESULT, 'ResamplingMethod',
              ( ['retval', 'out'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.rstResamplingTypes), 'pSamplingMethod' )),
]
################################################################
## code template for IOverviewImageParameters implementation
##class IOverviewImageParameters_Impl(object):
##    def StorageDef(self, ppStorageDef):
##        u'The raster storage definition.'
##        #return 
##
##    def _get(self):
##        u'The sampling method used on the mosaic dataset while generating the overview raster dataset.'
##        #return pSamplingMethod
##    def _set(self, pSamplingMethod):
##        u'The sampling method used on the mosaic dataset while generating the overview raster dataset.'
##    ResamplingMethod = property(_get, _set, doc = _set.__doc__)
##

IExtractBandFunctionArguments2._methods_ = [
    COMMETHOD([helpstring(u'Initialize extract band arguments using the specified space- or semicolon-delimited band combination.')], HRESULT, 'Init',
              ( ['in'], BSTR, 'sBandCombination' )),
    COMMETHOD(['propget', helpstring(u'Indicates how the raster function behaves when a requested band (specified by index, name, or wavelength) is not found in the input raster.')], HRESULT, 'MissingBandAction',
              ( ['retval', 'out'], POINTER(esriMissingBandAction), 'pMissingBandAction' )),
    COMMETHOD(['propput', helpstring(u'Indicates how the raster function behaves when a requested band (specified by index, name, or wavelength) is not found in the input raster.')], HRESULT, 'MissingBandAction',
              ( ['in'], esriMissingBandAction, 'pMissingBandAction' )),
    COMMETHOD(['propget', helpstring(u'The wavelength tolerance value in nanometers. For a raster band to be associated with a requested wavelength, the two wavelengths must lie within this tolerance.')], HRESULT, 'WavelengthMatchTolerance',
              ( ['retval', 'out'], POINTER(c_double), 'pWavelengthMatchTolerance' )),
    COMMETHOD(['propput', helpstring(u'The wavelength tolerance value in nanometers. For a raster band to be associated with a requested wavelength, the two wavelengths must lie within this tolerance.')], HRESULT, 'WavelengthMatchTolerance',
              ( ['in'], c_double, 'pWavelengthMatchTolerance' )),
    COMMETHOD(['propget', helpstring(u"The list of bands to be extracted by mid wavelength values (in nanometers). This property, when specified, overrides values in the 'BandIDs' property.")], HRESULT, 'BandWavelengths',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray)), 'ppBandWavelengths' )),
    COMMETHOD(['propputref', helpstring(u"The list of bands to be extracted by mid wavelength values (in nanometers). This property, when specified, overrides values in the 'BandIDs' property.")], HRESULT, 'BandWavelengths',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray), 'ppBandWavelengths' )),
    COMMETHOD(['propget', helpstring(u"The list of bands to be extracted by name. This property, when specified, overrides values in the 'BandIDs' and the 'BandWavelengths' properties.")], HRESULT, 'BandNames',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray)), 'ppBandNames' )),
    COMMETHOD(['propputref', helpstring(u"The list of bands to be extracted by name. This property, when specified, overrides values in the 'BandIDs' and the 'BandWavelengths' properties.")], HRESULT, 'BandNames',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray), 'ppBandNames' )),
]
################################################################
## code template for IExtractBandFunctionArguments2 implementation
##class IExtractBandFunctionArguments2_Impl(object):
##    def BandNames(self, ppBandNames):
##        u"The list of bands to be extracted by name. This property, when specified, overrides values in the 'BandIDs' and the 'BandWavelengths' properties."
##        #return 
##
##    def Init(self, sBandCombination):
##        u'Initialize extract band arguments using the specified space- or semicolon-delimited band combination.'
##        #return 
##
##    def BandWavelengths(self, ppBandWavelengths):
##        u"The list of bands to be extracted by mid wavelength values (in nanometers). This property, when specified, overrides values in the 'BandIDs' property."
##        #return 
##
##    def _get(self):
##        u'Indicates how the raster function behaves when a requested band (specified by index, name, or wavelength) is not found in the input raster.'
##        #return pMissingBandAction
##    def _set(self, pMissingBandAction):
##        u'Indicates how the raster function behaves when a requested band (specified by index, name, or wavelength) is not found in the input raster.'
##    MissingBandAction = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The wavelength tolerance value in nanometers. For a raster band to be associated with a requested wavelength, the two wavelengths must lie within this tolerance.'
##        #return pWavelengthMatchTolerance
##    def _set(self, pWavelengthMatchTolerance):
##        u'The wavelength tolerance value in nanometers. For a raster band to be associated with a requested wavelength, the two wavelengths must lie within this tolerance.'
##    WavelengthMatchTolerance = property(_get, _set, doc = _set.__doc__)
##

ICachedRasterFunctionArguments._methods_ = [
    COMMETHOD(['propget', helpstring(u'The input raster.')], HRESULT, 'Raster',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppRaster' )),
    COMMETHOD(['propputref', helpstring(u'The input raster.')], HRESULT, 'Raster',
              ( ['in'], POINTER(IUnknown), 'ppRaster' )),
    COMMETHOD(['propput', helpstring(u'The compression type.')], HRESULT, 'CompressionType',
              ( ['in'], esriCachedRasterCompressionType, 'pType' )),
    COMMETHOD(['propget', helpstring(u'The compression type.')], HRESULT, 'CompressionType',
              ( ['retval', 'out'], POINTER(esriCachedRasterCompressionType), 'pType' )),
    COMMETHOD(['propput', helpstring(u'The compression quality.')], HRESULT, 'CompressionQuality',
              ( ['in'], c_int, 'Value' )),
    COMMETHOD(['propget', helpstring(u'The compression quality.')], HRESULT, 'CompressionQuality',
              ( ['retval', 'out'], POINTER(c_int), 'Value' )),
    COMMETHOD(['propget', helpstring(u'The maximum number of cols allowed in the input raster for generating the cache.')], HRESULT, 'MaxAllowedInputCols',
              ( ['retval', 'out'], POINTER(c_int), 'pCols' )),
    COMMETHOD(['propput', helpstring(u'The maximum number of cols allowed in the input raster for generating the cache.')], HRESULT, 'MaxAllowedInputCols',
              ( ['in'], c_int, 'pCols' )),
    COMMETHOD(['propget', helpstring(u'The maximum number of rows allowed in the input raster for generating the cache.')], HRESULT, 'MaxAllowedInputRows',
              ( ['retval', 'out'], POINTER(c_int), 'pRows' )),
    COMMETHOD(['propput', helpstring(u'The maximum number of rows allowed in the input raster for generating the cache.')], HRESULT, 'MaxAllowedInputRows',
              ( ['in'], c_int, 'pRows' )),
    COMMETHOD(['propget', helpstring(u'Name used for generating the CacheFileName. GUID is used if this is not specified.')], HRESULT, 'CacheBaseName',
              ( ['retval', 'out'], POINTER(BSTR), 'pCacheBaseName' )),
    COMMETHOD(['propput', helpstring(u'Name used for generating the CacheFileName. GUID is used if this is not specified.')], HRESULT, 'CacheBaseName',
              ( ['in'], BSTR, 'pCacheBaseName' )),
    COMMETHOD(['propget', helpstring(u'The clipping geometry that defines regions of valid pixels. This geometry may have a coordinate system different from the corresponding dataset.')], HRESULT, 'ClippingGeometry',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry)), 'ppClippingGeometry' )),
    COMMETHOD(['propputref', helpstring(u'The clipping geometry that defines regions of valid pixels. This geometry may have a coordinate system different from the corresponding dataset.')], HRESULT, 'ClippingGeometry',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'ppClippingGeometry' )),
    COMMETHOD(['propget', helpstring(u'The request size used for resampling the item cache.')], HRESULT, 'RequestSize',
              ( ['retval', 'out'], POINTER(c_double), 'pRequestSize' )),
    COMMETHOD(['propput', helpstring(u'The request size used for resampling the item cache.')], HRESULT, 'RequestSize',
              ( ['in'], c_double, 'pRequestSize' )),
    COMMETHOD(['propget', helpstring(u'The unit of the request size is determined by request size type.')], HRESULT, 'RequestSizeType',
              ( ['retval', 'out'], POINTER(esriRequestSizeType), 'pRequestSizeType' )),
    COMMETHOD(['propput', helpstring(u'The unit of the request size is determined by request size type.')], HRESULT, 'RequestSizeType',
              ( ['in'], esriRequestSizeType, 'pRequestSizeType' )),
]
################################################################
## code template for ICachedRasterFunctionArguments implementation
##class ICachedRasterFunctionArguments_Impl(object):
##    def Raster(self, ppRaster):
##        u'The input raster.'
##        #return 
##
##    def ClippingGeometry(self, ppClippingGeometry):
##        u'The clipping geometry that defines regions of valid pixels. This geometry may have a coordinate system different from the corresponding dataset.'
##        #return 
##
##    def _get(self):
##        u'Name used for generating the CacheFileName. GUID is used if this is not specified.'
##        #return pCacheBaseName
##    def _set(self, pCacheBaseName):
##        u'Name used for generating the CacheFileName. GUID is used if this is not specified.'
##    CacheBaseName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The unit of the request size is determined by request size type.'
##        #return pRequestSizeType
##    def _set(self, pRequestSizeType):
##        u'The unit of the request size is determined by request size type.'
##    RequestSizeType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The compression quality.'
##        #return Value
##    def _set(self, Value):
##        u'The compression quality.'
##    CompressionQuality = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The maximum number of cols allowed in the input raster for generating the cache.'
##        #return pCols
##    def _set(self, pCols):
##        u'The maximum number of cols allowed in the input raster for generating the cache.'
##    MaxAllowedInputCols = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The maximum number of rows allowed in the input raster for generating the cache.'
##        #return pRows
##    def _set(self, pRows):
##        u'The maximum number of rows allowed in the input raster for generating the cache.'
##    MaxAllowedInputRows = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The request size used for resampling the item cache.'
##        #return pRequestSize
##    def _set(self, pRequestSize):
##        u'The request size used for resampling the item cache.'
##    RequestSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The compression type.'
##        #return pType
##    def _set(self, pType):
##        u'The compression type.'
##    CompressionType = property(_get, _set, doc = _set.__doc__)
##

class RadarCalibrationFunction(CoClass):
    u'A class for a radiometric calibration function.'
    _reg_clsid_ = GUID('{8D9F5211-F745-45F8-94CF-205152875D87}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
RadarCalibrationFunction._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunction, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

IRasterGeometryProc3._methods_ = [
    COMMETHOD([helpstring(u'Flips the input raster.')], HRESULT, 'Flip',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' )),
    COMMETHOD([helpstring(u'Mirrors the input raster.')], HRESULT, 'Mirror',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' )),
    COMMETHOD([helpstring(u'Shifts the input raster by deltaX and deltaY map units.')], HRESULT, 'Shift',
              ( ['in'], c_double, 'deltaX' ),
              ( ['in'], c_double, 'deltaY' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' )),
    COMMETHOD([helpstring(u'Scales the input raster by the specified x and y scale factors.')], HRESULT, 'ReScale',
              ( ['in'], c_double, 'xScale' ),
              ( ['in'], c_double, 'yScale' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' )),
    COMMETHOD([helpstring(u'Rotates the input raster around the specified pivot by an angle specified in degrees.')], HRESULT, 'Rotate',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'ipPivotPoint' ),
              ( ['in'], c_double, 'rotateAngle' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' )),
    COMMETHOD([helpstring(u'Warps the input raster based upon the input control points using the transformation type specified.')], HRESULT, 'Warp',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPointCollection), 'sourceControlPoints' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPointCollection), 'targetControlPoints' ),
              ( ['in'], esriGeoTransTypeEnum, 'transformType' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' )),
    COMMETHOD([helpstring(u'Performs a Hermite transformation on the input raster based upon the 2 input control point pairs.')], HRESULT, 'TwoPointsAdjust',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPointCollection), 'sourceControlPoints' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPointCollection), 'targetControlPoints' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' )),
    COMMETHOD([helpstring(u'Transforms a set of points based upon the transformation being applied to the input raster.')], HRESULT, 'PointsTransform',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPointCollection), 'inPoints' ),
              ( ['in'], VARIANT_BOOL, 'isForward' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPointCollection)), 'outPoints' )),
    COMMETHOD([helpstring(u'Computes a least squares fit for the input control points.')], HRESULT, 'LeastSquareFit',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPointCollection), 'sourceControlPoints' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPointCollection), 'targetControlPoints' ),
              ( ['in'], esriGeoTransTypeEnum, 'transformType' ),
              ( ['in'], VARIANT_BOOL, 'forwardTransformation' ),
              ( ['in'], VARIANT_BOOL, 'returnTransformationCoef' ),
              ( ['retval', 'out'], POINTER(VARIANT), 'pVar' )),
    COMMETHOD([helpstring(u'Resets the input raster to its native coordinate space.')], HRESULT, 'Reset',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' )),
    COMMETHOD([helpstring(u'Persists the input raster to a new dataset of the specified format.')], HRESULT, 'Rectify',
              ( ['in'], BSTR, 'saveas_name' ),
              ( ['in'], BSTR, 'Format' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' )),
    COMMETHOD([helpstring(u'Outputs the current transformation properties to the dataset header or auxilliary file.')], HRESULT, 'Register',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' )),
    COMMETHOD([helpstring(u'Clips the input raster based on the specified envelope.')], HRESULT, 'Clip',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'pRectangle' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' )),
    COMMETHOD([helpstring(u'Projects the input raster using a single polynomial fit to compute the adjustment between coordinate systems.')], HRESULT, 'ProjectFast',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'pNewSR' ),
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.rstResamplingTypes, 'resampleType' ),
              ( ['in', 'optional'], POINTER(VARIANT), 'CellSize' ),
              ( ['in', 'optional'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' )),
    COMMETHOD(['restricted', helpstring(u'Projects the input raster using specified transformation type.')], HRESULT, 'Project',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'pNewSR' ),
              ( ['in'], esriRasterPrjMethodTypeEnum, 'PrjMethodType' ),
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.rstResamplingTypes, 'resampleType' ),
              ( ['in'], c_double, 'newCellsize' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' )),
    COMMETHOD([helpstring(u'Merges the input rasters into a single dataset.')], HRESULT, 'Merge',
              ( ['in'], BSTR, 'saveas_name' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspace), 'pWorkspace' ),
              ( ['in'], BSTR, 'outRasterFormat' ),
              ( ['in'], c_double, 'CellSize' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'pSR' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster)), 'ppOutRaster' )),
    COMMETHOD([helpstring(u'Mosaics the input rasters into a single dataset.')], HRESULT, 'Mosaic',
              ( ['in'], BSTR, 'saveas_name' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspace), 'pWorkspace' ),
              ( ['in'], BSTR, 'outRasterFormat' ),
              ( ['in'], c_double, 'CellSize' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'pSR' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster)), 'ppOutRaster' )),
    COMMETHOD([helpstring(u'Resamples the input raster to a new cellsize.')], HRESULT, 'Resample',
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.rstResamplingTypes, 'resampleType' ),
              ( ['in'], c_double, 'newCellsize' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the transformation of pixel to map is simple.')], HRESULT, 'IsPixelToMapTransSimple',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'isSimple' )),
    COMMETHOD([helpstring(u'Gets the number of transformations.')], HRESULT, 'GetRasterXFormCount',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' ),
              ( ['in'], c_int, 'band' ),
              ( ['retval', 'out'], POINTER(c_int), 'XFormCount' )),
    COMMETHOD([helpstring(u'Gets the polynomial order of the indexed transformation.')], HRESULT, 'GetRasterXFormOrderByIndex',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' ),
              ( ['in'], c_int, 'band' ),
              ( ['in'], c_int, 'index' ),
              ( ['retval', 'out'], POINTER(esriGeoTransTypeEnum), 'Order' )),
    COMMETHOD([helpstring(u'Gets the polynomial order and the polynomial coefficients of the indexed transformation.')], HRESULT, 'GetRasterXFormByIndex',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' ),
              ( ['in'], c_int, 'band' ),
              ( ['in'], VARIANT_BOOL, 'forward' ),
              ( ['in'], c_int, 'index' ),
              ( ['in', 'out'], POINTER(esriGeoTransTypeEnum), 'Order' ),
              ( ['in', 'out'], POINTER(VARIANT), 'pVar' )),
    COMMETHOD([helpstring(u'Sets a polynomial transformation to the Raster.')], HRESULT, 'PutRasterXForm',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' ),
              ( ['in'], VARIANT_BOOL, 'clean' ),
              ( ['in'], esriGeoTransTypeEnum, 'Order' ),
              ( ['in'], POINTER(VARIANT), 'pVar' )),
    COMMETHOD([helpstring(u'Performs the map to pixel transformation.')], HRESULT, 'PointsMap2PixelTransform',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPointCollection), 'pInPoints' ),
              ( ['in'], VARIANT_BOOL, 'isForward' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'pRaster' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPointCollection)), 'ppOutPoints' )),
]
################################################################
## code template for IRasterGeometryProc3 implementation
##class IRasterGeometryProc3_Impl(object):
##    def LeastSquareFit(self, sourceControlPoints, targetControlPoints, transformType, forwardTransformation, returnTransformationCoef):
##        u'Computes a least squares fit for the input control points.'
##        #return pVar
##
##    def ProjectFast(self, pNewSR, resampleType, CellSize, pRaster):
##        u'Projects the input raster using a single polynomial fit to compute the adjustment between coordinate systems.'
##        #return 
##
##    def GetRasterXFormCount(self, pRaster, band):
##        u'Gets the number of transformations.'
##        #return XFormCount
##
##    def Resample(self, resampleType, newCellsize, pRaster):
##        u'Resamples the input raster to a new cellsize.'
##        #return 
##
##    def Warp(self, sourceControlPoints, targetControlPoints, transformType, pRaster):
##        u'Warps the input raster based upon the input control points using the transformation type specified.'
##        #return 
##
##    def Mosaic(self, saveas_name, pWorkspace, outRasterFormat, CellSize, pSR, pRaster):
##        u'Mosaics the input rasters into a single dataset.'
##        #return ppOutRaster
##
##    def Reset(self, pRaster):
##        u'Resets the input raster to its native coordinate space.'
##        #return 
##
##    def Rotate(self, ipPivotPoint, rotateAngle, pRaster):
##        u'Rotates the input raster around the specified pivot by an angle specified in degrees.'
##        #return 
##
##    @property
##    def IsPixelToMapTransSimple(self, pRaster):
##        u'Indicates if the transformation of pixel to map is simple.'
##        #return isSimple
##
##    def ReScale(self, xScale, yScale, pRaster):
##        u'Scales the input raster by the specified x and y scale factors.'
##        #return 
##
##    def Shift(self, deltaX, deltaY, pRaster):
##        u'Shifts the input raster by deltaX and deltaY map units.'
##        #return 
##
##    def Register(self, pRaster):
##        u'Outputs the current transformation properties to the dataset header or auxilliary file.'
##        #return 
##
##    def Flip(self, pRaster):
##        u'Flips the input raster.'
##        #return 
##
##    def Project(self, pNewSR, PrjMethodType, resampleType, newCellsize, pRaster):
##        u'Projects the input raster using specified transformation type.'
##        #return 
##
##    def Merge(self, saveas_name, pWorkspace, outRasterFormat, CellSize, pSR, pRaster):
##        u'Merges the input rasters into a single dataset.'
##        #return ppOutRaster
##
##    def PointsTransform(self, inPoints, isForward, pRaster):
##        u'Transforms a set of points based upon the transformation being applied to the input raster.'
##        #return outPoints
##
##    def PointsMap2PixelTransform(self, pInPoints, isForward, pRaster):
##        u'Performs the map to pixel transformation.'
##        #return ppOutPoints
##
##    def PutRasterXForm(self, pRaster, clean, Order, pVar):
##        u'Sets a polynomial transformation to the Raster.'
##        #return 
##
##    def GetRasterXFormOrderByIndex(self, pRaster, band, index):
##        u'Gets the polynomial order of the indexed transformation.'
##        #return Order
##
##    def Clip(self, pRectangle, pRaster):
##        u'Clips the input raster based on the specified envelope.'
##        #return 
##
##    def Rectify(self, saveas_name, Format, pRaster):
##        u'Persists the input raster to a new dataset of the specified format.'
##        #return 
##
##    def Mirror(self, pRaster):
##        u'Mirrors the input raster.'
##        #return 
##
##    def GetRasterXFormByIndex(self, pRaster, band, forward, index):
##        u'Gets the polynomial order and the polynomial coefficients of the indexed transformation.'
##        #return Order, pVar
##
##    def TwoPointsAdjust(self, sourceControlPoints, targetControlPoints, pRaster):
##        u'Performs a Hermite transformation on the input raster based upon the 2 input control point pairs.'
##        #return 
##

class ColormapFunctionArguments(CoClass):
    u'A class for colormap raster function arguments.'
    _reg_clsid_ = GUID('{CAAF0682-8040-43D1-AE21-89F9684DF9B4}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
class IColormapFunctionArguments(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control colormap function arguments.'
    _iid_ = GUID('{1DFF6065-C6CC-4D45-9B06-D59E6CAA6797}')
    _idlflags_ = ['oleautomation']
ColormapFunctionArguments._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunctionArguments, IRasterFunctionArguments2, IColormapFunctionArguments, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

IOverviewBuilder._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The parameters object that control how overview items are created.')], HRESULT, 'OverviewParameters',
              ( ['in'], POINTER(IDefineOverviewsParameters), 'ppParameters' )),
    COMMETHOD(['propget', helpstring(u'The parameters object that control how overview items are created.')], HRESULT, 'OverviewParameters',
              ( ['retval', 'out'], POINTER(POINTER(IDefineOverviewsParameters)), 'ppParameters' )),
    COMMETHOD(['propputref', helpstring(u'The cell size levels associated with the overview tiling schema.')], HRESULT, 'CellSizeLevels',
              ( ['in'], POINTER(ICellSizeLevels), 'ppCellSizeLevels' )),
    COMMETHOD(['propget', helpstring(u'The cell size levels associated with the overview tiling schema.')], HRESULT, 'CellSizeLevels',
              ( ['retval', 'out'], POINTER(POINTER(ICellSizeLevels)), 'ppCellSizeLevels' )),
    COMMETHOD([helpstring(u'Generates the overview raster dataset associated with the specified overview item URI object.')], HRESULT, 'GenerateImage',
              ( ['in'], POINTER(IOverviewItemURI), 'pItemURI' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbAllParticipantsOK' )),
]
################################################################
## code template for IOverviewBuilder implementation
##class IOverviewBuilder_Impl(object):
##    @property
##    def CellSizeLevels(self, ppCellSizeLevels):
##        u'The cell size levels associated with the overview tiling schema.'
##        #return 
##
##    def GenerateImage(self, pItemURI):
##        u'Generates the overview raster dataset associated with the specified overview item URI object.'
##        #return pbAllParticipantsOK
##
##    @property
##    def OverviewParameters(self, ppParameters):
##        u'The parameters object that control how overview items are created.'
##        #return 
##

class ArithmeticFunction(CoClass):
    u'A class for an arithmetic raster function.'
    _reg_clsid_ = GUID('{04E0F604-76F5-4A7A-A1C4-57F54B9CC4AF}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
ArithmeticFunction._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunction, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class FormatList(CoClass):
    u'A collection of information about supported raster formats.'
    _reg_clsid_ = GUID('{53B7C0B9-41FB-4B00-B51A-FA5CC5B785FE}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
FormatList._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IFormatList, IFormatData, IFormatTest, IRasterFormatControl]

class IContrastTable(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a contrast table.'
    _iid_ = GUID('{7E7E6104-FA34-11D1-8D22-0000F8780535}')
    _idlflags_ = ['oleautomation']
IContrastTable._methods_ = [
    COMMETHOD(['propget', helpstring(u'Lookup table array of double precision floats.')], HRESULT, 'LUT',
              ( ['retval', 'out'], POINTER(VARIANT), 'pVal' )),
    COMMETHOD(['propput', helpstring(u'Lookup table array of double precision floats.')], HRESULT, 'LUT',
              ( ['in'], VARIANT, 'pVal' )),
    COMMETHOD([helpstring(u'Translates pixel values to table entries.')], HRESULT, 'TranslateValue',
              ( ['in'], c_double, 'pixval' ),
              ( ['retval', 'out'], POINTER(c_double), 'contrast' )),
    COMMETHOD([helpstring(u'Translates pixel values to integers.')], HRESULT, 'Bin',
              ( ['in'], c_double, 'pixval' ),
              ( ['retval', 'out'], POINTER(c_int), 'Bin' )),
]
################################################################
## code template for IContrastTable implementation
##class IContrastTable_Impl(object):
##    def Bin(self, pixval):
##        u'Translates pixel values to integers.'
##        #return Bin
##
##    def TranslateValue(self, pixval):
##        u'Translates pixel values to table entries.'
##        #return contrast
##
##    def _get(self):
##        u'Lookup table array of double precision floats.'
##        #return pVal
##    def _set(self, pVal):
##        u'Lookup table array of double precision floats.'
##    LUT = property(_get, _set, doc = _set.__doc__)
##

class IRasterPyramid2(IRasterPyramid):
    _case_insensitive_ = True
    u'Provides access to members that control the pyramids for a raster dataset.'
    _iid_ = GUID('{F4E73742-71C1-425E-B889-E4FAD1EA63D0}')
    _idlflags_ = ['oleautomation']
IRasterPyramid2._methods_ = [
    COMMETHOD(['propget', helpstring(u'The pyramid level.')], HRESULT, 'PyramidLevel',
              ( ['retval', 'out'], POINTER(c_int), 'Level' )),
    COMMETHOD(['propget', helpstring(u'The pyramid resampling method.')], HRESULT, 'PyramidResamplingMethod',
              ( ['retval', 'out'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.rstResamplingTypes), 'Method' )),
    COMMETHOD([helpstring(u'Builds pyramid for this RasterDataset.')], HRESULT, 'BuildPyramid',
              ( ['in'], c_int, 'maxLevel' ),
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.rstResamplingTypes, 'Method' )),
]
################################################################
## code template for IRasterPyramid2 implementation
##class IRasterPyramid2_Impl(object):
##    def BuildPyramid(self, maxLevel, Method):
##        u'Builds pyramid for this RasterDataset.'
##        #return 
##
##    @property
##    def PyramidLevel(self):
##        u'The pyramid level.'
##        #return Level
##
##    @property
##    def PyramidResamplingMethod(self):
##        u'The pyramid resampling method.'
##        #return Method
##

IRasterStatusEvent._methods_ = [
    COMMETHOD([helpstring(u'Starts the raster status/progress report for a given step and a maximum values.')], HRESULT, 'Start',
              ( ['in'], c_int, 'Step' ),
              ( ['in'], c_int, 'Max' )),
    COMMETHOD([helpstring(u'Reports status/progress at a given step.')], HRESULT, 'Step',
              ( ['in'], c_int, 'pos' )),
    COMMETHOD([helpstring(u'Stops the raster status/progress report.')], HRESULT, 'Stop'),
]
################################################################
## code template for IRasterStatusEvent implementation
##class IRasterStatusEvent_Impl(object):
##    def Start(self, Step, Max):
##        u'Starts the raster status/progress report for a given step and a maximum values.'
##        #return 
##
##    def Step(self, pos):
##        u'Reports status/progress at a given step.'
##        #return 
##
##    def Stop(self):
##        u'Stops the raster status/progress report.'
##        #return 
##

IItemPathsQuery2._methods_ = [
    COMMETHOD([helpstring(u'Parses the specified raster type and returns an array of paths.')], HRESULT, 'GetRasterTypePaths',
              ( ['in'], POINTER(IRasterType), 'pRasterType' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray)), 'ppRasterTypePaths' )),
]
################################################################
## code template for IItemPathsQuery2 implementation
##class IItemPathsQuery2_Impl(object):
##    def GetRasterTypePaths(self, pRasterType):
##        u'Parses the specified raster type and returns an array of paths.'
##        #return ppRasterTypePaths
##

class RasterClassNames(CoClass):
    u'A list of class (category) names.'
    _reg_clsid_ = GUID('{EBFE248E-1409-4DA9-B1B1-6434D0F47149}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
RasterClassNames._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterClassNames]

class RasterInfoFunctionArguments(CoClass):
    u'The raster info function arguments.'
    _reg_clsid_ = GUID('{877BD868-EE05-4493-B586-BB71681F0665}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
RasterInfoFunctionArguments._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunctionArguments, IRasterInfoFunctionArguments, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

IImageMatchPoint._methods_ = [
    COMMETHOD(['propget', helpstring(u'The From feature point.')], HRESULT, 'From',
              ( ['retval', 'out'], POINTER(POINTER(IImageFeaturePoint)), 'ppFrom' )),
    COMMETHOD(['propputref', helpstring(u'The From feature point.')], HRESULT, 'From',
              ( ['in'], POINTER(IImageFeaturePoint), 'ppFrom' )),
    COMMETHOD(['propget', helpstring(u'The To feature point.')], HRESULT, 'To',
              ( ['retval', 'out'], POINTER(POINTER(IImageFeaturePoint)), 'ppTo' )),
    COMMETHOD(['propputref', helpstring(u'The To feature point.')], HRESULT, 'To',
              ( ['in'], POINTER(IImageFeaturePoint), 'ppTo' )),
    COMMETHOD(['propget', helpstring(u'The match score value.')], HRESULT, 'Score',
              ( ['retval', 'out'], POINTER(c_double), 'pScore' )),
    COMMETHOD(['propput', helpstring(u'The match score value.')], HRESULT, 'Score',
              ( ['in'], c_double, 'pScore' )),
]
################################################################
## code template for IImageMatchPoint implementation
##class IImageMatchPoint_Impl(object):
##    def To(self, ppTo):
##        u'The To feature point.'
##        #return 
##
##    def _get(self):
##        u'The match score value.'
##        #return pScore
##    def _set(self, pScore):
##        u'The match score value.'
##    Score = property(_get, _set, doc = _set.__doc__)
##
##    def From(self, ppFrom):
##        u'The From feature point.'
##        #return 
##

class MosaicWorkspaceExtensionHelper(CoClass):
    u'A mosaic dataset workspace extension helper.'
    _reg_clsid_ = GUID('{3EF24768-21DF-4B44-8F25-B8A05EB867A5}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
MosaicWorkspaceExtensionHelper._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMosaicWorkspaceExtensionHelper]

IFormosat2Xform._methods_ = [
    COMMETHOD(['propget', helpstring(u'Columns in the image.')], HRESULT, 'Columns',
              ( ['retval', 'out'], POINTER(c_int), 'Columns' )),
    COMMETHOD(['propget', helpstring(u'Rows in the image.')], HRESULT, 'Rows',
              ( ['retval', 'out'], POINTER(c_int), 'Rows' )),
    COMMETHOD(['propget', helpstring(u'Sun azimuth.')], HRESULT, 'SunAzimuth',
              ( ['retval', 'out'], POINTER(c_double), 'SunAzimuth' )),
    COMMETHOD(['propget', helpstring(u'Sun elevation.')], HRESULT, 'SunElevation',
              ( ['retval', 'out'], POINTER(c_double), 'SunElevation' )),
    COMMETHOD(['propget', helpstring(u'Iteration count limit.')], HRESULT, 'MaxIterations',
              ( ['retval', 'out'], POINTER(c_int), 'MaxIterations' )),
    COMMETHOD(['propput', helpstring(u'Iteration count limit.')], HRESULT, 'MaxIterations',
              ( ['in'], c_int, 'MaxIterations' )),
    COMMETHOD(['propget', helpstring(u'Threshold for interpolation (pixels).')], HRESULT, 'InterpolationThreshold',
              ( ['retval', 'out'], POINTER(c_double), 'interpThreshold' )),
    COMMETHOD(['propput', helpstring(u'Threshold for interpolation (pixels).')], HRESULT, 'InterpolationThreshold',
              ( ['in'], c_double, 'interpThreshold' )),
    COMMETHOD(['propget', helpstring(u'The Formosat2 sensor model parameters.')], HRESULT, 'Parameters',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IVariantArray)), 'ppParameters' )),
]
################################################################
## code template for IFormosat2Xform implementation
##class IFormosat2Xform_Impl(object):
##    def _get(self):
##        u'Iteration count limit.'
##        #return MaxIterations
##    def _set(self, MaxIterations):
##        u'Iteration count limit.'
##    MaxIterations = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Parameters(self):
##        u'The Formosat2 sensor model parameters.'
##        #return ppParameters
##
##    @property
##    def SunAzimuth(self):
##        u'Sun azimuth.'
##        #return SunAzimuth
##
##    def _get(self):
##        u'Threshold for interpolation (pixels).'
##        #return interpThreshold
##    def _set(self, interpThreshold):
##        u'Threshold for interpolation (pixels).'
##    InterpolationThreshold = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Rows(self):
##        u'Rows in the image.'
##        #return Rows
##
##    @property
##    def SunElevation(self):
##        u'Sun elevation.'
##        #return SunElevation
##
##    @property
##    def Columns(self):
##        u'Columns in the image.'
##        #return Columns
##

class TrendFunctionArguments(CoClass):
    u'The Trend function arguments.'
    _reg_clsid_ = GUID('{954E5BB5-2892-49CB-9BF6-033F5A78705B}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
TrendFunctionArguments._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunctionArguments, ITrendFunctionArguments, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class PansharpeningFilter(CoClass):
    u'A class for pansharpening filter.'
    _reg_clsid_ = GUID('{B58B1271-E6FB-4B27-8417-2B8D62D654B0}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
PansharpeningFilter._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IPixelFilter, IPixelFilter2, IPixelFilter3, IPansharpeningFilter, IPansharpeningFilter2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersionSupportGEN, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

IRasterXformHelper._methods_ = [
    COMMETHOD([helpstring(u'Generic 3D transformation.')], HRESULT, 'Transform3D',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeodataXform), 'ipXf' ),
              ( ['in'], comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.esriTransformDirection, 'direction' ),
              ( ['in'], c_int, 'npts' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPointZ), 'pPoints' )),
    COMMETHOD([helpstring(u'Generic 3D transformation using point collection.')], HRESULT, 'Transform3DPoints',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeodataXform), 'ipXf' ),
              ( ['in'], comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.esriTransformDirection, 'direction' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPointCollection), 'pPoints' )),
]
################################################################
## code template for IRasterXformHelper implementation
##class IRasterXformHelper_Impl(object):
##    def Transform3DPoints(self, ipXf, direction, pPoints):
##        u'Generic 3D transformation using point collection.'
##        #return 
##
##    def Transform3D(self, ipXf, direction, npts, pPoints):
##        u'Generic 3D transformation.'
##        #return 
##

class IRasterPyramid3(IRasterPyramid2):
    _case_insensitive_ = True
    u'Provides access to members that control the pyramids for a raster dataset.'
    _iid_ = GUID('{31ED1FA3-3850-4CE2-9CE4-0D40701024D6}')
    _idlflags_ = ['oleautomation']
IRasterPyramid3._methods_ = [
    COMMETHOD([helpstring(u'Deletes pyramid for this RasterDataset.')], HRESULT, 'DeletePyramid'),
]
################################################################
## code template for IRasterPyramid3 implementation
##class IRasterPyramid3_Impl(object):
##    def DeletePyramid(self):
##        u'Deletes pyramid for this RasterDataset.'
##        #return 
##

class RasterCursor(CoClass):
    u'A raster cursor class.'
    _reg_clsid_ = GUID('{887501B1-42D0-45D5-8234-E220482803AD}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
RasterCursor._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterCursor]

class MosaicRastersFunctionArguments(CoClass):
    u'A class for mosaicrasters function arguments.'
    _reg_clsid_ = GUID('{94F10296-5868-4B2D-9596-E17BDD077E25}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
MosaicRastersFunctionArguments._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunctionArguments, IMosaicRastersFunctionArguments, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

ISPOT5Xform._methods_ = [
    COMMETHOD(['propget', helpstring(u'Columns in the image.')], HRESULT, 'Columns',
              ( ['retval', 'out'], POINTER(c_int), 'Columns' )),
    COMMETHOD(['propget', helpstring(u'Rows in the image.')], HRESULT, 'Rows',
              ( ['retval', 'out'], POINTER(c_int), 'Rows' )),
    COMMETHOD(['propget', helpstring(u'Sun azimuth.')], HRESULT, 'SunAzimuth',
              ( ['retval', 'out'], POINTER(c_double), 'SunAzimuth' )),
    COMMETHOD(['propget', helpstring(u'Sun elevation.')], HRESULT, 'SunElevation',
              ( ['retval', 'out'], POINTER(c_double), 'SunElevation' )),
    COMMETHOD(['propget', helpstring(u'Iteration count limit.')], HRESULT, 'MaxIterations',
              ( ['retval', 'out'], POINTER(c_int), 'MaxIterations' )),
    COMMETHOD(['propput', helpstring(u'Iteration count limit.')], HRESULT, 'MaxIterations',
              ( ['in'], c_int, 'MaxIterations' )),
    COMMETHOD(['propget', helpstring(u'Threshold for interpolation (pixels).')], HRESULT, 'InterpolationThreshold',
              ( ['retval', 'out'], POINTER(c_double), 'interpThreshold' )),
    COMMETHOD(['propput', helpstring(u'Threshold for interpolation (pixels).')], HRESULT, 'InterpolationThreshold',
              ( ['in'], c_double, 'interpThreshold' )),
    COMMETHOD(['propget', helpstring(u'The SPOT5 sensor parameters.')], HRESULT, 'Parameters',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IVariantArray)), 'ppParameters' )),
]
################################################################
## code template for ISPOT5Xform implementation
##class ISPOT5Xform_Impl(object):
##    def _get(self):
##        u'Iteration count limit.'
##        #return MaxIterations
##    def _set(self, MaxIterations):
##        u'Iteration count limit.'
##    MaxIterations = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Parameters(self):
##        u'The SPOT5 sensor parameters.'
##        #return ppParameters
##
##    @property
##    def SunAzimuth(self):
##        u'Sun azimuth.'
##        #return SunAzimuth
##
##    def _get(self):
##        u'Threshold for interpolation (pixels).'
##        #return interpThreshold
##    def _set(self, interpThreshold):
##        u'Threshold for interpolation (pixels).'
##    InterpolationThreshold = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Rows(self):
##        u'Rows in the image.'
##        #return Rows
##
##    @property
##    def SunElevation(self):
##        u'Sun elevation.'
##        #return SunElevation
##
##    @property
##    def Columns(self):
##        u'Columns in the image.'
##        #return Columns
##

IStatsHistogram._methods_ = [
    COMMETHOD(['propget', helpstring(u'The minimum value of the historgram.')], HRESULT, 'Min',
              ( ['retval', 'out'], POINTER(c_double), 'Min' )),
    COMMETHOD(['propput', helpstring(u'The minimum value of the historgram.')], HRESULT, 'Min',
              ( ['in'], c_double, 'Min' )),
    COMMETHOD(['propget', helpstring(u'The maximum value of the historgram.')], HRESULT, 'Max',
              ( ['retval', 'out'], POINTER(c_double), 'Max' )),
    COMMETHOD(['propput', helpstring(u'The maximum value of the historgram.')], HRESULT, 'Max',
              ( ['in'], c_double, 'Max' )),
    COMMETHOD(['propget', helpstring(u'The mean value of the historgram.')], HRESULT, 'Mean',
              ( ['retval', 'out'], POINTER(c_double), 'Mean' )),
    COMMETHOD(['propput', helpstring(u'The mean value of the historgram.')], HRESULT, 'Mean',
              ( ['in'], c_double, 'Mean' )),
    COMMETHOD(['propget', helpstring(u'The standard deviation value of the historgram.')], HRESULT, 'StdDev',
              ( ['retval', 'out'], POINTER(c_double), 'StdDev' )),
    COMMETHOD(['propput', helpstring(u'The standard deviation value of the historgram.')], HRESULT, 'StdDev',
              ( ['in'], c_double, 'StdDev' )),
    COMMETHOD([helpstring(u'Sets histogram min and max range.')], HRESULT, 'PutHistogramMinmax',
              ( ['in'], c_double, 'Min' ),
              ( ['in'], c_double, 'Max' )),
    COMMETHOD([helpstring(u'Gets histogram min and max range.')], HRESULT, 'QueryHistogramMinmax',
              ( ['out'], POINTER(c_double), 'Min' ),
              ( ['out'], POINTER(c_double), 'Max' )),
    COMMETHOD(['propget', helpstring(u'The histogram values of the statistics.')], HRESULT, 'Histogram',
              ( ['retval', 'out'], POINTER(VARIANT), 'Histogram' )),
    COMMETHOD(['propput', helpstring(u'The histogram values of the statistics.')], HRESULT, 'Histogram',
              ( ['in'], VARIANT, 'Histogram' )),
    COMMETHOD([helpstring(u'Computes stats and histogram from a given Raster.')], HRESULT, 'PutStats',
              ( ['in'], c_double, 'Min' ),
              ( ['in'], c_double, 'Max' ),
              ( ['in'], c_double, 'Mean' ),
              ( ['in'], c_double, 'StdDev' )),
    COMMETHOD([helpstring(u'Computes stats and histogram from a given Raster.')], HRESULT, 'QueryStats',
              ( ['out'], POINTER(c_double), 'Min' ),
              ( ['out'], POINTER(c_double), 'Max' ),
              ( ['out'], POINTER(c_double), 'Mean' ),
              ( ['out'], POINTER(c_double), 'StdDev' )),
    COMMETHOD([helpstring(u'Empties this RasterStatsHistogram and marks it invalid.')], HRESULT, 'Empty'),
    COMMETHOD([helpstring(u'Checks if this StatsHistogram has stats.')], HRESULT, 'HasStats',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'b' )),
    COMMETHOD([helpstring(u'Checks if this StatsHistogram has histogram.')], HRESULT, 'HasHistogram',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'b' )),
    COMMETHOD([helpstring(u'Accumulates a value and its count.')], HRESULT, 'Accumulate',
              ( ['in'], c_double, 'Value' ),
              ( ['in'], c_int, 'Count' )),
    COMMETHOD([helpstring(u'Updates the histogram after accumulation.')], HRESULT, 'Update'),
]
################################################################
## code template for IStatsHistogram implementation
##class IStatsHistogram_Impl(object):
##    def QueryHistogramMinmax(self):
##        u'Gets histogram min and max range.'
##        #return Min, Max
##
##    def HasStats(self):
##        u'Checks if this StatsHistogram has stats.'
##        #return b
##
##    def HasHistogram(self):
##        u'Checks if this StatsHistogram has histogram.'
##        #return b
##
##    def PutHistogramMinmax(self, Min, Max):
##        u'Sets histogram min and max range.'
##        #return 
##
##    def PutStats(self, Min, Max, Mean, StdDev):
##        u'Computes stats and histogram from a given Raster.'
##        #return 
##
##    def _get(self):
##        u'The maximum value of the historgram.'
##        #return Max
##    def _set(self, Max):
##        u'The maximum value of the historgram.'
##    Max = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The minimum value of the historgram.'
##        #return Min
##    def _set(self, Min):
##        u'The minimum value of the historgram.'
##    Min = property(_get, _set, doc = _set.__doc__)
##
##    def Update(self):
##        u'Updates the histogram after accumulation.'
##        #return 
##
##    def _get(self):
##        u'The histogram values of the statistics.'
##        #return Histogram
##    def _set(self, Histogram):
##        u'The histogram values of the statistics.'
##    Histogram = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The standard deviation value of the historgram.'
##        #return StdDev
##    def _set(self, StdDev):
##        u'The standard deviation value of the historgram.'
##    StdDev = property(_get, _set, doc = _set.__doc__)
##
##    def Accumulate(self, Value, Count):
##        u'Accumulates a value and its count.'
##        #return 
##
##    def QueryStats(self):
##        u'Computes stats and histogram from a given Raster.'
##        #return Min, Max, Mean, StdDev
##
##    def Empty(self):
##        u'Empties this RasterStatsHistogram and marks it invalid.'
##        #return 
##
##    def _get(self):
##        u'The mean value of the historgram.'
##        #return Mean
##    def _set(self, Mean):
##        u'The mean value of the historgram.'
##    Mean = property(_get, _set, doc = _set.__doc__)
##

IStatsHistogram2._methods_ = [
    COMMETHOD(['propget', helpstring(u'The total pixel count.')], HRESULT, 'PixelCount',
              ( ['retval', 'out'], POINTER(c_double), 'pNumPixels' )),
]
################################################################
## code template for IStatsHistogram2 implementation
##class IStatsHistogram2_Impl(object):
##    @property
##    def PixelCount(self):
##        u'The total pixel count.'
##        #return pNumPixels
##

IStatsHistogram3._methods_ = [
    COMMETHOD([helpstring(u'Sets histogram size, min and max range.')], HRESULT, 'PutHistogramInfo',
              ( ['in'], c_int, 'Size' ),
              ( ['in'], c_double, 'resolution' ),
              ( ['in'], c_double, 'Min' ),
              ( ['in'], c_double, 'Max' )),
    COMMETHOD([helpstring(u'Gets histogram size, min and max range.')], HRESULT, 'QueryHistogramInfo',
              ( ['out'], POINTER(c_int), 'Size' ),
              ( ['out'], POINTER(c_double), 'resolution' ),
              ( ['out'], POINTER(c_double), 'Min' ),
              ( ['out'], POINTER(c_double), 'Max' )),
    COMMETHOD(['propget', helpstring(u'The raster statistics.')], HRESULT, 'RasterStatistics',
              ( ['retval', 'out'], POINTER(POINTER(IRasterStatistics)), 'ppStatistics' )),
    COMMETHOD(['propget', helpstring(u'The raster histogram.')], HRESULT, 'RasterHistogram',
              ( ['retval', 'out'], POINTER(POINTER(IRasterHistogram)), 'ppHistogram' )),
    COMMETHOD([helpstring(u'Resizes covariance array to nBands, init all elements to 0.')], HRESULT, 'InitCovariances',
              ( ['in'], c_int, 'nBands' )),
    COMMETHOD([helpstring(u'Accumulates covariance array, numValidPixel.')], HRESULT, 'AccumulateCovariance',
              ( ['in'], c_int, 'iBand' ),
              ( ['in'], c_double, 'numValidPixel' ),
              ( ['in'], c_double, 'xy' ),
              ( ['in'], c_double, 'x' ),
              ( ['in'], c_double, 'y' )),
    COMMETHOD([helpstring(u'Final update after accumulate is finished.')], HRESULT, 'UpdateCovariances'),
    COMMETHOD(['propget', helpstring(u'Array of doubles, the covariances with the n bands of the raster.')], HRESULT, 'Covariances',
              ( ['retval', 'out'], POINTER(VARIANT), 'pVal' )),
    COMMETHOD(['propput', helpstring(u'Array of doubles, the covariances with the n bands of the raster.')], HRESULT, 'Covariances',
              ( ['in'], VARIANT, 'pVal' )),
]
################################################################
## code template for IStatsHistogram3 implementation
##class IStatsHistogram3_Impl(object):
##    def UpdateCovariances(self):
##        u'Final update after accumulate is finished.'
##        #return 
##
##    def QueryHistogramInfo(self):
##        u'Gets histogram size, min and max range.'
##        #return Size, resolution, Min, Max
##
##    def _get(self):
##        u'Array of doubles, the covariances with the n bands of the raster.'
##        #return pVal
##    def _set(self, pVal):
##        u'Array of doubles, the covariances with the n bands of the raster.'
##    Covariances = property(_get, _set, doc = _set.__doc__)
##
##    def InitCovariances(self, nBands):
##        u'Resizes covariance array to nBands, init all elements to 0.'
##        #return 
##
##    @property
##    def RasterHistogram(self):
##        u'The raster histogram.'
##        #return ppHistogram
##
##    def AccumulateCovariance(self, iBand, numValidPixel, xy, x, y):
##        u'Accumulates covariance array, numValidPixel.'
##        #return 
##
##    def PutHistogramInfo(self, Size, resolution, Min, Max):
##        u'Sets histogram size, min and max range.'
##        #return 
##
##    @property
##    def RasterStatistics(self):
##        u'The raster statistics.'
##        #return ppStatistics
##

class BuildBoundaryParameters(CoClass):
    u'An object that controls how the boundary of a mosaic dataset is computed.'
    _reg_clsid_ = GUID('{D54B5641-8ABD-4F43-ACF4-5278AFB1D79D}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
BuildBoundaryParameters._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IMosaicDatasetOperationParameters, IBuildBoundaryParameters, IBuildBoundaryParameters2, IRemoveSliversParameters, IRemoveSliversParameters2, ISelectionParameters, IThreadedOperationParameters]

IEnumRasterBand._methods_ = [
    COMMETHOD([helpstring(u'Retrieves the next raster band in the enumeration sequence.')], HRESULT, 'Next',
              ( ['retval', 'out'], POINTER(POINTER(IRasterBand)), 'ppBand' )),
    COMMETHOD([helpstring(u'Resets the enumeration sequence to the beginning.')], HRESULT, 'Reset'),
]
################################################################
## code template for IEnumRasterBand implementation
##class IEnumRasterBand_Impl(object):
##    def Reset(self):
##        u'Resets the enumeration sequence to the beginning.'
##        #return 
##
##    def Next(self):
##        u'Retrieves the next raster band in the enumeration sequence.'
##        #return ppBand
##

IRasterCatalogTable._methods_ = [
    COMMETHOD(['propget', helpstring(u'The table object underlying the raster catalog table.')], HRESULT, 'Table',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable)), 'ppTable' )),
    COMMETHOD(['propputref', helpstring(u'The table object underlying the raster catalog table.')], HRESULT, 'Table',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable), 'ppTable' )),
    COMMETHOD([helpstring(u'Updates the object after the table is changed.')], HRESULT, 'Update'),
    COMMETHOD(['propget', helpstring(u'Number of rasters in the raster catalog.')], HRESULT, 'Size',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propget', helpstring(u'Extent of the ith raster in the catalog.')], HRESULT, 'RasterExtent',
              ( ['in'], c_int, 'idx' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'ppExtent' )),
    COMMETHOD(['propget', helpstring(u'Name of the ith raster in the raster catalog.')], HRESULT, 'RasterName',
              ( ['in'], c_int, 'idx' ),
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propget', helpstring(u'Reference to the ith raster dataset in the raster catalog.')], HRESULT, 'RasterDataset',
              ( ['in'], c_int, 'idx' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterDataset)), 'ppRasterDataset' )),
    COMMETHOD(['propget', helpstring(u'Location of the field name of the raster catalog.')], HRESULT, 'FieldNameLocation',
              ( ['retval', 'out'], POINTER(c_int), 'pLocName' )),
    COMMETHOD(['propget', helpstring(u'Bounds of the field location of the raster catalog.')], HRESULT, 'FieldBoundsLocation',
              ( ['out'], POINTER(c_int), 'pLocXmin' ),
              ( ['out'], POINTER(c_int), 'pLocYmin' ),
              ( ['out'], POINTER(c_int), 'pLocXmax' ),
              ( ['out'], POINTER(c_int), 'pLocYMax' )),
    COMMETHOD(['propput', helpstring(u'A SQL expression limiting the list of rasters currently viewed.')], HRESULT, 'WhereClause',
              ( ['in'], BSTR, 'WhereClause' )),
    COMMETHOD(['propget', helpstring(u'A SQL expression limiting the list of rasters currently viewed.')], HRESULT, 'WhereClause',
              ( ['retval', 'out'], POINTER(BSTR), 'WhereClause' )),
    COMMETHOD(['propget', helpstring(u'OID of the ith raster in the raster catalog.')], HRESULT, 'OID',
              ( ['in'], c_int, 'idx' ),
              ( ['retval', 'out'], POINTER(c_int), 'OID' )),
]
################################################################
## code template for IRasterCatalogTable implementation
##class IRasterCatalogTable_Impl(object):
##    @property
##    def FieldNameLocation(self):
##        u'Location of the field name of the raster catalog.'
##        #return pLocName
##
##    @property
##    def FieldBoundsLocation(self):
##        u'Bounds of the field location of the raster catalog.'
##        #return pLocXmin, pLocYmin, pLocXmax, pLocYMax
##
##    @property
##    def OID(self, idx):
##        u'OID of the ith raster in the raster catalog.'
##        #return OID
##
##    def Update(self):
##        u'Updates the object after the table is changed.'
##        #return 
##
##    def _get(self):
##        u'A SQL expression limiting the list of rasters currently viewed.'
##        #return WhereClause
##    def _set(self, WhereClause):
##        u'A SQL expression limiting the list of rasters currently viewed.'
##    WhereClause = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def RasterName(self, idx):
##        u'Name of the ith raster in the raster catalog.'
##        #return Name
##
##    def Table(self, ppTable):
##        u'The table object underlying the raster catalog table.'
##        #return 
##
##    @property
##    def Size(self):
##        u'Number of rasters in the raster catalog.'
##        #return pCount
##
##    @property
##    def RasterDataset(self, idx):
##        u'Reference to the ith raster dataset in the raster catalog.'
##        #return ppRasterDataset
##
##    @property
##    def RasterExtent(self, idx):
##        u'Extent of the ith raster in the catalog.'
##        #return ppExtent
##

IRasterHistograms._methods_ = [
    COMMETHOD(['propget', helpstring(u'The raster histogram count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propget', helpstring(u'The raster histogram at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'index' ),
              ( ['retval', 'out'], POINTER(POINTER(IRasterHistogram)), 'pHistogram' )),
    COMMETHOD([helpstring(u'Removes the raster histogram at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'index' )),
    COMMETHOD([helpstring(u'Removes all raster histograms.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Adds a raster histogram.')], HRESULT, 'Add',
              ( ['in'], POINTER(IRasterHistogram), 'pHistogram' )),
    COMMETHOD([helpstring(u'Adds a raster histogram at the specified position.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'index' ),
              ( ['in'], POINTER(IRasterHistogram), 'pHistogram' )),
]
################################################################
## code template for IRasterHistograms implementation
##class IRasterHistograms_Impl(object):
##    @property
##    def Count(self):
##        u'The raster histogram count.'
##        #return pCount
##
##    def Insert(self, index, pHistogram):
##        u'Adds a raster histogram at the specified position.'
##        #return 
##
##    def Remove(self, index):
##        u'Removes the raster histogram at the specified position.'
##        #return 
##
##    @property
##    def Element(self, index):
##        u'The raster histogram at the specified position.'
##        #return pHistogram
##
##    def RemoveAll(self):
##        u'Removes all raster histograms.'
##        #return 
##
##    def Add(self, pHistogram):
##        u'Adds a raster histogram.'
##        #return 
##

IPolynomialXform._methods_ = [
    COMMETHOD([helpstring(u'Defines a polynomial (order: 1-3) XForm from control points.')], HRESULT, 'DefineFromControlPoints',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPointCollection), 'pSrcPoints' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPointCollection), 'pTarPoints' ),
              ( ['in'], c_int, 'Order' )),
    COMMETHOD([helpstring(u'Defines a polynomial XForm from polynomial (order: 1-3) coefficients .')], HRESULT, 'DefineFromCoefficients',
              ( ['in'], POINTER(VARIANT), 'pForwardPolyCoef' ),
              ( ['in'], POINTER(VARIANT), 'pReversePolyCoef' ),
              ( ['in'], c_int, 'Order' )),
    COMMETHOD([helpstring(u'Gets control points used in defining the polynomial. ')], HRESULT, 'GetControlPoints',
              ( ['out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPointCollection)), 'ppSrcPoints' ),
              ( ['out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPointCollection)), 'ppTarPoints' )),
    COMMETHOD(['propget', helpstring(u'The polynomial order (1-3).')], HRESULT, 'Order',
              ( ['retval', 'out'], POINTER(c_int), 'Order' )),
    COMMETHOD([helpstring(u'Gets the coefficients of the polynomial.')], HRESULT, 'GetCoefficients',
              ( ['in'], comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.esriTransformDirection, 'direction' ),
              ( ['retval', 'out'], POINTER(VARIANT), 'pPolyCoef' )),
    COMMETHOD([helpstring(u'Gets the system residuals.')], HRESULT, 'GetSystemResidual',
              ( ['in'], comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.esriTransformDirection, 'direction' ),
              ( ['retval', 'out'], POINTER(VARIANT), 'pResidual' )),
    COMMETHOD([helpstring(u'Gets the system RMS.')], HRESULT, 'GetSystemRMS',
              ( ['in'], comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.esriTransformDirection, 'direction' ),
              ( ['retval', 'out'], POINTER(c_double), 'rms' )),
    COMMETHOD([helpstring(u'Gets the residuals and RMS using checking points.')], HRESULT, 'CheckResidualRMS',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPointCollection), 'CheckingsSurcePoints' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPointCollection), 'CheckingsTargetPoints' ),
              ( ['in'], comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.esriTransformDirection, 'direction' ),
              ( ['out'], POINTER(VARIANT), 'pResidual' ),
              ( ['out'], POINTER(c_double), 'rms' )),
    COMMETHOD([helpstring(u'Applies a rotation to the polynomial.')], HRESULT, 'ApplyRotation',
              ( ['in'], comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.esriTransformDirection, 'direction' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'pPivotPoint' ),
              ( ['in'], c_double, 'degree' )),
    COMMETHOD([helpstring(u'Applies a shift to the polynomial.')], HRESULT, 'ApplyShift',
              ( ['in'], comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.esriTransformDirection, 'direction' ),
              ( ['in'], c_double, 'shiftX' ),
              ( ['in'], c_double, 'shiftY' )),
    COMMETHOD([helpstring(u'Applies a scale to the polynomial.')], HRESULT, 'ApplyScale',
              ( ['in'], comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.esriTransformDirection, 'direction' ),
              ( ['in'], c_double, 'scaleX' ),
              ( ['in'], c_double, 'scaleY' )),
]
################################################################
## code template for IPolynomialXform implementation
##class IPolynomialXform_Impl(object):
##    def ApplyScale(self, direction, scaleX, scaleY):
##        u'Applies a scale to the polynomial.'
##        #return 
##
##    def CheckResidualRMS(self, CheckingsSurcePoints, CheckingsTargetPoints, direction):
##        u'Gets the residuals and RMS using checking points.'
##        #return pResidual, rms
##
##    def GetSystemRMS(self, direction):
##        u'Gets the system RMS.'
##        #return rms
##
##    def ApplyShift(self, direction, shiftX, shiftY):
##        u'Applies a shift to the polynomial.'
##        #return 
##
##    def GetCoefficients(self, direction):
##        u'Gets the coefficients of the polynomial.'
##        #return pPolyCoef
##
##    def GetSystemResidual(self, direction):
##        u'Gets the system residuals.'
##        #return pResidual
##
##    def DefineFromCoefficients(self, pForwardPolyCoef, pReversePolyCoef, Order):
##        u'Defines a polynomial XForm from polynomial (order: 1-3) coefficients .'
##        #return 
##
##    def DefineFromControlPoints(self, pSrcPoints, pTarPoints, Order):
##        u'Defines a polynomial (order: 1-3) XForm from control points.'
##        #return 
##
##    def ApplyRotation(self, direction, pPivotPoint, degree):
##        u'Applies a rotation to the polynomial.'
##        #return 
##
##    @property
##    def Order(self):
##        u'The polynomial order (1-3).'
##        #return Order
##
##    def GetControlPoints(self):
##        u'Gets control points used in defining the polynomial. '
##        #return ppSrcPoints, ppTarPoints
##

IRasterBuilder2._methods_ = [
    COMMETHOD([helpstring(u'Indicates whether the raster builder recognizes the specified data source and is possibly capable of building a valid function raster dataset from it.')], HRESULT, 'CanBuild',
              ( ['in'], VARIANT, 'vtDataSource' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbCanBuild' )),
    COMMETHOD([helpstring(u'Validates the raster builder.')], HRESULT, 'Validate'),
    COMMETHOD(['propget', helpstring(u'Indicates whether the raster builder is capable of building composite crawled items.')], HRESULT, 'CanMergeItems',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbCanMergeItems' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the raster builder constructs a multi-part URI given a composite crawled item.')], HRESULT, 'MergeItems',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbMergeItems' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the raster builder constructs a multi-part URI given a composite crawled item.')], HRESULT, 'MergeItems',
              ( ['in'], VARIANT_BOOL, 'pbMergeItems' )),
]
################################################################
## code template for IRasterBuilder2 implementation
##class IRasterBuilder2_Impl(object):
##    def Validate(self):
##        u'Validates the raster builder.'
##        #return 
##
##    def _get(self):
##        u'Indicates whether the raster builder constructs a multi-part URI given a composite crawled item.'
##        #return pbMergeItems
##    def _set(self, pbMergeItems):
##        u'Indicates whether the raster builder constructs a multi-part URI given a composite crawled item.'
##    MergeItems = property(_get, _set, doc = _set.__doc__)
##
##    def CanBuild(self, vtDataSource):
##        u'Indicates whether the raster builder recognizes the specified data source and is possibly capable of building a valid function raster dataset from it.'
##        #return pbCanBuild
##
##    @property
##    def CanMergeItems(self):
##        u'Indicates whether the raster builder is capable of building composite crawled items.'
##        #return pbCanMergeItems
##

class DrLoader(CoClass):
    u'A distributed raster catalog loader.'
    _reg_clsid_ = GUID('{70AB899A-AF22-4230-B14F-127D8AECB833}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
DrLoader._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDrLoader]

class RasterPicture(CoClass):
    u'A lightweight object for displaying some raster formats in a simple manner.'
    _reg_clsid_ = GUID('{8F7F5481-D5DE-11D3-A414-0004AC1B1D86}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
RasterPicture._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IRasterPicture]

IApplanixBuilder._methods_ = [
    COMMETHOD(['propput', helpstring(u'Input image location.')], HRESULT, 'ImageFolder',
              ( ['in'], BSTR, 'pImageFolder' )),
    COMMETHOD(['propget', helpstring(u'Input image location.')], HRESULT, 'ImageFolder',
              ( ['retval', 'out'], POINTER(BSTR), 'pImageFolder' )),
]
################################################################
## code template for IApplanixBuilder implementation
##class IApplanixBuilder_Impl(object):
##    def _get(self):
##        u'Input image location.'
##        #return pImageFolder
##    def _set(self, pImageFolder):
##        u'Input image location.'
##    ImageFolder = property(_get, _set, doc = _set.__doc__)
##

IRasterTable._methods_ = [
    COMMETHOD(['propget', helpstring(u'The class names of the table.')], HRESULT, 'TableType',
              ( ['retval', 'out'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriRasterTableTypeEnum), 'Type' )),
    COMMETHOD(['propget', helpstring(u'The primary field of the table.')], HRESULT, 'PrimaryField',
              ( ['retval', 'out'], POINTER(c_int), 'fieldIndex' )),
    COMMETHOD(['propput', helpstring(u'The primary field of the table.')], HRESULT, 'PrimaryField',
              ( ['in'], c_int, 'fieldIndex' )),
]
################################################################
## code template for IRasterTable implementation
##class IRasterTable_Impl(object):
##    def _get(self):
##        u'The primary field of the table.'
##        #return fieldIndex
##    def _set(self, fieldIndex):
##        u'The primary field of the table.'
##    PrimaryField = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def TableType(self):
##        u'The class names of the table.'
##        #return Type
##

class SdeRasterCatalogTable(CoClass):
    u'A class for managing 8.x ArcSDE RasterCatalogs.'
    _reg_clsid_ = GUID('{28EEFDC0-074B-11D4-8D75-00C04F5B87B2}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
SdeRasterCatalogTable._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterCatalogTable, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeoDataset]

class TableFunctionArguments(CoClass):
    u'A class for table raster function arguments.'
    _reg_clsid_ = GUID('{4C912271-D13A-43BF-ADDE-722902DE115F}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
TableFunctionArguments._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunctionArguments, ITableFunctionArguments, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class PolygonMeasurement(CoClass):
    u'Implements interface IPolygonMeasurement (polygon measurement and its associated uncertainty information).'
    _reg_clsid_ = GUID('{4CCFA921-00DC-4846-A052-DD369A40CBFE}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
PolygonMeasurement._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IPolygonMeasurement]

IUniqueMutliStringValues._methods_ = [
    COMMETHOD([], HRESULT, 'Add',
              ( ['in'], VARIANT, 'stringArray' ),
              ( ['in'], c_int, 'Count' ),
              ( ['retval', 'out'], POINTER(c_int), 'index' )),
    COMMETHOD([], HRESULT, 'Delete',
              ( ['in'], VARIANT, 'stringArray' )),
]
################################################################
## code template for IUniqueMutliStringValues implementation
##class IUniqueMutliStringValues_Impl(object):
##    def Add(self, stringArray, Count):
##        '-no docstring-'
##        #return index
##
##    def Delete(self, stringArray):
##        '-no docstring-'
##        #return 
##

class IRawPixelReader(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a raw pixel reader.'
    _iid_ = GUID('{9D134E41-8F12-4AC6-BC02-D31676047631}')
    _idlflags_ = ['oleautomation']
IRawPixelReader._methods_ = [
    COMMETHOD([helpstring(u'Reads a pixel block.')], HRESULT, 'Read',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IPnt), 'tlc' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IPixelBlock), 'pPixelBlock' )),
]
################################################################
## code template for IRawPixelReader implementation
##class IRawPixelReader_Impl(object):
##    def Read(self, tlc, pPixelBlock):
##        u'Reads a pixel block.'
##        #return 
##

IDataSourceCrawler._methods_ = [
    COMMETHOD(['propget', helpstring(u'The type of the data source item returned by this crawler.')], HRESULT, 'CrawlerItemType',
              ( ['retval', 'out'], POINTER(esriCrawlerDataSourceType), 'pCrawlerItemType' )),
    COMMETHOD([helpstring(u'Traverses a data store and returns a enumeration of crawled data source items.')], HRESULT, 'Crawl',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IEnumVariantSimple)), 'ppCrawlerItems' )),
    COMMETHOD(['propget', helpstring(u"Indicates whether the data source crawler can filter items by time using the 'TimeExtent' property.")], HRESULT, 'CanFilterByTime',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbCanFilterByTime' )),
    COMMETHOD(['propputref', helpstring(u"The range of allowed time value associated with crawled data source items. Items with time stamps that don't lie within the specified range are filtered out. This value is used only if the crawler can filter by time as indicated by the 'CanFilterByTime' proper?!?\x08?&")], HRESULT, 'TimeExtent',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITimeExtent), 'ppTimeExtent' )),
    COMMETHOD(['propget', helpstring(u"The range of allowed time value associated with crawled data source items. Items with time stamps that don't lie within the specified range are filtered out. This value is used only if the crawler can filter by time as indicated by the 'CanFilterByTime' proper?!?\x08?&")], HRESULT, 'TimeExtent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITimeExtent)), 'ppTimeExtent' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the data source crawler can filter items by a string expression like a wild-card filter or SQL Where Clause.')], HRESULT, 'CanFilterByExpression',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbCanFilterByExpression' )),
    COMMETHOD(['propput', helpstring(u'A string expression that allows the data source crawler to filter out invalid items.')], HRESULT, 'Filter',
              ( ['in'], BSTR, 'pFilter' )),
    COMMETHOD(['propget', helpstring(u'A string expression that allows the data source crawler to filter out invalid items.')], HRESULT, 'Filter',
              ( ['retval', 'out'], POINTER(BSTR), 'pFilter' )),
]
################################################################
## code template for IDataSourceCrawler implementation
##class IDataSourceCrawler_Impl(object):
##    def _get(self):
##        u'A string expression that allows the data source crawler to filter out invalid items.'
##        #return pFilter
##    def _set(self, pFilter):
##        u'A string expression that allows the data source crawler to filter out invalid items.'
##    Filter = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def TimeExtent(self, ppTimeExtent):
##        u"The range of allowed time value associated with crawled data source items. Items with time stamps that don't lie within the specified range are filtered out. This value is used only if the crawler can filter by time as indicated by the 'CanFilterByTime' proper?!?\x08?&"
##        #return 
##
##    @property
##    def CanFilterByExpression(self):
##        u'Indicates whether the data source crawler can filter items by a string expression like a wild-card filter or SQL Where Clause.'
##        #return pbCanFilterByExpression
##
##    @property
##    def CrawlerItemType(self):
##        u'The type of the data source item returned by this crawler.'
##        #return pCrawlerItemType
##
##    def Crawl(self, pTrackCancel):
##        u'Traverses a data store and returns a enumeration of crawled data source items.'
##        #return ppCrawlerItems
##
##    @property
##    def CanFilterByTime(self):
##        u"Indicates whether the data source crawler can filter items by time using the 'TimeExtent' property."
##        #return pbCanFilterByTime
##

ISimplePixelResampler._methods_ = [
    COMMETHOD(['propget', helpstring(u'The resampling method.')], HRESULT, 'ResamplingMethod',
              ( ['retval', 'out'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.rstResamplingTypes), 'pMethod' )),
    COMMETHOD(['propput', helpstring(u'The resampling method.')], HRESULT, 'ResamplingMethod',
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.rstResamplingTypes, 'pMethod' )),
    COMMETHOD(['propget', helpstring(u'The cubic convolution parameter (-1, -0.75, -0.5).')], HRESULT, 'CubicConvolutionParameter',
              ( ['retval', 'out'], POINTER(c_double), 'a' )),
    COMMETHOD(['propput', helpstring(u'The cubic convolution parameter (-1, -0.75, -0.5).')], HRESULT, 'CubicConvolutionParameter',
              ( ['in'], c_double, 'a' )),
    COMMETHOD(['propput', helpstring(u'The majority resampling window size in pixels.')], HRESULT, 'MajorityWindowSize',
              ( ['in'], c_int, 'rhs' )),
]
################################################################
## code template for ISimplePixelResampler implementation
##class ISimplePixelResampler_Impl(object):
##    def _set(self, rhs):
##        u'The majority resampling window size in pixels.'
##    MajorityWindowSize = property(fset = _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The cubic convolution parameter (-1, -0.75, -0.5).'
##        #return a
##    def _set(self, a):
##        u'The cubic convolution parameter (-1, -0.75, -0.5).'
##    CubicConvolutionParameter = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The resampling method.'
##        #return pMethod
##    def _set(self, pMethod):
##        u'The resampling method.'
##    ResamplingMethod = property(_get, _set, doc = _set.__doc__)
##

IDataSourceCrawler2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates whether the crawler is capable of merging related data source items into one composite crawled item.')], HRESULT, 'CanMergeItems',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbCanMergeItems' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the crawler merges related data source items into one composite crawled item.')], HRESULT, 'MergeItems',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbMergeItems' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the crawler merges related data source items into one composite crawled item.')], HRESULT, 'MergeItems',
              ( ['in'], VARIANT_BOOL, 'pbMergeItems' )),
]
################################################################
## code template for IDataSourceCrawler2 implementation
##class IDataSourceCrawler2_Impl(object):
##    def _get(self):
##        u'Indicates whether the crawler merges related data source items into one composite crawled item.'
##        #return pbMergeItems
##    def _set(self, pbMergeItems):
##        u'Indicates whether the crawler merges related data source items into one composite crawled item.'
##    MergeItems = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def CanMergeItems(self):
##        u'Indicates whether the crawler is capable of merging related data source items into one composite crawled item.'
##        #return pbCanMergeItems
##

IPixelBlock3._methods_ = [
    COMMETHOD(['propget', helpstring(u'The number of pixel arrays contained in the PixelBlock.')], HRESULT, 'Planes',
              ( ['retval', 'out'], POINTER(c_int), 'pVal' )),
    COMMETHOD(['propget', helpstring(u'The width of the PixelBlock in pixels.')], HRESULT, 'Width',
              ( ['retval', 'out'], POINTER(c_int), 'pVal' )),
    COMMETHOD(['propget', helpstring(u'The height of the PixelBlock in pixels.')], HRESULT, 'Height',
              ( ['retval', 'out'], POINTER(c_int), 'pVal' )),
    COMMETHOD(['propget', helpstring(u'The pixel type of the PixelBlock.')], HRESULT, 'PixelType',
              ( ['in'], c_int, 'plane' ),
              ( ['retval', 'out'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.rstPixelType), 'pVal' )),
    COMMETHOD(['propput', helpstring(u'The pixel type of the PixelBlock.')], HRESULT, 'PixelType',
              ( ['in'], c_int, 'plane' ),
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.rstPixelType, 'pVal' )),
    COMMETHOD(['propget', helpstring(u'The number of bytes per pixel for the PixelBlock.')], HRESULT, 'BytesPerPixel',
              ( ['retval', 'out'], POINTER(c_int), 'pVal' )),
    COMMETHOD(['propget', helpstring(u'An array of pixels for a specified plane.')], HRESULT, 'PixelData',
              ( ['in'], c_int, 'plane' ),
              ( ['retval', 'out'], POINTER(VARIANT), 'pVal' )),
    COMMETHOD(['propput', helpstring(u'An array of pixels for a specified plane.')], HRESULT, 'PixelData',
              ( ['in'], c_int, 'plane' ),
              ( ['in'], VARIANT, 'pVal' )),
    COMMETHOD(['propget', helpstring(u'A pointer to an array of pixels for a specified plane.')], HRESULT, 'PixelDataByRef',
              ( ['in'], c_int, 'plane' ),
              ( ['retval', 'out'], POINTER(VARIANT), 'pVal' )),
    COMMETHOD([helpstring(u'The value for a specified pixel.')], HRESULT, 'GetVal',
              ( ['in'], c_int, 'plane' ),
              ( ['in'], c_int, 'x' ),
              ( ['in'], c_int, 'y' ),
              ( ['retval', 'out'], POINTER(VARIANT), 'pVal' )),
    COMMETHOD(['propput', helpstring(u'The NoData mask for a specified plane.')], HRESULT, 'NoDataMask',
              ( ['in'], c_int, 'plane' ),
              ( ['in'], VARIANT, 'pVal' )),
    COMMETHOD(['propget', helpstring(u'The NoData mask for a specified plane.')], HRESULT, 'NoDataMask',
              ( ['in'], c_int, 'plane' ),
              ( ['retval', 'out'], POINTER(VARIANT), 'pVal' )),
    COMMETHOD(['propget', helpstring(u'The NoData mask for a specified plane.')], HRESULT, 'NoDataMaskByRef',
              ( ['in'], c_int, 'plane' ),
              ( ['retval', 'out'], POINTER(VARIANT), 'pVal' )),
    COMMETHOD([helpstring(u'Gets the NoData mask value for a specified pixel.')], HRESULT, 'GetNoDataMaskVal',
              ( ['in'], c_int, 'plane' ),
              ( ['in'], c_int, 'x' ),
              ( ['in'], c_int, 'y' ),
              ( ['retval', 'out'], POINTER(VARIANT), 'pVal' )),
    COMMETHOD([helpstring(u'Checks if this PixelBlock contains NoData.')], HRESULT, 'HasNoData',
              ( ['in'], c_int, 'plane' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'HasNoData' )),
    COMMETHOD([helpstring(u'Clears a given plane (sets to NoData).')], HRESULT, 'Clear',
              ( ['in'], c_int, 'plane' )),
    COMMETHOD([helpstring(u'Generates NoData Mask using a given NoData value.')], HRESULT, 'Mask',
              ( ['in'], VARIANT, 'NoData' )),
]
################################################################
## code template for IPixelBlock3 implementation
##class IPixelBlock3_Impl(object):
##    @property
##    def PixelDataByRef(self, plane):
##        u'A pointer to an array of pixels for a specified plane.'
##        #return pVal
##
##    def GetVal(self, plane, x, y):
##        u'The value for a specified pixel.'
##        #return pVal
##
##    def _get(self, plane):
##        u'The pixel type of the PixelBlock.'
##        #return pVal
##    def _set(self, plane, pVal):
##        u'The pixel type of the PixelBlock.'
##    PixelType = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def NoDataMaskByRef(self, plane):
##        u'The NoData mask for a specified plane.'
##        #return pVal
##
##    @property
##    def Planes(self):
##        u'The number of pixel arrays contained in the PixelBlock.'
##        #return pVal
##
##    def Mask(self, NoData):
##        u'Generates NoData Mask using a given NoData value.'
##        #return 
##
##    @property
##    def Height(self):
##        u'The height of the PixelBlock in pixels.'
##        #return pVal
##
##    @property
##    def Width(self):
##        u'The width of the PixelBlock in pixels.'
##        #return pVal
##
##    @property
##    def BytesPerPixel(self):
##        u'The number of bytes per pixel for the PixelBlock.'
##        #return pVal
##
##    def _get(self, plane):
##        u'An array of pixels for a specified plane.'
##        #return pVal
##    def _set(self, plane, pVal):
##        u'An array of pixels for a specified plane.'
##    PixelData = property(_get, _set, doc = _set.__doc__)
##
##    def GetNoDataMaskVal(self, plane, x, y):
##        u'Gets the NoData mask value for a specified pixel.'
##        #return pVal
##
##    def _get(self, plane):
##        u'The NoData mask for a specified plane.'
##        #return pVal
##    def _set(self, plane, pVal):
##        u'The NoData mask for a specified plane.'
##    NoDataMask = property(_get, _set, doc = _set.__doc__)
##
##    def HasNoData(self, plane):
##        u'Checks if this PixelBlock contains NoData.'
##        #return HasNoData
##
##    def Clear(self, plane):
##        u'Clears a given plane (sets to NoData).'
##        #return 
##

class CompositeXform(CoClass):
    u'A composite geodata transform collection class.'
    _reg_clsid_ = GUID('{44923EBB-D988-4847-9B29-11AA8E6E132C}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
CompositeXform._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeodataXform, IGeodataXform2, ICompositeXform, IRasterXform, ISensorXform, comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ITransformation, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDocumentVersionSupportGEN, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

IClipFunctionArguments._methods_ = [
    COMMETHOD(['propget', helpstring(u'The source raster object.')], HRESULT, 'Raster',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppRaster' )),
    COMMETHOD(['propputref', helpstring(u'The source raster object.')], HRESULT, 'Raster',
              ( ['in'], POINTER(IUnknown), 'ppRaster' )),
    COMMETHOD(['propget', helpstring(u'The clipping geometry.')], HRESULT, 'ClippingGeometry',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry)), 'ppClippingGeometry' )),
    COMMETHOD(['propputref', helpstring(u'The clipping geometry.')], HRESULT, 'ClippingGeometry',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'ppClippingGeometry' )),
    COMMETHOD(['propget', helpstring(u'The raster clipping type.')], HRESULT, 'ClippingType',
              ( ['retval', 'out'], POINTER(esriRasterClippingType), 'pClippingType' )),
    COMMETHOD(['propput', helpstring(u'The raster clipping type.')], HRESULT, 'ClippingType',
              ( ['in'], esriRasterClippingType, 'pClippingType' )),
    COMMETHOD(['propget', helpstring(u'The output extent.')], HRESULT, 'Extent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope)), 'ppExtent' )),
    COMMETHOD(['propputref', helpstring(u'The output extent.')], HRESULT, 'Extent',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'ppExtent' )),
]
################################################################
## code template for IClipFunctionArguments implementation
##class IClipFunctionArguments_Impl(object):
##    def Raster(self, ppRaster):
##        u'The source raster object.'
##        #return 
##
##    def Extent(self, ppExtent):
##        u'The output extent.'
##        #return 
##
##    def _get(self):
##        u'The raster clipping type.'
##        #return pClippingType
##    def _set(self, pClippingType):
##        u'The raster clipping type.'
##    ClippingType = property(_get, _set, doc = _set.__doc__)
##
##    def ClippingGeometry(self, ppClippingGeometry):
##        u'The clipping geometry.'
##        #return 
##

class StatisticsFunctionArguments(CoClass):
    u'A class for statistics raster function arguments.'
    _reg_clsid_ = GUID('{C26AAC72-5D86-482E-96D4-D56986EBF09C}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
StatisticsFunctionArguments._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunctionArguments, IRasterFunctionArguments2, IStatisticsFunctionArguments, IStatisticsFunctionArguments2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

class RasterHistogram(CoClass):
    u'A raster histogram class.'
    _reg_clsid_ = GUID('{B01293EA-88D0-4E7D-AF82-A0B10BAC9B33}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
RasterHistogram._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterHistogram]

IURIProductNameFilter._methods_ = [
    COMMETHOD(['propputref', helpstring(u"The product names of item URIs allowed to pass through the filter. Calls to IItemURIFilter.ApplyFilter method will return FALSE for those item URIs with product names that don't appear in this array.")], HRESULT, 'ProductNames',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray), 'ppProductNames' )),
    COMMETHOD(['propget', helpstring(u"The product names of item URIs allowed to pass through the filter. Calls to IItemURIFilter.ApplyFilter method will return FALSE for those item URIs with product names that don't appear in this array.")], HRESULT, 'ProductNames',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray)), 'ppProductNames' )),
]
################################################################
## code template for IURIProductNameFilter implementation
##class IURIProductNameFilter_Impl(object):
##    @property
##    def ProductNames(self, ppProductNames):
##        u"The product names of item URIs allowed to pass through the filter. Calls to IItemURIFilter.ApplyFilter method will return FALSE for those item URIs with product names that don't appear in this array."
##        #return 
##

class RasterDataset(CoClass):
    u'A representation of a raster dataset on disk.'
    _reg_clsid_ = GUID('{7ACA3D07-0629-11D2-8D24-0000F8780535}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
RasterDataset._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterDataset, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterDataset2, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterDataset3, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterDatasetEdit, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterDatasetEdit2, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterDatasetEdit3, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataset, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeoDataset, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeoDatasetSchemaEdit, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeoDatasetSchemaEdit2, IRasterBandCollection, IRasterPyramid, IRasterPyramid2, IRasterPyramid3, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IMetadata, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IMetadataEdit, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.INativeTypeInfo, ITemporaryDataset, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDatasetAnalyze, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDatasetFileStat, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, IWorldFileExport, IWorldFileExport2, IRasterDatasetJukebox, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ISaveAs, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ISaveAs2, IRawBlocks]

IRasterBuilderInit2._methods_ = [
    COMMETHOD(['propputref', helpstring(u"The geographic tranformation helper object, set by the calling application, that enables the raster builder to install geotransformation method in to the system's GeoTransformationOperationSet.")], HRESULT, 'GeoTransformationHelper',
              ( ['in'], POINTER(IGeoTransformationHelper), 'ppGeoTransformationHelper' )),
    COMMETHOD(['propget', helpstring(u"The geographic tranformation helper object, set by the calling application, that enables the raster builder to install geotransformation method in to the system's GeoTransformationOperationSet.")], HRESULT, 'GeoTransformationHelper',
              ( ['retval', 'out'], POINTER(POINTER(IGeoTransformationHelper)), 'ppGeoTransformationHelper' )),
]
################################################################
## code template for IRasterBuilderInit2 implementation
##class IRasterBuilderInit2_Impl(object):
##    @property
##    def GeoTransformationHelper(self, ppGeoTransformationHelper):
##        u"The geographic tranformation helper object, set by the calling application, that enables the raster builder to install geotransformation method in to the system's GeoTransformationOperationSet."
##        #return 
##

IRasterFunction2._methods_ = [
    COMMETHOD([helpstring(u'Computes the footprint.')], HRESULT, 'ComputeFootprint',
              ( ['in'], c_int, 'MaximumVertices' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry)), 'ppFootprint' )),
    COMMETHOD([helpstring(u'Refresh raster cache.')], HRESULT, 'RefreshCache'),
    COMMETHOD([helpstring(u'Clear the cache.')], HRESULT, 'ClearCache',
              ( ['in'], POINTER(IUnknown), 'pArguments' )),
    COMMETHOD([helpstring(u'Gets source files within a given clipping geometry.')], HRESULT, 'GetFiles',
              ( [], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'pGeometry' ),
              ( [], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStringArray)), 'ppFiles' )),
    COMMETHOD(['propget'], HRESULT, 'ProcessingCost',
              ( [], POINTER(c_double), 'pProcessingCost' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the raster cache is stale and needs to be refreshed.')], HRESULT, 'IsCacheStale',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pIsStale' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the function is actively participating in the chain.')], HRESULT, 'IsActive',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pIsActive' )),
    COMMETHOD(['propget', helpstring(u'The properties to be invalidated when a function raster dataset is initialized.')], HRESULT, 'InvalidDatasetProperties',
              ( ['retval', 'out'], POINTER(c_int), 'pDatasetProperties' )),
    COMMETHOD(['propput', helpstring(u'The properties to be invalidated when a function raster dataset is initialized.')], HRESULT, 'InvalidDatasetProperties',
              ( ['in'], c_int, 'pDatasetProperties' )),
]
################################################################
## code template for IRasterFunction2 implementation
##class IRasterFunction2_Impl(object):
##    @property
##    def ProcessingCost(self, pProcessingCost):
##        '-no docstring-'
##        #return 
##
##    def GetFiles(self, pGeometry, ppFiles):
##        u'Gets source files within a given clipping geometry.'
##        #return 
##
##    def _get(self):
##        u'The properties to be invalidated when a function raster dataset is initialized.'
##        #return pDatasetProperties
##    def _set(self, pDatasetProperties):
##        u'The properties to be invalidated when a function raster dataset is initialized.'
##    InvalidDatasetProperties = property(_get, _set, doc = _set.__doc__)
##
##    def ClearCache(self, pArguments):
##        u'Clear the cache.'
##        #return 
##
##    def RefreshCache(self):
##        u'Refresh raster cache.'
##        #return 
##
##    def ComputeFootprint(self, MaximumVertices):
##        u'Computes the footprint.'
##        #return ppFootprint
##
##    @property
##    def IsCacheStale(self):
##        u'Indicates if the raster cache is stale and needs to be refreshed.'
##        #return pIsStale
##
##    @property
##    def IsActive(self):
##        u'Indicates if the function is actively participating in the chain.'
##        #return pIsActive
##

IFrameXform._methods_ = [
    COMMETHOD(['propget', helpstring(u'The interior orientation as an affine transformation.')], HRESULT, 'InteriorOrientation',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeodataXform)), 'ppAffine' )),
    COMMETHOD(['propputref', helpstring(u'The interior orientation as an affine transformation.')], HRESULT, 'InteriorOrientation',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeodataXform), 'ppAffine' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the Konrady adjustment to be applied.')], HRESULT, 'EnableKonrady',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pK' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the Konrady adjustment to be applied.')], HRESULT, 'EnableKonrady',
              ( ['in'], VARIANT_BOOL, 'pK' )),
    COMMETHOD(['propget', helpstring(u'The Konrady adjustment parameters.')], HRESULT, 'KonradyParameters',
              ( ['retval', 'out'], POINTER(VARIANT), 'pK' )),
    COMMETHOD(['propput', helpstring(u'The Konrady adjustment parameters.')], HRESULT, 'KonradyParameters',
              ( ['in'], VARIANT, 'pK' )),
    COMMETHOD(['propget', helpstring(u'The Konrady calculation method.')], HRESULT, 'KonradyType',
              ( ['retval', 'out'], POINTER(esriRasterKonradyType), 'pType' )),
    COMMETHOD(['propput', helpstring(u'The Konrady calculation method.')], HRESULT, 'KonradyType',
              ( ['in'], esriRasterKonradyType, 'pType' )),
    COMMETHOD([helpstring(u'Queries the Konrady adjustment parameterrs.')], HRESULT, 'QueryKonradyParameters',
              ( ['in'], POINTER(c_double), 'pK' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the adjustment of earth curvature and refraction is applied.')], HRESULT, 'ApplyCurvatureAndRefraction',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pApplyCurvatureAndRefraction' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the adjustment of earth curvature and refraction is applied.')], HRESULT, 'ApplyCurvatureAndRefraction',
              ( ['in'], VARIANT_BOOL, 'pApplyCurvatureAndRefraction' )),
    COMMETHOD(['propget', helpstring(u'The earth radius in meters.')], HRESULT, 'EarthRadius',
              ( ['retval', 'out'], POINTER(c_double), 'radius' )),
    COMMETHOD(['propput', helpstring(u'The earth radius in meters.')], HRESULT, 'EarthRadius',
              ( ['in'], c_double, 'radius' )),
    COMMETHOD(['propget', helpstring(u'The average Z in meters.')], HRESULT, 'AverageZ',
              ( ['retval', 'out'], POINTER(c_double), 'AverageZ' )),
    COMMETHOD(['propput', helpstring(u'The average Z in meters.')], HRESULT, 'AverageZ',
              ( ['in'], c_double, 'AverageZ' )),
    COMMETHOD(['propget', helpstring(u'The film principal point.')], HRESULT, 'PrincipalPoint',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint)), 'pp' )),
    COMMETHOD(['propputref', helpstring(u'The film principal point.')], HRESULT, 'PrincipalPoint',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'pp' )),
    COMMETHOD(['propget', helpstring(u'The specified sensor orientation as an orthogonal rotation matrix.')], HRESULT, 'PerspectiveMatrix',
              ( ['retval', 'out'], POINTER(VARIANT), 'pMatrix' )),
    COMMETHOD(['propput', helpstring(u'The specified sensor orientation as an orthogonal rotation matrix.')], HRESULT, 'PerspectiveMatrix',
              ( ['in'], VARIANT, 'pMatrix' )),
    COMMETHOD([helpstring(u'Queries the perspective matrix.')], HRESULT, 'QueryPerspectiveMatrix',
              ( ['in'], POINTER(c_double), 'pMatrix' )),
    COMMETHOD(['propget', helpstring(u'The sensor position.')], HRESULT, 'PerspectiveCenter',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint)), 'sp' )),
    COMMETHOD(['propputref', helpstring(u'The sensor position.')], HRESULT, 'PerspectiveCenter',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'sp' )),
    COMMETHOD(['propget', helpstring(u'The sensor polarity.')], HRESULT, 'PerspectivePolarity',
              ( ['retval', 'out'], POINTER(c_int), 'polarity' )),
    COMMETHOD(['propput', helpstring(u'The sensor polarity.')], HRESULT, 'PerspectivePolarity',
              ( ['in'], c_int, 'polarity' )),
    COMMETHOD(['propget', helpstring(u'The focal length in micron.')], HRESULT, 'FocalLength',
              ( ['retval', 'out'], POINTER(c_double), 'length' )),
    COMMETHOD(['propput', helpstring(u'The focal length in micron.')], HRESULT, 'FocalLength',
              ( ['in'], c_double, 'length' )),
    COMMETHOD([helpstring(u'Puts the interior orientation parameters.')], HRESULT, 'PutInteriorOrientationParameters',
              ( ['in'], comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.esriTransformDirection, 'direction' ),
              ( ['in'], VARIANT, 'Parameters' )),
    COMMETHOD([helpstring(u'Puts the sensor exterior orientation as a set of rotation angles in degrees.')], HRESULT, 'PutPerspectiveAngles',
              ( ['in'], c_double, 'omega' ),
              ( ['in'], c_double, 'phi' ),
              ( ['in'], c_double, 'kappa' ),
              ( ['in'], VARIANT_BOOL, 'clockwise' )),
    COMMETHOD([helpstring(u'Queries the sensor exterior orientation as a set of rotation angles in degrees.')], HRESULT, 'QueryPerspectiveAngles',
              ( ['out'], POINTER(c_double), 'pOmega' ),
              ( ['out'], POINTER(c_double), 'pPhi' ),
              ( ['out'], POINTER(c_double), 'pKappa' ),
              ( ['out'], POINTER(VARIANT_BOOL), 'pClockwise' )),
    COMMETHOD(['propputref', helpstring(u'The LSR-To-USR conversion.')], HRESULT, 'LSR',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeodataXform), 'ppLSR' )),
    COMMETHOD(['propget', helpstring(u'The LSR-To-USR conversion.')], HRESULT, 'LSR',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeodataXform)), 'ppLSR' )),
    COMMETHOD([helpstring(u'The distortion tables to calculate Konrady coefficients and residuals.')], HRESULT, 'PutDistortionTable',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray), 'pDistanceInMillimeters' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray), 'pDistortionInMicrons' )),
    COMMETHOD([helpstring(u'The distortion tables.')], HRESULT, 'GetDistortionTable',
              ( ['out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray)), 'ppDistanceInMillimeters' ),
              ( ['out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray)), 'ppDistortionInMicrons' )),
    COMMETHOD(['propget', helpstring(u'The residuals for distortion table points.')], HRESULT, 'Residuals',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray)), 'ppResidualsInMicrons' )),
]
################################################################
## code template for IFrameXform implementation
##class IFrameXform_Impl(object):
##    def PrincipalPoint(self, pp):
##        u'The film principal point.'
##        #return 
##
##    def PutPerspectiveAngles(self, omega, phi, kappa, clockwise):
##        u'Puts the sensor exterior orientation as a set of rotation angles in degrees.'
##        #return 
##
##    def PerspectiveCenter(self, sp):
##        u'The sensor position.'
##        #return 
##
##    def _get(self):
##        u'The sensor polarity.'
##        #return polarity
##    def _set(self, polarity):
##        u'The sensor polarity.'
##    PerspectivePolarity = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The focal length in micron.'
##        #return length
##    def _set(self, length):
##        u'The focal length in micron.'
##    FocalLength = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The specified sensor orientation as an orthogonal rotation matrix.'
##        #return pMatrix
##    def _set(self, pMatrix):
##        u'The specified sensor orientation as an orthogonal rotation matrix.'
##    PerspectiveMatrix = property(_get, _set, doc = _set.__doc__)
##
##    def PutDistortionTable(self, pDistanceInMillimeters, pDistortionInMicrons):
##        u'The distortion tables to calculate Konrady coefficients and residuals.'
##        #return 
##
##    def InteriorOrientation(self, ppAffine):
##        u'The interior orientation as an affine transformation.'
##        #return 
##
##    def GetDistortionTable(self):
##        u'The distortion tables.'
##        #return ppDistanceInMillimeters, ppDistortionInMicrons
##
##    def QueryPerspectiveAngles(self):
##        u'Queries the sensor exterior orientation as a set of rotation angles in degrees.'
##        #return pOmega, pPhi, pKappa, pClockwise
##
##    def PutInteriorOrientationParameters(self, direction, Parameters):
##        u'Puts the interior orientation parameters.'
##        #return 
##
##    def QueryKonradyParameters(self, pK):
##        u'Queries the Konrady adjustment parameterrs.'
##        #return 
##
##    def _get(self):
##        u'The earth radius in meters.'
##        #return radius
##    def _set(self, radius):
##        u'The earth radius in meters.'
##    EarthRadius = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The Konrady adjustment parameters.'
##        #return pK
##    def _set(self, pK):
##        u'The Konrady adjustment parameters.'
##    KonradyParameters = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the adjustment of earth curvature and refraction is applied.'
##        #return pApplyCurvatureAndRefraction
##    def _set(self, pApplyCurvatureAndRefraction):
##        u'Indicates if the adjustment of earth curvature and refraction is applied.'
##    ApplyCurvatureAndRefraction = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def LSR(self, ppLSR):
##        u'The LSR-To-USR conversion.'
##        #return 
##
##    @property
##    def Residuals(self):
##        u'The residuals for distortion table points.'
##        #return ppResidualsInMicrons
##
##    def QueryPerspectiveMatrix(self, pMatrix):
##        u'Queries the perspective matrix.'
##        #return 
##
##    def _get(self):
##        u'Indicates if the Konrady adjustment to be applied.'
##        #return pK
##    def _set(self, pK):
##        u'Indicates if the Konrady adjustment to be applied.'
##    EnableKonrady = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The Konrady calculation method.'
##        #return pType
##    def _set(self, pType):
##        u'The Konrady calculation method.'
##    KonradyType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The average Z in meters.'
##        #return AverageZ
##    def _set(self, AverageZ):
##        u'The average Z in meters.'
##    AverageZ = property(_get, _set, doc = _set.__doc__)
##

IColormapFunctionArguments._methods_ = [
    COMMETHOD(['propget', helpstring(u'The source raster object.')], HRESULT, 'Raster',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppRaster' )),
    COMMETHOD(['propputref', helpstring(u'The source raster object.')], HRESULT, 'Raster',
              ( ['in'], POINTER(IUnknown), 'ppRaster' )),
    COMMETHOD(['propget', helpstring(u"The pre-defined colormap name, e.g. 'Random', 'NDVI', and etc.")], HRESULT, 'ColormapName',
              ( ['retval', 'out'], POINTER(BSTR), 'pColormapName' )),
    COMMETHOD(['propput', helpstring(u"The pre-defined colormap name, e.g. 'Random', 'NDVI', and etc.")], HRESULT, 'ColormapName',
              ( ['in'], BSTR, 'pColormapName' )),
    COMMETHOD(['propget', helpstring(u'The raster colormap.')], HRESULT, 'Colormap',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterColormap)), 'ppColormap' )),
    COMMETHOD(['propputref', helpstring(u'The raster colormap.')], HRESULT, 'Colormap',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterColormap), 'ppColormap' )),
    COMMETHOD(['propget', helpstring(u'The input color ramp.')], HRESULT, 'ColorRamp',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColorRamp)), 'ppColorRamp' )),
    COMMETHOD(['propputref', helpstring(u'The input color ramp.')], HRESULT, 'ColorRamp',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IColorRamp), 'ppColorRamp' )),
    COMMETHOD([helpstring(u'Loads from a colormap file.')], HRESULT, 'LoadFrom',
              ( ['in'], BSTR, 'colormapFileName' )),
]
################################################################
## code template for IColormapFunctionArguments implementation
##class IColormapFunctionArguments_Impl(object):
##    def _get(self):
##        u"The pre-defined colormap name, e.g. 'Random', 'NDVI', and etc."
##        #return pColormapName
##    def _set(self, pColormapName):
##        u"The pre-defined colormap name, e.g. 'Random', 'NDVI', and etc."
##    ColormapName = property(_get, _set, doc = _set.__doc__)
##
##    def Raster(self, ppRaster):
##        u'The source raster object.'
##        #return 
##
##    def LoadFrom(self, colormapFileName):
##        u'Loads from a colormap file.'
##        #return 
##
##    def ColorRamp(self, ppColorRamp):
##        u'The input color ramp.'
##        #return 
##
##    def Colormap(self, ppColormap):
##        u'The raster colormap.'
##        #return 
##

ITemporaryDataset._methods_ = [
    COMMETHOD([helpstring(u'Indicates if the dataset is temporary.')], HRESULT, 'IsTemporary',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'temporary' )),
    COMMETHOD([helpstring(u'Persists this temporary dataset permanent.')], HRESULT, 'MakePermanent'),
    COMMETHOD([helpstring(u'Persists this temporary dataset to a new permanent dataset.')], HRESULT, 'MakePermanentAs',
              ( ['in'], BSTR, 'new_name' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspace), 'Workspace' ),
              ( ['in'], BSTR, 'Format' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataset)), 'Dataset' )),
]
################################################################
## code template for ITemporaryDataset implementation
##class ITemporaryDataset_Impl(object):
##    def MakePermanent(self):
##        u'Persists this temporary dataset permanent.'
##        #return 
##
##    def IsTemporary(self):
##        u'Indicates if the dataset is temporary.'
##        #return temporary
##
##    def MakePermanentAs(self, new_name, Workspace, Format):
##        u'Persists this temporary dataset to a new permanent dataset.'
##        #return Dataset
##

ISplineXform._methods_ = [
    COMMETHOD([helpstring(u'Defines a spline transform using control points.')], HRESULT, 'DefineFromControlPoints',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPointCollection), 'pSrcGCPs' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPointCollection), 'pDstGCPs' )),
    COMMETHOD([helpstring(u'Gets control points.')], HRESULT, 'GetControlPoints',
              ( ['out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPointCollection)), 'ppSrcGCPs' ),
              ( ['out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPointCollection)), 'ppDstGCPs' )),
]
################################################################
## code template for ISplineXform implementation
##class ISplineXform_Impl(object):
##    def DefineFromControlPoints(self, pSrcGCPs, pDstGCPs):
##        u'Defines a spline transform using control points.'
##        #return 
##
##    def GetControlPoints(self):
##        u'Gets control points.'
##        #return ppSrcGCPs, ppDstGCPs
##

ICompositeURIFilter._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The list of URI filters that form this composite filter.')], HRESULT, 'URIFilters',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'ppURIFilters' )),
    COMMETHOD(['propget', helpstring(u'The list of URI filters that form this composite filter.')], HRESULT, 'URIFilters',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray)), 'ppURIFilters' )),
]
################################################################
## code template for ICompositeURIFilter implementation
##class ICompositeURIFilter_Impl(object):
##    @property
##    def URIFilters(self, ppURIFilters):
##        u'The list of URI filters that form this composite filter.'
##        #return 
##

IRasterStatistics2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Array of doubles, the covariances with the n bands of the raster.')], HRESULT, 'Covariances',
              ( ['retval', 'out'], POINTER(VARIANT), 'pVal' )),
    COMMETHOD(['propput', helpstring(u'Array of doubles, the covariances with the n bands of the raster.')], HRESULT, 'Covariances',
              ( ['in'], VARIANT, 'pVal' )),
]
################################################################
## code template for IRasterStatistics2 implementation
##class IRasterStatistics2_Impl(object):
##    def _get(self):
##        u'Array of doubles, the covariances with the n bands of the raster.'
##        #return pVal
##    def _set(self, pVal):
##        u'Array of doubles, the covariances with the n bands of the raster.'
##    Covariances = property(_get, _set, doc = _set.__doc__)
##

IRasterEdit._methods_ = [
    COMMETHOD([helpstring(u'Checks if this Raster can be edited.')], HRESULT, 'CanEdit',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'CanEdit' )),
    COMMETHOD([helpstring(u'Writes a PixelBlock starting at a given Top-Left corner.')], HRESULT, 'Write',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IPnt), 'pTlc' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IPixelBlock), 'pPixelBlock' )),
    COMMETHOD([helpstring(u'Erases a PixelBlock starting at a given Top-Left corner.')], HRESULT, 'Erase',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IPnt), 'pTlc' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IPixelBlock), 'pPixelBlock' )),
    COMMETHOD([helpstring(u'Refreshes the associated RasterDataset.')], HRESULT, 'Refresh'),
]
################################################################
## code template for IRasterEdit implementation
##class IRasterEdit_Impl(object):
##    def Write(self, pTlc, pPixelBlock):
##        u'Writes a PixelBlock starting at a given Top-Left corner.'
##        #return 
##
##    def Erase(self, pTlc, pPixelBlock):
##        u'Erases a PixelBlock starting at a given Top-Left corner.'
##        #return 
##
##    def CanEdit(self):
##        u'Checks if this Raster can be edited.'
##        #return CanEdit
##
##    def Refresh(self):
##        u'Refreshes the associated RasterDataset.'
##        #return 
##

IRasterBand._methods_ = [
    COMMETHOD([helpstring(u'Indicates if this band has an attribute table.')], HRESULT, 'HasTable',
              ( ['out'], POINTER(VARIANT_BOOL), 'b' )),
    COMMETHOD([helpstring(u'Indicates if this band has statistics.')], HRESULT, 'HasStatistics',
              ( ['out'], POINTER(VARIANT_BOOL), 'b' )),
    COMMETHOD([helpstring(u'Indicates if this band has a colormap.')], HRESULT, 'HasColormap',
              ( ['out'], POINTER(VARIANT_BOOL), 'b' )),
    COMMETHOD(['propget', helpstring(u'The statistics of this raster band.')], HRESULT, 'Statistics',
              ( ['retval', 'out'], POINTER(POINTER(IRasterStatistics)), 'Statistics' )),
    COMMETHOD([helpstring(u'Calculates statistics and histogram if not previously stored.')], HRESULT, 'ComputeStatsAndHist'),
    COMMETHOD(['propget', helpstring(u'The histogram of this raster band.')], HRESULT, 'Histogram',
              ( ['retval', 'out'], POINTER(POINTER(IRasterHistogram)), 'Histogram' )),
    COMMETHOD(['propget', helpstring(u'The colormap of this raster band.')], HRESULT, 'Colormap',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterColormap)), 'Colormap' )),
    COMMETHOD(['propget', helpstring(u'The attribute table of this raster band.')], HRESULT, 'AttributeTable',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable)), 'Table' )),
    COMMETHOD(['restricted', helpstring(u'The descriptor table of this raster band.'), 'propget'], HRESULT, 'DescriptorTable',
              ( ['retval', 'out'], POINTER(POINTER(IDescTable)), 'ppTable' )),
    COMMETHOD(['propget', helpstring(u'The class names (titles).')], HRESULT, 'ClassNames',
              ( ['retval', 'out'], POINTER(POINTER(IRasterClassNames)), 'ppClassNames' )),
    COMMETHOD(['propget', helpstring(u'The RasterDataset associated with this raster band.')], HRESULT, 'RasterDataset',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterDataset)), 'Dataset' )),
    COMMETHOD(['propget', helpstring(u'The suggested representation type.')], HRESULT, 'RepresentationType',
              ( ['retval', 'out'], POINTER(rstRepresentationType), 'pVal' )),
    COMMETHOD(['propput', helpstring(u'The suggested representation type.')], HRESULT, 'RepresentationType',
              ( ['in'], rstRepresentationType, 'pVal' )),
    COMMETHOD(['hidden', helpstring(u'The contrast look-up table of this band.'), 'propget'], HRESULT, 'ContrastTable',
              ( ['retval', 'out'], POINTER(POINTER(IContrastTable)), 'cont' )),
    COMMETHOD(['hidden', helpstring(u'The contrast look-up table of this band.'), 'propput'], HRESULT, 'ContrastTable',
              ( ['in'], POINTER(IContrastTable), 'cont' )),
    COMMETHOD([helpstring(u'Returns true if this dataset can be copied.')], HRESULT, 'CanCopy',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'CanCopy' )),
    COMMETHOD([helpstring(u'Copies this raster band to a new dataset with the specified name.')], HRESULT, 'Copy',
              ( ['in'], BSTR, 'copyName' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspace), 'copyWorkspace' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IDataset)), 'copyDataset' )),
    COMMETHOD(['propget', helpstring(u'The name of this raster band.')], HRESULT, 'Bandname',
              ( ['retval', 'out'], POINTER(BSTR), 'Bandname' )),
    COMMETHOD(['restricted', helpstring(u'Indicates if the band was opened directly.'), 'propput'], HRESULT, 'DirectlyOpened',
              ( ['in'], VARIANT_BOOL, 'bDirectlyOpened' )),
    COMMETHOD(['hidden', helpstring(u'Indicates if the band was opened directly.'), 'propget'], HRESULT, 'DirectlyOpened',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'bDirectlyOpened' )),
]
################################################################
## code template for IRasterBand implementation
##class IRasterBand_Impl(object):
##    def CanCopy(self):
##        u'Returns true if this dataset can be copied.'
##        #return CanCopy
##
##    @property
##    def Statistics(self):
##        u'The statistics of this raster band.'
##        #return Statistics
##
##    @property
##    def Colormap(self):
##        u'The colormap of this raster band.'
##        #return Colormap
##
##    def Copy(self, copyName, copyWorkspace):
##        u'Copies this raster band to a new dataset with the specified name.'
##        #return copyDataset
##
##    @property
##    def RasterDataset(self):
##        u'The RasterDataset associated with this raster band.'
##        #return Dataset
##
##    def HasStatistics(self):
##        u'Indicates if this band has statistics.'
##        #return b
##
##    @property
##    def ClassNames(self):
##        u'The class names (titles).'
##        #return ppClassNames
##
##    def HasColormap(self):
##        u'Indicates if this band has a colormap.'
##        #return b
##
##    @property
##    def Histogram(self):
##        u'The histogram of this raster band.'
##        #return Histogram
##
##    @property
##    def AttributeTable(self):
##        u'The attribute table of this raster band.'
##        #return Table
##
##    @property
##    def DescriptorTable(self):
##        u'The descriptor table of this raster band.'
##        #return ppTable
##
##    def ComputeStatsAndHist(self):
##        u'Calculates statistics and histogram if not previously stored.'
##        #return 
##
##    @property
##    def Bandname(self):
##        u'The name of this raster band.'
##        #return Bandname
##
##    def _get(self):
##        u'The contrast look-up table of this band.'
##        #return cont
##    def _set(self, cont):
##        u'The contrast look-up table of this band.'
##    ContrastTable = property(_get, _set, doc = _set.__doc__)
##
##    def HasTable(self):
##        u'Indicates if this band has an attribute table.'
##        #return b
##
##    def _get(self):
##        u'The suggested representation type.'
##        #return pVal
##    def _set(self, pVal):
##        u'The suggested representation type.'
##    RepresentationType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the band was opened directly.'
##        #return bDirectlyOpened
##    def _set(self, bDirectlyOpened):
##        u'Indicates if the band was opened directly.'
##    DirectlyOpened = property(_get, _set, doc = _set.__doc__)
##

class CompositeItemURI(CoClass):
    u'A composite item URI object.'
    _reg_clsid_ = GUID('{BAB2B786-58CD-44D5-80D7-3057B4C444CB}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
CompositeItemURI._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IItemURI, IItemURI2, IItemPaths, IItemPaths2, ICompositeItemURI]

ISimplePixelReader._methods_ = [
    COMMETHOD(['propput', helpstring(u'The source pixel type.')], HRESULT, 'PixelType',
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.rstPixelType, 'rhs' )),
    COMMETHOD(['propput', helpstring(u'The number of source bands.')], HRESULT, 'BandCount',
              ( ['in'], c_int, 'rhs' )),
    COMMETHOD(['propput', helpstring(u'The source full extent.')], HRESULT, 'Extent',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'rhs' )),
    COMMETHOD(['propput', helpstring(u'The source original cell size.')], HRESULT, 'CellSize',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IPnt), 'rhs' )),
    COMMETHOD(['propput', helpstring(u'The maximum available source pyramid level.')], HRESULT, 'MaximumPyramidLevel',
              ( ['in'], c_int, 'rhs' )),
    COMMETHOD(['propput', helpstring(u'The first available source pyramid level.')], HRESULT, 'FirstPyramidLevel',
              ( ['in'], c_int, 'rhs' )),
    COMMETHOD(['propputref', helpstring(u'The raw pixel reader callback.')], HRESULT, 'RawPixelReader',
              ( ['in'], POINTER(IRawPixelReader), 'rhs' )),
    COMMETHOD(['propputref', helpstring(u'The source raster providing pixels.')], HRESULT, 'Raster',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRaster), 'rhs' )),
]
################################################################
## code template for ISimplePixelReader implementation
##class ISimplePixelReader_Impl(object):
##    def RawPixelReader(self, rhs):
##        u'The raw pixel reader callback.'
##        #return 
##
##    def Raster(self, rhs):
##        u'The source raster providing pixels.'
##        #return 
##
##    def _set(self, rhs):
##        u'The source pixel type.'
##    PixelType = property(fset = _set, doc = _set.__doc__)
##
##    def _set(self, rhs):
##        u'The maximum available source pyramid level.'
##    MaximumPyramidLevel = property(fset = _set, doc = _set.__doc__)
##
##    def _set(self, rhs):
##        u'The source original cell size.'
##    CellSize = property(fset = _set, doc = _set.__doc__)
##
##    def _set(self, rhs):
##        u'The source full extent.'
##    Extent = property(fset = _set, doc = _set.__doc__)
##
##    def _set(self, rhs):
##        u'The first available source pyramid level.'
##    FirstPyramidLevel = property(fset = _set, doc = _set.__doc__)
##
##    def _set(self, rhs):
##        u'The number of source bands.'
##    BandCount = property(fset = _set, doc = _set.__doc__)
##

class ISpeckleFunctionArguments(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a speckle function for radar imagery.'
    _iid_ = GUID('{B8099FF7-E990-4418-AD03-EFBD626875D7}')
    _idlflags_ = ['oleautomation']
ISpeckleFunctionArguments._methods_ = [
    COMMETHOD(['propget', helpstring(u'The source raster object.')], HRESULT, 'Raster',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppRaster' )),
    COMMETHOD(['propputref', helpstring(u'The source raster object.')], HRESULT, 'Raster',
              ( ['in'], POINTER(IUnknown), 'ppRaster' )),
    COMMETHOD(['propput', helpstring(u'The type of the speckle filter.')], HRESULT, 'FilterType',
              ( ['in'], esriSpeckleFilterType, 'pType' )),
    COMMETHOD(['propget', helpstring(u'The type of the speckle filter.')], HRESULT, 'FilterType',
              ( ['retval', 'out'], POINTER(esriSpeckleFilterType), 'pType' )),
    COMMETHOD(['propput', helpstring(u'The size of the speckle filter kernel.')], HRESULT, 'FilterSize',
              ( ['in'], esriSpeckleFilterKernel, 'pSize' )),
    COMMETHOD(['propget', helpstring(u'The size of the speckle filter kernel.')], HRESULT, 'FilterSize',
              ( ['retval', 'out'], POINTER(esriSpeckleFilterKernel), 'pSize' )),
    COMMETHOD(['propput', helpstring(u'The speckle noise model. This parameter is used only for the Lee filter type.')], HRESULT, 'NoiseModel',
              ( ['in'], esriSpeckleNoiseModel, 'Type' )),
    COMMETHOD(['propget', helpstring(u'The speckle noise model. This parameter is used only for the Lee filter type.')], HRESULT, 'NoiseModel',
              ( ['retval', 'out'], POINTER(esriSpeckleNoiseModel), 'Type' )),
    COMMETHOD(['propput', helpstring(u'The noise variance. This parameter is used only for Lee filter with Additive or Additive and Multiplicative(both) noise models.')], HRESULT, 'NoiseVariance',
              ( ['in'], c_double, 'noiseVar' )),
    COMMETHOD(['propget', helpstring(u'The noise variance. This parameter is used only for Lee filter with Additive or Additive and Multiplicative(both) noise models.')], HRESULT, 'NoiseVariance',
              ( ['retval', 'out'], POINTER(c_double), 'noiseVar' )),
    COMMETHOD(['propput', helpstring(u'The mean additive noise. This parameter is used only for Lee filter with Additive and Multiplicative(both) noise models.')], HRESULT, 'AdditiveNoiseMean',
              ( ['in'], c_double, 'addNoiseMean' )),
    COMMETHOD(['propget', helpstring(u'The mean additive noise. This parameter is used only for Lee filter with Additive and Multiplicative(both) noise models.')], HRESULT, 'AdditiveNoiseMean',
              ( ['retval', 'out'], POINTER(c_double), 'addNoiseMean' )),
    COMMETHOD(['propput', helpstring(u'The mean multiplicative noise. This parameter is used only for Lee filter with Multiplicative or Additive and Multiplicative(both) noise models.')], HRESULT, 'MultiplicativeNoiseMean',
              ( ['in'], c_double, 'mulNoiseMean' )),
    COMMETHOD(['propget', helpstring(u'The mean multiplicative noise. This parameter is used only for Lee filter with Multiplicative or Additive and Multiplicative(both) noise models.')], HRESULT, 'MultiplicativeNoiseMean',
              ( ['retval', 'out'], POINTER(c_double), 'mulNoiseMean' )),
    COMMETHOD(['propput', helpstring(u'The number of looks. This parameter is used only for Lee filter with Multiplicative noise model as well as the Enhanced Lee filter.')], HRESULT, 'NLooks',
              ( ['in'], c_int, 'NLooks' )),
    COMMETHOD(['propget', helpstring(u'The number of looks. This parameter is used only for Lee filter with Multiplicative noise model as well as the Enhanced Lee filter.')], HRESULT, 'NLooks',
              ( ['retval', 'out'], POINTER(c_int), 'NLooks' )),
    COMMETHOD(['propput', helpstring(u'The extent of damping applied. This parameter is used only for Enhanced Lee filter and Frost filter.')], HRESULT, 'DampFactor',
              ( ['in'], c_double, 'DampFactor' )),
    COMMETHOD(['propget', helpstring(u'The extent of damping applied. This parameter is used only for Enhanced Lee filter and Frost filter.')], HRESULT, 'DampFactor',
              ( ['retval', 'out'], POINTER(c_double), 'DampFactor' )),
]
################################################################
## code template for ISpeckleFunctionArguments implementation
##class ISpeckleFunctionArguments_Impl(object):
##    def _get(self):
##        u'The mean multiplicative noise. This parameter is used only for Lee filter with Multiplicative or Additive and Multiplicative(both) noise models.'
##        #return mulNoiseMean
##    def _set(self, mulNoiseMean):
##        u'The mean multiplicative noise. This parameter is used only for Lee filter with Multiplicative or Additive and Multiplicative(both) noise models.'
##    MultiplicativeNoiseMean = property(_get, _set, doc = _set.__doc__)
##
##    def Raster(self, ppRaster):
##        u'The source raster object.'
##        #return 
##
##    def _get(self):
##        u'The extent of damping applied. This parameter is used only for Enhanced Lee filter and Frost filter.'
##        #return DampFactor
##    def _set(self, DampFactor):
##        u'The extent of damping applied. This parameter is used only for Enhanced Lee filter and Frost filter.'
##    DampFactor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The mean additive noise. This parameter is used only for Lee filter with Additive and Multiplicative(both) noise models.'
##        #return addNoiseMean
##    def _set(self, addNoiseMean):
##        u'The mean additive noise. This parameter is used only for Lee filter with Additive and Multiplicative(both) noise models.'
##    AdditiveNoiseMean = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The noise variance. This parameter is used only for Lee filter with Additive or Additive and Multiplicative(both) noise models.'
##        #return noiseVar
##    def _set(self, noiseVar):
##        u'The noise variance. This parameter is used only for Lee filter with Additive or Additive and Multiplicative(both) noise models.'
##    NoiseVariance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The type of the speckle filter.'
##        #return pType
##    def _set(self, pType):
##        u'The type of the speckle filter.'
##    FilterType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The size of the speckle filter kernel.'
##        #return pSize
##    def _set(self, pSize):
##        u'The size of the speckle filter kernel.'
##    FilterSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The number of looks. This parameter is used only for Lee filter with Multiplicative noise model as well as the Enhanced Lee filter.'
##        #return NLooks
##    def _set(self, NLooks):
##        u'The number of looks. This parameter is used only for Lee filter with Multiplicative noise model as well as the Enhanced Lee filter.'
##    NLooks = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The speckle noise model. This parameter is used only for the Lee filter type.'
##        #return Type
##    def _set(self, Type):
##        u'The speckle noise model. This parameter is used only for the Lee filter type.'
##    NoiseModel = property(_get, _set, doc = _set.__doc__)
##

IMultibandFilter._methods_ = [
    COMMETHOD([helpstring(u'Gets a given pixel filter.')], HRESULT, 'GetFilter',
              ( ['in'], c_int, 'iBand' ),
              ( ['retval', 'out'], POINTER(POINTER(IPixelFilter)), 'ppFilter' )),
]
################################################################
## code template for IMultibandFilter implementation
##class IMultibandFilter_Impl(object):
##    def GetFilter(self, iBand):
##        u'Gets a given pixel filter.'
##        #return ppFilter
##

IColormapFilter._methods_ = [
    COMMETHOD([helpstring(u'Matches colors from second colormap to that of the first colormap.')], HRESULT, 'Match',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterColormap), 'cm1' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRasterColormap), 'cm2' ),
              ( ['in'], c_int, 'ncolors' )),
]
################################################################
## code template for IColormapFilter implementation
##class IColormapFilter_Impl(object):
##    def Match(self, cm1, cm2, ncolors):
##        u'Matches colors from second colormap to that of the first colormap.'
##        #return 
##

IGeometricFunctionArguments._methods_ = [
    COMMETHOD(['propget', helpstring(u'The source raster object.')], HRESULT, 'Raster',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppRaster' )),
    COMMETHOD(['propputref', helpstring(u'The source raster object.')], HRESULT, 'Raster',
              ( ['in'], POINTER(IUnknown), 'ppRaster' )),
    COMMETHOD(['propget', helpstring(u'The Digital Elevation Model (DEM) for orthorectification.')], HRESULT, 'DEM',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'ppDEM' )),
    COMMETHOD(['propputref', helpstring(u'The Digital Elevation Model (DEM) for orthorectification.')], HRESULT, 'DEM',
              ( ['in'], POINTER(IUnknown), 'ppDEM' )),
    COMMETHOD(['propget', helpstring(u'The constant Z value in meters.')], HRESULT, 'ConstantZ',
              ( ['retval', 'out'], POINTER(c_double), 'z' )),
    COMMETHOD(['propput', helpstring(u'The constant Z value in meters.')], HRESULT, 'ConstantZ',
              ( ['in'], c_double, 'z' )),
    COMMETHOD(['propget', helpstring(u'The conversion factor from DEM Z unit to meters.')], HRESULT, 'ZFactor',
              ( ['retval', 'out'], POINTER(c_double), 'ZFactor' )),
    COMMETHOD(['propput', helpstring(u'The conversion factor from DEM Z unit to meters.')], HRESULT, 'ZFactor',
              ( ['in'], c_double, 'ZFactor' )),
    COMMETHOD(['propget', helpstring(u'The Z offset in meters applied to DEM.')], HRESULT, 'ZOffset',
              ( ['retval', 'out'], POINTER(c_double), 'ZOffset' )),
    COMMETHOD(['propput', helpstring(u'The Z offset in meters applied to DEM.')], HRESULT, 'ZOffset',
              ( ['in'], c_double, 'ZOffset' )),
    COMMETHOD(['propget', helpstring(u'Indicates if Geoid correction is needed.')], HRESULT, 'CorrectGeoid',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pCorrection' )),
    COMMETHOD(['propput', helpstring(u'Indicates if Geoid correction is needed.')], HRESULT, 'CorrectGeoid',
              ( ['in'], VARIANT_BOOL, 'pCorrection' )),
    COMMETHOD(['propget', helpstring(u'The geodata transformation.')], HRESULT, 'GeodataXform',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeodataXform)), 'ppXf' )),
    COMMETHOD(['propputref', helpstring(u'The geodata transformation.')], HRESULT, 'GeodataXform',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IGeodataXform), 'ppXf' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the the geodata transformation is appended to the existing one from the input raster.')], HRESULT, 'AppendGeodataXform',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pAppendXform' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the the geodata transformation is appended to the existing one from the input raster.')], HRESULT, 'AppendGeodataXform',
              ( ['in'], VARIANT_BOOL, 'pAppendXform' )),
]
################################################################
## code template for IGeometricFunctionArguments implementation
##class IGeometricFunctionArguments_Impl(object):
##    def Raster(self, ppRaster):
##        u'The source raster object.'
##        #return 
##
##    def _get(self):
##        u'The Z offset in meters applied to DEM.'
##        #return ZOffset
##    def _set(self, ZOffset):
##        u'The Z offset in meters applied to DEM.'
##    ZOffset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if Geoid correction is needed.'
##        #return pCorrection
##    def _set(self, pCorrection):
##        u'Indicates if Geoid correction is needed.'
##    CorrectGeoid = property(_get, _set, doc = _set.__doc__)
##
##    def GeodataXform(self, ppXf):
##        u'The geodata transformation.'
##        #return 
##
##    def _get(self):
##        u'Indicates whether the the geodata transformation is appended to the existing one from the input raster.'
##        #return pAppendXform
##    def _set(self, pAppendXform):
##        u'Indicates whether the the geodata transformation is appended to the existing one from the input raster.'
##    AppendGeodataXform = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The conversion factor from DEM Z unit to meters.'
##        #return ZFactor
##    def _set(self, ZFactor):
##        u'The conversion factor from DEM Z unit to meters.'
##    ZFactor = property(_get, _set, doc = _set.__doc__)
##
##    def DEM(self, ppDEM):
##        u'The Digital Elevation Model (DEM) for orthorectification.'
##        #return 
##
##    def _get(self):
##        u'The constant Z value in meters.'
##        #return z
##    def _set(self, z):
##        u'The constant Z value in meters.'
##    ConstantZ = property(_get, _set, doc = _set.__doc__)
##

class IThreadedOperationParameters2(IThreadedOperationParameters):
    _case_insensitive_ = True
    u'Provides access to members that control threaded operation parameters.'
    _iid_ = GUID('{75901A83-B135-4ACC-8354-64DC9B945B6C}')
    _idlflags_ = ['oleautomation', 'hidden']
IThreadedOperationParameters2._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The server object name identifying the service where parts of the associated operation may be remotely executed.')], HRESULT, 'ServerObjectName',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName), 'ppName' )),
    COMMETHOD(['propget', helpstring(u'The server object name identifying the service where parts of the associated operation may be remotely executed.')], HRESULT, 'ServerObjectName',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IName)), 'ppName' )),
]
################################################################
## code template for IThreadedOperationParameters2 implementation
##class IThreadedOperationParameters2_Impl(object):
##    @property
##    def ServerObjectName(self, ppName):
##        u'The server object name identifying the service where parts of the associated operation may be remotely executed.'
##        #return 
##

class SpeckleFunctionArguments(CoClass):
    u'A class for speckle raster function arguments.'
    _reg_clsid_ = GUID('{E0A62507-3AB0-42E9-B3A0-A58CD1FF0D6E}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8F0541A3-D5BE-4B3F-A8D9-062D5579E19B}', 10, 2)
SpeckleFunctionArguments._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRasterFunctionArguments, ISpeckleFunctionArguments, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

__all__ = ['esriRasterCatalogItemCategory', 'IItemPaths',
           'E_MOSAIC_UNKNOWN', 'E_MOSAIC_NO_PIXELSIZE',
           'ICreateMosaicDatasetParameters', 'IRasterCatalogTable',
           'E_RASTER_CANNT_BUILD_VAT', 'esriRasterLasDataType',
           'MosaicLODInfos', 'esriImportGeometryTargetSeamline',
           'PushbroomUtilities', 'E_RASTER_FAILED_TO_RENAME_DATASET',
           'E_RASTER_CANT_FIND_FORMAT_FUNCTION',
           'PanSharpenGramSchmidtFunction', 'IRasterStatus',
           'IItemTemplate2', 'esriRasterCISaturationBand',
           'Spot6FileCrawler', 'esriRasterCIHueBand',
           'esriRasterLasClassGround', 'IDataSourceCrawler',
           'IMosaicFunction', 'esriRasterLasReturnFourth',
           'esriCellSizeLevelCategoryPrimary',
           'IPansharpeningFilter2', 'esriSpeckleNoiseMultiplicative',
           'esriSpeckleFilterKernel', 'ArithmeticFunction',
           'ComplexFunction', 'esriRasterLasClassBridgeDeck',
           'IMosaicDataset', 'esriSpeckleNoiseAdditive',
           'E_MOSAIC_INVALID_OVERVIEW_CELL_SIZE',
           'esriImageBlockingType', 'IOverviewImageParameters',
           'IRasterColormap4', 'IRasterItemFunctionArguments',
           'E_MOSAIC_CANNOT_UPDATE_ITEM_COLOR_CORRECTION',
           'IRasterInfo', 'IAISImageServerManager',
           'esriBuildFootprintsByShrinking', 'IItemURI',
           'PolygonMeasurement', 'ApplanixBuilder',
           'IRasterBandEdit2', 'TiePoint', 'E_MOSAIC_INSERT_ROW',
           'E_MOSAIC_ERRORS_BUILDING_BOUNDARY',
           'E_MOSAIC_CANNOT_PROJECT_TO_MD_SR', 'IPixelFilter',
           'esriRasterClippingType',
           'E_RASTER_FAILED_TO_CREATE_DATASET',
           'IRasterDatasetBuilder', 'esriRasterLasVoidFillPlaneIDW',
           'IDEWCSCoverage', 'esriColorspaceConversionType',
           'esriFocalStatisticMin', 'IAddNewerRastersParameters',
           'E_MOSAIC_CANNOT_CREATE_FOLDER',
           'DeleteMosaicDatasetParameters', 'esriRasterDimension',
           'ILasDatasetBuilder', 'TableBuilder',
           'E_MOSAIC_CANNOT_UPDATE_RASTER_VALUE', 'MapPoint',
           'IFileCrawler', 'Scalar', 'esriSpeckleFilterType',
           'ContrastBrightnessFunction', 'IStatsHistogram2',
           'esriCrawlerDataSourceTypeImageService',
           'SeamlineTaskInfo', 'esriCrawlerDataSourceTypeSearchItem',
           'IRasterGeometryProc3', 'IRasterTypeItemURI2',
           'E_RASTER_FAILED_TO_CREATE_CATALOG_ITEM',
           'E_MOSAIC_NOTHING_SELECTED', 'ILasBuilder',
           'IFunctionRasterDataset2', 'IRasterCommandResult',
           'IQueryPathsParameters2', 'ITerrainBuilder',
           'esriRasterRemoveHazeDarkPixel', 'IPixelBlock2',
           'esriRasterLasClassModelKeyPoint', 'BlendMosaicker',
           'CachedRasterFunctionArguments', 'IPixelBlock4',
           'IGrayscaleFunctionArguments',
           'IBuildFootprintsByGeometryParameters',
           'IRemoveItemsParameters', 'IOverviewTileParameters',
           'GenerateOverviewsParameters',
           'esriRasterLasClassNeverClassified',
           'SimplePixelResampler', 'E_MOSAIC_INVALID_FILE',
           'E_RASTER_FAILED_TO_REGISTER_FORMAT', 'esriGeoTransSpline',
           'esriDuplicateItemsOverwrite',
           'E_RASTER_FAILED_TO_ALTER_HISTOGRAM',
           'esriRasterLasCellAggregationType',
           'esriRasterSdePyramidDonotBuild', 'DmciiBuilder',
           'MultiPartItemURI', 'esriGeoTransTypeEnum',
           'IStretchFunctionArguments', 'ColormapToRGBFunction',
           'E_RASTER_FAILED_TO_COPY_DATASET',
           'esriRadarPolarizationHH_HV', 'IRasterWorkspace3',
           'E_MOSAIC_NO_FRAMES', 'esriRasterFormatSupportLevel',
           'E_MOSAIC_ABORT', 'RasterStatistics',
           'MergeRastersFunctionArguments',
           'esriRasterFilterSmoothing5x5', 'esriRadarPolarizationHH',
           'esriTileState', 'IRasterBand',
           'E_MOSAIC_CANNOT_EDIT_REFERENCED_DATASET',
           'esriMosaicCenter', 'RadarCalibrationFunctionArguments',
           'E_MOSAIC_SYNC_CANNOT_UPDATE_STEREO_TABLE',
           'esriCrawlerDataSourceTypeOverviewItem',
           'IReflectanceFunctionArguments', 'IRasterWorkspace',
           'ExcludedAreaFunctionArguments', 'ISATBuilder',
           'RenderedRasterFunction', 'RasterCursor',
           'IRasterXformHelper', 'esriMatchPointRefinementType',
           'E_MOSAIC_NO_AVERAGEZ', 'E_MOSAIC_NO_ITEMS_TO_SPLIT',
           'HistogramSpecification', 'E_INVALID_RASTER_COMMAND',
           'E_MOSAIC_MISSING_MOSAIC_FUNCTION',
           'esriRasterLasCellMeanDistanceWeighted',
           'CompositeURIFilter', 'ISynchronizeParameters2',
           'esriMosaicDatasetSideTableRasterType',
           'esriSpeckleFilterKernel7x7', 'IRasterConvolutionFilter',
           'esriRasterLasClassWireStructureConnector',
           'GrayscaleFunctionArguments',
           'esriRasterFilterGradientNorthEast',
           'E_MOSAIC_CANNOT_RECOMMEND_CRAWLER', 'SplineXform',
           'esriRasterCatalogItemCategoryPrimary',
           'CustomMensuration', 'ISelectionParameters', 'DrLoader',
           'esriRasterFilterPointSpread', 'esriRasterStretchGaussian',
           'esriGeoTransPolyOrderUndefined', 'IMergeItemsParameters2',
           'RasterItemFunction', 'esriApplanixCameraModelDSS322',
           'E_MOSAIC_CAN_BUILD_MISSING_IN_SENSOR_TYPE',
           'IImageFeaturePoints', 'esriRasterCIPaletteIndex',
           'RadarCalibrationFunction', 'IRasterFunction3',
           'E_RASTER_INVALID_RASTER_VALUE', 'esriRasterProperties',
           'esriCrawlerDataSourceTypeCustom',
           'E_MOSAIC_UNBUILDABLE_ITEMS', 'IFrameCameraParameters',
           'esriRasterKonradyUSGS', 'IRasterTable', 'IBinFunction2',
           'ConvolutionFunctionArguments', 'IRPFItemURI',
           'IStockConvolutionFilter', 'TableFunctionArguments',
           'MM_REJECT', 'esriBandArithmeticPVI', 'PixFileCrawler',
           'esriRasterLasCellMin', 'AddNewerRastersParameters',
           'E_FUNCTION_CANNOT_CREATE_CACHE_DIR',
           'GeoTransformationHelper', 'AddRastersParameters',
           'ITableFunctionArguments', 'IRasterCollection',
           'ReprojectFunctionArguments',
           'E_MOSAIC_CANNOT_FILTERGEOMETRY', 'DblPnt',
           'SdeRasterCatalogTable', 'ExtractBandFunction',
           'CreateMosaicDatasetParameters',
           'ExtractBandFunctionArguments',
           'E_FUNCTION_MISSING_BAND_WAVELENGTH_PROPERTIES',
           'esriRasterSdePyramidBuildWithFirstLevel',
           'esriRasterStretchType', 'ICoordinateXform',
           'IFunctionRasterDatasetName', 'CsvCrawler',
           'esriBuildSeamlinesMethod',
           'esriMosaicDatasetSideTableView',
           'IShadedReliefFunctionArguments',
           'IRasterFunctionTemplate2', 'esriDCUTypeDecimalDegrees',
           'IRasterFunctionCollection', 'esriRasterThresholdType',
           'esriBuildSeamlinesByCopyFootprint',
           'HillshadeFunctionArguments', 'esriRasterFilterTypeEnum',
           'IRasterFunctionVariable', 'TableCrawler',
           'AnalyzeParameters', 'IIndexedItemURI',
           'IURIPropertiesFilter', 'INDVIFunctionArguments2',
           'E_MOSAIC_SYNC_CANNOT_UPDATE_ROW', 'IRasterDatasetCrawler',
           'esriRasterPrjMethodUserDefinedBlkSize',
           'IUniqueStringValues2', 'esriMosaicNadir',
           'IMatchATBuilder', 'esriCenterBlocking',
           'esriFunctionRasterDatasetPropertyGeodataXform',
           'IImportGeometryParameters', 'esriRasterLasReturnFirst',
           'SAIFunction', 'RasterBands', 'IFocalMeanFilter',
           'esriBandArithmeticGVITM', 'esriFocalStatisticMean',
           'E_FUNCTION_NBANDS_MISMATCH', 'StretchFunction',
           'esriCachedRasterCompressionLossy',
           'E_MOSAIC_CANNOT_PROCESS_BUILT_ITEMS',
           'MosaicDatasetSelectionParameters',
           'esriCellSizeLevelCategory', 'PointMeasurement',
           'E_MOSAIC_CANNOT_GET_RASTER_DEF', 'esriBandArithmeticNDVI',
           'KompsatBuilder', 'INoDataFilter', 'IPixelFilter2',
           'IPixelFilter3', 'esriRasterPaintMethod',
           'E_MOSAIC_INCOMPATIBLE_VERSION',
           'esriFunctionRasterDatasetPropertyStatistics',
           'esriImportGeometryTargetBoundary',
           'SpeckleFunctionArguments', 'FunctionRasterDataset',
           'IScalar', 'esriRasterStretchHistogramSpecification',
           'E_MOSAIC_UNKNOWN_SRS', 'ISeamlineModifier',
           'RasterPicture', 'esriRasterSdePyramidOptEnum',
           'IDeleteMosaicDatasetParameters', 'IItemPathsQuery',
           'esriDistortionTypeRadial', 'IRasterGeometryProc',
           'IRasterStatusEvent', 'IUniqueDoubleValues2',
           'QueryPathsParameters', 'ISeamlineTaskInfo2',
           'PanSharpenGramSchmidtFunctionArguments',
           'esriImageAdjustmentType',
           'E_MOSAIC_INVALID_OVERVIEW_ITEM_FIELD_VALUES',
           'E_MOSAIC_UNPROCESSED_OVERVIEWS_FOUND',
           'esriRasterCIBlackBand', 'esriRasterLoaderError',
           'esriRasterCatalogItemCategoryPartialOverview',
           'esriRasterLasReturnTenth', 'esriRasterLasReturnAny',
           'esriRasterThresholdOtsu', 'E_MOSAIC_CANNOT_PROCESS_ITEM',
           'E_MOSAIC_MISSING_ITEM_DATA_SOURCE',
           'RasterItemFunctionArguments', 'ItemPathsOptions',
           'ICompositeURIFilter', 'ICachedRasterFunctionArguments',
           'esriRasterCIYellowBand', 'IMapPoint', 'IERasterStatus',
           'esriRasterPrjMethodPieceWise2', 'esriGeoTransPolyOrder0',
           'esriGeoTransPolyOrder1', 'esriGeoTransPolyOrder2',
           'esriGeoTransPolyOrder3', 'esriRasterLasReturnEleventh',
           'esriMosaicDatasetSideTableLevels',
           'rstRepresentationType',
           'esriRasterRemoveHazeDarkPixelSlide',
           'esriRasterFormatSupportCore',
           'esriMosaicDatasetSideTableCache',
           'IFocalStatisticsFilter', 'E_RASTER_MOSAIC_NOT_LICENSED',
           'esriApplanixCameraModel', 'QuickBirdBuilder',
           'IRasterHistogram', 'MaskFunctionArguments',
           'IUniqueMutliStringValues', 'esriRasterMinus',
           'esriRasterCIRGB32', 'IRasterSdeStorage',
           'E_RASTERLOADER_UNKNOWN_ERROR', 'esriRasterCIYCbCrCrBand',
           'ITiePointOperation', 'MosaicWorkspaceExtensionHelper',
           'esriRasteraPrjMethodPieceWise1',
           'E_RASTER_FAILED_TO_OPEN_CATALOG', 'SimplePixelReader',
           'IRasterTypeFactory', 'E_MOSAIC_NO_CAMINFO',
           'SpectralConversionFunction', 'esriRasterMode',
           'esriRasterFilterSharpening5x5',
           'IRasterTypeDataSourceHandlerParameters',
           'RasterConvolutionFilter', 'MT_FIRST',
           'esriRasterFunctionErrors', 'E_MOSAIC_CANNOT_GET_UNION',
           'esriRasterFilterLaplacian3x3', 'FileItemURI',
           'IRasterInfoFunctionArguments', 'esriRasterNoData',
           'IRasterFunctionArguments', 'IRPCXform', 'ClipFilter',
           'RasterHistograms', 'esriRasterCIMagentaBand',
           'esriCrawlerDataSourceTypeCatalogItem', 'MT_MAX',
           'StretchFunctionArguments',
           'esriRasterSdePyramidBuildSkipFirstLevel', 'IFormatTest',
           'E_MOSAIC_DISJOINT_OVERVIEW_TILE',
           'RemapFunctionArguments', 'BasicRasterSdeLoader',
           'IItemPaths2', 'esriRasterFilterGradientNorth',
           'RPFBuilder', 'RasterGeometryProc',
           'E_MOSAIC_CANNOT_SYNC_MERGED_ITEM',
           'esriRasterStretchNone', 'RapidEyeBuilder',
           'esriGeoTransRubberSheeting',
           'E_MOSAIC_CANNOT_COMPUTE_LOW_HIGH_CELL',
           'E_MOSAIC_MISSING_FOOTPRINT_SR',
           'IBuildBoundaryParameters',
           'IExcludedAreaFunctionArguments',
           'E_MOSAIC_CREATE_INSERT_CURSOR', 'MT_MIN',
           'esriCrawlerDataSourceTypeLasDataset',
           'esriCrawlerDataSourceTypeFile',
           'E_RASTERLOADER_FAILED_TO_LOAD',
           'esriRasterColorInterpretation', 'GCSShiftXform',
           'IRasterTypeProperties', 'DEWMSMap',
           'esriGeometrySimplificationMethodEnvelope',
           'ReflectanceFunction', 'E_MOSAIC_CANNOT_GET_CATALOG_SRS',
           'esriGeometrySimplificationMethodConvexHull',
           'IGeodeticProjection', 'esriGeodataXformApplyOverwrite',
           'MeanMosaicker', 'IDescTable', 'IRasterProps',
           'RasterCatalogTable', 'IExportItemsParameters',
           'esriMosaicDatasetSideTableStereo', 'RasterTypeName',
           'IReplacePathsParameters',
           'esriBuildSeamlinesByRadiometry', 'IRasterServiceHelper2',
           'IRadarBuilder', 'IAISImageService3X',
           'IDefineNoDataParameters',
           'IBuildFootprintsByRadiometryParameters2',
           'E_MOSAIC_INVALID_RASTER_COMMAND_RESULT',
           'IMultibandFilter', 'E_RASTER_CANT_LOAD_FORMAT_DLL',
           'ISdeRasterTableName', 'IRasterType', 'FrameXform',
           'IMaskFunctionArguments2', 'IExportGeometryParameters',
           'SlopeFunctionArguments', 'ICalculateStatisticsParameters',
           'IDownsampleFunctionArguments', 'MM_LAST',
           'ArithmeticFunctionArguments',
           'esriFrameCameraUnitsDecimeters', 'esriRasterLasClassRail',
           'IRasterInfos', 'IRawPixels', 'ItemTemplate',
           'esriRasterFilterLineDetectionRightDiagonal',
           'DEImageServer', 'E_RASTER_TOO_MANY_UNIQUE_VALUES',
           'IRasterFunction2', 'IRasterServiceHelper',
           'ISearchBuilder', 'E_RASTER_NOT_ENOUGH_LINKS',
           'esriRasterLasVoidFillTinNaturalNeighbor',
           'RasterCalcUniqueValues', 'IBuildBoundaryParameters2',
           'ILasToRasterFunctionArguments',
           'esriCrawlerDataSourceTypeDatasetName',
           'esriDuplicateItemsAction',
           'esriRasterLasClassLowVegetation', 'SlopeFunction',
           'IFocalStatisticsFilter2', 'esriRasterLasReturnFourteenth',
           'IQueryPathsParameters', 'ICustomXform',
           'SynchronizeParameters', 'StatsHistogram',
           'esriRasterLasReturnSixth', 'esriRequestSizeTypePixelSize',
           'IMergeItemsParameters', 'StatisticsFunction',
           'IBandArithmeticFunctionArguments',
           'IBuildFootprintsParameters', 'IUniqueStringValues',
           'ClipFootprintToMosaic', 'ISeamlineModifierInit',
           'E_MOSAIC_FOOTPRINT_OUTSIDE_HORIZON',
           'E_MOSAIC_SYNC_CANNOT_UPDATE_CATALOG',
           'RasterFunctionCollection',
           'E_MOSAIC_CANNOT_INIT_PARALLEL_PROCESSING',
           'esriRasterLasClassTransmissionTower',
           'RasterCommandResult',
           'E_FUNCTION_MATCHING_BAND_WAVELENGTH_NOT_FOUND',
           'IRasterCommand', 'SocetSetBuilder',
           'esriRasterResamplingType', 'RemoveItemsParameters',
           'IMosaicDatasetOperation',
           'esriBuildSeamlinesByEdgeDetection',
           'esriRasterLasReturnTwelfth', 'IStatsHistogram3',
           'IBuildPyramidsParameters', 'RasterCatalogLoader',
           'esriRasterLasVoidFillTinLinear', 'TrendFunctionArguments',
           'esriImportGeometryTarget',
           'esriTileStateResampledOnNoData',
           'esriSpeckleFilterKernel11x11', 'esriImageAdjustmentReset',
           'E_RASTER_FILE_INVALID_EXTENSION', 'IPixelResampler',
           'DownsampleFunction',
           'E_MOSAIC_LEVELS_TABLE_SCHEMA_NOT_UPGRADED', 'DT_THEMATIC',
           'esriNoDataInterpretation', 'IRasterResamplingControl',
           'IArithmeticFunctionArguments2',
           'esriCrawlerDataSourceType', 'esriRadarCalibrationNone',
           'esriRasterKonradyESRI', 'IRasterGeometryProc2',
           'ISpectralConversionFunctionArguments', 'PixFileBuilder',
           'esriRasterStretchStandardDeviation',
           'esriRasterFilterNone', 'TerrainBuilder',
           'IRasterFunctionHelper', 'LutFilter',
           'IRasterBandColormap', 'RasterLoader', 'esriSlopeDegree',
           'E_MOSAIC_RASTER_TYPE_UNSUPPORTED_PIXEL_TYPE',
           'E_MOSAIC_VALIDATION_LIDAR_CELLSIZE', 'ISeamlineTaskInfo',
           'E_MOSAIC_CANNOT_REFRESH_CACHE', 'AspectFunction',
           'esriRasterCatalogItemCategoryUnknown',
           'IClipFunctionArguments', 'esriGeodataXformApplyMethod',
           'IMosaicFunctionArguments2', 'esriMissingBandAction',
           'ICalculateCellSizeRangesParameters', 'ThresholdFunction',
           'IPixelReader2', 'FootprintFunction',
           'E_MOSAIC_FAILED_TO_OPEN_DATASET', 'esriRasterLasCellMax',
           'IStatsHistogram', 'E_MOSAIC_OVERVIEW_SLIVER', 'MT_LAST',
           'ICoordinateXform2', 'esriRasterLasClassHighVegetation',
           'esriRasterFilterGradientWest', 'esriSpeckleFilterLee',
           'E_MOSAIC_DEFINE_NODATA_FAILED', 'IItemURIFilter',
           'RasterXformer', 'IComputeDirtyAreaParameters',
           'esriImageAdjustmentApply', 'esriRasterClippingInside',
           'IDistanceMeasurement',
           'esriCachedRasterCompressionLossless',
           'esriFrameCameraUnitsCentimeters',
           'esriRasterFilterUserDefined', 'esriRasterCICyanBand',
           'E_MOSAIC_NOT_OWNER', 'esriCrossCorrelationRefinement',
           'LasBuilder', 'IRasterLoader', 'IMosaicRaster2',
           'IReprojectFunctionArguments', 'IRasterSdeStorage2',
           'IImageFeaturePoint', 'E_MOSAIC_NO_ITEMS_SELECTED',
           'IPanSharpenGramSchmidtFunctionArguments',
           'E_MOSAIC_UPDATE_ROW', 'DblRect', 'IDEMosaicDataset',
           'RasterHistogram', 'ImageFeaturePoint',
           'E_MOSAIC_CANNOT_PREPARE_SCHEMA',
           'IRasterAttributeTableManager', 'RasterTypeItemURI',
           'esriBlendType', 'esriBandArithmeticSultan',
           'IWorldFileExport2',
           'esriRasterCatalogTypeMilitaryAnalyst',
           'IRasterTypeDataSourceHandlerParameters2', 'RasterStatus',
           'SplitMergedItemsParameters', 'IRasterXformer',
           'ClipFunction', 'DefineOverviewsParameters',
           'esriRasterBandArithmeticMethod',
           'esriRasterFilterGradientEast',
           'esriCachedRasterCompressionType', 'OverviewBuilder',
           'E_FUNCTION_MISSING_BAND',
           'E_MOSAIC_COMPUTE_FOOTPRINT_FAILED', 'IRasterMapModel',
           'KompsatFileCrawler', 'E_MOSAIC_NO_ROWS', 'esriRasterPlus',
           'esriRasterFilterLaplacian5x5',
           'esriRasterLasVoidFillMethod', 'esriGeoTransProjective',
           'ConstantFunctionArguments',
           'E_MOSAIC_SYNC_CANNOT_BUILD_THUMBNAIL',
           'esriGeodataXformApplyAppend', 'RemapFunction',
           'IFormatData', 'RPCXform', 'MosaicRaster',
           'IBuildFootprintsByRadiometryParameters',
           'OverviewItemURI', 'esriRadarPolarizationHH_VV_HV_VH',
           'IXForm', 'IRawPixelReader', 'MT_CUSTOM', 'RasterInfo',
           'IGCSShiftXform', 'ITableBuilder',
           'E_MOSAIC_CANNOT_CREATE', 'IThreadedOperationParameters',
           'E_MOSAIC_CANNOT_CONVERT_RASTER_PROCESS',
           'esriMosaicSeamline', 'E_RASTER_FILE_FAILED_TO_COPY',
           'E_MOSAIC_CANNOT_PROCESS_ANALYSIS_RESULTS',
           'SAIFunctionArguments', 'IGenerateOverviewsParameters',
           'esriRequestSizeTypePixels', 'RGB32ToRGBFunction',
           'TableFunction', 'esriDistortionTypeKonrady',
           'IStatisticsFunctionArguments2',
           'esriBuildFootprintsMethods', 'URIPropertiesFilter',
           'PolynomialXform', 'esriRadarCalibration',
           'esriRasterFilterGradientSouth', 'TrendFunction',
           'RasterInfoFunctionArguments',
           'IPansharpeningFunctionArguments', 'esriSlopeScaled',
           'AISImageServerManager', 'IRasterCalcStatsHistogram2',
           'IRasterCalcStatsHistogram3', 'IHistogramSpecification',
           'esriNoDataMatchAll', 'esriGeoidTypeUnknown',
           'PleiadesFileCrawler', 'RasterDatasetCrawler',
           'IRemoveItemsParameters2', 'IMensuration', 'UniqueValues',
           'IRasterPyramid3', 'esriRasterLasReturnSeventh',
           'IRaster2', 'esriRasterFilterSmoothing3x3', 'SPOT5Xform',
           'IMultiPartItemURI', 'CellSizeLevels', 'ISpeckleFilter',
           'QuickBirdFileCrawler', 'IPixelFilterCollection',
           'esriGeoidTypeWGS84EGM96', 'IRasterPyramid2',
           'IBuildFootprintsParameters2',
           'esriApplanixCameraModelDSS439',
           'RasterFunctionTemplateArguments', 'IOverviewItemURI',
           'FormatList', 'E_MOSAIC_CANNOT_ADD_DATASET',
           'GenericObjectCrawler',
           'esriRasterFilterLineDetectionVertical',
           'IRasterTransaction', 'esriRasterCIBlueBand',
           'MergeRastersFunction', 'ISimplePixelResampler',
           'E_MOSAIC_CANNOT_GROUP_ITEMS_FOR_MERGING', 'MosaicDataset',
           'IDEWMSMap', 'E_MOSAIC_BAD_DATASET_ENVELOPE',
           'ISensorXform', 'esriMosaicDatasetErrors',
           'esriSpeckleNoiseBoth', 'RasterDomainExtractor',
           'IImageRegistration',
           'E_MOSAIC_RASTER_TYPE_HIGH_RADIOMETRIC_RANGE',
           'esriRandomBlocking', 'IBuilderItem2', 'IItemTemplate',
           'IItemURICompare',
           'E_MOSAIC_DATASET_MISSING_BAND_KEY_PROPERTIES',
           'DEMosaicDataset', 'IRasterStatusEvent2',
           'IExtractBandFunctionArguments2',
           'E_RASTER_FAILED_TO_CALC_STATS', 'esriRasterBandID',
           'E_ESIRGRID_FAILED_TOO_LONG', 'IApplanixBuilder',
           'ICSMXform', 'ICellSizeLevels',
           'esriRasterCatalogItemCategoryUploaded',
           'esriRasterLasClassUnclassified',
           'E_MOSAIC_CANNOT_BUILD_ISDEF_ITEM', 'ConstantFunction',
           'ReprojectFunction', 'ShadedReliefFunctionArguments',
           'esriRadarPolarization', 'E_RASTER_TOO_MANY_DIRECTORIES',
           'IColormapFilter', 'IReplacePathsParameters2',
           'IndexedItemURI', 'StockFrequencyDistributionHistogram',
           'esriRasterFilterSharpen',
           'esriGeometrySimplificationMethodNone',
           'PansharpeningFunction', 'IMosaicWorkspaceExtension',
           'IReflectanceFunctionArguments2',
           'E_MOSAIC_CANNOT_PROCESS_OVERVIEW_ITEM',
           'LandsatMSSBuilder', 'IRasterCacheArguments',
           'IRasterFormatControl', 'E_MOSAIC_CREATE_ROW_BUFFER',
           'esriRasterArithmeticOperation',
           'IRasterCalcUniqueValues2',
           'E_MOSAIC_NO_BOUNDARY_FEATURE_CLASS', 'MT_SUM',
           'esriCellsizeMinOf', 'E_RASTER_OPERATION_CANCELED',
           'ICreateMosaicDatasetParameters2',
           'IRemoveSliversParameters2', 'E_RASTER_CANNT_ALTER_VAT',
           'IFormatList', 'IRawBlocks', 'IRasterCatalogLoader',
           'ISlopeFunctionArguments', 'CellSizeLevel',
           'esriGeometrySimplificationMethod', 'RasterCommand',
           'esriCachedRasterCompressionNone',
           'FunctionRasterDatasetName', 'esriSpeckleFilterKuan',
           'E_RASTER_UNKNOWN_PIXELTYPE', 'ItemURI',
           'E_FUNCTION_MISSING_BAND_IDS', 'esriReferenceGeoidType',
           'ICellSizeLevel2',
           'esriRasterFilterLineDetectionLeftDiagonal',
           'esriCellSizeLevelCategoryOverview', 'HillshadeFunction',
           'esriRadarCalibrationGamma', 'esriRasterLasClassWater',
           'IPansharpeningFilter', 'IThreadedOperationParameters2',
           'rstMosaicOperatorType', 'IRasterTypeEnvironment',
           'esriRasterFilterSobelVertical',
           'ColormapFunctionArguments', 'esriRasterLasCellSum',
           'IRasterBuilderInit2', 'ILSRXform', 'MaskFunction',
           'esriCellsizeFirstOf', 'RadarBuilder', 'IImageMatchPoint',
           'ILasToRasterFunctionArguments2', 'IRasterTypeHistory',
           'ITrendFunctionArguments', 'ITiePoint',
           'IConvolutionFunctionArguments',
           'esriMissingBandActionFail', 'CancelListener',
           'IdentityFunction',
           'esriRasterCatalogItemCategoryUnprocessedOverview',
           'esriRequestSizeTypePixelSizeFactor',
           'IBuildSeamlinesParameters2', 'IBuildSeamlinesParameters3',
           'IGeoTransformationHelper', 'IArrayCrawler', 'IDrLoader',
           'esriRasterCatalogTypeImageService', 'IMosaicFunction3',
           'IBuildPyramidsParameters2', 'esriRasterLasVoidFillSimple',
           'NoDataFilter', 'E_MOSAIC_INVALID_FOOTPRINT_GEOMETRY',
           'esriBandArithmeticSAVI', 'ISplineXform',
           'RasterTypeFactory',
           'IColorspaceConversionFunctionArguments',
           'E_MOSAIC_BUILDER_INIT_CRAWLER',
           'E_MOSAIC_NON_CACHED_MAPSERVICE', 'IPixelReader',
           'esriRasterCISAI32', 'IOverviewBuilder', 'IUniqueValues2',
           'IOverviewTileParameters2',
           'esriMosaicDatasetSideTableCatalog',
           'IRasterSdeServerOperation',
           'esriBlendWidthUnitsGroundUnits', 'GeometricXform',
           'E_RASTER_UNSUPPORTED_PIXEL_TYPE', 'IAISClientObjectX',
           'IMosaicFunction2', 'esriCellSizeLevelCategoryUnknown',
           'SpeckleFunction', 'E_MOSAIC_ADD_CANNOT_BUILD_ITEM',
           'esriRasterPower',
           'E_MOSAIC_CANNOT_PROCESS_EMPTY_SEAMLINE',
           'ClipFunctionArguments', 'BuildFootprintsParameters',
           'IRasterTypeProperties2', 'ImportGeometryParameters',
           'IRasterTypeOperation', 'IPansharpeningFunctionArguments2',
           'esriRasterLasClassWireConductor', 'IRasterEdit',
           'esriNoneRefinement', 'esriRasterFilterGradientNorthWest',
           'E_RASTER_UNSUPPORTED_FORMAT',
           'esriRasterFilterSobelHorizontal',
           'BuildBoundaryParameters', 'esriLeastSquareRefinement',
           'E_MOSAIC_TOO_MANY_ITEMS_SELECTED', 'IEnumRasterBand',
           'esriRasterCatalogType',
           'E_MOSAIC_UNRECOGNIZED_SENSOR_NAME', 'esriMosaicAttribute',
           'PixelBlockCursor', 'IUniqueDoubleValues',
           'RenderedRasterFunctionArguments',
           'E_RASTER_FILE_NOT_FOUND', 'esriRasterLasClassType',
           'esriRasterStretchHistogramEqualization', 'RPFItemURI',
           'esriMosaicDatasetSideTableSeamline',
           'E_FUNCTION_RASTERSIZE_EXCEEDS_LIMIT',
           'ApproximationXform', 'RasterDataset',
           'IGeometricFunctionArguments', 'esriBandArithmeticMSAVI',
           'ColorspaceConversionFunction', 'ExcludedAreaFunction',
           'DefineNoDataParameters',
           'esriColorspaceConversionHSVToRGB', 'DT_EITHER',
           'E_RASTER_ACCESS_IS_DENIED', 'IAnalyzeParameters',
           'esriRasterStretchPercentMinimumMaximum', 'IUniqueValues',
           'E_RASTER_FAILED_TO_OPEN_WORKSPACE',
           'esriRasterLasClassNoisyLowPoint',
           'IMosaicFunctionArguments', 'RasterCalcStatsHistogram',
           'IBasicRasterSdeConnection', 'FolderCrawler',
           'esriDCUTypeUTM', 'IBackgroundFilter',
           'esriRasterRemoveHazeMethod', 'IAngularMeasurement',
           'ReplacePathsParameters', 'IRasterTypeFactory2',
           'IRasterStatus2', 'esriDuplicateItemsExclude',
           'esriesriRasterCatalogItemCategoryCustom',
           'LandsatBuilder', 'esriCrawlerDataSourceTypeFolder',
           'esriFrameCameraUnitsMicrons',
           'E_RASTER_FAILED_TO_OPEN_CONNECTION', 'IFormosat2Xform',
           'IAdjustXform', 'MosaicFunctionArguments',
           'CalculateCellSizeRangesParameters',
           'IThresholdFunctionArguments', 'MosaicFunction',
           'esriRasterLasClassReserved_12', 'esriRasterCIGreenBand',
           'ContrastBrightnessFunctionArguments',
           'ColorspaceConversionFunctionArguments',
           'ITemporaryDataset', 'IRasterDatasetJukebox',
           'esriTileStateRegular',
           'IContrastBrightnessFunctionArguments',
           'IRasterKeyProperties', 'esriDCUTypeDegreesMinutesSeconds',
           'E_MOSAIC_NO_PHFILE', 'esriRasterLasClassAny',
           'IStretchFunctionArguments2', 'IDataSourceCrawler2',
           'esriDistortionType', 'IRasterXformer2',
           'IPixelBlockCursor', 'RasterFunctionHelper',
           'esriBandArithmeticGEMI', 'IRasterCommandResults',
           'IDescColumn', 'IAddRastersParameters',
           'E_MOSAIC_NO_CAMFILE', 'IPixelOperation',
           'DefaultRasterStatusEvent', 'PansharpeningFilter',
           'IGeometricXform', 'HREBuilder', 'IURIProductNameFilter',
           'esriBuildFootprintsByCopyToSiblings', 'DEWCSCoverageType',
           'E_MOSAIC_NO_SHAPE_FIELD', 'E_MOSAIC_NO_IMAGEFOLDER',
           'IRasterPyramid', 'BuilderItem', 'esriRasterCIGrayIndex',
           'esriDCUTypeDegreesDecimalMinutes', 'IDEMosaicDataset2',
           'MM_MATCH', 'RemapFilter',
           'SpectralConversionFunctionArguments',
           'esriMosaicDatasetSideTableAnalysis',
           'IDEMosaicDatasetType', 'E_MOSAIC_RPDEF_INVALID_RASTER_ID',
           'E_RASTER_CANT_MOSAIC_COLORMAPED', 'ImageMatchPoint',
           'E_MOSAIC_NO_COLUMNS', 'RasterNativeType',
           'IRasterBuilder2', 'E_MISSING_RASTER',
           'E_MOSAIC_SYNC_FAILED_FOR_CURRENT_RASTER_TYPE',
           'esriMosaicDatasetSideTableBoundary',
           'E_MOSAIC_CANNOT_WEED', 'E_MOSAIC_NO_ITEM_ADDED',
           'esriRadarPolarizationHV', 'FootprintFunctionArguments',
           'E_RASTER_RENDERER_INVALID_BAND_INDEX',
           'IRasterClassNames', 'esriMosaicNone',
           'esriRasterLasReturnLast', 'RGBToColormapFunction',
           'esriRasterDivide', 'esriRasterLasClassRoadSurface',
           'ISDefBuilder', 'PixelFilterCollection',
           'esriBlendWidthUnits', 'esriMosaicDatasetSideTableLog',
           'ITableCrawler', 'IContrastTable', 'IRasterBuilderInit',
           'E_MOSAIC_CAMFILE_NOTEXISTS', 'IItemURI2',
           'esriPansharpeningType', 'esriMosaicMethod',
           'IAISImageServiceX', 'IConstantFunctionArguments',
           'esriSpeckleFilterFrost', 'IBuildSeamlinesParameters',
           'IPixelBlock3', 'IRasterDatasetContainer',
           'esriMosaicNorthwest', 'IMosaicDatasetOperation2',
           'MosaicRastersFunction', 'BuildSeamlinesParameters',
           'E_RASTER_FAILED_TO_BUILD_PYRAMID', 'esriRequestSizeType',
           'E_3D_TO_RASTER_FUNCTIONS__DIFFERENT_SPATIAL_REFERENCES',
           'Formosat2Xform', 'esriFocalStatisticStandardDeviation',
           'esriDisplayCUTypeUnknown', 'IClipFilter2',
           'IRasterTypeDataSourceHandler2',
           'E_MOSAIC_SYNC_CANNOT_VALIDATE_FOOTPRINT', 'IRasterXform2',
           'E_MOSAIC_SYNC_CANNOT_BUILD_ITEM', 'SdeRasterTableName',
           'SpeckleFilter', 'IItemPathsQuery2',
           'esriBlendWidthUnitsPixels',
           'E_RASTER_FAILED_TO_OPEN_DATASET',
           'IArithmeticFunctionArguments',
           'esriRadarPolarizationVV_VH', 'SeamlineByEdge',
           'E_MOSAIC_CANNOT_OPEN_OVERVIEW_STORAGE',
           'E_MOSAIC_CANNOT_GENERATE_OVERVIEW_IMAGE',
           'RasterFunctionVariable', 'E_MOSAIC_CANNOT_GET_RASTER_SRS',
           'esriCrawlerDataSourceTypeRasterDataset',
           'esriBandArithmeticTSAVI',
           'esriRasterFilterSmoothArithmeticMean',
           'esriRasterThresholdKittler',
           'esriFunctionRasterDatasetPropertyHistograms',
           'E_RASTER_IN_LOAD_ONLY', 'IPushbroomUtilities',
           'IFootprintFunctionArguments', 'ITiePointCollection',
           'DERasterUtilities', 'esriCrawlerDataSourceTypeUnknown',
           'RasterDataManagementEventsHelper', 'IProjectiveXform',
           'IRasterFunctionTemplate', 'CompositeBandFunction',
           'esriRasterThresholdKapur', 'IRasterFunctionTemplate3',
           'E_RASTER_FAILED_TO_WRITE_AUX', 'esriPansharpeningMean',
           'esriRasterMultiply', 'PixelBlock', 'IRasterInfo2',
           'IRasterCalcUniqueValues', 'FocalStatisticsFilter',
           'esriMosaicDatasetSideTable', 'ICachedRasterFunction',
           'RasterFunctionTemplate', 'rstMosaicColormapMode',
           'E_RASTER_DATASET_EXIST', 'esriExtentLastOf',
           'esriRasterThresholdConstant', 'E_RASTER_INVALID_CELLSIZE',
           'esriRegularBlocking', 'esriCellsizeType',
           'E_MOSAIC_BOUNDARY_OUTSIDE_HORIZON',
           'IMosaicDatasetOperationParameters2',
           'E_MOSAIC_INVALID_CSV_FILE', 'IDEImageServerType',
           'RasterWorkspaceFactory', 'AdjustXform',
           'esriRasterPrjMethodTypeEnum', 'CompositeXform',
           'IkonosFileCrawler', 'IPointMeasurement',
           'RasterWorkspace', 'IAISImageService2X',
           'esriMosaicDatasetSideTableStatus',
           'ISAIFunctionArguments', 'IRasterSdeCatalog',
           'IRasterStatus3', 'MergeItemsParameters',
           'esriDCUTypeMGRS', 'E_RASTER_FAILED_TO_ALTER_GEODATAXFORM',
           'PansharpeningFunctionArguments',
           'esriRasterLasReturnThird', 'esriCellsizeMeanOf',
           'esriRasterPrjMethodGlobal', 'IRasterTypeItemURI',
           'ItemTemplateArray', 'ICompositeXform',
           'E_3D_TO_RASTER_FUNCTIONS__MISSING_3DANALYST_LICENSE',
           'esriRasterLasReturnThirteenth', 'DEWMSMapType',
           'esriSlopeType', 'IStockFrequencyDistributionHistogram',
           'IBuildFootprintsByShrinkingParameters',
           'ISplitMergedItemsParameters', 'IRasterCommands',
           'IRasterDefaultProps', 'IGeodataXformApproximation',
           'E_RASTER_FILE_FAILED_TO_RENAME', 'IFileItemURI',
           'IMaskFunctionArguments', 'IDEWCSCoverageType',
           'CoordinateXform', 'IRasterStatistics2',
           'esriRadarPolarizationAll',
           'ILasDatasetToRasterFunctionArguments',
           'esriRasterRemoveHazeHOT', 'MM_FIRST',
           'ExportGeometryParameters', 'esriRasterKonradyType',
           'esriRasterFilterLineDetectionHorizontal',
           'E_MOSAIC_NO_FOCALLENGTH', 'esriRasterLasReturnType',
           'E_MOSAIC_INVALID_SEARCH_CRAWLER',
           'esriRasterCatalogItemCategoryOverview',
           'GrayscaleFunction', 'IItemPathsOptions',
           'ISimplePixelReader', 'IFolderSort',
           'IMosaicWorkspaceExtensionHelper', 'esriFrameCameraUnits',
           'RasterInfos', 'GeometricFunction', 'MultibandFilter',
           'esriRasterLasClassWireGuard', 'ILutFilter', 'CSMXform',
           'E_MOSAIC_RASTER_TYPE_NON_PERSISTENT',
           'esriRasterLasReturnNinth',
           'E_RASTER_FAILED_TO_ALTER_STATS', 'IFrameXform',
           'esriFocalStatisticMax', 'IMergeRastersFunctionArguments',
           'INDVIFunctionArguments', 'URIProductNameFilter',
           'IRemoveSliversParameters', 'IRemapFunctionArguments',
           'esriRasterLasReturnFifteenth',
           'IRenderedRasterFunctionArguments',
           'E_MOSAIC_VALIDATION_LASDATASET_CELLSIZE',
           'E_RASTER_VAT_COUNT_TOO_LARGE',
           'esriTileStateResampledOnFailure',
           'E_MOSAIC_TABLE_CRAWLER_MISSING_TABLE',
           'ExportItemsParameters', 'IRasterXform',
           'E_3D_TO_RASTER_FUNCTIONS__CELL_SIZE_TOO_SMALL_FOR_CACHING',
           'IRGB32PixelResampler', 'esriCrawlerDataSourceTypeString',
           'E_MOSAIC_EMPTY_FEATURECLASS', 'NITFBuilder',
           'DEImageServerType',
           'E_MOSAIC_PREPARE_CANNOT_UPDATE_REFERENCED_DATASET',
           'esriRasterLasClassBuilding', 'esriExtentIntersectionOf',
           'E_MOSAIC_CANNOT_PROCESS_SEAMLINE_ITEM',
           'esriExtentFirstOf', 'E_MOSAIC_CANT_DISABLE_SINDEX',
           'LSRXform', 'esriRasterCIAlphaBand',
           'IRasterCalcStatsHistogram', 'IRasterFunctionArguments2',
           'esriRasterPaintConstantColor',
           'IGenerateOverviewsParameters2', 'PleiadesBuilder',
           'Mensuration', 'E_MOSAIC_INVALID_RPDEF',
           'RasterTypeDataSourceHandlerParameters',
           'esriBuildSeamlinesByGeometry',
           'ThresholdFunctionArguments',
           'esriSpeckleFilterEnhancedLee', 'esriDisplayCoordUnitType',
           'ColormapFunction', 'ShadedReliefFunction',
           'esriCellsizeLastOf', 'IRasterColormap3',
           'IRasterColormap2', 'IConstantFunctionArguments2',
           'IDefineNoDataParameters2', 'GeometricFunctionArguments',
           'RPDefBuilder', 'esriRasterRemoveHazeDarkChannelPrior',
           'IPolynomialXform', 'IExtractBandFunctionArguments',
           'esriPansharpeningIHS', 'LasDatasetBuilder',
           'esriRasterLasClassHighNoise', 'IRasterTypeHistory2',
           'esriBlendTypeOutside', 'IRasterThumbnailBuilder',
           'esriRasterLasDataZ', 'esriRadarCalibrationBeta',
           'IBuilderItem', 'MatchATBuilder', 'ICancelListener',
           'StatisticsFunctionArguments', 'RasterStatusEvent2Helper',
           'esriRasterLasReturnEighth', 'ImageRegistration',
           'ISPOT5Xform', 'ColormapFilter',
           'E_MOSAIC_PHFILE_NOTEXISTS',
           'IMosaicRastersFunctionArguments', 'IDEImageServer',
           'esriPansharpeningESRI', 'esriRasterLasDataI',
           'IHeightMeasurement', 'esriMissingBandActionFindBestMatch',
           'IdentityXform', 'IRasterTypeEnvironment2',
           'IColormapFunctionArguments', 'esriRasterThresholdTsai',
           'NDVIFunctionArguments', 'esriPansharpeningBrovey',
           'E_RASTER_UNKNOWN_ERROR', 'RasterBand',
           'esriPansharpeningGramSchmidt', 'RGB32PixelResampler',
           'IRasterFunction', 'esriBandArithmeticUserDefined',
           'E_RASTER_FILE_LZW_FAILED', 'E_MOSAIC_LEVELS_MISSING',
           'BackgroundFilter', 'ISpeckleFunctionArguments',
           'ProjectiveXform', 'ITerrainToRasterFunctionArguments',
           'E_3D_TO_RASTER_FUNCTIONS__MISSING_SPATIAL_REFERENCE',
           'esriSpeckleFilterKernel3x3',
           'IRasterDataManagementEvents', 'esriDCUTypeUSNationalGrid',
           'esriRasterCatalogItemCategoryIncomplete',
           'esriSpeckleNoiseModel',
           'E_MOSAIC_VALIDATION_TERRAIN_CELLSIZE',
           'AngularMeasurement', 'E_MOSAIC_MISSING_DATASET_FOOTPRINT',
           'MosaicWorkspaceExtension', 'esriRasterLasReturnSecond',
           'ImageFeaturePoints', 'esriSpeckleFilterKernel9x9',
           'IRasterFunctionHelper2', 'IHillshadeFunctionArguments',
           'E_RASTER_FAILED_TO_CALC_HISTOGRAM', 'esriBlendTypeBoth',
           'esriRadarCalibrationSigma', 'E_MOSAIC_MISSING_DATASET_SR',
           'CachedRasterFunction', 'ICsvCrawler', 'esriExtentType',
           'IRasterStatistics', 'IISATBuilder', 'IBinFunction',
           'RasterColormapToRGBConverter',
           'esriRasterFormatSupportImaging', 'MT_MEAN',
           'FocalMeanFilter', 'IDEWMSMapType',
           'E_RASTER_NO_WRITE_PERMISSION', 'CompositeItemURI',
           'esriMosaicDatasetSideTableDodging',
           'esriRasterClippingOutside', 'esriNoDataMatchAny',
           'IItemURIArray', 'MosaicRastersFunctionArguments',
           'BandArithmeticFunction', 'esriSlopePercentRise',
           'esriMosaicLockRaster',
           'esriCellSizeLevelCategorySeamline',
           'esriRasterPaintCheckerboard', 'IFileCrawler2',
           'esriFunctionRasterDatasetProperty',
           'E_RASTER_EMPTY_WORKSPACE', 'RasterColormap',
           'esriDuplicateItemsAllow', 'E_RASTER_BLOCKSIZE_TOO_LARGE',
           'esriCrawlerDataSourceTypeRow',
           'E_MOSAIC_CANNOT_UPDATE_ITEM_SEAMLINE',
           'esriFrameCameraUnitsMillimeters', 'KauthThomasFunction',
           'E_MOSAIC_IN_LOAD_ONLY',
           'esriBuildSeamlinesByCopyToSiblings',
           'esriRasterCIUnknown', 'IMosaicDatasetOperationParameters',
           'E_3D_TO_RASTER_FUNCTIONS__SPATIAL_REFERENCE_IN_WKT_FORMAT_DETECTED',
           'ISearchItemURI', 'ICompositeItemURI',
           'esriMosaicDatasetSideTableOverview',
           'E_RASTER_UNSUPPORTED_PCS', 'DownsampleFunctionArguments',
           'IRemapFilter', 'IPolygonMeasurement', 'DT_ATHEMATIC',
           'ReflectanceFunctionArguments', 'IApproximationXform',
           'SearchBuilder', 'esriRaster3DToRasterFunctionErrors',
           'ComputeDirtyAreaParameters', 'IRasterTypeName',
           'esriFocalStatisticType', 'E_MOSAIC_CREATE_AUX_FIELDS',
           'IRasterColormapToRGBConversion', 'DEMosaicDatasetType',
           'esriRasterCIYCbCrCbBand', 'esriImageAdjustmentAppend',
           'esriBuildFootprintsByRadiometry', 'SearchItemURI',
           'IGenericObjectCrawler', 'RasterRouteFinder',
           'E_MOSAIC_MISSING_LINK_TO_VALID_RASTER_CATALOG',
           'E_MOSAIC_MISSING_RASTERFIELD_FROM_TABLE',
           'esriRasterCatalogTypeRegular', 'ISlopeScalingArguments',
           'SpotBuilder', 'E_FAILED_TO_OPEN_RASTER_ITEM',
           'esriBlendTypeInside',
           'E_FUNCTION_MISSING_SPATIALREFERENCE', 'IMosaicOperator2',
           'IMosaicRaster', 'esriImportGeometryTargetFootprint',
           'esriBuildFootprintsByGeometry',
           'E_MOSAIC_CANNOT_PROCESS_UPDATED_ITEMS', 'IClipFilter',
           'IRasterBandEdit', 'IGeodataXform2', 'RasterInfoFunction',
           'esriRasterFilterSharpening3x3', 'IRasterAnalysisProps',
           'Raster', 'IStatisticsFunctionArguments',
           'esriSpeckleFilterKernel5x5', 'IGeometricFunction',
           'IItemTemplateArray', 'HeightMeasurement',
           'esriRasterStretchMinimumMaximum',
           'IRadarCalibrationFunctionArguments', 'IMensuration3D',
           'IBuilderItem3', 'RasterClassNames',
           'ISynchronizeParameters', 'ArrayCrawler',
           'E_MOSAIC_CANNOT_GET_CATALOG_FIELDS',
           'E_MOSAIC_INVALID_WHERE_CLAUSE', 'ItemURIArray',
           'esriRasterCILightnessBand', 'IFunctionRasterDataset',
           'NDVIFunction', 'ITableCrawler3', 'ITableCrawler2',
           'E_MOSAIC_VALIDATION_FAILED', 'IRasterHistograms',
           'esriRadarPolarizationVH', 'esriCellsizeMaxOf',
           'esriImageAdjustmentReplace',
           'esriRasterLasClassMediumVegetation',
           'IRasterSdeServerOperation2', 'esriImageAdjustmentInsert',
           'RasterDatasetBuilder', 'RGB32Function',
           'TiePointCollection', 'RasterType',
           'esriRadarPolarizationVV', 'IRasterDomainExtractor',
           'E_RASTER_FAILED_TO_DELETE_DATASET',
           'BandArithmeticFunctionArguments', 'E_MOSAIC_UNION_EMPTY',
           'IDescRow', 'esriRasterLasVoidFillNone', 'IkonosBuilder',
           'IDefineOverviewsParameters',
           'E_RASTER_COLORCORRECTION_NOT_LICENSED',
           'E_MOSAIC_INVALID_OVERVIEW_WORKSPACE', 'IMosaicDataset2',
           'IRect', 'esriRasterFilterSharpen2',
           'esriGeodataXformApplyReplace', 'DEWCSCoverage',
           'IImageMatchPoints', 'IRasterBuilder',
           'IRasterFunctionTemplateMapper', 'ImageMatchPoints',
           'E_MOSAIC_SYNC_CANNOT_SIMPLIFY_ITEM', 'IMosaicOperator',
           'IWorldFileExport', 'esriRasterCIYCbCrYBand',
           'ICellSizeLevel', 'MT_BLEND', 'esriRasterCIRedBand',
           'IRasterBandCollection',
           'ISpectralConversionFunctionArguments2',
           'esriRasterPrjMethodFull', 'DistanceMeasurement',
           'RasterStatusEventHelper',
           'E_MOSAIC_LEVELS_CATEGORY_NOT_COMPUTED',
           'RasterAttributeTableManager', 'RasterXformHelper',
           'IDERasterUtilities', 'IMosaicOperator3',
           'esriRasterError', 'ConvolutionFunction',
           'IMosaicLODInfos', 'esriExtentUnionOf',
           'esriRasterLasReturnFifth', 'RasterTypeEnvironment',
           'esriCrawlerDataSourceTypeTerrain',
           'esriRasterThresholdRosin', 'esriRasterPixelType',
           'esriMosaicViewpoint', 'esriRasterLasCellMean',
           'esriColorspaceConversionRGBToHSV', 'FileCrawler',
           'IRasterTypeDataSourceHandler']
from comtypes import _check_version; _check_version('501')
