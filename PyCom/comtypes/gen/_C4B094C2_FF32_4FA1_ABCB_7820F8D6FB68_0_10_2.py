# -*- coding: mbcs -*-
typelib_path = u'C:\\Program Files (x86)\\ArcGIS\\Engine10.2\\com\\esriGeometry.olb'
_lcid = 0 # change this if required
from ctypes import *
from comtypes import GUID
from comtypes import CoClass
import comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0
import comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2
from ctypes import HRESULT
from ctypes.wintypes import VARIANT_BOOL
from comtypes import BSTR
from comtypes import helpstring
from comtypes import COMMETHOD
from comtypes import dispid
from comtypes.automation import VARIANT
LONG_PTR = c_int
from comtypes.automation import _midlSAFEARRAY
from comtypes.automation import VARIANT
from comtypes import IUnknown


class Point(CoClass):
    u'A two dimensional point, optionally with measure, height, and ID attributes.'
    _reg_clsid_ = GUID('{00A5CB41-52DA-11D0-A8F2-00608C85EDE5}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
class IGeometry(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that describe properties and behavior of all geometric objects.'
    _iid_ = GUID('{1B07790D-38C5-11D0-92D2-00805F7C28B0}')
    _idlflags_ = ['oleautomation']
class IPoint(IGeometry):
    _case_insensitive_ = True
    u'Provides access to members that define two dimensional points.'
    _iid_ = GUID('{1B077915-38C5-11D0-92D2-00805F7C28B0}')
    _idlflags_ = ['oleautomation']
class IMAware(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Indicator interface that identifies geometric objects that can have persistent M values attached to their vertices.'
    _iid_ = GUID('{52C59396-D744-11D2-9F34-00C04F6BDF06}')
    _idlflags_ = ['oleautomation']
class IZAware(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Indicator interface that identifies geometries that can have persistent Z values attached to their vertices.'
    _iid_ = GUID('{EFEEB8B3-DC23-11D2-9F2E-00C04F6BDF0D}')
    _idlflags_ = ['oleautomation']
class IPointIDAware(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Indicator interface that identifies geometries that can have persistent point ID values attached to coordinates.'
    _iid_ = GUID('{739A1669-E870-11D2-9F30-00C04F6BDF0D}')
    _idlflags_ = ['oleautomation']
class IGeometry2(IGeometry):
    _case_insensitive_ = True
    u'Provides access to members that extend the IGeometry interface with a more sophisticated projection method.'
    _iid_ = GUID('{B79B2D7E-DBC8-11D3-9F60-00C04F6BDD7F}')
    _idlflags_ = []
class IGeometry3(IGeometry2):
    _case_insensitive_ = True
    u"Provides rapid access to a geometry's extent in the x-y plane."
    _iid_ = GUID('{D034F81B-7137-40A6-90EA-D88968C33E60}')
    _idlflags_ = ['oleautomation']
class IGeometry4(IGeometry3):
    _case_insensitive_ = True
    u'Provides access to methods that indicate if a geometry has been changed (edited, projected, etc).'
    _iid_ = GUID('{C4C70B7A-DFBA-4892-86CD-A9100357409B}')
    _idlflags_ = ['oleautomation']
class IGeometry5(IGeometry4):
    _case_insensitive_ = True
    u'Provides access to members that extend the IGeometry interface with a more sophisticated projection method.'
    _iid_ = GUID('{134B247E-83F6-471C-9AD1-11C35312D5EF}')
    _idlflags_ = []
class ITransform2D(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to methods for transforming geometries using either specific parameters or arbitrary transformation objects (affine transformations, geographic transformations, etc.).'
    _iid_ = GUID('{3BE78AD0-886E-11D1-BC78-0000F875BCCE}')
    _idlflags_ = ['oleautomation']
class ITransform3D(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to methods for transforming 3D geometries using either specific parameters or arbitrary transformation objects.'
    _iid_ = GUID('{9414E949-FFA0-11D3-9F56-00C04F6BDF0D}')
    _idlflags_ = ['oleautomation']
class IConstructPoint(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that construct a point using other geometries and measures.'
    _iid_ = GUID('{EAF5D48C-C666-11D0-8307-0000F8034032}')
    _idlflags_ = ['oleautomation']
class IConstructPoint2(IConstructPoint):
    _case_insensitive_ = True
    u'Provides access to additional point construction methods.'
    _iid_ = GUID('{AFFE2936-6D7D-4261-B391-0DE4269DD4B3}')
    _idlflags_ = ['oleautomation']
class IRelationalOperator(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that determine if a certain spatial relationship exists between two geometries.'
    _iid_ = GUID('{1B07790E-38C5-11D0-92D2-00805F7C28B0}')
    _idlflags_ = ['oleautomation']
class IRelationalOperator2(IRelationalOperator):
    _case_insensitive_ = True
    u'Additional relational functions.'
    _iid_ = GUID('{839F5C7E-ED5F-4B3F-8F97-C0A9CC4817EE}')
    _idlflags_ = ['oleautomation']
class IProximityOperator(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that find the 2D distance between two geometries.'
    _iid_ = GUID('{1B07790F-38C5-11D0-92D2-00805F7C28B0}')
    _idlflags_ = ['oleautomation']
class ITopologicalOperator(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members for constructing new geometries based upon topological relationships between existing geometries.'
    _iid_ = GUID('{1B077911-38C5-11D0-92D2-00805F7C28B0}')
    _idlflags_ = ['oleautomation']
class ITopologicalOperator6(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'.'
    _iid_ = GUID('{5BB94960-4A59-48FF-AACD-D0E906C56E0D}')
    _idlflags_ = ['oleautomation']
class IHitTest(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that locate a part of a geometry closest to a point.'
    _iid_ = GUID('{0EB12C6E-18F6-11D1-8337-0000F8775BE9}')
    _idlflags_ = []
class IHitTest3D(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that locate a part of a geometry closest to a point.'
    _iid_ = GUID('{A2FA4E9A-4E10-4A62-9EED-48680A7423DD}')
    _idlflags_ = ['restricted']
class IConversionMGRS(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that allow the use of MGRS.'
    _iid_ = GUID('{9C5419F0-872E-4DAD-AB83-E9CD0935202B}')
    _idlflags_ = ['oleautomation']
class IConversionNotation(IConversionMGRS):
    _case_insensitive_ = True
    u'Provides access to functions that convert to and from various geographic string notations.'
    _iid_ = GUID('{5F90BCEF-A161-443A-A8C7-450C3FAEF4AB}')
    _idlflags_ = ['oleautomation']
class IMSnap(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to a method that snaps ms of the geometry to the precision of the spatial reference associated with the geometry.'
    _iid_ = GUID('{3732F8B2-0F64-11D5-9FDE-00C04F6BDD7F}')
    _idlflags_ = ['oleautomation']
class IProximityOperator3D(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that find the 3D distance between two geometries with Zs.'
    _iid_ = GUID('{97E08CF7-7A24-4290-BA8A-ACEDB753B42C}')
    _idlflags_ = ['oleautomation']
class IRelationalOperator3D(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that determine if a certain spatial relationship exists between two geometries with Zs.'
    _iid_ = GUID('{F6EAEFDE-888E-4F1D-B5B7-84F36DA677B0}')
    _idlflags_ = ['oleautomation']
class IRelationalOperator3D2(IRelationalOperator3D):
    _case_insensitive_ = True
    u'Provides access to members that determine if a certain spatial relationship exists between two geometries with Zs.'
    _iid_ = GUID('{CC14F157-EC46-4498-8148-FDE8D6B43E20}')
    _idlflags_ = ['oleautomation']
Point._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IPoint, IMAware, IZAware, IPointIDAware, IGeometry, IGeometry2, IGeometry3, IGeometry4, IGeometry5, ITransform2D, ITransform3D, IConstructPoint, IConstructPoint2, IRelationalOperator, IRelationalOperator2, IProximityOperator, ITopologicalOperator, ITopologicalOperator6, IHitTest, IHitTest3D, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, IConversionMGRS, IConversionNotation, IMSnap, IProximityOperator3D, IRelationalOperator3D, IRelationalOperator3D2]

class IGeometryServer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u"Provides access to standard operations on geometric 'value' objects. The input geometries are never modified by these operations. Designed for use in building web services and web applications."
    _iid_ = GUID('{CB6DB57F-CA37-485D-B0A5-0931FA62AB84}')
    _idlflags_ = ['oleautomation']
class IGeometryServer2(IGeometryServer):
    _case_insensitive_ = True
    u"Provides access to more standard operations on geometric 'value' objects. The input geometries are never modified by these operations. Designed for use in building web services or other kinds of distributed applications."
    _iid_ = GUID('{F3B51E61-2B28-4033-9615-D93A76171A85}')
    _idlflags_ = ['oleautomation']
class ISpatialReferenceInfo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the properties common to all components of a spatial reference system.'
    _iid_ = GUID('{4DA0FE00-1DD2-11B2-BF49-08002022F573}')
    _idlflags_ = ['oleautomation']
class ISpatialReference(ISpatialReferenceInfo):
    _case_insensitive_ = True
    u'Provides access to members that control a SpatialReference.'
    _iid_ = GUID('{4434D680-F4DA-11D1-BCA6-0000F875BCCE}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'esriTransformDirection'
esriTransformForward = 0
esriTransformReverse = 1
esriTransformDirection = c_int # enum
class ITransformation(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that apply a function (or its inverse) to a set of points or measures. The suffix of each method indicates the type of parameters operated on.'
    _iid_ = GUID('{6F2CF924-7E00-11D0-82F4-0000F8034032}')
    _idlflags_ = []
class IEnvelope(IGeometry):
    _case_insensitive_ = True
    u'Provides access to methods and properties of envelopes.'
    _iid_ = GUID('{1B077914-38C5-11D0-92D2-00805F7C28B0}')
    _idlflags_ = []
class IGeometryArray(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    _iid_ = GUID('{2C2F7F27-AE8C-4BB1-A635-502F1A70DC57}')
    _idlflags_ = ['oleautomation']
class IUnit(ISpatialReferenceInfo):
    _case_insensitive_ = True
    u'Provides access to members that identify a linear or angular unit of measure within a spatial reference system.'
    _iid_ = GUID('{0AE02580-1DD2-11B2-BF4A-08002022F573}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'esriSpatialRelationEnum'
esriSpatialRelationDisjoint = 0
esriSpatialRelationIntersection = 1
esriSpatialRelationInteriorIntersection = 2
esriSpatialRelationIn = 3
esriSpatialRelationWithin = 4
esriSpatialRelationPointTouch = 5
esriSpatialRelationLineTouch = 6
esriSpatialRelationTouch = 7
esriSpatialRelationLineCoincidence = 8
esriSpatialRelationCross = 9
esriSpatialRelationOverlap = 10
esriSpatialRelationRelation = 11
esriSpatialRelationEnum = c_int # enum
class IRelationResultArray(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    _iid_ = GUID('{8410CD13-773F-43ED-8208-B0BF2F383917}')
    _idlflags_ = ['oleautomation']
class IPolygonArray(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the IPolygonArray Interface.'
    _iid_ = GUID('{6CDF7C6E-EEB6-4EA8-AC53-264F0B8CCC82}')
    _idlflags_ = ['oleautomation']
class IPolylineArray(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the IPolylineArray Interface.'
    _iid_ = GUID('{1F9EE0AE-D900-4B3F-928F-1117C32F2A18}')
    _idlflags_ = ['oleautomation']
class IPointArray(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    _iid_ = GUID('{14E5444E-9FC2-4FC9-ADDA-941E0342CA3D}')
    _idlflags_ = ['oleautomation']
IGeometryServer._methods_ = [
    COMMETHOD([helpstring(u'Projects an array of geometries from their current spatial reference (pInSR) to a destination spatial reference (pOutSR). The projection process can optionally include a datum transformation if the source and destination SRs have different GCSs.')], HRESULT, 'Project',
              ( [], POINTER(ISpatialReference), 'pInSR' ),
              ( [], POINTER(ISpatialReference), 'pOutSR' ),
              ( [], esriTransformDirection, 'xFormDir' ),
              ( [], POINTER(ITransformation), 'pXForm' ),
              ( [], POINTER(IEnvelope), 'pExtent' ),
              ( [], POINTER(IGeometryArray), 'pInGeometries' ),
              ( ['retval', 'out'], POINTER(POINTER(IGeometryArray)), 'ppProjectedGeometries' )),
    COMMETHOD([helpstring(u'Buffers an array of geometries by each distance specified in an array of distances. The distance units can optionally be specified. Geometries buffered at a given distance can optionally be unioned together.')], HRESULT, 'Buffer',
              ( [], POINTER(ISpatialReference), 'pInSR' ),
              ( [], POINTER(ISpatialReference), 'pBufferSR' ),
              ( [], POINTER(ISpatialReference), 'pOutSR' ),
              ( [], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray), 'pDistances' ),
              ( [], POINTER(IUnit), 'pUnit' ),
              ( [], VARIANT_BOOL, 'bUnion' ),
              ( [], POINTER(IGeometryArray), 'pInGeometries' ),
              ( ['retval', 'out'], POINTER(POINTER(IGeometryArray)), 'ppBufferedGeometries' )),
    COMMETHOD([helpstring(u'Determines the pairs of geometries from the input geometry arrays that participate in the specified spatial relation.')], HRESULT, 'Relation',
              ( [], POINTER(ISpatialReference), 'pSR' ),
              ( [], POINTER(IGeometryArray), 'pInGA1' ),
              ( [], POINTER(IGeometryArray), 'pInGA2' ),
              ( [], esriSpatialRelationEnum, 'r' ),
              ( [], BSTR, 'param' ),
              ( ['retval', 'out'], POINTER(POINTER(IRelationResultArray)), 'ppRelations' )),
    COMMETHOD([helpstring(u"Applies the ArcObjects 'Simplify' operation to each element of the geometry array.")], HRESULT, 'Simplify',
              ( [], POINTER(ISpatialReference), 'pSR' ),
              ( [], POINTER(IGeometryArray), 'pInGeometries' ),
              ( ['retval', 'out'], POINTER(POINTER(IGeometryArray)), 'ppSimplifiedGeometries' )),
    COMMETHOD([helpstring(u"Applies the ArcObjects 'Densify' operation to each element of the geometry array.")], HRESULT, 'Densify',
              ( [], POINTER(ISpatialReference), 'pSR' ),
              ( [], POINTER(IGeometryArray), 'pInGeometries' ),
              ( [], c_double, 'maxSegmentLength' ),
              ( [], VARIANT_BOOL, 'useDeviationDensification' ),
              ( [], c_double, 'densificationParameter' ),
              ( ['retval', 'out'], POINTER(POINTER(IGeometryArray)), 'ppDensifiedGeometries' )),
    COMMETHOD([helpstring(u"Defines an SR based upon its well known identifier (WKID) and optionally a WKID for a vertical datum. The resolution and xy tolerances are either computed from the sr horizon or set to defaults. 'authority' is typically either 'EPSG' or 'Esri'.")], HRESULT, 'FindSRByWKID',
              ( [], BSTR, 'authority' ),
              ( [], c_int, 'WKID' ),
              ( [], c_int, 'WKID_Z' ),
              ( [], VARIANT_BOOL, 'bDefaultXYResolution' ),
              ( [], VARIANT_BOOL, 'bDefaultXYTolerance' ),
              ( ['retval', 'out'], POINTER(POINTER(ISpatialReference)), 'ppSR' )),
    COMMETHOD([helpstring(u'Defines a spatial reference object based upon its well known text string (WKT) and optionally a WKT for a vertical datum. The resolution and xy tolerances are either computed from the sr horizon or set to defaults. The output sr is always high precision.')], HRESULT, 'FindSRByWKT',
              ( [], BSTR, 'WKT' ),
              ( [], BSTR, 'WKT_Z' ),
              ( [], VARIANT_BOOL, 'bDefaultXYResolution' ),
              ( [], VARIANT_BOOL, 'bDefaultXYTolerance' ),
              ( ['retval', 'out'], POINTER(POINTER(ISpatialReference)), 'ppSR' )),
    COMMETHOD([helpstring(u"Defines a unit object based upon its well known identified (WKID). 'authority' is typically either 'EPSG' or 'Esri'.")], HRESULT, 'FindUnitsByWKID',
              ( [], BSTR, 'authority' ),
              ( [], c_int, 'WKID' ),
              ( ['retval', 'out'], POINTER(POINTER(IUnit)), 'ppU' )),
    COMMETHOD([helpstring(u'Defines a unit object based upon its well known text string.')], HRESULT, 'FindUnitsByWKT',
              ( [], BSTR, 'WKT' ),
              ( ['retval', 'out'], POINTER(POINTER(IUnit)), 'ppU' )),
    COMMETHOD([helpstring(u'Calculates areas and perimeter lengths for each polygon in the specified array.')], HRESULT, 'GetAreasAndLengths',
              ( [], POINTER(ISpatialReference), 'pSR' ),
              ( [], POINTER(IPolygonArray), 'pInPolygons' ),
              ( ['out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray)), 'ppAreas' ),
              ( ['out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray)), 'ppLengths' )),
    COMMETHOD([helpstring(u'Calculates the length of eacch polyline in the specified array.')], HRESULT, 'GetLengths',
              ( [], POINTER(ISpatialReference), 'pSR' ),
              ( [], POINTER(IPolylineArray), 'pInPolylines' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray)), 'ppLengths' )),
    COMMETHOD([helpstring(u'Calculates an interior point for each polygon.')], HRESULT, 'GetLabelPoints',
              ( [], POINTER(ISpatialReference), 'pSR' ),
              ( [], POINTER(IPolygonArray), 'pInPolygons' ),
              ( ['retval', 'out'], POINTER(POINTER(IPointArray)), 'pOutLabels' )),
]
################################################################
## code template for IGeometryServer implementation
##class IGeometryServer_Impl(object):
##    def FindSRByWKID(self, authority, WKID, WKID_Z, bDefaultXYResolution, bDefaultXYTolerance):
##        u"Defines an SR based upon its well known identifier (WKID) and optionally a WKID for a vertical datum. The resolution and xy tolerances are either computed from the sr horizon or set to defaults. 'authority' is typically either 'EPSG' or 'Esri'."
##        #return ppSR
##
##    def GetAreasAndLengths(self, pSR, pInPolygons):
##        u'Calculates areas and perimeter lengths for each polygon in the specified array.'
##        #return ppAreas, ppLengths
##
##    def GetLabelPoints(self, pSR, pInPolygons):
##        u'Calculates an interior point for each polygon.'
##        #return pOutLabels
##
##    def Buffer(self, pInSR, pBufferSR, pOutSR, pDistances, pUnit, bUnion, pInGeometries):
##        u'Buffers an array of geometries by each distance specified in an array of distances. The distance units can optionally be specified. Geometries buffered at a given distance can optionally be unioned together.'
##        #return ppBufferedGeometries
##
##    def FindUnitsByWKID(self, authority, WKID):
##        u"Defines a unit object based upon its well known identified (WKID). 'authority' is typically either 'EPSG' or 'Esri'."
##        #return ppU
##
##    def Project(self, pInSR, pOutSR, xFormDir, pXForm, pExtent, pInGeometries):
##        u'Projects an array of geometries from their current spatial reference (pInSR) to a destination spatial reference (pOutSR). The projection process can optionally include a datum transformation if the source and destination SRs have different GCSs.'
##        #return ppProjectedGeometries
##
##    def Simplify(self, pSR, pInGeometries):
##        u"Applies the ArcObjects 'Simplify' operation to each element of the geometry array."
##        #return ppSimplifiedGeometries
##
##    def FindUnitsByWKT(self, WKT):
##        u'Defines a unit object based upon its well known text string.'
##        #return ppU
##
##    def Relation(self, pSR, pInGA1, pInGA2, r, param):
##        u'Determines the pairs of geometries from the input geometry arrays that participate in the specified spatial relation.'
##        #return ppRelations
##
##    def GetLengths(self, pSR, pInPolylines):
##        u'Calculates the length of eacch polyline in the specified array.'
##        #return ppLengths
##
##    def Densify(self, pSR, pInGeometries, maxSegmentLength, useDeviationDensification, densificationParameter):
##        u"Applies the ArcObjects 'Densify' operation to each element of the geometry array."
##        #return ppDensifiedGeometries
##
##    def FindSRByWKT(self, WKT, WKT_Z, bDefaultXYResolution, bDefaultXYTolerance):
##        u'Defines a spatial reference object based upon its well known text string (WKT) and optionally a WKT for a vertical datum. The resolution and xy tolerances are either computed from the sr horizon or set to defaults. The output sr is always high precision.'
##        #return ppSR
##

class ILinearUnit(IUnit):
    _case_insensitive_ = True
    u'Provides access to members that control the properties of the linear unit.'
    _iid_ = GUID('{74AD43F1-D31C-11D1-BC9B-0000F875BCCE}')
    _idlflags_ = ['oleautomation']
class ICurve(IGeometry):
    _case_insensitive_ = True
    u'Provides access to properties and methods of all 1 dimensional curves (polylines, segments, boundaries of polygons, etc.).'
    _iid_ = GUID('{1B077916-38C5-11D0-92D2-00805F7C28B0}')
    _idlflags_ = []
class IPolycurve(ICurve):
    _case_insensitive_ = True
    u'Provides access to members that define operations common to polylines and the boundaries of polygons.'
    _iid_ = GUID('{4AFF82E0-F984-11D1-BCA7-0000F875BCCE}')
    _idlflags_ = ['oleautomation']
class IPolyline(IPolycurve):
    _case_insensitive_ = True
    u'Provides access to members that identify and add behavior to a polyline object.'
    _iid_ = GUID('{F2485894-4CBD-11D1-834E-0000F8775BE9}')
    _idlflags_ = ['oleautomation']
IGeometryServer2._methods_ = [
    COMMETHOD([helpstring(u'Calculates areas and perimeter lengths for each polygon in the specified array. Optionally does unit conversion.')], HRESULT, 'GetAreasAndLengths2',
              ( [], POINTER(ISpatialReference), 'pSR' ),
              ( [], POINTER(IPolygonArray), 'pInPolygons' ),
              ( [], POINTER(ILinearUnit), 'pLengthUnit' ),
              ( [], POINTER(ILinearUnit), 'pAreaUnit' ),
              ( [], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriAreaUnits, 'areaUnitEnum' ),
              ( ['out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray)), 'ppAreas' ),
              ( ['out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray)), 'ppLengths' )),
    COMMETHOD([helpstring(u'Calculates the length of eacch polyline in the specified array. Optionally does unit conversion.')], HRESULT, 'GetLengths2',
              ( [], POINTER(ISpatialReference), 'pSR' ),
              ( [], POINTER(IPolylineArray), 'pInPolylines' ),
              ( [], POINTER(ILinearUnit), 'pLengthUnit' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray)), 'ppLengths' )),
    COMMETHOD([helpstring(u'Densifies geometries by plotting points along the geodesics between existing vertices (uses IPolycurve4::GeodesicDensify).')], HRESULT, 'DensifyGeodesic',
              ( [], POINTER(ISpatialReference), 'pSR' ),
              ( [], POINTER(IGeometryArray), 'pInGeometries' ),
              ( [], c_double, 'maxSegmentLength' ),
              ( [], POINTER(ILinearUnit), 'pLengthUnit' ),
              ( ['retval', 'out'], POINTER(POINTER(IGeometryArray)), 'ppOutGeometries' )),
    COMMETHOD([helpstring(u'Returns geodesic length of each Polyline.')], HRESULT, 'GetLengthsGeodesic',
              ( [], POINTER(ISpatialReference), 'pSR' ),
              ( [], POINTER(IPolylineArray), 'polylines' ),
              ( [], POINTER(ILinearUnit), 'pLengthUnit' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray)), 'ppLengthsArray' )),
    COMMETHOD([helpstring(u'Reports shortest distance between G1 and G2.')], HRESULT, 'GetDistance',
              ( [], POINTER(ISpatialReference), 'pSR' ),
              ( [], POINTER(IGeometry), 'pG1' ),
              ( [], POINTER(IGeometry), 'pG2' ),
              ( [], POINTER(ILinearUnit), 'pDistanceUnit' ),
              ( ['retval', 'out'], POINTER(c_double), 'pDistance' )),
    COMMETHOD([helpstring(u'Returns the topological union of the input geometries (uses ITopologicalOperator::ConstructUnion). The input geometries must have the same dimension (0d, 1d, 2d).')], HRESULT, 'Union',
              ( [], POINTER(ISpatialReference), 'pSR' ),
              ( [], POINTER(IGeometryArray), 'pInGA' ),
              ( ['retval', 'out'], POINTER(POINTER(IGeometry)), 'ppUnionedGeometry' )),
    COMMETHOD([helpstring(u'Returns an array of geometries where each result geometry R[i] is (array1[i] intersect G2. If G2 is an Envelope, then this is clipping.')], HRESULT, 'Intersect',
              ( [], POINTER(ISpatialReference), 'pSR' ),
              ( [], POINTER(IGeometryArray), 'pInGA1' ),
              ( [], POINTER(IGeometry), 'pInG2' ),
              ( ['retval', 'out'], POINTER(POINTER(IGeometryArray)), 'ppIntersectGA' )),
    COMMETHOD([helpstring(u'Returns an array of geometries where each result geometry R[i] is (array1[i] difference G2).')], HRESULT, 'Difference',
              ( [], POINTER(ISpatialReference), 'pSR' ),
              ( [], POINTER(IGeometryArray), 'pInGA1' ),
              ( [], POINTER(IGeometry), 'pInG2' ),
              ( ['retval', 'out'], POINTER(POINTER(IGeometryArray)), 'pDifferenceGA' )),
    COMMETHOD([helpstring(u'Cuts the target polyline or polygon Cutter.')], HRESULT, 'Cut',
              ( [], POINTER(ISpatialReference), 'pSR' ),
              ( [], POINTER(IGeometryArray), 'pTargets' ),
              ( [], POINTER(IPolyline), 'pCutter' ),
              ( ['out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray)), 'ppCutIndexes' ),
              ( ['retval', 'out'], POINTER(POINTER(IGeometryArray)), 'ppCutPiecesGA' )),
    COMMETHOD([helpstring(u'Trims or extends each polyline in the input array using TrimExtendTo (uses IConstructCurve::ConstructExtended for extension operation).')], HRESULT, 'TrimExtend',
              ( [], POINTER(ISpatialReference), 'pSR' ),
              ( [], POINTER(IPolylineArray), 'pInPA' ),
              ( [], POINTER(IPolyline), 'pTrimExtendTo' ),
              ( [], c_int, 'extendHow' ),
              ( ['retval', 'out'], POINTER(POINTER(IPolylineArray)), 'pTE_PA' )),
    COMMETHOD([helpstring(u'Returns an array of polylines and polygons that are offset versions of the input polylines and polygons (uses ITopologicalOperator::ConstructOffset).')], HRESULT, 'Offset',
              ( [], POINTER(ISpatialReference), 'pSR' ),
              ( [], POINTER(IGeometryArray), 'pInGA' ),
              ( [], c_double, 'offsetDistance' ),
              ( [], POINTER(ILinearUnit), 'pOffsetUnit' ),
              ( [], c_int, 'offsetHow' ),
              ( [], c_double, 'bevelRatio' ),
              ( ['retval', 'out'], POINTER(POINTER(IGeometryArray)), 'ppOffsetGA' )),
    COMMETHOD([helpstring(u'Returns generalized (Douglas-Poiker) versions of the input polylines and polygons (uses IPolycurve::Generalize).')], HRESULT, 'Generalize',
              ( [], POINTER(ISpatialReference), 'pSR' ),
              ( [], POINTER(IGeometryArray), 'pInGA' ),
              ( [], c_double, 'maxDeviation' ),
              ( [], POINTER(ILinearUnit), 'pDeviationUnit' ),
              ( ['retval', 'out'], POINTER(POINTER(IGeometryArray)), 'ppGeneralizedGA' )),
    COMMETHOD([helpstring(u'Reshapes the target polyline or polygon. The reshaping polyline can have only one part. If the target was not reshaped, an empty geometry of the saem type is returned.')], HRESULT, 'Reshape',
              ( [], POINTER(ISpatialReference), 'pSR' ),
              ( [], POINTER(IGeometry), 'pTarget' ),
              ( [], POINTER(IPolyline), 'pReshaper' ),
              ( ['retval', 'out'], POINTER(POINTER(IGeometry)), 'pReshaped' )),
    COMMETHOD([helpstring(u'Computes the convex hull of the input geometries')], HRESULT, 'ConvexHull',
              ( [], POINTER(ISpatialReference), 'pSR' ),
              ( [], POINTER(IGeometryArray), 'pInGeometryArray' ),
              ( ['retval', 'out'], POINTER(POINTER(IGeometry)), 'pHull' )),
    COMMETHOD([helpstring(u'Discovers polygons bounded by existing polygons and input linework.')], HRESULT, 'AutoComplete',
              ( [], POINTER(ISpatialReference), 'pSR' ),
              ( [], POINTER(IPolygonArray), 'pInPolygons' ),
              ( [], POINTER(IPolylineArray), 'pCompletionLines' ),
              ( ['retval', 'out'], POINTER(POINTER(IPolygonArray)), 'ppCompletedPolygons' )),
    COMMETHOD([helpstring(u'Reports the  shortest geodesic distance between G1 and G2.')], HRESULT, 'GetDistanceGeodesic',
              ( [], POINTER(ISpatialReference), 'pSR' ),
              ( [], POINTER(IGeometry), 'pG1' ),
              ( [], POINTER(IGeometry), 'pG2' ),
              ( [], POINTER(ILinearUnit), 'pDistanceUnit' ),
              ( ['retval', 'out'], POINTER(c_double), 'pDistanceGeodesic' )),
]
################################################################
## code template for IGeometryServer2 implementation
##class IGeometryServer2_Impl(object):
##    def GetLengths2(self, pSR, pInPolylines, pLengthUnit):
##        u'Calculates the length of eacch polyline in the specified array. Optionally does unit conversion.'
##        #return ppLengths
##
##    def DensifyGeodesic(self, pSR, pInGeometries, maxSegmentLength, pLengthUnit):
##        u'Densifies geometries by plotting points along the geodesics between existing vertices (uses IPolycurve4::GeodesicDensify).'
##        #return ppOutGeometries
##
##    def Cut(self, pSR, pTargets, pCutter):
##        u'Cuts the target polyline or polygon Cutter.'
##        #return ppCutIndexes, ppCutPiecesGA
##
##    def Intersect(self, pSR, pInGA1, pInG2):
##        u'Returns an array of geometries where each result geometry R[i] is (array1[i] intersect G2. If G2 is an Envelope, then this is clipping.'
##        #return ppIntersectGA
##
##    def TrimExtend(self, pSR, pInPA, pTrimExtendTo, extendHow):
##        u'Trims or extends each polyline in the input array using TrimExtendTo (uses IConstructCurve::ConstructExtended for extension operation).'
##        #return pTE_PA
##
##    def Union(self, pSR, pInGA):
##        u'Returns the topological union of the input geometries (uses ITopologicalOperator::ConstructUnion). The input geometries must have the same dimension (0d, 1d, 2d).'
##        #return ppUnionedGeometry
##
##    def Reshape(self, pSR, pTarget, pReshaper):
##        u'Reshapes the target polyline or polygon. The reshaping polyline can have only one part. If the target was not reshaped, an empty geometry of the saem type is returned.'
##        #return pReshaped
##
##    def ConvexHull(self, pSR, pInGeometryArray):
##        u'Computes the convex hull of the input geometries'
##        #return pHull
##
##    def GetAreasAndLengths2(self, pSR, pInPolygons, pLengthUnit, pAreaUnit, areaUnitEnum):
##        u'Calculates areas and perimeter lengths for each polygon in the specified array. Optionally does unit conversion.'
##        #return ppAreas, ppLengths
##
##    def GetDistanceGeodesic(self, pSR, pG1, pG2, pDistanceUnit):
##        u'Reports the  shortest geodesic distance between G1 and G2.'
##        #return pDistanceGeodesic
##
##    def GetLengthsGeodesic(self, pSR, polylines, pLengthUnit):
##        u'Returns geodesic length of each Polyline.'
##        #return ppLengthsArray
##
##    def GetDistance(self, pSR, pG1, pG2, pDistanceUnit):
##        u'Reports shortest distance between G1 and G2.'
##        #return pDistance
##
##    def Offset(self, pSR, pInGA, offsetDistance, pOffsetUnit, offsetHow, bevelRatio):
##        u'Returns an array of polylines and polygons that are offset versions of the input polylines and polygons (uses ITopologicalOperator::ConstructOffset).'
##        #return ppOffsetGA
##
##    def Generalize(self, pSR, pInGA, maxDeviation, pDeviationUnit):
##        u'Returns generalized (Douglas-Poiker) versions of the input polylines and polygons (uses IPolycurve::Generalize).'
##        #return ppGeneralizedGA
##
##    def Difference(self, pSR, pInGA1, pInG2):
##        u'Returns an array of geometries where each result geometry R[i] is (array1[i] difference G2).'
##        #return pDifferenceGA
##
##    def AutoComplete(self, pSR, pInPolygons, pCompletionLines):
##        u'Discovers polygons bounded by existing polygons and input linework.'
##        #return ppCompletedPolygons
##

class ICompareCoordinateSystems(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides modified equality tests for spatial references.'
    _iid_ = GUID('{75F37757-465C-43B1-AFE8-8A4FDCB02839}')
    _idlflags_ = ['oleautomation']
ICompareCoordinateSystems._methods_ = [
    COMMETHOD([helpstring(u'Compares spatial references without considering any vertical coordinate system that may be associated with the spatial reference.')], HRESULT, 'IsEqualNoVCS',
              ( [], POINTER(ISpatialReference), 'other' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'equal' )),
    COMMETHOD([helpstring(u'For geographic coordinate systems, this version of IsEqual includes considers their left longitude properties. Same as IsEqual for projected coordinate systems.')], HRESULT, 'IsEqualLeftLongitude',
              ( [], POINTER(ISpatialReference), 'other' ),
              ( [], VARIANT_BOOL, 'compareVCS' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'equal' )),
]
################################################################
## code template for ICompareCoordinateSystems implementation
##class ICompareCoordinateSystems_Impl(object):
##    def IsEqualLeftLongitude(self, other, compareVCS):
##        u'For geographic coordinate systems, this version of IsEqual includes considers their left longitude properties. Same as IsEqual for projected coordinate systems.'
##        #return equal
##
##    def IsEqualNoVCS(self, other):
##        u'Compares spatial references without considering any vertical coordinate system that may be associated with the spatial reference.'
##        #return equal
##


# values for enumeration 'esriSRToleranceEnum'
esriSRToleranceIsNaN = 1
esriSRToleranceIsTooSmall = 2
esriSRToleranceOK = 3
esriSRToleranceEnum = c_int # enum
class IPointCollection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that manipulate the points of a Multipoint, Path, Ring, Polyline, Polygon, TriangleFan, TriangleStrip, or MultiPatch.'
    _iid_ = GUID('{DE08A214-4FC2-11D1-834E-0000F8775BE9}')
    _idlflags_ = []
class IPointCollection2(IPointCollection):
    _case_insensitive_ = True
    u'Provides access to members that manipulate the points of a Multipoint.'
    _iid_ = GUID('{F643A012-C208-48DB-B2D6-565F52B55C8E}')
    _idlflags_ = []
class IEnumVertex(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that iterate over the vertices or points of a geometry (see the EnumVertices property of the IPointCollection interface).'
    _iid_ = GUID('{4CF93638-EB81-11D2-9F2D-00C04F6BC8E8}')
    _idlflags_ = ['oleautomation']
    def __iter__(self):
        return self

    def next(self):
        item, fetched = self.Next(1)
        if fetched:
            return item
        raise StopIteration

    def __getitem__(self, index):
        self.Reset()
        self.Skip(index)
        item, fetched = self.Next(1)
        if fetched:
            return item
        raise IndexError(index)

IPointCollection._methods_ = [
    COMMETHOD(['propget', helpstring(u'The number of points in the collection.')], HRESULT, 'PointCount',
              ( ['retval', 'out'], POINTER(c_int), 'cPoints' )),
    COMMETHOD(['propget', helpstring(u'A  copy of the ith vertex of a Path, Ring, Polyline, or Polygon; or a reference to the ith point of a Multipoint, TriangleFan, or TriangleStrip.')], HRESULT, 'Point',
              ( [], c_int, 'i' ),
              ( ['retval', 'out'], POINTER(POINTER(IPoint)), 'Point' )),
    COMMETHOD([helpstring(u'Adds a vertex to a Path, Ring, Polyline, or Polygon; or adds a reference to the input point to a Multipoint, TriangleFan, or TriangleStrip.')], HRESULT, 'AddPoint',
              ( [], POINTER(IPoint), 'inPoint' ),
              ( ['optional'], POINTER(VARIANT), 'before' ),
              ( ['optional'], POINTER(VARIANT), 'after' )),
    COMMETHOD([helpstring(u'Changes the ith vertex or point to be a copy of the input point.')], HRESULT, 'UpdatePoint',
              ( [], c_int, 'i' ),
              ( [], POINTER(IPoint), 'p' )),
    COMMETHOD(['hidden', helpstring(u'Copies some points to an existing array of points. This method is intended for internal use only.')], HRESULT, 'QueryPoints',
              ( [], c_int, 'Index' ),
              ( [], c_int, 'Count' ),
              ( [], POINTER(POINTER(IPoint)), 'Points' )),
    COMMETHOD(['hidden', helpstring(u'Inserts copies of the input points as vertices into a Path, Ring, Polyline, or Polygon; or references to the input points into a Multipoint, TriangleFan, or TriangleStrip. This method is intended for internal use only.')], HRESULT, 'InsertPoints',
              ( [], c_int, 'Index' ),
              ( [], c_int, 'Count' ),
              ( ['in'], POINTER(POINTER(IPoint)), 'newPoints' )),
    COMMETHOD([helpstring(u'Inserts copies of points, from the input point collection, as vertices into this Path, Ring, Polyline, or Polygon; or references to points in the input point collection into this Multipoint, TriangleFan, or TriangleStrip.')], HRESULT, 'InsertPointCollection',
              ( [], c_int, 'Index' ),
              ( [], POINTER(IPointCollection), 'newPoints' )),
    COMMETHOD(['hidden', helpstring(u'Adds copies of the input points as vertices to this Path, Ring, Polyline, or Polygon; or references to the input points to this Multipoint, TriangleFan, or TriangleStrip. This method is intended for internal use only.')], HRESULT, 'AddPoints',
              ( [], c_int, 'Count' ),
              ( ['in'], POINTER(POINTER(IPoint)), 'newPoints' )),
    COMMETHOD([helpstring(u'Adds copies of points in the input point collection to this Path, Ring, Polyline, or Polygon; or adds references to the points in the collection to this Multipoint, TriangleFan, or TriangleStrip.')], HRESULT, 'AddPointCollection',
              ( [], POINTER(IPointCollection), 'newPoints' )),
    COMMETHOD(['hidden', helpstring(u'Replaces all existing vertices of this Path, Ring, Polyline, or Polygon with copies of the input points; or all existing points of this Multipoint, TriangleFan, or TriangleStrip with references to the input points (for C++ and VB users only).')], HRESULT, 'SetPoints',
              ( [], c_int, 'Count' ),
              ( ['in'], POINTER(POINTER(IPoint)), 'newPoints' )),
    COMMETHOD([helpstring(u'Replaces all vertices of this Path, Ring, Polyline, or Polygon with copies of the points in the input collection; or all points of this Multipoint, TriangleFan, or TriangleStrip with references to points from the input collection.')], HRESULT, 'SetPointCollection',
              ( [], POINTER(IPointCollection), 'newPoints' )),
    COMMETHOD([helpstring(u'Removes vertices from a Path, Ring, Polyline, or Polygon, or references to points from a Multipoint, TriangleFan, or TriangleStrip.')], HRESULT, 'RemovePoints',
              ( [], c_int, 'Index' ),
              ( [], c_int, 'Count' )),
    COMMETHOD(['propget', helpstring(u'A  new enumerator for this point collection.')], HRESULT, 'EnumVertices',
              ( ['retval', 'out'], POINTER(POINTER(IEnumVertex)), 'newVertexEnumerator' )),
    COMMETHOD(['restricted', helpstring(u'Adds vertices to this Path, Ring, Polyline, or Polygon, or adds new points to this Multipoint, TriangleFan, or TriangleStrip.')], HRESULT, 'AddWKSPoints',
              ( [], c_int, 'Count' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPoint), 'pointStructures' )),
    COMMETHOD(['restricted', helpstring(u'Replaces all vertices of this Path, Ring, Polyline, or Polygon with new ones, or replaces all points of this Multipoint, TriangleFan, or TriangleStrip with new ones.')], HRESULT, 'SetWKSPoints',
              ( [], c_int, 'Count' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPoint), 'pointStructures' )),
    COMMETHOD(['restricted', helpstring(u"Copies vertices'/points' coordinates to the array of point structures.")], HRESULT, 'QueryWKSPoints',
              ( [], c_int, 'Index' ),
              ( [], c_int, 'Count' ),
              ( ['out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPoint), 'pointStructures' )),
    COMMETHOD(['restricted', helpstring(u'Inserts new vertices/points into this Path, Ring, Polyline, Polygon, Multipoint, TriangleFan, TriangleStrip, or MultiPatch.')], HRESULT, 'InsertWKSPoints',
              ( [], c_int, 'Index' ),
              ( [], c_int, 'Count' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPoint), 'newPoints' )),
    COMMETHOD([helpstring(u'Replaces vertices/points within a PointCollection.')], HRESULT, 'ReplacePoints',
              ( [], c_int, 'Index' ),
              ( [], c_int, 'comingIn' ),
              ( [], c_int, 'goingAway' ),
              ( ['in'], POINTER(POINTER(IPoint)), 'newPoints' )),
    COMMETHOD([helpstring(u'Replaces vertices/points within a PointCollection.')], HRESULT, 'ReplacePointCollection',
              ( [], c_int, 'Index' ),
              ( [], c_int, 'goingAway' ),
              ( [], POINTER(IPointCollection), 'newPoints' )),
    COMMETHOD([helpstring(u'Queries for a point in the PointCollection at given index.')], HRESULT, 'QueryPoint',
              ( [], c_int, 'Index' ),
              ( [], POINTER(IPoint), 'Point' )),
]
################################################################
## code template for IPointCollection implementation
##class IPointCollection_Impl(object):
##    def ReplacePoints(self, Index, comingIn, goingAway, newPoints):
##        u'Replaces vertices/points within a PointCollection.'
##        #return 
##
##    def AddPoint(self, inPoint, before, after):
##        u'Adds a vertex to a Path, Ring, Polyline, or Polygon; or adds a reference to the input point to a Multipoint, TriangleFan, or TriangleStrip.'
##        #return 
##
##    def QueryPoints(self, Index, Count, Points):
##        u'Copies some points to an existing array of points. This method is intended for internal use only.'
##        #return 
##
##    def InsertPointCollection(self, Index, newPoints):
##        u'Inserts copies of points, from the input point collection, as vertices into this Path, Ring, Polyline, or Polygon; or references to points in the input point collection into this Multipoint, TriangleFan, or TriangleStrip.'
##        #return 
##
##    @property
##    def Point(self, i):
##        u'A  copy of the ith vertex of a Path, Ring, Polyline, or Polygon; or a reference to the ith point of a Multipoint, TriangleFan, or TriangleStrip.'
##        #return Point
##
##    def SetPointCollection(self, newPoints):
##        u'Replaces all vertices of this Path, Ring, Polyline, or Polygon with copies of the points in the input collection; or all points of this Multipoint, TriangleFan, or TriangleStrip with references to points from the input collection.'
##        #return 
##
##    def RemovePoints(self, Index, Count):
##        u'Removes vertices from a Path, Ring, Polyline, or Polygon, or references to points from a Multipoint, TriangleFan, or TriangleStrip.'
##        #return 
##
##    def AddWKSPoints(self, Count, pointStructures):
##        u'Adds vertices to this Path, Ring, Polyline, or Polygon, or adds new points to this Multipoint, TriangleFan, or TriangleStrip.'
##        #return 
##
##    def SetWKSPoints(self, Count, pointStructures):
##        u'Replaces all vertices of this Path, Ring, Polyline, or Polygon with new ones, or replaces all points of this Multipoint, TriangleFan, or TriangleStrip with new ones.'
##        #return 
##
##    @property
##    def PointCount(self):
##        u'The number of points in the collection.'
##        #return cPoints
##
##    def QueryPoint(self, Index, Point):
##        u'Queries for a point in the PointCollection at given index.'
##        #return 
##
##    def AddPointCollection(self, newPoints):
##        u'Adds copies of points in the input point collection to this Path, Ring, Polyline, or Polygon; or adds references to the points in the collection to this Multipoint, TriangleFan, or TriangleStrip.'
##        #return 
##
##    def UpdatePoint(self, i, p):
##        u'Changes the ith vertex or point to be a copy of the input point.'
##        #return 
##
##    @property
##    def EnumVertices(self):
##        u'A  new enumerator for this point collection.'
##        #return newVertexEnumerator
##
##    def InsertWKSPoints(self, Index, Count, newPoints):
##        u'Inserts new vertices/points into this Path, Ring, Polyline, Polygon, Multipoint, TriangleFan, TriangleStrip, or MultiPatch.'
##        #return 
##
##    def ReplacePointCollection(self, Index, goingAway, newPoints):
##        u'Replaces vertices/points within a PointCollection.'
##        #return 
##
##    def AddPoints(self, Count, newPoints):
##        u'Adds copies of the input points as vertices to this Path, Ring, Polyline, or Polygon; or references to the input points to this Multipoint, TriangleFan, or TriangleStrip. This method is intended for internal use only.'
##        #return 
##
##    def SetPoints(self, Count, newPoints):
##        u'Replaces all existing vertices of this Path, Ring, Polyline, or Polygon with copies of the input points; or all existing points of this Multipoint, TriangleFan, or TriangleStrip with references to the input points (for C++ and VB users only).'
##        #return 
##
##    def QueryWKSPoints(self, Index, Count):
##        u"Copies vertices'/points' coordinates to the array of point structures."
##        #return pointStructures
##
##    def InsertPoints(self, Index, Count, newPoints):
##        u'Inserts copies of the input points as vertices into a Path, Ring, Polyline, or Polygon; or references to the input points into a Multipoint, TriangleFan, or TriangleStrip. This method is intended for internal use only.'
##        #return 
##

IPointCollection2._methods_ = [
    COMMETHOD(['hidden', helpstring(u'Populates an array with references to points in the Multipoint. The QueryPoints method on IPointCollection makes copies of the points. This method is intended for internal use only.')], HRESULT, 'GetPoints',
              ( [], c_int, 'Index' ),
              ( [], c_int, 'Count' ),
              ( ['out'], POINTER(POINTER(IPoint)), 'Points' )),
]
################################################################
## code template for IPointCollection2 implementation
##class IPointCollection2_Impl(object):
##    def GetPoints(self, Index, Count):
##        u'Populates an array with references to points in the Multipoint. The QueryPoints method on IPointCollection makes copies of the points. This method is intended for internal use only.'
##        #return Points
##


# values for enumeration 'esriUTMConversionOptionsEnum'
esriUTMNoOptions = 0
esriUTMAddSpaces = 1
esriUTMUseNS = 2
esriUTMConversionOptionsEnum = c_int # enum
class ISpatialReferenceResolution(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the resolution of a spatial reference.'
    _iid_ = GUID('{833AC5B9-20E3-4896-8D55-770F4E90A2E4}')
    _idlflags_ = ['oleautomation']
ISpatialReferenceResolution._methods_ = [
    COMMETHOD([helpstring(u'Defines the XY resolution and domain extent of this spatial reference based on the extent of its horizon. Low precision SRs will have minimum resolution of 1/10mm in current units.')], HRESULT, 'ConstructFromHorizon'),
    COMMETHOD(['propput', helpstring(u'The XY resolution (distance in SR units between distinguishable grid points) of this spatial reference. Reported in meters for PCS/UCS and degrees for GCS when bStandardUnits is true or in current units of SR when it is false.')], HRESULT, 'XYResolution',
              ( [], VARIANT_BOOL, 'bStandardUnits' ),
              ( [], c_double, 'XYResolution' )),
    COMMETHOD(['propget', helpstring(u'The XY resolution (distance in SR units between distinguishable grid points) of this spatial reference. Reported in meters for PCS/UCS and degrees for GCS when bStandardUnits is true or in current units of SR when it is false.')], HRESULT, 'XYResolution',
              ( [], VARIANT_BOOL, 'bStandardUnits' ),
              ( ['retval', 'out'], POINTER(c_double), 'XYResolution' )),
    COMMETHOD([helpstring(u'defaults: PCS(hi): 1/10 mm; PCS(lo): 1 mm; GCS(hi): 1/10,000 arc-second; GCS(lo): 1/500 arc-second; UCS(hi): 1/10 mm (assumed); UCS(lo): 1 mm (assumed).')], HRESULT, 'SetDefaultXYResolution'),
    COMMETHOD(['propput', helpstring(u'The Z resolution (height/depth distance between distinguishable grid points) of this spatial reference. Reported in meters when bStandardUnits is true or in current units of SR when it is false.')], HRESULT, 'ZResolution',
              ( [], VARIANT_BOOL, 'bStandardUnits' ),
              ( [], c_double, 'ZResolution' )),
    COMMETHOD(['propget', helpstring(u'The Z resolution (height/depth distance between distinguishable grid points) of this spatial reference. Reported in meters when bStandardUnits is true or in current units of SR when it is false.')], HRESULT, 'ZResolution',
              ( [], VARIANT_BOOL, 'bStandardUnits' ),
              ( ['retval', 'out'], POINTER(c_double), 'ZResolution' )),
    COMMETHOD([helpstring(u'Sets the z coordinate grid resolution to 1 mm for a low precision spatial reference or 1/10 mm for a high precision spatial reference.')], HRESULT, 'SetDefaultZResolution'),
    COMMETHOD(['propput', helpstring(u'The M, or measure, resolution of this spatial reference.')], HRESULT, 'MResolution',
              ( [], c_double, 'interval' )),
    COMMETHOD(['propget', helpstring(u'The M, or measure, resolution of this spatial reference.')], HRESULT, 'MResolution',
              ( ['retval', 'out'], POINTER(c_double), 'interval' )),
    COMMETHOD([helpstring(u'Sets the m coordinate grid resolution to 1 mm for a low precision spatial reference or 1/10 mm for a high precision spatial reference.')], HRESULT, 'SetDefaultMResolution'),
]
################################################################
## code template for ISpatialReferenceResolution implementation
##class ISpatialReferenceResolution_Impl(object):
##    def SetDefaultMResolution(self):
##        u'Sets the m coordinate grid resolution to 1 mm for a low precision spatial reference or 1/10 mm for a high precision spatial reference.'
##        #return 
##
##    def ConstructFromHorizon(self):
##        u'Defines the XY resolution and domain extent of this spatial reference based on the extent of its horizon. Low precision SRs will have minimum resolution of 1/10mm in current units.'
##        #return 
##
##    def SetDefaultXYResolution(self):
##        u'defaults: PCS(hi): 1/10 mm; PCS(lo): 1 mm; GCS(hi): 1/10,000 arc-second; GCS(lo): 1/500 arc-second; UCS(hi): 1/10 mm (assumed); UCS(lo): 1 mm (assumed).'
##        #return 
##
##    def _get(self, bStandardUnits):
##        u'The Z resolution (height/depth distance between distinguishable grid points) of this spatial reference. Reported in meters when bStandardUnits is true or in current units of SR when it is false.'
##        #return ZResolution
##    def _set(self, bStandardUnits, ZResolution):
##        u'The Z resolution (height/depth distance between distinguishable grid points) of this spatial reference. Reported in meters when bStandardUnits is true or in current units of SR when it is false.'
##    ZResolution = property(_get, _set, doc = _set.__doc__)
##
##    def SetDefaultZResolution(self):
##        u'Sets the z coordinate grid resolution to 1 mm for a low precision spatial reference or 1/10 mm for a high precision spatial reference.'
##        #return 
##
##    def _get(self):
##        u'The M, or measure, resolution of this spatial reference.'
##        #return interval
##    def _set(self, interval):
##        u'The M, or measure, resolution of this spatial reference.'
##    MResolution = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, bStandardUnits):
##        u'The XY resolution (distance in SR units between distinguishable grid points) of this spatial reference. Reported in meters for PCS/UCS and degrees for GCS when bStandardUnits is true or in current units of SR when it is false.'
##        #return XYResolution
##    def _set(self, bStandardUnits, XYResolution):
##        u'The XY resolution (distance in SR units between distinguishable grid points) of this spatial reference. Reported in meters for PCS/UCS and degrees for GCS when bStandardUnits is true or in current units of SR when it is false.'
##    XYResolution = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'esriMGRSModeEnum'
esriMGRSMode_Automatic = 0
esriMGRSMode_USNG = 1
esriMGRSMode_NewStyle = 2
esriMGRSMode_OldStyle = 3
esriMGRSMode_NewWith180InZone01 = 11
esriMGRSMode_OldWith180InZone01 = 12
esriMGRSModeEnum = c_int # enum

# values for enumeration 'esriGARSModeEnum'
esriGARSModeLL = 0
esriGARSModeCENTER = 1
esriGARSModeEnum = c_int # enum

# values for enumeration 'esriSegmentExtension'
esriNoExtension = 0
esriExtendTangentAtFrom = 1
esriExtendEmbeddedAtFrom = 2
esriExtendTangentAtTo = 4
esriExtendEmbeddedAtTo = 8
esriExtendTangents = 5
esriExtendEmbedded = 10
esriExtendAtFrom = 3
esriExtendAtTo = 12
esriSegmentExtension = c_int # enum
IProximityOperator3D._methods_ = [
    COMMETHOD([helpstring(u"Copies into 'nearest' a point on this geometry nearest to the input point.")], HRESULT, 'QueryNearestPoint3D',
              ( [], POINTER(IPoint), 'pInP' ),
              ( [], esriSegmentExtension, 'extension' ),
              ( [], POINTER(IPoint), 'pNearest' )),
    COMMETHOD([helpstring(u'Creates and returns a point on this geometry nearest to the input point.')], HRESULT, 'ReturnNearestPoint3D',
              ( [], POINTER(IPoint), 'pInP' ),
              ( [], esriSegmentExtension, 'extension' ),
              ( ['retval', 'out'], POINTER(POINTER(IPoint)), 'ppNearest' )),
    COMMETHOD([helpstring(u'Returns the minimal distance between two geometries.')], HRESULT, 'ReturnDistance3D',
              ( [], POINTER(IGeometry), 'pOther' ),
              ( ['retval', 'out'], POINTER(c_double), 'pDistance' )),
]
################################################################
## code template for IProximityOperator3D implementation
##class IProximityOperator3D_Impl(object):
##    def ReturnDistance3D(self, pOther):
##        u'Returns the minimal distance between two geometries.'
##        #return pDistance
##
##    def QueryNearestPoint3D(self, pInP, extension, pNearest):
##        u"Copies into 'nearest' a point on this geometry nearest to the input point."
##        #return 
##
##    def ReturnNearestPoint3D(self, pInP, extension):
##        u'Creates and returns a point on this geometry nearest to the input point.'
##        #return ppNearest
##

class IGeometryCollection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that can be used for accessing, adding and removing individual geometries of a multi-part geometry (Multipoint, Polyline, Polygon, MultiPatch, and GeometryBag).'
    _iid_ = GUID('{C801565E-99CA-11D0-82F7-0000F8034032}')
    _idlflags_ = []
IGeometryCollection._methods_ = [
    COMMETHOD(['propget', helpstring(u'The number of geometries in this collection.')], HRESULT, 'GeometryCount',
              ( ['retval', 'out'], POINTER(c_int), 'cParts' )),
    COMMETHOD(['propget', helpstring(u'A  reference to the ith geometry.')], HRESULT, 'Geometry',
              ( [], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IGeometry)), 'outPart' )),
    COMMETHOD([helpstring(u'Adds a reference to the input geometry either at the end, or before, or after the specified index.')], HRESULT, 'AddGeometry',
              ( [], POINTER(IGeometry), 'inGeometry' ),
              ( ['optional'], POINTER(VARIANT), 'before' ),
              ( ['optional'], POINTER(VARIANT), 'after' )),
    COMMETHOD(['hidden', helpstring(u'Populates the array with references to a sub-sequence of geometries. This method is intended for internal use only.')], HRESULT, 'QueryGeometries',
              ( [], c_int, 'Index' ),
              ( [], c_int, 'Count' ),
              ( ['out'], POINTER(POINTER(IGeometry)), 'geometries' )),
    COMMETHOD(['hidden', helpstring(u'Adds references to the specified geometries. This method is intended for internal use only.')], HRESULT, 'AddGeometries',
              ( [], c_int, 'Count' ),
              ( ['in'], POINTER(POINTER(IGeometry)), 'newGeometries' )),
    COMMETHOD([helpstring(u'Adds references to geometries in the input collection.')], HRESULT, 'AddGeometryCollection',
              ( [], POINTER(IGeometryCollection), 'newGeometries' )),
    COMMETHOD(['hidden', helpstring(u'Inserts at the specified index references to some number of geometries in the input array. This method is intended for internal use only.')], HRESULT, 'InsertGeometries',
              ( [], c_int, 'Index' ),
              ( [], c_int, 'Count' ),
              ( ['in'], POINTER(POINTER(IGeometry)), 'newGeometries' )),
    COMMETHOD([helpstring(u'Inserts at the specified index references to all if the geometries in the input collection.')], HRESULT, 'InsertGeometryCollection',
              ( [], c_int, 'Index' ),
              ( [], POINTER(IGeometryCollection), 'newGeometries' )),
    COMMETHOD(['hidden', helpstring(u'Replaces all geometries in the collection with the specified number of references to those in the input array. This method is intended for internal use only.')], HRESULT, 'SetGeometries',
              ( [], c_int, 'Count' ),
              ( ['in'], POINTER(POINTER(IGeometry)), 'newGeometries' )),
    COMMETHOD([helpstring(u'Replaces all geometries in the collection with references to geometries from the input collection.')], HRESULT, 'SetGeometryCollection',
              ( [], POINTER(IGeometryCollection), 'newParts' )),
    COMMETHOD([helpstring(u'Removes references to some geometries from this collection.')], HRESULT, 'RemoveGeometries',
              ( [], c_int, 'Index' ),
              ( [], c_int, 'Count' )),
    COMMETHOD([helpstring(u'Tells this geometry collection that some of its geometries have been altered. Use this method on polylines, polygons and multipatches after directly editing one of its parts.')], HRESULT, 'GeometriesChanged'),
]
################################################################
## code template for IGeometryCollection implementation
##class IGeometryCollection_Impl(object):
##    def GeometriesChanged(self):
##        u'Tells this geometry collection that some of its geometries have been altered. Use this method on polylines, polygons and multipatches after directly editing one of its parts.'
##        #return 
##
##    def SetGeometries(self, Count, newGeometries):
##        u'Replaces all geometries in the collection with the specified number of references to those in the input array. This method is intended for internal use only.'
##        #return 
##
##    def AddGeometryCollection(self, newGeometries):
##        u'Adds references to geometries in the input collection.'
##        #return 
##
##    def SetGeometryCollection(self, newParts):
##        u'Replaces all geometries in the collection with references to geometries from the input collection.'
##        #return 
##
##    @property
##    def GeometryCount(self):
##        u'The number of geometries in this collection.'
##        #return cParts
##
##    def QueryGeometries(self, Index, Count):
##        u'Populates the array with references to a sub-sequence of geometries. This method is intended for internal use only.'
##        #return geometries
##
##    @property
##    def Geometry(self, Index):
##        u'A  reference to the ith geometry.'
##        #return outPart
##
##    def AddGeometry(self, inGeometry, before, after):
##        u'Adds a reference to the input geometry either at the end, or before, or after the specified index.'
##        #return 
##
##    def RemoveGeometries(self, Index, Count):
##        u'Removes references to some geometries from this collection.'
##        #return 
##
##    def AddGeometries(self, Count, newGeometries):
##        u'Adds references to the specified geometries. This method is intended for internal use only.'
##        #return 
##
##    def InsertGeometries(self, Index, Count, newGeometries):
##        u'Inserts at the specified index references to some number of geometries in the input array. This method is intended for internal use only.'
##        #return 
##
##    def InsertGeometryCollection(self, Index, newGeometries):
##        u'Inserts at the specified index references to all if the geometries in the input collection.'
##        #return 
##

class CompositeGeoTransformation(CoClass):
    u'Performs a sequence of geographic transformations.'
    _reg_clsid_ = GUID('{5847FB82-DBAE-11D3-9F60-00C04F6BDD7F}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
class ITransformationGEN(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that apply a function (or its inverse) to a set of points or measures. The suffix of each method indicates the type of parameters operated on. ITransformationGEN is generic version of ITransformation.'
    _iid_ = GUID('{5F015FE6-38CF-451D-81CD-7E784B71ADD7}')
    _idlflags_ = ['oleautomation']
class IGeoTransformation(ITransformation):
    _case_insensitive_ = True
    u'Provides access to members that define a geographic (datum) transformation.'
    _iid_ = GUID('{9273BB60-C611-11D2-BD08-0000F875BCCE}')
    _idlflags_ = ['oleautomation']
class ICompositeGeoTransformation(IGeoTransformation):
    _case_insensitive_ = True
    u'Provides access to members that control a set of geographic transformations.'
    _iid_ = GUID('{3BE52788-DDA4-11D3-9F61-00C04F6BDD7F}')
    _idlflags_ = ['oleautomation']
CompositeGeoTransformation._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ITransformationGEN, ITransformation, IGeoTransformation, ICompositeGeoTransformation, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]


# values for enumeration 'esriSpatialReferenceError'
S_SPATIALREFERENCE_OK = 0
E_SPATIALREFERENCE_NOPRECISION = 514
E_SPATIALREFERENCE_INVALID_PARAMETER = 515
E_SPATIALREFERENCE_CANTDEFINESR = 516
E_SPATIALREFERENCE_PRECISIONTOOHIGH = 517
E_SPATIALREFERENCE_INSUFFICIENTPRECISION = 518
E_SPATIALREFERENCE_NOTAPRJFILE = 519
E_SPATIALREFERENCE_NOTAGCS = 520
E_SPATIALREFERENCE_NOTAPCS = 521
E_SPATIALREFERENCE_NOTAUNIT = 522
E_SPATIALREFERENCE_EMPTYUNIT = 523
E_SPATIALREFERENCE_CANTDEFINEAUTH = 524
E_SPATIALREFERENCE_BADVCSID = 525
E_SPATIALREFERENCE_NOMPRECISION = 526
E_SPATIALREFERENCE_NOZPRECISION = 527
E_SPATIALREFERENCE_CANTLOADXFORMFILE = 528
E_SPATIALREFERENCE_INVALID_JSON_SR = 529
E_SPATIALREFERENCE_WRONG_UNIT_TYPE = 530
esriSpatialReferenceError = c_int # enum
class IBezierCurve(ICurve):
    _case_insensitive_ = True
    u'Provides access to members that identify third degree bezier curve segments and defines their properties.'
    _iid_ = GUID('{19B8936C-B159-11D1-A2D3-0000F8775FBF}')
    _idlflags_ = []
class IBezierCurve2(IBezierCurve):
    _case_insensitive_ = True
    u'Provides access to members that identify third degree bezier curve segments and defines their properties.'
    _iid_ = GUID('{6657316F-EC45-4D6B-9526-440DE441C250}')
    _idlflags_ = []
class IBezierCurve3(IBezierCurve2):
    _case_insensitive_ = True
    u'Provides access to members that identify third degree bezier curve segments and defines their properties.'
    _iid_ = GUID('{7D2EBDD3-EDF5-4072-91F4-978FB62C6E3B}')
    _idlflags_ = []

# values for enumeration 'esriGeometryType'
esriGeometryNull = 0
esriGeometryPoint = 1
esriGeometryMultipoint = 2
esriGeometryLine = 13
esriGeometryCircularArc = 14
esriGeometryEllipticArc = 16
esriGeometryBezier3Curve = 15
esriGeometryPath = 6
esriGeometryPolyline = 3
esriGeometryRing = 11
esriGeometryPolygon = 4
esriGeometryEnvelope = 5
esriGeometryAny = 7
esriGeometryBag = 17
esriGeometryMultiPatch = 9
esriGeometryTriangleStrip = 18
esriGeometryTriangleFan = 19
esriGeometryRay = 20
esriGeometrySphere = 21
esriGeometryTriangles = 22
esriGeometryType = c_int # enum

# values for enumeration 'esriGeometryDimension'
esriGeometry0Dimension = 1
esriGeometry1Dimension = 2
esriGeometry2Dimension = 4
esriGeometry25Dimension = 5
esriGeometry3Dimension = 6
esriGeometryNoDimension = -1
esriGeometryDimension = c_int # enum
IGeometry._methods_ = [
    COMMETHOD(['propget', helpstring(u'The type of this geometry.')], HRESULT, 'GeometryType',
              ( ['retval', 'out'], POINTER(esriGeometryType), 'shapeType' )),
    COMMETHOD(['propget', helpstring(u'The topological dimension of this geometry.')], HRESULT, 'Dimension',
              ( ['retval', 'out'], POINTER(esriGeometryDimension), 'Dimension' )),
    COMMETHOD(['propget', helpstring(u'The spatial reference associated with this geometry.')], HRESULT, 'SpatialReference',
              ( ['retval', 'out'], POINTER(POINTER(ISpatialReference)), 'spatialRef' )),
    COMMETHOD(['propputref', helpstring(u'The spatial reference associated with this geometry.')], HRESULT, 'SpatialReference',
              ( [], POINTER(ISpatialReference), 'spatialRef' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether this geometry contains any points.')], HRESULT, 'IsEmpty',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsEmpty' )),
    COMMETHOD([helpstring(u'Removes all points from this geometry.')], HRESULT, 'SetEmpty'),
    COMMETHOD([helpstring(u"Copies this geometry's envelope properties into the specified envelope.")], HRESULT, 'QueryEnvelope',
              ( [], POINTER(IEnvelope), 'outEnvelope' )),
    COMMETHOD(['propget', helpstring(u"Creates a copy of this geometry's envelope and returns it.")], HRESULT, 'Envelope',
              ( ['retval', 'out'], POINTER(POINTER(IEnvelope)), 'newEnvelope' )),
    COMMETHOD([helpstring(u'Projects this geometry into a new spatial reference.')], HRESULT, 'Project',
              ( [], POINTER(ISpatialReference), 'newReferenceSystem' )),
    COMMETHOD([helpstring(u"Moves points of this geometry so that they can be represented in the precision of the geometry's associated spatial reference system.")], HRESULT, 'SnapToSpatialReference'),
    COMMETHOD([helpstring(u'Shifts longitudes, if need be, into a continuous range of 360 degrees.')], HRESULT, 'GeoNormalize'),
    COMMETHOD([helpstring(u'Normalizes longitudes into a continuous range containing the longitude. This method is obsolete.')], HRESULT, 'GeoNormalizeFromLongitude',
              ( [], c_double, 'Longitude' )),
]
################################################################
## code template for IGeometry implementation
##class IGeometry_Impl(object):
##    def GeoNormalize(self):
##        u'Shifts longitudes, if need be, into a continuous range of 360 degrees.'
##        #return 
##
##    def QueryEnvelope(self, outEnvelope):
##        u"Copies this geometry's envelope properties into the specified envelope."
##        #return 
##
##    @property
##    def Envelope(self):
##        u"Creates a copy of this geometry's envelope and returns it."
##        #return newEnvelope
##
##    def SpatialReference(self, spatialRef):
##        u'The spatial reference associated with this geometry.'
##        #return 
##
##    def Project(self, newReferenceSystem):
##        u'Projects this geometry into a new spatial reference.'
##        #return 
##
##    def SetEmpty(self):
##        u'Removes all points from this geometry.'
##        #return 
##
##    @property
##    def IsEmpty(self):
##        u'Indicates whether this geometry contains any points.'
##        #return IsEmpty
##
##    def SnapToSpatialReference(self):
##        u"Moves points of this geometry so that they can be represented in the precision of the geometry's associated spatial reference system."
##        #return 
##
##    @property
##    def GeometryType(self):
##        u'The type of this geometry.'
##        #return shapeType
##
##    def GeoNormalizeFromLongitude(self, Longitude):
##        u'Normalizes longitudes into a continuous range containing the longitude. This method is obsolete.'
##        #return 
##
##    @property
##    def Dimension(self):
##        u'The topological dimension of this geometry.'
##        #return Dimension
##

class ILine(ICurve):
    _case_insensitive_ = True
    u'Provides access to members that identify a straight line segment and defines its properties.'
    _iid_ = GUID('{FEA4C71C-C5AE-11D0-8307-0000F8034032}')
    _idlflags_ = ['oleautomation']
ICurve._methods_ = [
    COMMETHOD(['propget', helpstring(u'The length of the curve.')], HRESULT, 'Length',
              ( ['retval', 'out'], POINTER(c_double), 'Length' )),
    COMMETHOD(['propget', helpstring(u"The 'from' point of the curve.")], HRESULT, 'FromPoint',
              ( ['retval', 'out'], POINTER(POINTER(IPoint)), 'from' )),
    COMMETHOD(['propput', helpstring(u"The 'from' point of the curve.")], HRESULT, 'FromPoint',
              ( [], POINTER(IPoint), 'from' )),
    COMMETHOD([helpstring(u"Copies this curve's 'from' point to the input point.")], HRESULT, 'QueryFromPoint',
              ( [], POINTER(IPoint), 'from' )),
    COMMETHOD(['propget', helpstring(u"The 'to' point of the curve.")], HRESULT, 'ToPoint',
              ( ['retval', 'out'], POINTER(POINTER(IPoint)), 'to' )),
    COMMETHOD(['propput', helpstring(u"The 'to' point of the curve.")], HRESULT, 'ToPoint',
              ( [], POINTER(IPoint), 'to' )),
    COMMETHOD([helpstring(u"Copies the curve's 'to' point into the input point.")], HRESULT, 'QueryToPoint',
              ( [], POINTER(IPoint), 'to' )),
    COMMETHOD([helpstring(u'Copies to outPoint the properties of a point on the curve at a specified distance from the beginning of the curve.')], HRESULT, 'QueryPoint',
              ( [], esriSegmentExtension, 'extension' ),
              ( [], c_double, 'DistanceAlongCurve' ),
              ( [], VARIANT_BOOL, 'asRatio' ),
              ( [], POINTER(IPoint), 'outPoint' )),
    COMMETHOD([helpstring(u'Finds the point on the curve closest to inPoint, then copies that point to outPoint; optionally calculates related items.')], HRESULT, 'QueryPointAndDistance',
              ( [], esriSegmentExtension, 'extension' ),
              ( [], POINTER(IPoint), 'inPoint' ),
              ( [], VARIANT_BOOL, 'asRatio' ),
              ( [], POINTER(IPoint), 'outPoint' ),
              ( ['in', 'out'], POINTER(c_double), 'DistanceAlongCurve' ),
              ( ['in', 'out'], POINTER(c_double), 'distanceFromCurve' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'bRightSide' )),
    COMMETHOD([helpstring(u'Constructs a line tangent to a curve from a point at a specified distance along the curve.')], HRESULT, 'QueryTangent',
              ( [], esriSegmentExtension, 'extension' ),
              ( [], c_double, 'DistanceAlongCurve' ),
              ( [], VARIANT_BOOL, 'asRatio' ),
              ( [], c_double, 'Length' ),
              ( [], POINTER(ILine), 'tangent' )),
    COMMETHOD([helpstring(u'Constructs a line normal to a curve from a point at a specified distance along the curve.')], HRESULT, 'QueryNormal',
              ( [], esriSegmentExtension, 'extension' ),
              ( [], c_double, 'DistanceAlongCurve' ),
              ( [], VARIANT_BOOL, 'asRatio' ),
              ( [], c_double, 'Length' ),
              ( [], POINTER(ILine), 'normal' )),
    COMMETHOD([helpstring(u'Extracts a portion of this curve into a new curve.')], HRESULT, 'GetSubcurve',
              ( [], c_double, 'fromDistance' ),
              ( [], c_double, 'toDistance' ),
              ( [], VARIANT_BOOL, 'asRatio' ),
              ( ['out'], POINTER(POINTER(ICurve)), 'outSubcurve' )),
    COMMETHOD([helpstring(u"Reverses the parameterization of the curve ('from' point becomes 'to' point, first segment becomes last segment, etc).")], HRESULT, 'ReverseOrientation'),
    COMMETHOD(['propget', helpstring(u"Indicates if 'from' and 'to' points (of each part) are identical.")], HRESULT, 'IsClosed',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsClosed' )),
]
################################################################
## code template for ICurve implementation
##class ICurve_Impl(object):
##    def _get(self):
##        u"The 'to' point of the curve."
##        #return to
##    def _set(self, to):
##        u"The 'to' point of the curve."
##    ToPoint = property(_get, _set, doc = _set.__doc__)
##
##    def GetSubcurve(self, fromDistance, toDistance, asRatio):
##        u'Extracts a portion of this curve into a new curve.'
##        #return outSubcurve
##
##    def QueryFromPoint(self, from):
##        u"Copies this curve's 'from' point to the input point."
##        #return 
##
##    def _get(self):
##        u"The 'from' point of the curve."
##        #return from
##    def _set(self, from):
##        u"The 'from' point of the curve."
##    FromPoint = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def IsClosed(self):
##        u"Indicates if 'from' and 'to' points (of each part) are identical."
##        #return IsClosed
##
##    @property
##    def Length(self):
##        u'The length of the curve.'
##        #return Length
##
##    def QueryPoint(self, extension, DistanceAlongCurve, asRatio, outPoint):
##        u'Copies to outPoint the properties of a point on the curve at a specified distance from the beginning of the curve.'
##        #return 
##
##    def QueryNormal(self, extension, DistanceAlongCurve, asRatio, Length, normal):
##        u'Constructs a line normal to a curve from a point at a specified distance along the curve.'
##        #return 
##
##    def QueryPointAndDistance(self, extension, inPoint, asRatio, outPoint):
##        u'Finds the point on the curve closest to inPoint, then copies that point to outPoint; optionally calculates related items.'
##        #return DistanceAlongCurve, distanceFromCurve, bRightSide
##
##    def ReverseOrientation(self):
##        u"Reverses the parameterization of the curve ('from' point becomes 'to' point, first segment becomes last segment, etc)."
##        #return 
##
##    def QueryTangent(self, extension, DistanceAlongCurve, asRatio, Length, tangent):
##        u'Constructs a line tangent to a curve from a point at a specified distance along the curve.'
##        #return 
##
##    def QueryToPoint(self, to):
##        u"Copies the curve's 'to' point into the input point."
##        #return 
##

IBezierCurve._methods_ = [
    COMMETHOD([helpstring(u"Copies this Bezier curve's control points into the array of 4 existing points.")], HRESULT, 'QueryCoords',
              ( [], POINTER(POINTER(IPoint)), 'controlPoints' )),
    COMMETHOD([helpstring(u"Sets this Bezier curve's control points from an array of between 1 to 4 input points.")], HRESULT, 'PutCoords',
              ( [], c_int, 'numPoints' ),
              ( ['in'], POINTER(POINTER(IPoint)), 'controlPoints' )),
    COMMETHOD(['restricted', helpstring(u"Copies this Bezier curve's control points into the array of 4 existing point structures.")], HRESULT, 'QueryWKSCoords',
              ( ['out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPoint), 'controlPoints' )),
    COMMETHOD(['restricted', helpstring(u"Sets this Bezier curve's control points from the array of 4 input point structures.")], HRESULT, 'PutWKSCoords',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPoint), 'controlPoints' )),
    COMMETHOD([helpstring(u'Copies the specified control point of this Bezier curve into the input point.')], HRESULT, 'QueryCoord',
              ( [], c_int, 'Index' ),
              ( [], POINTER(IPoint), 'controlPoint' )),
    COMMETHOD([helpstring(u'Sets the specified (0 <= index < 4) control point of this Bezier curve.')], HRESULT, 'PutCoord',
              ( [], c_int, 'Index' ),
              ( [], POINTER(IPoint), 'controlPoint' )),
    COMMETHOD(['propget', helpstring(u'The degree of the Bezier curve.  For third degree Beziers, this is always 3.')], HRESULT, 'Degree',
              ( ['retval', 'out'], POINTER(c_int), 'Degree' )),
    COMMETHOD([helpstring(u"Returns tangent vector at 'from' point, based on chord length parametrization; and whether it has been set by user or by smoothing process.")], HRESULT, 'QueryChordLengthTangentAtFrom',
              ( [], POINTER(IPoint), 'tangent' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'setByUser' )),
    COMMETHOD([helpstring(u"Returns tangent vector at 'to' point, based on chord length parametrization; and whether it has been set by user or by smoothing process.")], HRESULT, 'QueryChordLengthTangentAtTo',
              ( [], POINTER(IPoint), 'tangent' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'setByUser' )),
    COMMETHOD([helpstring(u"Establishes tangent vector at 'from' point, based on chord length parametrization; and sets flag whether it has been set by user or by smoothing process.")], HRESULT, 'SetChordLengthTangentAtFrom',
              ( [], POINTER(IPoint), 'tangent' ),
              ( [], VARIANT_BOOL, 'setByUser' )),
    COMMETHOD([helpstring(u"Establishes tangent vector at 'to' point, based on chord length parametrization; and sets flag whether it has been set by user or by smoothing process.")], HRESULT, 'SetChordLengthTangentAtTo',
              ( [], POINTER(IPoint), 'tangent' ),
              ( [], VARIANT_BOOL, 'setByUser' )),
    COMMETHOD([helpstring(u'Finds inflection point; sets it empty if none exists.')], HRESULT, 'QueryInflectionPoint',
              ( [], POINTER(IPoint), 'inflectionPoint' )),
]
################################################################
## code template for IBezierCurve implementation
##class IBezierCurve_Impl(object):
##    def PutCoords(self, numPoints, controlPoints):
##        u"Sets this Bezier curve's control points from an array of between 1 to 4 input points."
##        #return 
##
##    @property
##    def Degree(self):
##        u'The degree of the Bezier curve.  For third degree Beziers, this is always 3.'
##        #return Degree
##
##    def PutWKSCoords(self, controlPoints):
##        u"Sets this Bezier curve's control points from the array of 4 input point structures."
##        #return 
##
##    def QueryWKSCoords(self):
##        u"Copies this Bezier curve's control points into the array of 4 existing point structures."
##        #return controlPoints
##
##    def QueryChordLengthTangentAtTo(self, tangent):
##        u"Returns tangent vector at 'to' point, based on chord length parametrization; and whether it has been set by user or by smoothing process."
##        #return setByUser
##
##    def SetChordLengthTangentAtTo(self, tangent, setByUser):
##        u"Establishes tangent vector at 'to' point, based on chord length parametrization; and sets flag whether it has been set by user or by smoothing process."
##        #return 
##
##    def QueryCoords(self, controlPoints):
##        u"Copies this Bezier curve's control points into the array of 4 existing points."
##        #return 
##
##    def QueryCoord(self, Index, controlPoint):
##        u'Copies the specified control point of this Bezier curve into the input point.'
##        #return 
##
##    def SetChordLengthTangentAtFrom(self, tangent, setByUser):
##        u"Establishes tangent vector at 'from' point, based on chord length parametrization; and sets flag whether it has been set by user or by smoothing process."
##        #return 
##
##    def QueryChordLengthTangentAtFrom(self, tangent):
##        u"Returns tangent vector at 'from' point, based on chord length parametrization; and whether it has been set by user or by smoothing process."
##        #return setByUser
##
##    def PutCoord(self, Index, controlPoint):
##        u'Sets the specified (0 <= index < 4) control point of this Bezier curve.'
##        #return 
##
##    def QueryInflectionPoint(self, inflectionPoint):
##        u'Finds inflection point; sets it empty if none exists.'
##        #return 
##

IBezierCurve2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if the curve degenerated to a line.')], HRESULT, 'IsLine',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsLine' )),
]
################################################################
## code template for IBezierCurve2 implementation
##class IBezierCurve2_Impl(object):
##    @property
##    def IsLine(self):
##        u'Indicates if the curve degenerated to a line.'
##        #return IsLine
##

IBezierCurve3._methods_ = [
    COMMETHOD(['propget', helpstring(u'The parametric distance along the bezier.')], HRESULT, 'Parameter',
              ( ['in'], c_double, 'DistanceAlongCurve' ),
              ( ['in'], VARIANT_BOOL, 'asRatio' ),
              ( ['retval', 'out'], POINTER(c_double), 'u' )),
]
################################################################
## code template for IBezierCurve3 implementation
##class IBezierCurve3_Impl(object):
##    @property
##    def Parameter(self, DistanceAlongCurve, asRatio):
##        u'The parametric distance along the bezier.'
##        #return u
##

class ISpatialReferenceTolerance(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that specify the spatial and M tolerances of a spatial reference.'
    _iid_ = GUID('{587DC301-2766-4597-A3E5-9FA152329EB8}')
    _idlflags_ = ['oleautomation']
ISpatialReferenceTolerance._methods_ = [
    COMMETHOD([helpstring(u'Sets the default cluster tolerance used to control point coalescing in the X and Y dimensions (the equivalent of 1 mm in the current spatial reference units).')], HRESULT, 'SetDefaultXYTolerance'),
    COMMETHOD([helpstring(u'Sets the xy cluster tolerance to be 2.0 * resolution. Use this value for compatibility with pre-9.2 topological and relational operators.')], HRESULT, 'SetMinimumXYTolerance'),
    COMMETHOD(['propget', helpstring(u'The xy tolerance used to control point coalescing in the X and Y dimensions.')], HRESULT, 'XYTolerance',
              ( ['retval', 'out'], POINTER(c_double), 'XYTolerance' )),
    COMMETHOD(['propput', helpstring(u'The xy tolerance used to control point coalescing in the X and Y dimensions.')], HRESULT, 'XYTolerance',
              ( [], c_double, 'XYTolerance' )),
    COMMETHOD([helpstring(u'Sets the default value for the Z cluster tolerance used to control point coalescing strictly along the Z axis (the equivalent of 1 mm in the current vertical coordinate system units).')], HRESULT, 'SetDefaultZTolerance'),
    COMMETHOD([helpstring(u'Sets the minimum value for the Z cluster tolerance (i.e., pre 9.2) used to control point coalescing strictly along the Z axis (the equivalent of 1 mm in the current vertical coordinate system units).')], HRESULT, 'SetMinimumZTolerance'),
    COMMETHOD(['propget', helpstring(u'The tolerance used to control point coalescing strictly along the Z axis.')], HRESULT, 'ZTolerance',
              ( ['retval', 'out'], POINTER(c_double), 'ZTolerance' )),
    COMMETHOD(['propput', helpstring(u'The tolerance used to control point coalescing strictly along the Z axis.')], HRESULT, 'ZTolerance',
              ( [], c_double, 'ZTolerance' )),
    COMMETHOD([helpstring(u'Sets the default tolerance used to determine equality of M values (2.0 * m resolution).')], HRESULT, 'SetDefaultMTolerance'),
    COMMETHOD([helpstring(u'Sets the minimum tolerance (i.e., pre 9.2) used to determine equality of M values (2.0 * m resolution).')], HRESULT, 'SetMinimumMTolerance'),
    COMMETHOD(['propget', helpstring(u'The tolerance used to determine equality of M values.')], HRESULT, 'MTolerance',
              ( ['retval', 'out'], POINTER(c_double), 'MTolerance' )),
    COMMETHOD(['propput', helpstring(u'The tolerance used to determine equality of M values.')], HRESULT, 'MTolerance',
              ( [], c_double, 'MTolerance' )),
    COMMETHOD(['propget', helpstring(u'Returns esriSRToleranceOK if the XY tolerance is well defined (not NaN) and >= the minimum XY tolerance.')], HRESULT, 'XYToleranceValid',
              ( ['retval', 'out'], POINTER(esriSRToleranceEnum), 'isValid' )),
    COMMETHOD(['propget', helpstring(u'Returns true if the Z tolerance is well defined (not NaN) and >= the minimum Z tolerance.')], HRESULT, 'ZToleranceValid',
              ( ['retval', 'out'], POINTER(esriSRToleranceEnum), 'isValid' )),
    COMMETHOD(['propget', helpstring(u'Returns true if the M tolerance is well defined (not NaN) and >= the minimum M tolerance.')], HRESULT, 'MToleranceValid',
              ( ['retval', 'out'], POINTER(esriSRToleranceEnum), 'isValid' )),
    COMMETHOD([helpstring(u'Returns true if the XY tolerances of the two spatial references are the same.')], HRESULT, 'IsXYToleranceEqual',
              ( ['in'], POINTER(ISpatialReference), 'otherSR' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsXYToleranceEqual' )),
    COMMETHOD([helpstring(u'Returns true if the measure tolerances of the two spatial references are the same.')], HRESULT, 'IsMToleranceEqual',
              ( ['in'], POINTER(ISpatialReference), 'otherSR' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsMToleranceEqual' )),
    COMMETHOD([helpstring(u'Returns true if the Z tolerances of the two spatial references are the same.')], HRESULT, 'IsZToleranceEqual',
              ( ['in'], POINTER(ISpatialReference), 'otherSR' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsZToleranceEqual' )),
]
################################################################
## code template for ISpatialReferenceTolerance implementation
##class ISpatialReferenceTolerance_Impl(object):
##    def IsXYToleranceEqual(self, otherSR):
##        u'Returns true if the XY tolerances of the two spatial references are the same.'
##        #return IsXYToleranceEqual
##
##    def _get(self):
##        u'The tolerance used to control point coalescing strictly along the Z axis.'
##        #return ZTolerance
##    def _set(self, ZTolerance):
##        u'The tolerance used to control point coalescing strictly along the Z axis.'
##    ZTolerance = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def XYToleranceValid(self):
##        u'Returns esriSRToleranceOK if the XY tolerance is well defined (not NaN) and >= the minimum XY tolerance.'
##        #return isValid
##
##    def _get(self):
##        u'The xy tolerance used to control point coalescing in the X and Y dimensions.'
##        #return XYTolerance
##    def _set(self, XYTolerance):
##        u'The xy tolerance used to control point coalescing in the X and Y dimensions.'
##    XYTolerance = property(_get, _set, doc = _set.__doc__)
##
##    def SetDefaultMTolerance(self):
##        u'Sets the default tolerance used to determine equality of M values (2.0 * m resolution).'
##        #return 
##
##    def _get(self):
##        u'The tolerance used to determine equality of M values.'
##        #return MTolerance
##    def _set(self, MTolerance):
##        u'The tolerance used to determine equality of M values.'
##    MTolerance = property(_get, _set, doc = _set.__doc__)
##
##    def IsMToleranceEqual(self, otherSR):
##        u'Returns true if the measure tolerances of the two spatial references are the same.'
##        #return IsMToleranceEqual
##
##    def SetDefaultZTolerance(self):
##        u'Sets the default value for the Z cluster tolerance used to control point coalescing strictly along the Z axis (the equivalent of 1 mm in the current vertical coordinate system units).'
##        #return 
##
##    def IsZToleranceEqual(self, otherSR):
##        u'Returns true if the Z tolerances of the two spatial references are the same.'
##        #return IsZToleranceEqual
##
##    @property
##    def ZToleranceValid(self):
##        u'Returns true if the Z tolerance is well defined (not NaN) and >= the minimum Z tolerance.'
##        #return isValid
##
##    @property
##    def MToleranceValid(self):
##        u'Returns true if the M tolerance is well defined (not NaN) and >= the minimum M tolerance.'
##        #return isValid
##
##    def SetDefaultXYTolerance(self):
##        u'Sets the default cluster tolerance used to control point coalescing in the X and Y dimensions (the equivalent of 1 mm in the current spatial reference units).'
##        #return 
##
##    def SetMinimumZTolerance(self):
##        u'Sets the minimum value for the Z cluster tolerance (i.e., pre 9.2) used to control point coalescing strictly along the Z axis (the equivalent of 1 mm in the current vertical coordinate system units).'
##        #return 
##
##    def SetMinimumMTolerance(self):
##        u'Sets the minimum tolerance (i.e., pre 9.2) used to determine equality of M values (2.0 * m resolution).'
##        #return 
##
##    def SetMinimumXYTolerance(self):
##        u'Sets the xy cluster tolerance to be 2.0 * resolution. Use this value for compatibility with pre-9.2 topological and relational operators.'
##        #return 
##


# values for enumeration 'esriShapeExportFlags'
esriShapeExportDefaults = 0
esriShapeExportNoSwap = 1
esriShapeExportAngularDensify = 2
esriShapeExportDistanceDensify = 4
esriShapeExportTrueNaNs = 8
esriShapeExportStripZs = 16
esriShapeExportStripMs = 32
esriShapeExportStripIDs = 64
esriShapeExportStripTextures = 128
esriShapeExportStripNormals = 256
esriShapeExportStripMaterials = 512
esriShapeExportNewArcFormat = 1024
esriShapeExportNoCompress = 2048
esriShapeExportFlags = c_int # enum
class IBufferConstructionProperties(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control how sets of geometries are buffered.'
    _iid_ = GUID('{EA859CCE-60B2-4621-8B54-154CDDD81947}')
    _idlflags_ = ['oleautomation']
class IBufferConstructionProperties2(IBufferConstructionProperties):
    _case_insensitive_ = True
    u'Provides access to members that control whether buffering is done on a plane or on an ellipsoid.'
    _iid_ = GUID('{3B4CA07A-7A46-4766-86DC-4B4F81035C88}')
    _idlflags_ = ['oleautomation']
class IBufferProgress(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Implemented by clients to receive reports of buffer operation progress.'
    _iid_ = GUID('{073823CE-6E7F-475C-947E-99C207F82100}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'esriBufferConstructionSideEnum'
esriBufferLeft = 0
esriBufferRight = 1
esriBufferFull = 2
esriBufferConstructionSideEnum = c_int # enum

# values for enumeration 'esriBufferConstructionEndEnum'
esriBufferFlat = 0
esriBufferRound = 1
esriBufferConstructionEndEnum = c_int # enum
IBufferConstructionProperties._methods_ = [
    COMMETHOD(['propputref', helpstring(u'Report the progress of a buffer operation via this callback interface.')], HRESULT, 'BufferProgress',
              ( [], POINTER(IBufferProgress), 'ppProgress' )),
    COMMETHOD(['propget', helpstring(u'Report the progress of a buffer operation via this callback interface.')], HRESULT, 'BufferProgress',
              ( ['retval', 'out'], POINTER(POINTER(IBufferProgress)), 'ppProgress' )),
    COMMETHOD(['propputref', helpstring(u'Constructs concentric buffers at the base distance plus each distance offset.')], HRESULT, 'DistanceOffsets',
              ( [], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray), 'ppDistanceOffsets' )),
    COMMETHOD(['propget', helpstring(u'Constructs concentric buffers at the base distance plus each distance offset.')], HRESULT, 'DistanceOffsets',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray)), 'ppDistanceOffsets' )),
    COMMETHOD(['propputref', helpstring(u'The unit of measure used for the buffering distance and densification deviation distance (optional, default units are obtained from spatial reference of input geometries).')], HRESULT, 'Unit',
              ( [], POINTER(IUnit), 'ppUnit' )),
    COMMETHOD(['propget', helpstring(u'The unit of measure used for the buffering distance and densification deviation distance (optional, default units are obtained from spatial reference of input geometries).')], HRESULT, 'Unit',
              ( ['retval', 'out'], POINTER(POINTER(IUnit)), 'ppUnit' )),
    COMMETHOD(['propput', helpstring(u"Specifies on which side of a polyline its buffer is constructed; defaults to 'esriBufferFull' (both sides).")], HRESULT, 'SideOption',
              ( [], esriBufferConstructionSideEnum, 'pSideOption' )),
    COMMETHOD(['propget', helpstring(u"Specifies on which side of a polyline its buffer is constructed; defaults to 'esriBufferFull' (both sides).")], HRESULT, 'SideOption',
              ( ['retval', 'out'], POINTER(esriBufferConstructionSideEnum), 'pSideOption' )),
    COMMETHOD(['propput', helpstring(u'Excludes the inside of the input polygon from the output buffer (default = false).')], HRESULT, 'OutsideOnly',
              ( [], VARIANT_BOOL, 'bpOutsideOnly' )),
    COMMETHOD(['propget', helpstring(u'Excludes the inside of the input polygon from the output buffer (default = false).')], HRESULT, 'OutsideOnly',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'bpOutsideOnly' )),
    COMMETHOD(['propput', helpstring(u"Specifies the shape of the end caps of polyline buffers; defaults to 'esriBufferRound'.")], HRESULT, 'EndOption',
              ( [], esriBufferConstructionEndEnum, 'pEndOption' )),
    COMMETHOD(['propget', helpstring(u"Specifies the shape of the end caps of polyline buffers; defaults to 'esriBufferRound'.")], HRESULT, 'EndOption',
              ( ['retval', 'out'], POINTER(esriBufferConstructionEndEnum), 'pEndOption' )),
    COMMETHOD(['propput', helpstring(u'Specifies whether sequences of curve points are replaced with true curves in the output buffers (default is true).')], HRESULT, 'GenerateCurves',
              ( [], VARIANT_BOOL, 'pbGenerateCurves' )),
    COMMETHOD(['propget', helpstring(u'Specifies whether sequences of curve points are replaced with true curves in the output buffers (default is true).')], HRESULT, 'GenerateCurves',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbGenerateCurves' )),
    COMMETHOD(['propput', helpstring(u'For planar buffering, the max dist. between a line connecting two buffer curve points and the true curve (defaults to -1, indicating 1000 * xy tol of sr of input geoms ). For geodesic buffering default to 10 meters.')], HRESULT, 'DensifyDeviation',
              ( [], c_double, 'pDeviation' )),
    COMMETHOD(['propget', helpstring(u'For planar buffering, the max dist. between a line connecting two buffer curve points and the true curve (defaults to -1, indicating 1000 * xy tol of sr of input geoms ). For geodesic buffering default to 10 meters.')], HRESULT, 'DensifyDeviation',
              ( ['retval', 'out'], POINTER(c_double), 'pDeviation' )),
    COMMETHOD(['propput', helpstring(u'Specifies whether or not overlaps are preserved in the set of output buffers (default is false).')], HRESULT, 'UnionOverlappingBuffers',
              ( [], VARIANT_BOOL, 'pbUnionOverlapping' )),
    COMMETHOD(['propget', helpstring(u'Specifies whether or not overlaps are preserved in the set of output buffers (default is false).')], HRESULT, 'UnionOverlappingBuffers',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbUnionOverlapping' )),
    COMMETHOD(['propput', helpstring(u'Specifies whether or not output buffers can have multiple outer rings (defaut is false).')], HRESULT, 'ExplodeBuffers',
              ( [], VARIANT_BOOL, 'pExplodeBuffers' )),
    COMMETHOD(['propget', helpstring(u'Specifies whether or not output buffers can have multiple outer rings (defaut is false).')], HRESULT, 'ExplodeBuffers',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pExplodeBuffers' )),
]
################################################################
## code template for IBufferConstructionProperties implementation
##class IBufferConstructionProperties_Impl(object):
##    def _get(self):
##        u'Specifies whether or not overlaps are preserved in the set of output buffers (default is false).'
##        #return pbUnionOverlapping
##    def _set(self, pbUnionOverlapping):
##        u'Specifies whether or not overlaps are preserved in the set of output buffers (default is false).'
##    UnionOverlappingBuffers = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Specifies whether sequences of curve points are replaced with true curves in the output buffers (default is true).'
##        #return pbGenerateCurves
##    def _set(self, pbGenerateCurves):
##        u'Specifies whether sequences of curve points are replaced with true curves in the output buffers (default is true).'
##    GenerateCurves = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Excludes the inside of the input polygon from the output buffer (default = false).'
##        #return bpOutsideOnly
##    def _set(self, bpOutsideOnly):
##        u'Excludes the inside of the input polygon from the output buffer (default = false).'
##    OutsideOnly = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def DistanceOffsets(self, ppDistanceOffsets):
##        u'Constructs concentric buffers at the base distance plus each distance offset.'
##        #return 
##
##    def _get(self):
##        u"Specifies the shape of the end caps of polyline buffers; defaults to 'esriBufferRound'."
##        #return pEndOption
##    def _set(self, pEndOption):
##        u"Specifies the shape of the end caps of polyline buffers; defaults to 'esriBufferRound'."
##    EndOption = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Specifies whether or not output buffers can have multiple outer rings (defaut is false).'
##        #return pExplodeBuffers
##    def _set(self, pExplodeBuffers):
##        u'Specifies whether or not output buffers can have multiple outer rings (defaut is false).'
##    ExplodeBuffers = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u"Specifies on which side of a polyline its buffer is constructed; defaults to 'esriBufferFull' (both sides)."
##        #return pSideOption
##    def _set(self, pSideOption):
##        u"Specifies on which side of a polyline its buffer is constructed; defaults to 'esriBufferFull' (both sides)."
##    SideOption = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def BufferProgress(self, ppProgress):
##        u'Report the progress of a buffer operation via this callback interface.'
##        #return 
##
##    def _get(self):
##        u'For planar buffering, the max dist. between a line connecting two buffer curve points and the true curve (defaults to -1, indicating 1000 * xy tol of sr of input geoms ). For geodesic buffering default to 10 meters.'
##        #return pDeviation
##    def _set(self, pDeviation):
##        u'For planar buffering, the max dist. between a line connecting two buffer curve points and the true curve (defaults to -1, indicating 1000 * xy tol of sr of input geoms ). For geodesic buffering default to 10 meters.'
##    DensifyDeviation = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Unit(self, ppUnit):
##        u'The unit of measure used for the buffering distance and densification deviation distance (optional, default units are obtained from spatial reference of input geometries).'
##        #return 
##

IBufferConstructionProperties2._methods_ = [
    COMMETHOD(['propput', helpstring(u'Specifies whether planar or geodesic (on an ellipsoid) buffering is done.')], HRESULT, 'UseGeodesicBuffering',
              ( [], VARIANT_BOOL, 'pbUseGeodesicBuffering' )),
    COMMETHOD(['propget', helpstring(u'Specifies whether planar or geodesic (on an ellipsoid) buffering is done.')], HRESULT, 'UseGeodesicBuffering',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbUseGeodesicBuffering' )),
]
################################################################
## code template for IBufferConstructionProperties2 implementation
##class IBufferConstructionProperties2_Impl(object):
##    def _get(self):
##        u'Specifies whether planar or geodesic (on an ellipsoid) buffering is done.'
##        #return pbUseGeodesicBuffering
##    def _set(self, pbUseGeodesicBuffering):
##        u'Specifies whether planar or geodesic (on an ellipsoid) buffering is done.'
##    UseGeodesicBuffering = property(_get, _set, doc = _set.__doc__)
##

class ITopologicalOperator2(ITopologicalOperator):
    _case_insensitive_ = True
    u'Provides access to members that extend the ITopologicalOperator interface.'
    _iid_ = GUID('{805AEEB0-1D4C-11D4-9F75-00C04F6BDD7F}')
    _idlflags_ = []
class ITopologicalOperator3(ITopologicalOperator2):
    _case_insensitive_ = True
    u'Provides additional information on non-simple geometries.'
    _iid_ = GUID('{D4DC3B12-88EA-42D8-87B7-4EB7460737C1}')
    _idlflags_ = []
class ITopologicalOperator4(ITopologicalOperator3):
    _case_insensitive_ = True
    u'Provides additional information on non-simple geometries.'
    _iid_ = GUID('{6ABA2E62-630E-4D93-86CA-3D397C28CF44}')
    _idlflags_ = []
class IEnumGeometry(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that enumerate the members of a collection of geometries.'
    _iid_ = GUID('{BD2503EF-DEA7-11D0-867F-0000F8751720}')
    _idlflags_ = ['oleautomation']
TopologyHandle = LONG_PTR
ITopologicalOperator._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates whether this geometry is known (or assumed) to be topologically correct, after explicitly determining this if the geometry is not already known (or assumed) to be simple.')], HRESULT, 'IsSimple',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsSimple' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether this geometry is known (or assumed) to be topologically correct.')], HRESULT, 'IsKnownSimple',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsKnownSimple' )),
    COMMETHOD([helpstring(u'Makes this geometry topologically correct.')], HRESULT, 'Simplify'),
    COMMETHOD([helpstring(u'Constructs a polygon that is the locus of points at a distance less than or equal to a specified distance from this geometry.')], HRESULT, 'Buffer',
              ( [], c_double, 'distance' ),
              ( ['retval', 'out'], POINTER(POINTER(IGeometry)), 'outBuffer' )),
    COMMETHOD([helpstring(u'Constructs the convex hull of this geometry.')], HRESULT, 'ConvexHull',
              ( ['retval', 'out'], POINTER(POINTER(IGeometry)), 'outHull' )),
    COMMETHOD([helpstring(u'Constructs the geometry that is the set-theoretic intersection of the input geometries. Use different resultDimension values to generate results of different dimensions.')], HRESULT, 'Intersect',
              ( [], POINTER(IGeometry), 'other' ),
              ( [], esriGeometryDimension, 'resultDimension' ),
              ( ['retval', 'out'], POINTER(POINTER(IGeometry)), 'intersection' )),
    COMMETHOD([helpstring(u'Constructs the geometry that is the set-theoretic union of the input geometries.')], HRESULT, 'Union',
              ( [], POINTER(IGeometry), 'other' ),
              ( ['retval', 'out'], POINTER(POINTER(IGeometry)), 'resultGeom' )),
    COMMETHOD([helpstring(u'Defines this geometry to be the union of the inputs. More efficient for unioning multiple geometries than calling Union repeatedly.')], HRESULT, 'ConstructUnion',
              ( [], POINTER(IEnumGeometry), 'geometries' )),
    COMMETHOD([helpstring(u'Constructs the geometry containing points from this geometry but not the other geometry.')], HRESULT, 'Difference',
              ( [], POINTER(IGeometry), 'other' ),
              ( ['retval', 'out'], POINTER(POINTER(IGeometry)), 'resultGeom' )),
    COMMETHOD([helpstring(u'Constructs the geometry that contains points from either but not both input geometries.')], HRESULT, 'SymmetricDifference',
              ( [], POINTER(IGeometry), 'other' ),
              ( ['retval', 'out'], POINTER(POINTER(IGeometry)), 'resultGeom' )),
    COMMETHOD([helpstring(u'Constructs the intersection of this geometry and the specified envelope.')], HRESULT, 'Clip',
              ( [], POINTER(IEnvelope), 'clipperEnvelope' )),
    COMMETHOD([helpstring(u'Redefines clippedGeometry to be the intersection of this geometry and the clipping envelope.')], HRESULT, 'QueryClipped',
              ( [], POINTER(IEnvelope), 'clipperEnvelope' ),
              ( [], POINTER(IGeometry), 'clippedGeometry' )),
    COMMETHOD([helpstring(u'Redefines clippedGeometry to be the intersection of this geometry and the clipping envelope; densifies lines in the output contributed by the clipping envelope.')], HRESULT, 'QueryClippedDense',
              ( [], POINTER(IEnvelope), 'clipperEnvelope' ),
              ( [], c_double, 'denseDistance' ),
              ( [], POINTER(IGeometry), 'clippedGeometry' )),
    COMMETHOD([helpstring(u'Splits this geometry into a part left of the cutting polyline, and a part right of it.')], HRESULT, 'Cut',
              ( [], POINTER(IPolyline), 'cutter' ),
              ( ['out'], POINTER(POINTER(IGeometry)), 'leftGeom' ),
              ( ['out'], POINTER(POINTER(IGeometry)), 'rightGeom' )),
    COMMETHOD(['propget', helpstring(u"The boundary of this geometry. A polygon's boundary is a polyline. A polyline's boundary is a multipoint. A point or multipoint's boundary is an empty point or multipoint.")], HRESULT, 'Boundary',
              ( ['retval', 'out'], POINTER(POINTER(IGeometry)), 'outBoundary' )),
    COMMETHOD([helpstring(u'Constructs the intersection of this geometry and the specified envelope; densifies lines in output contributed by the clipping envelope.')], HRESULT, 'ClipDense',
              ( [], POINTER(IEnvelope), 'clipperEnvelope' ),
              ( [], c_double, 'denseDistance' )),
    COMMETHOD(['restricted', helpstring(u'Provides a handle to the TopologyCache.'), 'propget'], HRESULT, 'TopologyCache',
              ( ['out'], POINTER(TopologyHandle), 'topologyCacheHandle' )),
]
################################################################
## code template for ITopologicalOperator implementation
##class ITopologicalOperator_Impl(object):
##    def QueryClipped(self, clipperEnvelope, clippedGeometry):
##        u'Redefines clippedGeometry to be the intersection of this geometry and the clipping envelope.'
##        #return 
##
##    def Cut(self, cutter):
##        u'Splits this geometry into a part left of the cutting polyline, and a part right of it.'
##        #return leftGeom, rightGeom
##
##    def Clip(self, clipperEnvelope):
##        u'Constructs the intersection of this geometry and the specified envelope.'
##        #return 
##
##    def ConvexHull(self):
##        u'Constructs the convex hull of this geometry.'
##        #return outHull
##
##    def Buffer(self, distance):
##        u'Constructs a polygon that is the locus of points at a distance less than or equal to a specified distance from this geometry.'
##        #return outBuffer
##
##    @property
##    def TopologyCache(self):
##        u'Provides a handle to the TopologyCache.'
##        #return topologyCacheHandle
##
##    @property
##    def IsSimple(self):
##        u'Indicates whether this geometry is known (or assumed) to be topologically correct, after explicitly determining this if the geometry is not already known (or assumed) to be simple.'
##        #return IsSimple
##
##    def Union(self, other):
##        u'Constructs the geometry that is the set-theoretic union of the input geometries.'
##        #return resultGeom
##
##    def Simplify(self):
##        u'Makes this geometry topologically correct.'
##        #return 
##
##    def ConstructUnion(self, geometries):
##        u'Defines this geometry to be the union of the inputs. More efficient for unioning multiple geometries than calling Union repeatedly.'
##        #return 
##
##    def QueryClippedDense(self, clipperEnvelope, denseDistance, clippedGeometry):
##        u'Redefines clippedGeometry to be the intersection of this geometry and the clipping envelope; densifies lines in the output contributed by the clipping envelope.'
##        #return 
##
##    def Intersect(self, other, resultDimension):
##        u'Constructs the geometry that is the set-theoretic intersection of the input geometries. Use different resultDimension values to generate results of different dimensions.'
##        #return intersection
##
##    @property
##    def IsKnownSimple(self):
##        u'Indicates whether this geometry is known (or assumed) to be topologically correct.'
##        #return IsKnownSimple
##
##    def Difference(self, other):
##        u'Constructs the geometry containing points from this geometry but not the other geometry.'
##        #return resultGeom
##
##    @property
##    def Boundary(self):
##        u"The boundary of this geometry. A polygon's boundary is a polyline. A polyline's boundary is a multipoint. A point or multipoint's boundary is an empty point or multipoint."
##        #return outBoundary
##
##    def ClipDense(self, clipperEnvelope, denseDistance):
##        u'Constructs the intersection of this geometry and the specified envelope; densifies lines in output contributed by the clipping envelope.'
##        #return 
##
##    def SymmetricDifference(self, other):
##        u'Constructs the geometry that contains points from either but not both input geometries.'
##        #return resultGeom
##

ITopologicalOperator2._methods_ = [
    COMMETHOD(['hidden', helpstring(u'Constructs a set of buffers at various distances. More efficient than calling Buffer repeatedly on the same geometry. This method is intended for internal use only.')], HRESULT, 'ConstructBuffers',
              ( [], c_int, 'numBuffers' ),
              ( ['in'], POINTER(c_double), 'distances' ),
              ( ['retval', 'out'], POINTER(POINTER(IEnumGeometry)), 'buffers' )),
    COMMETHOD([helpstring(u'Clips the geometry to the domain of the spatial reference. Useful for ensuring that buffers can be fit within the spatial domain of the feature class to which they are being added.')], HRESULT, 'ClipToDomain'),
    COMMETHOD(['propput', helpstring(u'Indicates whether this geometry is known (or assumed) to be topologically correct.')], HRESULT, 'IsKnownSimple',
              ( [], VARIANT_BOOL, 'rhs' )),
    COMMETHOD([helpstring(u'Constructs the set-theoretic intersection of the inputs. The results are returned in a geometry bag with one element per result dimension.')], HRESULT, 'IntersectMultidimension',
              ( [], POINTER(IGeometry), 'other' ),
              ( ['retval', 'out'], POINTER(POINTER(IGeometry)), 'intersection' )),
]
################################################################
## code template for ITopologicalOperator2 implementation
##class ITopologicalOperator2_Impl(object):
##    def ConstructBuffers(self, numBuffers, distances):
##        u'Constructs a set of buffers at various distances. More efficient than calling Buffer repeatedly on the same geometry. This method is intended for internal use only.'
##        #return buffers
##
##    def ClipToDomain(self):
##        u'Clips the geometry to the domain of the spatial reference. Useful for ensuring that buffers can be fit within the spatial domain of the feature class to which they are being added.'
##        #return 
##
##    def _set(self, rhs):
##        u'Indicates whether this geometry is known (or assumed) to be topologically correct.'
##    IsKnownSimple = property(fset = _set, doc = _set.__doc__)
##
##    def IntersectMultidimension(self, other):
##        u'Constructs the set-theoretic intersection of the inputs. The results are returned in a geometry bag with one element per result dimension.'
##        #return intersection
##


# values for enumeration 'esriNonSimpleReasonEnum'
esriNonSimpleOK = 0
esriNonSimpleRingOrientation = 1
esriNonSimpleSegmentOrientation = 2
esriNonSimpleShortSegments = 3
esriNonSimpleSelfIntersections = 4
esriNonSimpleUnclosedRing = 5
esriNonSimpleEmptyPart = 6
esriNonSimpleMismatchedAttributes = 7
esriNonSimpleDiscontinuousParts = 8
esriNonSimpleEmptyZValues = 9
esriNonSimpleDuplicateVertex = 10
esriNonSimpleReasonEnum = c_int # enum
ITopologicalOperator3._methods_ = [
    COMMETHOD(['propget', helpstring(u'Determines why a geometry is not simple. Currently only implemented for polygons.')], HRESULT, 'IsSimpleEx',
              ( ['out'], POINTER(esriNonSimpleReasonEnum), 'reason' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsSimple' )),
    COMMETHOD([helpstring(u'Shifts longitudes, if need be, into a continuous range of 360 degrees.')], HRESULT, 'GeoNormalizeEx',
              ( [], POINTER(ISpatialReference), 'SR' ),
              ( [], c_double, 'denseDistance' )),
]
################################################################
## code template for ITopologicalOperator3 implementation
##class ITopologicalOperator3_Impl(object):
##    def GeoNormalizeEx(self, SR, denseDistance):
##        u'Shifts longitudes, if need be, into a continuous range of 360 degrees.'
##        #return 
##
##    @property
##    def IsSimpleEx(self):
##        u'Determines why a geometry is not simple. Currently only implemented for polygons.'
##        #return reason, IsSimple
##

ITopologicalOperator4._methods_ = [
    COMMETHOD([helpstring(u'Divides a geometry into multiple parts')], HRESULT, 'Cut2',
              ( [], POINTER(IPolyline), 'pCutter' ),
              ( ['retval', 'out'], POINTER(POINTER(IGeometryCollection)), 'ppParts' )),
]
################################################################
## code template for ITopologicalOperator4 implementation
##class ITopologicalOperator4_Impl(object):
##    def Cut2(self, pCutter):
##        u'Divides a geometry into multiple parts'
##        #return ppParts
##


# values for enumeration 'esriSegmentType'
esriSegmentArc = 1
esriSegmentLine = 2
esriSegmentSpiral = 3
esriSegmentBezier3Curve = 4
esriSegmentEllipticArc = 5
esriSegmentType = c_int # enum
class IEnvelope4(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides further access to methods on 3D envelopes.'
    _iid_ = GUID('{F5C13CDC-B6E7-4760-962E-19357623C896}')
    _idlflags_ = []
IEnvelope4._methods_ = [
    COMMETHOD([helpstring(u'Defines the specified 3D wksenvelope to be the current extent of this geometry in 3 dimension.')], HRESULT, 'QueryWKSCoordsZ',
              ( ['out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSEnvelopeZ), 'e' )),
    COMMETHOD([helpstring(u"Copies e's 3D dimensions into this envelope.")], HRESULT, 'PutWKSCoordsZ',
              ( [], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSEnvelopeZ), 'e' )),
]
################################################################
## code template for IEnvelope4 implementation
##class IEnvelope4_Impl(object):
##    def QueryWKSCoordsZ(self):
##        u'Defines the specified 3D wksenvelope to be the current extent of this geometry in 3 dimension.'
##        #return e
##
##    def PutWKSCoordsZ(self, e):
##        u"Copies e's 3D dimensions into this envelope."
##        #return 
##


# values for enumeration 'esriCoordinateSystemFilter'
esriFilterGCS = 1
esriFilterPCS = 2
esriFilterHCS = 3
esriFilterVCS = 8
esriCoordinateSystemFilter = c_int # enum
class SegmentGraph(CoClass):
    u'A topologically structured collection of segments.'
    _reg_clsid_ = GUID('{688C3098-0E28-11D3-9F33-00C04F6BDD7F}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
class ISegmentGraph(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that define and navigate a topologically structured collection of segments.'
    _iid_ = GUID('{1E402754-0E2A-11D3-9F33-00C04F6BDD7F}')
    _idlflags_ = ['oleautomation']
SegmentGraph._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ISegmentGraph]


# values for enumeration 'esriShapeImportFlags'
esriShapeImportDefaults = 0
esriShapeImportNoSwap = 1
esriShapeImportNonTrusted = 2
esriShapeImportAttach = 4
esriShapeImportFlags = c_int # enum
class IParameter(ISpatialReferenceInfo):
    _case_insensitive_ = True
    u'Provides access to members that control the properties of projection parameters.'
    _iid_ = GUID('{DAE75100-1DD1-11B2-BF4D-08002022F573}')
    _idlflags_ = ['oleautomation']
ISpatialReferenceInfo._methods_ = [
    COMMETHOD(['propget', helpstring(u'The name of this spatial reference component.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propget', helpstring(u'The alias of this spatial reference component.')], HRESULT, 'Alias',
              ( ['retval', 'out'], POINTER(BSTR), 'Alias' )),
    COMMETHOD(['propget', helpstring(u'The abbreviated name of this spatial reference component.')], HRESULT, 'Abbreviation',
              ( ['retval', 'out'], POINTER(BSTR), 'Abbreviation' )),
    COMMETHOD(['propget', helpstring(u'The comment string of this spatial reference component.')], HRESULT, 'Remarks',
              ( ['retval', 'out'], POINTER(BSTR), 'Remarks' )),
    COMMETHOD(['propget', helpstring(u'The factory code (WKID) of the spatial reference.')], HRESULT, 'FactoryCode',
              ( ['retval', 'out'], POINTER(c_int), 'Code' )),
]
################################################################
## code template for ISpatialReferenceInfo implementation
##class ISpatialReferenceInfo_Impl(object):
##    @property
##    def Abbreviation(self):
##        u'The abbreviated name of this spatial reference component.'
##        #return Abbreviation
##
##    @property
##    def Alias(self):
##        u'The alias of this spatial reference component.'
##        #return Alias
##
##    @property
##    def FactoryCode(self):
##        u'The factory code (WKID) of the spatial reference.'
##        #return Code
##
##    @property
##    def Remarks(self):
##        u'The comment string of this spatial reference component.'
##        #return Remarks
##
##    @property
##    def Name(self):
##        u'The name of this spatial reference component.'
##        #return Name
##

IParameter._methods_ = [
    COMMETHOD(['propput', helpstring(u'The numerical value of a projection parameter.')], HRESULT, 'Value',
              ( ['in'], c_double, 'Value' )),
    COMMETHOD(['propget', helpstring(u'The numerical value of a projection parameter.')], HRESULT, 'Value',
              ( ['retval', 'out'], POINTER(c_double), 'Value' )),
    COMMETHOD(['propget', helpstring(u"The index of a projection parameter within a projected coordinate system's parameter array.")], HRESULT, 'Index',
              ( ['retval', 'out'], POINTER(c_int), 'i' )),
]
################################################################
## code template for IParameter implementation
##class IParameter_Impl(object):
##    @property
##    def Index(self):
##        u"The index of a projection parameter within a projected coordinate system's parameter array."
##        #return i
##
##    def _get(self):
##        u'The numerical value of a projection parameter.'
##        #return Value
##    def _set(self, Value):
##        u'The numerical value of a projection parameter.'
##    Value = property(_get, _set, doc = _set.__doc__)
##

class IPolycurve2(IPolycurve):
    _case_insensitive_ = True
    u'Provides access to members that extend IPolycurve with additional splitting and densification methods.'
    _iid_ = GUID('{F4737332-F6B7-11D3-9F6A-00C04F6BDD7F}')
    _idlflags_ = ['oleautomation']
class IPolycurve3(IPolycurve2):
    _case_insensitive_ = True
    u'Provides access to members that extend IPolycurve with additional splitting and densification methods.'
    _iid_ = GUID('{92E9489D-5A7A-4A82-B7A7-885DF6E1ED5E}')
    _idlflags_ = ['restricted']
IPolycurve._methods_ = [
    COMMETHOD([helpstring(u'Converts this polycurve into a piecewise linear approximation of itself.')], HRESULT, 'Densify',
              ( [], c_double, 'maxSegmentLength' ),
              ( [], c_double, 'maxDeviation' )),
    COMMETHOD([helpstring(u'Generalizes this polycurve using the Douglas-Poiker algorithm.')], HRESULT, 'Generalize',
              ( [], c_double, 'maxAllowableOffset' )),
    COMMETHOD([helpstring(u"Generalizes using a small tolerance based upon either the system units of the geometry's spatial reference, or the geometry's bounding box.")], HRESULT, 'Weed',
              ( [], c_double, 'maxAllowableOffsetFactor' )),
    COMMETHOD([helpstring(u'Converts this curve into a smooth curve containing only Bezier curve segments.')], HRESULT, 'Smooth',
              ( [], c_double, 'maxAllowableOffset' )),
    COMMETHOD([helpstring(u'Introduces a new vertex into this polyline at the location on it closest to the input point.')], HRESULT, 'SplitAtPoint',
              ( [], POINTER(IPoint), 'splitPoint' ),
              ( [], VARIANT_BOOL, 'projectOnto' ),
              ( [], VARIANT_BOOL, 'createPart' ),
              ( ['out'], POINTER(VARIANT_BOOL), 'SplitHappened' ),
              ( ['out'], POINTER(c_int), 'newPartIndex' ),
              ( ['out'], POINTER(c_int), 'newSegmentIndex' )),
    COMMETHOD([helpstring(u'Introduces a new vertex into this polyline at a specified distance from the beginning of the polyline.')], HRESULT, 'SplitAtDistance',
              ( [], c_double, 'distance' ),
              ( [], VARIANT_BOOL, 'asRatio' ),
              ( [], VARIANT_BOOL, 'createPart' ),
              ( ['out'], POINTER(VARIANT_BOOL), 'SplitHappened' ),
              ( ['out'], POINTER(c_int), 'newPartIndex' ),
              ( ['out'], POINTER(c_int), 'newSegmentIndex' )),
]
################################################################
## code template for IPolycurve implementation
##class IPolycurve_Impl(object):
##    def SplitAtPoint(self, splitPoint, projectOnto, createPart):
##        u'Introduces a new vertex into this polyline at the location on it closest to the input point.'
##        #return SplitHappened, newPartIndex, newSegmentIndex
##
##    def SplitAtDistance(self, distance, asRatio, createPart):
##        u'Introduces a new vertex into this polyline at a specified distance from the beginning of the polyline.'
##        #return SplitHappened, newPartIndex, newSegmentIndex
##
##    def Smooth(self, maxAllowableOffset):
##        u'Converts this curve into a smooth curve containing only Bezier curve segments.'
##        #return 
##
##    def Weed(self, maxAllowableOffsetFactor):
##        u"Generalizes using a small tolerance based upon either the system units of the geometry's spatial reference, or the geometry's bounding box."
##        #return 
##
##    def Generalize(self, maxAllowableOffset):
##        u'Generalizes this polycurve using the Douglas-Poiker algorithm.'
##        #return 
##
##    def Densify(self, maxSegmentLength, maxDeviation):
##        u'Converts this polycurve into a piecewise linear approximation of itself.'
##        #return 
##

class IEnumSplitPoint(IEnumVertex):
    _case_insensitive_ = True
    u'Provides access to members that iterate over the new vertices in a geometry introduced as a result of using SplitAtPoints/SplitAtDistances.'
    _iid_ = GUID('{6B640160-FA9A-11D3-9F6A-00C04F6BDD7F}')
    _idlflags_ = []
IPolycurve2._methods_ = [
    COMMETHOD([helpstring(u'Introduces new vertices into this polyline at the locations on it closest to the input points. Do not consider points farther than cutoffDistance from the polyline.')], HRESULT, 'SplitAtPoints',
              ( [], POINTER(IEnumVertex), 'splitPoints' ),
              ( [], VARIANT_BOOL, 'projectOnto' ),
              ( [], VARIANT_BOOL, 'createParts' ),
              ( [], c_double, 'cutoffDistance' ),
              ( ['retval', 'out'], POINTER(POINTER(IEnumSplitPoint)), 'splitInfo' )),
    COMMETHOD([helpstring(u'Introduces new vertices into this polyline at specified distances from the beginning of the polyline.')], HRESULT, 'SplitAtDistances',
              ( [], c_int, 'distanceCount' ),
              ( [], POINTER(c_double), 'distances' ),
              ( [], VARIANT_BOOL, 'asRatios' ),
              ( [], VARIANT_BOOL, 'createParts' ),
              ( ['retval', 'out'], POINTER(POINTER(IEnumSplitPoint)), 'splitInfo' )),
    COMMETHOD([helpstring(u'Converts this polycurve into a piecewise linear approximation of itself. Vertices are introduced at points where the included angle between tangents at those point is maxAngleDeviation.')], HRESULT, 'DensifyByAngle',
              ( [], c_double, 'maxSegmentLength' ),
              ( [], c_double, 'maxAngleDeviation' )),
]
################################################################
## code template for IPolycurve2 implementation
##class IPolycurve2_Impl(object):
##    def SplitAtDistances(self, distanceCount, distances, asRatios, createParts):
##        u'Introduces new vertices into this polyline at specified distances from the beginning of the polyline.'
##        #return splitInfo
##
##    def DensifyByAngle(self, maxSegmentLength, maxAngleDeviation):
##        u'Converts this polycurve into a piecewise linear approximation of itself. Vertices are introduced at points where the included angle between tangents at those point is maxAngleDeviation.'
##        #return 
##
##    def SplitAtPoints(self, splitPoints, projectOnto, createParts, cutoffDistance):
##        u'Introduces new vertices into this polyline at the locations on it closest to the input points. Do not consider points farther than cutoffDistance from the polyline.'
##        #return splitInfo
##

class esriOriginalSegmentMapping(Structure):
    _recordinfo_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2, 0L, '{F73C4FF8-D30D-412B-A4AE-BCE3838827AF}')
IPolycurve3._methods_ = [
    COMMETHOD([], HRESULT, 'DensifyByAngleEx',
              ( [], c_double, 'maxSegmentLength' ),
              ( [], c_double, 'maxAngleDeviation' ),
              ( [], VARIANT_BOOL, 'bTrackAll' ),
              ( ['in', 'out'], POINTER(c_int), 'cOriginalSegments' ),
              ( ['out'], POINTER(POINTER(esriOriginalSegmentMapping)), 'originalSegments' )),
    COMMETHOD([], HRESULT, 'DensifyEx',
              ( [], c_double, 'maxSegmentLength' ),
              ( [], c_double, 'maxDeviation' ),
              ( [], VARIANT_BOOL, 'bTrackAll' ),
              ( ['in', 'out'], POINTER(c_int), 'cOriginalSegments' ),
              ( ['out'], POINTER(POINTER(esriOriginalSegmentMapping)), 'originalSegments' )),
]
################################################################
## code template for IPolycurve3 implementation
##class IPolycurve3_Impl(object):
##    def DensifyEx(self, maxSegmentLength, maxDeviation, bTrackAll):
##        '-no docstring-'
##        #return cOriginalSegments, originalSegments
##
##    def DensifyByAngleEx(self, maxSegmentLength, maxAngleDeviation, bTrackAll):
##        '-no docstring-'
##        #return cOriginalSegments, originalSegments
##


# values for enumeration 'esriSRLimitsEnum'
esriSR_MaxParameterCount = 16
esriSRLimitsEnum = c_int # enum

# values for enumeration 'esriSRHorizonType'
esriSRHorizon_Envelope = 0
esriSRHorizon_Polygon = 1
esriSRHorizon_Polyline = 2
esriSRHorizon_Point = 3
esriSRHorizonType = c_int # enum
class Polygon(CoClass):
    u'A collection of rings ordered by their containment relationship; optionally has measure, height and ID attributes.'
    _reg_clsid_ = GUID('{00A5CB42-52DA-11D0-A8F2-00608C85EDE5}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
class IPointCollection3(IPointCollection2):
    _case_insensitive_ = True
    u'Provides access to members that manipulate the points of a Multipoint.'
    _iid_ = GUID('{AF10D3E8-F2F8-49EC-A6C5-7018099EEAED}')
    _idlflags_ = []
class IPointCollection4(IPointCollection3):
    _case_insensitive_ = True
    u'Provides access to members that manipulate the points of a Multipoint, Path, Ring, Polyline, Polygon, TriangleFan, TriangleStrip, or MultiPatch.'
    _iid_ = GUID('{773F7279-AEFB-11D5-8112-00C04FA0ADF8}')
    _idlflags_ = []
class ISegmentCollection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that manipulate the segments of a path, ring, polyline, or polygon.'
    _iid_ = GUID('{B3FE6B20-4FC2-11D1-834E-0000F8775BE9}')
    _idlflags_ = []
class IPolycurve4(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides geodesic operations on curves.'
    _iid_ = GUID('{C0EA9A43-8884-4B70-9726-9CB6ACFC0788}')
    _idlflags_ = ['oleautomation']
class IPolycurveGeodetic(IPolycurve4):
    _case_insensitive_ = True
    u'Provides various geodetic operations on curves.'
    _iid_ = GUID('{00FCC4E5-5A6C-482B-9B77-1524D05B19D3}')
    _idlflags_ = ['oleautomation']
class IArea(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that return properties common to rings and polygons.'
    _iid_ = GUID('{6039E192-4CC8-11D1-834E-0000F8775BE9}')
    _idlflags_ = ['oleautomation']
class IAreaGeodetic(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that calculate ellipsoidal area of polygons using various perimeter densification methods.'
    _iid_ = GUID('{2C6209AE-7ED5-4AE1-BD5F-7D858B13DC35}')
    _idlflags_ = ['oleautomation']
class IArea3D(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that return properties common to MultiPatches.'
    _iid_ = GUID('{984839B4-F7EA-42F8-AE20-48632369CC08}')
    _idlflags_ = ['oleautomation']
class IPolygon(IPolycurve):
    _case_insensitive_ = True
    u'Provides access to members that identify a polygon and permit controlled access to its inner and outer rings.'
    _iid_ = GUID('{A4C490B8-9441-11D0-82F7-0000F8034032}')
    _idlflags_ = ['oleautomation']
class IPolygon2(IPolygon):
    _case_insensitive_ = True
    u'Provides access to members that extend the IPolygon interface.'
    _iid_ = GUID('{55E67F71-30FF-11D4-9F5E-00C04F6BDF0D}')
    _idlflags_ = []
class IPolygon3(IPolygon2):
    _case_insensitive_ = True
    u'Provides access to members that extend the IPolygon2 interface.'
    _iid_ = GUID('{287370CE-B306-4892-8A4C-A7970B132B79}')
    _idlflags_ = []
class IPolygon4(IPolygon3):
    _case_insensitive_ = True
    u'Provides access to members that extend the IPolygon3 interface.'
    _iid_ = GUID('{5AF81EB6-5616-49A0-B0A6-E265803E4BD2}')
    _idlflags_ = []
class IPolygon5(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides additional operations on polygons. Note that IPolygon5 does not inherit from IPolygon4.'
    _iid_ = GUID('{9C4A7438-F213-411C-9A24-1465C61838F4}')
    _idlflags_ = []
class IMCollection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control operations on M-aware multipoints, polylines, polygons and multipatches.'
    _iid_ = GUID('{01FAFF20-5191-11D2-92F6-0000F875171D}')
    _idlflags_ = ['oleautomation']
class IMSegmentation(IMCollection):
    _case_insensitive_ = True
    u'Provides access to members for defining an M-based linear coordinate system on a polyline or polygon.'
    _iid_ = GUID('{FD5E17EC-D717-11D2-9F34-00C04F6BDF06}')
    _idlflags_ = ['oleautomation']
class IZCollection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to operations on Z-aware geometries.'
    _iid_ = GUID('{EFEEB8B4-DC23-11D2-9F2E-00C04F6BDF0D}')
    _idlflags_ = ['oleautomation']
class IZ(IZCollection):
    _case_insensitive_ = True
    u'Provides access to members that identify geometric objects that can have 3D coordinates and defines operations on such objects.'
    _iid_ = GUID('{FE5D57EF-3052-11D4-9F5E-00C04F6BDF0D}')
    _idlflags_ = ['oleautomation']
class IZ2(IZ):
    _case_insensitive_ = True
    u'Provides access to additional members that identify geometric objects that can have 3D coordinates and defines operations on such objects.'
    _iid_ = GUID('{473B374D-0F02-461A-B60E-070045C6110B}')
    _idlflags_ = ['oleautomation']
class ISpatialIndex(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that create a temporary spatial index for improving performance of "Disjoint" and some other relational operators.'
    _iid_ = GUID('{8C6E62CE-74FD-11D3-9F49-00C04F6BDD7F}')
    _idlflags_ = ['oleautomation']
class ISpatialIndex2(ISpatialIndex):
    _case_insensitive_ = True
    u'Provides access to members that create a temporary spatial index for improving performance of "Disjoint" and some other relational operators.'
    _iid_ = GUID('{8D7948BC-8DCA-4E81-A7D5-8C259F202BD3}')
    _idlflags_ = ['oleautomation']
class IConstructCurve(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that construct a curve using other geometries and measures.'
    _iid_ = GUID('{650CFDC0-D947-11D0-830D-0000F8034032}')
    _idlflags_ = ['oleautomation']
class IConstructCurve2(IConstructCurve):
    _case_insensitive_ = True
    u'Provides access to members that construct a curve using other geometries and measures.'
    _iid_ = GUID('{4A877E3C-BA67-4F78-B1EF-A728C968D787}')
    _idlflags_ = ['oleautomation']
class IPolycurve3D(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that define operations common to polycurves with Zs.'
    _iid_ = GUID('{6774DF52-07A6-4509-9523-50B4C485BB52}')
    _idlflags_ = ['oleautomation']
class ICurve3D(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that define operations common to curves with Zs.'
    _iid_ = GUID('{AC4D3DA2-4B76-48DD-B393-2468452CA30D}')
    _idlflags_ = ['oleautomation']
Polygon._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IPointCollection, IPointCollection4, IGeometry, IGeometry2, IGeometry3, IGeometry4, IGeometry5, ISegmentCollection, IGeometryCollection, ICurve, IPolycurve, IPolycurve2, IPolycurveGeodetic, IArea, IAreaGeodetic, IArea3D, IPolygon, IPolygon2, IPolygon3, IPolygon4, IPolygon5, IMAware, IMCollection, IMSegmentation, IZAware, IZCollection, IZ, IZ2, IPointIDAware, ISpatialIndex2, IRelationalOperator, IProximityOperator, IRelationalOperator2, ITopologicalOperator, ITopologicalOperator2, ITopologicalOperator3, ITopologicalOperator4, ITopologicalOperator6, IHitTest, IHitTest3D, IConstructCurve, IConstructCurve2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, ITransform2D, ITransform3D, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, IMSnap, IPolycurve3D, ICurve3D, IProximityOperator3D, IRelationalOperator3D, IRelationalOperator3D2]

ITopologicalOperator6._methods_ = [
    COMMETHOD([helpstring(u'Defines this geometry to be the union of the inputs, with the option for non-planary result.')], HRESULT, 'ConstructUnionEx',
              ( [], POINTER(IEnumGeometry), 'pEnum' ),
              ( [], VARIANT_BOOL, 'bNonPlanar' )),
    COMMETHOD([helpstring(u'Constructs the set-theoretic intersection of the inputs in the specified result dimension, , with the option for non-planary result.')], HRESULT, 'IntersectEx',
              ( [], POINTER(IGeometry), 'other' ),
              ( [], VARIANT_BOOL, 'bNonPlanar' ),
              ( [], esriGeometryDimension, 'resultDimension' ),
              ( ['retval', 'out'], POINTER(POINTER(IGeometry)), 'intersection' )),
    COMMETHOD([helpstring(u'Constructs the set-theoretic union of the inputs, with the option for non-planary result. ')], HRESULT, 'UnionEx',
              ( [], POINTER(IGeometry), 'other' ),
              ( [], VARIANT_BOOL, 'bNonPlanar' ),
              ( ['retval', 'out'], POINTER(POINTER(IGeometry)), 'pUnion' )),
    COMMETHOD([helpstring(u'Constructs the set-theoretic intersection of the inputs. The results are returned in a geometry bag with one element per result dimension.')], HRESULT, 'IntersectMultidimensionEx',
              ( [], POINTER(IGeometry), 'other' ),
              ( [], VARIANT_BOOL, 'bNonPlanar' ),
              ( ['retval', 'out'], POINTER(POINTER(IGeometry)), 'intersection' )),
    COMMETHOD([helpstring(u'defined for (multi)points and polylines.')], HRESULT, 'DifferenceEx',
              ( [], POINTER(IGeometry), 'other' ),
              ( [], VARIANT_BOOL, 'bNonPlanar' ),
              ( ['retval', 'out'], POINTER(POINTER(IGeometry)), 'resultGeom' )),
    COMMETHOD([helpstring(u'defined for (multi)points and polylines.')], HRESULT, 'SymmetricDifferenceEx',
              ( [], POINTER(IGeometry), 'other' ),
              ( [], VARIANT_BOOL, 'bNonPlanar' ),
              ( ['retval', 'out'], POINTER(POINTER(IGeometry)), 'resultGeom' )),
    COMMETHOD([helpstring(u'Simplifies the geometry using the rules appropriate for this feature.')], HRESULT, 'SimplifyAsFeature'),
]
################################################################
## code template for ITopologicalOperator6 implementation
##class ITopologicalOperator6_Impl(object):
##    def IntersectEx(self, other, bNonPlanar, resultDimension):
##        u'Constructs the set-theoretic intersection of the inputs in the specified result dimension, , with the option for non-planary result.'
##        #return intersection
##
##    def IntersectMultidimensionEx(self, other, bNonPlanar):
##        u'Constructs the set-theoretic intersection of the inputs. The results are returned in a geometry bag with one element per result dimension.'
##        #return intersection
##
##    def SymmetricDifferenceEx(self, other, bNonPlanar):
##        u'defined for (multi)points and polylines.'
##        #return resultGeom
##
##    def DifferenceEx(self, other, bNonPlanar):
##        u'defined for (multi)points and polylines.'
##        #return resultGeom
##
##    def SimplifyAsFeature(self):
##        u'Simplifies the geometry using the rules appropriate for this feature.'
##        #return 
##
##    def UnionEx(self, other, bNonPlanar):
##        u'Constructs the set-theoretic union of the inputs, with the option for non-planary result. '
##        #return pUnion
##
##    def ConstructUnionEx(self, pEnum, bNonPlanar):
##        u'Defines this geometry to be the union of the inputs, with the option for non-planary result.'
##        #return 
##


# values for enumeration 'esriShapeModifiers'
esriShapeHasZs = -2147483648
esriShapeHasMs = 1073741824
esriShapeHasCurves = 536870912
esriShapeHasIDs = 268435456
esriShapeHasNormals = 134217728
esriShapeHasTextures = 67108864
esriShapeHasPartIDs = 33554432
esriShapeHasMaterials = 16777216
esriShapeIsCompressed = 8388608
esriShapeModifierMask = -16777216
esriShapeMultiPatchModifierMask = 15728640
esriShapeBasicTypeMask = 255
esriShapeBasicModifierMask = -1073741824
esriShapeNonBasicModifierMask = 1056964608
esriShapeExtendedModifierMask = -587202560
esriShapeModifiers = c_int # enum

# values for enumeration 'esriSpatialRelationExEnum'
esriSpatialRelationExBoundary = 0
esriSpatialRelationExClementini = 1
esriSpatialRelationExProper = 2
esriSpatialRelationExEnum = c_int # enum
class Path(CoClass):
    u'A sequence of connected segments.'
    _reg_clsid_ = GUID('{30707211-52D5-11D0-A8F2-00608C85EDE5}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
class IPath(ICurve):
    _case_insensitive_ = True
    u'Provides access to members that identify a path and define its behavior.'
    _iid_ = GUID('{0A82061C-95CB-11D0-82F7-0000F8034032}')
    _idlflags_ = []
class IConstructPath(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that construct a path using other geometries and measures.'
    _iid_ = GUID('{F4FD2EC0-990A-11D1-BC7D-0000F875BCCE}')
    _idlflags_ = ['oleautomation']
Path._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IPointCollection, IPointCollection4, IGeometry, ISegmentCollection, ICurve, IPath, IConstructPath, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, ITransform2D, ITransform3D, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize]

class IRing(IPath):
    _case_insensitive_ = True
    u'Provides access to members that identify a ring and define its behavior.'
    _iid_ = GUID('{592121AE-4CC8-11D1-834E-0000F8775BE9}')
    _idlflags_ = ['oleautomation']
IPolygon._methods_ = [
    COMMETHOD([helpstring(u'Returns the exterior ring containing the specified interior ring.')], HRESULT, 'FindExteriorRing',
              ( [], POINTER(IRing), 'interiorRing' ),
              ( ['retval', 'out'], POINTER(POINTER(IRing)), 'exteriorRing' )),
    COMMETHOD(['propget', helpstring(u'The number of exterior rings.')], HRESULT, 'ExteriorRingCount',
              ( ['retval', 'out'], POINTER(c_int), 'cExteriorRings' )),
    COMMETHOD([helpstring(u'Populates an array with references to all exterior rings. This method does not marshall correctly out-of-proc. Use QueryExteriorRingsEx on the IPolygon2 interface instead.')], HRESULT, 'QueryExteriorRings',
              ( [], POINTER(POINTER(IRing)), 'exteriorRings' )),
    COMMETHOD(['propget', helpstring(u'The number of rings interior to the specified exterior ring.')], HRESULT, 'InteriorRingCount',
              ( [], POINTER(IRing), 'exteriorRing' ),
              ( ['retval', 'out'], POINTER(c_int), 'cInteriorRings' )),
    COMMETHOD([helpstring(u'Populates an array with references to rings that are interior to the specified exterior ring. This method does not marshall correctly out-of-proc. Use QueryInteriorRingsEx on the IPolygon2 interface instead.')], HRESULT, 'QueryInteriorRings',
              ( [], POINTER(IRing), 'exteriorRing' ),
              ( [], POINTER(POINTER(IRing)), 'interiorRings' )),
    COMMETHOD([helpstring(u'Closes all rings in this polygon. The resulting polygon may not be simple.')], HRESULT, 'Close'),
    COMMETHOD([helpstring(u'Simplifies the polygon and maintains the index location of the from/to point of each ring.')], HRESULT, 'SimplifyPreserveFromTo'),
]
################################################################
## code template for IPolygon implementation
##class IPolygon_Impl(object):
##    @property
##    def ExteriorRingCount(self):
##        u'The number of exterior rings.'
##        #return cExteriorRings
##
##    def QueryExteriorRings(self, exteriorRings):
##        u'Populates an array with references to all exterior rings. This method does not marshall correctly out-of-proc. Use QueryExteriorRingsEx on the IPolygon2 interface instead.'
##        #return 
##
##    def SimplifyPreserveFromTo(self):
##        u'Simplifies the polygon and maintains the index location of the from/to point of each ring.'
##        #return 
##
##    def QueryInteriorRings(self, exteriorRing, interiorRings):
##        u'Populates an array with references to rings that are interior to the specified exterior ring. This method does not marshall correctly out-of-proc. Use QueryInteriorRingsEx on the IPolygon2 interface instead.'
##        #return 
##
##    def Close(self):
##        u'Closes all rings in this polygon. The resulting polygon may not be simple.'
##        #return 
##
##    def FindExteriorRing(self, interiorRing):
##        u'Returns the exterior ring containing the specified interior ring.'
##        #return exteriorRing
##
##    @property
##    def InteriorRingCount(self, exteriorRing):
##        u'The number of rings interior to the specified exterior ring.'
##        #return cInteriorRings
##

IPolygon2._methods_ = [
    COMMETHOD([helpstring(u'Returns an array of references to exterior rings, up to a maximum of the number requested.')], HRESULT, 'QueryExteriorRingsEx',
              ( [], c_int, 'numExteriorRingsRequested' ),
              ( ['out'], POINTER(POINTER(IRing)), 'exteriorRings' )),
    COMMETHOD([helpstring(u'Returns an array of references to rings that are interior to the specified exterior ring, up to a maximum of the number requested.')], HRESULT, 'QueryInteriorRingsEx',
              ( [], POINTER(IRing), 'exteriorRing' ),
              ( [], c_int, 'numInteriorRingsRequested' ),
              ( ['out'], POINTER(POINTER(IRing)), 'interiorRings' )),
    COMMETHOD([helpstring(u'Populates an array with polygons that represent connected components of the original. The rings of the output polygons are references to rings in the original.')], HRESULT, 'GetConnectedComponents',
              ( [], c_int, 'numComponentsRequested' ),
              ( ['out'], POINTER(POINTER(IPolygon)), 'components' )),
    COMMETHOD([helpstring(u'Populates an array with polygons that represent outermost components of the original and all components within (islands within lakes). The rings of the output polygons are references to rings in the original.')], HRESULT, 'GetOutermostComponents',
              ( [], c_int, 'numComponentsRequested' ),
              ( ['out'], POINTER(c_int), 'numComponentsReturned' ),
              ( ['out'], POINTER(POINTER(IPolygon)), 'components' ),
              ( ['out'], POINTER(VARIANT_BOOL), 'moreComponentsExist' )),
]
################################################################
## code template for IPolygon2 implementation
##class IPolygon2_Impl(object):
##    def QueryInteriorRingsEx(self, exteriorRing, numInteriorRingsRequested):
##        u'Returns an array of references to rings that are interior to the specified exterior ring, up to a maximum of the number requested.'
##        #return interiorRings
##
##    def GetConnectedComponents(self, numComponentsRequested):
##        u'Populates an array with polygons that represent connected components of the original. The rings of the output polygons are references to rings in the original.'
##        #return components
##
##    def QueryExteriorRingsEx(self, numExteriorRingsRequested):
##        u'Returns an array of references to exterior rings, up to a maximum of the number requested.'
##        #return exteriorRings
##
##    def GetOutermostComponents(self, numComponentsRequested):
##        u'Populates an array with polygons that represent outermost components of the original and all components within (islands within lakes). The rings of the output polygons are references to rings in the original.'
##        #return numComponentsReturned, components, moreComponentsExist
##


# values for enumeration 'esriGeometryUpdateMEnum'
esriGeometryInterpolate = 1
esriGeometryExtrapolateBefore = 2
esriGeometryExtrapolateAfter = 4
esriGeometryUpdateMEnum = c_int # enum

# values for enumeration 'wkbGeometryType'
wkbPoint = 1
wkbLinestring = 2
wkbPolygon = 3
wkbMultiPoint = 4
wkbMultiLinestring = 5
wkbMultiPolygon = 6
wkbGeometryCollection = 7
wkbMultiPatch = 8
wkbGeometryType = c_int # enum
class IWin32Shape(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that prepare a set of GDI drawing instructions for a geometry.'
    _iid_ = GUID('{C1F45030-5836-11D0-A8F5-00608C85EDE5}')
    _idlflags_ = []
IWin32Shape._methods_ = [
    COMMETHOD([helpstring(u'Exports a set of GDI drawing instruction for this geometry to the specified buffer. The exact number of bytes written is returned.')], HRESULT, 'ExportToWin32Shape',
              ( [], POINTER(ITransformation), 'Transform' ),
              ( [], POINTER(IEnvelope), 'displayExtent' ),
              ( ['in', 'out'], POINTER(c_int), 'byteCount' ),
              ( ['out'], POINTER(POINTER(c_ubyte)), 'byteBuffer' ),
              ( [], VARIANT_BOOL, 'compatibleBuffer' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'dice' )),
]
################################################################
## code template for IWin32Shape implementation
##class IWin32Shape_Impl(object):
##    def ExportToWin32Shape(self, Transform, displayExtent, compatibleBuffer):
##        u'Exports a set of GDI drawing instruction for this geometry to the specified buffer. The exact number of bytes written is returned.'
##        #return byteCount, byteBuffer, dice
##

class IAngularUnitEdit(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that define the properties of an angular unit.'
    _iid_ = GUID('{3B219F22-D3FF-11D1-BC9B-0000F875BCCE}')
    _idlflags_ = ['oleautomation']
IAngularUnitEdit._methods_ = [
    COMMETHOD(['hidden', helpstring(u'Defines the properties of an angular unit.')], HRESULT, 'DefineEx',
              ( [], BSTR, 'Name' ),
              ( [], BSTR, 'Alias' ),
              ( [], BSTR, 'Abbreviation' ),
              ( [], BSTR, 'Remarks' ),
              ( [], POINTER(c_double), 'RadiansPerUnit' )),
    COMMETHOD([helpstring(u'Defines the properties of an angular unit.')], HRESULT, 'Define',
              ( ['optional'], POINTER(VARIANT), 'Name' ),
              ( ['optional'], POINTER(VARIANT), 'Alias' ),
              ( ['optional'], POINTER(VARIANT), 'Abbreviation' ),
              ( ['optional'], POINTER(VARIANT), 'Remarks' ),
              ( ['optional'], POINTER(VARIANT), 'RadiansPerUnit' )),
]
################################################################
## code template for IAngularUnitEdit implementation
##class IAngularUnitEdit_Impl(object):
##    def DefineEx(self, Name, Alias, Abbreviation, Remarks, RadiansPerUnit):
##        u'Defines the properties of an angular unit.'
##        #return 
##
##    def Define(self, Name, Alias, Abbreviation, Remarks, RadiansPerUnit):
##        u'Defines the properties of an angular unit.'
##        #return 
##

class IConstructAngle(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that construct an angle using other geometries and measures. This interface is implemented by the GeometryEnvironment object.'
    _iid_ = GUID('{7E9812D8-5AC6-11D1-8352-0000F8775BE9}')
    _idlflags_ = ['oleautomation']
IConstructAngle._methods_ = [
    COMMETHOD([helpstring(u'Constructs the angle included in three points.')], HRESULT, 'ConstructThreePoint',
              ( [], POINTER(IPoint), 'from' ),
              ( [], POINTER(IPoint), 'through' ),
              ( [], POINTER(IPoint), 'to' ),
              ( ['retval', 'out'], POINTER(c_double), 'outAngle' )),
    COMMETHOD([helpstring(u'Constructs the angle between the infinite line containing the input line segment and the positive x-axis.')], HRESULT, 'ConstructLine',
              ( [], POINTER(ILine), 'inLine' ),
              ( ['retval', 'out'], POINTER(c_double), 'outAngle' )),
]
################################################################
## code template for IConstructAngle implementation
##class IConstructAngle_Impl(object):
##    def ConstructLine(self, inLine):
##        u'Constructs the angle between the infinite line containing the input line segment and the positive x-axis.'
##        #return outAngle
##
##    def ConstructThreePoint(self, from, through, to):
##        u'Constructs the angle included in three points.'
##        #return outAngle
##

IPolygon3._methods_ = [
    COMMETHOD([helpstring(u"Simplifies a polygon but doesn't assume that rings need to be explicitly closed.")], HRESULT, 'SimplifySpaghetti'),
]
################################################################
## code template for IPolygon3 implementation
##class IPolygon3_Impl(object):
##    def SimplifySpaghetti(self):
##        u"Simplifies a polygon but doesn't assume that rings need to be explicitly closed."
##        #return 
##


# values for enumeration 'esriEnvelopeVertex'
esriEnvelopeVertexLL = 0
esriEnvelopeVertexUL = 1
esriEnvelopeVertexUR = 2
esriEnvelopeVertexLR = 3
esriEnvelopeVertex = c_int # enum
class Ring(CoClass):
    u'An area bounded by one, closed sequence of connected segments; optionally has measure, height and ID attributes at each vertex.'
    _reg_clsid_ = GUID('{B9BC6BCE-7891-11D0-82F4-0000F8034032}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
class IRing2(IRing):
    _case_insensitive_ = True
    u'Provides extended access to members that identify a ring and define its behavior.'
    _iid_ = GUID('{6011FA75-0C4A-11D6-9FA9-00C04F6BDF0D}')
    _idlflags_ = ['oleautomation']
Ring._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IPointCollection, IPointCollection4, IGeometry, ISegmentCollection, IArea, ICurve, IPath, IRing, IRing2, IConstructPath, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, ITransform2D, ITransform3D, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, ICurve3D]

class IProjection(ISpatialReferenceInfo):
    _case_insensitive_ = True
    u'Provides access to members that control the properties of all map projections.'
    _iid_ = GUID('{0AE32400-1DD2-11B2-BF4D-08002022F573}')
    _idlflags_ = ['oleautomation']
esriProjectionImplHandle = LONG_PTR
IProjection._methods_ = [
    COMMETHOD(['propget', helpstring(u'The usage notes of a map projection.')], HRESULT, 'Usage',
              ( ['retval', 'out'], POINTER(BSTR), 'Usage' )),
    COMMETHOD(['propget', helpstring(u'The classification of a map projection.')], HRESULT, 'Classification',
              ( ['retval', 'out'], POINTER(BSTR), 'Classification' )),
    COMMETHOD([helpstring(u'Returns the set of default parameters needed for this projection.')], HRESULT, 'GetDefaultParameters',
              ( [], POINTER(POINTER(IParameter)), 'parameters' )),
    COMMETHOD(['restricted', helpstring(u'The projection implementation.'), 'propget'], HRESULT, 'ProjectionImpl',
              ( [], POINTER(esriProjectionImplHandle), 'ProjectionImpl' )),
]
################################################################
## code template for IProjection implementation
##class IProjection_Impl(object):
##    @property
##    def Usage(self):
##        u'The usage notes of a map projection.'
##        #return Usage
##
##    @property
##    def ProjectionImpl(self, ProjectionImpl):
##        u'The projection implementation.'
##        #return 
##
##    def GetDefaultParameters(self, parameters):
##        u'Returns the set of default parameters needed for this projection.'
##        #return 
##
##    @property
##    def Classification(self):
##        u'The classification of a map projection.'
##        #return Classification
##


# values for enumeration 'esriExtrapolationEnum'
esriExtrapolateBefore = -1
esriExtrapolateBoth = 0
esriExtrapolateAfter = 1
esriExtrapolationEnum = c_int # enum
class IGeometryBag(IGeometry):
    _case_insensitive_ = True
    u'Provides access to members that identify a geometry bag.'
    _iid_ = GUID('{B5B8CDA0-9D24-11D3-810D-0080C75E8A71}')
    _idlflags_ = ['oleautomation']
IPolygon4._methods_ = [
    COMMETHOD([helpstring(u'Same as ITopologicalOperator::Simplify, but with some additional options that affect performance and how the interior is classified.')], HRESULT, 'SimplifyEx',
              ( [], VARIANT_BOOL, 'preserveFromToPoints' ),
              ( [], VARIANT_BOOL, 'closeRings' ),
              ( [], VARIANT_BOOL, 'useXORRule' )),
    COMMETHOD(['propget', helpstring(u'Creates and returns a geometry bag that contains references to all exterior rings.')], HRESULT, 'ExteriorRingBag',
              ( ['retval', 'out'], POINTER(POINTER(IGeometryBag)), 'ringBag' )),
    COMMETHOD(['propget', helpstring(u'Creates and returns a geometry bag that contains references to all rings that are interior to the specified exterior ring.')], HRESULT, 'InteriorRingBag',
              ( [], POINTER(IRing), 'exteriorRing' ),
              ( ['retval', 'out'], POINTER(POINTER(IGeometryBag)), 'ringBag' )),
    COMMETHOD(['propget', helpstring(u'Creates and returns a geometry bag containing polygons that represent connected components of the original. The rings of the output polygons are references to rings in the original.')], HRESULT, 'ConnectedComponentBag',
              ( ['retval', 'out'], POINTER(POINTER(IGeometryBag)), 'polygonBag' )),
    COMMETHOD(['propget', helpstring(u'Creates and returns a geometry bag containing polygons that represent outermost components of the original and all components within (islands within lakes). The rings of the output polygons are references to rings in the original.')], HRESULT, 'OutermostComponentBag',
              ( ['retval', 'out'], POINTER(POINTER(IGeometryBag)), 'polygonBag' )),
]
################################################################
## code template for IPolygon4 implementation
##class IPolygon4_Impl(object):
##    def SimplifyEx(self, preserveFromToPoints, closeRings, useXORRule):
##        u'Same as ITopologicalOperator::Simplify, but with some additional options that affect performance and how the interior is classified.'
##        #return 
##
##    @property
##    def ConnectedComponentBag(self):
##        u'Creates and returns a geometry bag containing polygons that represent connected components of the original. The rings of the output polygons are references to rings in the original.'
##        #return polygonBag
##
##    @property
##    def InteriorRingBag(self, exteriorRing):
##        u'Creates and returns a geometry bag that contains references to all rings that are interior to the specified exterior ring.'
##        #return ringBag
##
##    @property
##    def ExteriorRingBag(self):
##        u'Creates and returns a geometry bag that contains references to all exterior rings.'
##        #return ringBag
##
##    @property
##    def OutermostComponentBag(self):
##        u'Creates and returns a geometry bag containing polygons that represent outermost components of the original and all components within (islands within lakes). The rings of the output polygons are references to rings in the original.'
##        #return polygonBag
##

class IGeometryBridge(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to a set of generic methods that can be used in all languages supported.'
    _iid_ = GUID('{518CBA93-621E-476A-824D-26A104A42902}')
    _idlflags_ = ['oleautomation']
class ISegment(ICurve):
    _case_insensitive_ = True
    u'Provides access to members that identify a segment. A segment is a way of getting between two endpoints.'
    _iid_ = GUID('{F2C4F0DE-C5AE-11D0-8307-0000F8034032}')
    _idlflags_ = []
class IMultiPatch(IGeometry):
    _case_insensitive_ = True
    u'Provides access to members that identify a MultiPatch and permit controlled access to its parts.'
    _iid_ = GUID('{F3C041C8-AE4D-11D2-9C93-00C04FB17838}')
    _idlflags_ = []
IGeometryBridge._methods_ = [
    COMMETHOD([helpstring(u'Populates the array with references to a sub-sequence of geometries.')], HRESULT, 'QueryGeometries',
              ( ['in'], POINTER(IGeometryCollection), 'pGeometryCollection' ),
              ( [], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(POINTER(IGeometry))), 'geometries' )),
    COMMETHOD([helpstring(u'Adds references to the specified geometries.')], HRESULT, 'AddGeometries',
              ( ['in'], POINTER(IGeometryCollection), 'pGeometryCollection' ),
              ( ['in'], POINTER(_midlSAFEARRAY(POINTER(IGeometry))), 'newGeometries' )),
    COMMETHOD([helpstring(u'Inserts at the specified index references to some number of geometries in the input array.')], HRESULT, 'InsertGeometries',
              ( ['in'], POINTER(IGeometryCollection), 'pGeometryCollection' ),
              ( [], c_int, 'Index' ),
              ( ['in'], POINTER(_midlSAFEARRAY(POINTER(IGeometry))), 'newGeometries' )),
    COMMETHOD([helpstring(u'Replaces all geometries in the collection with the specified number of references to those in the input array.')], HRESULT, 'SetGeometries',
              ( ['in'], POINTER(IGeometryCollection), 'pGeometryCollection' ),
              ( ['in'], POINTER(_midlSAFEARRAY(POINTER(IGeometry))), 'newGeometries' )),
    COMMETHOD([helpstring(u'Copies some points to an existing array of points.')], HRESULT, 'QueryPoints',
              ( ['in'], POINTER(IPointCollection4), 'pPointCollection' ),
              ( [], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(POINTER(IPoint))), 'Points' )),
    COMMETHOD([helpstring(u'Inserts copies of the input points as vertices into a Path, Ring, Polyline, or Polygon; or references to the input points into a Multipoint, Triangles, TriangleFan, or TriangleStrip.')], HRESULT, 'InsertPoints',
              ( ['in'], POINTER(IPointCollection4), 'pPointCollection' ),
              ( [], c_int, 'Index' ),
              ( ['in'], POINTER(_midlSAFEARRAY(POINTER(IPoint))), 'newPoints' )),
    COMMETHOD([helpstring(u'Adds copies of the input points as vertices to this Path, Ring, Polyline, or Polygon; or references to the input points to this Multipoint, Triangles, TriangleFan, or TriangleStrip.')], HRESULT, 'AddPoints',
              ( ['in'], POINTER(IPointCollection4), 'pPointCollection' ),
              ( ['in'], POINTER(_midlSAFEARRAY(POINTER(IPoint))), 'newPoints' )),
    COMMETHOD([helpstring(u'Replaces all existing vertices of this Path, Ring, Polyline, or Polygon with copies of the input points; or all existing points of this Multipoint, Triangles, TriangleFan, or TriangleStrip with references to the input points.')], HRESULT, 'SetPoints',
              ( ['in'], POINTER(IPointCollection4), 'pPointCollection' ),
              ( ['in'], POINTER(_midlSAFEARRAY(POINTER(IPoint))), 'newPoints' )),
    COMMETHOD([helpstring(u'Populates an array with references to points in the Multipoint. The QueryPoints method on IPointCollection makes copies of the points.')], HRESULT, 'GetPoints',
              ( ['in'], POINTER(IPointCollection4), 'pPointCollection' ),
              ( [], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(POINTER(IPoint))), 'Points' )),
    COMMETHOD([helpstring(u'Replaces vertices/points within a PointCollection.')], HRESULT, 'ReplacePoints',
              ( ['in'], POINTER(IPointCollection4), 'pPointCollection' ),
              ( [], c_int, 'Index' ),
              ( [], c_int, 'goingAway' ),
              ( ['in'], POINTER(_midlSAFEARRAY(POINTER(IPoint))), 'newPoints' )),
    COMMETHOD([helpstring(u'Adds vertices/points to this Path, Ring, Polyline, Polygon, Multipoint, Triangles, TriangleFan, TriangleStrip, or MultiPatch.')], HRESULT, 'AddWKSPointZs',
              ( ['in'], POINTER(IPointCollection4), 'pPointCollection' ),
              ( ['in'], POINTER(_midlSAFEARRAY(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPointZ)), 'pointStructures' )),
    COMMETHOD([helpstring(u'Replaces all vertices/points of this Path, Ring, Polyline, Polygon, Multipoint, Triangles, TriangleFan, TriangleStrip, or MultiPatch with new ones.')], HRESULT, 'SetWKSPointZs',
              ( ['in'], POINTER(IPointCollection4), 'pPointCollection' ),
              ( ['in'], POINTER(_midlSAFEARRAY(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPointZ)), 'pointStructures' )),
    COMMETHOD([helpstring(u'Copies vertices/points coordinates to the array of point structures.')], HRESULT, 'QueryWKSPointZs',
              ( ['in'], POINTER(IPointCollection4), 'pPointCollection' ),
              ( [], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPointZ)), 'pointStructures' )),
    COMMETHOD([helpstring(u'Inserts new vertices/points into this Path, Ring, Polyline, Polygon, Multipoint, Triangles, TriangleFan, TriangleStrip, or MultiPatch.')], HRESULT, 'InsertWKSPointZs',
              ( ['in'], POINTER(IPointCollection4), 'pPointCollection' ),
              ( [], c_int, 'Index' ),
              ( ['in'], POINTER(_midlSAFEARRAY(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPointZ)), 'newPoints' )),
    COMMETHOD([helpstring(u'Returns references to some of the input segments.')], HRESULT, 'QuerySegments',
              ( ['in'], POINTER(ISegmentCollection), 'pSegmentCollection' ),
              ( [], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(POINTER(ISegment))), 'segments' )),
    COMMETHOD([helpstring(u'Adds references to segments.')], HRESULT, 'AddSegments',
              ( ['in'], POINTER(ISegmentCollection), 'pSegmentCollection' ),
              ( ['in'], POINTER(_midlSAFEARRAY(POINTER(ISegment))), 'newSegments' )),
    COMMETHOD([helpstring(u'Inserts references to the input segments.')], HRESULT, 'InsertSegments',
              ( ['in'], POINTER(ISegmentCollection), 'pSegmentCollection' ),
              ( [], c_int, 'Index' ),
              ( ['in'], POINTER(_midlSAFEARRAY(POINTER(ISegment))), 'newSegments' )),
    COMMETHOD([helpstring(u'Removes and inserts from segments.')], HRESULT, 'ReplaceSegments',
              ( ['in'], POINTER(ISegmentCollection), 'pSegmentCollection' ),
              ( [], c_int, 'Index' ),
              ( [], c_int, 'goingAway' ),
              ( ['in'], POINTER(_midlSAFEARRAY(POINTER(ISegment))), 'newSegments' )),
    COMMETHOD([helpstring(u'Replaces all segments with references to the input segments.')], HRESULT, 'SetSegments',
              ( ['in'], POINTER(ISegmentCollection), 'pSegmentCollection' ),
              ( ['in'], POINTER(_midlSAFEARRAY(POINTER(ISegment))), 'newSegments' )),
    COMMETHOD([helpstring(u'Densify segment into the specified number of smaller segments.')], HRESULT, 'Densify',
              ( ['in'], POINTER(ISegment), 'pSegment' ),
              ( [], c_double, 'maxDeviation' ),
              ( ['in', 'out'], POINTER(c_int), 'pcOutSegments' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(POINTER(ILine))), 'segments' )),
    COMMETHOD([helpstring(u'Constructs a set of buffers at various distances. More efficient than calling Buffer repeatedly on the same geometry.')], HRESULT, 'ConstructBuffers',
              ( ['in'], POINTER(ITopologicalOperator2), 'pTopologicalOperator' ),
              ( ['in'], POINTER(_midlSAFEARRAY(c_double)), 'distances' ),
              ( ['retval', 'out'], POINTER(POINTER(IEnumGeometry)), 'buffers' )),
    COMMETHOD([helpstring(u'Populates an array with references to all beginning rings of the specified types.')], HRESULT, 'QueryBeginningRings',
              ( ['in'], POINTER(IMultiPatch), 'pMultiPatch' ),
              ( [], c_int, 'ringTypesDesired' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(POINTER(IRing))), 'beginningRings' )),
    COMMETHOD([helpstring(u'Populates an array with references to following rings that are in the ring group that starts with the specified beginning ring.')], HRESULT, 'QueryFollowingRings',
              ( ['in'], POINTER(IMultiPatch), 'pMultiPatch' ),
              ( [], POINTER(IRing), 'beginningRing' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(POINTER(IRing))), 'followingRings' )),
]
################################################################
## code template for IGeometryBridge implementation
##class IGeometryBridge_Impl(object):
##    def AddPoints(self, pPointCollection, newPoints):
##        u'Adds copies of the input points as vertices to this Path, Ring, Polyline, or Polygon; or references to the input points to this Multipoint, Triangles, TriangleFan, or TriangleStrip.'
##        #return 
##
##    def GetPoints(self, pPointCollection, Index):
##        u'Populates an array with references to points in the Multipoint. The QueryPoints method on IPointCollection makes copies of the points.'
##        #return Points
##
##    def AddWKSPointZs(self, pPointCollection, pointStructures):
##        u'Adds vertices/points to this Path, Ring, Polyline, Polygon, Multipoint, Triangles, TriangleFan, TriangleStrip, or MultiPatch.'
##        #return 
##
##    def QueryWKSPointZs(self, pPointCollection, Index):
##        u'Copies vertices/points coordinates to the array of point structures.'
##        #return pointStructures
##
##    def ReplacePoints(self, pPointCollection, Index, goingAway, newPoints):
##        u'Replaces vertices/points within a PointCollection.'
##        #return 
##
##    def SetGeometries(self, pGeometryCollection, newGeometries):
##        u'Replaces all geometries in the collection with the specified number of references to those in the input array.'
##        #return 
##
##    def AddGeometries(self, pGeometryCollection, newGeometries):
##        u'Adds references to the specified geometries.'
##        #return 
##
##    def SetWKSPointZs(self, pPointCollection, pointStructures):
##        u'Replaces all vertices/points of this Path, Ring, Polyline, Polygon, Multipoint, Triangles, TriangleFan, TriangleStrip, or MultiPatch with new ones.'
##        #return 
##
##    def SetSegments(self, pSegmentCollection, newSegments):
##        u'Replaces all segments with references to the input segments.'
##        #return 
##
##    def InsertWKSPointZs(self, pPointCollection, Index, newPoints):
##        u'Inserts new vertices/points into this Path, Ring, Polyline, Polygon, Multipoint, Triangles, TriangleFan, TriangleStrip, or MultiPatch.'
##        #return 
##
##    def QueryGeometries(self, pGeometryCollection, Index):
##        u'Populates the array with references to a sub-sequence of geometries.'
##        #return geometries
##
##    def Densify(self, pSegment, maxDeviation):
##        u'Densify segment into the specified number of smaller segments.'
##        #return pcOutSegments, segments
##
##    def QueryFollowingRings(self, pMultiPatch, beginningRing):
##        u'Populates an array with references to following rings that are in the ring group that starts with the specified beginning ring.'
##        #return followingRings
##
##    def AddSegments(self, pSegmentCollection, newSegments):
##        u'Adds references to segments.'
##        #return 
##
##    def InsertGeometries(self, pGeometryCollection, Index, newGeometries):
##        u'Inserts at the specified index references to some number of geometries in the input array.'
##        #return 
##
##    def QueryBeginningRings(self, pMultiPatch, ringTypesDesired):
##        u'Populates an array with references to all beginning rings of the specified types.'
##        #return beginningRings
##
##    def ReplaceSegments(self, pSegmentCollection, Index, goingAway, newSegments):
##        u'Removes and inserts from segments.'
##        #return 
##
##    def QueryPoints(self, pPointCollection, Index):
##        u'Copies some points to an existing array of points.'
##        #return Points
##
##    def QuerySegments(self, pSegmentCollection, Index):
##        u'Returns references to some of the input segments.'
##        #return segments
##
##    def InsertSegments(self, pSegmentCollection, Index, newSegments):
##        u'Inserts references to the input segments.'
##        #return 
##
##    def ConstructBuffers(self, pTopologicalOperator, distances):
##        u'Constructs a set of buffers at various distances. More efficient than calling Buffer repeatedly on the same geometry.'
##        #return buffers
##
##    def SetPoints(self, pPointCollection, newPoints):
##        u'Replaces all existing vertices of this Path, Ring, Polyline, or Polygon with copies of the input points; or all existing points of this Multipoint, Triangles, TriangleFan, or TriangleStrip with references to the input points.'
##        #return 
##
##    def InsertPoints(self, pPointCollection, Index, newPoints):
##        u'Inserts copies of the input points as vertices into a Path, Ring, Polyline, or Polygon; or references to the input points into a Multipoint, Triangles, TriangleFan, or TriangleStrip.'
##        #return 
##


# values for enumeration 'esriPatchType'
esriPatchTypeTriangleStrip = 0
esriPatchTypeTriangleFan = 1
esriPatchTypeOuterRing = 2
esriPatchTypeInnerRing = 3
esriPatchTypeFirstRing = 4
esriPatchTypeRing = 5
esriPatchTypeTriangles = 6
esriPatchType = c_int # enum
IPolygon5._methods_ = [
    COMMETHOD(['propget', helpstring(u"Returns true if the shape of this polygon is equivalent to the polygon's bounding envelope.")], HRESULT, 'IsEnvelope',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsEnvelope' )),
]
################################################################
## code template for IPolygon5 implementation
##class IPolygon5_Impl(object):
##    @property
##    def IsEnvelope(self):
##        u"Returns true if the shape of this polygon is equivalent to the polygon's bounding envelope."
##        #return IsEnvelope
##

class IGeometryFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that create geometries from different inputs.'
    _iid_ = GUID('{F71F8C16-EF07-11D0-8327-0000F8775BE9}')
    _idlflags_ = []

# values for enumeration 'esriShapeType'
esriShapeNull = 0
esriShapePoint = 1
esriShapePointM = 21
esriShapePointZM = 11
esriShapePointZ = 9
esriShapeMultipoint = 8
esriShapeMultipointM = 28
esriShapeMultipointZM = 18
esriShapeMultipointZ = 20
esriShapePolyline = 3
esriShapePolylineM = 23
esriShapePolylineZM = 13
esriShapePolylineZ = 10
esriShapePolygon = 5
esriShapePolygonM = 25
esriShapePolygonZM = 15
esriShapePolygonZ = 19
esriShapeMultiPatchM = 31
esriShapeMultiPatch = 32
esriShapeGeneralPolyline = 50
esriShapeGeneralPolygon = 51
esriShapeGeneralPoint = 52
esriShapeGeneralMultipoint = 53
esriShapeGeneralMultiPatch = 54
esriShapeTypeLast = 55
esriShapeType = c_int # enum
IGeometryFactory._methods_ = [
    COMMETHOD([helpstring(u'Create a point, polyline, polygon, or multipoint from the specified shapefile format buffer.')], HRESULT, 'CreateGeometry',
              ( ['in', 'out'], POINTER(c_int), 'byteCountInOut' ),
              ( ['in'], POINTER(c_ubyte), 'geometryInfo' ),
              ( ['out'], POINTER(POINTER(IGeometry)), 'outGeometry' )),
    COMMETHOD([helpstring(u'Create a point, polyline, polygon, or multipoint from the specified OGIS WKB format buffer.')], HRESULT, 'CreateGeometryFromWkb',
              ( ['in', 'out'], POINTER(c_int), 'byteCountInOut' ),
              ( ['in'], POINTER(c_ubyte), 'geometryInfo' ),
              ( ['out'], POINTER(POINTER(IGeometry)), 'outGeometry' )),
    COMMETHOD([helpstring(u'Create an empty geometry of the specified Esri shape file type.')], HRESULT, 'CreateEmptyGeometryByESRIType',
              ( [], esriShapeType, 'shapeType' ),
              ( ['out'], POINTER(POINTER(IGeometry)), 'outGeometry' )),
    COMMETHOD([helpstring(u'Creates an empty geometry of the specified ArcObjects geometry type.')], HRESULT, 'CreateEmptyGeometryByType',
              ( [], esriGeometryType, 'GeometryType' ),
              ( ['out'], POINTER(POINTER(IGeometry)), 'outGeometry' )),
    COMMETHOD([helpstring(u'Create a point, polyline, polygon, or multipoint from the specified OGIS WKB format buffer.')], HRESULT, 'CreateGeometryFromWkbVariant',
              ( [], VARIANT, 'wkb' ),
              ( ['out'], POINTER(POINTER(IGeometry)), 'outGeometry' ),
              ( ['out'], POINTER(c_int), 'numBytesRead' )),
    COMMETHOD([helpstring(u'Creates a geometry bag containing references to geometries returned by the input geometry enumerator.')], HRESULT, 'CreateGeometryFromEnumerator',
              ( [], POINTER(IEnumGeometry), 'geometries' ),
              ( ['retval', 'out'], POINTER(POINTER(IGeometry)), 'outGeometry' )),
]
################################################################
## code template for IGeometryFactory implementation
##class IGeometryFactory_Impl(object):
##    def CreateGeometryFromWkbVariant(self, wkb):
##        u'Create a point, polyline, polygon, or multipoint from the specified OGIS WKB format buffer.'
##        #return outGeometry, numBytesRead
##
##    def CreateEmptyGeometryByType(self, GeometryType):
##        u'Creates an empty geometry of the specified ArcObjects geometry type.'
##        #return outGeometry
##
##    def CreateGeometry(self, geometryInfo):
##        u'Create a point, polyline, polygon, or multipoint from the specified shapefile format buffer.'
##        #return byteCountInOut, outGeometry
##
##    def CreateGeometryFromEnumerator(self, geometries):
##        u'Creates a geometry bag containing references to geometries returned by the input geometry enumerator.'
##        #return outGeometry
##
##    def CreateGeometryFromWkb(self, geometryInfo):
##        u'Create a point, polyline, polygon, or multipoint from the specified OGIS WKB format buffer.'
##        #return byteCountInOut, outGeometry
##
##    def CreateEmptyGeometryByESRIType(self, shapeType):
##        u'Create an empty geometry of the specified Esri shape file type.'
##        #return outGeometry
##

IPath._methods_ = [
    COMMETHOD([helpstring(u'Generalizes this path using the Douglas-Poiker algorithm.')], HRESULT, 'Generalize',
              ( [], c_double, 'maxAllowableOffset' )),
    COMMETHOD([helpstring(u'Converts this path into a smooth approximation of itself that contains only Bezier curve segments.')], HRESULT, 'Smooth',
              ( [], c_double, 'maxAllowableOffset' )),
    COMMETHOD([helpstring(u'Replaces up to four segments (two on each of the specified vertex index) with bezier curves.')], HRESULT, 'SmoothLocal',
              ( [], c_int, 'vertexIndex' )),
    COMMETHOD([helpstring(u'Returns tangent vectors (relative to corresponding endpoint) at both sides of a Bezier end point; and whether they have been set by user or by smoothing process.')], HRESULT, 'QueryChordLengthTangents',
              ( [], c_int, 'pointIndex' ),
              ( [], POINTER(IPoint), 'prevTangent' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'prevSetByUser' ),
              ( [], POINTER(IPoint), 'nextTangent' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'nextSetByUser' )),
    COMMETHOD([helpstring(u'Sets tangent vectors (relative to corresponding endpoint) at both sides of a Bezier end point; if either is Nothing, they will be set by smoothing process.')], HRESULT, 'SetChordLengthTangents',
              ( [], c_int, 'pointIndex' ),
              ( [], POINTER(IPoint), 'prevTangent' ),
              ( [], POINTER(IPoint), 'nextTangent' )),
]
################################################################
## code template for IPath implementation
##class IPath_Impl(object):
##    def QueryChordLengthTangents(self, pointIndex, prevTangent, nextTangent):
##        u'Returns tangent vectors (relative to corresponding endpoint) at both sides of a Bezier end point; and whether they have been set by user or by smoothing process.'
##        #return prevSetByUser, nextSetByUser
##
##    def Smooth(self, maxAllowableOffset):
##        u'Converts this path into a smooth approximation of itself that contains only Bezier curve segments.'
##        #return 
##
##    def SetChordLengthTangents(self, pointIndex, prevTangent, nextTangent):
##        u'Sets tangent vectors (relative to corresponding endpoint) at both sides of a Bezier end point; if either is Nothing, they will be set by smoothing process.'
##        #return 
##
##    def Generalize(self, maxAllowableOffset):
##        u'Generalizes this path using the Douglas-Poiker algorithm.'
##        #return 
##
##    def SmoothLocal(self, vertexIndex):
##        u'Replaces up to four segments (two on each of the specified vertex index) with bezier curves.'
##        #return 
##

IRing._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if this ring can function as the exterior ring in a polygon (ring orientation is clockwise, area > 0).')], HRESULT, 'IsExterior',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsExterior' )),
    COMMETHOD([helpstring(u'Modifies this ring by replacing some of its segments with some segments from reshapeSource.')], HRESULT, 'Reshape',
              ( [], POINTER(IPath), 'reshapeSource' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'reshapeHappened' )),
    COMMETHOD([helpstring(u"Makes sure that this ring is closed by adding a line segment between the ring's 'to' and 'from' points if necessary.")], HRESULT, 'Close'),
    COMMETHOD([helpstring(u'Extracts a portion of this curve into a new curve. The interior of the new curve may contain the from/to point of the ring when useRingOrientation is true.')], HRESULT, 'GetSubcurveEx',
              ( [], c_double, 'fromDistance' ),
              ( [], c_double, 'toDistance' ),
              ( [], VARIANT_BOOL, 'asRatio' ),
              ( [], VARIANT_BOOL, 'isCCW' ),
              ( [], VARIANT_BOOL, 'useRingOrientation' ),
              ( ['retval', 'out'], POINTER(POINTER(ICurve)), 'outSubcurve' )),
]
################################################################
## code template for IRing implementation
##class IRing_Impl(object):
##    def Reshape(self, reshapeSource):
##        u'Modifies this ring by replacing some of its segments with some segments from reshapeSource.'
##        #return reshapeHappened
##
##    @property
##    def IsExterior(self):
##        u'Indicates if this ring can function as the exterior ring in a polygon (ring orientation is clockwise, area > 0).'
##        #return IsExterior
##
##    def GetSubcurveEx(self, fromDistance, toDistance, asRatio, isCCW, useRingOrientation):
##        u'Extracts a portion of this curve into a new curve. The interior of the new curve may contain the from/to point of the ring when useRingOrientation is true.'
##        #return outSubcurve
##
##    def Close(self):
##        u"Makes sure that this ring is closed by adding a line segment between the ring's 'to' and 'from' points if necessary."
##        #return 
##

IRing2._methods_ = [
    COMMETHOD([helpstring(u'Creates two new polygons by using segments from the ring and from reshapeSource.')], HRESULT, 'ReshapeEx',
              ( [], POINTER(IPath), 'reshapeSource' ),
              ( ['out'], POINTER(POINTER(IGeometry)), 'leftResult' ),
              ( ['out'], POINTER(POINTER(IGeometry)), 'rightResult' )),
]
################################################################
## code template for IRing2 implementation
##class IRing2_Impl(object):
##    def ReshapeEx(self, reshapeSource):
##        u'Creates two new polygons by using segments from the ring and from reshapeSource.'
##        #return leftResult, rightResult
##

class IVerticalCoordinateSystem(ISpatialReferenceInfo):
    _case_insensitive_ = True
    u'Provides access to properties of a vertical coordinate system.'
    _iid_ = GUID('{3F6C2145-3320-446F-82BF-B3E38FADC833}')
    _idlflags_ = ['oleautomation']
class IHVDatum(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Indicator interface for a horizontal or vertical.'
    _iid_ = GUID('{8EBB735D-1AD3-45E8-B3A0-11FBA705203C}')
    _idlflags_ = ['oleautomation']
IVerticalCoordinateSystem._methods_ = [
    COMMETHOD(['propget', helpstring(u'The usage notes of a vertical coordinate system.')], HRESULT, 'Usage',
              ( ['retval', 'out'], POINTER(BSTR), 'Usage' )),
    COMMETHOD(['propget', helpstring(u'The datum of a vertical coordinate system.')], HRESULT, 'Datum',
              ( ['retval', 'out'], POINTER(POINTER(IHVDatum)), 'hvDatum' )),
    COMMETHOD(['propget', helpstring(u'The linear unit of a vertical coordinate system.')], HRESULT, 'CoordinateUnit',
              ( ['retval', 'out'], POINTER(POINTER(ILinearUnit)), 'Unit' )),
    COMMETHOD(['propput', helpstring(u'The linear unit of a vertical coordinate system.')], HRESULT, 'CoordinateUnit',
              ( [], POINTER(ILinearUnit), 'Unit' )),
    COMMETHOD(['propget', helpstring(u'The vertical shift of a vertical coordinate system.')], HRESULT, 'VerticalShift',
              ( ['retval', 'out'], POINTER(c_double), 'vshift' )),
    COMMETHOD(['propput', helpstring(u'The vertical shift of a vertical coordinate system.')], HRESULT, 'VerticalShift',
              ( [], c_double, 'vshift' )),
    COMMETHOD(['propget', helpstring(u'The positive direction of the z coordinates. Up is 1. Down (in the direction of gravity) is -1.')], HRESULT, 'PositiveDirection',
              ( ['retval', 'out'], POINTER(c_int), 'pd' )),
    COMMETHOD(['propput', helpstring(u'The positive direction of the z coordinates. Up is 1. Down (in the direction of gravity) is -1.')], HRESULT, 'PositiveDirection',
              ( [], c_int, 'pd' )),
    COMMETHOD([helpstring(u'Gets the vertical coordinate system parameters.')], HRESULT, 'GetParameters',
              ( ['out'], POINTER(POINTER(IParameter)), 'parameters' )),
]
################################################################
## code template for IVerticalCoordinateSystem implementation
##class IVerticalCoordinateSystem_Impl(object):
##    def _get(self):
##        u'The positive direction of the z coordinates. Up is 1. Down (in the direction of gravity) is -1.'
##        #return pd
##    def _set(self, pd):
##        u'The positive direction of the z coordinates. Up is 1. Down (in the direction of gravity) is -1.'
##    PositiveDirection = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The vertical shift of a vertical coordinate system.'
##        #return vshift
##    def _set(self, vshift):
##        u'The vertical shift of a vertical coordinate system.'
##    VerticalShift = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Datum(self):
##        u'The datum of a vertical coordinate system.'
##        #return hvDatum
##
##    def _get(self):
##        u'The linear unit of a vertical coordinate system.'
##        #return Unit
##    def _set(self, Unit):
##        u'The linear unit of a vertical coordinate system.'
##    CoordinateUnit = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Usage(self):
##        u'The usage notes of a vertical coordinate system.'
##        #return Usage
##
##    def GetParameters(self):
##        u'Gets the vertical coordinate system parameters.'
##        #return parameters
##

class Multipoint(CoClass):
    u'An ordered collection of points; optionally has measure, height and ID attributes.'
    _reg_clsid_ = GUID('{00A5CB40-52DA-11D0-A8F2-00608C85EDE5}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
class IPointCollection5(IPointCollection4):
    _case_insensitive_ = True
    u'Provides access to members that manipulate the vertices as lightweight point+attribute structures (VA - vertex attribute)'
    _iid_ = GUID('{87C8DE06-D8B5-4F5D-BCD5-A27C3A994B07}')
    _idlflags_ = []
class IMultipoint(IGeometry):
    _case_insensitive_ = True
    u'Indicator interface that identifies a multipoint object.'
    _iid_ = GUID('{032277B2-5704-11D1-8352-0000F8775BE9}')
    _idlflags_ = ['oleautomation']
class IConstructMultipoint(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that construct multiple points using other geometries and values.'
    _iid_ = GUID('{BE99E37A-14F8-11D1-8336-0000F8775BE9}')
    _idlflags_ = []
Multipoint._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IPointCollection, IPointCollection2, IPointCollection3, IPointCollection4, IPointCollection5, IGeometry, IGeometry2, IGeometry3, IGeometry4, IGeometry5, IGeometryCollection, IMultipoint, IMAware, IMCollection, IZAware, IZCollection, IPointIDAware, IRelationalOperator, IRelationalOperator2, IProximityOperator, ITopologicalOperator, ITopologicalOperator2, ITopologicalOperator6, IConstructMultipoint, IHitTest, IHitTest3D, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, ITransform2D, ITransform3D, ISpatialIndex, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, IMSnap, IProximityOperator3D, IRelationalOperator3D, IRelationalOperator3D2]

class ICircularArc(ICurve):
    _case_insensitive_ = True
    u'Provides access to members that control properties of circular arcs.'
    _iid_ = GUID('{991F5C10-BC4C-11D0-8303-0000F8034032}')
    _idlflags_ = []
IConstructMultipoint._methods_ = [
    COMMETHOD([helpstring(u'Constructs all points of tangency to a curve from a point.')], HRESULT, 'ConstructTangent',
              ( [], POINTER(ICurve), 'inCurve' ),
              ( [], POINTER(IPoint), 'p' )),
    COMMETHOD([helpstring(u'Constructs cPoints points evenly distributed along the input curve.')], HRESULT, 'ConstructDivideEqual',
              ( [], POINTER(ICurve), 'inCurve' ),
              ( [], c_int, 'numInnerPoints' )),
    COMMETHOD([helpstring(u'Places points along the input curve each seperate by the specified distance.')], HRESULT, 'ConstructDivideLength',
              ( [], POINTER(ICurve), 'inCurve' ),
              ( [], c_double, 'separationDistance' )),
    COMMETHOD([helpstring(u'Constructs the four arc points (fromPoint, toPoint, center point, intersection point of the tangents at fromPoint and toPoint, in that order) for the specified circular arc.')], HRESULT, 'ConstructArcPoints',
              ( [], POINTER(ICircularArc), 'a' )),
    COMMETHOD([helpstring(u'Constructs the point(s) of intersection/tangency between two segments. Different ways of extending the segments in order to locate additional points can be specified.')], HRESULT, 'ConstructIntersectionEx',
              ( [], POINTER(ISegment), 'segment1' ),
              ( [], esriSegmentExtension, 'extension1' ),
              ( [], POINTER(ISegment), 'segment2' ),
              ( [], esriSegmentExtension, 'extension2' ),
              ( ['out', 'optional'], POINTER(c_double), 'params1' ),
              ( ['out', 'optional'], POINTER(c_double), 'params2' ),
              ( ['out', 'optional'], POINTER(c_int), 'tangentBits' )),
    COMMETHOD([helpstring(u'Constructs the point(s) of intersection/tangency between two segments. Different ways of extending the segments in order to locate additional points can be specified.')], HRESULT, 'ConstructIntersection',
              ( [], POINTER(ISegment), 'segment1' ),
              ( [], esriSegmentExtension, 'extension1' ),
              ( [], POINTER(ISegment), 'segment2' ),
              ( [], esriSegmentExtension, 'extension2' ),
              ( ['out', 'optional'], POINTER(VARIANT), 'params1' ),
              ( ['out', 'optional'], POINTER(VARIANT), 'params2' ),
              ( ['out', 'optional'], POINTER(VARIANT), 'isTangentPoint' )),
]
################################################################
## code template for IConstructMultipoint implementation
##class IConstructMultipoint_Impl(object):
##    def ConstructArcPoints(self, a):
##        u'Constructs the four arc points (fromPoint, toPoint, center point, intersection point of the tangents at fromPoint and toPoint, in that order) for the specified circular arc.'
##        #return 
##
##    def ConstructDivideEqual(self, inCurve, numInnerPoints):
##        u'Constructs cPoints points evenly distributed along the input curve.'
##        #return 
##
##    def ConstructDivideLength(self, inCurve, separationDistance):
##        u'Places points along the input curve each seperate by the specified distance.'
##        #return 
##
##    def ConstructTangent(self, inCurve, p):
##        u'Constructs all points of tangency to a curve from a point.'
##        #return 
##
##    def ConstructIntersectionEx(self, segment1, extension1, segment2, extension2):
##        u'Constructs the point(s) of intersection/tangency between two segments. Different ways of extending the segments in order to locate additional points can be specified.'
##        #return params1, params2, tangentBits
##
##    def ConstructIntersection(self, segment1, extension1, segment2, extension2):
##        u'Constructs the point(s) of intersection/tangency between two segments. Different ways of extending the segments in order to locate additional points can be specified.'
##        #return params1, params2, isTangentPoint
##

class IConstructGeodetic(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that construct various kinds of geodetic curves.'
    _iid_ = GUID('{BDA1EEF8-15A0-47CF-91A8-06D4287086CE}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'esriGeodeticType'
esriGeodeticTypeGeodesic = 0
esriGeodeticTypeLoxodrome = 1
esriGeodeticTypeGreatElliptic = 2
esriGeodeticTypeNormalSection = 3
esriGeodeticType = c_int # enum

# values for enumeration 'esriCurveDensifyMethod'
esriCurveDensifyByLength = 0
esriCurveDensifyByAngle = 1
esriCurveDensifyByDeviation = 2
esriCurveDensifyMethod = c_int # enum
IConstructGeodetic._methods_ = [
    COMMETHOD([helpstring(u"Constructs a geodetic line connecting the specified points. The 'by length' and 'by deviation' densification options are supported.")], HRESULT, 'ConstructGeodeticLineFromPoints',
              ( [], esriGeodeticType, 'geodeticLineType' ),
              ( [], POINTER(IPoint), 'FromPoint' ),
              ( [], POINTER(IPoint), 'ToPoint' ),
              ( [], POINTER(ILinearUnit), 'LinearUnit' ),
              ( [], esriCurveDensifyMethod, 'densifyMethod' ),
              ( [], c_double, 'densifyParameter' )),
    COMMETHOD([helpstring(u"constructs a geodetic line with the specified length and azimuth. The 'by length' and 'by deviation' densification options are supported.")], HRESULT, 'ConstructGeodeticLineFromDistance',
              ( [], esriGeodeticType, 'geodeticLineType' ),
              ( [], POINTER(IPoint), 'FromPoint' ),
              ( [], POINTER(ILinearUnit), 'LinearUnit' ),
              ( [], c_double, 'Length' ),
              ( [], c_double, 'Azimuth' ),
              ( [], esriCurveDensifyMethod, 'densifyMethod' ),
              ( [], c_double, 'densifyParameter' )),
    COMMETHOD([helpstring(u'constructs a geodesic circle centered on the specified point. All densification options are supported (length, angle, deviation).')], HRESULT, 'ConstructGeodesicCircle',
              ( [], POINTER(IPoint), 'CenterPoint' ),
              ( [], POINTER(ILinearUnit), 'LinearUnit' ),
              ( [], c_double, 'Radius' ),
              ( [], esriCurveDensifyMethod, 'densifyMethod' ),
              ( [], c_double, 'densifyParameter' )),
    COMMETHOD([helpstring(u"constructs a geodesic ellipse with origin at the specified point and semi major axis oriented according to the specified azimuth. The 'by angle' and 'by deviation' densification options are supported.")], HRESULT, 'ConstructGeodesicEllipse',
              ( [], POINTER(IPoint), 'CenterPoint' ),
              ( [], POINTER(ILinearUnit), 'LinearUnit' ),
              ( [], c_double, 'semiMajorAxisLength' ),
              ( [], c_double, 'semiMinorAxisLength' ),
              ( [], c_double, 'semiMajorAxisAzimuth' ),
              ( [], esriCurveDensifyMethod, 'densifyMethod' ),
              ( [], c_double, 'densifyParameter' )),
]
################################################################
## code template for IConstructGeodetic implementation
##class IConstructGeodetic_Impl(object):
##    def ConstructGeodesicCircle(self, CenterPoint, LinearUnit, Radius, densifyMethod, densifyParameter):
##        u'constructs a geodesic circle centered on the specified point. All densification options are supported (length, angle, deviation).'
##        #return 
##
##    def ConstructGeodesicEllipse(self, CenterPoint, LinearUnit, semiMajorAxisLength, semiMinorAxisLength, semiMajorAxisAzimuth, densifyMethod, densifyParameter):
##        u"constructs a geodesic ellipse with origin at the specified point and semi major axis oriented according to the specified azimuth. The 'by angle' and 'by deviation' densification options are supported."
##        #return 
##
##    def ConstructGeodeticLineFromPoints(self, geodeticLineType, FromPoint, ToPoint, LinearUnit, densifyMethod, densifyParameter):
##        u"Constructs a geodetic line connecting the specified points. The 'by length' and 'by deviation' densification options are supported."
##        #return 
##
##    def ConstructGeodeticLineFromDistance(self, geodeticLineType, FromPoint, LinearUnit, Length, Azimuth, densifyMethod, densifyParameter):
##        u"constructs a geodetic line with the specified length and azimuth. The 'by length' and 'by deviation' densification options are supported."
##        #return 
##

class GeometryBag(CoClass):
    u'An ordered collection of objects that support the IGeometry interface.'
    _reg_clsid_ = GUID('{10B5F5C0-3781-11D2-BCC5-0000F875BCCE}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
class IConstructGeometryCollection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that construct a collection of geometries.'
    _iid_ = GUID('{8680C0E0-377F-11D2-BCC5-0000F875BCCE}')
    _idlflags_ = ['oleautomation']
GeometryBag._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGeometry, IGeometry2, IGeometry3, IGeometry4, IGeometry5, IGeometryBag, IRelationalOperator, ITopologicalOperator, IGeometryCollection, IEnumGeometry, IConstructGeometryCollection, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, ITransform2D, ISpatialIndex]

class BufferConstruction(CoClass):
    u'Buffers collections of lines or collections of polygons.'
    _reg_clsid_ = GUID('{2177368C-0201-4102-9281-7ED72E176463}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
class IBufferConstruction(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that buffer sets of geometries.'
    _iid_ = GUID('{2D199435-C30B-480D-B7DA-587F8FD32124}')
    _idlflags_ = ['oleautomation']
BufferConstruction._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IBufferConstruction, IBufferConstructionProperties, IBufferConstructionProperties2]

class IDatum(ISpatialReferenceInfo):
    _case_insensitive_ = True
    u'Provides access to members that control the properties of all horizontal datums.'
    _iid_ = GUID('{53004780-1DD2-11B2-BF4B-08002022F573}')
    _idlflags_ = ['oleautomation']
class ISpheroid(ISpatialReferenceInfo):
    _case_insensitive_ = True
    u'Provides access to members that control the properties of all spheroids.'
    _iid_ = GUID('{429B9D00-1DD2-11B2-BF4B-08002022F573}')
    _idlflags_ = ['oleautomation']
IDatum._methods_ = [
    COMMETHOD(['propget', helpstring(u'The spheroid of this horizontal datum.')], HRESULT, 'Spheroid',
              ( ['retval', 'out'], POINTER(POINTER(ISpheroid)), 'Spheroid' )),
]
################################################################
## code template for IDatum implementation
##class IDatum_Impl(object):
##    @property
##    def Spheroid(self):
##        u'The spheroid of this horizontal datum.'
##        #return Spheroid
##

class RelationResult(CoClass):
    u'The indexes of geometrybag elements that are in a specified relation.'
    _reg_clsid_ = GUID('{256E4807-2A58-4360-90BD-FBD03517D95B}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
class IRelationResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that meet the specific relation between two sets of geometries.  Not currently implemented for geometries containing elliptic arcs.'
    _iid_ = GUID('{3FF13D39-EA3B-42CB-98F6-0F73A1C89B89}')
    _idlflags_ = ['oleautomation', 'hidden']
RelationResult._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRelationResult]


# values for enumeration 'esriTurnDirectionEnum'
esriNoTurn = 1
esriUTurn = 2
esriLeftTurn = 4
esriRightTurn = 8
esriTurnDirectionEnum = c_int # enum

# values for enumeration 'esriMCurveRelationEnum'
esriMRelationUndetermined = 0
esriMBetweenMinMax = 1
esriMBelowMin = 2
esriMAboveMax = 3
esriMRelationCurveEmpty = 16
esriMRelationCurveHasNoMs = 32
esriMRelationMIsNaN = 48
esriMRelationBasicMask = 3
esriMRelationUndeterminedDetailsMask = 48
esriMCurveRelationEnum = c_int # enum
ISpheroid._methods_ = [
    COMMETHOD(['propget', helpstring(u'The semi-major axis length of this spheroid.')], HRESULT, 'SemiMajorAxis',
              ( ['retval', 'out'], POINTER(c_double), 'axis' )),
    COMMETHOD(['propget', helpstring(u'The semi-minor axis length of this spheroid.')], HRESULT, 'SemiMinorAxis',
              ( ['retval', 'out'], POINTER(c_double), 'axis' )),
    COMMETHOD(['propget', helpstring(u'The flattening ratio of this spheroid.')], HRESULT, 'Flattening',
              ( ['retval', 'out'], POINTER(c_double), 'Flattening' )),
]
################################################################
## code template for ISpheroid implementation
##class ISpheroid_Impl(object):
##    @property
##    def SemiMinorAxis(self):
##        u'The semi-minor axis length of this spheroid.'
##        #return axis
##
##    @property
##    def Flattening(self):
##        u'The flattening ratio of this spheroid.'
##        #return Flattening
##
##    @property
##    def SemiMajorAxis(self):
##        u'The semi-major axis length of this spheroid.'
##        #return axis
##


# values for enumeration 'esriSRProjCS3Type'
esriSRProjCS_World_Aitoff = 54043
esriSRProjCS_World_CrasterParabolic = 54046
esriSRProjCS_World_FlatPolarQuartic = 54045
esriSRProjCS_World_HammerAitoff = 54044
esriSRProjCS_World_Times = 54048
esriSRProjCS_World_VerticalPerspective = 54049
esriSRProjCS_World_WinkelTripelNGS = 54042
esriSRProjCS_Sphere_Aitoff = 53043
esriSRProjCS_Sphere_CrasterParabolic = 53046
esriSRProjCS_Sphere_FlatPolarQuartic = 53045
esriSRProjCS_Sphere_HammerAitoff = 53044
esriSRProjCS_Sphere_Times = 53048
esriSRProjCS_Sphere_VerticalPerspective = 53049
esriSRProjCS_Sphere_WinkelTripelNGS = 53042
esriSRProjCS_WGS1984_NPoleGnomonic = 102034
esriSRProjCS_WGS1984_SPoleGnomonic = 102036
esriSRProjCS_WGS1984_NPoleOrthographic = 102035
esriSRProjCS_WGS1984_SPoleOrthographic = 102037
esriSRProjCS_TheWorldFromSpace = 102038
esriSRProjCS_USNatlAtlasLambertAziEqualArea = 2163
esriSRProjCS_Pulkovo1942_CS63zoneA1 = 2935
esriSRProjCS_Pulkovo1942_CS63zoneA2 = 2936
esriSRProjCS_Pulkovo1942_CS63zoneA3 = 2937
esriSRProjCS_Pulkovo1942_CS63zoneA4 = 2938
esriSRProjCS_Pulkovo1942_CS63zoneK2 = 2939
esriSRProjCS_Pulkovo1942_CS63zoneK3 = 2940
esriSRProjCS_Pulkovo1942_CS63zoneK4 = 2941
esriSRProjCS_ED1950JordanTM = 3066
esriSRProjCS_DHDN_SoldnerBerlin = 3068
esriSRProjCS_NAD1927WisconsinTM = 3069
esriSRProjCS_NAD1983WisconsinTM = 3070
esriSRProjCS_NAD1983HARNWisconsinTM = 3071
esriSRProjCS_NAD1983HARNMichiganGeoRef_Meters = 3079
esriSRProjCS_NAD1983TexasCentricMappingSystemLambert = 3084
esriSRProjCS_NAD1983TexasCentricMappingSystemAlbers = 3085
esriSRProjCS_NAD1983FloridaGDLAlbers = 3086
esriSRProjCS_NAD1983HARNFloridaGDLAlbers = 3087
esriSRProjCS_NAD1983HARN_SPCSKentucky_USFeet = 3091
esriSRProjCS_Mauritania1999UTMZone28N = 3343
esriSRProjCS_Mauritania1999UTMZone29N = 3344
esriSRProjCS_Mauritania1999UTMZone30N = 3345
esriSRProjCS_Gulshan303BangladeshTM = 3106
esriSRProjCS_Voirol1879NordAlgerieAncienne = 30493
esriSRProjCS_Voirol1879SudAlgerieAncienne = 30494
esriSRProjCS_D48SloveniaTM = 102060
esriSRProjCS_JAD2001JamaicaGrid = 3448
esriSRProjCS_BabSouth_PalauAziEquidist = 102096
esriSRProjCS_CostaRicaNorte = 102221
esriSRProjCS_CostaRicaSur = 102222
esriSRProjCS_CostaRicaTM90 = 102223
esriSRProjCS_MONREF1997UTMZone47N = 102225
esriSRProjCS_MONREF1997UTMZone48N = 102226
esriSRProjCS_MONREF1997UTMZone49N = 102227
esriSRProjCS_MONREF1997UTMZone50N = 102228
esriSRProjCS_ColombiaWestWestZone = 102231
esriSRProjCS_BogotaCiudadBogota = 102232
esriSRProjCS_MAGNACiudadBogota = 102233
esriSRProjCS_MAGNAColombiaOesteOeste = 3114
esriSRProjCS_MAGNAColombiaOeste = 3115
esriSRProjCS_MAGNAColombiaBogota = 3116
esriSRProjCS_MAGNAColombiaEste = 3117
esriSRProjCS_MAGNAColombiaEsteEste = 3118
esriSRProjCS_Guam1963TNet = 102239
esriSRProjCS_Guam1993Net = 102240
esriSRProjCS_PohnpeiAzimEquidist1971 = 102237
esriSRProjCS_SaipanAzimEquidist1969 = 102238
esriSRProjCS_NAD1983HARN_SPCSMinnesotaNorth_USFeet = 26857
esriSRProjCS_NAD1983HARN_SPCSMinnesotaCentral_USFeet = 26858
esriSRProjCS_NAD1983HARN_SPCSMinnesotaSouth_USFeet = 26859
esriSRProjCS_BeduaramTM13NE = 2931
esriSRProjCS_GunungSegaraUTMZone50S = 2933
esriSRProjCS_QND1995QatarNationalGrid = 2932
esriSRProjCS_ETRS1989GuernseyGrid = 3108
esriSRProjCS_ETRS1989JerseyTM = 3109
esriSRProjCS_GDA1994GeoscienceAustraliaLambert = 3112
esriSRProjCS_GDA1994BCSG02 = 3113
esriSRProjCS_PRS1992PhilippinesZoneI = 3121
esriSRProjCS_PRS1992PhilippinesZoneII = 3122
esriSRProjCS_PRS1992PhilippinesZoneIII = 3123
esriSRProjCS_PRS1992PhilippinesZoneIV = 3124
esriSRProjCS_PRS1992PhilippinesZoneV = 3125
esriSRProjCS_ETRS1989ETRS_GK19FIN = 3126
esriSRProjCS_ETRS1989ETRS_GK20FIN = 3127
esriSRProjCS_ETRS1989ETRS_GK21FIN = 3128
esriSRProjCS_ETRS1989ETRS_GK22FIN = 3129
esriSRProjCS_ETRS1989ETRS_GK23FIN = 3130
esriSRProjCS_ETRS1989ETRS_GK24FIN = 3131
esriSRProjCS_ETRS1989ETRS_GK25FIN = 3132
esriSRProjCS_ETRS1989ETRS_GK26FIN = 3133
esriSRProjCS_ETRS1989ETRS_GK27FIN = 3134
esriSRProjCS_ETRS1989ETRS_GK28FIN = 3135
esriSRProjCS_ETRS1989ETRS_GK29FIN = 3136
esriSRProjCS_ETRS1989ETRS_GK30FIN = 3137
esriSRProjCS_ETRS1989ETRS_GK31FIN = 3138
esriSRProjCS_WGS1984USGSTransantarcticMtns = 3294
esriSRProjCS_RGPFUTMZone5S = 3296
esriSRProjCS_RGPFUTMZone6S = 3297
esriSRProjCS_RGPFUTMZone7S = 3298
esriSRProjCS_RGPFUTMZone8S = 3299
esriSRProjCS_IGN63HivaOaUTMZone7S = 3302
esriSRProjCS_FatuIva1972UTMZone7S = 3303
esriSRProjCS_Tahiti1979UTMZone6S = 3304
esriSRProjCS_Moorea1987UTMZone6S = 3305
esriSRProjCS_Maupiti1983UTMZone5S = 3306
esriSRProjCS_Nakhl_e_GhanemUTMZone39N = 3307
esriSRProjCS_GDA1994NSW_Lambert = 3308
esriSRProjCS_NAD1927CaliforniaTealeAlbers = 3309
esriSRProjCS_NAD1983CaliforniaTealeAlbers = 3310
esriSRProjCS_NAD1983HARNCaliforniaTealeAlbers = 3311
esriSRProjCS_CSG1967UTMZone21N = 3312
esriSRProjCS_RGFG1995UTMZone21N = 3313
esriSRProjCS_Katanga1955KatangaLambert = 4415
esriSRProjCS_Katanga1955KatangaTM = 3315
esriSRProjCS_Kasai1953CongoTMZone22 = 3316
esriSRProjCS_Kasai1953CongoTMZone24 = 3317
esriSRProjCS_IGC1962CongoTMZone12 = 3318
esriSRProjCS_IGC1962CongoTMZone14 = 3319
esriSRProjCS_IGC1962CongoTMZone16 = 3320
esriSRProjCS_IGC1962CongoTMZone18 = 3321
esriSRProjCS_IGC1962CongoTMZone20 = 3322
esriSRProjCS_IGC1962CongoTMZone22 = 3323
esriSRProjCS_IGC1962CongoTMZone24 = 3324
esriSRProjCS_IGC1962CongoTMZone26 = 3325
esriSRProjCS_IGC1962CongoTMZone28 = 3326
esriSRProjCS_IGC1962CongoTMZone30 = 3327
esriSRProjCS_Pulkovo1942_58GUGiK80 = 3328
esriSRProjCS_Pulkovo1942_58_3DegGKZone5 = 3329
esriSRProjCS_Pulkovo1942_58_3DegGKZone6 = 3330
esriSRProjCS_Pulkovo1942_58_3DegGKZone7 = 3331
esriSRProjCS_Pulkovo1942_58_3DegGKZone8 = 3332
esriSRProjCS_Pulkovo1942_58GKZone3 = 3333
esriSRProjCS_Pulkovo1942_58GKZone4 = 3334
esriSRProjCS_Pulkovo1942_58GKZone5 = 3335
esriSRProjCS_KerguelanIsland1949UTMZone42S = 3336
esriSRProjCS_IGCB1955CongoTMZone12 = 3339
esriSRProjCS_IGCB1955CongoTMZone14 = 3340
esriSRProjCS_IGCB1955CongoTMZone16 = 3341
esriSRProjCS_IGCB1955CongoUTMZone33S = 3342
esriSRProjCS_NAD1983StatsCanadaLambert = 3347
esriSRProjCS_WGS1984PDCMercator = 3832
esriSRProjCS_Pulkovo1942CS63ZoneC0 = 3350
esriSRProjCS_Pulkovo1942CS63ZoneC1 = 3351
esriSRProjCS_Pulkovo1942CS63ZoneC2 = 3352
esriSRProjCS_Mhast_onshore_UTMZone32S = 3353
esriSRProjCS_Mhast_offshore_UTMZone32S = 3354
esriSRProjCS_EgyptGulfOfSuez_S650TLRedBelt = 3355
esriSRProjCS_GrandCayman1959UTMZone17N = 3356
esriSRProjCS_LittleCayman1961UTMZone17N = 3357
esriSRProjCS_NAD1983HARNSPCSNorthCarolina = 3358
esriSRProjCS_NAD1983HARNSPCSNorthCarolinaUSFt = 3404
esriSRProjCS_NAD1983HARNSPCSSouthCarolina = 3360
esriSRProjCS_NAD1983HARNSPCSSouthCarolinaIntlFt = 3361
esriSRProjCS_NAD1983HARNSPCSPennsylvaniaNorth = 3362
esriSRProjCS_NAD1983HARNSPCSPennsylvaniaNorthUSFt = 3363
esriSRProjCS_NAD1983HARNSPCSPennsylvaniaSouth = 3364
esriSRProjCS_NAD1983HARNSPCSPennsylvaniaSouthUSFt = 3365
esriSRProjCS_HongKong1963GridSystem = 3407
esriSRProjCS_MalaysiaGDM2000MRSO = 3375
esriSRProjCS_MalaysiaGDM2000BRS0 = 3376
esriSRProjCS_GDM2000Johor = 3377
esriSRProjCS_GDM2000NegeriSembilan_Melaka = 3378
esriSRProjCS_GDM2000Pahang = 3379
esriSRProjCS_GDM2000Selangor = 3380
esriSRProjCS_GDM2000Terengganu = 3381
esriSRProjCS_GDM2000PulauPinang_SeberangPerai = 3382
esriSRProjCS_GDM2000Kedah_Perlis = 3383
esriSRProjCS_GDM2000Perak = 3384
esriSRProjCS_GDM2000Kelantan = 3385
esriSRProjCS_AdindanUTMZone35N = 20135
esriSRProjCS_AdindanUTMZone36N = 20136
esriSRProjCS_AinElAbd1970UTMZone36N = 20436
esriSRProjCS_AinElAbd1970UTMZone40N = 20440
esriSRProjCS_POSGAR98ArgentinaZone1 = 22171
esriSRProjCS_POSGAR98ArgentinaZone2 = 22172
esriSRProjCS_POSGAR98ArgentinaZone3 = 22173
esriSRProjCS_POSGAR98ArgentinaZone4 = 22174
esriSRProjCS_POSGAR98ArgentinaZone5 = 22175
esriSRProjCS_POSGAR98ArgentinaZone6 = 22176
esriSRProjCS_POSGAR98ArgentinaZone7 = 22177
esriSRProjCS_POSGAR94ArgentinaZone1 = 22181
esriSRProjCS_POSGAR94ArgentinaZone2 = 22182
esriSRProjCS_POSGAR94ArgentinaZone3 = 22183
esriSRProjCS_POSGAR94ArgentinaZone4 = 22184
esriSRProjCS_POSGAR94ArgentinaZone5 = 22185
esriSRProjCS_POSGAR94ArgentinaZone6 = 22186
esriSRProjCS_POSGAR94ArgentinaZone7 = 22187
esriSRProjCS_CorregoAlegreUTMZone21S = 22521
esriSRProjCS_CorregoAlegreUTMZone22S = 22522
esriSRProjCS_CorregoAlegreUTMZone25S = 22525
esriSRProjCS_ProvSAmerDatumUTMZone17N = 24817
esriSRProjCS_ProvSAmerDatumUTMZone21S = 24881
esriSRProjCS_MerchichSaharaNord = 26194
esriSRProjCS_MerchichSaharaSud = 26195
esriSRProjCS_Datum73ModifiedPortugueseGrid = 27493
esriSRProjCS_SIRGAS2000UTMZone17N = 31971
esriSRProjCS_SIRGAS2000UTMZone18N = 31972
esriSRProjCS_SIRGAS2000UTMZone19N = 31973
esriSRProjCS_SIRGAS2000UTMZone20N = 31974
esriSRProjCS_SIRGAS2000UTMZone21N = 31975
esriSRProjCS_SIRGAS2000UTMZone22N = 31976
esriSRProjCS_SIRGAS2000UTMZone17S = 31977
esriSRProjCS_SIRGAS2000UTMZone18S = 31978
esriSRProjCS_SIRGAS2000UTMZone19S = 31979
esriSRProjCS_SIRGAS2000UTMZone20S = 31980
esriSRProjCS_SIRGAS2000UTMZone21S = 31981
esriSRProjCS_SIRGAS2000UTMZone22S = 31982
esriSRProjCS_SIRGAS2000UTMZone23S = 31983
esriSRProjCS_SIRGAS2000UTMZone24S = 31984
esriSRProjCS_SIRGAS2000UTMZone25S = 31985
esriSRProjCS_GoodeHomolosineLand = 54052
esriSRProjCS_GoodeHomolosineOcean = 54053
esriSRProjCS_QND1995UTMZone39N = 102143
esriSRProjCS_Merchich_degrees_UTMZone28N = 102144
esriSRProjCS_ETRS1989KosovoGrid = 102157
esriSRProjCS_NAD1983WisconsinTM_USFt = 102219
esriSRProjCS_NAD1983HARNWisconsinTM_USFt = 102220
esriSRProjCS_MONREF1997UTMZone46N = 102224
esriSRProjCS_WGS84ARC_SystemZone1 = 102421
esriSRProjCS_WGS84ARC_SystemZone2 = 102422
esriSRProjCS_WGS84ARC_SystemZone3 = 102423
esriSRProjCS_WGS84ARC_SystemZone4 = 102424
esriSRProjCS_WGS84ARC_SystemZone5 = 102425
esriSRProjCS_WGS84ARC_SystemZone6 = 102426
esriSRProjCS_WGS84ARC_SystemZone7 = 102427
esriSRProjCS_WGS84ARC_SystemZone8 = 102428
esriSRProjCS_WGS84ARC_SystemZone9 = 102429
esriSRProjCS_WGS84ARC_SystemZone10 = 102430
esriSRProjCS_WGS84ARC_SystemZone11 = 102431
esriSRProjCS_WGS84ARC_SystemZone12 = 102432
esriSRProjCS_WGS84ARC_SystemZone13 = 102433
esriSRProjCS_WGS84ARC_SystemZone14 = 102434
esriSRProjCS_WGS84ARC_SystemZone15 = 102435
esriSRProjCS_WGS84ARCSystemZone16 = 102436
esriSRProjCS_WGS84ARCSystemZone17 = 102437
esriSRProjCS_WGS84ARCSystemZone18 = 102438
esriSRProjCS_LKS1992LatviaTM_FN_0 = 102440
esriSRProjCS_TWD1967TM_Taiwan = 3828
esriSRProjCS_TWD1967TMPenghu = 3827
esriSRProjCS_TWD1997TM_Taiwan = 3826
esriSRProjCS_TWD1997TMPenghu = 3825
esriSRProjCS_NAD1983MississippiTM = 3814
esriSRProjCS_NAD1983TexasStatewide = 3081
esriSRProjCS_Indian1954UTMZone46N = 23946
esriSRProjCS_WGS1984WebMercatorMajorAuxSphere = 3857
esriSRProjCS_NAD83_CSRS_UTM_14N = 3158
esriSRProjCS_NAD83_CSRS_UTM_15N = 3159
esriSRProjCS_NAD83_CSRS_UTM_16N = 3160
esriSRProjCS_NAD83_CSRS98_UTM_14N = 3158
esriSRProjCS_NAD83_CSRS98_UTM_15N = 3159
esriSRProjCS_NAD83_CSRS98_UTM_16N = 3160
esriSRProjCS3Type = c_int # enum
class AffineTransformation3D(CoClass):
    u'A three dimensional transformation.'
    _reg_clsid_ = GUID('{C55F63F7-27B9-11D5-9F84-00C04F6BDF0D}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
class ITransformation3DGEN(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a 3D affine transformation. ITransformation3DGEN is generic version of ITransformation3D.'
    _iid_ = GUID('{1B9FA97E-66C8-477C-88C2-E87A96B56239}')
    _idlflags_ = ['oleautomation']
class ITransformation3D(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a 3D affine transformation.'
    _iid_ = GUID('{C06E0427-90D2-11D3-9F5C-00C04F6BC5F4}')
    _idlflags_ = []
class IAffineTransformation3D(ITransformation):
    _case_insensitive_ = True
    u'Provides access to members that define and manipulate affine transformations in 3D.'
    _iid_ = GUID('{C3E86164-2F35-4068-8706-0A07614F6AC3}')
    _idlflags_ = []
class IAffineTransformation3DGEN(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that define and manipulate affine transformations in 3D. IAffineTransformation3DGEN is generic version of IAffineTransformation3D.'
    _iid_ = GUID('{D1F0124F-A469-4653-A360-D29BC023722D}')
    _idlflags_ = ['oleautomation']
AffineTransformation3D._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ITransformationGEN, ITransformation3DGEN, ITransformation, ITransformation3D, IAffineTransformation3D, IAffineTransformation3DGEN, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]

class IEllipticArc(ICurve):
    _case_insensitive_ = True
    u'Provides access to members that control properties of elliptic arc segments.'
    _iid_ = GUID('{FA44C5F5-16C6-11D2-AA7A-00C04FA37BA4}')
    _idlflags_ = []

# values for enumeration 'esriArcOrientation'
esriArcClockwise = 0
esriArcCounterClockwise = 1
esriArcMinor = 2
esriArcMajor = 3
esriArcOrientation = c_int # enum
IEllipticArc._methods_ = [
    COMMETHOD([helpstring(u'Copies the center and endpoints, angle of rotation, orientation and major/minor properties into the method parameters.')], HRESULT, 'QueryCoords',
              ( [], VARIANT_BOOL, 'ellipseStd' ),
              ( [], POINTER(IPoint), 'Center' ),
              ( [], POINTER(IPoint), 'from' ),
              ( [], POINTER(IPoint), 'to' ),
              ( ['in', 'out'], POINTER(c_double), 'rotationAngle' ),
              ( ['in', 'out'], POINTER(c_double), 'minorMajorRatio' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'isCCW' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'minor' )),
    COMMETHOD([helpstring(u'Sets the center point and endpoints, angle of rotation, and orientation.')], HRESULT, 'PutCoords',
              ( [], VARIANT_BOOL, 'ellipseStd' ),
              ( [], POINTER(IPoint), 'Center' ),
              ( [], POINTER(IPoint), 'from' ),
              ( [], POINTER(IPoint), 'to' ),
              ( [], c_double, 'rotationAngle' ),
              ( [], c_double, 'minorMajorRatio' ),
              ( [], esriArcOrientation, 'orientation' )),
    COMMETHOD([helpstring(u'Returns the center point, starting angle, signed central angle, angle of rotation, ratio of the minor axis to the major axis, and axes.')], HRESULT, 'QueryCoordsByAngle',
              ( [], VARIANT_BOOL, 'ellipseStd' ),
              ( [], POINTER(IPoint), 'Center' ),
              ( ['in', 'out'], POINTER(c_double), 'FromAngle' ),
              ( ['in', 'out'], POINTER(c_double), 'CentralAngle' ),
              ( ['in', 'out'], POINTER(c_double), 'rotationAngle' ),
              ( ['in', 'out'], POINTER(c_double), 'semiMajor' ),
              ( ['in', 'out'], POINTER(c_double), 'minorMajorRatio' )),
    COMMETHOD([helpstring(u'Sets the center point, starting angle, signed central angle, angle of rotation, ratio of the minor axis to the major axis, and axes.')], HRESULT, 'PutCoordsByAngle',
              ( [], VARIANT_BOOL, 'ellipseStd' ),
              ( [], POINTER(IPoint), 'Center' ),
              ( [], c_double, 'FromAngle' ),
              ( [], c_double, 'CentralAngle' ),
              ( [], c_double, 'rotationAngle' ),
              ( [], c_double, 'semiMajor' ),
              ( [], c_double, 'minorMajorRatio' )),
    COMMETHOD(['propget', helpstring(u'The center point of the arc.')], HRESULT, 'CenterPoint',
              ( ['retval', 'out'], POINTER(POINTER(IPoint)), 'Center' )),
    COMMETHOD([helpstring(u'Copies the center of this arc to the input point.')], HRESULT, 'QueryCenterPoint',
              ( [], POINTER(IPoint), 'Center' )),
    COMMETHOD([helpstring(u'Gets the semi-major and semi-minor axes.')], HRESULT, 'GetAxes',
              ( ['in', 'out'], POINTER(c_double), 'semiMajor' ),
              ( ['in', 'out'], POINTER(c_double), 'semiMinor' ),
              ( ['in', 'out'], POINTER(c_double), 'minorMajorRatio' )),
    COMMETHOD([helpstring(u'Sets the semi-major and semi-minor axes.')], HRESULT, 'PutAxes',
              ( [], c_double, 'semiMajor' ),
              ( [], c_double, 'minorMajorRatio' )),
    COMMETHOD(['propget', helpstring(u'The start angle (measured from a horizontal line through the center point) defining where the arc starts.')], HRESULT, 'FromAngle',
              ( [], VARIANT_BOOL, 'ellipseStd' ),
              ( ['retval', 'out'], POINTER(c_double), 'FromAngle' )),
    COMMETHOD(['propput', helpstring(u'The start angle (measured from a horizontal line through the center point) defining where the arc starts.')], HRESULT, 'FromAngle',
              ( [], VARIANT_BOOL, 'ellipseStd' ),
              ( [], c_double, 'FromAngle' )),
    COMMETHOD(['propget', helpstring(u'The end angle (measured from a horizontal line through the center point) defining where the arc ends.')], HRESULT, 'ToAngle',
              ( [], VARIANT_BOOL, 'ellipseStd' ),
              ( ['retval', 'out'], POINTER(c_double), 'ToAngle' )),
    COMMETHOD(['propput', helpstring(u'The end angle (measured from a horizontal line through the center point) defining where the arc ends.')], HRESULT, 'ToAngle',
              ( [], VARIANT_BOOL, 'ellipseStd' ),
              ( [], c_double, 'ToAngle' )),
    COMMETHOD(['propget', helpstring(u'The included (or central) angle.')], HRESULT, 'CentralAngle',
              ( ['retval', 'out'], POINTER(c_double), 'CentralAngle' )),
    COMMETHOD(['propput', helpstring(u'The included (or central) angle.')], HRESULT, 'CentralAngle',
              ( [], c_double, 'CentralAngle' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the arc is degenerated to a point.')], HRESULT, 'IsPoint',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsPoint' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the arc is degenerated to a line.')], HRESULT, 'IsLine',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsLine' )),
    COMMETHOD(['propget', helpstring(u"Indicates if this elliptic arc is oriented counter-clockwise from its 'from' point to its 'to' point.")], HRESULT, 'IsCounterClockwise',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'isCCW' )),
    COMMETHOD(['propput', helpstring(u"Indicates if this elliptic arc is oriented counter-clockwise from its 'from' point to its 'to' point.")], HRESULT, 'IsCounterClockwise',
              ( [], VARIANT_BOOL, 'isCCW' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the arc is a minor arc or a major arc.')], HRESULT, 'IsMinor',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsMinor' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the arc is a minor arc or a major arc.')], HRESULT, 'IsMinor',
              ( [], VARIANT_BOOL, 'IsMinor' )),
    COMMETHOD([helpstring(u"Changes this ellipse into its complement; 'from' and 'to' points are unchanged.")], HRESULT, 'Complement'),
    COMMETHOD(['propget', helpstring(u'Indicates if this elliptical arc is acutally circular (major and minor axes same length).')], HRESULT, 'IsCircular',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsCircular' )),
]
################################################################
## code template for IEllipticArc implementation
##class IEllipticArc_Impl(object):
##    def PutCoords(self, ellipseStd, Center, from, to, rotationAngle, minorMajorRatio, orientation):
##        u'Sets the center point and endpoints, angle of rotation, and orientation.'
##        #return 
##
##    def _get(self):
##        u'The included (or central) angle.'
##        #return CentralAngle
##    def _set(self, CentralAngle):
##        u'The included (or central) angle.'
##    CentralAngle = property(_get, _set, doc = _set.__doc__)
##
##    def QueryCenterPoint(self, Center):
##        u'Copies the center of this arc to the input point.'
##        #return 
##
##    def _get(self):
##        u"Indicates if this elliptic arc is oriented counter-clockwise from its 'from' point to its 'to' point."
##        #return isCCW
##    def _set(self, isCCW):
##        u"Indicates if this elliptic arc is oriented counter-clockwise from its 'from' point to its 'to' point."
##    IsCounterClockwise = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def IsPoint(self):
##        u'Indicates if the arc is degenerated to a point.'
##        #return IsPoint
##
##    def _get(self, ellipseStd):
##        u'The start angle (measured from a horizontal line through the center point) defining where the arc starts.'
##        #return FromAngle
##    def _set(self, ellipseStd, FromAngle):
##        u'The start angle (measured from a horizontal line through the center point) defining where the arc starts.'
##    FromAngle = property(_get, _set, doc = _set.__doc__)
##
##    def QueryCoordsByAngle(self, ellipseStd, Center):
##        u'Returns the center point, starting angle, signed central angle, angle of rotation, ratio of the minor axis to the major axis, and axes.'
##        #return FromAngle, CentralAngle, rotationAngle, semiMajor, minorMajorRatio
##
##    def Complement(self):
##        u"Changes this ellipse into its complement; 'from' and 'to' points are unchanged."
##        #return 
##
##    def QueryCoords(self, ellipseStd, Center, from, to):
##        u'Copies the center and endpoints, angle of rotation, orientation and major/minor properties into the method parameters.'
##        #return rotationAngle, minorMajorRatio, isCCW, minor
##
##    def PutCoordsByAngle(self, ellipseStd, Center, FromAngle, CentralAngle, rotationAngle, semiMajor, minorMajorRatio):
##        u'Sets the center point, starting angle, signed central angle, angle of rotation, ratio of the minor axis to the major axis, and axes.'
##        #return 
##
##    @property
##    def IsLine(self):
##        u'Indicates if the arc is degenerated to a line.'
##        #return IsLine
##
##    def _get(self, ellipseStd):
##        u'The end angle (measured from a horizontal line through the center point) defining where the arc ends.'
##        #return ToAngle
##    def _set(self, ellipseStd, ToAngle):
##        u'The end angle (measured from a horizontal line through the center point) defining where the arc ends.'
##    ToAngle = property(_get, _set, doc = _set.__doc__)
##
##    def PutAxes(self, semiMajor, minorMajorRatio):
##        u'Sets the semi-major and semi-minor axes.'
##        #return 
##
##    def _get(self):
##        u'Indicates whether the arc is a minor arc or a major arc.'
##        #return IsMinor
##    def _set(self, IsMinor):
##        u'Indicates whether the arc is a minor arc or a major arc.'
##    IsMinor = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def IsCircular(self):
##        u'Indicates if this elliptical arc is acutally circular (major and minor axes same length).'
##        #return IsCircular
##
##    def GetAxes(self):
##        u'Gets the semi-major and semi-minor axes.'
##        #return semiMajor, semiMinor, minorMajorRatio
##
##    @property
##    def CenterPoint(self):
##        u'The center point of the arc.'
##        #return Center
##

class IPrimeMeridian(ISpatialReferenceInfo):
    _case_insensitive_ = True
    u'Provides access to members that control the properties of all prime meridians.'
    _iid_ = GUID('{F05B7B80-1DD1-11B2-BF4C-08002022F573}')
    _idlflags_ = ['oleautomation']
IPrimeMeridian._methods_ = [
    COMMETHOD(['propget', helpstring(u'The longitude value of this prime meridian.')], HRESULT, 'Longitude',
              ( ['retval', 'out'], POINTER(c_double), 'Longitude' )),
]
################################################################
## code template for IPrimeMeridian implementation
##class IPrimeMeridian_Impl(object):
##    @property
##    def Longitude(self):
##        u'The longitude value of this prime meridian.'
##        #return Longitude
##

IHVDatum._methods_ = [
]
################################################################
## code template for IHVDatum implementation
##class IHVDatum_Impl(object):

class IGeometryEnvironment(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control global geometry variables.'
    _iid_ = GUID('{E7A6280C-3E2F-11D3-9F41-00C04F6BDD7F}')
    _idlflags_ = ['oleautomation']
class IGeometryEnvironment2(IGeometryEnvironment):
    _case_insensitive_ = True
    u'Provides access to members that control additional global geometry variables.'
    _iid_ = GUID('{6DDED3B4-1F7C-11D4-9F7F-00C04F6BC8E8}')
    _idlflags_ = ['oleautomation']
class IGeometryEnvironment3(IGeometryEnvironment2):
    _case_insensitive_ = True
    u'Provides access to members that control additional global geometry variables.'
    _iid_ = GUID('{923D59BE-A083-44B3-B9A8-A01A580C4F2E}')
    _idlflags_ = ['oleautomation']
IGeometryEnvironment._methods_ = [
    COMMETHOD(['propput', helpstring(u'Polygons with fewer than this number of vertices will not be drawn/printed as a collection of trapezoids.')], HRESULT, 'NoDiceLimit',
              ( [], c_int, 'cMaxPoints' )),
    COMMETHOD(['propget', helpstring(u'Polygons with fewer than this number of vertices will not be drawn/printed as a collection of trapezoids.')], HRESULT, 'NoDiceLimit',
              ( ['retval', 'out'], POINTER(c_int), 'cMaxPoints' )),
    COMMETHOD(['propput', helpstring(u'The maximum distance by which on-the-fly deviation-based densification may differ from the original. If the value is less than or equal to zero, the system will try to pick a reasonable tolerance at the time of densification.')], HRESULT, 'AutoDensifyTolerance',
              ( [], c_double, 'tolerance' )),
    COMMETHOD(['propget', helpstring(u'The maximum distance by which on-the-fly deviation-based densification may differ from the original. If the value is less than or equal to zero, the system will try to pick a reasonable tolerance at the time of densification.')], HRESULT, 'AutoDensifyTolerance',
              ( ['retval', 'out'], POINTER(c_double), 'tolerance' )),
]
################################################################
## code template for IGeometryEnvironment implementation
##class IGeometryEnvironment_Impl(object):
##    def _get(self):
##        u'The maximum distance by which on-the-fly deviation-based densification may differ from the original. If the value is less than or equal to zero, the system will try to pick a reasonable tolerance at the time of densification.'
##        #return tolerance
##    def _set(self, tolerance):
##        u'The maximum distance by which on-the-fly deviation-based densification may differ from the original. If the value is less than or equal to zero, the system will try to pick a reasonable tolerance at the time of densification.'
##    AutoDensifyTolerance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Polygons with fewer than this number of vertices will not be drawn/printed as a collection of trapezoids.'
##        #return cMaxPoints
##    def _set(self, cMaxPoints):
##        u'Polygons with fewer than this number of vertices will not be drawn/printed as a collection of trapezoids.'
##    NoDiceLimit = property(_get, _set, doc = _set.__doc__)
##

IGeometryEnvironment2._methods_ = [
    COMMETHOD(['propput', helpstring(u'Indicates if some geometric operations are compatible with releases previous to 8.1.  When set to false, return errors for some illegal relational operations (default is true).')], HRESULT, 'Pre81Compatibility',
              ( [], VARIANT_BOOL, 'pre81Compatible' )),
    COMMETHOD(['propget', helpstring(u'Indicates if some geometric operations are compatible with releases previous to 8.1.  When set to false, return errors for some illegal relational operations (default is true).')], HRESULT, 'Pre81Compatibility',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pre81Compatible' )),
    COMMETHOD(['propput', helpstring(u'The default angular increment to be used with angular densification.')], HRESULT, 'AngularAutoDensifyTolerance',
              ( [], c_double, 'tolerance' )),
    COMMETHOD(['propget', helpstring(u'The default angular increment to be used with angular densification.')], HRESULT, 'AngularAutoDensifyTolerance',
              ( ['retval', 'out'], POINTER(c_double), 'tolerance' )),
    COMMETHOD(['propput', helpstring(u'The default deviation distance to be used for curve segment densification.')], HRESULT, 'DeviationAutoDensifyTolerance',
              ( [], c_double, 'tolerance' )),
    COMMETHOD(['propget', helpstring(u'The default deviation distance to be used for curve segment densification.')], HRESULT, 'DeviationAutoDensifyTolerance',
              ( ['retval', 'out'], POINTER(c_double), 'tolerance' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether alternative versions of polygon intersection and union should be used.')], HRESULT, 'UseAlternativeTopoOps',
              ( [], VARIANT_BOOL, 'alternativeTopoOps' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether alternative versions of polygon intersection and union should be used.')], HRESULT, 'UseAlternativeTopoOps',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'alternativeTopoOps' )),
]
################################################################
## code template for IGeometryEnvironment2 implementation
##class IGeometryEnvironment2_Impl(object):
##    def _get(self):
##        u'Indicates if some geometric operations are compatible with releases previous to 8.1.  When set to false, return errors for some illegal relational operations (default is true).'
##        #return pre81Compatible
##    def _set(self, pre81Compatible):
##        u'Indicates if some geometric operations are compatible with releases previous to 8.1.  When set to false, return errors for some illegal relational operations (default is true).'
##    Pre81Compatibility = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether alternative versions of polygon intersection and union should be used.'
##        #return alternativeTopoOps
##    def _set(self, alternativeTopoOps):
##        u'Indicates whether alternative versions of polygon intersection and union should be used.'
##    UseAlternativeTopoOps = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The default deviation distance to be used for curve segment densification.'
##        #return tolerance
##    def _set(self, tolerance):
##        u'The default deviation distance to be used for curve segment densification.'
##    DeviationAutoDensifyTolerance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The default angular increment to be used with angular densification.'
##        #return tolerance
##    def _set(self, tolerance):
##        u'The default angular increment to be used with angular densification.'
##    AngularAutoDensifyTolerance = property(_get, _set, doc = _set.__doc__)
##

IGeometryEnvironment3._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates whether large polygons are diced before being sent to GDI. True by default.')], HRESULT, 'DicingEnabled',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'DicingEnabled' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether large polygons are diced before being sent to GDI. True by default.')], HRESULT, 'DicingEnabled',
              ( [], VARIANT_BOOL, 'DicingEnabled' )),
]
################################################################
## code template for IGeometryEnvironment3 implementation
##class IGeometryEnvironment3_Impl(object):
##    def _get(self):
##        u'Indicates whether large polygons are diced before being sent to GDI. True by default.'
##        #return DicingEnabled
##    def _set(self, DicingEnabled):
##        u'Indicates whether large polygons are diced before being sent to GDI. True by default.'
##    DicingEnabled = property(_get, _set, doc = _set.__doc__)
##

class IAngularUnit(IUnit):
    _case_insensitive_ = True
    u'Provides access to members that control the properties of angular unit.'
    _iid_ = GUID('{74AD43F0-D31C-11D1-BC9B-0000F875BCCE}')
    _idlflags_ = ['oleautomation']
IUnit._methods_ = [
    COMMETHOD(['propget', helpstring(u'The conversion factor of the unit (units to meters).')], HRESULT, 'ConversionFactor',
              ( ['retval', 'out'], POINTER(c_double), 'ConversionFactor' )),
]
################################################################
## code template for IUnit implementation
##class IUnit_Impl(object):
##    @property
##    def ConversionFactor(self):
##        u'The conversion factor of the unit (units to meters).'
##        #return ConversionFactor
##

IAngularUnit._methods_ = [
    COMMETHOD(['propget', helpstring(u'The radians per angular unit.')], HRESULT, 'RadiansPerUnit',
              ( ['retval', 'out'], POINTER(c_double), 'RadiansPerUnit' )),
]
################################################################
## code template for IAngularUnit implementation
##class IAngularUnit_Impl(object):
##    @property
##    def RadiansPerUnit(self):
##        u'The radians per angular unit.'
##        #return RadiansPerUnit
##

class IGeoTransformationOperationSet(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control a set of geographic transformation operators (GT + direction).'
    _iid_ = GUID('{0049530E-E3EC-11D3-9F62-00C04F6BDD7F}')
    _idlflags_ = ['oleautomation']
class IGeographicCoordinateSystem(ISpatialReference):
    _case_insensitive_ = True
    u'Provides access to members that control access to all properties of geographic coordinate systems.'
    _iid_ = GUID('{40870D80-1DD2-11B2-BF4C-08002022F573}')
    _idlflags_ = ['oleautomation']
IGeoTransformationOperationSet._methods_ = [
    COMMETHOD([helpstring(u'Sets a default geographic transformation.')], HRESULT, 'Set',
              ( [], esriTransformDirection, 'direction' ),
              ( [], POINTER(IGeoTransformation), 'transformation' )),
    COMMETHOD([helpstring(u'Returns a default geographic transformation.')], HRESULT, 'Get',
              ( [], POINTER(IGeographicCoordinateSystem), 'pFromGCS' ),
              ( [], POINTER(IGeographicCoordinateSystem), 'pToGCS' ),
              ( ['out'], POINTER(esriTransformDirection), 'direction' ),
              ( ['out'], POINTER(POINTER(IGeoTransformation)), 'transformation' )),
    COMMETHOD([helpstring(u'Check a geographic transformation and a direction to see if it exists in the set.')], HRESULT, 'Find',
              ( [], esriTransformDirection, 'direction' ),
              ( [], POINTER(IGeoTransformation), 'GT' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'found' )),
    COMMETHOD([helpstring(u'Deletes a particular geographic transformation.')], HRESULT, 'Remove',
              ( [], esriTransformDirection, 'direction' ),
              ( [], POINTER(IGeoTransformation), 'transformation' )),
    COMMETHOD([helpstring(u'Deletes a particular geographic transformation by its from and to GeoCS.')], HRESULT, 'RemoveByKey',
              ( [], POINTER(IGeographicCoordinateSystem), 'pFromGCS' ),
              ( [], POINTER(IGeographicCoordinateSystem), 'pToGCS' )),
    COMMETHOD([helpstring(u'Retrieves the next geographic transformation in the set.')], HRESULT, 'Next',
              ( ['out'], POINTER(esriTransformDirection), 'direction' ),
              ( ['out'], POINTER(POINTER(IGeoTransformation)), 'GT' )),
    COMMETHOD([helpstring(u'Reinitializes the geographic transformation set.')], HRESULT, 'Reset'),
    COMMETHOD([helpstring(u'Deletes all geographic transformations in the set.')], HRESULT, 'RemoveAll'),
    COMMETHOD(['propget', helpstring(u'The number of geographic transformations in the set.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'gtCount' )),
]
################################################################
## code template for IGeoTransformationOperationSet implementation
##class IGeoTransformationOperationSet_Impl(object):
##    def Reset(self):
##        u'Reinitializes the geographic transformation set.'
##        #return 
##
##    @property
##    def Count(self):
##        u'The number of geographic transformations in the set.'
##        #return gtCount
##
##    def Set(self, direction, transformation):
##        u'Sets a default geographic transformation.'
##        #return 
##
##    def Get(self, pFromGCS, pToGCS):
##        u'Returns a default geographic transformation.'
##        #return direction, transformation
##
##    def Remove(self, direction, transformation):
##        u'Deletes a particular geographic transformation.'
##        #return 
##
##    def Next(self):
##        u'Retrieves the next geographic transformation in the set.'
##        #return direction, GT
##
##    def RemoveAll(self):
##        u'Deletes all geographic transformations in the set.'
##        #return 
##
##    def Find(self, direction, GT):
##        u'Check a geographic transformation and a direction to see if it exists in the set.'
##        #return found
##
##    def RemoveByKey(self, pFromGCS, pToGCS):
##        u'Deletes a particular geographic transformation by its from and to GeoCS.'
##        #return 
##

IMCollection._methods_ = [
    COMMETHOD(['propget', helpstring(u'The minimum M value.')], HRESULT, 'MMin',
              ( ['retval', 'out'], POINTER(c_double), 'outMMin' )),
    COMMETHOD(['propget', helpstring(u'The maximum M value.')], HRESULT, 'MMax',
              ( ['retval', 'out'], POINTER(c_double), 'outMMax' )),
    COMMETHOD([helpstring(u'Multiplies all the M values by a factor.')], HRESULT, 'MultiplyMs',
              ( [], c_double, 'factor' )),
    COMMETHOD([helpstring(u'Offsets all the M values by an offset value.')], HRESULT, 'OffsetMs',
              ( [], c_double, 'Offset' )),
]
################################################################
## code template for IMCollection implementation
##class IMCollection_Impl(object):
##    @property
##    def MMax(self):
##        u'The maximum M value.'
##        #return outMMax
##
##    def OffsetMs(self, Offset):
##        u'Offsets all the M values by an offset value.'
##        #return 
##
##    def MultiplyMs(self, factor):
##        u'Multiplies all the M values by a factor.'
##        #return 
##
##    @property
##    def MMin(self):
##        u'The minimum M value.'
##        #return outMMin
##


# values for enumeration 'esriMMonotonicEnum'
esriMNotMonotonic = 0
esriMAscending = 1
esriMDescending = -1
esriMMonotonicEnum = c_int # enum
IMSegmentation._methods_ = [
    COMMETHOD(['propget', helpstring(u'A value indicating whether Ms are monotonic, and if so, whether they are ascending or descending.')], HRESULT, 'MMonotonic',
              ( ['retval', 'out'], POINTER(esriMMonotonicEnum), 'MMonotonic' )),
    COMMETHOD([helpstring(u'Returns M values at the distance along the geometry. An array of one or two Ms is returned. Two Ms can be returned if the given distance is exactly at the beginning or ending of a part.')], HRESULT, 'GetMsAtDistance',
              ( [], c_double, 'distance' ),
              ( [], VARIANT_BOOL, 'asRatio' ),
              ( ['retval', 'out'], POINTER(VARIANT), 'ms' )),
    COMMETHOD([helpstring(u'Sets the M value at the given distance along the geometry; creates a point at that distance if no point exists there.')], HRESULT, 'InsertMAtDistance',
              ( [], c_double, 'M' ),
              ( [], c_double, 'distance' ),
              ( [], VARIANT_BOOL, 'asRatio' ),
              ( [], VARIANT_BOOL, 'createPart' ),
              ( ['out'], POINTER(VARIANT_BOOL), 'SplitHappened' ),
              ( ['out'], POINTER(c_int), 'newPartIndex' ),
              ( ['out'], POINTER(c_int), 'newSegmentIndex' )),
    COMMETHOD([helpstring(u"Returns an array of distances along the polyline at which is located the specified M. If the geometry's M's are monotonic along the geometry then the array will only have one element.")], HRESULT, 'GetDistancesAtM',
              ( [], VARIANT_BOOL, 'asRatio' ),
              ( [], c_double, 'M' ),
              ( ['retval', 'out'], POINTER(VARIANT), 'distances' )),
    COMMETHOD([helpstring(u'Reverses the order of the Ms along the geometry.')], HRESULT, 'ReverseMsOrder'),
    COMMETHOD([helpstring(u'Generates Ms by linear interpolation of segment distances for all vertices in the range [start+1, end-1].')], HRESULT, 'InterpolateMsBetween',
              ( [], c_int, 'fromPart' ),
              ( [], c_int, 'FromPoint' ),
              ( [], c_int, 'toPart' ),
              ( [], c_int, 'ToPoint' )),
    COMMETHOD([helpstring(u'Sets the Ms at the beginning and the end of the geometry and interpolates the M values between these values.')], HRESULT, 'SetAndInterpolateMsBetween',
              ( [], c_double, 'fromM' ),
              ( [], c_double, 'toM' )),
    COMMETHOD([helpstring(u'Sets the M values to the cumulative length from the origin of the geometry.')], HRESULT, 'SetMsAsDistance',
              ( [], VARIANT_BOOL, 'asRatio' )),
    COMMETHOD([helpstring(u'Extrapolates the Ms at one or both ends of the geometry based on the M interval between the fromIndex and the toIndex.')], HRESULT, 'ExtrapolateMs',
              ( [], esriExtrapolationEnum, 'extrapolationStyle' ),
              ( [], c_int, 'fromPart' ),
              ( [], c_int, 'FromPoint' ),
              ( [], c_int, 'toPart' ),
              ( [], c_int, 'ToPoint' )),
    COMMETHOD([helpstring(u'Redefines the non-simple Ms to be values obtained from interpolation of surrounding defined Ms, or extrapolation of Ms.')], HRESULT, 'CalculateNonSimpleMs'),
    COMMETHOD([helpstring(u'Returns a multipoint geometry corresponding to the locations along the geometry where the specified M occurs.')], HRESULT, 'GetPointsAtM',
              ( [], c_double, 'M' ),
              ( [], c_double, 'lateralOffset' ),
              ( ['retval', 'out'], POINTER(POINTER(IGeometryCollection)), 'result' )),
    COMMETHOD([helpstring(u'Returns a polyline geometry corresponding to the subcurve(s) between the fromM and the toM.')], HRESULT, 'GetSubcurveBetweenMs',
              ( [], c_double, 'fromM' ),
              ( [], c_double, 'toM' ),
              ( ['retval', 'out'], POINTER(POINTER(IGeometryCollection)), 'result' )),
]
################################################################
## code template for IMSegmentation implementation
##class IMSegmentation_Impl(object):
##    def ReverseMsOrder(self):
##        u'Reverses the order of the Ms along the geometry.'
##        #return 
##
##    def CalculateNonSimpleMs(self):
##        u'Redefines the non-simple Ms to be values obtained from interpolation of surrounding defined Ms, or extrapolation of Ms.'
##        #return 
##
##    def GetMsAtDistance(self, distance, asRatio):
##        u'Returns M values at the distance along the geometry. An array of one or two Ms is returned. Two Ms can be returned if the given distance is exactly at the beginning or ending of a part.'
##        #return ms
##
##    def ExtrapolateMs(self, extrapolationStyle, fromPart, FromPoint, toPart, ToPoint):
##        u'Extrapolates the Ms at one or both ends of the geometry based on the M interval between the fromIndex and the toIndex.'
##        #return 
##
##    def SetMsAsDistance(self, asRatio):
##        u'Sets the M values to the cumulative length from the origin of the geometry.'
##        #return 
##
##    def InterpolateMsBetween(self, fromPart, FromPoint, toPart, ToPoint):
##        u'Generates Ms by linear interpolation of segment distances for all vertices in the range [start+1, end-1].'
##        #return 
##
##    def SetAndInterpolateMsBetween(self, fromM, toM):
##        u'Sets the Ms at the beginning and the end of the geometry and interpolates the M values between these values.'
##        #return 
##
##    @property
##    def MMonotonic(self):
##        u'A value indicating whether Ms are monotonic, and if so, whether they are ascending or descending.'
##        #return MMonotonic
##
##    def GetPointsAtM(self, M, lateralOffset):
##        u'Returns a multipoint geometry corresponding to the locations along the geometry where the specified M occurs.'
##        #return result
##
##    def GetDistancesAtM(self, asRatio, M):
##        u"Returns an array of distances along the polyline at which is located the specified M. If the geometry's M's are monotonic along the geometry then the array will only have one element."
##        #return distances
##
##    def GetSubcurveBetweenMs(self, fromM, toM):
##        u'Returns a polyline geometry corresponding to the subcurve(s) between the fromM and the toM.'
##        #return result
##
##    def InsertMAtDistance(self, M, distance, asRatio, createPart):
##        u'Sets the M value at the given distance along the geometry; creates a point at that distance if no point exists there.'
##        #return SplitHappened, newPartIndex, newSegmentIndex
##

class IConstructClothoid(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Methods for constructing clothoid spirals.'
    _iid_ = GUID('{6203381C-A184-4A3E-88BE-D19235F42177}')
    _idlflags_ = ['oleautomation']
IConstructClothoid._methods_ = [
    COMMETHOD([helpstring(u'Constructs a pieccewise linear approximation to a clothoid spiral. Curvature is the reciprocal of the radius, so specify a curvature of 0 for an infinite radius. curveLength is the design length of the curve.')], HRESULT, 'ConstructClothoidByLength',
              ( [], POINTER(IPoint), 'pFrom' ),
              ( [], POINTER(IPoint), 'pFromTangent' ),
              ( [], VARIANT_BOOL, 'bCurveRight' ),
              ( [], c_double, 'fromCurvature' ),
              ( [], c_double, 'toCurvature' ),
              ( [], c_double, 'curveLength' ),
              ( [], esriCurveDensifyMethod, '__MIDL__IConstructClothoid0000' ),
              ( [], c_double, 'densifyParameter' ),
              ( ['retval', 'out'], POINTER(POINTER(IPolyline)), 'ppSpiral' )),
    COMMETHOD([helpstring(u'Constructs a pieccewise linear approximation to a clothoid spiral. Curvature is the reciprocal of the radius, so specify a curvature of 0 for an infinite radius. deflectionAngle is positive and is the change in direction (in radians) from the starting curve ta?o?\x08?&')], HRESULT, 'ConstructClothoidByAngle',
              ( [], POINTER(IPoint), 'pFrom' ),
              ( [], POINTER(IPoint), 'pFromTangent' ),
              ( [], VARIANT_BOOL, 'bCurveRight' ),
              ( [], c_double, 'fromCurvature' ),
              ( [], c_double, 'toCurvature' ),
              ( [], c_double, 'deflectionAngle' ),
              ( [], esriCurveDensifyMethod, '__MIDL__IConstructClothoid0001' ),
              ( [], c_double, 'densifyParameter' ),
              ( ['retval', 'out'], POINTER(POINTER(IPolyline)), 'ppSpiral' )),
    COMMETHOD([helpstring(u'Same as ConstructClothoidByLength but reports curve parameters for point on curve closest to split query point.')], HRESULT, 'ConstructSplitClothoidByLength',
              ( [], POINTER(IPoint), 'pSplitQuery' ),
              ( [], POINTER(IPoint), 'pFrom' ),
              ( [], POINTER(IPoint), 'pFromTangent' ),
              ( [], VARIANT_BOOL, 'bCurveRight' ),
              ( [], c_double, 'fromCurvature' ),
              ( [], c_double, 'toCurvature' ),
              ( [], c_double, 'curveLength' ),
              ( ['out'], POINTER(c_double), 'pSplitCurvature' ),
              ( ['out'], POINTER(c_double), 'pSplitLength' ),
              ( ['out'], POINTER(c_double), 'pSplitAngle' ),
              ( ['out'], POINTER(POINTER(ILine)), 'ppSplitTangent' )),
    COMMETHOD([helpstring(u'Same as ConstructClothoidByAngle but reports curve parameters for point on curve closest to split query point.')], HRESULT, 'ConstructSplitClothoidByAngle',
              ( [], POINTER(IPoint), 'pSplitQuery' ),
              ( [], POINTER(IPoint), 'pFrom' ),
              ( [], POINTER(IPoint), 'pFromTangent' ),
              ( [], VARIANT_BOOL, 'bCurveRight' ),
              ( [], c_double, 'fromCurvature' ),
              ( [], c_double, 'toCurvature' ),
              ( [], c_double, 'deflectionAngle' ),
              ( ['out'], POINTER(c_double), 'pSplitCurvature' ),
              ( ['out'], POINTER(c_double), 'pSplitLength' ),
              ( ['out'], POINTER(c_double), 'pSplitAngle' ),
              ( ['out'], POINTER(POINTER(ILine)), 'ppSplitTangent' )),
]
################################################################
## code template for IConstructClothoid implementation
##class IConstructClothoid_Impl(object):
##    def ConstructSplitClothoidByLength(self, pSplitQuery, pFrom, pFromTangent, bCurveRight, fromCurvature, toCurvature, curveLength):
##        u'Same as ConstructClothoidByLength but reports curve parameters for point on curve closest to split query point.'
##        #return pSplitCurvature, pSplitLength, pSplitAngle, ppSplitTangent
##
##    def ConstructClothoidByAngle(self, pFrom, pFromTangent, bCurveRight, fromCurvature, toCurvature, deflectionAngle, __MIDL__IConstructClothoid0001, densifyParameter):
##        u'Constructs a pieccewise linear approximation to a clothoid spiral. Curvature is the reciprocal of the radius, so specify a curvature of 0 for an infinite radius. deflectionAngle is positive and is the change in direction (in radians) from the starting curve ta?o?\x08?&'
##        #return ppSpiral
##
##    def ConstructSplitClothoidByAngle(self, pSplitQuery, pFrom, pFromTangent, bCurveRight, fromCurvature, toCurvature, deflectionAngle):
##        u'Same as ConstructClothoidByAngle but reports curve parameters for point on curve closest to split query point.'
##        #return pSplitCurvature, pSplitLength, pSplitAngle, ppSplitTangent
##
##    def ConstructClothoidByLength(self, pFrom, pFromTangent, bCurveRight, fromCurvature, toCurvature, curveLength, __MIDL__IConstructClothoid0000, densifyParameter):
##        u'Constructs a pieccewise linear approximation to a clothoid spiral. Curvature is the reciprocal of the radius, so specify a curvature of 0 for an infinite radius. curveLength is the design length of the curve.'
##        #return ppSpiral
##

ITransformation._methods_ = [
    COMMETHOD([helpstring(u'Transforms floating point measures to floating point measures (or do the inverse).')], HRESULT, 'TransformMeasuresFF',
              ( [], esriTransformDirection, 'direction' ),
              ( [], c_int, 'cMeasures' ),
              ( [], POINTER(c_double), 'inMeasures' ),
              ( [], POINTER(c_double), 'outMeasures' )),
    COMMETHOD([helpstring(u'Transforms floating point measures to integer measures (or do the inverse).')], HRESULT, 'TransformMeasuresFI',
              ( [], esriTransformDirection, 'direction' ),
              ( [], c_int, 'cMeasures' ),
              ( [], POINTER(c_double), 'inMeasures' ),
              ( [], POINTER(c_int), 'outMeasures' )),
    COMMETHOD([helpstring(u'Transforms integer measures to floating point measures (or do the inverse).')], HRESULT, 'TransformMeasuresIF',
              ( [], esriTransformDirection, 'direction' ),
              ( [], c_int, 'cMeasures' ),
              ( [], POINTER(c_int), 'inMeasures' ),
              ( [], POINTER(c_double), 'outMeasures' )),
    COMMETHOD([helpstring(u'Transforms integer measures to integer measures (or do the inverse).')], HRESULT, 'TransformMeasuresII',
              ( [], esriTransformDirection, 'direction' ),
              ( [], c_int, 'cMeasures' ),
              ( [], POINTER(c_int), 'inMeasures' ),
              ( [], POINTER(c_int), 'outMeasures' )),
    COMMETHOD([helpstring(u'Transforms floating point points to floating point points (or do the inverse).')], HRESULT, 'TransformPointsFF',
              ( [], esriTransformDirection, 'direction' ),
              ( [], c_int, 'cPoints' ),
              ( [], POINTER(c_double), 'inPoints' ),
              ( [], POINTER(c_double), 'outPoints' )),
    COMMETHOD([helpstring(u'Transforms floating point points to integer points (or do the inverse).')], HRESULT, 'TransformPointsFI',
              ( [], esriTransformDirection, 'direction' ),
              ( [], c_int, 'cPoints' ),
              ( ['in'], POINTER(c_double), 'inPoints' ),
              ( [], POINTER(c_int), 'outPoints' )),
    COMMETHOD([helpstring(u'Transforms integer points to floating point points (or do the inverse).')], HRESULT, 'TransformPointsIF',
              ( [], esriTransformDirection, 'direction' ),
              ( [], c_int, 'cPoints' ),
              ( [], POINTER(c_int), 'inPoints' ),
              ( [], POINTER(c_double), 'outPoints' )),
    COMMETHOD([helpstring(u'Transforms integer points to integer points (or do the inverse).')], HRESULT, 'TransformPointsII',
              ( [], esriTransformDirection, 'direction' ),
              ( [], c_int, 'cPoints' ),
              ( [], POINTER(c_int), 'inPoints' ),
              ( [], POINTER(c_int), 'outPoints' )),
]
################################################################
## code template for ITransformation implementation
##class ITransformation_Impl(object):
##    def TransformMeasuresIF(self, direction, cMeasures, inMeasures, outMeasures):
##        u'Transforms integer measures to floating point measures (or do the inverse).'
##        #return 
##
##    def TransformMeasuresFI(self, direction, cMeasures, inMeasures, outMeasures):
##        u'Transforms floating point measures to integer measures (or do the inverse).'
##        #return 
##
##    def TransformPointsII(self, direction, cPoints, inPoints, outPoints):
##        u'Transforms integer points to integer points (or do the inverse).'
##        #return 
##
##    def TransformPointsIF(self, direction, cPoints, inPoints, outPoints):
##        u'Transforms integer points to floating point points (or do the inverse).'
##        #return 
##
##    def TransformMeasuresFF(self, direction, cMeasures, inMeasures, outMeasures):
##        u'Transforms floating point measures to floating point measures (or do the inverse).'
##        #return 
##
##    def TransformMeasuresII(self, direction, cMeasures, inMeasures, outMeasures):
##        u'Transforms integer measures to integer measures (or do the inverse).'
##        #return 
##
##    def TransformPointsFI(self, direction, cPoints, inPoints, outPoints):
##        u'Transforms floating point points to integer points (or do the inverse).'
##        #return 
##
##    def TransformPointsFF(self, direction, cPoints, inPoints, outPoints):
##        u'Transforms floating point points to floating point points (or do the inverse).'
##        #return 
##

class IEnumCurve(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that allow efficient construction of sequential subcurves along a polyline or polygon.'
    _iid_ = GUID('{A478C6A8-DDAD-11D2-9F27-00C04F6BC8E8}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'esriCurveIteratorEnum'
esriCurveIteratorNoStop = 0
esriCurveIteratorStopAtPartFrom = 1
esriCurveIteratorStopAtPartTo = 2
esriCurveIteratorStopAtPartEndPoints = 3
esriCurveIteratorStopAtCurveEnd = 4
esriCurveIteratorEnum = c_int # enum
IEnumCurve._methods_ = [
    COMMETHOD([helpstring(u'Returns a copy of this enumerator positioned at the same segment.')], HRESULT, 'Clone',
              ( ['retval', 'out'], POINTER(POINTER(IEnumCurve)), 'outEnumerator' )),
    COMMETHOD([helpstring(u'Resets the iterator to the start of the curve.')], HRESULT, 'Reset'),
    COMMETHOD([helpstring(u'Moves iterator to a specified distance along the curve.')], HRESULT, 'Next',
              ( [], c_double, 'distance' )),
    COMMETHOD(['propget', helpstring(u'The segment covering the current distance of this curve iterator.')], HRESULT, 'Segment',
              ( ['retval', 'out'], POINTER(POINTER(ISegment)), 'Segment' )),
    COMMETHOD(['propget', helpstring(u'The distance within the current segment of the current distance of this curve iterator.')], HRESULT, 'SegmentDistance',
              ( ['retval', 'out'], POINTER(c_double), 'SegmentDistance' )),
    COMMETHOD(['propget', helpstring(u'The current distance from the start of the curve.')], HRESULT, 'CurveDistance',
              ( ['retval', 'out'], POINTER(c_double), 'CurveDistance' )),
    COMMETHOD(['propget', helpstring(u'The current part index.')], HRESULT, 'PartIndex',
              ( ['retval', 'out'], POINTER(c_int), 'PartIndex' )),
    COMMETHOD(['propget', helpstring(u'The current segment index within the current part.')], HRESULT, 'SegmentIndex',
              ( ['retval', 'out'], POINTER(c_int), 'SegmentIndex' )),
    COMMETHOD(['propget', helpstring(u'The reason for the current position of the distance iterator.')], HRESULT, 'StopReason',
              ( ['retval', 'out'], POINTER(esriCurveIteratorEnum), 'StopReason' )),
    COMMETHOD(['propput', helpstring(u'Stop options for the distance iterator.')], HRESULT, 'StopOptions',
              ( [], esriCurveIteratorEnum, 'StopOptions' )),
    COMMETHOD(['propget', helpstring(u'Stop options for the distance iterator.')], HRESULT, 'StopOptions',
              ( ['retval', 'out'], POINTER(esriCurveIteratorEnum), 'StopOptions' )),
    COMMETHOD([helpstring(u'Extracts a portion of this curve into a new curve.')], HRESULT, 'GetSubcurve',
              ( [], c_double, 'fromDistance' ),
              ( [], c_double, 'toDistance' ),
              ( [], VARIANT_BOOL, 'asRatio' ),
              ( ['retval', 'out'], POINTER(POINTER(ICurve)), 'subcurve' )),
]
################################################################
## code template for IEnumCurve implementation
##class IEnumCurve_Impl(object):
##    def Reset(self):
##        u'Resets the iterator to the start of the curve.'
##        #return 
##
##    @property
##    def SegmentIndex(self):
##        u'The current segment index within the current part.'
##        #return SegmentIndex
##
##    def Clone(self):
##        u'Returns a copy of this enumerator positioned at the same segment.'
##        #return outEnumerator
##
##    def Next(self, distance):
##        u'Moves iterator to a specified distance along the curve.'
##        #return 
##
##    @property
##    def PartIndex(self):
##        u'The current part index.'
##        #return PartIndex
##
##    @property
##    def CurveDistance(self):
##        u'The current distance from the start of the curve.'
##        #return CurveDistance
##
##    @property
##    def SegmentDistance(self):
##        u'The distance within the current segment of the current distance of this curve iterator.'
##        #return SegmentDistance
##
##    @property
##    def StopReason(self):
##        u'The reason for the current position of the distance iterator.'
##        #return StopReason
##
##    def _get(self):
##        u'Stop options for the distance iterator.'
##        #return StopOptions
##    def _set(self, StopOptions):
##        u'Stop options for the distance iterator.'
##    StopOptions = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Segment(self):
##        u'The segment covering the current distance of this curve iterator.'
##        #return Segment
##
##    def GetSubcurve(self, fromDistance, toDistance, asRatio):
##        u'Extracts a portion of this curve into a new curve.'
##        #return subcurve
##

class ISegmentM(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that allow simple manipulations of Ms at the segment level.'
    _iid_ = GUID('{48CF4C91-E3D5-11D2-9F2E-00C04F6BDF0D}')
    _idlflags_ = ['oleautomation']
ISegmentM._methods_ = [
    COMMETHOD([helpstring(u"Get the Ms on the segment's endpoints.")], HRESULT, 'GetMs',
              ( ['out'], POINTER(c_double), 'fromM' ),
              ( ['out'], POINTER(c_double), 'toM' )),
    COMMETHOD([helpstring(u"Set the Ms on the segment's endpoints.")], HRESULT, 'SetMs',
              ( [], c_double, 'fromM' ),
              ( [], c_double, 'toM' )),
]
################################################################
## code template for ISegmentM implementation
##class ISegmentM_Impl(object):
##    def SetMs(self, fromM, toM):
##        u"Set the Ms on the segment's endpoints."
##        #return 
##
##    def GetMs(self):
##        u"Get the Ms on the segment's endpoints."
##        #return fromM, toM
##

class IConstructCurve4(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Constructs an offset curve using a different algorithm.'
    _iid_ = GUID('{448A9468-D7FB-4446-8914-771160C24B68}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'esriConstructOffsetEnum'
esriConstructOffsetSimple = 1
esriConstructOffsetMitered = 2
esriConstructOffsetBevelled = 4
esriConstructOffsetRounded = 8
esriConstructOffsetEnum = c_int # enum

# values for enumeration 'esriConstructOffsetSimplifyEnum'
esriConstructOffsetNoSimplify = 0
esriConstructOffsetFastSimplify = 1
esriConstructOffsetAccurateSimplify = 2
esriConstructOffsetSimplifyEnum = c_int # enum
IConstructCurve4._methods_ = [
    COMMETHOD([], HRESULT, 'ConstructOffset',
              ( [], POINTER(IPolycurve), 'pSrcCurve' ),
              ( [], c_double, 'Offset' ),
              ( [], c_double, 'offsetTol' ),
              ( [], esriConstructOffsetEnum, 'offsetHow' ),
              ( [], esriConstructOffsetSimplifyEnum, '__MIDL__IConstructCurve40000' ),
              ( [], c_double, 'bevelRatio' )),
]
################################################################
## code template for IConstructCurve4 implementation
##class IConstructCurve4_Impl(object):
##    def ConstructOffset(self, pSrcCurve, Offset, offsetTol, offsetHow, __MIDL__IConstructCurve40000, bevelRatio):
##        '-no docstring-'
##        #return 
##

ILine._methods_ = [
    COMMETHOD([helpstring(u"Sets this line's endpoints to be 'from' and 'to'.")], HRESULT, 'PutCoords',
              ( [], POINTER(IPoint), 'from' ),
              ( [], POINTER(IPoint), 'to' )),
    COMMETHOD([helpstring(u"Copies the endpoints of this line to 'from' and 'to'.")], HRESULT, 'QueryCoords',
              ( [], POINTER(IPoint), 'from' ),
              ( [], POINTER(IPoint), 'to' )),
    COMMETHOD(['propget', helpstring(u'The angle between this line and the positive x-axis.')], HRESULT, 'Angle',
              ( ['retval', 'out'], POINTER(c_double), 'outAngle' )),
]
################################################################
## code template for ILine implementation
##class ILine_Impl(object):
##    def PutCoords(self, from, to):
##        u"Sets this line's endpoints to be 'from' and 'to'."
##        #return 
##
##    @property
##    def Angle(self):
##        u'The angle between this line and the positive x-axis.'
##        #return outAngle
##
##    def QueryCoords(self, from, to):
##        u"Copies the endpoints of this line to 'from' and 'to'."
##        #return 
##

class _esriSegmentInfo(Structure):
    pass
_esriSegmentInfo._fields_ = [
    ('iPart', c_int),
    ('iRelSegment', c_int),
    ('iAbsSegment', c_int),
    ('bLastInPart', VARIANT_BOOL),
    ('pSegment', POINTER(ISegment)),
]
assert sizeof(_esriSegmentInfo) == 20, sizeof(_esriSegmentInfo)
assert alignment(_esriSegmentInfo) == 4, alignment(_esriSegmentInfo)
IPointIDAware._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates whether or not the geometry is aware of and capable of handling PointIDs.')], HRESULT, 'PointIDAware',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'idAware' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether or not the geometry is aware of and capable of handling PointIDs.')], HRESULT, 'PointIDAware',
              ( [], VARIANT_BOOL, 'idAware' )),
    COMMETHOD(['propget', helpstring(u'Indicates if all PointID values for this geometry are well-defined. Only works if geometry is aware of PointIDs.')], HRESULT, 'PointIDSimple',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'idSimple' )),
    COMMETHOD([helpstring(u'Unsets all PointID values without changing awareness. Only works if geometry is aware of PointIDs.')], HRESULT, 'DropPointIDs'),
]
################################################################
## code template for IPointIDAware implementation
##class IPointIDAware_Impl(object):
##    def DropPointIDs(self):
##        u'Unsets all PointID values without changing awareness. Only works if geometry is aware of PointIDs.'
##        #return 
##
##    def _get(self):
##        u'Indicates whether or not the geometry is aware of and capable of handling PointIDs.'
##        #return idAware
##    def _set(self, idAware):
##        u'Indicates whether or not the geometry is aware of and capable of handling PointIDs.'
##    PointIDAware = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def PointIDSimple(self):
##        u'Indicates if all PointID values for this geometry are well-defined. Only works if geometry is aware of PointIDs.'
##        #return idSimple
##

IPolycurve4._methods_ = [
    COMMETHOD([helpstring(u"Densifies and reshapes existing segments so that the output segments follow the shortest ground path connecting input vertices. maxSegmentLength is in the units of the axis of the underlying spheroid of this polyline's gcs (usually meters).")], HRESULT, 'GeodesicDensify',
              ( [], c_double, 'maxSegmentLength' )),
]
################################################################
## code template for IPolycurve4 implementation
##class IPolycurve4_Impl(object):
##    def GeodesicDensify(self, maxSegmentLength):
##        u"Densifies and reshapes existing segments so that the output segments follow the shortest ground path connecting input vertices. maxSegmentLength is in the units of the axis of the underlying spheroid of this polyline's gcs (usually meters)."
##        #return 
##

IPolycurveGeodetic._methods_ = [
    COMMETHOD(['propget', helpstring(u'Returns length of this polycurve calculated using various types of geodetic methods.')], HRESULT, 'LengthGeodetic',
              ( [], esriGeodeticType, 'geodeticLineType' ),
              ( [], POINTER(ILinearUnit), 'pLU' ),
              ( ['retval', 'out'], POINTER(c_double), 'pLength' )),
    COMMETHOD([helpstring(u"Constructs different types of geodetic curves. The 'by length' and 'by deviation' densification methods are supported.")], HRESULT, 'DensifyGeodetic',
              ( [], esriGeodeticType, 'geodeticLineType' ),
              ( [], POINTER(ILinearUnit), 'pLU' ),
              ( [], esriCurveDensifyMethod, 'densifyMethod' ),
              ( [], c_double, 'densifyParameter' )),
]
################################################################
## code template for IPolycurveGeodetic implementation
##class IPolycurveGeodetic_Impl(object):
##    @property
##    def LengthGeodetic(self, geodeticLineType, pLU):
##        u'Returns length of this polycurve calculated using various types of geodetic methods.'
##        #return pLength
##
##    def DensifyGeodetic(self, geodeticLineType, pLU, densifyMethod, densifyParameter):
##        u"Constructs different types of geodetic curves. The 'by length' and 'by deviation' densification methods are supported."
##        #return 
##

IAffineTransformation3D._methods_ = [
    COMMETHOD(['restricted', helpstring(u'Defines the best 3D affine transformation between two sets of points. Can be used to register paper maps on a digitizer.')], HRESULT, 'DefineFromControlPointsEx',
              ( [], c_int, 'numPoints' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPointZ), 'fromPoints' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPointZ), 'toPoints' )),
    COMMETHOD([helpstring(u'Defines the best 3D affine transformation between two sets of points. Can be used to register paper maps on a digitizer.')], HRESULT, 'DefineFromControlPoints',
              ( [], c_int, 'numPoints' ),
              ( ['in'], POINTER(POINTER(IPoint)), 'fromPoints' ),
              ( ['in'], POINTER(POINTER(IPoint)), 'toPoints' )),
    COMMETHOD([helpstring(u"RMS (Root Mean Square) error expressed relative to the 'from' and 'to' points defining the transformation. These error terms are valid after using DefineFromControlPoints/Ex to define the transformation.")], HRESULT, 'GetRMSError',
              ( ['out'], POINTER(c_double), 'fromError' ),
              ( ['out'], POINTER(c_double), 'toError' )),
    COMMETHOD([helpstring(u"Returns the errors involved in moving control point i from the 'from' to 'to' system. These error terms are valid after using DefineFromControlPoints/Ex to define the transformation.")], HRESULT, 'GetControlPointError',
              ( [], c_int, 'i' ),
              ( ['out'], POINTER(c_double), 'fromError' ),
              ( ['out'], POINTER(c_double), 'toError' )),
]
################################################################
## code template for IAffineTransformation3D implementation
##class IAffineTransformation3D_Impl(object):
##    def GetControlPointError(self, i):
##        u"Returns the errors involved in moving control point i from the 'from' to 'to' system. These error terms are valid after using DefineFromControlPoints/Ex to define the transformation."
##        #return fromError, toError
##
##    def DefineFromControlPoints(self, numPoints, fromPoints, toPoints):
##        u'Defines the best 3D affine transformation between two sets of points. Can be used to register paper maps on a digitizer.'
##        #return 
##
##    def GetRMSError(self):
##        u"RMS (Root Mean Square) error expressed relative to the 'from' and 'to' points defining the transformation. These error terms are valid after using DefineFromControlPoints/Ex to define the transformation."
##        #return fromError, toError
##
##    def DefineFromControlPointsEx(self, numPoints, fromPoints, toPoints):
##        u'Defines the best 3D affine transformation between two sets of points. Can be used to register paper maps on a digitizer.'
##        #return 
##

class Vector3D(CoClass):
    u'A 3D vector containing dx, dy, and dz components.'
    _reg_clsid_ = GUID('{B3FA5973-ADA3-11D2-9FAE-00C04F8ECE3D}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
class IVector(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to vector properties and operations.'
    _iid_ = GUID('{40D717C9-10C2-11D4-9F59-00C04F6BDF0D}')
    _idlflags_ = ['oleautomation']
class IVector3D(IVector):
    _case_insensitive_ = True
    u'Provides access to 3D vector properties and operations.'
    _iid_ = GUID('{B3FA5971-ADA3-11D2-9FAE-00C04F8ECE3D}')
    _idlflags_ = ['oleautomation']
Vector3D._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IVector, IVector3D, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]

class IMolodenskyBadekasTransformation(IGeoTransformation):
    _case_insensitive_ = True
    u'Provides access to members that control the 3D frame transformation with rotation, translation, scaling, and XYZ center of rotation.'
    _iid_ = GUID('{62040069-0799-422F-B2A6-1AC5B63BCAA2}')
    _idlflags_ = ['oleautomation']
IGeoTransformation._methods_ = [
    COMMETHOD(['propget', helpstring(u'The name of the geographic transformation.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propput', helpstring(u'The name of the geographic transformation.')], HRESULT, 'Name',
              ( [], BSTR, 'Name' )),
    COMMETHOD([helpstring(u'Returns the from and to spatial references for the transformation.')], HRESULT, 'GetSpatialReferences',
              ( ['out'], POINTER(POINTER(ISpatialReference)), 'from' ),
              ( ['out'], POINTER(POINTER(ISpatialReference)), 'to' )),
    COMMETHOD([helpstring(u'Sets the from and to spatial references for the transformation.')], HRESULT, 'PutSpatialReferences',
              ( [], POINTER(ISpatialReference), 'from' ),
              ( [], POINTER(ISpatialReference), 'to' )),
]
################################################################
## code template for IGeoTransformation implementation
##class IGeoTransformation_Impl(object):
##    def PutSpatialReferences(self, from, to):
##        u'Sets the from and to spatial references for the transformation.'
##        #return 
##
##    def _get(self):
##        u'The name of the geographic transformation.'
##        #return Name
##    def _set(self, Name):
##        u'The name of the geographic transformation.'
##    Name = property(_get, _set, doc = _set.__doc__)
##
##    def GetSpatialReferences(self):
##        u'Returns the from and to spatial references for the transformation.'
##        #return from, to
##

IMolodenskyBadekasTransformation._methods_ = [
    COMMETHOD([helpstring(u'Sets translation, rotation, scale, and XYZ center of rotation values for the transformation.')], HRESULT, 'PutParameters',
              ( [], c_double, 'dx' ),
              ( [], c_double, 'dy' ),
              ( [], c_double, 'dz' ),
              ( [], c_double, 'rx' ),
              ( [], c_double, 'ry' ),
              ( [], c_double, 'rz' ),
              ( [], c_double, 's' ),
              ( [], c_double, 'xcr' ),
              ( [], c_double, 'ycr' ),
              ( [], c_double, 'zcr' )),
    COMMETHOD([helpstring(u'Returns translation, rotation, scale, and XYZ center of rotation values of the transformation.')], HRESULT, 'GetParameters',
              ( ['out'], POINTER(c_double), 'dx' ),
              ( ['out'], POINTER(c_double), 'dy' ),
              ( ['out'], POINTER(c_double), 'dz' ),
              ( ['out'], POINTER(c_double), 'rx' ),
              ( ['out'], POINTER(c_double), 'ry' ),
              ( ['out'], POINTER(c_double), 'rz' ),
              ( ['out'], POINTER(c_double), 's' ),
              ( ['out'], POINTER(c_double), 'xcr' ),
              ( ['out'], POINTER(c_double), 'ycr' ),
              ( ['out'], POINTER(c_double), 'zcr' )),
]
################################################################
## code template for IMolodenskyBadekasTransformation implementation
##class IMolodenskyBadekasTransformation_Impl(object):
##    def PutParameters(self, dx, dy, dz, rx, ry, rz, s, xcr, ycr, zcr):
##        u'Sets translation, rotation, scale, and XYZ center of rotation values for the transformation.'
##        #return 
##
##    def GetParameters(self):
##        u'Returns translation, rotation, scale, and XYZ center of rotation values of the transformation.'
##        #return dx, dy, dz, rx, ry, rz, s, xcr, ycr, zcr
##

class Triangles(CoClass):
    u'A collection of 3D triangles, where each consecutive triplet of vertices defines a new triangle'
    _reg_clsid_ = GUID('{5100F0A0-CF23-11D5-9FA1-00C04F6BDF0D}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
class ITriangles(IGeometry):
    _case_insensitive_ = True
    u'Indicator interface that identifies a Triangles patch.'
    _iid_ = GUID('{5100F09F-CF23-11D5-9FA1-00C04F6BDF0D}')
    _idlflags_ = ['oleautomation']
Triangles._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IPointCollection, IPointCollection4, IGeometryCollection, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, ITransform2D, ITransform3D, IMAware, IZAware, IPointIDAware, IGeometry, IGeometry2, ITriangles, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize]


# values for enumeration 'SegmentOverlapEnum'
SegmentOverlapEqual = 1
SegmentOverlapRightAtBeginning = 2
SegmentOverlapLeftAtBeginning = 3
SegmentOverlapRightInMiddle = 4
SegmentOverlapRightAtEnd = 5
SegmentOverlapStaggered = 6
SegmentOverlapMask = 15
SegmentOverlapVertical = 16
SegmentOverlapEnum = c_int # enum
class ITopologicalOperator5(ITopologicalOperator4):
    _case_insensitive_ = True
    u'Provides additional information on non-simple geometries.'
    _iid_ = GUID('{8E98AF7F-791E-419E-BA0B-60BA36B27639}')
    _idlflags_ = []
ITopologicalOperator5._methods_ = [
    COMMETHOD([helpstring(u'Constructs the intersection of this geometry and the specified envelope.')], HRESULT, 'ClipEx',
              ( [], POINTER(IEnvelope), 'clipperEnvelope' ),
              ( [], VARIANT_BOOL, 'bIncludeBoundary' )),
]
################################################################
## code template for ITopologicalOperator5 implementation
##class ITopologicalOperator5_Impl(object):
##    def ClipEx(self, clipperEnvelope, bIncludeBoundary):
##        u'Constructs the intersection of this geometry and the specified envelope.'
##        #return 
##

IPolycurve3D._methods_ = [
    COMMETHOD([helpstring(u'Converts this Polycurve into a piecewise linear approximation of itself.')], HRESULT, 'Densify3D',
              ( [], c_double, 'maxSegmentLength' ),
              ( [], c_double, 'maxDeviation' )),
    COMMETHOD([helpstring(u'Generalizes this polycurve using the Douglas-Poiker algorithm.')], HRESULT, 'Generalize3D',
              ( [], c_double, 'maxAllowableOffset' )),
    COMMETHOD([helpstring(u"Generalizes using a small tolerance based upon either the system units of the geometry's spatial reference, or the geometry's bounding box.")], HRESULT, 'Weed3D',
              ( [], c_double, 'maxAllowableOffsetFactor' )),
]
################################################################
## code template for IPolycurve3D implementation
##class IPolycurve3D_Impl(object):
##    def Densify3D(self, maxSegmentLength, maxDeviation):
##        u'Converts this Polycurve into a piecewise linear approximation of itself.'
##        #return 
##
##    def Generalize3D(self, maxAllowableOffset):
##        u'Generalizes this polycurve using the Douglas-Poiker algorithm.'
##        #return 
##
##    def Weed3D(self, maxAllowableOffsetFactor):
##        u"Generalizes using a small tolerance based upon either the system units of the geometry's spatial reference, or the geometry's bounding box."
##        #return 
##

ICompositeGeoTransformation._methods_ = [
    COMMETHOD([helpstring(u'Adds a geographic transformation to the list.')], HRESULT, 'Add',
              ( [], esriTransformDirection, 'direction' ),
              ( [], POINTER(IGeoTransformation), 'pXForm' )),
    COMMETHOD(['propget', helpstring(u'A geographic transformation from the list.')], HRESULT, 'GeoTransformation',
              ( [], c_int, 'i' ),
              ( ['retval', 'out'], POINTER(POINTER(IGeoTransformation)), 'geoXForm' )),
    COMMETHOD(['propget', helpstring(u'The direction (forward/reverse) of a geographic transformation.')], HRESULT, 'TransformationDirection',
              ( [], c_int, 'i' ),
              ( ['retval', 'out'], POINTER(esriTransformDirection), 'direction' )),
    COMMETHOD(['propget', helpstring(u'The number of geographic transformations in the list.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'geoTransformationElement' )),
    COMMETHOD([helpstring(u'Clears the list of geographic transformations from the object.')], HRESULT, 'SetEmpty'),
]
################################################################
## code template for ICompositeGeoTransformation implementation
##class ICompositeGeoTransformation_Impl(object):
##    @property
##    def Count(self):
##        u'The number of geographic transformations in the list.'
##        #return geoTransformationElement
##
##    @property
##    def GeoTransformation(self, i):
##        u'A geographic transformation from the list.'
##        #return geoXForm
##
##    def Add(self, direction, pXForm):
##        u'Adds a geographic transformation to the list.'
##        #return 
##
##    def SetEmpty(self):
##        u'Clears the list of geographic transformations from the object.'
##        #return 
##
##    @property
##    def TransformationDirection(self, i):
##        u'The direction (forward/reverse) of a geographic transformation.'
##        #return direction
##

class IProjectedCoordinateSystem(ISpatialReference):
    _case_insensitive_ = True
    u'Provides access to members that control the  properties and methods for all projected coordinate systems.'
    _iid_ = GUID('{F94E4C00-1DD1-11B2-BF4E-08002022F573}')
    _idlflags_ = []
esriSpatialReferenceImplHandle = LONG_PTR
esriPrecisionImplHandle = LONG_PTR
esriPrecisionExImplHandle = LONG_PTR
ISpatialReference._methods_ = [
    COMMETHOD(['restricted', helpstring(u'SpatialReferenceImpl.'), 'propget'], HRESULT, 'SpatialReferenceImpl',
              ( ['retval', 'out'], POINTER(esriSpatialReferenceImplHandle), 'srImpl' )),
    COMMETHOD(['restricted', helpstring(u'An opaque reference to the precision information implementation for this spatial reference.'), 'propget'], HRESULT, 'PrecisionImpl',
              ( ['retval', 'out'], POINTER(esriPrecisionImplHandle), 'PrecisionImpl' )),
    COMMETHOD(['restricted', helpstring(u'An opaque reference to the precision information (including z/m awareness) implementation for this spatial reference.'), 'propget'], HRESULT, 'PrecisionExImpl',
              ( ['retval', 'out'], POINTER(esriPrecisionExImplHandle), 'PrecisionExImpl' )),
    COMMETHOD([helpstring(u'Returns true when (x,y) precision information has been defined.')], HRESULT, 'HasXYPrecision',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'HasXYPrecision' )),
    COMMETHOD([helpstring(u'Returns true when z-value precision information has been defined.')], HRESULT, 'HasZPrecision',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'HasZPrecision' )),
    COMMETHOD([helpstring(u'Returns true when m-value precision information has been defined.')], HRESULT, 'HasMPrecision',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'HasMPrecision' )),
    COMMETHOD([helpstring(u'Returns TRUE when the precision information for the two spatial references is the same.')], HRESULT, 'IsPrecisionEqual',
              ( ['in'], POINTER(ISpatialReference), 'otherSR' ),
              ( ['out'], POINTER(VARIANT_BOOL), 'IsPrecisionEqual' )),
    COMMETHOD([helpstring(u'Set the false origin and units.')], HRESULT, 'SetFalseOriginAndUnits',
              ( [], c_double, 'falseX' ),
              ( [], c_double, 'falseY' ),
              ( [], c_double, 'xyUnits' )),
    COMMETHOD([helpstring(u'Set the Z false origin and units.')], HRESULT, 'SetZFalseOriginAndUnits',
              ( [], c_double, 'falseZ' ),
              ( [], c_double, 'zUnits' )),
    COMMETHOD([helpstring(u'Set the measure false origin and units.')], HRESULT, 'SetMFalseOriginAndUnits',
              ( [], c_double, 'falseM' ),
              ( [], c_double, 'mUnits' )),
    COMMETHOD([helpstring(u'Get the false origin and units.')], HRESULT, 'GetFalseOriginAndUnits',
              ( ['out'], POINTER(c_double), 'falseX' ),
              ( ['out'], POINTER(c_double), 'falseY' ),
              ( ['out'], POINTER(c_double), 'xyUnits' )),
    COMMETHOD([helpstring(u'Get the Z false origin and units.')], HRESULT, 'GetZFalseOriginAndUnits',
              ( ['out'], POINTER(c_double), 'falseZ' ),
              ( ['out'], POINTER(c_double), 'zUnits' )),
    COMMETHOD([helpstring(u'Get the measure false origin and units.')], HRESULT, 'GetMFalseOriginAndUnits',
              ( ['out'], POINTER(c_double), 'falseM' ),
              ( ['out'], POINTER(c_double), 'mUnits' )),
    COMMETHOD([helpstring(u'The XY domain extent.')], HRESULT, 'GetDomain',
              ( ['out'], POINTER(c_double), 'XMin' ),
              ( ['out'], POINTER(c_double), 'XMax' ),
              ( ['out'], POINTER(c_double), 'YMin' ),
              ( ['out'], POINTER(c_double), 'YMax' )),
    COMMETHOD([helpstring(u'The XY domain extent.')], HRESULT, 'SetDomain',
              ( ['in'], c_double, 'XMin' ),
              ( ['in'], c_double, 'XMax' ),
              ( ['in'], c_double, 'YMin' ),
              ( ['in'], c_double, 'YMax' )),
    COMMETHOD([helpstring(u'The Z domain extent.')], HRESULT, 'GetZDomain',
              ( ['out'], POINTER(c_double), 'outZMin' ),
              ( ['out'], POINTER(c_double), 'outZMax' )),
    COMMETHOD([helpstring(u'The Z domain extent.')], HRESULT, 'SetZDomain',
              ( ['in'], c_double, 'inZMin' ),
              ( ['in'], c_double, 'inZMax' )),
    COMMETHOD([helpstring(u'The measure domain extent.')], HRESULT, 'GetMDomain',
              ( ['out'], POINTER(c_double), 'outMMin' ),
              ( ['out'], POINTER(c_double), 'outMMax' )),
    COMMETHOD([helpstring(u'The measure domain extent.')], HRESULT, 'SetMDomain',
              ( ['in'], c_double, 'inMMin' ),
              ( ['in'], c_double, 'inMMax' )),
    COMMETHOD(['propget', helpstring(u'The unit for the Z coordinate.')], HRESULT, 'ZCoordinateUnit',
              ( ['retval', 'out'], POINTER(POINTER(ILinearUnit)), 'zunit' )),
    COMMETHOD(['propput', helpstring(u'The unit for the Z coordinate.')], HRESULT, 'ZCoordinateUnit',
              ( [], POINTER(ILinearUnit), 'zunit' )),
    COMMETHOD([helpstring(u'Notify this object that some of its parts have changed (parameter values, z unit, etc.).')], HRESULT, 'Changed'),
]
################################################################
## code template for ISpatialReference implementation
##class ISpatialReference_Impl(object):
##    def HasXYPrecision(self):
##        u'Returns true when (x,y) precision information has been defined.'
##        #return HasXYPrecision
##
##    @property
##    def PrecisionImpl(self):
##        u'An opaque reference to the precision information implementation for this spatial reference.'
##        #return PrecisionImpl
##
##    def GetZFalseOriginAndUnits(self):
##        u'Get the Z false origin and units.'
##        #return falseZ, zUnits
##
##    @property
##    def PrecisionExImpl(self):
##        u'An opaque reference to the precision information (including z/m awareness) implementation for this spatial reference.'
##        #return PrecisionExImpl
##
##    def SetMFalseOriginAndUnits(self, falseM, mUnits):
##        u'Set the measure false origin and units.'
##        #return 
##
##    def GetDomain(self):
##        u'The XY domain extent.'
##        #return XMin, XMax, YMin, YMax
##
##    def GetZDomain(self):
##        u'The Z domain extent.'
##        #return outZMin, outZMax
##
##    def SetZDomain(self, inZMin, inZMax):
##        u'The Z domain extent.'
##        #return 
##
##    def SetFalseOriginAndUnits(self, falseX, falseY, xyUnits):
##        u'Set the false origin and units.'
##        #return 
##
##    def SetDomain(self, XMin, XMax, YMin, YMax):
##        u'The XY domain extent.'
##        #return 
##
##    @property
##    def SpatialReferenceImpl(self):
##        u'SpatialReferenceImpl.'
##        #return srImpl
##
##    def SetZFalseOriginAndUnits(self, falseZ, zUnits):
##        u'Set the Z false origin and units.'
##        #return 
##
##    def HasZPrecision(self):
##        u'Returns true when z-value precision information has been defined.'
##        #return HasZPrecision
##
##    def IsPrecisionEqual(self, otherSR):
##        u'Returns TRUE when the precision information for the two spatial references is the same.'
##        #return IsPrecisionEqual
##
##    def HasMPrecision(self):
##        u'Returns true when m-value precision information has been defined.'
##        #return HasMPrecision
##
##    def GetMDomain(self):
##        u'The measure domain extent.'
##        #return outMMin, outMMax
##
##    def GetFalseOriginAndUnits(self):
##        u'Get the false origin and units.'
##        #return falseX, falseY, xyUnits
##
##    def _get(self):
##        u'The unit for the Z coordinate.'
##        #return zunit
##    def _set(self, zunit):
##        u'The unit for the Z coordinate.'
##    ZCoordinateUnit = property(_get, _set, doc = _set.__doc__)
##
##    def SetMDomain(self, inMMin, inMMax):
##        u'The measure domain extent.'
##        #return 
##
##    def Changed(self):
##        u'Notify this object that some of its parts have changed (parameter values, z unit, etc.).'
##        #return 
##
##    def GetMFalseOriginAndUnits(self):
##        u'Get the measure false origin and units.'
##        #return falseM, mUnits
##

class esriSRHorizon(Structure):
    pass
IProjectedCoordinateSystem._methods_ = [
    COMMETHOD(['propget', helpstring(u'The usage notes of a projected coordinate system.')], HRESULT, 'Usage',
              ( ['retval', 'out'], POINTER(BSTR), 'Usage' )),
    COMMETHOD(['propget', helpstring(u'The geographic coordinate system of a projected coordinate system.')], HRESULT, 'GeographicCoordinateSystem',
              ( ['retval', 'out'], POINTER(POINTER(IGeographicCoordinateSystem)), 'geographic' )),
    COMMETHOD(['propget', helpstring(u'The map projection of a projected coordinate system.')], HRESULT, 'Projection',
              ( ['retval', 'out'], POINTER(POINTER(IProjection)), 'Projection' )),
    COMMETHOD([helpstring(u'Gets the map projection parameters of a projected coordinate system.')], HRESULT, 'GetParameters',
              ( ['out'], POINTER(POINTER(IParameter)), 'parameters' )),
    COMMETHOD(['propget', helpstring(u'The linear unit of a projected coordinate system.')], HRESULT, 'CoordinateUnit',
              ( ['retval', 'out'], POINTER(POINTER(ILinearUnit)), 'Unit' )),
    COMMETHOD([helpstring(u'Projects points from geographic to planar coordinates.')], HRESULT, 'Forward',
              ( ['in'], c_int, 'Count' ),
              ( [], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPoint), 'Points' )),
    COMMETHOD([helpstring(u'Projects points from planar to geographic coordinates.')], HRESULT, 'Inverse',
              ( ['in'], c_int, 'Count' ),
              ( [], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPoint), 'Points' )),
    COMMETHOD(['propget', helpstring(u'The number of shapes that describe the limits of a ProjCS.')], HRESULT, 'HorizonCount',
              ( ['retval', 'out'], POINTER(c_int), 'HorizonCount' )),
    COMMETHOD(['propget', helpstring(u'The mathematical limits of a projected coordinate system.')], HRESULT, 'Horizon',
              ( ['in'], c_int, 'horizonIndex' ),
              ( ['retval', 'out'], POINTER(POINTER(esriSRHorizon)), 'Horizon' )),
    COMMETHOD(['propget', helpstring(u'The central meridian (Lambda0) of a projected coordinate system.')], HRESULT, 'CentralMeridian',
              ( ['in'], VARIANT_BOOL, 'inDegrees' ),
              ( ['retval', 'out'], POINTER(c_double), 'CentralMeridian' )),
    COMMETHOD(['propput', helpstring(u'The central meridian (Lambda0) of a projected coordinate system.')], HRESULT, 'CentralMeridian',
              ( ['in'], VARIANT_BOOL, 'inDegrees' ),
              ( [], c_double, 'CentralMeridian' )),
    COMMETHOD(['propget', helpstring(u'The longitude of origin (Lambda0) of a projected coordinate system.')], HRESULT, 'LongitudeOfOrigin',
              ( ['retval', 'out'], POINTER(c_double), 'LongitudeOfOrigin' )),
    COMMETHOD(['propput', helpstring(u'The longitude of origin (Lambda0) of a projected coordinate system.')], HRESULT, 'LongitudeOfOrigin',
              ( [], c_double, 'LongitudeOfOrigin' )),
    COMMETHOD(['propget', helpstring(u'The latitude of the first point (Phi 1) of a projected coordinate system.')], HRESULT, 'LatitudeOf1st',
              ( ['retval', 'out'], POINTER(c_double), 'standardLongitude1' )),
    COMMETHOD(['propput', helpstring(u'The latitude of the first point (Phi 1) of a projected coordinate system.')], HRESULT, 'LatitudeOf1st',
              ( [], c_double, 'standardLongitude1' )),
    COMMETHOD(['propget', helpstring(u'The latitude of the second point (Phi 2) of a projected coordinate system.')], HRESULT, 'LatitudeOf2nd',
              ( ['retval', 'out'], POINTER(c_double), 'LatitudeOf2nd' )),
    COMMETHOD(['propput', helpstring(u'The latitude of the second point (Phi 2) of a projected coordinate system.')], HRESULT, 'LatitudeOf2nd',
              ( [], c_double, 'LatitudeOf2nd' )),
    COMMETHOD(['propget', helpstring(u'The false easting (X0) of a projected coordinate system.')], HRESULT, 'FalseEasting',
              ( ['retval', 'out'], POINTER(c_double), 'FalseEasting' )),
    COMMETHOD(['propput', helpstring(u'The false easting (X0) of a projected coordinate system.')], HRESULT, 'FalseEasting',
              ( [], c_double, 'FalseEasting' )),
    COMMETHOD(['propget', helpstring(u'The false northing (Y0) of a projected coordinate system.')], HRESULT, 'FalseNorthing',
              ( ['retval', 'out'], POINTER(c_double), 'FalseNorthing' )),
    COMMETHOD(['propput', helpstring(u'The false northing (Y0) of a projected coordinate system.')], HRESULT, 'FalseNorthing',
              ( [], c_double, 'FalseNorthing' )),
    COMMETHOD(['propget', helpstring(u'The central parallel (Phi 0) of a projected coordinate system.')], HRESULT, 'CentralParallel',
              ( ['retval', 'out'], POINTER(c_double), 'CentralParallel' )),
    COMMETHOD(['propput', helpstring(u'The central parallel (Phi 0) of a projected coordinate system.')], HRESULT, 'CentralParallel',
              ( [], c_double, 'CentralParallel' )),
    COMMETHOD(['propget', helpstring(u'The first parallel (Phi 1) of a projected coordinate system.')], HRESULT, 'StandardParallel1',
              ( ['retval', 'out'], POINTER(c_double), 'StandardParallel1' )),
    COMMETHOD(['propput', helpstring(u'The first parallel (Phi 1) of a projected coordinate system.')], HRESULT, 'StandardParallel1',
              ( [], c_double, 'StandardParallel1' )),
    COMMETHOD(['propget', helpstring(u'The second parallel (Phi 2) of a projected coordinate system.')], HRESULT, 'StandardParallel2',
              ( ['retval', 'out'], POINTER(c_double), 'StandardParallel2' )),
    COMMETHOD(['propput', helpstring(u'The second parallel (Phi 2) of a projected coordinate system.')], HRESULT, 'StandardParallel2',
              ( [], c_double, 'StandardParallel2' )),
    COMMETHOD(['propget', helpstring(u'The longitude of the first point (Lambda 1) of a projected coordinate system.')], HRESULT, 'LongitudeOf1st',
              ( ['retval', 'out'], POINTER(c_double), 'LongitudeOf1st' )),
    COMMETHOD(['propput', helpstring(u'The longitude of the first point (Lambda 1) of a projected coordinate system.')], HRESULT, 'LongitudeOf1st',
              ( [], c_double, 'LongitudeOf1st' )),
    COMMETHOD(['propget', helpstring(u'The longitude of the second point (Lambda 2) of a projected coordinate system.')], HRESULT, 'LongitudeOf2nd',
              ( ['retval', 'out'], POINTER(c_double), 'LongitudeOf2nd' )),
    COMMETHOD(['propput', helpstring(u'The longitude of the second point (Lambda 2) of a projected coordinate system.')], HRESULT, 'LongitudeOf2nd',
              ( [], c_double, 'LongitudeOf2nd' )),
    COMMETHOD(['propget', helpstring(u'The scale factor (K0) of a projected coordinate system.')], HRESULT, 'ScaleFactor',
              ( ['retval', 'out'], POINTER(c_double), 'ScaleFactor' )),
    COMMETHOD(['propput', helpstring(u'The scale factor (K0) of a projected coordinate system.')], HRESULT, 'ScaleFactor',
              ( [], c_double, 'ScaleFactor' )),
    COMMETHOD(['propget', helpstring(u'The azimuth of a projected coordinate system.')], HRESULT, 'Azimuth',
              ( ['retval', 'out'], POINTER(c_double), 'Azimuth' )),
    COMMETHOD(['propput', helpstring(u'The azimuth of a projected coordinate system.')], HRESULT, 'Azimuth',
              ( [], c_double, 'Azimuth' )),
]
################################################################
## code template for IProjectedCoordinateSystem implementation
##class IProjectedCoordinateSystem_Impl(object):
##    def _get(self):
##        u'The second parallel (Phi 2) of a projected coordinate system.'
##        #return StandardParallel2
##    def _set(self, StandardParallel2):
##        u'The second parallel (Phi 2) of a projected coordinate system.'
##    StandardParallel2 = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The first parallel (Phi 1) of a projected coordinate system.'
##        #return StandardParallel1
##    def _set(self, StandardParallel1):
##        u'The first parallel (Phi 1) of a projected coordinate system.'
##    StandardParallel1 = property(_get, _set, doc = _set.__doc__)
##
##    def Inverse(self, Count, Points):
##        u'Projects points from planar to geographic coordinates.'
##        #return 
##
##    def _get(self):
##        u'The longitude of the first point (Lambda 1) of a projected coordinate system.'
##        #return LongitudeOf1st
##    def _set(self, LongitudeOf1st):
##        u'The longitude of the first point (Lambda 1) of a projected coordinate system.'
##    LongitudeOf1st = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def CoordinateUnit(self):
##        u'The linear unit of a projected coordinate system.'
##        #return Unit
##
##    @property
##    def Usage(self):
##        u'The usage notes of a projected coordinate system.'
##        #return Usage
##
##    def Forward(self, Count, Points):
##        u'Projects points from geographic to planar coordinates.'
##        #return 
##
##    @property
##    def HorizonCount(self):
##        u'The number of shapes that describe the limits of a ProjCS.'
##        #return HorizonCount
##
##    def _get(self):
##        u'The central parallel (Phi 0) of a projected coordinate system.'
##        #return CentralParallel
##    def _set(self, CentralParallel):
##        u'The central parallel (Phi 0) of a projected coordinate system.'
##    CentralParallel = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def GeographicCoordinateSystem(self):
##        u'The geographic coordinate system of a projected coordinate system.'
##        #return geographic
##
##    def _get(self):
##        u'The false easting (X0) of a projected coordinate system.'
##        #return FalseEasting
##    def _set(self, FalseEasting):
##        u'The false easting (X0) of a projected coordinate system.'
##    FalseEasting = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The longitude of the second point (Lambda 2) of a projected coordinate system.'
##        #return LongitudeOf2nd
##    def _set(self, LongitudeOf2nd):
##        u'The longitude of the second point (Lambda 2) of a projected coordinate system.'
##    LongitudeOf2nd = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The latitude of the second point (Phi 2) of a projected coordinate system.'
##        #return LatitudeOf2nd
##    def _set(self, LatitudeOf2nd):
##        u'The latitude of the second point (Phi 2) of a projected coordinate system.'
##    LatitudeOf2nd = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The latitude of the first point (Phi 1) of a projected coordinate system.'
##        #return standardLongitude1
##    def _set(self, standardLongitude1):
##        u'The latitude of the first point (Phi 1) of a projected coordinate system.'
##    LatitudeOf1st = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Horizon(self, horizonIndex):
##        u'The mathematical limits of a projected coordinate system.'
##        #return Horizon
##
##    def _get(self):
##        u'The azimuth of a projected coordinate system.'
##        #return Azimuth
##    def _set(self, Azimuth):
##        u'The azimuth of a projected coordinate system.'
##    Azimuth = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Projection(self):
##        u'The map projection of a projected coordinate system.'
##        #return Projection
##
##    def _get(self):
##        u'The false northing (Y0) of a projected coordinate system.'
##        #return FalseNorthing
##    def _set(self, FalseNorthing):
##        u'The false northing (Y0) of a projected coordinate system.'
##    FalseNorthing = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, inDegrees):
##        u'The central meridian (Lambda0) of a projected coordinate system.'
##        #return CentralMeridian
##    def _set(self, inDegrees, CentralMeridian):
##        u'The central meridian (Lambda0) of a projected coordinate system.'
##    CentralMeridian = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The scale factor (K0) of a projected coordinate system.'
##        #return ScaleFactor
##    def _set(self, ScaleFactor):
##        u'The scale factor (K0) of a projected coordinate system.'
##    ScaleFactor = property(_get, _set, doc = _set.__doc__)
##
##    def GetParameters(self):
##        u'Gets the map projection parameters of a projected coordinate system.'
##        #return parameters
##
##    def _get(self):
##        u'The longitude of origin (Lambda0) of a projected coordinate system.'
##        #return LongitudeOfOrigin
##    def _set(self, LongitudeOfOrigin):
##        u'The longitude of origin (Lambda0) of a projected coordinate system.'
##    LongitudeOfOrigin = property(_get, _set, doc = _set.__doc__)
##

IConversionMGRS._methods_ = [
    COMMETHOD([helpstring(u'Creates the coordinates of a point from the MGRS/USNG description.')], HRESULT, 'PutCoordsFromMGRS',
              ( [], BSTR, 'mgrs' ),
              ( [], esriMGRSModeEnum, 'mode' )),
    COMMETHOD([helpstring(u'Returns the MGRS/USNG description of a point.')], HRESULT, 'CreateMGRS',
              ( [], c_int, 'numDigits' ),
              ( [], VARIANT_BOOL, 'round' ),
              ( [], esriMGRSModeEnum, 'mode' ),
              ( ['retval', 'out'], POINTER(BSTR), 'mgrs' )),
]
################################################################
## code template for IConversionMGRS implementation
##class IConversionMGRS_Impl(object):
##    def PutCoordsFromMGRS(self, mgrs, mode):
##        u'Creates the coordinates of a point from the MGRS/USNG description.'
##        #return 
##
##    def CreateMGRS(self, numDigits, round, mode):
##        u'Returns the MGRS/USNG description of a point.'
##        #return mgrs
##

IConversionNotation._methods_ = [
    COMMETHOD([helpstring(u'Returns the USNG description of a point.')], HRESULT, 'GetUSNGFromCoords',
              ( [], c_int, 'numDigits' ),
              ( [], VARIANT_BOOL, 'numericRounding' ),
              ( [], VARIANT_BOOL, 'addSpaces' ),
              ( ['retval', 'out'], POINTER(BSTR), 'USNGString' )),
    COMMETHOD([helpstring(u'Returns the UTM description of a point.')], HRESULT, 'GetUTMFromCoords',
              ( [], esriUTMConversionOptionsEnum, 'utmOptions' ),
              ( ['retval', 'out'], POINTER(BSTR), 'UTMString' )),
    COMMETHOD([helpstring(u'Returns the GARS description of a point.')], HRESULT, 'GetGARSFromCoords',
              ( ['retval', 'out'], POINTER(BSTR), 'GARSString' )),
    COMMETHOD([helpstring(u'Returns the GeoRef description of a point.')], HRESULT, 'GetGeoRefFromCoords',
              ( [], c_int, 'numDigits' ),
              ( [], VARIANT_BOOL, 'numericRounding' ),
              ( ['retval', 'out'], POINTER(BSTR), 'GeoRefString' )),
    COMMETHOD([helpstring(u'Returns the decimal degrees description of a point.')], HRESULT, 'GetDDFromCoords',
              ( [], c_int, 'precision' ),
              ( ['retval', 'out'], POINTER(BSTR), 'DDString' )),
    COMMETHOD([helpstring(u'Returns the degrees decimal minutes description of a point.')], HRESULT, 'GetDDMFromCoords',
              ( [], c_int, 'precision' ),
              ( ['retval', 'out'], POINTER(BSTR), 'DDMString' )),
    COMMETHOD([helpstring(u'Returns the degrees/minutes/seconds description of a point.')], HRESULT, 'GetDMSFromCoords',
              ( [], c_int, 'precision' ),
              ( ['retval', 'out'], POINTER(BSTR), 'DMSString' )),
    COMMETHOD([helpstring(u'Creates the coordinates of a point from the USNG description.')], HRESULT, 'PutCoordsFromUSNG',
              ( [], BSTR, 'USNGString' )),
    COMMETHOD([helpstring(u'Creates the coordinates of a point from the UTM description.')], HRESULT, 'PutCoordsFromUTM',
              ( [], esriUTMConversionOptionsEnum, 'utmOptions' ),
              ( [], BSTR, 'UTMString' )),
    COMMETHOD([helpstring(u'Creates the coordinates of a point from the GARS description.')], HRESULT, 'PutCoordsFromGARS',
              ( [], esriGARSModeEnum, 'mode' ),
              ( [], BSTR, 'GARSString' )),
    COMMETHOD([helpstring(u'Creates the coordinates of a point from the GeoRef description.')], HRESULT, 'PutCoordsFromGeoRef',
              ( [], BSTR, 'GeoRefString' )),
    COMMETHOD([helpstring(u'Creates the coordinates of a point from the decimal degrees description.')], HRESULT, 'PutCoordsFromDD',
              ( [], BSTR, 'DDString' )),
    COMMETHOD([helpstring(u'Creates the coordinates of a point from the degrees decimal minutes description.')], HRESULT, 'PutCoordsFromDDM',
              ( [], BSTR, 'DDMString' )),
    COMMETHOD([helpstring(u'Creates the coordinates of a point from the degrees/minutes/seconds description.')], HRESULT, 'PutCoordsFromDMS',
              ( [], BSTR, 'DMSString' )),
]
################################################################
## code template for IConversionNotation implementation
##class IConversionNotation_Impl(object):
##    def GetDDFromCoords(self, precision):
##        u'Returns the decimal degrees description of a point.'
##        #return DDString
##
##    def PutCoordsFromDD(self, DDString):
##        u'Creates the coordinates of a point from the decimal degrees description.'
##        #return 
##
##    def PutCoordsFromUTM(self, utmOptions, UTMString):
##        u'Creates the coordinates of a point from the UTM description.'
##        #return 
##
##    def GetUSNGFromCoords(self, numDigits, numericRounding, addSpaces):
##        u'Returns the USNG description of a point.'
##        #return USNGString
##
##    def PutCoordsFromGeoRef(self, GeoRefString):
##        u'Creates the coordinates of a point from the GeoRef description.'
##        #return 
##
##    def GetDMSFromCoords(self, precision):
##        u'Returns the degrees/minutes/seconds description of a point.'
##        #return DMSString
##
##    def PutCoordsFromDMS(self, DMSString):
##        u'Creates the coordinates of a point from the degrees/minutes/seconds description.'
##        #return 
##
##    def PutCoordsFromGARS(self, mode, GARSString):
##        u'Creates the coordinates of a point from the GARS description.'
##        #return 
##
##    def GetUTMFromCoords(self, utmOptions):
##        u'Returns the UTM description of a point.'
##        #return UTMString
##
##    def PutCoordsFromUSNG(self, USNGString):
##        u'Creates the coordinates of a point from the USNG description.'
##        #return 
##
##    def GetGARSFromCoords(self):
##        u'Returns the GARS description of a point.'
##        #return GARSString
##
##    def GetGeoRefFromCoords(self, numDigits, numericRounding):
##        u'Returns the GeoRef description of a point.'
##        #return GeoRefString
##
##    def PutCoordsFromDDM(self, DDMString):
##        u'Creates the coordinates of a point from the degrees decimal minutes description.'
##        #return 
##
##    def GetDDMFromCoords(self, precision):
##        u'Returns the degrees decimal minutes description of a point.'
##        #return DDMString
##

class IZShift(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to a limited 3D awareness for a 2D affine transformation.'
    _iid_ = GUID('{2439619F-6516-4A91-A0B9-3CFC98D214D2}')
    _idlflags_ = ['oleautomation']
IZShift._methods_ = [
    COMMETHOD([helpstring(u'The shift in the Z direction.')], HRESULT, 'PutZShift',
              ( [], c_double, 'zOrigin' ),
              ( [], c_double, 'zOffset' )),
    COMMETHOD([helpstring(u'The shift in the Z direction.')], HRESULT, 'GetZShift',
              ( ['out'], POINTER(c_double), 'zOrigin' ),
              ( ['out'], POINTER(c_double), 'zOffset' )),
]
################################################################
## code template for IZShift implementation
##class IZShift_Impl(object):
##    def PutZShift(self, zOrigin, zOffset):
##        u'The shift in the Z direction.'
##        #return 
##
##    def GetZShift(self):
##        u'The shift in the Z direction.'
##        #return zOrigin, zOffset
##


# values for enumeration 'esriGeometryHitPartType'
esriGeometryPartNone = 0
esriGeometryPartVertex = 1
esriGeometryPartBoundary = 4
esriGeometryPartMidpoint = 8
esriGeometryPartCentroid = 32
esriGeometryPartEndpoint = 16
esriGeometryPartSurface = 64
esriGeometryHitPartType = c_int # enum
IHitTest._methods_ = [
    COMMETHOD([helpstring(u'Locates a part of a geometry closest to a query point. Any located part must be within searchRadius units from the query point.')], HRESULT, 'HitTest',
              ( [], POINTER(IPoint), 'QueryPoint' ),
              ( [], c_double, 'searchRadius' ),
              ( [], esriGeometryHitPartType, 'geometryPart' ),
              ( [], POINTER(IPoint), 'hitPoint' ),
              ( ['in', 'out'], POINTER(c_double), 'hitDistance' ),
              ( ['in', 'out'], POINTER(c_int), 'hitPartIndex' ),
              ( ['in', 'out'], POINTER(c_int), 'hitSegmentIndex' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'bRightSide' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'bHit' )),
]
################################################################
## code template for IHitTest implementation
##class IHitTest_Impl(object):
##    def HitTest(self, QueryPoint, searchRadius, geometryPart, hitPoint):
##        u'Locates a part of a geometry closest to a query point. Any located part must be within searchRadius units from the query point.'
##        #return hitDistance, hitPartIndex, hitSegmentIndex, bRightSide, bHit
##


# values for enumeration 'esriSRPoleLocation'
esriSRPole_OutsideBoundary = 0
esriSRPole_OnBoundary = 1
esriSRPole_InsideBoundary = 2
esriSRPoleLocation = c_int # enum
esriGeoTransformationImplHandle = LONG_PTR
class Library(object):
    u'Esri Geometry Object Library 10.2'
    name = u'esriGeometry'
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)

class IProjectiveTransformation2DGEN(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that define and manipulate projective transformations. IProjectiveTransformation2DGEN is generic version of IProjectiveTransformation.'
    _iid_ = GUID('{C7A467A9-0374-4F1A-9CBD-7156FE7DACB9}')
    _idlflags_ = ['oleautomation']
IProjectiveTransformation2DGEN._methods_ = [
    COMMETHOD([helpstring(u'Transforms floating point measures to floating point measures (or do the inverse).')], HRESULT, 'TransformMeasuresFF',
              ( [], esriTransformDirection, 'direction' ),
              ( ['in'], POINTER(_midlSAFEARRAY(c_double)), 'inMeasures' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'outMeasures' )),
    COMMETHOD([helpstring(u'Transforms floating point measures to integer measures (or do the inverse).')], HRESULT, 'TransformMeasuresFI',
              ( [], esriTransformDirection, 'direction' ),
              ( ['in'], POINTER(_midlSAFEARRAY(c_double)), 'inMeasures' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'outMeasures' )),
    COMMETHOD([helpstring(u'Transforms integer measures to floating point measures (or do the inverse).')], HRESULT, 'TransformMeasuresIF',
              ( [], esriTransformDirection, 'direction' ),
              ( ['in'], POINTER(_midlSAFEARRAY(c_int)), 'inMeasures' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'outMeasures' )),
    COMMETHOD([helpstring(u'Transforms integer measures to integer measures (or do the inverse).')], HRESULT, 'TransformMeasuresII',
              ( [], esriTransformDirection, 'direction' ),
              ( ['in'], POINTER(_midlSAFEARRAY(c_int)), 'inMeasures' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'outMeasures' )),
    COMMETHOD([helpstring(u'Transforms floating point points to floating point points (or do the inverse).')], HRESULT, 'TransformPointsFF',
              ( [], esriTransformDirection, 'direction' ),
              ( ['in'], POINTER(_midlSAFEARRAY(c_double)), 'inPoints' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'outPoints' )),
    COMMETHOD([helpstring(u'Transforms floating point points to integer points (or do the inverse).')], HRESULT, 'TransformPointsFI',
              ( [], esriTransformDirection, 'direction' ),
              ( ['in'], POINTER(_midlSAFEARRAY(c_double)), 'inPoints' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'outPoints' )),
    COMMETHOD([helpstring(u'Transforms integer points to floating point points (or do the inverse).')], HRESULT, 'TransformPointsIF',
              ( [], esriTransformDirection, 'direction' ),
              ( ['in'], POINTER(_midlSAFEARRAY(c_int)), 'inPoints' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'outPoints' )),
    COMMETHOD([helpstring(u'Transforms integer points to integer points (or do the inverse).')], HRESULT, 'TransformPointsII',
              ( [], esriTransformDirection, 'direction' ),
              ( ['in'], POINTER(_midlSAFEARRAY(c_int)), 'inPoints' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'outPoints' )),
    COMMETHOD(['propputref', helpstring(u'The spatial reference in which this transformation is meaningful.')], HRESULT, 'SpatialReference',
              ( [], POINTER(ISpatialReference), 'SR' )),
    COMMETHOD(['propget', helpstring(u'The spatial reference in which this transformation is meaningful.')], HRESULT, 'SpatialReference',
              ( ['retval', 'out'], POINTER(POINTER(ISpatialReference)), 'SR' )),
    COMMETHOD([helpstring(u'Resets the tranformation.')], HRESULT, 'Reset'),
    COMMETHOD([helpstring(u'Defines the best projective transformation between two sets of points. Can be used to register paper maps on a digitizer.')], HRESULT, 'DefineFromControlPoints',
              ( ['in'], POINTER(_midlSAFEARRAY(POINTER(IPoint))), 'fromPoints' ),
              ( ['in'], POINTER(_midlSAFEARRAY(POINTER(IPoint))), 'toPoints' )),
    COMMETHOD([helpstring(u"RMS (Root Mean Square) error expressed relative to the 'from' and 'to' points defining the transformation. These error terms are valid after using DefineFromControlPoints/Ex to define the transformation.")], HRESULT, 'GetRMSError',
              ( ['in', 'out'], POINTER(c_double), 'fromError' ),
              ( ['in', 'out'], POINTER(c_double), 'toError' )),
    COMMETHOD([helpstring(u"Returns the errors involved in moving control point i from the 'from' to 'to' system. These error terms are valid after using DefineFromControlPoints/Ex to define the transformation.")], HRESULT, 'GetControlPointError',
              ( [], c_int, 'i' ),
              ( ['in', 'out'], POINTER(c_double), 'fromError' ),
              ( ['in', 'out'], POINTER(c_double), 'toError' )),
    COMMETHOD([helpstring(u'Moves this transformation into another spatial reference. If the transformations contains only translations, then use the MoveOrigin property to define an equivalent translation in the new spatial reference.')], HRESULT, 'Project',
              ( [], POINTER(ISpatialReference), 'newSpatialReference' )),
    COMMETHOD([helpstring(u'Returns the eight parameters which define the two dimensional projective transformation.')], HRESULT, 'QueryTransformationParameters',
              ( [], esriTransformDirection, 'direction' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'params' )),
    COMMETHOD([helpstring(u'Sets the eight parameters which define the two dimensional projective transformation. The size of the incoming parameter array needs to be 8.')], HRESULT, 'SetTransformationParameters',
              ( [], esriTransformDirection, 'direction' ),
              ( ['in'], POINTER(_midlSAFEARRAY(c_double)), 'params' )),
]
################################################################
## code template for IProjectiveTransformation2DGEN implementation
##class IProjectiveTransformation2DGEN_Impl(object):
##    def Reset(self):
##        u'Resets the tranformation.'
##        #return 
##
##    def TransformMeasuresIF(self, direction, inMeasures):
##        u'Transforms integer measures to floating point measures (or do the inverse).'
##        #return outMeasures
##
##    def GetControlPointError(self, i):
##        u"Returns the errors involved in moving control point i from the 'from' to 'to' system. These error terms are valid after using DefineFromControlPoints/Ex to define the transformation."
##        #return fromError, toError
##
##    def TransformMeasuresFI(self, direction, inMeasures):
##        u'Transforms floating point measures to integer measures (or do the inverse).'
##        #return outMeasures
##
##    def TransformPointsII(self, direction, inPoints):
##        u'Transforms integer points to integer points (or do the inverse).'
##        #return outPoints
##
##    def TransformPointsIF(self, direction, inPoints):
##        u'Transforms integer points to floating point points (or do the inverse).'
##        #return outPoints
##
##    def GetRMSError(self):
##        u"RMS (Root Mean Square) error expressed relative to the 'from' and 'to' points defining the transformation. These error terms are valid after using DefineFromControlPoints/Ex to define the transformation."
##        #return fromError, toError
##
##    def TransformMeasuresFF(self, direction, inMeasures):
##        u'Transforms floating point measures to floating point measures (or do the inverse).'
##        #return outMeasures
##
##    def TransformMeasuresII(self, direction, inMeasures):
##        u'Transforms integer measures to integer measures (or do the inverse).'
##        #return outMeasures
##
##    @property
##    def SpatialReference(self, SR):
##        u'The spatial reference in which this transformation is meaningful.'
##        #return 
##
##    def Project(self, newSpatialReference):
##        u'Moves this transformation into another spatial reference. If the transformations contains only translations, then use the MoveOrigin property to define an equivalent translation in the new spatial reference.'
##        #return 
##
##    def SetTransformationParameters(self, direction, params):
##        u'Sets the eight parameters which define the two dimensional projective transformation. The size of the incoming parameter array needs to be 8.'
##        #return 
##
##    def QueryTransformationParameters(self, direction):
##        u'Returns the eight parameters which define the two dimensional projective transformation.'
##        #return params
##
##    def TransformPointsFI(self, direction, inPoints):
##        u'Transforms floating point points to integer points (or do the inverse).'
##        #return outPoints
##
##    def TransformPointsFF(self, direction, inPoints):
##        u'Transforms floating point points to floating point points (or do the inverse).'
##        #return outPoints
##
##    def DefineFromControlPoints(self, fromPoints, toPoints):
##        u'Defines the best projective transformation between two sets of points. Can be used to register paper maps on a digitizer.'
##        #return 
##

class ISpatialReferenceFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that create different kinds of spatial reference components.'
    _iid_ = GUID('{6CD10B60-C4F6-11D1-BC92-0000F875BCCE}')
    _idlflags_ = []
ISpatialReferenceFactory._methods_ = [
    COMMETHOD([helpstring(u'Creates a spatial reference system and defines it from the specified ESRISpatialReference buffer.')], HRESULT, 'CreateESRISpatialReference',
              ( [], BSTR, 'spatRefInfo' ),
              ( ['out'], POINTER(POINTER(ISpatialReference)), 'SpatialReference' ),
              ( ['out'], POINTER(c_int), 'cBytesRead' )),
    COMMETHOD([helpstring(u'Creates a spatial reference from a PRJ string.')], HRESULT, 'CreateESRISpatialReferenceFromPRJ',
              ( [], BSTR, 'prj' ),
              ( ['retval', 'out'], POINTER(POINTER(ISpatialReference)), 'SpatialReference' )),
    COMMETHOD([helpstring(u'Creates a spatial reference from a PRJ file.')], HRESULT, 'CreateESRISpatialReferenceFromPRJFile',
              ( [], BSTR, 'prjFile' ),
              ( ['retval', 'out'], POINTER(POINTER(ISpatialReference)), 'SpatialReference' )),
    COMMETHOD([helpstring(u'Exports a spatial reference to a PRJ file.')], HRESULT, 'ExportESRISpatialReferenceToPRJFile',
              ( [], BSTR, 'prjFile' ),
              ( [], POINTER(ISpatialReference), 'SpatialReference' )),
    COMMETHOD([helpstring(u'Creates a predefined unit of measure.')], HRESULT, 'CreateUnit',
              ( [], c_int, 'unitType' ),
              ( ['retval', 'out'], POINTER(POINTER(IUnit)), 'Unit' )),
    COMMETHOD([helpstring(u'Creates a predefined spheroid.')], HRESULT, 'CreateSpheroid',
              ( [], c_int, 'spheroidType' ),
              ( ['retval', 'out'], POINTER(POINTER(ISpheroid)), 'Spheroid' )),
    COMMETHOD([helpstring(u'Creates a predefined datum.')], HRESULT, 'CreateDatum',
              ( [], c_int, 'datumType' ),
              ( ['retval', 'out'], POINTER(POINTER(IDatum)), 'Datum' )),
    COMMETHOD([helpstring(u'Creates a predefined prime meridian.')], HRESULT, 'CreatePrimeMeridian',
              ( [], c_int, 'primeMeridianType' ),
              ( ['retval', 'out'], POINTER(POINTER(IPrimeMeridian)), 'PrimeMeridian' )),
    COMMETHOD([helpstring(u'Creates a predefined projection.')], HRESULT, 'CreateProjection',
              ( [], c_int, 'projectionType' ),
              ( ['retval', 'out'], POINTER(POINTER(IProjection)), 'Projection' )),
    COMMETHOD([helpstring(u'Creates a predefined parameter.')], HRESULT, 'CreateParameter',
              ( [], c_int, 'parameterType' ),
              ( ['retval', 'out'], POINTER(POINTER(IParameter)), 'newParameter' )),
    COMMETHOD([helpstring(u'Creates a predefined projected coordinate system.')], HRESULT, 'CreateProjectedCoordinateSystem',
              ( [], c_int, 'pcsType' ),
              ( ['retval', 'out'], POINTER(POINTER(IProjectedCoordinateSystem)), 'pcs' )),
    COMMETHOD([helpstring(u'Creates a predefined geographic coordinate system.')], HRESULT, 'CreateGeographicCoordinateSystem',
              ( [], c_int, 'gcsType' ),
              ( ['retval', 'out'], POINTER(POINTER(IGeographicCoordinateSystem)), 'gcs' )),
    COMMETHOD([helpstring(u'Creates a predefined transformation between geographic coordinate systems.')], HRESULT, 'CreateGeoTransformation',
              ( [], c_int, 'gTransformationType' ),
              ( ['retval', 'out'], POINTER(POINTER(ITransformation)), 'GeoTransformation' )),
    COMMETHOD([helpstring(u'Creates a list of predefined projections.')], HRESULT, 'CreatePredefinedProjections',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISet)), 'projections' )),
    COMMETHOD([helpstring(u'Creates a list of predefined linear units.')], HRESULT, 'CreatePredefinedLinearUnits',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISet)), 'linearUnits' )),
    COMMETHOD([helpstring(u'Creates a list of a list of predefined datums.')], HRESULT, 'CreatePredefinedDatums',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISet)), 'datums' )),
    COMMETHOD([helpstring(u'Creates a list of predefined angular units.')], HRESULT, 'CreatePredefinedAngularUnits',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISet)), 'angularUnits' )),
    COMMETHOD([helpstring(u'Creates a list of predefined prime meridians.')], HRESULT, 'CreatePredefinedPrimeMeridians',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISet)), 'primeMeridians' )),
    COMMETHOD([helpstring(u'Creates a list of predefined spheroids.')], HRESULT, 'CreatePredefinedSpheroids',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISet)), 'spheroids' )),
]
################################################################
## code template for ISpatialReferenceFactory implementation
##class ISpatialReferenceFactory_Impl(object):
##    def CreatePredefinedAngularUnits(self):
##        u'Creates a list of predefined angular units.'
##        #return angularUnits
##
##    def CreateProjectedCoordinateSystem(self, pcsType):
##        u'Creates a predefined projected coordinate system.'
##        #return pcs
##
##    def CreateESRISpatialReferenceFromPRJFile(self, prjFile):
##        u'Creates a spatial reference from a PRJ file.'
##        #return SpatialReference
##
##    def CreateUnit(self, unitType):
##        u'Creates a predefined unit of measure.'
##        #return Unit
##
##    def CreateParameter(self, parameterType):
##        u'Creates a predefined parameter.'
##        #return newParameter
##
##    def CreatePredefinedProjections(self):
##        u'Creates a list of predefined projections.'
##        #return projections
##
##    def CreateGeographicCoordinateSystem(self, gcsType):
##        u'Creates a predefined geographic coordinate system.'
##        #return gcs
##
##    def CreatePredefinedPrimeMeridians(self):
##        u'Creates a list of predefined prime meridians.'
##        #return primeMeridians
##
##    def CreateSpheroid(self, spheroidType):
##        u'Creates a predefined spheroid.'
##        #return Spheroid
##
##    def CreateESRISpatialReferenceFromPRJ(self, prj):
##        u'Creates a spatial reference from a PRJ string.'
##        #return SpatialReference
##
##    def CreateGeoTransformation(self, gTransformationType):
##        u'Creates a predefined transformation between geographic coordinate systems.'
##        #return GeoTransformation
##
##    def ExportESRISpatialReferenceToPRJFile(self, prjFile, SpatialReference):
##        u'Exports a spatial reference to a PRJ file.'
##        #return 
##
##    def CreatePrimeMeridian(self, primeMeridianType):
##        u'Creates a predefined prime meridian.'
##        #return PrimeMeridian
##
##    def CreateDatum(self, datumType):
##        u'Creates a predefined datum.'
##        #return Datum
##
##    def CreateProjection(self, projectionType):
##        u'Creates a predefined projection.'
##        #return Projection
##
##    def CreatePredefinedLinearUnits(self):
##        u'Creates a list of predefined linear units.'
##        #return linearUnits
##
##    def CreateESRISpatialReference(self, spatRefInfo):
##        u'Creates a spatial reference system and defines it from the specified ESRISpatialReference buffer.'
##        #return SpatialReference, cBytesRead
##
##    def CreatePredefinedDatums(self):
##        u'Creates a list of a list of predefined datums.'
##        #return datums
##
##    def CreatePredefinedSpheroids(self):
##        u'Creates a list of predefined spheroids.'
##        #return spheroids
##

esriSegmentInfo = _esriSegmentInfo
ITransform3D._methods_ = [
    COMMETHOD([helpstring(u'Moves the object by dx, dy and dz along the x, y, and z axes respectively.')], HRESULT, 'Move3D',
              ( [], c_double, 'dx' ),
              ( [], c_double, 'dy' ),
              ( [], c_double, 'dz' )),
    COMMETHOD([helpstring(u'Moves the object by an offset defined by a 3D vector.')], HRESULT, 'MoveVector3D',
              ( [], POINTER(IVector3D), 'v' )),
    COMMETHOD([helpstring(u'Scales the object about the specified origin point. sx, sy, and sz are the scaling factors for the x, y, and z dimensions repectively.')], HRESULT, 'Scale3D',
              ( [], POINTER(IPoint), 'Origin' ),
              ( [], c_double, 'sx' ),
              ( [], c_double, 'sy' ),
              ( [], c_double, 'sz' )),
    COMMETHOD([helpstring(u'Rotates the object about axis defined by the specified vector through an angle measured in radians.')], HRESULT, 'RotateVector3D',
              ( [], POINTER(IVector3D), 'axis' ),
              ( [], c_double, 'rotationAngle' )),
    COMMETHOD([helpstring(u'Applies an arbitrary 3D transformation.')], HRESULT, 'Transform3D',
              ( [], esriTransformDirection, 'direction' ),
              ( [], POINTER(ITransformation3D), 'transformation' )),
    COMMETHOD([helpstring(u'Generates a polygon footprint for the object in an arbitrary plane. The footprint may have multiple parts.')], HRESULT, 'ProjectToPlane',
              ( [], POINTER(IPoint), 'planarOrigin' ),
              ( [], POINTER(IVector3D), 'planarPositiveX' ),
              ( [], POINTER(IVector3D), 'planarNorm' ),
              ( ['retval', 'out'], POINTER(POINTER(IGeometry)), 'footprint' )),
]
################################################################
## code template for ITransform3D implementation
##class ITransform3D_Impl(object):
##    def Scale3D(self, Origin, sx, sy, sz):
##        u'Scales the object about the specified origin point. sx, sy, and sz are the scaling factors for the x, y, and z dimensions repectively.'
##        #return 
##
##    def MoveVector3D(self, v):
##        u'Moves the object by an offset defined by a 3D vector.'
##        #return 
##
##    def RotateVector3D(self, axis, rotationAngle):
##        u'Rotates the object about axis defined by the specified vector through an angle measured in radians.'
##        #return 
##
##    def ProjectToPlane(self, planarOrigin, planarPositiveX, planarNorm):
##        u'Generates a polygon footprint for the object in an arbitrary plane. The footprint may have multiple parts.'
##        #return footprint
##
##    def Transform3D(self, direction, transformation):
##        u'Applies an arbitrary 3D transformation.'
##        #return 
##
##    def Move3D(self, dx, dy, dz):
##        u'Moves the object by dx, dy and dz along the x, y, and z axes respectively.'
##        #return 
##

class Sphere(CoClass):
    u'A complete sphere.'
    _reg_clsid_ = GUID('{ECFB3332-9869-11D3-9F5E-00C04F6BC5F4}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
class ISphere(IGeometry):
    _case_insensitive_ = True
    u"Provides access to a sphere's properties and operations."
    _iid_ = GUID('{0CD38CB9-1C89-11D4-9F5C-00C04F6BDF0D}')
    _idlflags_ = ['oleautomation']
Sphere._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ISphere, IGeometry, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]

class IConstructUnknownCoordinateSystem(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides method to define the properties of an unknown coordinate system.'
    _iid_ = GUID('{D087590A-822C-4349-95ED-509668930118}')
    _idlflags_ = ['oleautomation']
IConstructUnknownCoordinateSystem._methods_ = [
    COMMETHOD([helpstring(u'Constructs the smallest, high precision, standard UCS that will completely contain the specified envelope.')], HRESULT, 'ConstructFromEnvelope',
              ( [], POINTER(IEnvelope), 'pEnvelope' )),
]
################################################################
## code template for IConstructUnknownCoordinateSystem implementation
##class IConstructUnknownCoordinateSystem_Impl(object):
##    def ConstructFromEnvelope(self, pEnvelope):
##        u'Constructs the smallest, high precision, standard UCS that will completely contain the specified envelope.'
##        #return 
##

class MultiPatch(CoClass):
    u'A collection of surface patches.'
    _reg_clsid_ = GUID('{F3C041C6-AE4D-11D2-9C93-00C04FB17838}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
class IConstructMultiPatch(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that can be used to construct MultiPatches.'
    _iid_ = GUID('{51CDE393-03B4-11D4-9F56-00C04F6BDF0D}')
    _idlflags_ = ['oleautomation']
class IGeneralMultiPatchInfo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Interface to get infomation of a GeneralMultiPatch.'
    _iid_ = GUID('{69656158-701D-408C-8B6A-A0B4C012C843}')
    _idlflags_ = ['oleautomation']
class IVolume(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that return properties common to MultiPatches.'
    _iid_ = GUID('{AADE8029-6549-41E8-85F5-B17B8E7D9212}')
    _idlflags_ = ['oleautomation']
MultiPatch._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGeometry, IGeometry2, IGeometry3, IGeometry4, IGeometry5, IGeometryCollection, IPointCollection, IPointCollection4, IMultiPatch, IConstructMultiPatch, ITopologicalOperator, ITopologicalOperator2, ITopologicalOperator3, IHitTest, IHitTest3D, IArea, IArea3D, IZAware, IZCollection, IMAware, IMCollection, IPointIDAware, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, ITransform2D, ITransform3D, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, IMSnap, IGeneralMultiPatchInfo, IProximityOperator, IRelationalOperator, IRelationalOperator2, IProximityOperator3D, IRelationalOperator3D, IRelationalOperator3D2, IVolume]

class ISpatialReference4(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to additional members that control a SpatialReference.'
    _iid_ = GUID('{0ED8C73A-DA12-4D3E-9E7F-5748619888CB}')
    _idlflags_ = []
ISpatialReference4._methods_ = [
    COMMETHOD(['propget', helpstring(u'Conversion factor from Z units to XY units.')], HRESULT, 'ZToXYFactor',
              ( ['retval', 'out'], POINTER(c_double), 'pZFactor' )),
]
################################################################
## code template for ISpatialReference4 implementation
##class ISpatialReference4_Impl(object):
##    @property
##    def ZToXYFactor(self):
##        u'Conversion factor from Z units to XY units.'
##        #return pZFactor
##


# values for enumeration 'esriSRProjection3Type'
esriSRProjection_Aitoff = 43043
esriSRProjection_HammerAitoff = 43044
esriSRProjection_CrasterParabolic = 43046
esriSRProjection_WinkelTripel = 43042
esriSRProjection_Times = 43048
esriSRProjection_Gnomonic = 43047
esriSRProjection_Orthographic = 43041
esriSRProjection_FlatPolarQuartic = 43045
esriSRProjection_VerticalNearSidePerspective = 43049
esriSRProjection3Type = c_int # enum

# values for enumeration 'esriSRGeoCSType'
esriSRGeoCS_Airy1830 = 4001
esriSRGeoCS_ModifiedAiry = 4002
esriSRGeoCS_ATS1977 = 4122
esriSRGeoCS_Australian = 4003
esriSRGeoCS_Bessel1841 = 4004
esriSRGeoCS_ModifiedBessel = 4005
esriSRGeoCS_BesselNamibia = 4006
esriSRGeoCS_Clarke1858 = 4007
esriSRGeoCS_Clarke1866 = 4008
esriSRGeoCS_Clarke1866Michigan = 4009
esriSRGeoCS_Clarke1880 = 4034
esriSRGeoCS_Clarke1880Arc = 4013
esriSRGeoCS_Clarke1880Benoit = 4010
esriSRGeoCS_Clarke1880IGN = 4011
esriSRGeoCS_Clarke1880RGS = 4012
esriSRGeoCS_Clarke1880SGA = 4014
esriSRGeoCS_Everest1830 = 4042
esriSRGeoCS_Everest1962 = 4044
esriSRGeoCS_Everest1967 = 4016
esriSRGeoCS_Everest1975 = 4045
esriSRGeoCS_ModifiedEverest = 4018
esriSRGeoCS_GEM10C = 4031
esriSRGeoCS_GRS1967 = 4036
esriSRGeoCS_GRS1980 = 4019
esriSRGeoCS_Helmert1906 = 4020
esriSRGeoCS_Indonesian = 4021
esriSRGeoCS_International1924 = 4022
esriSRGeoCS_International1967 = 104023
esriSRGeoCS_Krasovsky1940 = 4024
esriSRGeoCS_NWL9D = 4025
esriSRGeoCS_OSU1986F = 4032
esriSRGeoCS_OSU1991A = 4033
esriSRGeoCS_Plessis1817 = 4027
esriSRGeoCS_Authalicsphere = 4035
esriSRGeoCS_Struve1860 = 4028
esriSRGeoCS_WarOffice = 4029
esriSRGeoCS_WGS1966 = 4760
esriSRGeoCS_Fischer1960 = 37002
esriSRGeoCS_Fischer1968 = 37003
esriSRGeoCS_ModifiedFischer = 37004
esriSRGeoCS_Hough1960 = 37005
esriSRGeoCS_ModifiedEverest1969 = 37006
esriSRGeoCS_Walbeck = 37007
esriSRGeoCS_AuthalicsphereARCINFO = 37008
esriSRGeoCS_AssumedGeographic1 = 104000
esriSRGeoCS_Abidjan1987 = 4143
esriSRGeoCS_Adindan = 4201
esriSRGeoCS_Afgooye = 4205
esriSRGeoCS_Agadez = 4206
esriSRGeoCS_AGD1966 = 4202
esriSRGeoCS_AGD1984 = 4203
esriSRGeoCS_AinElAbd1970 = 4204
esriSRGeoCS_Amersfoort = 4289
esriSRGeoCS_Aratu = 4208
esriSRGeoCS_Arc1950 = 4209
esriSRGeoCS_Arc1960 = 4210
esriSRGeoCS_ATFParis = 4901
esriSRGeoCS_Barbados1938 = 4212
esriSRGeoCS_Batavia = 4211
esriSRGeoCS_BataviaJakarta = 4813
esriSRGeoCS_Beduaram = 4213
esriSRGeoCS_Beijing1954 = 4214
esriSRGeoCS_Belge1950 = 4215
esriSRGeoCS_Belge1950Brussels = 4809
esriSRGeoCS_Belge1972 = 4313
esriSRGeoCS_Bermuda1957 = 4216
esriSRGeoCS_Bern1898Bern = 4801
esriSRGeoCS_Bern1938 = 4306
esriSRGeoCS_Bogota = 4218
esriSRGeoCS_BogotaBogota = 4802
esriSRGeoCS_BukitRimpah = 4219
esriSRGeoCS_Camacupa = 4220
esriSRGeoCS_CampoInchauspe = 4221
esriSRGeoCS_Cape = 4222
esriSRGeoCS_Carthage = 4223
esriSRGeoCS_CarthageDegrees = 4223
esriSRGeoCS_CH1903 = 4149
esriSRGeoCS_CH1903Plus = 4150
esriSRGeoCS_CHTRF1995 = 4151
esriSRGeoCS_CHUA = 4224
esriSRGeoCS_Conakry1905 = 4315
esriSRGeoCS_CorregoAlegre = 4225
esriSRGeoCS_CoteDIvoire = 4226
esriSRGeoCS_Datum73 = 4274
esriSRGeoCS_DealulPiscului1933 = 4316
esriSRGeoCS_DealulPiscului1970 = 4317
esriSRGeoCS_DeirezZor = 4227
esriSRGeoCS_DHDN = 4314
esriSRGeoCS_Douala = 4228
esriSRGeoCS_EuropeanDatum1950 = 4230
esriSRGeoCS_EuropeanDatum1950ED77 = 4154
esriSRGeoCS_EuropeanDatum1987 = 4231
esriSRGeoCS_Egypt1907 = 4229
esriSRGeoCS_ETRF1989 = 104258
esriSRGeoCS_Fahud = 4232
esriSRGeoCS_Gandajika1970 = 4233
esriSRGeoCS_Garoua = 4197
esriSRGeoCS_GDA1994 = 4283
esriSRGeoCS_GGRS1987 = 4121
esriSRGeoCS_Greek = 4120
esriSRGeoCS_GreekAthens = 4815
esriSRGeoCS_GuyaneFrancaise = 4235
esriSRGeoCS_Hanoi1972 = 4147
esriSRGeoCS_Hartebeesthoek1994 = 4148
esriSRGeoCS_HeratNorth = 4255
esriSRGeoCS_HitoXVIII1963 = 4254
esriSRGeoCS_HuTzuShan = 4236
esriSRGeoCS_Hungarian1972 = 4237
esriSRGeoCS_Indian1954 = 4239
esriSRGeoCS_Indian1975 = 4240
esriSRGeoCS_Indonesian1974 = 4238
esriSRGeoCS_Israel = 4141
esriSRGeoCS_Jamaica1875 = 4241
esriSRGeoCS_Jamaica1969 = 4242
esriSRGeoCS_Kalianpur1880 = 4243
esriSRGeoCS_Kalianpur1937 = 4144
esriSRGeoCS_Kalianpur1962 = 4145
esriSRGeoCS_Kalianpur1975 = 4146
esriSRGeoCS_Kandawala = 4244
esriSRGeoCS_Kertau = 4245
esriSRGeoCS_KKJ = 4123
esriSRGeoCS_KOC = 4246
esriSRGeoCS_KUDAMS = 4319
esriSRGeoCS_LaCanoa = 4247
esriSRGeoCS_Lake = 4249
esriSRGeoCS_Leigon = 4250
esriSRGeoCS_Liberia1964 = 4251
esriSRGeoCS_Lisbon = 4207
esriSRGeoCS_LisbonLisbon = 4803
esriSRGeoCS_Locodjo1965 = 4142
esriSRGeoCS_LomaQuintana = 4288
esriSRGeoCS_Lome = 4252
esriSRGeoCS_Luzon1911 = 4253
esriSRGeoCS_Mahe1971 = 4256
esriSRGeoCS_Makassar = 4257
esriSRGeoCS_MakassarJakarta = 4804
esriSRGeoCS_Malongo1987 = 4259
esriSRGeoCS_Manoca = 4260
esriSRGeoCS_Massawa = 4262
esriSRGeoCS_Merchich = 4261
esriSRGeoCS_MerchichDegree = 104261
esriSRGeoCS_MGI = 4312
esriSRGeoCS_MGIFerro = 4805
esriSRGeoCS_Mhast = 4264
esriSRGeoCS_Minna = 4263
esriSRGeoCS_MonteMario = 4265
esriSRGeoCS_MonteMarioRome = 4806
esriSRGeoCS_MPoraloko = 4266
esriSRGeoCS_NADMichigan = 4268
esriSRGeoCS_NAD1927 = 4267
esriSRGeoCS_NAD1983 = 4269
esriSRGeoCS_NAD1983HARN = 4152
esriSRGeoCS_NAD1983CSRS98 = 4617
esriSRGeoCS_Nahrwan1967 = 4270
esriSRGeoCS_Naparima1972 = 4271
esriSRGeoCS_NorddeGuerreParis = 4902
esriSRGeoCS_NGN = 4318
esriSRGeoCS_NGO1948 = 4273
esriSRGeoCS_NGO1948Oslo = 4817
esriSRGeoCS_NordSahara1959 = 4307
esriSRGeoCS_NSWC9Z_2 = 4276
esriSRGeoCS_NTF = 4275
esriSRGeoCS_NTFParis = 4807
esriSRGeoCS_NZGD1949 = 4272
esriSRGeoCS_OSSN1980 = 4279
esriSRGeoCS_OSGB1936 = 4277
esriSRGeoCS_OSGB1970SN = 4278
esriSRGeoCS_Padang1884 = 4280
esriSRGeoCS_Padang1884Jakarta = 4808
esriSRGeoCS_Palestine1923 = 4281
esriSRGeoCS_PointeNoire = 4282
esriSRGeoCS_PSAD1956 = 4248
esriSRGeoCS_Pulkovo1942 = 4284
esriSRGeoCS_Pulkovo1995 = 4200
esriSRGeoCS_Qatar = 4285
esriSRGeoCS_Qatar1948 = 4286
esriSRGeoCS_Qornoq = 4287
esriSRGeoCS_Rassadiran = 4153
esriSRGeoCS_RT38 = 4308
esriSRGeoCS_RT38Stockholm = 4814
esriSRGeoCS_SAD1969 = 4618
esriSRGeoCS_SapperHill1943 = 4292
esriSRGeoCS_Schwarzeck = 4293
esriSRGeoCS_Segora = 4294
esriSRGeoCS_Serindung = 4295
esriSRGeoCS_Sudan = 4296
esriSRGeoCS_Tananarive1925 = 4297
esriSRGeoCS_Tananarive1925Paris = 4810
esriSRGeoCS_Timbalai1948 = 4298
esriSRGeoCS_TM65 = 4299
esriSRGeoCS_TM75 = 4300
esriSRGeoCS_Tokyo = 4301
esriSRGeoCS_Trinidad1903 = 4302
esriSRGeoCS_TrucialCoast1948 = 4303
esriSRGeoCS_Voirol1875 = 4304
esriSRGeoCS_Voirol1875Degree = 4304
esriSRGeoCS_Voirol1875Paris = 4811
esriSRGeoCS_VoirolUnifie1960 = 4305
esriSRGeoCS_VoirolUnifie1960Degree = 104305
esriSRGeoCS_VoirolUnifie1960Paris = 4812
esriSRGeoCS_WGS1972 = 4322
esriSRGeoCS_WGS1972BE = 4324
esriSRGeoCS_WGS1984 = 4326
esriSRGeoCS_Yacare = 4309
esriSRGeoCS_Yoff = 4310
esriSRGeoCS_Zanderij = 4311
esriSRGeoCS_CarthageParis = 4816
esriSRGeoCS_FD1958 = 4132
esriSRGeoCS_LKS1994 = 4669
esriSRGeoCS_Madrid1870Madrid = 4903
esriSRGeoCS_Madzansua = 4128
esriSRGeoCS_Moznet = 4130
esriSRGeoCS_Observatario = 4129
esriSRGeoCS_RT90 = 4124
esriSRGeoCS_Samboja = 4125
esriSRGeoCS_Tete = 4127
esriSRGeoCS_Estonia1992 = 4133
esriSRGeoCS_PDO1993 = 4134
esriSRGeoCS_Anguilla1957 = 4600
esriSRGeoCS_Antigua1943 = 4601
esriSRGeoCS_Dominica1945 = 4602
esriSRGeoCS_Grenada1953 = 4603
esriSRGeoCS_StKitts1955 = 4605
esriSRGeoCS_StLucia1955 = 4606
esriSRGeoCS_StVincent1945 = 4607
esriSRGeoCS_NAD1927Def1976 = 4608
esriSRGeoCS_NAD1927CGQ77 = 4609
esriSRGeoCS_StGeorgeIsland = 4138
esriSRGeoCS_StLawrenceIsland = 4136
esriSRGeoCS_StPaulIsland = 4137
esriSRGeoCS_European1979 = 4668
esriSRGeoCS_EverestBangladesh = 37202
esriSRGeoCS_EverestIndiaNepal = 37203
esriSRGeoCS_Hjorsey1955 = 4658
esriSRGeoCS_HongKong1963 = 4738
esriSRGeoCS_Oman = 37206
esriSRGeoCS_SouthAsiaSingapore = 37207
esriSRGeoCS_Ayabelle = 4713
esriSRGeoCS_Bissau = 4165
esriSRGeoCS_Dabola = 4155
esriSRGeoCS_Point58 = 4620
esriSRGeoCS_BeaconE1945 = 4709
esriSRGeoCS_TernIsland1961 = 4707
esriSRGeoCS_Astro1952 = 4711
esriSRGeoCS_BellevueIGN = 4714
esriSRGeoCS_Canton1966 = 4716
esriSRGeoCS_ChathamIsland1971 = 4672
esriSRGeoCS_DOS1968 = 37218
esriSRGeoCS_EasterIsland1967 = 4719
esriSRGeoCS_Guam1963 = 4675
esriSRGeoCS_GUX1 = 37221
esriSRGeoCS_JohnstonIsland1961 = 4725
esriSRGeoCS_Kusaie1951 = 4735
esriSRGeoCS_Midway1961 = 4727
esriSRGeoCS_OldHawaiian = 4135
esriSRGeoCS_Pitcairn1967 = 4729
esriSRGeoCS_SantoDOS1965 = 4730
esriSRGeoCS_VitiLevu1916 = 4731
esriSRGeoCS_WakeEniwetok1960 = 4732
esriSRGeoCS_WakeIsland1952 = 4733
esriSRGeoCS_Anna1_1965 = 4708
esriSRGeoCS_Gan1970 = 4684
esriSRGeoCS_ISTS073_1969 = 4724
esriSRGeoCS_KerguelenIsland1949 = 4698
esriSRGeoCS_Reunion = 4626
esriSRGeoCS_AscensionIsland1958 = 4712
esriSRGeoCS_DOS71_4 = 4710
esriSRGeoCS_CapeCanaveral = 4717
esriSRGeoCS_FortThomas1955 = 37240
esriSRGeoCS_Graciosa1948 = 37241
esriSRGeoCS_ISTS061_1968 = 4722
esriSRGeoCS_LC5_1961 = 37243
esriSRGeoCS_Montserrat1958 = 4604
esriSRGeoCS_ObservMeteor1939 = 37245
esriSRGeoCS_PicodeLasNieves = 4728
esriSRGeoCS_PortoSanto1936 = 4615
esriSRGeoCS_PuertoRico = 4139
esriSRGeoCS_SaoBraz = 37249
esriSRGeoCS_SelvagemGrande1938 = 4616
esriSRGeoCS_Tristan1968 = 4734
esriSRGeoCS_Samoa1962 = 4169
esriSRGeoCS_CampArea = 4715
esriSRGeoCS_DeceptionIsland = 4736
esriSRGeoCS_GunungSegara = 4613
esriSRGeoCS_Indian1960 = 4131
esriSRGeoCS_S_42Hungary = 37257
esriSRGeoCS_S_JTSK = 4156
esriSRGeoCS_AlaskanIslands = 37260
esriSRGeoCSType = c_int # enum
class ISegmentGraphCursor(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that define and manipulate a way of navigating over segments topologically structured within a segment graph.'
    _iid_ = GUID('{329BFBD8-0E2A-11D3-9F33-00C04F6BDD7F}')
    _idlflags_ = ['oleautomation']
ISegmentGraphCursor._methods_ = [
    COMMETHOD(['propget', helpstring(u'The current location of the SegmentGraphCursor.')], HRESULT, 'Location',
              ( ['retval', 'out'], POINTER(POINTER(IPoint)), 'currentGraphLocation' )),
    COMMETHOD([helpstring(u'Copies the current location of the SegmentGraphCursor into the specified point.')], HRESULT, 'QueryLocation',
              ( [], POINTER(IPoint), 'currentGraphLocation' )),
    COMMETHOD(['propget', helpstring(u"The current trace - a history of MoveTo/s and FinishMoveTo's within the segment graph since it was created or since the last call to Reset on this cursor.")], HRESULT, 'CurrentTrace',
              ( ['retval', 'out'], POINTER(POINTER(IPolyline)), 'CurrentTrace' )),
    COMMETHOD([helpstring(u'Moves from the current edge to an adjacent edge closest to newLocation. Returns true when that move is clear, or false if it crosses a multi-way branch (in that case, then use FinishMoveTo).')], HRESULT, 'MoveTo',
              ( [], POINTER(IPoint), 'newLocation' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'canMove' )),
    COMMETHOD([helpstring(u'Moves from the current edge to the adjacent edge closest to newLocation. Used only when MoveTo returns false.')], HRESULT, 'FinishMoveTo',
              ( [], POINTER(IPoint), 'newLocation' )),
    COMMETHOD([helpstring(u'Resets the location of the SegmentGraphCursor to a specified StartPoint.')], HRESULT, 'Reset',
              ( [], POINTER(IPoint), 'startPoint' )),
]
################################################################
## code template for ISegmentGraphCursor implementation
##class ISegmentGraphCursor_Impl(object):
##    def Reset(self, startPoint):
##        u'Resets the location of the SegmentGraphCursor to a specified StartPoint.'
##        #return 
##
##    def MoveTo(self, newLocation):
##        u'Moves from the current edge to an adjacent edge closest to newLocation. Returns true when that move is clear, or false if it crosses a multi-way branch (in that case, then use FinishMoveTo).'
##        #return canMove
##
##    @property
##    def CurrentTrace(self):
##        u"The current trace - a history of MoveTo/s and FinishMoveTo's within the segment graph since it was created or since the last call to Reset on this cursor."
##        #return CurrentTrace
##
##    @property
##    def Location(self):
##        u'The current location of the SegmentGraphCursor.'
##        #return currentGraphLocation
##
##    def QueryLocation(self, currentGraphLocation):
##        u'Copies the current location of the SegmentGraphCursor into the specified point.'
##        #return 
##
##    def FinishMoveTo(self, newLocation):
##        u'Moves from the current edge to the adjacent edge closest to newLocation. Used only when MoveTo returns false.'
##        #return 
##

ISegmentGraph._methods_ = [
    COMMETHOD([helpstring(u'Returns a SegmentGraphCursor initially located at the segment closest to the specified point.')], HRESULT, 'GetCursor',
              ( [], POINTER(IPoint), 'p' ),
              ( ['retval', 'out'], POINTER(POINTER(ISegmentGraphCursor)), 'cursor' )),
    COMMETHOD([helpstring(u'Defines a SegmentGraph from an enumeration of polylines or polygons.')], HRESULT, 'Load',
              ( [], POINTER(IEnumGeometry), 'geometries' ),
              ( [], VARIANT_BOOL, 'generateFaces' ),
              ( [], VARIANT_BOOL, 'takeOwnership' )),
    COMMETHOD([helpstring(u'Sets the SegmentGraph to the empty state.')], HRESULT, 'SetEmpty'),
    COMMETHOD(['propget', helpstring(u'The Envelope of the SegmentGraph.')], HRESULT, 'Envelope',
              ( ['retval', 'out'], POINTER(POINTER(IEnvelope)), 'Envelope' )),
]
################################################################
## code template for ISegmentGraph implementation
##class ISegmentGraph_Impl(object):
##    def Load(self, geometries, generateFaces, takeOwnership):
##        u'Defines a SegmentGraph from an enumeration of polylines or polygons.'
##        #return 
##
##    def GetCursor(self, p):
##        u'Returns a SegmentGraphCursor initially located at the segment closest to the specified point.'
##        #return cursor
##
##    @property
##    def Envelope(self):
##        u'The Envelope of the SegmentGraph.'
##        #return Envelope
##
##    def SetEmpty(self):
##        u'Sets the SegmentGraph to the empty state.'
##        #return 
##

class TriangleFan(CoClass):
    u'A continuous 3D fan of triangles, where each triangle after the first shares an edge with the preceding triangle, and all triangles share a common pivot point.'
    _reg_clsid_ = GUID('{8B555499-1D26-11D4-9F5C-00C04F6BDF0D}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
class ITriangleFan(IGeometry):
    _case_insensitive_ = True
    u'Indicator interface that identifies a triangle fan.'
    _iid_ = GUID('{A5329330-26A6-11D4-9F5E-00C04F6BDF0D}')
    _idlflags_ = ['oleautomation']
TriangleFan._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IPointCollection, IPointCollection4, IGeometryCollection, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, ITransform2D, ITransform3D, IMAware, IZAware, IPointIDAware, IGeometry, IGeometry2, ITriangleFan, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize]

esriSRHorizon._fields_ = [
    ('Inclusive', c_char),
    ('Type', esriSRHorizonType),
    ('PointCount', c_int),
    ('Points', POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPoint)),
]
assert sizeof(esriSRHorizon) == 16, sizeof(esriSRHorizon)
assert alignment(esriSRHorizon) == 4, alignment(esriSRHorizon)
class CoordinateFrameTransformation(CoClass):
    u'Creates a Coordinate Frame transformation.'
    _reg_clsid_ = GUID('{0F024431-C1F8-11D2-BD07-0000F875BCCE}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
class ICoordinateFrameTransformation(IGeoTransformation):
    _case_insensitive_ = True
    u'Provides access to members that control the 3D frame transformation with rotation, translation and scaling.'
    _iid_ = GUID('{0CDF92B2-C2A0-11D2-BD08-0000F875BCCE}')
    _idlflags_ = ['oleautomation']
class ISpatialReferenceAuthority(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the authority-related metadata for a spatial reference object.'
    _iid_ = GUID('{D2F20DAC-5CA7-4B58-BDDB-309FDD0E364A}')
    _idlflags_ = ['oleautomation']
CoordinateFrameTransformation._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ITransformationGEN, ITransformation, ICoordinateFrameTransformation, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, ISpatialReferenceAuthority]


# values for enumeration 'esriSRParameter2Type'
esriSRParameter_XScale = 100037
esriSRParameter_YScale = 100038
esriSRParameter_PseudoStandardParallel1 = 100027
esriSRParameter_XYPlaneRotation = 100039
esriSRParameter2Type = c_int # enum

# values for enumeration 'esriSRGeoTransformationType'
esriSRGeoTransformation_Amersfoort_To_WGS1984 = 1112
esriSRGeoTransformation_ETRF1989_To_WGS1984 = 108195
esriSRGeoTransformation_GDA1994_To_WGS1984 = 1150
esriSRGeoTransformation_ED1987_To_WGS1984_1 = 1146
esriSRGeoTransformation_ED1950_To_ED1987_2 = 1147
esriSRGeoTransformation_WGS1972_To_WGS1984_1 = 1237
esriSRGeoTransformation_WGS1972_To_WGS1984_2 = 1238
esriSRGeoTransformation_AGD1984_To_WGS1984_2 = 1236
esriSRGeoTransformation_Adindan_To_WGS1984_1 = 1100
esriSRGeoTransformation_Adindan_To_WGS1984_2 = 1101
esriSRGeoTransformation_Adindan_To_WGS1984_3 = 1102
esriSRGeoTransformation_Adindan_To_WGS1984_4 = 1103
esriSRGeoTransformation_Adindan_To_WGS1984_5 = 1104
esriSRGeoTransformation_Adindan_To_WGS1984_6 = 1105
esriSRGeoTransformation_Adindan_To_WGS1984_7 = 1106
esriSRGeoTransformation_Afgooye_To_WGS1984 = 1107
esriSRGeoTransformation_AGD1966_To_WGS1984 = 1108
esriSRGeoTransformation_AGD1984_To_WGS1984_1 = 1109
esriSRGeoTransformation_AinElAbd_To_WGS1984_1 = 1110
esriSRGeoTransformation_AinElAbd_To_WGS1984_2 = 1111
esriSRGeoTransformation_Arc1950_To_WGS1984_1 = 1113
esriSRGeoTransformation_Arc1950_To_WGS1984_2 = 1114
esriSRGeoTransformation_Arc1950_To_WGS1984_3 = 1115
esriSRGeoTransformation_Arc1950_To_WGS1984_4 = 1116
esriSRGeoTransformation_Arc1950_To_WGS1984_5 = 1117
esriSRGeoTransformation_Arc1950_To_WGS1984_6 = 1118
esriSRGeoTransformation_Arc1950_To_WGS1984_7 = 1119
esriSRGeoTransformation_Arc1950_To_WGS1984_8 = 1120
esriSRGeoTransformation_Arc1950_To_WGS1984_9 = 1121
esriSRGeoTransformation_Arc1960_To_WGS1984 = 1122
esriSRGeoTransformation_Batavia_To_WGS1984 = 1123
esriSRGeoTransformation_Bermuda1957_To_WGS1984 = 1124
esriSRGeoTransformation_Bogota_to_WGS1984 = 1125
esriSRGeoTransformation_BukitRimpah_To_WGS1984 = 1126
esriSRGeoTransformation_CampoInchauspe_To_WGS1984 = 1127
esriSRGeoTransformation_Cape_To_WGS1984_1 = 1128
esriSRGeoTransformation_Cape_To_WGS1984_2 = 1129
esriSRGeoTransformation_Carthage_To_WGS1984 = 1130
esriSRGeoTransformation_Chua_To_WGS1984 = 1131
esriSRGeoTransformation_CorregoAlegre_To_WGS1984 = 1132
esriSRGeoTransformation_ED1950_To_WGS1984_1 = 1133
esriSRGeoTransformation_ED1950_To_WGS1984_2 = 1134
esriSRGeoTransformation_ED1950_To_WGS1984_3 = 1135
esriSRGeoTransformation_ED1950_To_WGS1984_4 = 1136
esriSRGeoTransformation_ED1950_To_WGS1984_5 = 1137
esriSRGeoTransformation_ED1950_To_WGS1984_6 = 1138
esriSRGeoTransformation_ED1950_To_WGS1984_7 = 1139
esriSRGeoTransformation_ED1950_To_WGS1984_8 = 1140
esriSRGeoTransformation_ED1950_To_WGS1984_9 = 108275
esriSRGeoTransformation_ED1950_To_WGS1984_10 = 1142
esriSRGeoTransformation_ED1950_To_WGS1984_11 = 1143
esriSRGeoTransformation_ED1950_To_WGS1984_12 = 1144
esriSRGeoTransformation_ED1950_To_WGS1984_13 = 1145
esriSRGeoTransformation_ED1950_To_WGS1984_16 = 1245
esriSRGeoTransformation_Egypt1907_To_WGS1984 = 1148
esriSRGeoTransformation_GGRS1987_To_WGS1984 = 1272
esriSRGeoTransformation_Hungarian1972_To_ETRF1989_1 = 108196
esriSRGeoTransformation_NZGD1949_To_WGS1984 = 1151
esriSRGeoTransformation_HuTzuShan_To_WGS1984 = 1152
esriSRGeoTransformation_Indian1954_To_WGS1984 = 1153
esriSRGeoTransformation_Indian1975_To_WGS1984 = 1154
esriSRGeoTransformation_Kandawala_To_WGS1984 = 1157
esriSRGeoTransformation_Kertau_To_WGS1984 = 1158
esriSRGeoTransformation_Leigon_To_WGS1984 = 1159
esriSRGeoTransformation_Liberia1964_To_WGS1984 = 1160
esriSRGeoTransformation_Luzon1911_To_WGS1984_1 = 1161
esriSRGeoTransformation_Luzon1911_To_WGS1984_2 = 1162
esriSRGeoTransformation_MPoraloko_To_WGS1984 = 1163
esriSRGeoTransformation_Mahe1971_To_WGS1984 = 1164
esriSRGeoTransformation_Massawa_To_WGS1984 = 1165
esriSRGeoTransformation_Merchich_To_WGS1984 = 1166
esriSRGeoTransformation_Minna_To_WGS1984_1 = 1167
esriSRGeoTransformation_Minna_To_WGS1984_2 = 1168
esriSRGeoTransformation_MonteMario_To_WGS1984 = 1169
esriSRGeoTransformation_NAD1927_To_WGS1984_1 = 1170
esriSRGeoTransformation_NAD1927_To_WGS1984_2 = 1171
esriSRGeoTransformation_NAD1927_To_WGS1984_3 = 1172
esriSRGeoTransformation_NAD1927_To_WGS1984_4 = 1173
esriSRGeoTransformation_NAD1927_To_WGS1984_5 = 1174
esriSRGeoTransformation_NAD1927_To_WGS1984_6 = 1175
esriSRGeoTransformation_NAD1927_To_WGS1984_7 = 1176
esriSRGeoTransformation_NAD1927_To_WGS1984_8 = 1177
esriSRGeoTransformation_NAD1927_To_WGS1984_9 = 1178
esriSRGeoTransformation_NAD1927_To_WGS1984_10 = 1179
esriSRGeoTransformation_NAD1927_To_WGS1984_11 = 1180
esriSRGeoTransformation_NAD1927_To_WGS1984_12 = 1181
esriSRGeoTransformation_NAD1927_To_WGS1984_13 = 1182
esriSRGeoTransformation_NAD1927_To_WGS1984_14 = 1183
esriSRGeoTransformation_NAD1927_To_WGS1984_15 = 1184
esriSRGeoTransformation_NAD1927_To_WGS1984_16 = 1185
esriSRGeoTransformation_NAD1927_To_WGS1984_17 = 1186
esriSRGeoTransformation_NAD1927_To_WGS1984_18 = 1187
esriSRGeoTransformation_NAD1927_To_WGS1984_21 = 1249
esriSRGeoTransformation_NAD1927_To_WGS1984_22 = 1250
esriSRGeoTransformation_NAD1983_To_WGS1984_1 = 1188
esriSRGeoTransformation_NAD1983_To_WGS1984_2 = 1251
esriSRGeoTransformation_NAD1983_To_WGS1984_3 = 1252
esriSRGeoTransformation_Nahrwan1967_To_WGS1984_1 = 1189
esriSRGeoTransformation_Nahrwan1967_To_WGS1984_2 = 1190
esriSRGeoTransformation_Nahrwan1967_To_WGS1984_3 = 1191
esriSRGeoTransformation_Naparima1972_To_WGS1984 = 1192
esriSRGeoTransformation_NTF_To_WGS1984 = 1193
esriSRGeoTransformation_OSGB1936_To_WGS1984_1 = 1195
esriSRGeoTransformation_OSGB1936_To_WGS1984_2 = 1196
esriSRGeoTransformation_OSGB1936_To_WGS1984_3 = 1197
esriSRGeoTransformation_OSGB1936_To_WGS1984_4 = 1198
esriSRGeoTransformation_OSGB1936_To_WGS1984_5 = 1199
esriSRGeoTransformation_PointeNoire_To_WGS1984 = 1200
esriSRGeoTransformation_PSAD1956_To_WGS1984_1 = 1201
esriSRGeoTransformation_PSAD1956_To_WGS1984_2 = 1202
esriSRGeoTransformation_PSAD1956_To_WGS1984_3 = 1203
esriSRGeoTransformation_PSAD1956_To_WGS1984_4 = 1204
esriSRGeoTransformation_PSAD1956_To_WGS1984_5 = 1205
esriSRGeoTransformation_PSAD1956_To_WGS1984_6 = 1206
esriSRGeoTransformation_PSAD1956_To_WGS1984_7 = 1207
esriSRGeoTransformation_PSAD1956_To_WGS1984_8 = 1208
esriSRGeoTransformation_PSAD1956_To_WGS1984_9 = 1209
esriSRGeoTransformation_Qatar_To_WGS1984 = 1561
esriSRGeoTransformation_QORNOQ_To_WGS1984 = 8111
esriSRGeoTransformation_SAD1969_To_WGS1984_1 = 1864
esriSRGeoTransformation_SAD1969_To_WGS1984_2 = 1865
esriSRGeoTransformation_SAD1969_To_WGS1984_3 = 1866
esriSRGeoTransformation_SAD1969_To_WGS1984_4 = 1867
esriSRGeoTransformation_SAD1969_To_WGS1984_5 = 1868
esriSRGeoTransformation_SAD1969_To_WGS1984_6 = 1869
esriSRGeoTransformation_SAD1969_To_WGS1984_7 = 1870
esriSRGeoTransformation_SAD1969_To_WGS1984_8 = 1871
esriSRGeoTransformation_SAD1969_To_WGS1984_9 = 1872
esriSRGeoTransformation_SAD1969_To_WGS1984_10 = 1873
esriSRGeoTransformation_SAD1969_To_WGS1984_11 = 1874
esriSRGeoTransformation_SAD1969_To_WGS1984_12 = 1875
esriSRGeoTransformation_SAD1969_To_WGS1984_13 = 1876
esriSRGeoTransformation_SapperHill1943_To_WGS1984 = 1225
esriSRGeoTransformation_Schwarzeck_To_WGS1984 = 1226
esriSRGeoTransformation_Schwarzeck_To_WGS1984_2 = 1271
esriSRGeoTransformation_Tananarive1925_To_WGS1984 = 1227
esriSRGeoTransformation_Timbalai1948_To_WGS1984 = 1228
esriSRGeoTransformation_TM65_To_WGS1984 = 1229
esriSRGeoTransformation_Tokyo_To_WGS1984_1 = 1230
esriSRGeoTransformation_Tokyo_To_WGS1984_2 = 1231
esriSRGeoTransformation_Tokyo_To_WGS1984_3 = 1232
esriSRGeoTransformation_Tokyo_To_WGS1984_4 = 1233
esriSRGeoTransformation_Yacare_To_WGS1984 = 1234
esriSRGeoTransformation_Zanderij_To_WGS1984 = 1235
esriSRGeoTransformation_Fahud_To_WGS1984 = 1256
esriSRGeoTransformation_HeratNorth_To_WGS1984 = 1246
esriSRGeoTransformation_Indonesian1974_To_WGS1984 = 1248
esriSRGeoTransformation_NordSahara1959_To_WGS1984 = 1253
esriSRGeoTransformation_Pulkovo1942_To_WGS1984 = 1254
esriSRGeoTransformation_VoirolUnifie1960_To_WGS1984 = 8158
esriSRGeoTransformation_BataviaJakarta_To_WGS1984 = 8178
esriSRGeoTransformation_BogotaBogota_To_WGS1984 = 8174
esriSRGeoTransformation_MonteMarioRome_To_WGS1984 = 8175
esriSRGeoTransformation_NTFParis_To_ED1950 = 8186
esriSRGeoTransformation_NTFParis_To_WGS1972 = 8188
esriSRGeoTransformation_NTFParis_To_WGS1984 = 8094
esriSRGeoTransformation_Tananarive1925Paris_To_WGS1984 = 8176
esriSRGeoTransformation_Voirol1875Paris_To_WGS1984 = 8211
esriSRGeoTransformation_VoirolUnifieParis_To_WGS1984 = 8177
esriSRGeoTransformation_AGD1966_To_GDA1994 = 1278
esriSRGeoTransformation_AGD1984_To_GDA1994 = 1279
esriSRGeoTransformation_Arc1960_To_WGS1984_2 = 1284
esriSRGeoTransformation_Arc1960_To_WGS1984_3 = 1285
esriSRGeoTransformation_Camacupa_To_WGS1972BE_1 = 1317
esriSRGeoTransformation_Camacupa_To_WGS1984_1 = 1318
esriSRGeoTransformation_Camacupa_To_WGS1984_2 = 1319
esriSRGeoTransformation_Camacupa_To_WGS1984_4 = 1321
esriSRGeoTransformation_Camacupa_To_WGS1984_5 = 1322
esriSRGeoTransformation_Camacupa_To_WGS1984_6 = 1323
esriSRGeoTransformation_Camacupa_To_WGS1984_7 = 1324
esriSRGeoTransformation_Camacupa_To_WGS1984_8 = 1325
esriSRGeoTransformation_Camacupa_To_WGS1984_10 = 1327
esriSRGeoTransformation_ED1950_To_WGS1984_17 = 1275
esriSRGeoTransformation_Indian1975_To_WGS1984_2 = 1304
esriSRGeoTransformation_LKS1994_To_WGS1984 = 1283
esriSRGeoTransformation_Malongo1987_To_Mhast_1 = 1328
esriSRGeoTransformation_Manoca_To_WGS1984_1 = 1316
esriSRGeoTransformation_MGI_To_WGS1984 = 1306
esriSRGeoTransformation_Mhast_To_WGS1984_1 = 1329
esriSRGeoTransformation_Malongo1987_To_WGS1984_1 = 1330
esriSRGeoTransformation_Naparima1972_To_WGS1984_2 = 8212
esriSRGeoTransformation_Naparima1972_To_WGS1984_3 = 1307
esriSRGeoTransformation_NTF_To_ED1950 = 1276
esriSRGeoTransformation_NTF_To_WGS1972 = 1277
esriSRGeoTransformation_Pulkovo1942_To_WGS1984_3 = 1287
esriSRGeoTransformation_Pulkovo1942_To_WGS1984_4 = 1288
esriSRGeoTransformation_Pulkovo1942_To_WGS1984_5 = 1289
esriSRGeoTransformation_Pulkovo1942_To_WGS1984_6 = 1290
esriSRGeoTransformation_Pulkovo1942_To_WGS1984_7 = 1291
esriSRGeoTransformation_Pulkovo1942_To_WGS1984_8 = 1292
esriSRGeoTransformation_Pulkovo1942_To_WGS1984_9 = 1293
esriSRGeoTransformation_Samboja_To_WGS1984 = 1282
esriSRGeoTransformation_Segora_To_WGS1984 = 1286
esriSRGeoTransformation_Tokyo_To_WGS1984_5 = 1305
esriSRGeoTransformation_Trinidad1903_To_WGS1984 = 1296
esriSRGeoTransformation_Voirol1875_To_WGS1984 = 1294
esriSRGeoTransformation_AGD1984_To_GDA1994_2 = 1280
esriSRGeoTransformation_Camacupa_To_WGS1984_3 = 1320
esriSRGeoTransformation_Camacupa_To_WGS1984_9 = 1326
esriSRGeoTransformation_DHDN_To_ETRF1989 = 108192
esriSRGeoTransformation_ED1950_To_WGS1984_18 = 1311
esriSRGeoTransformation_Moznet_To_WGS1984 = 1302
esriSRGeoTransformation_NAD1983_To_WGS1984_4 = 1308
esriSRGeoTransformation_NGO1948_To_WGS1984 = 108201
esriSRGeoTransformation_OSGB1936_To_ED1950UKOOA = 1315
esriSRGeoTransformation_OSGB1936_To_WGS1984Petrol = 1314
esriSRGeoTransformation_Pulkovo1942_To_ETRF1989 = 108198
esriSRGeoTransformation_Pulkovo1942_To_LKS1994 = 1274
esriSRGeoTransformation_Pulkovo1942_To_WGS1984_10 = 1303
esriSRGeoTransformation_RT90_To_WGS1984 = 1680
esriSRGeoTransformation_Tete_To_Moznet_1 = 1297
esriSRGeoTransformation_Tete_To_Moznet_2 = 1298
esriSRGeoTransformation_Tete_To_Moznet_3 = 1299
esriSRGeoTransformation_Tete_To_Moznet_4 = 1300
esriSRGeoTransformation_Tete_To_Moznet_5 = 1301
esriSRGeoTransformation_Antigua1943_To_WGS1984 = 1441
esriSRGeoTransformation_Dominica1945_To_WGS1984 = 1442
esriSRGeoTransformation_ED1950_To_WGS1984_19 = 1440
esriSRGeoTransformation_Grenada1953_To_WGS1984 = 1443
esriSRGeoTransformation_MGIFerro_To_WGS1984 = 8263
esriSRGeoTransformation_Montserrat1958_To_WGS1984 = 1444
esriSRGeoTransformation_StKitts1955_To_WGS1984 = 1445
esriSRGeoTransformation_StLucia1955_To_WGS1984 = 1446
esriSRGeoTransformation_Estonia1992_To_WGS1984 = 1333
esriSRGeoTransformation_Estonia1992_To_ETRF1989 = 108194
esriSRGeoTransformation_Fahud_To_WGS1984_2 = 1438
esriSRGeoTransformation_PDF1993_To_WGS1984 = 1439
esriSRGeoTransformation_Pulkovo1942_To_Estonia1992 = 1332
esriSRGeoTransformation_Pulkovo1942_To_WGS1984_12 = 1334
esriSRGeoTransformation_AGD1966_To_GDA1994_2 = 1458
esriSRGeoTransformation_AGD1966_To_GDA1994_3 = 1459
esriSRGeoTransformation_AGD1966_To_GDA1994_4 = 1460
esriSRGeoTransformation_Kalianpur1937_To_WGS1984_1 = 1155
esriSRGeoTransformation_Kalianpur1962_To_WGS1984_1 = 1247
esriSRGeoTransformation_Kalianpur1975_To_WGS1984_1 = 1156
esriSRGeoTransformation_Abidjan1987_To_WGS1984 = 1470
esriSRGeoTransformation_Cape_To_Hartebeesthoek94 = 1504
esriSRGeoTransformation_CH1903Plus_To_CHTRF_1995 = 1509
esriSRGeoTransformation_CH1903_To_WGS1984_2 = 1766
esriSRGeoTransformation_CHTRF1995_To_WGS1984 = 1511
esriSRGeoTransformation_FD1958_To_WGS1984 = 1513
esriSRGeoTransformation_Hartebeesthoek94_To_WGS1984 = 1505
esriSRGeoTransformation_LaCanoa_To_WGS1984 = 1516
esriSRGeoTransformation_Locodjo1965_To_WGS1984 = 1469
esriSRGeoTransformation_NAD1983_CSRS98_To_WGS1984 = 1473
esriSRGeoTransformation_Rassadiran_To_WGS1984 = 1512
esriSRGeoTransformation_CH1903_To_WGS1984_1 = 1753
esriSRGeoTransformation_ED1950_ED77_To_WGS1984 = 1514
esriSRGeoTransformation_MGI_To_WGS1984_2 = 8415
esriSRGeoTransformation_NAD1983_To_WGS1984_5 = 1515
esriSRGeoTransformation_OldHawaiian_To_WGS1984_1 = 15824
esriSRGeoTransformation_OldHawaiian_To_WGS1984_2 = 15825
esriSRGeoTransformation_OldHawaiian_To_WGS1984_3 = 15826
esriSRGeoTransformation_OldHawaiian_To_WGS1984_4 = 15827
esriSRGeoTransformation_OldHawaiian_To_WGS1984_5 = 15828
esriSRGeoTransformation_ITRF_2000_To_ITRF_2005_1 = 108036
esriSRGeoTransformation_NAD_1927_To_WGS_1984_87 = 15699
esriSRGeoTransformation_Le_Pouce_1934_To_WGS_1984_1 = 15784
esriSRGeoTransformation_Solomon_1968_To_WGS_1984_1 = 15805
esriSRGeoTransformation_Solomon_1968_To_WGS_1984_2 = 15807
esriSRGeoTransformation_PZ_1990_To_WGS_1984_1 = 15843
esriSRGeoTransformation_Mauritania_1999_To_WGS_1984_1 = 15860
esriSRGeoTransformation_NAD_1927_To_WGS_1984_85 = 15864
esriSRGeoTransformation_Pulkovo_1942_To_WGS_1984_16 = 15865
esriSRGeoTransformation_FD_1954_To_ED_1950_1 = 15866
esriSRGeoTransformation_PD83_To_ETRS_1989_1 = 15867
esriSRGeoTransformation_RD83_To_ETRS_1989_1 = 15868
esriSRGeoTransformation_DHDN_To_WGS_1984_3 = 15869
esriSRGeoTransformation_Jouik_1961_To_WGS_1984_1 = 15870
esriSRGeoTransformation_Nahrwan_1967_To_WGS_1984_6 = 15871
esriSRGeoTransformation_Karbala_1979_Polservice_To_WGS_1984_1 = 15872
esriSRGeoTransformation_Douala_1948_To_WGS_1984_1 = 15873
esriSRGeoTransformation_Nord_Sahara_1959_To_WGS_1984_7 = 15874
esriSRGeoTransformation_Fiji_1956_To_WGS_1984_1 = 15875
esriSRGeoTransformation_Fiji_1986_To_WGS_1984_1 = 15876
esriSRGeoTransformation_Fiji_1986_To_WGS_1984_2 = 15877
esriSRGeoTransformation_Vanua_Levu_1915_To_WGS_1984_1 = 15878
esriSRGeoTransformation_Greenland_1996_To_WGS_1984_1 = 15879
esriSRGeoTransformation_RGNC_1991_93_To_WGS_1984_1 = 15880
esriSRGeoTransformation_ST87_Ouvea_To_WGS_1984_2 = 15881
esriSRGeoTransformation_IGN72_Grande_Terre_To_RGNC_1991_93_1 = 15882
esriSRGeoTransformation_IGN56_Lifou_To_RGNC_1991_93_1 = 15883
esriSRGeoTransformation_IGN53_Mare_To_RGNC_1991_93_1 = 15884
esriSRGeoTransformation_ST87_Ouvea_To_RGNC_1991_93_1 = 15885
esriSRGeoTransformation_NEA74_Noumea_To_RGNC_1991_93_1 = 15886
esriSRGeoTransformation_IGN72_Grande_Terre_To_RGNC_1991_93_2 = 15887
esriSRGeoTransformation_IGN72_Grande_Terre_To_RGNC_1991_93_3 = 15888
esriSRGeoTransformation_NEA74_Noumea_To_RGNC_1991_93_2 = 15889
esriSRGeoTransformation_IGN56_Lifou_To_RGNC_1991_93_2 = 15890
esriSRGeoTransformation_IGN53_Mare_To_RGNC_1991_93_2 = 15891
esriSRGeoTransformation_ST87_Ouvea_To_RGNC_1991_93_2 = 15892
esriSRGeoTransformation_ST84_Ile_des_Pins_To_RGNC_1991_93_1 = 15893
esriSRGeoTransformation_SIRGAS_2000_To_WGS_1984_1 = 15894
esriSRGeoTransformation_Scoresbysund_1952_To_Greenland_1996_1 = 15899
esriSRGeoTransformation_Ammassalik_1958_To_Greenland_1996_1 = 15900
esriSRGeoTransformation_IGN53_Mare_To_WGS_1984_3 = 15901
esriSRGeoTransformation_IGN56_Lifou_To_WGS_1984_3 = 15902
esriSRGeoTransformation_IGN72_Grande_Terre_To_WGS_1984_3 = 15903
esriSRGeoTransformation_NEA74_Noumea_To_WGS_1984_2 = 15904
esriSRGeoTransformation_LGD2006_To_WGS_1984_1 = 15908
esriSRGeoTransformation_ELD_1979_To_WGS_1984_8 = 15909
esriSRGeoTransformation_Indonesian_1974_To_DGN_1995_1 = 15911
esriSRGeoTransformation_DGN_1995_To_WGS_1984_1 = 15912
esriSRGeoTransformation_NAD_1927_To_WGS_1984_86 = 15913
esriSRGeoTransformation_Beijing_1954_To_WGS_1984_1 = 15918
esriSRGeoTransformation_Beijing_1954_To_WGS_1984_2 = 15919
esriSRGeoTransformation_Beijing_1954_To_WGS_1984_3 = 15920
esriSRGeoTransformation_Beijing_1954_To_WGS_1984_4 = 15921
esriSRGeoTransformation_ELD_1979_To_WGS_1984_9 = 15923
esriSRGeoTransformation_ELD_1979_To_LGD2006_1 = 15924
esriSRGeoTransformation_Jamaica_1969_To_JAD_2001_1 = 15926
esriSRGeoTransformation_NAD_1983_HARN_To_NAD_1983_NSRS2007_1 = 4461
esriSRGeoTransformation_NAD_1983_NSRS2007_To_WGS_1984_1 = 15931
esriSRGeoTransformation_Beijing_1954_To_WGS_1984_5 = 15935
esriSRGeoTransformation_Beijing_1954_To_WGS_1984_6 = 15936
esriSRGeoTransformation_Nahrwan_1967_To_WGS_1984_7 = 15937
esriSRGeoTransformation_Nahrwan_1967_To_WGS_1984_8 = 15938
esriSRGeoTransformation_Nahrwan_1967_To_WGS_1984_9 = 15952
esriSRGeoTransformation_Nahrwan_1967_To_WGS_1984_10 = 15953
esriSRGeoTransformation_NAD_1927_To_WGS_1984_79_CONUS = 15851
esriSRGeoTransformation_NAD_1927_To_WGS_1984_83 = 15855
esriSRGeoTransformation_AGD_1984_To_WGS_1984_9_NTv2 = 15785
esriSRGeoTransformation_AGD_1966_To_WGS_1984_17_NTv2 = 15786
esriSRGeoTransformation_ED_1950_To_ETRS_1989_12_NTv2_Spain_v2 = 15932
esriSRGeoTransformation_ED_1950_To_WGS_1984_41_NTv2_Spain_v2 = 15933
esriSRGeoTransformation_DHDN_To_ETRS_1989_8_NTv2 = 15948
esriSRGeoTransformation_DHDN_To_WGS_1984_4_NTv2 = 15949
esriSRGeoTransformation_RD83_To_WGS_1984_1_NTv2 = 15954
esriSRGeoTransformation_PD83_To_WGS_1984_1_NTv2 = 15955
esriSRGeoTransformation_D48_To_ETRS_1989_2007 = 108308
esriSRGeoTransformation_D48_To_WGS_1984_2007 = 108309
esriSRGeoTransformation_D48_To_ETRS_1989_Zahodna_Slovenia = 108310
esriSRGeoTransformation_D48_To_WGS_1984_Zahodna_Slovenia = 108311
esriSRGeoTransformation_D48_To_ETRS_1989_Severovzhodna_Slovenia = 108312
esriSRGeoTransformation_D48_To_WGS_1984_Severovzhodna_Slovenia = 108313
esriSRGeoTransformation_D48_To_ETRS_1989_Jugovzhodna_Slovenia = 108314
esriSRGeoTransformation_D48_To_WGS_1984_Jugovzhodna_Slovenia = 108315
esriSRGeoTransformation_D48_To_ETRS_1989_Stajerska = 108316
esriSRGeoTransformation_D48_To_WGS_1984_Stajerska = 108317
esriSRGeoTransformation_D48_To_ETRS_1989_Gorenjska = 108318
esriSRGeoTransformation_D48_To_WGS_1984_Gorenjska = 108319
esriSRGeoTransformation_D48_To_ETRS_1989_Osrednja_Slovenia = 108320
esriSRGeoTransformation_D48_To_WGS_1984_Osrednja_Slovenia = 108321
esriSRGeoTransformation_D48_To_ETRS_1989_Dolenjska = 108322
esriSRGeoTransformation_D48_To_WGS_1984_Dolenjska = 108323
esriSRGeoTransformation_D48_To_ETRS_1989_Juzna_Slovenia = 108324
esriSRGeoTransformation_D48_To_WGS_1984_Juzna_Slovenia = 108325
esriSRGeoTransformation_D48_To_ETRS_1989_Primorska = 108326
esriSRGeoTransformation_D48_To_WGS_1984_Primorska = 108327
esriSRGeoTransformation_D48_To_ETRS_1989_Pomurje = 108328
esriSRGeoTransformation_D48_To_WGS_1984_Pomurje = 108329
esriSRGeoTransformation_Pulkovo1942_To_ETRS1989 = 1310
esriSRGeoTransformation_Estonia1992_To_ETRS1989 = 1331
esriSRGeoTransformation_Qatar1974_To_WGS1984_1 = 1561
esriSRGeoTransformation_NZGD1949_To_NZGD2000_1_3PAR = 1566
esriSRGeoTransformation_NZGD1949_To_NZGD2000_3_NTv2 = 1568
esriSRGeoTransformation_NZGD1949_To_NZGD2000_2_7PAR = 1701
esriSRGeoTransformation_AGD1984_To_GDA1994_4_NTv2_WestAus = 1593
esriSRGeoTransformation_AGD1966_To_GDA1994_10_NTv2_NSW_Vic = 1596
esriSRGeoTransformation_NGO1948_To_WGS1984_1 = 1654
esriSRGeoTransformation_NAD1927_CGQ77_To_NAD1983_CSRS = 1845
esriSRGeoTransformation_Tahaa1954_To_WGS1984_1 = 1913
esriSRGeoTransformation_Tahiti1952_To_WGS1984_1 = 1924
esriSRGeoTransformation_LittleCayman1961_To_WGS1984_2 = 15829
esriSRGeoTransformation_Pulkovo1942_To_PZ1990_1 = 15844
esriSRGeoTransformation_Amersfoort_To_WGS1984_3 = 15934
esriSRGeoTransformation_Amersfoort_To_WGS1984_4X = 108237
esriSRGeoTransformation_PZ1990_To_WGS1984_GOST = 1244
esriSRGeoTransformation_Pulkovo1995_To_PZ1990_GOST = 1257
esriSRGeoTransformation_NAD1983_To_HARN_OR_WA = 108291
esriSRGeoTransformationType = c_int # enum
class IConstructDomainExtent(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that construct domain extents based on defined precision.'
    _iid_ = GUID('{3F419D43-5486-11D2-AAEB-00C04FA33C20}')
    _idlflags_ = ['oleautomation']
class IConstructDomainExtent2(IConstructDomainExtent):
    _case_insensitive_ = True
    u'Constructs a Z/M domain extent from the specified extent and information from a spatial reference.'
    _iid_ = GUID('{32839157-DBC8-40A8-8FF9-FE8F716A300C}')
    _idlflags_ = ['oleautomation']
IConstructDomainExtent._methods_ = [
    COMMETHOD([helpstring(u'Constructs a new envelope by expanding the input envelope about its center. Scale is typically a power of 10 indicating the number of sig figs to preserve. If its zero, the extent is expanded 1.5 times (subject to some constraints).')], HRESULT, 'ConstructDomainExtent',
              ( [], POINTER(IEnvelope), 'extent' ),
              ( [], c_double, 'Scale' ),
              ( ['retval', 'out'], POINTER(POINTER(IEnvelope)), 'newExtent' )),
    COMMETHOD([helpstring(u'(deprecated, use ConstructZMDomainExtent2) Constructs a low precision Z or M domain extent centered on the specified extent. scale is 1/(desired resolution). If scale is 0.0, a default of 1,000,000.0 is used.')], HRESULT, 'ConstructZMDomainExtent',
              ( [], c_double, 'inMin' ),
              ( [], c_double, 'inMax' ),
              ( [], c_double, 'Scale' ),
              ( ['out'], POINTER(c_double), 'outMin' ),
              ( ['out'], POINTER(c_double), 'outMax' )),
]
################################################################
## code template for IConstructDomainExtent implementation
##class IConstructDomainExtent_Impl(object):
##    def ConstructDomainExtent(self, extent, Scale):
##        u'Constructs a new envelope by expanding the input envelope about its center. Scale is typically a power of 10 indicating the number of sig figs to preserve. If its zero, the extent is expanded 1.5 times (subject to some constraints).'
##        #return newExtent
##
##    def ConstructZMDomainExtent(self, inMin, inMax, Scale):
##        u'(deprecated, use ConstructZMDomainExtent2) Constructs a low precision Z or M domain extent centered on the specified extent. scale is 1/(desired resolution). If scale is 0.0, a default of 1,000,000.0 is used.'
##        #return outMin, outMax
##

IConstructDomainExtent2._methods_ = [
    COMMETHOD([helpstring(u'Constructs a low or high precision Z or M domain extent centered on the input extent. inScale is 1/desired resolution. If inScale is zero, 1/.1 mm is used for a high precision domain and 1/1mm is used for a low precision domain.')], HRESULT, 'ConstructZMDomainExtent2',
              ( [], POINTER(ISpatialReference), 'pSR' ),
              ( [], c_double, 'inMin' ),
              ( [], c_double, 'inMax' ),
              ( [], c_double, 'inScale' ),
              ( ['out'], POINTER(c_double), 'outMin' ),
              ( ['out'], POINTER(c_double), 'outMax' ),
              ( ['retval', 'out'], POINTER(c_double), 'outScale' )),
]
################################################################
## code template for IConstructDomainExtent2 implementation
##class IConstructDomainExtent2_Impl(object):
##    def ConstructZMDomainExtent2(self, pSR, inMin, inMax, inScale):
##        u'Constructs a low or high precision Z or M domain extent centered on the input extent. inScale is 1/desired resolution. If inScale is zero, 1/.1 mm is used for a high precision domain and 1/1mm is used for a low precision domain.'
##        #return outMin, outMax, outScale
##

class GeometryEnvironment(CoClass):
    u'Provides a way of creating geometries from different inputs and setting/getting global variables for controlling behavior of geometry methods.'
    _reg_clsid_ = GUID('{11735DAE-816C-11D0-82F5-0000F8034032}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
class IGeometryFactory2(IGeometryFactory):
    _case_insensitive_ = True
    u'Provides access to members that create geometries from different inputs.'
    _iid_ = GUID('{8859DA8A-64E0-4F2B-BDFC-46182248BF53}')
    _idlflags_ = ['oleautomation']
class IGeometryFactory3(IGeometryFactory2):
    _case_insensitive_ = True
    u'Provides access to members that create geometries from different inputs.'
    _iid_ = GUID('{7592C306-75B2-4A2C-8FEE-C1ABBE3D5491}')
    _idlflags_ = ['oleautomation']
class IGeometryEnvironment4(IGeometryEnvironment3):
    _case_insensitive_ = True
    u'Provides access to members that control additional global geometry variables.'
    _iid_ = GUID('{ABB994F7-DF63-46D5-80B5-57EC1E0BFC88}')
    _idlflags_ = ['oleautomation']
class IExtrude(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that can be used to take a geometry and connect it to a translated version of itself to generate a higher-dimensional geometry.'
    _iid_ = GUID('{6B256AE0-1CDE-11D4-9F5C-00C04F6BDF0D}')
    _idlflags_ = ['oleautomation']
class IEncode3DProperties(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that encode and decode normals and 2D texture coordinates into a single double value.'
    _iid_ = GUID('{7767A6F1-69D1-11D4-9F66-00C04F6BDF0D}')
    _idlflags_ = ['oleautomation']
class IGeometryBridge2(IGeometryBridge):
    _case_insensitive_ = True
    u'Provides access to a set of generic methods that can be used in all languages supported.'
    _iid_ = GUID('{A83CAA20-47E4-4A10-AA4C-BB2A25FE7108}')
    _idlflags_ = ['oleautomation']
class IConstructMerge(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Methods for doing a 3-way merge using two modified versions of a geometry along with the original.'
    _iid_ = GUID('{3313DAB7-EDAD-46E0-87B9-C332EC64C5B3}')
    _idlflags_ = []
GeometryEnvironment._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, IConstructAngle, IGeometryFactory, IGeometryFactory2, IGeometryFactory3, IGeometryEnvironment, IGeometryEnvironment2, IGeometryEnvironment3, IGeometryEnvironment4, IExtrude, IEncode3DProperties, IConstructDomainExtent, IGeometryBridge, IGeometryBridge2, IConstructMerge, IConstructClothoid]

class GeocentricTranslation(CoClass):
    u'Creates a geocentric translation.'
    _reg_clsid_ = GUID('{0F024430-C1F8-11D2-BD07-0000F875BCCE}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
class IGeocentricTranslation(IGeoTransformation):
    _case_insensitive_ = True
    u'Provides access to members that control the 3D vector transformation with 3 translation values.'
    _iid_ = GUID('{063954B0-C1FB-11D2-BD07-0000F875BCCE}')
    _idlflags_ = ['oleautomation']
GeocentricTranslation._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ITransformationGEN, ITransformation, IGeocentricTranslation, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, ISpatialReferenceAuthority]

class ITextureAware(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Indicator interface that identifies geometries that can have persistent texture values attached to coordinates.'
    _iid_ = GUID('{E433A193-CEB0-11D3-9F50-00C04F6BDF0D}')
    _idlflags_ = ['oleautomation']
ITextureAware._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if this geometry is aware of textures.')], HRESULT, 'TextureAware',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'TextureAware' )),
    COMMETHOD(['propput', helpstring(u'Indicates if this geometry is aware of textures.')], HRESULT, 'TextureAware',
              ( [], VARIANT_BOOL, 'TextureAware' )),
    COMMETHOD(['propget', helpstring(u'The dimension of the textures on the geometry.')], HRESULT, 'TextureDimension',
              ( ['retval', 'out'], POINTER(esriGeometryDimension), 'Dimension' )),
    COMMETHOD(['propput', helpstring(u'The dimension of the textures on the geometry.')], HRESULT, 'TextureDimension',
              ( [], esriGeometryDimension, 'Dimension' )),
    COMMETHOD(['propget', helpstring(u'Indicates if all texture values for this geometry are well-defined. Only works if geometry is aware of textures.')], HRESULT, 'TextureSimple',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'TextureSimple' )),
    COMMETHOD([helpstring(u'Unsets all texture values without changing awareness. Only works if geometry is aware of textures.')], HRESULT, 'DropTextures'),
]
################################################################
## code template for ITextureAware implementation
##class ITextureAware_Impl(object):
##    def DropTextures(self):
##        u'Unsets all texture values without changing awareness. Only works if geometry is aware of textures.'
##        #return 
##
##    def _get(self):
##        u'Indicates if this geometry is aware of textures.'
##        #return TextureAware
##    def _set(self, TextureAware):
##        u'Indicates if this geometry is aware of textures.'
##    TextureAware = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def TextureSimple(self):
##        u'Indicates if all texture values for this geometry are well-defined. Only works if geometry is aware of textures.'
##        #return TextureSimple
##
##    def _get(self):
##        u'The dimension of the textures on the geometry.'
##        #return Dimension
##    def _set(self, Dimension):
##        u'The dimension of the textures on the geometry.'
##    TextureDimension = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'esriSRProjCS2Type'
esriSRProjCS_SJTSK_FERRO_KROVAK = 2065
esriSRProjCS_SJTSK_KROVAK = 5513
esriSRProjCS_SJTSK_FERRO_KROVAK_EN = 5221
esriSRProjCS_SJTSK_KROVAK_EN = 5514
esriSRProjCS_NAD1983HARNSPCS_ARNorth = 2764
esriSRProjCS_NAD1983HARNSPCS_ARSouth = 2765
esriSRProjCS_NAD1983HARNSPCS_MNNorth = 2810
esriSRProjCS_NAD1983HARNSPCS_MNCentral = 2811
esriSRProjCS_NAD1983HARNSPCS_MNSouth = 2812
esriSRProjCS_NAD1983HARNSPCS_MOEast = 2815
esriSRProjCS_NAD1983HARNSPCS_MOCentral = 2816
esriSRProjCS_NAD1983HARNSPCS_MOWest = 2817
esriSRProjCS_NZGD1949NewZealandMapGrid = 27200
esriSRProjCS_FranceIDegrees = 102581
esriSRProjCS_FranceIIDegrees = 102582
esriSRProjCS_FranceIIIDegrees = 102583
esriSRProjCS_FranceIVDegrees = 102584
esriSRProjCS_BelgeLambert1972 = 31370
esriSRProjCS_Hungarian1972_EOV = 23700
esriSRProjCS_CH1903_LV03 = 21781
esriSRProjCS_CH1903Plus_LV95 = 2056
esriSRProjCS_RGF1993_Lambert93 = 2154
esriSRProjCS_NAD1927MichiganGeoRef_m = 102122
esriSRProjCS_NAD1983MichiganGeoRef_m = 3078
esriSRProjCS_HongKong1980Grid = 2326
esriSRProjCS_HongKong1980_UTM49N = 102141
esriSRProjCS_HongKong1980_UTM50N = 102142
esriSRProjCS_Tokyo_UTM51N = 3092
esriSRProjCS_Tokyo_UTM52N = 3093
esriSRProjCS_Tokyo_UTM53N = 3094
esriSRProjCS_Tokyo_UTM54N = 3095
esriSRProjCS_Tokyo_UTM55N = 3096
esriSRProjCS_Tokyo_UTM56N = 102156
esriSRProjCS_Datum73HayfordGaussIGEOE = 102160
esriSRProjCS_Datum73HayfordGaussIPCC = 102161
esriSRProjCS_Graciosa1948_UTM26N = 102162
esriSRProjCS_LisboaBesselBonne = 102163
esriSRProjCS_LisboaHayfordGaussIGEOE = 102164
esriSRProjCS_LisboaHayfordGaussIPCC = 102165
esriSRProjCS_ObservMeteor1939_UTM25N = 102166
esriSRProjCS_PortoSanto1936_UTM28N = 2942
esriSRProjCS_SaoBraz_UTM26N = 102168
esriSRProjCS_SelvagemGrande1938_UTM28N = 2943
esriSRProjCS_NAD1983HARNSPCS_NJ = 2824
esriSRProjCS_AmericanSamoa1962SPCS_AS = 65062
esriSRProjCS_Pulkovo1942_58_PolandZone1 = 3120
esriSRProjCS_Pulkovo1942_58_PolandZone2 = 2172
esriSRProjCS_Pulkovo1942_58_PolandZone3 = 2173
esriSRProjCS_Pulkovo1942_58_PolandZone4 = 2174
esriSRProjCS_Pulkovo1942_58_PolandZone5 = 2175
esriSRProjCS_AzoresOccidental1939_UTMZone25N = 2188
esriSRProjCS_AzoresCentral1948_UTMZone26N = 2189
esriSRProjCS_AzoresOriental1940_UTMZone26N = 2190
esriSRProjCS_Fiji1956_UTMZone60S = 3141
esriSRProjCS_Fiji1956_UTMZone1S = 3142
esriSRProjCS_NAD1983BCEnvAlbers = 3153
esriSRProjCS_NAD1983CSRS_UTMZone7N = 3154
esriSRProjCS_NAD1983CSRS_UTMZone8N = 3155
esriSRProjCS_NAD1983CSRS_UTMZone9N = 3156
esriSRProjCS_NAD1983CSRS_UTMZone10N = 3157
esriSRProjCS_NAD1983OntarioMNRLambert = 3161
esriSRProjCS_NAD1983CSRSOntarioMNRLambert = 3162
esriSRProjCS_RGNC1991_93LambertNewCaledonia = 3163
esriSRProjCS_NEA74NoumeaLambert = 3165
esriSRProjCS_NEA74NoumeaLambert2 = 3166
esriSRProjCS_RGNC1991_93_UTMZone57S = 3169
esriSRProjCS_RGNC1991_93_UTMZone58S = 3170
esriSRProjCS_RGNC1991_93_UTMZone59S = 3171
esriSRProjCS_IGN53Mare_UTMzone59S = 3172
esriSRProjCS_NAD1983GreatLakesAlbers = 3174
esriSRProjCS_NAD1983GreatLakesStLawrenceAlbers = 3175
esriSRProjCS_LGD2006LibyaTM = 3177
esriSRProjCS_Greenland1996_UTMZone18N = 3178
esriSRProjCS_Greenland1996_UTMZone19N = 3179
esriSRProjCS_Greenland1996_UTMZone20N = 3180
esriSRProjCS_Greenland1996_UTMZone21N = 3181
esriSRProjCS_Greenland1996_UTMZone22N = 3182
esriSRProjCS_Greenland1996_UTMZone23N = 3183
esriSRProjCS_Greenland1996_UTMZone24N = 3184
esriSRProjCS_Greenland1996_UTMZone25N = 3185
esriSRProjCS_Greenland1996_UTMZone26N = 3186
esriSRProjCS_Greenland1996_UTMZone27N = 3187
esriSRProjCS_Greenland1996_UTMZone28N = 3188
esriSRProjCS_Greenland1996_UTMZone29N = 3189
esriSRProjCS_LGD2006LibyaTMZone5 = 3190
esriSRProjCS_LGD2006LibyaTMZone6 = 3191
esriSRProjCS_LGD2006LibyaTMZone7 = 3192
esriSRProjCS_LGD2006LibyaTMZone8 = 3193
esriSRProjCS_LGD2006LibyaTMZone9 = 3194
esriSRProjCS_LGD2006LibyaTMZone10 = 3195
esriSRProjCS_LGD2006LibyaTMZone11 = 3196
esriSRProjCS_LGD2006LibyaTMZone12 = 3197
esriSRProjCS_LGD2006LibyaTMZone13 = 3198
esriSRProjCS_LGD2006_UTMZone32N = 3199
esriSRProjCS_LGD2006_UTMZone33N = 3201
esriSRProjCS_LGD2006_UTMZone34N = 3202
esriSRProjCS_LGD2006_UTMZone35N = 3203
esriSRProjCS_LePouce1934MauritiusGrid = 3337
esriSRProjCS_NAD1983CSRS_StatsCanadaLambert = 3348
esriSRProjCS_IGNAstro1960_UTMZone28N = 3367
esriSRProjCS_IGNAstro1960_UTMZone29N = 3368
esriSRProjCS_IGNAstro1960_UTMZone30N = 3369
esriSRProjCS_FD1954_UTMZone29N = 3374
esriSRProjCS_Finland_0 = 3386
esriSRProjCS_Finland_5 = 3387
esriSRProjCS_Pulkovo1942CaspianSeaMercator = 3388
esriSRProjCS_Karbala1979Polsvc_UTMZone37N = 3391
esriSRProjCS_Karbala1979Polsvc_UTMZone38N = 3392
esriSRProjCS_Karbala1979Polsvc_UTMZone39N = 3393
esriSRProjCS_Nahrwan1934IraqZone = 3394
esriSRProjCS_WGS1984WorldMercator = 3395
esriSRProjCS_PD1983_GKZone3 = 3396
esriSRProjCS_PD1983_GKZone4 = 3397
esriSRProjCS_RD1983_GKZone4 = 3398
esriSRProjCS_RD1983_GKZone5 = 3399
esriSRProjCS_NAD1983CSRS10TM_AEPForest = 3402
esriSRProjCS_NAD1983CSRS10TM_AEPResource = 3403
esriSRProjCS_VN2000_UTMZone48N = 3405
esriSRProjCS_VN2000_UTMZone49N = 3406
esriSRProjCS_NSIDC_EASEGridNorth = 3408
esriSRProjCS_NSIDC_EASEGridSouth = 3409
esriSRProjCS_NSIDC_EASEGridGlobal = 3410
esriSRProjCS_NSIDC_SeaIcePolarStereoN = 3411
esriSRProjCS_NSIDC_SeaIcePolarStereoS = 3412
esriSRProjCS_WGS1984NSIDC_SeaIcePolarStereoN = 3413
esriSRProjCS_SVY21 = 3414
esriSRProjCS_WGS1972BE_SouthChinaSeaLambert = 3415
esriSRProjCS_ETRS1989AustriaLambert = 3416
esriSRProjCS_NAD1983HARNSPCS_IANorthFT = 3425
esriSRProjCS_NAD1983HARNSPCS_IASouthFT = 3426
esriSRProjCS_NAD1983HARNSPCS_KSNorthFT = 3427
esriSRProjCS_NAD1983HARNSPCS_KSSouthFT = 3428
esriSRProjCS_NAD1983HARNSPCS_NVEastFT = 3429
esriSRProjCS_NAD1983HARNSPCS_NVCentralFT = 3430
esriSRProjCS_NAD1983HARNSPCS_NVWestFT = 3431
esriSRProjCS_NAD1983HARNSPCS_NJFT = 3432
esriSRProjCS_NAD1983HARNSPCS_ARNorthFT = 3441
esriSRProjCS_NAD1983HARNSPCS_ARSouthFT = 3442
esriSRProjCS_NAD1983HARNSPCS_ILEastFT = 3443
esriSRProjCS_NAD1983HARNSPCS_ILWestFT = 3444
esriSRProjCS_NAD1983HARNSPCS_NHFT = 3445
esriSRProjCS_NAD1983HARNSPCS_RIFT = 3446
esriSRProjCS_ETRS1989BelgeLambert2005 = 3447
esriSRProjCS_ETRS1989BelgeLambert2008 = 3812
esriSRProjCS_JAD2001_UTMZone17N = 3449
esriSRProjCS_JAD2001_UTMZone18N = 3450
esriSRProjCS_NAD1983SPCS_LAOffshoreFT = 3453
esriSRProjCS_NAD1983HARNSPCS_LANorthFT = 3456
esriSRProjCS_NAD1983HARNSPCS_LASouthFT = 3457
esriSRProjCS_NAD1983HARNSPCS_SDNorthFT = 3458
esriSRProjCS_NAD1983HARNSPCS_SDSouthFT = 3459
esriSRProjCS_Fiji1986MapGrid = 3460
esriSRProjCS_NAD1983HARNSPCS_UTNorthFT = 3568
esriSRProjCS_NAD1983HARNSPCS_UTCentralFT = 3569
esriSRProjCS_NAD1983HARNSPCS_UTSouthFT = 3570
esriSRProjCS_WGS1984NPoleLAEABeringSea = 3571
esriSRProjCS_WGS1984NPoleLAEAAlaska = 3572
esriSRProjCS_WGS1984NPoleLAEACanada = 3573
esriSRProjCS_WGS1984NPoleLAEAAtlantic = 3574
esriSRProjCS_WGS1984NPoleLAEAEurope = 3575
esriSRProjCS_WGS1984NPoleLAEARussia = 3576
esriSRProjCS_GDA1994AustraliaAlbers = 3577
esriSRProjCS_NAD1983YukonAlbers = 3578
esriSRProjCS_NAD1983CSRSYukonAlbers = 3579
esriSRProjCS_NAD1983NWTLambert = 3580
esriSRProjCS_NAD1983CSRSNWTLambert = 3581
esriSRProjCS_NAD1983HARNSPCS_OHNorthFT = 3753
esriSRProjCS_NAD1983HARNSPCS_OHSouthFT = 3754
esriSRProjCS_NAD1983HARNSPCS_WYEastFT = 3755
esriSRProjCS_NAD1983HARNSPCS_WYECFT = 3756
esriSRProjCS_NAD1983HARNSPCS_WYWCFT = 3757
esriSRProjCS_NAD1983HARNSPCS_WYWestFT = 3758
esriSRProjCS_NAD1983CSRS_UTMZone22N = 3761
esriSRProjCS_WGS1984SouthGeorgiaLambert = 3762
esriSRProjCS_ETRS1989PortugalTM06 = 3763
esriSRProjCS_DGN1995IndonesiaTM3Zone46_2 = 23830
esriSRProjCS_DGN1995IndonesiaTM3Zone47_1 = 23831
esriSRProjCS_DGN1995IndonesiaTM3Zone47_2 = 23832
esriSRProjCS_DGN1995IndonesiaTM3Zone48_1 = 23833
esriSRProjCS_DGN1995IndonesiaTM3Zone48_2 = 23834
esriSRProjCS_DGN1995IndonesiaTM3Zone49_1 = 23835
esriSRProjCS_DGN1995IndonesiaTM3Zone49_2 = 23836
esriSRProjCS_DGN1995IndonesiaTM3Zone50_1 = 23837
esriSRProjCS_DGN1995IndonesiaTM3Zone50_2 = 23838
esriSRProjCS_DGN1995IndonesiaTM3Zone51_1 = 23839
esriSRProjCS_DGN1995IndonesiaTM3Zone51_2 = 23840
esriSRProjCS_DGN1995IndonesiaTM3Zone52_1 = 23841
esriSRProjCS_DGN1995IndonesiaTM3Zone52_2 = 23842
esriSRProjCS_DGN1995IndonesiaTM3Zone53_1 = 23843
esriSRProjCS_DGN1995IndonesiaTM3Zone53_2 = 23844
esriSRProjCS_DGN1995IndonesiaTM3Zone54_1 = 23845
esriSRProjCS_DGN1995_UTMZone46N = 23866
esriSRProjCS_DGN1995_UTMZone47N = 23867
esriSRProjCS_DGN1995_UTMZone48N = 23868
esriSRProjCS_DGN1995_UTMZone49N = 23869
esriSRProjCS_DGN1995_UTMZone50N = 23870
esriSRProjCS_DGN1995_UTMZone51N = 23871
esriSRProjCS_DGN1995_UTMZone52N = 23872
esriSRProjCS_DGN1995_UTMZone47S = 23877
esriSRProjCS_DGN1995_UTMZone48S = 23878
esriSRProjCS_DGN1995_UTMZone49S = 23879
esriSRProjCS_DGN1995_UTMZone50S = 23880
esriSRProjCS_DGN1995_UTMZone51S = 23881
esriSRProjCS_DGN1995_UTMZone52S = 23882
esriSRProjCS_DGN1995_UTMZone53S = 23883
esriSRProjCS_DGN1995_UTMZone54S = 23884
esriSRProjCS_Nahrwan1967_UTMZone37N = 27037
esriSRProjCS_NTFParis_LambertNordFrance = 27561
esriSRProjCS_NTFParis_LambertCentreFrance = 27562
esriSRProjCS_NTFParis_LambertSudFrance = 27563
esriSRProjCS_NTFParis_LambertCorse = 27564
esriSRProjCS_NTFParis_LambertZoneI = 27571
esriSRProjCS_NTFParis_LambertZoneII = 27572
esriSRProjCS_NTFParis_LambertZoneIII = 27573
esriSRProjCS_NTFParis_LambertZoneIV = 27574
esriSRProjCS_NordSahara1959VoirolUnifieNord = 30791
esriSRProjCS_NordSahara1959VoirolUnifieSud = 30792
esriSRProjCS_MGIFerro_AustriaGKWest = 31251
esriSRProjCS_MGIFerro_AustriaGKCentral = 31252
esriSRProjCS_MGIFerro_AustriaGKEast = 31253
esriSRProjCS_MGIAustriaGKWest = 31254
esriSRProjCS_MGIAustriaGKCentral = 31255
esriSRProjCS_MGIAustriaGKEast = 31256
esriSRProjCS_MGIAustriaGKM28 = 31257
esriSRProjCS_MGIAustriaGKM31 = 31258
esriSRProjCS_MGIAustriaGKM34 = 31259
esriSRProjCS_MGIFerro_GKM28 = 31288
esriSRProjCS_MGIFerro_GKM31 = 31289
esriSRProjCS_MGIFerro_GKM34 = 31290
esriSRProjCS_NAD1927SPCS_LAOffshore = 32099
esriSRProjCS_NAD1983BLMZone14NftUS = 32164
esriSRProjCS_NAD1983BLMZone15NftUS = 32165
esriSRProjCS_NAD1983BLMZone16NftUS = 32166
esriSRProjCS_NAD1983BLMZone17NftUS = 32167
esriSRProjCS_NAD1983SPCS_LAOffshore = 32199
esriSRProjCS_WGS1984PlateCarree = 32662
esriSRProjCS_WGS1984BLMZone14NftUS = 32664
esriSRProjCS_WGS1984BLMZone15NftUS = 32665
esriSRProjCS_WGS1984BLMZone16NftUS = 32666
esriSRProjCS_WGS1984BLMZone17NftUS = 32667
esriSRProjCS_ETRS1989SloveniaTM = 102109
esriSRProjCS_NAD1983USFS_R6Albers = 102218
esriSRProjCS_NAD1983HARN_MS_TM = 3815
esriSRProjCS_WGS1984SphereWebMercator = 3785
esriSRProjCS_NAD1983HARN_WISCRSAdamsM = 103300
esriSRProjCS_NAD1983HARN_WISCRSAshlandM = 103301
esriSRProjCS_NAD1983HARN_WISCRSBarronM = 103302
esriSRProjCS_NAD1983HARN_WISCRSBrownM = 103304
esriSRProjCS_NAD1983HARN_WISCRSBuffaloM = 103305
esriSRProjCS_NAD1983HARN_WISCRSCalumetM = 103307
esriSRProjCS_NAD1983HARN_WISCRSClarkM = 103309
esriSRProjCS_NAD1983HARN_WISCRSDodgeM = 103313
esriSRProjCS_NAD1983HARN_WISCRSDoorM = 103314
esriSRProjCS_NAD1983HARN_WISCRSDouglasM = 103315
esriSRProjCS_NAD1983HARN_WISCRSDunnM = 103316
esriSRProjCS_NAD1983HARN_WISCRSFlorenceM = 103318
esriSRProjCS_NAD1983HARN_WISCRSFond_du_LacM = 103319
esriSRProjCS_NAD1983HARN_WISCRSForestM = 103320
esriSRProjCS_NAD1983HARN_WISCRSGrantM = 103321
esriSRProjCS_NAD1983HARN_WISCRSIowaM = 103324
esriSRProjCS_NAD1983HARN_WISCRSIronM = 103325
esriSRProjCS_NAD1983HARN_WISCRSJacksonM = 103326
esriSRProjCS_NAD1983HARN_WISCRSJeffersonM = 103327
esriSRProjCS_NAD1983HARN_WISCRSJuneauM = 103328
esriSRProjCS_NAD1983HARN_WISCRSKenoshaM = 103329
esriSRProjCS_NAD1983HARN_WISCRSKewauneeM = 103330
esriSRProjCS_NAD1983HARN_WISCRSLaCrosseM = 103331
esriSRProjCS_NAD1983HARN_WISCRSLincolnM = 103334
esriSRProjCS_NAD1983HARN_WISCRSManitowocM = 103335
esriSRProjCS_NAD1983HARN_WISCRSMarinetteM = 103337
esriSRProjCS_NAD1983HARN_WISCRSMenomineeM = 103339
esriSRProjCS_NAD1983HARN_WISCRSMilwaukeeM = 103340
esriSRProjCS_NAD1983HARN_WISCRSOcontoM = 103342
esriSRProjCS_NAD1983HARN_WISCRSOutagamieM = 103344
esriSRProjCS_NAD1983HARN_WISCRSOzaukeeM = 103345
esriSRProjCS_NAD1983HARN_WISCRSPolkM = 103348
esriSRProjCS_NAD1983HARN_WISCRSPriceM = 103350
esriSRProjCS_NAD1983HARN_WISCRSRacineM = 103351
esriSRProjCS_NAD1983HARN_WISCRSRockM = 103353
esriSRProjCS_NAD1983HARN_WISCRSRuskM = 103354
esriSRProjCS_NAD1983HARN_WISCRSSaukM = 103355
esriSRProjCS_NAD1983HARN_WISCRSShawanoM = 103357
esriSRProjCS_NAD1983HARN_WISCRSSheboyganM = 103358
esriSRProjCS_NAD1983HARN_WISCRSSt_CroixM = 103359
esriSRProjCS_NAD1983HARN_WISCRSTrempealeauM = 103361
esriSRProjCS_NAD1983HARN_WISCRSWashingtonM = 103366
esriSRProjCS_NAD1983HARN_WISCRSWaukeshaM = 103367
esriSRProjCS_NAD1983HARN_WISCRSWaupacaM = 103368
esriSRProjCS_NAD1983HARN_WISCRSWinnebagoM = 103370
esriSRProjCS_NAD1983HARN_WISCRSBayfieldM = 103303
esriSRProjCS_NAD1983HARN_WISCRSBurnettM = 103306
esriSRProjCS_NAD1983HARN_WISCRSChippewaM = 103308
esriSRProjCS_NAD1983HARN_WISCRSColumbiaM = 103310
esriSRProjCS_NAD1983HARN_WISCRSCrawfordM = 103311
esriSRProjCS_NAD1983HARN_WISCRSDaneM = 103312
esriSRProjCS_NAD1983HARN_WISCRSEauClaireM = 103317
esriSRProjCS_NAD1983HARN_WISCRSGreenM = 103322
esriSRProjCS_NAD1983HARN_WISCRSGreenLakeM = 103323
esriSRProjCS_NAD1983HARN_WISCRSLafayetteM = 103332
esriSRProjCS_NAD1983HARN_WISCRSLangladeM = 103333
esriSRProjCS_NAD1983HARN_WISCRSMarathonM = 103336
esriSRProjCS_NAD1983HARN_WISCRSMarquetteM = 103338
esriSRProjCS_NAD1983HARN_WISCRSMonroeM = 103341
esriSRProjCS_NAD1983HARN_WISCRSOneidaM = 103343
esriSRProjCS_NAD1983HARN_WISCRSPepinM = 103346
esriSRProjCS_NAD1983HARN_WISCRSPierceM = 103347
esriSRProjCS_NAD1983HARN_WISCRSPortageM = 103349
esriSRProjCS_NAD1983HARN_WISCRSRichlandM = 103352
esriSRProjCS_NAD1983HARN_WISCRSSawyerM = 103356
esriSRProjCS_NAD1983HARN_WISCRSTaylorM = 103360
esriSRProjCS_NAD1983HARN_WISCRSVernonM = 103362
esriSRProjCS_NAD1983HARN_WISCRSVilasM = 103363
esriSRProjCS_NAD1983HARN_WISCRSWalworthM = 103364
esriSRProjCS_NAD1983HARN_WISCRSWashburnM = 103365
esriSRProjCS_NAD1983HARN_WISCRSWausharaM = 103369
esriSRProjCS_NAD1983HARN_WISCRSWoodM = 103371
esriSRProjCS_NAD1983HARN_WISCRSAdamsFtUS = 103400
esriSRProjCS_NAD1983HARN_WISCRSAshlandFtUS = 103401
esriSRProjCS_NAD1983HARN_WISCRSBarronFtUS = 103402
esriSRProjCS_NAD1983HARN_WISCRSBrownFtUS = 103404
esriSRProjCS_NAD1983HARN_WISCRSBuffaloFtUS = 103405
esriSRProjCS_NAD1983HARN_WISCRSCalumetFtUS = 103407
esriSRProjCS_NAD1983HARN_WISCRSClarkFtUS = 103409
esriSRProjCS_NAD1983HARN_WISCRSDodgeFtUS = 103413
esriSRProjCS_NAD1983HARN_WISCRSDoorFtUS = 103414
esriSRProjCS_NAD1983HARN_WISCRSDouglasFtUS = 103415
esriSRProjCS_NAD1983HARN_WISCRSDunnFtUS = 103416
esriSRProjCS_NAD1983HARN_WISCRSFlorenceFtUS = 103418
esriSRProjCS_NAD1983HARN_WISCRSFond_du_LacFtUS = 103419
esriSRProjCS_NAD1983HARN_WISCRSForestFtUS = 103420
esriSRProjCS_NAD1983HARN_WISCRSGrantFtUS = 103421
esriSRProjCS_NAD1983HARN_WISCRSIowaFtUS = 103424
esriSRProjCS_NAD1983HARN_WISCRSIronFtUS = 103425
esriSRProjCS_NAD1983HARN_WISCRSJacksonFtUS = 103426
esriSRProjCS_NAD1983HARN_WISCRSJeffersonFtUS = 103427
esriSRProjCS_NAD1983HARN_WISCRSJuneauFtUS = 103428
esriSRProjCS_NAD1983HARN_WISCRSKenoshaFtUS = 103429
esriSRProjCS_NAD1983HARN_WISCRSKewauneeFtUS = 103430
esriSRProjCS_NAD1983HARN_WISCRSLaCrosseFtUS = 103431
esriSRProjCS_NAD1983HARN_WISCRSLincolnFtUS = 103434
esriSRProjCS_NAD1983HARN_WISCRSManitowocFtUS = 103435
esriSRProjCS_NAD1983HARN_WISCRSMarinetteFtUS = 103437
esriSRProjCS_NAD1983HARN_WISCRSMenomineeFtUS = 103439
esriSRProjCS_NAD1983HARN_WISCRSMilwaukeeFtUS = 103440
esriSRProjCS_NAD1983HARN_WISCRSOcontoFtUS = 103442
esriSRProjCS_NAD1983HARN_WISCRSOutagamieFtUS = 103444
esriSRProjCS_NAD1983HARN_WISCRSOzaukeeFtUS = 103445
esriSRProjCS_NAD1983HARN_WISCRSPolkFtUS = 103448
esriSRProjCS_NAD1983HARN_WISCRSPriceFtUS = 103450
esriSRProjCS_NAD1983HARN_WISCRSRacineFtUS = 103451
esriSRProjCS_NAD1983HARN_WISCRSRockFtUS = 103453
esriSRProjCS_NAD1983HARN_WISCRSRuskFtUS = 103454
esriSRProjCS_NAD1983HARN_WISCRSSaukFtUS = 103455
esriSRProjCS_NAD1983HARN_WISCRSShawanoFtUS = 103457
esriSRProjCS_NAD1983HARN_WISCRSSheboyganFtUS = 103458
esriSRProjCS_NAD1983HARN_WISCRSSt_CroixFtUS = 103459
esriSRProjCS_NAD1983HARN_WISCRSTrempealeauFtUS = 103461
esriSRProjCS_NAD1983HARN_WISCRSWashingtonFtUS = 103466
esriSRProjCS_NAD1983HARN_WISCRSWaukeshaFtUS = 103467
esriSRProjCS_NAD1983HARN_WISCRSWaupacaFtUS = 103468
esriSRProjCS_NAD1983HARN_WISCRSWinnebagoFtUS = 103470
esriSRProjCS_NAD1983HARN_WISCRSBayfieldFtUS = 103403
esriSRProjCS_NAD1983HARN_WISCRSBurnettFtUS = 103406
esriSRProjCS_NAD1983HARN_WISCRSChippewaFtUS = 103408
esriSRProjCS_NAD1983HARN_WISCRSColumbiaFtUS = 103410
esriSRProjCS_NAD1983HARN_WISCRSCrawfordFtUS = 103411
esriSRProjCS_NAD1983HARN_WISCRSDaneFtUS = 103412
esriSRProjCS_NAD1983HARN_WISCRSEauClaireFtUS = 103417
esriSRProjCS_NAD1983HARN_WISCRSGreenFtUS = 103422
esriSRProjCS_NAD1983HARN_WISCRSGreenLakeFtUS = 103423
esriSRProjCS_NAD1983HARN_WISCRSLafayetteFtUS = 103432
esriSRProjCS_NAD1983HARN_WISCRSLangladeFtUS = 103433
esriSRProjCS_NAD1983HARN_WISCRSMarathonFtUS = 103436
esriSRProjCS_NAD1983HARN_WISCRSMarquetteFtUS = 103438
esriSRProjCS_NAD1983HARN_WISCRSMonroeFtUS = 103441
esriSRProjCS_NAD1983HARN_WISCRSOneidaFtUS = 103443
esriSRProjCS_NAD1983HARN_WISCRSPepinFtUS = 103446
esriSRProjCS_NAD1983HARN_WISCRSPierceFtUS = 103447
esriSRProjCS_NAD1983HARN_WISCRSPortageFtUS = 103449
esriSRProjCS_NAD1983HARN_WISCRSRichlandFtUS = 103452
esriSRProjCS_NAD1983HARN_WISCRSSawyerFtUS = 103456
esriSRProjCS_NAD1983HARN_WISCRSTaylorFtUS = 103460
esriSRProjCS_NAD1983HARN_WISCRSVernonFtUS = 103462
esriSRProjCS_NAD1983HARN_WISCRSVilasFtUS = 103463
esriSRProjCS_NAD1983HARN_WISCRSWalworthFtUS = 103464
esriSRProjCS_NAD1983HARN_WISCRSWashburnFtUS = 103465
esriSRProjCS_NAD1983HARN_WISCRSWausharaFtUS = 103469
esriSRProjCS_NAD1983HARN_WISCRSWoodFtUS = 103471
esriSRProjCS_Tahiti1952_UTMZone6S = 2976
esriSRProjCS_Tahaa1954_UTMZone5S = 2977
esriSRProjCS_Douala1948AEFWest = 3119
esriSRProjCS_LKS1994LithuaniaTM = 3346
esriSRProjCS_Dabola1981_UTMZone28N = 3461
esriSRProjCS_Dabola1981_UTMZone29N = 3462
esriSRProjCS_Reunion1947_TM = 3727
esriSRProjCS2Type = c_int # enum
class ISegmentGraph2(ISegmentGraph):
    _case_insensitive_ = True
    u'Provides access to members that define and navigate a topologically structured collection of segments.'
    _iid_ = GUID('{8B901909-46BF-4CF6-9D7A-FD0248F734EF}')
    _idlflags_ = ['oleautomation']
ISegmentGraph2._methods_ = [
    COMMETHOD(['propget'], HRESULT, 'Edges',
              ( ['retval', 'out'], POINTER(POINTER(IPolyline)), 'ppOutEdges' )),
]
################################################################
## code template for ISegmentGraph2 implementation
##class ISegmentGraph2_Impl(object):
##    @property
##    def Edges(self):
##        '-no docstring-'
##        #return ppOutEdges
##

class TriangleStrip(CoClass):
    u'A continuous 3D strip of triangles, where each triangle after the first shares an edge with the preceding triangle.'
    _reg_clsid_ = GUID('{8B55549A-1D26-11D4-9F5C-00C04F6BDF0D}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
class ITriangleStrip(IGeometry):
    _case_insensitive_ = True
    u'Indicator interface that identifies a triangle strip.'
    _iid_ = GUID('{A532932F-26A6-11D4-9F5E-00C04F6BDF0D}')
    _idlflags_ = ['oleautomation']
TriangleStrip._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IPointCollection, IPointCollection4, IGeometryCollection, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, ITransform2D, ITransform3D, IMAware, IZAware, IPointIDAware, IGeometry, IGeometry2, ITriangleStrip, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize]

ICircularArc._methods_ = [
    COMMETHOD([helpstring(u"Copies the center, 'from' and 'to' points, orientation and major/minor property into the input parameters.")], HRESULT, 'QueryCoords',
              ( [], POINTER(IPoint), 'Center' ),
              ( [], POINTER(IPoint), 'from' ),
              ( [], POINTER(IPoint), 'to' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'isCCW' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'IsMinor' )),
    COMMETHOD([helpstring(u"Defines this arc by a center point, 'from' and 'to' points, and orientation. If the from and to points do not lie on the same circle, the arc's center point will be adjusted.")], HRESULT, 'PutCoords',
              ( [], POINTER(IPoint), 'Center' ),
              ( [], POINTER(IPoint), 'from' ),
              ( [], POINTER(IPoint), 'to' ),
              ( [], esriArcOrientation, 'arcOrientation' )),
    COMMETHOD([helpstring(u"Returns the center point, 'from' angle, signed central angle, and radius.")], HRESULT, 'QueryCoordsByAngle',
              ( [], POINTER(IPoint), 'Center' ),
              ( ['in', 'out'], POINTER(c_double), 'FromAngle' ),
              ( ['in', 'out'], POINTER(c_double), 'centerAngle' ),
              ( ['in', 'out'], POINTER(c_double), 'arcRadius' )),
    COMMETHOD([helpstring(u"Defines this circular arc by a center point, 'from' angle, signed central angle, and radius.")], HRESULT, 'PutCoordsByAngle',
              ( [], POINTER(IPoint), 'cp' ),
              ( [], c_double, 'FromAngle' ),
              ( [], c_double, 'CentralAngle' ),
              ( [], c_double, 'arcRadius' )),
    COMMETHOD([helpstring(u"Defines the radius of this circular arc to be the distance from the arc's center point to the input point; other properties remain unchanged.")], HRESULT, 'PutRadiusByPoint',
              ( [], POINTER(IPoint), 'radialPoint' )),
    COMMETHOD(['propget', helpstring(u'The center point.')], HRESULT, 'CenterPoint',
              ( ['retval', 'out'], POINTER(POINTER(IPoint)), 'outCenter' )),
    COMMETHOD([helpstring(u'Copies the center point of this circular arc to the input point.')], HRESULT, 'QueryCenterPoint',
              ( [], POINTER(IPoint), 'Center' )),
    COMMETHOD(['propget', helpstring(u'The radius.')], HRESULT, 'Radius',
              ( ['retval', 'out'], POINTER(c_double), 'outRadius' )),
    COMMETHOD(['propput', helpstring(u'The radius.')], HRESULT, 'Radius',
              ( [], c_double, 'outRadius' )),
    COMMETHOD(['propget', helpstring(u"The angle, measured from a horizontal line through this circular arc's center point, that defines where this arc starts.")], HRESULT, 'FromAngle',
              ( ['retval', 'out'], POINTER(c_double), 'outFromAngle' )),
    COMMETHOD(['propput', helpstring(u"The angle, measured from a horizontal line through this circular arc's center point, that defines where this arc starts.")], HRESULT, 'FromAngle',
              ( [], c_double, 'outFromAngle' )),
    COMMETHOD(['propget', helpstring(u"The angle, measured from a horizontal line through this circular arc's center point, that defines where this arc ends.")], HRESULT, 'ToAngle',
              ( ['retval', 'out'], POINTER(c_double), 'outToAngle' )),
    COMMETHOD(['propput', helpstring(u"The angle, measured from a horizontal line through this circular arc's center point, that defines where this arc ends.")], HRESULT, 'ToAngle',
              ( [], c_double, 'outToAngle' )),
    COMMETHOD(['propget', helpstring(u'The included (or central) angle.')], HRESULT, 'CentralAngle',
              ( ['retval', 'out'], POINTER(c_double), 'outCentalAngle' )),
    COMMETHOD(['propput', helpstring(u'The included (or central) angle.')], HRESULT, 'CentralAngle',
              ( [], c_double, 'outCentalAngle' )),
    COMMETHOD(['propget', helpstring(u'The chord height (assigning preserves endpoints, and orientation unless chord height is < 0).')], HRESULT, 'ChordHeight',
              ( ['retval', 'out'], POINTER(c_double), 'ChordHeight' )),
    COMMETHOD(['propput', helpstring(u'The chord height (assigning preserves endpoints, and orientation unless chord height is < 0).')], HRESULT, 'ChordHeight',
              ( [], c_double, 'ChordHeight' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the arc has degenerated to a line (radius is infinite).')], HRESULT, 'IsLine',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsLine' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the arc has degenerated to a point (radius is 0).')], HRESULT, 'IsPoint',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsPoint' )),
    COMMETHOD(['propget', helpstring(u"Indicates if this circular is oriented counter-clockwise from its 'from' point to its 'to' point.")], HRESULT, 'IsCounterClockwise',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'isCCW' )),
    COMMETHOD(['propput', helpstring(u"Indicates if this circular is oriented counter-clockwise from its 'from' point to its 'to' point.")], HRESULT, 'IsCounterClockwise',
              ( [], VARIANT_BOOL, 'isCCW' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether this circular arc is a minor arc or a major arc.')], HRESULT, 'IsMinor',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsMinor' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether this circular arc is a minor arc or a major arc.')], HRESULT, 'IsMinor',
              ( [], VARIANT_BOOL, 'IsMinor' )),
    COMMETHOD([helpstring(u"Changes this arc into its complement; 'from' and 'to' points are unchanged.")], HRESULT, 'Complement'),
]
################################################################
## code template for ICircularArc implementation
##class ICircularArc_Impl(object):
##    def PutCoords(self, Center, from, to, arcOrientation):
##        u"Defines this arc by a center point, 'from' and 'to' points, and orientation. If the from and to points do not lie on the same circle, the arc's center point will be adjusted."
##        #return 
##
##    def _get(self):
##        u'The included (or central) angle.'
##        #return outCentalAngle
##    def _set(self, outCentalAngle):
##        u'The included (or central) angle.'
##    CentralAngle = property(_get, _set, doc = _set.__doc__)
##
##    def QueryCenterPoint(self, Center):
##        u'Copies the center point of this circular arc to the input point.'
##        #return 
##
##    def _get(self):
##        u"Indicates if this circular is oriented counter-clockwise from its 'from' point to its 'to' point."
##        #return isCCW
##    def _set(self, isCCW):
##        u"Indicates if this circular is oriented counter-clockwise from its 'from' point to its 'to' point."
##    IsCounterClockwise = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def IsPoint(self):
##        u'Indicates if the arc has degenerated to a point (radius is 0).'
##        #return IsPoint
##
##    def _get(self):
##        u"The angle, measured from a horizontal line through this circular arc's center point, that defines where this arc starts."
##        #return outFromAngle
##    def _set(self, outFromAngle):
##        u"The angle, measured from a horizontal line through this circular arc's center point, that defines where this arc starts."
##    FromAngle = property(_get, _set, doc = _set.__doc__)
##
##    def QueryCoordsByAngle(self, Center):
##        u"Returns the center point, 'from' angle, signed central angle, and radius."
##        #return FromAngle, centerAngle, arcRadius
##
##    def Complement(self):
##        u"Changes this arc into its complement; 'from' and 'to' points are unchanged."
##        #return 
##
##    def QueryCoords(self, Center, from, to):
##        u"Copies the center, 'from' and 'to' points, orientation and major/minor property into the input parameters."
##        #return isCCW, IsMinor
##
##    def PutCoordsByAngle(self, cp, FromAngle, CentralAngle, arcRadius):
##        u"Defines this circular arc by a center point, 'from' angle, signed central angle, and radius."
##        #return 
##
##    def _get(self):
##        u'The chord height (assigning preserves endpoints, and orientation unless chord height is < 0).'
##        #return ChordHeight
##    def _set(self, ChordHeight):
##        u'The chord height (assigning preserves endpoints, and orientation unless chord height is < 0).'
##    ChordHeight = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether this circular arc is a minor arc or a major arc.'
##        #return IsMinor
##    def _set(self, IsMinor):
##        u'Indicates whether this circular arc is a minor arc or a major arc.'
##    IsMinor = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def IsLine(self):
##        u'Indicates if the arc has degenerated to a line (radius is infinite).'
##        #return IsLine
##
##    def PutRadiusByPoint(self, radialPoint):
##        u"Defines the radius of this circular arc to be the distance from the arc's center point to the input point; other properties remain unchanged."
##        #return 
##
##    def _get(self):
##        u'The radius.'
##        #return outRadius
##    def _set(self, outRadius):
##        u'The radius.'
##    Radius = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u"The angle, measured from a horizontal line through this circular arc's center point, that defines where this arc ends."
##        #return outToAngle
##    def _set(self, outToAngle):
##        u"The angle, measured from a horizontal line through this circular arc's center point, that defines where this arc ends."
##    ToAngle = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def CenterPoint(self):
##        u'The center point.'
##        #return outCenter
##


# values for enumeration 'esriSRGeoTransformation3Type'
esriSRGeoTransformation_Monte_Mario_To_WGS_1984_3 = 1664
esriSRGeoTransformation_Monte_Mario_To_WGS_1984_4 = 1660
esriSRGeoTransformation_MOP78_To_WGS_1984_1 = 1925
esriSRGeoTransformation_NAD_1983_CSRS98_To_WGS_1984_1 = 1842
esriSRGeoTransformation_NAD_1983_CSRS98_To_WGS_1984_2 = 1946
esriSRGeoTransformation_NAD_1983_HARN_To_WGS_1984_2 = 1900
esriSRGeoTransformation_NAD_1983_HARN_To_WGS_1984_3 = 1901
esriSRGeoTransformation_NAD_1983_To_NAD_1983_CSRS98_4 = 1950
esriSRGeoTransformation_NEA74_Noumea_To_WGS_1984_1 = 1932
esriSRGeoTransformation_NGO_1948_To_ETRS_1989_1 = 1653
esriSRGeoTransformation_Nord_sahara_1959_To_WGS_1984_4 = 1815
esriSRGeoTransformation_Nord_sahara_1959_To_WGS_1984_5 = 1816
esriSRGeoTransformation_Nord_Sahara_1959_To_WGS_1984_6 = 1817
esriSRGeoTransformation_NTF_To_ETRS_1989_1 = 1651
esriSRGeoTransformation_OSNI_1952_To_WGS_1984_1 = 1955
esriSRGeoTransformation_petrels_1972_To_WGS_1984_1 = 1921
esriSRGeoTransformation_Piton_des_Neiges_To_RGR_1992_1 = 1926
esriSRGeoTransformation_Piton_des_Neiges_To_WGS_1984_1 = 1911
esriSRGeoTransformation_Point58_To_WGS_1984_1 = 1880
esriSRGeoTransformation_Pointe_Geologie_Perroud_1950_To_WGS_1984_1 = 1922
esriSRGeoTransformation_Pointe_noire_To_WGS_1984_2 = 1801
esriSRGeoTransformation_Pointe_noire_To_WGS_1984_3 = 1802
esriSRGeoTransformation_Porto_santo_1995_To_WGS_1984_2 = 1966
esriSRGeoTransformation_Porto_santo_1995_To_WGS_1984_3 = 1967
esriSRGeoTransformation_POSGAR_1998_To_SIRGAS_1 = 1774
esriSRGeoTransformation_POSGAR_1998_To_WGS_1984_1 = 1773
esriSRGeoTransformation_PSAD_1956_To_REGVEN_1 = 1769
esriSRGeoTransformation_PSAD_1956_To_WGS_1984_12 = 1811
esriSRGeoTransformation_PSAD_1956_To_WGS_1984_13 = 1095
esriSRGeoTransformation_Puerto_Rico_To_WGS_1984_3 = 1893
esriSRGeoTransformation_Pulkovo_1942_adj_1958_To_ETRS_1989_1 = 1644
esriSRGeoTransformation_Pulkovo_1942_adj_1958_To_WGS_1984_1 = 1645
esriSRGeoTransformation_Pulkovo_1942_adj_1983_To_ETRS_1989_1 = 1674
esriSRGeoTransformation_Pulkovo_1942_adj_1983_To_ETRS_1989_2 = 1775
esriSRGeoTransformation_Pulkovo_1942_adj_1983_To_WGS_1984_1 = 1675
esriSRGeoTransformation_Pulkovo_1942_To_WGS_1984_13 = 1807
esriSRGeoTransformation_Pulkovo_1942_To_WGS_1984_14 = 1808
esriSRGeoTransformation_Pulkovo_1942_To_WGS_1984_15 = 1809
esriSRGeoTransformation_Pulkovo_1942_To_WGS_1984_2 = 1679
esriSRGeoTransformation_QND_1995_To_WGS_1984_1 = 1840
esriSRGeoTransformation_Qornoq_1927_To_WGS_1984_1 = 1797
esriSRGeoTransformation_Qornoq_1927_To_WGS_1984_2 = 1798
esriSRGeoTransformation_REGVEN_To_WGS_1984_1 = 1768
esriSRGeoTransformation_Reykjavik_1900_To_WGS_1984_1 = 1994
esriSRGeoTransformation_RGFG_1995_To_WGS_1984_1 = 1907
esriSRGeoTransformation_RGF_1993_To_WGS_1984_1 = 1671
esriSRGeoTransformation_RGNC_1991_To_WGS_1984_1 = 1920
esriSRGeoTransformation_RGR_1992_To_Piton_des_Neiges_1 = 1964
esriSRGeoTransformation_RGR_1992_To_WGS_1984_1 = 1912
esriSRGeoTransformation_RRAF_1991_To_WGS_1984_1 = 4560
esriSRGeoTransformation_RT90_To_ETRS_1989_2 = 1787
esriSRGeoTransformation_RT90_To_WGS_1984_2 = 1896
esriSRGeoTransformation_Sainte_Anne_To_WGS_1984_1 = 1904
esriSRGeoTransformation_Sainte_Anne_To_WGS_1984_2 = 1905
esriSRGeoTransformation_Saint_Pierre_et_Miquelon_1950_To_WGS_1984_1 = 1923
esriSRGeoTransformation_Scoresbysund_1952_To_WGS_1984_1 = 1799
esriSRGeoTransformation_Selvagem_Grande_1938_To_WGS_1984_1 = 1965
esriSRGeoTransformation_South_Yemen_To_WGS_1984_1 = 1682
esriSRGeoTransformation_ST71_Belep_To_WGS_1984_1 = 1931
esriSRGeoTransformation_ST84_Ile_des_Pins_To_WGS_1984_1 = 1930
esriSRGeoTransformation_St_Vincent_1945_To_WGS_1984_1 = 1959
esriSRGeoTransformation_SWEREF99_To_ETRS_1989_1 = 1878
esriSRGeoTransformation_SWEREF99_To_WGS_1984_1 = 1879
esriSRGeoTransformation_S_JTSK_To_ETRS_1989_1 = 1622
esriSRGeoTransformation_S_JTSK_To_ETRS_1989_2 = 1624
esriSRGeoTransformation_S_JTSK_To_WGS_1984_1 = 1623
esriSRGeoTransformation_S_JTSK_To_WGS_1984_2 = 1625
esriSRGeoTransformation_Tahaa_To_WGS_1984_1 = 1913
esriSRGeoTransformation_Tahiti_To_WGS_1984_1 = 1924
esriSRGeoTransformation_Tete_To_WGS_1984_1 = 1683
esriSRGeoTransformation_Tete_To_WGS_1984_2 = 1684
esriSRGeoTransformation_Tete_To_WGS_1984_3 = 1685
esriSRGeoTransformation_Tete_To_WGS_1984_4 = 1686
esriSRGeoTransformation_Tete_To_WGS_1984_5 = 1687
esriSRGeoTransformation_Timbalai_1948_To_WGS_1984_4 = 1852
esriSRGeoTransformation_TM65_To_ETRS_1989_1 = 1640
esriSRGeoTransformation_TM65_To_WGS_1984_2 = 1641
esriSRGeoTransformation_TM75_To_ETRS_1989_2 = 1953
esriSRGeoTransformation_TM75_To_WGS_1984_2 = 1954
esriSRGeoTransformation_TM75_To_WGS_1984_3 = 1956
esriSRGeoTransformation_Yoff_To_WGS_1972_1 = 1828
esriSRGeoTransformation_Amersfoort_To_ETRS_1989_mb = 1066
esriSRGeoTransformation_Chatham_Islands_1979_To_NZGD_2000_1 = 1082
esriSRGeoTransformation_Chatham_Islands_1979_To_WGS_1984_1 = 1081
esriSRGeoTransformation_Chatham_Island_1971_To_WGS_1984 = 1080
esriSRGeoTransformation_DHDN_To_WGS_1984_3x = 108206
esriSRGeoTransformation_DHDN_To_WGS_1984_4x = 108207
esriSRGeoTransformation_DHDN_To_WGS_1984_5x = 108208
esriSRGeoTransformation_DHDN_To_WGS_1984_6x = 108209
esriSRGeoTransformation_DHDN_To_WGS_1984_7x = 108210
esriSRGeoTransformation_EUREF_FIN_To_ETRS_1989 = 108226
esriSRGeoTransformation_EUREF_FIN_To_WGS_1984 = 108227
esriSRGeoTransformation_Israel_To_WGS_1984 = 1073
esriSRGeoTransformation_JGD_2000_To_WGS_1984 = 108107
esriSRGeoTransformation_KKJ_To_ETRS_1989_2 = 10098
esriSRGeoTransformation_KKJ_To_EUREF_FIN = 108229
esriSRGeoTransformation_KKJ_To_WGS_1984_2 = 10099
esriSRGeoTransformation_Jordan_To_WGS_1984 = 108233
esriSRGeoTransformation_La_Canoa_To_SIRGAS = 108217
esriSRGeoTransformation_Lisboa_Hayford_To_Datum_73_1 = 108222
esriSRGeoTransformation_Lisboa_Hayford_To_Datum_73_2 = 108223
esriSRGeoTransformation_Lisboa_Hayford_To_Lisboa_Bessel_1 = 108224
esriSRGeoTransformation_Lisboa_Hayford_To_Lisboa_Bessel_2 = 108225
esriSRGeoTransformation_Midway_1961_To_WGS_1984 = 15818
esriSRGeoTransformation_Midway_1961_To_WGS_1984_old = 15817
esriSRGeoTransformation_Observ_Meteor_1965_To_WGS_1984_1 = 108234
esriSRGeoTransformation_Palestine_1923_To_WGS_1984_1x = 108220
esriSRGeoTransformation_Palestine_1923_To_WGS_1984_2x = 108232
esriSRGeoTransformation_SWEREF99_To_RT90 = 108212
esriSRGeoTransformation_S_JTSK_To_Pulkovo_1942 = 108202
esriSRGeoTransformation_WGS_1984_To_Observ_Meteor_1965 = 108211
esriSRGeoTransformation_WGS_1984_To_Observ_Meteor_1965_2 = 108235
esriSRGeoTransformation_WGS_1984_To_RT90 = 108213
esriSRGeoTransformation_Accra_To_WGS_1972_BE = 1570
esriSRGeoTransformation_Accra_To_WGS_1984 = 1569
esriSRGeoTransformation_AGD_1966_To_GDA_1994_8 = 1594
esriSRGeoTransformation_AGD_1966_To_GDA_1994_9 = 1595
esriSRGeoTransformation_Amersfoort_To_ETRS_1989 = 1751
esriSRGeoTransformation_Aratu_To_WGS_1984_1 = 15754
esriSRGeoTransformation_Aratu_To_WGS_1984_2 = 1550
esriSRGeoTransformation_Aratu_To_WGS_1984_3 = 1551
esriSRGeoTransformation_Aratu_To_WGS_1984_4 = 1552
esriSRGeoTransformation_Belge_1972_To_WGS_1984_1 = 1609
esriSRGeoTransformation_Belge_1972_To_WGS_1984_2 = 1610
esriSRGeoTransformation_Bissau_To_WGS_1984 = 1547
esriSRGeoTransformation_Bogota_Bogota_To_WGS_1984 = 8174
esriSRGeoTransformation_Bogota_To_WGS_1984_2 = 1597
esriSRGeoTransformation_Chos_Malal_1914_To_Campo_Inchauspe = 1528
esriSRGeoTransformation_Chos_Malal_1914_To_WGS_1984 = 8517
esriSRGeoTransformation_Conakry_1905_To_WGS_1984 = 1517
esriSRGeoTransformation_Dabola_1981_To_WGS_1984 = 1518
esriSRGeoTransformation_Deir_ez_zor_To_WGS_1972_BE = 1584
esriSRGeoTransformation_Deir_ez_zor_To_WGS_1984_2 = 15741
esriSRGeoTransformation_Deir_ez_zor_To_WGS_1984_3 = 1586
esriSRGeoTransformation_Deir_ez_zor_To_WGS_1984_4 = 1587
esriSRGeoTransformation_DHDN_To_ETRS_1989 = 1309
esriSRGeoTransformation_ED_1950_To_ETRS_1989_1 = 1588
esriSRGeoTransformation_ED_1950_To_WGS_1984_23 = 1612
esriSRGeoTransformation_ED_1950_To_WGS_1984_24 = 1613
esriSRGeoTransformation_Egypt_1907_To_WGS_1972 = 1545
esriSRGeoTransformation_Egypt_1907_To_WGS_1984_3 = 1546
esriSRGeoTransformation_Hanoi_1972_To_WGS_1984 = 1544
esriSRGeoTransformation_Hito_XVIII_1963_To_WGS_1984 = 1529
esriSRGeoTransformation_Hungarian_1972_To_ETRS_1989_1 = 1829
esriSRGeoTransformation_Indian_1960_To_WGS_1972_BE = 1541
esriSRGeoTransformation_Indian_1960_To_WGS_1984_1 = 8532
esriSRGeoTransformation_Indian_1960_To_WGS_1984_2 = 1542
esriSRGeoTransformation_Indian_1960_To_WGS_1984_3 = 1543
esriSRGeoTransformation_Indian_1975_To_WGS_1984_3 = 1537
esriSRGeoTransformation_IRENET95_To_ETRS_1989 = 1611
esriSRGeoTransformation_Kalianpur_1937_To_WGS_1984_2 = 1533
esriSRGeoTransformation_Korean_1995_To_WGS_1984_1 = 1558
esriSRGeoTransformation_Malongo_1987_To_WGS_1984_2 = 1557
esriSRGeoTransformation_MGI_To_WGS_1984_3 = 1618
esriSRGeoTransformation_Minna_To_WGS_1984_3 = 1754
esriSRGeoTransformation_Monte_Mario_Rome_To_WGS_1984 = 8175
esriSRGeoTransformation_NAD_1927_To_WGS_1984_30 = 1530
esriSRGeoTransformation_NAD_1983_harn_To_WGS_1984 = 1580
esriSRGeoTransformation_Nahrwan_1967_To_WGS_1984_4 = 1531
esriSRGeoTransformation_Nahrwan_1967_To_WGS_1984_5 = 1536
esriSRGeoTransformation_Naparima_1955_To_WGS_1984_2 = 1555
esriSRGeoTransformation_Naparima_1955_To_WGS_1984_3 = 1556
esriSRGeoTransformation_Nord_Sahara_1959_To_WGS_1972_BE = 1560
esriSRGeoTransformation_Nord_Sahara_1959_To_WGS_1984_3 = 8562
esriSRGeoTransformation_NZGDd_1949_To_WGS_1984_2 = 1564
esriSRGeoTransformation_NZGD_2000_To_WGS_1984_1 = 1565
esriSRGeoTransformation_PDO_1993_To_WGS_1972 = 1616
esriSRGeoTransformation_PDO_1993_To_WGS_1984_3 = 1617
esriSRGeoTransformation_POSGAR_To_WGS_1984_1 = 1598
esriSRGeoTransformation_PSAD_1956_To_WGS_1984_10 = 1582
esriSRGeoTransformation_PSAD_1956_To_WGS_1984_11 = 1583
esriSRGeoTransformation_Qatar_1974_To_WGS_1984_2 = 1562
esriSRGeoTransformation_Qatar_1974_To_WGS_1984_3 = 1563
esriSRGeoTransformation_SAD_1969_To_WGS_1984_14 = 1877
esriSRGeoTransformation_Samoa_1962_To_WGS_1984 = 1577
esriSRGeoTransformation_Sierra_Leone_1968_To_WGS_1984 = 1614
esriSRGeoTransformation_SIRGAS_To_WGS_1984_1 = 1581
esriSRGeoTransformation_South_Yemen_To_Yemen_NGN_1996 = 1539
esriSRGeoTransformation_Timbalai_1948_To_WGS_1984_2 = 1592
esriSRGeoTransformation_Timbalai_1948_To_WGS_1984_3 = 1615
esriSRGeoTransformation_Yemen_NGN_1996_To_WGS_1984 = 1540
esriSRGeoTransformation_NTF_Paris_To_RGF_1993_1 = 108102
esriSRGeoTransformation_Tokyo_To_JGD_2000_1 = 15483
esriSRGeoTransformation_REGVEN_To_SIRGAS_1 = 1767
esriSRGeoTransformation_Hjorsey_1955_To_WGS_1984 = 1951
esriSRGeoTransformation_Tokyo_To_WGS_1984_2001 = 108106
esriSRGeoTransformation_Pohnpei_To_NAD_1983 = 108133
esriSRGeoTransformation_Bab_South_To_NAD_1983 = 108134
esriSRGeoTransformation_Majuro_To_NAD_1983 = 108135
esriSRGeoTransformation_Guam_1963_To_HARN_Rota = 108137
esriSRGeoTransformation_Guam_1963_To_HARN_Saipan = 108138
esriSRGeoTransformation_Guam_1963_To_HARN_Tinian_Sguijan = 108139
esriSRGeoTransformation_NGO_1948_To_WGS_1984 = 108201
esriSRGeoTransformation_Carthage_Paris_To_Carthage = 1881
esriSRGeoTransformation_Gunung_Segara_Jakarta_To_Gunung_Segara = 1883
esriSRGeoTransformation_Lisbon_1890_Lisbon_To_Lisbon_1890 = 1991
esriSRGeoTransformation_Nord_Sahara_1959_Paris_To_Nord_Sahara_1959 = 1882
esriSRGeoTransformation_S_JTSK_Ferro_To_S_JTSK = 1884
esriSRGeoTransformation_Bern_1898_Bern_To_CH1903 = 1765
esriSRGeoTransformation_Puerto_Rico_To_NAD_1983 = 1461
esriSRGeoTransformation_NAD_1983_To_HARN_Iowa = 1705
esriSRGeoTransformation_Samoa_1962_To_HARN_EastSamoa = 1579
esriSRGeoTransformation_Samoa_1962_To_HARN_WestSamoa = 1578
esriSRGeoTransformation_Guam_1963_To_HARN_Guam = 1068
esriSRGeoTransformation_AGD_1966_To_GDA_1994_11_NTv2 = 1803
esriSRGeoTransformation_AGD_1984_To_GDA_1994_5_NTv2 = 1804
esriSRGeoTransformation_NZGD_1949_To_WGS_1984_3_NTv2 = 1670
esriSRGeoTransformation_RGF_1993_To_NTF_NTv2 = 15958
esriSRGeoTransformation_RGNC_1991_To_IGN72_Grande_Terre_NTv2 = 108471
esriSRGeoTransformation_RGNC_1991_To_NEA74_Noumea_NTv2 = 108472
esriSRGeoTransformation_ATS_1977_To_NAD_1983_CSRS98_NTv2_NewBrunswick = 1841
esriSRGeoTransformation_ATS_1977_To_NAD_1983_CSRS98_2 = 1846
esriSRGeoTransformation_ATS_1977_To_NAD_1983_CSRS98_NTv2_PEI = 1846
esriSRGeoTransformation_ATS_1977_To_NAD_1983_CSRS98_NTv2_NovaScotia = 1850
esriSRGeoTransformation_ATS_1977_To_NAD_1983_CSRS98_NTv2_Maritimes = 108302
esriSRGeoTransformation_NAD_1927_CGQ77_To_NAD_1983_2 = 1575
esriSRGeoTransformation_NAD_1927_CGQ77_To_NAD_1983_CSRS98 = 1845
esriSRGeoTransformation_NAD_1927_To_NAD_1983_6 = 1573
esriSRGeoTransformation_NAD_1927_To_NAD_1983_CSRS98_1 = 1844
esriSRGeoTransformation_NAD_1927_To_NAD_1983_CSRS98_2 = 1847
esriSRGeoTransformation_NAD_1983_To_NAD_1983_CSRS98_1 = 1843
esriSRGeoTransformation_NAD_1983_To_NAD_1983_CSRS98_2 = 1848
esriSRGeoTransformation_NAD_1983_To_NAD_1983_CSRS98_3 = 1849
esriSRGeoTransformation_AGD_1984_To_GDA_1994_3 = 1559
esriSRGeoTransformation_Ain_el_Abd_To_WGS_1984_3 = 1055
esriSRGeoTransformation_Ain_El_Abd_To_WGS_1984_4 = 1056
esriSRGeoTransformation_Ain_El_Abd_To_WGS_1984_5 = 1057
esriSRGeoTransformation_Ain_El_Abd_To_WGS_1984_6 = 1058
esriSRGeoTransformation_KOC_To_WGS_1984_1 = 1059
esriSRGeoTransformation_NGN_To_WGS_1984_1 = 1060
esriSRGeoTransformation_KUDAMS_To_WGS_1984_1 = 1061
esriSRGeoTransformation_KUDAMS_To_WGS_1984_2 = 1062
esriSRGeoTransformation_Vientiane_1982_To_Lao_1997_1 = 1063
esriSRGeoTransformation_Lao_1993_To_Lao_1997_1 = 1064
esriSRGeoTransformation_Lao_1997_To_WGS_1984_1 = 1065
esriSRGeoTransformation_Minna_To_WGS_1984_11 = 1067
esriSRGeoTransformation_Guam_1963_To_WGS_1984_1 = 1070
esriSRGeoTransformation_Palestine_1923_To_Israel_1 = 1071
esriSRGeoTransformation_Palestine_1923_To_WGS_1984_1 = 1074
esriSRGeoTransformation_ED_1950_To_WGS_1984_38 = 1075
esriSRGeoTransformation_Luxembourg_1930_To_ETRS_1989_2 = 1078
esriSRGeoTransformation_Luxembourg_1930_To_WGS_1984_2 = 1079
esriSRGeoTransformation_Jamaica_1969_To_WGS_1972_2 = 1083
esriSRGeoTransformation_Jamaica_1969_To_WGS_1984_2 = 1085
esriSRGeoTransformation_Jamaica_1969_To_WGS_1984_3 = 15927
esriSRGeoTransformation_ED_1950_To_WGS_1984_37 = 1087
esriSRGeoTransformation_Monte_Mario_To_WGS_1984_5 = 1088
esriSRGeoTransformation_Monte_Mario_To_WGS_1984_6 = 1089
esriSRGeoTransformation_Monte_Mario_To_WGS_1984_7 = 1090
esriSRGeoTransformation_Monte_Mario_To_WGS_1984_8 = 1091
esriSRGeoTransformation_Monte_Mario_To_WGS_1984_9 = 1092
esriSRGeoTransformation_Monte_Mario_To_WGS_1984_10 = 1093
esriSRGeoTransformation_Monte_Mario_To_WGS_1984_11 = 1094
esriSRGeoTransformation_ED_1950_ED77_To_WGS_1984_2 = 1141
esriSRGeoTransformation_Nord_Sahara_1959_To_WGS_1984_2 = 1255
esriSRGeoTransformation_WGS_1972_BE_To_WGS_1972_1 = 1239
esriSRGeoTransformation_WGS_1972_BE_To_WGS_1984_1 = 1240
esriSRGeoTransformation_RT90_To_ETRS_1989_1 = 1437
esriSRGeoTransformation_ED_1950_To_WGS_1984_39 = 1853
esriSRGeoTransformation_Porto_Santo_1936_To_WGS_1984_1 = 1888
esriSRGeoTransformation_Anna_1_1965_To_WGS_1984 = 15794
esriSRGeoTransformation_Antigua_1943_To_WGS_1984_NGA = 15811
esriSRGeoTransformation_Ascension_Island_1958_To_WGS_1984 = 15797
esriSRGeoTransformation_Astro_1952_To_WGS_1984 = 15799
esriSRGeoTransformation_Ayabelle_To_WGS_1984 = 15800
esriSRGeoTransformation_Beacon_E_1945_To_WGS_1984 = 15796
esriSRGeoTransformation_Bellevue_IGN_To_WGS_1984 = 15801
esriSRGeoTransformation_Camp_Area_To_WGS_1984 = 15802
esriSRGeoTransformation_Canton_1966_To_WGS_1984 = 15803
esriSRGeoTransformation_Cape_Canaveral_To_WGS_1984 = 15804
esriSRGeoTransformation_Deception_Island_To_WGS_1984 = 15812
esriSRGeoTransformation_DOS_1968_To_WGS_1984 = 108259
esriSRGeoTransformation_DOS_71_4_To_WGS_1984 = 15798
esriSRGeoTransformation_Easter_Island_1967_To_WGS_1984 = 15806
esriSRGeoTransformation_Estonia_1937_To_WGS_1984_NGA = 108261
esriSRGeoTransformation_European_1979_To_WGS_1984 = 15752
esriSRGeoTransformation_Fort_Thomas_1955_To_WGS_1984 = 108262
esriSRGeoTransformation_GUX_1_To_WGS_1984 = 108263
esriSRGeoTransformation_Hermannskogel_To_WGS_1984 = 108264
esriSRGeoTransformation_ISTS_061_1968_To_WGS_1984 = 15813
esriSRGeoTransformation_ISTS_073_1969_To_WGS_1984 = 15808
esriSRGeoTransformation_Johnston_Island_1961_To_WGS_1984 = 15809
esriSRGeoTransformation_Kusaie_1951_To_WGS_1984 = 15810
esriSRGeoTransformation_LC5_1961_To_WGS_1984 = 108268
esriSRGeoTransformation_Pico_de_Las_Nieves_To_WGS_1984 = 15815
esriSRGeoTransformation_Pitcairn_1967_To_WGS_1984 = 15819
esriSRGeoTransformation_Reunion_To_WGS_1984_NGA = 15751
esriSRGeoTransformation_Santo_DOS_1965_To_WGS_1984 = 15820
esriSRGeoTransformation_South_Asia_Singapore_To_WGS_1984 = 108269
esriSRGeoTransformation_S_JTSK_To_WGS_1984_NGA = 15965
esriSRGeoTransformation_Tern_Island_1961_To_WGS_1984 = 15795
esriSRGeoTransformation_Tristan_1968_To_WGS_1984 = 15816
esriSRGeoTransformation_Viti_Levu_1916_To_WGS_1984 = 15821
esriSRGeoTransformation_Wake_Eniwetok_1960_To_WGS_1984 = 15822
esriSRGeoTransformation_Wake_Island_1952_To_WGS_1984 = 15823
esriSRGeoTransformation_Estonia_1937_To_ETRS_1989 = 108272
esriSRGeoTransformation_D48_To_ETRS_1989 = 108276
esriSRGeoTransformation_D48_To_WGS_1984 = 108277
esriSRGeoTransformation_ITRF_2000_To_WGS_1984 = 108280
esriSRGeoTransformation_ITRF_2000_To_NAD_1983_HARN = 108281
esriSRGeoTransformation_WGS_1984_ITRF00_To_NAD_1983_HARN = 108282
esriSRGeoTransformation_Ocotepeque_1935_To_WGS_1984_RN = 108283
esriSRGeoTransformation_Ocotepeque_1935_To_WGS_1984_3PAR = 108284
esriSRGeoTransformation_JAD_2001_To_WGS_1984 = 15925
esriSRGeoTransformation_MONREF_1997_To_MSK_1942_1 = 108286
esriSRGeoTransformation_MONREF_1997_To_MSK_1942_2 = 108287
esriSRGeoTransformation_MONREF_1997_To_Pulkovo_1942_1 = 108288
esriSRGeoTransformation_MONREF_1997_To_Pulkovo_1942_2 = 108289
esriSRGeoTransformation_MAGNA_To_SIRGAS = 108290
esriSRGeoTransformation_Bogota_To_MAGNA_Region_1_MB = 15730
esriSRGeoTransformation_Bogota_To_MAGNA_Region_2_MB = 15731
esriSRGeoTransformation_Bogota_To_MAGNA_Region_3_MB = 15732
esriSRGeoTransformation_Bogota_To_MAGNA_Region_4_MB = 15733
esriSRGeoTransformation_Bogota_To_MAGNA_Region_5_MB = 15734
esriSRGeoTransformation_Bogota_To_MAGNA_Region_6_MB = 15735
esriSRGeoTransformation_Bogota_To_MAGNA_Region_7_MB = 15736
esriSRGeoTransformation_Bogota_To_MAGNA_Region_8_MB = 15737
esriSRGeoTransformation_Guam_1963_To_WGS_1984_Saipan = 108299
esriSRGeoTransformation_NAD_1983_HARN_To_WGS_1984_Saipan = 108300
esriSRGeoTransformation_Pohnpei_To_WGS_1984 = 108303
esriSRGeoTransformation3Type = c_int # enum
class IConstructBezierCurve(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that construct a Bezier curve using other geometries and measures.'
    _iid_ = GUID('{252C0510-B381-11D1-A2D4-0000F8775FBF}')
    _idlflags_ = ['oleautomation']
IConstructBezierCurve._methods_ = [
    COMMETHOD([helpstring(u'Constructs a Bezier curve from tangents at both endpoints.')], HRESULT, 'ConstructTangentsAtEndpoints',
              ( [], POINTER(ILine), 'pTangentAtFrom' ),
              ( [], POINTER(ILine), 'pTangentAtTo' )),
]
################################################################
## code template for IConstructBezierCurve implementation
##class IConstructBezierCurve_Impl(object):
##    def ConstructTangentsAtEndpoints(self, pTangentAtFrom, pTangentAtTo):
##        u'Constructs a Bezier curve from tangents at both endpoints.'
##        #return 
##

class LinePolygonHelper(CoClass):
    u'Helper class for processing of polygons consisting of rings formed from linear segments'
    _reg_clsid_ = GUID('{2E53C850-5AE3-4B79-8E72-FA0C0018F861}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
class ILinePolygonHelper(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Helper class for polygons, formed from linear segments.'
    _iid_ = GUID('{C7AC18FB-782E-47F1-A9BC-CF7953DDA963}')
    _idlflags_ = ['oleautomation']
LinePolygonHelper._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILinePolygonHelper]


# values for enumeration 'esriConstructDivideEnum'
esriDivideIntoSegments = 0
esriDivideIntoParts = 1
esriDivideIntoPolylines = 2
esriConstructDivideEnum = c_int # enum
IConstructGeometryCollection._methods_ = [
    COMMETHOD([helpstring(u'Locates additional points equally spaced along the input polyline, and create either new segments, parts or polylines depending on the value of divideHow.')], HRESULT, 'ConstructDivideEqual',
              ( [], POINTER(IPolyline), 'divideSource' ),
              ( [], c_int, 'numDivisions' ),
              ( [], esriConstructDivideEnum, 'divideHow' )),
    COMMETHOD([helpstring(u'Locates additional points along the input polyline, spaced at a specified interval, and create either new segments, parts, or polylines depending on the value of divideHow.')], HRESULT, 'ConstructDivideLength',
              ( [], POINTER(IPolyline), 'divideSource' ),
              ( [], c_double, 'Length' ),
              ( [], VARIANT_BOOL, 'asRatio' ),
              ( [], esriConstructDivideEnum, 'divideHow' )),
]
################################################################
## code template for IConstructGeometryCollection implementation
##class IConstructGeometryCollection_Impl(object):
##    def ConstructDivideLength(self, divideSource, Length, asRatio, divideHow):
##        u'Locates additional points along the input polyline, spaced at a specified interval, and create either new segments, parts, or polylines depending on the value of divideHow.'
##        #return 
##
##    def ConstructDivideEqual(self, divideSource, numDivisions, divideHow):
##        u'Locates additional points equally spaced along the input polyline, and create either new segments, parts or polylines depending on the value of divideHow.'
##        #return 
##

class IFunctionalSurface(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to information about the functional surface, generating heights given x,y locations. Also see IFunctionalSurface2.'
    _iid_ = GUID('{98D17B10-951C-11D2-BCFC-0000F875BCCE}')
    _idlflags_ = ['oleautomation']
class IFunctionalSurface2(IFunctionalSurface):
    _case_insensitive_ = True
    u'Provides access to members that allow changes to be made to the interpolation domain, in addition to the IFunctionalSurface members.'
    _iid_ = GUID('{E91AE5C7-2C16-11D4-80E2-00C04FA0ADF8}')
    _idlflags_ = ['oleautomation']
IFunctionalSurface._methods_ = [
    COMMETHOD(['propget', helpstring(u'The surface Z = f(x,y).')], HRESULT, 'Z',
              ( [], c_double, 'X' ),
              ( [], c_double, 'Y' ),
              ( ['retval', 'out'], POINTER(c_double), 'Z' )),
    COMMETHOD(['propget', helpstring(u'The interpolation domain of the surface.')], HRESULT, 'Domain',
              ( ['retval', 'out'], POINTER(POINTER(IPolygon)), 'Domain' )),
]
################################################################
## code template for IFunctionalSurface implementation
##class IFunctionalSurface_Impl(object):
##    @property
##    def Domain(self):
##        u'The interpolation domain of the surface.'
##        #return Domain
##
##    @property
##    def Z(self, X, Y):
##        u'The surface Z = f(x,y).'
##        #return Z
##

IFunctionalSurface2._methods_ = [
    COMMETHOD(['propput', helpstring(u'The interpolation domain of the surface.')], HRESULT, 'Domain',
              ( [], POINTER(IPolygon), 'rhs' )),
]
################################################################
## code template for IFunctionalSurface2 implementation
##class IFunctionalSurface2_Impl(object):
##    def _set(self, rhs):
##        u'The interpolation domain of the surface.'
##    Domain = property(fset = _set, doc = _set.__doc__)
##

class TexturePersistenceProperties(CoClass):
    u'Texture Persistence properties object.'
    _reg_clsid_ = GUID('{01CFEAF1-4D26-4084-84F8-7D2FDA7C40D9}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
class ITexturePersistenceProperties(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to MultiPatch texture persistence properties.'
    _iid_ = GUID('{E46BC8FF-56CA-4F70-A4A4-70F7BE5F5B2B}')
    _idlflags_ = []
TexturePersistenceProperties._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ITexturePersistenceProperties]


# values for enumeration 'esriSRParameter3Type'
esriSRParameter_Height = 100005
esriSRParameter3Type = c_int # enum
class ProjectedCoordinateSystem(CoClass):
    u'Creates a projected coordinate system.'
    _reg_clsid_ = GUID('{2A626700-1DD2-11B2-BF51-08002022F573}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
class IProjectedCoordinateSystem4GEN(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control additional properties and methods for projected coordinate systems. IProjectedCoordinateSystem4GEN is generic version of IProjectedCoordinateSystem4.'
    _iid_ = GUID('{D44EDB15-8866-4641-872D-3C81F73AC8AA}')
    _idlflags_ = ['oleautomation']
class ISpatialReference2GEN(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to additional members that control a SpatialReference. ISpatialReference2GEN is generic version of ISpatialReference.'
    _iid_ = GUID('{3B563182-CF62-4D40-9157-5022F7AE4561}')
    _idlflags_ = ['oleautomation']
class IESRISpatialReferenceGEN(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that generate well known string (WKS) representations of spatial reference objects. IESRISpatialReference has been deprecated and IESRISpatialReferenceGEN should be used.'
    _iid_ = GUID('{F90E304C-A0F7-4A7D-9F62-25FD2A5C96AF}')
    _idlflags_ = ['oleautomation']
class IESRISpatialReferenceGEN2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that generate well known string representations for spatial reference objects. The strings include authority metadata.'
    _iid_ = GUID('{3F9863B9-5477-4757-AC6F-63204DE301EE}')
    _idlflags_ = ['oleautomation']
class IPRJSpatialReferenceGEN(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the import/export operations components of a spatial reference system.  IPRJSpatialReference has been deprecated and IPRJSpatialReferenceGEN should be used.'
    _iid_ = GUID('{F0E1978B-AB3D-4F82-A374-C5533B179B17}')
    _idlflags_ = ['oleautomation']
class IProjectedCoordinateSystem2(IProjectedCoordinateSystem):
    _case_insensitive_ = True
    u'Provides access to members that control additional properties and methods for projected coordinate systems.'
    _iid_ = GUID('{A690307D-6C11-43A1-966A-9E8DB0672033}')
    _idlflags_ = []
class IProjectedCoordinateSystem3(IProjectedCoordinateSystem2):
    _case_insensitive_ = True
    u'Provides access to members that control additional properties and methods for projected coordinate systems.'
    _iid_ = GUID('{D9B13C10-5C5E-11D5-9FEE-00C04F6BDD7F}')
    _idlflags_ = []
class IProjectedCoordinateSystem4(IProjectedCoordinateSystem3):
    _case_insensitive_ = True
    u'Provides access to members that control additional properties and methods for projected coordinate systems.'
    _iid_ = GUID('{D765FB6B-05D3-4398-86AC-79430DE530E5}')
    _idlflags_ = []
class IProjectedCoordinateSystem5(IProjectedCoordinateSystem4):
    _case_insensitive_ = True
    u'Provides access to members that control additional properties and methods for projected coordinate systems.'
    _iid_ = GUID('{734E8D44-09B8-4796-8FB7-1985A32BE7BE}')
    _idlflags_ = []
class IProjectedCoordinateSystemEdit(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the properties of a projected coordinate system.'
    _iid_ = GUID('{228D7220-D335-11D1-BC9B-0000F875BCCE}')
    _idlflags_ = []
class ISpatialReference2(ISpatialReference):
    _case_insensitive_ = True
    u'Provides access to additional members that control a SpatialReference.'
    _iid_ = GUID('{3267D410-F5D9-11D3-9F69-00C04F6BDD7F}')
    _idlflags_ = []
class ISpatialReference3(ISpatialReference2):
    _case_insensitive_ = True
    u'Provides access to additional members that associate a spatial reference with a vertical coordinate system.'
    _iid_ = GUID('{170572BF-545C-45A8-A45D-0D33C79441C7}')
    _idlflags_ = []
class IESRISpatialReference(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the import/export operations components of a spatial reference system. This interface has been deprecated and IESRISpatialReferenceGEN should be used.'
    _iid_ = GUID('{E78F2CD0-C9B2-11D1-BC93-0000F875BCCE}')
    _idlflags_ = ['oleautomation', 'hidden']
class IPRJSpatialReference(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the import/export operations components of a spatial reference system. IPRJSpatialReference has been deprecated and IPRJSpatialReferenceGEN should be used.'
    _iid_ = GUID('{BE52F1B6-7BAE-4BAB-9E92-AAD9DD9331DE}')
    _idlflags_ = ['oleautomation', 'hidden']
class ISRPersistStream(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream):
    _case_insensitive_ = True
    u'Provides access to methods for persisting precision information.  Extends IPersistStream.'
    _iid_ = GUID('{E88C7DB0-9E84-11D2-BD00-0000F875BCCE}')
    _idlflags_ = ['oleautomation']
class IControlPrecision(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'IControlPrecision interface.'
    _iid_ = GUID('{ED4E18DD-EE33-11D3-9FEF-00C04F6BC724}')
    _idlflags_ = []
class IControlPrecision2(IControlPrecision):
    _case_insensitive_ = True
    u'IControlPrecision2 interface.'
    _iid_ = GUID('{A1B0D8B3-474C-4FAB-808E-0A3C5C498B1B}')
    _idlflags_ = []
ProjectedCoordinateSystem._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IProjectedCoordinateSystem4GEN, ISpatialReference2GEN, IESRISpatialReferenceGEN, IESRISpatialReferenceGEN2, IPRJSpatialReferenceGEN, IProjectedCoordinateSystem, IProjectedCoordinateSystem2, IProjectedCoordinateSystem3, IProjectedCoordinateSystem4, IProjectedCoordinateSystem5, IProjectedCoordinateSystemEdit, ISpatialReference, ISpatialReference2, ISpatialReference3, ISpatialReference4, ISpatialReferenceInfo, IESRISpatialReference, IPRJSpatialReference, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, ICompareCoordinateSystems, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, ISRPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, IControlPrecision, IControlPrecision2, ISpatialReferenceTolerance, ISpatialReferenceResolution, ISpatialReferenceAuthority]


# values for enumeration 'esriSRGeoCS2Type'
esriSRGeoCS_S_JTSK_FERRO = 4818
esriSRGeoCS_Estonia1937 = 104101
esriSRGeoCS_Hermannskogel = 104102
esriSRGeoCS_SierraLeone1960 = 104103
esriSRGeoCS_HongKong1980 = 4611
esriSRGeoCS_LisboaBessel = 104105
esriSRGeoCS_LisboaHayford = 104106
esriSRGeoCS_RGF1993 = 4171
esriSRGeoCS_NZGD_2000 = 4167
esriSRGeoCS_Clarke1866AuthalicSphere = 4052
esriSRGeoCS_Voirol1879 = 4671
esriSRGeoCS_Voirol1879Paris = 4821
esriSRGeoCS_SIRGAS2000 = 4674
esriSRGeoCS_Vientiane1982 = 4676
esriSRGeoCS_Lao1993 = 4677
esriSRGeoCS_Lao1997 = 4678
esriSRGeoCS_Jouik1961 = 4679
esriSRGeoCS_Nouakchott1965 = 4680
esriSRGeoCS_Mauritania1999 = 4702
esriSRGeoCS_Gulshan303 = 4682
esriSRGeoCS_D48 = 104131
esriSRGeoCS_Ocotepeque1935 = 5451
esriSRGeoCS_JAD2001 = 4758
esriSRGeoCS_MONREF1997 = 104134
esriSRGeoCS_MSK1942 = 104135
esriSRGeoCS_PRJ1992 = 4683
esriSRGeoCS_MAGNA = 4686
esriSRGeoCS_RGPF = 4687
esriSRGeoCS_FatuIva1972 = 4688
esriSRGeoCS_IGN63HivaOa = 4689
esriSRGeoCS_Tahiti1979 = 4690
esriSRGeoCS_Moorea1987 = 4691
esriSRGeoCS_Maupiti1983 = 4692
esriSRGeoCS_Nakhl_e_Ghanem = 4693
esriSRGeoCS_POSGAR94 = 4694
esriSRGeoCS_Katanga1955 = 4695
esriSRGeoCS_Kasai1953 = 4696
esriSRGeoCS_IGC1962_6th_Parallel_S = 4697
esriSRGeoCS_IGCB1955 = 4701
esriSRGeoCS_MHAST1951 = 4703
esriSRGeoCS_MHAST_Onshore = 4704
esriSRGeoCS_MHAST_Offshore = 4705
esriSRGeoCS_EgyptGulfSuez_S650TL = 4706
esriSRGeoCS_Fiji1986 = 4720
esriSRGeoCS_Fiji1956 = 4721
esriSRGeoCS_GrandCayman1959 = 4723
esriSRGeoCS_LittleCayman1961 = 4726
esriSRGeoCS_Korea2000 = 4737
esriSRGeoCS_HongKong1963_67 = 4739
esriSRGeoCS_GDM2000 = 4742
esriSRGeoCS_TWD1967 = 3821
esriSRGeoCS_TWD1997 = 3824
esriSRGeoCS_EverestAdj1937 = 4015
esriSRGeoCS_AuthalicSphere_GRS1980 = 4047
esriSRGeoCS_AuthalicSphere_Intl1924 = 4053
esriSRGeoCS_Hughes1980 = 4054
esriSRGeoCS_NAD1983_CSRS = 4617
esriSRGeoCS_LePouce1934 = 4699
esriSRGeoCS_IGNAstro1960 = 4700
esriSRGeoCS_Solomon1968 = 4718
esriSRGeoCS_PZ1990 = 4740
esriSRGeoCS_FD1954 = 4741
esriSRGeoCS_Karbala1979Polservice = 4743
esriSRGeoCS_Nahrwan1934 = 4744
esriSRGeoCS_Rauenberg1983 = 4745
esriSRGeoCS_Potsdam1983 = 4746
esriSRGeoCS_Greenland1996 = 4747
esriSRGeoCS_VanuaLevu1915 = 4748
esriSRGeoCS_RGNC1991_93 = 4749
esriSRGeoCS_fk89 = 4753
esriSRGeoCS_LGD2006 = 4754
esriSRGeoCS_DGN1995 = 4755
esriSRGeoCS_VN2000 = 4756
esriSRGeoCS_SVY21 = 4757
esriSRGeoCS_NAD1983_NSRS2007 = 4759
esriSRGeoCS_ITRF2005 = 104896
esriSRGeoCS_MajorAuxSphere_WGS1984 = 4055
esriSRGeoCS2Type = c_int # enum

# values for enumeration 'esriSRDatumType'
esriSRDatum_Airy1830 = 6001
esriSRDatum_ModifiedAiry = 6002
esriSRDatum_Australian = 6003
esriSRDatum_Bessel1841 = 6004
esriSRDatum_ModifiedBessel = 6005
esriSRDatum_BesselNamibia = 6006
esriSRDatum_Clarke1858 = 6007
esriSRDatum_Clarke1866 = 6008
esriSRDatum_Clarke1866Michigan = 6009
esriSRDatum_Clarke1880 = 6034
esriSRDatum_Clarke1880Arc = 6013
esriSRDatum_Clarke1880Benoit = 6010
esriSRDatum_Clarke1880IGN = 6011
esriSRDatum_Clarke1880RGS = 6012
esriSRDatum_Clarke1880SGA = 6014
esriSRDatum_Everest1830 = 6042
esriSRDatum_Everest1937 = 6015
esriSRDatum_Everest1962 = 6044
esriSRDatum_Everest1967 = 6016
esriSRDatum_Everest1975 = 6045
esriSRDatum_ModifiedEverest = 6018
esriSRDatum_GEM10C = 6031
esriSRDatum_GRS1967 = 6036
esriSRDatum_GRS1980 = 6019
esriSRDatum_Helmert1906 = 6020
esriSRDatum_Indonesian = 6021
esriSRDatum_International1924 = 6022
esriSRDatum_International1967 = 6023
esriSRDatum_Krasovksy1940 = 6024
esriSRDatum_NWL9D = 6025
esriSRDatum_OSU1986F = 6032
esriSRDatum_OSU1991A = 6033
esriSRDatum_Plessis1817 = 6027
esriSRDatum_AuthalicSphere = 6035
esriSRDatum_Struve1860 = 6028
esriSRDatum_WarOffice = 6029
esriSRDatum_WGS1966 = 6760
esriSRDatum_Fischer1960 = 106002
esriSRDatum_Fischer1968 = 106003
esriSRDatum_ModifiedFischer = 106004
esriSRDatum_Hough1960 = 106005
esriSRDatum_ModifiedEverest1969 = 106006
esriSRDatum_Walbeck = 106007
esriSRDatum_AuthalicSphereArcInfo = 106008
esriSRDatum_Abidjan1987 = 6143
esriSRDatum_Adindan = 6201
esriSRDatum_Afgooye = 6205
esriSRDatum_Agadez = 6206
esriSRDatum_AGD1966 = 6202
esriSRDatum_AGD1984 = 6203
esriSRDatum_AinElAbd1970 = 6204
esriSRDatum_AmersFoort = 6289
esriSRDatum_Aratu = 6208
esriSRDatum_Arc1950 = 6209
esriSRDatum_Arc1960 = 6210
esriSRDatum_ATF = 6901
esriSRDatum_ATS1977 = 6122
esriSRDatum_Barbados1938 = 6212
esriSRDatum_Batavia = 6211
esriSRDatum_Beduaram = 6213
esriSRDatum_Beijing1954 = 6214
esriSRDatum_Belge1950 = 6215
esriSRDatum_Belge1972 = 6313
esriSRDatum_Bermuda1957 = 6216
esriSRDatum_Bern1898 = 6217
esriSRDatum_Bern1938 = 6306
esriSRDatum_Bogota = 6218
esriSRDatum_BukitRimpah = 6219
esriSRDatum_Camacupa = 6220
esriSRDatum_CampoInchauspe = 6221
esriSRDatum_Cape = 6222
esriSRDatum_Carthage = 6223
esriSRDatum_CH1903 = 6149
esriSRDatum_CH1903Plus = 6150
esriSRDatum_CHTRF1995 = 6151
esriSRDatum_Chua = 6224
esriSRDatum_Conakry1905 = 6315
esriSRDatum_CorregoAlegre = 6225
esriSRDatum_CoteDIvoire = 6226
esriSRDatum_Datum73 = 6274
esriSRDatum_DeirEzZor = 6227
esriSRDatum_DealulPiscului1933 = 6316
esriSRDatum_DealulPiscului1970 = 6317
esriSRDatum_DHDN = 6314
esriSRDatum_Douala = 6228
esriSRDatum_EuropeanDatum1950 = 6230
esriSRDatum_EuropeanDatum1950ED77 = 6154
esriSRDatum_EuropeanDatum1987 = 6231
esriSRDatum_Egypt1907 = 6229
esriSRDatum_ETRF1989 = 106258
esriSRDatum_Fahud = 6232
esriSRDatum_FD1958 = 6132
esriSRDatum_Gandajika1970 = 6233
esriSRDatum_Garoua = 6197
esriSRDatum_GDA1994 = 6283
esriSRDatum_GGRS1987 = 6121
esriSRDatum_Greek = 6120
esriSRDatum_GuyaneFrancaise = 6235
esriSRDatum_Hanoi1972 = 6147
esriSRDatum_Hartebeesthoek94 = 6148
esriSRDatum_HeratNorth = 6255
esriSRDatum_HitoXVIII1963 = 6254
esriSRDatum_HuTzuShan = 6236
esriSRDatum_Hungarian1972 = 6237
esriSRDatum_Indian1954 = 6239
esriSRDatum_Indian1975 = 6240
esriSRDatum_Indonesian1974 = 6238
esriSRDatum_Israel = 6141
esriSRDatum_Jamaica1875 = 6241
esriSRDatum_Jamaica1969 = 6242
esriSRDatum_Kalianpur1880 = 6243
esriSRDatum_Kalianpur1937 = 6144
esriSRDatum_Kalianpur1962 = 6145
esriSRDatum_Kalianpur1975 = 6146
esriSRDatum_Kandawala = 6244
esriSRDatum_Kertau = 6245
esriSRDatum_KKJ = 6123
esriSRDatum_KOC = 6246
esriSRDatum_KUDAMS = 6319
esriSRDatum_LaCanoa = 6247
esriSRDatum_Lake = 6249
esriSRDatum_Leigon = 6250
esriSRDatum_Liberia1964 = 6251
esriSRDatum_Lisbon = 6207
esriSRDatum_Lithuania1994 = 6126
esriSRDatum_Locodjo1965 = 6142
esriSRDatum_LomaQuintana = 6288
esriSRDatum_Lome = 6252
esriSRDatum_Luzon1911 = 6253
esriSRDatum_Madrid1870 = 6903
esriSRDatum_Madzansua = 6128
esriSRDatum_Mahe1971 = 6256
esriSRDatum_Makassar = 6257
esriSRDatum_Malongo1987 = 6259
esriSRDatum_Manoca = 6260
esriSRDatum_Massawa = 6262
esriSRDatum_Merchich = 6261
esriSRDatum_MGI = 6312
esriSRDatum_Mhast = 6264
esriSRDatum_Minna = 6263
esriSRDatum_MonteMario = 6265
esriSRDatum_Moznet = 6130
esriSRDatum_MPoraloko = 6266
esriSRDatum_NADMichigan = 6268
esriSRDatum_NAD1927 = 6267
esriSRDatum_NAD1983 = 6269
esriSRDatum_NAD1983HARN = 6152
esriSRDatum_NAD1983CSRS98 = 6140
esriSRDatum_Nahrwan1967 = 6270
esriSRDatum_Naparima1972 = 6271
esriSRDatum_NordDeGuerre = 6902
esriSRDatum_NGN = 6318
esriSRDatum_NGO1948 = 6273
esriSRDatum_NordSahara1959 = 6307
esriSRDatum_NSWC9Z_2 = 6276
esriSRDatum_NTF = 6275
esriSRDatum_NZGD1949 = 6272
esriSRDatum_Observatario = 6129
esriSRDatum_OSSN1980 = 6279
esriSRDatum_OSGB1936 = 6277
esriSRDatum_OSGB1970SN = 6278
esriSRDatum_Padang1884 = 6280
esriSRDatum_Palestine1923 = 6281
esriSRDatum_PointeNoire = 6282
esriSRDatum_PSAD1956 = 6248
esriSRDatum_Pulkovo1942 = 6284
esriSRDatum_Pulkovo1995 = 6200
esriSRDatum_Qatar = 6285
esriSRDatum_Qatar1948 = 6286
esriSRDatum_Qornoq = 6287
esriSRDatum_Rassadiran = 6153
esriSRDatum_RT90 = 6124
esriSRDatum_SAD1969 = 6618
esriSRDatum_Samboja = 6125
esriSRDatum_SapperHill1943 = 6292
esriSRDatum_Schwarzeck = 6293
esriSRDatum_Segora = 6294
esriSRDatum_Serindung = 6295
esriSRDatum_StGeorgeIsland = 6138
esriSRDatum_StLawrenceIsland = 6136
esriSRDatum_StPaulIsland = 6137
esriSRDatum_Stockholm1938 = 6308
esriSRDatum_Sudan = 6296
esriSRDatum_Tananarive1925 = 6297
esriSRDatum_Tete = 6127
esriSRDatum_Timbalai1948 = 6298
esriSRDatum_TM65 = 6299
esriSRDatum_TM75 = 6300
esriSRDatum_Tokyo = 6301
esriSRDatum_Trinidad1903 = 6302
esriSRDatum_TrucialCoast1948 = 6303
esriSRDatum_Voirol1875 = 6304
esriSRDatum_VoirolUnifie1960 = 6305
esriSRDatum_WGS1972 = 6322
esriSRDatum_WGS1972BE = 6324
esriSRDatum_WGS1984 = 6326
esriSRDatum_Yacare = 6309
esriSRDatum_Yoff = 6310
esriSRDatum_Zanderij = 6311
esriSRDatum_Anguilla1957 = 6600
esriSRDatum_Estonia1992 = 6133
esriSRDatum_Dominica1945 = 6602
esriSRDatum_Grenada1953 = 6603
esriSRDatum_NAD1927CGQ77 = 6609
esriSRDatum_NAD19271976 = 6608
esriSRDatum_PDO1993 = 6134
esriSRDatum_StKitts1955 = 6605
esriSRDatum_StLucia1955 = 6606
esriSRDatum_StVincent1945 = 6607
esriSRDatum_European1979 = 6668
esriSRDatum_EverestBangladesh = 106202
esriSRDatum_EverestIndiaNepal = 106203
esriSRDatum_Hjorsey1955 = 6658
esriSRDatum_HongKong1963 = 6738
esriSRDatum_Oman = 106206
esriSRDatum_SouthAsiaSingapore = 106207
esriSRDatum_AyabelleLighthouse = 6713
esriSRDatum_Bissau = 6165
esriSRDatum_Dabola = 6155
esriSRDatum_Point58 = 6620
esriSRDatum_BeaconE1945 = 6709
esriSRDatum_TernIsland1961 = 6707
esriSRDatum_Astro1952 = 6711
esriSRDatum_Bellevue = 6714
esriSRDatum_Canton1966 = 6716
esriSRDatum_ChathamIsland1971 = 6672
esriSRDatum_DOS1968 = 106218
esriSRDatum_EasterIsland1967 = 6719
esriSRDatum_Guam1963 = 6675
esriSRDatum_GUX1 = 106221
esriSRDatum_JohnstonIsland1961 = 6725
esriSRDatum_Kusaie1951 = 6735
esriSRDatum_Midway1961 = 6727
esriSRDatum_OldHawaiian = 6135
esriSRDatum_Pitcairn1967 = 6729
esriSRDatum_SantoDOS1965 = 6730
esriSRDatum_VitiLevu1916 = 6731
esriSRDatum_WakeEniwetok1960 = 6732
esriSRDatum_WakeIsland1952 = 6733
esriSRDatum_Anna1_1965 = 6708
esriSRDatum_Gan1970 = 6684
esriSRDatum_ISTS073_1969 = 6724
esriSRDatum_KerguelenIsland1949 = 6698
esriSRDatum_Reunion = 6626
esriSRDatum_Antigua1943 = 6601
esriSRDatum_AscensionIsland1958 = 6712
esriSRDatum_DOS71_4 = 6710
esriSRDatum_CapeCanaveral = 6717
esriSRDatum_FortThomas1955 = 106240
esriSRDatum_Graciosa1948 = 106241
esriSRDatum_ISTS061_1968 = 6722
esriSRDatum_LC5_1961 = 106243
esriSRDatum_Montserrat1958 = 6604
esriSRDatum_ObservMeteor1939 = 106245
esriSRDatum_PicoDeLasNieves = 6728
esriSRDatum_PortoSanto1936 = 6615
esriSRDatum_PuertoRico = 6139
esriSRDatum_SaoBraz = 106249
esriSRDatum_SelvagemGrande1938 = 6616
esriSRDatum_Tristan1968 = 6734
esriSRDatum_Samoa1962 = 6169
esriSRDatum_CampArea = 6715
esriSRDatum_DeceptionIsland = 6736
esriSRDatum_GunungSegara = 6613
esriSRDatum_Indian1960 = 6131
esriSRDatum_S42Hungary = 106257
esriSRDatum_S_JTSK = 6156
esriSRDatum_AlaskanIslands = 106260
esriSRDatumType = c_int # enum
class MolodenskyBadekasTransformation(CoClass):
    u'Creates a Molodensky-Badekas transformation.'
    _reg_clsid_ = GUID('{E739E629-0D22-48F7-841C-54111CA6D666}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
MolodenskyBadekasTransformation._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ITransformationGEN, ITransformation, IGeoTransformation, IMolodenskyBadekasTransformation, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, ISpatialReferenceAuthority]

esriOriginalSegmentMapping._fields_ = [
    ('m_pSegment', POINTER(ISegment)),
    ('m_iPart', c_int),
    ('m_iDenseVertex', c_int),
    ('m_cDenseSegments', c_int),
]
assert sizeof(esriOriginalSegmentMapping) == 16, sizeof(esriOriginalSegmentMapping)
assert alignment(esriOriginalSegmentMapping) == 4, alignment(esriOriginalSegmentMapping)
ITexturePersistenceProperties._methods_ = [
    COMMETHOD(['propput', helpstring(u'Persist scaled material textures.')], HRESULT, 'SaveScaledTextures',
              ( ['in'], VARIANT_BOOL, 'pSaveScaledTex' )),
    COMMETHOD(['propget', helpstring(u'Persist scaled material textures.')], HRESULT, 'SaveScaledTextures',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pSaveScaledTex' )),
    COMMETHOD(['propput', helpstring(u'The texture scale factor.')], HRESULT, 'TextureScaleFactor',
              ( ['in'], c_double, 'pScale' )),
    COMMETHOD(['propget', helpstring(u'The texture scale factor.')], HRESULT, 'TextureScaleFactor',
              ( ['retval', 'out'], POINTER(c_double), 'pScale' )),
]
################################################################
## code template for ITexturePersistenceProperties implementation
##class ITexturePersistenceProperties_Impl(object):
##    def _get(self):
##        u'The texture scale factor.'
##        #return pScale
##    def _set(self, pScale):
##        u'The texture scale factor.'
##    TextureScaleFactor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Persist scaled material textures.'
##        #return pSaveScaledTex
##    def _set(self, pSaveScaledTex):
##        u'Persist scaled material textures.'
##    SaveScaledTextures = property(_get, _set, doc = _set.__doc__)
##

IProjectedCoordinateSystem2._methods_ = [
    COMMETHOD(['propget', helpstring(u'The longitude of center (Lam C) of a projected coordinate system.')], HRESULT, 'LongitudeOfCenter',
              ( ['retval', 'out'], POINTER(c_double), 'LongitudeOfCenter' )),
    COMMETHOD(['propput', helpstring(u'The longitude of center (Lam C) of a projected coordinate system.')], HRESULT, 'LongitudeOfCenter',
              ( [], c_double, 'LongitudeOfCenter' )),
    COMMETHOD(['propget', helpstring(u'The latitude of center (Phi C) of a projected coordinate system.')], HRESULT, 'LatitudeOfCenter',
              ( ['retval', 'out'], POINTER(c_double), 'LatitudeOfCenter' )),
    COMMETHOD(['propput', helpstring(u'The latitude of center (Phi C) of a projected coordinate system.')], HRESULT, 'LatitudeOfCenter',
              ( [], c_double, 'LatitudeOfCenter' )),
    COMMETHOD([helpstring(u'Returns 180 degrees and horizon delta in proper GCS units.')], HRESULT, 'GetGCSParams',
              ( ['out'], POINTER(c_double), 'p_180' ),
              ( ['out'], POINTER(c_double), 'pDelta' )),
    COMMETHOD([helpstring(u'Returns the standard horizon polygon, its envelope, and whether it is inclusive or exclusive; the horizon polygon may be 0.')], HRESULT, 'GetHorizon',
              ( ['out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSEnvelope), 'horizonEnvelope' ),
              ( ['out'], POINTER(VARIANT_BOOL), 'Inclusive' ),
              ( ['retval', 'out'], POINTER(POINTER(IGeometry)), 'ppHorizon' )),
    COMMETHOD([helpstring(u'Returns the horizon polygon, shifted once or twice, west/east of the standard horizon for a negative/positive shift.')], HRESULT, 'GetShiftedHorizon',
              ( [], c_int, 'shift' ),
              ( ['retval', 'out'], POINTER(POINTER(IGeometry)), 'ppHorizon' )),
    COMMETHOD(['propget', helpstring(u'The latitude on an oblique spheroid that defines the oblique cone for a Krovak projected coordinate system.')], HRESULT, 'PseudoStandardParallel1',
              ( ['retval', 'out'], POINTER(c_double), 'psp1' )),
    COMMETHOD(['propput', helpstring(u'The latitude on an oblique spheroid that defines the oblique cone for a Krovak projected coordinate system.')], HRESULT, 'PseudoStandardParallel1',
              ( [], c_double, 'psp1' )),
    COMMETHOD(['propget', helpstring(u'The X axis scale value used to flip the axis direction in a Krovak projected coordinate system.')], HRESULT, 'XScaleFactor',
              ( ['retval', 'out'], POINTER(c_double), 'xs' )),
    COMMETHOD(['propput', helpstring(u'The X axis scale value used to flip the axis direction in a Krovak projected coordinate system.')], HRESULT, 'XScaleFactor',
              ( [], c_double, 'xs' )),
    COMMETHOD(['propget', helpstring(u'The Y axis scale value used to flip the axis direction in a Krovak projected coordinate system.')], HRESULT, 'YScaleFactor',
              ( ['retval', 'out'], POINTER(c_double), 'ys' )),
    COMMETHOD(['propput', helpstring(u'The Y axis scale value used to flip the axis direction in a Krovak projected coordinate system.')], HRESULT, 'YScaleFactor',
              ( [], c_double, 'ys' )),
    COMMETHOD(['propget', helpstring(u'The rotation value used to change the axis directions in a Krovak projected coordinate system.')], HRESULT, 'Rotation',
              ( ['retval', 'out'], POINTER(c_double), 'r' )),
    COMMETHOD(['propput', helpstring(u'The rotation value used to change the axis directions in a Krovak projected coordinate system.')], HRESULT, 'Rotation',
              ( [], c_double, 'r' )),
    COMMETHOD([helpstring(u'Projects points from planar to geographic coordinates. Deals with geographic coordinates in ranges other than +-180.')], HRESULT, 'InverseWithShift',
              ( [], c_double, 'shift' ),
              ( ['in'], c_int, 'Count' ),
              ( [], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPoint), 'Points' )),
    COMMETHOD([helpstring(u'Modify linear unit of projected coordinates and angular unit of associated geographic coordinates.')], HRESULT, 'PutLinearAndAngularUnits',
              ( [], POINTER(ILinearUnit), 'LinearUnit' ),
              ( [], POINTER(IAngularUnit), 'AngularUnit' )),
    COMMETHOD(['propget', helpstring(u'The latitude of the origin (Phi 0) of a projected coordinate system.')], HRESULT, 'LatitudeOfOrigin',
              ( ['retval', 'out'], POINTER(c_double), 'LatitudeOfOrigin' )),
    COMMETHOD(['propput', helpstring(u'The latitude of the origin (Phi 0) of a projected coordinate system.')], HRESULT, 'LatitudeOfOrigin',
              ( [], c_double, 'LatitudeOfOrigin' )),
    COMMETHOD([helpstring(u'Compares to projected coordinate systems for equality but ignores their names.')], HRESULT, 'IsEqualNoNames',
              ( [], POINTER(IProjectedCoordinateSystem), 'pOther' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'equalNoNames' )),
]
################################################################
## code template for IProjectedCoordinateSystem2 implementation
##class IProjectedCoordinateSystem2_Impl(object):
##    def _get(self):
##        u'The latitude of center (Phi C) of a projected coordinate system.'
##        #return LatitudeOfCenter
##    def _set(self, LatitudeOfCenter):
##        u'The latitude of center (Phi C) of a projected coordinate system.'
##    LatitudeOfCenter = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The latitude of the origin (Phi 0) of a projected coordinate system.'
##        #return LatitudeOfOrigin
##    def _set(self, LatitudeOfOrigin):
##        u'The latitude of the origin (Phi 0) of a projected coordinate system.'
##    LatitudeOfOrigin = property(_get, _set, doc = _set.__doc__)
##
##    def GetShiftedHorizon(self, shift):
##        u'Returns the horizon polygon, shifted once or twice, west/east of the standard horizon for a negative/positive shift.'
##        #return ppHorizon
##
##    def IsEqualNoNames(self, pOther):
##        u'Compares to projected coordinate systems for equality but ignores their names.'
##        #return equalNoNames
##
##    def PutLinearAndAngularUnits(self, LinearUnit, AngularUnit):
##        u'Modify linear unit of projected coordinates and angular unit of associated geographic coordinates.'
##        #return 
##
##    def _get(self):
##        u'The longitude of center (Lam C) of a projected coordinate system.'
##        #return LongitudeOfCenter
##    def _set(self, LongitudeOfCenter):
##        u'The longitude of center (Lam C) of a projected coordinate system.'
##    LongitudeOfCenter = property(_get, _set, doc = _set.__doc__)
##
##    def GetHorizon(self):
##        u'Returns the standard horizon polygon, its envelope, and whether it is inclusive or exclusive; the horizon polygon may be 0.'
##        #return horizonEnvelope, Inclusive, ppHorizon
##
##    def InverseWithShift(self, shift, Count, Points):
##        u'Projects points from planar to geographic coordinates. Deals with geographic coordinates in ranges other than +-180.'
##        #return 
##
##    def GetGCSParams(self):
##        u'Returns 180 degrees and horizon delta in proper GCS units.'
##        #return p_180, pDelta
##
##    def _get(self):
##        u'The Y axis scale value used to flip the axis direction in a Krovak projected coordinate system.'
##        #return ys
##    def _set(self, ys):
##        u'The Y axis scale value used to flip the axis direction in a Krovak projected coordinate system.'
##    YScaleFactor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The X axis scale value used to flip the axis direction in a Krovak projected coordinate system.'
##        #return xs
##    def _set(self, xs):
##        u'The X axis scale value used to flip the axis direction in a Krovak projected coordinate system.'
##    XScaleFactor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The rotation value used to change the axis directions in a Krovak projected coordinate system.'
##        #return r
##    def _set(self, r):
##        u'The rotation value used to change the axis directions in a Krovak projected coordinate system.'
##    Rotation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The latitude on an oblique spheroid that defines the oblique cone for a Krovak projected coordinate system.'
##        #return psp1
##    def _set(self, psp1):
##        u'The latitude on an oblique spheroid that defines the oblique cone for a Krovak projected coordinate system.'
##    PseudoStandardParallel1 = property(_get, _set, doc = _set.__doc__)
##

IGeometryBag._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if this geometry bag exported itself to a shapefile buffer with no loss of information. Currently always returns false.')], HRESULT, 'LosslessExport',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'nothingLost' )),
]
################################################################
## code template for IGeometryBag implementation
##class IGeometryBag_Impl(object):
##    @property
##    def LosslessExport(self):
##        u'Indicates if this geometry bag exported itself to a shapefile buffer with no loss of information. Currently always returns false.'
##        #return nothingLost
##

class IRay(IGeometry):
    _case_insensitive_ = True
    u'Provides access to 3D Ray properties and methods. A ray has one endpoint (its origin) and continues infinitely in one direction.'
    _iid_ = GUID('{0CD38CBA-1C89-11D4-9F5C-00C04F6BDF0D}')
    _idlflags_ = ['oleautomation']
class IRay2(IRay):
    _case_insensitive_ = True
    u'Provides access to 3D Ray properties and methods. A ray has one endpoint (its origin) and continues infinitely in one direction.'
    _iid_ = GUID('{0C968EEA-5DE9-45DB-B885-531A04738122}')
    _idlflags_ = ['oleautomation']
class IEnumIntersection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Not currently used.'
    _iid_ = GUID('{0CD38CBB-1C89-11D4-9F5C-00C04F6BDF0D}')
    _idlflags_ = []
IRay._methods_ = [
    COMMETHOD([helpstring(u"Sets a point equal to the ray's origin.")], HRESULT, 'QueryOrigin',
              ( [], POINTER(IPoint), 'vectorOrigin' )),
    COMMETHOD(['propget', helpstring(u'The origin point of the ray.')], HRESULT, 'Origin',
              ( ['retval', 'out'], POINTER(POINTER(IPoint)), 'vectorOrigin' )),
    COMMETHOD(['propput', helpstring(u'The origin point of the ray.')], HRESULT, 'Origin',
              ( [], POINTER(IPoint), 'vectorOrigin' )),
    COMMETHOD([helpstring(u'Sets a vector equal to a unit vector with the same direction as the ray.')], HRESULT, 'QueryVector',
              ( [], POINTER(IVector3D), 'directionVector' )),
    COMMETHOD(['propget', helpstring(u'The direction vector of the ray.')], HRESULT, 'Vector',
              ( ['retval', 'out'], POINTER(POINTER(IVector3D)), 'directionVector' )),
    COMMETHOD(['propput', helpstring(u'The direction vector of the ray.')], HRESULT, 'Vector',
              ( [], POINTER(IVector3D), 'directionVector' )),
    COMMETHOD([helpstring(u'Queries a point at a distance along the ray.')], HRESULT, 'QueryPointAtDistance',
              ( [], c_double, 'distance' ),
              ( [], POINTER(IPoint), 'Point' )),
    COMMETHOD([helpstring(u'Constructs a point at a distance along the ray.')], HRESULT, 'GetPointAtDistance',
              ( [], c_double, 'distance' ),
              ( ['retval', 'out'], POINTER(POINTER(IPoint)), 'Point' )),
    COMMETHOD([helpstring(u'Indicates if the ray intersects the target geometry.')], HRESULT, 'Intersects',
              ( [], POINTER(IGeometry), 'targetGeometry' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'intersectsTarget' )),
    COMMETHOD([helpstring(u'Returns the first point of intersection between the ray and the target geometry. The point is set empty if there is no intersection.')], HRESULT, 'QueryFirstIntersection',
              ( [], POINTER(IGeometry), 'targetGeometry' ),
              ( [], POINTER(IPoint), 'intersectionPoint' )),
    COMMETHOD([helpstring(u'Returns a point collection containing all points of intersection, in order along the ray.')], HRESULT, 'Intersect',
              ( [], POINTER(IGeometry), 'targetGeometry' ),
              ( [], POINTER(IPointCollection), 'intersectionPoints' )),
    COMMETHOD([helpstring(u'Not implemented at this release.')], HRESULT, 'GetEnumIntersect',
              ( [], POINTER(IGeometry), 'targetGeometry' ),
              ( ['retval', 'out'], POINTER(POINTER(IEnumIntersection)), 'enumIntersections' )),
]
################################################################
## code template for IRay implementation
##class IRay_Impl(object):
##    def _get(self):
##        u'The origin point of the ray.'
##        #return vectorOrigin
##    def _set(self, vectorOrigin):
##        u'The origin point of the ray.'
##    Origin = property(_get, _set, doc = _set.__doc__)
##
##    def Intersects(self, targetGeometry):
##        u'Indicates if the ray intersects the target geometry.'
##        #return intersectsTarget
##
##    def QueryVector(self, directionVector):
##        u'Sets a vector equal to a unit vector with the same direction as the ray.'
##        #return 
##
##    def QueryPointAtDistance(self, distance, Point):
##        u'Queries a point at a distance along the ray.'
##        #return 
##
##    def GetEnumIntersect(self, targetGeometry):
##        u'Not implemented at this release.'
##        #return enumIntersections
##
##    def QueryOrigin(self, vectorOrigin):
##        u"Sets a point equal to the ray's origin."
##        #return 
##
##    def GetPointAtDistance(self, distance):
##        u'Constructs a point at a distance along the ray.'
##        #return Point
##
##    def _get(self):
##        u'The direction vector of the ray.'
##        #return directionVector
##    def _set(self, directionVector):
##        u'The direction vector of the ray.'
##    Vector = property(_get, _set, doc = _set.__doc__)
##
##    def Intersect(self, targetGeometry, intersectionPoints):
##        u'Returns a point collection containing all points of intersection, in order along the ray.'
##        #return 
##
##    def QueryFirstIntersection(self, targetGeometry, intersectionPoint):
##        u'Returns the first point of intersection between the ray and the target geometry. The point is set empty if there is no intersection.'
##        #return 
##

IRay2._methods_ = [
    COMMETHOD([helpstring(u'Returns the point of intersection between the ray and the target plane. The point is set empty if there is no intersection.')], HRESULT, 'QueryPlaneIntersection',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPointZ), 'pPlaneNormal' ),
              ( ['in'], c_double, 'D' ),
              ( [], POINTER(IPoint), 'pPoint' )),
]
################################################################
## code template for IRay2 implementation
##class IRay2_Impl(object):
##    def QueryPlaneIntersection(self, pPlaneNormal, D, pPoint):
##        u'Returns the point of intersection between the ray and the target plane. The point is set empty if there is no intersection.'
##        #return 
##

class NullTransformation(CoClass):
    u'Creates a null geographic transformation.'
    _reg_clsid_ = GUID('{1C5A7B90-E68E-11DE-8A39-0800200C9A66}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
class INullTransformation(IGeoTransformation):
    _case_insensitive_ = True
    u'indicator interface for a null transformation.'
    _iid_ = GUID('{28AAD99B-D3EE-4415-AD2D-96447C5028FA}')
    _idlflags_ = ['oleautomation']
NullTransformation._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ITransformationGEN, ITransformation, IGeoTransformation, INullTransformation, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, ISpatialReferenceAuthority]

IGeometryFactory2._methods_ = [
    COMMETHOD([helpstring(u'Creates an OGIS WKB format from a geometry object.')], HRESULT, 'CreateWkbVariantFromGeometry',
              ( ['in'], POINTER(IGeometry), 'inGeometry' ),
              ( ['retval', 'out'], POINTER(VARIANT), 'wkb' )),
]
################################################################
## code template for IGeometryFactory2 implementation
##class IGeometryFactory2_Impl(object):
##    def CreateWkbVariantFromGeometry(self, inGeometry):
##        u'Creates an OGIS WKB format from a geometry object.'
##        #return wkb
##

IPolylineArray._methods_ = [
    COMMETHOD(['propget', helpstring(u'The polyline count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The polyline at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IPolyline)), 'Polyline' )),
    COMMETHOD([helpstring(u'Removes the polyline at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all polylines.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Adds a polyline.')], HRESULT, 'Add',
              ( ['in'], POINTER(IPolyline), 'pPolyline' )),
    COMMETHOD([helpstring(u'Adds a polyline at the specified position.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(IPolyline), 'Polyline' )),
]
################################################################
## code template for IPolylineArray implementation
##class IPolylineArray_Impl(object):
##    @property
##    def Count(self):
##        u'The polyline count.'
##        #return Count
##
##    def Insert(self, Index, Polyline):
##        u'Adds a polyline at the specified position.'
##        #return 
##
##    def Remove(self, Index):
##        u'Removes the polyline at the specified position.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'The polyline at the specified position.'
##        #return Polyline
##
##    def RemoveAll(self):
##        u'Removes all polylines.'
##        #return 
##
##    def Add(self, pPolyline):
##        u'Adds a polyline.'
##        #return 
##

IProjectedCoordinateSystem3._methods_ = [
    COMMETHOD(['propget', helpstring(u'The height above the sphere in projected coordinate system units.')], HRESULT, 'Height',
              ( ['retval', 'out'], POINTER(c_double), 'Height' )),
    COMMETHOD(['propput', helpstring(u'The height above the sphere in projected coordinate system units.')], HRESULT, 'Height',
              ( [], c_double, 'Height' )),
]
################################################################
## code template for IProjectedCoordinateSystem3 implementation
##class IProjectedCoordinateSystem3_Impl(object):
##    def _get(self):
##        u'The height above the sphere in projected coordinate system units.'
##        #return Height
##    def _set(self, Height):
##        u'The height above the sphere in projected coordinate system units.'
##    Height = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'esriSRPoleGeometry'
esriSRPole_None = 0
esriSRPole_IsPoint = 1
esriSRPole_IsStraightLine = 2
esriSRPole_IsCurvedLine = 3
esriSRPoleGeometry = c_int # enum
IProjectedCoordinateSystem4._methods_ = [
    COMMETHOD([helpstring(u'Returns PCS horizon polygon, its envelope and whether it is inclusive or exclusive; the horizon polygon may be 0.')], HRESULT, 'GetPCSHorizon',
              ( ['out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSEnvelope), 'horizonEnvelope' ),
              ( ['out'], POINTER(VARIANT_BOOL), 'Inclusive' ),
              ( ['retval', 'out'], POINTER(POINTER(IGeometry)), 'Horizon' )),
    COMMETHOD([helpstring(u'Returns CentralLongitude of the projected coordinate system. Always defined, unlike CentralMeridian or LongitudeOfCenter.')], HRESULT, 'GetCentralLongitude',
              ( ['retval', 'out'], POINTER(c_double), 'centralLongitude' )),
    COMMETHOD([helpstring(u'Returns the north pole in projected coordinates, or an empty point if the north pole is outside the PCS horizon.')], HRESULT, 'GetNorthPole',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPoint), 'pole' )),
    COMMETHOD([helpstring(u'Returns the south pole in projected coordinates, or an empty point if the south pole is outside the PCS horizon.')], HRESULT, 'GetSouthPole',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPoint), 'pole' )),
    COMMETHOD([helpstring(u'Returns type of location of north pole with respect to the PCS horizon.')], HRESULT, 'GetNorthPoleLocation',
              ( ['retval', 'out'], POINTER(esriSRPoleLocation), 'poleLocation' )),
    COMMETHOD([helpstring(u'Returns type of location of south pole with respect to the PCS horizon.')], HRESULT, 'GetSouthPoleLocation',
              ( ['retval', 'out'], POINTER(esriSRPoleLocation), 'poleLocation' )),
    COMMETHOD([helpstring(u'Returns type of north pole geometry.')], HRESULT, 'GetNorthPoleGeometry',
              ( ['retval', 'out'], POINTER(esriSRPoleGeometry), 'poleGeometry' )),
    COMMETHOD([helpstring(u'Returns type of south pole geometry.')], HRESULT, 'GetSouthPoleGeometry',
              ( ['retval', 'out'], POINTER(esriSRPoleGeometry), 'poleGeometry' )),
    COMMETHOD([helpstring(u'Returns true if some edges of PCS horizon project inversely to identical lines.')], HRESULT, 'IsHorizonEdgeDuplicated',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'isEdgeDuplicated' )),
    COMMETHOD([helpstring(u'Returns true if PCS horizon is convex.')], HRESULT, 'IsHorizonConvexHull',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'isConvexHull' )),
    COMMETHOD([helpstring(u'Returns true if PCS horizon contains the entire world.')], HRESULT, 'IsHorizonEntireWorld',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'isWorld' )),
]
################################################################
## code template for IProjectedCoordinateSystem4 implementation
##class IProjectedCoordinateSystem4_Impl(object):
##    def GetSouthPoleLocation(self):
##        u'Returns type of location of south pole with respect to the PCS horizon.'
##        #return poleLocation
##
##    def GetCentralLongitude(self):
##        u'Returns CentralLongitude of the projected coordinate system. Always defined, unlike CentralMeridian or LongitudeOfCenter.'
##        #return centralLongitude
##
##    def GetSouthPoleGeometry(self):
##        u'Returns type of south pole geometry.'
##        #return poleGeometry
##
##    def GetNorthPole(self):
##        u'Returns the north pole in projected coordinates, or an empty point if the north pole is outside the PCS horizon.'
##        #return pole
##
##    def GetPCSHorizon(self):
##        u'Returns PCS horizon polygon, its envelope and whether it is inclusive or exclusive; the horizon polygon may be 0.'
##        #return horizonEnvelope, Inclusive, Horizon
##
##    def IsHorizonEdgeDuplicated(self):
##        u'Returns true if some edges of PCS horizon project inversely to identical lines.'
##        #return isEdgeDuplicated
##
##    def GetSouthPole(self):
##        u'Returns the south pole in projected coordinates, or an empty point if the south pole is outside the PCS horizon.'
##        #return pole
##
##    def IsHorizonConvexHull(self):
##        u'Returns true if PCS horizon is convex.'
##        #return isConvexHull
##
##    def GetNorthPoleLocation(self):
##        u'Returns type of location of north pole with respect to the PCS horizon.'
##        #return poleLocation
##
##    def GetNorthPoleGeometry(self):
##        u'Returns type of north pole geometry.'
##        #return poleGeometry
##
##    def IsHorizonEntireWorld(self):
##        u'Returns true if PCS horizon contains the entire world.'
##        #return isWorld
##

class UnitChangeTransformation(CoClass):
    u'Creates a unit change transformation.'
    _reg_clsid_ = GUID('{1C5A7B91-E68E-11DE-8A39-0800200C9A66}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
class IUnitChangeTransformation(IGeoTransformation):
    _case_insensitive_ = True
    u'indicator interface for a unit change geotransformation (units are obtained from the constituent gcss.'
    _iid_ = GUID('{88C3C0A4-8BF1-478A-B6E0-29A6CE41A1BA}')
    _idlflags_ = ['oleautomation']
UnitChangeTransformation._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ITransformationGEN, ITransformation, IGeoTransformation, IUnitChangeTransformation, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, ISpatialReferenceAuthority]

IGeographicCoordinateSystem._methods_ = [
    COMMETHOD(['propget', helpstring(u'The usage notes of this geographic coordinate system.')], HRESULT, 'Usage',
              ( ['retval', 'out'], POINTER(BSTR), 'Usage' )),
    COMMETHOD(['propget', helpstring(u'The horizontal datum of this geographic coordinate system.')], HRESULT, 'Datum',
              ( ['retval', 'out'], POINTER(POINTER(IDatum)), 'Datum' )),
    COMMETHOD(['propget', helpstring(u'The prime meridian of this geographic coordinate system.')], HRESULT, 'PrimeMeridian',
              ( ['retval', 'out'], POINTER(POINTER(IPrimeMeridian)), 'prime' )),
    COMMETHOD(['propget', helpstring(u'The angular unit of this geographic coordinate system.')], HRESULT, 'CoordinateUnit',
              ( ['retval', 'out'], POINTER(POINTER(IAngularUnit)), 'CoordinateUnit' )),
]
################################################################
## code template for IGeographicCoordinateSystem implementation
##class IGeographicCoordinateSystem_Impl(object):
##    @property
##    def Usage(self):
##        u'The usage notes of this geographic coordinate system.'
##        #return Usage
##
##    @property
##    def PrimeMeridian(self):
##        u'The prime meridian of this geographic coordinate system.'
##        #return prime
##
##    @property
##    def Datum(self):
##        u'The horizontal datum of this geographic coordinate system.'
##        #return Datum
##
##    @property
##    def CoordinateUnit(self):
##        u'The angular unit of this geographic coordinate system.'
##        #return CoordinateUnit
##

IGeometryFactory3._methods_ = [
    COMMETHOD([helpstring(u'Create a point, polyline, polygon, or multipoint from the specified shapefile format buffer.')], HRESULT, 'CreateGeometryEx',
              ( [], c_int, 'importFlags' ),
              ( ['in', 'out'], POINTER(c_int), 'byteCountInOut' ),
              ( ['in'], POINTER(c_ubyte), 'geometryInfo' ),
              ( ['out'], POINTER(POINTER(IGeometry)), 'outGeometry' )),
]
################################################################
## code template for IGeometryFactory3 implementation
##class IGeometryFactory3_Impl(object):
##    def CreateGeometryEx(self, importFlags, geometryInfo):
##        u'Create a point, polyline, polygon, or multipoint from the specified shapefile format buffer.'
##        #return byteCountInOut, outGeometry
##

IGeometryArray._methods_ = [
    COMMETHOD(['propget', helpstring(u'The geometry count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'Returns the geometry at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IGeometry)), 'g' )),
    COMMETHOD([helpstring(u'Removes the geometry at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all geometries.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Adds a geometry.')], HRESULT, 'Add',
              ( ['in'], POINTER(IGeometry), 'g' )),
    COMMETHOD([helpstring(u'Adds a geometry at the specified position.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(IGeometry), 'g' )),
]
################################################################
## code template for IGeometryArray implementation
##class IGeometryArray_Impl(object):
##    @property
##    def Count(self):
##        u'The geometry count.'
##        #return Count
##
##    def Insert(self, Index, g):
##        u'Adds a geometry at the specified position.'
##        #return 
##
##    def Remove(self, Index):
##        u'Removes the geometry at the specified position.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'Returns the geometry at the specified position.'
##        #return g
##
##    def RemoveAll(self):
##        u'Removes all geometries.'
##        #return 
##
##    def Add(self, g):
##        u'Adds a geometry.'
##        #return 
##

class Geographic2DOffsetTransformation(CoClass):
    u'Creates a geographic 2D offset transformation.'
    _reg_clsid_ = GUID('{1C5A7B92-E68E-11DE-8A39-0800200C9A66}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
class IGeographic2DOffsetTransformation(IGeoTransformation):
    _case_insensitive_ = True
    u'Provides access to members that control the geographic 2D offset transformation.'
    _iid_ = GUID('{1C5A7B93-E68E-11DE-8A39-0800200C9A66}')
    _idlflags_ = ['oleautomation']
Geographic2DOffsetTransformation._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ITransformationGEN, ITransformation, IGeoTransformation, IGeographic2DOffsetTransformation, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, ISpatialReferenceAuthority]

IPolygonArray._methods_ = [
    COMMETHOD(['propget', helpstring(u'The polygon count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The polygon at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IPolygon)), 'Polygon' )),
    COMMETHOD([helpstring(u'Removes the polygon at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all polygons.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Adds a polygon.')], HRESULT, 'Add',
              ( ['in'], POINTER(IPolygon), 'Polygon' )),
    COMMETHOD([helpstring(u'Adds a polygon at the specified position.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(IPolygon), 'Polygon' )),
]
################################################################
## code template for IPolygonArray implementation
##class IPolygonArray_Impl(object):
##    @property
##    def Count(self):
##        u'The polygon count.'
##        #return Count
##
##    def Insert(self, Index, Polygon):
##        u'Adds a polygon at the specified position.'
##        #return 
##
##    def Remove(self, Index):
##        u'Removes the polygon at the specified position.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'The polygon at the specified position.'
##        #return Polygon
##
##    def RemoveAll(self):
##        u'Removes all polygons.'
##        #return 
##
##    def Add(self, Polygon):
##        u'Adds a polygon.'
##        #return 
##

class IGeometricBufferSourceSink(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Client-supplied interface that provides support for buffering a group of geometries by different distances.'
    _iid_ = GUID('{D21AAA44-D277-4D18-8EDF-D90DEBCA3F40}')
    _idlflags_ = ['oleautomation']
IBufferConstruction._methods_ = [
    COMMETHOD([helpstring(u'Constructs buffer polygons at the specified distance for the set of input geometries. The input geometries can be a mix of polylines, polygons, points and multipoints.')], HRESULT, 'ConstructBuffers',
              ( [], POINTER(IEnumGeometry), 'pInputGeometries' ),
              ( [], c_double, 'distance' ),
              ( [], POINTER(IGeometryCollection), 'pOutputBuffers' )),
    COMMETHOD([helpstring(u'Constructs buffer polygons for the set of input geometries and distances supplied from the specified source-sink interface. The input geometries can be a mix of polylines, polygons, points and multipoints.')], HRESULT, 'ConstructBuffersByDistances',
              ( [], POINTER(IGeometricBufferSourceSink), 'pBufferInputOutput' )),
    COMMETHOD([helpstring(u'Constructs buffer polygons for the set of input geometries and distances supplied from arrays. The input geometries can be a mix of polylines, polygons, points and multipoints.')], HRESULT, 'ConstructBuffersByDistances2',
              ( [], POINTER(IEnumGeometry), 'pInputGeometries' ),
              ( [], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray), 'pDistances' ),
              ( [], POINTER(IGeometryCollection), 'pOutputBuffers' )),
    COMMETHOD([helpstring(u'Compatibility method for clients wishing to replace useages of ITopologicalOperator::Buffer. This method does not use the properties exposed in IBufferConstructionProperties.')], HRESULT, 'Buffer',
              ( [], POINTER(IGeometry), 'pInGeometry' ),
              ( [], c_double, 'distance' ),
              ( ['retval', 'out'], POINTER(POINTER(IGeometry)), 'ppOutBuffer' )),
    COMMETHOD(['propget', helpstring(u'Returns an array of identifiers of input geometries that result in empty buffers - typically as a result of buffering polygons by negative distances. The identifier is either a sequence number or a geomID.')], HRESULT, 'EmptyBufferIDs',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray)), 'ppGeomIDArray' )),
]
################################################################
## code template for IBufferConstruction implementation
##class IBufferConstruction_Impl(object):
##    def ConstructBuffers(self, pInputGeometries, distance, pOutputBuffers):
##        u'Constructs buffer polygons at the specified distance for the set of input geometries. The input geometries can be a mix of polylines, polygons, points and multipoints.'
##        #return 
##
##    def Buffer(self, pInGeometry, distance):
##        u'Compatibility method for clients wishing to replace useages of ITopologicalOperator::Buffer. This method does not use the properties exposed in IBufferConstructionProperties.'
##        #return ppOutBuffer
##
##    def ConstructBuffersByDistances(self, pBufferInputOutput):
##        u'Constructs buffer polygons for the set of input geometries and distances supplied from the specified source-sink interface. The input geometries can be a mix of polylines, polygons, points and multipoints.'
##        #return 
##
##    def ConstructBuffersByDistances2(self, pInputGeometries, pDistances, pOutputBuffers):
##        u'Constructs buffer polygons for the set of input geometries and distances supplied from arrays. The input geometries can be a mix of polylines, polygons, points and multipoints.'
##        #return 
##
##    @property
##    def EmptyBufferIDs(self):
##        u'Returns an array of identifiers of input geometries that result in empty buffers - typically as a result of buffering polygons by negative distances. The identifier is either a sequence number or a geomID.'
##        #return ppGeomIDArray
##

IGeometryBridge2._methods_ = [
    COMMETHOD([helpstring(u'Adds vertices to this Path, Ring, Polyline, or Polygon, or adds new points to this Multipoint, Triangles, TriangleFan, or TriangleStrip.')], HRESULT, 'AddWKSPoints',
              ( ['in'], POINTER(IPointCollection4), 'pPointCollection' ),
              ( ['in'], POINTER(_midlSAFEARRAY(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPoint)), 'pointStructures' )),
    COMMETHOD([helpstring(u'Replaces all vertices of this Path, Ring, Polyline, or Polygon with new ones, or replaces all points of this Multipoint, Triangles, TriangleFan, or TriangleStrip with new ones.')], HRESULT, 'SetWKSPoints',
              ( ['in'], POINTER(IPointCollection4), 'pPointCollection' ),
              ( ['in'], POINTER(_midlSAFEARRAY(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPoint)), 'pointStructures' )),
    COMMETHOD([helpstring(u"Copies vertices'/points' coordinates to the array of point structures.")], HRESULT, 'QueryWKSPoints',
              ( ['in'], POINTER(IPointCollection4), 'pPointCollection' ),
              ( ['in'], c_int, 'Index' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPoint)), 'pointStructures' )),
    COMMETHOD([helpstring(u'Inserts new vertices/points into this Path, Ring, Polyline, Polygon, Multipoint, Triangles, TriangleFan, TriangleStrip, or MultiPatch.')], HRESULT, 'InsertWKSPoints',
              ( ['in'], POINTER(IPointCollection4), 'pPointCollection' ),
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(_midlSAFEARRAY(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPoint)), 'pointStructures' )),
    COMMETHOD([helpstring(u'Introduces new vertices into this polyline at specified distances from the beginning of the polyline.')], HRESULT, 'SplitAtDistances',
              ( ['in'], POINTER(IPolycurve2), 'polyCurve' ),
              ( ['in'], POINTER(_midlSAFEARRAY(c_double)), 'distances' ),
              ( ['in'], VARIANT_BOOL, 'asRatios' ),
              ( ['in'], VARIANT_BOOL, 'createParts' ),
              ( ['retval', 'out'], POINTER(POINTER(IEnumSplitPoint)), 'splitInfo' )),
    COMMETHOD([helpstring(u'Divide segment into smaller segments of the specified length.')], HRESULT, 'SplitDivideLength',
              ( ['in'], POINTER(ISegment), 'pSegment' ),
              ( ['in'], c_double, 'Offset' ),
              ( ['in'], c_double, 'Length' ),
              ( ['in'], VARIANT_BOOL, 'asRatio' ),
              ( ['out'], POINTER(c_int), 'numSplitSegments' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(POINTER(ISegment))), 'splitSegments' )),
]
################################################################
## code template for IGeometryBridge2 implementation
##class IGeometryBridge2_Impl(object):
##    def QueryWKSPoints(self, pPointCollection, Index):
##        u"Copies vertices'/points' coordinates to the array of point structures."
##        #return pointStructures
##
##    def AddWKSPoints(self, pPointCollection, pointStructures):
##        u'Adds vertices to this Path, Ring, Polyline, or Polygon, or adds new points to this Multipoint, Triangles, TriangleFan, or TriangleStrip.'
##        #return 
##
##    def SetWKSPoints(self, pPointCollection, pointStructures):
##        u'Replaces all vertices of this Path, Ring, Polyline, or Polygon with new ones, or replaces all points of this Multipoint, Triangles, TriangleFan, or TriangleStrip with new ones.'
##        #return 
##
##    def SplitAtDistances(self, polyCurve, distances, asRatios, createParts):
##        u'Introduces new vertices into this polyline at specified distances from the beginning of the polyline.'
##        #return splitInfo
##
##    def SplitDivideLength(self, pSegment, Offset, Length, asRatio):
##        u'Divide segment into smaller segments of the specified length.'
##        #return numSplitSegments, splitSegments
##
##    def InsertWKSPoints(self, pPointCollection, Index, pointStructures):
##        u'Inserts new vertices/points into this Path, Ring, Polyline, Polygon, Multipoint, Triangles, TriangleFan, TriangleStrip, or MultiPatch.'
##        #return 
##

ILinearUnit._methods_ = [
    COMMETHOD(['propget', helpstring(u'The meters per unit for a coordinate system.')], HRESULT, 'MetersPerUnit',
              ( ['retval', 'out'], POINTER(c_double), 'MetersPerUnit' )),
]
################################################################
## code template for ILinearUnit implementation
##class ILinearUnit_Impl(object):
##    @property
##    def MetersPerUnit(self):
##        u'The meters per unit for a coordinate system.'
##        #return MetersPerUnit
##

IPointArray._methods_ = [
    COMMETHOD(['propget', helpstring(u'The point count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'Returns the point at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(POINTER(IPoint)), 'p' )),
    COMMETHOD([helpstring(u'Removes the point at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all points.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Adds a point.')], HRESULT, 'Add',
              ( ['in'], POINTER(IPoint), 'p' )),
    COMMETHOD([helpstring(u'Adds a point at the specified position.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(IPoint), 'p' )),
]
################################################################
## code template for IPointArray implementation
##class IPointArray_Impl(object):
##    @property
##    def Count(self):
##        u'The point count.'
##        #return Count
##
##    def Insert(self, Index, p):
##        u'Adds a point at the specified position.'
##        #return 
##
##    def Remove(self, Index):
##        u'Removes the point at the specified position.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'Returns the point at the specified position.'
##        #return p
##
##    def RemoveAll(self):
##        u'Removes all points.'
##        #return 
##
##    def Add(self, p):
##        u'Adds a point.'
##        #return 
##

class IMultiPatch2(IMultiPatch):
    _case_insensitive_ = True
    u'Provides access to members that permit controlled access to MultiPatch parts.'
    _iid_ = GUID('{292B91DF-0E21-4489-9F14-CE2C96E9A777}')
    _idlflags_ = []

# values for enumeration 'esriMultiPatchRingType'
esriMultiPatchInvalidRing = 1
esriMultiPatchUndefinedRing = 2
esriMultiPatchFirstRing = 4
esriMultiPatchRing = 8
esriMultiPatchOuterRing = 16
esriMultiPatchInnerRing = 32
esriMultiPatchBeginningRingMask = 28
esriMultiPatchFollowingRingMask = 40
esriMultiPatchProblemCaseRingMask = 3
esriMultiPatchRingType = c_int # enum
IMultiPatch._methods_ = [
    COMMETHOD([helpstring(u'Returns the beginning ring of the ring group containing the specified following ring.')], HRESULT, 'FindBeginningRing',
              ( [], POINTER(IRing), 'followingRing' ),
              ( ['retval', 'out'], POINTER(POINTER(IRing)), 'beginningRing' )),
    COMMETHOD(['propget', helpstring(u'The number of beginning rings, counting only those of the desired types.')], HRESULT, 'BeginningRingCount',
              ( [], c_int, 'ringTypesDesired' ),
              ( ['retval', 'out'], POINTER(c_int), 'BeginningRingCount' )),
    COMMETHOD(['hidden', helpstring(u'Populates an array with references to all beginning rings of the specified types. This method is intended for internal use only.')], HRESULT, 'QueryBeginningRings',
              ( [], c_int, 'ringTypesDesired' ),
              ( [], c_int, 'numBeginningRingsRequested' ),
              ( ['out'], POINTER(POINTER(IRing)), 'beginningRings' )),
    COMMETHOD(['propget', helpstring(u'The number of following rings in the ring group that starts with the specified beginning ring.')], HRESULT, 'FollowingRingCount',
              ( [], POINTER(IRing), 'beginningRing' ),
              ( ['retval', 'out'], POINTER(c_int), 'FollowingRingCount' )),
    COMMETHOD(['hidden', helpstring(u'Populates an array with references to following rings that are in the ring group that starts with the specified beginning ring. This method is intended for internal use only.')], HRESULT, 'QueryFollowingRings',
              ( [], POINTER(IRing), 'beginningRing' ),
              ( [], c_int, 'numFollowingRingsRequested' ),
              ( ['out'], POINTER(POINTER(IRing)), 'followingRings' )),
    COMMETHOD([helpstring(u'Gets the esriMultiPatchRingType of the input Ring and returns a boolean indicating if that ring is a beginning ring.')], HRESULT, 'GetRingType',
              ( [], POINTER(IRing), 'queryRing' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'isBeginningRing' ),
              ( ['retval', 'out'], POINTER(esriMultiPatchRingType), 'ringType' )),
    COMMETHOD([helpstring(u'Defines the type of the input Ring.')], HRESULT, 'PutRingType',
              ( [], POINTER(IRing), 'queryRing' ),
              ( [], esriMultiPatchRingType, 'ringType' )),
    COMMETHOD(['propget', helpstring(u"A reference to a cached copy of the multipatch's footprint in the x-y plane. If the footprint is modified, InvalXYFootprint should be called.")], HRESULT, 'XYFootprint',
              ( ['retval', 'out'], POINTER(POINTER(IGeometry)), 'XYFootprint' )),
    COMMETHOD([helpstring(u'Notifies the multipatch that its cached footprint has been modified by an outside agent. The footprint will be recalculated the next time it is requested.')], HRESULT, 'InvalXYFootprint'),
]
################################################################
## code template for IMultiPatch implementation
##class IMultiPatch_Impl(object):
##    def FindBeginningRing(self, followingRing):
##        u'Returns the beginning ring of the ring group containing the specified following ring.'
##        #return beginningRing
##
##    @property
##    def XYFootprint(self):
##        u"A reference to a cached copy of the multipatch's footprint in the x-y plane. If the footprint is modified, InvalXYFootprint should be called."
##        #return XYFootprint
##
##    def QueryFollowingRings(self, beginningRing, numFollowingRingsRequested):
##        u'Populates an array with references to following rings that are in the ring group that starts with the specified beginning ring. This method is intended for internal use only.'
##        #return followingRings
##
##    @property
##    def BeginningRingCount(self, ringTypesDesired):
##        u'The number of beginning rings, counting only those of the desired types.'
##        #return BeginningRingCount
##
##    def InvalXYFootprint(self):
##        u'Notifies the multipatch that its cached footprint has been modified by an outside agent. The footprint will be recalculated the next time it is requested.'
##        #return 
##
##    def PutRingType(self, queryRing, ringType):
##        u'Defines the type of the input Ring.'
##        #return 
##
##    def GetRingType(self, queryRing):
##        u'Gets the esriMultiPatchRingType of the input Ring and returns a boolean indicating if that ring is a beginning ring.'
##        #return isBeginningRing, ringType
##
##    def QueryBeginningRings(self, ringTypesDesired, numBeginningRingsRequested):
##        u'Populates an array with references to all beginning rings of the specified types. This method is intended for internal use only.'
##        #return beginningRings
##
##    @property
##    def FollowingRingCount(self, beginningRing):
##        u'The number of following rings in the ring group that starts with the specified beginning ring.'
##        #return FollowingRingCount
##

IMultiPatch2._methods_ = [
    COMMETHOD(['hidden', helpstring(u"A reference to a cached copy of the multipatch's footprint in the x-y plane."), 'propputref'], HRESULT, 'XYFootprint',
              ( ['in'], POINTER(IGeometry), 'rhs' )),
]
################################################################
## code template for IMultiPatch2 implementation
##class IMultiPatch2_Impl(object):
##    def XYFootprint(self, rhs):
##        u"A reference to a cached copy of the multipatch's footprint in the x-y plane."
##        #return 
##

class PositionVectorTransformation(CoClass):
    u'Creates a Position Vector transformation.'
    _reg_clsid_ = GUID('{0CDF92B1-C2A0-11D2-BD08-0000F875BCCE}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
class IPositionVectorTransformation(IGeoTransformation):
    _case_insensitive_ = True
    u'Provides access to members that control the 3D vector transformation with rotation, translation and scaling.'
    _iid_ = GUID('{063954B1-C1FB-11D2-BD07-0000F875BCCE}')
    _idlflags_ = ['oleautomation']
PositionVectorTransformation._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ITransformationGEN, ITransformation, IPositionVectorTransformation, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, ISpatialReferenceAuthority]

class IGeometryServer3(IGeometryServer2):
    _case_insensitive_ = True
    u"Provides access to more standard operations on geometric 'value' objects. The input geometries are never modified by these operations. Designed for use in building web services or other kinds of distributed applications."
    _iid_ = GUID('{710B159C-A771-4BC7-BDD7-8779CCFE3821}')
    _idlflags_ = ['oleautomation']
IGeometryServer3._methods_ = [
    COMMETHOD([helpstring(u'Constructs true buffer regions around Points, lines and polygons using true geodesic distances and directions.')], HRESULT, 'BufferGeodesic',
              ( [], POINTER(ISpatialReference), 'pInSR' ),
              ( [], POINTER(ISpatialReference), 'pOutSR' ),
              ( [], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray), 'pDistances' ),
              ( [], c_double, 'bufferDeviation' ),
              ( [], POINTER(ILinearUnit), 'pLinearDistanceUnit' ),
              ( [], VARIANT_BOOL, 'bUnion' ),
              ( [], POINTER(IGeometryArray), 'pInGeometries' ),
              ( ['retval', 'out'], POINTER(POINTER(IGeometryArray)), 'ppBufferedGeometries' )),
    COMMETHOD([helpstring(u'Returns true geodesic area and geodesic perimeter length for each input polygon.')], HRESULT, 'GetAreasAndLengthsGeodesic',
              ( [], POINTER(ISpatialReference), 'pSR' ),
              ( [], POINTER(IPolygonArray), 'pPolygons' ),
              ( [], POINTER(ILinearUnit), 'pLengthUnit' ),
              ( [], POINTER(ILinearUnit), 'pAreaUnit' ),
              ( [], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriAreaUnits, 'areaUnitEnum' ),
              ( ['out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray)), 'ppAreas' ),
              ( ['out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray)), 'ppLengths' )),
    COMMETHOD([helpstring(u'Returns true area and perimeter length for each input polygon.')], HRESULT, 'GetAreasAndLengthsPreserveShape',
              ( [], POINTER(ISpatialReference), 'pSR' ),
              ( [], POINTER(IPolygonArray), 'pPolygons' ),
              ( [], POINTER(ILinearUnit), 'pLengthUnit' ),
              ( [], POINTER(ILinearUnit), 'pAreaUnit' ),
              ( [], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriAreaUnits, 'areaUnitEnum' ),
              ( ['out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray)), 'ppAreas' ),
              ( ['out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray)), 'ppLengths' )),
    COMMETHOD([helpstring(u'Returns true length of each polyline.')], HRESULT, 'GetLengthsPreserveShape',
              ( [], POINTER(ISpatialReference), 'pSR' ),
              ( [], POINTER(IPolylineArray), 'polylines' ),
              ( [], POINTER(ILinearUnit), 'pLengthUnit' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IDoubleArray)), 'ppLengthsArray' )),
]
################################################################
## code template for IGeometryServer3 implementation
##class IGeometryServer3_Impl(object):
##    def GetAreasAndLengthsPreserveShape(self, pSR, pPolygons, pLengthUnit, pAreaUnit, areaUnitEnum):
##        u'Returns true area and perimeter length for each input polygon.'
##        #return ppAreas, ppLengths
##
##    def GetLengthsPreserveShape(self, pSR, polylines, pLengthUnit):
##        u'Returns true length of each polyline.'
##        #return ppLengthsArray
##
##    def BufferGeodesic(self, pInSR, pOutSR, pDistances, bufferDeviation, pLinearDistanceUnit, bUnion, pInGeometries):
##        u'Constructs true buffer regions around Points, lines and polygons using true geodesic distances and directions.'
##        #return ppBufferedGeometries
##
##    def GetAreasAndLengthsGeodesic(self, pSR, pPolygons, pLengthUnit, pAreaUnit, areaUnitEnum):
##        u'Returns true geodesic area and geodesic perimeter length for each input polygon.'
##        #return ppAreas, ppLengths
##

IBufferProgress._methods_ = [
    COMMETHOD([helpstring(u'Called at the beginning of each buffer operation. For example, buffering a set of polygons and polylines, without dissolve, has two operations.')], HRESULT, 'OnOperationBegin',
              ( [], c_int, 'currentOperation' ),
              ( [], c_int, 'numOperations' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbContinue' )),
    COMMETHOD([helpstring(u'Called at the beginning of the next buffering stage within an operation.')], HRESULT, 'OnStageBegin',
              ( [], c_int, 'currentStage' ),
              ( [], c_int, 'currentNumStages' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbContinue' )),
    COMMETHOD([helpstring(u'Called periodically to report number of steps completed in current stage.')], HRESULT, 'OnStepCompleted',
              ( [], c_int, 'stepsCompleted' ),
              ( [], c_int, 'numSteps' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbContinue' )),
]
################################################################
## code template for IBufferProgress implementation
##class IBufferProgress_Impl(object):
##    def OnStageBegin(self, currentStage, currentNumStages):
##        u'Called at the beginning of the next buffering stage within an operation.'
##        #return pbContinue
##
##    def OnStepCompleted(self, stepsCompleted, numSteps):
##        u'Called periodically to report number of steps completed in current stage.'
##        #return pbContinue
##
##    def OnOperationBegin(self, currentOperation, numOperations):
##        u'Called at the beginning of each buffer operation. For example, buffering a set of polygons and polylines, without dissolve, has two operations.'
##        #return pbContinue
##

class IVerticalDatumEdit(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the properties of a vertical datum.'
    _iid_ = GUID('{7E887F04-3F5A-4D26-AC12-41B33CF253BB}')
    _idlflags_ = ['oleautomation']
IVerticalDatumEdit._methods_ = [
    COMMETHOD(['hidden', helpstring(u'Defines the properties of a vertical datum.')], HRESULT, 'DefineEx',
              ( [], BSTR, 'Name' ),
              ( [], BSTR, 'Alias' ),
              ( [], BSTR, 'Abbreviation' ),
              ( [], BSTR, 'Remarks' )),
    COMMETHOD([helpstring(u'Defines the properties of a vertical datum.')], HRESULT, 'Define',
              ( ['optional'], POINTER(VARIANT), 'Name' ),
              ( ['optional'], POINTER(VARIANT), 'Alias' ),
              ( ['optional'], POINTER(VARIANT), 'Abbreviation' ),
              ( ['optional'], POINTER(VARIANT), 'Remarks' )),
]
################################################################
## code template for IVerticalDatumEdit implementation
##class IVerticalDatumEdit_Impl(object):
##    def DefineEx(self, Name, Alias, Abbreviation, Remarks):
##        u'Defines the properties of a vertical datum.'
##        #return 
##
##    def Define(self, Name, Alias, Abbreviation, Remarks):
##        u'Defines the properties of a vertical datum.'
##        #return 
##

class ITopologicalSegment(ISegment):
    _case_insensitive_ = True
    u'Provides access to members that identify segments that can participate in topological operations (intersect, etc).'
    _iid_ = GUID('{4DF409C0-2B14-11D2-BCBD-0000F875BCCE}')
    _idlflags_ = ['restricted']
class ITopologicalSegment2(ITopologicalSegment):
    _case_insensitive_ = True
    u'Provides access to members that extend the ITopologicalSegment interface.'
    _iid_ = GUID('{FE736C24-01DA-11D4-9F6C-00C04F6BDD7F}')
    _idlflags_ = ['restricted']

# values for enumeration 'esriGeometryAttributes'
esriAttributeNone = 0
esriAttributeZ = 128
esriAttributeM = 64
esriAttributeID = 16
esriAttributeNormal = 8
esriAttributeTexture = 4
esriAttributeAll = 255
esriGeometryAttributes = c_int # enum
ISegment._methods_ = [
    COMMETHOD(['restricted', helpstring(u'Gets some attributes from this point and copies them to another point. Awareness is not considered.')], HRESULT, 'QueryAttributes',
              ( [], VARIANT_BOOL, 'getAttributes' ),
              ( [], VARIANT_BOOL, 'getAwareness' ),
              ( [], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriPointAttributes), 'from' ),
              ( [], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriPointAttributes), 'to' )),
    COMMETHOD(['restricted', helpstring(u'Sets some attributes from this point and copies them to another point. Awareness is not considered.')], HRESULT, 'PutAttributes',
              ( [], VARIANT_BOOL, 'PutAttributes' ),
              ( [], VARIANT_BOOL, 'putAwareness' ),
              ( [], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriPointAttributes), 'from' ),
              ( [], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriPointAttributes), 'to' )),
    COMMETHOD(['restricted', helpstring(u'Indicates if the segment is aware of the specified attribute type.'), 'propget'], HRESULT, 'VertexAttributeAware',
              ( [], esriGeometryAttributes, 'attributeType' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'attributeAware' )),
    COMMETHOD(['restricted', helpstring(u'Indicates if the segment is aware of the specified attribute type.'), 'propput'], HRESULT, 'VertexAttributeAware',
              ( [], esriGeometryAttributes, 'attributeType' ),
              ( [], VARIANT_BOOL, 'attributeAware' )),
    COMMETHOD(['restricted', helpstring(u'Returns two booleans telling if the segment as from attribute and to attribute values.')], HRESULT, 'HasVertexAttributes',
              ( [], esriGeometryAttributes, 'attributeType' ),
              ( ['out'], POINTER(VARIANT_BOOL), 'hasFromAttribute' ),
              ( ['out'], POINTER(VARIANT_BOOL), 'hasToAttribute' )),
    COMMETHOD(['restricted', helpstring(u'Indicates if attributeValue is located on this segment.')], HRESULT, 'VertexAttributeOn',
              ( [], esriGeometryAttributes, 'attributeType' ),
              ( [], c_double, 'attributeValue' ),
              ( ['retval', 'out'], POINTER(c_int), 'countInteractions' )),
    COMMETHOD(['restricted', helpstring(u"Gets the 'from' and the 'to' attribute values.")], HRESULT, 'QueryVertexAttributes',
              ( [], esriGeometryAttributes, 'attributeType' ),
              ( ['out'], POINTER(c_double), 'fromAttribute' ),
              ( ['out'], POINTER(c_double), 'toAttribute' )),
    COMMETHOD(['restricted', helpstring(u"Sets the 'from' and the 'to' attribute values.")], HRESULT, 'PutVertexAttributes',
              ( [], esriGeometryAttributes, 'attributeType' ),
              ( [], c_double, 'fromAttribute' ),
              ( [], c_double, 'toAttribute' )),
    COMMETHOD(['restricted', helpstring(u'Gets the attribute value corresponding to the distance along the segment.')], HRESULT, 'GetVertexAttributeAtDistance',
              ( [], esriGeometryAttributes, 'attributeType' ),
              ( [], c_double, 'distance' ),
              ( [], VARIANT_BOOL, 'asRatio' ),
              ( ['retval', 'out'], POINTER(c_double), 'attributeValue' )),
    COMMETHOD(['restricted', helpstring(u'Gets the distance corresponding to the attribute value along the segment.')], HRESULT, 'GetDistanceAtVertexAttribute',
              ( [], esriGeometryAttributes, 'attributeType' ),
              ( [], c_double, 'attributeValue' ),
              ( [], VARIANT_BOOL, 'asRatio' ),
              ( ['retval', 'out'], POINTER(c_double), 'distance' )),
    COMMETHOD(['restricted', helpstring(u'Splits the segment in two segments at the location corresponding to the attribute value.')], HRESULT, 'SplitAtVertexAttribute',
              ( [], esriGeometryAttributes, 'attributeType' ),
              ( [], c_double, 'attributeValue' ),
              ( ['out'], POINTER(POINTER(ISegment)), 'fromSegment' ),
              ( ['out'], POINTER(POINTER(ISegment)), 'toSegment' )),
    COMMETHOD(['restricted', helpstring(u'Gets the point at the location corresponding to the attribute value.')], HRESULT, 'GetPointsAtVertexAttribute',
              ( [], esriGeometryAttributes, 'attributeType' ),
              ( [], c_double, 'attributeValue' ),
              ( [], c_double, 'lateralOffset' ),
              ( ['out'], POINTER(POINTER(IPointCollection)), 'outPoints' )),
    COMMETHOD(['restricted', helpstring(u"Gets the segment corresponding to the extent along the segment between the 'from' and 'to' attribute values.")], HRESULT, 'GetSubSegmentBetweenVertexAttributes',
              ( [], esriGeometryAttributes, 'attributeType' ),
              ( [], c_double, 'fromAttribute' ),
              ( [], c_double, 'toAttribute' ),
              ( ['out'], POINTER(POINTER(ISegment)), 'outSegment' )),
    COMMETHOD(['restricted', helpstring(u'Interpolates Z and M values at distanceAlongSegment and stores the results at point.')], HRESULT, 'InterpolateVertexAttributes',
              ( [], c_double, 'distanceAlongSegment' ),
              ( [], VARIANT_BOOL, 'asRatio' ),
              ( [], POINTER(IPoint), 'atPoint' )),
    COMMETHOD(['restricted', helpstring(u'Synchronize Empty Attributes.')], HRESULT, 'SynchronizeEmptyAttributes',
              ( [], POINTER(ISegment), 'toSegment' )),
    COMMETHOD([helpstring(u'Finds curvature and unit vector starting at point on segment and directed to embedded circle center.')], HRESULT, 'QueryCurvature',
              ( [], c_double, 'DistanceAlongCurve' ),
              ( [], VARIANT_BOOL, 'asRatio' ),
              ( ['out'], POINTER(c_double), 'curvature' ),
              ( [], POINTER(ILine), 'unitVector' )),
    COMMETHOD([helpstring(u'Finds turn direction between two connected segments.')], HRESULT, 'ReturnTurnDirection',
              ( [], POINTER(ISegment), 'otherSegment' ),
              ( ['retval', 'out'], POINTER(c_int), 'turnDirection' )),
    COMMETHOD(['restricted', helpstring(u'Finds intersections with clipping envelope; boundaryOverlap is ignored for non-linear segments.')], HRESULT, 'EnvelopeIntersection',
              ( [], POINTER(IEnvelope), 'intersectionEnvelope' ),
              ( [], VARIANT_BOOL, 'boundaryOverlap' ),
              ( ['in', 'out'], POINTER(c_double), 'segmentParams' ),
              ( ['in', 'out'], POINTER(c_double), 'envelopeDistances' ),
              ( ['in', 'out'], POINTER(c_int), 'numIntersections' ),
              ( ['out'], POINTER(c_int), 'outcode' )),
    COMMETHOD(['restricted', helpstring(u'Queries the area correction value.')], HRESULT, 'QueryAreaCorrection',
              ( ['out'], POINTER(c_double), 'areaCorrection' )),
    COMMETHOD(['restricted', helpstring(u'Queries the centroid correction value.')], HRESULT, 'QueryCentroidCorrection',
              ( [], POINTER(c_double), 'weightedCentroidX' ),
              ( [], POINTER(c_double), 'weightedCentroidY' ),
              ( [], POINTER(c_double), 'areaCorrection' )),
    COMMETHOD(['restricted', helpstring(u'Queries the WKS Envelope.')], HRESULT, 'QueryWKSEnvelope',
              ( [], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSEnvelope), 'Envelope' )),
    COMMETHOD(['restricted', helpstring(u'Returns the number of horizontal intersections.')], HRESULT, 'HorizontalIntersectionCount',
              ( [], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPoint), 'p' ),
              ( ['out'], POINTER(VARIANT_BOOL), 'pointOnLine' ),
              ( ['retval', 'out'], POINTER(c_int), 'numIntersections' )),
    COMMETHOD([helpstring(u'Split segment at specified distance.')], HRESULT, 'SplitAtDistance',
              ( [], c_double, 'distances' ),
              ( [], VARIANT_BOOL, 'asRatio' ),
              ( ['out'], POINTER(POINTER(ISegment)), 'fromSegment' ),
              ( ['out'], POINTER(POINTER(ISegment)), 'toSegment' )),
    COMMETHOD([helpstring(u'Divide segment into smaller segments of the specified length.')], HRESULT, 'SplitDivideLength',
              ( [], c_double, 'Offset' ),
              ( [], c_double, 'Length' ),
              ( [], VARIANT_BOOL, 'asRatio' ),
              ( [], POINTER(c_int), 'numSplitSegments' ),
              ( [], POINTER(POINTER(ISegment)), 'splitSegments' )),
    COMMETHOD(['hidden', helpstring(u'Densify segment into the specified number of smaller segments. This method is intended for internal use only.')], HRESULT, 'Densify',
              ( [], c_int, 'cInSlots' ),
              ( [], c_double, 'maxDeviation' ),
              ( ['out'], POINTER(c_int), 'pcOutSegments' ),
              ( ['out'], POINTER(POINTER(ILine)), 'segments' )),
    COMMETHOD(['restricted', helpstring(u'Returns the maximum distance from the line.')], HRESULT, 'MaxDistanceFromLine',
              ( [], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPoint), 'baseFrom' ),
              ( [], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPoint), 'baseTo' ),
              ( [], c_double, 'minOffset' ),
              ( [], c_double, 'fromArcDistance' ),
              ( [], c_double, 'toArcDistance' ),
              ( [], POINTER(c_double), 'maxOffset' ),
              ( [], POINTER(c_double), 'atArcDistance' ),
              ( [], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPoint), 'farPoint' )),
    COMMETHOD(['restricted', helpstring(u'Converts the distance measure to a ratio of the total distance.')], HRESULT, 'ConvertDistanceMeasureToRatio',
              ( ['in'], c_double, 'distanceMeasure' ),
              ( [], POINTER(c_double), 'distanceRatio' )),
    COMMETHOD(['restricted', helpstring(u"Query the WKSPoint at the 'from' point.")], HRESULT, 'QueryWKSFromPoint',
              ( ['out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPoint), 'p' )),
    COMMETHOD(['restricted', helpstring(u"Query the WKSPoint at the 'to' point.")], HRESULT, 'QueryWKSToPoint',
              ( ['out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPoint), 'p' )),
    COMMETHOD([helpstring(u'Shift longitudes to the right of splitLongitude. This method is obsolete.')], HRESULT, 'GeographicShift',
              ( [], c_double, 'splitLongitude' )),
]
################################################################
## code template for ISegment implementation
##class ISegment_Impl(object):
##    def PutVertexAttributes(self, attributeType, fromAttribute, toAttribute):
##        u"Sets the 'from' and the 'to' attribute values."
##        #return 
##
##    def ReturnTurnDirection(self, otherSegment):
##        u'Finds turn direction between two connected segments.'
##        #return turnDirection
##
##    def HasVertexAttributes(self, attributeType):
##        u'Returns two booleans telling if the segment as from attribute and to attribute values.'
##        #return hasFromAttribute, hasToAttribute
##
##    def GeographicShift(self, splitLongitude):
##        u'Shift longitudes to the right of splitLongitude. This method is obsolete.'
##        #return 
##
##    def HorizontalIntersectionCount(self, p):
##        u'Returns the number of horizontal intersections.'
##        #return pointOnLine, numIntersections
##
##    def SynchronizeEmptyAttributes(self, toSegment):
##        u'Synchronize Empty Attributes.'
##        #return 
##
##    def QueryWKSFromPoint(self):
##        u"Query the WKSPoint at the 'from' point."
##        #return p
##
##    def QueryCentroidCorrection(self, weightedCentroidX, weightedCentroidY, areaCorrection):
##        u'Queries the centroid correction value.'
##        #return 
##
##    def QueryVertexAttributes(self, attributeType):
##        u"Gets the 'from' and the 'to' attribute values."
##        #return fromAttribute, toAttribute
##
##    def SplitAtVertexAttribute(self, attributeType, attributeValue):
##        u'Splits the segment in two segments at the location corresponding to the attribute value.'
##        #return fromSegment, toSegment
##
##    def SplitDivideLength(self, Offset, Length, asRatio, numSplitSegments, splitSegments):
##        u'Divide segment into smaller segments of the specified length.'
##        #return 
##
##    def QueryCurvature(self, DistanceAlongCurve, asRatio, unitVector):
##        u'Finds curvature and unit vector starting at point on segment and directed to embedded circle center.'
##        #return curvature
##
##    def _get(self, attributeType):
##        u'Indicates if the segment is aware of the specified attribute type.'
##        #return attributeAware
##    def _set(self, attributeType, attributeAware):
##        u'Indicates if the segment is aware of the specified attribute type.'
##    VertexAttributeAware = property(_get, _set, doc = _set.__doc__)
##
##    def InterpolateVertexAttributes(self, distanceAlongSegment, asRatio, atPoint):
##        u'Interpolates Z and M values at distanceAlongSegment and stores the results at point.'
##        #return 
##
##    def PutAttributes(self, PutAttributes, putAwareness, from, to):
##        u'Sets some attributes from this point and copies them to another point. Awareness is not considered.'
##        #return 
##
##    def QueryAreaCorrection(self):
##        u'Queries the area correction value.'
##        #return areaCorrection
##
##    def GetDistanceAtVertexAttribute(self, attributeType, attributeValue, asRatio):
##        u'Gets the distance corresponding to the attribute value along the segment.'
##        #return distance
##
##    def VertexAttributeOn(self, attributeType, attributeValue):
##        u'Indicates if attributeValue is located on this segment.'
##        #return countInteractions
##
##    def EnvelopeIntersection(self, intersectionEnvelope, boundaryOverlap):
##        u'Finds intersections with clipping envelope; boundaryOverlap is ignored for non-linear segments.'
##        #return segmentParams, envelopeDistances, numIntersections, outcode
##
##    def QueryWKSToPoint(self):
##        u"Query the WKSPoint at the 'to' point."
##        #return p
##
##    def MaxDistanceFromLine(self, baseFrom, baseTo, minOffset, fromArcDistance, toArcDistance, maxOffset, atArcDistance, farPoint):
##        u'Returns the maximum distance from the line.'
##        #return 
##
##    def ConvertDistanceMeasureToRatio(self, distanceMeasure, distanceRatio):
##        u'Converts the distance measure to a ratio of the total distance.'
##        #return 
##
##    def QueryWKSEnvelope(self, Envelope):
##        u'Queries the WKS Envelope.'
##        #return 
##
##    def GetSubSegmentBetweenVertexAttributes(self, attributeType, fromAttribute, toAttribute):
##        u"Gets the segment corresponding to the extent along the segment between the 'from' and 'to' attribute values."
##        #return outSegment
##
##    def GetPointsAtVertexAttribute(self, attributeType, attributeValue, lateralOffset):
##        u'Gets the point at the location corresponding to the attribute value.'
##        #return outPoints
##
##    def QueryAttributes(self, getAttributes, getAwareness, from, to):
##        u'Gets some attributes from this point and copies them to another point. Awareness is not considered.'
##        #return 
##
##    def SplitAtDistance(self, distances, asRatio):
##        u'Split segment at specified distance.'
##        #return fromSegment, toSegment
##
##    def Densify(self, cInSlots, maxDeviation):
##        u'Densify segment into the specified number of smaller segments. This method is intended for internal use only.'
##        #return pcOutSegments, segments
##
##    def GetVertexAttributeAtDistance(self, attributeType, distance, asRatio):
##        u'Gets the attribute value corresponding to the distance along the segment.'
##        #return attributeValue
##

ITopologicalSegment._methods_ = [
    COMMETHOD(['propget', helpstring(u'The monotonic Y value at a given X.')], HRESULT, 'YAtX',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPoint), 'p' ),
              ( ['retval', 'out'], POINTER(c_double), 'Y' )),
    COMMETHOD([helpstring(u'Breaks segment overlap into continuous, non-overlapping segments.')], HRESULT, 'BreakOverlap',
              ( [], POINTER(ITopologicalSegment), 'otherSegment' ),
              ( [], POINTER(ITopologicalSegment), 'interpolator' ),
              ( [], POINTER(POINTER(ITopologicalSegment)), 'busted' ),
              ( [], POINTER(c_int), 'overlapKind' )),
    COMMETHOD([helpstring(u'Splits segment into Y monotonic segments.')], HRESULT, 'SplitYMonotonic',
              ( [], POINTER(c_int), 'numSegments' ),
              ( [], POINTER(POINTER(ITopologicalSegment)), 'segments' ),
              ( [], POINTER(VARIANT_BOOL), 'flipped' )),
]
################################################################
## code template for ITopologicalSegment implementation
##class ITopologicalSegment_Impl(object):
##    @property
##    def YAtX(self, p):
##        u'The monotonic Y value at a given X.'
##        #return Y
##
##    def SplitYMonotonic(self, numSegments, segments, flipped):
##        u'Splits segment into Y monotonic segments.'
##        #return 
##
##    def BreakOverlap(self, otherSegment, interpolator, busted, overlapKind):
##        u'Breaks segment overlap into continuous, non-overlapping segments.'
##        #return 
##

ITopologicalSegment2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates whether the segment is shorter than the tolerance.')], HRESULT, 'IsShort',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsShort' )),
    COMMETHOD(['propget', helpstring(u'Indicates the counterclockwise orientation for non-linear curves including closed BezierCurves.')], HRESULT, 'IsCounterClockwise2',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'isCCW' )),
    COMMETHOD([helpstring(u'Splits segments into Y monotonic segments and returns the unsplit parent segments.')], HRESULT, 'SplitYMonotonicEx',
              ( [], POINTER(c_int), 'numSegments' ),
              ( [], POINTER(POINTER(ITopologicalSegment)), 'segments' ),
              ( [], POINTER(VARIANT_BOOL), 'flipped' ),
              ( [], POINTER(POINTER(ITopologicalSegment2)), 'parentSegments' )),
]
################################################################
## code template for ITopologicalSegment2 implementation
##class ITopologicalSegment2_Impl(object):
##    @property
##    def IsShort(self):
##        u'Indicates whether the segment is shorter than the tolerance.'
##        #return IsShort
##
##    @property
##    def IsCounterClockwise2(self):
##        u'Indicates the counterclockwise orientation for non-linear curves including closed BezierCurves.'
##        #return isCCW
##
##    def SplitYMonotonicEx(self, numSegments, segments, flipped, parentSegments):
##        u'Splits segments into Y monotonic segments and returns the unsplit parent segments.'
##        #return 
##

IEnumVertex._methods_ = [
    COMMETHOD([helpstring(u'Returns the next vertex and its location within the geometry.')], HRESULT, 'Next',
              ( ['out'], POINTER(POINTER(IPoint)), 'outVertex' ),
              ( ['out'], POINTER(c_int), 'outPartIndex' ),
              ( ['out'], POINTER(c_int), 'vertexIndex' )),
    COMMETHOD([helpstring(u'Copies the next vertex to the input parameter and returns its location in the geometry.')], HRESULT, 'QueryNext',
              ( [], POINTER(IPoint), 'vertex' ),
              ( ['out'], POINTER(c_int), 'outPartIndex' ),
              ( ['out'], POINTER(c_int), 'vertexIndex' )),
    COMMETHOD([helpstring(u'Returns the previous vertex and its location in the geometry.')], HRESULT, 'Previous',
              ( ['out'], POINTER(POINTER(IPoint)), 'outVertex' ),
              ( ['out'], POINTER(c_int), 'outPartIndex' ),
              ( ['out'], POINTER(c_int), 'vertexIndex' )),
    COMMETHOD([helpstring(u'Copies the previous vertex to the input parameter and returns its location in the geometry.')], HRESULT, 'QueryPrevious',
              ( [], POINTER(IPoint), 'vertex' ),
              ( ['out'], POINTER(c_int), 'outPartIndex' ),
              ( ['out'], POINTER(c_int), 'vertexIndex' )),
    COMMETHOD([helpstring(u'Returns the next vertex in current part, or goes back to the first vertex in the part after last vertex in part is encountered.')], HRESULT, 'NextInPart',
              ( ['out'], POINTER(POINTER(IPoint)), 'outVertex' ),
              ( ['out'], POINTER(c_int), 'OutVertexIndex' )),
    COMMETHOD([helpstring(u'Copies the next vertex in the current part to the input parameter and returns its location in current part. Continues with the first vertex in the part if already at the end.')], HRESULT, 'QueryNextInPart',
              ( [], POINTER(IPoint), 'vertex' ),
              ( ['out'], POINTER(c_int), 'OutVertexIndex' )),
    COMMETHOD([helpstring(u'Skips forward or backward over a specified number of vertices.')], HRESULT, 'Skip',
              ( [], c_int, 'numVertices' )),
    COMMETHOD([helpstring(u'Starts from the beginning of the geometry the next time Next is called.')], HRESULT, 'Reset'),
    COMMETHOD([helpstring(u'Returns a copy of this enumerator positioned at the same vertex.')], HRESULT, 'Clone',
              ( ['retval', 'out'], POINTER(POINTER(IEnumVertex)), 'outEnumerator' )),
    COMMETHOD([helpstring(u'Starts from the end of the geometry the next time Previous is called.')], HRESULT, 'ResetToEnd'),
    COMMETHOD([helpstring(u'Resets enumerator to specific location.')], HRESULT, 'SetAt',
              ( [], c_int, 'iPart' ),
              ( [], c_int, 'iVertex' )),
    COMMETHOD([helpstring(u'Indicates if the current vertex is last in the current part.')], HRESULT, 'IsLastInPart',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsLastInPart' )),
    COMMETHOD([helpstring(u'Sets the X coordinate of the current vertex. For segment-based geometries, this will modify a pair of segments.')], HRESULT, 'put_X',
              ( [], c_double, 'X' )),
    COMMETHOD([helpstring(u'Sets the Y coordinate of the current vertex. For segment-based geometries, this will modify a pair of segments.')], HRESULT, 'put_Y',
              ( [], c_double, 'Y' )),
    COMMETHOD([helpstring(u'Sets the Z coordinate of the current vertex. For segment-based geometries, this will modify a pair of segments.')], HRESULT, 'put_Z',
              ( [], c_double, 'Z' )),
    COMMETHOD([helpstring(u'Sets the M attribute of the current vertex. For segment-based geometries, this will modify a pair of segments.')], HRESULT, 'put_M',
              ( [], c_double, 'M' )),
    COMMETHOD([helpstring(u'Sets the ID attribute of the current vertex. For segment-based geometries, this will modify a pair of segments.')], HRESULT, 'put_ID',
              ( [], c_int, 'pointID' )),
    COMMETHOD(['restricted', helpstring(u'Sets attribute values at the current vertex.')], HRESULT, 'put_Attribute',
              ( [], esriGeometryAttributes, 'attributeType' ),
              ( [], c_double, 'Value' )),
]
################################################################
## code template for IEnumVertex implementation
##class IEnumVertex_Impl(object):
##    def Reset(self):
##        u'Starts from the beginning of the geometry the next time Next is called.'
##        #return 
##
##    def IsLastInPart(self):
##        u'Indicates if the current vertex is last in the current part.'
##        #return IsLastInPart
##
##    def put_ID(self, pointID):
##        u'Sets the ID attribute of the current vertex. For segment-based geometries, this will modify a pair of segments.'
##        #return 
##
##    def put_Y(self, Y):
##        u'Sets the Y coordinate of the current vertex. For segment-based geometries, this will modify a pair of segments.'
##        #return 
##
##    def Skip(self, numVertices):
##        u'Skips forward or backward over a specified number of vertices.'
##        #return 
##
##    def Clone(self):
##        u'Returns a copy of this enumerator positioned at the same vertex.'
##        #return outEnumerator
##
##    def put_X(self, X):
##        u'Sets the X coordinate of the current vertex. For segment-based geometries, this will modify a pair of segments.'
##        #return 
##
##    def put_M(self, M):
##        u'Sets the M attribute of the current vertex. For segment-based geometries, this will modify a pair of segments.'
##        #return 
##
##    def QueryPrevious(self, vertex):
##        u'Copies the previous vertex to the input parameter and returns its location in the geometry.'
##        #return outPartIndex, vertexIndex
##
##    def Next(self):
##        u'Returns the next vertex and its location within the geometry.'
##        #return outVertex, outPartIndex, vertexIndex
##
##    def SetAt(self, iPart, iVertex):
##        u'Resets enumerator to specific location.'
##        #return 
##
##    def put_Z(self, Z):
##        u'Sets the Z coordinate of the current vertex. For segment-based geometries, this will modify a pair of segments.'
##        #return 
##
##    def QueryNext(self, vertex):
##        u'Copies the next vertex to the input parameter and returns its location in the geometry.'
##        #return outPartIndex, vertexIndex
##
##    def ResetToEnd(self):
##        u'Starts from the end of the geometry the next time Previous is called.'
##        #return 
##
##    def QueryNextInPart(self, vertex):
##        u'Copies the next vertex in the current part to the input parameter and returns its location in current part. Continues with the first vertex in the part if already at the end.'
##        #return OutVertexIndex
##
##    def NextInPart(self):
##        u'Returns the next vertex in current part, or goes back to the first vertex in the part after last vertex in part is encountered.'
##        #return outVertex, OutVertexIndex
##
##    def put_Attribute(self, attributeType, Value):
##        u'Sets attribute values at the current vertex.'
##        #return 
##
##    def Previous(self):
##        u'Returns the previous vertex and its location in the geometry.'
##        #return outVertex, outPartIndex, vertexIndex
##

IEnumSplitPoint._methods_ = [
    COMMETHOD([helpstring(u'Returns the next split point along with its location in the geometry.')], HRESULT, 'NextInSequence',
              ( ['out'], POINTER(POINTER(IPoint)), 'splitPoint' ),
              ( ['in', 'out'], POINTER(c_int), 'part' ),
              ( ['in', 'out'], POINTER(c_int), 'vertex' )),
    COMMETHOD([helpstring(u'Returns the previous split point along with its location in the geometry.')], HRESULT, 'PreviousInSequence',
              ( ['out'], POINTER(POINTER(IPoint)), 'splitPoint' ),
              ( ['in', 'out'], POINTER(c_int), 'part' ),
              ( ['in', 'out'], POINTER(c_int), 'vertex' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether or not a split was performed at the current vertex (a split point could be the same as a vertex existing before SplitAtPoints/Distances was used).')], HRESULT, 'SplitHappened',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'SplitHappened' )),
    COMMETHOD(['propget', helpstring(u'The distance of the current split vertex from the beginning of the polycurve.')], HRESULT, 'SplitDistance',
              ( ['retval', 'out'], POINTER(c_double), 'SplitDistance' )),
    COMMETHOD(['restricted', helpstring(u'Returns the original attributes at the current split location before the split happened.')], HRESULT, 'QueryOldAttributes',
              ( [], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriPointAttributes), 'oldAttributes' )),
    COMMETHOD(['propget', helpstring(u'The original M value at the current split location before the split happened.')], HRESULT, 'OldM',
              ( ['retval', 'out'], POINTER(c_double), 'OldM' )),
    COMMETHOD(['propget', helpstring(u'The original Z value at the current split location before the split happened.')], HRESULT, 'OldZ',
              ( ['retval', 'out'], POINTER(c_double), 'OldZ' )),
    COMMETHOD(['propget', helpstring(u'The original PointID value at the split location before the split happened.')], HRESULT, 'OldID',
              ( ['retval', 'out'], POINTER(c_int), 'OldID' )),
]
################################################################
## code template for IEnumSplitPoint implementation
##class IEnumSplitPoint_Impl(object):
##    def QueryOldAttributes(self, oldAttributes):
##        u'Returns the original attributes at the current split location before the split happened.'
##        #return 
##
##    @property
##    def OldZ(self):
##        u'The original Z value at the current split location before the split happened.'
##        #return OldZ
##
##    def PreviousInSequence(self):
##        u'Returns the previous split point along with its location in the geometry.'
##        #return splitPoint, part, vertex
##
##    @property
##    def SplitHappened(self):
##        u'Indicates whether or not a split was performed at the current vertex (a split point could be the same as a vertex existing before SplitAtPoints/Distances was used).'
##        #return SplitHappened
##
##    def NextInSequence(self):
##        u'Returns the next split point along with its location in the geometry.'
##        #return splitPoint, part, vertex
##
##    @property
##    def SplitDistance(self):
##        u'The distance of the current split vertex from the beginning of the polycurve.'
##        #return SplitDistance
##
##    @property
##    def OldID(self):
##        u'The original PointID value at the split location before the split happened.'
##        #return OldID
##
##    @property
##    def OldM(self):
##        u'The original M value at the current split location before the split happened.'
##        #return OldM
##

IEnvelope._methods_ = [
    COMMETHOD(['propget', helpstring(u'The width of the envelope.')], HRESULT, 'Width',
              ( ['retval', 'out'], POINTER(c_double), 'Width' )),
    COMMETHOD(['propput', helpstring(u'The width of the envelope.')], HRESULT, 'Width',
              ( [], c_double, 'Width' )),
    COMMETHOD(['propget', helpstring(u'The height of the envelope.')], HRESULT, 'Height',
              ( ['retval', 'out'], POINTER(c_double), 'Height' )),
    COMMETHOD(['propput', helpstring(u'The depth of the envelope.')], HRESULT, 'Depth',
              ( [], c_double, 'Depth' )),
    COMMETHOD(['propget', helpstring(u'The depth of the envelope.')], HRESULT, 'Depth',
              ( ['retval', 'out'], POINTER(c_double), 'Depth' )),
    COMMETHOD(['propput', helpstring(u'The height of the envelope.')], HRESULT, 'Height',
              ( [], c_double, 'Height' )),
    COMMETHOD(['propget', helpstring(u'The lower left corner.')], HRESULT, 'LowerLeft',
              ( ['retval', 'out'], POINTER(POINTER(IPoint)), 'LowerLeft' )),
    COMMETHOD(['propput', helpstring(u'The lower left corner.')], HRESULT, 'LowerLeft',
              ( [], POINTER(IPoint), 'LowerLeft' )),
    COMMETHOD(['propget', helpstring(u'The upper left corner.')], HRESULT, 'UpperLeft',
              ( ['retval', 'out'], POINTER(POINTER(IPoint)), 'UpperLeft' )),
    COMMETHOD(['propput', helpstring(u'The upper left corner.')], HRESULT, 'UpperLeft',
              ( [], POINTER(IPoint), 'UpperLeft' )),
    COMMETHOD(['propget', helpstring(u'The upper right corner.')], HRESULT, 'UpperRight',
              ( ['retval', 'out'], POINTER(POINTER(IPoint)), 'UpperRight' )),
    COMMETHOD(['propput', helpstring(u'The upper right corner.')], HRESULT, 'UpperRight',
              ( [], POINTER(IPoint), 'UpperRight' )),
    COMMETHOD(['propget', helpstring(u'The lower right corner.')], HRESULT, 'LowerRight',
              ( ['retval', 'out'], POINTER(POINTER(IPoint)), 'LowerRight' )),
    COMMETHOD(['propput', helpstring(u'The lower right corner.')], HRESULT, 'LowerRight',
              ( [], POINTER(IPoint), 'LowerRight' )),
    COMMETHOD(['propget', helpstring(u'The position of the left side.')], HRESULT, 'XMin',
              ( ['retval', 'out'], POINTER(c_double), 'XMin' )),
    COMMETHOD(['propput', helpstring(u'The position of the left side.')], HRESULT, 'XMin',
              ( [], c_double, 'XMin' )),
    COMMETHOD(['propget', helpstring(u'The position of the bottom.')], HRESULT, 'YMin',
              ( ['retval', 'out'], POINTER(c_double), 'YMin' )),
    COMMETHOD(['propput', helpstring(u'The position of the bottom.')], HRESULT, 'YMin',
              ( [], c_double, 'YMin' )),
    COMMETHOD(['propget', helpstring(u'The position of the right side.')], HRESULT, 'XMax',
              ( ['retval', 'out'], POINTER(c_double), 'XMax' )),
    COMMETHOD(['propput', helpstring(u'The position of the right side.')], HRESULT, 'XMax',
              ( [], c_double, 'XMax' )),
    COMMETHOD(['propget', helpstring(u'The position of the top.')], HRESULT, 'YMax',
              ( ['retval', 'out'], POINTER(c_double), 'YMax' )),
    COMMETHOD(['propput', helpstring(u'The position of the top.')], HRESULT, 'YMax',
              ( [], c_double, 'YMax' )),
    COMMETHOD(['propget', helpstring(u'The minimum measure value in the area of the envelope.')], HRESULT, 'MMin',
              ( ['retval', 'out'], POINTER(c_double), 'MMin' )),
    COMMETHOD(['propput', helpstring(u'The minimum measure value in the area of the envelope.')], HRESULT, 'MMin',
              ( [], c_double, 'MMin' )),
    COMMETHOD(['propget', helpstring(u'The maximum measure value in the area of the envelope.')], HRESULT, 'MMax',
              ( ['retval', 'out'], POINTER(c_double), 'MMax' )),
    COMMETHOD(['propput', helpstring(u'The maximum measure value in the area of the envelope.')], HRESULT, 'MMax',
              ( [], c_double, 'MMax' )),
    COMMETHOD(['propget', helpstring(u'The minimum Z value in the area of the envelope.')], HRESULT, 'ZMin',
              ( ['retval', 'out'], POINTER(c_double), 'ZMin' )),
    COMMETHOD(['propput', helpstring(u'The minimum Z value in the area of the envelope.')], HRESULT, 'ZMin',
              ( [], c_double, 'ZMin' )),
    COMMETHOD(['propget', helpstring(u'The maximum Z value in the area of the envelope.')], HRESULT, 'ZMax',
              ( ['retval', 'out'], POINTER(c_double), 'ZMax' )),
    COMMETHOD(['propput', helpstring(u'The maximum Z value in the area of the envelope.')], HRESULT, 'ZMax',
              ( [], c_double, 'ZMax' )),
    COMMETHOD([helpstring(u'Adjusts to overlap inEnvelope.')], HRESULT, 'Union',
              ( [], POINTER(IEnvelope), 'inEnvelope' )),
    COMMETHOD([helpstring(u'Adjusts to include only the area also included by inEnvelope.')], HRESULT, 'Intersect',
              ( [], POINTER(IEnvelope), 'inEnvelope' )),
    COMMETHOD([helpstring(u'Moves the sides x units horizontally and y units vertically.')], HRESULT, 'Offset',
              ( [], c_double, 'X' ),
              ( [], c_double, 'Y' )),
    COMMETHOD([helpstring(u'Moves the sides z units.')], HRESULT, 'OffsetZ',
              ( [], c_double, 'Z' )),
    COMMETHOD([helpstring(u'Moves the sides m units.')], HRESULT, 'OffsetM',
              ( [], c_double, 'M' )),
    COMMETHOD([helpstring(u'Moves the X and Y coordinates of the sides toward or away from each other.')], HRESULT, 'Expand',
              ( [], c_double, 'dx' ),
              ( [], c_double, 'dy' ),
              ( [], VARIANT_BOOL, 'asRatio' )),
    COMMETHOD([helpstring(u'Moves the Z attribute of the sides toward or away from each other.')], HRESULT, 'ExpandZ',
              ( [], c_double, 'dz' ),
              ( [], VARIANT_BOOL, 'asRatio' )),
    COMMETHOD([helpstring(u'Moves the measure of the sides toward or away from each other.')], HRESULT, 'ExpandM',
              ( [], c_double, 'dm' ),
              ( [], VARIANT_BOOL, 'asRatio' )),
    COMMETHOD(['restricted', helpstring(u'Defines the envelope to cover all the points.')], HRESULT, 'DefineFromWKSPoints',
              ( [], c_int, 'Count' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPoint), 'Points' )),
    COMMETHOD([helpstring(u'Defines the envelope to cover all the points.')], HRESULT, 'DefineFromPoints',
              ( [], c_int, 'Count' ),
              ( ['in'], POINTER(POINTER(IPoint)), 'Points' )),
    COMMETHOD(['restricted', helpstring(u'Copies the left, bottom, right and top sides into e.')], HRESULT, 'QueryWKSCoords',
              ( ['out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSEnvelope), 'e' )),
    COMMETHOD(['restricted', helpstring(u"Copies e's dimensions into this envelope.")], HRESULT, 'PutWKSCoords',
              ( [], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSEnvelope), 'e' )),
    COMMETHOD([helpstring(u'Constructs an envelope from the coordinate values of lower, left and upper, right corners.')], HRESULT, 'PutCoords',
              ( [], c_double, 'XMin' ),
              ( [], c_double, 'YMin' ),
              ( [], c_double, 'XMax' ),
              ( [], c_double, 'YMax' )),
    COMMETHOD([helpstring(u'Returns the coordinates of lower, left and upper, right corners.')], HRESULT, 'QueryCoords',
              ( ['out'], POINTER(c_double), 'XMin' ),
              ( ['out'], POINTER(c_double), 'YMin' ),
              ( ['out'], POINTER(c_double), 'XMax' ),
              ( ['out'], POINTER(c_double), 'YMax' )),
    COMMETHOD([helpstring(u'Moves this envelope so it is centered at p.')], HRESULT, 'CenterAt',
              ( [], POINTER(IPoint), 'p' )),
    COMMETHOD(['restricted', helpstring(u'A reference to the attribute structures for this envelope.'), 'propget'], HRESULT, 'MinMaxAttributes',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriPointAttributes)), 'MinMaxAttributes' )),
    COMMETHOD(['restricted', helpstring(u'A reference to the attribute structures for this envelope.'), 'propput'], HRESULT, 'MinMaxAttributes',
              ( [], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriPointAttributes), 'MinMaxAttributes' )),
]
################################################################
## code template for IEnvelope implementation
##class IEnvelope_Impl(object):
##    def _get(self):
##        u'The upper left corner.'
##        #return UpperLeft
##    def _set(self, UpperLeft):
##        u'The upper left corner.'
##    UpperLeft = property(_get, _set, doc = _set.__doc__)
##
##    def Union(self, inEnvelope):
##        u'Adjusts to overlap inEnvelope.'
##        #return 
##
##    def _get(self):
##        u'The lower right corner.'
##        #return LowerRight
##    def _set(self, LowerRight):
##        u'The lower right corner.'
##    LowerRight = property(_get, _set, doc = _set.__doc__)
##
##    def OffsetZ(self, Z):
##        u'Moves the sides z units.'
##        #return 
##
##    def _get(self):
##        u'The width of the envelope.'
##        #return Width
##    def _set(self, Width):
##        u'The width of the envelope.'
##    Width = property(_get, _set, doc = _set.__doc__)
##
##    def Intersect(self, inEnvelope):
##        u'Adjusts to include only the area also included by inEnvelope.'
##        #return 
##
##    def OffsetM(self, M):
##        u'Moves the sides m units.'
##        #return 
##
##    def _get(self):
##        u'The maximum measure value in the area of the envelope.'
##        #return MMax
##    def _set(self, MMax):
##        u'The maximum measure value in the area of the envelope.'
##    MMax = property(_get, _set, doc = _set.__doc__)
##
##    def CenterAt(self, p):
##        u'Moves this envelope so it is centered at p.'
##        #return 
##
##    def PutWKSCoords(self, e):
##        u"Copies e's dimensions into this envelope."
##        #return 
##
##    def DefineFromPoints(self, Count, Points):
##        u'Defines the envelope to cover all the points.'
##        #return 
##
##    def QueryCoords(self):
##        u'Returns the coordinates of lower, left and upper, right corners.'
##        #return XMin, YMin, XMax, YMax
##
##    def _get(self):
##        u'The minimum measure value in the area of the envelope.'
##        #return MMin
##    def _set(self, MMin):
##        u'The minimum measure value in the area of the envelope.'
##    MMin = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The position of the right side.'
##        #return XMax
##    def _set(self, XMax):
##        u'The position of the right side.'
##    XMax = property(_get, _set, doc = _set.__doc__)
##
##    def Offset(self, X, Y):
##        u'Moves the sides x units horizontally and y units vertically.'
##        #return 
##
##    def _get(self):
##        u'The lower left corner.'
##        #return LowerLeft
##    def _set(self, LowerLeft):
##        u'The lower left corner.'
##    LowerLeft = property(_get, _set, doc = _set.__doc__)
##
##    def Expand(self, dx, dy, asRatio):
##        u'Moves the X and Y coordinates of the sides toward or away from each other.'
##        #return 
##
##    def _get(self):
##        u'The maximum Z value in the area of the envelope.'
##        #return ZMax
##    def _set(self, ZMax):
##        u'The maximum Z value in the area of the envelope.'
##    ZMax = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The minimum Z value in the area of the envelope.'
##        #return ZMin
##    def _set(self, ZMin):
##        u'The minimum Z value in the area of the envelope.'
##    ZMin = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The depth of the envelope.'
##        #return Depth
##    def _set(self, Depth):
##        u'The depth of the envelope.'
##    Depth = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The position of the left side.'
##        #return XMin
##    def _set(self, XMin):
##        u'The position of the left side.'
##    XMin = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The position of the bottom.'
##        #return YMin
##    def _set(self, YMin):
##        u'The position of the bottom.'
##    YMin = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'A reference to the attribute structures for this envelope.'
##        #return MinMaxAttributes
##    def _set(self, MinMaxAttributes):
##        u'A reference to the attribute structures for this envelope.'
##    MinMaxAttributes = property(_get, _set, doc = _set.__doc__)
##
##    def PutCoords(self, XMin, YMin, XMax, YMax):
##        u'Constructs an envelope from the coordinate values of lower, left and upper, right corners.'
##        #return 
##
##    def ExpandM(self, dm, asRatio):
##        u'Moves the measure of the sides toward or away from each other.'
##        #return 
##
##    def DefineFromWKSPoints(self, Count, Points):
##        u'Defines the envelope to cover all the points.'
##        #return 
##
##    def _get(self):
##        u'The position of the top.'
##        #return YMax
##    def _set(self, YMax):
##        u'The position of the top.'
##    YMax = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The upper right corner.'
##        #return UpperRight
##    def _set(self, UpperRight):
##        u'The upper right corner.'
##    UpperRight = property(_get, _set, doc = _set.__doc__)
##
##    def QueryWKSCoords(self):
##        u'Copies the left, bottom, right and top sides into e.'
##        #return e
##
##    def _get(self):
##        u'The height of the envelope.'
##        #return Height
##    def _set(self, Height):
##        u'The height of the envelope.'
##    Height = property(_get, _set, doc = _set.__doc__)
##
##    def ExpandZ(self, dz, asRatio):
##        u'Moves the Z attribute of the sides toward or away from each other.'
##        #return 
##

IGeometry2._methods_ = [
    COMMETHOD([helpstring(u'Projects a geometry, optionally applies a GeoTransformation, and optionally densifies the geometry.')], HRESULT, 'ProjectEx',
              ( [], POINTER(ISpatialReference), 'newReferenceSystem' ),
              ( [], esriTransformDirection, 'direction' ),
              ( [], POINTER(IGeoTransformation), 'GeoTransformation' ),
              ( [], VARIANT_BOOL, 'bAngularDensify' ),
              ( [], c_double, 'maxSegmentLength' ),
              ( [], c_double, 'maxDeviation' )),
]
################################################################
## code template for IGeometry2 implementation
##class IGeometry2_Impl(object):
##    def ProjectEx(self, newReferenceSystem, direction, GeoTransformation, bAngularDensify, maxSegmentLength, maxDeviation):
##        u'Projects a geometry, optionally applies a GeoTransformation, and optionally densifies the geometry.'
##        #return 
##

ITransform2D._methods_ = [
    COMMETHOD([helpstring(u'Moves dx units horizontally and dy units vertically.')], HRESULT, 'Move',
              ( [], c_double, 'dx' ),
              ( [], c_double, 'dy' )),
    COMMETHOD([helpstring(u'Moves a direction and distance v. v can be in a different spatial reference than the geometry being moved.')], HRESULT, 'MoveVector',
              ( [], POINTER(ILine), 'v' )),
    COMMETHOD([helpstring(u'Scales about the specified origin using seperate horizonal and vertical scales. The origin point can be in a different spatial reference than the geometry being scaled.')], HRESULT, 'Scale',
              ( [], POINTER(IPoint), 'Origin' ),
              ( [], c_double, 'sx' ),
              ( [], c_double, 'sy' )),
    COMMETHOD([helpstring(u'Rotates about the specified origin point. The angle is in radians. The origin can be in a different spatial reference than the geometry being rotated.')], HRESULT, 'Rotate',
              ( [], POINTER(IPoint), 'Origin' ),
              ( [], c_double, 'rotationAngle' )),
    COMMETHOD([helpstring(u'Applies an arbitrary transformation. In particular, the transformation parameter can be either an affine transformation or a geographic transformation (datum shift).')], HRESULT, 'Transform',
              ( [], esriTransformDirection, 'direction' ),
              ( [], POINTER(ITransformation), 'transformation' )),
]
################################################################
## code template for ITransform2D implementation
##class ITransform2D_Impl(object):
##    def Scale(self, Origin, sx, sy):
##        u'Scales about the specified origin using seperate horizonal and vertical scales. The origin point can be in a different spatial reference than the geometry being scaled.'
##        #return 
##
##    def Move(self, dx, dy):
##        u'Moves dx units horizontally and dy units vertically.'
##        #return 
##
##    def MoveVector(self, v):
##        u'Moves a direction and distance v. v can be in a different spatial reference than the geometry being moved.'
##        #return 
##
##    def Transform(self, direction, transformation):
##        u'Applies an arbitrary transformation. In particular, the transformation parameter can be either an affine transformation or a geographic transformation (datum shift).'
##        #return 
##
##    def Rotate(self, Origin, rotationAngle):
##        u'Rotates about the specified origin point. The angle is in radians. The origin can be in a different spatial reference than the geometry being rotated.'
##        #return 
##


# values for enumeration 'esriSRProjectionType'
esriSRProjection_PlateCarree = 43001
esriSRProjection_EquidistantCylindrical = 43002
esriSRProjection_MillerCylindrical = 43003
esriSRProjection_Mercator = 43004
esriSRProjection_GaussKruger = 43005
esriSRProjection_TransverseMercator = 43006
esriSRProjection_Albers = 43007
esriSRProjection_Sinusoidal = 43008
esriSRProjection_Mollweide = 43009
esriSRProjection_EckertVI = 43010
esriSRProjection_EckertV = 43011
esriSRProjection_EckertIV = 43012
esriSRProjection_EckertIII = 43013
esriSRProjection_EckertII = 43014
esriSRProjection_EckertI = 43015
esriSRProjection_GallStereographic = 43016
esriSRProjection_Behrmann = 43017
esriSRProjection_WinkelI = 43018
esriSRProjection_WinkelII = 43019
esriSRProjection_LambertConformalConic = 43020
esriSRProjection_Polyconic = 43021
esriSRProjection_QuarticAuthalic = 43022
esriSRProjection_Loximuthal = 43023
esriSRProjection_Bonne = 43024
esriSRProjection_HotineTwoPointNatOrigin = 43025
esriSRProjection_HotineTwoPointerCenter = 43035
esriSRProjection_HotineAzimuthNatOrigin = 43036
esriSRProjection_HotineAzimuthCenter = 43037
esriSRProjection_Stereographic = 43026
esriSRProjection_EquidistantConic = 43027
esriSRProjection_Cassini = 43028
esriSRProjection_VanDerGrintenI = 43029
esriSRProjection_Robinson = 43030
esriSRProjection_TwoPointEquidistant = 43031
esriSRProjection_AzimuthalEquidistant = 43032
esriSRProjection_LambertAzimuthal = 43033
esriSRProjection_CylindricalEqualArea = 43034
esriSRProjection_DoubleStereographic = 43038
esriSRProjectionType = c_int # enum
class IESRISegment(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    _iid_ = GUID('{A9DA7976-4B22-11D1-834C-0000F8775BE9}')
    _idlflags_ = ['restricted']
IESRISegment._methods_ = [
    COMMETHOD(['propget'], HRESULT, 'ESRISegmentSize',
              ( ['retval', 'out'], POINTER(c_int), 'cBytes' )),
    COMMETHOD(['propget'], HRESULT, 'MaxDenseSegments',
              ( [], c_double, 'maxDeviation' ),
              ( ['retval', 'out'], POINTER(c_int), 'cBytes' )),
    COMMETHOD([], HRESULT, 'ImportFromESRISegment',
              ( [], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPoint), 'from' ),
              ( [], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPoint), 'to' ),
              ( ['in'], POINTER(c_double), 'zs' ),
              ( ['in'], POINTER(c_double), 'ms' ),
              ( ['in'], POINTER(c_int), 'IDs' ),
              ( [], c_int, 'numModifierBytes' ),
              ( ['in'], POINTER(c_ubyte), 'segmentBuffer' ),
              ( ['out'], POINTER(c_int), 'cBytesRead' )),
    COMMETHOD([], HRESULT, 'ExportToESRISegment',
              ( ['out'], POINTER(c_ubyte), 'byteBuffer' ),
              ( ['out'], POINTER(c_int), 'cBytesWrote' )),
]
################################################################
## code template for IESRISegment implementation
##class IESRISegment_Impl(object):
##    def ImportFromESRISegment(self, from, to, zs, ms, IDs, numModifierBytes, segmentBuffer):
##        '-no docstring-'
##        #return cBytesRead
##
##    @property
##    def MaxDenseSegments(self, maxDeviation):
##        '-no docstring-'
##        #return cBytes
##
##    @property
##    def ESRISegmentSize(self):
##        '-no docstring-'
##        #return cBytes
##
##    def ExportToESRISegment(self):
##        '-no docstring-'
##        #return byteBuffer, cBytesWrote
##

class AngularUnit(CoClass):
    u'Creates a angular unit of measure.'
    _reg_clsid_ = GUID('{74AD43F4-D31C-11D1-BC9B-0000F875BCCE}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
AngularUnit._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IESRISpatialReferenceGEN, IESRISpatialReferenceGEN2, IAngularUnit, IUnit, IAngularUnitEdit, ISpatialReferenceInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, IESRISpatialReference, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, ISpatialReferenceAuthority]


# values for enumeration 'esriSRParameter4Type'
esriSRParameter_Option = 100036
esriSRParameter_X_CoordinateOfRotationOrigin = 100048
esriSRParameter_Y_CoordinateOfRotationOrigin = 100049
esriSRParameter_Z_CoordinateOfRotationOrigin = 100050
esriSRParameter4Type = c_int # enum
IControlPrecision._methods_ = [
    COMMETHOD(['propget', helpstring(u'Returns TRUE if the precision information can be used for snapping.')], HRESULT, 'UsePrecision',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'UsePrecision' )),
    COMMETHOD(['propput', helpstring(u'Returns TRUE if the precision information can be used for snapping.')], HRESULT, 'UsePrecision',
              ( ['in'], VARIANT_BOOL, 'UsePrecision' )),
]
################################################################
## code template for IControlPrecision implementation
##class IControlPrecision_Impl(object):
##    def _get(self):
##        u'Returns TRUE if the precision information can be used for snapping.'
##        #return UsePrecision
##    def _set(self, UsePrecision):
##        u'Returns TRUE if the precision information can be used for snapping.'
##    UsePrecision = property(_get, _set, doc = _set.__doc__)
##

IControlPrecision2._methods_ = [
    COMMETHOD(['propget', helpstring(u'TRUE if a high precision integer grid is being used to round coordinate values. The scale factors of the spatial reference are re-scaled when this property is changed.')], HRESULT, 'IsHighPrecision',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsHighPrecision' )),
    COMMETHOD(['propput', helpstring(u'TRUE if a high precision integer grid is being used to round coordinate values. The scale factors of the spatial reference are re-scaled when this property is changed.')], HRESULT, 'IsHighPrecision',
              ( ['in'], VARIANT_BOOL, 'IsHighPrecision' )),
]
################################################################
## code template for IControlPrecision2 implementation
##class IControlPrecision2_Impl(object):
##    def _get(self):
##        u'TRUE if a high precision integer grid is being used to round coordinate values. The scale factors of the spatial reference are re-scaled when this property is changed.'
##        #return IsHighPrecision
##    def _set(self, IsHighPrecision):
##        u'TRUE if a high precision integer grid is being used to round coordinate values. The scale factors of the spatial reference are re-scaled when this property is changed.'
##    IsHighPrecision = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'esriSRGeoCS3Type'
esriSRGeoCS_Albanian1987 = 4191
esriSRGeoCS_Ammassalik1958 = 4196
esriSRGeoCS_AutralianAntarctic1998 = 4176
esriSRGeoCS_AzoresCentralIslands1948 = 4183
esriSRGeoCS_AzoresCentralIslands1995 = 4665
esriSRGeoCS_AzoresOccidentalIslands1939 = 4182
esriSRGeoCS_AzoresOrientalIslands1940 = 4184
esriSRGeoCS_AzoresOrientalIslands1995 = 4664
esriSRGeoCS_Combani1950 = 4632
esriSRGeoCS_CentreSpatialGuyanais1967 = 4623
esriSRGeoCS_Douala1948 = 4192
esriSRGeoCS_Egypt1930 = 4199
esriSRGeoCS_Estonia1997 = 4180
esriSRGeoCS_ETRS1989 = 4258
esriSRGeoCS_FortDesaix = 4625
esriSRGeoCS_FortMarigot = 4621
esriSRGeoCS_GrandComoros = 4646
esriSRGeoCS_GunungSegara_Jakarta = 4820
esriSRGeoCS_Helle1954 = 4660
esriSRGeoCS_IGM1995 = 4670
esriSRGeoCS_IGN53Mare = 4641
esriSRGeoCS_IGN56Lifou = 4633
esriSRGeoCS_IGN72GrandeTerre = 4662
esriSRGeoCS_IGN72NukuHiva = 4630
esriSRGeoCS_IraqKuwaitBoundaryDatum1992 = 4667
esriSRGeoCS_IslandsNetwork1993 = 4659
esriSRGeoCS_IERSTerrestrialReferenceFrame1988 = 104115
esriSRGeoCS_IERSTerrestrialReferenceFrame1989 = 104116
esriSRGeoCS_IERSTerrestrialReferenceFrame1990 = 104117
esriSRGeoCS_IERSTerrestrialReferenceFrame1991 = 104118
esriSRGeoCS_IERSTerrestrialReferenceFrame1992 = 104119
esriSRGeoCS_IERSTerrestrialReferenceFrame1993 = 104120
esriSRGeoCS_IERSTerrestrialReferenceFrame1994 = 104121
esriSRGeoCS_IERSTerrestrialReferenceFrame1996 = 104122
esriSRGeoCS_IERSTerrestrialReferenceFrame1997 = 104123
esriSRGeoCS_IERSTerrestrialReferenceFrame2000 = 104124
esriSRGeoCS_K0_1949 = 4698
esriSRGeoCS_Kousseri = 4198
esriSRGeoCS_Latvia1992 = 4661
esriSRGeoCS_Lisbon1890 = 4666
esriSRGeoCS_Lisbon1890_Lisbon = 4904
esriSRGeoCS_Luxembourg1930 = 4181
esriSRGeoCS_Madeira1936 = 4185
esriSRGeoCS_Manoca1962 = 4193
esriSRGeoCS_MOP78 = 4639
esriSRGeoCS_NEA74Noumea = 4644
esriSRGeoCS_NordSahara1959_Paris = 4819
esriSRGeoCS_OSNI_1952 = 4188
esriSRGeoCS_Petrels1972 = 4636
esriSRGeoCS_Piton_des_Neiges = 4626
esriSRGeoCS_PointeGeologiePerroud1950 = 4637
esriSRGeoCS_PortoSanto1995 = 4663
esriSRGeoCS_POSGAR1998 = 4190
esriSRGeoCS_Pulkovo1942_adj58 = 4179
esriSRGeoCS_Pulkovo1942_adj83 = 4178
esriSRGeoCS_QatarNationalDatum1995 = 4614
esriSRGeoCS_Qornoq1927 = 4194
esriSRGeoCS_Reykjavik1900 = 4657
esriSRGeoCS_ReseauGeodesiqueFrancaisGuyane1995 = 4624
esriSRGeoCS_ReseauGeodesiqueNouvelleCaledonie1991 = 4645
esriSRGeoCS_ReseauGeodesique_de_la_Reunion1992 = 4627
esriSRGeoCS_Reseau_de_Reference_des_AntillesFrancaises1991 = 4558
esriSRGeoCS_SainteAnne = 4622
esriSRGeoCS_SaintPierre_et_Miquelon1950 = 4638
esriSRGeoCS_Scoresbysund1952 = 4195
esriSRGeoCS_ST71Belep = 4643
esriSRGeoCS_ST84_Ile_des_Pins = 4642
esriSRGeoCS_ST87Ouvea = 4750
esriSRGeoCS_SWEREF99 = 4619
esriSRGeoCS_Tahaa = 4629
esriSRGeoCS_Tahiti = 4628
esriSRGeoCS_Xian1980 = 4610
esriSRGeoCS_Bermuda2000 = 4762
esriSRGeoCS_ChathamIslands1979 = 4673
esriSRGeoCS_ObservatorioMeteorologico1965 = 104126
esriSRGeoCS_Roma1940 = 104127
esriSRGeoCS_EMEP = 104128
esriSRGeoCS_EUREF_FIN = 104129
esriSRGeoCS_Jordan = 104130
esriSRGeoCS_NAD1983HARNAdj_MinnesotaAnoka = 104700
esriSRGeoCS_NAD1983HARNAdj_MinnesotaBecker = 104701
esriSRGeoCS_NAD1983HARNAdj_MinnesotaBeltramiNorth = 104702
esriSRGeoCS_NAD1983HARNAdj_MinnesotaBeltramiSouth = 104703
esriSRGeoCS_NAD1983HARNAdj_MinnesotaBenton = 104704
esriSRGeoCS_NAD1983HARNAdj_MinnesotaBigStone = 104705
esriSRGeoCS_NAD1983HARNAdj_MinnesotaBlueEarth = 104706
esriSRGeoCS_NAD1983HARNAdj_MinnesotaBrown = 104707
esriSRGeoCS_NAD1983HARNAdj_MinnesotaCarlton = 104708
esriSRGeoCS_NAD1983HARNAdj_MinnesotaCarver = 104709
esriSRGeoCS_NAD1983HARNAdj_MinnesotaCassNorth = 104710
esriSRGeoCS_NAD1983HARNAdj_MinnesotaCassSouth = 104711
esriSRGeoCS_NAD1983HARNAdj_MinnesotaChippewa = 104712
esriSRGeoCS_NAD1983HARNAdj_MinnesotaChisago = 104713
esriSRGeoCS_NAD1983HARNAdj_MinnesotaCookNorth = 104714
esriSRGeoCS_NAD1983HARNAdj_MinnesotaCookSouth = 104715
esriSRGeoCS_NAD1983HARNAdj_MinnesotaCottonwood = 104716
esriSRGeoCS_NAD1983HARNAdj_MinnesotaCrowWing = 104717
esriSRGeoCS_NAD1983HARNAdj_MinnesotaDakota = 104718
esriSRGeoCS_NAD1983HARNAdj_MinnesotaDodge = 104719
esriSRGeoCS_NAD1983HARNAdj_MinnesotaDouglas = 104720
esriSRGeoCS_NAD1983HARNAdj_MinnesotaFaribault = 104721
esriSRGeoCS_NAD1983HARNAdj_MinnesotaFillmore = 104722
esriSRGeoCS_NAD1983HARNAdj_MinnesotaFreeborn = 104723
esriSRGeoCS_NAD1983HARNAdj_MinnesotaGoodhue = 104724
esriSRGeoCS_NAD1983HARNAdj_MinnesotaGrant = 104725
esriSRGeoCS_NAD1983HARNAdj_MinnesotaHennepin = 104726
esriSRGeoCS_NAD1983HARNAdj_MinnesotaHouston = 104727
esriSRGeoCS_NAD1983HARNAdj_MinnesotaIsanti = 104728
esriSRGeoCS_NAD1983HARNAdj_MinnesotaItascaNorth = 104729
esriSRGeoCS_NAD1983HARNAdj_MinnesotaItascaSouth = 104730
esriSRGeoCS_NAD1983HARNAdj_MinnesotaJackson = 104731
esriSRGeoCS_NAD1983HARNAdj_MinnesotaKanabec = 104732
esriSRGeoCS_NAD1983HARNAdj_MinnesotaKandiyohi = 104733
esriSRGeoCS_NAD1983HARNAdj_MinnesotaKittson = 104734
esriSRGeoCS_NAD1983HARNAdj_MinnesotaKoochiching = 104735
esriSRGeoCS_NAD1983HARNAdj_MinnesotaLacQuiParle = 104736
esriSRGeoCS_NAD1983HARNAdj_MinnesotaLake_of_theWoodsNorth = 104737
esriSRGeoCS_NAD1983HARNAdj_MinnesotaLake_of_theWoodsSouth = 104738
esriSRGeoCS_NAD1983HARNAdj_MinnesotaLeSueur = 104739
esriSRGeoCS_NAD1983HARNAdj_MinnesotaLincoln = 104740
esriSRGeoCS_NAD1983HARNAdj_MinnesotaLyon = 104741
esriSRGeoCS_NAD1983HARNAdj_MinnesotaMcLeod = 104742
esriSRGeoCS_NAD1983HARNAdj_MinnesotaMahnomen = 104743
esriSRGeoCS_NAD1983HARNAdj_MinnesotaMarshall = 104744
esriSRGeoCS_NAD1983HARNAdj_MinnesotaMartin = 104745
esriSRGeoCS_NAD1983HARNAdj_MinnesotaMeeker = 104746
esriSRGeoCS_NAD1983HARNAdj_MinnesotaMorrison = 104747
esriSRGeoCS_NAD1983HARNAdj_MinnesotaMower = 104748
esriSRGeoCS_NAD1983HARNAdj_MinnesotaMurray = 104749
esriSRGeoCS_NAD1983HARNAdj_MinnesotaNicollet = 104750
esriSRGeoCS_NAD1983HARNAdj_MinnesotaNobles = 104751
esriSRGeoCS_NAD1983HARNAdj_MinnesotaNorman = 104752
esriSRGeoCS_NAD1983HARNAdj_MinnesotaOlmsted = 104753
esriSRGeoCS_NAD1983HARNAdj_MinnesotaOttertail = 104754
esriSRGeoCS_NAD1983HARNAdj_MinnesotaPennington = 104755
esriSRGeoCS_NAD1983HARNAdj_MinnesotaPine = 104756
esriSRGeoCS_NAD1983HARNAdj_MinnesotaPipestone = 104757
esriSRGeoCS_NAD1983HARNAdj_MinnesotaPolk = 104758
esriSRGeoCS_NAD1983HARNAdj_MinnesotaPope = 104759
esriSRGeoCS_NAD1983HARNAdj_MinnesotaRamsey = 104760
esriSRGeoCS_NAD1983HARNAdj_MinnesotaRedLake = 104761
esriSRGeoCS_NAD1983HARNAdj_MinnesotaRedwood = 104762
esriSRGeoCS_NAD1983HARNAdj_MinnesotaRenville = 104763
esriSRGeoCS_NAD1983HARNAdj_MinnesotaRice = 104764
esriSRGeoCS_NAD1983HARNAdj_MinnesotaRock = 104765
esriSRGeoCS_NAD1983HARNAdj_MinnesotaRoseau = 104766
esriSRGeoCS_NAD1983HARNAdj_MinnesotaStLouisNorth = 104767
esriSRGeoCS_NAD1983HARNAdj_MinnesotaStLouisCentral = 104768
esriSRGeoCS_NAD1983HARNAdj_MinnesotaStLouisSouth = 104769
esriSRGeoCS_NAD1983HARNAdj_MinnesotaScott = 104770
esriSRGeoCS_NAD1983HARNAdj_MinnesotaSherburne = 104771
esriSRGeoCS_NAD1983HARNAdj_MinnesotaSibley = 104772
esriSRGeoCS_NAD1983HARNAdj_MinnesotaStearns = 104773
esriSRGeoCS_NAD1983HARNAdj_MinnesotaSteele = 104774
esriSRGeoCS_NAD1983HARNAdj_MinnesotaStevens = 104775
esriSRGeoCS_NAD1983HARNAdj_MinnesotaSwift = 104776
esriSRGeoCS_NAD1983HARNAdj_MinnesotaTodd = 104777
esriSRGeoCS_NAD1983HARNAdj_MinnesotaTraverse = 104778
esriSRGeoCS_NAD1983HARNAdj_MinnesotaWabasha = 104779
esriSRGeoCS_NAD1983HARNAdj_MinnesotaWadena = 104780
esriSRGeoCS_NAD1983HARNAdj_MinnesotaWaseca = 104781
esriSRGeoCS_NAD1983HARNAdj_MinnesotaWatonwan = 104782
esriSRGeoCS_NAD1983HARNAdj_MinnesotaWinona = 104783
esriSRGeoCS_NAD1983HARNAdj_MinnesotaWright = 104784
esriSRGeoCS_NAD1983HARNAdj_MinnesotaYellowMedicine = 104785
esriSRGeoCS_NAD1983HARNAdj_WisconsinAshland = 104801
esriSRGeoCS_NAD1983HARNAdj_WisconsinBarron = 104802
esriSRGeoCS_NAD1983HARNAdj_WisconsinBayfield = 104803
esriSRGeoCS_NAD1983HARNAdj_WisconsinBrown = 104804
esriSRGeoCS_NAD1983HARNAdj_WisconsinBuffalo = 104805
esriSRGeoCS_NAD1983HARNAdj_WisconsinBurnett = 104806
esriSRGeoCS_NAD1983HARNAdj_WisconsinChippewa = 104808
esriSRGeoCS_NAD1983HARNAdj_WisconsinClark = 104809
esriSRGeoCS_NAD1983HARNAdj_WisconsinColumbia = 104810
esriSRGeoCS_NAD1983HARNAdj_WisconsinCrawford = 104811
esriSRGeoCS_NAD1983HARNAdj_WisconsinDane = 104812
esriSRGeoCS_NAD1983HARNAdj_WisconsinDoor = 104814
esriSRGeoCS_NAD1983HARNAdj_WisconsinDouglas = 104815
esriSRGeoCS_NAD1983HARNAdj_WisconsinDunn = 104816
esriSRGeoCS_NAD1983HARNAdj_WisconsinEauClaire = 104817
esriSRGeoCS_NAD1983HARNAdj_WisconsinFlorence = 104818
esriSRGeoCS_NAD1983HARNAdj_WisconsinForest = 104820
esriSRGeoCS_NAD1983HARNAdj_WisconsinGrant = 104821
esriSRGeoCS_NAD1983HARNAdj_WisconsinIowa = 104824
esriSRGeoCS_NAD1983HARNAdj_WisconsinIron = 104825
esriSRGeoCS_NAD1983HARNAdj_WisconsinJackson = 104826
esriSRGeoCS_NAD1983HARNAdj_WisconsinLaCrosse = 104831
esriSRGeoCS_NAD1983HARNAdj_WisconsinLanglade = 104833
esriSRGeoCS_NAD1983HARNAdj_WisconsinLincoln = 104834
esriSRGeoCS_NAD1983HARNAdj_WisconsinMarathon = 104836
esriSRGeoCS_NAD1983HARNAdj_WisconsinMarinette = 104837
esriSRGeoCS_NAD1983HARNAdj_WisconsinMenominee = 104839
esriSRGeoCS_NAD1983HARNAdj_WisconsinMonroe = 104841
esriSRGeoCS_NAD1983HARNAdj_WisconsinOconto = 104842
esriSRGeoCS_NAD1983HARNAdj_WisconsinOneida = 104843
esriSRGeoCS_NAD1983HARNAdj_WisconsinPolk = 104848
esriSRGeoCS_NAD1983HARNAdj_WisconsinPortage = 104849
esriSRGeoCS_NAD1983HARNAdj_WisconsinPrice = 104850
esriSRGeoCS_NAD1983HARNAdj_WisconsinRichland = 104852
esriSRGeoCS_NAD1983HARNAdj_WisconsinRock = 104853
esriSRGeoCS_NAD1983HARNAdj_WisconsinRusk = 104854
esriSRGeoCS_NAD1983HARNAdj_WisconsinStCroix = 104855
esriSRGeoCS_NAD1983HARNAdj_WisconsinSauk = 104856
esriSRGeoCS_NAD1983HARNAdj_WisconsinSawyer = 104857
esriSRGeoCS_NAD1983HARNAdj_WisconsinShawano = 104858
esriSRGeoCS_NAD1983HARNAdj_WisconsinTaylor = 104860
esriSRGeoCS_NAD1983HARNAdj_WisconsinTrempealeau = 104861
esriSRGeoCS_NAD1983HARNAdj_WisconsinVernon = 104862
esriSRGeoCS_NAD1983HARNAdj_WisconsinVilas = 104863
esriSRGeoCS_NAD1983HARNAdj_WisconsinWalworth = 104864
esriSRGeoCS_NAD1983HARNAdj_WisconsinWashburn = 104865
esriSRGeoCS_NAD1983HARNAdj_WisconsinWashington = 104866
esriSRGeoCS_NAD1983HARNAdj_WisconsinWaukesha = 104867
esriSRGeoCS_NAD1983HARNAdj_WisconsinWaupaca = 104868
esriSRGeoCS_NAD1983HARNAdj_WisconsinWaushara = 104869
esriSRGeoCS_NAD1983HARNAdj_WisconsinWood = 104871
esriSRGeoCS_NAD1983HARNAdj_WisconsinAdams = 104800
esriSRGeoCS_NAD1983HARNAdj_WisconsinJuneau = 104828
esriSRGeoCS_NAD1983HARNAdj_WisconsinGreen = 104822
esriSRGeoCS_NAD1983HARNAdj_WisconsinLafayette = 104832
esriSRGeoCS_NAD1983HARNAdj_WisconsinGreenLake = 104823
esriSRGeoCS_NAD1983HARNAdj_WisconsinMarquette = 104838
esriSRGeoCS_NAD1983HARNAdj_WisconsinDodge = 104813
esriSRGeoCS_NAD1983HARNAdj_WisconsinJefferson = 104827
esriSRGeoCS_NAD1983HARNAdj_WisconsinPepin = 104846
esriSRGeoCS_NAD1983HARNAdj_WisconsinPierce = 104847
esriSRGeoCS_NAD1983HARNAdj_WisconsinCalumet = 104807
esriSRGeoCS_NAD1983HARNAdj_WisconsinFondduLac = 104819
esriSRGeoCS_NAD1983HARNAdj_WisconsinOutagamie = 104844
esriSRGeoCS_NAD1983HARNAdj_WisconsinWinnebago = 104870
esriSRGeoCS_NAD1983HARNAdj_WisconsinKenosha = 104829
esriSRGeoCS_NAD1983HARNAdj_WisconsinMilwaukee = 104840
esriSRGeoCS_NAD1983HARNAdj_WisconsinOzaukee = 104845
esriSRGeoCS_NAD1983HARNAdj_WisconsinRacine = 104851
esriSRGeoCS_NAD1983HARNAdj_WisconsinKewaunee = 104830
esriSRGeoCS_NAD1983HARNAdj_WisconsinManitowoc = 104835
esriSRGeoCS_NAD1983HARNAdj_WisconsinSheboygan = 104859
esriSRGeoCS_Mercury = 104900
esriSRGeoCS_Venus1985 = 104901
esriSRGeoCS_Venus2000 = 104902
esriSRGeoCS_TheMoon = 104903
esriSRGeoCS_Mars1979 = 104904
esriSRGeoCS_Mars2000 = 104905
esriSRGeoCS_MarsDeimos = 104906
esriSRGeoCS_MarsPhobos = 104907
esriSRGeoCS_Jupiter = 104908
esriSRGeoCS_JupiterAdrastea = 104909
esriSRGeoCS_JupiterAmalthea = 104910
esriSRGeoCS_JupiterAnanke = 104911
esriSRGeoCS_JupiterCallisto = 104912
esriSRGeoCS_JupiterCarme = 104913
esriSRGeoCS_JupiterElara = 104914
esriSRGeoCS_JupiterEuropa = 104915
esriSRGeoCS_JupiterGanymede = 104916
esriSRGeoCS_JupiterHimalia = 104917
esriSRGeoCS_JupiterIo = 104918
esriSRGeoCS_JupiterLeda = 104919
esriSRGeoCS_JupiterLysithea = 104920
esriSRGeoCS_JupiterMetis = 104921
esriSRGeoCS_JupiterPasiphae = 104922
esriSRGeoCS_JupiterSinope = 104923
esriSRGeoCS_JupiterThebe = 104924
esriSRGeoCS_Saturn = 104925
esriSRGeoCS_SaturnAtlas = 104926
esriSRGeoCS_SaturnCalypso = 104927
esriSRGeoCS_SaturnDione = 104928
esriSRGeoCS_SaturnEnceladus = 104929
esriSRGeoCS_SaturnEpimetheus = 104930
esriSRGeoCS_SaturnHelene = 104931
esriSRGeoCS_SaturnHyperion = 104932
esriSRGeoCS_SaturnIapetus = 104933
esriSRGeoCS_SaturnJanus = 104934
esriSRGeoCS_SaturnMimas = 104935
esriSRGeoCS_SaturnPan = 104936
esriSRGeoCS_SaturnPandora = 104937
esriSRGeoCS_SaturnPhoebe = 104938
esriSRGeoCS_SaturnPrometheus = 104939
esriSRGeoCS_SaturnRhea = 104940
esriSRGeoCS_SaturnTelesto = 104941
esriSRGeoCS_SaturnTethys = 104942
esriSRGeoCS_SaturnTitan = 104943
esriSRGeoCS_Uranus = 104944
esriSRGeoCS_UranusAriel = 104945
esriSRGeoCS_UranusBelinda = 104946
esriSRGeoCS_UranusBianca = 104947
esriSRGeoCS_UranusCordelia = 104948
esriSRGeoCS_UranusCressida = 104949
esriSRGeoCS_UranusDesdemona = 104950
esriSRGeoCS_UranusJuliet = 104951
esriSRGeoCS_UranusMiranda = 104952
esriSRGeoCS_UranusOberon = 104953
esriSRGeoCS_UranusOphelia = 104954
esriSRGeoCS_UranusPortia = 104955
esriSRGeoCS_UranusPuck = 104956
esriSRGeoCS_UranusRosalind = 104957
esriSRGeoCS_UranusTitania = 104958
esriSRGeoCS_UranusUmbriel = 104959
esriSRGeoCS_Neptune = 104960
esriSRGeoCS_NeptuneDespina = 104961
esriSRGeoCS_NeptuneGalatea = 104962
esriSRGeoCS_NeptuneLarissa = 104963
esriSRGeoCS_NeptuneNaiad = 104964
esriSRGeoCS_NeptuneNereid = 104965
esriSRGeoCS_NeptuneProteus = 104966
esriSRGeoCS_NeptuneThalassa = 104967
esriSRGeoCS_NeptuneTriton = 104968
esriSRGeoCS_Pluto = 104969
esriSRGeoCS_PlutoCharon = 104970
esriSRGeoCS_Accra = 4168
esriSRGeoCS_ChosMalal1914 = 4160
esriSRGeoCS_EuropeanLibyanDatum1979 = 4159
esriSRGeoCS_IRENET95 = 4173
esriSRGeoCS_KoreanDatum1985 = 4162
esriSRGeoCS_KoreanDatum1995 = 4166
esriSRGeoCS_MountDillon = 4157
esriSRGeoCS_Naparima1955 = 4158
esriSRGeoCS_PampadelCastillo = 4161
esriSRGeoCS_PosicionesGeodesicasArgentinas = 4172
esriSRGeoCS_SierraLeone1924 = 4174
esriSRGeoCS_SierraLeone1968 = 4175
esriSRGeoCS_SIRGAS = 4170
esriSRGeoCS_SouthYemen = 4164
esriSRGeoCS_YemenNGN1996 = 4163
esriSRGeoCS_Pohnpei = 104109
esriSRGeoCS_Carthage_Degrees = 4223
esriSRGeoCS_REGVEN = 4189
esriSRGeoCS_JapanGeodeticDatum2000 = 4612
esriSRGeoCS_BabSouthAstro = 104112
esriSRGeoCS_Majuro = 104113
esriSRGeoCS3Type = c_int # enum
IConstructPoint._methods_ = [
    COMMETHOD([helpstring(u'Constructs a point distance units along the input curve.')], HRESULT, 'ConstructAlong',
              ( [], POINTER(ICurve), 'curve' ),
              ( [], esriSegmentExtension, 'extension' ),
              ( [], c_double, 'distance' ),
              ( [], VARIANT_BOOL, 'asRatio' )),
    COMMETHOD([helpstring(u'Constructs a point at a specified angle (in radians) from the horizontal axis and a specified distance away from the input point.')], HRESULT, 'ConstructAngleDistance',
              ( [], POINTER(IPoint), 'p' ),
              ( [], c_double, 'inAngle' ),
              ( [], c_double, 'distance' )),
    COMMETHOD([helpstring(u"Constructs a point in the polar coordinate system defined by baseLine and its 'from' point. The angle is in radians.")], HRESULT, 'ConstructDeflection',
              ( [], POINTER(ILine), 'baseLine' ),
              ( [], c_double, 'distance' ),
              ( [], c_double, 'inAngle' )),
    COMMETHOD([helpstring(u'Constructs the point of intersection of two rays with origins at the endpoints of the base line and the specified angles (in radians). If onRightSide is true, this work will be done to the right of the base line, otherwise to the left.')], HRESULT, 'ConstructDeflectionIntersection',
              ( [], POINTER(ILine), 'baseLine' ),
              ( [], c_double, 'startAngle' ),
              ( [], c_double, 'endAngle' ),
              ( [], VARIANT_BOOL, 'OnRightSide' )),
    COMMETHOD([helpstring(u'Constructs the point of observation from which two signed angles between three points were measured; returns an angle which can help establish the confidence of the observation location: A small angle indicates greater uncertainty in the location.')], HRESULT, 'ConstructThreePointResection',
              ( [], POINTER(IPoint), 'point1' ),
              ( [], c_double, 'angleP1P2' ),
              ( [], POINTER(IPoint), 'point2' ),
              ( [], c_double, 'angleP2P3' ),
              ( [], POINTER(IPoint), 'point3' ),
              ( ['out'], POINTER(c_double), 'arcAngle' )),
    COMMETHOD([helpstring(u'Constructs a point distance units along the input curve and offset units perpendicularly away from it.')], HRESULT, 'ConstructOffset',
              ( [], POINTER(ICurve), 'curve' ),
              ( [], esriSegmentExtension, 'extension' ),
              ( [], c_double, 'distance' ),
              ( [], VARIANT_BOOL, 'asRatio' ),
              ( [], c_double, 'Offset' )),
    COMMETHOD([helpstring(u'Constructs a point distance units from start, parallel to the tangent at the point nearest to start on the (extended) segment.')], HRESULT, 'ConstructParallel',
              ( [], POINTER(ISegment), 'Segment' ),
              ( [], esriSegmentExtension, 'extension' ),
              ( [], POINTER(IPoint), 'start' ),
              ( [], c_double, 'distance' )),
    COMMETHOD([helpstring(u'Constructs a point on the bisector of the angle (from, through, to). When useAcuteAngle is false, the sign of distance will select a point right or left of (from, through, to). Otherwise, the sign of distance will select the acute/obtuse point.')], HRESULT, 'ConstructAngleBisector',
              ( [], POINTER(IPoint), 'from' ),
              ( [], POINTER(IPoint), 'through' ),
              ( [], POINTER(IPoint), 'to' ),
              ( [], c_double, 'distance' ),
              ( [], VARIANT_BOOL, 'useAcuteAngle' )),
    COMMETHOD([helpstring(u"Constructs a point 'distance' units from p and lying along the line normal to base and passing through p.")], HRESULT, 'ConstructPerpendicular',
              ( [], POINTER(ISegment), 'base' ),
              ( [], esriSegmentExtension, 'extension' ),
              ( [], POINTER(IPoint), 'p' ),
              ( [], c_double, 'distance' ),
              ( [], VARIANT_BOOL, 'bUseLineOrientation' )),
    COMMETHOD([helpstring(u'Constructs the point of intersection between two lines defined by the input points and angles (in radians).')], HRESULT, 'ConstructAngleIntersection',
              ( [], POINTER(IPoint), 'p1' ),
              ( [], c_double, 'angle1' ),
              ( [], POINTER(IPoint), 'p2' ),
              ( [], c_double, 'angle2' )),
]
################################################################
## code template for IConstructPoint implementation
##class IConstructPoint_Impl(object):
##    def ConstructOffset(self, curve, extension, distance, asRatio, Offset):
##        u'Constructs a point distance units along the input curve and offset units perpendicularly away from it.'
##        #return 
##
##    def ConstructAngleBisector(self, from, through, to, distance, useAcuteAngle):
##        u'Constructs a point on the bisector of the angle (from, through, to). When useAcuteAngle is false, the sign of distance will select a point right or left of (from, through, to). Otherwise, the sign of distance will select the acute/obtuse point.'
##        #return 
##
##    def ConstructAngleIntersection(self, p1, angle1, p2, angle2):
##        u'Constructs the point of intersection between two lines defined by the input points and angles (in radians).'
##        #return 
##
##    def ConstructParallel(self, Segment, extension, start, distance):
##        u'Constructs a point distance units from start, parallel to the tangent at the point nearest to start on the (extended) segment.'
##        #return 
##
##    def ConstructPerpendicular(self, base, extension, p, distance, bUseLineOrientation):
##        u"Constructs a point 'distance' units from p and lying along the line normal to base and passing through p."
##        #return 
##
##    def ConstructThreePointResection(self, point1, angleP1P2, point2, angleP2P3, point3):
##        u'Constructs the point of observation from which two signed angles between three points were measured; returns an angle which can help establish the confidence of the observation location: A small angle indicates greater uncertainty in the location.'
##        #return arcAngle
##
##    def ConstructAlong(self, curve, extension, distance, asRatio):
##        u'Constructs a point distance units along the input curve.'
##        #return 
##
##    def ConstructDeflection(self, baseLine, distance, inAngle):
##        u"Constructs a point in the polar coordinate system defined by baseLine and its 'from' point. The angle is in radians."
##        #return 
##
##    def ConstructDeflectionIntersection(self, baseLine, startAngle, endAngle, OnRightSide):
##        u'Constructs the point of intersection of two rays with origins at the endpoints of the base line and the specified angles (in radians). If onRightSide is true, this work will be done to the right of the base line, otherwise to the left.'
##        #return 
##
##    def ConstructAngleDistance(self, p, inAngle, distance):
##        u'Constructs a point at a specified angle (in radians) from the horizontal axis and a specified distance away from the input point.'
##        #return 
##

IVector._methods_ = [
    COMMETHOD(['propget', helpstring(u'The dimension of this vector.')], HRESULT, 'Dimension',
              ( ['retval', 'out'], POINTER(c_int), 'Dimension' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the vector is empty (unset).')], HRESULT, 'IsEmpty',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsEmpty' )),
    COMMETHOD([helpstring(u'Makes the vector empty (unset).')], HRESULT, 'SetEmpty'),
    COMMETHOD(['propget', helpstring(u'The component corresponding to a given index.')], HRESULT, 'ComponentByIndex',
              ( [], c_int, 'componentIndex' ),
              ( ['retval', 'out'], POINTER(c_double), 'componentValue' )),
    COMMETHOD(['propput', helpstring(u'The component corresponding to a given index.')], HRESULT, 'ComponentByIndex',
              ( [], c_int, 'componentIndex' ),
              ( [], c_double, 'componentValue' )),
    COMMETHOD(['propget', helpstring(u'The length of the vector.')], HRESULT, 'Magnitude',
              ( ['retval', 'out'], POINTER(c_double), 'Magnitude' )),
    COMMETHOD(['propput', helpstring(u'The length of the vector.')], HRESULT, 'Magnitude',
              ( [], c_double, 'Magnitude' )),
    COMMETHOD([helpstring(u'Normalize the vector (scale it to magnitude = 1).')], HRESULT, 'Normalize'),
    COMMETHOD([helpstring(u'Scale the vector by the given factor.')], HRESULT, 'Scale',
              ( [], c_double, 'ScaleFactor' )),
    COMMETHOD([helpstring(u'Construct a new vector by adding a different vector to this vector.')], HRESULT, 'AddVector',
              ( [], POINTER(IVector), 'otherVector' ),
              ( ['retval', 'out'], POINTER(POINTER(IVector)), 'result' )),
    COMMETHOD([helpstring(u'Construct a new vector by subtracting a different vector from this vector.')], HRESULT, 'SubtractVector',
              ( [], POINTER(IVector), 'otherVector' ),
              ( ['retval', 'out'], POINTER(POINTER(IVector)), 'result' )),
    COMMETHOD([helpstring(u'Set this vector by adding two input vectors.')], HRESULT, 'ConstructAddVector',
              ( [], POINTER(IVector), 'vector1' ),
              ( [], POINTER(IVector), 'vector2' )),
    COMMETHOD([helpstring(u'Set this vector by subtracting the second input vector from the first one.')], HRESULT, 'ConstructSubtractVector',
              ( [], POINTER(IVector), 'vector1' ),
              ( [], POINTER(IVector), 'vector2' )),
    COMMETHOD([helpstring(u'Returns the dot product of this vector and another vector.')], HRESULT, 'DotProduct',
              ( [], POINTER(IVector), 'otherVector' ),
              ( ['retval', 'out'], POINTER(c_double), 'result' )),
]
################################################################
## code template for IVector implementation
##class IVector_Impl(object):
##    def Normalize(self):
##        u'Normalize the vector (scale it to magnitude = 1).'
##        #return 
##
##    def Scale(self, ScaleFactor):
##        u'Scale the vector by the given factor.'
##        #return 
##
##    def SubtractVector(self, otherVector):
##        u'Construct a new vector by subtracting a different vector from this vector.'
##        #return result
##
##    def AddVector(self, otherVector):
##        u'Construct a new vector by adding a different vector to this vector.'
##        #return result
##
##    @property
##    def Dimension(self):
##        u'The dimension of this vector.'
##        #return Dimension
##
##    def ConstructAddVector(self, vector1, vector2):
##        u'Set this vector by adding two input vectors.'
##        #return 
##
##    def _get(self):
##        u'The length of the vector.'
##        #return Magnitude
##    def _set(self, Magnitude):
##        u'The length of the vector.'
##    Magnitude = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def IsEmpty(self):
##        u'Indicates if the vector is empty (unset).'
##        #return IsEmpty
##
##    def ConstructSubtractVector(self, vector1, vector2):
##        u'Set this vector by subtracting the second input vector from the first one.'
##        #return 
##
##    def _get(self, componentIndex):
##        u'The component corresponding to a given index.'
##        #return componentValue
##    def _set(self, componentIndex, componentValue):
##        u'The component corresponding to a given index.'
##    ComponentByIndex = property(_get, _set, doc = _set.__doc__)
##
##    def DotProduct(self, otherVector):
##        u'Returns the dot product of this vector and another vector.'
##        #return result
##
##    def SetEmpty(self):
##        u'Makes the vector empty (unset).'
##        #return 
##

IHitTest3D._methods_ = [
    COMMETHOD([helpstring(u'Locates a part of a geometry closest to a query point. Any located part must be within searchRadius units from the query point.')], HRESULT, 'HitTest3D',
              ( [], POINTER(IPoint), 'QueryPoint' ),
              ( [], c_double, 'searchRadius' ),
              ( [], esriGeometryHitPartType, 'geometryPart' ),
              ( [], POINTER(IPoint), 'hitPoint' ),
              ( ['in', 'out'], POINTER(c_double), 'hitDistance' ),
              ( ['in', 'out'], POINTER(c_int), 'hitPartIndex' ),
              ( ['in', 'out'], POINTER(c_int), 'hitSegmentIndex' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'bHit' )),
    COMMETHOD([helpstring(u'Locates a part of a geometry closest to a query ray.')], HRESULT, 'HitTestCone',
              ( [], POINTER(IRay), 'pQueryRay' ),
              ( [], c_double, 'minAngle' ),
              ( [], esriGeometryHitPartType, 'geometryPart' ),
              ( [], POINTER(IPoint), 'pHitPoint' ),
              ( ['in', 'out'], POINTER(c_double), 'pHitDistance' ),
              ( ['in', 'out'], POINTER(c_int), 'pHitPartIndex' ),
              ( ['in', 'out'], POINTER(c_int), 'pHitSegmentIndex' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbHit' )),
]
################################################################
## code template for IHitTest3D implementation
##class IHitTest3D_Impl(object):
##    def HitTestCone(self, pQueryRay, minAngle, geometryPart, pHitPoint):
##        u'Locates a part of a geometry closest to a query ray.'
##        #return pHitDistance, pHitPartIndex, pHitSegmentIndex, pbHit
##
##    def HitTest3D(self, QueryPoint, searchRadius, geometryPart, hitPoint):
##        u'Locates a part of a geometry closest to a query point. Any located part must be within searchRadius units from the query point.'
##        #return hitDistance, hitPartIndex, hitSegmentIndex, bHit
##

IGeometricBufferSourceSink._methods_ = [
    COMMETHOD([helpstring(u'Reads the next geometry (along with a client specified geometry id) and distance from the source - or returns a nil geometry when at the end.')], HRESULT, 'ReadNext',
              ( ['out'], POINTER(c_int), 'geomID' ),
              ( ['out'], POINTER(POINTER(IGeometry)), 'nextGeometry' ),
              ( ['out'], POINTER(c_double), 'pDistance' )),
    COMMETHOD([helpstring(u'Writes the next output buffer to its destination. The client id is valid when buffers have not been dissolved or exploded.')], HRESULT, 'WriteNext',
              ( [], c_int, 'geomID' ),
              ( [], POINTER(IGeometry), 'pBufferedGeometry' )),
]
################################################################
## code template for IGeometricBufferSourceSink implementation
##class IGeometricBufferSourceSink_Impl(object):
##    def WriteNext(self, geomID, pBufferedGeometry):
##        u'Writes the next output buffer to its destination. The client id is valid when buffers have not been dissolved or exploded.'
##        #return 
##
##    def ReadNext(self):
##        u'Reads the next geometry (along with a client specified geometry id) and distance from the source - or returns a nil geometry when at the end.'
##        #return geomID, nextGeometry, pDistance
##


# values for enumeration 'esriMonotinicityEnum'
esriValueIncreases = 1
esriValueLevel = 2
esriValueDecreases = 4
esriValuesEmpty = 8
esriMonotinicityEnum = c_int # enum

# values for enumeration 'wkbByteOrder'
wkbXDR = 0
wkbNDR = 1
wkbByteOrder = c_int # enum
ITriangleFan._methods_ = [
]
################################################################
## code template for ITriangleFan implementation
##class ITriangleFan_Impl(object):

ITriangleStrip._methods_ = [
]
################################################################
## code template for ITriangleStrip implementation
##class ITriangleStrip_Impl(object):

class ISpatialReferenceFactory2(ISpatialReferenceFactory):
    _case_insensitive_ = True
    u'Provides access to members that create different kinds of spatial reference components.'
    _iid_ = GUID('{1F050200-DA7F-11D3-9F60-00C04F6BDD7F}')
    _idlflags_ = ['oleautomation']
class ISpatialReferenceFactory3(ISpatialReferenceFactory2):
    _case_insensitive_ = True
    u'Provides access to members that create vertical datums or coordinate systems.'
    _iid_ = GUID('{59025A77-2CF9-4EF6-992A-1EA18F0012F0}')
    _idlflags_ = ['oleautomation']
class ISpatialReferenceFactory4(ISpatialReferenceFactory3):
    _case_insensitive_ = True
    u'Provides access to members that create lists of coordinate systems.'
    _iid_ = GUID('{D383F512-5377-4DD6-8FCD-5BF05203577D}')
    _idlflags_ = ['oleautomation']
class ISpatialReferenceFactory5(ISpatialReferenceFactory4):
    _case_insensitive_ = True
    u'Provides access to members that control the geographic transformations fallback mechanism.'
    _iid_ = GUID('{68D7AFCE-9129-4569-ACF6-32C7A8DA077F}')
    _idlflags_ = ['oleautomation']
ISpatialReferenceFactory2._methods_ = [
    COMMETHOD([helpstring(u'Creates a list of predefined geographic transformations.')], HRESULT, 'CreatePredefinedGeographicTransformations',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISet)), 'geotransformations' )),
    COMMETHOD([helpstring(u'Creates a predefined spatial reference from an srID.')], HRESULT, 'CreateSpatialReference',
              ( [], c_int, 'srID' ),
              ( ['retval', 'out'], POINTER(POINTER(ISpatialReference)), 'SR' )),
    COMMETHOD(['propget', helpstring(u'Creates a list of default geographic transformations.')], HRESULT, 'GeoTransformationDefaults',
              ( ['retval', 'out'], POINTER(POINTER(IGeoTransformationOperationSet)), 'GTDefaults' )),
    COMMETHOD([helpstring(u'Returns a list of predefined geographic transformations.')], HRESULT, 'GetPredefinedGeographicTransformations',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISet)), 'predefinedGTs' )),
]
################################################################
## code template for ISpatialReferenceFactory2 implementation
##class ISpatialReferenceFactory2_Impl(object):
##    def GetPredefinedGeographicTransformations(self):
##        u'Returns a list of predefined geographic transformations.'
##        #return predefinedGTs
##
##    def CreateSpatialReference(self, srID):
##        u'Creates a predefined spatial reference from an srID.'
##        #return SR
##
##    def CreatePredefinedGeographicTransformations(self):
##        u'Creates a list of predefined geographic transformations.'
##        #return geotransformations
##
##    @property
##    def GeoTransformationDefaults(self):
##        u'Creates a list of default geographic transformations.'
##        #return GTDefaults
##

class IVerticalDatum(ISpatialReferenceInfo):
    _case_insensitive_ = True
    u'Indicator interface for vertical datums.'
    _iid_ = GUID('{81E15EB5-4A1D-4ADF-BF96-E0CA31D17CFD}')
    _idlflags_ = ['oleautomation']
ISpatialReferenceFactory3._methods_ = [
    COMMETHOD([helpstring(u'Creates a predefined vertical coordinate system from an enumeration or ID code.')], HRESULT, 'CreateVerticalCoordinateSystem',
              ( [], c_int, 'vcsID' ),
              ( ['retval', 'out'], POINTER(POINTER(IVerticalCoordinateSystem)), 'VerticalCoordinateSystem' )),
    COMMETHOD([helpstring(u'Creates a predefined vertical datum from an enumeration or ID code.')], HRESULT, 'CreateVerticalDatum',
              ( [], c_int, 'vdID' ),
              ( ['retval', 'out'], POINTER(POINTER(IVerticalDatum)), 'VerticalDatum' )),
    COMMETHOD([helpstring(u'Creates a list of predefined vertical datums.')], HRESULT, 'CreatePredefinedVerticalDatums',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISet)), 'verticalDatums' )),
    COMMETHOD([helpstring(u'Creates a list of predefined vertical coordinate systems.')], HRESULT, 'CreatePredefinedVerticalCoordinateSystems',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISet)), 'verticalCoordinateSystems' )),
    COMMETHOD([helpstring(u'Creates a vertical coordinate system from its string format.')], HRESULT, 'CreateVerticalCoordinateSystemFromESRISpatialReference',
              ( [], BSTR, 'srInfo' ),
              ( ['retval', 'out'], POINTER(POINTER(IVerticalCoordinateSystem)), 'vcs' )),
    COMMETHOD([helpstring(u'Creates a spatial reference system and defines it from the specified ESRISpatialReference buffer.')], HRESULT, 'CreateESRISpatialReferenceInfo',
              ( [], BSTR, 'spatRefInfo' ),
              ( ['out'], POINTER(POINTER(ISpatialReferenceInfo)), 'SpatialReference' ),
              ( ['out'], POINTER(c_int), 'cBytesRead' )),
    COMMETHOD([helpstring(u'Creates a spatial reference from a PRJ string.')], HRESULT, 'CreateESRISpatialReferenceInfoFromPRJ',
              ( [], BSTR, 'prj' ),
              ( ['retval', 'out'], POINTER(POINTER(ISpatialReferenceInfo)), 'SpatialReference' )),
    COMMETHOD([helpstring(u'Creates a spatial reference from a PRJ file.')], HRESULT, 'CreateESRISpatialReferenceInfoFromPRJFile',
              ( [], BSTR, 'prjFile' ),
              ( ['retval', 'out'], POINTER(POINTER(ISpatialReferenceInfo)), 'SpatialReference' )),
    COMMETHOD([helpstring(u'Exports a spatial reference to a PRJ file.')], HRESULT, 'ExportESRISpatialReferenceInfoToPRJFile',
              ( [], BSTR, 'prjFile' ),
              ( [], POINTER(ISpatialReferenceInfo), 'SpatialReference' )),
    COMMETHOD([helpstring(u'Constructs a high precision spatial reference based on an existing spatial reference. xy/z/mDoubler is the number of times the respective precision is to be doubled. A value of zero will find the maximum doubling for that precision.')], HRESULT, 'ConstructHighPrecisionSpatialReference',
              ( [], POINTER(ISpatialReference), 'inSR' ),
              ( [], c_int, 'xyDoubler' ),
              ( [], c_int, 'zDoubler' ),
              ( [], c_int, 'mDoubler' ),
              ( ['retval', 'out'], POINTER(POINTER(ISpatialReference)), 'outSR' )),
    COMMETHOD([helpstring(u'Construct a low precision spatial reference with the same scale factor as the high precision input, but with a different domain extent. If the calculated domain extent cannot cover the specified data extent, an error is returned.')], HRESULT, 'ConstructLowPrecisionSpatialReference',
              ( [], VARIANT_BOOL, 'bMatchPrecision' ),
              ( [], POINTER(ISpatialReference), 'inSR' ),
              ( [], POINTER(IEnvelope), 'dataExtent' ),
              ( ['retval', 'out'], POINTER(POINTER(ISpatialReference)), 'ppOutSR' )),
]
################################################################
## code template for ISpatialReferenceFactory3 implementation
##class ISpatialReferenceFactory3_Impl(object):
##    def CreateVerticalDatum(self, vdID):
##        u'Creates a predefined vertical datum from an enumeration or ID code.'
##        #return VerticalDatum
##
##    def CreateESRISpatialReferenceInfoFromPRJ(self, prj):
##        u'Creates a spatial reference from a PRJ string.'
##        #return SpatialReference
##
##    def CreatePredefinedVerticalDatums(self):
##        u'Creates a list of predefined vertical datums.'
##        #return verticalDatums
##
##    def ConstructLowPrecisionSpatialReference(self, bMatchPrecision, inSR, dataExtent):
##        u'Construct a low precision spatial reference with the same scale factor as the high precision input, but with a different domain extent. If the calculated domain extent cannot cover the specified data extent, an error is returned.'
##        #return ppOutSR
##
##    def ExportESRISpatialReferenceInfoToPRJFile(self, prjFile, SpatialReference):
##        u'Exports a spatial reference to a PRJ file.'
##        #return 
##
##    def CreatePredefinedVerticalCoordinateSystems(self):
##        u'Creates a list of predefined vertical coordinate systems.'
##        #return verticalCoordinateSystems
##
##    def ConstructHighPrecisionSpatialReference(self, inSR, xyDoubler, zDoubler, mDoubler):
##        u'Constructs a high precision spatial reference based on an existing spatial reference. xy/z/mDoubler is the number of times the respective precision is to be doubled. A value of zero will find the maximum doubling for that precision.'
##        #return outSR
##
##    def CreateVerticalCoordinateSystem(self, vcsID):
##        u'Creates a predefined vertical coordinate system from an enumeration or ID code.'
##        #return VerticalCoordinateSystem
##
##    def CreateESRISpatialReferenceInfo(self, spatRefInfo):
##        u'Creates a spatial reference system and defines it from the specified ESRISpatialReference buffer.'
##        #return SpatialReference, cBytesRead
##
##    def CreateESRISpatialReferenceInfoFromPRJFile(self, prjFile):
##        u'Creates a spatial reference from a PRJ file.'
##        #return SpatialReference
##
##    def CreateVerticalCoordinateSystemFromESRISpatialReference(self, srInfo):
##        u'Creates a vertical coordinate system from its string format.'
##        #return vcs
##

ISpatialReferenceFactory4._methods_ = [
    COMMETHOD([helpstring(u'Returns a set of predefined coordinate system names, and optionally the coordinate systems themselves.')], HRESULT, 'GetAreaNames',
              ( ['in'], esriCoordinateSystemFilter, 'typeFilter' ),
              ( ['in'], BSTR, 'nameFilter' ),
              ( ['in'], VARIANT_BOOL, 'returnCategorizedNames' ),
              ( ['in'], VARIANT_BOOL, 'hydrateSR' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPropertySet)), 'ppResults' )),
    COMMETHOD([helpstring(u"Creates a coordinate system from the human-readable 'area name' of the coordinate system.")], HRESULT, 'CreateFromAreaName',
              ( ['in'], BSTR, 'areaName' ),
              ( ['in'], esriCoordinateSystemFilter, 'typeFilter' ),
              ( ['retval', 'out'], POINTER(POINTER(ISpatialReferenceInfo)), 'ppSRInfo' )),
]
################################################################
## code template for ISpatialReferenceFactory4 implementation
##class ISpatialReferenceFactory4_Impl(object):
##    def CreateFromAreaName(self, areaName, typeFilter):
##        u"Creates a coordinate system from the human-readable 'area name' of the coordinate system."
##        #return ppSRInfo
##
##    def GetAreaNames(self, typeFilter, nameFilter, returnCategorizedNames, hydrateSR):
##        u'Returns a set of predefined coordinate system names, and optionally the coordinate systems themselves.'
##        #return ppResults
##

ISpatialReferenceFactory5._methods_ = [
    COMMETHOD(['propget', helpstring(u'Enables/disables the geographic transformations fallback mechanism. Default is False.')], HRESULT, 'GeoTransformationFallback',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'vbYesNo' )),
    COMMETHOD(['propput', helpstring(u'Enables/disables the geographic transformations fallback mechanism. Default is False.')], HRESULT, 'GeoTransformationFallback',
              ( ['in'], VARIANT_BOOL, 'vbYesNo' )),
]
################################################################
## code template for ISpatialReferenceFactory5 implementation
##class ISpatialReferenceFactory5_Impl(object):
##    def _get(self):
##        u'Enables/disables the geographic transformations fallback mechanism. Default is False.'
##        #return vbYesNo
##    def _set(self, vbYesNo):
##        u'Enables/disables the geographic transformations fallback mechanism. Default is False.'
##    GeoTransformationFallback = property(_get, _set, doc = _set.__doc__)
##

IVector3D._methods_ = [
    COMMETHOD(['propget', helpstring(u"The vector's X component.")], HRESULT, 'XComponent',
              ( ['retval', 'out'], POINTER(c_double), 'dx' )),
    COMMETHOD(['propput', helpstring(u"The vector's X component.")], HRESULT, 'XComponent',
              ( [], c_double, 'dx' )),
    COMMETHOD(['propget', helpstring(u"The vector's Y component.")], HRESULT, 'YComponent',
              ( ['retval', 'out'], POINTER(c_double), 'dy' )),
    COMMETHOD(['propput', helpstring(u"The vector's Y component.")], HRESULT, 'YComponent',
              ( [], c_double, 'dy' )),
    COMMETHOD(['propget', helpstring(u"The vector's Z component.")], HRESULT, 'ZComponent',
              ( ['retval', 'out'], POINTER(c_double), 'dz' )),
    COMMETHOD(['propput', helpstring(u"The vector's Z component.")], HRESULT, 'ZComponent',
              ( [], c_double, 'dz' )),
    COMMETHOD(['propget', helpstring(u"The vector's inclination in radians.")], HRESULT, 'Inclination',
              ( ['retval', 'out'], POINTER(c_double), 'Inclination' )),
    COMMETHOD(['propput', helpstring(u"The vector's inclination in radians.")], HRESULT, 'Inclination',
              ( [], c_double, 'Inclination' )),
    COMMETHOD(['propget', helpstring(u"The vector's azimuth angle in radians.")], HRESULT, 'Azimuth',
              ( ['retval', 'out'], POINTER(c_double), 'Azimuth' )),
    COMMETHOD(['propput', helpstring(u"The vector's azimuth angle in radians.")], HRESULT, 'Azimuth',
              ( [], c_double, 'Azimuth' )),
    COMMETHOD([helpstring(u'Move the vector by adding a shift value to each component.')], HRESULT, 'Move',
              ( [], c_double, 'dx' ),
              ( [], c_double, 'dy' ),
              ( [], c_double, 'dz' )),
    COMMETHOD([helpstring(u"Get the values of the vector's components.")], HRESULT, 'QueryComponents',
              ( ['out'], POINTER(c_double), 'dx' ),
              ( ['out'], POINTER(c_double), 'dy' ),
              ( ['out'], POINTER(c_double), 'dz' )),
    COMMETHOD([helpstring(u"Set the values of the vector's components.")], HRESULT, 'SetComponents',
              ( [], c_double, 'dx' ),
              ( [], c_double, 'dy' ),
              ( [], c_double, 'dz' )),
    COMMETHOD([helpstring(u'Set the vector by taking the difference of point1 and point2 (so the vector would go from point2 to point1).')], HRESULT, 'ConstructDifference',
              ( [], POINTER(IPoint), 'point1' ),
              ( [], POINTER(IPoint), 'point2' )),
    COMMETHOD([helpstring(u'Rotate the vector around an axis defined by another vector. The angle is in radians.')], HRESULT, 'Rotate',
              ( [], c_double, 'Angle' ),
              ( [], POINTER(IVector3D), 'axis' )),
    COMMETHOD([helpstring(u'Set the vector using polar components. Angles are in radians.')], HRESULT, 'PolarSet',
              ( [], c_double, 'Azimuth' ),
              ( [], c_double, 'Inclination' ),
              ( [], c_double, 'radiusLength' )),
    COMMETHOD([helpstring(u"Get the vector's polar components. Angles are in radians.")], HRESULT, 'PolarQuery',
              ( ['out'], POINTER(c_double), 'Azimuth' ),
              ( ['out'], POINTER(c_double), 'Inclination' ),
              ( ['out'], POINTER(c_double), 'radiusLength' )),
    COMMETHOD([helpstring(u'Modify the vector by adding to its polar components. Angles are in radians.')], HRESULT, 'PolarMove',
              ( [], c_double, 'dAzimuth' ),
              ( [], c_double, 'dInclination' ),
              ( [], c_double, 'dRadius' )),
    COMMETHOD([helpstring(u'Returns the cross product of this vector and another vector.')], HRESULT, 'CrossProduct',
              ( [], POINTER(IVector), 'otherVector' ),
              ( ['retval', 'out'], POINTER(POINTER(IVector)), 'result' )),
    COMMETHOD([helpstring(u'Set this vector equal to the cross product of the two input vectors.')], HRESULT, 'ConstructCrossProduct',
              ( [], POINTER(IVector), 'vector1' ),
              ( [], POINTER(IVector), 'vector2' )),
]
################################################################
## code template for IVector3D implementation
##class IVector3D_Impl(object):
##    def CrossProduct(self, otherVector):
##        u'Returns the cross product of this vector and another vector.'
##        #return result
##
##    def PolarQuery(self):
##        u"Get the vector's polar components. Angles are in radians."
##        #return Azimuth, Inclination, radiusLength
##
##    def Rotate(self, Angle, axis):
##        u'Rotate the vector around an axis defined by another vector. The angle is in radians.'
##        #return 
##
##    def Move(self, dx, dy, dz):
##        u'Move the vector by adding a shift value to each component.'
##        #return 
##
##    def QueryComponents(self):
##        u"Get the values of the vector's components."
##        #return dx, dy, dz
##
##    def SetComponents(self, dx, dy, dz):
##        u"Set the values of the vector's components."
##        #return 
##
##    def ConstructCrossProduct(self, vector1, vector2):
##        u'Set this vector equal to the cross product of the two input vectors.'
##        #return 
##
##    def _get(self):
##        u"The vector's X component."
##        #return dx
##    def _set(self, dx):
##        u"The vector's X component."
##    XComponent = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u"The vector's Z component."
##        #return dz
##    def _set(self, dz):
##        u"The vector's Z component."
##    ZComponent = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u"The vector's azimuth angle in radians."
##        #return Azimuth
##    def _set(self, Azimuth):
##        u"The vector's azimuth angle in radians."
##    Azimuth = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u"The vector's Y component."
##        #return dy
##    def _set(self, dy):
##        u"The vector's Y component."
##    YComponent = property(_get, _set, doc = _set.__doc__)
##
##    def ConstructDifference(self, point1, point2):
##        u'Set the vector by taking the difference of point1 and point2 (so the vector would go from point2 to point1).'
##        #return 
##
##    def PolarMove(self, dAzimuth, dInclination, dRadius):
##        u'Modify the vector by adding to its polar components. Angles are in radians.'
##        #return 
##
##    def PolarSet(self, Azimuth, Inclination, radiusLength):
##        u'Set the vector using polar components. Angles are in radians.'
##        #return 
##
##    def _get(self):
##        u"The vector's inclination in radians."
##        #return Inclination
##    def _set(self, Inclination):
##        u"The vector's inclination in radians."
##    Inclination = property(_get, _set, doc = _set.__doc__)
##

ITriangles._methods_ = [
]
################################################################
## code template for ITriangles implementation
##class ITriangles_Impl(object):

IArea._methods_ = [
    COMMETHOD(['propget', helpstring(u'The area.')], HRESULT, 'Area',
              ( ['retval', 'out'], POINTER(c_double), 'Area' )),
    COMMETHOD(['propget', helpstring(u'The center of gravity (centroid).')], HRESULT, 'Centroid',
              ( ['retval', 'out'], POINTER(POINTER(IPoint)), 'Center' )),
    COMMETHOD(['propget', helpstring(u'A point guaranteed to be inside this area.')], HRESULT, 'LabelPoint',
              ( ['retval', 'out'], POINTER(POINTER(IPoint)), 'LabelPoint' )),
    COMMETHOD([helpstring(u'Copies the centroid of this area to the specified point.')], HRESULT, 'QueryCentroid',
              ( [], POINTER(IPoint), 'Center' )),
    COMMETHOD([helpstring(u'Copies to the input point a point guaranteed to be inside this area.')], HRESULT, 'QueryLabelPoint',
              ( [], POINTER(IPoint), 'LabelPoint' )),
]
################################################################
## code template for IArea implementation
##class IArea_Impl(object):
##    @property
##    def LabelPoint(self):
##        u'A point guaranteed to be inside this area.'
##        #return LabelPoint
##
##    def QueryLabelPoint(self, LabelPoint):
##        u'Copies to the input point a point guaranteed to be inside this area.'
##        #return 
##
##    @property
##    def Centroid(self):
##        u'The center of gravity (centroid).'
##        #return Center
##
##    def QueryCentroid(self, Center):
##        u'Copies the centroid of this area to the specified point.'
##        #return 
##
##    @property
##    def Area(self):
##        u'The area.'
##        #return Area
##

IGeometry3._methods_ = [
    COMMETHOD([helpstring(u'Defines the specified wksenvelope to be the current extent of this geometry in the x-y plane.')], HRESULT, 'QueryWKSEnvelope',
              ( ['out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSEnvelope), 'e' )),
]
################################################################
## code template for IGeometry3 implementation
##class IGeometry3_Impl(object):
##    def QueryWKSEnvelope(self):
##        u'Defines the specified wksenvelope to be the current extent of this geometry in the x-y plane.'
##        #return e
##

IGeometry4._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if a geometry has been changed (edited, projected, etc).')], HRESULT, 'Changed',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'isChanged' )),
    COMMETHOD(['propput', helpstring(u'Indicates if a geometry has been changed (edited, projected, etc).')], HRESULT, 'Changed',
              ( [], VARIANT_BOOL, 'isChanged' )),
]
################################################################
## code template for IGeometry4 implementation
##class IGeometry4_Impl(object):
##    def _get(self):
##        u'Indicates if a geometry has been changed (edited, projected, etc).'
##        #return isChanged
##    def _set(self, isChanged):
##        u'Indicates if a geometry has been changed (edited, projected, etc).'
##    Changed = property(_get, _set, doc = _set.__doc__)
##

class Spheroid(CoClass):
    u'Creates a spheroid.'
    _reg_clsid_ = GUID('{2B929480-1DD2-11B2-BF4F-08002022F573}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
class ISpheroidEdit(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the properties of a spheroid.'
    _iid_ = GUID('{3B219F20-D3FF-11D1-BC9B-0000F875BCCE}')
    _idlflags_ = ['oleautomation']
Spheroid._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IESRISpatialReferenceGEN, IESRISpatialReferenceGEN2, ISpheroid, ISpheroidEdit, ISpatialReferenceInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, IESRISpatialReference, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, ISpatialReferenceAuthority]


# values for enumeration 'esriSRSpheroid2Type'
esriSRSpheroid_SphereGRS1980_Authalic = 7048
esriSRSpheroid_Xian1980 = 7049
esriSRSpheroid_SphereEMEP = 107009
esriSRSpheroid_GRS1980Adj_MinnesotaAnoka = 107700
esriSRSpheroid_GRS1980Adj_MinnesotaBecker = 107701
esriSRSpheroid_GRS1980Adj_MinnesotaBeltramiNorth = 107702
esriSRSpheroid_GRS1980Adj_MinnesotaBeltramiSouth = 107703
esriSRSpheroid_GRS1980Adj_MinnesotaBenton = 107704
esriSRSpheroid_GRS1980Adj_MinnesotaBigStone = 107705
esriSRSpheroid_GRS1980Adj_MinnesotaBlueEarth = 107706
esriSRSpheroid_GRS1980Adj_MinnesotaBrown = 107707
esriSRSpheroid_GRS1980Adj_MinnesotaCarlton = 107708
esriSRSpheroid_GRS1980Adj_MinnesotaCarver = 107709
esriSRSpheroid_GRS1980Adj_MinnesotaCassNorth = 107710
esriSRSpheroid_GRS1980Adj_MinnesotaCassSouth = 107711
esriSRSpheroid_GRS1980Adj_MinnesotaChippewa = 107712
esriSRSpheroid_GRS1980Adj_MinnesotaChisago = 107713
esriSRSpheroid_GRS1980Adj_MinnesotaCookNorth = 107714
esriSRSpheroid_GRS1980Adj_MinnesotaCookSouth = 107715
esriSRSpheroid_GRS1980Adj_MinnesotaCottonwood = 107716
esriSRSpheroid_GRS1980Adj_MinnesotaCrowWing = 107717
esriSRSpheroid_GRS1980Adj_MinnesotaDakota = 107718
esriSRSpheroid_GRS1980Adj_MinnesotaDodge = 107719
esriSRSpheroid_GRS1980Adj_MinnesotaDouglas = 107720
esriSRSpheroid_GRS1980Adj_MinnesotaFaribault = 107721
esriSRSpheroid_GRS1980Adj_MinnesotaFillmore = 107722
esriSRSpheroid_GRS1980Adj_MinnesotaFreeborn = 107723
esriSRSpheroid_GRS1980Adj_MinnesotaGoodhue = 107724
esriSRSpheroid_GRS1980Adj_MinnesotaGrant = 107725
esriSRSpheroid_GRS1980Adj_MinnesotaHennepin = 107726
esriSRSpheroid_GRS1980Adj_MinnesotaHouston = 107727
esriSRSpheroid_GRS1980Adj_MinnesotaIsanti = 107728
esriSRSpheroid_GRS1980Adj_MinnesotaItascaNorth = 107729
esriSRSpheroid_GRS1980Adj_MinnesotaItascaSouth = 107730
esriSRSpheroid_GRS1980Adj_MinnesotaJackson = 107731
esriSRSpheroid_GRS1980Adj_MinnesotaKanabec = 107732
esriSRSpheroid_GRS1980Adj_MinnesotaKandiyohi = 107733
esriSRSpheroid_GRS1980Adj_MinnesotaKittson = 107734
esriSRSpheroid_GRS1980Adj_MinnesotaKoochiching = 107735
esriSRSpheroid_GRS1980Adj_MinnesotaLacQuiParle = 107736
esriSRSpheroid_GRS1980Adj_MinnesotaLake_of_theWoodsNorth = 107737
esriSRSpheroid_GRS1980Adj_MinnesotaLake_of_theWoodsSouth = 107738
esriSRSpheroid_GRS1980Adj_MinnesotaLeSueur = 107739
esriSRSpheroid_GRS1980Adj_MinnesotaLincoln = 107740
esriSRSpheroid_GRS1980Adj_MinnesotaLyon = 107741
esriSRSpheroid_GRS1980Adj_MinnesotaMcLeod = 107742
esriSRSpheroid_GRS1980Adj_MinnesotaMahnomen = 107743
esriSRSpheroid_GRS1980Adj_MinnesotaMarshall = 107744
esriSRSpheroid_GRS1980Adj_MinnesotaMartin = 107745
esriSRSpheroid_GRS1980Adj_MinnesotaMeeker = 107746
esriSRSpheroid_GRS1980Adj_MinnesotaMorrison = 107747
esriSRSpheroid_GRS1980Adj_MinnesotaMower = 107748
esriSRSpheroid_GRS1980Adj_MinnesotaMurray = 107749
esriSRSpheroid_GRS1980Adj_MinnesotaNicollet = 107750
esriSRSpheroid_GRS1980Adj_MinnesotaNobles = 107751
esriSRSpheroid_GRS1980Adj_MinnesotaNorman = 107752
esriSRSpheroid_GRS1980Adj_MinnesotaOlmsted = 107753
esriSRSpheroid_GRS1980Adj_MinnesotaOttertail = 107754
esriSRSpheroid_GRS1980Adj_MinnesotaPennington = 107755
esriSRSpheroid_GRS1980Adj_MinnesotaPine = 107756
esriSRSpheroid_GRS1980Adj_MinnesotaPipestone = 107757
esriSRSpheroid_GRS1980Adj_MinnesotaPolk = 107758
esriSRSpheroid_GRS1980Adj_MinnesotaPope = 107759
esriSRSpheroid_GRS1980Adj_MinnesotaRamsey = 107760
esriSRSpheroid_GRS1980Adj_MinnesotaRedLake = 107761
esriSRSpheroid_GRS1980Adj_MinnesotaRedwood = 107762
esriSRSpheroid_GRS1980Adj_MinnesotaRenville = 107763
esriSRSpheroid_GRS1980Adj_MinnesotaRice = 107764
esriSRSpheroid_GRS1980Adj_MinnesotaRock = 107765
esriSRSpheroid_GRS1980Adj_MinnesotaRoseau = 107766
esriSRSpheroid_GRS1980Adj_MinnesotaStLouisNorth = 107767
esriSRSpheroid_GRS1980Adj_MinnesotaStLouisCentral = 107768
esriSRSpheroid_GRS1980Adj_MinnesotaStLouisSouth = 107769
esriSRSpheroid_GRS1980Adj_MinnesotaScott = 107770
esriSRSpheroid_GRS1980Adj_MinnesotaSherburne = 107771
esriSRSpheroid_GRS1980Adj_MinnesotaSibley = 107772
esriSRSpheroid_GRS1980Adj_MinnesotaStearns = 107773
esriSRSpheroid_GRS1980Adj_MinnesotaSteele = 107774
esriSRSpheroid_GRS1980Adj_MinnesotaStevens = 107775
esriSRSpheroid_GRS1980Adj_MinnesotaSwift = 107776
esriSRSpheroid_GRS1980Adj_MinnesotaTodd = 107777
esriSRSpheroid_GRS1980Adj_MinnesotaTraverse = 107778
esriSRSpheroid_GRS1980Adj_MinnesotaWabasha = 107779
esriSRSpheroid_GRS1980Adj_MinnesotaWadena = 107780
esriSRSpheroid_GRS1980Adj_MinnesotaWaseca = 107781
esriSRSpheroid_GRS1980Adj_MinnesotaWatonwan = 107782
esriSRSpheroid_GRS1980Adj_MinnesotaWinona = 107783
esriSRSpheroid_GRS1980Adj_MinnesotaWright = 107784
esriSRSpheroid_GRS1980Adj_MinnesotaYellowMedicine = 107785
esriSRSpheroid_GRS1980Adj_WisconsinAshland = 107800
esriSRSpheroid_GRS1980Adj_WisconsinBarron = 107801
esriSRSpheroid_GRS1980Adj_WisconsinBayfield = 107802
esriSRSpheroid_GRS1980Adj_WisconsinBrown = 107803
esriSRSpheroid_GRS1980Adj_WisconsinBuffalo = 107804
esriSRSpheroid_GRS1980Adj_WisconsinBurnett = 107805
esriSRSpheroid_GRS1980Adj_WisconsinChippewa = 107806
esriSRSpheroid_GRS1980Adj_WisconsinClark = 107807
esriSRSpheroid_GRS1980Adj_WisconsinColumbia = 107808
esriSRSpheroid_GRS1980Adj_WisconsinCrawford = 107809
esriSRSpheroid_GRS1980Adj_WisconsinDane = 107810
esriSRSpheroid_GRS1980Adj_WisconsinDoor = 107811
esriSRSpheroid_GRS1980Adj_WisconsinDouglas = 107812
esriSRSpheroid_GRS1980Adj_WisconsinDunn = 107813
esriSRSpheroid_GRS1980Adj_WisconsinEauClaire = 107814
esriSRSpheroid_GRS1980Adj_WisconsinFlorence = 107815
esriSRSpheroid_GRS1980Adj_WisconsinForest = 107816
esriSRSpheroid_GRS1980Adj_WisconsinGrant = 107817
esriSRSpheroid_GRS1980Adj_WisconsinIowa = 107818
esriSRSpheroid_GRS1980Adj_WisconsinIron = 107819
esriSRSpheroid_GRS1980Adj_WisconsinJackson = 107820
esriSRSpheroid_GRS1980Adj_WisconsinLaCrosse = 107821
esriSRSpheroid_GRS1980Adj_WisconsinLanglade = 107822
esriSRSpheroid_GRS1980Adj_WisconsinLincoln = 107823
esriSRSpheroid_GRS1980Adj_WisconsinMarathon = 107824
esriSRSpheroid_GRS1980Adj_WisconsinMarinette = 107825
esriSRSpheroid_GRS1980Adj_WisconsinMenominee = 107826
esriSRSpheroid_GRS1980Adj_WisconsinMonroe = 107827
esriSRSpheroid_GRS1980Adj_WisconsinOconto = 107828
esriSRSpheroid_GRS1980Adj_WisconsinOneida = 107829
esriSRSpheroid_GRS1980Adj_WisconsinPolk = 107830
esriSRSpheroid_GRS1980Adj_WisconsinPortage = 107831
esriSRSpheroid_GRS1980Adj_WisconsinPrice = 107832
esriSRSpheroid_GRS1980Adj_WisconsinRichland = 107833
esriSRSpheroid_GRS1980Adj_WisconsinRock = 107834
esriSRSpheroid_GRS1980Adj_WisconsinRusk = 107835
esriSRSpheroid_GRS1980Adj_WisconsinStCroix = 107836
esriSRSpheroid_GRS1980Adj_WisconsinSauk = 107837
esriSRSpheroid_GRS1980Adj_WisconsinSawyer = 107838
esriSRSpheroid_GRS1980Adj_WisconsinShawano = 107839
esriSRSpheroid_GRS1980Adj_WisconsinTaylor = 107840
esriSRSpheroid_GRS1980Adj_WisconsinTrempealeau = 107841
esriSRSpheroid_GRS1980Adj_WisconsinVernon = 107842
esriSRSpheroid_GRS1980Adj_WisconsinVilas = 107843
esriSRSpheroid_GRS1980Adj_WisconsinWalworth = 107844
esriSRSpheroid_GRS1980Adj_WisconsinWashburn = 107845
esriSRSpheroid_GRS1980Adj_WisconsinWashington = 107846
esriSRSpheroid_GRS1980Adj_WisconsinWaukesha = 107847
esriSRSpheroid_GRS1980Adj_WisconsinWaupaca = 107848
esriSRSpheroid_GRS1980Adj_WisconsinWaushara = 107849
esriSRSpheroid_GRS1980Adj_WisconsinWood = 107850
esriSRSpheroid_GRS1980Adj_WisconsinAdamsJuneau = 107851
esriSRSpheroid_GRS1980Adj_WisconsinGreenLafayette = 107852
esriSRSpheroid_GRS1980Adj_WisconsinGreenLakeMarquette = 107853
esriSRSpheroid_GRS1980Adj_WisconsinDodgeJefferson = 107854
esriSRSpheroid_GRS1980Adj_WisconsinPepinPierce = 107855
esriSRSpheroid_GRS1980Adj_WICalumetFondduLacOutagamieWinnebago = 107856
esriSRSpheroid_GRS1980Adj_WIKenoshaMilwaukeeOzaukeeRacine = 107857
esriSRSpheroid_GRS1980Adj_WIKewauneeManitowocSheboygan = 107858
esriSRSpheroid_Mercury = 107900
esriSRSpheroid_Venus1985 = 107901
esriSRSpheroid_Venus2000 = 107902
esriSRSpheroid_TheMoon = 107903
esriSRSpheroid_Mars1979 = 107904
esriSRSpheroid_Mars2000 = 107905
esriSRSpheroid_MarsDeimos = 107906
esriSRSpheroid_MarsPhobos = 107907
esriSRSpheroid_Jupiter = 107908
esriSRSpheroid_JupiterAdrastea = 107909
esriSRSpheroid_JupiterAmalthea = 107910
esriSRSpheroid_JupiterAnanke = 107911
esriSRSpheroid_JupiterCallisto = 107912
esriSRSpheroid_JupiterCarme = 107913
esriSRSpheroid_JupiterElara = 107914
esriSRSpheroid_JupiterEuropa = 107915
esriSRSpheroid_JupiterGanymede = 107916
esriSRSpheroid_JupiterHimalia = 107917
esriSRSpheroid_JupiterIo = 107918
esriSRSpheroid_JupiterLeda = 107919
esriSRSpheroid_JupiterLysithea = 107920
esriSRSpheroid_JupiterMetis = 107921
esriSRSpheroid_JupiterPasiphae = 107922
esriSRSpheroid_JupiterSinope = 107923
esriSRSpheroid_JupiterThebe = 107924
esriSRSpheroid_Saturn = 107925
esriSRSpheroid_SaturnAtlas = 107926
esriSRSpheroid_SaturnCalypso = 107927
esriSRSpheroid_SaturnDione = 107928
esriSRSpheroid_SaturnEnceladus = 107929
esriSRSpheroid_SaturnEpimetheus = 107930
esriSRSpheroid_SaturnHelene = 107931
esriSRSpheroid_SaturnHyperion = 107932
esriSRSpheroid_SaturnIapetus = 107933
esriSRSpheroid_SaturnJanus = 107934
esriSRSpheroid_SaturnMimas = 107935
esriSRSpheroid_SaturnPan = 107936
esriSRSpheroid_SaturnPandora = 107937
esriSRSpheroid_SaturnPhoebe = 107938
esriSRSpheroid_SaturnPrometheus = 107939
esriSRSpheroid_SaturnRhea = 107940
esriSRSpheroid_SaturnTelesto = 107941
esriSRSpheroid_SaturnTethys = 107942
esriSRSpheroid_SaturnTitan = 107943
esriSRSpheroid_Uranus = 107944
esriSRSpheroid_UranusAriel = 107945
esriSRSpheroid_UranusBelinda = 107946
esriSRSpheroid_UranusBianca = 107947
esriSRSpheroid_UranusCordelia = 107948
esriSRSpheroid_UranusCressida = 107949
esriSRSpheroid_UranusDesdemona = 107950
esriSRSpheroid_UranusJuliet = 107951
esriSRSpheroid_UranusMiranda = 107952
esriSRSpheroid_UranusOberon = 107953
esriSRSpheroid_UranusOphelia = 107954
esriSRSpheroid_UranusPortia = 107955
esriSRSpheroid_UranusPuck = 107956
esriSRSpheroid_UranusRosalind = 107957
esriSRSpheroid_UranusTitania = 107958
esriSRSpheroid_UranusUmbriel = 107959
esriSRSpheroid_Neptune = 107960
esriSRSpheroid_NeptuneDespina = 107961
esriSRSpheroid_NeptuneGalatea = 107962
esriSRSpheroid_NeptuneLarissa = 107963
esriSRSpheroid_NeptuneNaiad = 107964
esriSRSpheroid_NeptuneNereid = 107965
esriSRSpheroid_NeptuneProteus = 107966
esriSRSpheroid_NeptuneThalassa = 107967
esriSRSpheroid_NeptuneTriton = 107968
esriSRSpheroid_Pluto = 107969
esriSRSpheroid_PlutoCharon = 107970
esriSRSpheroid2Type = c_int # enum

# values for enumeration 'esriSRProjection4Type'
esriSRProjection_Cube = 43055
esriSRProjection_Fuller = 43052
esriSRProjection_Local = 43058
esriSRProjection_RobinsonArcInfo = 43057
esriSRProjection_RSO_NaturalOrigin = 43053
esriSRProjection_RSO_Center = 43054
esriSRProjection_TransverseMercatorComplex = 43056
esriSRProjection_StereographicNorthPole = 43050
esriSRProjection_StereographicSouthPole = 43051
esriSRProjection_GoodeHomolosine = 43059
esriSRProjection4Type = c_int # enum
class VerticalDatum(CoClass):
    u'Creates a vertical datum.'
    _reg_clsid_ = GUID('{2594A37F-575D-4EAB-9809-94F4B56EF3FB}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
VerticalDatum._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IESRISpatialReferenceGEN, IESRISpatialReferenceGEN2, IHVDatum, IVerticalDatum, IVerticalDatumEdit, ISpatialReferenceInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, IESRISpatialReference, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, ISpatialReferenceAuthority]

class Datum(CoClass):
    u'Creates a datum.'
    _reg_clsid_ = GUID('{862BF080-1DD2-11B2-BF4F-08002022F573}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
class IDatumEdit(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the properties of a horizontal datum.'
    _iid_ = GUID('{3B219F21-D3FF-11D1-BC9B-0000F875BCCE}')
    _idlflags_ = ['oleautomation']
Datum._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IESRISpatialReferenceGEN, IESRISpatialReferenceGEN2, IHVDatum, IDatum, IDatumEdit, ISpatialReferenceInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, IESRISpatialReference, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, ISpatialReferenceAuthority]

IGeneralMultiPatchInfo._methods_ = [
    COMMETHOD(['propget', helpstring(u'Get Vertex Count.')], HRESULT, 'VertexCount',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propget', helpstring(u'Get Patch Count.')], HRESULT, 'PatchCount',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propget', helpstring(u'Get M Count.')], HRESULT, 'MCount',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propget', helpstring(u'Get Normal Count.')], HRESULT, 'NormalCount',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propget', helpstring(u'Get Texture Vertex Count.')], HRESULT, 'TextureVertexCount',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propget', helpstring(u'Get Id Count.')], HRESULT, 'IdCount',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propget', helpstring(u'Get Material Count.')], HRESULT, 'MaterialCount',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propget', helpstring(u'Get count of vertices in patch.')], HRESULT, 'PatchVertexCount',
              ( ['in'], c_int, 'patch' ),
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propget', helpstring(u'Get patch type.')], HRESULT, 'PatchType',
              ( ['in'], c_int, 'patch' ),
              ( ['retval', 'out'], POINTER(esriPatchType), 'pType' )),
    COMMETHOD(['propget', helpstring(u'Get patch priority.')], HRESULT, 'PatchPriority',
              ( ['in'], c_int, 'patch' ),
              ( ['retval', 'out'], POINTER(c_int), 'pPriority' )),
    COMMETHOD(['propget', helpstring(u'Get patch material index.')], HRESULT, 'PatchMaterialIndex',
              ( ['in'], c_int, 'patch' ),
              ( ['retval', 'out'], POINTER(c_int), 'pIndex' )),
    COMMETHOD(['propget', helpstring(u'Get Point for patch at vertex index.')], HRESULT, 'PatchVertex',
              ( ['in'], c_int, 'patch' ),
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPointZ), 'pPoint' )),
    COMMETHOD(['propget', helpstring(u'Get M for patch at vertex index.')], HRESULT, 'PatchM',
              ( ['in'], c_int, 'patch' ),
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(c_double), 'pValue' )),
    COMMETHOD([helpstring(u'Copies the Normal for patch at specified vertex index into the input vector.')], HRESULT, 'QueryPatchNormal',
              ( ['in'], c_int, 'patch' ),
              ( ['in'], c_int, 'Index' ),
              ( [], POINTER(IVector3D), 'pNormal' )),
    COMMETHOD(['propget', helpstring(u'Get texture vertex count for a patch.')], HRESULT, 'PatchTextureVertexCount',
              ( ['in'], c_int, 'patch' ),
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propget', helpstring(u'Get Texture WKSPoint for a patch at vertex index.')], HRESULT, 'PatchTextureVertex',
              ( ['in'], c_int, 'patch' ),
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPoint), 'pPoint' )),
    COMMETHOD(['propget', helpstring(u'Get vertex Id for a patch at vertex index.')], HRESULT, 'PatchVertexID',
              ( ['in'], c_int, 'patch' ),
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(c_int), 'pId' )),
    COMMETHOD(['propget', helpstring(u'Get material color.')], HRESULT, 'MaterialColor',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_COLOR), 'pColor' )),
    COMMETHOD(['propget', helpstring(u'Get transparency %, in range of 0 - 100')], HRESULT, 'MaterialTransparencyPercent',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(c_int), 'pTransparency' )),
    COMMETHOD(['propget', helpstring(u'Get backface culling enabled,')], HRESULT, 'MaterialCullBackface',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pCull' )),
    COMMETHOD(['propget', helpstring(u'Get Is Material textured.')], HRESULT, 'IsMaterialTextured',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pIsTextured' )),
    COMMETHOD(['propget', helpstring(u'Get Material texture row count.')], HRESULT, 'MaterialTextureRowCount',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propget', helpstring(u'Get Material texture column count.')], HRESULT, 'MaterialTextureColumnCount',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propget', helpstring(u'Get Material texture bytes per pixel.')], HRESULT, 'MaterialTextureBytesPerPixel',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(c_int), 'pBytesPerPixel' )),
    COMMETHOD(['propget', helpstring(u'Get Material texture pixel color.')], HRESULT, 'MaterialTexturePixelColor',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'row' ),
              ( ['in'], c_int, 'column' ),
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_COLOR), 'pColor' )),
]
################################################################
## code template for IGeneralMultiPatchInfo implementation
##class IGeneralMultiPatchInfo_Impl(object):
##    @property
##    def PatchVertexCount(self, patch):
##        u'Get count of vertices in patch.'
##        #return pCount
##
##    @property
##    def PatchTextureVertex(self, patch, Index):
##        u'Get Texture WKSPoint for a patch at vertex index.'
##        #return pPoint
##
##    @property
##    def MaterialCullBackface(self, Index):
##        u'Get backface culling enabled,'
##        #return pCull
##
##    @property
##    def PatchVertex(self, patch, Index):
##        u'Get Point for patch at vertex index.'
##        #return pPoint
##
##    @property
##    def PatchMaterialIndex(self, patch):
##        u'Get patch material index.'
##        #return pIndex
##
##    @property
##    def PatchM(self, patch, Index):
##        u'Get M for patch at vertex index.'
##        #return pValue
##
##    @property
##    def IdCount(self):
##        u'Get Id Count.'
##        #return pCount
##
##    @property
##    def PatchVertexID(self, patch, Index):
##        u'Get vertex Id for a patch at vertex index.'
##        #return pId
##
##    @property
##    def TextureVertexCount(self):
##        u'Get Texture Vertex Count.'
##        #return pCount
##
##    def QueryPatchNormal(self, patch, Index, pNormal):
##        u'Copies the Normal for patch at specified vertex index into the input vector.'
##        #return 
##
##    @property
##    def MCount(self):
##        u'Get M Count.'
##        #return pCount
##
##    @property
##    def PatchTextureVertexCount(self, patch):
##        u'Get texture vertex count for a patch.'
##        #return pCount
##
##    @property
##    def MaterialTexturePixelColor(self, Index, row, column):
##        u'Get Material texture pixel color.'
##        #return pColor
##
##    @property
##    def IsMaterialTextured(self, Index):
##        u'Get Is Material textured.'
##        #return pIsTextured
##
##    @property
##    def NormalCount(self):
##        u'Get Normal Count.'
##        #return pCount
##
##    @property
##    def MaterialCount(self):
##        u'Get Material Count.'
##        #return pCount
##
##    @property
##    def PatchType(self, patch):
##        u'Get patch type.'
##        #return pType
##
##    @property
##    def PatchCount(self):
##        u'Get Patch Count.'
##        #return pCount
##
##    @property
##    def MaterialTextureRowCount(self, Index):
##        u'Get Material texture row count.'
##        #return pCount
##
##    @property
##    def MaterialColor(self, Index):
##        u'Get material color.'
##        #return pColor
##
##    @property
##    def PatchPriority(self, patch):
##        u'Get patch priority.'
##        #return pPriority
##
##    @property
##    def MaterialTransparencyPercent(self, Index):
##        u'Get transparency %, in range of 0 - 100'
##        #return pTransparency
##
##    @property
##    def VertexCount(self):
##        u'Get Vertex Count.'
##        #return pCount
##
##    @property
##    def MaterialTextureColumnCount(self, Index):
##        u'Get Material texture column count.'
##        #return pCount
##
##    @property
##    def MaterialTextureBytesPerPixel(self, Index):
##        u'Get Material texture bytes per pixel.'
##        #return pBytesPerPixel
##

class PrimeMeridian(CoClass):
    u'Creates a prime meridian.'
    _reg_clsid_ = GUID('{C55A4180-1DD1-11B2-BF50-08002022F573}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
class IPrimeMeridianEdit(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the properties of the prime meridian.'
    _iid_ = GUID('{228D7221-D335-11D1-BC9B-0000F875BCCE}')
    _idlflags_ = ['oleautomation']
PrimeMeridian._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IESRISpatialReferenceGEN, IESRISpatialReferenceGEN2, IPrimeMeridian, IPrimeMeridianEdit, ISpatialReferenceInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, IESRISpatialReference, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, ISpatialReferenceAuthority]


# values for enumeration 'esriSRProjCSType'
esriSRProjCS_WGS1984N_PoleStereographic = 102018
esriSRProjCS_WGS1984S_PoleStereographic = 102021
esriSRProjCS_WGS1984N_PoleAziEqui = 102016
esriSRProjCS_WGS1984S_PoleAziEqui = 102019
esriSRProjCS_WGS1984N_PoleLambertAzi = 102017
esriSRProjCS_WGS1984S_PoleLambertAzi = 102020
esriSRProjCS_NAD1983CanadaAlbers = 102001
esriSRProjCS_NAD1983CanadaLambert = 102002
esriSRProjCS_NAD1983USA_Albers = 102003
esriSRProjCS_NAD1983USA_Lambert = 102004
esriSRProjCS_NAD1983USA_EquiConic = 102005
esriSRProjCS_NAD1983N_AmericaAlbers = 102008
esriSRProjCS_NAD1983N_AmericaLambert = 102009
esriSRProjCS_NAD1983N_AmericaEquiConic = 102010
esriSRProjCS_NAD1983AlaskaAlbers = 3338
esriSRProjCS_NAD1983HawaiiAlbers = 102007
esriSRProjCS_WGS1984AfricaSinusoidal = 102011
esriSRProjCS_WGS1984AfricaAlbers = 102022
esriSRProjCS_WGS1984AfricaEquiConic = 102023
esriSRProjCS_WGS1984AfricaLambert = 102024
esriSRProjCS_WGS1984AsiaLambert = 102012
esriSRProjCS_WGS1984N_AsiaAlbers = 102025
esriSRProjCS_WGS1984N_AsiaEquiConic = 102026
esriSRProjCS_WGS1984N_AsiaLambert = 102027
esriSRProjCS_WGS1984S_AsiaAlbers = 102028
esriSRProjCS_WGS1984S_AsiaEquiConic = 102029
esriSRProjCS_WGS1984S_AsiaLambert = 102030
esriSRProjCS_ED1950EuropeAlbers = 102013
esriSRProjCS_ED1950EuropeEquiConic = 102031
esriSRProjCS_ED1950EuropeLambert = 102014
esriSRProjCS_SAD1969S_AmericaAlbers = 102033
esriSRProjCS_SAD1969S_AmericaEquiConic = 102032
esriSRProjCS_SAD1969S_AmericaLambert = 102015
esriSRProjCS_World_PlateCarree = 54001
esriSRProjCS_World_EquidistantCylindrical = 54002
esriSRProjCS_World_MillerCylindrical = 54003
esriSRProjCS_World_Mercator = 54004
esriSRProjCS_World_Sinusoidal = 54008
esriSRProjCS_World_Mollweide = 54009
esriSRProjCS_World_EckertVI = 54010
esriSRProjCS_World_EckertV = 54011
esriSRProjCS_World_EckertIV = 54012
esriSRProjCS_World_EckertIII = 54013
esriSRProjCS_World_EckertII = 54014
esriSRProjCS_World_EckertI = 54015
esriSRProjCS_World_GallStereographic = 54016
esriSRProjCS_World_Behrmann = 54017
esriSRProjCS_World_WinkelI = 54018
esriSRProjCS_World_WinkelII = 54019
esriSRProjCS_World_Polyconic = 54021
esriSRProjCS_World_QuarticAuthalic = 54022
esriSRProjCS_World_Loximuthal = 54023
esriSRProjCS_World_Bonne = 54024
esriSRProjCS_World_Hotine = 54025
esriSRProjCS_World_Stereographic = 54026
esriSRProjCS_World_EquidistantConic = 54027
esriSRProjCS_World_Cassini = 54028
esriSRProjCS_World_VanderGrintenI = 54029
esriSRProjCS_World_Robinson = 54030
esriSRProjCS_World_TwoPointEquidistant = 54031
esriSRProjCS_World_AzimuthalEquidistant = 54032
esriSRProjCS_Sphere_PlateCarree = 53001
esriSRProjCS_Sphere_EquidistantCylindrical = 53002
esriSRProjCS_Sphere_MillerCylindrical = 53003
esriSRProjCS_Sphere_Mercator = 53004
esriSRProjCS_Sphere_Sinusoidal = 53008
esriSRProjCS_Sphere_Mollweide = 53009
esriSRProjCS_Sphere_EckertVI = 53010
esriSRProjCS_Sphere_EckertV = 53011
esriSRProjCS_Sphere_EckertIV = 53012
esriSRProjCS_Sphere_EckertIII = 53013
esriSRProjCS_Sphere_EckertII = 53014
esriSRProjCS_Sphere_EckertI = 53015
esriSRProjCS_Sphere_GallStereographic = 53016
esriSRProjCS_Sphere_Behrmann = 53017
esriSRProjCS_Sphere_WinkelI = 53018
esriSRProjCS_Sphere_WinkelII = 53019
esriSRProjCS_Sphere_Polyconic = 53021
esriSRProjCS_Sphere_QuarticAuthalic = 53022
esriSRProjCS_Sphere_Loximuthal = 53023
esriSRProjCS_Sphere_Bonne = 53024
esriSRProjCS_Sphere_Hotine = 53025
esriSRProjCS_Sphere_Stereographic = 53026
esriSRProjCS_Sphere_EquidistantConic = 53027
esriSRProjCS_Sphere_Cassini = 53028
esriSRProjCS_Sphere_VanderGrintenI = 53029
esriSRProjCS_Sphere_Robinson = 53030
esriSRProjCS_Sphere_TwoPointEquidistant = 53031
esriSRProjCS_Sphere_AzimuthalEquidistant = 53032
esriSRProjCS_WGS1984UTM_1N = 32601
esriSRProjCS_WGS1984UTM_2N = 32602
esriSRProjCS_WGS1984UTM_3N = 32603
esriSRProjCS_WGS1984UTM_4N = 32604
esriSRProjCS_WGS1984UTM_5N = 32605
esriSRProjCS_WGS1984UTM_6N = 32606
esriSRProjCS_WGS1984UTM_7N = 32607
esriSRProjCS_WGS1984UTM_8N = 32608
esriSRProjCS_WGS1984UTM_9N = 32609
esriSRProjCS_WGS1984UTM_10N = 32610
esriSRProjCS_WGS1984UTM_11N = 32611
esriSRProjCS_WGS1984UTM_12N = 32612
esriSRProjCS_WGS1984UTM_13N = 32613
esriSRProjCS_WGS1984UTM_14N = 32614
esriSRProjCS_WGS1984UTM_15N = 32615
esriSRProjCS_WGS1984UTM_16N = 32616
esriSRProjCS_WGS1984UTM_17N = 32617
esriSRProjCS_WGS1984UTM_18N = 32618
esriSRProjCS_WGS1984UTM_19N = 32619
esriSRProjCS_WGS1984UTM_20N = 32620
esriSRProjCS_WGS1984UTM_21N = 32621
esriSRProjCS_WGS1984UTM_22N = 32622
esriSRProjCS_WGS1984UTM_23N = 32623
esriSRProjCS_WGS1984UTM_24N = 32624
esriSRProjCS_WGS1984UTM_25N = 32625
esriSRProjCS_WGS1984UTM_26N = 32626
esriSRProjCS_WGS1984UTM_27N = 32627
esriSRProjCS_WGS1984UTM_28N = 32628
esriSRProjCS_WGS1984UTM_29N = 32629
esriSRProjCS_WGS1984UTM_30N = 32630
esriSRProjCS_WGS1984UTM_31N = 32631
esriSRProjCS_WGS1984UTM_32N = 32632
esriSRProjCS_WGS1984UTM_33N = 32633
esriSRProjCS_WGS1984UTM_34N = 32634
esriSRProjCS_WGS1984UTM_35N = 32635
esriSRProjCS_WGS1984UTM_36N = 32636
esriSRProjCS_WGS1984UTM_37N = 32637
esriSRProjCS_WGS1984UTM_38N = 32638
esriSRProjCS_WGS1984UTM_39N = 32639
esriSRProjCS_WGS1984UTM_40N = 32640
esriSRProjCS_WGS1984UTM_41N = 32641
esriSRProjCS_WGS1984UTM_42N = 32642
esriSRProjCS_WGS1984UTM_43N = 32643
esriSRProjCS_WGS1984UTM_44N = 32644
esriSRProjCS_WGS1984UTM_45N = 32645
esriSRProjCS_WGS1984UTM_46N = 32646
esriSRProjCS_WGS1984UTM_47N = 32647
esriSRProjCS_WGS1984UTM_48N = 32648
esriSRProjCS_WGS1984UTM_49N = 32649
esriSRProjCS_WGS1984UTM_50N = 32650
esriSRProjCS_WGS1984UTM_51N = 32651
esriSRProjCS_WGS1984UTM_52N = 32652
esriSRProjCS_WGS1984UTM_53N = 32653
esriSRProjCS_WGS1984UTM_54N = 32654
esriSRProjCS_WGS1984UTM_55N = 32655
esriSRProjCS_WGS1984UTM_56N = 32656
esriSRProjCS_WGS1984UTM_57N = 32657
esriSRProjCS_WGS1984UTM_58N = 32658
esriSRProjCS_WGS1984UTM_59N = 32659
esriSRProjCS_WGS1984UTM_60N = 32660
esriSRProjCS_WGS1984UTM_1S = 32701
esriSRProjCS_WGS1984UTM_2S = 32702
esriSRProjCS_WGS1984UTM_3S = 32703
esriSRProjCS_WGS1984UTM_4S = 32704
esriSRProjCS_WGS1984UTM_5S = 32705
esriSRProjCS_WGS1984UTM_6S = 32706
esriSRProjCS_WGS1984UTM_7S = 32707
esriSRProjCS_WGS1984UTM_8S = 32708
esriSRProjCS_WGS1984UTM_9S = 32709
esriSRProjCS_WGS1984UTM_10S = 32710
esriSRProjCS_WGS1984UTM_11S = 32711
esriSRProjCS_WGS1984UTM_12S = 32712
esriSRProjCS_WGS1984UTM_13S = 32713
esriSRProjCS_WGS1984UTM_14S = 32714
esriSRProjCS_WGS1984UTM_15S = 32715
esriSRProjCS_WGS1984UTM_16S = 32716
esriSRProjCS_WGS1984UTM_17S = 32717
esriSRProjCS_WGS1984UTM_18S = 32718
esriSRProjCS_WGS1984UTM_19S = 32719
esriSRProjCS_WGS1984UTM_20S = 32720
esriSRProjCS_WGS1984UTM_21S = 32721
esriSRProjCS_WGS1984UTM_22S = 32722
esriSRProjCS_WGS1984UTM_23S = 32723
esriSRProjCS_WGS1984UTM_24S = 32724
esriSRProjCS_WGS1984UTM_25S = 32725
esriSRProjCS_WGS1984UTM_26S = 32726
esriSRProjCS_WGS1984UTM_27S = 32727
esriSRProjCS_WGS1984UTM_28S = 32728
esriSRProjCS_WGS1984UTM_29S = 32729
esriSRProjCS_WGS1984UTM_30S = 32730
esriSRProjCS_WGS1984UTM_31S = 32731
esriSRProjCS_WGS1984UTM_32S = 32732
esriSRProjCS_WGS1984UTM_33S = 32733
esriSRProjCS_WGS1984UTM_34S = 32734
esriSRProjCS_WGS1984UTM_35S = 32735
esriSRProjCS_WGS1984UTM_36S = 32736
esriSRProjCS_WGS1984UTM_37S = 32737
esriSRProjCS_WGS1984UTM_38S = 32738
esriSRProjCS_WGS1984UTM_39S = 32739
esriSRProjCS_WGS1984UTM_40S = 32740
esriSRProjCS_WGS1984UTM_41S = 32741
esriSRProjCS_WGS1984UTM_42S = 32742
esriSRProjCS_WGS1984UTM_43S = 32743
esriSRProjCS_WGS1984UTM_44S = 32744
esriSRProjCS_WGS1984UTM_45S = 32745
esriSRProjCS_WGS1984UTM_46S = 32746
esriSRProjCS_WGS1984UTM_47S = 32747
esriSRProjCS_WGS1984UTM_48S = 32748
esriSRProjCS_WGS1984UTM_49S = 32749
esriSRProjCS_WGS1984UTM_50S = 32750
esriSRProjCS_WGS1984UTM_51S = 32751
esriSRProjCS_WGS1984UTM_52S = 32752
esriSRProjCS_WGS1984UTM_53S = 32753
esriSRProjCS_WGS1984UTM_54S = 32754
esriSRProjCS_WGS1984UTM_55S = 32755
esriSRProjCS_WGS1984UTM_56S = 32756
esriSRProjCS_WGS1984UTM_57S = 32757
esriSRProjCS_WGS1984UTM_58S = 32758
esriSRProjCS_WGS1984UTM_59S = 32759
esriSRProjCS_WGS1984UTM_60S = 32760
esriSRProjCS_WGS1972UTM_1N = 32201
esriSRProjCS_WGS1972UTM_2N = 32202
esriSRProjCS_WGS1972UTM_3N = 32203
esriSRProjCS_WGS1972UTM_4N = 32204
esriSRProjCS_WGS1972UTM_5N = 32205
esriSRProjCS_WGS1972UTM_6N = 32206
esriSRProjCS_WGS1972UTM_7N = 32207
esriSRProjCS_WGS1972UTM_8N = 32208
esriSRProjCS_WGS1972UTM_9N = 32209
esriSRProjCS_WGS1972UTM_10N = 32210
esriSRProjCS_WGS1972UTM_11N = 32211
esriSRProjCS_WGS1972UTM_12N = 32212
esriSRProjCS_WGS1972UTM_13N = 32213
esriSRProjCS_WGS1972UTM_14N = 32214
esriSRProjCS_WGS1972UTM_15N = 32215
esriSRProjCS_WGS1972UTM_16N = 32216
esriSRProjCS_WGS1972UTM_17N = 32217
esriSRProjCS_WGS1972UTM_18N = 32218
esriSRProjCS_WGS1972UTM_19N = 32219
esriSRProjCS_WGS1972UTM_20N = 32220
esriSRProjCS_WGS1972UTM_21N = 32221
esriSRProjCS_WGS1972UTM_22N = 32222
esriSRProjCS_WGS1972UTM_23N = 32223
esriSRProjCS_WGS1972UTM_24N = 32224
esriSRProjCS_WGS1972UTM_25N = 32225
esriSRProjCS_WGS1972UTM_26N = 32226
esriSRProjCS_WGS1972UTM_27N = 32227
esriSRProjCS_WGS1972UTM_28N = 32228
esriSRProjCS_WGS1972UTM_29N = 32229
esriSRProjCS_WGS1972UTM_30N = 32230
esriSRProjCS_WGS1972UTM_31N = 32231
esriSRProjCS_WGS1972UTM_32N = 32232
esriSRProjCS_WGS1972UTM_33N = 32233
esriSRProjCS_WGS1972UTM_34N = 32234
esriSRProjCS_WGS1972UTM_35N = 32235
esriSRProjCS_WGS1972UTM_36N = 32236
esriSRProjCS_WGS1972UTM_37N = 32237
esriSRProjCS_WGS1972UTM_38N = 32238
esriSRProjCS_WGS1972UTM_39N = 32239
esriSRProjCS_WGS1972UTM_40N = 32240
esriSRProjCS_WGS1972UTM_41N = 32241
esriSRProjCS_WGS1972UTM_42N = 32242
esriSRProjCS_WGS1972UTM_43N = 32243
esriSRProjCS_WGS1972UTM_44N = 32244
esriSRProjCS_WGS1972UTM_45N = 32245
esriSRProjCS_WGS1972UTM_46N = 32246
esriSRProjCS_WGS1972UTM_47N = 32247
esriSRProjCS_WGS1972UTM_48N = 32248
esriSRProjCS_WGS1972UTM_49N = 32249
esriSRProjCS_WGS1972UTM_50N = 32250
esriSRProjCS_WGS1972UTM_51N = 32251
esriSRProjCS_WGS1972UTM_52N = 32252
esriSRProjCS_WGS1972UTM_53N = 32253
esriSRProjCS_WGS1972UTM_54N = 32254
esriSRProjCS_WGS1972UTM_55N = 32255
esriSRProjCS_WGS1972UTM_56N = 32256
esriSRProjCS_WGS1972UTM_57N = 32257
esriSRProjCS_WGS1972UTM_58N = 32258
esriSRProjCS_WGS1972UTM_59N = 32259
esriSRProjCS_WGS1972UTM_60N = 32260
esriSRProjCS_WGS1972UTM_1S = 32301
esriSRProjCS_WGS1972UTM_2S = 32302
esriSRProjCS_WGS1972UTM_3S = 32303
esriSRProjCS_WGS1972UTM_4S = 32304
esriSRProjCS_WGS1972UTM_5S = 32305
esriSRProjCS_WGS1972UTM_6S = 32306
esriSRProjCS_WGS1972UTM_7S = 32307
esriSRProjCS_WGS1972UTM_8S = 32308
esriSRProjCS_WGS1972UTM_9S = 32309
esriSRProjCS_WGS1972UTM_10S = 32310
esriSRProjCS_WGS1972UTM_11S = 32311
esriSRProjCS_WGS1972UTM_12S = 32312
esriSRProjCS_WGS1972UTM_13S = 32313
esriSRProjCS_WGS1972UTM_14S = 32314
esriSRProjCS_WGS1972UTM_15S = 32315
esriSRProjCS_WGS1972UTM_16S = 32316
esriSRProjCS_WGS1972UTM_17S = 32317
esriSRProjCS_WGS1972UTM_18S = 32318
esriSRProjCS_WGS1972UTM_19S = 32319
esriSRProjCS_WGS1972UTM_20S = 32320
esriSRProjCS_WGS1972UTM_21S = 32321
esriSRProjCS_WGS1972UTM_22S = 32322
esriSRProjCS_WGS1972UTM_23S = 32323
esriSRProjCS_WGS1972UTM_24S = 32324
esriSRProjCS_WGS1972UTM_25S = 32325
esriSRProjCS_WGS1972UTM_26S = 32326
esriSRProjCS_WGS1972UTM_27S = 32327
esriSRProjCS_WGS1972UTM_28S = 32328
esriSRProjCS_WGS1972UTM_29S = 32329
esriSRProjCS_WGS1972UTM_30S = 32330
esriSRProjCS_WGS1972UTM_31S = 32331
esriSRProjCS_WGS1972UTM_32S = 32332
esriSRProjCS_WGS1972UTM_33S = 32333
esriSRProjCS_WGS1972UTM_34S = 32334
esriSRProjCS_WGS1972UTM_35S = 32335
esriSRProjCS_WGS1972UTM_36S = 32336
esriSRProjCS_WGS1972UTM_37S = 32337
esriSRProjCS_WGS1972UTM_38S = 32338
esriSRProjCS_WGS1972UTM_39S = 32339
esriSRProjCS_WGS1972UTM_40S = 32340
esriSRProjCS_WGS1972UTM_41S = 32341
esriSRProjCS_WGS1972UTM_42S = 32342
esriSRProjCS_WGS1972UTM_43S = 32343
esriSRProjCS_WGS1972UTM_44S = 32344
esriSRProjCS_WGS1972UTM_45S = 32345
esriSRProjCS_WGS1972UTM_46S = 32346
esriSRProjCS_WGS1972UTM_47S = 32347
esriSRProjCS_WGS1972UTM_48S = 32348
esriSRProjCS_WGS1972UTM_49S = 32349
esriSRProjCS_WGS1972UTM_50S = 32350
esriSRProjCS_WGS1972UTM_51S = 32351
esriSRProjCS_WGS1972UTM_52S = 32352
esriSRProjCS_WGS1972UTM_53S = 32353
esriSRProjCS_WGS1972UTM_54S = 32354
esriSRProjCS_WGS1972UTM_55S = 32355
esriSRProjCS_WGS1972UTM_56S = 32356
esriSRProjCS_WGS1972UTM_57S = 32357
esriSRProjCS_WGS1972UTM_58S = 32358
esriSRProjCS_WGS1972UTM_59S = 32359
esriSRProjCS_WGS1972UTM_60S = 32360
esriSRProjCS_NAD1927BLM_14N = 32064
esriSRProjCS_NAD1927BLM_15N = 32065
esriSRProjCS_NAD1927BLM_16N = 32066
esriSRProjCS_NAD1927BLM_17N = 32067
esriSRProjCS_NAD1927UTM_3N = 26703
esriSRProjCS_NAD1927UTM_4N = 26704
esriSRProjCS_NAD1927UTM_5N = 26705
esriSRProjCS_NAD1927UTM_6N = 26706
esriSRProjCS_NAD1927UTM_7N = 26707
esriSRProjCS_NAD1927UTM_8N = 26708
esriSRProjCS_NAD1927UTM_9N = 26709
esriSRProjCS_NAD1927UTM_10N = 26710
esriSRProjCS_NAD1927UTM_11N = 26711
esriSRProjCS_NAD1927UTM_12N = 26712
esriSRProjCS_NAD1927UTM_13N = 26713
esriSRProjCS_NAD1927UTM_14N = 26714
esriSRProjCS_NAD1927UTM_15N = 26715
esriSRProjCS_NAD1927UTM_16N = 26716
esriSRProjCS_NAD1927UTM_17N = 26717
esriSRProjCS_NAD1927UTM_18N = 26718
esriSRProjCS_NAD1927UTM_19N = 26719
esriSRProjCS_NAD1927UTM_20N = 26720
esriSRProjCS_NAD1927UTM_21N = 26721
esriSRProjCS_NAD1927UTM_22N = 26722
esriSRProjCS_NAD1983UTM_3N = 26903
esriSRProjCS_NAD1983UTM_4N = 26904
esriSRProjCS_NAD1983UTM_5N = 26905
esriSRProjCS_NAD1983UTM_6N = 26906
esriSRProjCS_NAD1983UTM_7N = 26907
esriSRProjCS_NAD1983UTM_8N = 26908
esriSRProjCS_NAD1983UTM_9N = 26909
esriSRProjCS_NAD1983UTM_10N = 26910
esriSRProjCS_NAD1983UTM_11N = 26911
esriSRProjCS_NAD1983UTM_12N = 26912
esriSRProjCS_NAD1983UTM_13N = 26913
esriSRProjCS_NAD1983UTM_14N = 26914
esriSRProjCS_NAD1983UTM_15N = 26915
esriSRProjCS_NAD1983UTM_16N = 26916
esriSRProjCS_NAD1983UTM_17N = 26917
esriSRProjCS_NAD1983UTM_18N = 26918
esriSRProjCS_NAD1983UTM_19N = 26919
esriSRProjCS_NAD1983UTM_20N = 26920
esriSRProjCS_NAD1983UTM_21N = 26921
esriSRProjCS_NAD1983UTM_22N = 26922
esriSRProjCS_NAD1983UTM_23N = 26923
esriSRProjCS_ETRF1989UTM_28N = 103528
esriSRProjCS_ETRF1989UTM_29N = 103529
esriSRProjCS_ETRF1989UTM_30N = 103530
esriSRProjCS_ETRF1989UTM_31N = 103531
esriSRProjCS_ETRF1989UTM_32N = 103532
esriSRProjCS_ETRF1989UTM_33N = 103533
esriSRProjCS_ETRF1989UTM_34N = 103534
esriSRProjCS_ETRF1989UTM_35N = 103535
esriSRProjCS_ETRF1989UTM_36N = 103536
esriSRProjCS_ETRF1989UTM_37N = 103537
esriSRProjCS_ETRF1989UTM_38N = 103538
esriSRProjCS_Pulkovo1942GK_2 = 28402
esriSRProjCS_Pulkovo1942GK_3 = 28403
esriSRProjCS_Pulkovo1942GK_4 = 28404
esriSRProjCS_Pulkovo1942GK_5 = 28405
esriSRProjCS_Pulkovo1942GK_6 = 28406
esriSRProjCS_Pulkovo1942GK_7 = 28407
esriSRProjCS_Pulkovo1942GK_8 = 28408
esriSRProjCS_Pulkovo1942GK_9 = 28409
esriSRProjCS_Pulkovo1942GK_10 = 28410
esriSRProjCS_Pulkovo1942GK_11 = 28411
esriSRProjCS_Pulkovo1942GK_12 = 28412
esriSRProjCS_Pulkovo1942GK_13 = 28413
esriSRProjCS_Pulkovo1942GK_14 = 28414
esriSRProjCS_Pulkovo1942GK_15 = 28415
esriSRProjCS_Pulkovo1942GK_16 = 28416
esriSRProjCS_Pulkovo1942GK_17 = 28417
esriSRProjCS_Pulkovo1942GK_18 = 28418
esriSRProjCS_Pulkovo1942GK_19 = 28419
esriSRProjCS_Pulkovo1942GK_20 = 28420
esriSRProjCS_Pulkovo1942GK_21 = 28421
esriSRProjCS_Pulkovo1942GK_22 = 28422
esriSRProjCS_Pulkovo1942GK_23 = 28423
esriSRProjCS_Pulkovo1942GK_24 = 28424
esriSRProjCS_Pulkovo1942GK_25 = 28425
esriSRProjCS_Pulkovo1942GK_26 = 28426
esriSRProjCS_Pulkovo1942GK_27 = 28427
esriSRProjCS_Pulkovo1942GK_28 = 28428
esriSRProjCS_Pulkovo1942GK_29 = 28429
esriSRProjCS_Pulkovo1942GK_30 = 28430
esriSRProjCS_Pulkovo1942GK_31 = 28431
esriSRProjCS_Pulkovo1942GK_32 = 28432
esriSRProjCS_Pulkovo1942GK_2N = 28462
esriSRProjCS_Pulkovo1942GK_3N = 28463
esriSRProjCS_Pulkovo1942GK_4N = 28464
esriSRProjCS_Pulkovo1942GK_5N = 28465
esriSRProjCS_Pulkovo1942GK_6N = 28466
esriSRProjCS_Pulkovo1942GK_7N = 28467
esriSRProjCS_Pulkovo1942GK_8N = 28468
esriSRProjCS_Pulkovo1942GK_9N = 28469
esriSRProjCS_Pulkovo1942GK_10N = 28470
esriSRProjCS_Pulkovo1942GK_11N = 28471
esriSRProjCS_Pulkovo1942GK_12N = 28472
esriSRProjCS_Pulkovo1942GK_13N = 28473
esriSRProjCS_Pulkovo1942GK_14N = 28474
esriSRProjCS_Pulkovo1942GK_15N = 28475
esriSRProjCS_Pulkovo1942GK_16N = 28476
esriSRProjCS_Pulkovo1942GK_17N = 28477
esriSRProjCS_Pulkovo1942GK_18N = 28478
esriSRProjCS_Pulkovo1942GK_19N = 28479
esriSRProjCS_Pulkovo1942GK_20N = 28480
esriSRProjCS_Pulkovo1942GK_21N = 28481
esriSRProjCS_Pulkovo1942GK_22N = 28482
esriSRProjCS_Pulkovo1942GK_23N = 28483
esriSRProjCS_Pulkovo1942GK_24N = 28484
esriSRProjCS_Pulkovo1942GK_25N = 28485
esriSRProjCS_Pulkovo1942GK_26N = 28486
esriSRProjCS_Pulkovo1942GK_27N = 28487
esriSRProjCS_Pulkovo1942GK_28N = 28488
esriSRProjCS_Pulkovo1942GK_29N = 28489
esriSRProjCS_Pulkovo1942GK_30N = 28490
esriSRProjCS_Pulkovo1942GK_31N = 28491
esriSRProjCS_Pulkovo1942GK_32N = 28492
esriSRProjCS_Pulkovo1995GK_2 = 20002
esriSRProjCS_Pulkovo1995GK_3 = 20003
esriSRProjCS_Pulkovo1995GK_4 = 20004
esriSRProjCS_Pulkovo1995GK_5 = 20005
esriSRProjCS_Pulkovo1995GK_6 = 20006
esriSRProjCS_Pulkovo1995GK_7 = 20007
esriSRProjCS_Pulkovo1995GK_8 = 20008
esriSRProjCS_Pulkovo1995GK_9 = 20009
esriSRProjCS_Pulkovo1995GK_10 = 20010
esriSRProjCS_Pulkovo1995GK_11 = 20011
esriSRProjCS_Pulkovo1995GK_12 = 20012
esriSRProjCS_Pulkovo1995GK_13 = 20013
esriSRProjCS_Pulkovo1995GK_14 = 20014
esriSRProjCS_Pulkovo1995GK_15 = 20015
esriSRProjCS_Pulkovo1995GK_16 = 20016
esriSRProjCS_Pulkovo1995GK_17 = 20017
esriSRProjCS_Pulkovo1995GK_18 = 20018
esriSRProjCS_Pulkovo1995GK_19 = 20019
esriSRProjCS_Pulkovo1995GK_20 = 20020
esriSRProjCS_Pulkovo1995GK_21 = 20021
esriSRProjCS_Pulkovo1995GK_22 = 20022
esriSRProjCS_Pulkovo1995GK_23 = 20023
esriSRProjCS_Pulkovo1995GK_24 = 20024
esriSRProjCS_Pulkovo1995GK_25 = 20025
esriSRProjCS_Pulkovo1995GK_26 = 20026
esriSRProjCS_Pulkovo1995GK_27 = 20027
esriSRProjCS_Pulkovo1995GK_28 = 20028
esriSRProjCS_Pulkovo1995GK_29 = 20029
esriSRProjCS_Pulkovo1995GK_30 = 20030
esriSRProjCS_Pulkovo1995GK_31 = 20031
esriSRProjCS_Pulkovo1995GK_32 = 20032
esriSRProjCS_Pulkovo1995GK_2N = 20062
esriSRProjCS_Pulkovo1995GK_3N = 20063
esriSRProjCS_Pulkovo1995GK_4N = 20064
esriSRProjCS_Pulkovo1995GK_5N = 20065
esriSRProjCS_Pulkovo1995GK_6N = 20066
esriSRProjCS_Pulkovo1995GK_7N = 20067
esriSRProjCS_Pulkovo1995GK_8N = 20068
esriSRProjCS_Pulkovo1995GK_9N = 20069
esriSRProjCS_Pulkovo1995GK_10N = 20070
esriSRProjCS_Pulkovo1995GK_11N = 20071
esriSRProjCS_Pulkovo1995GK_12N = 20072
esriSRProjCS_Pulkovo1995GK_13N = 20073
esriSRProjCS_Pulkovo1995GK_14N = 20074
esriSRProjCS_Pulkovo1995GK_15N = 20075
esriSRProjCS_Pulkovo1995GK_16N = 20076
esriSRProjCS_Pulkovo1995GK_17N = 20077
esriSRProjCS_Pulkovo1995GK_18N = 20078
esriSRProjCS_Pulkovo1995GK_19N = 20079
esriSRProjCS_Pulkovo1995GK_20N = 20080
esriSRProjCS_Pulkovo1995GK_21N = 20081
esriSRProjCS_Pulkovo1995GK_22N = 20082
esriSRProjCS_Pulkovo1995GK_23N = 20083
esriSRProjCS_Pulkovo1995GK_24N = 20084
esriSRProjCS_Pulkovo1995GK_25N = 20085
esriSRProjCS_Pulkovo1995GK_26N = 20086
esriSRProjCS_Pulkovo1995GK_27N = 20087
esriSRProjCS_Pulkovo1995GK_28N = 20088
esriSRProjCS_Pulkovo1995GK_29N = 20089
esriSRProjCS_Pulkovo1995GK_30N = 20090
esriSRProjCS_Pulkovo1995GK_31N = 20091
esriSRProjCS_Pulkovo1995GK_32N = 20092
esriSRProjCS_Beijing1954GK_13 = 21413
esriSRProjCS_Beijing1954GK_14 = 21414
esriSRProjCS_Beijing1954GK_15 = 21415
esriSRProjCS_Beijing1954GK_16 = 21416
esriSRProjCS_Beijing1954GK_17 = 21417
esriSRProjCS_Beijing1954GK_18 = 21418
esriSRProjCS_Beijing1954GK_19 = 21419
esriSRProjCS_Beijing1954GK_20 = 21420
esriSRProjCS_Beijing1954GK_21 = 21421
esriSRProjCS_Beijing1954GK_22 = 21422
esriSRProjCS_Beijing1954GK_23 = 21423
esriSRProjCS_Beijing1954GK_13N = 21473
esriSRProjCS_Beijing1954GK_14N = 21474
esriSRProjCS_Beijing1954GK_15N = 21475
esriSRProjCS_Beijing1954GK_16N = 21476
esriSRProjCS_Beijing1954GK_17N = 21477
esriSRProjCS_Beijing1954GK_18N = 21478
esriSRProjCS_Beijing1954GK_19N = 21479
esriSRProjCS_Beijing1954GK_20N = 21480
esriSRProjCS_Beijing1954GK_21N = 21481
esriSRProjCS_Beijing1954GK_22N = 21482
esriSRProjCS_Beijing1954GK_23N = 21483
esriSRProjCS_ED_1950_UTM_28N = 23028
esriSRProjCS_ED_1950_UTM_29N = 23029
esriSRProjCS_ED_1950_UTM_30N = 23030
esriSRProjCS_ED_1950_UTM_31N = 23031
esriSRProjCS_ED_1950_UTM_32N = 23032
esriSRProjCS_ED_1950_UTM_33N = 23033
esriSRProjCS_ED_1950_UTM_34N = 23034
esriSRProjCS_ED_1950_UTM_35N = 23035
esriSRProjCS_ED_1950_UTM_36N = 23036
esriSRProjCS_ED_1950_UTM_37N = 23037
esriSRProjCS_ED_1950_UTM_38N = 23038
esriSRProjCS_ATS1977UTM_19N = 2219
esriSRProjCS_ATS1977UTM_20N = 2220
esriSRProjCS_Finland_1 = 2391
esriSRProjCS_Finland_2 = 2392
esriSRProjCS_Finland_3 = 2393
esriSRProjCS_Finland_4 = 2394
esriSRProjCS_SouthAmerican1969UTM_18N = 29168
esriSRProjCS_SouthAmerican1969UTM_19N = 29169
esriSRProjCS_SouthAmerican1969UTM_20N = 29170
esriSRProjCS_SouthAmerican1969UTM_21N = 29171
esriSRProjCS_SouthAmerican1969UTM_22N = 29172
esriSRProjCS_SouthAmerican1969UTM_17S = 29187
esriSRProjCS_SouthAmerican1969UTM_18S = 29188
esriSRProjCS_SouthAmerican1969UTM_19S = 29189
esriSRProjCS_SouthAmerican1969UTM_20S = 29190
esriSRProjCS_SouthAmerican1969UTM_21S = 29191
esriSRProjCS_SouthAmerican1969UTM_22S = 29192
esriSRProjCS_SouthAmerican1969UTM_23S = 29193
esriSRProjCS_SouthAmerican1969UTM_24S = 29194
esriSRProjCS_SouthAmerican1969UTM_25S = 29195
esriSRProjCS_AGD1966AMG_48 = 20248
esriSRProjCS_AGD1966AMG_49 = 20249
esriSRProjCS_AGD1966AMG_50 = 20250
esriSRProjCS_AGD1966AMG_51 = 20251
esriSRProjCS_AGD1966AMG_52 = 20252
esriSRProjCS_AGD1966AMG_53 = 20253
esriSRProjCS_AGD1966AMG_54 = 20254
esriSRProjCS_AGD1966AMG_55 = 20255
esriSRProjCS_AGD1966AMG_56 = 20256
esriSRProjCS_AGD1966AMG_57 = 20257
esriSRProjCS_AGD1966AMG_58 = 20258
esriSRProjCS_AGD1984AMG_48 = 20348
esriSRProjCS_AGD1984AMG_49 = 20349
esriSRProjCS_AGD1984AMG_50 = 20350
esriSRProjCS_AGD1984AMG_51 = 20351
esriSRProjCS_AGD1984AMG_52 = 20352
esriSRProjCS_AGD1984AMG_53 = 20353
esriSRProjCS_AGD1984AMG_54 = 20354
esriSRProjCS_AGD1984AMG_55 = 20355
esriSRProjCS_AGD1984AMG_56 = 20356
esriSRProjCS_AGD1984AMG_57 = 20357
esriSRProjCS_AGD1984AMG_58 = 20358
esriSRProjCS_GDA1994MGA_48 = 28348
esriSRProjCS_GDA1994MGA_49 = 28349
esriSRProjCS_GDA1994MGA_50 = 28350
esriSRProjCS_GDA1994MGA_51 = 28351
esriSRProjCS_GDA1994MGA_52 = 28352
esriSRProjCS_GDA1994MGA_53 = 28353
esriSRProjCS_GDA1994MGA_54 = 28354
esriSRProjCS_GDA1994MGA_55 = 28355
esriSRProjCS_GDA1994MGA_56 = 28356
esriSRProjCS_GDA1994MGA_57 = 28357
esriSRProjCS_GDA1994MGA_58 = 28358
esriSRProjCS_NAD1927SPCS_ALEast = 26729
esriSRProjCS_NAD1927SPCS_ALWest = 26730
esriSRProjCS_NAD1927SPCS_AK1 = 26731
esriSRProjCS_NAD1927SPCS_AK2 = 26732
esriSRProjCS_NAD1927SPCS_AK3 = 26733
esriSRProjCS_NAD1927SPCS_AK4 = 26734
esriSRProjCS_NAD1927SPCS_AK5 = 26735
esriSRProjCS_NAD1927SPCS_AK6 = 26736
esriSRProjCS_NAD1927SPCS_AK7 = 26737
esriSRProjCS_NAD1927SPCS_AK8 = 26738
esriSRProjCS_NAD1927SPCS_AK9 = 26739
esriSRProjCS_NAD1927SPCS_AK10 = 26740
esriSRProjCS_NAD1927SPCS_AZEast = 26748
esriSRProjCS_NAD1927SPCS_AZCentral = 26749
esriSRProjCS_NAD1927SPCS_AZWest = 26750
esriSRProjCS_NAD1927SPCS_ARNorth = 26751
esriSRProjCS_NAD1927SPCS_ARSouth = 26752
esriSRProjCS_NAD1927SPCS_CAI = 26741
esriSRProjCS_NAD1927SPCS_CAII = 26742
esriSRProjCS_NAD1927SPCS_CAIII = 26743
esriSRProjCS_NAD1927SPCS_CAIV = 26744
esriSRProjCS_NAD1927SPCS_CAV = 26745
esriSRProjCS_NAD1927SPCS_CAVI = 26746
esriSRProjCS_NAD1927SPCS_CAVII = 26799
esriSRProjCS_NAD1927SPCS_CONorth = 26753
esriSRProjCS_NAD1927SPCS_COCentral = 26754
esriSRProjCS_NAD1927SPCS_COSouth = 26755
esriSRProjCS_NAD1927SPCS_CT = 26756
esriSRProjCS_NAD1927SPCS_DE = 26757
esriSRProjCS_NAD1927SPCS_FLEast = 26758
esriSRProjCS_NAD1927SPCS_FLWest = 26759
esriSRProjCS_NAD1927SPCS_FLNorth = 26760
esriSRProjCS_NAD1927SPCS_GAEast = 26766
esriSRProjCS_NAD1927SPCS_GAWest = 26767
esriSRProjCS_NAD1927SPCS_HI1 = 26761
esriSRProjCS_NAD1927SPCS_HI2 = 26762
esriSRProjCS_NAD1927SPCS_HI3 = 26763
esriSRProjCS_NAD1927SPCS_HI4 = 26764
esriSRProjCS_NAD1927SPCS_HI5 = 26765
esriSRProjCS_NAD1927SPCS_IDEast = 26768
esriSRProjCS_NAD1927SPCS_IDCentral = 26769
esriSRProjCS_NAD1927SPCS_IDWest = 26770
esriSRProjCS_NAD1927SPCS_ILEast = 26771
esriSRProjCS_NAD1927SPCS_ILWest = 26772
esriSRProjCS_NAD1927SPCS_INEast = 26773
esriSRProjCS_NAD1927SPCS_INWest = 26774
esriSRProjCS_NAD1927SPCS_IANorth = 26775
esriSRProjCS_NAD1927SPCS_IASouth = 26776
esriSRProjCS_NAD1927SPCS_KSNorth = 26777
esriSRProjCS_NAD1927SPCS_KSSouth = 26778
esriSRProjCS_NAD1927SPCS_KYNorth = 26779
esriSRProjCS_NAD1927SPCS_KYSouth = 26780
esriSRProjCS_NAD1927SPCS_LANorth = 26781
esriSRProjCS_NAD1927SPCS_LASouth = 26782
esriSRProjCS_NAD1927SPCS_MEEast = 26783
esriSRProjCS_NAD1927SPCS_MEWest = 26784
esriSRProjCS_NAD1927SPCS_MD = 26785
esriSRProjCS_NAD1927SPCS_MAMainland = 26786
esriSRProjCS_NAD1927SPCS_MAIsland = 26787
esriSRProjCS_NAD1927SPCS_MINorth = 26788
esriSRProjCS_NAD1927SPCS_MICentral = 26789
esriSRProjCS_NAD1927SPCS_MISouth = 26790
esriSRProjCS_NAD1927SPCS_MNNorth = 26791
esriSRProjCS_NAD1927SPCS_MNCentral = 26792
esriSRProjCS_NAD1927SPCS_MNSouth = 26793
esriSRProjCS_NAD1927SPCS_MSEast = 26794
esriSRProjCS_NAD1927SPCS_MSWest = 26795
esriSRProjCS_NAD1927SPCS_MOEast = 26796
esriSRProjCS_NAD1927SPCS_MOCentral = 26797
esriSRProjCS_NAD1927SPCS_MOWest = 26798
esriSRProjCS_NAD1927SPCS_MTNorth = 32001
esriSRProjCS_NAD1927SPCS_MTCentral = 32002
esriSRProjCS_NAD1927SPCS_MTSouth = 32003
esriSRProjCS_NAD1927SPCS_NENorth = 32005
esriSRProjCS_NAD1927SPCS_NESouth = 32006
esriSRProjCS_NAD1927SPCS_NVEast = 32007
esriSRProjCS_NAD1927SPCS_NVCentral = 32008
esriSRProjCS_NAD1927SPCS_NVWest = 32009
esriSRProjCS_NAD1927SPCS_NH = 32010
esriSRProjCS_NAD1927SPCS_NJ = 32011
esriSRProjCS_NAD1927SPCS_NMEast = 32012
esriSRProjCS_NAD1927SPCS_NMCentral = 32013
esriSRProjCS_NAD1927SPCS_NMWest = 32014
esriSRProjCS_NAD1927SPCS_NYEast = 32015
esriSRProjCS_NAD1927SPCS_NYCentral = 32016
esriSRProjCS_NAD1927SPCS_NYWest = 32017
esriSRProjCS_NAD1927SPCS_NYLongIsland = 4456
esriSRProjCS_NAD1927SPCS_NC = 32019
esriSRProjCS_NAD1927SPCS_NDNorth = 32020
esriSRProjCS_NAD1927SPCS_NDSouth = 32021
esriSRProjCS_NAD1927SPCS_OHNorth = 32022
esriSRProjCS_NAD1927SPCS_OHSouth = 32023
esriSRProjCS_NAD1927SPCS_OKNorth = 32024
esriSRProjCS_NAD1927SPCS_OKSouth = 32025
esriSRProjCS_NAD1927SPCS_ORNorth = 32026
esriSRProjCS_NAD1927SPCS_ORSouth = 32027
esriSRProjCS_NAD1927SPCS_PANorth = 32028
esriSRProjCS_NAD1927SPCS_PASouth = 4455
esriSRProjCS_NAD1927SPCS_RI = 32030
esriSRProjCS_NAD1927SPCS_SCNorth = 32031
esriSRProjCS_NAD1927SPCS_SCSouth = 32033
esriSRProjCS_NAD1927SPCS_SDNorth = 32034
esriSRProjCS_NAD1927SPCS_SDSouth = 32035
esriSRProjCS_NAD1927SPCS_TN = 2204
esriSRProjCS_NAD1927SPCS_TXNorth = 32037
esriSRProjCS_NAD1927SPCS_TXNorthCentral = 32038
esriSRProjCS_NAD1927SPCS_TXCentral = 32039
esriSRProjCS_NAD1927SPCS_TXSouthCentral = 32040
esriSRProjCS_NAD1927SPCS_TXSouth = 32041
esriSRProjCS_NAD1927SPCS_UTNorth = 32042
esriSRProjCS_NAD1927SPCS_UTCentral = 32043
esriSRProjCS_NAD1927SPCS_UTSouth = 32044
esriSRProjCS_NAD1927SPCS_VT = 32045
esriSRProjCS_NAD1927SPCS_VANorth = 32046
esriSRProjCS_NAD1927SPCS_VASouth = 32047
esriSRProjCS_NAD1927SPCS_WANorth = 32048
esriSRProjCS_NAD1927SPCS_WASouth = 32049
esriSRProjCS_NAD1927SPCS_WVNorth = 32050
esriSRProjCS_NAD1927SPCS_WVSouth = 32051
esriSRProjCS_NAD1927SPCS_WINorth = 32052
esriSRProjCS_NAD1927SPCS_WICentral = 32053
esriSRProjCS_NAD1927SPCS_WISouth = 32054
esriSRProjCS_NAD1927SPCS_WYEast = 32055
esriSRProjCS_NAD1927SPCS_WYEastCentral = 32056
esriSRProjCS_NAD1927SPCS_WYWestCentral = 32057
esriSRProjCS_NAD1927SPCS_WYWest = 32058
esriSRProjCS_NAD1927SPCS_PuertoRico = 32059
esriSRProjCS_NAD1927SPCS_StCroix = 32060
esriSRProjCS_NAD1927SPCS_Guam = 65061
esriSRProjCS_NAD1983SPCS_ALEast = 26929
esriSRProjCS_NAD1983SPCS_ALWest = 26930
esriSRProjCS_NAD1983SPCS_AK1 = 26931
esriSRProjCS_NAD1983SPCS_AK2 = 26932
esriSRProjCS_NAD1983SPCS_AK3 = 26933
esriSRProjCS_NAD1983SPCS_AK4 = 26934
esriSRProjCS_NAD1983SPCS_AK5 = 26935
esriSRProjCS_NAD1983SPCS_AK6 = 26936
esriSRProjCS_NAD1983SPCS_AK7 = 26937
esriSRProjCS_NAD1983SPCS_AK8 = 26938
esriSRProjCS_NAD1983SPCS_AK9 = 26939
esriSRProjCS_NAD1983SPCS_AK10 = 26940
esriSRProjCS_NAD1983SPCS_AZEast = 26948
esriSRProjCS_NAD1983SPCS_AZCentral = 26949
esriSRProjCS_NAD1983SPCS_AZWest = 26950
esriSRProjCS_NAD1983SPCS_AKNorth = 26951
esriSRProjCS_NAD1983SPCS_AKSouth = 26952
esriSRProjCS_NAD1983SPCS_CAI = 26941
esriSRProjCS_NAD1983SPCS_CAII = 26942
esriSRProjCS_NAD1983SPCS_CAIII = 26943
esriSRProjCS_NAD1983SPCS_CAIV = 26944
esriSRProjCS_NAD1983SPCS_CAV = 26945
esriSRProjCS_NAD1983SPCS_CAVI = 26946
esriSRProjCS_NAD1983SPCS_CONorth = 26953
esriSRProjCS_NAD1983SPCS_COCentral = 26954
esriSRProjCS_NAD1983SPCS_COSouth = 26955
esriSRProjCS_NAD1983SPCS_CT = 26956
esriSRProjCS_NAD1983SPCS_DE = 26957
esriSRProjCS_NAD1983SPCS_FLEast = 26958
esriSRProjCS_NAD1983SPCS_FLWest = 26959
esriSRProjCS_NAD1983SPCS_FLNorth = 26960
esriSRProjCS_NAD1983SPCS_GAEast = 26966
esriSRProjCS_NAD1983SPCS_GAWest = 26967
esriSRProjCS_NAD1983SPCS_HI_1 = 26961
esriSRProjCS_NAD1983SPCS_HI_2 = 26962
esriSRProjCS_NAD1983SPCS_HI_3 = 26963
esriSRProjCS_NAD1983SPCS_HI_4 = 26964
esriSRProjCS_NAD1983SPCS_HI_5 = 26965
esriSRProjCS_NAD1983SPCS_IDEast = 26968
esriSRProjCS_NAD1983SPCS_IDCentral = 26969
esriSRProjCS_NAD1983SPCS_IDWest = 26970
esriSRProjCS_NAD1983SPCS_ILEast = 26971
esriSRProjCS_NAD1983SPCS_ILWest = 26972
esriSRProjCS_NAD1983SPCS_INEast = 26973
esriSRProjCS_NAD1983SPCS_INWest = 26974
esriSRProjCS_NAD1983SPCS_IANorth = 26975
esriSRProjCS_NAD1983SPCS_IASouth = 26976
esriSRProjCS_NAD1983SPCS_KSNorth = 26977
esriSRProjCS_NAD1983SPCS_KSSouth = 26978
esriSRProjCS_NAD1983SPCS_KYNorth = 2205
esriSRProjCS_NAD1983SPCS_KYSouth = 26980
esriSRProjCS_NAD1983SPCS_LANorth = 26981
esriSRProjCS_NAD1983SPCS_LASouth = 26982
esriSRProjCS_NAD1983SPCS_MEEast = 26983
esriSRProjCS_NAD1983SPCS_MEWest = 26984
esriSRProjCS_NAD1983SPCS_MD = 26985
esriSRProjCS_NAD1983SPCS_MAMainland = 26986
esriSRProjCS_NAD1983SPCS_MAIsland = 26987
esriSRProjCS_NAD1983SPCS_MINorth = 26988
esriSRProjCS_NAD1983SPCS_MICentral = 26989
esriSRProjCS_NAD1983SPCS_MISouth = 26990
esriSRProjCS_NAD1983SPCS_MNNorth = 26991
esriSRProjCS_NAD1983SPCS_MNCentral = 26992
esriSRProjCS_NAD1983SPCS_MNSouth = 26993
esriSRProjCS_NAD1983SPCS_MSEast = 26994
esriSRProjCS_NAD1983SPCS_MSWest = 26995
esriSRProjCS_NAD1983SPCS_MOEast = 26996
esriSRProjCS_NAD1983SPCS_MOCentral = 26997
esriSRProjCS_NAD1983SPCS_MOWest = 26998
esriSRProjCS_NAD1983SPCS_MT = 32100
esriSRProjCS_NAD1983SPCS_NE = 32104
esriSRProjCS_NAD1983SPCS_NVEast = 32107
esriSRProjCS_NAD1983SPCS_NVCentral = 32108
esriSRProjCS_NAD1983SPCS_NVWest = 32109
esriSRProjCS_NAD1983SPCS_NH = 32110
esriSRProjCS_NAD1983SPCS_NJ = 32111
esriSRProjCS_NAD1983SPCS_NMEast = 32112
esriSRProjCS_NAD1983SPCS_NMCentral = 32113
esriSRProjCS_NAD1983SPCS_NMWest = 32114
esriSRProjCS_NAD1983SPCS_NYEast = 32115
esriSRProjCS_NAD1983SPCS_NYCentral = 32116
esriSRProjCS_NAD1983SPCS_NYWest = 32117
esriSRProjCS_NAD1983SPCS_NYLongIsland = 32118
esriSRProjCS_NAD1983SPCS_NC = 32119
esriSRProjCS_NAD1983SPCS_NDNorth = 32120
esriSRProjCS_NAD1983SPCS_NDSouth = 32121
esriSRProjCS_NAD1983SPCS_OHNorth = 32122
esriSRProjCS_NAD1983SPCS_OHSouth = 32123
esriSRProjCS_NAD1983SPCS_OKNorth = 32124
esriSRProjCS_NAD1983SPCS_OKSouth = 32125
esriSRProjCS_NAD1983SPCS_ORNorth = 32126
esriSRProjCS_NAD1983SPCS_ORSouth = 32127
esriSRProjCS_NAD1983SPCS_PANorth = 32128
esriSRProjCS_NAD1983SPCS_PASouth = 32129
esriSRProjCS_NAD1983SPCS_RI = 32130
esriSRProjCS_NAD1983SPCS_SC = 32133
esriSRProjCS_NAD1983SPCS_SDNorth = 32134
esriSRProjCS_NAD1983SPCS_SDSouth = 32135
esriSRProjCS_NAD1983SPCS_TN = 32136
esriSRProjCS_NAD1983SPCS_TXNorth = 32137
esriSRProjCS_NAD1983SPCS_TXNorthCentral = 32138
esriSRProjCS_NAD1983SPCS_TXCentral = 32139
esriSRProjCS_NAD1983SPCS_TXSouthCentral = 32140
esriSRProjCS_NAD1983SPCS_TXSouth = 32141
esriSRProjCS_NAD1983SPCS_UTNorth = 32142
esriSRProjCS_NAD1983SPCS_UTCentral = 32143
esriSRProjCS_NAD1983SPCS_UTSouth = 32144
esriSRProjCS_NAD1983SPCS_VT = 32145
esriSRProjCS_NAD1983SPCS_VANorth = 32146
esriSRProjCS_NAD1983SPCS_VASouth = 32147
esriSRProjCS_NAD1983SPCS_WANorth = 32148
esriSRProjCS_NAD1983SPCS_WASouth = 32149
esriSRProjCS_NAD1983SPCS_WVNorth = 32150
esriSRProjCS_NAD1983SPCS_WVSouth = 32151
esriSRProjCS_NAD1983SPCS_WINorth = 32152
esriSRProjCS_NAD1983SPCS_WICentral = 32153
esriSRProjCS_NAD1983SPCS_WISouth = 32154
esriSRProjCS_NAD1983SPCS_WYEast = 32155
esriSRProjCS_NAD1983SPCS_WYEastCentral = 32156
esriSRProjCS_NAD1983SPCS_WYWestCentral = 32157
esriSRProjCS_NAD1983SPCS_WYWest = 32158
esriSRProjCS_NAD1983SPCS_PRStCroix = 32161
esriSRProjCS_NAD1983SPCS_Guam = 65161
esriSRProjCS_NADMichSPCS_MINorth = 26811
esriSRProjCS_NADMichSPCS_MICentral = 26812
esriSRProjCS_NADMichSPCS_MISouth = 26813
esriSRProjCS_NADMichSPCS_MIEastOld = 26801
esriSRProjCS_NADMichSPCS_MICentralOld = 26802
esriSRProjCS_NADMichSPCS_MIWestOld = 26803
esriSRProjCS_NAD1983HARNSPCS_ALEast = 2759
esriSRProjCS_NAD1983HARNSPCS_ALWest = 2760
esriSRProjCS_NAD1983HARNSPCS_AZEast = 2761
esriSRProjCS_NAD1983HARNSPCS_AZCentral = 2762
esriSRProjCS_NAD1983HARNSPCS_AZWest = 2763
esriSRProjCS_NAD1983HARNSPCS_CAI = 2766
esriSRProjCS_NAD1983HARNSPCS_CAII = 2767
esriSRProjCS_NAD1983HARNSPCS_CAIII = 2768
esriSRProjCS_NAD1983HARNSPCS_CAIV = 2769
esriSRProjCS_NAD1983HARNSPCS_CAV = 2770
esriSRProjCS_NAD1983HARNSPCS_CAVI = 2771
esriSRProjCS_NAD1983HARNSPCS_CONorth = 2772
esriSRProjCS_NAD1983HARNSPCS_COCentral = 2773
esriSRProjCS_NAD1983HARNSPCS_COSouth = 2774
esriSRProjCS_NAD1983HARNSPCS_CT = 2775
esriSRProjCS_NAD1983HARNSPCS_DE = 2776
esriSRProjCS_NAD1983HARNSPCS_FLEast = 2777
esriSRProjCS_NAD1983HARNSPCS_FLWest = 2778
esriSRProjCS_NAD1983HARNSPCS_FLNorth = 2779
esriSRProjCS_NAD1983HARNSPCS_GAEast = 2780
esriSRProjCS_NAD1983HARNSPCS_GAWest = 2781
esriSRProjCS_NAD1983HARNSPCS_HI_1 = 2782
esriSRProjCS_NAD1983HARNSPCS_HI_2 = 2783
esriSRProjCS_NAD1983HARNSPCS_HI_3 = 2784
esriSRProjCS_NAD1983HARNSPCS_HI_4 = 2785
esriSRProjCS_NAD1983HARNSPCS_HI_5 = 2786
esriSRProjCS_NAD1983HARNSPCS_IDEast = 2787
esriSRProjCS_NAD1983HARNSPCS_IDCentral = 2788
esriSRProjCS_NAD1983HARNSPCS_IDWest = 2789
esriSRProjCS_NAD1983HARNSPCS_ILWest = 2791
esriSRProjCS_NAD1983HARNSPCS_ILEast = 2790
esriSRProjCS_NAD1983HARNSPCS_INWest = 2793
esriSRProjCS_NAD1983HARNSPCS_INEast = 2792
esriSRProjCS_NAD1983HARNSPCS_KSNorth = 2796
esriSRProjCS_NAD1983HARNSPCS_KSSouth = 2797
esriSRProjCS_NAD1983HARNSPCS_KYNorth = 2798
esriSRProjCS_NAD1983HARNSPCS_KYSouth = 2799
esriSRProjCS_NAD1983HARNSPCS_LANorth = 2800
esriSRProjCS_NAD1983HARNSPCS_LASouth = 2801
esriSRProjCS_NAD1983HARNSPCS_MEEast = 2802
esriSRProjCS_NAD1983HARNSPCS_MEWest = 2803
esriSRProjCS_NAD1983HARNSPCS_MD = 2804
esriSRProjCS_NAD1983HARNSPCS_MAMainland = 2805
esriSRProjCS_NAD1983HARNSPCS_MAIsland = 2806
esriSRProjCS_NAD1983HARNSPCS_MINorth = 2807
esriSRProjCS_NAD1983HARNSPCS_MICentral = 2808
esriSRProjCS_NAD1983HARNSPCS_MISouth = 2809
esriSRProjCS_NAD1983HARNSPCS_MSEast = 2813
esriSRProjCS_NAD1983HARNSPCS_MSWest = 2814
esriSRProjCS_NAD1983HARNSPCS_MT = 2818
esriSRProjCS_NAD1983HARNSPCS_NE = 2819
esriSRProjCS_NAD1983HARNSPCS_NVEast = 2820
esriSRProjCS_NAD1983HARNSPCS_NVCentral = 2821
esriSRProjCS_NAD1983HARNSPCS_NVWest = 2822
esriSRProjCS_NAD1983HARNSPCS_NH = 2823
esriSRProjCS_NAD1983HARNSPCS_NMEast = 2825
esriSRProjCS_NAD1983HARNSPCS_NMCentral = 2826
esriSRProjCS_NAD1983HARNSPCS_NMWest = 2827
esriSRProjCS_NAD1983HARNSPCS_NYEast = 2828
esriSRProjCS_NAD1983HARNSPCS_NYCentral = 2829
esriSRProjCS_NAD1983HARNSPCS_NYWest = 2830
esriSRProjCS_NAD1983HARNSPCS_NYLongIsland = 2831
esriSRProjCS_NAD1983HARNSPCS_NDNorth = 2832
esriSRProjCS_NAD1983HARNSPCS_NDSouth = 2833
esriSRProjCS_NAD1983HARNSPCS_OHNorth = 2834
esriSRProjCS_NAD1983HARNSPCS_OHSouth = 2835
esriSRProjCS_NAD1983HARNSPCS_OKNorth = 2836
esriSRProjCS_NAD1983HARNSPCS_OKSouth = 2837
esriSRProjCS_NAD1983HARNSPCS_ORNorth = 2838
esriSRProjCS_NAD1983HARNSPCS_ORSouth = 2839
esriSRProjCS_NAD1983HARNSPCS_RI = 2840
esriSRProjCS_NAD1983HARNSPCS_SDNorth = 2841
esriSRProjCS_NAD1983HARNSPCS_SDSouth = 2842
esriSRProjCS_NAD1983HARNSPCS_TN = 2843
esriSRProjCS_NAD1983HARNSPCS_TXNorth = 2844
esriSRProjCS_NAD1983HARNSPCS_TXNorthCentral = 2845
esriSRProjCS_NAD1983HARNSPCS_TXCentral = 2846
esriSRProjCS_NAD1983HARNSPCS_TXSouthCentral = 2847
esriSRProjCS_NAD1983HARNSPCS_TXSouth = 2848
esriSRProjCS_NAD1983HARNSPCS_UTNorth = 2849
esriSRProjCS_NAD1983HARNSPCS_UTCentral = 2850
esriSRProjCS_NAD1983HARNSPCS_UTSouth = 2851
esriSRProjCS_NAD1983HARNSPCS_VT = 2852
esriSRProjCS_NAD1983HARNSPCS_VANorth = 2853
esriSRProjCS_NAD1983HARNSPCS_VASouth = 2854
esriSRProjCS_NAD1983HARNSPCS_WANorth = 2855
esriSRProjCS_NAD1983HARNSPCS_WASouth = 2856
esriSRProjCS_NAD1983HARNSPCS_WVNorth = 2857
esriSRProjCS_NAD1983HARNSPCS_WVSouth = 2858
esriSRProjCS_NAD1983HARNSPCS_WINorth = 2859
esriSRProjCS_NAD1983HARNSPCS_WICentral = 2860
esriSRProjCS_NAD1983HARNSPCS_WISouth = 2861
esriSRProjCS_NAD1983HARNSPCS_WYEast = 2862
esriSRProjCS_NAD1983HARNSPCS_WYEastCentral = 2863
esriSRProjCS_NAD1983HARNSPCS_WYWestCentral = 2864
esriSRProjCS_NAD1983HARNSPCS_WYWest = 2865
esriSRProjCS_NAD1983HARNSPCS_PRStCroix = 2866
esriSRProjCS_NAD1983SPCS_ALEastFT = 102629
esriSRProjCS_NAD1983SPCS_ALWestFT = 102630
esriSRProjCS_NAD1983SPCS_AK1FT = 102631
esriSRProjCS_NAD1983SPCS_AK2FT = 102632
esriSRProjCS_NAD1983SPCS_AK3FT = 102633
esriSRProjCS_NAD1983SPCS_AK4FT = 102634
esriSRProjCS_NAD1983SPCS_AK5FT = 102635
esriSRProjCS_NAD1983SPCS_AK6FT = 102636
esriSRProjCS_NAD1983SPCS_AK7FT = 102637
esriSRProjCS_NAD1983SPCS_AK8FT = 102638
esriSRProjCS_NAD1983SPCS_AK9FT = 102639
esriSRProjCS_NAD1983SPCS_AK10FT = 102640
esriSRProjCS_NAD1983SPCS_AZEastFT = 102648
esriSRProjCS_NAD1983SPCS_AZCentralFT = 102649
esriSRProjCS_NAD1983SPCS_AZWestFT = 102650
esriSRProjCS_NAD1983SPCS_ARNorthFT = 3433
esriSRProjCS_NAD1983SPCS_ARSouthFT = 3434
esriSRProjCS_NAD1983SPCS_CAIFT = 2225
esriSRProjCS_NAD1983SPCS_CAIIFT = 2226
esriSRProjCS_NAD1983SPCS_CAIIIFT = 2227
esriSRProjCS_NAD1983SPCS_CAIVFT = 2228
esriSRProjCS_NAD1983SPCS_CAVFT = 2229
esriSRProjCS_NAD1983SPCS_CAVIFT = 2230
esriSRProjCS_NAD1983SPCS_CONorthFT = 2231
esriSRProjCS_NAD1983SPCS_COCentFT = 2232
esriSRProjCS_NAD1983SPCS_COSouthFT = 2233
esriSRProjCS_NAD1983SPCS_CTFT = 2234
esriSRProjCS_NAD1983SPCS_DEFT = 2235
esriSRProjCS_NAD1983SPCS_FLEastFT = 2236
esriSRProjCS_NAD1983SPCS_FLWestFT = 2237
esriSRProjCS_NAD1983SPCS_FLNorthFT = 2238
esriSRProjCS_NAD1983SPCS_GAEastFT = 2239
esriSRProjCS_NAD1983SPCS_GAWestFT = 2240
esriSRProjCS_NAD1983SPCS_HI_1FT = 102661
esriSRProjCS_NAD1983SPCS_HI_2FT = 102662
esriSRProjCS_NAD1983SPCS_HI_3FT = 3759
esriSRProjCS_NAD1983SPCS_HI_4FT = 102664
esriSRProjCS_NAD1983SPCS_HI_5FT = 102665
esriSRProjCS_NAD1983SPCS_IDEastFT = 2241
esriSRProjCS_NAD1983SPCS_IDCentralFT = 2242
esriSRProjCS_NAD1983SPCS_IDWestFT = 2243
esriSRProjCS_NAD1983SPCS_ILEastFT = 3435
esriSRProjCS_NAD1983SPCS_ILWestFT = 3436
esriSRProjCS_NAD1983SPCS_INEastFT = 2965
esriSRProjCS_NAD1983SPCS_INWestFT = 2966
esriSRProjCS_NAD1983SPCS_IANorthFT = 3417
esriSRProjCS_NAD1983SPCS_IASouthFT = 3418
esriSRProjCS_NAD1983SPCS_KSNorthFT = 3419
esriSRProjCS_NAD1983SPCS_KSSouthFT = 3420
esriSRProjCS_NAD1983SPCS_KYNorthFT = 2246
esriSRProjCS_NAD1983SPCS_KYSouthFT = 2247
esriSRProjCS_NAD1983SPCS_LANorthFT = 3451
esriSRProjCS_NAD1983SPCS_LASouthFT = 3452
esriSRProjCS_NAD1983SPCS_MEEastFT = 26847
esriSRProjCS_NAD1983SPCS_MEWestFT = 26848
esriSRProjCS_NAD1983SPCS_MDFT = 2248
esriSRProjCS_NAD1983SPCS_MAMainlandFT = 2249
esriSRProjCS_NAD1983SPCS_MAIslandFT = 2250
esriSRProjCS_NAD1983SPCS_MINorthFT = 102688
esriSRProjCS_NAD1983SPCS_MICentralFT = 102689
esriSRProjCS_NAD1983SPCS_MISouthFT = 102690
esriSRProjCS_NAD1983SPCS_MNNorthFT = 26849
esriSRProjCS_NAD1983SPCS_MNCentralFT = 26850
esriSRProjCS_NAD1983SPCS_MNSouthFT = 26851
esriSRProjCS_NAD1983SPCS_MSEastFT = 2254
esriSRProjCS_NAD1983SPCS_MSWestFT = 2255
esriSRProjCS_NAD1983SPCS_MOEastFT = 102696
esriSRProjCS_NAD1983SPCS_MOCentralFT = 102697
esriSRProjCS_NAD1983SPCS_MOWestFT = 102698
esriSRProjCS_NAD1983SPCS_MTFT = 102700
esriSRProjCS_NAD1983SPCS_NEFT = 26852
esriSRProjCS_NAD1983SPCS_NVEastFT = 3421
esriSRProjCS_NAD1983SPCS_NVCentralFT = 3422
esriSRProjCS_NAD1983SPCS_NVWestFT = 3423
esriSRProjCS_NAD1983SPCS_NHFT = 3437
esriSRProjCS_NAD1983SPCS_NJFT = 3424
esriSRProjCS_NAD1983SPCS_NMEastFT = 2257
esriSRProjCS_NAD1983SPCS_NMCentralFT = 2258
esriSRProjCS_NAD1983SPCS_NMWestFT = 2259
esriSRProjCS_NAD1983SPCS_NYEastFT = 2260
esriSRProjCS_NAD1983SPCS_NYCentralFT = 2261
esriSRProjCS_NAD1983SPCS_NYWestFT = 2262
esriSRProjCS_NAD1983SPCS_NYLongIslFT = 2263
esriSRProjCS_NAD1983SPCS_NCFT = 2264
esriSRProjCS_NAD1983SPCS_NDNorthFT = 102720
esriSRProjCS_NAD1983SPCS_NDSouthFT = 102721
esriSRProjCS_NAD1983SPCS_OHNorthFT = 3734
esriSRProjCS_NAD1983SPCS_OHSouthFT = 3735
esriSRProjCS_NAD1983SPCS_OKNorthFT = 2267
esriSRProjCS_NAD1983SPCS_OKSouthFT = 2268
esriSRProjCS_NAD1983SPCS_ORNorthFT = 102726
esriSRProjCS_NAD1983SPCS_ORSouthFT = 102727
esriSRProjCS_NAD1983SPCS_PANorthFT = 2271
esriSRProjCS_NAD1983SPCS_PASouthFT = 2272
esriSRProjCS_NAD1983SPCS_RIFT = 3438
esriSRProjCS_NAD1983SPCS_SCFT = 102733
esriSRProjCS_NAD1983SPCS_SDNorthFT = 4457
esriSRProjCS_NAD1983SPCS_SDSouthFT = 3455
esriSRProjCS_NAD1983SPCS_TNFT = 2274
esriSRProjCS_NAD1983SPCS_TXNorthFT = 2275
esriSRProjCS_NAD1983SPCS_TXNorthCentFT = 2276
esriSRProjCS_NAD1983SPCS_TXCentralFT = 2277
esriSRProjCS_NAD1983SPCS_TXSouthCentFT = 2278
esriSRProjCS_NAD1983SPCS_TXSouthFT = 2279
esriSRProjCS_NAD1983SPCS_UTNorthFT = 3560
esriSRProjCS_NAD1983SPCS_UTCentralFT = 3566
esriSRProjCS_NAD1983SPCS_UTSouthFT = 3567
esriSRProjCS_NAD1983SPCS_VTFT = 5646
esriSRProjCS_NAD1983SPCS_VANorthFT = 2283
esriSRProjCS_NAD1983SPCS_VASouthFT = 2284
esriSRProjCS_NAD1983SPCS_WANorthFT = 2285
esriSRProjCS_NAD1983SPCS_WASouthFT = 2286
esriSRProjCS_NAD1983SPCS_WVNorthFT = 26853
esriSRProjCS_NAD1983SPCS_WVSouthFT = 26854
esriSRProjCS_NAD1983SPCS_WINorthFT = 2287
esriSRProjCS_NAD1983SPCS_WICentralFT = 2288
esriSRProjCS_NAD1983SPCS_WISouthFT = 2289
esriSRProjCS_NAD1983SPCS_WYEastFT = 3736
esriSRProjCS_NAD1983SPCS_WYEastCentralFT = 3737
esriSRProjCS_NAD1983SPCS_WYWestCentralFT = 3738
esriSRProjCS_NAD1983SPCS_WYWestFT = 3739
esriSRProjCS_NAD1983SPCS_PRStCroixFT = 102761
esriSRProjCS_NAD1983SPCS_GuamFT = 102766
esriSRProjCS_AdindanUTM_37N = 20137
esriSRProjCS_AdindanUTM_38N = 20138
esriSRProjCS_AfgooyeUTM_38N = 20538
esriSRProjCS_AfgooyeUTM_39N = 20539
esriSRProjCS_AinElAbd1970UTM_37N = 20437
esriSRProjCS_AinElAbd1970UTM_38N = 20438
esriSRProjCS_AinElAbd1970UTM_39N = 20439
esriSRProjCS_AratuUTM_22S = 20822
esriSRProjCS_AratuUTM_23S = 20823
esriSRProjCS_AratuUTM_24S = 20824
esriSRProjCS_BataviaUTM_48S = 21148
esriSRProjCS_BataviaUTM_49S = 21149
esriSRProjCS_BataviaUTM_50S = 21150
esriSRProjCS_BogotaUTM_17N = 21817
esriSRProjCS_BogotaUTM_18N = 21818
esriSRProjCS_CamacupaUTM_32S = 22032
esriSRProjCS_CamacupaUTM_33S = 22033
esriSRProjCS_CarthageUTM_32N = 22332
esriSRProjCS_CorregoAlegreUTM_23S = 22523
esriSRProjCS_CorregoAlegreUTM_24S = 22524
esriSRProjCS_Datum73UTM_29N = 27429
esriSRProjCS_DoualaUTM_32N = 22832
esriSRProjCS_FahudUTM_39N = 23239
esriSRProjCS_FahudUTM_40N = 23240
esriSRProjCS_GarouaUTM_33N = 2312
esriSRProjCS_GreekGrid = 2100
esriSRProjCS_Indonesia1974UTM_46N = 23846
esriSRProjCS_Indonesia1974UTM_47N = 23847
esriSRProjCS_Indonesia1974UTM_48N = 23848
esriSRProjCS_Indonesia1974UTM_49N = 23849
esriSRProjCS_Indonesia1974UTM_50N = 23850
esriSRProjCS_Indonesia1974UTM_51N = 23851
esriSRProjCS_Indonesia1974UTM_52N = 23852
esriSRProjCS_Indonesia1974UTM_53N = 23853
esriSRProjCS_Indonesia1974UTM_46S = 23886
esriSRProjCS_Indonesia1974UTM_47S = 23887
esriSRProjCS_Indonesia1974UTM_48S = 23888
esriSRProjCS_Indonesia1974UTM_49S = 23889
esriSRProjCS_Indonesia1974UTM_50S = 23890
esriSRProjCS_Indonesia1974UTM_51S = 23891
esriSRProjCS_Indonesia1974UTM_52S = 23892
esriSRProjCS_Indonesia1974UTM_53S = 23893
esriSRProjCS_Indonesia1974UTM_54S = 23894
esriSRProjCS_Indian1954UTM_47N = 23947
esriSRProjCS_Indian1954UTM_48N = 23948
esriSRProjCS_Indian1975UTM_47N = 24047
esriSRProjCS_Indian1975UTM_48N = 24048
esriSRProjCS_KertauUTM_47N = 24547
esriSRProjCS_KertauUTM_48N = 24548
esriSRProjCS_LaCanoaUTM_18N = 24718
esriSRProjCS_LaCanoaUTM_19N = 24719
esriSRProjCS_LaCanoaUTM_20N = 24720
esriSRProjCS_LaCanoaUTM_21N = 24721
esriSRProjCS_LomeUTM_31N = 25231
esriSRProjCS_MPoralokoUTM_32N = 26632
esriSRProjCS_MPoralokoUTM_32S = 26692
esriSRProjCS_Malongo1987UTM_32S = 25932
esriSRProjCS_MassawaUTM_37N = 26237
esriSRProjCS_MhastUTM_32S = 26432
esriSRProjCS_MinnaUTM_31N = 26331
esriSRProjCS_MinnaUTM_32N = 26332
esriSRProjCS_Nahrwan1967UTM_38N = 27038
esriSRProjCS_Nahrwan1967UTM_39N = 27039
esriSRProjCS_Nahrwan1967UTM_40N = 27040
esriSRProjCS_NGNUTM_38N = 31838
esriSRProjCS_NGNUTM_39N = 31839
esriSRProjCS_NordSahara1959UTM_29N = 30729
esriSRProjCS_NordSahara1959UTM_30N = 30730
esriSRProjCS_NordSahara1959UTM_31N = 30731
esriSRProjCS_NordSahara1959UTM_32N = 30732
esriSRProjCS_Naparima1972UTM_20N = 27120
esriSRProjCS_PointeNoireUTM_32S = 28232
esriSRProjCS_PSADUTM_18N = 24818
esriSRProjCS_PSADUTM_19N = 24819
esriSRProjCS_PSADUTM_20N = 24820
esriSRProjCS_PSADUTM_21N = 24821
esriSRProjCS_PSADUTM_17S = 24877
esriSRProjCS_PSADUTM_18S = 24878
esriSRProjCS_PSADUTM_19S = 24879
esriSRProjCS_PSADUTM_20S = 24880
esriSRProjCS_PSADUTM_22S = 24882
esriSRProjCS_SapperHill1943UTM_20S = 29220
esriSRProjCS_SapperHill1943UTM_21S = 29221
esriSRProjCS_SchwarzeckUTM_33S = 29333
esriSRProjCS_SudanUTM_35N = 29635
esriSRProjCS_SudanUTM_36N = 29636
esriSRProjCS_Tananarive1925UTM_38S = 29738
esriSRProjCS_Tananarive1925UTM_39S = 29739
esriSRProjCS_TrucialCoast1948UTM_39N = 30339
esriSRProjCS_TrucialCoast1948UTM_40N = 30340
esriSRProjCS_Timbalai1948UTM_49N = 29849
esriSRProjCS_Timbalai1948UTM_50N = 29850
esriSRProjCS_Yoff1972UTM_28N = 31028
esriSRProjCS_Zanderij1972UTM_21N = 31121
esriSRProjCS_ATS1977NewBrunswick = 2200
esriSRProjCS_ATS1977PrinceEdwardIs = 2290
esriSRProjCS_NAD1983CSRS98NewBrunswick = 2953
esriSRProjCS_NAD1983CSRS98UTM_19N = 2960
esriSRProjCS_NAD1983CSRS98UTM_20N = 2961
esriSRProjCS_NAD1983QuebecLambert = 32198
esriSRProjCS_ATS1977MTM_4NS = 2294
esriSRProjCS_ATS1977MTM_5NS = 2295
esriSRProjCS_AmersfoortRD_Old = 28991
esriSRProjCS_AmersfoortRD_New = 28992
esriSRProjCS_KuwaitUtilityKTM = 31901
esriSRProjCS_Philippines_I = 25391
esriSRProjCS_Philippines_II = 25392
esriSRProjCS_Philippines_III = 25393
esriSRProjCS_Philippines_IV = 25394
esriSRProjCS_Philippines_V = 25395
esriSRProjCS_AustriaFerroWest = 31281
esriSRProjCS_AustriaFerroCentral = 31282
esriSRProjCS_AustriaFerroEast = 31283
esriSRProjCS_MGI_M28 = 31284
esriSRProjCS_MGI_M31 = 31285
esriSRProjCS_MGI_M34 = 31286
esriSRProjCS_MGIAustriaLambert = 31287
esriSRProjCS_MonteMarioRomeItaly1 = 26591
esriSRProjCS_MonteMarioRomeItaly2 = 26592
esriSRProjCS_MonteMarioItaly1 = 3003
esriSRProjCS_MonteMarioItaly2 = 3004
esriSRProjCS_Argentina_1 = 22191
esriSRProjCS_Argentina_2 = 22192
esriSRProjCS_Argentina_3 = 22193
esriSRProjCS_Argentina_4 = 22194
esriSRProjCS_Argentina_5 = 22195
esriSRProjCS_Argentina_6 = 22196
esriSRProjCS_Argentina_7 = 22197
esriSRProjCS_Germany_1 = 31491
esriSRProjCS_Germany_2 = 31492
esriSRProjCS_Germany_3 = 31493
esriSRProjCS_Germany_4 = 31494
esriSRProjCS_Germany_5 = 31495
esriSRProjCS_BahrainStateGrid = 20499
esriSRProjCS_ColombiaWest = 21896
esriSRProjCS_ColombiaBogota = 21897
esriSRProjCS_ColombiaECentral = 21898
esriSRProjCS_ColombiaEast = 21899
esriSRProjCS_EgyptBlueBelt = 22991
esriSRProjCS_EgyptRedBelt = 22992
esriSRProjCS_EgyptPurpleBelt = 22993
esriSRProjCS_EgyptExtendedPurpleBelt = 22994
esriSRProjCS_GhanaMetreGrid = 25000
esriSRProjCS_IrishNationalGrid = 29902
esriSRProjCS_NZGD1949NorthIsland = 27291
esriSRProjCS_NZGD1949SouthIsland = 27292
esriSRProjCS_NigeriaWestBelt = 26391
esriSRProjCS_NigeriaMidBelt = 26392
esriSRProjCS_NigeriaEastBelt = 26393
esriSRProjCS_PeruWest = 24891
esriSRProjCS_PeruCentral = 24892
esriSRProjCS_PeruEast = 24893
esriSRProjCS_LisbonPortugueseGrid = 20790
esriSRProjCS_QatarNationalGrid = 28600
esriSRProjCS_BritishNationalGrid = 27700
esriSRProjCS_SwedishNationalGrid = 30800
esriSRProjCS_VoirolNordAlgerieAncienne = 30491
esriSRProjCS_VoirolSudAlgerieAncienne = 30492
esriSRProjCS_VoirolNordAlgerie = 30591
esriSRProjCS_VoirolSudAlgerie = 30592
esriSRProjCS_NorddeGuerre = 27500
esriSRProjCS_FranceI = 27581
esriSRProjCS_FranceII = 27582
esriSRProjCS_FranceIII = 27583
esriSRProjCS_FranceIV = 27584
esriSRProjCS_NordFrance = 27591
esriSRProjCS_CentreFrance = 27592
esriSRProjCS_SudFrance = 27593
esriSRProjCS_Corse = 27594
esriSRProjCS_Kalianpur1880India_0 = 24370
esriSRProjCS_Kalianpur1880India_I = 24371
esriSRProjCS_Kalianpur1880India_IIa = 24372
esriSRProjCS_Kalianpur1880India_IIb = 24382
esriSRProjCS_Kalianpur1880India_III = 24373
esriSRProjCS_Kalianpur1880India_IV = 24374
esriSRProjCS_Kalianpur1937India_IIb = 24375
esriSRProjCS_Kalianpur1962India_I = 24376
esriSRProjCS_Kalianpur1962India_IIa = 24377
esriSRProjCS_Kalianpur1975India_I = 24378
esriSRProjCS_Kalianpur1975India_IIa = 24379
esriSRProjCS_Kalianpur1975India_IIb = 24380
esriSRProjCS_Kalianpur1975India_III = 24381
esriSRProjCS_Kalianpur1975India_IV = 24383
esriSRProjCS_Kalianpur1937_UTM45N = 24305
esriSRProjCS_Kalianpur1937_UTM46N = 24306
esriSRProjCS_Kalianpur1962_UTM41N = 24311
esriSRProjCS_Kalianpur1962_UTM42N = 24312
esriSRProjCS_Kalianpur1962_UTM43N = 24313
esriSRProjCS_Kalianpur1975_UTM42N = 24342
esriSRProjCS_Kalianpur1975_UTM43N = 24343
esriSRProjCS_Kalianpur1975_UTM44N = 24344
esriSRProjCS_Kalianpur1975_UTM45N = 24345
esriSRProjCS_Kalianpur1975_UTM46N = 24346
esriSRProjCS_Kalianpur1975_UTM47N = 24347
esriSRProjCS_Jamaica1875OldGrid = 24100
esriSRProjCS_JAD1969JamaicaGrid = 24200
esriSRProjCS_MerchichNordMaroc = 26191
esriSRProjCS_MerchichSudMaroc = 26192
esriSRProjCS_MerchichSahara = 26193
esriSRProjCS_CarthageNordTunisie = 22391
esriSRProjCS_CarthageSudTunisie = 22392
esriSRProjCS_KOC_Lambert = 24600
esriSRProjCS_BelgeLambert1950 = 21500
esriSRProjCS_DealulPisculuiStereo1933 = 31600
esriSRProjCS_DealulPisculuiStereo1970 = 31700
esriSRProjCS_WGS1984UPS_North = 32661
esriSRProjCS_WGS1984UPS_South = 32761
esriSRProjCS_WGS1984TM36_SE = 32766
esriSRProjCS_NAD1983MTM_1 = 32181
esriSRProjCS_NAD1983MTM_2 = 32182
esriSRProjCS_NAD1983MTM_2SCoPQ = 32180
esriSRProjCS_NAD1983MTM_3 = 32183
esriSRProjCS_NAD1983MTM_4 = 32184
esriSRProjCS_NAD1983MTM_5 = 32185
esriSRProjCS_NAD1983MTM_6 = 32186
esriSRProjCS_NAD1983MTM_7 = 32187
esriSRProjCS_NAD1983MTM_8 = 32188
esriSRProjCS_NAD1983MTM_9 = 32189
esriSRProjCS_NAD1983MTM_10 = 32190
esriSRProjCS_NAD1983MTM_11 = 32191
esriSRProjCS_NAD1983MTM_12 = 32192
esriSRProjCS_NAD1983MTM_13 = 32193
esriSRProjCS_NAD1983MTM_14 = 32194
esriSRProjCS_NAD1983MTM_15 = 32195
esriSRProjCS_NAD1983MTM_16 = 32196
esriSRProjCS_NAD1983MTM_17 = 32197
esriSRProjCS_NAD1927MTM_1 = 32081
esriSRProjCS_NAD1927MTM_2 = 32082
esriSRProjCS_NAD1927MTM_3 = 32083
esriSRProjCS_NAD1927MTM_4 = 32084
esriSRProjCS_NAD1927MTM_5 = 32085
esriSRProjCS_NAD1927MTM_6 = 32086
esriSRProjCS_Madrid1870MadridSpain = 2062
esriSRProjCS_RT90_25GonWest = 2400
esriSRProjCS_SingaporeGrid = 24500
esriSRProjCS_CamacupaTM11_30SE = 22091
esriSRProjCS_CamacupaTM12_SE = 22092
esriSRProjCS_ED1950TM0_N = 23090
esriSRProjCS_ED1950TM5_NE = 23095
esriSRProjCS_FD1958Iraq = 3200
esriSRProjCS_Indian1960TM_106NE = 3176
esriSRProjCS_Indian1960UTM_48N = 3148
esriSRProjCS_Indian1960UTM_49N = 3149
esriSRProjCS_LKS1994 = 3346
esriSRProjCS_MoznetUTM_36S = 3036
esriSRProjCS_MoznetUTM_37S = 3037
esriSRProjCS_SambojaUTM_50S = 2550
esriSRProjCS_TeteUTM_36S = 2736
esriSRProjCS_TeteUTM_37S = 2737
esriSRProjCS_OldHawaiian_HI1 = 3561
esriSRProjCS_OldHawaiian_HI2 = 3562
esriSRProjCS_OldHawaiian_HI3 = 3563
esriSRProjCS_OldHawaiian_HI4 = 3564
esriSRProjCS_OldHawaiian_HI5 = 3565
esriSRProjCS_TokyoJapan1 = 30161
esriSRProjCS_TokyoJapan2 = 30162
esriSRProjCS_TokyoJapan3 = 30163
esriSRProjCS_TokyoJapan4 = 30164
esriSRProjCS_TokyoJapan5 = 30165
esriSRProjCS_TokyoJapan6 = 30166
esriSRProjCS_TokyoJapan7 = 30167
esriSRProjCS_TokyoJapan8 = 30168
esriSRProjCS_TokyoJapan9 = 30169
esriSRProjCS_TokyoJapan10 = 30170
esriSRProjCS_TokyoJapan11 = 30171
esriSRProjCS_TokyoJapan12 = 30172
esriSRProjCS_TokyoJapan13 = 30173
esriSRProjCS_TokyoJapan14 = 30174
esriSRProjCS_TokyoJapan15 = 30175
esriSRProjCS_TokyoJapan16 = 30176
esriSRProjCS_TokyoJapan17 = 30177
esriSRProjCS_TokyoJapan18 = 30178
esriSRProjCS_TokyoJapan19 = 30179
esriSRProjCS_PuertoRicoSPCS_PR = 3991
esriSRProjCS_PuertoRicoSPCS_VI = 3992
esriSRProjCS_EstonianCS1992 = 3300
esriSRProjCS_Palestine1923PalestineGrid = 28191
esriSRProjCS_Palestine1923IsraelCSGrid = 28193
esriSRProjCS_IsraelIsraelTMGrid = 2039
esriSRProjCS_SAD1969PalestineGrid = 29101
esriSRProjCS_PDO1993UTM_39N = 3439
esriSRProjCS_PDO1993UTM_40N = 3440
esriSRProjCS_PuertoRicoUTM_20N = 3920
esriSRProjCS_Palestine1923PalestineBelt = 28192
esriSRProjCS_ETRF1989TM_Baltic1993 = 103584
esriSRProjCS_Anguilla1957BritishWIndies = 2000
esriSRProjCS_Antigua1943BritishWIndies = 2001
esriSRProjCS_Barbados1938BritishWIndies = 21291
esriSRProjCS_Barbados1938BarbadosGrid = 21292
esriSRProjCS_Dominica1945BritishWIndies = 2002
esriSRProjCS_Grenada1953BritishWIndies = 2003
esriSRProjCS_Montserrat1958BritishWIndies = 2004
esriSRProjCS_StKitts1955BritishWIndies = 2005
esriSRProjCS_StLucia1955BritishWIndies = 2006
esriSRProjCS_StVincent1945BritishWIndies = 2007
esriSRProjCS_NAD1927CGQ77MTM_2SCoPQ = 2008
esriSRProjCS_NAD1927CGQ77MTM_3SCoPQ = 2009
esriSRProjCS_NAD1927CGQ77MTM_4SCoPQ = 2010
esriSRProjCS_NAD1927CGQ77MTM_5SCoPQ = 2011
esriSRProjCS_NAD1927CGQ77MTM_6SCoPQ = 2012
esriSRProjCS_NAD1927CGQ77MTM_7SCoPQ = 2013
esriSRProjCS_NAD1927CGQ77MTM_8SCoPQ = 2014
esriSRProjCS_NAD1927CGQ77MTM_9SCoPQ = 2015
esriSRProjCS_NAD1927CGQ77MTM_10SCoPQ = 2016
esriSRProjCS_NAD1927Def1976MTM_8 = 2017
esriSRProjCS_NAD1927Def1976MTM_9 = 2018
esriSRProjCS_NAD1927Def1976MTM_10 = 2019
esriSRProjCS_NAD1927Def1976MTM_11 = 2020
esriSRProjCS_NAD1927Def1976MTM_12 = 2021
esriSRProjCS_NAD1927Def1976MTM_13 = 2022
esriSRProjCS_NAD1927Def1976MTM_14 = 2023
esriSRProjCS_NAD1927Def1976MTM_15 = 2024
esriSRProjCS_NAD1927Def1976MTM_16 = 2025
esriSRProjCS_NAD1927Def1976MTM_17 = 2026
esriSRProjCS_NAD1927Def1976UTM_15N = 2027
esriSRProjCS_NAD1927Def1976UTM_16N = 2028
esriSRProjCS_NAD1927Def1976UTM_17N = 2029
esriSRProjCS_NAD1927Def1976UTM_18N = 2030
esriSRProjCS_NAD1927CGQ77UTM_17N = 2031
esriSRProjCS_NAD1927CGQ77UTM_18N = 2032
esriSRProjCS_NAD1927CGQ77UTM_19N = 2033
esriSRProjCS_NAD1927CGQ77UTM_20N = 2034
esriSRProjCS_NAD1927CGQ77UTM_21N = 2035
esriSRProjCS_NGO1948Norway1 = 102101
esriSRProjCS_NGO1948Norway2 = 102102
esriSRProjCS_NGO1948Norway3 = 102103
esriSRProjCS_NGO1948Norway4 = 102104
esriSRProjCS_NGO1948Norway5 = 102105
esriSRProjCS_NGO1948Norway6 = 102106
esriSRProjCS_NGO1948Norway7 = 102107
esriSRProjCS_NGO1948Norway8 = 102108
esriSRProjCS_NGO1948OsloNorway1 = 27391
esriSRProjCS_NGO1948OsloNorway2 = 27392
esriSRProjCS_NGO1948OsloNorway3 = 27393
esriSRProjCS_NGO1948OsloNorway4 = 27394
esriSRProjCS_NGO1948OsloNorway5 = 27395
esriSRProjCS_NGO1948OsloNorway6 = 27396
esriSRProjCS_NGO1948OsloNorway7 = 27397
esriSRProjCS_NGO1948OsloNorway8 = 27398
esriSRProjCS_OldHawaiianUTM4N = 102114
esriSRProjCS_OldHawaiianUTM5N = 102115
esriSRProjCS_NAD1927MichiganGeoRef = 102120
esriSRProjCS_NAD1983MichiganGeoRef = 102121
esriSRProjCS_NGO1948UTM32N = 102132
esriSRProjCS_NGO1948UTM33N = 102133
esriSRProjCS_NGO1948UTM34N = 102134
esriSRProjCS_NGO1948UTM35N = 102135
esriSRProjCS_ED1950_ED77_UTM_38N = 2058
esriSRProjCS_ED1950_ED77_UTM_39N = 2059
esriSRProjCS_ED1950_ED77_UTM_40N = 2060
esriSRProjCS_ED1950_ED77_UTM_41N = 2061
esriSRProjCS_Abidjan1987UTM_29N = 2043
esriSRProjCS_Abidjan1987UTM_30N = 2041
esriSRProjCS_Locodjo1965UTM_29N = 2042
esriSRProjCS_Locodjo1965UTM_30N = 2040
esriSRProjCS_Hanoi1972GK_18 = 2044
esriSRProjCS_Hanoi1972GK_19 = 2045
esriSRProjCS_NAD1927GuatemalaNorte = 32061
esriSRProjCS_NAD1927GuatemalaSur = 32062
esriSRProjCS_Trinidad1903TrinidadGrid = 30200
esriSRProjCS_DeirEzZorLevant = 22700
esriSRProjCS_DeirEzZorSyria = 22770
esriSRProjCS_MerchichDegreeNordMaroc = 102191
esriSRProjCS_MerchichDegreeSudMaroc = 102192
esriSRProjCS_MerchichDegreeSahara = 102193
esriSRProjCS_VoirolDegreeNAlgerieAncienne = 102491
esriSRProjCS_VoirolDegreeSAlgerieAncienne = 102492
esriSRProjCS_VoirolUnifieDegreeNAlgerie = 102591
esriSRProjCS_VoirolUnifieDegreeSAlgerie = 102592
esriSRProjCSType = c_int # enum
ILinePolygonHelper._methods_ = [
    COMMETHOD([helpstring(u'Triangulates polygon. Non-linear curves are not allowed in the polygon rings. Accepts non-simple polygons also.')], HRESULT, 'Triangulate',
              ( ['in'], POINTER(IPolygon), 'pPolygon' ),
              ( ['in', 'out'], POINTER(POINTER(IMultiPatch)), 'ppMultiPatch' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbOK' )),
]
################################################################
## code template for ILinePolygonHelper implementation
##class ILinePolygonHelper_Impl(object):
##    def Triangulate(self, pPolygon):
##        u'Triangulates polygon. Non-linear curves are not allowed in the polygon rings. Accepts non-simple polygons also.'
##        #return ppMultiPatch, pbOK
##

class INormalAware(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Indicator interface that identifies geometries that can have persistent normal vectors values attached to coordinates.'
    _iid_ = GUID('{E433A194-CEB0-11D3-9F50-00C04F6BDF0D}')
    _idlflags_ = ['oleautomation']
INormalAware._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if this geometry is aware of normals.')], HRESULT, 'NormalAware',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'NormalAware' )),
    COMMETHOD(['propput', helpstring(u'Indicates if this geometry is aware of normals.')], HRESULT, 'NormalAware',
              ( [], VARIANT_BOOL, 'NormalAware' )),
    COMMETHOD(['propget', helpstring(u'Indicates if all normal values for this geometry are well-defined. Only works if geometry is aware of normals.')], HRESULT, 'NormalSimple',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'NormalSimple' )),
    COMMETHOD([helpstring(u'Unsets all normal values without changing awareness. Only works if geometry is aware of normals.')], HRESULT, 'DropNormals'),
]
################################################################
## code template for INormalAware implementation
##class INormalAware_Impl(object):
##    def _get(self):
##        u'Indicates if this geometry is aware of normals.'
##        #return NormalAware
##    def _set(self, NormalAware):
##        u'Indicates if this geometry is aware of normals.'
##    NormalAware = property(_get, _set, doc = _set.__doc__)
##
##    def DropNormals(self):
##        u'Unsets all normal values without changing awareness. Only works if geometry is aware of normals.'
##        #return 
##
##    @property
##    def NormalSimple(self):
##        u'Indicates if all normal values for this geometry are well-defined. Only works if geometry is aware of normals.'
##        #return NormalSimple
##

class IPolyline2(IPolyline):
    _case_insensitive_ = True
    u'Provides access to members that extend a polyline object.'
    _iid_ = GUID('{7A5AE276-1230-11D4-9F72-00C04F6BDD7F}')
    _idlflags_ = ['oleautomation']
class IPolyline3(IPolyline2):
    _case_insensitive_ = True
    u'Provides access to members that extend a polyline object.'
    _iid_ = GUID('{88AF3CF5-75B6-4EF2-91DB-7E9EAFF81F27}')
    _idlflags_ = ['oleautomation']
IPolyline._methods_ = [
    COMMETHOD([helpstring(u'Modifies this polyline by replacing some of its segments with some segments from reshapeSource.')], HRESULT, 'Reshape',
              ( [], POINTER(IPath), 'reshapeSource' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'didReshape' )),
    COMMETHOD([helpstring(u'Removes zero length segments (zero in 2 dimensions), merges parts at endpoints that only connect to each other, reorients segments that are pointing against the prevailing orientation for a part.')], HRESULT, 'SimplifyNetwork'),
]
################################################################
## code template for IPolyline implementation
##class IPolyline_Impl(object):
##    def Reshape(self, reshapeSource):
##        u'Modifies this polyline by replacing some of its segments with some segments from reshapeSource.'
##        #return didReshape
##
##    def SimplifyNetwork(self):
##        u'Removes zero length segments (zero in 2 dimensions), merges parts at endpoints that only connect to each other, reorients segments that are pointing against the prevailing orientation for a part.'
##        #return 
##

class IEnumSegment(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that iterate over collections of segments (obtained from the EnumSegments property on the ISegmentCollection interface).'
    _iid_ = GUID('{C63FAF0E-1040-11D1-A27D-0000F8775FBF}')
    _idlflags_ = []
    def __iter__(self):
        return self

    def next(self):
        item, fetched = self.Next(1)
        if fetched:
            return item
        raise StopIteration

    def __getitem__(self, index):
        self.Reset()
        self.Skip(index)
        item, fetched = self.Next(1)
        if fetched:
            return item
        raise IndexError(index)

IPolyline2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Not implemented.')], HRESULT, 'EnumShortestPath',
              ( [], c_int, 'fromPart' ),
              ( [], c_int, 'FromPoint' ),
              ( [], c_int, 'toPart' ),
              ( [], c_int, 'ToPoint' ),
              ( ['retval', 'out'], POINTER(POINTER(IEnumSegment)), 'shortPathEnum' )),
]
################################################################
## code template for IPolyline2 implementation
##class IPolyline2_Impl(object):
##    @property
##    def EnumShortestPath(self, fromPart, FromPoint, toPart, ToPoint):
##        u'Not implemented.'
##        #return shortPathEnum
##

IPolyline3._methods_ = [
    COMMETHOD([helpstring(u'Cut a polyline at locations where the cutter only touches the polyline, in addition to locations where the cutter crosses it.')], HRESULT, 'TouchCut',
              ( ['in'], POINTER(IPolyline), 'pCutter' ),
              ( ['out'], POINTER(POINTER(IGeometry)), 'ppLeftGeom' ),
              ( ['out'], POINTER(POINTER(IGeometry)), 'ppRightGeom' )),
]
################################################################
## code template for IPolyline3 implementation
##class IPolyline3_Impl(object):
##    def TouchCut(self, pCutter):
##        u'Cut a polyline at locations where the cutter only touches the polyline, in addition to locations where the cutter crosses it.'
##        #return ppLeftGeom, ppRightGeom
##

class GeographicCoordinateSystem(CoClass):
    u'Creates a geographic coordinate system.'
    _reg_clsid_ = GUID('{A6A87A80-1DD1-11B2-BF51-08002022F573}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
class IGeographicCoordinateSystem2(IGeographicCoordinateSystem):
    _case_insensitive_ = True
    u'Provides access to members that control additional properties and methods for all geographic coordinate systems.'
    _iid_ = GUID('{F78B2A38-89C4-11D4-9F9F-00C04F6BC8E8}')
    _idlflags_ = ['oleautomation']
class IGeographicCoordinateSystemEdit(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the properties for a geographic coordinate system.'
    _iid_ = GUID('{3B219F24-D3FF-11D1-BC9B-0000F875BCCE}')
    _idlflags_ = ['oleautomation']
GeographicCoordinateSystem._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ISpatialReference2GEN, IESRISpatialReferenceGEN, IESRISpatialReferenceGEN2, IPRJSpatialReferenceGEN, IGeographicCoordinateSystem, IGeographicCoordinateSystem2, IGeographicCoordinateSystemEdit, ISpatialReference, ISpatialReference2, ISpatialReference3, ISpatialReference4, ISpatialReferenceInfo, IESRISpatialReference, IPRJSpatialReference, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, ICompareCoordinateSystems, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, ISRPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, IControlPrecision, IControlPrecision2, ISpatialReferenceTolerance, ISpatialReferenceResolution, ISpatialReferenceAuthority]


# values for enumeration 'esriGeometryEmbeddingDimension'
esriGeometry2DEmbeddingDimension = 1
esriGeometry3DEmbeddingDimension = 2
esriGeometryEmbeddingDimension = c_int # enum
ISpatialReference2._methods_ = [
    COMMETHOD([helpstring(u'Returns true if the XY precisions of the two spatial references are the same.')], HRESULT, 'IsXYPrecisionEqual',
              ( ['in'], POINTER(ISpatialReference), 'otherSR' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsXYPrecisionEqual' )),
    COMMETHOD([helpstring(u'Returns true if the measure precisions of the two spatial references are the same.')], HRESULT, 'IsMPrecisionEqual',
              ( ['in'], POINTER(ISpatialReference), 'otherSR' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsMPrecisionEqual' )),
    COMMETHOD([helpstring(u'Returns true if the Z precisions of the two spatial references are the same.')], HRESULT, 'IsZPrecisionEqual',
              ( ['in'], POINTER(ISpatialReference), 'otherSR' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsZPrecisionEqual' )),
    COMMETHOD([helpstring(u'Applies the XY precision.')], HRESULT, 'ApplyXYPrecision',
              ( [], c_int, 'cPoints' ),
              ( [], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPoint), 'Points' )),
    COMMETHOD([helpstring(u'Applies the measure and z value precisions.')], HRESULT, 'ApplyPrecision',
              ( [], c_int, 'cPoints' ),
              ( [], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPoint), 'Points' ),
              ( [], POINTER(c_double), 'ms' ),
              ( [], POINTER(c_double), 'zs' )),
]
################################################################
## code template for ISpatialReference2 implementation
##class ISpatialReference2_Impl(object):
##    def IsMPrecisionEqual(self, otherSR):
##        u'Returns true if the measure precisions of the two spatial references are the same.'
##        #return IsMPrecisionEqual
##
##    def IsZPrecisionEqual(self, otherSR):
##        u'Returns true if the Z precisions of the two spatial references are the same.'
##        #return IsZPrecisionEqual
##
##    def ApplyPrecision(self, cPoints, Points, ms, zs):
##        u'Applies the measure and z value precisions.'
##        #return 
##
##    def ApplyXYPrecision(self, cPoints, Points):
##        u'Applies the XY precision.'
##        #return 
##
##    def IsXYPrecisionEqual(self, otherSR):
##        u'Returns true if the XY precisions of the two spatial references are the same.'
##        #return IsXYPrecisionEqual
##

ISpatialReference3._methods_ = [
    COMMETHOD(['propget', helpstring(u'The VCS associated with this spatial reference.')], HRESULT, 'VerticalCoordinateSystem',
              ( ['retval', 'out'], POINTER(POINTER(IVerticalCoordinateSystem)), 'vcs' )),
    COMMETHOD(['propputref', helpstring(u'The VCS associated with this spatial reference.')], HRESULT, 'VerticalCoordinateSystem',
              ( [], POINTER(IVerticalCoordinateSystem), 'vcs' )),
    COMMETHOD([helpstring(u'Projection hint for speeding up projections.')], HRESULT, 'ProjectionHint',
              ( [], POINTER(IGeometry), 'Geometry' ),
              ( [], POINTER(ISpatialReference), 'targetSR' ),
              ( ['in', 'out'], POINTER(esriTransformDirection), 'direction' ),
              ( ['in', 'out'], POINTER(POINTER(ITransformation)), 'pXForm' ),
              ( ['in', 'out'], POINTER(c_int), 'ProjectionHint' )),
]
################################################################
## code template for ISpatialReference3 implementation
##class ISpatialReference3_Impl(object):
##    def ProjectionHint(self, Geometry, targetSR):
##        u'Projection hint for speeding up projections.'
##        #return direction, pXForm, ProjectionHint
##
##    def VerticalCoordinateSystem(self, vcs):
##        u'The VCS associated with this spatial reference.'
##        #return 
##

IVerticalDatum._methods_ = [
]
################################################################
## code template for IVerticalDatum implementation
##class IVerticalDatum_Impl(object):

class IPolyline4(IPolyline3):
    _case_insensitive_ = True
    u'Provides access to members that extend a polyline object.'
    _iid_ = GUID('{5FA07D6C-D2B7-4A83-870A-0FB8155A4376}')
    _idlflags_ = ['oleautomation']
IPolyline4._methods_ = [
    COMMETHOD([helpstring(u'Use either planar or network simplify regardless of current attribute awareness.')], HRESULT, 'SimplifyEx',
              ( [], VARIANT_BOOL, 'planarSimplify' )),
]
################################################################
## code template for IPolyline4 implementation
##class IPolyline4_Impl(object):
##    def SimplifyEx(self, planarSimplify):
##        u'Use either planar or network simplify regardless of current attribute awareness.'
##        #return 
##

IZAware._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates whether or not the geometry is aware of and capable of handling Zs.')], HRESULT, 'ZAware',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'ZAware' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether or not the geometry is aware of and capable of handling Zs.')], HRESULT, 'ZAware',
              ( [], VARIANT_BOOL, 'ZAware' )),
    COMMETHOD(['propget', helpstring(u'Indicates if all the Zs are valid numbers.')], HRESULT, 'ZSimple',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'ZSimple' )),
    COMMETHOD([helpstring(u'Sets all the Z values to a non-valid number (NaN).')], HRESULT, 'DropZs'),
]
################################################################
## code template for IZAware implementation
##class IZAware_Impl(object):
##    def DropZs(self):
##        u'Sets all the Z values to a non-valid number (NaN).'
##        #return 
##
##    @property
##    def ZSimple(self):
##        u'Indicates if all the Zs are valid numbers.'
##        #return ZSimple
##
##    def _get(self):
##        u'Indicates whether or not the geometry is aware of and capable of handling Zs.'
##        #return ZAware
##    def _set(self, ZAware):
##        u'Indicates whether or not the geometry is aware of and capable of handling Zs.'
##    ZAware = property(_get, _set, doc = _set.__doc__)
##

IPointCollection3._methods_ = [
    COMMETHOD(['propget', helpstring(u'An indexed vertex enumerator for this point collection.')], HRESULT, 'IndexedEnumVertices',
              ( [], POINTER(IGeometry), 'queryGeometry' ),
              ( ['retval', 'out'], POINTER(POINTER(IEnumVertex)), 'indexedVertexEnumerator' )),
]
################################################################
## code template for IPointCollection3 implementation
##class IPointCollection3_Impl(object):
##    @property
##    def IndexedEnumVertices(self, queryGeometry):
##        u'An indexed vertex enumerator for this point collection.'
##        #return indexedVertexEnumerator
##

IAreaGeodetic._methods_ = [
    COMMETHOD(['propget', helpstring(u'The area.')], HRESULT, 'AreaGeodetic',
              ( [], esriGeodeticType, 'lineType' ),
              ( [], POINTER(ILinearUnit), 'pAreaUnit' ),
              ( ['retval', 'out'], POINTER(c_double), 'Area' )),
]
################################################################
## code template for IAreaGeodetic implementation
##class IAreaGeodetic_Impl(object):
##    @property
##    def AreaGeodetic(self, lineType, pAreaUnit):
##        u'The area.'
##        #return Area
##


# values for enumeration 'esriSRVerticalCSType'
esriSRVertCS_AIOC95depths = 5734
esriSRVertCS_Alicante = 5782
esriSRVertCS_Antalya = 5775
esriSRVertCS_Auckland = 5759
esriSRVertCS_AustralianHeightDatum = 5711
esriSRVertCS_AHD_Tasmania = 5712
esriSRVertCS_Baltic = 5705
esriSRVertCS_Baltic1982 = 5786
esriSRVertCS_BandarAbbas = 5752
esriSRVertCS_Belfast = 5732
esriSRVertCS_BlackSea = 5735
esriSRVertCS_Bluff = 5760
esriSRVertCS_CVD_1928 = 5713
esriSRVertCS_Cascais = 5780
esriSRVertCS_Caspian = 5706
esriSRVertCS_ChathamIsland = 5771
esriSRVertCS_Constanta = 5781
esriSRVertCS_DanskNormalNul = 5733
esriSRVertCS_DHHN1985 = 5784
esriSRVertCS_DHHN1992 = 5783
esriSRVertCS_Douglas = 5750
esriSRVertCS_Dunedin = 5761
esriSRVertCS_Durres = 5777
esriSRVertCS_EGM96Geoid = 5773
esriSRVertCS_Baltic1980 = 5787
esriSRVertCS_EVRS2000 = 5730
esriSRVertCS_FahudHeightDatum1993 = 5725
esriSRVertCS_FairIsle = 5741
esriSRVertCS_Fao = 5751
esriSRVertCS_FlannanIsles = 5748
esriSRVertCS_Foula = 5743
esriSRVertCS_GHA = 5778
esriSRVertCS_Gisborne = 5762
esriSRVertCS_HaTien1960 = 5726
esriSRVertCS_HongKongChartDatum = 5739
esriSRVertCS_HongKongPrincipalDatum = 5738
esriSRVertCS_HonDau1992 = 5727
esriSRVertCS_IGN1987 = 5756
esriSRVertCS_IGN1988 = 5757
esriSRVertCS_IGN1989 = 5758
esriSRVertCS_JapaneseStandardLevellingDatum = 5723
esriSRVertCS_KOCConstructionDatum = 5790
esriSRVertCS_KOCWellDatum = 5789
esriSRVertCS_KuwaitPWD = 5788
esriSRVertCS_Landeshohennetz1995 = 5729
esriSRVertCS_Landesnivellement1902 = 5728
esriSRVertCS_Lerwick = 5742
esriSRVertCS_Lyttleton = 5763
esriSRVertCS_MalinHead = 5731
esriSRVertCS_Maputo = 5722
esriSRVertCS_MSL_depth = 5715
esriSRVertCS_MSL_height = 5714
esriSRVertCS_Moturiki = 5764
esriSRVertCS_N60 = 5717
esriSRVertCS_NormaalAmsterdamsPeil = 5709
esriSRVertCS_Napier = 5765
esriSRVertCS_NAVD1988 = 5703
esriSRVertCS_Nelson = 5766
esriSRVertCS_Newlyn = 5701
esriSRVertCS_Newlyn_OrkneyIsles = 5740
esriSRVertCS_NGF_IGN69 = 5720
esriSRVertCS_NGF_IGN78 = 5721
esriSRVertCS_NGF_Lallemand = 5719
esriSRVertCS_NGG1977 = 5755
esriSRVertCS_NGNC = 5753
esriSRVertCS_NGVD1929 = 5702
esriSRVertCS_NG_L = 5774
esriSRVertCS_NorwayNormalNul1954 = 5776
esriSRVertCS_NorthRona = 5745
esriSRVertCS_NVN1999 = 5779
esriSRVertCS_OneTreePoint = 5767
esriSRVertCS_Oostende = 5710
esriSRVertCS_PDOHeightDatum1993 = 5724
esriSRVertCS_Piraeus = 5716
esriSRVertCS_Poolbeg = 5754
esriSRVertCS_RH70 = 5718
esriSRVertCS_SNN76 = 5785
esriSRVertCS_StewartIsland = 5772
esriSRVertCS_Stornoway = 5746
esriSRVertCS_St_Kilda = 5747
esriSRVertCS_St_Marys = 5749
esriSRVertCS_SuleSkerry = 5744
esriSRVertCS_Taranaki = 5769
esriSRVertCS_Tararu = 5768
esriSRVertCS_Wellington = 5770
esriSRVertCS_YellowSea1956 = 5736
esriSRVertCS_YellowSea1985 = 5737
esriSRVertCS_DangerIsland1950 = 5792
esriSRVertCS_Guadeloupe1951 = 5795
esriSRVertCS_Lagos1955 = 5796
esriSRVertCS_Martinique1955 = 5794
esriSRVertCS_Mayotte1950 = 5793
esriSRVertCS_NGC1948 = 5791
esriSRVertCS_WGS1984Geoid = 105700
esriSRVertCS_WGS1984 = 115700
esriSRVertCS_ETRS1989 = 115701
esriSRVertCS_NAD1983 = 115702
esriSRVertCS_NGPF = 5600
esriSRVertCS_IGN1966 = 5601
esriSRVertCS_MooreaSAU1981 = 5602
esriSRVertCS_RaiateaSAU2001 = 5603
esriSRVertCS_MaupitiSAU2001 = 5604
esriSRVertCS_HuahineSAU2001 = 5605
esriSRVertCS_TahaaSAU2001 = 5606
esriSRVertCS_BoraBoraSAU2001 = 5607
esriSRVertCS_IGLD1955 = 5608
esriSRVertCS_IGLD1985 = 5609
esriSRVertCS_AIOC95_heights = 5797
esriSRVertCS_EGM84Geoid = 5798
esriSRVertCS_DVR90 = 5799
esriSRVertCS_RH2000 = 5613
esriSRVerticalCSType = c_int # enum
IMultipoint._methods_ = [
]
################################################################
## code template for IMultipoint implementation
##class IMultipoint_Impl(object):


# values for enumeration 'esriSRGeoTransformation2Type'
esriSRGeoTransformation_Batavia_Jakarta_To_Batavia = 1759
esriSRGeoTransformation_Belge_1950_Brussels_To_Belge_1950 = 1264
esriSRGeoTransformation_Bogota_Bogota_To_Bogota = 1755
esriSRGeoTransformation_Greek_Athens_To_Greek = 1761
esriSRGeoTransformation_Lisbon_Lisbon_To_Lisbon = 1756
esriSRGeoTransformation_Makassar_Jakarta_To_Makassar = 1260
esriSRGeoTransformation_MGI_Ferro_TO_MGI = 3895
esriSRGeoTransformation_Monte_Mario_Rome_To_Monte_Mario = 1262
esriSRGeoTransformation_NGO_1948_Oslo_To_NGO_1948 = 1762
esriSRGeoTransformation_NTF_Paris_To_NTF = 1763
esriSRGeoTransformation_PAdang_1884_Jakarta_To_Padang_1884 = 1758
esriSRGeoTransformation_RT38_Stockholm_TO_RT38 = 1760
esriSRGeoTransformation_Tananarive_1925_Paris_To_Tananarive_1925 = 1265
esriSRGeoTransformation_Voirol_1875_Paris_To_Voirol_1875 = 1266
esriSRGeoTransformation_Voirol_Unifie_1960_Paris_To_Voirol_Unifie_1960 = 8171
esriSRGeoTransformation_NAD_1927_TO_NAD_1983_NADCON = 1241
esriSRGeoTransformation_NAD_1927_TO_NAD_1983_AK = 1243
esriSRGeoTransformation_NAD_1927_TO_NAD_1983_PRVI = 108003
esriSRGeoTransformation_OldHawaiian_TO_NAD_1983 = 1454
esriSRGeoTransformation_StGeorge_TO_NAD_1983 = 1457
esriSRGeoTransformation_StLawrence_TO_NAD_1983 = 1455
esriSRGeoTransformation_StPaul_TO_NAD_1983 = 1456
esriSRGeoTransformation_NAD_1983_TO_HARN_AL = 1474
esriSRGeoTransformation_NAD_1983_TO_HARN_AR = 1704
esriSRGeoTransformation_NAD_1983_TO_HARN_AZ = 1475
esriSRGeoTransformation_NAD_1983_TO_HARN_CN = 1476
esriSRGeoTransformation_NAD_1983_TO_HARN_CS = 1477
esriSRGeoTransformation_NAD_1983_TO_HARN_CO = 1478
esriSRGeoTransformation_NAD_1983_TO_HARN_GA = 1479
esriSRGeoTransformation_NAD_1983_TO_HARN_FL = 1480
esriSRGeoTransformation_NAD_1983_TO_HARN_HI = 1520
esriSRGeoTransformation_NAD_1983_TO_HARN_IL = 1553
esriSRGeoTransformation_NAD_1983_TO_HARN_IN = 1521
esriSRGeoTransformation_NAD_1983_TO_HARN_KS = 1522
esriSRGeoTransformation_NAD_1983_TO_HARN_KY = 1483
esriSRGeoTransformation_NAD_1983_TO_HARN_LA = 1484
esriSRGeoTransformation_NAD_1983_TO_HARN_MD = 1485
esriSRGeoTransformation_NAD_1983_TO_HARN_ME = 1486
esriSRGeoTransformation_NAD_1983_TO_HARN_MI = 1487
esriSRGeoTransformation_NAD_1983_TO_HARN_MN = 1706
esriSRGeoTransformation_NAD_1983_TO_HARN_MS = 1488
esriSRGeoTransformation_NAD_1983_TO_HARN_MO = 1707
esriSRGeoTransformation_NAD_1983_TO_HARN_EM = 1481
esriSRGeoTransformation_NAD_1983_TO_HARN_WM = 1482
esriSRGeoTransformation_NAD_1983_TO_HARN_NB = 1489
esriSRGeoTransformation_NAD_1983_TO_HARN_NV = 1523
esriSRGeoTransformation_NAD_1983_TO_HARN_NE = 1490
esriSRGeoTransformation_NAD_1983_TO_HARN_NJ = 1554
esriSRGeoTransformation_NAD_1983_TO_HARN_NM = 1491
esriSRGeoTransformation_NAD_1983_TO_HARN_NY = 1492
esriSRGeoTransformation_NAD_1983_TO_HARN_ND = 1493
esriSRGeoTransformation_NAD_1983_TO_HARN_OH = 1524
esriSRGeoTransformation_NAD_1983_TO_HARN_OK = 1494
esriSRGeoTransformation_NAD_1983_TO_HARN_PV = 1495
esriSRGeoTransformation_NAD_1983_TO_HARN_SD = 1496
esriSRGeoTransformation_NAD_1983_TO_HARN_TN = 1497
esriSRGeoTransformation_NAD_1983_TO_HARN_ET = 1498
esriSRGeoTransformation_NAD_1983_TO_HARN_WT = 1499
esriSRGeoTransformation_NAD_1983_TO_HARN_VA = 1500
esriSRGeoTransformation_NAD_1983_TO_HARN_UT = 1525
esriSRGeoTransformation_NAD_1983_TO_HARN_WO = 1501
esriSRGeoTransformation_NAD_1983_TO_HARN_WV = 1526
esriSRGeoTransformation_NAD_1983_TO_HARN_WI = 1502
esriSRGeoTransformation_NAD_1983_TO_HARN_WY = 1503
esriSRGeoTransformation_NAD_1927_TO_NAD_1983_NTV2_Canada = 1313
esriSRGeoTransformation_NAD27_DEF1976_TO_NAD83_NTV2_Ontario = 1463
esriSRGeoTransformation_AGD66_TO_GDA94_NTV2_Victoria = 1464
esriSRGeoTransformation_AGD66_TO_GDA94_NTV2_Tasmania = 1506
esriSRGeoTransformation_AGD66_TO_GDA94_NTV2_Northern_Territory = 1507
esriSRGeoTransformation_AGD84_TO_GDA94_NTV2_Queensland = 108453
esriSRGeoTransformation_AGD84_TO_GDA94_NTV2_Western_Australia = 1593
esriSRGeoTransformation_AGD66_TO_GDA94_NTV2_SEAustralia = 1596
esriSRGeoTransformation_NZGD1949_TO_NZGD2000_NTV2 = 1568
esriSRGeoTransformation_Jamaica1969_To_WGS1984_1 = 1084
esriSRGeoTransformation_Datum73_To_WGS1984_1 = 108110
esriSRGeoTransformation_Datum73_To_WGS1984_2 = 108120
esriSRGeoTransformation_ED1950_To_WGS1984_PT3 = 108111
esriSRGeoTransformation_ED1950_To_WGS1984_PT7 = 108121
esriSRGeoTransformation_Graciosa1948_To_WGS1984_1 = 108112
esriSRGeoTransformation_Graciosa1948_To_WGS1984_2 = 108122
esriSRGeoTransformation_LisaboaBessel_To_WGS1984_1 = 108113
esriSRGeoTransformation_LisaboaBessel_To_WGS1984_2 = 108123
esriSRGeoTransformation_LisaboaHayford_To_WGS1984_1 = 108114
esriSRGeoTransformation_LisaboaHayford_To_WGS1984_2 = 108124
esriSRGeoTransformation_PortoSanto1936_To_WGS1984_1 = 108115
esriSRGeoTransformation_PortoSanto1936_To_WGS1984_2 = 108125
esriSRGeoTransformation_ObservMeteor1939_To_WGS1984_1 = 108116
esriSRGeoTransformation_SaoBraz_To_WGS1984_1 = 108117
esriSRGeoTransformation_SaoBraz_To_WGS1984_2 = 108127
esriSRGeoTransformation_NTF_To_RGF1993_1 = 108130
esriSRGeoTransformation_NZGD1949_To_NZGD2000_3Parm = 1566
esriSRGeoTransformation_NZGD1949_To_NZGD2000_7Parm = 1701
esriSRGeoTransformation_Palestine_1923_To_WGS_1984_2 = 8650
esriSRGeoTransformation_Trinidad_1903_To_WGS_1984_2 = 10085
esriSRGeoTransformation_Jamaica_1969_To_WGS_1972_1 = 10086
esriSRGeoTransformation_Aratu_To_WGS_1984_5 = 10089
esriSRGeoTransformation_Aratu_To_WGS_1984_6 = 10090
esriSRGeoTransformation_Aratu_To_WGS_1984_7 = 10091
esriSRGeoTransformation_Aratu_To_WGS_1984_8 = 10092
esriSRGeoTransformation_Aratu_To_WGS_1984_9 = 10093
esriSRGeoTransformation_Kalianpur_1962_To_WGS_1984_2 = 15701
esriSRGeoTransformation_Kalianpur_1962_To_WGS_1984_3 = 15702
esriSRGeoTransformation_Kalianpur_1962_To_WGS_1984_4 = 15703
esriSRGeoTransformation_Kalianpur_1962_To_WGS_1984_5 = 15704
esriSRGeoTransformation_Minna_To_WGS_1984_12 = 15705
esriSRGeoTransformation_Minna_To_WGS_1984_13 = 15706
esriSRGeoTransformation_ELD_1979_To_WGS_1984_6 = 15707
esriSRGeoTransformation_PRS_1992_To_WGS_1984_1 = 15708
esriSRGeoTransformation_Nouakchott_1965_To_WGS_1984 = 15709
esriSRGeoTransformation_Aratu_To_WGS_1984_10 = 15710
esriSRGeoTransformation_Aratu_To_WGS_1984_11 = 15711
esriSRGeoTransformation_Aratu_To_WGS_1984_12 = 15712
esriSRGeoTransformation_Gan_1970_To_WGS_1984_1 = 15713
esriSRGeoTransformation_Bogota_To_MAGNA_region_1_CF = 15714
esriSRGeoTransformation_Bogota_To_WGS_1984_region_1_CF = 15715
esriSRGeoTransformation_Bogota_To_MAGNA_region_2_CF = 15716
esriSRGeoTransformation_Bogota_To_WGS_1984_region_2_CF = 15717
esriSRGeoTransformation_Bogota_To_MAGNA_region_3_CF = 15718
esriSRGeoTransformation_Bogota_To_WGS_1984_region_3_CF = 15719
esriSRGeoTransformation_Bogota_To_MAGNA_region_4_CF = 15720
esriSRGeoTransformation_Bogota_To_WGS_1984_region_4_CF = 15721
esriSRGeoTransformation_Bogota_To_MAGNA_region_5_CF = 15722
esriSRGeoTransformation_Bogota_To_WGS_1984_region_5_CF = 15723
esriSRGeoTransformation_Bogota_To_MAGNA_region_6_CF = 15724
esriSRGeoTransformation_Bogota_To_WGS_1984_region_6_CF = 15725
esriSRGeoTransformation_Bogota_To_MAGNA_region_7_CF = 15726
esriSRGeoTransformation_Bogota_To_WGS_1984_region_7_CF = 15727
esriSRGeoTransformation_Bogota_To_MAGNA_region_8_CF = 15728
esriSRGeoTransformation_Bogota_To_WGS_1984_region_8_CF = 15729
esriSRGeoTransformation_MAGNA_To_WGS_1984_1 = 15738
esriSRGeoTransformation_Amersfoort_To_ETRS_1989_3 = 15739
esriSRGeoTransformation_Amersfoort_To_ETRS_1989_4 = 15740
esriSRGeoTransformation_Deir_ez_Zor_To_WGS_1984_5 = 15742
esriSRGeoTransformation_Deir_ez_Zor_To_WGS_1984_6 = 15743
esriSRGeoTransformation_ED_1950_ED77_To_WGS_1984_6 = 15745
esriSRGeoTransformation_Nakhl_e_Ghanem_To_WGS_1984_6 = 15746
esriSRGeoTransformation_Belge_1972_To_ETRS_1989_2 = 15928
esriSRGeoTransformation_Belge_1972_To_WGS_1984_3 = 15929
esriSRGeoTransformation_St_Kitts_1955_To_WGS_1984_2 = 15750
esriSRGeoTransformation_Reunion_1947_To_WGS_1984_2 = 15751
esriSRGeoTransformation_Minna_To_WGS_1984_14 = 15755
esriSRGeoTransformation_Tahiti_1979_To_RGPF_1 = 15756
esriSRGeoTransformation_Moorea_1987_To_RGPF_1 = 15757
esriSRGeoTransformation_Tahaa_1954_To_RGPF_1 = 15758
esriSRGeoTransformation_Maupiti_1983_To_RGPF_1 = 15759
esriSRGeoTransformation_Fatu_Iva_1972_To_RGPF_1 = 15760
esriSRGeoTransformation_IGN63_Hiva_Oa_To_RGPF_1 = 15761
esriSRGeoTransformation_IGN63_Hiva_Oa_To_RGPF_2 = 15762
esriSRGeoTransformation_IGN72_Nuku_Hiva_To_RGPF_1 = 15763
esriSRGeoTransformation_IGN72_Nuku_Hiva_To_RGPF_2 = 15764
esriSRGeoTransformation_IGN72_Nuku_Hiva_To_RGPF_3 = 15765
esriSRGeoTransformation_Tahiti_1979_To_WGS_1984_1 = 4835
esriSRGeoTransformation_Moorea_1987_To_WGS_1984_1 = 15769
esriSRGeoTransformation_Tahaa_1954_To_WGS_1984_2 = 15770
esriSRGeoTransformation_Maupiti_1983_To_WGS_1984_1 = 15771
esriSRGeoTransformation_Fatu_Iva_1972_To_WGS_1984_1 = 15772
esriSRGeoTransformation_IGN63_Hiva_Oa_To_WGS_1984_1 = 15773
esriSRGeoTransformation_IGN63_Hiva_Oa_To_WGS_1984_2 = 15774
esriSRGeoTransformation_IGN72_Nuku_Hiva_To_WGS_1984_2 = 15775
esriSRGeoTransformation_IGN72_Nuku_Hiva_To_WGS_1984_3 = 15776
esriSRGeoTransformation_IGN72_Nuku_Hiva_To_WGS_1984_4 = 15777
esriSRGeoTransformation_ELD_1979_To_WGS_1984_7 = 15778
esriSRGeoTransformation_Gulshan_303_To_WGS_1984_1 = 15779
esriSRGeoTransformation_POSGAR_1994_To_WGS_1984_1 = 1210
esriSRGeoTransformation_Campo_Inchauspe_To_POSGAR_1994_1 = 15782
esriSRGeoTransformation_IGN53_Mare_To_WGS_1984_2 = 15783
esriSRGeoTransformation_IGCB_1955_To_WGS_1984_1 = 15787
esriSRGeoTransformation_AGD_1966_To_WGS_1984_16 = 15788
esriSRGeoTransformation_AGD_1984_To_WGS_1984_8 = 15789
esriSRGeoTransformation_MHAST_Offshore_To_WGS_1972_BE_1 = 15790
esriSRGeoTransformation_Malongo_1987_To_WGS_1984_3 = 15791
esriSRGeoTransformation_Egypt_Gulf_Suez_S_650_TL_To_WGS_1972_BE_1 = 15792
esriSRGeoTransformation_Barbados_1938_To_WGS_1984_1 = 15793
esriSRGeoTransformation_Little_Cayman_1961_To_WGS_1984_1 = 15814
esriSRGeoTransformation_Grand_Cayman_1959_To_WGS_1984_1 = 15830
esriSRGeoTransformation_Korea_2000_To_WGS_1984_1 = 15831
esriSRGeoTransformation_RGPF_To_WGS_1984_1 = 15832
esriSRGeoTransformation_RGPF_To_WGS_1984_2 = 15833
esriSRGeoTransformation_Hong_Kong_1963_67_To_WGS_1984_1 = 15842
esriSRGeoTransformation_Pampa_del_Castillo_To_WGS_1984_1 = 15845
esriSRGeoTransformation_Egypt_Gulf_Suez_S_650_TL_To_WGS_1984_2 = 15846
esriSRGeoTransformation_MOP78_To_WGS_1984_2 = 15847
esriSRGeoTransformation_ST84_Ile_des_Pins_To_WGS_1984_2 = 15848
esriSRGeoTransformation_Beduaram_To_WGS_1984_2 = 15849
esriSRGeoTransformation_Kerguelen_Island_1949_To_WGS_1984_1 = 15850
esriSRGeoTransformation_Merchich_degrees_To_WGS_1984 = 108279
esriSRGeoTransformation_NAD_1983_HARN_PACP00_MARP00_To_WGS_1984 = 108307
esriSRGeoTransformation_AGD_1966_To_WGS_1984_12 = 1665
esriSRGeoTransformation_AGD_1966_To_WGS_1984_13 = 1666
esriSRGeoTransformation_AGD_1966_To_WGS_1984_14 = 1667
esriSRGeoTransformation_AGD_1966_To_WGS_1984_15 = 1668
esriSRGeoTransformation_AGD_1984_To_WGS_1984_7 = 1669
esriSRGeoTransformation_Amersfoort_To_WGS_1984_2 = 1672
esriSRGeoTransformation_Ammassalik_1958_To_WGS_1984_1 = 1800
esriSRGeoTransformation_Australian_Antarctic_1998_To_WGS_1984_1 = 1890
esriSRGeoTransformation_Azores_Central_1948_To_WGS_1984_1 = 1886
esriSRGeoTransformation_Azores_Central_1995_To_WGS_1984_10 = 1980
esriSRGeoTransformation_Azores_Central_1995_To_WGS_1984_11 = 1981
esriSRGeoTransformation_Azores_Central_1995_To_WGS_1984_2 = 1972
esriSRGeoTransformation_Azores_Central_1995_To_WGS_1984_3 = 1973
esriSRGeoTransformation_Azores_Central_1995_To_WGS_1984_4 = 1974
esriSRGeoTransformation_Azores_Central_1995_To_WGS_1984_5 = 1975
esriSRGeoTransformation_Azores_Central_1995_To_WGS_1984_6 = 1976
esriSRGeoTransformation_Azores_Central_1995_To_WGS_1984_7 = 1977
esriSRGeoTransformation_Azores_Central_1995_To_WGS_1984_8 = 1978
esriSRGeoTransformation_Azores_Central_1995_To_WGS_1984_9 = 1979
esriSRGeoTransformation_Azores_Occidental_1939_To_WGS_1984_1 = 1887
esriSRGeoTransformation_Azores_Occidental_1939_To_WGS_1984_2 = 1982
esriSRGeoTransformation_Azores_Oriental_1940_To_WGS_1984_1 = 1885
esriSRGeoTransformation_Azores_Oriental_1995_To_WGS_1984_2 = 1968
esriSRGeoTransformation_Azores_Oriental_1995_To_WGS_1984_3 = 1969
esriSRGeoTransformation_Azores_Oriental_1995_To_WGS_1984_4 = 1970
esriSRGeoTransformation_Azores_Oriental_1995_To_WGS_1984_5 = 1971
esriSRGeoTransformation_Batavia_To_WGS_1984_2 = 1813
esriSRGeoTransformation_Batavia_To_WGS_1984_3 = 1814
esriSRGeoTransformation_Beduaram_To_WGS_1972_BE_1 = 1839
esriSRGeoTransformation_Belge_1972_To_ETRS_1989_1 = 1652
esriSRGeoTransformation_CH1903_Plus_To_ETRS_1989_1 = 1647
esriSRGeoTransformation_CH1903_Plus_To_WGS_1984_1 = 1676
esriSRGeoTransformation_CH1903_To_ETRS_1989_1 = 1646
esriSRGeoTransformation_Combani_1950_To_WGS_1984_1 = 1916
esriSRGeoTransformation_CSG_1967_To_RGFG_1995_1 = 1908
esriSRGeoTransformation_CSG_1967_To_WGS_1984_1 = 1906
esriSRGeoTransformation_Datum_73_To_ETRS_1989_1 = 1657
esriSRGeoTransformation_Datum_73_To_ETRS_1989_3 = 1992
esriSRGeoTransformation_Datum_73_To_WGS_1984_3 = 1983
esriSRGeoTransformation_Datum_73_To_WGS_1984_4 = 1987
esriSRGeoTransformation_Dealul_Piscului_1933_To_WGS_1984_1 = 1995
esriSRGeoTransformation_Dealul_Piscului_1970_To_WGS_1984_1 = 1996
esriSRGeoTransformation_Dealul_Piscului_1970_To_WGS_1984_2 = 1097
esriSRGeoTransformation_DHDN_To_ETRS_1989_2 = 1776
esriSRGeoTransformation_DHDN_To_ETRS_1989_3 = 1778
esriSRGeoTransformation_DHDN_To_ETRS_1989_4 = 1779
esriSRGeoTransformation_DHDN_To_ETRS_1989_5 = 1780
esriSRGeoTransformation_DHDN_To_ETRS_1989_6 = 1781
esriSRGeoTransformation_DHDN_To_ETRS_1989_7 = 1782
esriSRGeoTransformation_DHDN_To_WGS_1984_1 = 1673
esriSRGeoTransformation_DHDN_To_WGS_1984_2 = 1777
esriSRGeoTransformation_ED_1950_ED77_To_WGS_1984_3 = 1856
esriSRGeoTransformation_ED_1950_ED77_To_WGS_1984_4 = 1857
esriSRGeoTransformation_ED_1950_ED77_To_WGS_1984_5 = 1858
esriSRGeoTransformation_ED_1950_To_ETRS_1989_10 = 1650
esriSRGeoTransformation_ED_1950_To_ETRS_1989_4 = 1626
esriSRGeoTransformation_ED_1950_To_ETRS_1989_5 = 1628
esriSRGeoTransformation_ED_1950_To_ETRS_1989_6 = 1630
esriSRGeoTransformation_ED_1950_To_ETRS_1989_7 = 1632
esriSRGeoTransformation_ED_1950_To_ETRS_1989_8 = 1634
esriSRGeoTransformation_ED_1950_To_ETRS_1989_9 = 1783
esriSRGeoTransformation_ED_1950_To_WGS_1984_25 = 1627
esriSRGeoTransformation_ED_1950_To_WGS_1984_26 = 1629
esriSRGeoTransformation_ED_1950_To_WGS_1984_27 = 1631
esriSRGeoTransformation_ED_1950_To_WGS_1984_28 = 1633
esriSRGeoTransformation_ED_1950_To_WGS_1984_29 = 1635
esriSRGeoTransformation_ED_1950_To_WGS_1984_30 = 1784
esriSRGeoTransformation_ED_1950_To_WGS_1984_31 = 1810
esriSRGeoTransformation_ED_1950_To_WGS_1984_32 = 3904
esriSRGeoTransformation_ED_1950_To_WGS_1984_33 = 1985
esriSRGeoTransformation_ED_1950_To_WGS_1984_34 = 1989
esriSRGeoTransformation_ED_1950_To_WGS_1984_36 = 1998
esriSRGeoTransformation_ED_1987_To_WGS_1984_2 = 3905
esriSRGeoTransformation_ELD_1979_To_WGS_1984_1 = 1859
esriSRGeoTransformation_ELD_1979_To_WGS_1984_2 = 1860
esriSRGeoTransformation_ELD_1979_To_WGS_1984_3 = 1861
esriSRGeoTransformation_ELD_1979_To_WGS_1984_4 = 1862
esriSRGeoTransformation_ELD_1979_To_WGS_1984_5 = 1863
esriSRGeoTransformation_Estonia_1997_To_ETRS_1989_1 = 1648
esriSRGeoTransformation_Estonia_1997_To_WGS_1984_1 = 1649
esriSRGeoTransformation_FD_1958_To_WGS_1984_2 = 1854
esriSRGeoTransformation_FD_1958_To_WGS_1984_3 = 1855
esriSRGeoTransformation_Fort_Desaix_To_WGS_1984_1 = 1909
esriSRGeoTransformation_Fort_Desaix_To_WGS_1984_2 = 1910
esriSRGeoTransformation_Fort_Marigot_To_WGS_1984_1 = 1903
esriSRGeoTransformation_Garoua_To_WGS_1972_BE_1 = 1805
esriSRGeoTransformation_Gunung_Segara_To_WGS_1984_1 = 1897
esriSRGeoTransformation_Gunung_Segara_To_WGS_1984_2 = 1898
esriSRGeoTransformation_Gunung_Segara_To_WGS_1984_3 = 1899
esriSRGeoTransformation_Gunung_Segara_To_WGS_1984_4 = 1838
esriSRGeoTransformation_Helle_1954_To_WGS_1984_1 = 1957
esriSRGeoTransformation_Hito_XVIII_1963_To_WGS_1984_2 = 1892
esriSRGeoTransformation_Hong_Kong_1980_To_WGS_1984_1 = 1825
esriSRGeoTransformation_Hungarian_1972_To_WGS_1984_1 = 1830
esriSRGeoTransformation_Hungarian_1972_To_WGS_1984_2 = 1831
esriSRGeoTransformation_IGM_1995_To_ETRS_1989_1 = 1098
esriSRGeoTransformation_IGM_1995_To_WGS_1984_1 = 1099
esriSRGeoTransformation_IGN53_Mare_To_WGS_1984_1 = 1928
esriSRGeoTransformation_IGN56_Lifou_To_WGS_1984_1 = 1917
esriSRGeoTransformation_IGN56_Lifou_To_WGS_1984_2 = 1927
esriSRGeoTransformation_IGN72_Grande_Terre_To_WGS_1984_1 = 1962
esriSRGeoTransformation_IGN72_Grande_Terre_To_WGS_1984_2 = 1963
esriSRGeoTransformation_IGN72_Nuku_Hiva_To_WGS_1984_1 = 1914
esriSRGeoTransformation_IKBD_1992_To_WGS_1984_1 = 1993
esriSRGeoTransformation_Indian_1975_To_WGS_1984_4 = 1812
esriSRGeoTransformation_Indonesian_1974_To_WGS_1984_2 = 1832
esriSRGeoTransformation_Indonesian_1974_To_WGS_1984_3 = 1833
esriSRGeoTransformation_IRENET95_To_WGS_1984_1 = 1678
esriSRGeoTransformation_ISN_1993_To_WGS_1984_1 = 1952
esriSRGeoTransformation_ITRF_1988_To_ITRF_2000_1 = 108034
esriSRGeoTransformation_ITRF_1989_To_ITRF_2000_1 = 108033
esriSRGeoTransformation_ITRF_1990_To_ITRF_2000_1 = 108032
esriSRGeoTransformation_ITRF_1991_To_ITRF_2000_1 = 108031
esriSRGeoTransformation_ITRF_1992_To_ITRF_2000_1 = 108030
esriSRGeoTransformation_ITRF_1993_To_ITRF_2000_1 = 108029
esriSRGeoTransformation_ITRF_1994_To_ITRF_2000_1 = 108028
esriSRGeoTransformation_ITRF_1996_To_ITRF_2000_1 = 108027
esriSRGeoTransformation_ITRF_1997_To_ITRF_2000_1 = 108026
esriSRGeoTransformation_JGD_2000_To_WGS_1984_1 = 1826
esriSRGeoTransformation_KKJ_To_ETRS_1989_1 = 1638
esriSRGeoTransformation_KKJ_To_WGS_1984_1 = 1639
esriSRGeoTransformation_Kousseri_To_WGS_1972_BE_1 = 1806
esriSRGeoTransformation_La_Canoa_To_REGVEN_1 = 1771
esriSRGeoTransformation_La_Canoa_To_WGS_1984_2 = 1096
esriSRGeoTransformation_Lisbon_1890_To_WGS_1984_1 = 1986
esriSRGeoTransformation_Lisbon_1890_To_WGS_1984_2 = 1990
esriSRGeoTransformation_Lisbon_To_ETRS_1989_1 = 1655
esriSRGeoTransformation_Lisbon_To_ETRS_1989_2 = 1997
esriSRGeoTransformation_Lisbon_To_WGS_1984_2 = 1944
esriSRGeoTransformation_Lisbon_To_WGS_1984_3 = 1984
esriSRGeoTransformation_Lisbon_To_WGS_1984_4 = 1988
esriSRGeoTransformation_LKS_1992_To_WGS_1984_1 = 1958
esriSRGeoTransformation_Luxembourg_1930_To_ETRS_1989_1 = 1642
esriSRGeoTransformation_Luxembourg_1930_To_WGS_1984_1 = 1643
esriSRGeoTransformation_Makassar_To_WGS_1984_1 = 1837
esriSRGeoTransformation_Manoca_1962_To_WGS_1972_BE_1 = 1902
esriSRGeoTransformation_Manoca_1962_To_WGS_1984_1 = 1796
esriSRGeoTransformation_MGI_To_ETRS_1989_1 = 1619
esriSRGeoTransformation_MGI_To_ETRS_1989_2 = 1620
esriSRGeoTransformation_MGI_To_ETRS_1989_3 = 1785
esriSRGeoTransformation_MGI_To_WGS_1984_4 = 1621
esriSRGeoTransformation_MGI_To_WGS_1984_5 = 1786
esriSRGeoTransformation_MGI_To_WGS_1984_6 = 1794
esriSRGeoTransformation_MGI_To_WGS_1984_7 = 1795
esriSRGeoTransformation_Minna_To_WGS_1984_10 = 1824
esriSRGeoTransformation_Minna_To_WGS_1984_4 = 1818
esriSRGeoTransformation_Minna_To_WGS_1984_6 = 1820
esriSRGeoTransformation_Minna_To_WGS_1984_7 = 1821
esriSRGeoTransformation_Minna_To_WGS_1984_8 = 1822
esriSRGeoTransformation_Minna_To_WGS_1984_9 = 1823
esriSRGeoTransformation_Monte_Mario_To_ETRS_1989_1 = 1659
esriSRGeoTransformation_Monte_Mario_To_ETRS_1989_2 = 1661
esriSRGeoTransformation_Monte_Mario_To_ETRS_1989_3 = 1663
esriSRGeoTransformation_Monte_Mario_To_WGS_1984_2 = 1662
esriSRGeoTransformation_Campo_Inchauspe_To_WGS_1984_2 = 1527
esriSRGeoTransformation_Carthage_To_WGS_1984_2 = 1538
esriSRGeoTransformation_ETRS_1989_To_WGS_1984 = 1149
esriSRGeoTransformation_MPoraloko_To_WGS_1984_2 = 1532
esriSRGeoTransformation_RGF_1993_To_ETRF_1989_1 = 108199
esriSRGeoTransformation_RGF_1993_To_ETRS_1989_1 = 1591
esriSRGeoTransformation_Guam_1963_To_WGS_1984_2 = 1069
esriSRGeoTransformation_Samoa_1962_To_WGS_1984_3 = 1695
esriSRGeoTransformation_Samoa_1962_To_WGS_1984_2 = 1694
esriSRGeoTransformation_St_George_To_WGS_1984_1 = 1698
esriSRGeoTransformation_St_Lawrence_To_WGS_1984_1 = 1699
esriSRGeoTransformation_St_Paul_To_WGS_1984_1 = 1700
esriSRGeoTransformation_NAD_1983_To_HARN_NC = 15834
esriSRGeoTransformation_NAD_1983_To_HARN_PA = 15838
esriSRGeoTransformation_NAD_1983_To_HARN_SC = 15836
esriSRGeoTransformation_Old_Hawaiian_To_WGS_1984_8 = 15840
esriSRGeoTransformation_Puerto_Rico_To_WGS_1984_4 = 15841
esriSRGeoTransformation_Guam_1963_To_NAD_1983_HARN_Saipan = 108304
esriSRGeoTransformation_Guam_1963_To_NAD_1983_HARN_Rota = 108305
esriSRGeoTransformation_Old_Hawaiian_To_NAD_1983_HARN_HI = 108306
esriSRGeoTransformation_ATS_1977_To_WGS_1984_1 = 1688
esriSRGeoTransformation_ATS_1977_To_WGS_1984_2 = 1689
esriSRGeoTransformation_NAD_1927_def_1976_To_WGS_1984_1 = 1690
esriSRGeoTransformation_NAD_1927_CGQ77_To_WGS_1984_3 = 1691
esriSRGeoTransformation_NAD_1927_To_WGS_1984_34 = 1692
esriSRGeoTransformation_NAD_1927_To_WGS_1984_33 = 1693
esriSRGeoTransformation_NAD_1983_To_WGS_1984_6 = 1696
esriSRGeoTransformation_NAD_1983_To_WGS_1984_7 = 1697
esriSRGeoTransformation_NAD_1983_To_WGS_1984_8 = 1702
esriSRGeoTransformation_NAD_1927_To_WGS_1984_32 = 1703
esriSRGeoTransformation_ATS_1977_To_WGS_1984_3 = 1851
esriSRGeoTransformation_WGS_1984_To_NTF_NTV2 = 15960
esriSRGeoTransformation2Type = c_int # enum
class _WKSPointVA(Structure):
    pass
WKSPointVA = _WKSPointVA
class IVertexAttribute(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Identifies geometries that can have attributes on their vertices.'
    _iid_ = GUID('{AB2A8C25-D660-11D2-9F2A-00C04F6BDF0D}')
    _idlflags_ = ['oleautomation', 'restricted']
class IVertexAttribute2(IVertexAttribute):
    _case_insensitive_ = True
    u'additional operations for geometries that can have attributes (z, m, id) on their vertices.'
    _iid_ = GUID('{2356DB4E-721C-45D1-8A22-9DD1865BFA8F}')
    _idlflags_ = ['oleautomation']
IVertexAttribute._methods_ = [
    COMMETHOD(['propget', helpstring(u"Indicates if there are no 'empty' vertex attribute values of this type for this object.")], HRESULT, 'VertexAttributeSimple',
              ( [], esriGeometryAttributes, 'attributeType' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'attribSimple' )),
    COMMETHOD(['propget', helpstring(u'The minimum vertex attribute value of this type for all vertices in this object.')], HRESULT, 'VertexAttributeMin',
              ( [], esriGeometryAttributes, 'attributeType' ),
              ( ['retval', 'out'], POINTER(c_double), 'attributeMin' )),
    COMMETHOD(['propget', helpstring(u'The maximum vertex attribute value of this type for all vertices in this object.')], HRESULT, 'VertexAttributeMax',
              ( [], esriGeometryAttributes, 'attributeType' ),
              ( ['retval', 'out'], POINTER(c_double), 'attributeMax' )),
    COMMETHOD([helpstring(u'Scale all vertex attribute values of this type by the specified factor.')], HRESULT, 'MultiplyVertexAttributes',
              ( [], esriGeometryAttributes, 'attributeType' ),
              ( [], c_double, 'factor' )),
    COMMETHOD([helpstring(u'Offset all vertex attribute values of this type by the specified factor.')], HRESULT, 'OffsetVertexAttributes',
              ( [], esriGeometryAttributes, 'attributeType' ),
              ( [], c_double, 'Offset' )),
    COMMETHOD([helpstring(u'Generate vertex attribute values by linear interpolation for all vertices in the range [start+1, end-1]. (Sets point IDs to 0 rather than interpolating).')], HRESULT, 'InterpolateVertexAttributesBetween',
              ( [], c_int, 'interpolatedAttributes' ),
              ( [], c_int, 'startPart' ),
              ( [], c_int, 'startPoint' ),
              ( [], c_int, 'endPart' ),
              ( [], c_int, 'endPoint' )),
    COMMETHOD([helpstring(u'Extrapolates the attribute values at the begining of the geometry up to the fromIndex based on the attribute value interval between the fromIndex and the toIndex.')], HRESULT, 'ExtrapolateVertexAttributes',
              ( [], esriGeometryAttributes, 'attributeType' ),
              ( [], esriExtrapolationEnum, 'extrapolationStyle' ),
              ( [], c_int, 'startPart' ),
              ( [], c_int, 'startPoint' ),
              ( [], c_int, 'endPart' ),
              ( [], c_int, 'endPoint' )),
    COMMETHOD([helpstring(u'Extrapolates/interpolates the non-simple vertex attribute values.')], HRESULT, 'CalculateNonSimpleVertexAttributes',
              ( [], esriGeometryAttributes, 'attributeType' )),
    COMMETHOD([helpstring(u'For each vertex on this geometry, assign the attributes found at the point an equal fraction of the distance along the source geometry (the point need not be an explicit vertex).')], HRESULT, 'TransferAttributes',
              ( [], POINTER(ICurve), 'srcCurve' )),
]
################################################################
## code template for IVertexAttribute implementation
##class IVertexAttribute_Impl(object):
##    def CalculateNonSimpleVertexAttributes(self, attributeType):
##        u'Extrapolates/interpolates the non-simple vertex attribute values.'
##        #return 
##
##    @property
##    def VertexAttributeMin(self, attributeType):
##        u'The minimum vertex attribute value of this type for all vertices in this object.'
##        #return attributeMin
##
##    def OffsetVertexAttributes(self, attributeType, Offset):
##        u'Offset all vertex attribute values of this type by the specified factor.'
##        #return 
##
##    @property
##    def VertexAttributeSimple(self, attributeType):
##        u"Indicates if there are no 'empty' vertex attribute values of this type for this object."
##        #return attribSimple
##
##    def MultiplyVertexAttributes(self, attributeType, factor):
##        u'Scale all vertex attribute values of this type by the specified factor.'
##        #return 
##
##    @property
##    def VertexAttributeMax(self, attributeType):
##        u'The maximum vertex attribute value of this type for all vertices in this object.'
##        #return attributeMax
##
##    def TransferAttributes(self, srcCurve):
##        u'For each vertex on this geometry, assign the attributes found at the point an equal fraction of the distance along the source geometry (the point need not be an explicit vertex).'
##        #return 
##
##    def InterpolateVertexAttributesBetween(self, interpolatedAttributes, startPart, startPoint, endPart, endPoint):
##        u'Generate vertex attribute values by linear interpolation for all vertices in the range [start+1, end-1]. (Sets point IDs to 0 rather than interpolating).'
##        #return 
##
##    def ExtrapolateVertexAttributes(self, attributeType, extrapolationStyle, startPart, startPoint, endPart, endPoint):
##        u'Extrapolates the attribute values at the begining of the geometry up to the fromIndex based on the attribute value interval between the fromIndex and the toIndex.'
##        #return 
##

IVertexAttribute2._methods_ = [
    COMMETHOD([helpstring(u'Extrapolates/interpolates the non-simple vertex attribute values. If useSegmentExtrapolation is true, then the segment immediately incident on those to be extrapolated will be used to determine the extrapolation ratio.')], HRESULT, 'CalculateNonSimpleVertexAttributes2',
              ( [], esriGeometryAttributes, 'attributeType' ),
              ( [], VARIANT_BOOL, 'useSegmentExtrapolation' ),
              ( [], VARIANT_BOOL, 'applySingleAtt' )),
    COMMETHOD([helpstring(u'Replace vertex attributes having the specified value with the new value.')], HRESULT, 'ReplaceVertexAttributes',
              ( [], esriGeometryAttributes, 'attributeType' ),
              ( [], c_double, 'oldAtt' ),
              ( [], c_double, 'newAtt' )),
]
################################################################
## code template for IVertexAttribute2 implementation
##class IVertexAttribute2_Impl(object):
##    def CalculateNonSimpleVertexAttributes2(self, attributeType, useSegmentExtrapolation, applySingleAtt):
##        u'Extrapolates/interpolates the non-simple vertex attribute values. If useSegmentExtrapolation is true, then the segment immediately incident on those to be extrapolated will be used to determine the extrapolation ratio.'
##        #return 
##
##    def ReplaceVertexAttributes(self, attributeType, oldAtt, newAtt):
##        u'Replace vertex attributes having the specified value with the new value.'
##        #return 
##

class IESRISegment2(IESRISegment):
    _case_insensitive_ = True
    _iid_ = GUID('{60578E87-CB38-4B4C-81EC-B854C0B600DF}')
    _idlflags_ = ['restricted']
IESRISegment2._methods_ = [
    COMMETHOD([], HRESULT, 'ExportToESRISegment2',
              ( [], VARIANT_BOOL, 'exportTo92ArcFormat' ),
              ( ['out'], POINTER(c_ubyte), 'byteBuffer' ),
              ( ['out'], POINTER(c_int), 'cBytesWrote' )),
]
################################################################
## code template for IESRISegment2 implementation
##class IESRISegment2_Impl(object):
##    def ExportToESRISegment2(self, exportTo92ArcFormat):
##        '-no docstring-'
##        #return byteBuffer, cBytesWrote
##

_WKSPointVA._fields_ = [
    ('m_x', c_double),
    ('m_y', c_double),
    ('m_z', c_double),
    ('m_m', c_double),
    ('m_id', c_int),
]
assert sizeof(_WKSPointVA) == 40, sizeof(_WKSPointVA)
assert alignment(_WKSPointVA) == 8, alignment(_WKSPointVA)
class IWin32Shape2(IWin32Shape):
    _case_insensitive_ = True
    u'Provides access to members that prepare a set of GDI drawing instructions for a geometry.'
    _iid_ = GUID('{AB5EB1E9-90CC-11D4-9F6A-00C04F6BDF0D}')
    _idlflags_ = []
IWin32Shape2._methods_ = [
    COMMETHOD([helpstring(u'Export a set of GDI drawing instruction for this geometry. An arbitrary clip shape can be provided (as opposed to a simple envelope). A polygon or closed polyline can be specified to restructure itself so that its endpoints lie on a common tangent. ')], HRESULT, 'ExportToWin32ShapeEx',
              ( [], VARIANT_BOOL, 'modifyTangents' ),
              ( [], POINTER(ITransformation), 'Transform' ),
              ( [], POINTER(IGeometry), 'clipShape' ),
              ( ['in', 'out'], POINTER(c_int), 'byteCount' ),
              ( ['out'], POINTER(POINTER(c_ubyte)), 'byteBuffer' ),
              ( [], VARIANT_BOOL, 'compatibleBuffer' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'dice' )),
]
################################################################
## code template for IWin32Shape2 implementation
##class IWin32Shape2_Impl(object):
##    def ExportToWin32ShapeEx(self, modifyTangents, Transform, clipShape, compatibleBuffer):
##        u'Export a set of GDI drawing instruction for this geometry. An arbitrary clip shape can be provided (as opposed to a simple envelope). A polygon or closed polyline can be specified to restructure itself so that its endpoints lie on a common tangent. '
##        #return byteCount, byteBuffer, dice
##

class esriGeometryNetworkVertexInfo3D(Structure):
    pass
esriGeometryNetworkVertexInfo3D._fields_ = [
    ('m_V', comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPoint),
    ('m_z', c_double),
    ('m_bEndOfPath', VARIANT_BOOL),
    ('m_iPath', c_int),
    ('m_RatioAlong', c_double),
    ('m_IncomingAzimuth', c_double),
    ('m_OutgoingAzimuth', c_double),
    ('m_VID', c_int),
]
assert sizeof(esriGeometryNetworkVertexInfo3D) == 64, sizeof(esriGeometryNetworkVertexInfo3D)
assert alignment(esriGeometryNetworkVertexInfo3D) == 8, alignment(esriGeometryNetworkVertexInfo3D)
class JSONConverterGeometry(CoClass):
    _reg_clsid_ = GUID('{AD041A31-21A7-4FB7-9309-3836A7333E6C}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
class IJSONConverterGeometry(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides direct access to the geometry serialization for AMF and JSON formats.'
    _iid_ = GUID('{7CC69669-7023-4DD6-9CDC-3A75325673D7}')
    _idlflags_ = ['oleautomation']
JSONConverterGeometry._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IJSONSerializer, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IJSONDeserializer, IJSONConverterGeometry]

IESRISpatialReferenceGEN._methods_ = [
    COMMETHOD(['propget', helpstring(u'The number of bytes required to hold the persistant representation of this spatial reference component.')], HRESULT, 'ESRISpatialReferenceSize',
              ( ['retval', 'out'], POINTER(c_int), 'cBytes' )),
    COMMETHOD([helpstring(u'Defines this spatial reference component from the specified ESRISpatialReference buffer.')], HRESULT, 'ImportFromESRISpatialReference',
              ( [], BSTR, 'str' ),
              ( ['out'], POINTER(c_int), 'cBytesRead' )),
    COMMETHOD([helpstring(u'Exports this spatial reference component to a buffer.')], HRESULT, 'ExportToESRISpatialReference',
              ( ['out'], POINTER(BSTR), 'str' ),
              ( ['out'], POINTER(c_int), 'cBytesWrote' )),
]
################################################################
## code template for IESRISpatialReferenceGEN implementation
##class IESRISpatialReferenceGEN_Impl(object):
##    def ImportFromESRISpatialReference(self, str):
##        u'Defines this spatial reference component from the specified ESRISpatialReference buffer.'
##        #return cBytesRead
##
##    def ExportToESRISpatialReference(self):
##        u'Exports this spatial reference component to a buffer.'
##        #return str, cBytesWrote
##
##    @property
##    def ESRISpatialReferenceSize(self):
##        u'The number of bytes required to hold the persistant representation of this spatial reference component.'
##        #return cBytes
##

class esriRelationPair(Structure):
    _recordinfo_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2, 0L, '{6FB12026-B23D-40AF-8D80-69339B0E912B}')
IRelationResult._methods_ = [
    COMMETHOD(['propget', helpstring(u'The number of pairs of geometries in the relation.')], HRESULT, 'RelationElementCount',
              ( ['retval', 'out'], POINTER(c_int), 'resultPairCount' )),
    COMMETHOD(['propget', helpstring(u'The ith element of the relation. The indexes refer to elements of the left and right operand geometry bags.')], HRESULT, 'RelationElement',
              ( [], c_int, 'i' ),
              ( ['out'], POINTER(c_int), 'left' ),
              ( ['out'], POINTER(c_int), 'right' )),
    COMMETHOD([helpstring(u'The ith element of the relation. The indexes refer to elements of the left and right operand geometry bags.')], HRESULT, 'SetRelationElement',
              ( [], c_int, 'i' ),
              ( [], c_int, 'left' ),
              ( [], c_int, 'right' )),
    COMMETHOD([helpstring(u'Sets RelationResult with an array of relations.')], HRESULT, 'SetRelationElements',
              ( [], c_int, 'cPairs' ),
              ( [], POINTER(esriRelationPair), 'Pairs' )),
    COMMETHOD([helpstring(u'Sort the set according to the right index.')], HRESULT, 'SortRight'),
    COMMETHOD([helpstring(u'Sort the set according to the left index.')], HRESULT, 'SortLeft'),
    COMMETHOD([helpstring(u'Flips the left and right indexes of all the elements of the relation.')], HRESULT, 'FlipRelations'),
    COMMETHOD([helpstring(u'Finds elements existing in another relation set and delete them from this set.')], HRESULT, 'Subtract',
              ( ['in'], POINTER(IRelationResult), 'pRelations' )),
    COMMETHOD([helpstring(u'Construct the set with only those elements that exist in both relation sets.')], HRESULT, 'Intersect',
              ( ['in'], POINTER(IRelationResult), 'pRelations' )),
    COMMETHOD([helpstring(u'Add elements of other Relation to the end of this Relations, and the set is re-sorted.')], HRESULT, 'Add',
              ( ['in'], POINTER(IRelationResult), 'pRelations' )),
]
################################################################
## code template for IRelationResult implementation
##class IRelationResult_Impl(object):
##    @property
##    def RelationElement(self, i):
##        u'The ith element of the relation. The indexes refer to elements of the left and right operand geometry bags.'
##        #return left, right
##
##    @property
##    def RelationElementCount(self):
##        u'The number of pairs of geometries in the relation.'
##        #return resultPairCount
##
##    def SortLeft(self):
##        u'Sort the set according to the left index.'
##        #return 
##
##    def SortRight(self):
##        u'Sort the set according to the right index.'
##        #return 
##
##    def SetRelationElements(self, cPairs, Pairs):
##        u'Sets RelationResult with an array of relations.'
##        #return 
##
##    def FlipRelations(self):
##        u'Flips the left and right indexes of all the elements of the relation.'
##        #return 
##
##    def Intersect(self, pRelations):
##        u'Construct the set with only those elements that exist in both relation sets.'
##        #return 
##
##    def Add(self, pRelations):
##        u'Add elements of other Relation to the end of this Relations, and the set is re-sorted.'
##        #return 
##
##    def SetRelationElement(self, i, left, right):
##        u'The ith element of the relation. The indexes refer to elements of the left and right operand geometry bags.'
##        #return 
##
##    def Subtract(self, pRelations):
##        u'Finds elements existing in another relation set and delete them from this set.'
##        #return 
##

class LinearUnit(CoClass):
    u'Creates a linear unit of measure.'
    _reg_clsid_ = GUID('{DE162780-1DD1-11B2-BF4F-08002022F573}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
class ILinearUnitEdit(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the properties of the linear unit.'
    _iid_ = GUID('{3B219F23-D3FF-11D1-BC9B-0000F875BCCE}')
    _idlflags_ = ['oleautomation']
LinearUnit._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IESRISpatialReferenceGEN, IESRISpatialReferenceGEN2, ILinearUnit, IUnit, ILinearUnitEdit, ISpatialReferenceInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, IESRISpatialReference, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, ISpatialReferenceAuthority]

IRelationalOperator._methods_ = [
    COMMETHOD([helpstring(u'Indicates if the two geometries are of the same type and define the same set of points in the plane.')], HRESULT, 'Equals',
              ( [], POINTER(IGeometry), 'other' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Equals' )),
    COMMETHOD([helpstring(u'Indicates if the boundaries of the geometries intersect.')], HRESULT, 'Touches',
              ( [], POINTER(IGeometry), 'other' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Touches' )),
    COMMETHOD([helpstring(u'Indicates if this geometry contains the other geometry.')], HRESULT, 'Contains',
              ( [], POINTER(IGeometry), 'other' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Contains' )),
    COMMETHOD([helpstring(u'Indicates if this geometry is contained (is within) another geometry.')], HRESULT, 'Within',
              ( [], POINTER(IGeometry), 'other' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Within' )),
    COMMETHOD([helpstring(u'Indicates if the two geometries share no points in common. Negate this result to compute the Intersect relation.')], HRESULT, 'Disjoint',
              ( [], POINTER(IGeometry), 'other' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Disjoint' )),
    COMMETHOD([helpstring(u'Indicates if the two geometries intersect in a geometry of lesser dimension.')], HRESULT, 'Crosses',
              ( [], POINTER(IGeometry), 'other' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Crosses' )),
    COMMETHOD([helpstring(u'Indicates if the intersection of the two geometries has the same dimension as one of the input geometries.')], HRESULT, 'Overlaps',
              ( [], POINTER(IGeometry), 'other' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Overlaps' )),
    COMMETHOD([helpstring(u'Indicates if the defined relationship exists.')], HRESULT, 'Relation',
              ( [], POINTER(IGeometry), 'other' ),
              ( [], BSTR, 'relationDescription' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'RelationResult' )),
]
################################################################
## code template for IRelationalOperator implementation
##class IRelationalOperator_Impl(object):
##    def Overlaps(self, other):
##        u'Indicates if the intersection of the two geometries has the same dimension as one of the input geometries.'
##        #return Overlaps
##
##    def Touches(self, other):
##        u'Indicates if the boundaries of the geometries intersect.'
##        #return Touches
##
##    def Crosses(self, other):
##        u'Indicates if the two geometries intersect in a geometry of lesser dimension.'
##        #return Crosses
##
##    def Contains(self, other):
##        u'Indicates if this geometry contains the other geometry.'
##        #return Contains
##
##    def Equals(self, other):
##        u'Indicates if the two geometries are of the same type and define the same set of points in the plane.'
##        #return Equals
##
##    def Within(self, other):
##        u'Indicates if this geometry is contained (is within) another geometry.'
##        #return Within
##
##    def Relation(self, other, relationDescription):
##        u'Indicates if the defined relationship exists.'
##        #return RelationResult
##
##    def Disjoint(self, other):
##        u'Indicates if the two geometries share no points in common. Negate this result to compute the Intersect relation.'
##        #return Disjoint
##

class GeoTransformation(CoClass):
    u'Generic geotransformation class, holds either a WKT (string) or a WKID (factory code).'
    _reg_clsid_ = GUID('{843C4D40-BD7E-4542-A126-24AEBA43AF20}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
GeoTransformation._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ITransformationGEN, ITransformation, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, ISpatialReferenceAuthority]

class IPolyline5(IPolyline4):
    _case_insensitive_ = True
    u'Provides access to members that extend a polyline object.'
    _iid_ = GUID('{C6A70C30-F30A-4649-8C01-48DFDFA97C2A}')
    _idlflags_ = ['oleautomation']
IPolyline5._methods_ = [
    COMMETHOD([helpstring(u'If bInterpolateReshaped is true, then new vertices will be interpolated based on vertices from the polyline being reshaped. Otherwise, attributes on the reshaping line will be preserved in the output.')], HRESULT, 'ReshapeEx',
              ( [], POINTER(IPath), 'reshapeSource' ),
              ( [], VARIANT_BOOL, 'bInterpolateReshaped' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'didReshape' )),
]
################################################################
## code template for IPolyline5 implementation
##class IPolyline5_Impl(object):
##    def ReshapeEx(self, reshapeSource, bInterpolateReshaped):
##        u'If bInterpolateReshaped is true, then new vertices will be interpolated based on vertices from the polyline being reshaped. Otherwise, attributes on the reshaping line will be preserved in the output.'
##        #return didReshape
##

class Polyline(CoClass):
    u'An ordered collection of paths; optionally has measure, height and ID attributes.'
    _reg_clsid_ = GUID('{30707210-52D5-11D0-A8F2-00608C85EDE5}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
class ICurve2(ICurve):
    _case_insensitive_ = True
    u'Provides access to members that extend the functionality of one dimensional curves.'
    _iid_ = GUID('{058DEF33-2848-11D4-9F82-00C04F6BC8E8}')
    _idlflags_ = []
class ICurve3(ICurve2):
    _case_insensitive_ = True
    u'Provides access to members that extend the functionality of one dimensional curves.'
    _iid_ = GUID('{EA7AB50B-1A9D-11D6-9FA9-00C04F6BDF0D}')
    _idlflags_ = []
class IMSegmentation2(IMSegmentation):
    _case_insensitive_ = True
    u'Provides access to additional linear referencing operations on polylines.'
    _iid_ = GUID('{B80D4790-F452-11D3-9F69-00C04F6BDD7F}')
    _idlflags_ = []
class IMSegmentation3(IMSegmentation2):
    _case_insensitive_ = True
    u'Provides access to additional linear referencing operations on polylines.'
    _iid_ = GUID('{58AD0D5D-393D-44AA-9797-6E50D06ED524}')
    _idlflags_ = ['oleautomation']
class IMSegmentation4(IMSegmentation3):
    _case_insensitive_ = True
    u'Provides access to additional linear referencing operations on polylines.'
    _iid_ = GUID('{0AA29B2F-A1AD-448C-9B13-2AA06D14C022}')
    _idlflags_ = ['oleautomation']
class IConstructCurve3(IConstructCurve2):
    _case_insensitive_ = True
    u'Provides access to members that construct a curve using other geometries and measures.'
    _iid_ = GUID('{F45AE5D3-5A1D-4C09-8512-BD22B79BDC12}')
    _idlflags_ = ['oleautomation']
Polyline._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IPointCollection, IPointCollection4, IGeometry, IGeometry2, IGeometry3, IGeometry4, IGeometry5, ISegmentCollection, IGeometryCollection, ICurve, ICurve2, ICurve3, IPolycurve, IPolycurve2, IPolycurveGeodetic, IConstructGeodetic, IPolyline, IPolyline2, IPolyline3, IPolyline4, IPolyline5, IMAware, IMCollection, IMSegmentation, IMSegmentation2, IMSegmentation3, IMSegmentation4, IZAware, IZCollection, IZ, IZ2, IPointIDAware, ISpatialIndex2, IRelationalOperator, IRelationalOperator2, IProximityOperator, ITopologicalOperator, ITopologicalOperator2, ITopologicalOperator3, ITopologicalOperator5, ITopologicalOperator6, IHitTest, IHitTest3D, IConstructCurve, IConstructCurve2, IConstructCurve3, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, ITransform2D, ITransform3D, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, IMSnap, IPolycurve3D, ICurve3D, IProximityOperator3D, IRelationalOperator3D, IRelationalOperator3D2]

IRelationalOperator2._methods_ = [
    COMMETHOD([helpstring(u"Indicates if this geometry contains the other geometry, optionally using Celementini's definition.")], HRESULT, 'ContainsEx',
              ( [], POINTER(IGeometry), 'pOther' ),
              ( ['in'], esriSpatialRelationExEnum, 'Relation' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbContains' )),
    COMMETHOD([helpstring(u"Indicates if this geometry contains the other geometry, optionally using Celementini's definition.")], HRESULT, 'WithinEx',
              ( [], POINTER(IGeometry), 'pOther' ),
              ( ['in'], esriSpatialRelationExEnum, 'Relation' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbWithin' )),
    COMMETHOD([helpstring(u'Indicates if this geometry is within distance from the other geometry.')], HRESULT, 'IsNear',
              ( [], POINTER(IGeometry), 'pOther' ),
              ( [], c_double, 'distance' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbNear' )),
]
################################################################
## code template for IRelationalOperator2 implementation
##class IRelationalOperator2_Impl(object):
##    def IsNear(self, pOther, distance):
##        u'Indicates if this geometry is within distance from the other geometry.'
##        #return pbNear
##
##    def WithinEx(self, pOther, Relation):
##        u"Indicates if this geometry contains the other geometry, optionally using Celementini's definition."
##        #return pbWithin
##
##    def ContainsEx(self, pOther, Relation):
##        u"Indicates if this geometry contains the other geometry, optionally using Celementini's definition."
##        #return pbContains
##

IConstructMerge._methods_ = [
    COMMETHOD([helpstring(u'Merges the representation from both versions of a geometry that has been modifed')], HRESULT, 'MergeGeometries',
              ( [], POINTER(IGeometry), 'pOriginal' ),
              ( [], POINTER(IGeometry), 'pEdit1' ),
              ( [], POINTER(IGeometry), 'pEdit2' ),
              ( ['retval', 'out'], POINTER(POINTER(IGeometry)), 'ppMerged' )),
]
################################################################
## code template for IConstructMerge implementation
##class IConstructMerge_Impl(object):
##    def MergeGeometries(self, pOriginal, pEdit1, pEdit2):
##        u'Merges the representation from both versions of a geometry that has been modifed'
##        #return ppMerged
##

IMSegmentation2._methods_ = [
    COMMETHOD([helpstring(u'Sets Ms on vertices as scaled and offset distances from the input origin as measured along the polyline. Shortest path distances from the origin are used. Optionally ignores distances between parts of the polyline.')], HRESULT, 'SetMsAsDistance2',
              ( [], POINTER(IPoint), 'Origin' ),
              ( [], c_double, 'Scale' ),
              ( [], c_double, 'Offset' ),
              ( [], VARIANT_BOOL, 'ignoreGaps' )),
    COMMETHOD([helpstring(u'Updates Ms along the shortest path between the specified endpoints. The interpolation ratio is determined by the input ms and euclidean distance along that path. The update method is given as a combination of esriGeometryUpdateMEnum values.')], HRESULT, 'UpdateMsByDistance',
              ( [], c_int, 'fromPart' ),
              ( [], c_int, 'FromPoint' ),
              ( [], c_int, 'toPart' ),
              ( [], c_int, 'ToPoint' ),
              ( [], c_double, 'fromM' ),
              ( [], c_double, 'toM' ),
              ( [], c_int, 'updateHow' ),
              ( [], VARIANT_BOOL, 'ignoreGaps' )),
    COMMETHOD([helpstring(u'Updates Ms along the shortest path between the specified endpoints. The interpolation ratio is determined by the existing ms along that path and the input ms. The update method is given as a combination of esriGeometryUpdateMEnum values.')], HRESULT, 'UpdateMsByMs',
              ( [], c_int, 'fromPart' ),
              ( [], c_int, 'FromPoint' ),
              ( [], c_int, 'toPart' ),
              ( [], c_int, 'ToPoint' ),
              ( [], c_double, 'fromM' ),
              ( [], c_double, 'toM' ),
              ( [], c_int, 'updateHow' )),
    COMMETHOD([helpstring(u'Calibrates Ms of existing vertices using new Ms from the input points and the shortest path distances along the polyline between those points. The update method is given as a combination of esriGeometryUpdateMEnum values.')], HRESULT, 'CalibrateByDistance',
              ( [], POINTER(IEnumVertex), 'Points' ),
              ( [], c_int, 'updateHow' ),
              ( [], VARIANT_BOOL, 'ignoreGaps' ),
              ( [], c_double, 'cutoffDistance' ),
              ( ['retval', 'out'], POINTER(POINTER(IEnumSplitPoint)), 'splitPoints' )),
    COMMETHOD([helpstring(u'Calibrates Ms of existing vertices using new Ms from the input points and existing Ms along shortest paths between those points. The update method is given as a combination of esriGeometryUpdateMEnum values.')], HRESULT, 'CalibrateByMs',
              ( [], POINTER(IEnumVertex), 'Points' ),
              ( [], c_int, 'updateHow' ),
              ( [], c_double, 'cutoffDistance' ),
              ( ['retval', 'out'], POINTER(POINTER(IEnumSplitPoint)), 'splitPoints' )),
    COMMETHOD([helpstring(u"Returns a polyline geometry corresponding to the subcurve(s) between the fromM and the toM values. The 'details' arguments are composed of esriMCurveRelationEnum values.")], HRESULT, 'GetSubcurveBetweenMsEx',
              ( [], c_double, 'fromM' ),
              ( [], c_double, 'toM' ),
              ( ['in', 'out'], POINTER(c_int), 'fromMDetails' ),
              ( ['in', 'out'], POINTER(c_int), 'toMDetails' ),
              ( ['retval', 'out'], POINTER(POINTER(IGeometryCollection)), 'result' )),
]
################################################################
## code template for IMSegmentation2 implementation
##class IMSegmentation2_Impl(object):
##    def UpdateMsByMs(self, fromPart, FromPoint, toPart, ToPoint, fromM, toM, updateHow):
##        u'Updates Ms along the shortest path between the specified endpoints. The interpolation ratio is determined by the existing ms along that path and the input ms. The update method is given as a combination of esriGeometryUpdateMEnum values.'
##        #return 
##
##    def CalibrateByDistance(self, Points, updateHow, ignoreGaps, cutoffDistance):
##        u'Calibrates Ms of existing vertices using new Ms from the input points and the shortest path distances along the polyline between those points. The update method is given as a combination of esriGeometryUpdateMEnum values.'
##        #return splitPoints
##
##    def GetSubcurveBetweenMsEx(self, fromM, toM):
##        u"Returns a polyline geometry corresponding to the subcurve(s) between the fromM and the toM values. The 'details' arguments are composed of esriMCurveRelationEnum values."
##        #return fromMDetails, toMDetails, result
##
##    def SetMsAsDistance2(self, Origin, Scale, Offset, ignoreGaps):
##        u'Sets Ms on vertices as scaled and offset distances from the input origin as measured along the polyline. Shortest path distances from the origin are used. Optionally ignores distances between parts of the polyline.'
##        #return 
##
##    def UpdateMsByDistance(self, fromPart, FromPoint, toPart, ToPoint, fromM, toM, updateHow, ignoreGaps):
##        u'Updates Ms along the shortest path between the specified endpoints. The interpolation ratio is determined by the input ms and euclidean distance along that path. The update method is given as a combination of esriGeometryUpdateMEnum values.'
##        #return 
##
##    def CalibrateByMs(self, Points, updateHow, cutoffDistance):
##        u'Calibrates Ms of existing vertices using new Ms from the input points and existing Ms along shortest paths between those points. The update method is given as a combination of esriGeometryUpdateMEnum values.'
##        #return splitPoints
##

IRelationalOperator3D._methods_ = [
    COMMETHOD([helpstring(u'Indicates if the two geometries share no points in common.  Negate this result to compute the Intersect relation.')], HRESULT, 'Disjoint3D',
              ( [], POINTER(IGeometry), 'pOther' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbDisjoint' )),
]
################################################################
## code template for IRelationalOperator3D implementation
##class IRelationalOperator3D_Impl(object):
##    def Disjoint3D(self, pOther):
##        u'Indicates if the two geometries share no points in common.  Negate this result to compute the Intersect relation.'
##        #return pbDisjoint
##

class ILine2(ILine):
    _case_insensitive_ = True
    u'Provides access to the coordinates of a line segment in the form of Well Known Structures (WKS).'
    _iid_ = GUID('{A1D604A8-7914-4435-9B26-43E1EA5BAA99}')
    _idlflags_ = ['oleautomation']
ILine2._methods_ = [
    COMMETHOD([helpstring(u'From and To become the new endpoints of this line. Any existing attributes are deleted.')], HRESULT, 'PutWKSCoords',
              ( [], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPoint), 'from' ),
              ( [], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPoint), 'to' )),
    COMMETHOD([helpstring(u"Returns the (x,y) coordinates of this line's endpoints.")], HRESULT, 'QueryWKSCoords',
              ( ['out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPoint), 'from' ),
              ( ['out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPoint), 'to' )),
]
################################################################
## code template for ILine2 implementation
##class ILine2_Impl(object):
##    def QueryWKSCoords(self):
##        u"Returns the (x,y) coordinates of this line's endpoints."
##        #return from, to
##
##    def PutWKSCoords(self, from, to):
##        u'From and To become the new endpoints of this line. Any existing attributes are deleted.'
##        #return 
##

IPrimeMeridianEdit._methods_ = [
    COMMETHOD(['hidden', helpstring(u'Defines the properties of the prime meridian.')], HRESULT, 'DefineEx',
              ( [], BSTR, 'Name' ),
              ( [], BSTR, 'Alias' ),
              ( [], BSTR, 'Abbreviation' ),
              ( [], BSTR, 'Remarks' ),
              ( [], POINTER(c_double), 'Longitude' )),
    COMMETHOD([helpstring(u'Defines the properties of the prime meridian.')], HRESULT, 'Define',
              ( ['optional'], POINTER(VARIANT), 'Name' ),
              ( ['optional'], POINTER(VARIANT), 'Alias' ),
              ( ['optional'], POINTER(VARIANT), 'Abbreviation' ),
              ( ['optional'], POINTER(VARIANT), 'Remarks' ),
              ( ['optional'], POINTER(VARIANT), 'Longitude' )),
]
################################################################
## code template for IPrimeMeridianEdit implementation
##class IPrimeMeridianEdit_Impl(object):
##    def DefineEx(self, Name, Alias, Abbreviation, Remarks, Longitude):
##        u'Defines the properties of the prime meridian.'
##        #return 
##
##    def Define(self, Name, Alias, Abbreviation, Remarks, Longitude):
##        u'Defines the properties of the prime meridian.'
##        #return 
##

class MolodenskyTransformation(CoClass):
    u'Creates a Molodensky transformation.'
    _reg_clsid_ = GUID('{0CDF92B0-C2A0-11D2-BD08-0000F875BCCE}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
class IMolodenskyTransformation(IGeoTransformation):
    _case_insensitive_ = True
    u'Provides access to members that control the parameters of a Molodensky transformation.'
    _iid_ = GUID('{0CDF92B3-C2A0-11D2-BD08-0000F875BCCE}')
    _idlflags_ = ['oleautomation']
MolodenskyTransformation._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ITransformationGEN, ITransformation, IGeoTransformation, IMolodenskyTransformation, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, ISpatialReferenceAuthority]

IConstructMultiPatch._methods_ = [
    COMMETHOD([helpstring(u'Construct a MultiPatch by extruding a (non-point) geometry between two specified Z values.')], HRESULT, 'ConstructExtrudeFromTo',
              ( [], c_double, 'fromZ' ),
              ( [], c_double, 'toZ' ),
              ( [], POINTER(IGeometry), 'baseGeom' )),
    COMMETHOD([helpstring(u'Construct a MultiPatch by extruding a (non-point) geometry using its initial Zs for one base, and a uniform input Z for the other.')], HRESULT, 'ConstructExtrudeAbsolute',
              ( [], c_double, 'toZ' ),
              ( [], POINTER(IGeometry), 'baseGeom' )),
    COMMETHOD([helpstring(u'Construct a MultiPatch by extruding a (non-point) geometry between two functional surfaces.')], HRESULT, 'ConstructExtrudeBetween',
              ( [], POINTER(IFunctionalSurface), 'fromSurface' ),
              ( [], POINTER(IFunctionalSurface), 'toSurface' ),
              ( [], POINTER(IGeometry), 'baseGeom' )),
    COMMETHOD([helpstring(u'Construct a MultiPatch by extruding a (non-point) geometry along a specified line, using the Zs on the two ends of the line to set Zs on the top and bottom.')], HRESULT, 'ConstructExtrudeAlongLine',
              ( [], POINTER(ILine), 'extrusionLine' ),
              ( [], POINTER(IGeometry), 'baseGeom' )),
    COMMETHOD([helpstring(u'Construct a MultiPatch by extruding a (non-point) geometry along a specified vector, using Zs already set on the input geometry.')], HRESULT, 'ConstructExtrudeRelative',
              ( [], POINTER(IVector3D), 'extrusionVector' ),
              ( [], POINTER(IGeometry), 'baseGeom' )),
    COMMETHOD([helpstring(u'Construct a MultiPatch by using an input (non-point) geometry as one base and offsetting the Zs already set on the input geometry to get the second base.')], HRESULT, 'ConstructExtrude',
              ( [], c_double, 'OffsetZ' ),
              ( [], POINTER(IGeometry), 'baseGeom' )),
]
################################################################
## code template for IConstructMultiPatch implementation
##class IConstructMultiPatch_Impl(object):
##    def ConstructExtrudeBetween(self, fromSurface, toSurface, baseGeom):
##        u'Construct a MultiPatch by extruding a (non-point) geometry between two functional surfaces.'
##        #return 
##
##    def ConstructExtrudeRelative(self, extrusionVector, baseGeom):
##        u'Construct a MultiPatch by extruding a (non-point) geometry along a specified vector, using Zs already set on the input geometry.'
##        #return 
##
##    def ConstructExtrudeFromTo(self, fromZ, toZ, baseGeom):
##        u'Construct a MultiPatch by extruding a (non-point) geometry between two specified Z values.'
##        #return 
##
##    def ConstructExtrudeAbsolute(self, toZ, baseGeom):
##        u'Construct a MultiPatch by extruding a (non-point) geometry using its initial Zs for one base, and a uniform input Z for the other.'
##        #return 
##
##    def ConstructExtrudeAlongLine(self, extrusionLine, baseGeom):
##        u'Construct a MultiPatch by extruding a (non-point) geometry along a specified line, using the Zs on the two ends of the line to set Zs on the top and bottom.'
##        #return 
##
##    def ConstructExtrude(self, OffsetZ, baseGeom):
##        u'Construct a MultiPatch by using an input (non-point) geometry as one base and offsetting the Zs already set on the input geometry to get the second base.'
##        #return 
##

IMSegmentation3._methods_ = [
    COMMETHOD([helpstring(u"Sets Ms on vertices as scaled and offset M distances from the input origin as measured along the polyline based on the existing M's. Shortest path distances from the origin are used. Optionally ignores distances between parts of the polyline.")], HRESULT, 'UpdateAllMsByMs',
              ( [], POINTER(IPoint), 'Origin' ),
              ( [], c_double, 'Scale' ),
              ( [], c_double, 'Offset' ),
              ( [], VARIANT_BOOL, 'ignoreGaps' )),
    COMMETHOD([helpstring(u'Returns a geometry bag of line segments corresponding to the normal at the locations along the geometry where the specified M occurs.')], HRESULT, 'GetNormalsAtM',
              ( [], c_double, 'M' ),
              ( [], c_double, 'Length' ),
              ( ['retval', 'out'], POINTER(POINTER(IGeometryCollection)), 'result' )),
    COMMETHOD(['propget', helpstring(u'A combination of esriMonotinicityEnum values that describes all trends in M values over the length of the curve.')], HRESULT, 'MMonotonicity',
              ( ['retval', 'out'], POINTER(c_int), 'monotonicityDetails' )),
    COMMETHOD([helpstring(u'Returns the first and last defined M value for the curve.')], HRESULT, 'QueryFirstLastM',
              ( ['out'], POINTER(c_double), 'firstM' ),
              ( ['out'], POINTER(c_double), 'lastM' )),
    COMMETHOD([helpstring(u'Re-orients the curve to make Ms non-decreasing, if possible.')], HRESULT, 'OrientByMs'),
]
################################################################
## code template for IMSegmentation3 implementation
##class IMSegmentation3_Impl(object):
##    def UpdateAllMsByMs(self, Origin, Scale, Offset, ignoreGaps):
##        u"Sets Ms on vertices as scaled and offset M distances from the input origin as measured along the polyline based on the existing M's. Shortest path distances from the origin are used. Optionally ignores distances between parts of the polyline."
##        #return 
##
##    def GetNormalsAtM(self, M, Length):
##        u'Returns a geometry bag of line segments corresponding to the normal at the locations along the geometry where the specified M occurs.'
##        #return result
##
##    @property
##    def MMonotonicity(self):
##        u'A combination of esriMonotinicityEnum values that describes all trends in M values over the length of the curve.'
##        #return monotonicityDetails
##
##    def OrientByMs(self):
##        u'Re-orients the curve to make Ms non-decreasing, if possible.'
##        #return 
##
##    def QueryFirstLastM(self):
##        u'Returns the first and last defined M value for the curve.'
##        #return firstM, lastM
##

class IConstructEllipticArc(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that construct an elliptic arc segment using other geometries and measures.'
    _iid_ = GUID('{B12317D5-16D7-11D2-AA7A-00C04FA37BA4}')
    _idlflags_ = ['oleautomation']
IConstructEllipticArc._methods_ = [
    COMMETHOD([helpstring(u'Constructs the inscribed ellipse of the given envelope. The ellipse is oriented counterclockwise.')], HRESULT, 'ConstructEnvelope',
              ( [], POINTER(IEnvelope), 'boundingEnvelope' )),
    COMMETHOD([helpstring(u'Constructs an elliptic arc, given up to 5 points, such that the embedded ellipse passes through as many as possible. The arc will start at the first point and end at the second, passing through the third.')], HRESULT, 'ConstructUpToFivePoints',
              ( [], POINTER(IPoint), 'from' ),
              ( [], POINTER(IPoint), 'to' ),
              ( [], POINTER(IPoint), 'thru' ),
              ( [], POINTER(IPoint), 'point4' ),
              ( [], POINTER(IPoint), 'point5' )),
    COMMETHOD([helpstring(u'Construct an elliptic arc that starts at fromPoint, goes to toPoint, and spans an angle of pi/2. The rotation of the ellipse will be either 0 or pi/2.')], HRESULT, 'ConstructQuarterEllipse',
              ( [], POINTER(IPoint), 'FromPoint' ),
              ( [], POINTER(IPoint), 'ToPoint' ),
              ( [], VARIANT_BOOL, 'CCW' )),
    COMMETHOD([helpstring(u'Construct an elliptic arc that starts at fromPoint, goes to toPoint, and tries to have the embedded ellipse inscribed in the suggestedEnvelope. The result will have rotation of 0 or pi/2.')], HRESULT, 'ConstructTwoPointsEnvelope',
              ( [], POINTER(IPoint), 'FromPoint' ),
              ( [], POINTER(IPoint), 'ToPoint' ),
              ( [], POINTER(IEnvelope), 'suggestedEnvelope' ),
              ( [], esriArcOrientation, 'orientation' )),
]
################################################################
## code template for IConstructEllipticArc implementation
##class IConstructEllipticArc_Impl(object):
##    def ConstructUpToFivePoints(self, from, to, thru, point4, point5):
##        u'Constructs an elliptic arc, given up to 5 points, such that the embedded ellipse passes through as many as possible. The arc will start at the first point and end at the second, passing through the third.'
##        #return 
##
##    def ConstructTwoPointsEnvelope(self, FromPoint, ToPoint, suggestedEnvelope, orientation):
##        u'Construct an elliptic arc that starts at fromPoint, goes to toPoint, and tries to have the embedded ellipse inscribed in the suggestedEnvelope. The result will have rotation of 0 or pi/2.'
##        #return 
##
##    def ConstructQuarterEllipse(self, FromPoint, ToPoint, CCW):
##        u'Construct an elliptic arc that starts at fromPoint, goes to toPoint, and spans an angle of pi/2. The rotation of the ellipse will be either 0 or pi/2.'
##        #return 
##
##    def ConstructEnvelope(self, boundingEnvelope):
##        u'Constructs the inscribed ellipse of the given envelope. The ellipse is oriented counterclockwise.'
##        #return 
##

IPointCollection4._methods_ = [
    COMMETHOD([helpstring(u'Adds vertices/points to this Path, Ring, Polyline, Polygon, Multipoint, TriangleFan, Triangles, TriangleStrip, or MultiPatch.')], HRESULT, 'AddWKSPointZs',
              ( [], c_int, 'Count' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPointZ), 'pointStructures' )),
    COMMETHOD([helpstring(u'Replaces all vertices/points of this Path, Ring, Polyline, Polygon, Multipoint, TriangleFan, Triangles, TriangleStrip, or MultiPatch with new ones.')], HRESULT, 'SetWKSPointZs',
              ( [], c_int, 'Count' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPointZ), 'pointStructures' )),
    COMMETHOD([helpstring(u'Copies vertices/points coordinates to the array of point structures.')], HRESULT, 'QueryWKSPointZs',
              ( [], c_int, 'Index' ),
              ( [], c_int, 'Count' ),
              ( ['out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPointZ), 'pointStructures' )),
    COMMETHOD([helpstring(u'Inserts new vertices/points into this Path, Ring, Polyline, Polygon, Multipoint, TriangleFan, Triangles, TriangleStrip, or MultiPatch.')], HRESULT, 'InsertWKSPointZs',
              ( [], c_int, 'Index' ),
              ( [], c_int, 'Count' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPointZ), 'newPoints' )),
]
################################################################
## code template for IPointCollection4 implementation
##class IPointCollection4_Impl(object):
##    def QueryWKSPointZs(self, Index, Count):
##        u'Copies vertices/points coordinates to the array of point structures.'
##        #return pointStructures
##
##    def AddWKSPointZs(self, Count, pointStructures):
##        u'Adds vertices/points to this Path, Ring, Polyline, Polygon, Multipoint, TriangleFan, Triangles, TriangleStrip, or MultiPatch.'
##        #return 
##
##    def SetWKSPointZs(self, Count, pointStructures):
##        u'Replaces all vertices/points of this Path, Ring, Polyline, Polygon, Multipoint, TriangleFan, Triangles, TriangleStrip, or MultiPatch with new ones.'
##        #return 
##
##    def InsertWKSPointZs(self, Index, Count, newPoints):
##        u'Inserts new vertices/points into this Path, Ring, Polyline, Polygon, Multipoint, TriangleFan, Triangles, TriangleStrip, or MultiPatch.'
##        #return 
##

ILinearUnitEdit._methods_ = [
    COMMETHOD(['hidden', helpstring(u'Defines the properties of the linear unit.')], HRESULT, 'DefineEx',
              ( [], BSTR, 'Name' ),
              ( [], BSTR, 'Alias' ),
              ( [], BSTR, 'Abbreviation' ),
              ( [], BSTR, 'Remarks' ),
              ( [], POINTER(c_double), 'MetersPerUnit' )),
    COMMETHOD([helpstring(u'Defines the properties of the linear unit.')], HRESULT, 'Define',
              ( ['optional'], POINTER(VARIANT), 'Name' ),
              ( ['optional'], POINTER(VARIANT), 'Alias' ),
              ( ['optional'], POINTER(VARIANT), 'Abbreviation' ),
              ( ['optional'], POINTER(VARIANT), 'Remarks' ),
              ( ['optional'], POINTER(VARIANT), 'MetersPerUnit' )),
]
################################################################
## code template for ILinearUnitEdit implementation
##class ILinearUnitEdit_Impl(object):
##    def DefineEx(self, Name, Alias, Abbreviation, Remarks, MetersPerUnit):
##        u'Defines the properties of the linear unit.'
##        #return 
##
##    def Define(self, Name, Alias, Abbreviation, Remarks, MetersPerUnit):
##        u'Defines the properties of the linear unit.'
##        #return 
##

IArea3D._methods_ = [
    COMMETHOD(['propget', helpstring(u'The 3D surface area.')], HRESULT, 'Area3D',
              ( ['retval', 'out'], POINTER(c_double), 'Area' )),
    COMMETHOD(['propget', helpstring(u'A 3D point whose XY coordinates are set to the center of gravity of the shape\u2019s 2D footprint and Z set to the shape\u2019s ZMax.')], HRESULT, 'Centroid3D',
              ( ['retval', 'out'], POINTER(POINTER(IPoint)), 'Center' )),
    COMMETHOD(['propget', helpstring(u'A point guaranteed to be on this 3D surface area.')], HRESULT, 'LabelPoint3D',
              ( ['retval', 'out'], POINTER(POINTER(IPoint)), 'LabelPoint' )),
    COMMETHOD([helpstring(u'Copies the centroid of this 3D surface area to the specified point.')], HRESULT, 'QueryCentroid3D',
              ( [], POINTER(IPoint), 'Center' )),
    COMMETHOD([helpstring(u'Copies to the input point a point guaranteed to be on this 3D surface area.')], HRESULT, 'QueryLabelPoint3D',
              ( [], POINTER(IPoint), 'LabelPoint' )),
]
################################################################
## code template for IArea3D implementation
##class IArea3D_Impl(object):
##    def QueryLabelPoint3D(self, LabelPoint):
##        u'Copies to the input point a point guaranteed to be on this 3D surface area.'
##        #return 
##
##    @property
##    def LabelPoint3D(self):
##        u'A point guaranteed to be on this 3D surface area.'
##        #return LabelPoint
##
##    def QueryCentroid3D(self, Center):
##        u'Copies the centroid of this 3D surface area to the specified point.'
##        #return 
##
##    @property
##    def Centroid3D(self):
##        u'A 3D point whose XY coordinates are set to the center of gravity of the shape\u2019s 2D footprint and Z set to the shape\u2019s ZMax.'
##        #return Center
##
##    @property
##    def Area3D(self):
##        u'The 3D surface area.'
##        #return Area
##

class Projection(CoClass):
    u'Creates a map projection.'
    _reg_clsid_ = GUID('{7CA36480-C8F4-11D1-BC93-0000F875BCCE}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
class IProjectionGEN(ISpatialReferenceInfo):
    _case_insensitive_ = True
    u'OLE compatibility  for providing access to members that control the properties of all map projections.'
    _iid_ = GUID('{B6BB6277-7C88-4C70-9E36-CEB3E00FD190}')
    _idlflags_ = ['oleautomation']
Projection._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IProjectionGEN, IESRISpatialReferenceGEN, IESRISpatialReferenceGEN2, IProjection, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, IESRISpatialReference, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, ISpatialReferenceAuthority]

class IEnumCurve2(IEnumCurve):
    _case_insensitive_ = True
    u'Provides access to members that extend IEnumCurve.'
    _iid_ = GUID('{847E3F3D-5EBB-43F1-848D-F3EEFBC525ED}')
    _idlflags_ = ['oleautomation']
IEnumCurve2._methods_ = [
    COMMETHOD([helpstring(u'Copies a portion of this curve into an existing subcurve. AsRatio is true when fromDistance and toDistance are normalized to the interval [0..1].')], HRESULT, 'QuerySubcurve',
              ( [], c_double, 'fromDistance' ),
              ( [], c_double, 'toDistance' ),
              ( [], VARIANT_BOOL, 'asRatio' ),
              ( [], POINTER(ICurve), 'subcurve' )),
    COMMETHOD([helpstring(u'Copies a location on this curve into pointOnCurve. AsRatio is true when fromDistance is normalized to the interval [0..1].')], HRESULT, 'QueryPoint',
              ( [], c_double, 'fromDistance' ),
              ( [], VARIANT_BOOL, 'asRatio' ),
              ( [], POINTER(IPoint), 'pointOnCurve' )),
]
################################################################
## code template for IEnumCurve2 implementation
##class IEnumCurve2_Impl(object):
##    def QueryPoint(self, fromDistance, asRatio, pointOnCurve):
##        u'Copies a location on this curve into pointOnCurve. AsRatio is true when fromDistance is normalized to the interval [0..1].'
##        #return 
##
##    def QuerySubcurve(self, fromDistance, toDistance, asRatio, subcurve):
##        u'Copies a portion of this curve into an existing subcurve. AsRatio is true when fromDistance and toDistance are normalized to the interval [0..1].'
##        #return 
##

ISpheroidEdit._methods_ = [
    COMMETHOD(['hidden', helpstring(u'Defines the properties of a spheroid.')], HRESULT, 'DefineEx',
              ( [], BSTR, 'Name' ),
              ( [], BSTR, 'Alias' ),
              ( [], BSTR, 'Abbreviation' ),
              ( [], BSTR, 'Remarks' ),
              ( [], POINTER(c_double), 'majorAxis' ),
              ( [], POINTER(c_double), 'Flattening' )),
    COMMETHOD([helpstring(u'Defines the properties of a spheroid.')], HRESULT, 'Define',
              ( ['optional'], POINTER(VARIANT), 'Name' ),
              ( ['optional'], POINTER(VARIANT), 'Alias' ),
              ( ['optional'], POINTER(VARIANT), 'Abbreviation' ),
              ( ['optional'], POINTER(VARIANT), 'Remarks' ),
              ( ['optional'], POINTER(VARIANT), 'majorAxis' ),
              ( ['optional'], POINTER(VARIANT), 'Flattening' )),
]
################################################################
## code template for ISpheroidEdit implementation
##class ISpheroidEdit_Impl(object):
##    def DefineEx(self, Name, Alias, Abbreviation, Remarks, majorAxis, Flattening):
##        u'Defines the properties of a spheroid.'
##        #return 
##
##    def Define(self, Name, Alias, Abbreviation, Remarks, majorAxis, Flattening):
##        u'Defines the properties of a spheroid.'
##        #return 
##

esriRelationPair._fields_ = [
    ('m_r1', c_int),
    ('m_r2', c_int),
]
assert sizeof(esriRelationPair) == 8, sizeof(esriRelationPair)
assert alignment(esriRelationPair) == 4, alignment(esriRelationPair)
IExtrude._methods_ = [
    COMMETHOD([helpstring(u'Extrude a geometry between two specified Z values.')], HRESULT, 'ExtrudeFromTo',
              ( [], c_double, 'fromZ' ),
              ( [], c_double, 'toZ' ),
              ( [], POINTER(IGeometry), 'baseGeom' ),
              ( ['retval', 'out'], POINTER(POINTER(IGeometry)), 'extrudedGeom' )),
    COMMETHOD([helpstring(u'Extrude a geometry using its initial Zs for one base, and a uniform input Z for the other.')], HRESULT, 'ExtrudeAbsolute',
              ( [], c_double, 'toZ' ),
              ( [], POINTER(IGeometry), 'baseGeom' ),
              ( ['retval', 'out'], POINTER(POINTER(IGeometry)), 'extrudedGeom' )),
    COMMETHOD([helpstring(u'Extrude a geometry between two functional surfaces.')], HRESULT, 'ExtrudeBetween',
              ( [], POINTER(IFunctionalSurface), 'fromSurface' ),
              ( [], POINTER(IFunctionalSurface), 'toSurface' ),
              ( [], POINTER(IGeometry), 'baseGeom' ),
              ( ['retval', 'out'], POINTER(POINTER(IGeometry)), 'extrudedGeom' )),
    COMMETHOD([helpstring(u'Extrude a geometry along a specified line, using the Zs on the two ends of the line to set Zs on the top and bottom.')], HRESULT, 'ExtrudeAlongLine',
              ( [], POINTER(ILine), 'extrusionLine' ),
              ( [], POINTER(IGeometry), 'baseGeom' ),
              ( ['retval', 'out'], POINTER(POINTER(IGeometry)), 'extrudedGeom' )),
    COMMETHOD([helpstring(u'Extrude a geometry along a specified vector, using Zs already set on the input geometry.')], HRESULT, 'ExtrudeRelative',
              ( [], POINTER(IVector3D), 'extrusionVector' ),
              ( [], POINTER(IGeometry), 'baseGeom' ),
              ( ['retval', 'out'], POINTER(POINTER(IGeometry)), 'extrudedGeom' )),
    COMMETHOD([helpstring(u'Extrude using an input geometry as one base and offsetting the Zs already set on the input geometry to get the second base.')], HRESULT, 'Extrude',
              ( [], c_double, 'OffsetZ' ),
              ( [], POINTER(IGeometry), 'baseGeom' ),
              ( ['retval', 'out'], POINTER(POINTER(IGeometry)), 'extrudedGeom' )),
]
################################################################
## code template for IExtrude implementation
##class IExtrude_Impl(object):
##    def ExtrudeRelative(self, extrusionVector, baseGeom):
##        u'Extrude a geometry along a specified vector, using Zs already set on the input geometry.'
##        #return extrudedGeom
##
##    def ExtrudeBetween(self, fromSurface, toSurface, baseGeom):
##        u'Extrude a geometry between two functional surfaces.'
##        #return extrudedGeom
##
##    def ExtrudeAlongLine(self, extrusionLine, baseGeom):
##        u'Extrude a geometry along a specified line, using the Zs on the two ends of the line to set Zs on the top and bottom.'
##        #return extrudedGeom
##
##    def ExtrudeAbsolute(self, toZ, baseGeom):
##        u'Extrude a geometry using its initial Zs for one base, and a uniform input Z for the other.'
##        #return extrudedGeom
##
##    def Extrude(self, OffsetZ, baseGeom):
##        u'Extrude using an input geometry as one base and offsetting the Zs already set on the input geometry to get the second base.'
##        #return extrudedGeom
##
##    def ExtrudeFromTo(self, fromZ, toZ, baseGeom):
##        u'Extrude a geometry between two specified Z values.'
##        #return extrudedGeom
##

IZCollection._methods_ = [
    COMMETHOD(['propget', helpstring(u'The minimum Z value.')], HRESULT, 'ZMin',
              ( ['retval', 'out'], POINTER(c_double), 'ZMin' )),
    COMMETHOD(['propget', helpstring(u'The maximum Z value.')], HRESULT, 'ZMax',
              ( ['retval', 'out'], POINTER(c_double), 'ZMax' )),
    COMMETHOD([helpstring(u'Multiplies all the Z values by a factor.')], HRESULT, 'MultiplyZs',
              ( [], c_double, 'factor' )),
    COMMETHOD([helpstring(u'Offsets all the Z values by an offset value.')], HRESULT, 'OffsetZs',
              ( [], c_double, 'Offset' )),
]
################################################################
## code template for IZCollection implementation
##class IZCollection_Impl(object):
##    def OffsetZs(self, Offset):
##        u'Offsets all the Z values by an offset value.'
##        #return 
##
##    @property
##    def ZMin(self):
##        u'The minimum Z value.'
##        #return ZMin
##
##    @property
##    def ZMax(self):
##        u'The maximum Z value.'
##        #return ZMax
##
##    def MultiplyZs(self, factor):
##        u'Multiplies all the Z values by a factor.'
##        #return 
##

IDatumEdit._methods_ = [
    COMMETHOD(['hidden', helpstring(u'Defines the properties of a horizontal datum.')], HRESULT, 'DefineEx',
              ( [], BSTR, 'Name' ),
              ( [], BSTR, 'Alias' ),
              ( [], BSTR, 'Abbreviation' ),
              ( [], BSTR, 'Remarks' ),
              ( [], POINTER(ISpheroid), 'Spheroid' )),
    COMMETHOD([helpstring(u'Defines the properties of a horizontal datum.')], HRESULT, 'Define',
              ( ['optional'], POINTER(VARIANT), 'Name' ),
              ( ['optional'], POINTER(VARIANT), 'Alias' ),
              ( ['optional'], POINTER(VARIANT), 'Abbreviation' ),
              ( ['optional'], POINTER(VARIANT), 'Remarks' ),
              ( ['optional'], POINTER(VARIANT), 'Spheroid' )),
]
################################################################
## code template for IDatumEdit implementation
##class IDatumEdit_Impl(object):
##    def DefineEx(self, Name, Alias, Abbreviation, Remarks, Spheroid):
##        u'Defines the properties of a horizontal datum.'
##        #return 
##
##    def Define(self, Name, Alias, Abbreviation, Remarks, Spheroid):
##        u'Defines the properties of a horizontal datum.'
##        #return 
##

class IRelationalOperatorNxM(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that determines which pairs of geometries from two sets are in a specified relation.'
    _iid_ = GUID('{D3214902-BC54-402D-931B-A808E2BEE81E}')
    _idlflags_ = ['oleautomation', 'hidden']
IRelationalOperatorNxM._methods_ = [
    COMMETHOD([helpstring(u'Indicates if the two geometries are of the same type and define the same set of points in the plane.')], HRESULT, 'Equals',
              ( [], POINTER(IGeometryBag), 'other' ),
              ( ['retval', 'out'], POINTER(POINTER(IRelationResult)), 'result' )),
    COMMETHOD([helpstring(u'Indicates if the boundaries of the geometries intersect.')], HRESULT, 'Touches',
              ( [], POINTER(IGeometryBag), 'other' ),
              ( ['retval', 'out'], POINTER(POINTER(IRelationResult)), 'result' )),
    COMMETHOD([helpstring(u'Indicates if this geometry contains the other geometry.')], HRESULT, 'Contains',
              ( [], POINTER(IGeometryBag), 'other' ),
              ( ['retval', 'out'], POINTER(POINTER(IRelationResult)), 'result' )),
    COMMETHOD([helpstring(u'Indicates if this geometry is contained (is within) another geometry.')], HRESULT, 'Within',
              ( [], POINTER(IGeometryBag), 'other' ),
              ( ['retval', 'out'], POINTER(POINTER(IRelationResult)), 'result' )),
    COMMETHOD([helpstring(u'Indicates if the two geometries share no points in common.')], HRESULT, 'Disjoint',
              ( [], POINTER(IGeometryBag), 'other' ),
              ( ['retval', 'out'], POINTER(POINTER(IRelationResult)), 'result' )),
    COMMETHOD([helpstring(u'Indicates if the two geometries share any points in common.')], HRESULT, 'Intersects',
              ( [], POINTER(IGeometryBag), 'other' ),
              ( ['retval', 'out'], POINTER(POINTER(IRelationResult)), 'result' )),
    COMMETHOD([helpstring(u'Indicates if the two geometries intersect in a geometry of lesser dimension.')], HRESULT, 'Crosses',
              ( [], POINTER(IGeometryBag), 'other' ),
              ( ['retval', 'out'], POINTER(POINTER(IRelationResult)), 'result' )),
    COMMETHOD([helpstring(u'Indicates if the intersection of the two geometries has the same dimension as one of the input geometries.')], HRESULT, 'Overlaps',
              ( [], POINTER(IGeometryBag), 'other' ),
              ( ['retval', 'out'], POINTER(POINTER(IRelationResult)), 'result' )),
    COMMETHOD([helpstring(u'Evaluates an arbitrary relation specified using a dimension-extended matrix.')], HRESULT, 'Relation',
              ( [], POINTER(IGeometryBag), 'other' ),
              ( [], BSTR, 'relationDescription' ),
              ( ['retval', 'out'], POINTER(POINTER(IRelationResult)), 'result' )),
    COMMETHOD([helpstring(u'Evaluates the relation specified by esriSpatialRelationEnum.')], HRESULT, 'RelationEx',
              ( [], POINTER(IGeometryBag), 'other' ),
              ( ['in'], esriSpatialRelationEnum, 'Relation' ),
              ( ['retval', 'out'], POINTER(POINTER(IRelationResult)), 'result' )),
    COMMETHOD([helpstring(u'Comresses this bag and one index of relationship result based on left or right index.')], HRESULT, 'Compress',
              ( ['in', 'out'], POINTER(IRelationResult), 'result' ),
              ( ['in'], VARIANT_BOOL, 'leftIndex' )),
]
################################################################
## code template for IRelationalOperatorNxM implementation
##class IRelationalOperatorNxM_Impl(object):
##    def Overlaps(self, other):
##        u'Indicates if the intersection of the two geometries has the same dimension as one of the input geometries.'
##        #return result
##
##    def RelationEx(self, other, Relation):
##        u'Evaluates the relation specified by esriSpatialRelationEnum.'
##        #return result
##
##    def Touches(self, other):
##        u'Indicates if the boundaries of the geometries intersect.'
##        #return result
##
##    def Within(self, other):
##        u'Indicates if this geometry is contained (is within) another geometry.'
##        #return result
##
##    def Intersects(self, other):
##        u'Indicates if the two geometries share any points in common.'
##        #return result
##
##    def Contains(self, other):
##        u'Indicates if this geometry contains the other geometry.'
##        #return result
##
##    def Compress(self, leftIndex):
##        u'Comresses this bag and one index of relationship result based on left or right index.'
##        #return result
##
##    def Equals(self, other):
##        u'Indicates if the two geometries are of the same type and define the same set of points in the plane.'
##        #return result
##
##    def Crosses(self, other):
##        u'Indicates if the two geometries intersect in a geometry of lesser dimension.'
##        #return result
##
##    def Relation(self, other, relationDescription):
##        u'Evaluates an arbitrary relation specified using a dimension-extended matrix.'
##        #return result
##
##    def Disjoint(self, other):
##        u'Indicates if the two geometries share no points in common.'
##        #return result
##

class EllipticArc(CoClass):
    u'A portion of the boundary of a 2D ellipse that connects two points; optionally has measure, height and ID attributes at each endpoint.'
    _reg_clsid_ = GUID('{E54925BB-16D9-11D2-AA7A-00C04FA37BA4}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
class ISegmentZ(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that allow simple manipulations of Zs at the segment level.'
    _iid_ = GUID('{61B43A4B-E3D5-11D2-9F2E-00C04F6BDF0D}')
    _idlflags_ = ['oleautomation']
class ISegmentID(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that allow simple manipulations of IDs at the segment level.'
    _iid_ = GUID('{703052BD-25F1-11D3-9F3F-00C04F6BDF0D}')
    _idlflags_ = ['oleautomation']
EllipticArc._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IEllipticArc, IGeometry, ITransform2D, ICurve, ICurve2, ICurve3, ISegment, IConstructEllipticArc, IProximityOperator, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, ISegmentM, ISegmentZ, ISegmentID]

ISegmentCollection._methods_ = [
    COMMETHOD(['propget', helpstring(u'The number of segments.')], HRESULT, 'SegmentCount',
              ( ['retval', 'out'], POINTER(c_int), 'cSegments' )),
    COMMETHOD(['propget', helpstring(u'A  reference to the ith segment.')], HRESULT, 'Segment',
              ( [], c_int, 'i' ),
              ( ['retval', 'out'], POINTER(POINTER(ISegment)), 'Segment' )),
    COMMETHOD([helpstring(u'Adds a reference to the input segment at the end, or before or after a specified index.')], HRESULT, 'AddSegment',
              ( [], POINTER(ISegment), 'inSegment' ),
              ( ['optional'], POINTER(VARIANT), 'before' ),
              ( ['optional'], POINTER(VARIANT), 'after' )),
    COMMETHOD(['hidden', helpstring(u'Returns references to some of the input segments. This method is intended for internal use only.')], HRESULT, 'QuerySegments',
              ( [], c_int, 'Index' ),
              ( [], c_int, 'Count' ),
              ( ['out'], POINTER(POINTER(ISegment)), 'segments' )),
    COMMETHOD(['hidden', helpstring(u'Adds references to segments. This method is intended for internal use only.')], HRESULT, 'AddSegments',
              ( [], c_int, 'Count' ),
              ( ['in'], POINTER(POINTER(ISegment)), 'newSegments' )),
    COMMETHOD([helpstring(u'Adds references to the segments from the specified segment collection.')], HRESULT, 'AddSegmentCollection',
              ( [], POINTER(ISegmentCollection), 'segments' )),
    COMMETHOD(['hidden', helpstring(u'Inserts references to the input segments. This method is intended for internal use only.')], HRESULT, 'InsertSegments',
              ( [], c_int, 'Index' ),
              ( [], c_int, 'Count' ),
              ( ['in'], POINTER(POINTER(ISegment)), 'newSegments' )),
    COMMETHOD([helpstring(u'Inserts references to the segments in the input collectoin.')], HRESULT, 'InsertSegmentCollection',
              ( [], c_int, 'Index' ),
              ( [], POINTER(ISegmentCollection), 'newSegments' )),
    COMMETHOD([helpstring(u'Inserts references to some of the segments from the input collection.')], HRESULT, 'InsertSegmentCollectionEx',
              ( [], c_int, 'Index' ),
              ( [], c_int, 'start' ),
              ( [], c_int, 'Count' ),
              ( [], POINTER(ISegmentCollection), 'newSegments' )),
    COMMETHOD(['hidden', helpstring(u'Removes and inserts from segments. This method is intended for internal use only.')], HRESULT, 'ReplaceSegments',
              ( [], c_int, 'Index' ),
              ( [], c_int, 'comingIn' ),
              ( [], c_int, 'goingAway' ),
              ( [], POINTER(POINTER(ISegment)), 'newSegments' )),
    COMMETHOD([helpstring(u'Remove and inserts some segments.')], HRESULT, 'ReplaceSegmentCollection',
              ( [], c_int, 'Index' ),
              ( [], c_int, 'goingAway' ),
              ( [], POINTER(ISegmentCollection), 'newSegments' )),
    COMMETHOD([helpstring(u'Removes references to some segments. If closeGap is TRUE, then any remaining internal gap in the path, ring, polyline or polygon is connected with a single line segment.')], HRESULT, 'RemoveSegments',
              ( [], c_int, 'Index' ),
              ( [], c_int, 'Count' ),
              ( [], VARIANT_BOOL, 'closeGap' )),
    COMMETHOD([helpstring(u'Defines this path, ring, polyline or polygon to contain a single circular arc segment that is closed.')], HRESULT, 'SetCircle',
              ( [], POINTER(IPoint), 'cp' ),
              ( [], c_double, 'circleRadius' )),
    COMMETHOD([helpstring(u'Defines this path, ring, polyline or polygon to have four line segments in the same positions as the sides of the input envelope.')], HRESULT, 'SetRectangle',
              ( [], POINTER(IEnvelope), 'inEnvelope' )),
    COMMETHOD(['hidden', helpstring(u'Replaces all segments with references to the input segments. This method is intended for internal use only.')], HRESULT, 'SetSegments',
              ( [], c_int, 'Count' ),
              ( ['in'], POINTER(POINTER(ISegment)), 'newSegments' )),
    COMMETHOD([helpstring(u'Replaces all segments with references to segments from the input collection.')], HRESULT, 'SetSegmentCollection',
              ( [], POINTER(ISegmentCollection), 'newSegments' )),
    COMMETHOD(['propget', helpstring(u'A  new enumerator for this segment collection.')], HRESULT, 'EnumSegments',
              ( ['retval', 'out'], POINTER(POINTER(IEnumSegment)), 'newSegmentEnumerator' )),
    COMMETHOD(['propget', helpstring(u'A  new curve enumerator for this segment collection.')], HRESULT, 'EnumCurve',
              ( ['retval', 'out'], POINTER(POINTER(IEnumCurve)), 'newCurveEnumerator' )),
    COMMETHOD([helpstring(u'Indicates if this segment collection contains segments other than lines.')], HRESULT, 'HasNonLinearSegments',
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'nonLinearSegments' )),
    COMMETHOD(['propget', helpstring(u'A new indexed segment enumerator for this segment collection.')], HRESULT, 'IndexedEnumSegments',
              ( [], POINTER(IGeometry), 'queryGeometry' ),
              ( ['retval', 'out'], POINTER(POINTER(IEnumSegment)), 'newIndexedSegmentEnumerator' )),
    COMMETHOD(['restricted', helpstring(u'If, at end point shared by two segments, one segment has an empty value for an attribute and the other has a non-empty value, use the non-empty value for both.')], HRESULT, 'SynchronizeEmptyAttributes'),
    COMMETHOD([helpstring(u'Informs the segment collection that any cached values that it may be maintaining (envelope, length, etc.) are invalid. Use this method after editing segments directly.')], HRESULT, 'SegmentsChanged'),
]
################################################################
## code template for ISegmentCollection implementation
##class ISegmentCollection_Impl(object):
##    def InsertSegmentCollectionEx(self, Index, start, Count, newSegments):
##        u'Inserts references to some of the segments from the input collection.'
##        #return 
##
##    def SetSegmentCollection(self, newSegments):
##        u'Replaces all segments with references to segments from the input collection.'
##        #return 
##
##    def RemoveSegments(self, Index, Count, closeGap):
##        u'Removes references to some segments. If closeGap is TRUE, then any remaining internal gap in the path, ring, polyline or polygon is connected with a single line segment.'
##        #return 
##
##    @property
##    def EnumCurve(self):
##        u'A  new curve enumerator for this segment collection.'
##        #return newCurveEnumerator
##
##    def AddSegment(self, inSegment, before, after):
##        u'Adds a reference to the input segment at the end, or before or after a specified index.'
##        #return 
##
##    def AddSegmentCollection(self, segments):
##        u'Adds references to the segments from the specified segment collection.'
##        #return 
##
##    def ReplaceSegments(self, Index, comingIn, goingAway, newSegments):
##        u'Removes and inserts from segments. This method is intended for internal use only.'
##        #return 
##
##    def SetSegments(self, Count, newSegments):
##        u'Replaces all segments with references to the input segments. This method is intended for internal use only.'
##        #return 
##
##    def SynchronizeEmptyAttributes(self):
##        u'If, at end point shared by two segments, one segment has an empty value for an attribute and the other has a non-empty value, use the non-empty value for both.'
##        #return 
##
##    def SetCircle(self, cp, circleRadius):
##        u'Defines this path, ring, polyline or polygon to contain a single circular arc segment that is closed.'
##        #return 
##
##    def SetRectangle(self, inEnvelope):
##        u'Defines this path, ring, polyline or polygon to have four line segments in the same positions as the sides of the input envelope.'
##        #return 
##
##    @property
##    def Segment(self, i):
##        u'A  reference to the ith segment.'
##        #return Segment
##
##    def InsertSegmentCollection(self, Index, newSegments):
##        u'Inserts references to the segments in the input collectoin.'
##        #return 
##
##    @property
##    def EnumSegments(self):
##        u'A  new enumerator for this segment collection.'
##        #return newSegmentEnumerator
##
##    def AddSegments(self, Count, newSegments):
##        u'Adds references to segments. This method is intended for internal use only.'
##        #return 
##
##    @property
##    def IndexedEnumSegments(self, queryGeometry):
##        u'A new indexed segment enumerator for this segment collection.'
##        #return newIndexedSegmentEnumerator
##
##    def HasNonLinearSegments(self):
##        u'Indicates if this segment collection contains segments other than lines.'
##        #return nonLinearSegments
##
##    @property
##    def SegmentCount(self):
##        u'The number of segments.'
##        #return cSegments
##
##    def QuerySegments(self, Index, Count):
##        u'Returns references to some of the input segments. This method is intended for internal use only.'
##        #return segments
##
##    def ReplaceSegmentCollection(self, Index, goingAway, newSegments):
##        u'Remove and inserts some segments.'
##        #return 
##
##    def InsertSegments(self, Index, Count, newSegments):
##        u'Inserts references to the input segments. This method is intended for internal use only.'
##        #return 
##
##    def SegmentsChanged(self):
##        u'Informs the segment collection that any cached values that it may be maintaining (envelope, length, etc.) are invalid. Use this method after editing segments directly.'
##        #return 
##

class IESRIShape(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that Import/Export ArcObjects geometries to Esri shapefile format.'
    _iid_ = GUID('{7B91FF70-53A9-11D0-A8F3-00608C85EDE5}')
    _idlflags_ = []
IESRIShape._methods_ = [
    COMMETHOD([helpstring(u"Returns the basic type and modifiers (combination of esriShapeModifiers) that define the geometry's shape type, as it was last exported.")], HRESULT, 'QueryESRIShapeType',
              ( [], POINTER(esriShapeType), 'basicShapeType' ),
              ( [], POINTER(c_int), 'shapeModifiers' )),
    COMMETHOD(['propget', helpstring(u'The size of the buffer, in bytes, that will be required to hold the Esri shapefile formatted version of the geometry. The value may exceed the minimum required size.')], HRESULT, 'ESRIShapeSize',
              ( ['retval', 'out'], POINTER(c_int), 'cBytes' )),
    COMMETHOD(['propget', helpstring(u'The size of the buffer (in bytes) that will be required to hold the Esri shapefile version of the geometry. Only attributes specified by modifiers to allow will be exported. The value may exceed the minimum required size. ModifiersToAllow is a combination of e?o?\x08?&')], HRESULT, 'ESRIShapeSizeEx',
              ( [], c_int, 'modifiersToAllow' ),
              ( ['retval', 'out'], POINTER(c_int), 'cBytes' )),
    COMMETHOD([helpstring(u'Defines this geometry from the input Esri shapefile formatted buffer. Assumes the buffer describes a topologically correct geometry. Returns the exact number of bytes read from the buffer.')], HRESULT, 'ImportFromESRIShape',
              ( ['in', 'out'], POINTER(c_int), 'byteCountInOut' ),
              ( ['in'], POINTER(c_ubyte), 'byteBuffer' )),
    COMMETHOD([helpstring(u'Defines this geometry from the contents of the input Esri shapefile formatted buffer. Does not assume that the buffer describes a topological correct geometry. Returns the exact number of bytes read from the buffer.')], HRESULT, 'NonTrustedImportFromESRIShape',
              ( ['in', 'out'], POINTER(c_int), 'byteCountInOut' ),
              ( ['in'], POINTER(c_ubyte), 'byteBuffer' )),
    COMMETHOD([helpstring(u'Takes ownership of the input Esri shapefile format buffer. The geometry must be deleted, set to empty, edited, or imported from/attached to a different buffer before the buffer can be re-used.')], HRESULT, 'AttachToESRIShape',
              ( ['in', 'out'], POINTER(c_int), 'byteCountInOut' ),
              ( ['in'], POINTER(c_ubyte), 'byteBuffer' )),
    COMMETHOD([helpstring(u'Writes an Esri shapefile formatted version of this geometry to the specified buffer. Returns the exact number of bytes written to the buffer.')], HRESULT, 'ExportToESRIShape',
              ( ['in', 'out'], POINTER(c_int), 'byteCountInOut' ),
              ( ['out'], POINTER(c_ubyte), 'byteBuffer' )),
    COMMETHOD([helpstring(u'Writes an Esri shapefile formatted version of this geometry to the specified buffer. Only exports attributes specified by modifiersToAllow (combination of esriShapeExportFlags values.). Returns the exact number of bytes written to the buffer.')], HRESULT, 'ExportToESRIShapeEx',
              ( [], c_int, 'modifiersToAllow' ),
              ( [], VARIANT_BOOL, 'useArcViewNaNs' ),
              ( ['in', 'out'], POINTER(c_int), 'byteCountInOut' ),
              ( ['out'], POINTER(c_ubyte), 'byteBuffer' )),
    COMMETHOD([helpstring(u"Finds out the byte offsets within a shape buffer at which an exported attribute can be found. Only works if the shape hasn't changed since the last call to ExportToESRIShape or ExportToESRIShapeEx.")], HRESULT, 'GetModifierOffset',
              ( [], esriShapeModifiers, 'modifierType' ),
              ( ['out'], POINTER(c_int), 'Offset' )),
]
################################################################
## code template for IESRIShape implementation
##class IESRIShape_Impl(object):
##    def NonTrustedImportFromESRIShape(self, byteBuffer):
##        u'Defines this geometry from the contents of the input Esri shapefile formatted buffer. Does not assume that the buffer describes a topological correct geometry. Returns the exact number of bytes read from the buffer.'
##        #return byteCountInOut
##
##    def ImportFromESRIShape(self, byteBuffer):
##        u'Defines this geometry from the input Esri shapefile formatted buffer. Assumes the buffer describes a topologically correct geometry. Returns the exact number of bytes read from the buffer.'
##        #return byteCountInOut
##
##    def ExportToESRIShape(self):
##        u'Writes an Esri shapefile formatted version of this geometry to the specified buffer. Returns the exact number of bytes written to the buffer.'
##        #return byteCountInOut, byteBuffer
##
##    @property
##    def ESRIShapeSize(self):
##        u'The size of the buffer, in bytes, that will be required to hold the Esri shapefile formatted version of the geometry. The value may exceed the minimum required size.'
##        #return cBytes
##
##    def GetModifierOffset(self, modifierType):
##        u"Finds out the byte offsets within a shape buffer at which an exported attribute can be found. Only works if the shape hasn't changed since the last call to ExportToESRIShape or ExportToESRIShapeEx."
##        #return Offset
##
##    def QueryESRIShapeType(self, basicShapeType, shapeModifiers):
##        u"Returns the basic type and modifiers (combination of esriShapeModifiers) that define the geometry's shape type, as it was last exported."
##        #return 
##
##    def ExportToESRIShapeEx(self, modifiersToAllow, useArcViewNaNs):
##        u'Writes an Esri shapefile formatted version of this geometry to the specified buffer. Only exports attributes specified by modifiersToAllow (combination of esriShapeExportFlags values.). Returns the exact number of bytes written to the buffer.'
##        #return byteCountInOut, byteBuffer
##
##    def AttachToESRIShape(self, byteBuffer):
##        u'Takes ownership of the input Esri shapefile format buffer. The geometry must be deleted, set to empty, edited, or imported from/attached to a different buffer before the buffer can be re-used.'
##        #return byteCountInOut
##
##    @property
##    def ESRIShapeSizeEx(self, modifiersToAllow):
##        u'The size of the buffer (in bytes) that will be required to hold the Esri shapefile version of the geometry. Only attributes specified by modifiers to allow will be exported. The value may exceed the minimum required size. ModifiersToAllow is a combination of e?o?\x08?&'
##        #return cBytes
##


# values for enumeration 'esriCurveExtension'
esriDefaultCurveExtension = 0
esriRelocateEnds = 1
esriKeepEndAttributes = 2
esriNoEndAttributes = 4
esriNoExtendAtFrom = 8
esriNoExtendAtTo = 16
esriCurveExtension = c_int # enum
IRelationResultArray._methods_ = [
    COMMETHOD(['propget', helpstring(u'The geometry count.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'Returns the relation pair at the specified position.')], HRESULT, 'Element',
              ( ['in'], c_int, 'Index' ),
              ( ['retval', 'out'], POINTER(esriRelationPair), 'r' )),
    COMMETHOD([helpstring(u'Removes the relation result at the specified position.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring(u'Removes all relation pairs.')], HRESULT, 'RemoveAll'),
    COMMETHOD([helpstring(u'Adds a relation result.')], HRESULT, 'Add',
              ( ['in'], esriRelationPair, 'r' )),
    COMMETHOD([helpstring(u'Adds a relation pair at the specified position.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], esriRelationPair, 'r' )),
]
################################################################
## code template for IRelationResultArray implementation
##class IRelationResultArray_Impl(object):
##    @property
##    def Count(self):
##        u'The geometry count.'
##        #return Count
##
##    def Insert(self, Index, r):
##        u'Adds a relation pair at the specified position.'
##        #return 
##
##    def Remove(self, Index):
##        u'Removes the relation result at the specified position.'
##        #return 
##
##    @property
##    def Element(self, Index):
##        u'Returns the relation pair at the specified position.'
##        #return r
##
##    def RemoveAll(self):
##        u'Removes all relation pairs.'
##        #return 
##
##    def Add(self, r):
##        u'Adds a relation result.'
##        #return 
##


# values for enumeration 'esriSRUnitType'
esriSRUnit_Meter = 9001
esriSRUnit_GermanMeter = 9031
esriSRUnit_Foot = 9002
esriSRUnit_SurveyFoot = 9003
esriSRUnit_ClarkeFoot = 9005
esriSRUnit_Fathom = 9014
esriSRUnit_NauticalMile = 9030
esriSRUnit_SurveyChain = 9033
esriSRUnit_SurveyLink = 9034
esriSRUnit_SurveyMile = 9035
esriSRUnit_Kilometer = 9036
esriSRUnit_ClarkeYard = 9037
esriSRUnit_ClarkeChain = 9038
esriSRUnit_ClarkeLink = 9039
esriSRUnit_SearsYard = 9040
esriSRUnit_SearsFoot = 9041
esriSRUnit_SearsChain = 9042
esriSRUnit_SearsLink = 9043
esriSRUnit_Benoit1895A_Yard = 9050
esriSRUnit_Benoit1895A_Foot = 9051
esriSRUnit_Benoit1895A_Chain = 9052
esriSRUnit_Benoit1895A_Link = 9053
esriSRUnit_Benoit1895B_Yard = 9060
esriSRUnit_Benoit1895B_Foot = 9061
esriSRUnit_Benoit1895B_Chain = 9062
esriSRUnit_Benoit1895B_Link = 9063
esriSRUnit_IndianFoot = 9080
esriSRUnit_Indian1937Foot = 9081
esriSRUnit_Indian1962Foot = 9082
esriSRUnit_Indian1975Foot = 9083
esriSRUnit_IndianYard = 9084
esriSRUnit_Indian1937Yard = 9085
esriSRUnit_Indian1962Yard = 9086
esriSRUnit_Indian1975Yard = 9087
esriSRUnit_Foot1865 = 9070
esriSRUnit_Radian = 9101
esriSRUnit_Degree = 9102
esriSRUnit_ArcMinute = 9103
esriSRUnit_ArcSecond = 9104
esriSRUnit_Grad = 9105
esriSRUnit_Gon = 9106
esriSRUnit_Microradian = 9109
esriSRUnit_ArcMinuteCentesimal = 9112
esriSRUnit_ArcSecondCentesimal = 9113
esriSRUnit_Mil6400 = 9114
esriSRUnitType = c_int # enum
class NADCONTransformation(CoClass):
    u'Creates a NADCON-based transformation.'
    _reg_clsid_ = GUID('{D661941C-DA8A-11D3-9F60-00C04F6BDD7F}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
class IGridTransformation(IGeoTransformation):
    _case_insensitive_ = True
    u'Provides access to members that control the dataset name for a grid-based transformation.'
    _iid_ = GUID('{B807845E-DA8A-11D3-9F60-00C04F6BDD7F}')
    _idlflags_ = ['oleautomation']
NADCONTransformation._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ITransformationGEN, ITransformation, IGeoTransformation, IGridTransformation, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, ISpatialReferenceAuthority]


# values for enumeration 'esriGeometryError'
S_GEOMETRY_OK = 0
S_GEOMETRY_DEGENERATE = 513
S_GEOMETRY_HAS_NL_SEGMENTS = 563
S_GEOMETRY_DATUMCONVERSIONATTEMPTED = 583
S_GEOMETRY_EMPTY_GEOMETRY = 584
S_GEOMETRY_GEOMETRY_NOT_PROJECTED = 596
S_GEOMETRY_PROJECTION_HINT_CLIP_PCS_ONLY = 629
S_GEOMETRY_PROJECTION_HINT_CLIP_GCS_ONLY = 630
S_GEOMETRY_PROJECTION_HINT_CLIP_PCS_AND_GCS = 631
E_GEOMETRY_EMPTYGEOMETRY = 514
E_GEOMETRY_INCONSISTANT_PARAMS = 515
E_GEOMETRY_INVALID_RADIUS = 516
E_GEOMETRY_INVALID_CHORD = 517
E_GEOMETRY_NONENVELOPE = 518
E_GEOMETRY_NONPART = 519
E_GEOMETRY_ROTATEENVELOPE = 520
E_GEOMETRY_TRANSFORMENVELOPE = 521
E_GEOMETRY_WRONGTYPE = 522
E_GEOMETRY_UNKNOWNTYPE = 523
E_GEOMETRY_UNDERCONSTRAINED = 524
E_GEOMETRY_INVALID_ANGLE = 525
E_GEOMETRY_NONPATH = 526
E_GEOMETRY_NONSEGMENT = 527
E_GEOMETRY_NONPOINT = 528
E_GEOMETRY_INCONSISTANT_SPATIAL_REFERENCE = 533
E_GEOMETRY_PARTNOTFOUND = 535
E_GEOMETRY_NOTSIMPLE = 536
E_GEOMETRY_INTERIORPART = 537
E_GEOMETRY_BAD_SPLIT_DISTANCE = 540
E_GEOMETRY_NULL = 541
E_GEOMETRY_CANT_RESHAPE = 542
E_GEOMETRY_NONPOLYGON = 543
E_GEOMETRY_NONPOLYLINE = 544
E_GEOMETRY_NONGEOMETRY = 545
E_GEOMETRY_EQUAL_VERTEX_ATTRIBUTES = 547
E_GEOMETRY_CANT_QUERY_ON_VERTEX_ATTRIBUTES = 549
E_GEOMETRY_NO_VALID_VERTEX_ATTRIBUTES = 550
E_GEOMETRY_UNDEFINED_SPATIAL_REFERENCE = 551
E_GEOMETRY_INCONSISTANT_DIMENSIONS = 553
E_GEOMETRY_SIMPLIFYFAILED = 556
E_GEOMETRY_PROJECTDATUM = 558
E_GEOMETRY_FILLET_FAILED = 559
E_GEOMETRY_INVALID_AXES = 560
E_GEOMETRY_CANT_CUT_POLYGON = 561
E_GEOMETRY_BADRELATION = 562
E_GEOMETRY_NOT_Z_AWARE = 564
E_GEOMETRY_NOT_M_AWARE = 565
E_GEOMETRY_SEGMENTGRAPH_CANTLOAD = 566
E_GEOMETRY_SEGMENTGRAPH_CONSTRUCTERROR = 567
E_GEOMETRY_OUT_OF_BOUNDS = 568
E_GEOMETRY_INTERNALERROR = 569
E_GEOMETRY_TOOMANYPOINTS = 570
E_GEOMETRY_BUFFEROUTOFBOUNDS = 571
E_GEOMETRY_OUTOFMEMORY = 572
E_GEOMETRY_RELATIONSYNTAXERROR = 573
E_GEOMETRY_UNKNOWNERROR = 574
E_GEOMETRY_NOPENDINGMOVETO = 575
E_GEOMETRY_NOT_ID_AWARE = 576
E_GEOMETRY_ILLEGALWIN32EXPORT = 577
E_GEOMETRY_CONSTRUCTPOINTUNION = 578
E_GEOMETRY_BEZIER_EXTEND_EMBEDDED = 579
E_GEOMETRY_NOT_Z_SIMPLE = 580
E_GEOMETRY_NOT_M_SIMPLE = 581
E_GEOMETRY_INVALIDCONSTRUCTION = 582
E_GEOMETRY_NONMULTIPATCH = 585
E_GEOMETRY_UNDEFINEDRING = 586
E_GEOMETRY_INVALIDRINGTYPE = 587
E_GEOMETRY_AMBIGUOUSPARTTYPE = 588
E_GEOMETRY_INVALIDRINGORDER = 589
E_GEOMETRY_INVALIDCOUNT = 590
E_GEOMETRY_EXTERIORPART = 591
E_GEOMETRY_NONTRIANGLESTRIP = 592
E_GEOMETRY_NONTRIANGLEFAN = 593
E_GEOMETRY_NONVECTOR3D = 594
E_GEOMETRY_DEGENERATEGEOMETRY = 595
E_GEOMETRY_DUPLICATESEGMENTPOINTER = 597
E_GEOMETRY_INSUFFICIENT_CONTROLPOINTS = 598
E_GEOMETRY_NOT_BEZIERCURVES = 599
E_GEOMETRY_TRANSFORMATION_UNDEFINED = 600
E_GEOMETRY_SR_Z_MISMATCH = 601
E_GEOMETRY_SR_M_MISMATCH = 602
E_GEOMETRY_INPUT_TYPE_MISMATCH = 603
E_GEOMETRY_INPUT_TYPE_INCORRECT = 604
E_GEOMETRY_EDITED_REGIONS_OVERLAP = 605
E_GEOMETRY_PART_ZS_ARE_NAN = 606
E_GEOMETRY_CANNOT_EXTRAPOLATE_BY_SEGMENT = 607
E_GEOMETRY_EDITS_OVERLAP = 608
E_GEOMETRY_UNIT_CONVERSION = 609
E_GEOMETRY_BUFFER_DISTANCES = 610
E_GEOMETRY_OPERATION_CANCELLED = 611
E_GEOMETRY_WRONG_RELATION_AND_TYPE = 613
E_GEOMETRY_BUFFERCONSTRUCTION_INUSE = 614
E_GEOMETRY_BUFFERFAILURE = 615
E_GEOMETRY_TOLERANCE_TOO_LARGE_FOR_EXTENT = 616
E_GEOMETRY_BUFFER_INVALID_SIDE_OPTION = 617
E_GEOMETRY_BUFFER_INVALID_END_OPTION = 618
E_GEOMETRY_BUFFER_INVALID_BUFFER_DISTANCE = 619
E_GEOMETRY_AUTHORITY_TOO_LONG = 620
E_GEOMETRY_WKT_TOO_LONG = 621
E_GEOMETRY_PARAMETER_TOO_SMALL = 622
E_GEOMETRY_ZM_OUT_OF_BOUNDS = 623
E_GEOMETRY_Z_OUT_OF_BOUNDS = 624
E_GEOMETRY_M_OUT_OF_BOUNDS = 625
E_GEOMETRY_CANNOT_DO_3D_OPERATIONS_ON_CURVES = 626
E_GEOMETRY_NOT_SINGLEPART = 627
E_GEOMETRY_CANT_EVALUATE_RELATION_MATRIX = 628
E_GEOMETRY_BUFFER_INVOLVES_BOTH_POLES = 632
E_GEOMETRY_GEODESIC_BUFFER_COORD_OUT_OF_RANGE = 633
E_GEOMETRY_NO_CURVES_IN_JSON = 634
E_GEOMETRY_JSON_SYNTAX = 635
E_GEOMETRY_BUFFER_NEGATIVE_DISTANCE = 636
E_GEOMETRY_JSON_BAD_SHORTFORM_POINTS = 637
E_GEOMETRY_BUFFER_DISTANCE_ZERO = 638
esriGeometryError = c_int # enum
IPoint._methods_ = [
    COMMETHOD([helpstring(u'Returns the X and Y coordinates.')], HRESULT, 'QueryCoords',
              ( ['out'], POINTER(c_double), 'X' ),
              ( ['out'], POINTER(c_double), 'Y' )),
    COMMETHOD([helpstring(u'Sets the X and Y coordinates.')], HRESULT, 'PutCoords',
              ( [], c_double, 'X' ),
              ( [], c_double, 'Y' )),
    COMMETHOD(['propget', helpstring(u'The X coordinate.')], HRESULT, 'X',
              ( ['retval', 'out'], POINTER(c_double), 'X' )),
    COMMETHOD(['propput', helpstring(u'The X coordinate.')], HRESULT, 'X',
              ( [], c_double, 'X' )),
    COMMETHOD(['propget', helpstring(u'The Y coordinate.')], HRESULT, 'Y',
              ( ['retval', 'out'], POINTER(c_double), 'Y' )),
    COMMETHOD(['propput', helpstring(u'The Y coordinate.')], HRESULT, 'Y',
              ( [], c_double, 'Y' )),
    COMMETHOD(['propget', helpstring(u'The Z attribute.')], HRESULT, 'Z',
              ( ['retval', 'out'], POINTER(c_double), 'Z' )),
    COMMETHOD(['propput', helpstring(u'The Z attribute.')], HRESULT, 'Z',
              ( [], c_double, 'Z' )),
    COMMETHOD(['propget', helpstring(u'The measure attribute.')], HRESULT, 'M',
              ( ['retval', 'out'], POINTER(c_double), 'M' )),
    COMMETHOD(['propput', helpstring(u'The measure attribute.')], HRESULT, 'M',
              ( [], c_double, 'M' )),
    COMMETHOD(['propget', helpstring(u'The Point ID attribute.')], HRESULT, 'ID',
              ( ['retval', 'out'], POINTER(c_int), 'pointID' )),
    COMMETHOD(['propput', helpstring(u'The Point ID attribute.')], HRESULT, 'ID',
              ( [], c_int, 'pointID' )),
    COMMETHOD(['restricted', helpstring(u'Any attribute (coordinate), except X or Y.'), 'propget'], HRESULT, 'VertexAttribute',
              ( [], esriGeometryAttributes, 'attributeType' ),
              ( ['retval', 'out'], POINTER(c_double), 'attributeValue' )),
    COMMETHOD(['restricted', helpstring(u'Any attribute (coordinate), except X or Y.'), 'propput'], HRESULT, 'VertexAttribute',
              ( [], esriGeometryAttributes, 'attributeType' ),
              ( [], c_double, 'attributeValue' )),
    COMMETHOD([helpstring(u'Projects this point to the perimeter of the circle defined by radius and anchor.')], HRESULT, 'ConstrainDistance',
              ( [], c_double, 'constraintRadius' ),
              ( [], POINTER(IPoint), 'anchor' )),
    COMMETHOD([helpstring(u'Projects this point to the point on the infinite line defined by anchor and angle (in radians). If allowOpposite is true, then the point can also snap to angle + pi radians.')], HRESULT, 'ConstrainAngle',
              ( [], c_double, 'constraintAngle' ),
              ( [], POINTER(IPoint), 'anchor' ),
              ( [], VARIANT_BOOL, 'allowOpposite' )),
    COMMETHOD([helpstring(u"Compares X, Y, M, Z, ID of this point (in that order) with that of the other point. Returns -1 if this point's value is less, 1 if greater, and 0 otherwise. Useful for sorting a group of points.")], HRESULT, 'Compare',
              ( [], POINTER(IPoint), 'otherPoint' ),
              ( ['retval', 'out'], POINTER(c_int), 'result' )),
]
################################################################
## code template for IPoint implementation
##class IPoint_Impl(object):
##    def PutCoords(self, X, Y):
##        u'Sets the X and Y coordinates.'
##        #return 
##
##    def _get(self, attributeType):
##        u'Any attribute (coordinate), except X or Y.'
##        #return attributeValue
##    def _set(self, attributeType, attributeValue):
##        u'Any attribute (coordinate), except X or Y.'
##    VertexAttribute = property(_get, _set, doc = _set.__doc__)
##
##    def Compare(self, otherPoint):
##        u"Compares X, Y, M, Z, ID of this point (in that order) with that of the other point. Returns -1 if this point's value is less, 1 if greater, and 0 otherwise. Useful for sorting a group of points."
##        #return result
##
##    def ConstrainDistance(self, constraintRadius, anchor):
##        u'Projects this point to the perimeter of the circle defined by radius and anchor.'
##        #return 
##
##    def _get(self):
##        u'The measure attribute.'
##        #return M
##    def _set(self, M):
##        u'The measure attribute.'
##    M = property(_get, _set, doc = _set.__doc__)
##
##    def QueryCoords(self):
##        u'Returns the X and Y coordinates.'
##        #return X, Y
##
##    def ConstrainAngle(self, constraintAngle, anchor, allowOpposite):
##        u'Projects this point to the point on the infinite line defined by anchor and angle (in radians). If allowOpposite is true, then the point can also snap to angle + pi radians.'
##        #return 
##
##    def _get(self):
##        u'The Y coordinate.'
##        #return Y
##    def _set(self, Y):
##        u'The Y coordinate.'
##    Y = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The X coordinate.'
##        #return X
##    def _set(self, X):
##        u'The X coordinate.'
##    X = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The Z attribute.'
##        #return Z
##    def _set(self, Z):
##        u'The Z attribute.'
##    Z = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The Point ID attribute.'
##        #return pointID
##    def _set(self, pointID):
##        u'The Point ID attribute.'
##    ID = property(_get, _set, doc = _set.__doc__)
##

class Ray(CoClass):
    u'A 3D ray that begins at a point and extends infinitely along a line in one direction only.'
    _reg_clsid_ = GUID('{83A20D9D-1C70-11D4-9F5C-00C04F6BDF0D}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
Ray._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRay, IRay2, IGeometry, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]

class HARNTransformation(CoClass):
    u'Creates a HARN-based transformation.'
    _reg_clsid_ = GUID('{DF146878-DA8A-11D3-9F60-00C04F6BDD7F}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
HARNTransformation._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ITransformationGEN, ITransformation, IGeoTransformation, IGridTransformation, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, ISpatialReferenceAuthority]

class Line(CoClass):
    u'A 2D straight line between a pair of 2D endpoints; can optionally have height, measure and ID attributes at each endpoint.'
    _reg_clsid_ = GUID('{6F4E63E0-5AB4-11D0-A8F6-00608C85EDE5}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
class ILine3(ILine2):
    _case_insensitive_ = True
    u'Provides access to members that identify a straight line segment and defines its properties.'
    _iid_ = GUID('{80DAC471-F855-4934-884C-A812CF9A99BA}')
    _idlflags_ = ['oleautomation']
class IConstructLine(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that construct a line segment using other geometries and measures.'
    _iid_ = GUID('{199120B6-C677-11D0-8307-0000F8034032}')
    _idlflags_ = ['oleautomation']
Line._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ILine, ILine2, ILine3, IGeometry, ITransform2D, ICurve, ICurve2, ICurve3, ISegment, IConstructLine, IProximityOperator, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, ISegmentM, ISegmentZ, ISegmentID, ICurve3D, IProximityOperator3D]

IConstructPoint2._methods_ = [
    COMMETHOD([helpstring(u'Constructs the geometric average of the input point collection. Optionally uses the specified attribute as a source of weights on the locations of the points.')], HRESULT, 'ConstructAverage',
              ( [], POINTER(IPointCollection), 'Points' ),
              ( [], esriGeometryAttributes, 'attributeType' )),
]
################################################################
## code template for IConstructPoint2 implementation
##class IConstructPoint2_Impl(object):
##    def ConstructAverage(self, Points, attributeType):
##        u'Constructs the geometric average of the input point collection. Optionally uses the specified attribute as a source of weights on the locations of the points.'
##        #return 
##

IZ._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if at least two consecutive vertices of this polyline or polygon have the same x and y values, but distinct z values.')], HRESULT, 'ZVertical',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'ZVertical' )),
    COMMETHOD([helpstring(u'Use the specified functional surface to generate Z values for the vertices of this object.')], HRESULT, 'InterpolateFromSurface',
              ( [], POINTER(IFunctionalSurface), 'interpolationSurface' )),
    COMMETHOD([helpstring(u'Generate Z values by linear interpolation for all vertices in the range [start+1, end-1].')], HRESULT, 'InterpolateZsBetween',
              ( [], c_int, 'startPart' ),
              ( [], c_int, 'startPoint' ),
              ( [], c_int, 'endPart' ),
              ( [], c_int, 'endPoint' )),
    COMMETHOD([helpstring(u'Calculates the non-simple Z values by extrapolation/interpolation for polylines and interpolation for polygons.')], HRESULT, 'CalculateNonSimpleZs'),
    COMMETHOD([helpstring(u'Sets Z coordinates at all vertices to zLevel.')], HRESULT, 'SetConstantZ',
              ( [], c_double, 'zLevel' )),
]
################################################################
## code template for IZ implementation
##class IZ_Impl(object):
##    def InterpolateZsBetween(self, startPart, startPoint, endPart, endPoint):
##        u'Generate Z values by linear interpolation for all vertices in the range [start+1, end-1].'
##        #return 
##
##    def SetConstantZ(self, zLevel):
##        u'Sets Z coordinates at all vertices to zLevel.'
##        #return 
##
##    def CalculateNonSimpleZs(self):
##        u'Calculates the non-simple Z values by extrapolation/interpolation for polylines and interpolation for polygons.'
##        #return 
##
##    def InterpolateFromSurface(self, interpolationSurface):
##        u'Use the specified functional surface to generate Z values for the vertices of this object.'
##        #return 
##
##    @property
##    def ZVertical(self):
##        u'Indicates if at least two consecutive vertices of this polyline or polygon have the same x and y values, but distinct z values.'
##        #return ZVertical
##

IZ2._methods_ = [
    COMMETHOD([helpstring(u'Replaces undefined (nonsimple) Z values with the specified constant value.')], HRESULT, 'SetNonSimpleZs',
              ( [], c_double, 'zLevel' )),
]
################################################################
## code template for IZ2 implementation
##class IZ2_Impl(object):
##    def SetNonSimpleZs(self, zLevel):
##        u'Replaces undefined (nonsimple) Z values with the specified constant value.'
##        #return 
##

class ISegmentZ2(ISegmentZ):
    _case_insensitive_ = True
    u'Provides access to members that allow manipulations of segments with Zs.'
    _iid_ = GUID('{DF1F1E7D-6B8C-44C1-A005-92A8A56CB4CF}')
    _idlflags_ = ['oleautomation']
ISegmentZ._methods_ = [
    COMMETHOD([helpstring(u"Get the Zs on the segment's endpoints.")], HRESULT, 'GetZs',
              ( ['out'], POINTER(c_double), 'fromZ' ),
              ( ['out'], POINTER(c_double), 'toZ' )),
    COMMETHOD([helpstring(u"Set the Zs on the segment's endpoints.")], HRESULT, 'SetZs',
              ( [], c_double, 'fromZ' ),
              ( [], c_double, 'toZ' )),
]
################################################################
## code template for ISegmentZ implementation
##class ISegmentZ_Impl(object):
##    def SetZs(self, fromZ, toZ):
##        u"Set the Zs on the segment's endpoints."
##        #return 
##
##    def GetZs(self):
##        u"Get the Zs on the segment's endpoints."
##        #return fromZ, toZ
##

ISegmentZ2._methods_ = [
    COMMETHOD(['hidden', helpstring(u'Densify segment into the specified number of smaller segments. This method is intended for internal use only.')], HRESULT, 'Densify3D',
              ( [], c_int, 'cMaxSegments' ),
              ( [], c_double, 'maxDeviation' ),
              ( ['out'], POINTER(c_int), 'pcOutSegments' ),
              ( ['out'], POINTER(POINTER(ILine)), 'ppSegments' )),
    COMMETHOD(['restricted', helpstring(u'Returns the maximum distance from the line.')], HRESULT, 'MaxDistanceFromLine3D',
              ( [], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPointZ), 'pBaseFromZ' ),
              ( [], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPointZ), 'pBaseToZ' ),
              ( [], c_double, 'minOffset' ),
              ( [], c_double, 'fromArcDistance' ),
              ( [], c_double, 'toArcDistance' ),
              ( [], POINTER(c_double), 'pMaxOffset' ),
              ( [], POINTER(c_double), 'pAtArcDistance' ),
              ( [], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPointZ), 'pFarPointZ' )),
]
################################################################
## code template for ISegmentZ2 implementation
##class ISegmentZ2_Impl(object):
##    def Densify3D(self, cMaxSegments, maxDeviation):
##        u'Densify segment into the specified number of smaller segments. This method is intended for internal use only.'
##        #return pcOutSegments, ppSegments
##
##    def MaxDistanceFromLine3D(self, pBaseFromZ, pBaseToZ, minOffset, fromArcDistance, toArcDistance, pMaxOffset, pAtArcDistance, pFarPointZ):
##        u'Returns the maximum distance from the line.'
##        #return 
##

ICurve2._methods_ = [
    COMMETHOD([helpstring(u"Sets this segment's endpoints to 'from' and 'to'.")], HRESULT, 'PutCoordsEx',
              ( [], POINTER(IPoint), 'from' ),
              ( [], POINTER(IPoint), 'to' )),
]
################################################################
## code template for ICurve2 implementation
##class ICurve2_Impl(object):
##    def PutCoordsEx(self, from, to):
##        u"Sets this segment's endpoints to 'from' and 'to'."
##        #return 
##

class NTv2Transformation(CoClass):
    u'Creates a NTv2-based transformation.'
    _reg_clsid_ = GUID('{52B971E2-EBEC-11D4-9FD6-00C04F6BDD7F}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
NTv2Transformation._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ITransformationGEN, ITransformation, IGeoTransformation, IGridTransformation, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, ISpatialReferenceAuthority]

class LongitudeRotationTransformation(CoClass):
    u'Creates a longitude rotation transformation.'
    _reg_clsid_ = GUID('{6F3C0002-DA7F-11D3-9F60-00C04F6BDD7F}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
class ILongitudeRotationTransformation(IGeoTransformation):
    _case_insensitive_ = True
    u'Provides access to members that control the parameters of a longitude-rotation transformation.'
    _iid_ = GUID('{64C7C780-DA8B-11D3-9F60-00C04F6BDD7F}')
    _idlflags_ = ['oleautomation']
LongitudeRotationTransformation._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ITransformationGEN, ITransformation, IGeoTransformation, ILongitudeRotationTransformation, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, ISpatialReferenceAuthority]

ILine3._methods_ = [
    COMMETHOD([helpstring(u'Split segment at specified distance.')], HRESULT, 'SplitAtDistance3D',
              ( [], c_double, 'distances' ),
              ( [], VARIANT_BOOL, 'asRatio' ),
              ( ['out'], POINTER(POINTER(ISegment)), 'fromSegment' ),
              ( ['out'], POINTER(POINTER(ISegment)), 'toSegment' )),
    COMMETHOD(['restricted', helpstring(u'Gets the distance corresponding to the attribute value along the line.')], HRESULT, 'GetDistanceAtVertexAttribute3D',
              ( [], esriGeometryAttributes, 'attributeType' ),
              ( [], c_double, 'attributeValue' ),
              ( [], VARIANT_BOOL, 'asRatio' ),
              ( ['retval', 'out'], POINTER(c_double), 'distance' )),
    COMMETHOD(['restricted', helpstring(u'Gets the attribute value corresponding to the 3D distance along the line.')], HRESULT, 'GetVertexAttributeAtDistance3D',
              ( [], esriGeometryAttributes, 'attributeType' ),
              ( [], c_double, 'distance' ),
              ( [], VARIANT_BOOL, 'asRatio' ),
              ( ['retval', 'out'], POINTER(c_double), 'attributeValue' )),
]
################################################################
## code template for ILine3 implementation
##class ILine3_Impl(object):
##    def GetDistanceAtVertexAttribute3D(self, attributeType, attributeValue, asRatio):
##        u'Gets the distance corresponding to the attribute value along the line.'
##        #return distance
##
##    def SplitAtDistance3D(self, distances, asRatio):
##        u'Split segment at specified distance.'
##        #return fromSegment, toSegment
##
##    def GetVertexAttributeAtDistance3D(self, attributeType, distance, asRatio):
##        u'Gets the attribute value corresponding to the 3D distance along the line.'
##        #return attributeValue
##

ISpatialReferenceAuthority._methods_ = [
    COMMETHOD(['propget', helpstring(u'The name of the defining authority for this object.')], HRESULT, 'AuthorityName',
              ( ['retval', 'out'], POINTER(BSTR), 'pAuthName' )),
    COMMETHOD(['propget', helpstring(u'The version of this spatial reference object.')], HRESULT, 'Version',
              ( ['retval', 'out'], POINTER(BSTR), 'pVersion' )),
    COMMETHOD(['propget', helpstring(u'The code identifying this object relative to its authority. For the EPSG authority, this will initially be the WKID (factory code).')], HRESULT, 'Code',
              ( ['retval', 'out'], POINTER(c_int), 'pAuthCode' )),
    COMMETHOD([helpstring(u'Defines the authority-related metadata properties for this spatial reference object.')], HRESULT, 'Define',
              ( [], BSTR, 'AuthorityName' ),
              ( [], c_int, 'authorityCode' ),
              ( [], BSTR, 'authorityVersion' )),
]
################################################################
## code template for ISpatialReferenceAuthority implementation
##class ISpatialReferenceAuthority_Impl(object):
##    @property
##    def Code(self):
##        u'The code identifying this object relative to its authority. For the EPSG authority, this will initially be the WKID (factory code).'
##        #return pAuthCode
##
##    @property
##    def Version(self):
##        u'The version of this spatial reference object.'
##        #return pVersion
##
##    def Define(self, AuthorityName, authorityCode, authorityVersion):
##        u'Defines the authority-related metadata properties for this spatial reference object.'
##        #return 
##
##    @property
##    def AuthorityName(self):
##        u'The name of the defining authority for this object.'
##        #return pAuthName
##

IGeographicCoordinateSystem2._methods_ = [
    COMMETHOD([helpstring(u'Returns the 180 degrees equivalent and horizon delta in proper GCS units.')], HRESULT, 'GetGCSParams',
              ( ['out'], POINTER(c_double), 'p_180' ),
              ( ['out'], POINTER(c_double), 'pDelta' )),
    COMMETHOD([helpstring(u'Returns a standard horizon polygon, its envelope and whether it is inclusive or exclusive; the horizon polygon may be 0.')], HRESULT, 'GetHorizon',
              ( ['in', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSEnvelope), 'horizonEnvelope' )),
    COMMETHOD(['propget', helpstring(u'A factor to convert angular units from current GCS to destination GCS.')], HRESULT, 'AngularConversionFactor',
              ( [], POINTER(IGeographicCoordinateSystem2), 'pDstGCS' ),
              ( ['retval', 'out'], POINTER(c_double), 'pFactor' )),
    COMMETHOD(['propget', helpstring(u'The least (left) longitude bounding a 360 degree range.')], HRESULT, 'LeftLongitude',
              ( [], VARIANT_BOOL, 'inDegrees' ),
              ( ['retval', 'out'], POINTER(c_double), 'LeftLongitude' )),
    COMMETHOD(['propput', helpstring(u'The least (left) longitude bounding a 360 degree range.')], HRESULT, 'LeftLongitude',
              ( [], VARIANT_BOOL, 'inDegrees' ),
              ( [], c_double, 'LeftLongitude' )),
    COMMETHOD(['propget', helpstring(u'The greatest (right) longitude bounding a 360 degree range.')], HRESULT, 'RightLongitude',
              ( [], VARIANT_BOOL, 'inDegrees' ),
              ( ['retval', 'out'], POINTER(c_double), 'RightLongitude' )),
    COMMETHOD(['propput', helpstring(u'The greatest (right) longitude bounding a 360 degree range.')], HRESULT, 'RightLongitude',
              ( [], VARIANT_BOOL, 'inDegrees' ),
              ( [], c_double, 'RightLongitude' )),
    COMMETHOD(['propput', helpstring(u'Calculates a 360 degree longitude range from information in the specified envelope and the domain extent of the GCS.')], HRESULT, 'ExtentHint',
              ( [], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSEnvelope), 'rhs' )),
]
################################################################
## code template for IGeographicCoordinateSystem2 implementation
##class IGeographicCoordinateSystem2_Impl(object):
##    def _get(self, inDegrees):
##        u'The greatest (right) longitude bounding a 360 degree range.'
##        #return RightLongitude
##    def _set(self, inDegrees, RightLongitude):
##        u'The greatest (right) longitude bounding a 360 degree range.'
##    RightLongitude = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, inDegrees):
##        u'The least (left) longitude bounding a 360 degree range.'
##        #return LeftLongitude
##    def _set(self, inDegrees, LeftLongitude):
##        u'The least (left) longitude bounding a 360 degree range.'
##    LeftLongitude = property(_get, _set, doc = _set.__doc__)
##
##    def GetHorizon(self):
##        u'Returns a standard horizon polygon, its envelope and whether it is inclusive or exclusive; the horizon polygon may be 0.'
##        #return horizonEnvelope
##
##    def GetGCSParams(self):
##        u'Returns the 180 degrees equivalent and horizon delta in proper GCS units.'
##        #return p_180, pDelta
##
##    @property
##    def AngularConversionFactor(self, pDstGCS):
##        u'A factor to convert angular units from current GCS to destination GCS.'
##        #return pFactor
##
##    def _set(self, rhs):
##        u'Calculates a 360 degree longitude range from information in the specified envelope and the domain extent of the GCS.'
##    ExtentHint = property(fset = _set, doc = _set.__doc__)
##


# values for enumeration 'esriSRParameterType'
esriSRParameter_FalseEasting = 100001
esriSRParameter_FalseNorthing = 100002
esriSRParameter_ScaleFactor = 100003
esriSRParameter_Azimuth = 100004
esriSRParameter_CentralMeridian = 100010
esriSRParameter_LongitudeOfOrigin = 100011
esriSRParameter_LongitudeOfCenter = 100012
esriSRParameter_LongitudeOf1st = 100013
esriSRParameter_LongitudeOf2nd = 100014
esriSRParameter_CentralParallel = 100020
esriSRParameter_LatitudeOfOrigin = 100021
esriSRParameter_LatitudeOfCenter = 100022
esriSRParameter_StandardParallel1 = 100025
esriSRParameter_StandardParallel2 = 100026
esriSRParameter_LatitudeOf1st = 100023
esriSRParameter_LatitudeOf2nd = 100024
esriSRParameter_XAxisTranslation = 100040
esriSRParameter_YAxisTranslation = 100041
esriSRParameter_ZAxisTranslation = 100042
esriSRParameter_XAxisRotation = 100043
esriSRParameter_YAxisRotation = 100044
esriSRParameter_ZAxisRotation = 100045
esriSRParameter_ScaleDifference = 100046
esriSRParameter_NameDataset = 100047
esriSRParameter_ZShift = 100006
esriSRParameter_ZPositiveDirection = 100007
esriSRParameterType = c_int # enum
IGeocentricTranslation._methods_ = [
    COMMETHOD([helpstring(u'Returns the translation values in meters for the X, Y and Z axis.')], HRESULT, 'GetParameters',
              ( ['out'], POINTER(c_double), 'dx' ),
              ( ['out'], POINTER(c_double), 'dy' ),
              ( ['out'], POINTER(c_double), 'dz' )),
    COMMETHOD([helpstring(u'Sets the translation values in meters for the X, Y and Z axis.')], HRESULT, 'PutParameters',
              ( [], c_double, 'dx' ),
              ( [], c_double, 'dy' ),
              ( [], c_double, 'dz' )),
]
################################################################
## code template for IGeocentricTranslation implementation
##class IGeocentricTranslation_Impl(object):
##    def PutParameters(self, dx, dy, dz):
##        u'Sets the translation values in meters for the X, Y and Z axis.'
##        #return 
##
##    def GetParameters(self):
##        u'Returns the translation values in meters for the X, Y and Z axis.'
##        #return dx, dy, dz
##

IMSnap._methods_ = [
    COMMETHOD([helpstring(u'Snaps ms to the precision of the spatial reference associated with the geometry. M snapping does not happen automatically as part of calling IGeometry::SnapToSpatialReference.')], HRESULT, 'Snap'),
]
################################################################
## code template for IMSnap implementation
##class IMSnap_Impl(object):
##    def Snap(self):
##        u'Snaps ms to the precision of the spatial reference associated with the geometry. M snapping does not happen automatically as part of calling IGeometry::SnapToSpatialReference.'
##        #return 
##

class UnknownCoordinateSystem(CoClass):
    u'Creates an unknown coordinate system.'
    _reg_clsid_ = GUID('{B286C06B-0879-11D2-AACA-00C04FA33C20}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
class IUnknownCoordinateSystem(ISpatialReference):
    _case_insensitive_ = True
    u'Indicator interface that identifies an Unknown coordinate system.'
    _iid_ = GUID('{B6EA1E3B-15E5-11D2-AACD-00C04FA33C20}')
    _idlflags_ = ['oleautomation']
UnknownCoordinateSystem._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ISpatialReference2GEN, IESRISpatialReferenceGEN, IUnknownCoordinateSystem, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, ICompareCoordinateSystems, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, ISpatialReferenceInfo, ISpatialReference, ISpatialReference2, ISpatialReference4, IESRISpatialReference, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, IControlPrecision, IControlPrecision2, ISpatialReferenceTolerance, ISpatialReferenceResolution, IConstructUnknownCoordinateSystem]

IMSegmentation4._methods_ = [
    COMMETHOD([helpstring(u'Calibrates Ms of existing vertices using new Ms from the input points and the shortest 3D path distances along the polyline between those points. The update method is given as a combination of esriGeometryUpdateMEnum values.')], HRESULT, 'CalibrateByDistance3D',
              ( [], POINTER(IEnumVertex), 'Points' ),
              ( [], c_int, 'updateHow' ),
              ( [], VARIANT_BOOL, 'ignoreGaps' ),
              ( [], c_double, 'cutoffDistance' ),
              ( ['retval', 'out'], POINTER(POINTER(IEnumSplitPoint)), 'splitPoints' )),
    COMMETHOD([helpstring(u'Calibrates Ms of existing vertices using new Ms from the input points and existing Ms along the shortest 3D paths between those points. The update method is given as a combination of esriGeometryUpdateMEnum values.')], HRESULT, 'CalibrateByMs3D',
              ( [], POINTER(IEnumVertex), 'Points' ),
              ( [], c_int, 'updateHow' ),
              ( [], c_double, 'cutoffDistance' ),
              ( ['retval', 'out'], POINTER(POINTER(IEnumSplitPoint)), 'splitPoints' )),
    COMMETHOD([helpstring(u"Returns an array of 3D distances along the polyline at which is located the specified M. If the geometry's M's are monotonic along the geometry then the array will only have one element.")], HRESULT, 'GetDistancesAtM3D',
              ( [], VARIANT_BOOL, 'asRatio' ),
              ( [], c_double, 'M' ),
              ( ['retval', 'out'], POINTER(VARIANT), 'distances' )),
    COMMETHOD([helpstring(u'Returns M values at the 3D distance along the geometry. An array of one or two Ms is returned. Two Ms can be returned if the given distance is exactly at the beginning or ending of a part.')], HRESULT, 'GetMsAtDistance3D',
              ( [], c_double, 'distance' ),
              ( [], VARIANT_BOOL, 'asRatio' ),
              ( ['retval', 'out'], POINTER(VARIANT), 'ms' )),
    COMMETHOD([helpstring(u'Generates Ms by linear interpolation of 3D distances for all vertices in the range [start+1, end-1].')], HRESULT, 'InterpolateMsBetween3D',
              ( [], c_int, 'fromPart' ),
              ( [], c_int, 'FromPoint' ),
              ( [], c_int, 'toPart' ),
              ( [], c_int, 'ToPoint' )),
    COMMETHOD([helpstring(u'Sets the Ms at the beginning and the end of the geometry and interpolates the M values between these values based on an interpolation normalized to the 3D length of the shape.')], HRESULT, 'SetAndInterpolateMsBetween3D',
              ( [], c_double, 'fromM' ),
              ( [], c_double, 'toM' )),
    COMMETHOD([helpstring(u'Sets the M value at the given 3D distance along the geometry; creates a point at that distance if no point exists there.')], HRESULT, 'InsertMAtDistance3D',
              ( [], c_double, 'M' ),
              ( [], c_double, 'distance' ),
              ( [], VARIANT_BOOL, 'asRatio' ),
              ( [], VARIANT_BOOL, 'createPart' ),
              ( ['out'], POINTER(VARIANT_BOOL), 'SplitHappened' ),
              ( ['out'], POINTER(c_int), 'newPartIndex' ),
              ( ['out'], POINTER(c_int), 'newSegmentIndex' )),
    COMMETHOD([helpstring(u'Returns a multipoint geometry corresponding to the locations along the geometry where the specified M occurs.')], HRESULT, 'GetPointsAtM3D',
              ( [], c_double, 'M' ),
              ( ['in'], POINTER(IVector3D), 'Offset' ),
              ( ['retval', 'out'], POINTER(POINTER(IGeometryCollection)), 'result' )),
    COMMETHOD([helpstring(u'Returns a polyline geometry corresponding to the subcurve(s) between the fromM and the toM.')], HRESULT, 'GetSubcurveBetweenMs3D',
              ( [], c_double, 'fromM' ),
              ( [], c_double, 'toM' ),
              ( ['retval', 'out'], POINTER(POINTER(IGeometryCollection)), 'result' )),
    COMMETHOD([helpstring(u"Returns a polyline geometry corresponding to the subcurve(s) between the fromM and the toM values. The 'details' arguments are composed of esriMCurveRelationEnum values.")], HRESULT, 'GetSubcurveBetweenMsEx3D',
              ( [], c_double, 'fromM' ),
              ( [], c_double, 'toM' ),
              ( ['in', 'out'], POINTER(c_int), 'fromMDetails' ),
              ( ['in', 'out'], POINTER(c_int), 'toMDetails' ),
              ( ['retval', 'out'], POINTER(POINTER(IGeometryCollection)), 'result' )),
    COMMETHOD([helpstring(u'Extrapolates the Ms at one or both ends of the geometry based on the M interval between the fromIndex and the toIndex.')], HRESULT, 'ExtrapolateMs3D',
              ( [], esriExtrapolationEnum, 'extrapolationStyle' ),
              ( [], c_int, 'fromPart' ),
              ( [], c_int, 'FromPoint' ),
              ( [], c_int, 'toPart' ),
              ( [], c_int, 'ToPoint' )),
    COMMETHOD([helpstring(u'Sets the M values to the cumulative 3D length from the origin of the geometry.')], HRESULT, 'SetMsAsDistance3D',
              ( [], VARIANT_BOOL, 'asRatio' )),
]
################################################################
## code template for IMSegmentation4 implementation
##class IMSegmentation4_Impl(object):
##    def CalibrateByMs3D(self, Points, updateHow, cutoffDistance):
##        u'Calibrates Ms of existing vertices using new Ms from the input points and existing Ms along the shortest 3D paths between those points. The update method is given as a combination of esriGeometryUpdateMEnum values.'
##        #return splitPoints
##
##    def GetSubcurveBetweenMsEx3D(self, fromM, toM):
##        u"Returns a polyline geometry corresponding to the subcurve(s) between the fromM and the toM values. The 'details' arguments are composed of esriMCurveRelationEnum values."
##        #return fromMDetails, toMDetails, result
##
##    def GetSubcurveBetweenMs3D(self, fromM, toM):
##        u'Returns a polyline geometry corresponding to the subcurve(s) between the fromM and the toM.'
##        #return result
##
##    def GetPointsAtM3D(self, M, Offset):
##        u'Returns a multipoint geometry corresponding to the locations along the geometry where the specified M occurs.'
##        #return result
##
##    def InterpolateMsBetween3D(self, fromPart, FromPoint, toPart, ToPoint):
##        u'Generates Ms by linear interpolation of 3D distances for all vertices in the range [start+1, end-1].'
##        #return 
##
##    def GetMsAtDistance3D(self, distance, asRatio):
##        u'Returns M values at the 3D distance along the geometry. An array of one or two Ms is returned. Two Ms can be returned if the given distance is exactly at the beginning or ending of a part.'
##        #return ms
##
##    def SetMsAsDistance3D(self, asRatio):
##        u'Sets the M values to the cumulative 3D length from the origin of the geometry.'
##        #return 
##
##    def GetDistancesAtM3D(self, asRatio, M):
##        u"Returns an array of 3D distances along the polyline at which is located the specified M. If the geometry's M's are monotonic along the geometry then the array will only have one element."
##        #return distances
##
##    def SetAndInterpolateMsBetween3D(self, fromM, toM):
##        u'Sets the Ms at the beginning and the end of the geometry and interpolates the M values between these values based on an interpolation normalized to the 3D length of the shape.'
##        #return 
##
##    def ExtrapolateMs3D(self, extrapolationStyle, fromPart, FromPoint, toPart, ToPoint):
##        u'Extrapolates the Ms at one or both ends of the geometry based on the M interval between the fromIndex and the toIndex.'
##        #return 
##
##    def InsertMAtDistance3D(self, M, distance, asRatio, createPart):
##        u'Sets the M value at the given 3D distance along the geometry; creates a point at that distance if no point exists there.'
##        #return SplitHappened, newPartIndex, newSegmentIndex
##
##    def CalibrateByDistance3D(self, Points, updateHow, ignoreGaps, cutoffDistance):
##        u'Calibrates Ms of existing vertices using new Ms from the input points and the shortest 3D path distances along the polyline between those points. The update method is given as a combination of esriGeometryUpdateMEnum values.'
##        #return splitPoints
##

ILongitudeRotationTransformation._methods_ = [
    COMMETHOD(['propget', helpstring(u"Counterclockwise (looking down on North Pole) positive rotation about Earth's rotational axis.")], HRESULT, 'Rotation',
              ( ['retval', 'out'], POINTER(c_double), 'rz' )),
]
################################################################
## code template for ILongitudeRotationTransformation implementation
##class ILongitudeRotationTransformation_Impl(object):
##    @property
##    def Rotation(self):
##        u"Counterclockwise (looking down on North Pole) positive rotation about Earth's rotational axis."
##        #return rz
##

IEncode3DProperties._methods_ = [
    COMMETHOD([helpstring(u'Encodes a normal into part of a double. A normal and texture information can both be packed in a single double without conflict.')], HRESULT, 'PackNormal',
              ( ['in'], POINTER(IVector3D), 'normalVector' ),
              ( ['out'], POINTER(c_double), 'packedNormal' )),
    COMMETHOD([helpstring(u'Decodes a normal from a double.')], HRESULT, 'UnPackNormal',
              ( ['in'], c_double, 'packedNormal' ),
              ( ['in'], POINTER(IVector3D), 'normalVector' ),
              ( ['out'], POINTER(VARIANT_BOOL), 'wasProductive' )),
    COMMETHOD([helpstring(u'Encodes texture coordinates into part of a double. A normal and texture information can both be packed in a single double without conflict.')], HRESULT, 'PackTexture2D',
              ( ['in'], c_double, 'textureS' ),
              ( ['in'], c_double, 'textureT' ),
              ( ['out'], POINTER(c_double), 'packedTexture' )),
    COMMETHOD([helpstring(u'Decodes texture coordinates.')], HRESULT, 'UnPackTexture2D',
              ( ['in'], c_double, 'packedTextureST' ),
              ( ['out'], POINTER(c_double), 'textureS' ),
              ( ['out'], POINTER(c_double), 'textureT' ),
              ( ['out'], POINTER(VARIANT_BOOL), 'wasProductive' )),
]
################################################################
## code template for IEncode3DProperties implementation
##class IEncode3DProperties_Impl(object):
##    def PackNormal(self, normalVector):
##        u'Encodes a normal into part of a double. A normal and texture information can both be packed in a single double without conflict.'
##        #return packedNormal
##
##    def UnPackTexture2D(self, packedTextureST):
##        u'Decodes texture coordinates.'
##        #return textureS, textureT, wasProductive
##
##    def UnPackNormal(self, packedNormal, normalVector):
##        u'Decodes a normal from a double.'
##        #return wasProductive
##
##    def PackTexture2D(self, textureS, textureT):
##        u'Encodes texture coordinates into part of a double. A normal and texture information can both be packed in a single double without conflict.'
##        #return packedTexture
##

ITransformation3DGEN._methods_ = [
    COMMETHOD([helpstring(u'Resets the transformation to unit matrix.')], HRESULT, 'Reset'),
    COMMETHOD([helpstring(u'Adds an offset (move) to the transformation matrix.')], HRESULT, 'Translate',
              ( [], POINTER(IVector3D), 'offsetVector' )),
    COMMETHOD([helpstring(u'Adds a scaling factor to the transformation matrix.')], HRESULT, 'Scale',
              ( [], c_double, 'sx' ),
              ( [], c_double, 'sy' ),
              ( [], c_double, 'sz' )),
    COMMETHOD([helpstring(u'Adds a rotation in radians to the transformation matrix.')], HRESULT, 'Rotate',
              ( [], c_double, 'rotationAngle' ),
              ( [], POINTER(IVector3D), 'rotationAxis' )),
    COMMETHOD([helpstring(u'Post-multiplies the transformation by another transformation.')], HRESULT, 'PostMultiply',
              ( [], POINTER(ITransformation3D), 'postTransform' )),
    COMMETHOD([helpstring(u'Pre-multiplies the transformation by another transformation.')], HRESULT, 'PreMultiply',
              ( [], POINTER(ITransformation3D), 'preTransform' )),
    COMMETHOD([helpstring(u'Applies the current transformation to a set of points. Use of methods on ITransform3D is recommended instead of this method.')], HRESULT, 'Transform',
              ( ['in'], POINTER(_midlSAFEARRAY(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPointZ)), 'originalPoints' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPointZ)), 'transformedPoints' )),
]
################################################################
## code template for ITransformation3DGEN implementation
##class ITransformation3DGEN_Impl(object):
##    def Reset(self):
##        u'Resets the transformation to unit matrix.'
##        #return 
##
##    def PreMultiply(self, preTransform):
##        u'Pre-multiplies the transformation by another transformation.'
##        #return 
##
##    def Scale(self, sx, sy, sz):
##        u'Adds a scaling factor to the transformation matrix.'
##        #return 
##
##    def Transform(self, originalPoints):
##        u'Applies the current transformation to a set of points. Use of methods on ITransform3D is recommended instead of this method.'
##        #return transformedPoints
##
##    def PostMultiply(self, postTransform):
##        u'Post-multiplies the transformation by another transformation.'
##        #return 
##
##    def Rotate(self, rotationAngle, rotationAxis):
##        u'Adds a rotation in radians to the transformation matrix.'
##        #return 
##
##    def Translate(self, offsetVector):
##        u'Adds an offset (move) to the transformation matrix.'
##        #return 
##

class IBezierCurveGEN(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'OLE automation compatibility interface for IBezierCurve.'
    _iid_ = GUID('{64DE4FD4-6E85-41EF-8401-8BDE5E7BEAAB}')
    _idlflags_ = ['oleautomation']
IBezierCurveGEN._methods_ = [
    COMMETHOD([helpstring(u'Sets the existing elements of an existing safe array to be equal to the four control points of this bezier curve.')], HRESULT, 'QueryCoords',
              ( [], POINTER(_midlSAFEARRAY(POINTER(IPoint))), 'controlPoints' )),
    COMMETHOD([helpstring(u"Sets this Bezier curve's control points from an array of between 1 to 4 input points.")], HRESULT, 'PutCoords',
              ( ['in'], POINTER(_midlSAFEARRAY(POINTER(IPoint))), 'controlPoints' )),
    COMMETHOD([helpstring(u'Copies the specified control point of this Bezier curve into the input point.')], HRESULT, 'QueryCoord',
              ( [], c_int, 'Index' ),
              ( [], POINTER(IPoint), 'controlPoint' )),
    COMMETHOD([helpstring(u'Sets the specified (0 <= index < 4) control point of this Bezier curve.')], HRESULT, 'PutCoord',
              ( [], c_int, 'Index' ),
              ( [], POINTER(IPoint), 'controlPoint' )),
    COMMETHOD(['propget', helpstring(u'The degree of the Bezier curve.  For third degree Beziers, this is always 3.')], HRESULT, 'Degree',
              ( ['retval', 'out'], POINTER(c_int), 'Degree' )),
    COMMETHOD([helpstring(u"Returns tangent vector at 'from' point, based on chord length parametrization; and whether it has been set by user or by smoothing process.")], HRESULT, 'QueryChordLengthTangentAtFrom',
              ( [], POINTER(IPoint), 'tangent' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'setByUser' )),
    COMMETHOD([helpstring(u"Returns tangent vector at 'to' point, based on chord length parametrization; and whether it has been set by user or by smoothing process.")], HRESULT, 'QueryChordLengthTangentAtTo',
              ( [], POINTER(IPoint), 'tangent' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'setByUser' )),
    COMMETHOD([helpstring(u"Establishes tangent vector at 'from' point, based on chord length parametrization; and sets flag whether it has been set by user or by smoothing process.")], HRESULT, 'SetChordLengthTangentAtFrom',
              ( [], POINTER(IPoint), 'tangent' ),
              ( [], VARIANT_BOOL, 'setByUser' )),
    COMMETHOD([helpstring(u"Establishes tangent vector at 'to' point, based on chord length parametrization; and sets flag whether it has been set by user or by smoothing process.")], HRESULT, 'SetChordLengthTangentAtTo',
              ( [], POINTER(IPoint), 'tangent' ),
              ( [], VARIANT_BOOL, 'setByUser' )),
    COMMETHOD([helpstring(u'Finds inflection point; sets it empty if none exists.')], HRESULT, 'QueryInflectionPoint',
              ( [], POINTER(IPoint), 'inflectionPoint' )),
]
################################################################
## code template for IBezierCurveGEN implementation
##class IBezierCurveGEN_Impl(object):
##    def PutCoords(self, controlPoints):
##        u"Sets this Bezier curve's control points from an array of between 1 to 4 input points."
##        #return 
##
##    @property
##    def Degree(self):
##        u'The degree of the Bezier curve.  For third degree Beziers, this is always 3.'
##        #return Degree
##
##    def QueryInflectionPoint(self, inflectionPoint):
##        u'Finds inflection point; sets it empty if none exists.'
##        #return 
##
##    def QueryChordLengthTangentAtTo(self, tangent):
##        u"Returns tangent vector at 'to' point, based on chord length parametrization; and whether it has been set by user or by smoothing process."
##        #return setByUser
##
##    def SetChordLengthTangentAtTo(self, tangent, setByUser):
##        u"Establishes tangent vector at 'to' point, based on chord length parametrization; and sets flag whether it has been set by user or by smoothing process."
##        #return 
##
##    def QueryCoords(self, controlPoints):
##        u'Sets the existing elements of an existing safe array to be equal to the four control points of this bezier curve.'
##        #return 
##
##    def QueryCoord(self, Index, controlPoint):
##        u'Copies the specified control point of this Bezier curve into the input point.'
##        #return 
##
##    def SetChordLengthTangentAtFrom(self, tangent, setByUser):
##        u"Establishes tangent vector at 'from' point, based on chord length parametrization; and sets flag whether it has been set by user or by smoothing process."
##        #return 
##
##    def QueryChordLengthTangentAtFrom(self, tangent):
##        u"Returns tangent vector at 'from' point, based on chord length parametrization; and whether it has been set by user or by smoothing process."
##        #return setByUser
##
##    def PutCoord(self, Index, controlPoint):
##        u'Sets the specified (0 <= index < 4) control point of this Bezier curve.'
##        #return 
##

class IEnumPointAndDistance(IEnumVertex):
    _case_insensitive_ = True
    u'Provides access to members that iterate over the points on a geometry that are closest to an input point, as returned by QueryPointsAndDistances.'
    _iid_ = GUID('{EA7AB50C-1A9D-11D6-9FA9-00C04F6BDF0D}')
    _idlflags_ = ['oleautomation']
ICurve3._methods_ = [
    COMMETHOD([helpstring(u'Given an input point, calculates the minimum distance to the geometry and provides an enumerator over all closest points on the geometry, along with additional information.')], HRESULT, 'QueryPointsAndDistances',
              ( [], esriSegmentExtension, 'extension' ),
              ( [], c_double, 'searchRadius' ),
              ( ['in'], POINTER(IPoint), 'inPoint' ),
              ( [], VARIANT_BOOL, 'asRatio' ),
              ( ['in', 'out'], POINTER(c_double), 'distanceFromCurve' ),
              ( ['out'], POINTER(POINTER(IEnumPointAndDistance)), 'pointsAndDistances' )),
]
################################################################
## code template for ICurve3 implementation
##class ICurve3_Impl(object):
##    def QueryPointsAndDistances(self, extension, searchRadius, inPoint, asRatio):
##        u'Given an input point, calculates the minimum distance to the geometry and provides an enumerator over all closest points on the geometry, along with additional information.'
##        #return distanceFromCurve, pointsAndDistances
##

ITransformation3D._methods_ = [
    COMMETHOD([helpstring(u'Resets the transformation to unit matrix.')], HRESULT, 'Reset'),
    COMMETHOD([helpstring(u'Adds an offset (move) to the transformation matrix.')], HRESULT, 'Translate',
              ( [], POINTER(IVector3D), 'offsetVector' )),
    COMMETHOD([helpstring(u'Adds a scaling factor to the transformation matrix.')], HRESULT, 'Scale',
              ( [], c_double, 'sx' ),
              ( [], c_double, 'sy' ),
              ( [], c_double, 'sz' )),
    COMMETHOD([helpstring(u'Adds a rotation in radians to the transformation matrix.')], HRESULT, 'Rotate',
              ( [], c_double, 'rotationAngle' ),
              ( [], POINTER(IVector3D), 'rotationAxis' )),
    COMMETHOD([helpstring(u'Post-multiplies the transformation by another transformation.')], HRESULT, 'PostMultiply',
              ( [], POINTER(ITransformation3D), 'postTransform' )),
    COMMETHOD([helpstring(u'Pre-multiplies the transformation by another transformation.')], HRESULT, 'PreMultiply',
              ( [], POINTER(ITransformation3D), 'preTransform' )),
    COMMETHOD([helpstring(u'Applies the current transformation to a set of points. Use of methods on ITransform3D is recommended instead of this method.')], HRESULT, 'Transform',
              ( [], c_int, 'numPoints' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPointZ), 'originalPoints' ),
              ( ['out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPointZ), 'transformedPoints' )),
]
################################################################
## code template for ITransformation3D implementation
##class ITransformation3D_Impl(object):
##    def Reset(self):
##        u'Resets the transformation to unit matrix.'
##        #return 
##
##    def PreMultiply(self, preTransform):
##        u'Pre-multiplies the transformation by another transformation.'
##        #return 
##
##    def Scale(self, sx, sy, sz):
##        u'Adds a scaling factor to the transformation matrix.'
##        #return 
##
##    def Transform(self, numPoints, originalPoints):
##        u'Applies the current transformation to a set of points. Use of methods on ITransform3D is recommended instead of this method.'
##        #return transformedPoints
##
##    def PostMultiply(self, postTransform):
##        u'Post-multiplies the transformation by another transformation.'
##        #return 
##
##    def Rotate(self, rotationAngle, rotationAxis):
##        u'Adds a rotation in radians to the transformation matrix.'
##        #return 
##
##    def Translate(self, offsetVector):
##        u'Adds an offset (move) to the transformation matrix.'
##        #return 
##

class Envelope(CoClass):
    u'A rectangle with sides parallel to a coordinate system defining the extent of another geometry; optionally has min and max measure, height and ID attributes.'
    _reg_clsid_ = GUID('{30707212-52D5-11D0-A8F2-00608C85EDE5}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
class IEnvelopeGEN(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'OLE Automation compatibility interface for IEnvelope.'
    _iid_ = GUID('{AD6492FA-8902-4D83-ACD1-418F476B306F}')
    _idlflags_ = ['oleautomation']
class IEnvelope2(IEnvelope):
    _case_insensitive_ = True
    u'Provides access to members that extend the IEnvelope interface.'
    _iid_ = GUID('{6B256ADF-1CDE-11D4-9F5C-00C04F6BDF0D}')
    _idlflags_ = []
class IEnvelope3D(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to methods on 3D envelopes.'
    _iid_ = GUID('{2EAA6EDB-3E14-49F6-A2D4-0F17AD91F4AE}')
    _idlflags_ = []
Envelope._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IEnvelopeGEN, IEnvelope, IEnvelope2, IEnvelope4, IMAware, IZAware, IGeometry, IGeometry2, IGeometry3, IGeometry4, IGeometry5, IArea, IArea3D, IVolume, IProximityOperator, ITransform2D, IRelationalOperator, IRelationalOperator2, IHitTest, IHitTest3D, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, IProximityOperator3D, IRelationalOperator3D, IRelationalOperator3D2, IEnvelope3D]

IEnvelope2._methods_ = [
    COMMETHOD([helpstring(u'Sets the minimum and maximum Z values simultaneously.')], HRESULT, 'PutZCoords',
              ( [], c_double, 'ZMin' ),
              ( [], c_double, 'ZMax' )),
    COMMETHOD([helpstring(u'Queries the minimum and maximum Z values simultaneously.')], HRESULT, 'QueryZCoords',
              ( ['out'], POINTER(c_double), 'ZMin' ),
              ( ['out'], POINTER(c_double), 'ZMax' )),
    COMMETHOD([helpstring(u'Sets the minimum and maximum M values simultaneously.')], HRESULT, 'PutMCoords',
              ( [], c_double, 'MMin' ),
              ( [], c_double, 'MMax' )),
    COMMETHOD([helpstring(u'Queries the minimum and maximum M values simultaneously.')], HRESULT, 'QueryMCoords',
              ( ['out'], POINTER(c_double), 'MMin' ),
              ( ['out'], POINTER(c_double), 'MMax' )),
]
################################################################
## code template for IEnvelope2 implementation
##class IEnvelope2_Impl(object):
##    def QueryZCoords(self):
##        u'Queries the minimum and maximum Z values simultaneously.'
##        #return ZMin, ZMax
##
##    def PutZCoords(self, ZMin, ZMax):
##        u'Sets the minimum and maximum Z values simultaneously.'
##        #return 
##
##    def PutMCoords(self, MMin, MMax):
##        u'Sets the minimum and maximum M values simultaneously.'
##        #return 
##
##    def QueryMCoords(self):
##        u'Queries the minimum and maximum M values simultaneously.'
##        #return MMin, MMax
##

IGeographicCoordinateSystemEdit._methods_ = [
    COMMETHOD(['hidden', helpstring(u'Defines the properties for a geographic coordinate system.')], HRESULT, 'DefineEx',
              ( [], BSTR, 'Name' ),
              ( [], BSTR, 'Alias' ),
              ( [], BSTR, 'Abbreviation' ),
              ( [], BSTR, 'Remarks' ),
              ( [], BSTR, 'useage' ),
              ( [], POINTER(IDatum), 'Datum' ),
              ( [], POINTER(IPrimeMeridian), 'PrimeMeridian' ),
              ( [], POINTER(IAngularUnit), 'geographicUnit' )),
    COMMETHOD([helpstring(u'Defines the properties for a geographic coordinate system.')], HRESULT, 'Define',
              ( ['optional'], POINTER(VARIANT), 'Name' ),
              ( ['optional'], POINTER(VARIANT), 'Alias' ),
              ( ['optional'], POINTER(VARIANT), 'Abbreviation' ),
              ( ['optional'], POINTER(VARIANT), 'Remarks' ),
              ( ['optional'], POINTER(VARIANT), 'useage' ),
              ( ['optional'], POINTER(VARIANT), 'Datum' ),
              ( ['optional'], POINTER(VARIANT), 'PrimeMeridian' ),
              ( ['optional'], POINTER(VARIANT), 'geographicUnit' )),
]
################################################################
## code template for IGeographicCoordinateSystemEdit implementation
##class IGeographicCoordinateSystemEdit_Impl(object):
##    def DefineEx(self, Name, Alias, Abbreviation, Remarks, useage, Datum, PrimeMeridian, geographicUnit):
##        u'Defines the properties for a geographic coordinate system.'
##        #return 
##
##    def Define(self, Name, Alias, Abbreviation, Remarks, useage, Datum, PrimeMeridian, geographicUnit):
##        u'Defines the properties for a geographic coordinate system.'
##        #return 
##

ICurve3D._methods_ = [
    COMMETHOD(['propget', helpstring(u'The length of the curve.')], HRESULT, 'Length3D',
              ( ['retval', 'out'], POINTER(c_double), 'pLength' )),
    COMMETHOD([helpstring(u'Copies to outPoint the properties of a point on the curve at a specified distance from the beginning of the curve.')], HRESULT, 'QueryPoint3D',
              ( [], esriSegmentExtension, 'extension' ),
              ( [], c_double, 'DistanceAlongCurve' ),
              ( [], VARIANT_BOOL, 'bAsRatio' ),
              ( [], POINTER(IPoint), 'pOutPoint' )),
    COMMETHOD([helpstring(u'Extracts a portion of this curve into a new curve.')], HRESULT, 'GetSubcurve3D',
              ( [], c_double, 'fromDistance' ),
              ( [], c_double, 'toDistance' ),
              ( [], VARIANT_BOOL, 'bAsRatio' ),
              ( ['out'], POINTER(POINTER(ICurve3D)), 'ppOutSubCurve' )),
    COMMETHOD([helpstring(u'Finds the point on the curve closest to inPoint, then copies that point to outPoint; optionally calculates related items.')], HRESULT, 'QueryPointAndDistance3D',
              ( [], esriSegmentExtension, 'extension' ),
              ( [], POINTER(IPoint), 'pInPoint' ),
              ( [], VARIANT_BOOL, 'bAsRatio' ),
              ( [], POINTER(IPoint), 'pOutPoint' ),
              ( ['in', 'out'], POINTER(c_double), 'pDistanceAlongCurve' ),
              ( ['in', 'out'], POINTER(c_double), 'pDistanceFromCurve' )),
    COMMETHOD(['propget', helpstring(u"Indicates if 'from' and 'to' points (of each part) are identical.")], HRESULT, 'IsClosed3D',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsClosed' )),
]
################################################################
## code template for ICurve3D implementation
##class ICurve3D_Impl(object):
##    @property
##    def Length3D(self):
##        u'The length of the curve.'
##        #return pLength
##
##    def QueryPoint3D(self, extension, DistanceAlongCurve, bAsRatio, pOutPoint):
##        u'Copies to outPoint the properties of a point on the curve at a specified distance from the beginning of the curve.'
##        #return 
##
##    @property
##    def IsClosed3D(self):
##        u"Indicates if 'from' and 'to' points (of each part) are identical."
##        #return IsClosed
##
##    def QueryPointAndDistance3D(self, extension, pInPoint, bAsRatio, pOutPoint):
##        u'Finds the point on the curve closest to inPoint, then copies that point to outPoint; optionally calculates related items.'
##        #return pDistanceAlongCurve, pDistanceFromCurve
##
##    def GetSubcurve3D(self, fromDistance, toDistance, bAsRatio):
##        u'Extracts a portion of this curve into a new curve.'
##        #return ppOutSubCurve
##

class IControlPrecision3(IControlPrecision2):
    _case_insensitive_ = True
    u'IControlPrecision3 interface.'
    _iid_ = GUID('{2FBCD817-02BC-489C-9E91-BA53284B0AB3}')
    _idlflags_ = ['restricted']
IControlPrecision3._methods_ = [
    COMMETHOD(['propget'], HRESULT, 'PrecisionLocked',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbPrecisionLocked' )),
    COMMETHOD(['propput'], HRESULT, 'PrecisionLocked',
              ( ['in'], VARIANT_BOOL, 'pbPrecisionLocked' )),
]
################################################################
## code template for IControlPrecision3 implementation
##class IControlPrecision3_Impl(object):
##    def _get(self):
##        '-no docstring-'
##        #return pbPrecisionLocked
##    def _set(self, pbPrecisionLocked):
##        '-no docstring-'
##    PrecisionLocked = property(_get, _set, doc = _set.__doc__)
##

IEnumIntersection._methods_ = [
    COMMETHOD([helpstring(u'Not currently used.')], HRESULT, 'Next',
              ( ['out'], POINTER(c_double), 'distance' ),
              ( ['out'], POINTER(POINTER(IPoint)), 'Point' )),
    COMMETHOD([helpstring(u'Not currently used.')], HRESULT, 'QueryNext',
              ( [], c_int, 'numWanted' ),
              ( ['out'], POINTER(c_int), 'numGotten' ),
              ( [], POINTER(c_double), 'distances' ),
              ( [], POINTER(POINTER(IPoint)), 'Points' )),
    COMMETHOD([helpstring(u'Not currently used.')], HRESULT, 'Clone',
              ( ['retval', 'out'], POINTER(POINTER(IEnumIntersection)), 'outEnumerator' )),
    COMMETHOD([helpstring(u'Not currently used.')], HRESULT, 'Reset'),
]
################################################################
## code template for IEnumIntersection implementation
##class IEnumIntersection_Impl(object):
##    def Reset(self):
##        u'Not currently used.'
##        #return 
##
##    def Clone(self):
##        u'Not currently used.'
##        #return outEnumerator
##
##    def QueryNext(self, numWanted, distances, Points):
##        u'Not currently used.'
##        #return numGotten
##
##    def Next(self):
##        u'Not currently used.'
##        #return distance, Point
##

class IPartIDAware(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Indicator interface that identifies geometries that can have part IDs.'
    _iid_ = GUID('{97FD6869-D4FE-11D3-9F50-00C04F6BDF0D}')
    _idlflags_ = ['oleautomation']
IPartIDAware._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if this geometry is aware of part IDs.')], HRESULT, 'PartIDAware',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'idAware' )),
    COMMETHOD(['propput', helpstring(u'Indicates if this geometry is aware of part IDs.')], HRESULT, 'PartIDAware',
              ( [], VARIANT_BOOL, 'idAware' )),
    COMMETHOD(['propget', helpstring(u'Indicates if all part ID values for this geometry are well-defined. Only works if geometry is aware of part IDs.')], HRESULT, 'PartIDSimple',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'idSimple' )),
    COMMETHOD([helpstring(u'Unsets all part ID values without changing awareness. Only works if geometry is aware of part IDs.')], HRESULT, 'DropPartIDs'),
]
################################################################
## code template for IPartIDAware implementation
##class IPartIDAware_Impl(object):
##    def _get(self):
##        u'Indicates if this geometry is aware of part IDs.'
##        #return idAware
##    def _set(self, idAware):
##        u'Indicates if this geometry is aware of part IDs.'
##    PartIDAware = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def PartIDSimple(self):
##        u'Indicates if all part ID values for this geometry are well-defined. Only works if geometry is aware of part IDs.'
##        #return idSimple
##
##    def DropPartIDs(self):
##        u'Unsets all part ID values without changing awareness. Only works if geometry is aware of part IDs.'
##        #return 
##


# values for enumeration 'esriProjectionHint'
esriProjectionHintNoHorizonCheck = 0
esriProjectionHintCheckPCSHorizon = 1
esriProjectionHintCheckGCSHorizon = 2
esriProjectionHintFindGeoTransformation = 4
esriProjectionHintDefault = 7
esriProjectionHintExplore = 8
esriProjectionHintDoNotProject = 16
esriProjectionHintForceSplittingInGCS = 32
esriProjectionHintSetEmpty = 64
esriProjectionHint = c_int # enum
IEnumPointAndDistance._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates whether the current point and the previous point lie on a circular arc with the query point at its center.')], HRESULT, 'ContinuousSectionBefore',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'ContinuousSectionBefore' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the current point and the next point lie on a circular arc with the query point at its center.')], HRESULT, 'ContinuousSectionAfter',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'ContinuousSectionAfter' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the query point is to the right of the curve at the current position.')], HRESULT, 'OnRightSide',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'OnRightSide' )),
    COMMETHOD(['propget', helpstring(u"Gives the distance along the curve from the curve's from point to the current postion.")], HRESULT, 'DistanceAlongCurve',
              ( ['retval', 'out'], POINTER(c_double), 'distanceAlong' )),
]
################################################################
## code template for IEnumPointAndDistance implementation
##class IEnumPointAndDistance_Impl(object):
##    @property
##    def ContinuousSectionAfter(self):
##        u'Indicates whether the current point and the next point lie on a circular arc with the query point at its center.'
##        #return ContinuousSectionAfter
##
##    @property
##    def DistanceAlongCurve(self):
##        u"Gives the distance along the curve from the curve's from point to the current postion."
##        #return distanceAlong
##
##    @property
##    def ContinuousSectionBefore(self):
##        u'Indicates whether the current point and the previous point lie on a circular arc with the query point at its center.'
##        #return ContinuousSectionBefore
##
##    @property
##    def OnRightSide(self):
##        u'Indicates whether the query point is to the right of the curve at the current position.'
##        #return OnRightSide
##

class IConstructCircularArc(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that construct a circular arc using other geometries and values.'
    _iid_ = GUID('{91B6F492-C70A-11D0-8307-0000F8034032}')
    _idlflags_ = ['oleautomation']
IConstructCircularArc._methods_ = [
    COMMETHOD([helpstring(u'Constructs an arc from the given endpoints and radius.')], HRESULT, 'ConstructEndPointsRadius',
              ( [], POINTER(IPoint), 'from' ),
              ( [], POINTER(IPoint), 'to' ),
              ( [], VARIANT_BOOL, 'isCCW' ),
              ( [], c_double, 'inRadius' ),
              ( [], VARIANT_BOOL, 'IsMinor' )),
    COMMETHOD([helpstring(u'Constructs an arc from the given endpoints and central angle.')], HRESULT, 'ConstructEndPointsAngle',
              ( [], POINTER(IPoint), 'from' ),
              ( [], POINTER(IPoint), 'to' ),
              ( [], VARIANT_BOOL, 'isCCW' ),
              ( [], c_double, 'CentralAngle' )),
    COMMETHOD([helpstring(u'Constructs an arc from the given endpoints and arc distance.')], HRESULT, 'ConstructEndPointsArc',
              ( [], POINTER(IPoint), 'from' ),
              ( [], POINTER(IPoint), 'to' ),
              ( [], VARIANT_BOOL, 'isCCW' ),
              ( [], c_double, 'arcDistance' )),
    COMMETHOD([helpstring(u'Constructs an arc from the given endpoints and tangent distance.')], HRESULT, 'ConstructEndPointsTangent',
              ( [], POINTER(IPoint), 'from' ),
              ( [], POINTER(IPoint), 'to' ),
              ( [], VARIANT_BOOL, 'isCCW' ),
              ( [], c_double, 'tangentDistance' )),
    COMMETHOD([helpstring(u'Constructs an arc from a center point, a starting point, and an arc length.')], HRESULT, 'ConstructArcDistance',
              ( [], POINTER(IPoint), 'Center' ),
              ( [], POINTER(IPoint), 'from' ),
              ( [], VARIANT_BOOL, 'isCCW' ),
              ( [], c_double, 'arcDistance' )),
    COMMETHOD([helpstring(u'Constructs an arc from a center point, a starting point, and a chord length.')], HRESULT, 'ConstructChordDistance',
              ( [], POINTER(IPoint), 'Center' ),
              ( [], POINTER(IPoint), 'from' ),
              ( [], VARIANT_BOOL, 'isCCW' ),
              ( [], c_double, 'chordDistance' )),
    COMMETHOD([helpstring(u'Constructs an arc from a center point, a starting point, and an tangent length.')], HRESULT, 'ConstructTangentDistance',
              ( [], POINTER(IPoint), 'Center' ),
              ( [], POINTER(IPoint), 'from' ),
              ( [], VARIANT_BOOL, 'isCCW' ),
              ( [], c_double, 'tangentDistance' )),
    COMMETHOD([helpstring(u'Constructs an arc having a common tangent to the input segment, a given radius and an arc length.')], HRESULT, 'ConstructTangentRadiusArc',
              ( [], POINTER(ISegment), 'Segment' ),
              ( [], VARIANT_BOOL, 'atStart' ),
              ( [], VARIANT_BOOL, 'isCCW' ),
              ( [], c_double, 'inRadius' ),
              ( [], c_double, 'arcDistance' )),
    COMMETHOD([helpstring(u'Constructs an arc with a common tangent to the input segment, a given radius and a chord length.')], HRESULT, 'ConstructTangentRadiusChord',
              ( [], POINTER(ISegment), 'Segment' ),
              ( [], VARIANT_BOOL, 'atStart' ),
              ( [], VARIANT_BOOL, 'isCCW' ),
              ( [], c_double, 'inRadius' ),
              ( [], c_double, 'chordDistance' )),
    COMMETHOD([helpstring(u'Constructs an arc with a common tangent to the input segment, a given radius and a tangent length.')], HRESULT, 'ConstructTangentRadiusTangent',
              ( [], POINTER(ISegment), 'Segment' ),
              ( [], VARIANT_BOOL, 'atStart' ),
              ( [], VARIANT_BOOL, 'isCCW' ),
              ( [], c_double, 'inRadius' ),
              ( [], c_double, 'tangentDistance' )),
    COMMETHOD([helpstring(u'Constructs an arc with a common tangent to the input segment, a given radius and a central angle.')], HRESULT, 'ConstructTangentRadiusAngle',
              ( [], POINTER(ISegment), 'Segment' ),
              ( [], VARIANT_BOOL, 'atStart' ),
              ( [], VARIANT_BOOL, 'isCCW' ),
              ( [], c_double, 'inRadius' ),
              ( [], c_double, 'CentralAngle' )),
    COMMETHOD([helpstring(u'Constructs an arc with a common tangent to the input segment, a given central angle and an arc length.')], HRESULT, 'ConstructTangentAngleArc',
              ( [], POINTER(ISegment), 'Segment' ),
              ( [], VARIANT_BOOL, 'atStart' ),
              ( [], VARIANT_BOOL, 'isCCW' ),
              ( [], c_double, 'CentralAngle' ),
              ( [], c_double, 'arcDistance' )),
    COMMETHOD([helpstring(u'Constructs an arc with a common tangent to the input segment, a given central angle and a chord length.')], HRESULT, 'ConstructTangentAngleChord',
              ( [], POINTER(ISegment), 'Segment' ),
              ( [], VARIANT_BOOL, 'atStart' ),
              ( [], VARIANT_BOOL, 'isCCW' ),
              ( [], c_double, 'CentralAngle' ),
              ( [], c_double, 'chordDistance' )),
    COMMETHOD([helpstring(u'Constructs an arc with a common tangent to the input segment, a given central angle and a tangent length.')], HRESULT, 'ConstructTangentAngleTangent',
              ( [], POINTER(ISegment), 'Segment' ),
              ( [], VARIANT_BOOL, 'atStart' ),
              ( [], VARIANT_BOOL, 'isCCW' ),
              ( [], c_double, 'CentralAngle' ),
              ( [], c_double, 'tangentDistance' )),
    COMMETHOD([helpstring(u'Constructs an arc with a common tangent to the input segment, a given chord length and an arc length.')], HRESULT, 'ConstructTangentChordArc',
              ( [], POINTER(ISegment), 'Segment' ),
              ( [], VARIANT_BOOL, 'atStart' ),
              ( [], VARIANT_BOOL, 'isCCW' ),
              ( [], c_double, 'chordDistance' ),
              ( [], c_double, 'arcDistance' )),
    COMMETHOD([helpstring(u'Constructs an arc with a common tangent to input segment, a given chord length and a tangent length.')], HRESULT, 'ConstructTangentChordTangent',
              ( [], POINTER(ISegment), 'Segment' ),
              ( [], VARIANT_BOOL, 'atStart' ),
              ( [], VARIANT_BOOL, 'isCCW' ),
              ( [], c_double, 'chordDistance' ),
              ( [], c_double, 'tangentDistance' )),
    COMMETHOD([helpstring(u'Constructs an arc with a common tangent to the input segment, a given arc length and a tangent length.')], HRESULT, 'ConstructTangentArcTangent',
              ( [], POINTER(ISegment), 'Segment' ),
              ( [], VARIANT_BOOL, 'atStart' ),
              ( [], VARIANT_BOOL, 'isCCW' ),
              ( [], c_double, 'arcDistance' ),
              ( [], c_double, 'tangentDistance' )),
    COMMETHOD([helpstring(u'Constructs an arc with the given chord bearing, radius and central angle.')], HRESULT, 'ConstructBearingRadiusAngle',
              ( [], POINTER(IPoint), 'startPoint' ),
              ( [], c_double, 'inAngle' ),
              ( [], VARIANT_BOOL, 'isCCW' ),
              ( [], c_double, 'inRadius' ),
              ( [], c_double, 'CentralAngle' )),
    COMMETHOD([helpstring(u'Constructs an arc with the given chord bearing, radius and arc distance.')], HRESULT, 'ConstructBearingRadiusArc',
              ( [], POINTER(IPoint), 'from' ),
              ( [], c_double, 'inAngle' ),
              ( [], VARIANT_BOOL, 'isCCW' ),
              ( [], c_double, 'inRadius' ),
              ( [], c_double, 'arcDistance' )),
    COMMETHOD([helpstring(u'Constructs an arc with the given chord bearing, radius and chord distance.')], HRESULT, 'ConstructBearingRadiusChord',
              ( [], POINTER(IPoint), 'from' ),
              ( [], c_double, 'inAngle' ),
              ( [], VARIANT_BOOL, 'isCCW' ),
              ( [], c_double, 'inRadius' ),
              ( [], c_double, 'chordDistance' ),
              ( [], VARIANT_BOOL, 'IsMinor' )),
    COMMETHOD([helpstring(u'Constructs an arc with the given chord bearing, radius and tangent distance.')], HRESULT, 'ConstructBearingRadiusTangent',
              ( [], POINTER(IPoint), 'from' ),
              ( [], c_double, 'inAngle' ),
              ( [], VARIANT_BOOL, 'isCCW' ),
              ( [], c_double, 'inRadius' ),
              ( [], c_double, 'tangentDistance' )),
    COMMETHOD([helpstring(u'Constructs an arc with the given chord bearing, central angle and arc distance.')], HRESULT, 'ConstructBearingAngleArc',
              ( [], POINTER(IPoint), 'from' ),
              ( [], c_double, 'inAngle' ),
              ( [], VARIANT_BOOL, 'isCCW' ),
              ( [], c_double, 'CentralAngle' ),
              ( [], c_double, 'arcDistance' )),
    COMMETHOD([helpstring(u'Constructs an arc with the given chord bearing, central angle and chord distance.')], HRESULT, 'ConstructBearingAngleChord',
              ( [], POINTER(IPoint), 'from' ),
              ( [], c_double, 'inAngle' ),
              ( [], VARIANT_BOOL, 'isCCW' ),
              ( [], c_double, 'CentralAngle' ),
              ( [], c_double, 'chordDistance' )),
    COMMETHOD([helpstring(u'Constructs an arc with the given chord bearing, central angle and tangent distance.')], HRESULT, 'ConstructBearingAngleTangent',
              ( [], POINTER(IPoint), 'from' ),
              ( [], c_double, 'inAngle' ),
              ( [], VARIANT_BOOL, 'isCCW' ),
              ( [], c_double, 'CentralAngle' ),
              ( [], c_double, 'tangentDistance' )),
    COMMETHOD([helpstring(u'Constructs an arc with the given chord bearing, chord distance and arc distance (negative for clockwise orientation).')], HRESULT, 'ConstructBearingChordArc',
              ( [], POINTER(IPoint), 'from' ),
              ( [], c_double, 'inAngle' ),
              ( [], VARIANT_BOOL, 'isCCW' ),
              ( [], c_double, 'chordDistance' ),
              ( [], c_double, 'arcDistance' )),
    COMMETHOD([helpstring(u'Constructs an arc with the given chord bearing, chord distance and tangent distance.')], HRESULT, 'ConstructBearingChordTangent',
              ( [], POINTER(IPoint), 'from' ),
              ( [], c_double, 'inAngle' ),
              ( [], VARIANT_BOOL, 'isCCW' ),
              ( [], c_double, 'chordDistance' ),
              ( [], c_double, 'tangentDistance' )),
    COMMETHOD([helpstring(u'Constructs an arc with the given chord bearing, arc distance and tangent distance.')], HRESULT, 'ConstructBearingArcTangent',
              ( [], POINTER(IPoint), 'from' ),
              ( [], c_double, 'inAngle' ),
              ( [], VARIANT_BOOL, 'isCCW' ),
              ( [], c_double, 'arcDistance' ),
              ( [], c_double, 'tangentDistance' )),
    COMMETHOD([helpstring(u'Constructs an arc from three points. useExistingCenter can be set to true in order to help create a reasonable arc when from and to are identical.')], HRESULT, 'ConstructThreePoints',
              ( [], POINTER(IPoint), 'from' ),
              ( [], POINTER(IPoint), 'middle' ),
              ( [], POINTER(IPoint), 'to' ),
              ( [], VARIANT_BOOL, 'useExistingCenter' )),
    COMMETHOD([helpstring(u'Constructs an arc of given start point near first segment and tangent to two segments. hintPoint can be nil or can be a location near the desired fillet.')], HRESULT, 'ConstructFilletPoint',
              ( [], POINTER(ISegment), 's1' ),
              ( [], POINTER(ISegment), 's2' ),
              ( [], POINTER(IPoint), 'from' ),
              ( [], POINTER(IPoint), 'hintPoint' )),
    COMMETHOD([helpstring(u'Constructs an arc of given radius and tangent to two segments. hintPoint can be nil or can be a location near the desired fillet.')], HRESULT, 'ConstructFilletRadius',
              ( [], POINTER(ISegment), 's1' ),
              ( [], POINTER(ISegment), 's2' ),
              ( [], c_double, 'inRadius' ),
              ( [], POINTER(IPoint), 'hintPoint' )),
    COMMETHOD([helpstring(u'Returns minimum and maximum radius for fillet to touch both input segments. hintPoint can be nil or can be a location near the desired fillet.')], HRESULT, 'QueryFilletRadiusRange',
              ( [], POINTER(ISegment), 's1' ),
              ( [], POINTER(ISegment), 's2' ),
              ( [], POINTER(IPoint), 'hintPoint' ),
              ( ['out'], POINTER(c_double), 'minRadius' ),
              ( ['out'], POINTER(c_double), 'maxRadius' )),
    COMMETHOD([helpstring(u"Constructs an arc with one endpoint being p, tangent to s, and connected to s. If atFrom is true, the connection is at s's from point, otherwise at s's to point.")], HRESULT, 'ConstructTangentAndPoint',
              ( [], POINTER(ISegment), 's' ),
              ( [], VARIANT_BOOL, 'atFrom' ),
              ( [], POINTER(IPoint), 'p' )),
    COMMETHOD([helpstring(u'Constructs an arc with specified endpoints and and chord height.')], HRESULT, 'ConstructEndPointsChordHeight',
              ( [], POINTER(IPoint), 'from' ),
              ( [], POINTER(IPoint), 'to' ),
              ( [], VARIANT_BOOL, 'isCCW' ),
              ( [], c_double, 'ChordHeight' )),
    COMMETHOD([helpstring(u'Constructs a circle of a given radius and orientation.')], HRESULT, 'ConstructCircle',
              ( [], POINTER(IPoint), 'CenterPoint' ),
              ( [], c_double, 'Radius' ),
              ( [], VARIANT_BOOL, 'isCCW' )),
]
################################################################
## code template for IConstructCircularArc implementation
##class IConstructCircularArc_Impl(object):
##    def ConstructBearingArcTangent(self, from, inAngle, isCCW, arcDistance, tangentDistance):
##        u'Constructs an arc with the given chord bearing, arc distance and tangent distance.'
##        #return 
##
##    def ConstructEndPointsAngle(self, from, to, isCCW, CentralAngle):
##        u'Constructs an arc from the given endpoints and central angle.'
##        #return 
##
##    def ConstructTangentDistance(self, Center, from, isCCW, tangentDistance):
##        u'Constructs an arc from a center point, a starting point, and an tangent length.'
##        #return 
##
##    def ConstructTangentRadiusChord(self, Segment, atStart, isCCW, inRadius, chordDistance):
##        u'Constructs an arc with a common tangent to the input segment, a given radius and a chord length.'
##        #return 
##
##    def ConstructFilletPoint(self, s1, s2, from, hintPoint):
##        u'Constructs an arc of given start point near first segment and tangent to two segments. hintPoint can be nil or can be a location near the desired fillet.'
##        #return 
##
##    def ConstructTangentAngleChord(self, Segment, atStart, isCCW, CentralAngle, chordDistance):
##        u'Constructs an arc with a common tangent to the input segment, a given central angle and a chord length.'
##        #return 
##
##    def ConstructBearingChordTangent(self, from, inAngle, isCCW, chordDistance, tangentDistance):
##        u'Constructs an arc with the given chord bearing, chord distance and tangent distance.'
##        #return 
##
##    def ConstructTangentRadiusTangent(self, Segment, atStart, isCCW, inRadius, tangentDistance):
##        u'Constructs an arc with a common tangent to the input segment, a given radius and a tangent length.'
##        #return 
##
##    def ConstructArcDistance(self, Center, from, isCCW, arcDistance):
##        u'Constructs an arc from a center point, a starting point, and an arc length.'
##        #return 
##
##    def QueryFilletRadiusRange(self, s1, s2, hintPoint):
##        u'Returns minimum and maximum radius for fillet to touch both input segments. hintPoint can be nil or can be a location near the desired fillet.'
##        #return minRadius, maxRadius
##
##    def ConstructCircle(self, CenterPoint, Radius, isCCW):
##        u'Constructs a circle of a given radius and orientation.'
##        #return 
##
##    def ConstructTangentAngleTangent(self, Segment, atStart, isCCW, CentralAngle, tangentDistance):
##        u'Constructs an arc with a common tangent to the input segment, a given central angle and a tangent length.'
##        #return 
##
##    def ConstructTangentArcTangent(self, Segment, atStart, isCCW, arcDistance, tangentDistance):
##        u'Constructs an arc with a common tangent to the input segment, a given arc length and a tangent length.'
##        #return 
##
##    def ConstructChordDistance(self, Center, from, isCCW, chordDistance):
##        u'Constructs an arc from a center point, a starting point, and a chord length.'
##        #return 
##
##    def ConstructEndPointsRadius(self, from, to, isCCW, inRadius, IsMinor):
##        u'Constructs an arc from the given endpoints and radius.'
##        #return 
##
##    def ConstructTangentAngleArc(self, Segment, atStart, isCCW, CentralAngle, arcDistance):
##        u'Constructs an arc with a common tangent to the input segment, a given central angle and an arc length.'
##        #return 
##
##    def ConstructEndPointsChordHeight(self, from, to, isCCW, ChordHeight):
##        u'Constructs an arc with specified endpoints and and chord height.'
##        #return 
##
##    def ConstructBearingAngleChord(self, from, inAngle, isCCW, CentralAngle, chordDistance):
##        u'Constructs an arc with the given chord bearing, central angle and chord distance.'
##        #return 
##
##    def ConstructTangentRadiusArc(self, Segment, atStart, isCCW, inRadius, arcDistance):
##        u'Constructs an arc having a common tangent to the input segment, a given radius and an arc length.'
##        #return 
##
##    def ConstructTangentChordArc(self, Segment, atStart, isCCW, chordDistance, arcDistance):
##        u'Constructs an arc with a common tangent to the input segment, a given chord length and an arc length.'
##        #return 
##
##    def ConstructBearingAngleArc(self, from, inAngle, isCCW, CentralAngle, arcDistance):
##        u'Constructs an arc with the given chord bearing, central angle and arc distance.'
##        #return 
##
##    def ConstructTangentAndPoint(self, s, atFrom, p):
##        u"Constructs an arc with one endpoint being p, tangent to s, and connected to s. If atFrom is true, the connection is at s's from point, otherwise at s's to point."
##        #return 
##
##    def ConstructTangentRadiusAngle(self, Segment, atStart, isCCW, inRadius, CentralAngle):
##        u'Constructs an arc with a common tangent to the input segment, a given radius and a central angle.'
##        #return 
##
##    def ConstructTangentChordTangent(self, Segment, atStart, isCCW, chordDistance, tangentDistance):
##        u'Constructs an arc with a common tangent to input segment, a given chord length and a tangent length.'
##        #return 
##
##    def ConstructBearingRadiusTangent(self, from, inAngle, isCCW, inRadius, tangentDistance):
##        u'Constructs an arc with the given chord bearing, radius and tangent distance.'
##        #return 
##
##    def ConstructBearingChordArc(self, from, inAngle, isCCW, chordDistance, arcDistance):
##        u'Constructs an arc with the given chord bearing, chord distance and arc distance (negative for clockwise orientation).'
##        #return 
##
##    def ConstructEndPointsArc(self, from, to, isCCW, arcDistance):
##        u'Constructs an arc from the given endpoints and arc distance.'
##        #return 
##
##    def ConstructThreePoints(self, from, middle, to, useExistingCenter):
##        u'Constructs an arc from three points. useExistingCenter can be set to true in order to help create a reasonable arc when from and to are identical.'
##        #return 
##
##    def ConstructBearingRadiusAngle(self, startPoint, inAngle, isCCW, inRadius, CentralAngle):
##        u'Constructs an arc with the given chord bearing, radius and central angle.'
##        #return 
##
##    def ConstructEndPointsTangent(self, from, to, isCCW, tangentDistance):
##        u'Constructs an arc from the given endpoints and tangent distance.'
##        #return 
##
##    def ConstructBearingRadiusChord(self, from, inAngle, isCCW, inRadius, chordDistance, IsMinor):
##        u'Constructs an arc with the given chord bearing, radius and chord distance.'
##        #return 
##
##    def ConstructBearingAngleTangent(self, from, inAngle, isCCW, CentralAngle, tangentDistance):
##        u'Constructs an arc with the given chord bearing, central angle and tangent distance.'
##        #return 
##
##    def ConstructFilletRadius(self, s1, s2, inRadius, hintPoint):
##        u'Constructs an arc of given radius and tangent to two segments. hintPoint can be nil or can be a location near the desired fillet.'
##        #return 
##
##    def ConstructBearingRadiusArc(self, from, inAngle, isCCW, inRadius, arcDistance):
##        u'Constructs an arc with the given chord bearing, radius and arc distance.'
##        #return 
##


# values for enumeration 'esriSRDatum2Type'
esriSRDatum_Estonia1937 = 106101
esriSRDatum_Hermannskogel = 106102
esriSRDatum_SierraLeone1960 = 106103
esriSRDatum_HongKong1980 = 6611
esriSRDatum_LisboaBessel = 106262
esriSRDatum_LisboaHayford = 106263
esriSRDatum_RGF1993 = 6171
esriSRDatum_NZGD_2000 = 6167
esriSRDatum_Clarke1866AuthalicSphere = 6052
esriSRDatum_Voirol1879 = 6671
esriSRDatum_SIRGAS2000 = 6674
esriSRDatum_Vientiane1982 = 6676
esriSRDatum_Lao1993 = 6677
esriSRDatum_Lao1997 = 6678
esriSRDatum_Jouik1961 = 6679
esriSRDatum_Nouakchott1965 = 6680
esriSRDatum_Mauritania1999 = 6702
esriSRDatum_Gulshan303 = 6682
esriSRDatum_D48 = 106278
esriSRDatum_Ocotepeque1935 = 1070
esriSRDatum_JAD2001 = 6758
esriSRDatum_PRJ1992 = 6683
esriSRDatum_MAGNA = 6686
esriSRDatum_RGPF = 6687
esriSRDatum_FatuIva1972 = 6688
esriSRDatum_IGN63HivaOa = 6689
esriSRDatum_Tahiti1979 = 6690
esriSRDatum_Moorea1987 = 6691
esriSRDatum_Maupiti1983 = 6692
esriSRDatum_Nakhl_e_Ghanem = 6693
esriSRDatum_POSGAR94 = 6694
esriSRDatum_Katanga1955 = 6695
esriSRDatum_Kasai1953 = 6696
esriSRDatum_IGC1962_6th_Parallel_S = 6697
esriSRDatum_IGCB1955 = 6701
esriSRDatum_MHAST1951 = 6703
esriSRDatum_MHAST_Onshore = 6704
esriSRDatum_MHAST_Offshore = 6705
esriSRDatum_EgyptGulfSuez_S650TL = 6706
esriSRDatum_Fiji1986 = 6720
esriSRDatum_Fiji1956 = 6721
esriSRDatum_GrandCayman1959 = 6723
esriSRDatum_LittleCayman1961 = 6726
esriSRDatum_Korea2000 = 6737
esriSRDatum_HongKong1963_67 = 6739
esriSRDatum_GDM2000 = 6742
esriSRDatum_TWD1967 = 1025
esriSRDatum_TWD1997 = 1026
esriSRDatum_AuthalicSphere_GRS1980 = 6047
esriSRDatum_AuthalicSphere_Intl1924 = 6053
esriSRDatum_Hughes1980 = 6054
esriSRDatum_NAD1983_CSRS = 6140
esriSRDatum_LePouce1934 = 6699
esriSRDatum_IGNAstro1960 = 6700
esriSRDatum_Solomon1968 = 6718
esriSRDatum_PZ1990 = 6740
esriSRDatum_FaroeDatum1954 = 6741
esriSRDatum_Karbala1979Polservice = 6743
esriSRDatum_Nahrwan1934 = 6744
esriSRDatum_Rauenberg1983 = 6745
esriSRDatum_Potsdam1983 = 6746
esriSRDatum_Greenland1996 = 6747
esriSRDatum_VanuaLevu1915 = 6748
esriSRDatum_RGNC1991_93 = 6749
esriSRDatum_fk89 = 6753
esriSRDatum_LibyanGeodeticDatum2006 = 6754
esriSRDatum_DatumGeodesiNasional1995 = 6755
esriSRDatum_Vietnam2000 = 6756
esriSRDatum_SVY21 = 6757
esriSRDatum_NAD1983_NSRS2007 = 6759
esriSRDatum_ITRF2005 = 6896
esriSRDatum_MajorAuxSphere_WGS1984 = 6055
esriSRDatum2Type = c_int # enum
IUnknownCoordinateSystem._methods_ = [
]
################################################################
## code template for IUnknownCoordinateSystem implementation
##class IUnknownCoordinateSystem_Impl(object):

class CircularArc(CoClass):
    u'A portion of a circle that connects two points optionally has measure, height and ID attributes at each endpoint.'
    _reg_clsid_ = GUID('{CD3A614E-BC4B-11D0-8303-0000F8034032}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
class IConstructCircularArc2(IConstructCircularArc):
    _case_insensitive_ = True
    u'Provides access to members that construct a circular arc using other geometries and values.'
    _iid_ = GUID('{F4EE06A7-7854-485D-9689-914BE1B4E900}')
    _idlflags_ = ['oleautomation']
CircularArc._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ICircularArc, IGeometry, ITransform2D, ICurve, ICurve2, ICurve3, ISegment, IConstructCircularArc, IConstructCircularArc2, IProximityOperator, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, ISegmentM, ISegmentZ, ISegmentID]

IEnumGeometry._methods_ = [
    COMMETHOD([helpstring(u'Returns the next geometry in the enumeration.')], HRESULT, 'Next',
              ( ['retval', 'out'], POINTER(POINTER(IGeometry)), 'nextGeometry' )),
    COMMETHOD([helpstring(u'Starts the enumeration at the beginning.')], HRESULT, 'Reset'),
    COMMETHOD(['propget', helpstring(u'The number of geometries in the enumeration.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'GeometryCount' )),
]
################################################################
## code template for IEnumGeometry implementation
##class IEnumGeometry_Impl(object):
##    def Reset(self):
##        u'Starts the enumeration at the beginning.'
##        #return 
##
##    @property
##    def Count(self):
##        u'The number of geometries in the enumeration.'
##        #return GeometryCount
##
##    def Next(self):
##        u'Returns the next geometry in the enumeration.'
##        #return nextGeometry
##

class BezierCurve(CoClass):
    u'A cubic Bezier curve defined between two points; optionally has measure, height and ID attributes at each endpoint.'
    _reg_clsid_ = GUID('{C8970BDC-B15B-11D1-A2D3-0000F8775FBF}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
BezierCurve._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IBezierCurveGEN, IBezierCurve, IBezierCurve2, IBezierCurve3, IGeometry, ITransform2D, ICurve, ICurve2, ICurve3, ISegment, IConstructBezierCurve, IProximityOperator, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, ISegmentM, ISegmentZ, ISegmentID]

IGeometryEnvironment4._methods_ = [
    COMMETHOD(['propget', helpstring(u'Selects dicing algorithm. True means dicing with trapezoids, False means dicing with smaller polygons and polypolygons. True by default.')], HRESULT, 'DiceWithTrapezoids',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'DiceWithTrapezoids' )),
    COMMETHOD(['propput', helpstring(u'Selects dicing algorithm. True means dicing with trapezoids, False means dicing with smaller polygons and polypolygons. True by default.')], HRESULT, 'DiceWithTrapezoids',
              ( ['in'], VARIANT_BOOL, 'DiceWithTrapezoids' )),
    COMMETHOD(['propget', helpstring(u'Selects export to WIN32 shape mode. True means export without loss of sub-pixel parts, False means eliminating parts that degenerate into single pixel. False by default.')], HRESULT, 'ExpandSubPixelParts',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'ExpandSubPixelParts' )),
    COMMETHOD(['propput', helpstring(u'Selects export to WIN32 shape mode. True means export without loss of sub-pixel parts, False means eliminating parts that degenerate into single pixel. False by default.')], HRESULT, 'ExpandSubPixelParts',
              ( ['in'], VARIANT_BOOL, 'ExpandSubPixelParts' )),
]
################################################################
## code template for IGeometryEnvironment4 implementation
##class IGeometryEnvironment4_Impl(object):
##    def _get(self):
##        u'Selects dicing algorithm. True means dicing with trapezoids, False means dicing with smaller polygons and polypolygons. True by default.'
##        #return DiceWithTrapezoids
##    def _set(self, DiceWithTrapezoids):
##        u'Selects dicing algorithm. True means dicing with trapezoids, False means dicing with smaller polygons and polypolygons. True by default.'
##    DiceWithTrapezoids = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Selects export to WIN32 shape mode. True means export without loss of sub-pixel parts, False means eliminating parts that degenerate into single pixel. False by default.'
##        #return ExpandSubPixelParts
##    def _set(self, ExpandSubPixelParts):
##        u'Selects export to WIN32 shape mode. True means export without loss of sub-pixel parts, False means eliminating parts that degenerate into single pixel. False by default.'
##    ExpandSubPixelParts = property(_get, _set, doc = _set.__doc__)
##

class IParameterEdit(IParameter):
    _case_insensitive_ = True
    u'Provides access to members that control the properties of projection parameters.'
    _iid_ = GUID('{06B20118-3CFB-4E1E-B984-D94B0FE262AF}')
    _idlflags_ = ['oleautomation']
IParameterEdit._methods_ = [
    COMMETHOD(['propput', helpstring(u'The name of a projection parameter.')], HRESULT, 'Name',
              ( [], BSTR, 'rhs' )),
    COMMETHOD(['propput', helpstring(u"The index of a projection parameter within a projected coordinate system's parameter array.")], HRESULT, 'Index',
              ( [], c_int, 'rhs' )),
]
################################################################
## code template for IParameterEdit implementation
##class IParameterEdit_Impl(object):
##    def _set(self, rhs):
##        u"The index of a projection parameter within a projected coordinate system's parameter array."
##    Index = property(fset = _set, doc = _set.__doc__)
##
##    def _set(self, rhs):
##        u'The name of a projection parameter.'
##    Name = property(fset = _set, doc = _set.__doc__)
##

class IWkb(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Reads/Writes the OGIS OLE/COM simple features Well Known Binary Format, v1.1, little-endian (NDR).'
    _iid_ = GUID('{8D9097EE-2F7C-11D1-833B-0000F8775BE9}')
    _idlflags_ = []
IWkb._methods_ = [
    COMMETHOD(['propget', helpstring(u'The number of bytes required to hold the exported version of this object.')], HRESULT, 'WkbSize',
              ( ['retval', 'out'], POINTER(c_int), 'cBytes' )),
    COMMETHOD([helpstring(u'Exports this object to a OGIS OLE/COM WKB binary buffer (v1.1, NDR).')], HRESULT, 'ExportToWkb',
              ( ['in', 'out'], POINTER(c_int), 'byteCountInOut' ),
              ( ['out'], POINTER(c_ubyte), 'byteBuffer' )),
    COMMETHOD([helpstring(u'Imports this object from a OGIS OLE/COM WKB binary buffer (v1.1, NDR).')], HRESULT, 'ImportFromWkb',
              ( ['in', 'out'], POINTER(c_int), 'byteCountInOut' ),
              ( ['in'], POINTER(c_ubyte), 'byteBuffer' )),
]
################################################################
## code template for IWkb implementation
##class IWkb_Impl(object):
##    def ImportFromWkb(self, byteBuffer):
##        u'Imports this object from a OGIS OLE/COM WKB binary buffer (v1.1, NDR).'
##        #return byteCountInOut
##
##    def ExportToWkb(self):
##        u'Exports this object to a OGIS OLE/COM WKB binary buffer (v1.1, NDR).'
##        #return byteCountInOut, byteBuffer
##
##    @property
##    def WkbSize(self):
##        u'The number of bytes required to hold the exported version of this object.'
##        #return cBytes
##

IProjectionGEN._methods_ = [
    COMMETHOD(['propget', helpstring(u'The usage notes of a map projection.')], HRESULT, 'Usage',
              ( ['retval', 'out'], POINTER(BSTR), 'Usage' )),
    COMMETHOD(['propget', helpstring(u'The classification of a map projection.')], HRESULT, 'Classification',
              ( ['retval', 'out'], POINTER(BSTR), 'Classification' )),
    COMMETHOD([helpstring(u'Safearray wrapper for returning the set of default parameters needed for this projection.')], HRESULT, 'GetDefaultParameters',
              ( ['retval', 'out'], POINTER(_midlSAFEARRAY(POINTER(IParameter))), 'parameters' )),
]
################################################################
## code template for IProjectionGEN implementation
##class IProjectionGEN_Impl(object):
##    @property
##    def Usage(self):
##        u'The usage notes of a map projection.'
##        #return Usage
##
##    def GetDefaultParameters(self):
##        u'Safearray wrapper for returning the set of default parameters needed for this projection.'
##        #return parameters
##
##    @property
##    def Classification(self):
##        u'The classification of a map projection.'
##        #return Classification
##

IESRISpatialReference._methods_ = [
    COMMETHOD(['propget', helpstring(u'The number of bytes required to hold the persistant representation of this spatial reference component.')], HRESULT, 'ESRISpatialReferenceSize',
              ( ['retval', 'out'], POINTER(c_int), 'cBytes' )),
    COMMETHOD([helpstring(u'Defines this spatial reference component from the specified ESRISpatialReference buffer.')], HRESULT, 'ImportFromESRISpatialReference',
              ( [], BSTR, 'str' ),
              ( ['out'], POINTER(c_int), 'cBytesRead' )),
    COMMETHOD([helpstring(u'Exports this spatial reference component to a buffer.')], HRESULT, 'ExportToESRISpatialReference',
              ( ['in', 'out'], BSTR, 'str' ),
              ( ['out'], POINTER(c_int), 'cBytesWrote' )),
]
################################################################
## code template for IESRISpatialReference implementation
##class IESRISpatialReference_Impl(object):
##    def ImportFromESRISpatialReference(self, str):
##        u'Defines this spatial reference component from the specified ESRISpatialReference buffer.'
##        #return cBytesRead
##
##    def ExportToESRISpatialReference(self):
##        u'Exports this spatial reference component to a buffer.'
##        #return str, cBytesWrote
##
##    @property
##    def ESRISpatialReferenceSize(self):
##        u'The number of bytes required to hold the persistant representation of this spatial reference component.'
##        #return cBytes
##


# values for enumeration 'esriSRSpheroidType'
esriSRSpheroid_Airy1830 = 7001
esriSRSpheroid_ModifiedAiry = 7002
esriSRSpheroid_ATS1977 = 7041
esriSRSpheroid_Australian = 7003
esriSRSpheroid_Bessel1841 = 7004
esriSRSpheroid_ModifiedBessel = 7005
esriSRSpheroid_BesselNamibia = 7006
esriSRSpheroid_Clarke1858 = 7007
esriSRSpheroid_Clarke1866 = 7008
esriSRSpheroid_Clarke1866Michigan = 7009
esriSRSpheroid_Clarke1880 = 7034
esriSRSpheroid_Clarke1880Arc = 7013
esriSRSpheroid_Clarke1880Benoit = 7010
esriSRSpheroid_Clarke1880IGN = 7011
esriSRSpheroid_Clarke1880RGS = 7012
esriSRSpheroid_Clarke1880SGA = 7014
esriSRSpheroid_Everest1830 = 7042
esriSRSpheroid_Everest1937 = 7015
esriSRSpheroid_Everest1962 = 7044
esriSRSpheroid_Everest1967 = 7016
esriSRSpheroid_Everest1975 = 7045
esriSRSpheroid_ModifiedEverest = 7018
esriSRSpheroid_GEM10C = 7031
esriSRSpheroid_GRS1967 = 7036
esriSRSpheroid_GRS1980 = 7019
esriSRSpheroid_Helmert1906 = 7020
esriSRSpheroid_Indonesian = 7021
esriSRSpheroid_International1924 = 7022
esriSRSpheroid_International1967 = 7023
esriSRSpheroid_Krasovsky1940 = 7024
esriSRSpheroid_NWL9D = 7025
esriSRSpheroid_OSU1986F = 7032
esriSRSpheroid_OSU1991A = 7033
esriSRSpheroid_Plessis1817 = 7027
esriSRSpheroid_AuthalicSphere = 7035
esriSRSpheroid_Struve1860 = 7028
esriSRSpheroid_WarOffice = 7029
esriSRSpheroid_NWL10D = 7026
esriSRSpheroid_WGS1972 = 7043
esriSRSpheroid_WGS1984 = 7030
esriSRSpheroid_WGS1966 = 107001
esriSRSpheroid_Fischer1960 = 107002
esriSRSpheroid_Fischer1968 = 107003
esriSRSpheroid_ModifiedFischer = 107004
esriSRSpheroid_Hough1960 = 7053
esriSRSpheroid_ModifiedEverest1969 = 7056
esriSRSpheroid_Walbeck = 107007
esriSRSpheroid_AuthalicSphereArcInfo = 107008
esriSRSpheroid_GRS1967Truncated = 7050
esriSRSpheroid_Clarke1866AuthalicSphere = 7052
esriSRSpheroid_Danish1876 = 7051
esriSRSpheroid_PZ1990 = 7054
esriSRSpheroid_Clarke1880_IntlFt = 7055
esriSRSpheroid_AuthalicSphere_Intl1924 = 7057
esriSRSpheroid_Hughes1980 = 7058
esriSRSpheroid_MajorAuxiliarySphere_WGS1984 = 7059
esriSRSpheroidType = c_int # enum
IPointCollection5._methods_ = [
    COMMETHOD([helpstring(u'Adds vertices/points.')], HRESULT, 'AddWKSPointVA',
              ( [], c_int, 'Count' ),
              ( ['in'], POINTER(WKSPointVA), 'pointStructures' )),
    COMMETHOD([helpstring(u'Replaces all vertices/points.')], HRESULT, 'SetWKSPointVA',
              ( [], c_int, 'Count' ),
              ( ['in'], POINTER(WKSPointVA), 'pointStructures' )),
    COMMETHOD([helpstring(u'Copies vertices/points coordinates to the array of point structures.')], HRESULT, 'QueryWKSPointVA',
              ( [], c_int, 'Index' ),
              ( [], c_int, 'Count' ),
              ( ['out'], POINTER(WKSPointVA), 'pointStructures' )),
    COMMETHOD([helpstring(u'Inserts new vertices/points.')], HRESULT, 'InsertWKSPointVA',
              ( [], c_int, 'Index' ),
              ( [], c_int, 'Count' ),
              ( ['in'], POINTER(WKSPointVA), 'newPoints' )),
]
################################################################
## code template for IPointCollection5 implementation
##class IPointCollection5_Impl(object):
##    def AddWKSPointVA(self, Count, pointStructures):
##        u'Adds vertices/points.'
##        #return 
##
##    def SetWKSPointVA(self, Count, pointStructures):
##        u'Replaces all vertices/points.'
##        #return 
##
##    def QueryWKSPointVA(self, Index, Count):
##        u'Copies vertices/points coordinates to the array of point structures.'
##        #return pointStructures
##
##    def InsertWKSPointVA(self, Index, Count, newPoints):
##        u'Inserts new vertices/points.'
##        #return 
##

class Parameter(CoClass):
    u'Creates a parameter.'
    _reg_clsid_ = GUID('{E2DBDB00-1DD1-11B2-BF51-08002022F573}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
Parameter._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IESRISpatialReferenceGEN, IESRISpatialReferenceGEN2, IParameter, IParameterEdit, ISpatialReferenceInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, IESRISpatialReference, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, ISpatialReferenceAuthority]


# values for enumeration 'esriSRProjCS4Type'
esriSRProjCS_Abidjan1987_TM_5_NW = 2165
esriSRProjCS_Accra_Ghana_Grid = 2136
esriSRProjCS_Accra_TM_1_NW = 2137
esriSRProjCS_AGD1966_ACT_Grid_AGC_Zone = 102071
esriSRProjCS_AGD1966_ISG_54_2 = 102072
esriSRProjCS_AGD1966_ISG_54_3 = 102073
esriSRProjCS_AGD1966_ISG_55_1 = 102074
esriSRProjCS_AGD1966_ISG_55_2 = 102075
esriSRProjCS_AGD1966_ISG_55_3 = 102076
esriSRProjCS_AGD1966_ISG_56_1 = 102077
esriSRProjCS_AGD1966_ISG_56_2 = 102078
esriSRProjCS_AGD1966_ISG_56_3 = 102079
esriSRProjCS_AGD1966_VICGRID = 3110
esriSRProjCS_Ain_el_Abd_Aramco_Lambert = 2318
esriSRProjCS_Albanian1987_GK_Zone_4 = 2462
esriSRProjCS_Arc1950_UTM_Zone_34S = 20934
esriSRProjCS_Arc1950_UTM_Zone_35S = 20935
esriSRProjCS_Arc1950_UTM_Zone_36S = 20936
esriSRProjCS_Arc1960_UTM_Zone_35N = 21095
esriSRProjCS_Arc1960_UTM_Zone_35S = 21035
esriSRProjCS_Arc1960_UTM_Zone_36N = 21096
esriSRProjCS_Arc1960_UTM_Zone_36S = 21036
esriSRProjCS_Arc1960_UTM_Zone_37N = 21097
esriSRProjCS_Arc1960_UTM_Zone_37S = 21037
esriSRProjCS_AzoresCentral1995_UTM_Zone_26N = 3063
esriSRProjCS_AzoresOriental1995_UTM_Zone_26N = 3062
esriSRProjCS_Batavia_NEIEZ = 3001
esriSRProjCS_Batavia_TM_109_SE = 2308
esriSRProjCS_Beijing1954_3_Degree_GK_CM_102E = 2431
esriSRProjCS_Beijing1954_3_Degree_GK_CM_105E = 2432
esriSRProjCS_Beijing1954_3_Degree_GK_CM_108E = 2433
esriSRProjCS_Beijing1954_3_Degree_GK_CM_111E = 2434
esriSRProjCS_Beijing1954_3_Degree_GK_CM_114E = 2435
esriSRProjCS_Beijing1954_3_Degree_GK_CM_117E = 2436
esriSRProjCS_Beijing1954_3_Degree_GK_CM_120E = 2437
esriSRProjCS_Beijing1954_3_Degree_GK_CM_123E = 2438
esriSRProjCS_Beijing1954_3_Degree_GK_CM_126E = 2439
esriSRProjCS_Beijing1954_3_Degree_GK_CM_129E = 2440
esriSRProjCS_Beijing1954_3_Degree_GK_CM_132E = 2441
esriSRProjCS_Beijing1954_3_Degree_GK_CM_135E = 2442
esriSRProjCS_Beijing1954_3_Degree_GK_Zone_25 = 2401
esriSRProjCS_Beijing1954_3_Degree_GK_Zone_26 = 2402
esriSRProjCS_Beijing1954_3_Degree_GK_Zone_27 = 2403
esriSRProjCS_Beijing1954_3_Degree_GK_Zone_28 = 2404
esriSRProjCS_Beijing1954_3_Degree_GK_Zone_29 = 2405
esriSRProjCS_Beijing1954_3_Degree_GK_Zone_30 = 2406
esriSRProjCS_Beijing1954_3_Degree_GK_Zone_31 = 2407
esriSRProjCS_Beijing1954_3_Degree_GK_Zone_32 = 2408
esriSRProjCS_Beijing1954_3_Degree_GK_Zone_33 = 2409
esriSRProjCS_Beijing1954_3_Degree_GK_Zone_34 = 2410
esriSRProjCS_Beijing1954_3_Degree_GK_Zone_35 = 2411
esriSRProjCS_Beijing1954_3_Degree_GK_Zone_36 = 2412
esriSRProjCS_Beijing1954_3_Degree_GK_Zone_37 = 2413
esriSRProjCS_Beijing1954_3_Degree_GK_Zone_38 = 2414
esriSRProjCS_Beijing1954_3_Degree_GK_Zone_39 = 2415
esriSRProjCS_Beijing1954_3_Degree_GK_Zone_40 = 2416
esriSRProjCS_Beijing1954_3_Degree_GK_Zone_41 = 2417
esriSRProjCS_Beijing1954_3_Degree_GK_Zone_42 = 2418
esriSRProjCS_Beijing1954_3_Degree_GK_Zone_43 = 2419
esriSRProjCS_Beijing1954_3_Degree_GK_Zone_44 = 2420
esriSRProjCS_Beijing1954_3_Degree_GK_Zone_45 = 2421
esriSRProjCS_Beijing1954_3_Degree_GK_CM_75E = 2422
esriSRProjCS_Beijing1954_3_Degree_GK_CM_78E = 2423
esriSRProjCS_Beijing1954_3_Degree_GK_CM_81E = 2424
esriSRProjCS_Beijing1954_3_Degree_GK_CM_84E = 2425
esriSRProjCS_Beijing1954_3_Degree_GK_CM_87E = 2426
esriSRProjCS_Beijing1954_3_Degree_GK_CM_90E = 2427
esriSRProjCS_Beijing1954_3_Degree_GK_CM_93E = 2428
esriSRProjCS_Beijing1954_3_Degree_GK_CM_96E = 2429
esriSRProjCS_Beijing1954_3_Degree_GK_CM_99E = 2430
esriSRProjCS_Bermuda_2000_National_Grid = 3770
esriSRProjCS_Bern_1898_Bern_LV03C = 21780
esriSRProjCS_Bissau_UTM_Zone_28N = 2095
esriSRProjCS_CampoInchauspe_UTM_Zone_19S = 2315
esriSRProjCS_CampoInchauspe_UTM_Zone_20S = 2316
esriSRProjCS_Cape_UTM_Zone_34S = 22234
esriSRProjCS_Cape_UTM_Zone_35S = 22235
esriSRProjCS_Cape_UTM_Zone_36S = 22236
esriSRProjCS_Carthage_TM_11_NE = 2088
esriSRProjCS_ChathamIslands1979_Map_Grid = 5519
esriSRProjCS_ChosMalal1914_Argentina_2 = 2081
esriSRProjCS_Combani_1950_UTM_38S = 2980
esriSRProjCS_Conakry1905_UTM_Zone_28N = 31528
esriSRProjCS_Conakry1905_UTM_Zone_29N = 31529
esriSRProjCS_CSG1967_UTM_22N = 2971
esriSRProjCS_Dabola_UTM_Zone_28N = 3461
esriSRProjCS_Dabola_UTM_Zone_29N = 3462
esriSRProjCS_DeirEzZorLevantStereographic = 22780
esriSRProjCS_DHDN_3_Degree_Gauss_Zone_1 = 5520
esriSRProjCS_DHDN_3_Degree_Gauss_Zone_2 = 31466
esriSRProjCS_DHDN_3_Degree_Gauss_Zone_3 = 31467
esriSRProjCS_DHDN_3_Degree_Gauss_Zone_4 = 31468
esriSRProjCS_DHDN_3_Degree_Gauss_Zone_5 = 31469
esriSRProjCS_Douala_1948_AOF_West = 3119
esriSRProjCS_ED1950_3_Degree_GK_Zone_10 = 2207
esriSRProjCS_ED1950_3_Degree_GK_Zone_11 = 2208
esriSRProjCS_ED1950_3_Degree_GK_Zone_12 = 2209
esriSRProjCS_ED1950_3_Degree_GK_Zone_13 = 2210
esriSRProjCS_ED1950_3_Degree_GK_Zone_14 = 2211
esriSRProjCS_ED1950_3_Degree_GK_Zone_15 = 2212
esriSRProjCS_ED1950_3_Degree_GK_Zone_9 = 2206
esriSRProjCS_ED1950_France_EuroLambert = 2192
esriSRProjCS_ED1950_TM27 = 2319
esriSRProjCS_ED1950_TM30 = 2320
esriSRProjCS_ED1950_TM33 = 2321
esriSRProjCS_ED1950_TM36 = 2322
esriSRProjCS_ED1950_TM39 = 2323
esriSRProjCS_ED1950_TM42 = 2324
esriSRProjCS_ED1950_TM45 = 2325
esriSRProjCS_ED1950_Turkey_10 = 2182
esriSRProjCS_ED1950_Turkey_11 = 2183
esriSRProjCS_ED1950_Turkey_12 = 2184
esriSRProjCS_ED1950_Turkey_13 = 2185
esriSRProjCS_ED1950_Turkey_14 = 2186
esriSRProjCS_ED1950_Turkey_15 = 2187
esriSRProjCS_ED1950_Turkey_9 = 2181
esriSRProjCS_ELD1979_Libya_10 = 2073
esriSRProjCS_ELD1979_Libya_11 = 2074
esriSRProjCS_ELD1979_Libya_12 = 2075
esriSRProjCS_ELD1979_Libya_13 = 2076
esriSRProjCS_ELD1979_Libya_5 = 2068
esriSRProjCS_ELD1979_Libya_6 = 2069
esriSRProjCS_ELD1979_Libya_7 = 2070
esriSRProjCS_ELD1979_Libya_8 = 2071
esriSRProjCS_ELD1979_Libya_9 = 2072
esriSRProjCS_ELD1979_TM_12_NE = 2087
esriSRProjCS_ELD1979_UTM_Zone_32N = 2077
esriSRProjCS_ELD1979_UTM_Zone_33N = 2078
esriSRProjCS_ELD1979_UTM_Zone_34N = 2079
esriSRProjCS_ELD1979_UTM_Zone_35N = 2080
esriSRProjCS_EMEP_50KM_Grid = 102068
esriSRProjCS_EMEP_150KM_Grid = 102069
esriSRProjCS_Estonia1997_Estonia_National_Grid = 3301
esriSRProjCS_ETRS1989_Kp2000_Bornholm = 2198
esriSRProjCS_ETRS1989_Kp2000_Jutland = 2196
esriSRProjCS_ETRS1989_Kp2000_Zealand = 2197
esriSRProjCS_ETRS1989_LAEA = 3035
esriSRProjCS_ETRS1989_LCC = 3034
esriSRProjCS_ETRS1989_Poland_CS2000_Zone_5 = 2176
esriSRProjCS_ETRS1989_Poland_CS2000_Zone_6 = 2177
esriSRProjCS_ETRS1989_Poland_CS2000_Zone_7 = 2178
esriSRProjCS_ETRS1989_Poland_CS2000_Zone_8 = 2179
esriSRProjCS_ETRS1989_Poland_CS92 = 2180
esriSRProjCS_ETRS1989_TM_30_NE = 2213
esriSRProjCS_ETRS1989_TM_Baltic_1993 = 25884
esriSRProjCS_ETRS1989_UTM_Zone_26N = 102097
esriSRProjCS_ETRS1989_UTM_Zone_27N = 102098
esriSRProjCS_ETRS1989_UTM_Zone_28N = 25828
esriSRProjCS_ETRS1989_UTM_Zone_29N = 25829
esriSRProjCS_ETRS1989_UTM_Zone_30N = 25830
esriSRProjCS_ETRS1989_UTM_Zone_31N = 25831
esriSRProjCS_ETRS1989_UTM_Zone_32N = 25832
esriSRProjCS_ETRS1989_UTM_Zone_33N = 25833
esriSRProjCS_ETRS1989_UTM_Zone_34N = 25834
esriSRProjCS_ETRS1989_UTM_Zone_35N = 25835
esriSRProjCS_ETRS1989_UTM_Zone_36N = 25836
esriSRProjCS_ETRS1989_UTM_Zone_37N = 25837
esriSRProjCS_ETRS1989_UTM_Zone_38N = 25838
esriSRProjCS_ETRS1989_UTM_Zone_39N = 102099
esriSRProjCS_ETRS1989_UWPP_1992 = 102173
esriSRProjCS_ETRS1989_UWPP_2000_PAS_5 = 102174
esriSRProjCS_ETRS1989_UWPP_2000_PAS_6 = 102175
esriSRProjCS_ETRS1989_UWPP_2000_PAS_7 = 102176
esriSRProjCS_ETRS1989_UWPP_2000_PAS_8 = 102177
esriSRProjCS_EUREF_FIN_TM35FIN = 3067
esriSRProjCS_EverestModified1969_RSO_Malaya_Meters = 102061
esriSRProjCS_FortDesaix_UTM_20N = 2973
esriSRProjCS_FortMarigot_UTM_20N = 2969
esriSRProjCS_GDA1994_South_Australia_Lambert = 3107
esriSRProjCS_GDA1994_VICGRID94 = 3111
esriSRProjCS_GrandComoros_UTM_38S = 2999
esriSRProjCS_Guernsey_Grid = 102070
esriSRProjCS_GunungSegara_NEIEZ = 3000
esriSRProjCS_Hanoi1972_GK_106_NE = 2093
esriSRProjCS_Helle1954_Jan_Mayen_Grid = 3058
esriSRProjCS_Hito_XVIII_1963_Argentina_2 = 2083
esriSRProjCS_Hito_XVIII_1963_UTM_19S = 2084
esriSRProjCS_Hjorsey1955_UTM_Zone_26N = 3054
esriSRProjCS_Hjorsey1955_UTM_Zone_27N = 3055
esriSRProjCS_Hjorsey1955_UTM_Zone_28N = 3056
esriSRProjCS_IGM1995_UTM_Zone_32N = 3064
esriSRProjCS_IGM1995_UTM_Zone_33N = 3065
esriSRProjCS_IGN53_Mare_UTM_58S = 2995
esriSRProjCS_IGN56_Lifou_UTM_58S = 2981
esriSRProjCS_IGN72_GrandeTerre_UTM_58S = 3060
esriSRProjCS_IGN72_NukuHiva_UTM_7S = 2978
esriSRProjCS_IRENET95_Irish_Transverse_Mercator = 2157
esriSRProjCS_IRENET95_UTM_Zone_29N = 2158
esriSRProjCS_ISN1993_Lambert_1993 = 3057
esriSRProjCS_JGD2000_Japan_Zone_1 = 2443
esriSRProjCS_JGD2000_Japan_Zone_10 = 2452
esriSRProjCS_JGD2000_Japan_Zone_11 = 2453
esriSRProjCS_JGD2000_Japan_Zone_12 = 2454
esriSRProjCS_JGD2000_Japan_Zone_13 = 2455
esriSRProjCS_JGD2000_Japan_Zone_14 = 2456
esriSRProjCS_JGD2000_Japan_Zone_15 = 2457
esriSRProjCS_JGD2000_Japan_Zone_16 = 2458
esriSRProjCS_JGD2000_Japan_Zone_17 = 2459
esriSRProjCS_JGD2000_Japan_Zone_18 = 2460
esriSRProjCS_JGD2000_Japan_Zone_19 = 2461
esriSRProjCS_JGD2000_Japan_Zone_2 = 2444
esriSRProjCS_JGD2000_Japan_Zone_3 = 2445
esriSRProjCS_JGD2000_Japan_Zone_4 = 2446
esriSRProjCS_JGD2000_Japan_Zone_5 = 2447
esriSRProjCS_JGD2000_Japan_Zone_6 = 2448
esriSRProjCS_JGD2000_Japan_Zone_7 = 2449
esriSRProjCS_JGD2000_Japan_Zone_8 = 2450
esriSRProjCS_JGD2000_Japan_Zone_9 = 2451
esriSRProjCS_JGD2000_UTM_Zone_51N = 3097
esriSRProjCS_JGD2000_UTM_Zone_52N = 3098
esriSRProjCS_JGD2000_UTM_Zone_53N = 3099
esriSRProjCS_JGD2000_UTM_Zone_54N = 3100
esriSRProjCS_JGD2000_UTM_Zone_55N = 3101
esriSRProjCS_JGD2000_UTM_Zone_56N = 102150
esriSRProjCS_Jordan_JTM = 102158
esriSRProjCS_K0_1949_UTM_42S = 3336
esriSRProjCS_Kandawala_Ceylon_Belt_Meters = 102063
esriSRProjCS_Kandawala_Ceylon_Belt_Indian_Yards_1937 = 102064
esriSRProjCS_Kertau_RSO_Malaya_Chains = 24571
esriSRProjCS_Kertau_RSO_Malaya_Meters = 102062
esriSRProjCS_Kertau_Singapore_Grid = 24500
esriSRProjCS_Korean1985_Korea_Central_Belt = 2097
esriSRProjCS_Korean1985_Korea_East_Belt = 2096
esriSRProjCS_Korean1985_Korea_West_Belt = 2098
esriSRProjCS_Kousseri_UTM_Zone_33N = 2313
esriSRProjCS_LakeMaracaibo_Grid = 2102
esriSRProjCS_LakeMaracaibo_La_Rosa_Grid = 2104
esriSRProjCS_LakeMaracaibo_Grid_M1 = 2101
esriSRProjCS_LakeMaracaibo_Grid_M3 = 2103
esriSRProjCS_LKS1992_Latvia_TM = 3059
esriSRProjCS_Locodjo1965_TM_5_NW = 2164
esriSRProjCS_Luxembourg1930_Gauss = 2169
esriSRProjCS_Makassar_NEIEZ = 3002
esriSRProjCS_Manoca1962_UTM_Zone_32N = 2215
esriSRProjCS_MGI_3_Degree_Gauss_Zone_5 = 31265
esriSRProjCS_MGI_3_Degree_Gauss_Zone_6 = 31266
esriSRProjCS_MGI_3_Degree_Gauss_Zone_7 = 31267
esriSRProjCS_MGI_3_Degree_Gauss_Zone_8 = 31268
esriSRProjCS_MGI_Balkans_5 = 31275
esriSRProjCS_MGI_Balkans_6 = 31276
esriSRProjCS_MGI_Balkans_7 = 31277
esriSRProjCS_MGI_Balkans_8 = 31279
esriSRProjCS_MGI_Slovenia_Grid = 2170
esriSRProjCS_MOP78_UTM_1S = 2988
esriSRProjCS_MountDillon_Tobago_Grid = 2066
esriSRProjCS_NAD1927_10TM_AEP_Forest = 102178
esriSRProjCS_NAD1927_10TM_AEP_Resource = 102179
esriSRProjCS_NAD1927_3TM_111 = 3771
esriSRProjCS_NAD1927_3TM_114 = 3772
esriSRProjCS_NAD1927_3TM_117 = 3773
esriSRProjCS_NAD1927_3TM_120 = 3800
esriSRProjCS_NAD1927_Alaska_Albers_Feet = 2964
esriSRProjCS_NAD1927_Alaska_Albers_Meters = 102117
esriSRProjCS_NAD1927_CGQ77_Quebec_Lambert = 2138
esriSRProjCS_NAD1927_Cuba_Norte = 2085
esriSRProjCS_NAD1927_Cuba_Sur = 2086
esriSRProjCS_NAD1927_Georgia_Statewide_Albers = 102118
esriSRProjCS_NAD1927_Quebec_Lambert = 32098
esriSRProjCS_NAD1927_Texas_Statewide_Mapping_System = 3080
esriSRProjCS_NAD1927_UTM_Zone_1N = 26701
esriSRProjCS_NAD1927_UTM_Zone_2N = 26702
esriSRProjCS_NAD1927_UTM_Zone_59N = 3370
esriSRProjCS_NAD1927_UTM_Zone_60N = 3371
esriSRProjCS_NAD1983_10TM_AEP_Forest = 3400
esriSRProjCS_NAD1983_10TM_AEP_Resource = 3401
esriSRProjCS_NAD1983_3TM_111 = 3775
esriSRProjCS_NAD1983_3TM_114 = 3776
esriSRProjCS_NAD1983_3TM_117 = 3777
esriSRProjCS_NAD1983_3TM_120 = 3801
esriSRProjCS_NAD1983_USGS_USA_Albers = 102039
esriSRProjCS_NAD1983_StatePlane_Arizona_Central_FIPS_0202_Feet_Intl = 2223
esriSRProjCS_NAD1983_StatePlane_Arizona_East_FIPS_0201_Feet_Intl = 2222
esriSRProjCS_NAD1983_StatePlane_Arizona_West_FIPS_0203_Feet_Intl = 2224
esriSRProjCS_NAD1983_BC_Environment_Albers = 3005
esriSRProjCS_NAD1983_CRS98_MTM_10 = 2952
esriSRProjCS_NAD1983_CSRS98_MTM_2_SCoPQ = 2944
esriSRProjCS_NAD1983_CRS98_MTM_3 = 2945
esriSRProjCS_NAD1983_CRS98_MTM_4 = 2946
esriSRProjCS_NAD1983_CRS98_MTM_5 = 2947
esriSRProjCS_NAD1983_CRS98_MTM_6 = 2948
esriSRProjCS_NAD1983_CRS98_MTM_7 = 2949
esriSRProjCS_NAD1983_CRS98_MTM_8 = 2950
esriSRProjCS_NAD1983_CRS98_MTM_9 = 2951
esriSRProjCS_NAD1983_CSRS98_Prince_Edward_Island = 2954
esriSRProjCS_NAD1983_CSRS98_UTM_Zone_11N = 2955
esriSRProjCS_NAD1983_CSRS98_UTM_Zone_12N = 2956
esriSRProjCS_NAD1983_CSRS98_UTM_Zone_13N = 2957
esriSRProjCS_NAD1983_CSRS98_UTM_Zone_17N = 2958
esriSRProjCS_NAD1983_CSRS98_UTM_Zone_18N = 2959
esriSRProjCS_NAD1983_CSRS98_UTM_Zone_21N = 2962
esriSRProjCS_NAD1983_Georgia_Statewide_Lambert = 102604
esriSRProjCS_NAD1983HARN_Adj_MN_Aitkin_Feet = 103700
esriSRProjCS_NAD1983HARN_Adj_MN_Aitkin_Meters = 103600
esriSRProjCS_NAD1983HARN_Adj_MN_Anoka_Feet = 103708
esriSRProjCS_NAD1983HARN_Adj_MN_Anoka_Meters = 103608
esriSRProjCS_NAD1983HARN_Adj_MN_Becker_Feet = 103709
esriSRProjCS_NAD1983HARN_Adj_MN_Becker_Meters = 103609
esriSRProjCS_NAD1983HARN_Adj_MN_Beltrami_North_Feet = 103710
esriSRProjCS_NAD1983HARN_Adj_MN_Beltrami_North_Meters = 103610
esriSRProjCS_NAD1983HARN_Adj_MN_Beltrami_South_Feet = 103711
esriSRProjCS_NAD1983HARN_Adj_MN_Beltrami_South_Meters = 103611
esriSRProjCS_NAD1983HARN_Adj_MN_Benton_Feet = 103712
esriSRProjCS_NAD1983HARN_Adj_MN_Benton_Meters = 103612
esriSRProjCS_NAD1983HARN_Adj_MN_Big_Stone_Feet = 103713
esriSRProjCS_NAD1983HARN_Adj_MN_Big_Stone_Meters = 103613
esriSRProjCS_NAD1983HARN_Adj_MN_Blue_Earth_Feet = 103714
esriSRProjCS_NAD1983HARN_Adj_MN_Blue_Earth_Meters = 103614
esriSRProjCS_NAD1983HARN_Adj_MN_Brown_Feet = 103715
esriSRProjCS_NAD1983HARN_Adj_MN_Brown_Meters = 103615
esriSRProjCS_NAD1983HARN_Adj_MN_Carlton_Feet = 103716
esriSRProjCS_NAD1983HARN_Adj_MN_Carlton_Meters = 103616
esriSRProjCS_NAD1983HARN_Adj_MN_Carver_Feet = 103717
esriSRProjCS_NAD1983HARN_Adj_MN_Carver_Meters = 103617
esriSRProjCS_NAD1983HARN_Adj_MN_Cass_North_Feet = 103718
esriSRProjCS_NAD1983HARN_Adj_MN_Cass_North_Meters = 103618
esriSRProjCS_NAD1983HARN_Adj_MN_Cass_South_Feet = 103719
esriSRProjCS_NAD1983HARN_Adj_MN_Cass_South_Meters = 103619
esriSRProjCS_NAD1983HARN_Adj_MN_Chippewa_Feet = 103720
esriSRProjCS_NAD1983HARN_Adj_MN_Chippewa_Meters = 103620
esriSRProjCS_NAD1983HARN_Adj_MN_Chisago_Feet = 103721
esriSRProjCS_NAD1983HARN_Adj_MN_Chisago_Meters = 103621
esriSRProjCS_NAD1983HARN_Adj_MN_Clay_Feet = 103701
esriSRProjCS_NAD1983HARN_Adj_MN_Clay_Meters = 103601
esriSRProjCS_NAD1983HARN_Adj_MN_Clearwater_Feet = 103702
esriSRProjCS_NAD1983HARN_Adj_MN_Clearwater_Meters = 103602
esriSRProjCS_NAD1983HARN_Adj_MN_Cook_North_Feet = 103722
esriSRProjCS_NAD1983HARN_Adj_MN_Cook_North_Meters = 103622
esriSRProjCS_NAD1983HARN_Adj_MN_Cook_South_Feet = 103723
esriSRProjCS_NAD1983HARN_Adj_MN_Cook_South_Meters = 103623
esriSRProjCS_NAD1983HARN_Adj_MN_Cottonwood_Feet = 103724
esriSRProjCS_NAD1983HARN_Adj_MN_Cottonwood_Meters = 103624
esriSRProjCS_NAD1983HARN_Adj_MN_Crow_Wing_Feet = 103725
esriSRProjCS_NAD1983HARN_Adj_MN_Crow_Wing_Meters = 103625
esriSRProjCS_NAD1983HARN_Adj_MN_Dakota_Feet = 103726
esriSRProjCS_NAD1983HARN_Adj_MN_Dakota_Meters = 103626
esriSRProjCS_NAD1983HARN_Adj_MN_Dodge_Feet = 103727
esriSRProjCS_NAD1983HARN_Adj_MN_Dodge_Meters = 103627
esriSRProjCS_NAD1983HARN_Adj_MN_Douglas_Feet = 103728
esriSRProjCS_NAD1983HARN_Adj_MN_Douglas_Meters = 103628
esriSRProjCS_NAD1983HARN_Adj_MN_Faribault_Feet = 103729
esriSRProjCS_NAD1983HARN_Adj_MN_Faribault_Meters = 103629
esriSRProjCS_NAD1983HARN_Adj_MN_Fillmore_Feet = 103730
esriSRProjCS_NAD1983HARN_Adj_MN_Fillmore_Meters = 103630
esriSRProjCS_NAD1983HARN_Adj_MN_Freeborn_Feet = 103731
esriSRProjCS_NAD1983HARN_Adj_MN_Freeborn_Meters = 103631
esriSRProjCS_NAD1983HARN_Adj_MN_Goodhue_Feet = 103732
esriSRProjCS_NAD1983HARN_Adj_MN_Goodhue_Meters = 103632
esriSRProjCS_NAD1983HARN_Adj_MN_Grant_Feet = 103733
esriSRProjCS_NAD1983HARN_Adj_MN_Grant_Meters = 103633
esriSRProjCS_NAD1983HARN_Adj_MN_Hennepin_Feet = 103734
esriSRProjCS_NAD1983HARN_Adj_MN_Hennepin_Meters = 103634
esriSRProjCS_NAD1983HARN_Adj_MN_Houston_Feet = 103735
esriSRProjCS_NAD1983HARN_Adj_MN_Houston_Meters = 103635
esriSRProjCS_NAD1983HARN_Adj_MN_Hubbard_Feet = 103703
esriSRProjCS_NAD1983HARN_Adj_MN_Hubbard_Meters = 103603
esriSRProjCS_NAD1983HARN_Adj_MN_Isanti_Feet = 103736
esriSRProjCS_NAD1983HARN_Adj_MN_Isanti_Meters = 103636
esriSRProjCS_NAD1983HARN_Adj_MN_Itasca_North_Feet = 103737
esriSRProjCS_NAD1983HARN_Adj_MN_Itasca_North_Meters = 103637
esriSRProjCS_NAD1983HARN_Adj_MN_Itasca_South_Feet = 103738
esriSRProjCS_NAD1983HARN_Adj_MN_Itasca_South_Meters = 103638
esriSRProjCS_NAD1983HARN_Adj_MN_Jackson_Feet = 103739
esriSRProjCS_NAD1983HARN_Adj_MN_Jackson_Meters = 103639
esriSRProjCS_NAD1983HARN_Adj_MN_Kanabec_Feet = 103740
esriSRProjCS_NAD1983HARN_Adj_MN_Kanabec_Meters = 103640
esriSRProjCS_NAD1983HARN_Adj_MN_Kandiyohi_Feet = 103741
esriSRProjCS_NAD1983HARN_Adj_MN_Kandiyohi_Meters = 103641
esriSRProjCS_NAD1983HARN_Adj_MN_Kittson_Feet = 103742
esriSRProjCS_NAD1983HARN_Adj_MN_Kittson_Meters = 103642
esriSRProjCS_NAD1983HARN_Adj_MN_Koochiching_Feet = 103743
esriSRProjCS_NAD1983HARN_Adj_MN_Koochiching_Meters = 103643
esriSRProjCS_NAD1983HARN_Adj_MN_Lac_Qui_Parle_Feet = 103744
esriSRProjCS_NAD1983HARN_Adj_MN_Lac_Qui_Parle_Meters = 103644
esriSRProjCS_NAD1983HARN_Adj_MN_Lake_Feet = 103704
esriSRProjCS_NAD1983HARN_Adj_MN_Lake_Meters = 103604
esriSRProjCS_NAD1983HARN_Adj_MN_Lake_of_the_Woods_North_Feet = 103745
esriSRProjCS_NAD1983HARN_Adj_MN_Lake_of_the_Woods_North_Meters = 103645
esriSRProjCS_NAD1983HARN_Adj_MN_Lake_of_the_Woods_South_Feet = 103746
esriSRProjCS_NAD1983HARN_Adj_MN_Lake_of_the_Woods_South_Meters = 103646
esriSRProjCS_NAD1983HARN_Adj_MN_Le_Sueur_Feet = 103747
esriSRProjCS_NAD1983HARN_Adj_MN_Le_Sueur_Meters = 103647
esriSRProjCS_NAD1983HARN_Adj_MN_Lincoln_Feet = 103748
esriSRProjCS_NAD1983HARN_Adj_MN_Lincoln_Meters = 103648
esriSRProjCS_NAD1983HARN_Adj_MN_Lyon_Feet = 103749
esriSRProjCS_NAD1983HARN_Adj_MN_Lyon_Meters = 103649
esriSRProjCS_NAD1983HARN_Adj_MN_Mahnomen_Feet = 103751
esriSRProjCS_NAD1983HARN_Adj_MN_Mahnomen_Meters = 103651
esriSRProjCS_NAD1983HARN_Adj_MN_Marshall_Feet = 103752
esriSRProjCS_NAD1983HARN_Adj_MN_Marshall_Meters = 103652
esriSRProjCS_NAD1983HARN_Adj_MN_Martin_Feet = 103753
esriSRProjCS_NAD1983HARN_Adj_MN_Martin_Meters = 103653
esriSRProjCS_NAD1983HARN_Adj_MN_McLeod_Feet = 103750
esriSRProjCS_NAD1983HARN_Adj_MN_McLeod_Meters = 103650
esriSRProjCS_NAD1983HARN_Adj_MN_Meeker_Feet = 103754
esriSRProjCS_NAD1983HARN_Adj_MN_Meeker_Meters = 103654
esriSRProjCS_NAD1983HARN_Adj_MN_Mille_Lacs_Feet = 103705
esriSRProjCS_NAD1983HARN_Adj_MN_Mille_Lacs_Meters = 103605
esriSRProjCS_NAD1983HARN_Adj_MN_Morrison_Feet = 103755
esriSRProjCS_NAD1983HARN_Adj_MN_Morrison_Meters = 103655
esriSRProjCS_NAD1983HARN_Adj_MN_Mower_Feet = 103756
esriSRProjCS_NAD1983HARN_Adj_MN_Mower_Meters = 103656
esriSRProjCS_NAD1983HARN_Adj_MN_Murray_Feet = 103757
esriSRProjCS_NAD1983HARN_Adj_MN_Murray_Meters = 103657
esriSRProjCS_NAD1983HARN_Adj_MN_Nicollet_Feet = 103758
esriSRProjCS_NAD1983HARN_Adj_MN_Nicollet_Meters = 103658
esriSRProjCS_NAD1983HARN_Adj_MN_Nobles_Feet = 103759
esriSRProjCS_NAD1983HARN_Adj_MN_Nobles_Meters = 103659
esriSRProjCS_NAD1983HARN_Adj_MN_Norman_Feet = 103760
esriSRProjCS_NAD1983HARN_Adj_MN_Norman_Meters = 103660
esriSRProjCS_NAD1983HARN_Adj_MN_Olmsted_Feet = 103761
esriSRProjCS_NAD1983HARN_Adj_MN_Olmsted_Meters = 103661
esriSRProjCS_NAD1983HARN_Adj_MN_Ottertail_Feet = 103762
esriSRProjCS_NAD1983HARN_Adj_MN_Ottertail_Meters = 103662
esriSRProjCS_NAD1983HARN_Adj_MN_Pennington_Feet = 103763
esriSRProjCS_NAD1983HARN_Adj_MN_Pennington_Meters = 103663
esriSRProjCS_NAD1983HARN_Adj_MN_Pine_Feet = 103764
esriSRProjCS_NAD1983HARN_Adj_MN_Pine_Meters = 103664
esriSRProjCS_NAD1983HARN_Adj_MN_Pipestone_Feet = 103765
esriSRProjCS_NAD1983HARN_Adj_MN_Pipestone_Meters = 103665
esriSRProjCS_NAD1983HARN_Adj_MN_Polk_Feet = 103766
esriSRProjCS_NAD1983HARN_Adj_MN_Polk_Meters = 103666
esriSRProjCS_NAD1983HARN_Adj_MN_Pope_Feet = 103767
esriSRProjCS_NAD1983HARN_Adj_MN_Pope_Meters = 103667
esriSRProjCS_NAD1983HARN_Adj_MN_Ramsey_Feet = 103768
esriSRProjCS_NAD1983HARN_Adj_MN_Ramsey_Meters = 103668
esriSRProjCS_NAD1983HARN_Adj_MN_Redwood_Feet = 103770
esriSRProjCS_NAD1983HARN_Adj_MN_Redwood_Meters = 103670
esriSRProjCS_NAD1983HARN_Adj_MN_Red_Lake_Feet = 103769
esriSRProjCS_NAD1983HARN_Adj_MN_Red_Lake_Meters = 103669
esriSRProjCS_NAD1983HARN_Adj_MN_Renville_Feet = 103771
esriSRProjCS_NAD1983HARN_Adj_MN_Renville_Meters = 103671
esriSRProjCS_NAD1983HARN_Adj_MN_Rice_Feet = 103772
esriSRProjCS_NAD1983HARN_Adj_MN_Rice_Meters = 103672
esriSRProjCS_NAD1983HARN_Adj_MN_Rock_Feet = 103773
esriSRProjCS_NAD1983HARN_Adj_MN_Rock_Meters = 103673
esriSRProjCS_NAD1983HARN_Adj_MN_Roseau_Feet = 103774
esriSRProjCS_NAD1983HARN_Adj_MN_Roseau_Meters = 103674
esriSRProjCS_NAD1983HARN_Adj_MN_Scott_Feet = 103778
esriSRProjCS_NAD1983HARN_Adj_MN_Scott_Meters = 103678
esriSRProjCS_NAD1983HARN_Adj_MN_Sherburne_Feet = 103779
esriSRProjCS_NAD1983HARN_Adj_MN_Sherburne_Meters = 103679
esriSRProjCS_NAD1983HARN_Adj_MN_Sibley_Feet = 103780
esriSRProjCS_NAD1983HARN_Adj_MN_Sibley_Meters = 103680
esriSRProjCS_NAD1983HARN_Adj_MN_Stearns_Feet = 103781
esriSRProjCS_NAD1983HARN_Adj_MN_Stearns_Meters = 103681
esriSRProjCS_NAD1983HARN_Adj_MN_Steele_Feet = 103782
esriSRProjCS_NAD1983HARN_Adj_MN_Steele_Meters = 103682
esriSRProjCS_NAD1983HARN_Adj_MN_Stevens_Feet = 103783
esriSRProjCS_NAD1983HARN_Adj_MN_Stevens_Meters = 103683
esriSRProjCS_NAD1983HARN_Adj_MN_St_Louis_Central_Feet = 103776
esriSRProjCS_NAD1983HARN_Adj_MN_St_Louis_Central_Meters = 103676
esriSRProjCS_NAD1983HARN_Adj_MN_St_Louis_North_Feet = 103775
esriSRProjCS_NAD1983HARN_Adj_MN_St_Louis_North_Meters = 103675
esriSRProjCS_NAD1983HARN_Adj_MN_St_Louis_South_Feet = 103777
esriSRProjCS_NAD1983HARN_Adj_MN_St_Louis_South_Meters = 103677
esriSRProjCS_NAD1983HARN_Adj_MN_Swift_Feet = 103784
esriSRProjCS_NAD1983HARN_Adj_MN_Swift_Meters = 103684
esriSRProjCS_NAD1983HARN_Adj_MN_Todd_Feet = 103785
esriSRProjCS_NAD1983HARN_Adj_MN_Todd_Meters = 103685
esriSRProjCS_NAD1983HARN_Adj_MN_Traverse_Feet = 103786
esriSRProjCS_NAD1983HARN_Adj_MN_Traverse_Meters = 103686
esriSRProjCS_NAD1983HARN_Adj_MN_Wabasha_Feet = 103787
esriSRProjCS_NAD1983HARN_Adj_MN_Wabasha_Meters = 103687
esriSRProjCS_NAD1983HARN_Adj_MN_Wadena_Feet = 103788
esriSRProjCS_NAD1983HARN_Adj_MN_Wadena_Meters = 103688
esriSRProjCS_NAD1983HARN_Adj_MN_Waseca_Feet = 103789
esriSRProjCS_NAD1983HARN_Adj_MN_Waseca_Meters = 103689
esriSRProjCS_NAD1983HARN_Adj_MN_Washington_Feet = 103706
esriSRProjCS_NAD1983HARN_Adj_MN_Washington_Meters = 103606
esriSRProjCS_NAD1983HARN_Adj_MN_Watonwan_Feet = 103790
esriSRProjCS_NAD1983HARN_Adj_MN_Watonwan_Meters = 103690
esriSRProjCS_NAD1983HARN_Adj_MN_Wilkin_Feet = 103707
esriSRProjCS_NAD1983HARN_Adj_MN_Wilkin_Meters = 103607
esriSRProjCS_NAD1983HARN_Adj_MN_Winona_Feet = 103791
esriSRProjCS_NAD1983HARN_Adj_MN_Winona_Meters = 103691
esriSRProjCS_NAD1983HARN_Adj_MN_Wright_Feet = 103792
esriSRProjCS_NAD1983HARN_Adj_MN_Wright_Meters = 103692
esriSRProjCS_NAD1983HARN_Adj_MN_Yellow_Medicine_Feet = 103793
esriSRProjCS_NAD1983HARN_Adj_MN_Yellow_Medicine_Meters = 103693
esriSRProjCS_NAD1983HARN_Adj_WI_Adams_Feet = 103900
esriSRProjCS_NAD1983HARN_Adj_WI_Adams_Meters = 103800
esriSRProjCS_NAD1983HARN_Adj_WI_Ashland_Feet = 103901
esriSRProjCS_NAD1983HARN_Adj_WI_Ashland_Meters = 103801
esriSRProjCS_NAD1983HARN_Adj_WI_Barron_Feet = 103902
esriSRProjCS_NAD1983HARN_Adj_WI_Barron_Meters = 103802
esriSRProjCS_NAD1983HARN_Adj_WI_Bayfield_Feet = 103944
esriSRProjCS_NAD1983HARN_Adj_WI_Bayfield_Meters = 103844
esriSRProjCS_NAD1983HARN_Adj_WI_Burnett_Feet = 103945
esriSRProjCS_NAD1983HARN_Adj_WI_Burnett_Meters = 103845
esriSRProjCS_NAD1983HARN_Adj_WI_Brown_Feet = 103903
esriSRProjCS_NAD1983HARN_Adj_WI_Brown_Meters = 103803
esriSRProjCS_NAD1983HARN_Adj_WI_Buffalo_Feet = 103904
esriSRProjCS_NAD1983HARN_Adj_WI_Buffalo_Meters = 103804
esriSRProjCS_NAD1983HARN_Adj_WI_Clark_Feet = 103906
esriSRProjCS_NAD1983HARN_Adj_WI_Clark_Meters = 103806
esriSRProjCS_NAD1983HARN_Adj_WI_Calumet_Feet = 103905
esriSRProjCS_NAD1983HARN_Adj_WI_Calumet_Meters = 103805
esriSRProjCS_NAD1983HARN_Adj_WI_Columbia_Feet = 103947
esriSRProjCS_NAD1983HARN_Adj_WI_Columbia_Meters = 103847
esriSRProjCS_NAD1983HARN_Adj_WI_Chippewa_Feet = 103946
esriSRProjCS_NAD1983HARN_Adj_WI_Chippewa_Meters = 103846
esriSRProjCS_NAD1983HARN_Adj_WI_Crawford_Feet = 103948
esriSRProjCS_NAD1983HARN_Adj_WI_Crawford_Meters = 103848
esriSRProjCS_NAD1983HARN_Adj_WI_Dodge_Feet = 103907
esriSRProjCS_NAD1983HARN_Adj_WI_Dodge_Meters = 103807
esriSRProjCS_NAD1983HARN_Adj_WI_Douglas_Feet = 103909
esriSRProjCS_NAD1983HARN_Adj_WI_Douglas_Meters = 103809
esriSRProjCS_NAD1983HARN_Adj_WI_Dane_Feet = 103949
esriSRProjCS_NAD1983HARN_Adj_WI_Dane_Meters = 103849
esriSRProjCS_NAD1983HARN_Adj_WI_Door_Feet = 103908
esriSRProjCS_NAD1983HARN_Adj_WI_Door_Meters = 103808
esriSRProjCS_NAD1983HARN_Adj_WI_Dunn_Feet = 103910
esriSRProjCS_NAD1983HARN_Adj_WI_Dunn_Meters = 103810
esriSRProjCS_NAD1983HARN_Adj_WI_EauClaire_Feet = 103950
esriSRProjCS_NAD1983HARN_Adj_WI_EauClaire_Meters = 103850
esriSRProjCS_NAD1983HARN_Adj_WI_Fond_du_Lac_Feet = 103912
esriSRProjCS_NAD1983HARN_Adj_WI_Fond_du_Lac_Meters = 103812
esriSRProjCS_NAD1983HARN_Adj_WI_Florence_Feet = 103911
esriSRProjCS_NAD1983HARN_Adj_WI_Florence_Meters = 103811
esriSRProjCS_NAD1983HARN_Adj_WI_Forest_Feet = 103913
esriSRProjCS_NAD1983HARN_Adj_WI_Forest_Meters = 103813
esriSRProjCS_NAD1983HARN_Adj_WI_GreenLake_Feet = 103952
esriSRProjCS_NAD1983HARN_Adj_WI_GreenLake_Meters = 103852
esriSRProjCS_NAD1983HARN_Adj_WI_Green_Feet = 103951
esriSRProjCS_NAD1983HARN_Adj_WI_Green_Meters = 103851
esriSRProjCS_NAD1983HARN_Adj_WI_Grant_Feet = 103914
esriSRProjCS_NAD1983HARN_Adj_WI_Grant_Meters = 103814
esriSRProjCS_NAD1983HARN_Adj_WI_Iowa_Feet = 103915
esriSRProjCS_NAD1983HARN_Adj_WI_Iowa_Meters = 103815
esriSRProjCS_NAD1983HARN_Adj_WI_Iron_Feet = 103916
esriSRProjCS_NAD1983HARN_Adj_WI_Iron_Meters = 103816
esriSRProjCS_NAD1983HARN_Adj_WI_Jackson_Feet = 103953
esriSRProjCS_NAD1983HARN_Adj_WI_Jackson_Meters = 103853
esriSRProjCS_NAD1983HARN_Adj_WI_Jefferson_Feet = 103917
esriSRProjCS_NAD1983HARN_Adj_WI_Jefferson_Meters = 103817
esriSRProjCS_NAD1983HARN_Adj_WI_Juneau_Feet = 103918
esriSRProjCS_NAD1983HARN_Adj_WI_Juneau_Meters = 103818
esriSRProjCS_NAD1983HARN_Adj_WI_Kenosha_Feet = 103919
esriSRProjCS_NAD1983HARN_Adj_WI_Kenosha_Meters = 103819
esriSRProjCS_NAD1983HARN_Adj_WI_Kewaunee_Feet = 103920
esriSRProjCS_NAD1983HARN_Adj_WI_Kewaunee_Meters = 103820
esriSRProjCS_NAD1983HARN_Adj_WI_LaCrosse_Feet = 103921
esriSRProjCS_NAD1983HARN_Adj_WI_LaCrosse_Meters = 103821
esriSRProjCS_NAD1983HARN_Adj_WI_Lafayette_Feet = 103954
esriSRProjCS_NAD1983HARN_Adj_WI_Lafayette_Meters = 103854
esriSRProjCS_NAD1983HARN_Adj_WI_Langlade_Feet = 103955
esriSRProjCS_NAD1983HARN_Adj_WI_Langlade_Meters = 103855
esriSRProjCS_NAD1983HARN_Adj_WI_Lincoln_Feet = 103922
esriSRProjCS_NAD1983HARN_Adj_WI_Lincoln_Meters = 103822
esriSRProjCS_NAD1983HARN_Adj_WI_Marathon_Feet = 103956
esriSRProjCS_NAD1983HARN_Adj_WI_Marathon_Meters = 103856
esriSRProjCS_NAD1983HARN_Adj_WI_Menominee_Feet = 103925
esriSRProjCS_NAD1983HARN_Adj_WI_Menominee_Meters = 103825
esriSRProjCS_NAD1983HARN_Adj_WI_Marinette_Feet = 103924
esriSRProjCS_NAD1983HARN_Adj_WI_Marinette_Meters = 103824
esriSRProjCS_NAD1983HARN_Adj_WI_Marquette_Feet = 103957
esriSRProjCS_NAD1983HARN_Adj_WI_Marquette_Meters = 103857
esriSRProjCS_NAD1983HARN_Adj_WI_Monroe_Feet = 103958
esriSRProjCS_NAD1983HARN_Adj_WI_Monroe_Meters = 103858
esriSRProjCS_NAD1983HARN_Adj_WI_Manitowoc_Feet = 103923
esriSRProjCS_NAD1983HARN_Adj_WI_Manitowoc_Meters = 103823
esriSRProjCS_NAD1983HARN_Adj_WI_Milwaukee_Feet = 103926
esriSRProjCS_NAD1983HARN_Adj_WI_Milwaukee_Meters = 103826
esriSRProjCS_NAD1983HARN_Adj_WI_Oconto_Feet = 103927
esriSRProjCS_NAD1983HARN_Adj_WI_Oconto_Meters = 103827
esriSRProjCS_NAD1983HARN_Adj_WI_Outagamie_Feet = 103928
esriSRProjCS_NAD1983HARN_Adj_WI_Outagamie_Meters = 103828
esriSRProjCS_NAD1983HARN_Adj_WI_Oneida_Feet = 103959
esriSRProjCS_NAD1983HARN_Adj_WI_Oneida_Meters = 103859
esriSRProjCS_NAD1983HARN_Adj_WI_Ozaukee_Feet = 103929
esriSRProjCS_NAD1983HARN_Adj_WI_Ozaukee_Meters = 103829
esriSRProjCS_NAD1983HARN_Adj_WI_Pierce_Feet = 103961
esriSRProjCS_NAD1983HARN_Adj_WI_Pierce_Meters = 103861
esriSRProjCS_NAD1983HARN_Adj_WI_Polk_Feet = 103930
esriSRProjCS_NAD1983HARN_Adj_WI_Polk_Meters = 103830
esriSRProjCS_NAD1983HARN_Adj_WI_Pepin_Feet = 103960
esriSRProjCS_NAD1983HARN_Adj_WI_Pepin_Meters = 103860
esriSRProjCS_NAD1983HARN_Adj_WI_Price_Feet = 103931
esriSRProjCS_NAD1983HARN_Adj_WI_Price_Meters = 103831
esriSRProjCS_NAD1983HARN_Adj_WI_Portage_Feet = 103962
esriSRProjCS_NAD1983HARN_Adj_WI_Portage_Meters = 103862
esriSRProjCS_NAD1983HARN_Adj_WI_Racine_Feet = 103932
esriSRProjCS_NAD1983HARN_Adj_WI_Racine_Meters = 103832
esriSRProjCS_NAD1983HARN_Adj_WI_Richland_Feet = 103963
esriSRProjCS_NAD1983HARN_Adj_WI_Richland_Meters = 103863
esriSRProjCS_NAD1983HARN_Adj_WI_Rock_Feet = 103933
esriSRProjCS_NAD1983HARN_Adj_WI_Rock_Meters = 103833
esriSRProjCS_NAD1983HARN_Adj_WI_Rusk_Feet = 103934
esriSRProjCS_NAD1983HARN_Adj_WI_Rusk_Meters = 103834
esriSRProjCS_NAD1983HARN_Adj_WI_St_Croix_Feet = 103935
esriSRProjCS_NAD1983HARN_Adj_WI_St_Croix_Meters = 103835
esriSRProjCS_NAD1983HARN_Adj_WI_Sheboygan_Feet = 103938
esriSRProjCS_NAD1983HARN_Adj_WI_Sheboygan_Meters = 103838
esriSRProjCS_NAD1983HARN_Adj_WI_Shawano_Feet = 103937
esriSRProjCS_NAD1983HARN_Adj_WI_Shawano_Meters = 103837
esriSRProjCS_NAD1983HARN_Adj_WI_Sauk_Feet = 103936
esriSRProjCS_NAD1983HARN_Adj_WI_Sauk_Meters = 103836
esriSRProjCS_NAD1983HARN_Adj_WI_Sawyer_Feet = 103964
esriSRProjCS_NAD1983HARN_Adj_WI_Sawyer_Meters = 103864
esriSRProjCS_NAD1983HARN_Adj_WI_Taylor_Feet = 103965
esriSRProjCS_NAD1983HARN_Adj_WI_Taylor_Meters = 103865
esriSRProjCS_NAD1983HARN_Adj_WI_Trempealeau_Feet = 103939
esriSRProjCS_NAD1983HARN_Adj_WI_Trempealeau_Meters = 103839
esriSRProjCS_NAD1983HARN_Adj_WI_Vilas_Feet = 103967
esriSRProjCS_NAD1983HARN_Adj_WI_Vilas_Meters = 103867
esriSRProjCS_NAD1983HARN_Adj_WI_Vernon_Feet = 103966
esriSRProjCS_NAD1983HARN_Adj_WI_Vernon_Meters = 103866
esriSRProjCS_NAD1983HARN_Adj_WI_Washington_Feet = 103940
esriSRProjCS_NAD1983HARN_Adj_WI_Washington_Meters = 103840
esriSRProjCS_NAD1983HARN_Adj_WI_Washburn_Feet = 103969
esriSRProjCS_NAD1983HARN_Adj_WI_Washburn_Meters = 103869
esriSRProjCS_NAD1983HARN_Adj_WI_Wood_Feet = 103971
esriSRProjCS_NAD1983HARN_Adj_WI_Wood_Meters = 103871
esriSRProjCS_NAD1983HARN_Adj_WI_Waukesha_Feet = 103941
esriSRProjCS_NAD1983HARN_Adj_WI_Waukesha_Meters = 103841
esriSRProjCS_NAD1983HARN_Adj_WI_Winnebago_Feet = 103943
esriSRProjCS_NAD1983HARN_Adj_WI_Winnebago_Meters = 103843
esriSRProjCS_NAD1983HARN_Adj_WI_Waupaca_Feet = 103942
esriSRProjCS_NAD1983HARN_Adj_WI_Waupaca_Meters = 103842
esriSRProjCS_NAD1983HARN_Adj_WI_Waushara_Feet = 103970
esriSRProjCS_NAD1983HARN_Adj_WI_Waushara_Meters = 103870
esriSRProjCS_NAD1983HARN_Adj_WI_Walworth_Feet = 103968
esriSRProjCS_NAD1983HARN_Adj_WI_Walworth_Meters = 103868
esriSRProjCS_NAD1983HARN_StatePlane_Arizona_Central_FIPS_0202_Feet_Intl = 2868
esriSRProjCS_NAD1983HARN_StatePlane_Arizona_East_FIPS_0201_Feet_Intl = 2867
esriSRProjCS_NAD1983HARN_StatePlane_Arizona_West_FIPS_0203_Feet_Intl = 2869
esriSRProjCS_NAD1983HARN_StatePlane_California_III_FIPS_0403_Ft = 2872
esriSRProjCS_NAD1983HARN_StatePlane_California_II_FIPS_0402_Ft = 2871
esriSRProjCS_NAD1983HARN_StatePlane_California_IV_FIPS_0404_Ft = 2873
esriSRProjCS_NAD1983HARN_StatePlane_California_I_FIPS_0401_Ft = 2870
esriSRProjCS_NAD1983HARN_StatePlane_California_VI_FIPS_0406_Ft = 2875
esriSRProjCS_NAD1983HARN_StatePlane_California_V_FIPS_0405_Ft = 2874
esriSRProjCS_NAD1983HARN_StatePlane_Colorado_Central_FIPS_0502_Ft = 2877
esriSRProjCS_NAD1983HARN_StatePlane_Colorado_North_FIPS_0501_Ft = 2876
esriSRProjCS_NAD1983HARN_StatePlane_Colorado_South_FIPS_0503_Ft = 2878
esriSRProjCS_NAD1983HARN_StatePlane_Connecticut_FIPS_0600_Ft = 2879
esriSRProjCS_NAD1983HARN_StatePlane_Delaware_FIPS_0700_Ft = 2880
esriSRProjCS_NAD1983HARN_StatePlane_Florida_East_FIPS_0901_Ft = 2881
esriSRProjCS_NAD1983HARN_StatePlane_Florida_North_FIPS_0903_Ft = 2883
esriSRProjCS_NAD1983HARN_StatePlane_Florida_West_FIPS_0902_Ft = 2882
esriSRProjCS_NAD1983HARN_StatePlane_Georgia_East_FIPS_1001_Ft = 2884
esriSRProjCS_NAD1983HARN_StatePlane_Georgia_West_FIPS_1002_Ft = 2885
esriSRProjCS_NAD1983HARN_Guam_Map_Grid = 4414
esriSRProjCS_NAD1983HARN_StatePlane_Hawaii_1_FIPS_5101_Feet = 102461
esriSRProjCS_NAD1983HARN_StatePlane_Hawaii_2_FIPS_5102_Feet = 102462
esriSRProjCS_NAD1983HARN_StatePlane_Hawaii_3_FIPS_5103_Feet = 3760
esriSRProjCS_NAD1983HARN_StatePlane_Hawaii_4_FIPS_5104_Feet = 102464
esriSRProjCS_NAD1983HARN_StatePlane_Hawaii_5_FIPS_5105_Feet = 102465
esriSRProjCS_NAD1983HARN_StatePlane_Iowa_North_FIPS_1401 = 2794
esriSRProjCS_NAD1983HARN_StatePlane_Iowa_South_FIPS_1402 = 2795
esriSRProjCS_NAD1983HARN_StatePlane_Idaho_Central_FIPS_1102_Ft = 2887
esriSRProjCS_NAD1983HARN_StatePlane_Idaho_East_FIPS_1101_Ft = 2886
esriSRProjCS_NAD1983HARN_StatePlane_Idaho_West_FIPS_1103_Ft = 2888
esriSRProjCS_NAD1983HARN_StatePlane_Indiana_East_FIPS_1301_Ft = 2967
esriSRProjCS_NAD1983HARN_StatePlane_Indiana_West_FIPS_1302_Ft = 2968
esriSRProjCS_NAD1983HARN_StatePlane_Kentucky_FIPS_1600 = 3090
esriSRProjCS_NAD1983HARN_StatePlane_Kentucky_North_FIPS_1601_Ft = 2891
esriSRProjCS_NAD1983HARN_StatePlane_Kentucky_South_FIPS_1602_Ft = 2892
esriSRProjCS_NAD1983HARN_Maine_2000_Central_Zone = 3464
esriSRProjCS_NAD1983HARN_Maine_2000_East_Zone = 3075
esriSRProjCS_NAD1983HARN_Maine_2000_West_Zone = 3077
esriSRProjCS_NAD1983HARN_StatePlane_Massachusetts_Island_FIPS_2002_Ft = 2895
esriSRProjCS_NAD1983HARN_StatePlane_Massachusetts_Mainland_FIPS_2001_Ft = 2894
esriSRProjCS_NAD1983HARN_StatePlane_Maryland_FIPS_1900_Ft = 2893
esriSRProjCS_NAD1983HARN_StatePlane_Michigan_Central_FIPS_2112_Feet_Intl = 2897
esriSRProjCS_NAD1983HARN_StatePlane_Michigan_North_FIPS_2111_Feet_Intl = 2896
esriSRProjCS_NAD1983HARN_StatePlane_Michigan_South_FIPS_2113_Feet_Intl = 2898
esriSRProjCS_NAD1983HARN_StatePlane_Mississippi_East_FIPS_2301_Ft = 2899
esriSRProjCS_NAD1983HARN_StatePlane_Mississippi_West_FIPS_2302_Ft = 2900
esriSRProjCS_NAD1983HARN_StatePlane_Montana_FIPS_2500_Feet_Intl = 2901
esriSRProjCS_NAD1983HARN_StatePlane_North_Dakota_North_FIPS_3301_Ft_Intl = 2909
esriSRProjCS_NAD1983HARN_StatePlane_North_Dakota_South_FIPS_3302_Ft_Intl = 2910
esriSRProjCS_NAD1983HARN_StatePlane_New_Mexico_Central_FIPS_3002_Ft = 2903
esriSRProjCS_NAD1983HARN_StatePlane_New_Mexico_East_FIPS_3001_Ft = 2902
esriSRProjCS_NAD1983HARN_StatePlane_New_Mexico_West_FIPS_3003_Ft = 2904
esriSRProjCS_NAD1983HARN_StatePlane_New_York_Central_FIPS_3102_Ft = 2906
esriSRProjCS_NAD1983HARN_StatePlane_New_York_East_FIPS_3101_Ft = 2905
esriSRProjCS_NAD1983HARN_StatePlane_New_York_Long_Island_FIPS_3104_Ft = 2908
esriSRProjCS_NAD1983HARN_StatePlane_New_York_West_FIPS_3103_Ft = 2907
esriSRProjCS_NAD1983HARN_StatePlane_Oklahoma_North_FIPS_3501_Ft = 2911
esriSRProjCS_NAD1983HARN_StatePlane_Oklahoma_South_FIPS_3502_Ft = 2912
esriSRProjCS_NAD1983HARN_Oregon_Statewide_Lambert = 2993
esriSRProjCS_NAD1983HARN_Oregon_Statewide_Lambert_Feet_Intl = 2994
esriSRProjCS_NAD1983HARN_StatePlane_Oregon_North_FIPS_3601_Feet_Intl = 2913
esriSRProjCS_NAD1983HARN_StatePlane_Oregon_South_FIPS_3602_Feet_Intl = 2914
esriSRProjCS_NAD1983HARN_StatePlane_Tennessee_FIPS_4100_Ft = 2915
esriSRProjCS_NAD1983HARN_StatePlane_Texas_Central_FIPS_4203_Ft = 2918
esriSRProjCS_NAD1983HARN_StatePlane_Texas_North_Central_FIPS_4202_Ft = 2917
esriSRProjCS_NAD1983HARN_StatePlane_Texas_North_FIPS_4201_Ft = 2916
esriSRProjCS_NAD1983HARN_StatePlane_Texas_South_Central_FIPS_4204_Ft = 2919
esriSRProjCS_NAD1983HARN_StatePlane_Texas_South_FIPS_4205_Ft = 2920
esriSRProjCS_NAD1983HARN_UTM_Zone_11N = 3741
esriSRProjCS_NAD1983HARN_UTM_Zone_12N = 3742
esriSRProjCS_NAD1983HARN_UTM_Zone_13N = 3743
esriSRProjCS_NAD1983HARN_UTM_Zone_18N = 3748
esriSRProjCS_NAD1983HARN_UTM_Zone_2S = 2195
esriSRProjCS_NAD1983HARN_UTM_Zone_4N = 3750
esriSRProjCS_NAD1983HARN_UTM_Zone_5N = 3751
esriSRProjCS_NAD1983HARN_StatePlane_Utah_Central_FIPS_4302_Ft_Intl = 2922
esriSRProjCS_NAD1983HARN_StatePlane_Utah_North_FIPS_4301_Ft_Intl = 2921
esriSRProjCS_NAD1983HARN_StatePlane_Utah_South_FIPS_4303_Ft_Intl = 2923
esriSRProjCS_NAD1983HARN_StatePlane_Virginia_North_FIPS_4501_Ft = 2924
esriSRProjCS_NAD1983HARN_StatePlane_Virginia_South_FIPS_4502_Ft = 2925
esriSRProjCS_NAD1983HARN_StatePlane_Washington_North_FIPS_4601_Ft = 2926
esriSRProjCS_NAD1983HARN_StatePlane_Washington_South_FIPS_4602_Ft = 2927
esriSRProjCS_NAD1983HARN_StatePlane_Wisconsin_Central_FIPS_4802_Feet = 2929
esriSRProjCS_NAD1983HARN_StatePlane_Wisconsin_North_FIPS_4801_Feet = 2928
esriSRProjCS_NAD1983HARN_StatePlane_Wisconsin_South_FIPS_4803_Feet = 2930
esriSRProjCS_NAD1983_Idaho_TM = 102605
esriSRProjCS_NAD1983_StatePlane_Kentucky_FIPS_1600 = 3088
esriSRProjCS_NAD1983_StatePlane_Kentucky_FIPS_1600_Feet = 3089
esriSRProjCS_NAD1983_Maine_2000_East_Zone = 3072
esriSRProjCS_NAD1983_Maine_2000_Central_Zone = 3463
esriSRProjCS_NAD1983_Maine_2000_West_Zone = 3074
esriSRProjCS_NAD1983_StatePlane_Michigan_Central_FIPS_2112_Feet_Intl = 2252
esriSRProjCS_NAD1983_StatePlane_Michigan_North_FIPS_2111_Feet_Intl = 2251
esriSRProjCS_NAD1983_StatePlane_Michigan_South_FIPS_2113_Feet_Intl = 2253
esriSRProjCS_NAD1983_StatePlane_Montana_FIPS_2500_Feet_Intl = 2256
esriSRProjCS_NAD1983_StatePlane_North_Dakota_North_FIPS_3301_Feet_Intl = 2265
esriSRProjCS_NAD1983_StatePlane_North_Dakota_South_FIPS_3302_Feet_Intl = 2266
esriSRProjCS_NAD1983_Oregon_Statewide_Lambert = 2991
esriSRProjCS_NAD1983_Oregon_Statewide_Lambert_Feet_Intl = 2992
esriSRProjCS_NAD1983_StatePlane_Oregon_North_FIPS_3601_Feet_Intl = 2269
esriSRProjCS_NAD1983_StatePlane_Oregon_South_FIPS_3602_Feet_Intl = 2270
esriSRProjCS_NAD1983_StatePlane_South_Carolina_FIPS_3900_Feet_Intl = 2273
esriSRProjCS_NAD1983_Texas_Centric_Mapping_System_Albers = 3083
esriSRProjCS_NAD1983_Texas_Centric_Mapping_System_Lambert = 3082
esriSRProjCS_NAD1983_UTM_Zone_1N = 26901
esriSRProjCS_NAD1983_UTM_Zone_2N = 26902
esriSRProjCS_NAD1983_UTM_Zone_59N = 3372
esriSRProjCS_NAD1983_UTM_Zone_60N = 3373
esriSRProjCS_NAD1983_StatePlane_Utah_Central_FIPS_4302_Feet_Intl = 2281
esriSRProjCS_NAD1983_StatePlane_Utah_North_FIPS_4301_Feet_Intl = 2280
esriSRProjCS_NAD1983_StatePlane_Utah_South_FIPS_4303_Feet_Intl = 2282
esriSRProjCS_Naparima_1955_UTM_Zone_20N = 2067
esriSRProjCS_NEA74_Noumea_UTM_58S = 2998
esriSRProjCS_NGO1948_Baerum_Kommune = 102136
esriSRProjCS_NGO1948_Bergenhalvoen = 102137
esriSRProjCS_NGO1948_Oslo_Kommune = 102138
esriSRProjCS_NZGD1949_Amuri_Circuit = 27219
esriSRProjCS_NZGD1949_Bay_of_Plenty_Circuit = 27206
esriSRProjCS_NZGD1949_Bluff_Circuit = 27232
esriSRProjCS_NZGD1949_Buller_Circuit = 27217
esriSRProjCS_NZGD1949_Collingwood_Circuit = 27214
esriSRProjCS_NZGD1949_Gawler_Circuit = 27225
esriSRProjCS_NZGD1949_Grey_Circuit = 27218
esriSRProjCS_NZGD1949_Hawkes_Bay_Circuit = 27208
esriSRProjCS_NZGD1949_Hokitika_Circuit = 27221
esriSRProjCS_NZGD1949_Jacksons_Bay_Circuit = 27223
esriSRProjCS_NZGD1949_Karamea_Circuit = 27216
esriSRProjCS_NZGD1949_Lindis_Peak_Circuit = 27227
esriSRProjCS_NZGD1949_Marlborough_Circuit = 27220
esriSRProjCS_NZGD1949_Mount_Eden_Circuit = 27205
esriSRProjCS_NZGD1949_Mount_Nicholas_Circuit = 27228
esriSRProjCS_NZGD1949_Mount_Pleasant_Circuit = 27224
esriSRProjCS_NZGD1949_Mount_York_Circuit = 27229
esriSRProjCS_NZGD1949_Nelson_Circuit = 27215
esriSRProjCS_NZGD1949_North_Taieri_Circuit = 27231
esriSRProjCS_NZGD1949_Observation_Point_Circuit = 27230
esriSRProjCS_NZGD1949_Okarito_Circuit = 27222
esriSRProjCS_NZGD1949_Poverty_Bay_Circuit = 27207
esriSRProjCS_NZGD1949_Taranaki_Circuit = 27209
esriSRProjCS_NZGD1949_Timaru_Circuit = 27226
esriSRProjCS_NZGD1949_Tuhirangi_Circuit = 27210
esriSRProjCS_NZGD1949_UTM_Zone_58S = 27258
esriSRProjCS_NZGD1949_UTM_Zone_59S = 27259
esriSRProjCS_NZGD1949_UTM_Zone_60S = 27260
esriSRProjCS_NZGD1949_Wairarapa_Circuit = 27212
esriSRProjCS_NZGD1949_Wanganui_Circuit = 27211
esriSRProjCS_NZGD1949_Wellington_Circuit = 27213
esriSRProjCS_NZGD2000_Amuri_Circuit = 2119
esriSRProjCS_NZGD2000_Bay_of_Plenty_Circuit = 2106
esriSRProjCS_NZGD2000_Bluff_Circuit = 2132
esriSRProjCS_NZGD2000_Buller_Circuit = 2117
esriSRProjCS_NZGD2000_Chatham_Island_Circuit = 3764
esriSRProjCS_NZGD2000_Collingwood_Circuit = 2114
esriSRProjCS_NZGD2000_Gawler_Circuit = 2125
esriSRProjCS_NZGD2000_Grey_Circuit = 2118
esriSRProjCS_NZGD2000_Hawkes_Bay_Circuit = 2108
esriSRProjCS_NZGD2000_Hokitika_Circuit = 2121
esriSRProjCS_NZGD2000_Jacksons_Bay_Circuit = 2123
esriSRProjCS_NZGD2000_Karamea_Circuit = 2116
esriSRProjCS_NZGD2000_Lindis_Peak_Circuit = 2127
esriSRProjCS_NZGD2000_Marlborough_Circuit = 2120
esriSRProjCS_NZGD2000_Mount_Eden_Circuit = 2105
esriSRProjCS_NZGD2000_Mount_Nicholas_Circuit = 2128
esriSRProjCS_NZGD2000_Mount_Pleasant_Circuit = 2124
esriSRProjCS_NZGD2000_Mount_York_Circuit = 2129
esriSRProjCS_NZGD2000_Nelson_Circuit = 2115
esriSRProjCS_NZGD2000_North_Taieri_Circuit = 2131
esriSRProjCS_NZGD2000_Observation_Point_Circuit = 2130
esriSRProjCS_NZGD2000_Okarito_Circuit = 2122
esriSRProjCS_NZGD2000_Poverty_Bay_Circuit = 2107
esriSRProjCS_NZGD2000_Taranaki_Circuit = 2109
esriSRProjCS_NZGD2000_Timaru_Circuit = 2126
esriSRProjCS_NZGD2000_New_Zealand_Transverse_Mercator = 2193
esriSRProjCS_NZGD2000_Tuhirangi_Circuit = 2110
esriSRProjCS_NZGD2000_UTM_Zone_58S = 2133
esriSRProjCS_NZGD2000_UTM_Zone_59S = 2134
esriSRProjCS_NZGD2000_UTM_Zone_60S = 2135
esriSRProjCS_NZGD2000_Wairarapa_Circuit = 2112
esriSRProjCS_NZGD2000_Wanganui_Circuit = 2111
esriSRProjCS_NZGD2000_Wellington_Circuit = 2113
esriSRProjCS_ObservatorioMeteorologico1965_Macau_Grid = 102159
esriSRProjCS_OSNI1952_Irish_National_Grid = 29901
esriSRProjCS_Pampa_del_Castillo_Argentina_2 = 2082
esriSRProjCS_Perroud1950_Terre_Adelie_Polar_Stereographic = 2986
esriSRProjCS_Petrels1972_Terre_Adelie_Polar_Stereographic = 2985
esriSRProjCS_Piton_des_Neiges_TM_Reunion = 3727
esriSRProjCS_PortoSanto1995_UTM_Zone_28N = 3061
esriSRProjCS_PSAD1956_ICN_Regional = 2317
esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_10 = 2526
esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_102E = 2610
esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_105E = 2611
esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_108E = 2612
esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_11 = 2527
esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_111E = 2613
esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_114E = 2614
esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_117E = 2615
esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_12 = 2528
esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_120E = 2616
esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_123E = 2617
esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_126E = 2618
esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_129E = 2619
esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_13 = 2529
esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_132E = 2620
esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_135E = 2621
esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_138E = 2622
esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_14 = 2530
esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_141E = 2623
esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_144E = 2624
esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_147E = 2625
esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_15 = 2531
esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_150E = 2626
esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_153E = 2627
esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_156E = 2628
esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_159E = 2629
esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_16 = 2532
esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_162E = 2630
esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_165E = 2631
esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_168E = 2632
esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_168W = 2640
esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_17 = 2533
esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_171E = 2633
esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_171W = 2639
esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_174E = 2634
esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_174W = 2638
esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_177E = 2635
esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_177W = 2637
esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_18 = 2534
esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_180E = 2636
esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_19 = 2535
esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_20 = 2536
esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_21 = 2537
esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_21E = 2582
esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_22 = 2538
esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_23 = 2539
esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_24 = 2540
esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_24E = 2583
esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_25 = 2541
esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_26 = 2542
esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_27 = 2543
esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_27E = 2584
esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_28 = 2544
esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_29 = 2545
esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_30 = 2546
esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_30E = 2585
esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_31 = 2547
esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_32 = 2548
esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_33 = 2549
esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_33E = 2586
esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_34 = 2551
esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_35 = 2552
esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_36 = 2553
esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_36E = 2587
esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_37 = 2554
esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_38 = 2555
esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_39 = 2556
esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_39E = 2588
esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_40 = 2557
esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_41 = 2558
esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_42 = 2559
esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_42E = 2589
esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_43 = 2560
esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_44 = 2561
esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_45 = 2562
esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_45E = 2590
esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_46 = 2563
esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_47 = 2564
esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_48 = 2565
esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_48E = 2591
esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_49 = 2566
esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_50 = 2567
esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_51 = 2568
esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_51E = 2592
esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_52 = 2569
esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_53 = 2570
esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_54 = 2571
esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_54E = 2593
esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_55 = 2572
esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_56 = 2573
esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_57 = 2574
esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_57E = 2594
esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_58 = 2575
esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_59 = 2576
esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_60 = 3389
esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_60E = 2595
esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_61 = 2578
esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_62 = 2579
esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_63 = 2580
esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_63E = 2596
esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_64 = 2581
esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_66E = 2597
esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_69E = 2598
esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_7 = 2523
esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_72E = 2599
esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_75E = 2601
esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_78E = 2602
esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_8 = 2524
esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_81E = 2603
esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_84E = 2604
esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_87E = 2605
esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_9 = 2525
esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_90E = 2606
esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_93E = 2607
esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_96E = 2608
esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_99E = 2609
esriSRProjCS_Pulkovo1942_Adj_1983_3_Degree_GK_Zone_3 = 2397
esriSRProjCS_Pulkovo1942_Adj_1983_3_Degree_GK_Zone_4 = 2398
esriSRProjCS_Pulkovo1942_Adj_1983_3_Degree_GK_Zone_5 = 2399
esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_10 = 2644
esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_102E = 2726
esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_105E = 2727
esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_108E = 2728
esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_11 = 2645
esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_111E = 2729
esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_114E = 2730
esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_117E = 2731
esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_12 = 2646
esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_120E = 2732
esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_123E = 2733
esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_126E = 2734
esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_129E = 2735
esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_13 = 2647
esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_132E = 2738
esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_135E = 2739
esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_138E = 2740
esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_14 = 2648
esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_141E = 2741
esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_144E = 2742
esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_147E = 2743
esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_15 = 2649
esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_150E = 2744
esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_153E = 2745
esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_156E = 2746
esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_159E = 2747
esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_16 = 2650
esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_162E = 2748
esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_165E = 2749
esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_168E = 2750
esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_168W = 2758
esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_17 = 2651
esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_171E = 2751
esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_171W = 2757
esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_174E = 2752
esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_174W = 2756
esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_177E = 2753
esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_177W = 2755
esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_18 = 2652
esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_180E = 2754
esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_19 = 2653
esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_20 = 2654
esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_21 = 2655
esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_21E = 2699
esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_22 = 2656
esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_23 = 2657
esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_24 = 2658
esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_24E = 2700
esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_25 = 2659
esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_26 = 2660
esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_27 = 2661
esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_27E = 2701
esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_28 = 2662
esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_29 = 2663
esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_30 = 2664
esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_30E = 2702
esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_31 = 2665
esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_32 = 2666
esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_33 = 2667
esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_33E = 2703
esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_34 = 2668
esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_35 = 2669
esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_36 = 2670
esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_36E = 2704
esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_37 = 2671
esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_38 = 2672
esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_39 = 2673
esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_39E = 2705
esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_40 = 2674
esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_41 = 2675
esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_42 = 2676
esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_42E = 2706
esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_43 = 2677
esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_44 = 2678
esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_45 = 2679
esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_45E = 2707
esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_46 = 2680
esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_47 = 2681
esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_48 = 2682
esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_48E = 2708
esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_49 = 2683
esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_50 = 2684
esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_51 = 2685
esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_51E = 2709
esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_52 = 2686
esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_53 = 2687
esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_54 = 2688
esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_54E = 2710
esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_55 = 2689
esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_56 = 2690
esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_57 = 2691
esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_57E = 2711
esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_58 = 2692
esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_59 = 2693
esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_60 = 3390
esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_60E = 2712
esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_61 = 2695
esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_62 = 2696
esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_63 = 2697
esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_63E = 2713
esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_64 = 2698
esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_66E = 2714
esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_69E = 2715
esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_7 = 2641
esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_72E = 2716
esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_75E = 2717
esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_78E = 2718
esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_8 = 2642
esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_81E = 2719
esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_84E = 2720
esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_87E = 2721
esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_9 = 2643
esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_90E = 2722
esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_93E = 2723
esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_96E = 2724
esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_99E = 2725
esriSRProjCS_Qatar1948_Qatar_Grid = 2099
esriSRProjCS_Qornoq1927_UTM_Zone_22 = 2216
esriSRProjCS_Qornoq1927_UTM_Zone_23 = 2217
esriSRProjCS_Rassadiran_Nakhl_e_Taqi = 2057
esriSRProjCS_REGVEN_UTM_Zone_18 = 2201
esriSRProjCS_REGVEN_UTM_Zone_19 = 2202
esriSRProjCS_REGVEN_UTM_Zone_20 = 2203
esriSRProjCS_RGFG1995_UTM_22N = 2972
esriSRProjCS_RGNC1991_Lambert_New_Caledonia = 2984
esriSRProjCS_RGR1992_UTM_40S = 2975
esriSRProjCS_Roma1940_Gauss_Boaga_Est = 102093
esriSRProjCS_Roma1940_Gauss_Boaga_Ovest = 102094
esriSRProjCS_RRAF1991_UTM_20N = 4559
esriSRProjCS_RT38_0_gon = 3028
esriSRProjCS_RT38_25_gon_O = 3029
esriSRProjCS_RT38_25_gon_V = 3027
esriSRProjCS_RT38_5_gon_O = 3030
esriSRProjCS_RT38_5_gon_V = 3026
esriSRProjCS_RT38_75_gon_V = 3025
esriSRProjCS_RT90_0_gon = 3022
esriSRProjCS_RT90_25_gon_O = 3023
esriSRProjCS_RT90_25_gon_V = 3021
esriSRProjCS_RT90_25_gon_W = 2400
esriSRProjCS_RT90_5_gon_O = 3024
esriSRProjCS_RT90_5_gon_V = 3020
esriSRProjCS_RT90_75_gon_V = 3019
esriSRProjCS_SAD1969_Brazil_Polyconic = 29101
esriSRProjCS_SainteAnne_UTM_20N = 2970
esriSRProjCS_SaintPierre_et_Miquelon_1950_UTM_21N = 2987
esriSRProjCS_Samoa1962_Samoa_Lambert = 3102
esriSRProjCS_AmericanSamoa1962_UTM_Zone_2S = 102116
esriSRProjCS_SierraLeone1924_New_Colony_Grid = 2159
esriSRProjCS_SierraLeone1924_New_War_Office_Grid = 2160
esriSRProjCS_SierraLeone1968_UTM_Zone_28N = 2161
esriSRProjCS_SierraLeone1968_UTM_Zone_29N = 2162
esriSRProjCS_SIRGAS_UTM_Zone_17N = 31986
esriSRProjCS_SIRGAS_UTM_Zone_17S = 31992
esriSRProjCS_SIRGAS_UTM_Zone_18N = 31987
esriSRProjCS_SIRGAS_UTM_Zone_18S = 31993
esriSRProjCS_SIRGAS_UTM_Zone_19N = 31988
esriSRProjCS_SIRGAS_UTM_Zone_19S = 31994
esriSRProjCS_SIRGAS_UTM_Zone_20N = 31989
esriSRProjCS_SIRGAS_UTM_Zone_20S = 31995
esriSRProjCS_SIRGAS_UTM_Zone_21N = 31990
esriSRProjCS_SIRGAS_UTM_Zone_21S = 31996
esriSRProjCS_SIRGAS_UTM_Zone_22N = 31991
esriSRProjCS_SIRGAS_UTM_Zone_22S = 31997
esriSRProjCS_SIRGAS_UTM_Zone_23S = 31998
esriSRProjCS_SIRGAS_UTM_Zone_24S = 31999
esriSRProjCS_SIRGAS_UTM_Zone_25S = 32000
esriSRProjCS_South_Yemen_GK_Zone_8 = 2395
esriSRProjCS_South_Yemen_GK_Zone_9 = 2396
esriSRProjCS_Sphere_Cylindrical_Equal_Area = 53034
esriSRProjCS_ST71_Belep_UTM_58S = 2997
esriSRProjCS_ST84_Ile_des_Pins_UTM_58S = 2996
esriSRProjCS_ST87_Ouvea_UTM_58S = 3164
esriSRProjCS_SWEREF99_12_00 = 3007
esriSRProjCS_SWEREF99_13_30 = 3008
esriSRProjCS_SWEREF99_14_15 = 3012
esriSRProjCS_SWEREF99_15_00 = 3009
esriSRProjCS_SWEREF99_15_45 = 3013
esriSRProjCS_SWEREF99_16_30 = 3010
esriSRProjCS_SWEREF99_17_15 = 3014
esriSRProjCS_SWEREF99_18_00 = 3011
esriSRProjCS_SWEREF99_18_45 = 3015
esriSRProjCS_SWEREF99_20_15 = 3016
esriSRProjCS_SWEREF99_21_45 = 3017
esriSRProjCS_SWEREF99_23_15 = 3018
esriSRProjCS_SWEREF99_TM = 3006
esriSRProjCS_S_JTSK_Ferro_Krovak = 2065
esriSRProjCS_S_JTSK_Ferro_Krovak_East_North = 5221
esriSRProjCS_S_JTSK_Krovak = 5513
esriSRProjCS_S_JTSK_Krovak_East_North = 5514
esriSRProjCS_Tahaa_UTM_5S = 2977
esriSRProjCS_Tahiti_UTM_6S = 2976
esriSRProjCS_Timbalai1948_RSO_Borneo_Chains = 29871
esriSRProjCS_Timbalai1948_RSO_Borneo_Feet = 29872
esriSRProjCS_Timbalai1948_RSO_Borneo_Meters = 29873
esriSRProjCS_TM75_Irish_Grid = 29903
esriSRProjCS_Trinidad1903_Trinidad_Grid_Feet_Clarke = 2314
esriSRProjCS_UWPP_1992 = 102194
esriSRProjCS_UWPP_2000_PAS_5 = 102195
esriSRProjCS_UWPP_2000_PAS_6 = 102196
esriSRProjCS_UWPP_2000_PAS_7 = 102197
esriSRProjCS_UWPP_2000_PAS_8 = 102198
esriSRProjCS_NordAlgerie_Ancienne_Degree = 102491
esriSRProjCS_SudAlgerie_Ancienne_Degree = 102492
esriSRProjCS_WGS1972_BE_TM_106_NE = 2094
esriSRProjCS_WGS1984_Antarctic_Polar_Stereographic = 3031
esriSRProjCS_WGS1984_Australian_Antarctic_Lambert = 3033
esriSRProjCS_WGS1984_Australian_Antarctic_Polar_Stereographic = 3032
esriSRProjCS_WGS1984_Complex_UTM_Zone_20N = 102570
esriSRProjCS_WGS1984_Complex_UTM_Zone_21N = 102571
esriSRProjCS_WGS1984_Complex_UTM_Zone_22N = 102572
esriSRProjCS_WGS1984_Complex_UTM_Zone_23N = 102573
esriSRProjCS_WGS1984_Complex_UTM_Zone_24N = 102574
esriSRProjCS_WGS1984_Complex_UTM_Zone_25N = 102575
esriSRProjCS_WGS1984_Complex_UTM_Zone_26N = 102576
esriSRProjCS_WGS1984_Complex_UTM_Zone_27N = 102577
esriSRProjCS_WGS1984_Complex_UTM_Zone_28N = 102578
esriSRProjCS_WGS1984_Complex_UTM_Zone_29N = 102579
esriSRProjCS_WGS1984_Complex_UTM_Zone_30N = 102580
esriSRProjCS_WGS1984_TM_116_SE = 2309
esriSRProjCS_WGS1984_TM_132_SE = 2310
esriSRProjCS_WGS1984_TM_6_NE = 2311
esriSRProjCS_WorldAzimuthalEquidistant = 54032
esriSRProjCS_WorldCube = 54051
esriSRProjCS_WorldCylindricalEqualArea = 54034
esriSRProjCS_WorldFuller = 54050
esriSRProjCS_Xian1980_3_Degree_GK_CM_102E = 2379
esriSRProjCS_Xian1980_3_Degree_GK_CM_105E = 2380
esriSRProjCS_Xian1980_3_Degree_GK_CM_108E = 2381
esriSRProjCS_Xian1980_3_Degree_GK_CM_111E = 2382
esriSRProjCS_Xian1980_3_Degree_GK_CM_114E = 2383
esriSRProjCS_Xian1980_3_Degree_GK_CM_117E = 2384
esriSRProjCS_Xian1980_3_Degree_GK_CM_120E = 2385
esriSRProjCS_Xian1980_3_Degree_GK_CM_123E = 2386
esriSRProjCS_Xian1980_3_Degree_GK_CM_126E = 2387
esriSRProjCS_Xian1980_3_Degree_GK_CM_129E = 2388
esriSRProjCS_Xian1980_3_Degree_GK_CM_132E = 2389
esriSRProjCS_Xian1980_3_Degree_GK_CM_135E = 2390
esriSRProjCS_Xian1980_3_Degree_GK_Zone_25 = 2349
esriSRProjCS_Xian1980_3_Degree_GK_Zone_26 = 2350
esriSRProjCS_Xian1980_3_Degree_GK_Zone_27 = 2351
esriSRProjCS_Xian1980_3_Degree_GK_Zone_28 = 2352
esriSRProjCS_Xian1980_3_Degree_GK_Zone_29 = 2353
esriSRProjCS_Xian1980_3_Degree_GK_Zone_30 = 2354
esriSRProjCS_Xian1980_3_Degree_GK_Zone_31 = 2355
esriSRProjCS_Xian1980_3_Degree_GK_Zone_32 = 2356
esriSRProjCS_Xian1980_3_Degree_GK_Zone_33 = 2357
esriSRProjCS_Xian1980_3_Degree_GK_Zone_34 = 2358
esriSRProjCS_Xian1980_3_Degree_GK_Zone_35 = 2359
esriSRProjCS_Xian1980_3_Degree_GK_Zone_36 = 2360
esriSRProjCS_Xian1980_3_Degree_GK_Zone_37 = 2361
esriSRProjCS_Xian1980_3_Degree_GK_Zone_38 = 2362
esriSRProjCS_Xian1980_3_Degree_GK_Zone_39 = 2363
esriSRProjCS_Xian1980_3_Degree_GK_Zone_40 = 2364
esriSRProjCS_Xian1980_3_Degree_GK_Zone_41 = 2365
esriSRProjCS_Xian1980_3_Degree_GK_Zone_42 = 2366
esriSRProjCS_Xian1980_3_Degree_GK_Zone_43 = 2367
esriSRProjCS_Xian1980_3_Degree_GK_Zone_44 = 2368
esriSRProjCS_Xian1980_3_Degree_GK_Zone_45 = 2369
esriSRProjCS_Xian1980_3_Degree_GK_CM_75E = 2370
esriSRProjCS_Xian1980_3_Degree_GK_CM_78E = 2371
esriSRProjCS_Xian1980_3_Degree_GK_CM_81E = 2372
esriSRProjCS_Xian1980_3_Degree_GK_CM_84E = 2373
esriSRProjCS_Xian1980_3_Degree_GK_CM_87E = 2374
esriSRProjCS_Xian1980_3_Degree_GK_CM_90E = 2375
esriSRProjCS_Xian1980_3_Degree_GK_CM_93E = 2376
esriSRProjCS_Xian1980_3_Degree_GK_CM_96E = 2377
esriSRProjCS_Xian1980_3_Degree_GK_CM_99E = 2378
esriSRProjCS_Xian1980_GK_CM_105E = 2343
esriSRProjCS_Xian1980_GK_CM_111E = 2344
esriSRProjCS_Xian1980_GK_CM_117E = 2345
esriSRProjCS_Xian1980_GK_CM_123E = 2346
esriSRProjCS_Xian1980_GK_CM_129E = 2347
esriSRProjCS_Xian1980_GK_Zone_13 = 2327
esriSRProjCS_Xian1980_GK_CM_135E = 2348
esriSRProjCS_Xian1980_GK_Zone_14 = 2328
esriSRProjCS_Xian1980_GK_Zone_15 = 2329
esriSRProjCS_Xian1980_GK_Zone_16 = 2330
esriSRProjCS_Xian1980_GK_Zone_17 = 2331
esriSRProjCS_Xian1980_GK_Zone_18 = 2332
esriSRProjCS_Xian1980_GK_Zone_19 = 2333
esriSRProjCS_Xian1980_GK_Zone_20 = 2334
esriSRProjCS_Xian1980_GK_Zone_21 = 2335
esriSRProjCS_Xian1980_GK_Zone_22 = 2336
esriSRProjCS_Xian1980_GK_Zone_23 = 2337
esriSRProjCS_Xian1980_GK_CM_75E = 2338
esriSRProjCS_Xian1980_GK_CM_81E = 2339
esriSRProjCS_Xian1980_GK_CM_87E = 2340
esriSRProjCS_Xian1980_GK_CM_93E = 2341
esriSRProjCS_Xian1980_GK_CM_99E = 2342
esriSRProjCS_Yemen_NGN_1996_UTM_Zone_38N = 2089
esriSRProjCS_Yemen_NGN_1996_UTM_Zone_39N = 2090
esriSRProjCS_Zanderij_Suriname_Old_TM = 31170
esriSRProjCS_Zanderij_Suriname_TM = 31171
esriSRProjCS_Zanderij_TM_54_NW = 31154
esriSRProjCS4Type = c_int # enum
class IEnumVertex2(IEnumVertex):
    _case_insensitive_ = True
    u'Provides access to members that extend IEnumVertex.'
    _iid_ = GUID('{82A0B2F0-59BD-437E-9EAD-CDE15775F260}')
    _idlflags_ = ['oleautomation']
IEnumVertex2._methods_ = [
    COMMETHOD([helpstring(u'Returns the next vertex as a WKS Point structure and its location in the geometry.')], HRESULT, 'WKSNext',
              ( ['out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPoint), 'outVertex' ),
              ( ['out'], POINTER(c_int), 'outPartIndex' ),
              ( ['out'], POINTER(c_int), 'vertexIndex' )),
]
################################################################
## code template for IEnumVertex2 implementation
##class IEnumVertex2_Impl(object):
##    def WKSNext(self):
##        u'Returns the next vertex as a WKS Point structure and its location in the geometry.'
##        #return outVertex, outPartIndex, vertexIndex
##

IRelationalOperator3D2._methods_ = [
    COMMETHOD([helpstring(u'Indicates if this geometry is within distance from the other geometry; both geometries must have Zs.')], HRESULT, 'IsNear3D',
              ( [], POINTER(IGeometry), 'pOther' ),
              ( [], c_double, 'distance' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbNear' )),
]
################################################################
## code template for IRelationalOperator3D2 implementation
##class IRelationalOperator3D2_Impl(object):
##    def IsNear3D(self, pOther, distance):
##        u'Indicates if this geometry is within distance from the other geometry; both geometries must have Zs.'
##        #return pbNear
##


# values for enumeration 'esriSRDatum3Type'
esriSRDatum_Albanian1987 = 6191
esriSRDatum_Ammassalik1958 = 6196
esriSRDatum_AutralianAntarctic1998 = 6176
esriSRDatum_AzoresCentralIslands1948 = 6183
esriSRDatum_AzoresCentralIslands1995 = 6665
esriSRDatum_AzoresOccidentalIslands1939 = 6182
esriSRDatum_AzoresOrientalIslands1940 = 6184
esriSRDatum_AzoresOrientalIslands1995 = 6664
esriSRDatum_Combani1950 = 6632
esriSRDatum_CentreSpatialGuyanais1967 = 6623
esriSRDatum_Douala1948 = 6192
esriSRDatum_Egypt1930 = 6199
esriSRDatum_Estonia1997 = 6180
esriSRDatum_EuropeanTerrestrialRefSystem1989 = 6258
esriSRDatum_FortDesaix = 6625
esriSRDatum_FortMarigot = 6621
esriSRDatum_GrandComoros = 6646
esriSRDatum_Helle1954 = 6660
esriSRDatum_IGM1995 = 6670
esriSRDatum_IGN53Mare = 6641
esriSRDatum_IGN56Lifou = 6633
esriSRDatum_IGN72GrandeTerre = 6634
esriSRDatum_IGN72NukuHiva = 6630
esriSRDatum_IraqKuwaitBoundaryDatum1992 = 6667
esriSRDatum_IslandsNetwork1993 = 6659
esriSRDatum_IERSTerrestrialReferenceFrame1988 = 6647
esriSRDatum_IERSTerrestrialReferenceFrame1989 = 6648
esriSRDatum_IERSTerrestrialReferenceFrame1990 = 6649
esriSRDatum_IERSTerrestrialReferenceFrame1991 = 6650
esriSRDatum_IERSTerrestrialReferenceFrame1992 = 6651
esriSRDatum_IERSTerrestrialReferenceFrame1993 = 6652
esriSRDatum_IERSTerrestrialReferenceFrame1994 = 6653
esriSRDatum_IERSTerrestrialReferenceFrame1996 = 6654
esriSRDatum_IERSTerrestrialReferenceFrame1997 = 6655
esriSRDatum_IERSTerrestrialReferenceFrame2000 = 6656
esriSRDatum_K0_1949 = 6698
esriSRDatum_Kousseri = 6198
esriSRDatum_Latvia1992 = 6661
esriSRDatum_Lisbon1890 = 6666
esriSRDatum_Luxembourg1930 = 6181
esriSRDatum_Madeira1936 = 6185
esriSRDatum_Manoca1962 = 6193
esriSRDatum_MOP78 = 6639
esriSRDatum_NEA74Noumea = 6644
esriSRDatum_OSNI_1952 = 6188
esriSRDatum_Petrels1972 = 6636
esriSRDatum_Piton_des_Neiges = 6626
esriSRDatum_PointeGeologiePerroud1950 = 6637
esriSRDatum_PortoSanto1995 = 6663
esriSRDatum_POSGAR1998 = 6190
esriSRDatum_Pulkovo1942_adj58 = 6179
esriSRDatum_Pulkovo1942_adj83 = 6178
esriSRDatum_QatarNationalDatum1995 = 6614
esriSRDatum_Qornoq1927 = 6194
esriSRDatum_Reykjavik1900 = 6657
esriSRDatum_ReseauGeodesiqueFrancaisGuyane1995 = 6624
esriSRDatum_ReseauGeodesiqueNouvelleCaledonie1991 = 6645
esriSRDatum_ReseauGeodesique_de_la_Reunion1992 = 6627
esriSRDatum_Reseau_de_Reference_des_AntillesFrancaises1991 = 1047
esriSRDatum_SainteAnne = 6622
esriSRDatum_SaintPierre_et_Miquelon1950 = 6638
esriSRDatum_Scoresbysund1952 = 6195
esriSRDatum_ST71Belep = 6643
esriSRDatum_ST84_Ile_des_Pins = 6642
esriSRDatum_ST87Ouvea = 6750
esriSRDatum_SWEREF99 = 6619
esriSRDatum_Tahaa = 6629
esriSRDatum_Tahiti = 6628
esriSRDatum_Xian1980 = 6610
esriSRDatum_Bermuda2000 = 6762
esriSRDatum_ChathamIslands1979 = 6673
esriSRDatum_ObservatorioMeteorologico1965 = 106274
esriSRDatum_Roma1940 = 106275
esriSRDatum_EMEP = 106276
esriSRDatum_Jordan = 106277
esriSRDatum_NAD1983HARNAdj_MinnesotaAnoka = 106700
esriSRDatum_NAD1983HARNAdj_MinnesotaBecker = 106701
esriSRDatum_NAD1983HARNAdj_MinnesotaBeltramiNorth = 106702
esriSRDatum_NAD1983HARNAdj_MinnesotaBeltramiSouth = 106703
esriSRDatum_NAD1983HARNAdj_MinnesotaBenton = 106704
esriSRDatum_NAD1983HARNAdj_MinnesotaBigStone = 106705
esriSRDatum_NAD1983HARNAdj_MinnesotaBlueEarth = 106706
esriSRDatum_NAD1983HARNAdj_MinnesotaBrown = 106707
esriSRDatum_NAD1983HARNAdj_MinnesotaCarlton = 106708
esriSRDatum_NAD1983HARNAdj_MinnesotaCarver = 106709
esriSRDatum_NAD1983HARNAdj_MinnesotaCassNorth = 106710
esriSRDatum_NAD1983HARNAdj_MinnesotaCassSouth = 106711
esriSRDatum_NAD1983HARNAdj_MinnesotaChippewa = 106712
esriSRDatum_NAD1983HARNAdj_MinnesotaChisago = 106713
esriSRDatum_NAD1983HARNAdj_MinnesotaCookNorth = 106714
esriSRDatum_NAD1983HARNAdj_MinnesotaCookSouth = 106715
esriSRDatum_NAD1983HARNAdj_MinnesotaCottonwood = 106716
esriSRDatum_NAD1983HARNAdj_MinnesotaCrowWing = 106717
esriSRDatum_NAD1983HARNAdj_MinnesotaDakota = 106718
esriSRDatum_NAD1983HARNAdj_MinnesotaDodge = 106719
esriSRDatum_NAD1983HARNAdj_MinnesotaDouglas = 106720
esriSRDatum_NAD1983HARNAdj_MinnesotaFaribault = 106721
esriSRDatum_NAD1983HARNAdj_MinnesotaFillmore = 106722
esriSRDatum_NAD1983HARNAdj_MinnesotaFreeborn = 106723
esriSRDatum_NAD1983HARNAdj_MinnesotaGoodhue = 106724
esriSRDatum_NAD1983HARNAdj_MinnesotaGrant = 106725
esriSRDatum_NAD1983HARNAdj_MinnesotaHennepin = 106726
esriSRDatum_NAD1983HARNAdj_MinnesotaHouston = 106727
esriSRDatum_NAD1983HARNAdj_MinnesotaIsanti = 106728
esriSRDatum_NAD1983HARNAdj_MinnesotaItascaNorth = 106729
esriSRDatum_NAD1983HARNAdj_MinnesotaItascaSouth = 106730
esriSRDatum_NAD1983HARNAdj_MinnesotaJackson = 106731
esriSRDatum_NAD1983HARNAdj_MinnesotaKanabec = 106732
esriSRDatum_NAD1983HARNAdj_MinnesotaKandiyohi = 106733
esriSRDatum_NAD1983HARNAdj_MinnesotaKittson = 106734
esriSRDatum_NAD1983HARNAdj_MinnesotaKoochiching = 106735
esriSRDatum_NAD1983HARNAdj_MinnesotaLacQuiParle = 106736
esriSRDatum_NAD1983HARNAdj_MinnesotaLake_of_theWoodsNorth = 106737
esriSRDatum_NAD1983HARNAdj_MinnesotaLake_of_theWoodsSouth = 106738
esriSRDatum_NAD1983HARNAdj_MinnesotaLeSueur = 106739
esriSRDatum_NAD1983HARNAdj_MinnesotaLincoln = 106740
esriSRDatum_NAD1983HARNAdj_MinnesotaLyon = 106741
esriSRDatum_NAD1983HARNAdj_MinnesotaMcLeod = 106742
esriSRDatum_NAD1983HARNAdj_MinnesotaMahnomen = 106743
esriSRDatum_NAD1983HARNAdj_MinnesotaMarshall = 106744
esriSRDatum_NAD1983HARNAdj_MinnesotaMartin = 106745
esriSRDatum_NAD1983HARNAdj_MinnesotaMeeker = 106746
esriSRDatum_NAD1983HARNAdj_MinnesotaMorrison = 106747
esriSRDatum_NAD1983HARNAdj_MinnesotaMower = 106748
esriSRDatum_NAD1983HARNAdj_MinnesotaMurray = 106749
esriSRDatum_NAD1983HARNAdj_MinnesotaNicollet = 106750
esriSRDatum_NAD1983HARNAdj_MinnesotaNobles = 106751
esriSRDatum_NAD1983HARNAdj_MinnesotaNorman = 106752
esriSRDatum_NAD1983HARNAdj_MinnesotaOlmsted = 106753
esriSRDatum_NAD1983HARNAdj_MinnesotaOttertail = 106754
esriSRDatum_NAD1983HARNAdj_MinnesotaPennington = 106755
esriSRDatum_NAD1983HARNAdj_MinnesotaPine = 106756
esriSRDatum_NAD1983HARNAdj_MinnesotaPipestone = 106757
esriSRDatum_NAD1983HARNAdj_MinnesotaPolk = 106758
esriSRDatum_NAD1983HARNAdj_MinnesotaPope = 106759
esriSRDatum_NAD1983HARNAdj_MinnesotaRamsey = 106760
esriSRDatum_NAD1983HARNAdj_MinnesotaRedLake = 106761
esriSRDatum_NAD1983HARNAdj_MinnesotaRedwood = 106762
esriSRDatum_NAD1983HARNAdj_MinnesotaRenville = 106763
esriSRDatum_NAD1983HARNAdj_MinnesotaRice = 106764
esriSRDatum_NAD1983HARNAdj_MinnesotaRock = 106765
esriSRDatum_NAD1983HARNAdj_MinnesotaRoseau = 106766
esriSRDatum_NAD1983HARNAdj_MinnesotaStLouisNorth = 106767
esriSRDatum_NAD1983HARNAdj_MinnesotaStLouisCentral = 106768
esriSRDatum_NAD1983HARNAdj_MinnesotaStLouisSouth = 106769
esriSRDatum_NAD1983HARNAdj_MinnesotaScott = 106770
esriSRDatum_NAD1983HARNAdj_MinnesotaSherburne = 106771
esriSRDatum_NAD1983HARNAdj_MinnesotaSibley = 106772
esriSRDatum_NAD1983HARNAdj_MinnesotaStearns = 106773
esriSRDatum_NAD1983HARNAdj_MinnesotaSteele = 106774
esriSRDatum_NAD1983HARNAdj_MinnesotaStevens = 106775
esriSRDatum_NAD1983HARNAdj_MinnesotaSwift = 106776
esriSRDatum_NAD1983HARNAdj_MinnesotaTodd = 106777
esriSRDatum_NAD1983HARNAdj_MinnesotaTraverse = 106778
esriSRDatum_NAD1983HARNAdj_MinnesotaWabasha = 106779
esriSRDatum_NAD1983HARNAdj_MinnesotaWadena = 106780
esriSRDatum_NAD1983HARNAdj_MinnesotaWaseca = 106781
esriSRDatum_NAD1983HARNAdj_MinnesotaWatonwan = 106782
esriSRDatum_NAD1983HARNAdj_MinnesotaWinona = 106783
esriSRDatum_NAD1983HARNAdj_MinnesotaWright = 106784
esriSRDatum_NAD1983HARNAdj_MinnesotaYellowMedicine = 106785
esriSRDatum_NAD1983HARNAdj_WisconsinAshland = 106800
esriSRDatum_NAD1983HARNAdj_WisconsinBarron = 106801
esriSRDatum_NAD1983HARNAdj_WisconsinBayfield = 106802
esriSRDatum_NAD1983HARNAdj_WisconsinBrown = 106803
esriSRDatum_NAD1983HARNAdj_WisconsinBuffalo = 106804
esriSRDatum_NAD1983HARNAdj_WisconsinBurnett = 106805
esriSRDatum_NAD1983HARNAdj_WisconsinChippewa = 106806
esriSRDatum_NAD1983HARNAdj_WisconsinClark = 106807
esriSRDatum_NAD1983HARNAdj_WisconsinColumbia = 106808
esriSRDatum_NAD1983HARNAdj_WisconsinCrawford = 106809
esriSRDatum_NAD1983HARNAdj_WisconsinDane = 106810
esriSRDatum_NAD1983HARNAdj_WisconsinDoor = 106811
esriSRDatum_NAD1983HARNAdj_WisconsinDouglas = 106812
esriSRDatum_NAD1983HARNAdj_WisconsinDunn = 106813
esriSRDatum_NAD1983HARNAdj_WisconsinEauClaire = 106814
esriSRDatum_NAD1983HARNAdj_WisconsinFlorence = 106815
esriSRDatum_NAD1983HARNAdj_WisconsinForest = 106816
esriSRDatum_NAD1983HARNAdj_WisconsinGrant = 106817
esriSRDatum_NAD1983HARNAdj_WisconsinIowa = 106818
esriSRDatum_NAD1983HARNAdj_WisconsinIron = 106819
esriSRDatum_NAD1983HARNAdj_WisconsinJackson = 106820
esriSRDatum_NAD1983HARNAdj_WisconsinLaCrosse = 106821
esriSRDatum_NAD1983HARNAdj_WisconsinLanglade = 106822
esriSRDatum_NAD1983HARNAdj_WisconsinLincoln = 106823
esriSRDatum_NAD1983HARNAdj_WisconsinMarathon = 106824
esriSRDatum_NAD1983HARNAdj_WisconsinMarinette = 106825
esriSRDatum_NAD1983HARNAdj_WisconsinMenominee = 106826
esriSRDatum_NAD1983HARNAdj_WisconsinMonroe = 106827
esriSRDatum_NAD1983HARNAdj_WisconsinOconto = 106828
esriSRDatum_NAD1983HARNAdj_WisconsinOneida = 106829
esriSRDatum_NAD1983HARNAdj_WisconsinPolk = 106830
esriSRDatum_NAD1983HARNAdj_WisconsinPortage = 106831
esriSRDatum_NAD1983HARNAdj_WisconsinPrice = 106832
esriSRDatum_NAD1983HARNAdj_WisconsinRichland = 106833
esriSRDatum_NAD1983HARNAdj_WisconsinRock = 106834
esriSRDatum_NAD1983HARNAdj_WisconsinRusk = 106835
esriSRDatum_NAD1983HARNAdj_WisconsinStCroix = 106836
esriSRDatum_NAD1983HARNAdj_WisconsinSauk = 106837
esriSRDatum_NAD1983HARNAdj_WisconsinSawyer = 106838
esriSRDatum_NAD1983HARNAdj_WisconsinShawano = 106839
esriSRDatum_NAD1983HARNAdj_WisconsinTaylor = 106840
esriSRDatum_NAD1983HARNAdj_WisconsinTrempealeau = 106841
esriSRDatum_NAD1983HARNAdj_WisconsinVernon = 106842
esriSRDatum_NAD1983HARNAdj_WisconsinVilas = 106843
esriSRDatum_NAD1983HARNAdj_WisconsinWalworth = 106844
esriSRDatum_NAD1983HARNAdj_WisconsinWashburn = 106845
esriSRDatum_NAD1983HARNAdj_WisconsinWashington = 106846
esriSRDatum_NAD1983HARNAdj_WisconsinWaukesha = 106847
esriSRDatum_NAD1983HARNAdj_WisconsinWaupaca = 106848
esriSRDatum_NAD1983HARNAdj_WisconsinWaushara = 106849
esriSRDatum_NAD1983HARNAdj_WisconsinWood = 106850
esriSRDatum_NAD1983HARNAdj_WisconsinAdamsJuneau = 106851
esriSRDatum_NAD1983HARNAdj_WisconsinGreenLafayette = 106852
esriSRDatum_NAD1983HARNAdj_WisconsinGreenLakeMarquette = 106853
esriSRDatum_NAD1983HARNAdj_WisconsinDodgeJefferson = 106854
esriSRDatum_NAD1983HARNAdj_WisconsinPepinPierce = 106855
esriSRDatum_NAD1983HARNAdj_WICalumetFondduLacOutagamieWinnebago = 106856
esriSRDatum_NAD1983HARNAdj_WIKenoshaMilwaukeeOzaukeeRacine = 106857
esriSRDatum_NAD1983HARNAdj_WIKewauneeManitowocSheboygan = 106858
esriSRDatum_Mercury = 106900
esriSRDatum_Venus1985 = 106901
esriSRDatum_Venus2000 = 106902
esriSRDatum_TheMoon = 106903
esriSRDatum_Mars1979 = 106904
esriSRDatum_Mars2000 = 106905
esriSRDatum_MarsDeimos = 106906
esriSRDatum_MarsPhobos = 106907
esriSRDatum_Jupiter = 106908
esriSRDatum_JupiterAdrastea = 106909
esriSRDatum_JupiterAmalthea = 106910
esriSRDatum_JupiterAnanke = 106911
esriSRDatum_JupiterCallisto = 106912
esriSRDatum_JupiterCarme = 106913
esriSRDatum_JupiterElara = 106914
esriSRDatum_JupiterEuropa = 106915
esriSRDatum_JupiterGanymede = 106916
esriSRDatum_JupiterHimalia = 106917
esriSRDatum_JupiterIo = 106918
esriSRDatum_JupiterLeda = 106919
esriSRDatum_JupiterLysithea = 106920
esriSRDatum_JupiterMetis = 106921
esriSRDatum_JupiterPasiphae = 106922
esriSRDatum_JupiterSinope = 106923
esriSRDatum_JupiterThebe = 106924
esriSRDatum_Saturn = 106925
esriSRDatum_SaturnAtlas = 106926
esriSRDatum_SaturnCalypso = 106927
esriSRDatum_SaturnDione = 106928
esriSRDatum_SaturnEnceladus = 106929
esriSRDatum_SaturnEpimetheus = 106930
esriSRDatum_SaturnHelene = 106931
esriSRDatum_SaturnHyperion = 106932
esriSRDatum_SaturnIapetus = 106933
esriSRDatum_SaturnJanus = 106934
esriSRDatum_SaturnMimas = 106935
esriSRDatum_SaturnPan = 106936
esriSRDatum_SaturnPandora = 106937
esriSRDatum_SaturnPhoebe = 106938
esriSRDatum_SaturnPrometheus = 106939
esriSRDatum_SaturnRhea = 106940
esriSRDatum_SaturnTelesto = 106941
esriSRDatum_SaturnTethys = 106942
esriSRDatum_SaturnTitan = 106943
esriSRDatum_Uranus = 106944
esriSRDatum_UranusAriel = 106945
esriSRDatum_UranusBelinda = 106946
esriSRDatum_UranusBianca = 106947
esriSRDatum_UranusCordelia = 106948
esriSRDatum_UranusCressida = 106949
esriSRDatum_UranusDesdemona = 106950
esriSRDatum_UranusJuliet = 106951
esriSRDatum_UranusMiranda = 106952
esriSRDatum_UranusOberon = 106953
esriSRDatum_UranusOphelia = 106954
esriSRDatum_UranusPortia = 106955
esriSRDatum_UranusPuck = 106956
esriSRDatum_UranusRosalind = 106957
esriSRDatum_UranusTitania = 106958
esriSRDatum_UranusUmbriel = 106959
esriSRDatum_Neptune = 106960
esriSRDatum_NeptuneDespina = 106961
esriSRDatum_NeptuneGalatea = 106962
esriSRDatum_NeptuneLarissa = 106963
esriSRDatum_NeptuneNaiad = 106964
esriSRDatum_NeptuneNereid = 106965
esriSRDatum_NeptuneProteus = 106966
esriSRDatum_NeptuneThalassa = 106967
esriSRDatum_NeptuneTriton = 106968
esriSRDatum_Pluto = 106969
esriSRDatum_PlutoCharon = 106970
esriSRDatum_Accra = 6168
esriSRDatum_ChosMalal1914 = 6160
esriSRDatum_EuropeanLibyanDatum1979 = 6159
esriSRDatum_IRENET95 = 6173
esriSRDatum_KoreanDatum1985 = 6162
esriSRDatum_KoreanDatum1995 = 6166
esriSRDatum_MountDillon = 6157
esriSRDatum_Naparima1955 = 6158
esriSRDatum_PampadelCastillo = 6161
esriSRDatum_PosicionesGeodesicasArgentinas = 6172
esriSRDatum_SierraLeone1924 = 6174
esriSRDatum_SierraLeone1968 = 6175
esriSRDatum_SIRGAS = 6170
esriSRDatum_SouthYemen = 6164
esriSRDatum_YemenNGN1996 = 6163
esriSRDatum_Pohnpei = 106266
esriSRDatum_REGVEN = 6189
esriSRDatum_JapanGeodeticDatum2000 = 6612
esriSRDatum_BabSouthAstro = 106269
esriSRDatum_Majuro = 106270
esriSRDatum3Type = c_int # enum

# values for enumeration 'esriSRUnit2Type'
esriSRUnit_British1936Foot = 9095
esriSRUnit_GoldCoastFoot = 9094
esriSRUnit_InternationalChain = 9097
esriSRUnit_InternationalLink = 9098
esriSRUnit_InternationalYard = 9096
esriSRUnit_StatuteMile = 9093
esriSRUnit_SurveyYard = 109002
esriSRUnit_50KilometerLength = 109030
esriSRUnit_150KilometerLength = 109031
esriSRUnit_Decimeter = 109005
esriSRUnit_Centimeter = 1033
esriSRUnit_Millimeter = 1025
esriSRUnit_InternationalInch = 109008
esriSRUnit_USsurveyInch = 109009
esriSRUnit_InternationalRod = 109010
esriSRUnit_USsurveyRod = 109011
esriSRUnit_USNauticalMile = 109012
esriSRUnit_UKNauticalMile = 109013
esriSRUnit2Type = c_int # enum

# values for enumeration 'esriSRPrimeM2Type'
esriSRPrimeM_ReferenceMeridian = 108900
esriSRPrimeM2Type = c_int # enum
ISpatialReference2GEN._methods_ = [
    COMMETHOD(['propget', helpstring(u'The name of this spatial reference component.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propget', helpstring(u'The alias of this spatial reference component.')], HRESULT, 'Alias',
              ( ['retval', 'out'], POINTER(BSTR), 'Alias' )),
    COMMETHOD(['propget', helpstring(u'The abbreviated name of this spatial reference component.')], HRESULT, 'Abbreviation',
              ( ['retval', 'out'], POINTER(BSTR), 'Abbreviation' )),
    COMMETHOD(['propget', helpstring(u'The comment string of this spatial reference component.')], HRESULT, 'Remarks',
              ( ['retval', 'out'], POINTER(BSTR), 'Remarks' )),
    COMMETHOD(['propget', helpstring(u'The factory code of the spatial reference.')], HRESULT, 'FactoryCode',
              ( ['retval', 'out'], POINTER(c_int), 'Code' )),
    COMMETHOD(['restricted', helpstring(u'SpatialReferenceImpl.'), 'propget'], HRESULT, 'SpatialReferenceImpl',
              ( ['retval', 'out'], POINTER(esriSpatialReferenceImplHandle), 'srImpl' )),
    COMMETHOD(['restricted', helpstring(u'An opaque reference to the precision information implementation for this spatial reference.'), 'propget'], HRESULT, 'PrecisionImpl',
              ( ['retval', 'out'], POINTER(esriPrecisionImplHandle), 'PrecisionImpl' )),
    COMMETHOD(['restricted', helpstring(u'An opaque reference to the precision information (including z/m awareness) implementation for this spatial reference.'), 'propget'], HRESULT, 'PrecisionExImpl',
              ( ['retval', 'out'], POINTER(esriPrecisionExImplHandle), 'PrecisionExImpl' )),
    COMMETHOD([helpstring(u'Returns true when (x,y) precision information has been defined.')], HRESULT, 'HasXYPrecision',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'HasXYPrecision' )),
    COMMETHOD([helpstring(u'Returns true when z-value precision information has been defined.')], HRESULT, 'HasZPrecision',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'HasZPrecision' )),
    COMMETHOD([helpstring(u'Returns true when m-value precision information has been defined.')], HRESULT, 'HasMPrecision',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'HasMPrecision' )),
    COMMETHOD([helpstring(u'Returns TRUE when the precision information for the two spatial references is the same.')], HRESULT, 'IsPrecisionEqual',
              ( ['in'], POINTER(ISpatialReference), 'otherSR' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'IsPrecisionEqual' )),
    COMMETHOD([helpstring(u'Set the false origin and units.')], HRESULT, 'SetFalseOriginAndUnits',
              ( [], c_double, 'falseX' ),
              ( [], c_double, 'falseY' ),
              ( [], c_double, 'xyUnits' )),
    COMMETHOD([helpstring(u'Set the Z false origin and units.')], HRESULT, 'SetZFalseOriginAndUnits',
              ( [], c_double, 'falseZ' ),
              ( [], c_double, 'zUnits' )),
    COMMETHOD([helpstring(u'Set the measure false origin and units.')], HRESULT, 'SetMFalseOriginAndUnits',
              ( [], c_double, 'falseM' ),
              ( [], c_double, 'mUnits' )),
    COMMETHOD([helpstring(u'Get the false origin and units.')], HRESULT, 'GetFalseOriginAndUnits',
              ( ['in', 'out'], POINTER(c_double), 'falseX' ),
              ( ['in', 'out'], POINTER(c_double), 'falseY' ),
              ( ['in', 'out'], POINTER(c_double), 'xyUnits' )),
    COMMETHOD([helpstring(u'Get the Z false origin and units.')], HRESULT, 'GetZFalseOriginAndUnits',
              ( ['in', 'out'], POINTER(c_double), 'falseZ' ),
              ( ['in', 'out'], POINTER(c_double), 'zUnits' )),
    COMMETHOD([helpstring(u'Get the measure false origin and units.')], HRESULT, 'GetMFalseOriginAndUnits',
              ( ['in', 'out'], POINTER(c_double), 'falseM' ),
              ( ['in', 'out'], POINTER(c_double), 'mUnits' )),
    COMMETHOD([helpstring(u'Get the domain extent.')], HRESULT, 'GetDomain',
              ( ['in', 'out'], POINTER(c_double), 'XMin' ),
              ( ['in', 'out'], POINTER(c_double), 'XMax' ),
              ( ['in', 'out'], POINTER(c_double), 'YMin' ),
              ( ['in', 'out'], POINTER(c_double), 'YMax' )),
    COMMETHOD([helpstring(u'Set the xy domain extent.')], HRESULT, 'SetDomain',
              ( ['in'], c_double, 'XMin' ),
              ( ['in'], c_double, 'XMax' ),
              ( ['in'], c_double, 'YMin' ),
              ( ['in'], c_double, 'YMax' )),
    COMMETHOD([helpstring(u'Get the Z domain extent.')], HRESULT, 'GetZDomain',
              ( ['in', 'out'], POINTER(c_double), 'outZMin' ),
              ( ['in', 'out'], POINTER(c_double), 'outZMax' )),
    COMMETHOD([helpstring(u'Set the z domain extent.')], HRESULT, 'SetZDomain',
              ( ['in'], c_double, 'inZMin' ),
              ( ['in'], c_double, 'inZMax' )),
    COMMETHOD([helpstring(u'Get the measure domain extent.')], HRESULT, 'GetMDomain',
              ( ['in', 'out'], POINTER(c_double), 'outMMin' ),
              ( ['in', 'out'], POINTER(c_double), 'outMMax' )),
    COMMETHOD([helpstring(u'Set the measure domain extent.')], HRESULT, 'SetMDomain',
              ( ['in'], c_double, 'inMMin' ),
              ( ['in'], c_double, 'inMMax' )),
    COMMETHOD(['propget', helpstring(u'The unit for the Z coordinate.')], HRESULT, 'ZCoordinateUnit',
              ( ['retval', 'out'], POINTER(POINTER(ILinearUnit)), 'zunit' )),
    COMMETHOD(['propput', helpstring(u'The unit for the Z coordinate.')], HRESULT, 'ZCoordinateUnit',
              ( [], POINTER(ILinearUnit), 'zunit' )),
    COMMETHOD([helpstring(u'Notify this object that some of its parts have changed (parameter values, z unit, etc.).')], HRESULT, 'Changed'),
    COMMETHOD([helpstring(u'Returns true if the XY precisions of the two spatial references are the same.')], HRESULT, 'IsXYPrecisionEqual',
              ( ['in'], POINTER(ISpatialReference), 'otherSR' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsXYPrecisionEqual' )),
    COMMETHOD([helpstring(u'Returns true if the measure precisions of the two spatial references are the same.')], HRESULT, 'IsMPrecisionEqual',
              ( ['in'], POINTER(ISpatialReference), 'otherSR' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsMPrecisionEqual' )),
    COMMETHOD([helpstring(u'Returns true if the Z precisions of the two spatial references are the same.')], HRESULT, 'IsZPrecisionEqual',
              ( ['in'], POINTER(ISpatialReference), 'otherSR' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsZPrecisionEqual' )),
    COMMETHOD([helpstring(u'Applies the XY precision.')], HRESULT, 'ApplyXYPrecision',
              ( ['in'], POINTER(_midlSAFEARRAY(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPoint)), 'Points' )),
    COMMETHOD([helpstring(u'Applies the measure and z value precisions.')], HRESULT, 'ApplyPrecision',
              ( ['in'], POINTER(_midlSAFEARRAY(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPoint)), 'Points' ),
              ( ['in'], POINTER(_midlSAFEARRAY(c_double)), 'ms' ),
              ( ['in'], POINTER(_midlSAFEARRAY(c_double)), 'zs' )),
]
################################################################
## code template for ISpatialReference2GEN implementation
##class ISpatialReference2GEN_Impl(object):
##    def HasXYPrecision(self):
##        u'Returns true when (x,y) precision information has been defined.'
##        #return HasXYPrecision
##
##    @property
##    def PrecisionExImpl(self):
##        u'An opaque reference to the precision information (including z/m awareness) implementation for this spatial reference.'
##        #return PrecisionExImpl
##
##    def GetDomain(self):
##        u'Get the domain extent.'
##        #return XMin, XMax, YMin, YMax
##
##    def IsMPrecisionEqual(self, otherSR):
##        u'Returns true if the measure precisions of the two spatial references are the same.'
##        #return IsMPrecisionEqual
##
##    @property
##    def FactoryCode(self):
##        u'The factory code of the spatial reference.'
##        #return Code
##
##    def SetDomain(self, XMin, XMax, YMin, YMax):
##        u'Set the xy domain extent.'
##        #return 
##
##    def HasZPrecision(self):
##        u'Returns true when z-value precision information has been defined.'
##        #return HasZPrecision
##
##    def _get(self):
##        u'The unit for the Z coordinate.'
##        #return zunit
##    def _set(self, zunit):
##        u'The unit for the Z coordinate.'
##    ZCoordinateUnit = property(_get, _set, doc = _set.__doc__)
##
##    def GetZDomain(self):
##        u'Get the Z domain extent.'
##        #return outZMin, outZMax
##
##    def SetZDomain(self, inZMin, inZMax):
##        u'Set the z domain extent.'
##        #return 
##
##    @property
##    def SpatialReferenceImpl(self):
##        u'SpatialReferenceImpl.'
##        #return srImpl
##
##    def SetMDomain(self, inMMin, inMMax):
##        u'Set the measure domain extent.'
##        #return 
##
##    def IsPrecisionEqual(self, otherSR):
##        u'Returns TRUE when the precision information for the two spatial references is the same.'
##        #return IsPrecisionEqual
##
##    def GetZFalseOriginAndUnits(self):
##        u'Get the Z false origin and units.'
##        #return falseZ, zUnits
##
##    def GetMDomain(self):
##        u'Get the measure domain extent.'
##        #return outMMin, outMMax
##
##    @property
##    def Remarks(self):
##        u'The comment string of this spatial reference component.'
##        #return Remarks
##
##    def GetFalseOriginAndUnits(self):
##        u'Get the false origin and units.'
##        #return falseX, falseY, xyUnits
##
##    @property
##    def PrecisionImpl(self):
##        u'An opaque reference to the precision information implementation for this spatial reference.'
##        #return PrecisionImpl
##
##    @property
##    def Name(self):
##        u'The name of this spatial reference component.'
##        #return Name
##
##    def Changed(self):
##        u'Notify this object that some of its parts have changed (parameter values, z unit, etc.).'
##        #return 
##
##    def IsXYPrecisionEqual(self, otherSR):
##        u'Returns true if the XY precisions of the two spatial references are the same.'
##        #return IsXYPrecisionEqual
##
##    @property
##    def Alias(self):
##        u'The alias of this spatial reference component.'
##        #return Alias
##
##    def ApplyXYPrecision(self, Points):
##        u'Applies the XY precision.'
##        #return 
##
##    def ApplyPrecision(self, Points, ms, zs):
##        u'Applies the measure and z value precisions.'
##        #return 
##
##    def SetMFalseOriginAndUnits(self, falseM, mUnits):
##        u'Set the measure false origin and units.'
##        #return 
##
##    def SetFalseOriginAndUnits(self, falseX, falseY, xyUnits):
##        u'Set the false origin and units.'
##        #return 
##
##    @property
##    def Abbreviation(self):
##        u'The abbreviated name of this spatial reference component.'
##        #return Abbreviation
##
##    def SetZFalseOriginAndUnits(self, falseZ, zUnits):
##        u'Set the Z false origin and units.'
##        #return 
##
##    def GetMFalseOriginAndUnits(self):
##        u'Get the measure false origin and units.'
##        #return falseM, mUnits
##
##    def HasMPrecision(self):
##        u'Returns true when m-value precision information has been defined.'
##        #return HasMPrecision
##
##    def IsZPrecisionEqual(self, otherSR):
##        u'Returns true if the Z precisions of the two spatial references are the same.'
##        #return IsZPrecisionEqual
##

class IAffineTransformation2D(ITransformation):
    _case_insensitive_ = True
    u'Provides access to members that define and manipulate affine transformations.'
    _iid_ = GUID('{D12F81B4-D263-11D2-9F29-00C04F6BDD7F}')
    _idlflags_ = []
IAffineTransformation2D._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The spatial reference in which this transformation is meaningful.')], HRESULT, 'SpatialReference',
              ( [], POINTER(ISpatialReference), 'SR' )),
    COMMETHOD(['propget', helpstring(u'The spatial reference in which this transformation is meaningful.')], HRESULT, 'SpatialReference',
              ( ['retval', 'out'], POINTER(POINTER(ISpatialReference)), 'SR' )),
    COMMETHOD([helpstring(u'Resets the tranformation.')], HRESULT, 'Reset'),
    COMMETHOD(['restricted', helpstring(u'Defines the best affine transformation between two sets of points. Can be used to register paper maps on a digitizer.')], HRESULT, 'DefineFromControlPointsEx',
              ( [], c_int, 'numPoints' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPoint), 'fromPoints' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPoint), 'toPoints' )),
    COMMETHOD([helpstring(u'Defines the best affine transformation between two sets of points. Can be used to register paper maps on a digitizer.')], HRESULT, 'DefineFromControlPoints',
              ( [], c_int, 'numPoints' ),
              ( ['in'], POINTER(POINTER(IPoint)), 'fromPoints' ),
              ( ['in'], POINTER(POINTER(IPoint)), 'toPoints' )),
    COMMETHOD([helpstring(u'Defines a transformation that maps a point relative to one envelope to a similar position relative to another envelope.')], HRESULT, 'DefineFromEnvelopes',
              ( [], POINTER(IEnvelope), 'from' ),
              ( [], POINTER(IEnvelope), 'to' )),
    COMMETHOD([helpstring(u'Defines a transformation that maps a point relative to one envelope to a similar position relative to another envelope.')], HRESULT, 'DefineFromEnvelopesEx',
              ( [], POINTER(IEnvelope), 'from' ),
              ( [], POINTER(IEnvelope), 'to' ),
              ( [], POINTER(IEnvelope), 'outFrom' ),
              ( [], VARIANT_BOOL, 'assumeFalseOrigin' ),
              ( [], VARIANT_BOOL, 'keepAspect' ),
              ( [], VARIANT_BOOL, 'flipIt' )),
    COMMETHOD([helpstring(u'Defines a transformation that can perform a reflection about the line l.')], HRESULT, 'DefineReflection',
              ( [], POINTER(ILine), 'l' )),
    COMMETHOD([helpstring(u"RMS (Root Mean Square) error expressed relative to the 'from' and 'to' points defining the transformation. These error terms are valid after using DefineFromControlPoints/Ex to define the transformation.")], HRESULT, 'GetRMSError',
              ( ['out'], POINTER(c_double), 'fromError' ),
              ( ['out'], POINTER(c_double), 'toError' )),
    COMMETHOD([helpstring(u"Returns the errors involved in moving control point i from the 'from' to 'to' system. These error terms are valid after using DefineFromControlPoints/Ex to define the transformation.")], HRESULT, 'GetControlPointError',
              ( [], c_int, 'i' ),
              ( ['out'], POINTER(c_double), 'fromError' ),
              ( ['out'], POINTER(c_double), 'toError' )),
    COMMETHOD(['propget', helpstring(u'The scale along the X axis.')], HRESULT, 'XScale',
              ( ['retval', 'out'], POINTER(c_double), 'sx' )),
    COMMETHOD(['propget', helpstring(u'The scale along the Y axis.')], HRESULT, 'YScale',
              ( ['retval', 'out'], POINTER(c_double), 'sy' )),
    COMMETHOD(['propget', helpstring(u'The translation along the X axis.')], HRESULT, 'XTranslation',
              ( ['retval', 'out'], POINTER(c_double), 'dx' )),
    COMMETHOD(['propget', helpstring(u'The translation along the Y axis.')], HRESULT, 'YTranslation',
              ( ['retval', 'out'], POINTER(c_double), 'dy' )),
    COMMETHOD(['propget', helpstring(u'The rotation angle. Will not be able if different x/y scale factors have been incorporated into the transformation.')], HRESULT, 'Rotation',
              ( ['retval', 'out'], POINTER(c_double), 'r' )),
    COMMETHOD([helpstring(u'Incorporates scale factors into the transformation.')], HRESULT, 'Scale',
              ( [], c_double, 'dx' ),
              ( [], c_double, 'dy' )),
    COMMETHOD(['propput', helpstring(u'The origin of accumulated transformations used when projecting an affine transformation to a different spatial reference system.')], HRESULT, 'MoveOrigin',
              ( [], POINTER(IPoint), 'rhs' )),
    COMMETHOD([helpstring(u'Performs an X and Y translation defined by a 2D vector.')], HRESULT, 'MoveVector',
              ( [], POINTER(ILine), 'movementVector' )),
    COMMETHOD([helpstring(u'Incorporates a translation factor into the transformation.')], HRESULT, 'Move',
              ( [], c_double, 'dx' ),
              ( [], c_double, 'dy' )),
    COMMETHOD([helpstring(u'Incorporates a rotation (in radians) into the transformation.')], HRESULT, 'Rotate',
              ( [], c_double, 'da' )),
    COMMETHOD([helpstring(u'Post-multiplies the transformation by another transformation.')], HRESULT, 'PostMultiply',
              ( [], POINTER(IAffineTransformation2D), 'postTransform' )),
    COMMETHOD([helpstring(u'Pre-multiplies the transformation by another transformation.')], HRESULT, 'PreMultiply',
              ( [], POINTER(IAffineTransformation2D), 'preTransform' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the transformation contains a reflection (determinant is negative).')], HRESULT, 'IsReflective',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsReflective' )),
    COMMETHOD([helpstring(u'Moves this transformation into another spatial reference. If the transformations contains only translations, then use the MoveOrigin property to define an equivalent translation in the new spatial reference.')], HRESULT, 'Project',
              ( [], POINTER(ISpatialReference), 'newSpatialReference' )),
]
################################################################
## code template for IAffineTransformation2D implementation
##class IAffineTransformation2D_Impl(object):
##    def Scale(self, dx, dy):
##        u'Incorporates scale factors into the transformation.'
##        #return 
##
##    @property
##    def SpatialReference(self, SR):
##        u'The spatial reference in which this transformation is meaningful.'
##        #return 
##
##    def PreMultiply(self, preTransform):
##        u'Pre-multiplies the transformation by another transformation.'
##        #return 
##
##    def MoveVector(self, movementVector):
##        u'Performs an X and Y translation defined by a 2D vector.'
##        #return 
##
##    @property
##    def XTranslation(self):
##        u'The translation along the X axis.'
##        #return dx
##
##    def _set(self, rhs):
##        u'The origin of accumulated transformations used when projecting an affine transformation to a different spatial reference system.'
##    MoveOrigin = property(fset = _set, doc = _set.__doc__)
##
##    def DefineReflection(self, l):
##        u'Defines a transformation that can perform a reflection about the line l.'
##        #return 
##
##    @property
##    def YScale(self):
##        u'The scale along the Y axis.'
##        #return sy
##
##    def PostMultiply(self, postTransform):
##        u'Post-multiplies the transformation by another transformation.'
##        #return 
##
##    def GetRMSError(self):
##        u"RMS (Root Mean Square) error expressed relative to the 'from' and 'to' points defining the transformation. These error terms are valid after using DefineFromControlPoints/Ex to define the transformation."
##        #return fromError, toError
##
##    @property
##    def Rotation(self):
##        u'The rotation angle. Will not be able if different x/y scale factors have been incorporated into the transformation.'
##        #return r
##
##    def Reset(self):
##        u'Resets the tranformation.'
##        #return 
##
##    def Rotate(self, da):
##        u'Incorporates a rotation (in radians) into the transformation.'
##        #return 
##
##    def DefineFromControlPointsEx(self, numPoints, fromPoints, toPoints):
##        u'Defines the best affine transformation between two sets of points. Can be used to register paper maps on a digitizer.'
##        #return 
##
##    @property
##    def IsReflective(self):
##        u'Indicates if the transformation contains a reflection (determinant is negative).'
##        #return IsReflective
##
##    def Project(self, newSpatialReference):
##        u'Moves this transformation into another spatial reference. If the transformations contains only translations, then use the MoveOrigin property to define an equivalent translation in the new spatial reference.'
##        #return 
##
##    def GetControlPointError(self, i):
##        u"Returns the errors involved in moving control point i from the 'from' to 'to' system. These error terms are valid after using DefineFromControlPoints/Ex to define the transformation."
##        #return fromError, toError
##
##    def DefineFromControlPoints(self, numPoints, fromPoints, toPoints):
##        u'Defines the best affine transformation between two sets of points. Can be used to register paper maps on a digitizer.'
##        #return 
##
##    def DefineFromEnvelopes(self, from, to):
##        u'Defines a transformation that maps a point relative to one envelope to a similar position relative to another envelope.'
##        #return 
##
##    def Move(self, dx, dy):
##        u'Incorporates a translation factor into the transformation.'
##        #return 
##
##    @property
##    def YTranslation(self):
##        u'The translation along the Y axis.'
##        #return dy
##
##    @property
##    def XScale(self):
##        u'The scale along the X axis.'
##        #return sx
##
##    def DefineFromEnvelopesEx(self, from, to, outFrom, assumeFalseOrigin, keepAspect, flipIt):
##        u'Defines a transformation that maps a point relative to one envelope to a similar position relative to another envelope.'
##        #return 
##

IAffineTransformation3DGEN._methods_ = [
    COMMETHOD([helpstring(u'Transforms floating point measures to floating point measures (or do the inverse).')], HRESULT, 'TransformMeasuresFF',
              ( [], esriTransformDirection, 'direction' ),
              ( ['in'], POINTER(_midlSAFEARRAY(c_double)), 'inMeasures' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'outMeasures' )),
    COMMETHOD([helpstring(u'Transforms floating point measures to integer measures (or do the inverse).')], HRESULT, 'TransformMeasuresFI',
              ( [], esriTransformDirection, 'direction' ),
              ( ['in'], POINTER(_midlSAFEARRAY(c_double)), 'inMeasures' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'outMeasures' )),
    COMMETHOD([helpstring(u'Transforms integer measures to floating point measures (or do the inverse).')], HRESULT, 'TransformMeasuresIF',
              ( [], esriTransformDirection, 'direction' ),
              ( ['in'], POINTER(_midlSAFEARRAY(c_int)), 'inMeasures' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'outMeasures' )),
    COMMETHOD([helpstring(u'Transforms integer measures to integer measures (or do the inverse).')], HRESULT, 'TransformMeasuresII',
              ( [], esriTransformDirection, 'direction' ),
              ( ['in'], POINTER(_midlSAFEARRAY(c_int)), 'inMeasures' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'outMeasures' )),
    COMMETHOD([helpstring(u'Transforms floating point points to floating point points (or do the inverse).')], HRESULT, 'TransformPointsFF',
              ( [], esriTransformDirection, 'direction' ),
              ( ['in'], POINTER(_midlSAFEARRAY(c_double)), 'inPoints' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'outPoints' )),
    COMMETHOD([helpstring(u'Transforms floating point points to integer points (or do the inverse).')], HRESULT, 'TransformPointsFI',
              ( [], esriTransformDirection, 'direction' ),
              ( ['in'], POINTER(_midlSAFEARRAY(c_double)), 'inPoints' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'outPoints' )),
    COMMETHOD([helpstring(u'Transforms integer points to floating point points (or do the inverse).')], HRESULT, 'TransformPointsIF',
              ( [], esriTransformDirection, 'direction' ),
              ( ['in'], POINTER(_midlSAFEARRAY(c_int)), 'inPoints' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'outPoints' )),
    COMMETHOD([helpstring(u'Transforms integer points to integer points (or do the inverse).')], HRESULT, 'TransformPointsII',
              ( [], esriTransformDirection, 'direction' ),
              ( ['in'], POINTER(_midlSAFEARRAY(c_int)), 'inPoints' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'outPoints' )),
    COMMETHOD([helpstring(u'Defines the best 3D affine transformation between two sets of points. Can be used to register paper maps on a digitizer.')], HRESULT, 'DefineFromControlPoints',
              ( ['in'], POINTER(_midlSAFEARRAY(POINTER(IPoint))), 'fromPoints' ),
              ( ['in'], POINTER(_midlSAFEARRAY(POINTER(IPoint))), 'toPoints' )),
    COMMETHOD([helpstring(u"RMS (Root Mean Square) error expressed relative to the 'from' and 'to' points defining the transformation. These error terms are valid after using DefineFromControlPoints/Ex to define the transformation.")], HRESULT, 'GetRMSError',
              ( ['in', 'out'], POINTER(c_double), 'fromError' ),
              ( ['in', 'out'], POINTER(c_double), 'toError' )),
    COMMETHOD([helpstring(u"Returns the errors involved in moving control point i from the 'from' to 'to' system. These error terms are valid after using DefineFromControlPoints/Ex to define the transformation.")], HRESULT, 'GetControlPointError',
              ( [], c_int, 'i' ),
              ( ['in', 'out'], POINTER(c_double), 'fromError' ),
              ( ['in', 'out'], POINTER(c_double), 'toError' )),
]
################################################################
## code template for IAffineTransformation3DGEN implementation
##class IAffineTransformation3DGEN_Impl(object):
##    def TransformMeasuresIF(self, direction, inMeasures):
##        u'Transforms integer measures to floating point measures (or do the inverse).'
##        #return outMeasures
##
##    def GetControlPointError(self, i):
##        u"Returns the errors involved in moving control point i from the 'from' to 'to' system. These error terms are valid after using DefineFromControlPoints/Ex to define the transformation."
##        #return fromError, toError
##
##    def TransformMeasuresFI(self, direction, inMeasures):
##        u'Transforms floating point measures to integer measures (or do the inverse).'
##        #return outMeasures
##
##    def TransformPointsII(self, direction, inPoints):
##        u'Transforms integer points to integer points (or do the inverse).'
##        #return outPoints
##
##    def TransformPointsIF(self, direction, inPoints):
##        u'Transforms integer points to floating point points (or do the inverse).'
##        #return outPoints
##
##    def GetRMSError(self):
##        u"RMS (Root Mean Square) error expressed relative to the 'from' and 'to' points defining the transformation. These error terms are valid after using DefineFromControlPoints/Ex to define the transformation."
##        #return fromError, toError
##
##    def TransformMeasuresFF(self, direction, inMeasures):
##        u'Transforms floating point measures to floating point measures (or do the inverse).'
##        #return outMeasures
##
##    def TransformMeasuresII(self, direction, inMeasures):
##        u'Transforms integer measures to integer measures (or do the inverse).'
##        #return outMeasures
##
##    def TransformPointsFI(self, direction, inPoints):
##        u'Transforms floating point points to integer points (or do the inverse).'
##        #return outPoints
##
##    def TransformPointsFF(self, direction, inPoints):
##        u'Transforms floating point points to floating point points (or do the inverse).'
##        #return outPoints
##
##    def DefineFromControlPoints(self, fromPoints, toPoints):
##        u'Defines the best 3D affine transformation between two sets of points. Can be used to register paper maps on a digitizer.'
##        #return 
##

IUnitChangeTransformation._methods_ = [
]
################################################################
## code template for IUnitChangeTransformation implementation
##class IUnitChangeTransformation_Impl(object):

INullTransformation._methods_ = [
]
################################################################
## code template for INullTransformation implementation
##class INullTransformation_Impl(object):


# values for enumeration 'esriGeometryServerMessageCodeEnum'
esriGeometryServerMessageCode_Project = 60000
esriGeometryServerMessageCode_Buffer = 60001
esriGeometryServerMessageCode_Relation = 60002
esriGeometryServerMessageCode_Densify = 60003
esriGeometryServerMessageCode_Simplify = 60004
esriGeometryServerMessageCode_FindSRByWKID = 60005
esriGeometryServerMessageCode_FindSRByWKT = 60006
esriGeometryServerMessageCode_FindUnitsByWKID = 60007
esriGeometryServerMessageCode_FindUnitsByWKT = 60008
esriGeometryServerMessageCode_GetAreasAndLengths = 60009
esriGeometryServerMessageCode_GetLengths = 60010
esriGeometryServerMessageCode_GetLabelPoints = 60011
esriGeometryServerMessageCode_Construct = 60012
esriGeometryServerMessageCode_InvalidLicense = 60013
esriGeometryServerMessageCode_ConstructBegin = 60014
esriGeometryServerMessageCode_ConstructEnd = 60015
esriGeometryServerMessageCode_GetAreasAndLengths2 = 60016
esriGeometryServerMessageCode_GetLengths2 = 60017
esriGeometryServerMessageCode_DensifyGeodesic = 60018
esriGeometryServerMessageCode_GetLengthsGeodesic = 60019
esriGeometryServerMessageCode_GetAreasAndLengthsGeodesic = 60020
esriGeometryServerMessageCode_GetDistance = 60021
esriGeometryServerMessageCode_GetDistanceGeodesic = 60022
esriGeometryServerMessageCode_Union = 60023
esriGeometryServerMessageCode_Intersect = 60024
esriGeometryServerMessageCode_Difference = 60025
esriGeometryServerMessageCode_Cut = 60026
esriGeometryServerMessageCode_TrimExtend = 60027
esriGeometryServerMessageCode_Offset = 60028
esriGeometryServerMessageCode_Generalize = 60029
esriGeometryServerMessageCode_BufferGeodesic = 60030
esriGeometryServerMessageCodeEnum = c_int # enum
class AbridgedMolodenskyTransformation(CoClass):
    u'Creates an Abridged Molodensky transformation.'
    _reg_clsid_ = GUID('{DD2F68D0-C6B0-11D2-BD09-0000F875BCCE}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
AbridgedMolodenskyTransformation._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ITransformationGEN, ITransformation, IGeoTransformation, IMolodenskyTransformation, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport, ISpatialReferenceAuthority]

IVolume._methods_ = [
    COMMETHOD(['propget', helpstring(u'The enclosed 3D volume.')], HRESULT, 'Volume',
              ( ['retval', 'out'], POINTER(c_double), 'volumeValue' )),
]
################################################################
## code template for IVolume implementation
##class IVolume_Impl(object):
##    @property
##    def Volume(self):
##        u'The enclosed 3D volume.'
##        #return volumeValue
##

class IFunctionalSurface3(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that allow fuller interpolation of polygonal patches.'
    _iid_ = GUID('{2C6B9DBB-1C4B-435C-8A85-807EB33553E4}')
    _idlflags_ = ['oleautomation']
IFunctionalSurface3._methods_ = [
    COMMETHOD([helpstring(u'Interpolates z values for a defined geometric shape.')], HRESULT, 'InterpolateShape',
              ( ['in'], POINTER(IGeometry), 'pShape' ),
              ( ['out'], POINTER(POINTER(IGeometry)), 'ppOutShape' ),
              ( ['in', 'optional'], POINTER(VARIANT), 'pStepSize' )),
    COMMETHOD([helpstring(u'Interpolate the input Polygon and output as a Multipatch.')], HRESULT, 'InterpolateAsMultiPatch',
              ( ['in'], POINTER(IPolygon), 'pShape' ),
              ( ['in'], c_int, 'maxStripSize' ),
              ( ['out'], POINTER(POINTER(IMultiPatch)), 'ppMultiPatch' )),
]
################################################################
## code template for IFunctionalSurface3 implementation
##class IFunctionalSurface3_Impl(object):
##    def InterpolateShape(self, pShape, pStepSize):
##        u'Interpolates z values for a defined geometric shape.'
##        #return ppOutShape
##
##    def InterpolateAsMultiPatch(self, pShape, maxStripSize):
##        u'Interpolate the input Polygon and output as a Multipatch.'
##        #return ppMultiPatch
##

ITransformationGEN._methods_ = [
    COMMETHOD([helpstring(u'Transforms floating point measures to floating point measures (or do the inverse).')], HRESULT, 'TransformMeasuresFF',
              ( [], esriTransformDirection, 'direction' ),
              ( ['in'], POINTER(_midlSAFEARRAY(c_double)), 'inMeasures' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'outMeasures' )),
    COMMETHOD([helpstring(u'Transforms floating point measures to integer measures (or do the inverse).')], HRESULT, 'TransformMeasuresFI',
              ( [], esriTransformDirection, 'direction' ),
              ( ['in'], POINTER(_midlSAFEARRAY(c_double)), 'inMeasures' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'outMeasures' )),
    COMMETHOD([helpstring(u'Transforms integer measures to floating point measures (or do the inverse).')], HRESULT, 'TransformMeasuresIF',
              ( [], esriTransformDirection, 'direction' ),
              ( ['in'], POINTER(_midlSAFEARRAY(c_int)), 'inMeasures' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'outMeasures' )),
    COMMETHOD([helpstring(u'Transforms integer measures to integer measures (or do the inverse).')], HRESULT, 'TransformMeasuresII',
              ( [], esriTransformDirection, 'direction' ),
              ( ['in'], POINTER(_midlSAFEARRAY(c_int)), 'inMeasures' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'outMeasures' )),
    COMMETHOD([helpstring(u'Transforms floating point points to floating point points (or do the inverse).')], HRESULT, 'TransformPointsFF',
              ( [], esriTransformDirection, 'direction' ),
              ( ['in'], POINTER(_midlSAFEARRAY(c_double)), 'inPoints' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'outPoints' )),
    COMMETHOD([helpstring(u'Transforms floating point points to integer points (or do the inverse).')], HRESULT, 'TransformPointsFI',
              ( [], esriTransformDirection, 'direction' ),
              ( ['in'], POINTER(_midlSAFEARRAY(c_double)), 'inPoints' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'outPoints' )),
    COMMETHOD([helpstring(u'Transforms integer points to floating point points (or do the inverse).')], HRESULT, 'TransformPointsIF',
              ( [], esriTransformDirection, 'direction' ),
              ( ['in'], POINTER(_midlSAFEARRAY(c_int)), 'inPoints' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'outPoints' )),
    COMMETHOD([helpstring(u'Transforms integer points to integer points (or do the inverse).')], HRESULT, 'TransformPointsII',
              ( [], esriTransformDirection, 'direction' ),
              ( ['in'], POINTER(_midlSAFEARRAY(c_int)), 'inPoints' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'outPoints' )),
]
################################################################
## code template for ITransformationGEN implementation
##class ITransformationGEN_Impl(object):
##    def TransformMeasuresIF(self, direction, inMeasures):
##        u'Transforms integer measures to floating point measures (or do the inverse).'
##        #return outMeasures
##
##    def TransformMeasuresFI(self, direction, inMeasures):
##        u'Transforms floating point measures to integer measures (or do the inverse).'
##        #return outMeasures
##
##    def TransformPointsII(self, direction, inPoints):
##        u'Transforms integer points to integer points (or do the inverse).'
##        #return outPoints
##
##    def TransformPointsIF(self, direction, inPoints):
##        u'Transforms integer points to floating point points (or do the inverse).'
##        #return outPoints
##
##    def TransformMeasuresFF(self, direction, inMeasures):
##        u'Transforms floating point measures to floating point measures (or do the inverse).'
##        #return outMeasures
##
##    def TransformMeasuresII(self, direction, inMeasures):
##        u'Transforms integer measures to integer measures (or do the inverse).'
##        #return outMeasures
##
##    def TransformPointsFI(self, direction, inPoints):
##        u'Transforms floating point points to integer points (or do the inverse).'
##        #return outPoints
##
##    def TransformPointsFF(self, direction, inPoints):
##        u'Transforms floating point points to floating point points (or do the inverse).'
##        #return outPoints
##

IGeographic2DOffsetTransformation._methods_ = [
    COMMETHOD([helpstring(u'Sets latitude and longitude translation values for the transformation.')], HRESULT, 'PutParameters',
              ( [], c_double, 'dlon' ),
              ( [], c_double, 'dlat' )),
    COMMETHOD([helpstring(u'Returns latitude and longitude translation values for the transformation.')], HRESULT, 'GetParameters',
              ( ['out'], POINTER(c_double), 'dlon' ),
              ( ['out'], POINTER(c_double), 'dlat' )),
]
################################################################
## code template for IGeographic2DOffsetTransformation implementation
##class IGeographic2DOffsetTransformation_Impl(object):
##    def PutParameters(self, dlon, dlat):
##        u'Sets latitude and longitude translation values for the transformation.'
##        #return 
##
##    def GetParameters(self):
##        u'Returns latitude and longitude translation values for the transformation.'
##        #return dlon, dlat
##

IPositionVectorTransformation._methods_ = [
    COMMETHOD([helpstring(u'Sets translation, rotation and scale values for the transformation.')], HRESULT, 'PutParameters',
              ( [], c_double, 'dx' ),
              ( [], c_double, 'dy' ),
              ( [], c_double, 'dz' ),
              ( [], c_double, 'rx' ),
              ( [], c_double, 'ry' ),
              ( [], c_double, 'rz' ),
              ( [], c_double, 's' )),
    COMMETHOD([helpstring(u'Returns translation, rotation and scale values of the transformation.')], HRESULT, 'GetParameters',
              ( ['out'], POINTER(c_double), 'dx' ),
              ( ['out'], POINTER(c_double), 'dy' ),
              ( ['out'], POINTER(c_double), 'dz' ),
              ( ['out'], POINTER(c_double), 'rx' ),
              ( ['out'], POINTER(c_double), 'ry' ),
              ( ['out'], POINTER(c_double), 'rz' ),
              ( ['out'], POINTER(c_double), 's' )),
]
################################################################
## code template for IPositionVectorTransformation implementation
##class IPositionVectorTransformation_Impl(object):
##    def PutParameters(self, dx, dy, dz, rx, ry, rz, s):
##        u'Sets translation, rotation and scale values for the transformation.'
##        #return 
##
##    def GetParameters(self):
##        u'Returns translation, rotation and scale values of the transformation.'
##        #return dx, dy, dz, rx, ry, rz, s
##

IConstructCurve._methods_ = [
    COMMETHOD([helpstring(u'Constructs a curve being the locus of points offset a given distance from another curve. See the enumeration esriConstructOffsetEnum to information on different ways that offset curve can be generated.')], HRESULT, 'ConstructOffset',
              ( [], POINTER(IPolycurve), 'inCurve' ),
              ( [], c_double, 'Offset' ),
              ( ['optional'], POINTER(VARIANT), 'offsetHow' ),
              ( ['optional'], POINTER(VARIANT), 'bevelRatio' )),
    COMMETHOD([helpstring(u"Constructs a Koch snowflake fractal using the input polycurve as the generator. 'r' is not used. Do not use a value for recursionLevel > 10.")], HRESULT, 'ConstructKoch',
              ( [], POINTER(IPolycurve), 'p' ),
              ( [], c_double, 'r' ),
              ( [], c_int, 'recursionLevel' )),
    COMMETHOD([helpstring(u"Constructs an extended version of the 'from' curve that goes to the 'to' curve. The flags are bit-wise combined esriCurveExtension values.")], HRESULT, 'ConstructExtended',
              ( [], POINTER(ICurve), 'fromCurve' ),
              ( [], POINTER(ICurve), 'toCurve' ),
              ( [], c_int, 'extensionFlags' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'extensionsPerformed' )),
]
################################################################
## code template for IConstructCurve implementation
##class IConstructCurve_Impl(object):
##    def ConstructOffset(self, inCurve, Offset, offsetHow, bevelRatio):
##        u'Constructs a curve being the locus of points offset a given distance from another curve. See the enumeration esriConstructOffsetEnum to information on different ways that offset curve can be generated.'
##        #return 
##
##    def ConstructExtended(self, fromCurve, toCurve, extensionFlags):
##        u"Constructs an extended version of the 'from' curve that goes to the 'to' curve. The flags are bit-wise combined esriCurveExtension values."
##        #return extensionsPerformed
##
##    def ConstructKoch(self, p, r, recursionLevel):
##        u"Constructs a Koch snowflake fractal using the input polycurve as the generator. 'r' is not used. Do not use a value for recursionLevel > 10."
##        #return 
##

ICoordinateFrameTransformation._methods_ = [
    COMMETHOD([helpstring(u'Sets translation, rotation and scale values for the transformation.')], HRESULT, 'PutParameters',
              ( [], c_double, 'dx' ),
              ( [], c_double, 'dy' ),
              ( [], c_double, 'dz' ),
              ( [], c_double, 'rx' ),
              ( [], c_double, 'ry' ),
              ( [], c_double, 'rz' ),
              ( [], c_double, 's' )),
    COMMETHOD([helpstring(u'Returns translation, rotation and scale values of the transformation.')], HRESULT, 'GetParameters',
              ( ['out'], POINTER(c_double), 'dx' ),
              ( ['out'], POINTER(c_double), 'dy' ),
              ( ['out'], POINTER(c_double), 'dz' ),
              ( ['out'], POINTER(c_double), 'rx' ),
              ( ['out'], POINTER(c_double), 'ry' ),
              ( ['out'], POINTER(c_double), 'rz' ),
              ( ['out'], POINTER(c_double), 's' )),
]
################################################################
## code template for ICoordinateFrameTransformation implementation
##class ICoordinateFrameTransformation_Impl(object):
##    def PutParameters(self, dx, dy, dz, rx, ry, rz, s):
##        u'Sets translation, rotation and scale values for the transformation.'
##        #return 
##
##    def GetParameters(self):
##        u'Returns translation, rotation and scale values of the transformation.'
##        #return dx, dy, dz, rx, ry, rz, s
##

IEnvelopeGEN._methods_ = [
    COMMETHOD([helpstring(u'Defines the envelope to cover all the points.')], HRESULT, 'DefineFromWKSPoints',
              ( [], POINTER(_midlSAFEARRAY(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPoint)), 'wksPoints' )),
    COMMETHOD([helpstring(u'Defines the envelope to cover all the points.')], HRESULT, 'DefineFromPoints',
              ( [], POINTER(_midlSAFEARRAY(POINTER(IPoint))), 'Points' )),
    COMMETHOD(['propget', helpstring(u'The width of the envelope.')], HRESULT, 'Width',
              ( ['retval', 'out'], POINTER(c_double), 'Width' )),
    COMMETHOD(['propput', helpstring(u'The width of the envelope.')], HRESULT, 'Width',
              ( [], c_double, 'Width' )),
    COMMETHOD(['propget', helpstring(u'The height of the envelope.')], HRESULT, 'Height',
              ( ['retval', 'out'], POINTER(c_double), 'Height' )),
    COMMETHOD(['propput', helpstring(u'The depth of the envelope.')], HRESULT, 'Depth',
              ( [], c_double, 'Depth' )),
    COMMETHOD(['propget', helpstring(u'The depth of the envelope.')], HRESULT, 'Depth',
              ( ['retval', 'out'], POINTER(c_double), 'Depth' )),
    COMMETHOD(['propput', helpstring(u'The height of the envelope.')], HRESULT, 'Height',
              ( [], c_double, 'Height' )),
    COMMETHOD(['propget', helpstring(u'The lower left corner.')], HRESULT, 'LowerLeft',
              ( ['retval', 'out'], POINTER(POINTER(IPoint)), 'LowerLeft' )),
    COMMETHOD(['propput', helpstring(u'The lower left corner.')], HRESULT, 'LowerLeft',
              ( [], POINTER(IPoint), 'LowerLeft' )),
    COMMETHOD(['propget', helpstring(u'The upper left corner.')], HRESULT, 'UpperLeft',
              ( ['retval', 'out'], POINTER(POINTER(IPoint)), 'UpperLeft' )),
    COMMETHOD(['propput', helpstring(u'The upper left corner.')], HRESULT, 'UpperLeft',
              ( [], POINTER(IPoint), 'UpperLeft' )),
    COMMETHOD(['propget', helpstring(u'The upper right corner.')], HRESULT, 'UpperRight',
              ( ['retval', 'out'], POINTER(POINTER(IPoint)), 'UpperRight' )),
    COMMETHOD(['propput', helpstring(u'The upper right corner.')], HRESULT, 'UpperRight',
              ( [], POINTER(IPoint), 'UpperRight' )),
    COMMETHOD(['propget', helpstring(u'The lower right corner.')], HRESULT, 'LowerRight',
              ( ['retval', 'out'], POINTER(POINTER(IPoint)), 'LowerRight' )),
    COMMETHOD(['propput', helpstring(u'The lower right corner.')], HRESULT, 'LowerRight',
              ( [], POINTER(IPoint), 'LowerRight' )),
    COMMETHOD(['propget', helpstring(u'The position of the left side.')], HRESULT, 'XMin',
              ( ['retval', 'out'], POINTER(c_double), 'XMin' )),
    COMMETHOD(['propput', helpstring(u'The position of the left side.')], HRESULT, 'XMin',
              ( [], c_double, 'XMin' )),
    COMMETHOD(['propget', helpstring(u'The position of the bottom.')], HRESULT, 'YMin',
              ( ['retval', 'out'], POINTER(c_double), 'YMin' )),
    COMMETHOD(['propput', helpstring(u'The position of the bottom.')], HRESULT, 'YMin',
              ( [], c_double, 'YMin' )),
    COMMETHOD(['propget', helpstring(u'The position of the right side.')], HRESULT, 'XMax',
              ( ['retval', 'out'], POINTER(c_double), 'XMax' )),
    COMMETHOD(['propput', helpstring(u'The position of the right side.')], HRESULT, 'XMax',
              ( [], c_double, 'XMax' )),
    COMMETHOD(['propget', helpstring(u'The position of the top.')], HRESULT, 'YMax',
              ( ['retval', 'out'], POINTER(c_double), 'YMax' )),
    COMMETHOD(['propput', helpstring(u'The position of the top.')], HRESULT, 'YMax',
              ( [], c_double, 'YMax' )),
    COMMETHOD(['propget', helpstring(u'The minimum measure value in the area of the envelope.')], HRESULT, 'MMin',
              ( ['retval', 'out'], POINTER(c_double), 'MMin' )),
    COMMETHOD(['propput', helpstring(u'The minimum measure value in the area of the envelope.')], HRESULT, 'MMin',
              ( [], c_double, 'MMin' )),
    COMMETHOD(['propget', helpstring(u'The maximum measure value in the area of the envelope.')], HRESULT, 'MMax',
              ( ['retval', 'out'], POINTER(c_double), 'MMax' )),
    COMMETHOD(['propput', helpstring(u'The maximum measure value in the area of the envelope.')], HRESULT, 'MMax',
              ( [], c_double, 'MMax' )),
    COMMETHOD(['propget', helpstring(u'The minimum Z value in the area of the envelope.')], HRESULT, 'ZMin',
              ( ['retval', 'out'], POINTER(c_double), 'ZMin' )),
    COMMETHOD(['propput', helpstring(u'The minimum Z value in the area of the envelope.')], HRESULT, 'ZMin',
              ( [], c_double, 'ZMin' )),
    COMMETHOD(['propget', helpstring(u'The maximum Z value in the area of the envelope.')], HRESULT, 'ZMax',
              ( ['retval', 'out'], POINTER(c_double), 'ZMax' )),
    COMMETHOD(['propput', helpstring(u'The maximum Z value in the area of the envelope.')], HRESULT, 'ZMax',
              ( [], c_double, 'ZMax' )),
    COMMETHOD([helpstring(u'Adjusts to overlap inEnvelope.')], HRESULT, 'Union',
              ( [], POINTER(IEnvelope), 'inEnvelope' )),
    COMMETHOD([helpstring(u'Adjusts to include only the area also included by inEnvelope.')], HRESULT, 'Intersect',
              ( [], POINTER(IEnvelope), 'inEnvelope' )),
    COMMETHOD([helpstring(u'Moves the sides x units horizontally and y units vertically.')], HRESULT, 'Offset',
              ( [], c_double, 'X' ),
              ( [], c_double, 'Y' )),
    COMMETHOD([helpstring(u'Moves the sides z units.')], HRESULT, 'OffsetZ',
              ( [], c_double, 'Z' )),
    COMMETHOD([helpstring(u'Moves the sides m units.')], HRESULT, 'OffsetM',
              ( [], c_double, 'M' )),
    COMMETHOD([helpstring(u'Moves the X and Y coordinates of the sides toward or away from each other.')], HRESULT, 'Expand',
              ( [], c_double, 'dx' ),
              ( [], c_double, 'dy' ),
              ( [], VARIANT_BOOL, 'asRatio' )),
    COMMETHOD([helpstring(u'Moves the Z attribute of the sides toward or away from each other.')], HRESULT, 'ExpandZ',
              ( [], c_double, 'dz' ),
              ( [], VARIANT_BOOL, 'asRatio' )),
    COMMETHOD([helpstring(u'Moves the measure of the sides toward or away from each other.')], HRESULT, 'ExpandM',
              ( [], c_double, 'dm' ),
              ( [], VARIANT_BOOL, 'asRatio' )),
    COMMETHOD(['restricted', helpstring(u'Copies the left, bottom, right and top sides into e.')], HRESULT, 'QueryWKSCoords',
              ( ['out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSEnvelope), 'e' )),
    COMMETHOD(['restricted', helpstring(u"Copies e's dimensions into this envelope.")], HRESULT, 'PutWKSCoords',
              ( [], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSEnvelope), 'e' )),
    COMMETHOD([helpstring(u'Constructs an envelope from the coordinate values of lower, left and upper, right corners.')], HRESULT, 'PutCoords',
              ( [], c_double, 'XMin' ),
              ( [], c_double, 'YMin' ),
              ( [], c_double, 'XMax' ),
              ( [], c_double, 'YMax' )),
    COMMETHOD([helpstring(u'Returns the coordinates of lower, left and upper, right corners.')], HRESULT, 'QueryCoords',
              ( ['out'], POINTER(c_double), 'XMin' ),
              ( ['out'], POINTER(c_double), 'YMin' ),
              ( ['out'], POINTER(c_double), 'XMax' ),
              ( ['out'], POINTER(c_double), 'YMax' )),
    COMMETHOD([helpstring(u'Moves this envelope so it is centered at p.')], HRESULT, 'CenterAt',
              ( [], POINTER(IPoint), 'p' )),
    COMMETHOD(['restricted', helpstring(u'A reference to the attribute structures for this envelope.'), 'propget'], HRESULT, 'MinMaxAttributes',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriPointAttributes)), 'MinMaxAttributes' )),
    COMMETHOD(['restricted', helpstring(u'A reference to the attribute structures for this envelope.'), 'propput'], HRESULT, 'MinMaxAttributes',
              ( [], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriPointAttributes), 'MinMaxAttributes' )),
]
################################################################
## code template for IEnvelopeGEN implementation
##class IEnvelopeGEN_Impl(object):
##    def _get(self):
##        u'The upper left corner.'
##        #return UpperLeft
##    def _set(self, UpperLeft):
##        u'The upper left corner.'
##    UpperLeft = property(_get, _set, doc = _set.__doc__)
##
##    def Union(self, inEnvelope):
##        u'Adjusts to overlap inEnvelope.'
##        #return 
##
##    def _get(self):
##        u'The lower right corner.'
##        #return LowerRight
##    def _set(self, LowerRight):
##        u'The lower right corner.'
##    LowerRight = property(_get, _set, doc = _set.__doc__)
##
##    def OffsetZ(self, Z):
##        u'Moves the sides z units.'
##        #return 
##
##    def _get(self):
##        u'The width of the envelope.'
##        #return Width
##    def _set(self, Width):
##        u'The width of the envelope.'
##    Width = property(_get, _set, doc = _set.__doc__)
##
##    def Intersect(self, inEnvelope):
##        u'Adjusts to include only the area also included by inEnvelope.'
##        #return 
##
##    def OffsetM(self, M):
##        u'Moves the sides m units.'
##        #return 
##
##    def _get(self):
##        u'The maximum measure value in the area of the envelope.'
##        #return MMax
##    def _set(self, MMax):
##        u'The maximum measure value in the area of the envelope.'
##    MMax = property(_get, _set, doc = _set.__doc__)
##
##    def CenterAt(self, p):
##        u'Moves this envelope so it is centered at p.'
##        #return 
##
##    def PutWKSCoords(self, e):
##        u"Copies e's dimensions into this envelope."
##        #return 
##
##    def DefineFromPoints(self, Points):
##        u'Defines the envelope to cover all the points.'
##        #return 
##
##    def QueryCoords(self):
##        u'Returns the coordinates of lower, left and upper, right corners.'
##        #return XMin, YMin, XMax, YMax
##
##    def _get(self):
##        u'The minimum measure value in the area of the envelope.'
##        #return MMin
##    def _set(self, MMin):
##        u'The minimum measure value in the area of the envelope.'
##    MMin = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The position of the right side.'
##        #return XMax
##    def _set(self, XMax):
##        u'The position of the right side.'
##    XMax = property(_get, _set, doc = _set.__doc__)
##
##    def Offset(self, X, Y):
##        u'Moves the sides x units horizontally and y units vertically.'
##        #return 
##
##    def _get(self):
##        u'The lower left corner.'
##        #return LowerLeft
##    def _set(self, LowerLeft):
##        u'The lower left corner.'
##    LowerLeft = property(_get, _set, doc = _set.__doc__)
##
##    def Expand(self, dx, dy, asRatio):
##        u'Moves the X and Y coordinates of the sides toward or away from each other.'
##        #return 
##
##    def _get(self):
##        u'The maximum Z value in the area of the envelope.'
##        #return ZMax
##    def _set(self, ZMax):
##        u'The maximum Z value in the area of the envelope.'
##    ZMax = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The minimum Z value in the area of the envelope.'
##        #return ZMin
##    def _set(self, ZMin):
##        u'The minimum Z value in the area of the envelope.'
##    ZMin = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The depth of the envelope.'
##        #return Depth
##    def _set(self, Depth):
##        u'The depth of the envelope.'
##    Depth = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The position of the left side.'
##        #return XMin
##    def _set(self, XMin):
##        u'The position of the left side.'
##    XMin = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The position of the bottom.'
##        #return YMin
##    def _set(self, YMin):
##        u'The position of the bottom.'
##    YMin = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'A reference to the attribute structures for this envelope.'
##        #return MinMaxAttributes
##    def _set(self, MinMaxAttributes):
##        u'A reference to the attribute structures for this envelope.'
##    MinMaxAttributes = property(_get, _set, doc = _set.__doc__)
##
##    def PutCoords(self, XMin, YMin, XMax, YMax):
##        u'Constructs an envelope from the coordinate values of lower, left and upper, right corners.'
##        #return 
##
##    def ExpandM(self, dm, asRatio):
##        u'Moves the measure of the sides toward or away from each other.'
##        #return 
##
##    def DefineFromWKSPoints(self, wksPoints):
##        u'Defines the envelope to cover all the points.'
##        #return 
##
##    def _get(self):
##        u'The position of the top.'
##        #return YMax
##    def _set(self, YMax):
##        u'The position of the top.'
##    YMax = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The upper right corner.'
##        #return UpperRight
##    def _set(self, UpperRight):
##        u'The upper right corner.'
##    UpperRight = property(_get, _set, doc = _set.__doc__)
##
##    def QueryWKSCoords(self):
##        u'Copies the left, bottom, right and top sides into e.'
##        #return e
##
##    def _get(self):
##        u'The height of the envelope.'
##        #return Height
##    def _set(self, Height):
##        u'The height of the envelope.'
##    Height = property(_get, _set, doc = _set.__doc__)
##
##    def ExpandZ(self, dz, asRatio):
##        u'Moves the Z attribute of the sides toward or away from each other.'
##        #return 
##

class ProjectiveTransformation2D(CoClass):
    u'A two dimensional projective transformation.'
    _reg_clsid_ = GUID('{F82EB04A-4E5A-43C7-9A54-457439AA8E9E}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
class IProjectiveTransformation2D(ITransformation):
    _case_insensitive_ = True
    u'Provides access to members that define and manipulate projective transformations.'
    _iid_ = GUID('{1C8A72C4-5A43-48EF-938E-2119608D77D0}')
    _idlflags_ = []
ProjectiveTransformation2D._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ITransformationGEN, IProjectiveTransformation2DGEN, ITransformation, IProjectiveTransformation2D, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]

class INetworkShape3D(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    _iid_ = GUID('{4CF48287-174A-492C-AAF3-C627A172F412}')
    _idlflags_ = ['oleautomation']
INetworkShape3D._methods_ = [
    COMMETHOD([helpstring(u'Populates an array of VertexInfo3D structures.')], HRESULT, 'ExportToNetworkShape3D',
              ( [], POINTER(esriGeometryNetworkVertexInfo3D), 'aVertices' )),
]
################################################################
## code template for INetworkShape3D implementation
##class INetworkShape3D_Impl(object):
##    def ExportToNetworkShape3D(self, aVertices):
##        u'Populates an array of VertexInfo3D structures.'
##        #return 
##

IEnvelope3D._methods_ = [
    COMMETHOD([helpstring(u'Adjusts to include only the volume also included by inEnvelope.')], HRESULT, 'Intersect3D',
              ( [], POINTER(IEnvelope), 'inEnvelope' )),
    COMMETHOD([helpstring(u'Adjusts to encapsulate inEnvelope.')], HRESULT, 'Union3D',
              ( [], POINTER(IEnvelope), 'inEnvelope' )),
]
################################################################
## code template for IEnvelope3D implementation
##class IEnvelope3D_Impl(object):
##    def Intersect3D(self, inEnvelope):
##        u'Adjusts to include only the volume also included by inEnvelope.'
##        #return 
##
##    def Union3D(self, inEnvelope):
##        u'Adjusts to encapsulate inEnvelope.'
##        #return 
##

ISphere._methods_ = [
    COMMETHOD([helpstring(u'Sets an existing point equal to the center of the sphere.')], HRESULT, 'QueryCenter',
              ( [], POINTER(IPoint), 'CenterPoint' )),
    COMMETHOD(['propget', helpstring(u'The center of the sphere.')], HRESULT, 'Center',
              ( ['retval', 'out'], POINTER(POINTER(IPoint)), 'CenterPoint' )),
    COMMETHOD(['propput', helpstring(u'The center of the sphere.')], HRESULT, 'Center',
              ( [], POINTER(IPoint), 'CenterPoint' )),
    COMMETHOD(['propget', helpstring(u'The radius of the sphere.')], HRESULT, 'Radius',
              ( ['retval', 'out'], POINTER(c_double), 'radiusLength' )),
    COMMETHOD(['propput', helpstring(u'The radius of the sphere.')], HRESULT, 'Radius',
              ( [], c_double, 'radiusLength' )),
]
################################################################
## code template for ISphere implementation
##class ISphere_Impl(object):
##    def _get(self):
##        u'The radius of the sphere.'
##        #return radiusLength
##    def _set(self, radiusLength):
##        u'The radius of the sphere.'
##    Radius = property(_get, _set, doc = _set.__doc__)
##
##    def QueryCenter(self, CenterPoint):
##        u'Sets an existing point equal to the center of the sphere.'
##        #return 
##
##    def _get(self):
##        u'The center of the sphere.'
##        #return CenterPoint
##    def _set(self, CenterPoint):
##        u'The center of the sphere.'
##    Center = property(_get, _set, doc = _set.__doc__)
##

IMolodenskyTransformation._methods_ = [
    COMMETHOD([helpstring(u'Returns the dx, dy and dz parameters.')], HRESULT, 'GetParameters',
              ( ['out'], POINTER(c_double), 'dx' ),
              ( ['out'], POINTER(c_double), 'dy' ),
              ( ['out'], POINTER(c_double), 'dz' )),
    COMMETHOD([helpstring(u'Sets the dx, dy and dz parameters.')], HRESULT, 'PutParameters',
              ( [], c_double, 'dx' ),
              ( [], c_double, 'dy' ),
              ( [], c_double, 'dz' )),
]
################################################################
## code template for IMolodenskyTransformation implementation
##class IMolodenskyTransformation_Impl(object):
##    def PutParameters(self, dx, dy, dz):
##        u'Sets the dx, dy and dz parameters.'
##        #return 
##
##    def GetParameters(self):
##        u'Returns the dx, dy and dz parameters.'
##        #return dx, dy, dz
##

class IAffineTransformation2D3GEN(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that define and manipulate affine transformations. IAffineTransformation2D3GEN is generic version of IAffineTransformation2D3'
    _iid_ = GUID('{20F586DE-9B4B-47A2-A9A7-ABC70FFD6E56}')
    _idlflags_ = ['oleautomation']
IAffineTransformation2D3GEN._methods_ = [
    COMMETHOD([helpstring(u'Transforms floating point measures to floating point measures (or do the inverse).')], HRESULT, 'TransformMeasuresFF',
              ( [], esriTransformDirection, 'direction' ),
              ( ['in'], POINTER(_midlSAFEARRAY(c_double)), 'inMeasures' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'outMeasures' )),
    COMMETHOD([helpstring(u'Transforms floating point measures to integer measures (or do the inverse).')], HRESULT, 'TransformMeasuresFI',
              ( [], esriTransformDirection, 'direction' ),
              ( ['in'], POINTER(_midlSAFEARRAY(c_double)), 'inMeasures' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'outMeasures' )),
    COMMETHOD([helpstring(u'Transforms integer measures to floating point measures (or do the inverse).')], HRESULT, 'TransformMeasuresIF',
              ( [], esriTransformDirection, 'direction' ),
              ( ['in'], POINTER(_midlSAFEARRAY(c_int)), 'inMeasures' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'outMeasures' )),
    COMMETHOD([helpstring(u'Transforms integer measures to integer measures (or do the inverse).')], HRESULT, 'TransformMeasuresII',
              ( [], esriTransformDirection, 'direction' ),
              ( ['in'], POINTER(_midlSAFEARRAY(c_int)), 'inMeasures' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'outMeasures' )),
    COMMETHOD([helpstring(u'Transforms floating point points to floating point points (or do the inverse).')], HRESULT, 'TransformPointsFF',
              ( [], esriTransformDirection, 'direction' ),
              ( ['in'], POINTER(_midlSAFEARRAY(c_double)), 'inPoints' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'outPoints' )),
    COMMETHOD([helpstring(u'Transforms floating point points to integer points (or do the inverse).')], HRESULT, 'TransformPointsFI',
              ( [], esriTransformDirection, 'direction' ),
              ( ['in'], POINTER(_midlSAFEARRAY(c_double)), 'inPoints' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'outPoints' )),
    COMMETHOD([helpstring(u'Transforms integer points to floating point points (or do the inverse).')], HRESULT, 'TransformPointsIF',
              ( [], esriTransformDirection, 'direction' ),
              ( ['in'], POINTER(_midlSAFEARRAY(c_int)), 'inPoints' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'outPoints' )),
    COMMETHOD([helpstring(u'Transforms integer points to integer points (or do the inverse).')], HRESULT, 'TransformPointsII',
              ( [], esriTransformDirection, 'direction' ),
              ( ['in'], POINTER(_midlSAFEARRAY(c_int)), 'inPoints' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'outPoints' )),
    COMMETHOD(['propputref', helpstring(u'The spatial reference in which this transformation is meaningful.')], HRESULT, 'SpatialReference',
              ( [], POINTER(ISpatialReference), 'SR' )),
    COMMETHOD(['propget', helpstring(u'The spatial reference in which this transformation is meaningful.')], HRESULT, 'SpatialReference',
              ( ['retval', 'out'], POINTER(POINTER(ISpatialReference)), 'SR' )),
    COMMETHOD([helpstring(u'Resets the tranformation.')], HRESULT, 'Reset'),
    COMMETHOD([helpstring(u'Defines the best affine transformation between two sets of points. Can be used to register paper maps on a digitizer.')], HRESULT, 'DefineFromControlPoints',
              ( ['in'], POINTER(_midlSAFEARRAY(POINTER(IPoint))), 'fromPoints' ),
              ( ['in'], POINTER(_midlSAFEARRAY(POINTER(IPoint))), 'toPoints' )),
    COMMETHOD([helpstring(u'Defines a transformation that maps a point relative to one envelope to a similar position relative to another envelope.')], HRESULT, 'DefineFromEnvelopes',
              ( [], POINTER(IEnvelope), 'from' ),
              ( [], POINTER(IEnvelope), 'to' )),
    COMMETHOD([helpstring(u'Defines a transformation that maps a point relative to one envelope to a similar position relative to another envelope.')], HRESULT, 'DefineFromEnvelopesEx',
              ( [], POINTER(IEnvelope), 'from' ),
              ( [], POINTER(IEnvelope), 'to' ),
              ( [], POINTER(IEnvelope), 'outFrom' ),
              ( [], VARIANT_BOOL, 'assumeFalseOrigin' ),
              ( [], VARIANT_BOOL, 'keepAspect' ),
              ( [], VARIANT_BOOL, 'flipIt' )),
    COMMETHOD([helpstring(u'Defines a transformation that can perform a reflection about the line l.')], HRESULT, 'DefineReflection',
              ( [], POINTER(ILine), 'l' )),
    COMMETHOD([helpstring(u"RMS (Root Mean Square) error expressed relative to the 'from' and 'to' points defining the transformation. These error terms are valid after using DefineFromControlPoints/Ex to define the transformation.")], HRESULT, 'GetRMSError',
              ( ['in', 'out'], POINTER(c_double), 'fromError' ),
              ( ['in', 'out'], POINTER(c_double), 'toError' )),
    COMMETHOD([helpstring(u"Returns the errors involved in moving control point i from the 'from' to 'to' system. These error terms are valid after using DefineFromControlPoints/Ex to define the transformation.")], HRESULT, 'GetControlPointError',
              ( ['in'], c_int, 'i' ),
              ( ['in', 'out'], POINTER(c_double), 'fromError' ),
              ( ['in', 'out'], POINTER(c_double), 'toError' )),
    COMMETHOD(['propget', helpstring(u'The scale along the X axis.')], HRESULT, 'XScale',
              ( ['retval', 'out'], POINTER(c_double), 'sx' )),
    COMMETHOD(['propget', helpstring(u'The scale along the Y axis.')], HRESULT, 'YScale',
              ( ['retval', 'out'], POINTER(c_double), 'sy' )),
    COMMETHOD(['propget', helpstring(u'The translation along the X axis.')], HRESULT, 'XTranslation',
              ( ['retval', 'out'], POINTER(c_double), 'dx' )),
    COMMETHOD(['propget', helpstring(u'The translation along the Y axis.')], HRESULT, 'YTranslation',
              ( ['retval', 'out'], POINTER(c_double), 'dy' )),
    COMMETHOD(['propget', helpstring(u'The rotation angle. Will not be able if different x/y scale factors have been incorporated into the transformation.')], HRESULT, 'Rotation',
              ( ['retval', 'out'], POINTER(c_double), 'r' )),
    COMMETHOD([helpstring(u'Incorporates scale factors into the transformation.')], HRESULT, 'Scale',
              ( [], c_double, 'dx' ),
              ( [], c_double, 'dy' )),
    COMMETHOD(['propput', helpstring(u'The origin of accumulated transformations used when projecting an affine transformation to a different spatial reference system.')], HRESULT, 'MoveOrigin',
              ( [], POINTER(IPoint), 'Origin' )),
    COMMETHOD([helpstring(u'Performs an X and Y translation defined by a 2D vector.')], HRESULT, 'MoveVector',
              ( [], POINTER(ILine), 'movementVector' )),
    COMMETHOD([helpstring(u'Incorporates a translation factor into the transformation.')], HRESULT, 'Move',
              ( [], c_double, 'dx' ),
              ( [], c_double, 'dy' )),
    COMMETHOD([helpstring(u'Incorporates a rotation (in radians) into the transformation.')], HRESULT, 'Rotate',
              ( [], c_double, 'da' )),
    COMMETHOD([helpstring(u'Post-multiplies the transformation by another transformation.')], HRESULT, 'PostMultiply',
              ( [], POINTER(IAffineTransformation2D3GEN), 'postTransform' )),
    COMMETHOD([helpstring(u'Pre-multiplies the transformation by another transformation.')], HRESULT, 'PreMultiply',
              ( [], POINTER(IAffineTransformation2D3GEN), 'preTransform' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the transformation contains a reflection (determinant is negative).')], HRESULT, 'IsReflective',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsReflective' )),
    COMMETHOD([helpstring(u'Moves this transformation into another spatial reference. If the transformations contains only translations, then use the MoveOrigin property to define an equivalent translation in the new spatial reference.')], HRESULT, 'Project',
              ( [], POINTER(ISpatialReference), 'newSpatialReference' )),
    COMMETHOD(['propget', helpstring(u'The origin of accumulated transformations used when projecting an affine transformation to a different spatial reference system.')], HRESULT, 'MoveOrigin',
              ( ['retval', 'out'], POINTER(POINTER(IPoint)), 'Origin' )),
    COMMETHOD([helpstring(u'Defines the best conformal affine transformation between two sets of points. Can be used to register paper maps on a digitizer.')], HRESULT, 'DefineConformalFromControlPoints',
              ( ['in'], POINTER(_midlSAFEARRAY(POINTER(IPoint))), 'fromPoints' ),
              ( ['in'], POINTER(_midlSAFEARRAY(POINTER(IPoint))), 'toPoints' )),
    COMMETHOD([helpstring(u'Returns the linear coefficients which define the two dimensional affine transformation. The array size of the incoming parameters needs to be 6.')], HRESULT, 'QueryLinearCoefficients',
              ( [], esriTransformDirection, 'direction' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'params' )),
    COMMETHOD([helpstring(u'Sets the linear coefficients which define the two dimensional affine transformation. The array size of the incoming parameters needs to be 6.')], HRESULT, 'SetLinearCoefficients',
              ( [], esriTransformDirection, 'direction' ),
              ( ['in'], POINTER(_midlSAFEARRAY(c_double)), 'params' )),
]
################################################################
## code template for IAffineTransformation2D3GEN implementation
##class IAffineTransformation2D3GEN_Impl(object):
##    def SetLinearCoefficients(self, direction, params):
##        u'Sets the linear coefficients which define the two dimensional affine transformation. The array size of the incoming parameters needs to be 6.'
##        #return 
##
##    def Scale(self, dx, dy):
##        u'Incorporates scale factors into the transformation.'
##        #return 
##
##    @property
##    def IsReflective(self):
##        u'Indicates if the transformation contains a reflection (determinant is negative).'
##        #return IsReflective
##
##    @property
##    def SpatialReference(self, SR):
##        u'The spatial reference in which this transformation is meaningful.'
##        #return 
##
##    def PreMultiply(self, preTransform):
##        u'Pre-multiplies the transformation by another transformation.'
##        #return 
##
##    def MoveVector(self, movementVector):
##        u'Performs an X and Y translation defined by a 2D vector.'
##        #return 
##
##    @property
##    def XTranslation(self):
##        u'The translation along the X axis.'
##        #return dx
##
##    def _get(self):
##        u'The origin of accumulated transformations used when projecting an affine transformation to a different spatial reference system.'
##        #return Origin
##    def _set(self, Origin):
##        u'The origin of accumulated transformations used when projecting an affine transformation to a different spatial reference system.'
##    MoveOrigin = property(_get, _set, doc = _set.__doc__)
##
##    def DefineReflection(self, l):
##        u'Defines a transformation that can perform a reflection about the line l.'
##        #return 
##
##    def PostMultiply(self, postTransform):
##        u'Post-multiplies the transformation by another transformation.'
##        #return 
##
##    def GetRMSError(self):
##        u"RMS (Root Mean Square) error expressed relative to the 'from' and 'to' points defining the transformation. These error terms are valid after using DefineFromControlPoints/Ex to define the transformation."
##        #return fromError, toError
##
##    def TransformPointsFF(self, direction, inPoints):
##        u'Transforms floating point points to floating point points (or do the inverse).'
##        #return outPoints
##
##    @property
##    def Rotation(self):
##        u'The rotation angle. Will not be able if different x/y scale factors have been incorporated into the transformation.'
##        #return r
##
##    def Reset(self):
##        u'Resets the tranformation.'
##        #return 
##
##    def TransformMeasuresIF(self, direction, inMeasures):
##        u'Transforms integer measures to floating point measures (or do the inverse).'
##        #return outMeasures
##
##    def Rotate(self, da):
##        u'Incorporates a rotation (in radians) into the transformation.'
##        #return 
##
##    @property
##    def YScale(self):
##        u'The scale along the Y axis.'
##        #return sy
##
##    def TransformPointsFI(self, direction, inPoints):
##        u'Transforms floating point points to integer points (or do the inverse).'
##        #return outPoints
##
##    def DefineConformalFromControlPoints(self, fromPoints, toPoints):
##        u'Defines the best conformal affine transformation between two sets of points. Can be used to register paper maps on a digitizer.'
##        #return 
##
##    def TransformMeasuresII(self, direction, inMeasures):
##        u'Transforms integer measures to integer measures (or do the inverse).'
##        #return outMeasures
##
##    def Project(self, newSpatialReference):
##        u'Moves this transformation into another spatial reference. If the transformations contains only translations, then use the MoveOrigin property to define an equivalent translation in the new spatial reference.'
##        #return 
##
##    def QueryLinearCoefficients(self, direction):
##        u'Returns the linear coefficients which define the two dimensional affine transformation. The array size of the incoming parameters needs to be 6.'
##        #return params
##
##    def GetControlPointError(self, i):
##        u"Returns the errors involved in moving control point i from the 'from' to 'to' system. These error terms are valid after using DefineFromControlPoints/Ex to define the transformation."
##        #return fromError, toError
##
##    def DefineFromControlPoints(self, fromPoints, toPoints):
##        u'Defines the best affine transformation between two sets of points. Can be used to register paper maps on a digitizer.'
##        #return 
##
##    def DefineFromEnvelopes(self, from, to):
##        u'Defines a transformation that maps a point relative to one envelope to a similar position relative to another envelope.'
##        #return 
##
##    def TransformMeasuresFI(self, direction, inMeasures):
##        u'Transforms floating point measures to integer measures (or do the inverse).'
##        #return outMeasures
##
##    def TransformPointsII(self, direction, inPoints):
##        u'Transforms integer points to integer points (or do the inverse).'
##        #return outPoints
##
##    def TransformPointsIF(self, direction, inPoints):
##        u'Transforms integer points to floating point points (or do the inverse).'
##        #return outPoints
##
##    def Move(self, dx, dy):
##        u'Incorporates a translation factor into the transformation.'
##        #return 
##
##    def TransformMeasuresFF(self, direction, inMeasures):
##        u'Transforms floating point measures to floating point measures (or do the inverse).'
##        #return outMeasures
##
##    @property
##    def YTranslation(self):
##        u'The translation along the Y axis.'
##        #return dy
##
##    @property
##    def XScale(self):
##        u'The scale along the X axis.'
##        #return sx
##
##    def DefineFromEnvelopesEx(self, from, to, outFrom, assumeFalseOrigin, keepAspect, flipIt):
##        u'Defines a transformation that maps a point relative to one envelope to a similar position relative to another envelope.'
##        #return 
##

IConstructCurve2._methods_ = [
    COMMETHOD([helpstring(u'Constructs a curve which approximates the input curve by a small number of Bezier segments.')], HRESULT, 'ApproximateByBeziers',
              ( [], POINTER(IPolycurve), 'pInCurve' ),
              ( ['optional'], POINTER(VARIANT), 'pMaxDistance' ),
              ( ['optional'], POINTER(VARIANT), 'smoothClosedParts' )),
]
################################################################
## code template for IConstructCurve2 implementation
##class IConstructCurve2_Impl(object):
##    def ApproximateByBeziers(self, pInCurve, pMaxDistance, smoothClosedParts):
##        u'Constructs a curve which approximates the input curve by a small number of Bezier segments.'
##        #return 
##

IConstructCurve3._methods_ = [
    COMMETHOD([helpstring(u'Returns an enumerator which identifies which segments were added to the result polyline by the construction process. The result is not simplified when an enumerator is requested.')], HRESULT, 'ConstructExtendedEx',
              ( [], POINTER(ICurve), 'fromCurve' ),
              ( [], POINTER(ICurve), 'toCurve' ),
              ( [], c_int, 'extensionFlags' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'extensionsPerformed' ),
              ( ['retval', 'out'], POINTER(POINTER(IEnumSegment)), 'addedModifiedSegments' )),
]
################################################################
## code template for IConstructCurve3 implementation
##class IConstructCurve3_Impl(object):
##    def ConstructExtendedEx(self, fromCurve, toCurve, extensionFlags):
##        u'Returns an enumerator which identifies which segments were added to the result polyline by the construction process. The result is not simplified when an enumerator is requested.'
##        #return extensionsPerformed, addedModifiedSegments
##

class esriGeometryNetworkVertexInfo(Structure):
    pass
esriGeometryNetworkVertexInfo._fields_ = [
    ('m_V', comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPoint),
    ('m_bEndOfPath', VARIANT_BOOL),
    ('m_iPath', c_int),
    ('m_RatioAlong', c_double),
    ('m_IncomingAzimuth', c_double),
    ('m_OutgoingAzimuth', c_double),
    ('m_VID', c_int),
]
assert sizeof(esriGeometryNetworkVertexInfo) == 56, sizeof(esriGeometryNetworkVertexInfo)
assert alignment(esriGeometryNetworkVertexInfo) == 8, alignment(esriGeometryNetworkVertexInfo)
IConstructLine._methods_ = [
    COMMETHOD([helpstring(u'Constructs a line segment being the bisector through the angle defined by the three input points.')], HRESULT, 'ConstructAngleBisector',
              ( [], POINTER(IPoint), 'from' ),
              ( [], POINTER(IPoint), 'through' ),
              ( [], POINTER(IPoint), 'to' ),
              ( [], c_double, 'Length' ),
              ( [], VARIANT_BOOL, 'useAcuteAngle' )),
    COMMETHOD([helpstring(u"Extends a line segment until one or both of its endpoints reaches the boundary of the domain of the line's associated spatial reference.")], HRESULT, 'ConstructExtended',
              ( [], POINTER(ILine), 'inLine' ),
              ( [], esriSegmentExtension, 'extendHow' )),
]
################################################################
## code template for IConstructLine implementation
##class IConstructLine_Impl(object):
##    def ConstructExtended(self, inLine, extendHow):
##        u"Extends a line segment until one or both of its endpoints reaches the boundary of the domain of the line's associated spatial reference."
##        #return 
##
##    def ConstructAngleBisector(self, from, through, to, Length, useAcuteAngle):
##        u'Constructs a line segment being the bisector through the angle defined by the three input points.'
##        #return 
##

IGridTransformation._methods_ = [
    COMMETHOD(['propput', helpstring(u'The name of a dataset containing gridded transformation values for a geographic area.')], HRESULT, 'GridDatasetName',
              ( [], BSTR, 'datasetName' )),
    COMMETHOD(['propget', helpstring(u'The name of a dataset containing gridded transformation values for a geographic area.')], HRESULT, 'GridDatasetName',
              ( ['retval', 'out'], POINTER(BSTR), 'datasetName' )),
    COMMETHOD([helpstring(u'Makes the grid data available for transformation operations.')], HRESULT, 'Load'),
    COMMETHOD([helpstring(u'Releases any resources consumed by the grid data.')], HRESULT, 'Unload'),
]
################################################################
## code template for IGridTransformation implementation
##class IGridTransformation_Impl(object):
##    def Load(self):
##        u'Makes the grid data available for transformation operations.'
##        #return 
##
##    def _get(self):
##        u'The name of a dataset containing gridded transformation values for a geographic area.'
##        #return datasetName
##    def _set(self, datasetName):
##        u'The name of a dataset containing gridded transformation values for a geographic area.'
##    GridDatasetName = property(_get, _set, doc = _set.__doc__)
##
##    def Unload(self):
##        u'Releases any resources consumed by the grid data.'
##        #return 
##

IConstructPath._methods_ = [
    COMMETHOD([helpstring(u'Constructs a scaled, rotated version of srcPath. The point at stretchStartIndex will end up at stretchEnd. The points at startAnchor and endAnchor will remain unchanged. Others will be scaled and rotate proportionately.')], HRESULT, 'ConstructRigidStretch',
              ( [], POINTER(IPath), 'srcPath' ),
              ( [], c_int, 'stretchStartIndex' ),
              ( [], c_int, 'startAnchor' ),
              ( [], c_int, 'endAnchor' ),
              ( [], POINTER(IPoint), 'stretchEnd' )),
]
################################################################
## code template for IConstructPath implementation
##class IConstructPath_Impl(object):
##    def ConstructRigidStretch(self, srcPath, stretchStartIndex, startAnchor, endAnchor, stretchEnd):
##        u'Constructs a scaled, rotated version of srcPath. The point at stretchStartIndex will end up at stretchEnd. The points at startAnchor and endAnchor will remain unchanged. Others will be scaled and rotate proportionately.'
##        #return 
##

IConstructCircularArc2._methods_ = [
    COMMETHOD([helpstring(u'Constructs an arc from a center point, a from point, and a chord length.')], HRESULT, 'ConstructChordDistanceEx',
              ( [], POINTER(IPoint), 'Center' ),
              ( [], POINTER(IPoint), 'from' ),
              ( [], VARIANT_BOOL, 'isCCW' ),
              ( [], c_double, 'chordDistance' ),
              ( [], VARIANT_BOOL, 'IsMinor' )),
    COMMETHOD([helpstring(u'Constructs an arc with a common tangent to the input segment, a given radius and a chord length.')], HRESULT, 'ConstructTangentRadiusChordEx',
              ( [], POINTER(ISegment), 'Segment' ),
              ( [], VARIANT_BOOL, 'atStart' ),
              ( [], VARIANT_BOOL, 'isCCW' ),
              ( [], c_double, 'inRadius' ),
              ( [], c_double, 'chordDistance' ),
              ( [], VARIANT_BOOL, 'IsMinor' )),
]
################################################################
## code template for IConstructCircularArc2 implementation
##class IConstructCircularArc2_Impl(object):
##    def ConstructTangentRadiusChordEx(self, Segment, atStart, isCCW, inRadius, chordDistance, IsMinor):
##        u'Constructs an arc with a common tangent to the input segment, a given radius and a chord length.'
##        #return 
##
##    def ConstructChordDistanceEx(self, Center, from, isCCW, chordDistance, IsMinor):
##        u'Constructs an arc from a center point, a from point, and a chord length.'
##        #return 
##

IJSONConverterGeometry._methods_ = [
    COMMETHOD([helpstring(u'Writes spatial reference object. Pass NULL as propname to write a standalone JSON object.')], HRESULT, 'WriteSpatialReference',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IJSONWriter), 'pWriter' ),
              ( ['in'], BSTR, 'propname' ),
              ( ['in'], POINTER(ISpatialReference), 'pSR' )),
    COMMETHOD([helpstring(u'Writes a geographic (datum) transformation object. Pass NULL as propname to write a standalone JSON object.')], HRESULT, 'WriteGeoTransformation',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IJSONWriter), 'pWriter' ),
              ( ['in'], BSTR, 'propname' ),
              ( ['in'], POINTER(IGeoTransformation), 'pSR' )),
    COMMETHOD([helpstring(u'Writes geometry object.')], HRESULT, 'WriteGeometry',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IJSONWriter), 'pWriter' ),
              ( ['in'], BSTR, 'propname' ),
              ( ['in'], POINTER(IGeometry), 'pGeom' ),
              ( ['in'], VARIANT_BOOL, 'skip_spref' )),
    COMMETHOD([helpstring(u'Queries spatial reference and populates existing IJSONObject')], HRESULT, 'QueryJSONSpatialReference',
              ( ['in'], POINTER(ISpatialReference), 'pSR' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IJSONObject), 'pJSON' )),
    COMMETHOD([helpstring(u'Queries a geographic (datum) transformation object and populates existing IJSONObject')], HRESULT, 'QueryJSONGeoTransformation',
              ( ['in'], POINTER(IGeoTransformation), 'pSR' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IJSONObject), 'pJSON' )),
    COMMETHOD([helpstring(u'Queries spatial reference and populates existing IJSONObject')], HRESULT, 'QueryJSONEnvelope',
              ( ['in'], POINTER(IEnvelope), 'pEnvelope' ),
              ( ['in'], VARIANT_BOOL, 'skip_spref' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IJSONObject), 'pJSON' )),
    COMMETHOD([helpstring(u'Queries geometry and populates existing IJSONObject')], HRESULT, 'QueryJSONGeometry',
              ( ['in'], POINTER(IGeometry), 'pGeom' ),
              ( ['in'], VARIANT_BOOL, 'skip_spref' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IJSONObject), 'pJSON' )),
    COMMETHOD([helpstring(u'Reads spatial reference object.')], HRESULT, 'ReadSpatialReference',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IJSONReader), 'pReader' ),
              ( ['retval', 'out'], POINTER(POINTER(ISpatialReference)), 'ppSR' )),
    COMMETHOD([helpstring(u'Reads a geographic (datum) transformation object.')], HRESULT, 'ReadGeoTransformation',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IJSONReader), 'pReader' ),
              ( ['retval', 'out'], POINTER(POINTER(IGeoTransformation)), 'ppGT' )),
    COMMETHOD([helpstring(u'Reads geometry object. If provided geometry type is esriUnknown, tries to deduce geometry type from the JSON structure.')], HRESULT, 'ReadGeometry',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IJSONReader), 'pReader' ),
              ( ['in'], esriGeometryType, 'geomType' ),
              ( [], VARIANT_BOOL, 'bDefaultHasZs' ),
              ( [], VARIANT_BOOL, 'bDefaultHasMs' ),
              ( ['retval', 'out'], POINTER(POINTER(IGeometry)), 'ppGeom' )),
    COMMETHOD([helpstring(u'Reads point object.')], HRESULT, 'ReadPoint',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IJSONReader), 'pReader' ),
              ( ['retval', 'out'], POINTER(POINTER(IPoint)), 'ppPoint' )),
    COMMETHOD([helpstring(u'Reads point object.')], HRESULT, 'ReadMultipoint',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IJSONReader), 'pReader' ),
              ( [], VARIANT_BOOL, 'bDefaultHasZs' ),
              ( [], VARIANT_BOOL, 'bDefaultHasMs' ),
              ( ['retval', 'out'], POINTER(POINTER(IMultipoint)), 'ppMultipoint' )),
    COMMETHOD([helpstring(u'Reads point object.')], HRESULT, 'ReadPolygon',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IJSONReader), 'pReader' ),
              ( [], VARIANT_BOOL, 'bDefaultHasZs' ),
              ( [], VARIANT_BOOL, 'bDefaultHasMs' ),
              ( ['retval', 'out'], POINTER(POINTER(IPolygon)), 'ppPolygon' )),
    COMMETHOD([helpstring(u'Reads point object.')], HRESULT, 'ReadPolyline',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IJSONReader), 'pReader' ),
              ( [], VARIANT_BOOL, 'bDefaultHasZs' ),
              ( [], VARIANT_BOOL, 'bDefaultHasMs' ),
              ( ['retval', 'out'], POINTER(POINTER(IPolyline)), 'ppPolyLine' )),
    COMMETHOD([helpstring(u'Reads point object.')], HRESULT, 'ReadEnvelope',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IJSONReader), 'pReader' ),
              ( ['retval', 'out'], POINTER(POINTER(IEnvelope)), 'ppEnvelope' )),
    COMMETHOD([helpstring(u'Reads geometry object from JSON object.')], HRESULT, 'ToGeometry',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IJSONObject), 'pJSONObject' ),
              ( ['in'], esriGeometryType, 'geomType' ),
              ( [], VARIANT_BOOL, 'bDefaultHasZs' ),
              ( [], VARIANT_BOOL, 'bDefaultHasMs' ),
              ( ['retval', 'out'], POINTER(POINTER(IGeometry)), 'ppGeom' )),
    COMMETHOD([helpstring(u'Reads envelope from a JSON object.')], HRESULT, 'ToEnvelope',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IJSONObject), 'pJSONObject' ),
              ( ['retval', 'out'], POINTER(POINTER(IEnvelope)), 'ppEnvelope' )),
    COMMETHOD([helpstring(u'Reads spatial reference from a JSON object.')], HRESULT, 'ToSpatialReference',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IJSONObject), 'pJSONObject' ),
              ( ['retval', 'out'], POINTER(POINTER(ISpatialReference)), 'ppSR' )),
    COMMETHOD([helpstring(u'Reads a geographic (datum) transformation object from a JSON object.')], HRESULT, 'ToGeoTransformation',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IJSONObject), 'pJSONObject' ),
              ( ['retval', 'out'], POINTER(POINTER(IGeoTransformation)), 'ppGT' )),
    COMMETHOD([helpstring(u'Reads IPoint from a JSON object.')], HRESULT, 'ToPoint',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IJSONObject), 'pJSONObject' ),
              ( ['retval', 'out'], POINTER(POINTER(IPoint)), 'ppPoint' )),
    COMMETHOD([helpstring(u'Reads multipoint from a JSON object.')], HRESULT, 'ToMultipoint',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IJSONObject), 'pJSONObject' ),
              ( [], VARIANT_BOOL, 'bDefaultHasZs' ),
              ( [], VARIANT_BOOL, 'bDefaultHasMs' ),
              ( ['retval', 'out'], POINTER(POINTER(IMultipoint)), 'ppMultipoint' )),
    COMMETHOD([helpstring(u'Reads polygon from a JSON object.')], HRESULT, 'ToPolygon',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IJSONObject), 'pJSONObject' ),
              ( [], VARIANT_BOOL, 'bDefaultHasZs' ),
              ( [], VARIANT_BOOL, 'bDefaultHasMs' ),
              ( ['retval', 'out'], POINTER(POINTER(IPolygon)), 'ppPolygon' )),
    COMMETHOD([helpstring(u'Reads polyline from a JSON object.')], HRESULT, 'ToPolyline',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IJSONObject), 'pJSONObject' ),
              ( [], VARIANT_BOOL, 'bDefaultHasZs' ),
              ( [], VARIANT_BOOL, 'bDefaultHasMs' ),
              ( ['retval', 'out'], POINTER(POINTER(IPolyline)), 'ppPolyLine' )),
]
################################################################
## code template for IJSONConverterGeometry implementation
##class IJSONConverterGeometry_Impl(object):
##    def WriteGeometry(self, pWriter, propname, pGeom, skip_spref):
##        u'Writes geometry object.'
##        #return 
##
##    def ToPoint(self, pJSONObject):
##        u'Reads IPoint from a JSON object.'
##        #return ppPoint
##
##    def ToGeoTransformation(self, pJSONObject):
##        u'Reads a geographic (datum) transformation object from a JSON object.'
##        #return ppGT
##
##    def QueryJSONEnvelope(self, pEnvelope, skip_spref, pJSON):
##        u'Queries spatial reference and populates existing IJSONObject'
##        #return 
##
##    def ToMultipoint(self, pJSONObject, bDefaultHasZs, bDefaultHasMs):
##        u'Reads multipoint from a JSON object.'
##        #return ppMultipoint
##
##    def QueryJSONGeometry(self, pGeom, skip_spref, pJSON):
##        u'Queries geometry and populates existing IJSONObject'
##        #return 
##
##    def WriteSpatialReference(self, pWriter, propname, pSR):
##        u'Writes spatial reference object. Pass NULL as propname to write a standalone JSON object.'
##        #return 
##
##    def ToSpatialReference(self, pJSONObject):
##        u'Reads spatial reference from a JSON object.'
##        #return ppSR
##
##    def ToPolyline(self, pJSONObject, bDefaultHasZs, bDefaultHasMs):
##        u'Reads polyline from a JSON object.'
##        #return ppPolyLine
##
##    def ReadPolygon(self, pReader, bDefaultHasZs, bDefaultHasMs):
##        u'Reads point object.'
##        #return ppPolygon
##
##    def ReadSpatialReference(self, pReader):
##        u'Reads spatial reference object.'
##        #return ppSR
##
##    def ReadMultipoint(self, pReader, bDefaultHasZs, bDefaultHasMs):
##        u'Reads point object.'
##        #return ppMultipoint
##
##    def WriteGeoTransformation(self, pWriter, propname, pSR):
##        u'Writes a geographic (datum) transformation object. Pass NULL as propname to write a standalone JSON object.'
##        #return 
##
##    def ToGeometry(self, pJSONObject, geomType, bDefaultHasZs, bDefaultHasMs):
##        u'Reads geometry object from JSON object.'
##        #return ppGeom
##
##    def ReadGeometry(self, pReader, geomType, bDefaultHasZs, bDefaultHasMs):
##        u'Reads geometry object. If provided geometry type is esriUnknown, tries to deduce geometry type from the JSON structure.'
##        #return ppGeom
##
##    def ReadEnvelope(self, pReader):
##        u'Reads point object.'
##        #return ppEnvelope
##
##    def ToEnvelope(self, pJSONObject):
##        u'Reads envelope from a JSON object.'
##        #return ppEnvelope
##
##    def ReadPoint(self, pReader):
##        u'Reads point object.'
##        #return ppPoint
##
##    def ReadPolyline(self, pReader, bDefaultHasZs, bDefaultHasMs):
##        u'Reads point object.'
##        #return ppPolyLine
##
##    def ReadGeoTransformation(self, pReader):
##        u'Reads a geographic (datum) transformation object.'
##        #return ppGT
##
##    def ToPolygon(self, pJSONObject, bDefaultHasZs, bDefaultHasMs):
##        u'Reads polygon from a JSON object.'
##        #return ppPolygon
##
##    def QueryJSONSpatialReference(self, pSR, pJSON):
##        u'Queries spatial reference and populates existing IJSONObject'
##        #return 
##
##    def QueryJSONGeoTransformation(self, pSR, pJSON):
##        u'Queries a geographic (datum) transformation object and populates existing IJSONObject'
##        #return 
##

IProjectedCoordinateSystem4GEN._methods_ = [
    COMMETHOD(['propget', helpstring(u'The name of this spatial reference component.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propget', helpstring(u'The alias of this spatial reference component.')], HRESULT, 'Alias',
              ( ['retval', 'out'], POINTER(BSTR), 'Alias' )),
    COMMETHOD(['propget', helpstring(u'The abbreviated name of this spatial reference component.')], HRESULT, 'Abbreviation',
              ( ['retval', 'out'], POINTER(BSTR), 'Abbreviation' )),
    COMMETHOD(['propget', helpstring(u'The comment string of this spatial reference component.')], HRESULT, 'Remarks',
              ( ['retval', 'out'], POINTER(BSTR), 'Remarks' )),
    COMMETHOD(['propget', helpstring(u'The factory code of the spatial reference.')], HRESULT, 'FactoryCode',
              ( ['retval', 'out'], POINTER(c_int), 'Code' )),
    COMMETHOD(['restricted', helpstring(u'SpatialReferenceImpl.'), 'propget'], HRESULT, 'SpatialReferenceImpl',
              ( ['retval', 'out'], POINTER(esriSpatialReferenceImplHandle), 'srImpl' )),
    COMMETHOD(['restricted', helpstring(u'An opaque reference to the precision information implementation for this spatial reference.'), 'propget'], HRESULT, 'PrecisionImpl',
              ( ['retval', 'out'], POINTER(esriPrecisionImplHandle), 'PrecisionImpl' )),
    COMMETHOD(['restricted', helpstring(u'An opaque reference to the precision information (including z/m awareness) implementation for this spatial reference.'), 'propget'], HRESULT, 'PrecisionExImpl',
              ( ['retval', 'out'], POINTER(esriPrecisionExImplHandle), 'PrecisionExImpl' )),
    COMMETHOD([helpstring(u'Returns true when (x,y) precision information has been defined.')], HRESULT, 'HasXYPrecision',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'HasXYPrecision' )),
    COMMETHOD([helpstring(u'Returns true when z-value precision information has been defined.')], HRESULT, 'HasZPrecision',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'HasZPrecision' )),
    COMMETHOD([helpstring(u'Returns true when m-value precision information has been defined.')], HRESULT, 'HasMPrecision',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'HasMPrecision' )),
    COMMETHOD([helpstring(u'Returns TRUE when the precision information for the two spatial references is the same.')], HRESULT, 'IsPrecisionEqual',
              ( ['in'], POINTER(ISpatialReference), 'otherSR' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'IsPrecisionEqual' )),
    COMMETHOD([helpstring(u'Set the false origin and units.')], HRESULT, 'SetFalseOriginAndUnits',
              ( [], c_double, 'falseX' ),
              ( [], c_double, 'falseY' ),
              ( [], c_double, 'xyUnits' )),
    COMMETHOD([helpstring(u'Set the Z false origin and units.')], HRESULT, 'SetZFalseOriginAndUnits',
              ( [], c_double, 'falseZ' ),
              ( [], c_double, 'zUnits' )),
    COMMETHOD([helpstring(u'Set the measure false origin and units.')], HRESULT, 'SetMFalseOriginAndUnits',
              ( [], c_double, 'falseM' ),
              ( [], c_double, 'mUnits' )),
    COMMETHOD([helpstring(u'Get the false origin and units.')], HRESULT, 'GetFalseOriginAndUnits',
              ( ['in', 'out'], POINTER(c_double), 'falseX' ),
              ( ['in', 'out'], POINTER(c_double), 'falseY' ),
              ( ['in', 'out'], POINTER(c_double), 'xyUnits' )),
    COMMETHOD([helpstring(u'Get the Z false origin and units.')], HRESULT, 'GetZFalseOriginAndUnits',
              ( ['in', 'out'], POINTER(c_double), 'falseZ' ),
              ( ['in', 'out'], POINTER(c_double), 'zUnits' )),
    COMMETHOD([helpstring(u'Get the measure false origin and units.')], HRESULT, 'GetMFalseOriginAndUnits',
              ( ['in', 'out'], POINTER(c_double), 'falseM' ),
              ( ['in', 'out'], POINTER(c_double), 'mUnits' )),
    COMMETHOD([helpstring(u'Get the domain extent.')], HRESULT, 'GetDomain',
              ( ['in', 'out'], POINTER(c_double), 'XMin' ),
              ( ['in', 'out'], POINTER(c_double), 'XMax' ),
              ( ['in', 'out'], POINTER(c_double), 'YMin' ),
              ( ['in', 'out'], POINTER(c_double), 'YMax' )),
    COMMETHOD([helpstring(u'Set the xy domain extent.')], HRESULT, 'SetDomain',
              ( ['in'], c_double, 'XMin' ),
              ( ['in'], c_double, 'XMax' ),
              ( ['in'], c_double, 'YMin' ),
              ( ['in'], c_double, 'YMax' )),
    COMMETHOD([helpstring(u'Get the Z domain extent.')], HRESULT, 'GetZDomain',
              ( ['in', 'out'], POINTER(c_double), 'outZMin' ),
              ( ['in', 'out'], POINTER(c_double), 'outZMax' )),
    COMMETHOD([helpstring(u'Set the z domain extent.')], HRESULT, 'SetZDomain',
              ( ['in'], c_double, 'inZMin' ),
              ( ['in'], c_double, 'inZMax' )),
    COMMETHOD([helpstring(u'Get the measure domain extent.')], HRESULT, 'GetMDomain',
              ( ['in', 'out'], POINTER(c_double), 'outMMin' ),
              ( ['in', 'out'], POINTER(c_double), 'outMMax' )),
    COMMETHOD([helpstring(u'Set the measure domain extent.')], HRESULT, 'SetMDomain',
              ( ['in'], c_double, 'inMMin' ),
              ( ['in'], c_double, 'inMMax' )),
    COMMETHOD(['propget', helpstring(u'The unit for the Z coordinate.')], HRESULT, 'ZCoordinateUnit',
              ( ['retval', 'out'], POINTER(POINTER(ILinearUnit)), 'zunit' )),
    COMMETHOD(['propput', helpstring(u'The unit for the Z coordinate.')], HRESULT, 'ZCoordinateUnit',
              ( [], POINTER(ILinearUnit), 'zunit' )),
    COMMETHOD([helpstring(u'Notify this object that some of its parts have changed (parameter values, z unit, etc.).')], HRESULT, 'Changed'),
    COMMETHOD(['propget', helpstring(u'The usage notes of a projected coordinate system.')], HRESULT, 'Usage',
              ( ['retval', 'out'], POINTER(BSTR), 'Usage' )),
    COMMETHOD(['propget', helpstring(u'The geographic coordinate system of a projected coordinate system.')], HRESULT, 'GeographicCoordinateSystem',
              ( ['retval', 'out'], POINTER(POINTER(IGeographicCoordinateSystem)), 'geographic' )),
    COMMETHOD(['propget', helpstring(u'The map projection of a projected coordinate system.')], HRESULT, 'Projection',
              ( ['retval', 'out'], POINTER(POINTER(IProjection)), 'Projection' )),
    COMMETHOD([helpstring(u'Gets the map projection parameters of a projected coordinate system. The array size needs to be esriSR_MaxParameterCountPrivate.')], HRESULT, 'GetParameters',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(POINTER(IParameter))), 'parameters' )),
    COMMETHOD(['propget', helpstring(u'The linear unit of a projected coordinate system.')], HRESULT, 'CoordinateUnit',
              ( ['retval', 'out'], POINTER(POINTER(ILinearUnit)), 'Unit' )),
    COMMETHOD([helpstring(u'Projects points from geographic to planar coordinates.')], HRESULT, 'Forward',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPoint)), 'Points' )),
    COMMETHOD([helpstring(u'Projects points from planar to geographic coordinates.')], HRESULT, 'Inverse',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPoint)), 'Points' )),
    COMMETHOD(['propget', helpstring(u'The number of shapes that describe the limits of a ProjCS.')], HRESULT, 'HorizonCount',
              ( ['retval', 'out'], POINTER(c_int), 'HorizonCount' )),
    COMMETHOD(['propget', helpstring(u'The mathematical limits of a projected coordinate system.')], HRESULT, 'Horizon',
              ( ['in'], c_int, 'horizonIndex' ),
              ( ['retval', 'out'], POINTER(POINTER(esriSRHorizon)), 'Horizon' )),
    COMMETHOD(['propget', helpstring(u'The central meridian (Lambda0) of a projected coordinate system.')], HRESULT, 'CentralMeridian',
              ( ['in'], VARIANT_BOOL, 'inDegrees' ),
              ( ['retval', 'out'], POINTER(c_double), 'CentralMeridian' )),
    COMMETHOD(['propput', helpstring(u'The central meridian (Lambda0) of a projected coordinate system.')], HRESULT, 'CentralMeridian',
              ( ['in'], VARIANT_BOOL, 'inDegrees' ),
              ( [], c_double, 'CentralMeridian' )),
    COMMETHOD(['propget', helpstring(u'The longitude of origin (Lambda0) of a projected coordinate system.')], HRESULT, 'LongitudeOfOrigin',
              ( ['retval', 'out'], POINTER(c_double), 'LongitudeOfOrigin' )),
    COMMETHOD(['propput', helpstring(u'The longitude of origin (Lambda0) of a projected coordinate system.')], HRESULT, 'LongitudeOfOrigin',
              ( [], c_double, 'LongitudeOfOrigin' )),
    COMMETHOD(['propget', helpstring(u'The latitude of the first point (Phi 1) of a projected coordinate system.')], HRESULT, 'LatitudeOf1st',
              ( ['retval', 'out'], POINTER(c_double), 'standardLongitude1' )),
    COMMETHOD(['propput', helpstring(u'The latitude of the first point (Phi 1) of a projected coordinate system.')], HRESULT, 'LatitudeOf1st',
              ( [], c_double, 'standardLongitude1' )),
    COMMETHOD(['propget', helpstring(u'The latitude of the second point (Phi 2) of a projected coordinate system.')], HRESULT, 'LatitudeOf2nd',
              ( ['retval', 'out'], POINTER(c_double), 'LatitudeOf2nd' )),
    COMMETHOD(['propput', helpstring(u'The latitude of the second point (Phi 2) of a projected coordinate system.')], HRESULT, 'LatitudeOf2nd',
              ( [], c_double, 'LatitudeOf2nd' )),
    COMMETHOD(['propget', helpstring(u'The false easting (X0) of a projected coordinate system.')], HRESULT, 'FalseEasting',
              ( ['retval', 'out'], POINTER(c_double), 'FalseEasting' )),
    COMMETHOD(['propput', helpstring(u'The false easting (X0) of a projected coordinate system.')], HRESULT, 'FalseEasting',
              ( [], c_double, 'FalseEasting' )),
    COMMETHOD(['propget', helpstring(u'The false northing (Y0) of a projected coordinate system.')], HRESULT, 'FalseNorthing',
              ( ['retval', 'out'], POINTER(c_double), 'FalseNorthing' )),
    COMMETHOD(['propput', helpstring(u'The false northing (Y0) of a projected coordinate system.')], HRESULT, 'FalseNorthing',
              ( [], c_double, 'FalseNorthing' )),
    COMMETHOD(['propget', helpstring(u'The central parallel (Phi 0) of a projected coordinate system.')], HRESULT, 'CentralParallel',
              ( ['retval', 'out'], POINTER(c_double), 'CentralParallel' )),
    COMMETHOD(['propput', helpstring(u'The central parallel (Phi 0) of a projected coordinate system.')], HRESULT, 'CentralParallel',
              ( [], c_double, 'CentralParallel' )),
    COMMETHOD(['propget', helpstring(u'The first parallel (Phi 1) of a projected coordinate system.')], HRESULT, 'StandardParallel1',
              ( ['retval', 'out'], POINTER(c_double), 'StandardParallel1' )),
    COMMETHOD(['propput', helpstring(u'The first parallel (Phi 1) of a projected coordinate system.')], HRESULT, 'StandardParallel1',
              ( [], c_double, 'StandardParallel1' )),
    COMMETHOD(['propget', helpstring(u'The second parallel (Phi 2) of a projected coordinate system.')], HRESULT, 'StandardParallel2',
              ( ['retval', 'out'], POINTER(c_double), 'StandardParallel2' )),
    COMMETHOD(['propput', helpstring(u'The second parallel (Phi 2) of a projected coordinate system.')], HRESULT, 'StandardParallel2',
              ( [], c_double, 'StandardParallel2' )),
    COMMETHOD(['propget', helpstring(u'The longitude of the first point (Lambda 1) of a projected coordinate system.')], HRESULT, 'LongitudeOf1st',
              ( ['retval', 'out'], POINTER(c_double), 'LongitudeOf1st' )),
    COMMETHOD(['propput', helpstring(u'The longitude of the first point (Lambda 1) of a projected coordinate system.')], HRESULT, 'LongitudeOf1st',
              ( [], c_double, 'LongitudeOf1st' )),
    COMMETHOD(['propget', helpstring(u'The longitude of the second point (Lambda 2) of a projected coordinate system.')], HRESULT, 'LongitudeOf2nd',
              ( ['retval', 'out'], POINTER(c_double), 'LongitudeOf2nd' )),
    COMMETHOD(['propput', helpstring(u'The longitude of the second point (Lambda 2) of a projected coordinate system.')], HRESULT, 'LongitudeOf2nd',
              ( [], c_double, 'LongitudeOf2nd' )),
    COMMETHOD(['propget', helpstring(u'The scale factor (K0) of a projected coordinate system.')], HRESULT, 'ScaleFactor',
              ( ['retval', 'out'], POINTER(c_double), 'ScaleFactor' )),
    COMMETHOD(['propput', helpstring(u'The scale factor (K0) of a projected coordinate system.')], HRESULT, 'ScaleFactor',
              ( [], c_double, 'ScaleFactor' )),
    COMMETHOD(['propget', helpstring(u'The azimuth of a projected coordinate system.')], HRESULT, 'Azimuth',
              ( ['retval', 'out'], POINTER(c_double), 'Azimuth' )),
    COMMETHOD(['propput', helpstring(u'The azimuth of a projected coordinate system.')], HRESULT, 'Azimuth',
              ( [], c_double, 'Azimuth' )),
    COMMETHOD(['propget', helpstring(u'The longitude of center (Lam C) of a projected coordinate system.')], HRESULT, 'LongitudeOfCenter',
              ( ['retval', 'out'], POINTER(c_double), 'LongitudeOfCenter' )),
    COMMETHOD(['propput', helpstring(u'The longitude of center (Lam C) of a projected coordinate system.')], HRESULT, 'LongitudeOfCenter',
              ( [], c_double, 'LongitudeOfCenter' )),
    COMMETHOD(['propget', helpstring(u'The latitude of center (Phi C) of a projected coordinate system.')], HRESULT, 'LatitudeOfCenter',
              ( ['retval', 'out'], POINTER(c_double), 'LatitudeOfCenter' )),
    COMMETHOD(['propput', helpstring(u'The latitude of center (Phi C) of a projected coordinate system.')], HRESULT, 'LatitudeOfCenter',
              ( [], c_double, 'LatitudeOfCenter' )),
    COMMETHOD([helpstring(u'Returns 180 degrees and horizon delta in proper GCS units.')], HRESULT, 'GetGCSParams',
              ( ['out'], POINTER(c_double), 'p_180' ),
              ( ['out'], POINTER(c_double), 'pDelta' )),
    COMMETHOD([helpstring(u'Returns the standard horizon polygon, its envelope, and whether it is inclusive or exclusive; the horizon polygon may be 0.')], HRESULT, 'GetHorizon',
              ( ['out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSEnvelope), 'horizonEnvelope' ),
              ( ['out'], POINTER(VARIANT_BOOL), 'Inclusive' ),
              ( ['retval', 'out'], POINTER(POINTER(IGeometry)), 'ppHorizon' )),
    COMMETHOD([helpstring(u'Returns the horizon polygon, shifted once or twice, west/east of standard horizon for a negative/positive shift.')], HRESULT, 'GetShiftedHorizon',
              ( [], c_int, 'shift' ),
              ( ['retval', 'out'], POINTER(POINTER(IGeometry)), 'ppHorizon' )),
    COMMETHOD(['propget', helpstring(u'The latitude on an oblique spheroid that defines the oblique cone for a Krovak projected coordinate system.')], HRESULT, 'PseudoStandardParallel1',
              ( ['retval', 'out'], POINTER(c_double), 'psp1' )),
    COMMETHOD(['propput', helpstring(u'The latitude on an oblique spheroid that defines the oblique cone for a Krovak projected coordinate system.')], HRESULT, 'PseudoStandardParallel1',
              ( [], c_double, 'psp1' )),
    COMMETHOD(['propget', helpstring(u'The X axis scale value used to flip the axis direction in a Krovak projected coordinate system.')], HRESULT, 'XScaleFactor',
              ( ['retval', 'out'], POINTER(c_double), 'xs' )),
    COMMETHOD(['propput', helpstring(u'The X axis scale value used to flip the axis direction in a Krovak projected coordinate system.')], HRESULT, 'XScaleFactor',
              ( [], c_double, 'xs' )),
    COMMETHOD(['propget', helpstring(u'The Y axis scale value used to flip the axis direction in a Krovak projected coordinate system.')], HRESULT, 'YScaleFactor',
              ( ['retval', 'out'], POINTER(c_double), 'ys' )),
    COMMETHOD(['propput', helpstring(u'The Y axis scale value used to flip the axis direction in a Krovak projected coordinate system.')], HRESULT, 'YScaleFactor',
              ( [], c_double, 'ys' )),
    COMMETHOD(['propget', helpstring(u'The rotation value used to change the axis directions in a Krovak projected coordinate system.')], HRESULT, 'Rotation',
              ( ['retval', 'out'], POINTER(c_double), 'r' )),
    COMMETHOD(['propput', helpstring(u'The rotation value used to change the axis directions in a Krovak projected coordinate system.')], HRESULT, 'Rotation',
              ( [], c_double, 'r' )),
    COMMETHOD([helpstring(u'Projects points from planar to geographic coordinates. Deals with geographic coordinates in ranges other than +-180.')], HRESULT, 'InverseWithShift',
              ( [], c_double, 'shift' ),
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPoint)), 'Points' )),
    COMMETHOD([helpstring(u'Modify linear unit of projected coordinates and angular unit of associated geographic coordinates.')], HRESULT, 'PutLinearAndAngularUnits',
              ( [], POINTER(ILinearUnit), 'LinearUnit' ),
              ( [], POINTER(IAngularUnit), 'AngularUnit' )),
    COMMETHOD(['propget', helpstring(u'The latitude of the origin (Phi 0) of a projected coordinate system.')], HRESULT, 'LatitudeOfOrigin',
              ( ['retval', 'out'], POINTER(c_double), 'LatitudeOfOrigin' )),
    COMMETHOD(['propput', helpstring(u'The latitude of the origin (Phi 0) of a projected coordinate system.')], HRESULT, 'LatitudeOfOrigin',
              ( [], c_double, 'LatitudeOfOrigin' )),
    COMMETHOD([helpstring(u'Compares two projected coordinate systems for equality but ignores their names.')], HRESULT, 'IsEqualNoNames',
              ( [], POINTER(IProjectedCoordinateSystem), 'pOther' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'equalNoNames' )),
    COMMETHOD(['propget', helpstring(u'The height above the sphere in projected coordinate system units.')], HRESULT, 'Height',
              ( ['retval', 'out'], POINTER(c_double), 'Height' )),
    COMMETHOD(['propput', helpstring(u'The height above the sphere in projected coordinate system units.')], HRESULT, 'Height',
              ( [], c_double, 'Height' )),
    COMMETHOD([helpstring(u'Returns PCS horizon polygon, its envelope and whether it is inclusive or exclusive; the horizon polygon may be 0.')], HRESULT, 'GetPCSHorizon',
              ( ['in', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSEnvelope), 'horizonEnvelope' ),
              ( ['in', 'out'], POINTER(VARIANT_BOOL), 'Inclusive' ),
              ( ['retval', 'out'], POINTER(POINTER(IGeometry)), 'Horizon' )),
    COMMETHOD([helpstring(u'Returns CentralLongitude of the projected coordinate system. Always defined, unlike CentralMeridian or LongitudeOfCenter.')], HRESULT, 'GetCentralLongitude',
              ( ['retval', 'out'], POINTER(c_double), 'centralLongitude' )),
    COMMETHOD([helpstring(u'Returns north pole in projected coordinates, or an empty point if north pole is outside the PCS horizon.')], HRESULT, 'GetNorthPole',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPoint), 'pole' )),
    COMMETHOD([helpstring(u'Returns south pole in projected coordinates, or an empty point if south pole is outside the PCS horizon.')], HRESULT, 'GetSouthPole',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPoint), 'pole' )),
    COMMETHOD([helpstring(u'Returns type of location of north pole with respect to PCS horizon.')], HRESULT, 'GetNorthPoleLocation',
              ( ['retval', 'out'], POINTER(esriSRPoleLocation), 'poleLocation' )),
    COMMETHOD([helpstring(u'Returns type of location of south pole with respect to PCS horizon.')], HRESULT, 'GetSouthPoleLocation',
              ( ['retval', 'out'], POINTER(esriSRPoleLocation), 'poleLocation' )),
    COMMETHOD([helpstring(u'Returns type of north pole geometry.')], HRESULT, 'GetNorthPoleGeometry',
              ( ['retval', 'out'], POINTER(esriSRPoleGeometry), 'poleGeometry' )),
    COMMETHOD([helpstring(u'Returns type of south pole geometry.')], HRESULT, 'GetSouthPoleGeometry',
              ( ['retval', 'out'], POINTER(esriSRPoleGeometry), 'poleGeometry' )),
    COMMETHOD([helpstring(u'Returns true if some edges of PCS horizon project inversely to identical lines.')], HRESULT, 'IsHorizonEdgeDuplicated',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'isEdgeDuplicated' )),
    COMMETHOD([helpstring(u'Returns true if PCS horizon is convex.')], HRESULT, 'IsHorizonConvexHull',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'isConvexHull' )),
    COMMETHOD([helpstring(u'Returns true if PCS horizon contains the entire world.')], HRESULT, 'IsHorizonEntireWorld',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'isWorld' )),
]
################################################################
## code template for IProjectedCoordinateSystem4GEN implementation
##class IProjectedCoordinateSystem4GEN_Impl(object):
##    def HasXYPrecision(self):
##        u'Returns true when (x,y) precision information has been defined.'
##        #return HasXYPrecision
##
##    def _get(self):
##        u'The first parallel (Phi 1) of a projected coordinate system.'
##        #return StandardParallel1
##    def _set(self, StandardParallel1):
##        u'The first parallel (Phi 1) of a projected coordinate system.'
##    StandardParallel1 = property(_get, _set, doc = _set.__doc__)
##
##    def Inverse(self):
##        u'Projects points from planar to geographic coordinates.'
##        #return Points
##
##    def IsHorizonConvexHull(self):
##        u'Returns true if PCS horizon is convex.'
##        #return isConvexHull
##
##    @property
##    def PrecisionExImpl(self):
##        u'An opaque reference to the precision information (including z/m awareness) implementation for this spatial reference.'
##        #return PrecisionExImpl
##
##    def GetDomain(self):
##        u'Get the domain extent.'
##        #return XMin, XMax, YMin, YMax
##
##    @property
##    def FactoryCode(self):
##        u'The factory code of the spatial reference.'
##        #return Code
##
##    def SetDomain(self, XMin, XMax, YMin, YMax):
##        u'Set the xy domain extent.'
##        #return 
##
##    @property
##    def CoordinateUnit(self):
##        u'The linear unit of a projected coordinate system.'
##        #return Unit
##
##    def Forward(self):
##        u'Projects points from geographic to planar coordinates.'
##        #return Points
##
##    def HasZPrecision(self):
##        u'Returns true when z-value precision information has been defined.'
##        #return HasZPrecision
##
##    @property
##    def Usage(self):
##        u'The usage notes of a projected coordinate system.'
##        #return Usage
##
##    @property
##    def HorizonCount(self):
##        u'The number of shapes that describe the limits of a ProjCS.'
##        #return HorizonCount
##
##    def _get(self):
##        u'The height above the sphere in projected coordinate system units.'
##        #return Height
##    def _set(self, Height):
##        u'The height above the sphere in projected coordinate system units.'
##    Height = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The central parallel (Phi 0) of a projected coordinate system.'
##        #return CentralParallel
##    def _set(self, CentralParallel):
##        u'The central parallel (Phi 0) of a projected coordinate system.'
##    CentralParallel = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def GeographicCoordinateSystem(self):
##        u'The geographic coordinate system of a projected coordinate system.'
##        #return geographic
##
##    def _get(self):
##        u'The unit for the Z coordinate.'
##        #return zunit
##    def _set(self, zunit):
##        u'The unit for the Z coordinate.'
##    ZCoordinateUnit = property(_get, _set, doc = _set.__doc__)
##
##    def GetSouthPoleLocation(self):
##        u'Returns type of location of south pole with respect to PCS horizon.'
##        #return poleLocation
##
##    def _get(self):
##        u'The X axis scale value used to flip the axis direction in a Krovak projected coordinate system.'
##        #return xs
##    def _set(self, xs):
##        u'The X axis scale value used to flip the axis direction in a Krovak projected coordinate system.'
##    XScaleFactor = property(_get, _set, doc = _set.__doc__)
##
##    def GetNorthPoleGeometry(self):
##        u'Returns type of north pole geometry.'
##        #return poleGeometry
##
##    def GetZDomain(self):
##        u'Get the Z domain extent.'
##        #return outZMin, outZMax
##
##    def InverseWithShift(self, shift):
##        u'Projects points from planar to geographic coordinates. Deals with geographic coordinates in ranges other than +-180.'
##        #return Points
##
##    def _get(self):
##        u'The false easting (X0) of a projected coordinate system.'
##        #return FalseEasting
##    def _set(self, FalseEasting):
##        u'The false easting (X0) of a projected coordinate system.'
##    FalseEasting = property(_get, _set, doc = _set.__doc__)
##
##    def GetNorthPole(self):
##        u'Returns north pole in projected coordinates, or an empty point if north pole is outside the PCS horizon.'
##        #return pole
##
##    def SetZDomain(self, inZMin, inZMax):
##        u'Set the z domain extent.'
##        #return 
##
##    @property
##    def SpatialReferenceImpl(self):
##        u'SpatialReferenceImpl.'
##        #return srImpl
##
##    def _get(self):
##        u'The longitude of the first point (Lambda 1) of a projected coordinate system.'
##        #return LongitudeOf1st
##    def _set(self, LongitudeOf1st):
##        u'The longitude of the first point (Lambda 1) of a projected coordinate system.'
##    LongitudeOf1st = property(_get, _set, doc = _set.__doc__)
##
##    def SetMDomain(self, inMMin, inMMax):
##        u'Set the measure domain extent.'
##        #return 
##
##    def IsPrecisionEqual(self, otherSR):
##        u'Returns TRUE when the precision information for the two spatial references is the same.'
##        #return IsPrecisionEqual
##
##    def GetSouthPole(self):
##        u'Returns south pole in projected coordinates, or an empty point if south pole is outside the PCS horizon.'
##        #return pole
##
##    def GetZFalseOriginAndUnits(self):
##        u'Get the Z false origin and units.'
##        #return falseZ, zUnits
##
##    def GetMDomain(self):
##        u'Get the measure domain extent.'
##        #return outMMin, outMMax
##
##    @property
##    def Remarks(self):
##        u'The comment string of this spatial reference component.'
##        #return Remarks
##
##    def GetFalseOriginAndUnits(self):
##        u'Get the false origin and units.'
##        #return falseX, falseY, xyUnits
##
##    def _get(self):
##        u'The longitude of the second point (Lambda 2) of a projected coordinate system.'
##        #return LongitudeOf2nd
##    def _set(self, LongitudeOf2nd):
##        u'The longitude of the second point (Lambda 2) of a projected coordinate system.'
##    LongitudeOf2nd = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The latitude of the second point (Phi 2) of a projected coordinate system.'
##        #return LatitudeOf2nd
##    def _set(self, LatitudeOf2nd):
##        u'The latitude of the second point (Phi 2) of a projected coordinate system.'
##    LatitudeOf2nd = property(_get, _set, doc = _set.__doc__)
##
##    def GetPCSHorizon(self):
##        u'Returns PCS horizon polygon, its envelope and whether it is inclusive or exclusive; the horizon polygon may be 0.'
##        #return horizonEnvelope, Inclusive, Horizon
##
##    def _get(self):
##        u'The latitude on an oblique spheroid that defines the oblique cone for a Krovak projected coordinate system.'
##        #return psp1
##    def _set(self, psp1):
##        u'The latitude on an oblique spheroid that defines the oblique cone for a Krovak projected coordinate system.'
##    PseudoStandardParallel1 = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The latitude of the first point (Phi 1) of a projected coordinate system.'
##        #return standardLongitude1
##    def _set(self, standardLongitude1):
##        u'The latitude of the first point (Phi 1) of a projected coordinate system.'
##    LatitudeOf1st = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The latitude of the origin (Phi 0) of a projected coordinate system.'
##        #return LatitudeOfOrigin
##    def _set(self, LatitudeOfOrigin):
##        u'The latitude of the origin (Phi 0) of a projected coordinate system.'
##    LatitudeOfOrigin = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def PrecisionImpl(self):
##        u'An opaque reference to the precision information implementation for this spatial reference.'
##        #return PrecisionImpl
##
##    def IsEqualNoNames(self, pOther):
##        u'Compares two projected coordinate systems for equality but ignores their names.'
##        #return equalNoNames
##
##    @property
##    def Name(self):
##        u'The name of this spatial reference component.'
##        #return Name
##
##    def GetCentralLongitude(self):
##        u'Returns CentralLongitude of the projected coordinate system. Always defined, unlike CentralMeridian or LongitudeOfCenter.'
##        #return centralLongitude
##
##    def _get(self):
##        u'The longitude of center (Lam C) of a projected coordinate system.'
##        #return LongitudeOfCenter
##    def _set(self, LongitudeOfCenter):
##        u'The longitude of center (Lam C) of a projected coordinate system.'
##    LongitudeOfCenter = property(_get, _set, doc = _set.__doc__)
##
##    def Changed(self):
##        u'Notify this object that some of its parts have changed (parameter values, z unit, etc.).'
##        #return 
##
##    def GetHorizon(self):
##        u'Returns the standard horizon polygon, its envelope, and whether it is inclusive or exclusive; the horizon polygon may be 0.'
##        #return horizonEnvelope, Inclusive, ppHorizon
##
##    @property
##    def Alias(self):
##        u'The alias of this spatial reference component.'
##        #return Alias
##
##    def GetGCSParams(self):
##        u'Returns 180 degrees and horizon delta in proper GCS units.'
##        #return p_180, pDelta
##
##    @property
##    def Horizon(self, horizonIndex):
##        u'The mathematical limits of a projected coordinate system.'
##        #return Horizon
##
##    def _get(self):
##        u'The azimuth of a projected coordinate system.'
##        #return Azimuth
##    def _set(self, Azimuth):
##        u'The azimuth of a projected coordinate system.'
##    Azimuth = property(_get, _set, doc = _set.__doc__)
##
##    def GetNorthPoleLocation(self):
##        u'Returns type of location of north pole with respect to PCS horizon.'
##        #return poleLocation
##
##    def _get(self):
##        u'The second parallel (Phi 2) of a projected coordinate system.'
##        #return StandardParallel2
##    def _set(self, StandardParallel2):
##        u'The second parallel (Phi 2) of a projected coordinate system.'
##    StandardParallel2 = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The rotation value used to change the axis directions in a Krovak projected coordinate system.'
##        #return r
##    def _set(self, r):
##        u'The rotation value used to change the axis directions in a Krovak projected coordinate system.'
##    Rotation = property(_get, _set, doc = _set.__doc__)
##
##    def IsHorizonEntireWorld(self):
##        u'Returns true if PCS horizon contains the entire world.'
##        #return isWorld
##
##    def GetShiftedHorizon(self, shift):
##        u'Returns the horizon polygon, shifted once or twice, west/east of standard horizon for a negative/positive shift.'
##        #return ppHorizon
##
##    def _get(self):
##        u'The latitude of center (Phi C) of a projected coordinate system.'
##        #return LatitudeOfCenter
##    def _set(self, LatitudeOfCenter):
##        u'The latitude of center (Phi C) of a projected coordinate system.'
##    LatitudeOfCenter = property(_get, _set, doc = _set.__doc__)
##
##    def IsHorizonEdgeDuplicated(self):
##        u'Returns true if some edges of PCS horizon project inversely to identical lines.'
##        #return isEdgeDuplicated
##
##    @property
##    def Projection(self):
##        u'The map projection of a projected coordinate system.'
##        #return Projection
##
##    def SetMFalseOriginAndUnits(self, falseM, mUnits):
##        u'Set the measure false origin and units.'
##        #return 
##
##    def _get(self):
##        u'The false northing (Y0) of a projected coordinate system.'
##        #return FalseNorthing
##    def _set(self, FalseNorthing):
##        u'The false northing (Y0) of a projected coordinate system.'
##    FalseNorthing = property(_get, _set, doc = _set.__doc__)
##
##    def SetFalseOriginAndUnits(self, falseX, falseY, xyUnits):
##        u'Set the false origin and units.'
##        #return 
##
##    def _get(self):
##        u'The Y axis scale value used to flip the axis direction in a Krovak projected coordinate system.'
##        #return ys
##    def _set(self, ys):
##        u'The Y axis scale value used to flip the axis direction in a Krovak projected coordinate system.'
##    YScaleFactor = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Abbreviation(self):
##        u'The abbreviated name of this spatial reference component.'
##        #return Abbreviation
##
##    def PutLinearAndAngularUnits(self, LinearUnit, AngularUnit):
##        u'Modify linear unit of projected coordinates and angular unit of associated geographic coordinates.'
##        #return 
##
##    def SetZFalseOriginAndUnits(self, falseZ, zUnits):
##        u'Set the Z false origin and units.'
##        #return 
##
##    def GetMFalseOriginAndUnits(self):
##        u'Get the measure false origin and units.'
##        #return falseM, mUnits
##
##    def _get(self, inDegrees):
##        u'The central meridian (Lambda0) of a projected coordinate system.'
##        #return CentralMeridian
##    def _set(self, inDegrees, CentralMeridian):
##        u'The central meridian (Lambda0) of a projected coordinate system.'
##    CentralMeridian = property(_get, _set, doc = _set.__doc__)
##
##    def HasMPrecision(self):
##        u'Returns true when m-value precision information has been defined.'
##        #return HasMPrecision
##
##    def GetSouthPoleGeometry(self):
##        u'Returns type of south pole geometry.'
##        #return poleGeometry
##
##    def _get(self):
##        u'The scale factor (K0) of a projected coordinate system.'
##        #return ScaleFactor
##    def _set(self, ScaleFactor):
##        u'The scale factor (K0) of a projected coordinate system.'
##    ScaleFactor = property(_get, _set, doc = _set.__doc__)
##
##    def GetParameters(self):
##        u'Gets the map projection parameters of a projected coordinate system. The array size needs to be esriSR_MaxParameterCountPrivate.'
##        #return parameters
##
##    def _get(self):
##        u'The longitude of origin (Lambda0) of a projected coordinate system.'
##        #return LongitudeOfOrigin
##    def _set(self, LongitudeOfOrigin):
##        u'The longitude of origin (Lambda0) of a projected coordinate system.'
##    LongitudeOfOrigin = property(_get, _set, doc = _set.__doc__)
##

class INetworkShape(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    _iid_ = GUID('{7324E79C-E452-4797-AB8F-B4D0C4181F0A}')
    _idlflags_ = ['oleautomation']
INetworkShape._methods_ = [
    COMMETHOD([helpstring(u'Populates an array of VertexInfo structures.')], HRESULT, 'ExportToNetworkShape',
              ( [], POINTER(esriGeometryNetworkVertexInfo), 'aVertices' )),
]
################################################################
## code template for INetworkShape implementation
##class INetworkShape_Impl(object):
##    def ExportToNetworkShape(self, aVertices):
##        u'Populates an array of VertexInfo structures.'
##        #return 
##

class SpatialReferenceEnvironment(CoClass):
    u'Creates various spatial reference objects.'
    _reg_clsid_ = GUID('{7B5B7020-C4F6-11D1-BC92-0000F875BCCE}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
class ISpatialReferenceSingletonManager(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Ensure that no duplicates of projection engine pcs or gcs objects are created.'
    _iid_ = GUID('{58AB2690-5981-11D2-BCDA-0000F875BCCE}')
    _idlflags_ = ['oleautomation', 'restricted']
class IClassFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    _iid_ = GUID('{00000001-0000-0000-C000-000000000046}')
    _idlflags_ = []
SpatialReferenceEnvironment._com_interfaces_ = [ISpatialReferenceFactory, ISpatialReferenceFactory2, ISpatialReferenceFactory3, ISpatialReferenceFactory4, ISpatialReferenceFactory5, ISpatialReferenceSingletonManager, IClassFactory, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]

IESRISpatialReferenceGEN2._methods_ = [
    COMMETHOD(['propget', helpstring(u'The number of bytes required to hold the persistant representation of this spatial reference component.')], HRESULT, 'ESRISpatialReferenceSize',
              ( ['retval', 'out'], POINTER(c_int), 'cBytes' )),
    COMMETHOD([helpstring(u'Defines this spatial reference component from the specified ESRISpatialReference buffer.')], HRESULT, 'ImportFromESRISpatialReference',
              ( [], BSTR, 'str' ),
              ( ['out'], POINTER(c_int), 'cBytesRead' )),
    COMMETHOD([helpstring(u'Exports this spatial reference component to a buffer.')], HRESULT, 'ExportToESRISpatialReference2',
              ( ['out'], POINTER(BSTR), 'str' ),
              ( ['out'], POINTER(c_int), 'cBytesWrote' )),
]
################################################################
## code template for IESRISpatialReferenceGEN2 implementation
##class IESRISpatialReferenceGEN2_Impl(object):
##    def ImportFromESRISpatialReference(self, str):
##        u'Defines this spatial reference component from the specified ESRISpatialReference buffer.'
##        #return cBytesRead
##
##    def ExportToESRISpatialReference2(self):
##        u'Exports this spatial reference component to a buffer.'
##        #return str, cBytesWrote
##
##    @property
##    def ESRISpatialReferenceSize(self):
##        u'The number of bytes required to hold the persistant representation of this spatial reference component.'
##        #return cBytes
##

class GeometryServerImpl(CoClass):
    u"Provides access to standard operations on geometric 'value' objects. The input geometries are never modified by these operations. Designed for use in building web services or other kinds of distributed applications."
    _reg_clsid_ = GUID('{0C38B104-A3A8-4BDE-858F-4231430F2101}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
GeometryServerImpl._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IObjectConstruct, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IRequestHandler, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IRequestHandler2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IObjectActivate, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILogSupport, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, IGeometryServer, IGeometryServer2, IGeometryServer3]

class IESRIShape2(IESRIShape):
    _case_insensitive_ = True
    u'Provides access to methods for non-byte swapping and angular densification export in addition to those in IESRIShape.'
    _iid_ = GUID('{C90EE28C-01AF-11D4-9F6C-00C04F6BDD7F}')
    _idlflags_ = []
IESRIShape2._methods_ = [
    COMMETHOD(['propget', helpstring(u'The size of the buffer (in bytes) that will be required to hold the Esri shapefile version of the geometry. The value may exceed the minimum required size. exportFlags is a combination of esriShapeExportFlags values.')], HRESULT, 'ESRIShapeSizeEx2',
              ( [], c_int, 'exportFlags' ),
              ( ['retval', 'out'], POINTER(c_int), 'cBytes' )),
    COMMETHOD([helpstring(u'Writes an Esri shapefile formatted version of this geometry to the specified buffer. Returns the exact number of bytes written to the buffer. exportFlags is a combination of esriShapeExportFlags values.')], HRESULT, 'ExportToESRIShapeEx2',
              ( [], c_int, 'exportFlags' ),
              ( ['in', 'out'], POINTER(c_int), 'byteCountInOut' ),
              ( ['out'], POINTER(c_ubyte), 'byteBuffer' )),
    COMMETHOD([helpstring(u'Defines this geometry based upon the contents of the input Esri shapefile formatted buffer. Returns the exact number of bytes read from the buffer. importFlags is a combination of esriShapeImportFlags values.')], HRESULT, 'ImportFromESRIShapeEx',
              ( [], c_int, 'importFlags' ),
              ( ['in', 'out'], POINTER(c_int), 'byteCountInOut' ),
              ( ['in'], POINTER(c_ubyte), 'byteBuffer' )),
]
################################################################
## code template for IESRIShape2 implementation
##class IESRIShape2_Impl(object):
##    def ExportToESRIShapeEx2(self, exportFlags):
##        u'Writes an Esri shapefile formatted version of this geometry to the specified buffer. Returns the exact number of bytes written to the buffer. exportFlags is a combination of esriShapeExportFlags values.'
##        #return byteCountInOut, byteBuffer
##
##    @property
##    def ESRIShapeSizeEx2(self, exportFlags):
##        u'The size of the buffer (in bytes) that will be required to hold the Esri shapefile version of the geometry. The value may exceed the minimum required size. exportFlags is a combination of esriShapeExportFlags values.'
##        #return cBytes
##
##    def ImportFromESRIShapeEx(self, importFlags, byteBuffer):
##        u'Defines this geometry based upon the contents of the input Esri shapefile formatted buffer. Returns the exact number of bytes read from the buffer. importFlags is a combination of esriShapeImportFlags values.'
##        #return byteCountInOut
##

class IExtrude2(IExtrude):
    _case_insensitive_ = True
    u'Provides access to members that can be used to take a geometry and connect it to a translated version of itself to generate a higher-dimensional geometry.'
    _iid_ = GUID('{177B5661-E873-47AC-AA42-2457FF6968F3}')
    _idlflags_ = ['oleautomation']
IExtrude2._methods_ = [
    COMMETHOD(['propput', helpstring(u'Indicates whether to generate bottom (from) face when extruding polygons.')], HRESULT, 'GenerateNoBottoms',
              ( [], VARIANT_BOOL, 'extrudeWithoutBottoms' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to generate bottom (from) face when extruding polygons.')], HRESULT, 'GenerateNoBottoms',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'extrudeWithoutBottoms' )),
]
################################################################
## code template for IExtrude2 implementation
##class IExtrude2_Impl(object):
##    def _get(self):
##        u'Indicates whether to generate bottom (from) face when extruding polygons.'
##        #return extrudeWithoutBottoms
##    def _set(self, extrudeWithoutBottoms):
##        u'Indicates whether to generate bottom (from) face when extruding polygons.'
##    GenerateNoBottoms = property(_get, _set, doc = _set.__doc__)
##

IProjectiveTransformation2D._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The spatial reference in which this transformation is meaningful.')], HRESULT, 'SpatialReference',
              ( [], POINTER(ISpatialReference), 'SR' )),
    COMMETHOD(['propget', helpstring(u'The spatial reference in which this transformation is meaningful.')], HRESULT, 'SpatialReference',
              ( ['retval', 'out'], POINTER(POINTER(ISpatialReference)), 'SR' )),
    COMMETHOD([helpstring(u'Resets the tranformation.')], HRESULT, 'Reset'),
    COMMETHOD(['restricted', helpstring(u'Defines the best projective transformation between two sets of points. Can be used to register paper maps on a digitizer.')], HRESULT, 'DefineFromControlPointsEx',
              ( [], c_int, 'numPoints' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPoint), 'fromPoints' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPoint), 'toPoints' )),
    COMMETHOD([helpstring(u'Defines the best projective transformation between two sets of points. Can be used to register paper maps on a digitizer.')], HRESULT, 'DefineFromControlPoints',
              ( [], c_int, 'numPoints' ),
              ( ['in'], POINTER(POINTER(IPoint)), 'fromPoints' ),
              ( ['in'], POINTER(POINTER(IPoint)), 'toPoints' )),
    COMMETHOD([helpstring(u"RMS (Root Mean Square) error expressed relative to the 'from' and 'to' points defining the transformation. These error terms are valid after using DefineFromControlPoints/Ex to define the transformation.")], HRESULT, 'GetRMSError',
              ( ['out'], POINTER(c_double), 'fromError' ),
              ( ['out'], POINTER(c_double), 'toError' )),
    COMMETHOD([helpstring(u"Returns the errors involved in moving control point i from the 'from' to 'to' system. These error terms are valid after using DefineFromControlPoints/Ex to define the transformation.")], HRESULT, 'GetControlPointError',
              ( [], c_int, 'i' ),
              ( ['out'], POINTER(c_double), 'fromError' ),
              ( ['out'], POINTER(c_double), 'toError' )),
    COMMETHOD([helpstring(u'Moves this transformation into another spatial reference. If the transformations contains only translations, then use the MoveOrigin property to define an equivalent translation in the new spatial reference.')], HRESULT, 'Project',
              ( [], POINTER(ISpatialReference), 'newSpatialReference' )),
    COMMETHOD([helpstring(u'Returns the eight parameters which define the two dimensional projective transformation.')], HRESULT, 'QueryTransformationParameters',
              ( [], esriTransformDirection, 'direction' ),
              ( [], POINTER(c_double), 'params' )),
    COMMETHOD([helpstring(u'Sets the eight parameters which define the two dimensional projective transformation.')], HRESULT, 'SetTransformationParameters',
              ( [], esriTransformDirection, 'direction' ),
              ( [], POINTER(c_double), 'params' )),
]
################################################################
## code template for IProjectiveTransformation2D implementation
##class IProjectiveTransformation2D_Impl(object):
##    def Reset(self):
##        u'Resets the tranformation.'
##        #return 
##
##    def DefineFromControlPointsEx(self, numPoints, fromPoints, toPoints):
##        u'Defines the best projective transformation between two sets of points. Can be used to register paper maps on a digitizer.'
##        #return 
##
##    def GetControlPointError(self, i):
##        u"Returns the errors involved in moving control point i from the 'from' to 'to' system. These error terms are valid after using DefineFromControlPoints/Ex to define the transformation."
##        #return fromError, toError
##
##    @property
##    def SpatialReference(self, SR):
##        u'The spatial reference in which this transformation is meaningful.'
##        #return 
##
##    def Project(self, newSpatialReference):
##        u'Moves this transformation into another spatial reference. If the transformations contains only translations, then use the MoveOrigin property to define an equivalent translation in the new spatial reference.'
##        #return 
##
##    def SetTransformationParameters(self, direction, params):
##        u'Sets the eight parameters which define the two dimensional projective transformation.'
##        #return 
##
##    def QueryTransformationParameters(self, direction, params):
##        u'Returns the eight parameters which define the two dimensional projective transformation.'
##        #return 
##
##    def GetRMSError(self):
##        u"RMS (Root Mean Square) error expressed relative to the 'from' and 'to' points defining the transformation. These error terms are valid after using DefineFromControlPoints/Ex to define the transformation."
##        #return fromError, toError
##
##    def DefineFromControlPoints(self, numPoints, fromPoints, toPoints):
##        u'Defines the best projective transformation between two sets of points. Can be used to register paper maps on a digitizer.'
##        #return 
##

IPRJSpatialReference._methods_ = [
    COMMETHOD(['propget', helpstring(u'The number of bytes required to hold the persistant representation of the spatial reference.')], HRESULT, 'PRJSpatialReferenceSize',
              ( ['retval', 'out'], POINTER(c_int), 'cBytes' )),
    COMMETHOD([helpstring(u'Defines the spatial reference from the specified ESRISpatialReference buffer.')], HRESULT, 'ImportSpatialReferenceFromPRJ',
              ( [], BSTR, 'str' ),
              ( ['out'], POINTER(c_int), 'cBytesRead' )),
    COMMETHOD([helpstring(u'Exports the spatial reference to a buffer.')], HRESULT, 'ExportSpatialReferenceToPRJ',
              ( ['in', 'out'], BSTR, 'str' ),
              ( ['out'], POINTER(c_int), 'cBytesWrote' )),
]
################################################################
## code template for IPRJSpatialReference implementation
##class IPRJSpatialReference_Impl(object):
##    def ImportSpatialReferenceFromPRJ(self, str):
##        u'Defines the spatial reference from the specified ESRISpatialReference buffer.'
##        #return cBytesRead
##
##    def ExportSpatialReferenceToPRJ(self):
##        u'Exports the spatial reference to a buffer.'
##        #return str, cBytesWrote
##
##    @property
##    def PRJSpatialReferenceSize(self):
##        u'The number of bytes required to hold the persistant representation of the spatial reference.'
##        #return cBytes
##

class IVerticalCoordinateSystemGEN(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to properties of a vertical coordinate system.'
    _iid_ = GUID('{D9F23920-EE88-4B14-AA07-A526AA1DFC03}')
    _idlflags_ = ['oleautomation']
IVerticalCoordinateSystemGEN._methods_ = [
    COMMETHOD(['propget', helpstring(u'The usage notes of a vertical coordinate system.')], HRESULT, 'Usage',
              ( ['retval', 'out'], POINTER(BSTR), 'Usage' )),
    COMMETHOD(['propget', helpstring(u'The vertical or horizontal datum of the vertical coordinate system.')], HRESULT, 'Datum',
              ( ['retval', 'out'], POINTER(POINTER(IHVDatum)), 'hvDatum' )),
    COMMETHOD(['propget', helpstring(u'The linear unit of measure for the vertical coordinate system.')], HRESULT, 'CoordinateUnit',
              ( ['retval', 'out'], POINTER(POINTER(ILinearUnit)), 'Unit' )),
    COMMETHOD(['propput', helpstring(u'The linear unit of measure for the vertical coordinate system.')], HRESULT, 'CoordinateUnit',
              ( [], POINTER(ILinearUnit), 'Unit' )),
    COMMETHOD(['propget', helpstring(u'An offset parameter that changes the origin of the vertical coordinate system.')], HRESULT, 'VerticalShift',
              ( ['retval', 'out'], POINTER(c_double), 'vshift' )),
    COMMETHOD(['propput', helpstring(u'An offset parameter that changes the origin of the vertical coordinate system.')], HRESULT, 'VerticalShift',
              ( [], c_double, 'vshift' )),
    COMMETHOD(['propget', helpstring(u"A parameter that determines whether the coordinate system is positive 'up' or 'down'. Use -1 for depths (positive down).")], HRESULT, 'PositiveDirection',
              ( ['retval', 'out'], POINTER(c_int), 'pd' )),
    COMMETHOD([helpstring(u'Retrieves the PositiveDirection and VerticalShift parameters into an array.')], HRESULT, 'GetParameters',
              ( ['in', 'out'], POINTER(_midlSAFEARRAY(POINTER(IParameter))), 'parameters' )),
]
################################################################
## code template for IVerticalCoordinateSystemGEN implementation
##class IVerticalCoordinateSystemGEN_Impl(object):
##    @property
##    def PositiveDirection(self):
##        u"A parameter that determines whether the coordinate system is positive 'up' or 'down'. Use -1 for depths (positive down)."
##        #return pd
##
##    def _get(self):
##        u'An offset parameter that changes the origin of the vertical coordinate system.'
##        #return vshift
##    def _set(self, vshift):
##        u'An offset parameter that changes the origin of the vertical coordinate system.'
##    VerticalShift = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Datum(self):
##        u'The vertical or horizontal datum of the vertical coordinate system.'
##        #return hvDatum
##
##    def _get(self):
##        u'The linear unit of measure for the vertical coordinate system.'
##        #return Unit
##    def _set(self, Unit):
##        u'The linear unit of measure for the vertical coordinate system.'
##    CoordinateUnit = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Usage(self):
##        u'The usage notes of a vertical coordinate system.'
##        #return Usage
##
##    def GetParameters(self):
##        u'Retrieves the PositiveDirection and VerticalShift parameters into an array.'
##        #return parameters
##

IProjectedCoordinateSystem5._methods_ = [
    COMMETHOD([helpstring(u'Returns true if central meridian is a straight vertical line.')], HRESULT, 'IsCentralLongitudeVertical',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbIsVertical' )),
    COMMETHOD(['propget', helpstring(u'Returns the grid convergence angle .')], HRESULT, 'ConvergenceAngle',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPoint, 'pt' ),
              ( ['in'], VARIANT_BOOL, 'trueToGridNorth' ),
              ( ['retval', 'out'], POINTER(c_double), 'Angle' )),
]
################################################################
## code template for IProjectedCoordinateSystem5 implementation
##class IProjectedCoordinateSystem5_Impl(object):
##    def IsCentralLongitudeVertical(self):
##        u'Returns true if central meridian is a straight vertical line.'
##        #return pbIsVertical
##
##    @property
##    def ConvergenceAngle(self, pt, trueToGridNorth):
##        u'Returns the grid convergence angle .'
##        #return Angle
##

IGeometry5._methods_ = [
    COMMETHOD([helpstring(u'Same as Project, but with additional parameter projectionHint.')], HRESULT, 'Project5',
              ( [], POINTER(ISpatialReference), 'newSpatialReference' ),
              ( [], c_int, 'ProjectionHint' )),
    COMMETHOD([helpstring(u'Same as ProjectEx, but with additional parameter projectionHint.')], HRESULT, 'ProjectEx5',
              ( [], POINTER(ISpatialReference), 'newReferenceSystem' ),
              ( [], esriTransformDirection, 'direction' ),
              ( [], POINTER(ITransformation), 'transformation' ),
              ( [], VARIANT_BOOL, 'bAngularDensify' ),
              ( [], c_double, 'maxSegmentLength' ),
              ( [], c_double, 'maxDeviation' ),
              ( [], c_int, 'ProjectionHint' )),
    COMMETHOD(['propget', helpstring(u'The center of gravity (centroid).')], HRESULT, 'CentroidEx',
              ( ['retval', 'out'], POINTER(POINTER(IPoint)), 'Center' )),
]
################################################################
## code template for IGeometry5 implementation
##class IGeometry5_Impl(object):
##    def Project5(self, newSpatialReference, ProjectionHint):
##        u'Same as Project, but with additional parameter projectionHint.'
##        #return 
##
##    @property
##    def CentroidEx(self):
##        u'The center of gravity (centroid).'
##        #return Center
##
##    def ProjectEx5(self, newReferenceSystem, direction, transformation, bAngularDensify, maxSegmentLength, maxDeviation, ProjectionHint):
##        u'Same as ProjectEx, but with additional parameter projectionHint.'
##        #return 
##

IPRJSpatialReferenceGEN._methods_ = [
    COMMETHOD(['propget', helpstring(u'The number of bytes required to hold the persistant representation of the spatial reference.')], HRESULT, 'PRJSpatialReferenceSize',
              ( ['retval', 'out'], POINTER(c_int), 'cBytes' )),
    COMMETHOD([helpstring(u'Defines the spatial reference from the specified ESRISpatialReference buffer.')], HRESULT, 'ImportSpatialReferenceFromPRJ',
              ( [], BSTR, 'str' ),
              ( ['out'], POINTER(c_int), 'cBytesRead' )),
    COMMETHOD([helpstring(u'Exports the spatial reference to a buffer.')], HRESULT, 'ExportSpatialReferenceToPRJ',
              ( ['out'], POINTER(BSTR), 'str' ),
              ( ['out'], POINTER(c_int), 'cBytesWrote' )),
]
################################################################
## code template for IPRJSpatialReferenceGEN implementation
##class IPRJSpatialReferenceGEN_Impl(object):
##    def ImportSpatialReferenceFromPRJ(self, str):
##        u'Defines the spatial reference from the specified ESRISpatialReference buffer.'
##        #return cBytesRead
##
##    def ExportSpatialReferenceToPRJ(self):
##        u'Exports the spatial reference to a buffer.'
##        #return str, cBytesWrote
##
##    @property
##    def PRJSpatialReferenceSize(self):
##        u'The number of bytes required to hold the persistant representation of the spatial reference.'
##        #return cBytes
##

class PointArray(CoClass):
    _reg_clsid_ = GUID('{D111F9D0-6C3A-4F9C-A378-D227483BEC1F}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
PointArray._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, IPointArray]

ISRPersistStream._methods_ = [
    COMMETHOD([helpstring(u'Returns the number of bytes needed to store the false x, false y and xy units of this spatial reference.')], HRESULT, 'GetPrecisionSizeMax',
              ( ['out'], POINTER(c_int), 'byteCount' )),
    COMMETHOD([helpstring(u"Initializes this spatial reference's false x, false y and xy units from information in the specified stream.")], HRESULT, 'LoadPrecision',
              ( [], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStream), 'pStream' )),
    COMMETHOD([helpstring(u"Saves this spatial reference's false x, false y and xy units to the specified stream.")], HRESULT, 'SavePrecision',
              ( [], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IStream), 'pStream' ),
              ( [], c_int, 'fClearDirty' )),
]
################################################################
## code template for ISRPersistStream implementation
##class ISRPersistStream_Impl(object):
##    def SavePrecision(self, pStream, fClearDirty):
##        u"Saves this spatial reference's false x, false y and xy units to the specified stream."
##        #return 
##
##    def GetPrecisionSizeMax(self):
##        u'Returns the number of bytes needed to store the false x, false y and xy units of this spatial reference.'
##        #return byteCount
##
##    def LoadPrecision(self, pStream):
##        u"Initializes this spatial reference's false x, false y and xy units from information in the specified stream."
##        #return 
##

IProjectedCoordinateSystemEdit._methods_ = [
    COMMETHOD(['restricted', helpstring(u'Defines the properties of a projected coordinate system.')], HRESULT, 'DefineEx',
              ( [], BSTR, 'Name' ),
              ( [], BSTR, 'Alias' ),
              ( [], BSTR, 'Abbreviation' ),
              ( [], BSTR, 'Remarks' ),
              ( [], BSTR, 'useage' ),
              ( [], POINTER(IGeographicCoordinateSystem), 'gcs' ),
              ( [], POINTER(ILinearUnit), 'projectedXYUnit' ),
              ( [], POINTER(IProjection), 'Projection' ),
              ( [], POINTER(POINTER(IParameter)), 'parameters' )),
    COMMETHOD([helpstring(u'Defines the properties of a projected coordinate system.')], HRESULT, 'Define',
              ( ['optional'], POINTER(VARIANT), 'Name' ),
              ( ['optional'], POINTER(VARIANT), 'Alias' ),
              ( ['optional'], POINTER(VARIANT), 'Abbreviation' ),
              ( ['optional'], POINTER(VARIANT), 'Remarks' ),
              ( ['optional'], POINTER(VARIANT), 'useage' ),
              ( ['optional'], POINTER(VARIANT), 'gcs' ),
              ( ['optional'], POINTER(VARIANT), 'projectedUnit' ),
              ( ['optional'], POINTER(VARIANT), 'Projection' ),
              ( ['optional'], POINTER(VARIANT), 'parameters' )),
]
################################################################
## code template for IProjectedCoordinateSystemEdit implementation
##class IProjectedCoordinateSystemEdit_Impl(object):
##    def DefineEx(self, Name, Alias, Abbreviation, Remarks, useage, gcs, projectedXYUnit, Projection, parameters):
##        u'Defines the properties of a projected coordinate system.'
##        #return 
##
##    def Define(self, Name, Alias, Abbreviation, Remarks, useage, gcs, projectedUnit, Projection, parameters):
##        u'Defines the properties of a projected coordinate system.'
##        #return 
##

class VerticalCoordinateSystem(CoClass):
    u'Creates a vertical coordinate system.'
    _reg_clsid_ = GUID('{6D7EF7C6-40DB-48FB-B5BB-BADFDCA5A2D8}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
class IVerticalCoordinateSystemEdit(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the properties of a vertical coordinate system.'
    _iid_ = GUID('{CD01A024-C9CF-46C8-8FC9-ACEC374C1C4C}')
    _idlflags_ = []
VerticalCoordinateSystem._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IVerticalCoordinateSystemGEN, IVerticalCoordinateSystem, IESRISpatialReferenceGEN, IESRISpatialReferenceGEN2, IVerticalCoordinateSystemEdit, ISpatialReferenceInfo, IESRISpatialReference, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, ISpatialReferenceAuthority]

IEnumSegment._methods_ = [
    COMMETHOD([helpstring(u'Populates a segment info structure with information on the next segment in the collection.')], HRESULT, 'NextEx',
              ( ['out'], POINTER(esriSegmentInfo), 'outSegment' )),
    COMMETHOD([helpstring(u'Returns the next segment, and its location in the collection. If the location does not have parts (i.e. a path or ring) then the part index will always be zero.')], HRESULT, 'Next',
              ( ['out'], POINTER(POINTER(ISegment)), 'outSegment' ),
              ( ['in', 'out'], POINTER(c_int), 'outPartIndex' ),
              ( ['in', 'out'], POINTER(c_int), 'SegmentIndex' )),
    COMMETHOD([helpstring(u'Skips forward or backward over a specified number of segments.')], HRESULT, 'Skip',
              ( [], c_int, 'numSegments' )),
    COMMETHOD([helpstring(u'Starts from the beginning of the segment collection the next time Next is called.')], HRESULT, 'Reset'),
    COMMETHOD([helpstring(u'Returns a copy of this enumerator positioned at the same segment.')], HRESULT, 'Clone',
              ( ['out'], POINTER(POINTER(IEnumSegment)), 'outEnumerator' )),
    COMMETHOD([helpstring(u'Starts from the end of the path, ring, polyline or polygon the next time Previous is called.')], HRESULT, 'ResetToEnd'),
    COMMETHOD([helpstring(u'Returns the previous segment in this segment collection.')], HRESULT, 'Previous',
              ( ['out'], POINTER(POINTER(ISegment)), 'outSegment' ),
              ( ['in', 'out'], POINTER(c_int), 'outPartIndex' ),
              ( ['in', 'out'], POINTER(c_int), 'SegmentIndex' )),
    COMMETHOD([helpstring(u'Resets enumerator to specific location.')], HRESULT, 'SetAt',
              ( [], c_int, 'iPart' ),
              ( [], c_int, 'ISegment' )),
    COMMETHOD([helpstring(u'Returns the next segment info structure in current part, goes back to first segment after last segment in part is encountered.')], HRESULT, 'NextInPartEx',
              ( ['out'], POINTER(esriSegmentInfo), 'outSegment' )),
    COMMETHOD([helpstring(u'Returns the next segment in current part, goes back to first segment after last segment in part is encountered.')], HRESULT, 'NextInPart',
              ( ['out'], POINTER(POINTER(ISegment)), 'outSegment' ),
              ( ['in', 'out'], POINTER(c_int), 'OutSegmentIndex' )),
    COMMETHOD([helpstring(u'Indicates if the current segment is last in the current part.')], HRESULT, 'IsLastInPart',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsLastInPart' )),
    COMMETHOD(['propget', helpstring(u'Indicates if this enumerator re-uses the same segment each time next is called.')], HRESULT, 'IsRecycling',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsRecycling' )),
]
################################################################
## code template for IEnumSegment implementation
##class IEnumSegment_Impl(object):
##    def Reset(self):
##        u'Starts from the beginning of the segment collection the next time Next is called.'
##        #return 
##
##    def IsLastInPart(self):
##        u'Indicates if the current segment is last in the current part.'
##        #return IsLastInPart
##
##    def Skip(self, numSegments):
##        u'Skips forward or backward over a specified number of segments.'
##        #return 
##
##    def Clone(self):
##        u'Returns a copy of this enumerator positioned at the same segment.'
##        #return outEnumerator
##
##    def SetAt(self, iPart, ISegment):
##        u'Resets enumerator to specific location.'
##        #return 
##
##    def Next(self):
##        u'Returns the next segment, and its location in the collection. If the location does not have parts (i.e. a path or ring) then the part index will always be zero.'
##        #return outSegment, outPartIndex, SegmentIndex
##
##    @property
##    def IsRecycling(self):
##        u'Indicates if this enumerator re-uses the same segment each time next is called.'
##        #return IsRecycling
##
##    def NextEx(self):
##        u'Populates a segment info structure with information on the next segment in the collection.'
##        #return outSegment
##
##    def NextInPartEx(self):
##        u'Returns the next segment info structure in current part, goes back to first segment after last segment in part is encountered.'
##        #return outSegment
##
##    def ResetToEnd(self):
##        u'Starts from the end of the path, ring, polyline or polygon the next time Previous is called.'
##        #return 
##
##    def NextInPart(self):
##        u'Returns the next segment in current part, goes back to first segment after last segment in part is encountered.'
##        #return outSegment, OutSegmentIndex
##
##    def Previous(self):
##        u'Returns the previous segment in this segment collection.'
##        #return outSegment, outPartIndex, SegmentIndex
##

ISpatialReferenceSingletonManager._methods_ = [
    COMMETHOD(['hidden', helpstring(u'Replaces ppInOutCoordSys with an exact, deep copy.')], HRESULT, 'CreateOwnedCS',
              ( ['in', 'out'], POINTER(esriSpatialReferenceImplHandle), 'ppInOutCoordSys' )),
    COMMETHOD([helpstring(u'Ensures that no copy of pCS exists in the system.')], HRESULT, 'CommitIdentity',
              ( ['in', 'out'], POINTER(esriSpatialReferenceImplHandle), 'ppInOutCoordSys' )),
    COMMETHOD(['hidden', helpstring(u'Finds or manufactures a pre-defined coordinate system.')], HRESULT, 'FindFactoryCS',
              ( ['in'], c_int, 'factoryCSCode' ),
              ( ['out'], POINTER(esriSpatialReferenceImplHandle), 'ppOutCoordSys' )),
    COMMETHOD(['hidden', helpstring(u'Decrements the ref count of the extended coord sys and possibly removes it.')], HRESULT, 'ReleaseCoordSys',
              ( ['in'], esriSpatialReferenceImplHandle, 'pInCoordSys' )),
]
################################################################
## code template for ISpatialReferenceSingletonManager implementation
##class ISpatialReferenceSingletonManager_Impl(object):
##    def FindFactoryCS(self, factoryCSCode):
##        u'Finds or manufactures a pre-defined coordinate system.'
##        #return ppOutCoordSys
##
##    def CreateOwnedCS(self):
##        u'Replaces ppInOutCoordSys with an exact, deep copy.'
##        #return ppInOutCoordSys
##
##    def ReleaseCoordSys(self, pInCoordSys):
##        u'Decrements the ref count of the extended coord sys and possibly removes it.'
##        #return 
##
##    def CommitIdentity(self):
##        u'Ensures that no copy of pCS exists in the system.'
##        #return ppInOutCoordSys
##

class RelationResultArray(CoClass):
    _reg_clsid_ = GUID('{59505FFC-6516-472D-BF32-861EC5F37B04}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
RelationResultArray._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, IRelationResultArray]

class IPolyline6(IPolyline5):
    _case_insensitive_ = True
    u'Provides access to members that extend a polyline object.'
    _iid_ = GUID('{DA17CA7A-4C0E-410A-BE7D-8E0E274475A2}')
    _idlflags_ = ['oleautomation']
IPolyline6._methods_ = [
    COMMETHOD([helpstring(u'Removes zero length segments (zero in 2 dimensions), reorients segments that are pointing against the prevailing orientation for a part.')], HRESULT, 'SimplifyNonPlanar'),
    COMMETHOD(['propget', helpstring(u'Returns false if zero length segments are detected (zero in 2 dimensions), parts at endpoints need to be merged, or need to reorient segments that are pointing against the prevailing orientation for a part.')], HRESULT, 'IsSimpleNonPlanar',
              ( ['out'], POINTER(esriNonSimpleReasonEnum), 'pReason' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbIsSimpleNonPlanar' )),
]
################################################################
## code template for IPolyline6 implementation
##class IPolyline6_Impl(object):
##    @property
##    def IsSimpleNonPlanar(self):
##        u'Returns false if zero length segments are detected (zero in 2 dimensions), parts at endpoints need to be merged, or need to reorient segments that are pointing against the prevailing orientation for a part.'
##        #return pReason, pbIsSimpleNonPlanar
##
##    def SimplifyNonPlanar(self):
##        u'Removes zero length segments (zero in 2 dimensions), reorients segments that are pointing against the prevailing orientation for a part.'
##        #return 
##

class PolygonArray(CoClass):
    u'A collection of Polygon objects.'
    _reg_clsid_ = GUID('{A04DDF71-54E6-4232-937C-E22C6F75939A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
PolygonArray._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IPolygonArray, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

IProximityOperator._methods_ = [
    COMMETHOD([helpstring(u"Copies into 'nearest' a point on this geometry nearest to the input point.")], HRESULT, 'QueryNearestPoint',
              ( [], POINTER(IPoint), 'p' ),
              ( [], esriSegmentExtension, 'extension' ),
              ( [], POINTER(IPoint), 'nearest' )),
    COMMETHOD([helpstring(u'Creates and returns a point on this geometry nearest to the input point.')], HRESULT, 'ReturnNearestPoint',
              ( [], POINTER(IPoint), 'p' ),
              ( [], esriSegmentExtension, 'extension' ),
              ( ['retval', 'out'], POINTER(POINTER(IPoint)), 'nearest' )),
    COMMETHOD([helpstring(u'Returns the minimum distance between two geometries.')], HRESULT, 'ReturnDistance',
              ( [], POINTER(IGeometry), 'other' ),
              ( ['retval', 'out'], POINTER(c_double), 'distance' )),
]
################################################################
## code template for IProximityOperator implementation
##class IProximityOperator_Impl(object):
##    def ReturnNearestPoint(self, p, extension):
##        u'Creates and returns a point on this geometry nearest to the input point.'
##        #return nearest
##
##    def QueryNearestPoint(self, p, extension, nearest):
##        u"Copies into 'nearest' a point on this geometry nearest to the input point."
##        #return 
##
##    def ReturnDistance(self, other):
##        u'Returns the minimum distance between two geometries.'
##        #return distance
##

class GeometryArray(CoClass):
    _reg_clsid_ = GUID('{664ABF52-70E1-469F-AAD3-5A7C2505528E}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
GeometryArray._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, IGeometryArray]

class PolylineArray(CoClass):
    u'A collection of Polyline objects.'
    _reg_clsid_ = GUID('{31D19FD8-1836-464C-9CBE-1B9108DF70D2}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
PolylineArray._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IPolylineArray, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLSerialize, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IXMLVersionSupport]

IVerticalCoordinateSystemEdit._methods_ = [
    COMMETHOD(['restricted', helpstring(u'Defines the properties of a vertical coordinate system.')], HRESULT, 'DefineEx',
              ( [], BSTR, 'Name' ),
              ( [], BSTR, 'Alias' ),
              ( [], BSTR, 'Abbreviation' ),
              ( [], BSTR, 'Remarks' ),
              ( [], BSTR, 'useage' ),
              ( [], POINTER(IHVDatum), 'pDatum' ),
              ( [], POINTER(ILinearUnit), 'projectedXYUnit' ),
              ( [], POINTER(c_double), 'VerticalShift' ),
              ( [], POINTER(c_int), 'PositiveDirection' )),
    COMMETHOD([helpstring(u'Defines the properties of a vertical coordinate system.')], HRESULT, 'Define',
              ( ['optional'], POINTER(VARIANT), 'Name' ),
              ( ['optional'], POINTER(VARIANT), 'Alias' ),
              ( ['optional'], POINTER(VARIANT), 'Abbreviation' ),
              ( ['optional'], POINTER(VARIANT), 'Remarks' ),
              ( ['optional'], POINTER(VARIANT), 'useage' ),
              ( ['optional'], POINTER(VARIANT), 'hvDatum' ),
              ( ['optional'], POINTER(VARIANT), 'projectedUnit' ),
              ( ['optional'], POINTER(VARIANT), 'VerticalShift' ),
              ( ['optional'], POINTER(VARIANT), 'PositiveDirection' )),
]
################################################################
## code template for IVerticalCoordinateSystemEdit implementation
##class IVerticalCoordinateSystemEdit_Impl(object):
##    def DefineEx(self, Name, Alias, Abbreviation, Remarks, useage, pDatum, projectedXYUnit, VerticalShift, PositiveDirection):
##        u'Defines the properties of a vertical coordinate system.'
##        #return 
##
##    def Define(self, Name, Alias, Abbreviation, Remarks, useage, hvDatum, projectedUnit, VerticalShift, PositiveDirection):
##        u'Defines the properties of a vertical coordinate system.'
##        #return 
##

class IMSegmentationInternal(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that allow certain MSegmentation functionality, similar to that on IMSegmentation3 but more limited.'
    _iid_ = GUID('{040E3809-1106-11D6-9FA9-00C04F6BDF0D}')
    _idlflags_ = ['oleautomation', 'restricted']
IMSegmentationInternal._methods_ = [
    COMMETHOD(['propget', helpstring(u'Returns a combination of esriMonotinicityEnum values that describes all trends in M values over the length of the curve.')], HRESULT, 'MMonotonicity',
              ( ['retval', 'out'], POINTER(c_int), 'monotonicityDetails' )),
    COMMETHOD([helpstring(u'Returns the first and last defined M value for the curve.')], HRESULT, 'QueryFirstLastM',
              ( ['out'], POINTER(c_double), 'firstM' ),
              ( ['out'], POINTER(c_double), 'lastM' )),
    COMMETHOD([helpstring(u'Re-orients the curve to make Ms non-decreasing, if possible.')], HRESULT, 'OrientByMs'),
]
################################################################
## code template for IMSegmentationInternal implementation
##class IMSegmentationInternal_Impl(object):
##    def QueryFirstLastM(self):
##        u'Returns the first and last defined M value for the curve.'
##        #return firstM, lastM
##
##    @property
##    def MMonotonicity(self):
##        u'Returns a combination of esriMonotinicityEnum values that describes all trends in M values over the length of the curve.'
##        #return monotonicityDetails
##
##    def OrientByMs(self):
##        u'Re-orients the curve to make Ms non-decreasing, if possible.'
##        #return 
##

class AffineTransformation2D(CoClass):
    u'A two dimensional affine transformation.'
    _reg_clsid_ = GUID('{6FA1A8D6-D264-11D2-9F29-00C04F6BDD7F}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
class IAffineTransformation2D2(IAffineTransformation2D):
    _case_insensitive_ = True
    u'Provides access to members that define and manipulate affine transformations.'
    _iid_ = GUID('{8BEDCE87-6CEE-4E7B-9D17-73B3562E9AE6}')
    _idlflags_ = []
class IAffineTransformation2D3(IAffineTransformation2D2):
    _case_insensitive_ = True
    u'Provides access to members that define and manipulate affine transformations.'
    _iid_ = GUID('{CD315758-16AE-4438-99B3-F5FFA6BCF3F3}')
    _idlflags_ = []
AffineTransformation2D._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ITransformationGEN, IAffineTransformation2D3GEN, ITransformation, IAffineTransformation2D, IAffineTransformation2D2, IAffineTransformation2D3, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IClone, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, IZShift]

ISpatialIndex._methods_ = [
    COMMETHOD(['propput', helpstring(u'Indicates whether to allow a spatial index to be created for this geometry.')], HRESULT, 'AllowIndexing',
              ( [], VARIANT_BOOL, 'AllowIndexing' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to allow a spatial index to be created for this geometry.')], HRESULT, 'AllowIndexing',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'AllowIndexing' )),
    COMMETHOD([helpstring(u'Invalidate the spatial index.')], HRESULT, 'Invalidate'),
]
################################################################
## code template for ISpatialIndex implementation
##class ISpatialIndex_Impl(object):
##    def Invalidate(self):
##        u'Invalidate the spatial index.'
##        #return 
##
##    def _get(self):
##        u'Indicates whether to allow a spatial index to be created for this geometry.'
##        #return AllowIndexing
##    def _set(self, AllowIndexing):
##        u'Indicates whether to allow a spatial index to be created for this geometry.'
##    AllowIndexing = property(_get, _set, doc = _set.__doc__)
##

class GeoTransformationOperationSet(CoClass):
    u'Stores a set of geographic transformation operators (GT + direction).'
    _reg_clsid_ = GUID('{38AC4B99-A4C9-41E8-88E0-CEEA37888932}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{C4B094C2-FF32-4FA1-ABCB-7820F8D6FB68}', 10, 2)
GeoTransformationOperationSet._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IGeoTransformationOperationSet, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]

IMAware._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates whether or not the geometry is aware of and capable of handling Ms.')], HRESULT, 'MAware',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'MAware' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether or not the geometry is aware of and capable of handling Ms.')], HRESULT, 'MAware',
              ( [], VARIANT_BOOL, 'MAware' )),
    COMMETHOD(['propget', helpstring(u'Indicates if all the Ms are valid numbers.')], HRESULT, 'MSimple',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'MSimple' )),
    COMMETHOD([helpstring(u'Sets all the M values to a non-valid number (NaN).')], HRESULT, 'DropMs'),
]
################################################################
## code template for IMAware implementation
##class IMAware_Impl(object):
##    @property
##    def MSimple(self):
##        u'Indicates if all the Ms are valid numbers.'
##        #return MSimple
##
##    def _get(self):
##        u'Indicates whether or not the geometry is aware of and capable of handling Ms.'
##        #return MAware
##    def _set(self, MAware):
##        u'Indicates whether or not the geometry is aware of and capable of handling Ms.'
##    MAware = property(_get, _set, doc = _set.__doc__)
##
##    def DropMs(self):
##        u'Sets all the M values to a non-valid number (NaN).'
##        #return 
##


# values for enumeration 'esriSRPrimeMType'
esriSRPrimeM_Greenwich = 8901
esriSRPrimeM_Athens = 8912
esriSRPrimeM_Bern = 8907
esriSRPrimeM_Bogota = 8904
esriSRPrimeM_Brussels = 8910
esriSRPrimeM_Ferro = 8909
esriSRPrimeM_Jakarta = 8908
esriSRPrimeM_Lisbon = 8902
esriSRPrimeM_Madrid = 8905
esriSRPrimeM_Oslo = 8913
esriSRPrimeM_Paris = 8903
esriSRPrimeM_Rome = 8906
esriSRPrimeM_Stockholm = 8911
esriSRPrimeMType = c_int # enum

# values for enumeration 'esriSRVerticalDatumType'
esriSRVertDatum_AHD = 5111
esriSRVertDatum_AHD_Tasmania = 5112
esriSRVertDatum_AIOC1995 = 5133
esriSRVertDatum_Alicante = 5180
esriSRVertDatum_Antalya = 5173
esriSRVertDatum_Auckland = 5157
esriSRVertDatum_Baltic1980 = 5185
esriSRVertDatum_Baltic1982 = 5184
esriSRVertDatum_BalticSea = 5105
esriSRVertDatum_BandarAbbas = 5150
esriSRVertDatum_Belfast = 5131
esriSRVertDatum_BlackSea = 5134
esriSRVertDatum_Bluff = 5158
esriSRVertDatum_Cascais = 5178
esriSRVertDatum_CaspianSea = 5106
esriSRVertDatum_ChathamIsland = 5169
esriSRVertDatum_Constanta = 5179
esriSRVertDatum_CVD1928 = 5114
esriSRVertDatum_DanskNormalNul = 5132
esriSRVertDatum_DHHN1985 = 5182
esriSRVertDatum_DHHN1992 = 5181
esriSRVertDatum_Douglas = 5148
esriSRVertDatum_Dunedin = 5159
esriSRVertDatum_Durres = 5175
esriSRVertDatum_EGM96Geoid = 5171
esriSRVertDatum_EVRF2000 = 5129
esriSRVertDatum_FahudHeightDatum = 5124
esriSRVertDatum_FairIsle = 5139
esriSRVertDatum_Fao = 5149
esriSRVertDatum_FlannanIsles = 5146
esriSRVertDatum_Foula = 5141
esriSRVertDatum_GebrauchshohenAdria = 5176
esriSRVertDatum_Gisborne = 5160
esriSRVertDatum_HaTien1960 = 5125
esriSRVertDatum_Helsinki1960 = 5116
esriSRVertDatum_HongKongChartDatum = 5136
esriSRVertDatum_HongKongPrincipalDatum = 5135
esriSRVertDatum_HonDau1992 = 5126
esriSRVertDatum_IGN1987 = 5154
esriSRVertDatum_IGN1988 = 5155
esriSRVertDatum_IGN1989 = 5156
esriSRVertDatum_JapaneseStandardLevellingDatum1949 = 5122
esriSRVertDatum_KOCConstructionDatum = 5188
esriSRVertDatum_KOCWellDatum = 5187
esriSRVertDatum_KuwaitPWD = 5186
esriSRVertDatum_Landeshohennetz1995 = 5128
esriSRVertDatum_Landesnivellement1902 = 5127
esriSRVertDatum_Lerwick = 5140
esriSRVertDatum_Lyttleton = 5161
esriSRVertDatum_MalinHead = 5130
esriSRVertDatum_Maputo = 5121
esriSRVertDatum_MeanSeaLevel = 5100
esriSRVertDatum_Moturiki = 5162
esriSRVertDatum_Napier = 5163
esriSRVertDatum_NationalVerticalNetwork1999 = 5177
esriSRVertDatum_NAVD1988 = 5103
esriSRVertDatum_Nelson = 5164
esriSRVertDatum_NGF_IGN69 = 5119
esriSRVertDatum_NGF_IGN78 = 5120
esriSRVertDatum_NGF_Lalle = 5118
esriSRVertDatum_NGG1977 = 5153
esriSRVertDatum_NGNC = 5151
esriSRVertDatum_NGVD1929 = 5102
esriSRVertDatum_NivellementGeneralDuLuxembourg = 5172
esriSRVertDatum_NormaalAmsterdamsPeil = 5109
esriSRVertDatum_NorthRona = 5143
esriSRVertDatum_NorwayNormalNul1954 = 5174
esriSRVertDatum_Newlyn_OrkneyIsles = 5138
esriSRVertDatum_OneTreePoint = 5165
esriSRVertDatum_Oostende = 5110
esriSRVertDatum_OrdnanceDatumNewlyn = 5101
esriSRVertDatum_PDOHeightDatum1993 = 5123
esriSRVertDatum_PiraeusHarbour1986 = 5115
esriSRVertDatum_Poolbeg = 5152
esriSRVertDatum_Riketshoghtsystem1970 = 5117
esriSRVertDatum_SeaLevel = 5113
esriSRVertDatum_SNN76 = 5183
esriSRVertDatum_StewartIsland = 5170
esriSRVertDatum_Stornoway = 5144
esriSRVertDatum_St_Kilda = 5145
esriSRVertDatum_St_Marys = 5147
esriSRVertDatum_SuleSkerry = 5142
esriSRVertDatum_Taranaki = 5167
esriSRVertDatum_Tararu = 5166
esriSRVertDatum_Wellington = 5168
esriSRVertDatum_YellowSea1956 = 5104
esriSRVertDatum_YellowSea1985 = 5137
esriSRVertDatum_DangerIsland1950 = 5190
esriSRVertDatum_Guadeloupe1951 = 5193
esriSRVertDatum_Lagos1955 = 5194
esriSRVertDatum_Martinique1955 = 5192
esriSRVertDatum_Mayotte1950 = 5191
esriSRVertDatum_NGC1948 = 5189
esriSRVertDatum_WGS1984Geoid = 105100
esriSRVertDatum_NGPF = 5195
esriSRVertDatum_IGN1966 = 5196
esriSRVertDatum_MooreaSAU1981 = 5197
esriSRVertDatum_RaiateaSAU2001 = 5198
esriSRVertDatum_MaupitiSAU2001 = 5199
esriSRVertDatum_HuahineSAU2001 = 5200
esriSRVertDatum_TahaaSAU2001 = 5201
esriSRVertDatum_BoraBoraSAU2001 = 5202
esriSRVertDatum_IGLD1955 = 5204
esriSRVertDatum_IGLD1985 = 5205
esriSRVertDatum_EGM84Geoid = 5203
esriSRVertDatum_DVR90 = 5206
esriSRVertDatum_RH2000 = 5208
esriSRVerticalDatumType = c_int # enum
IAffineTransformation2D2._methods_ = [
    COMMETHOD(['propget', helpstring(u'The origin of accumulated transformations used when projecting an affine transformation to a different spatial reference system.')], HRESULT, 'MoveOrigin',
              ( ['retval', 'out'], POINTER(POINTER(IPoint)), 'Origin' )),
]
################################################################
## code template for IAffineTransformation2D2 implementation
##class IAffineTransformation2D2_Impl(object):
##    @property
##    def MoveOrigin(self):
##        u'The origin of accumulated transformations used when projecting an affine transformation to a different spatial reference system.'
##        #return Origin
##

ISpatialIndex2._methods_ = [
    COMMETHOD([helpstring(u'Invalidates the spatial index if the geometry has been changed since the index was last constructed.')], HRESULT, 'CheckInvalidate'),
]
################################################################
## code template for ISpatialIndex2 implementation
##class ISpatialIndex2_Impl(object):
##    def CheckInvalidate(self):
##        u'Invalidates the spatial index if the geometry has been changed since the index was last constructed.'
##        #return 
##

IClassFactory._methods_ = [
    COMMETHOD([], HRESULT, 'RemoteCreateInstance',
              ( ['in'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.GUID), 'riid' ),
              ( ['out'], POINTER(POINTER(IUnknown)), 'ppvObject' )),
    COMMETHOD([], HRESULT, 'RemoteLockServer',
              ( ['in'], c_int, 'fLock' )),
]
################################################################
## code template for IClassFactory implementation
##class IClassFactory_Impl(object):
##    def RemoteLockServer(self, fLock):
##        '-no docstring-'
##        #return 
##
##    def RemoteCreateInstance(self, riid):
##        '-no docstring-'
##        #return ppvObject
##

ISegmentID._methods_ = [
    COMMETHOD([helpstring(u"Get the IDs on the segment's endpoints.")], HRESULT, 'GetIDs',
              ( ['out'], POINTER(c_int), 'fromID' ),
              ( ['out'], POINTER(c_int), 'toID' )),
    COMMETHOD([helpstring(u"Set the IDs on the segment's endpoints.")], HRESULT, 'SetIDs',
              ( [], c_int, 'fromID' ),
              ( [], c_int, 'toID' )),
]
################################################################
## code template for ISegmentID implementation
##class ISegmentID_Impl(object):
##    def SetIDs(self, fromID, toID):
##        u"Set the IDs on the segment's endpoints."
##        #return 
##
##    def GetIDs(self):
##        u"Get the IDs on the segment's endpoints."
##        #return fromID, toID
##

IAffineTransformation2D3._methods_ = [
    COMMETHOD(['restricted', helpstring(u'Defines the best conformal affine transformation between two sets of points. Can be used to register paper maps on a digitizer.')], HRESULT, 'DefineConformalFromControlPointsEx',
              ( [], c_int, 'numPoints' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPoint), 'fromPoints' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.WKSPoint), 'toPoints' )),
    COMMETHOD([helpstring(u'Defines the best conformal affine transformation between two sets of points. Can be used to register paper maps on a digitizer.')], HRESULT, 'DefineConformalFromControlPoints',
              ( [], c_int, 'numPoints' ),
              ( ['in'], POINTER(POINTER(IPoint)), 'fromPoints' ),
              ( ['in'], POINTER(POINTER(IPoint)), 'toPoints' )),
    COMMETHOD([helpstring(u'Returns the linear coefficients which define the two dimensional affine transformation.')], HRESULT, 'QueryLinearCoefficients',
              ( [], esriTransformDirection, 'direction' ),
              ( [], POINTER(c_double), 'params' )),
    COMMETHOD([helpstring(u'Sets the linear coefficients which define the two dimensional affine transformation.')], HRESULT, 'SetLinearCoefficients',
              ( [], esriTransformDirection, 'direction' ),
              ( [], POINTER(c_double), 'params' )),
]
################################################################
## code template for IAffineTransformation2D3 implementation
##class IAffineTransformation2D3_Impl(object):
##    def SetLinearCoefficients(self, direction, params):
##        u'Sets the linear coefficients which define the two dimensional affine transformation.'
##        #return 
##
##    def DefineConformalFromControlPointsEx(self, numPoints, fromPoints, toPoints):
##        u'Defines the best conformal affine transformation between two sets of points. Can be used to register paper maps on a digitizer.'
##        #return 
##
##    def DefineConformalFromControlPoints(self, numPoints, fromPoints, toPoints):
##        u'Defines the best conformal affine transformation between two sets of points. Can be used to register paper maps on a digitizer.'
##        #return 
##
##    def QueryLinearCoefficients(self, direction, params):
##        u'Returns the linear coefficients which define the two dimensional affine transformation.'
##        #return 
##


# values for enumeration 'esriSRProjection2Type'
esriSRProjection_NewZealandMapGrid = 43040
esriSRProjection_Krovak = 43039
esriSRProjection2Type = c_int # enum
__all__ = ['esriSRGeoTransformation_Kusaie_1951_To_WGS_1984',
           'esriSRDatum_Lithuania1994',
           'esriSRProjCS_NAD1983SPCS_DEFT',
           'esriSRGeoTransformation_NTFParis_To_ED1950',
           'esriSRGeoTransformation_IGN72_Grande_Terre_To_RGNC_1991_93_3',
           'esriSRGeoTransformation_IGN72_Grande_Terre_To_RGNC_1991_93_2',
           'esriSRGeoTransformation_IGN72_Grande_Terre_To_RGNC_1991_93_1',
           'esriSRGeoTransformation_Fatu_Iva_1972_To_RGPF_1',
           'E_GEOMETRY_CANT_CUT_POLYGON', 'esriSRSpheroid_SaturnPan',
           'esriSRGeoCS_TM65',
           'esriSRProjCS_NAD1983HARN_WISCRSAdamsM',
           'esriSRGeoTransformation_D48_To_WGS_1984_Osrednja_Slovenia',
           'esriSRGeoTransformation_Vientiane_1982_To_Lao_1997_1',
           'esriSRGeoCS_UranusOberon',
           'esriSRProjCS_WGS1984PlateCarree',
           'esriSRProjCS_Piton_des_Neiges_TM_Reunion',
           'esriSRProjCS_NAD1983MichiganGeoRef_m',
           'esriSRProjection_FlatPolarQuartic',
           'E_GEOMETRY_NONTRIANGLESTRIP',
           'esriSRGeoTransformation_CH1903_To_WGS1984_2',
           'esriSRProjCS_Pulkovo1942GK_19N',
           'esriSRProjCS_RGNC1991_93_UTMZone58S',
           'esriSRProjCS_NAD1983HARNSPCS_WISouth',
           'esriSRGeoTransformation_NAD_1983_TO_HARN_CO',
           'esriSRGeoCS_LC5_1961',
           'esriSRGeoTransformation_Vanua_Levu_1915_To_WGS_1984_1',
           'esriSRGeoTransformation_Azores_Central_1995_To_WGS_1984_11',
           'esriSRGeoTransformation_Azores_Central_1995_To_WGS_1984_10',
           'esriSRGeoCS_PRJ1992', 'esriSRProjCS_Xian1980_GK_Zone_23',
           'esriSRDatum_ATS1977', 'esriGeometryPoint',
           'esriSRProjCS_Xian1980_GK_Zone_20',
           'esriSRProjCS_WGS1972UTM_30N', 'esriSRVertCS_Oostende',
           'esriSRProjCS_GDM2000NegeriSembilan_Melaka',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_40',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_41',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_42',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_43',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_44',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_45',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_46',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_47',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_48',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_49',
           'esriMAscending', 'esriMGRSMode_NewStyle',
           'esriSRProjCS_Sphere_VanderGrintenI',
           'esriDivideIntoSegments', 'esriSRGeoCS_DeirezZor',
           'esriSRGeoCS_Kalianpur1962',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Roseau_Meters',
           'esriSRGeoTransformation_Bogota_To_MAGNA_Region_5_MB',
           'esriSRGeoTransformation_Guam_1963_To_HARN_Guam',
           'esriSRProjCS_RGNC1991_Lambert_New_Caledonia',
           'esriSRProjCS_AinElAbd1970UTM_37N', 'esriSRGeoCS_IGM1995',
           'esriSRProjCS_NAD1983SPCS_IDCentralFT',
           'esriSRProjCS_SIRGAS_UTM_Zone_18N', 'esriSRDatum_D48',
           'esriSRProjCS_SIRGAS_UTM_Zone_18S',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Lac_Qui_Parle_Meters',
           'esriMRelationMIsNaN', 'esriSRProjCS_NAD1983SPCS_COSouth',
           'esriSRUnit_SurveyFoot',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinLaCrosse',
           'ILinearUnitEdit',
           'esriSRSpheroid_GRS1980Adj_WisconsinGrant',
           'esriSRProjCS_NAD1983HARNSPCS_WYWCFT',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaRedLake',
           'esriSRGeoTransformation_QORNOQ_To_WGS1984',
           'esriSRProjCS_BogotaUTM_18N',
           'esriSRProjCS_MGIFerro_GKM28',
           'esriSRProjCS_NAD1983SPCS_NCFT', 'esriSRVertCS_CVD_1928',
           'esriSRDatum_Bermuda2000',
           'esriSRGeoTransformation_CHTRF1995_To_WGS1984',
           'esriSRVertCS_Maputo',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Itasca_North_Feet',
           'esriSRGeoTransformation_MHAST_Offshore_To_WGS_1972_BE_1',
           'esriSRProjCS_BataviaUTM_48S',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Oneida_Meters',
           'E_GEOMETRY_INTERNALERROR', 'esriSRGeoCS_SaturnIapetus',
           'esriSRGeoTransformation_Sierra_Leone_1968_To_WGS_1984',
           'esriSRDatum_KOC', 'esriSRProjCS_MAGNAColombiaEsteEste',
           'esriSRGeoTransformation_La_Canoa_To_WGS_1984_2',
           'esriSRGeoTransformation_EUREF_FIN_To_ETRS_1989',
           'esriSRGeoTransformation_AGD_1966_To_WGS_1984_17_NTv2',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Trempealeau_Meters',
           'esriSRGeoTransformation_LisaboaHayford_To_WGS1984_2',
           'esriSRGeoTransformation_LisaboaHayford_To_WGS1984_1',
           'esriSRProjCS_World_WinkelI',
           'esriSRProjCS_WGS1972UTM_46N',
           'esriSRProjCS_WGS1972UTM_46S',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaBeltramiSouth',
           'esriSRDatum_UranusOphelia',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Fond_du_Lac_Feet',
           'esriSRProjCS_NAD1983HARN_WISCRSBarronM',
           'esriSRDatum_NAD1983',
           'esriSRGeoTransformation_ST87_Ouvea_To_WGS_1984_2',
           'esriSRGeoCS_Locodjo1965', 'E_GEOMETRY_UNKNOWNTYPE',
           'esriSRProjection_WinkelII',
           'esriSRGeoTransformation_CH1903_Plus_To_ETRS_1989_1',
           'esriSRProjCS_NAD1983HARNSPCS_AZEast',
           'esriSRProjCS_WGS1984UTM_8S',
           'esriSRProjCS_WGS1972UTM_13N',
           'esriSRProjCS_WGS1984UTM_8N',
           'esriSRGeoTransformation_Indian1975_To_WGS1984',
           'esriSRProjCS_WGS1984_NPoleOrthographic',
           'esriSRGeoCS_VoirolUnifie1960',
           'esriSRProjCS_ETRS1989ETRS_GK19FIN',
           'esriSRProjCS_NAD1983HARNSPCS_IANorthFT',
           'esriSRGeoTransformation_NAD_1927_CGQ77_To_WGS_1984_3',
           'esriSRGeoCS_TWD1997',
           'esriSRProjCS_NAD1983SPCS_TXCentralFT',
           'esriSRProjCS_World_EckertIII', 'esriSRVertCS_IGN1966',
           'esriSRProjCS_Pulkovo1942CaspianSeaMercator',
           'esriSRProjCS_PortoSanto1995_UTM_Zone_28N',
           'esriSRDatum_LittleCayman1961',
           'esriSRProjCS_ETRS1989ETRS_GK22FIN',
           'esriSRGeoTransformation_Azores_Central_1948_To_WGS_1984_1',
           'esriShapeMultipoint',
           'esriSRProjCS_NZGD1949_Lindis_Peak_Circuit',
           'esriSRGeoCS_Petrels1972',
           'esriSRProjCS_NAD1927SPCS_CONorth',
           'esriSRGeoCS_Canton1966',
           'esriSRProjCS_NAD1927_Cuba_Norte',
           'esriSRGeoCS_SaturnCalypso',
           'esriSRProjCS_NAD1927CGQ77MTM_7SCoPQ',
           'E_GEOMETRY_CANNOT_DO_3D_OPERATIONS_ON_CURVES',
           'esriSRGeoTransformation_NAD1983_CSRS98_To_WGS1984',
           'esriSRDatum_Reseau_de_Reference_des_AntillesFrancaises1991',
           'esriSRProjCS_WGS1972UTM_30S',
           'esriSRProjCS_NAD1927_10TM_AEP_Resource',
           'esriSRGeoTransformation_Dabola_1981_To_WGS_1984',
           'esriFilterVCS', 'esriSRProjCS_NAD1983SPCS_GuamFT',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaCrowWing',
           'esriSRDatum_NTF', 'esriSRSpheroid_UranusCordelia',
           'esriSRDatum_SaturnHyperion', 'esriSRDatum_Moorea1987',
           'ILongitudeRotationTransformation',
           'esriSRGeoTransformation_DHDN_To_ETRS_1989',
           'esriSRProjCS_NAD1983SPCS_CAVIFT',
           'esriSRGeoTransformation_S_JTSK_To_WGS_1984_1',
           'esriSRGeoTransformation_D48_To_ETRS_1989_Osrednja_Slovenia',
           'esriSRProjCS_NAD1983HARNSPCS_MINorth',
           'esriSRGeoTransformation_S_JTSK_To_WGS_1984_2',
           'esriSRProjCS_NAD1983HARN_WISCRSMilwaukeeFtUS',
           'esriMAboveMax', 'esriSRProjCS_Xian1980_GK_Zone_22',
           'esriSRProjCS_Xian1980_GK_Zone_21',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaDodge',
           'esriSRDatum_IERSTerrestrialReferenceFrame1990',
           'esriSRDatum_IERSTerrestrialReferenceFrame1991',
           'esriSRProjCS_NAD1983HARN_StatePlane_California_V_FIPS_0405_Ft',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_156E',
           'esriSRGeoTransformation_Tananarive1925_To_WGS1984',
           'esriSRVertCS_Lagos1955',
           'esriSRProjCS_NAD1983SPCS_MOCentralFT',
           'esriSRProjCS_NTFParis_LambertZoneII',
           'esriSRGeoCS_JupiterMetis', 'esriSRVertDatum_IGN1966',
           'esriSRProjCS_NAD1983HARN_WISCRSDunnFtUS',
           'esriSRGeoCS_NGO1948Oslo',
           'esriSRGeoTransformation_Pulkovo1995_To_PZ1990_GOST',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_48E',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaRedwood',
           'esriSRDatum_OSU1986F', 'esriSRProjCS_WGS1984UTM_15N',
           'esriSRProjCS_WGS1984UTM_40N',
           'esriSRProjCS_WGS1984UTM_15S',
           'esriSRProjCS_WGS1984UTM_40S',
           'esriSRProjCS_NAD1983HARN_WISCRSGreenLakeFtUS',
           'esriSRVertCS_Dunedin',
           'esriSRProjCS_NAD1983HARN_Adj_MN_St_Louis_North_Meters',
           'esriSRGeoTransformation_Deir_ez_zor_To_WGS_1972_BE',
           'esriSRVertCS_YellowSea1956',
           'esriSRProjCS_NAD1983HARN_WISCRSCalumetM',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaNorman',
           'esriSRProjCS_Sphere_Behrmann',
           'esriSRGeoCS_Hartebeesthoek1994',
           'esriSRProjCS_Arc1960_UTM_Zone_37S',
           'esriSRGeoTransformation_KOC_To_WGS_1984_1',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_42E',
           'esriSRProjCS_DGN1995IndonesiaTM3Zone47_2',
           'esriSRProjCS_Arc1960_UTM_Zone_37N', 'esriSRGeoCS_SaoBraz',
           'esriSRGeoTransformation_Anna_1_1965_To_WGS_1984',
           'esriSRProjCS_GhanaMetreGrid',
           'esriSRProjCS_NAD1983SPCS_NVCentral',
           'esriSRProjCS_MGIAustriaGKEast',
           'esriSRProjCS_SIRGAS_UTM_Zone_23S', 'ISphere',
           'esriSRGeoCS_SaturnTethys',
           'esriSRGeoTransformation_AGD1966_To_GDA1994_10_NTv2_NSW_Vic',
           'esriSRProjCS_Datum73UTM_29N',
           'esriSRProjCS_Yemen_NGN_1996_UTM_Zone_39N',
           'esriSRGeoCS_Antigua1943',
           'esriSRProjCS_NZGD1949_Hawkes_Bay_Circuit',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Washington_Meters',
           'esriSRProjCS_NTFParis_LambertZoneI',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaSibley',
           'esriSRProjCS_NAD1983HARN_Adj_WI_St_Croix_Feet',
           'TriangleStrip',
           'esriSRGeoTransformation_Massawa_To_WGS1984',
           'esriSRGeoCS_ReseauGeodesiqueNouvelleCaledonie1991',
           'esriSRProjCS_NAD1983HARNSPCS_RIFT',
           'esriSRGeoTransformation_PSAD_1956_To_WGS_1984_10',
           'esriSRGeoTransformation_PSAD_1956_To_WGS_1984_11',
           'esriSRGeoTransformation_PSAD_1956_To_WGS_1984_12',
           'esriSRGeoTransformation_PSAD_1956_To_WGS_1984_13',
           'esriSRProjCS_CostaRicaNorte', 'esriShapeMultipointZM',
           'esriSRProjCS_JGD2000_UTM_Zone_56N', 'esriSRDatum_Afgooye',
           'esriSRGeoTransformation_Bogota_To_MAGNA_Region_7_MB',
           'esriSRGeoTransformation_Kalianpur_1937_To_WGS_1984_2',
           'esriSRDatum_StKitts1955', 'esriSRDatum_PortoSanto1995',
           'esriSRGeoCS_Hough1960', 'esriSRDatum_Kalianpur1975',
           'esriSRGeoCS_AzoresCentralIslands1948',
           'esriSRDatum_PZ1990', 'E_GEOMETRY_UNKNOWNERROR',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinFlorence',
           'esriSRProjCS_Hito_XVIII_1963_Argentina_2',
           'esriSRProjCS_Kertau_Singapore_Grid',
           'esriSRProjCS_NAD1983HARN_StatePlane_New_York_Long_Island_FIPS_3104_Ft',
           'E_GEOMETRY_NOT_M_SIMPLE',
           'esriSRProjCS_NEA74NoumeaLambert',
           'esriSRSpheroid_JupiterHimalia',
           'esriSRGeoTransformation_WGS_1984_To_RT90',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Cass_South_Meters',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinLafayette',
           'esriSRGeoTransformation_Samoa_1962_To_HARN_EastSamoa',
           'esriSRDatum_TWD1967',
           'esriSRProjCS_Beijing1954_3_Degree_GK_CM_108E',
           'esriSRGeoCS_MarsPhobos', 'esriSRProjCS_Pulkovo1995GK_32N',
           'esriSRSpheroid_GRS1980Adj_MinnesotaNorman',
           'esriSRProjCS_ED1950_Turkey_12',
           'esriSRProjCS_ED1950_Turkey_13',
           'esriSRProjCS_ED1950_Turkey_10',
           'esriSRProjCS_ED1950_Turkey_11',
           'esriSRProjCS_ED1950_Turkey_14',
           'esriSRProjCS_ED1950_Turkey_15',
           'esriSRProjCS_Beijing1954GK_13N',
           'esriSRProjCS_Kalianpur1975_UTM44N',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Meeker_Meters',
           'esriSRGeoCS_PZ1990',
           'esriSRProjCS_NAD1983HARN_WISCRSBrownFtUS',
           'E_SPATIALREFERENCE_NOTAPCS', 'IPrimeMeridianEdit',
           'esriSRGeoTransformation_S_JTSK_To_Pulkovo_1942',
           'esriSRUnit_Millimeter',
           'esriSRProjCS_NAD1927SPCS_WYEastCentral',
           'esriSRDatum_Petrels1972', 'esriEnvelopeVertexUL',
           'esriSRUnit_Foot', 'esriSRGeoCS_DOS1968',
           'esriSRProjCS_WGS1972UTM_32S',
           'esriSRProjCS_WGS1972UTM_32N',
           'esriSRGeoTransformation_Nord_Sahara_1959_To_WGS_1972_BE',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Fillmore_Meters',
           'esriEnvelopeVertexUR',
           'esriSRProjCS_RGNC1991_93LambertNewCaledonia',
           'esriSRProjCS_NAD1983HARN_StatePlane_Hawaii_5_FIPS_5105_Feet',
           'IJSONConverterGeometry',
           'esriSRGeoTransformation_IGCB_1955_To_WGS_1984_1',
           'esriSRGeoCS_DHDN',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Marshall_Feet',
           'esriSRDatum_Jouik1961',
           'esriSRProjCS_SIRGAS_UTM_Zone_25S',
           'esriSRGeoTransformation_Ain_el_Abd_To_WGS_1984_3',
           'esriUTMConversionOptionsEnum',
           'esriSRVertDatum_PiraeusHarbour1986',
           'esriSRProjCS_NAD1927SPCS_DE',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Waseca_Meters',
           'esriSRGeoTransformation_CorregoAlegre_To_WGS1984',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_64',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_62',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_63',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_60',
           'esriSRSpheroid_GRS1980Adj_WisconsinMonroe',
           'esriSRDatum_SaturnPhoebe',
           'esriSRProjCS_NAD1983SPCS_WASouthFT',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Pope_Meters',
           'TriangleFan', 'esriSRProjCS_NAD1983HARNSPCS_KYNorth',
           'esriSRProjCS_NZGD1949_Mount_Pleasant_Circuit',
           'esriSRDatum_Clarke1866', 'esriShapeNull',
           'esriSRDatum_Qornoq', 'esriSRGeoCS_DGN1995',
           'esriSRGeoCS_Naparima1972',
           'esriSRGeoTransformation_MonteMario_To_WGS1984',
           'esriSRGeoTransformation_ITRF_1988_To_ITRF_2000_1',
           'esriSRProjCS_World_Mollweide', 'Multipoint',
           'esriSRSpheroid_JupiterMetis', 'NullTransformation',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Wabasha_Meters',
           'esriSRSpheroid_Pluto', 'esriSRGeoCS_NAD1927CGQ77',
           'esriSRGeoTransformation_NEA74_Noumea_To_RGNC_1991_93_1',
           'esriSRGeoTransformation_NEA74_Noumea_To_RGNC_1991_93_2',
           'esriSRProjCS_NAD1983HARNSPCS_KSSouth',
           'esriSRProjCS_NAD1927SPCS_ILWest',
           'esriSRGeoCS_UranusPuck',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaWabasha',
           'esriSRSpheroid_UranusMiranda',
           'esriSRProjCS_NAD1983HARN_StatePlane_Hawaii_1_FIPS_5101_Feet',
           'esriSRGeoCS_Schwarzeck', 'esriSpatialRelationRelation',
           'esriSRProjCS_NAD1983SPCS_NYEastFT',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Pope_Feet',
           'esriSRProjCS_NAD1983_CSRS98_MTM_2_SCoPQ',
           'esriGeometryServerMessageCode_Construct',
           'esriSRSpheroid_GRS1980Adj_WisconsinWaukesha',
           'esriSRGeoCS_SantoDOS1965', 'esriSRDatum_Observatario',
           'esriSRGeoCS_Timbalai1948', 'esriSRGeoCS_Observatario',
           'esriSRProjCS3Type', 'esriSRProjCS_FD1958Iraq',
           'esriSRDatum_JupiterPasiphae',
           'esriSRProjCS_ETRS1989SloveniaTM',
           'esriSRProjCS_WGS1972UTM_40N', 'esriSRUnit_Indian1962Yard',
           'esriSRProjCS_Pulkovo1942GK_32N',
           'esriSRProjCS_NAD1983CaliforniaTealeAlbers',
           'esriSRGeoTransformation_Tokyo_To_WGS_1984_2001',
           'esriSRProjCS_NAD1983UTM_23N',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Traverse_Feet',
           'esriSRSpheroid_Fischer1960',
           'esriSRProjCS_Pulkovo1942GK_22N',
           'esriSRProjCS_WGS1984UTM_36S', 'esriSRVertCS_SuleSkerry',
           'esriSRSpheroid_Fischer1968',
           'esriSRSpheroid_GRS1980Adj_WisconsinPortage',
           'INetworkShape', 'esriSRDatum_Dominica1945',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaLeSueur',
           'esriSRUnit_ClarkeFoot',
           'esriSRProjCS_WGS1984_Complex_UTM_Zone_25N',
           'esriSRSpheroid_GRS1980Adj_WisconsinAdamsJuneau',
           'esriSRDatum_WGS1984',
           'esriSRGeoTransformation_RGF_1993_To_WGS_1984_1',
           'esriSRProjCS_WGS1984UTM_6N',
           'esriSRDatum_AuthalicSphereArcInfo',
           'esriSRVertDatum_Tararu', 'esriSRProjCS_Tokyo_UTM56N',
           'esriSRProjCS_Xian1980_GK_CM_93E',
           'esriSRGeoCS_NordSahara1959_Paris', 'esriMBelowMin',
           'esriSRProjCS_NAD1983SPCS_MTFT',
           'E_GEOMETRY_AMBIGUOUSPARTTYPE',
           'esriSRProjCS_NAD1983HARN_Adj_WI_EauClaire_Feet',
           'esriSRProjCS_ETRS1989ETRS_GK26FIN',
           'esriSRGeoTransformation_South_Yemen_To_WGS_1984_1',
           'esriSRGeoTransformation_WGS_1972_BE_To_WGS_1984_1',
           'ITriangleFan', 'esriSRProjCS_NAD1983HARNSPCS_LASouthFT',
           'esriSRProjCS_NAD1983HARN_WISCRSWashingtonFtUS',
           'esriSRDatum_IRENET95',
           'esriSRProjCS_NGO1948_Oslo_Kommune', 'esriSRVertDatum_Fao',
           'esriSRGeoTransformation_Deir_ez_zor_To_WGS_1984_2',
           'esriSRGeoTransformation_Deir_ez_zor_To_WGS_1984_3',
           'esriSRProjCS_VoirolSudAlgerieAncienne',
           'esriSRGeoTransformation_MPoraloko_To_WGS1984',
           'esriSRGeoTransformation_Deir_ez_zor_To_WGS_1984_4',
           'esriSRSpheroid_GEM10C',
           'esriSRSpheroid_GRS1980Adj_WisconsinEauClaire',
           'esriSRGeoCS_Mars2000',
           'esriSRProjCS_NAD1927SPCS_WYWestCentral',
           'esriSRGeoCS_JupiterLysithea',
           'esriSRDatum_DeceptionIsland', 'esriSRGeoCS_NSWC9Z_2',
           'esriSRProjCS_NAD1983GreatLakesAlbers',
           'esriSRGeoTransformation_Indian1975_To_WGS1984_2',
           'esriSRProjCS_DHDN_3_Degree_Gauss_Zone_4',
           'esriSRProjCS_DHDN_3_Degree_Gauss_Zone_5',
           'esriSRProjCS_DHDN_3_Degree_Gauss_Zone_2',
           'esriSRProjCS_DHDN_3_Degree_Gauss_Zone_3',
           'esriSRProjCS_DHDN_3_Degree_Gauss_Zone_1',
           'esriSRProjCS_Beijing1954_3_Degree_GK_CM_114E',
           'esriSRDatum_Hughes1980',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Adams_Feet',
           'esriSRSpheroid_GRS1980Adj_MinnesotaHennepin',
           'esriSRGeoTransformation_Fahud_To_WGS1984',
           'esriSRGeoTransformation_ELD_1979_To_LGD2006_1',
           'esriSRGeoCS_Egypt1930', 'esriUTMNoOptions',
           'esriSRProjection_StereographicSouthPole',
           'esriSRGeoCS_Conakry1905',
           'esriSRDatum_NAD1983HARNAdj_WIKenoshaMilwaukeeOzaukeeRacine',
           'esriSRGeoCS_MOP78',
           'esriSRProjCS_NAD1983HARN_StatePlane_Washington_South_FIPS_4602_Ft',
           'esriSRProjCS_NAD1983HARN_WISCRSRuskM',
           'esriSRDatum_Plessis1817', 'esriSRDatum_Gulshan303',
           'esriSRProjCS_WGS1984UTM_17N',
           'esriSRProjCS_Madrid1870MadridSpain',
           'esriMultiPatchInvalidRing',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Ottertail_Meters',
           'esriSRProjCS_WGS1984UTM_17S',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Cook_North_Feet',
           'TopologyHandle', 'esriSRDatum_CampoInchauspe',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Jackson_Feet',
           'esriSRProjCS_SJTSK_FERRO_KROVAK',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Waukesha_Feet',
           'esriSRProjCS_Combani_1950_UTM_38S',
           'E_GEOMETRY_OPERATION_CANCELLED',
           'esriSRProjCS_NAD1983SPCS_NMWest',
           'esriSRProjCS_NZGD1949_Marlborough_Circuit',
           'IGeoTransformationOperationSet', 'esriSRVertCS_Poolbeg',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Martin_Feet',
           'esriSRVertCS_NGF_IGN78',
           'esriSRProjCS_NAD1983_StatePlane_South_Carolina_FIPS_3900_Feet_Intl',
           'esriSRGeoCS_SaturnTelesto',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinOconto',
           'esriSRProjCS_NAD1983HARN_WISCRSRichlandM',
           'esriSRVertCS_HongKongChartDatum',
           'esriSRProjCS_Arc1960_UTM_Zone_35S',
           'esriSRProjCS_Arc1960_UTM_Zone_35N',
           'esriSRGeoCS_EuropeanLibyanDatum1979',
           'esriSRProjCS_LGD2006LibyaTMZone7',
           'esriSRProjCS_LGD2006LibyaTMZone6',
           'esriSRProjCS_LGD2006LibyaTMZone5',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinBrown',
           'esriSRProjCS_LGD2006LibyaTMZone9',
           'esriSRProjCS_LGD2006LibyaTMZone8', 'esriShapePolygonZM',
           'esriSRGeoTransformation_South_Yemen_To_Yemen_NGN_1996',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_159E',
           'IPolygonArray',
           'esriSRGeoTransformation_Bogota_To_WGS_1984_region_1_CF',
           'esriSRGeoTransformation_SAD1969_To_WGS1984_9',
           'esriSRGeoTransformation_SAD1969_To_WGS1984_8',
           'esriSRGeoCS_Clarke1880Arc',
           'esriSRGeoTransformation_SAD1969_To_WGS1984_6',
           'esriSRGeoTransformation_SAD1969_To_WGS1984_5',
           'esriSRGeoTransformation_SAD1969_To_WGS1984_4',
           'esriSRProjCS_GoodeHomolosineOcean',
           'esriSRGeoTransformation_SAD1969_To_WGS1984_2',
           'esriSRGeoTransformation_SAD1969_To_WGS1984_1',
           'esriSRDatum_Solomon1968',
           'esriSRGeoTransformation_Lisbon_1890_Lisbon_To_Lisbon_1890',
           'esriSRDatum_TernIsland1961',
           'esriSRProjCS_NAD1983SPCS_NDNorth',
           'esriSRSpheroid_BesselNamibia', 'esriSRDatum_Bern1898',
           'esriSRProjCS_ED1950_3_Degree_GK_Zone_10',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaCookSouth',
           'esriSRProjCS_NAD1983HARNSPCSSouthCarolinaIntlFt',
           'esriSRProjCS_NAD1983SPCS_NC',
           'esriSRVertDatum_GebrauchshohenAdria',
           'esriSRProjCS_NAD1983SPCS_NE',
           'esriSRProjCS_NAD1983SPCS_NH',
           'esriSRProjCS_NAD1983SPCS_NJ',
           'esriSRProjCS_NAD1983SPCS_FLWestFT',
           'esriSRSpheroid_GRS1980Adj_WisconsinMarathon',
           'esriSRGeoCS_Clarke1880RGS',
           'esriSRProjCS_NAD1983TexasCentricMappingSystemAlbers',
           'esriSRProjCS_ED1950_3_Degree_GK_Zone_15',
           'esriSRGeoTransformation_SAD_1969_To_WGS_1984_14',
           'INetworkShape3D', 'esriSRProjCS_WGS1984UTM_28S',
           'esriSRProjCS_USNatlAtlasLambertAziEqualArea',
           'esriSRProjCS_WGS1984UTM_28N',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Polk_Meters',
           'esriSRGeoTransformation_Selvagem_Grande_1938_To_WGS_1984_1',
           'esriSRProjCS_GDA1994BCSG02',
           'esriSRProjCS_NAD1927SPCS_SDNorth',
           'esriSRProjCS_ETRS1989ETRS_GK27FIN',
           'esriSRProjCS_MassawaUTM_37N',
           'esriSRGeoTransformation_Israel_To_WGS_1984',
           'esriSRProjCS_GDA1994MGA_58',
           'esriSRProjCS_NAD1927CGQ77MTM_3SCoPQ',
           'esriSRProjCS_GDA1994MGA_50', 'esriSRProjCS_GDA1994MGA_51',
           'esriSRProjCS_GDA1994MGA_52', 'esriSRProjCS_GDA1994MGA_53',
           'esriSRProjCS_GDA1994MGA_54', 'esriSRProjCS_GDA1994MGA_55',
           'esriSRProjCS_GDA1994MGA_56', 'esriSRProjCS_GDA1994MGA_57',
           'esriSRProjCS_NAD1983SPCS_ILWest', 'esriSRGeoCS_LKS1994',
           'INormalAware', 'esriSRSpheroid_WGS1984',
           'esriSRProjCS_NAD1927SPCS_ORNorth',
           'esriSRProjCS_WorldCube',
           'esriSRProjCS_WGS1984USGSTransantarcticMtns',
           'E_GEOMETRY_ILLEGALWIN32EXPORT',
           'esriSRGeoCS_MakassarJakarta',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinGreen',
           'esriSRProjCS_NAD1927SPCS_MOWest',
           'esriSRProjCS_Sphere_Sinusoidal',
           'esriSRGeoCS_Lisbon1890_Lisbon',
           'esriSRProjCS_Manoca1962_UTM_Zone_32N',
           'esriSRProjCS_NADMichSPCS_MICentral',
           'esriGeometryTriangleFan', 'esriSRDatum_Everest1937',
           'esriSRVertDatum_TahaaSAU2001', 'esriSRDatum_IGN63HivaOa',
           'esriSRGeoTransformation_LGD2006_To_WGS_1984_1',
           'esriSRGeoCS_JapanGeodeticDatum2000',
           'esriSRSpheroid_GRS1980Adj_WisconsinOconto',
           'esriSRDatum_PRJ1992', 'esriSRDatum_NZGD1949',
           'esriSRProjCS_Pulkovo1995GK_30N',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Morrison_Feet',
           'esriSRGeoTransformation_NGN_To_WGS_1984_1',
           'esriSRProjCS_Kalianpur1975_UTM46N',
           'esriSRDatum_UranusBianca',
           'esriSRProjCS_VoirolDegreeSAlgerieAncienne',
           'esriSRVertDatum_Baltic1982',
           'esriSRProjection_HotineTwoPointNatOrigin',
           'esriSRProjCS_NAD1983UTM_6N', 'esriSRSpheroid_SaturnTitan',
           'esriSRGeoTransformation_Bogota_To_MAGNA_Region_4_MB',
           'esriSRSpheroid_GRS1980Adj_MinnesotaItascaSouth',
           'IGeometryBridge', 'esriSRProjCS_PRS1992PhilippinesZoneII',
           'esriSRProjCS_Guam1993Net',
           'esriSRProjCS_Xian1980_3_Degree_GK_CM_90E',
           'esriSRGeoCS_Kasai1953',
           'esriSRProjCS_PRS1992PhilippinesZoneIV',
           'esriSRSpheroid_GRS1980Adj_WisconsinRusk',
           'IEncode3DProperties', 'esriSRGeoCS_StGeorgeIsland',
           'IExtrude2', 'esriSRGeoCS_Sudan',
           'esriSRProjCS_Beijing1954_3_Degree_GK_Zone_27',
           'esriSRProjCS_NAD1983_CRS98_MTM_10',
           'esriSRGeoCS_Tahiti1979',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinFondduLac',
           'esriSRProjCS_BelgeLambert1950', 'esriMultiPatchFirstRing',
           'esriSRProjCS_NAD1983HARNSPCS_CAI',
           'esriSRProjCS_Beijing1954_3_Degree_GK_Zone_28',
           'esriSRProjCS_WGS1972UTM_34N', 'VerticalDatum',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_162E',
           'esriSRProjCS_DGN1995_UTMZone47N', 'wkbGeometryType',
           'esriSRProjCS_NAD1983HARNSPCS_NVCentralFT',
           'esriSRProjCS_NAD1983HARNSPCS_NJFT', 'esriSRDatum_Tahiti',
           'esriGARSModeCENTER', 'esriShapeExportDefaults',
           'esriSRProjCS_DGN1995_UTMZone47S',
           'esriSRProjCS_NAD1983SPCS_CAIIIFT',
           'esriSRProjCS_Tananarive1925UTM_38S',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_69E',
           'esriSRDatum_FortDesaix',
           'esriSRProjCS_NAD1983HARN_WISCRSGreenLakeM',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Ramsey_Meters',
           'esriSRGeoCS_GrandComoros', 'esriConstructOffsetSimple',
           'esriSRProjCS_NAD1983HARNSPCS_UTNorthFT',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaKoochiching',
           'esriShapeExportStripZs',
           'esriSRProjCS_NAD1927SPCS_MNNorth',
           'esriSRGeoCS_Naparima1955',
           'esriSRProjCS_NAD1983HARN_WISCRSPriceFtUS',
           'esriGeometryServerMessageCode_FindUnitsByWKT',
           'esriSRGeoTransformation_Hito_XVIII_1963_To_WGS_1984_2',
           'esriSRGeoCS_Pulkovo1942',
           'esriSRProjCS_NAD1983_StatePlane_Oregon_South_FIPS_3602_Feet_Intl',
           'esriSRGeoTransformation_Belge_1972_To_WGS_1984_2',
           'esriSRGeoTransformation_Belge_1972_To_WGS_1984_3',
           'esriSRGeoTransformation_Belge_1972_To_WGS_1984_1',
           'esriSRGeoTransformation_Qatar_To_WGS1984',
           'esriSRDatum_HeratNorth',
           'esriSRProjCS_S_JTSK_Ferro_Krovak',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinWinnebago',
           'esriSRProjCS_MONREF1997UTMZone50N',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_129E',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_174E',
           'esriSRSpheroid_Uranus',
           'esriSRProjCS_NAD1983HARN_StatePlane_Kentucky_South_FIPS_1602_Ft',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_174W',
           'esriSRDatum_Fahud', 'esriSRProjCS_MoznetUTM_37S',
           'esriSRDatum_Bern1938',
           'esriSRGeoTransformation_NZGD1949_To_NZGD2000_2_7PAR',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Dane_Meters',
           'esriSRGeoCS_BukitRimpah', 'esriSpatialRelationDisjoint',
           'esriSRProjCS_NADMichSPCS_MICentralOld',
           'esriSRGeoTransformation_ATS_1977_To_NAD_1983_CSRS98_NTv2_PEI',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinColumbia',
           'esriSRProjCS_Pulkovo1942GK_20N',
           'esriSRProjCS_NAD1927CGQ77MTM_4SCoPQ',
           'esriSRGeoCS_Tristan1968',
           'esriSRGeoTransformation_Yacare_To_WGS1984',
           'esriSRProjCS_NAD1983HARN_WISCRSCalumetFtUS',
           'esriSRProjCS_Sphere_Aitoff', 'esriSRGeoCS_Gandajika1970',
           'esriSRGeoTransformation_Naparima1972_To_WGS1984_3',
           'esriSRDatum_NWL9D',
           'esriSRProjCS_NAD1927_CGQ77_Quebec_Lambert',
           'esriSRProjCS_Pulkovo1942GK_30N',
           'esriSRProjCS_WGS1984UTM_34S',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Fillmore_Feet',
           'esriSRDatum_FatuIva1972', 'esriSRProjCS_NAD1983UTM_21N',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaDouglas',
           'E_GEOMETRY_NONTRIANGLEFAN',
           'esriSRProjCS_NAD1983HARNSPCS_OHSouthFT',
           'esriSRProjCS_NAD1983HARN_WISCRSDunnM',
           'esriSRProjCS_WGS1984UTM_34N',
           'esriSRGeoTransformation_Egypt1907_To_WGS1984',
           'esriSRGeoTransformation_ITRF_2000_To_ITRF_2005_1',
           'esriSRProjCS_WGS1984UTM_4S',
           'esriSRProjCS_NAD1927CGQ77MTM_8SCoPQ',
           'IRelationalOperator3D2', 'esriSRSpheroid_Hough1960',
           'esriSRGeoTransformation_Estonia1992_To_ETRF1989',
           'esriSRProjCS_NAD1983QuebecLambert',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinKenosha',
           'esriSRProjCS_WGS1984UTM_4N',
           'esriSRProjCS_WGS1984_Complex_UTM_Zone_23N',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_93E',
           'esriSRGeoTransformation_South_Asia_Singapore_To_WGS_1984',
           'esriSRGeoTransformation_Bogota_To_MAGNA_region_8_CF',
           'esriSRGeoTransformation_Observ_Meteor_1965_To_WGS_1984_1',
           'esriSRProjCS_DGN1995IndonesiaTM3Zone49_1',
           'esriSRProjCS_DGN1995IndonesiaTM3Zone49_2',
           'IRelationalOperator',
           'esriSRGeoTransformation_Fort_Thomas_1955_To_WGS_1984',
           'esriSRDatum_NAD1983HARNAdj_WisconsinPrice',
           'IAffineTransformation2D', 'esriConstructOffsetNoSimplify',
           'esriSRSpheroid_GRS1980Adj_WisconsinWood',
           'esriSRGeoCS_SaturnPandora', 'esriSRProjCS_WGS1972UTM_42S',
           'esriSRProjCS_WGS1972UTM_42N',
           'esriSRProjCS_NAD1983SPCS_SC', 'esriSRGeoCS_Arc1960',
           'esriSRGeoCS_Pulkovo1942_adj58',
           'esriSRProjCS_NAD1983HARNSPCSPennsylvaniaSouth',
           'esriSRProjCS_NAD1927UTM_9N',
           'esriSRProjCS_NAD1983CSRS_UTMZone9N',
           'esriSRProjCS_NAD1983HARN_StatePlane_Utah_South_FIPS_4303_Ft_Intl',
           'esriProjectionHintNoHorizonCheck',
           'esriSRProjCS_NAD1927_3TM_111',
           'esriSRProjCS_FortDesaix_UTM_20N',
           'esriSRProjCS_NAD1927_3TM_117',
           'esriMGRSMode_NewWith180InZone01',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_99E',
           'esriSRParameter_YScale', 'esriSRVertDatum_AHD_Tasmania',
           'esriSRGeoTransformation_VoirolUnifie1960_To_WGS1984',
           'esriSRGeoTransformation_Samoa_1962_To_WGS_1984_3',
           'esriSRGeoTransformation_Samoa_1962_To_WGS_1984_2',
           'esriSpatialRelationOverlap',
           'esriSRVertDatum_StewartIsland',
           'esriSRProjCS_NAD1983HARN_WISCRSBayfieldM',
           'esriSRVertDatum_EGM84Geoid',
           'esriSRProjCS_NAD1927SPCS_GAEast',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaFillmore',
           'esriSRGeoCS_Xian1980', 'esriSRDatum_PointeNoire',
           'esriSRProjCS_NAD1983SPCS_AK4FT',
           'esriSRProjCS_NAD1927Def1976MTM_15',
           'esriSRProjCS_NAD1927Def1976MTM_14',
           'esriSRProjCS_NAD1927Def1976MTM_17',
           'esriSRProjCS_NAD1927Def1976MTM_16',
           'esriSRProjCS_NAD1927Def1976MTM_11',
           'esriSRProjCS_NAD1927Def1976MTM_10',
           'esriSRProjCS_NAD1927Def1976MTM_13',
           'esriSRProjCS_NAD1927Def1976MTM_12',
           'esriSRGeoTransformation_NTFParis_To_WGS1984',
           'esriMultiPatchFollowingRingMask',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Richland_Meters',
           'esriSRDatum_WakeEniwetok1960', 'esriSRProjection_Bonne',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Kewaunee_Meters',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Lincoln_Feet',
           'esriSRProjection3Type', 'esriSRProjCS_NAD1927SPCS_CAV',
           'esriGeometryRing',
           'esriSRProjection_HotineAzimuthNatOrigin',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Pipestone_Meters',
           'esriSRSpheroid_GRS1967',
           'esriSRGeoTransformation_RD83_To_ETRS_1989_1',
           'esriSRProjCS_NAD1983SPCS_MOEastFT',
           'esriSRProjCS_NAD1983HARN_WISCRSSaukM',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_135E',
           'esriSRVertCS_DanskNormalNul',
           'esriSRGeoTransformation_Pointe_noire_To_WGS_1984_2',
           'esriSRGeoTransformation_Pointe_noire_To_WGS_1984_3',
           'esriSRProjCS_NAD1983HARN_StatePlane_Virginia_South_FIPS_4502_Ft',
           'esriSRGeoTransformation_Bogota_To_MAGNA_region_6_CF',
           'esriSRProjCS_WGS1984UTM_11S',
           'esriSRProjCS_WGS1984UTM_11N',
           'esriSRProjCS_NAD1983_CSRS98_UTM_Zone_18N',
           'esriSRSpheroid_ModifiedFischer',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Sibley_Feet',
           'esriSRProjCS_NAD1983SPCS_PRStCroix',
           'esriSRProjCS_PortoSanto1936_UTM28N',
           'esriSRVertCS_KOCConstructionDatum',
           'esriSRGeoCS_Karbala1979Polservice',
           'esriSRDatum_Locodjo1965', 'esriSRVertCS_WGS1984',
           'esriSRProjCS_ETRS1989ETRS_GK31FIN',
           'esriSRGeoTransformation_Tahaa_1954_To_RGPF_1',
           'esriSRGeoCS_Ocotepeque1935', 'esriSRDatum_Naparima1972',
           'esriSRGeoCS_AzoresOccidentalIslands1939',
           'esriSRProjCSType',
           'esriSRProjCS_Xian1980_3_Degree_GK_CM_117E',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Brown_Meters',
           'esriSRProjCS_NAD1983HARNSPCS_KSNorthFT',
           'esriSRVertCS_Alicante', 'esriSRDatum_NeptuneLarissa',
           'esriSRProjCS_NAD1983SPCS_WASouth',
           'esriSRProjCS_NGNUTM_39N',
           'esriSRProjCS_NAD1927_Alaska_Albers_Feet',
           'esriSRSpheroid_GRS1980Adj_MinnesotaRock',
           'esriSRDatum_EuropeanDatum1950ED77',
           'esriSRGeoTransformation_NAD_1983_TO_HARN_PV',
           'esriSRDatum_Camacupa', 'esriSRGeoCS_NeptuneTriton',
           'esriSRProjCS_NZGD1949_Collingwood_Circuit',
           'esriSRProjection_Fuller', 'esriSRDatum_Mahe1971',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaMahnomen',
           'E_GEOMETRY_BUFFERFAILURE', 'esriSRDatum_UranusJuliet',
           'esriSRProjCS_JGD2000_UTM_Zone_52N',
           'esriSRDatum_Ammassalik1958',
           'esriSRProjCS_ELD1979_UTM_Zone_32N',
           'esriSRProjCS_NZGD2000_Bluff_Circuit',
           'E_GEOMETRY_M_OUT_OF_BOUNDS',
           'esriSRProjCS_NAD1927SPCS_NVCentral',
           'esriSRDatum_Kalianpur1937', 'IUnitChangeTransformation',
           'esriSRProjCS_WGS1972UTM_31N', 'IVerticalDatum',
           'esriSRGeoCS_EasterIsland1967', 'esriSRDatum_Canton1966',
           'esriSRDatum_Bellevue', 'esriBufferConstructionSideEnum',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Marinette_Meters',
           'esriSRProjCS_NAD1927SPCS_UTCentral',
           'esriSRGeoCS_HitoXVIII1963',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Portage_Feet',
           'esriProjectionHintForceSplittingInGCS',
           'esriSRDatum_ITRF2005',
           'esriSRGeoTransformation_Antigua1943_To_WGS1984',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Marquette_Meters',
           'esriSRVertCS_Landesnivellement1902', 'esriSRGeoCS_KKJ',
           'esriSRGeoCS_Guam1963',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Wilkin_Meters',
           'esriSRDatum_MOP78', 'esriSRProjCS_NAD83_CSRS_UTM_14N',
           'esriSRGeoTransformation_IGM_1995_To_ETRS_1989_1',
           'esriSRProjection_Albers',
           'esriMultiPatchProblemCaseRingMask',
           'esriSRGeoTransformation_NZGD_2000_To_WGS_1984_1',
           'esriSRProjCS_MGIAustriaGKM31', 'esriSRGeoCS_NTFParis',
           'esriSRProjCS_MGIAustriaGKM34',
           'esriSRProjCS_Xian1980_3_Degree_GK_CM_96E',
           'esriSRProjCS_LKS1994', 'esriSRProjCS_BelgeLambert1972',
           'esriSRProjCS_WGS1972UTM_36N',
           'esriSRSpheroid_GRS1980Adj_MinnesotaRedwood',
           'esriSRGeoTransformation_IGM_1995_To_WGS_1984_1',
           'esriSRGeoCS_Douala1948',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Pennington_Meters',
           'esriSRProjCS_NAD1983SPCS_WYWest', 'esriSRDatum_OSNI_1952',
           'esriSRProjCS_WGS1972UTM_36S',
           'esriSRProjCS_LisboaHayfordGaussIGEOE',
           'esriSRGeoTransformation_Chatham_Island_1971_To_WGS_1984',
           'esriSRSpheroid_Australian',
           'esriSRVertDatum_NivellementGeneralDuLuxembourg',
           'esriSRDatum_BesselNamibia',
           'esriSRGeoTransformation_Leigon_To_WGS1984',
           'esriSRProjCS_NAD1983SPCS_WYEastFT',
           'esriSRProjCS_AGD1966_ISG_56_1',
           'esriSRProjCS_AGD1966_ISG_56_2',
           'esriSRProjCS_AGD1966_ISG_56_3',
           'esriSRProjCS_NZGD1949_Poverty_Bay_Circuit',
           'esriNoEndAttributes', 'esriSRProjCS_NAD1927SPCS_GAWest',
           'esriSRDatum_NAD1983HARNAdj_WisconsinMarathon',
           'esriSRProjCS_NAD1927Def1976UTM_15N',
           'esriSRProjCS_NAD1983SPCS_MNNorthFT',
           'esriSRDatum_NAD1983HARNAdj_WisconsinStCroix',
           'esriSRProjCS_NAD1983SPCS_IANorth',
           'esriSRGeoTransformation_ISTS_073_1969_To_WGS_1984',
           'esriSRSpheroid_GRS1980Adj_MinnesotaMorrison',
           'esriSRProjCS_NAD1927GuatemalaNorte', 'esriSRDatum_Agadez',
           'esriSRProjCS_Mhast_offshore_UTMZone32S',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaSherburne',
           'esriSRProjCS_NAD1983SPCS_NMCentralFT',
           'esriSRProjCS_NAD1983SPCS_WICentral',
           'esriSRProjCS_Indonesia1974UTM_46S',
           'esriSRGeoTransformation_Maupiti_1983_To_WGS_1984_1',
           'esriMultiPatchRingType',
           'esriSRProjCS_Indonesia1974UTM_46N',
           'esriSRProjCS_NAD1983HARN_StatePlane_Kentucky_FIPS_1600',
           'esriExtendEmbeddedAtFrom',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Cass_North_Meters',
           'esriArcCounterClockwise',
           'esriSRProjCS_NAD1983SPCS_ALWestFT',
           'esriSRProjCS_Beijing1954_3_Degree_GK_CM_129E',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Washington_Feet',
           'E_GEOMETRY_TOLERANCE_TOO_LARGE_FOR_EXTENT',
           'esriSRProjCS_NAD1983_Texas_Centric_Mapping_System_Albers',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Red_Lake_Feet',
           'esriSRGeoTransformation_NAD_1983_HARN_To_WGS_1984_3',
           'esriSRGeoTransformation_NAD_1983_HARN_To_WGS_1984_2',
           'esriSRProjCS_NAD1983HARN_WISCRSColumbiaM',
           'ITransformation3DGEN', 'IPRJSpatialReference',
           'esriSRUnit_InternationalRod',
           'esriSRProjCS_WGS1984_TM_6_NE',
           'esriSRGeoTransformation_SIRGAS_To_WGS_1984_1',
           'esriSRProjCS_NAD1983HARN_WISCRSPierceM',
           'esriSRGeoCS_UranusMiranda', 'esriSRUnit_Centimeter',
           'esriSRProjCS_NAD1983_StatePlane_Kentucky_FIPS_1600',
           'esriRightTurn', 'esriSRProjCS_PDO1993UTM_40N',
           'esriSRGeoCS_GrandCayman1959',
           'esriSRSpheroid_Everest1962', 'esriSRSpheroid_Everest1967',
           'esriSRProjCS_GDM2000PulauPinang_SeberangPerai',
           'IEnvelope', 'esriSRGeoTransformation_DHDN_To_ETRF1989',
           'esriSRDatum_ReseauGeodesiqueFrancaisGuyane1995',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaDouglas',
           'esriSRGeoTransformation_Kerguelen_Island_1949_To_WGS_1984_1',
           'esriSRProjCS_Douala1948AEFWest',
           'esriSRGeoTransformation_Timbalai1948_To_WGS1984',
           'esriSRVertCS_NAD1983',
           'esriSRProjCS_NAD1983HARN_WISCRSGrantFtUS',
           'esriSRProjCS_NAD1983HARNWisconsinTM_USFt',
           'IAngularUnitEdit',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinVernon',
           'esriSRProjCS_NAD1927SPCS_MINorth',
           'esriSRProjCS_WGS1984UTM_32S', 'esriSRGeoCS_VitiLevu1916',
           'esriSRDatum_Manoca', 'esriSRDatum_MGI',
           'esriSRProjCS_WGS1984UTM_32N',
           'esriSRGeoCS_EuropeanDatum1950ED77', 'ILine',
           'esriSRProjCS_WGS1984UTM_2N',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaCarlton',
           'esriSRGeoCS_JohnstonIsland1961', 'esriSRGeoCS_Neptune',
           'esriMultiPatchOuterRing',
           'esriSRProjCS_Pulkovo1942GK_26N',
           'esriSRProjCS_NAD1983MTM_9', 'esriSRProjCS_WGS1984UTM_2S',
           'esriSRGeoCS_SaintPierre_et_Miquelon1950',
           'esriSRDatum_Mars1979',
           'esriSRProjCS_IGC1962CongoTMZone18',
           'esriSRProjCS_IGC1962CongoTMZone12',
           'esriSRProjCS_Tokyo_UTM52N',
           'esriSRProjCS_IGC1962CongoTMZone16',
           'esriSRProjCS_IGC1962CongoTMZone14',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Ozaukee_Meters',
           'esriSRProjCS_AGD1984AMG_58', 'esriSRProjCS_AGD1984AMG_55',
           'esriSRProjCS_AGD1984AMG_54', 'esriSRProjCS_AGD1984AMG_57',
           'esriSRProjCS_AGD1984AMG_56', 'esriSRProjCS_AGD1984AMG_51',
           'esriSRProjCS_AGD1984AMG_50', 'esriSRProjCS_AGD1984AMG_53',
           'esriSRProjCS_AGD1984AMG_52', 'E_GEOMETRY_NONVECTOR3D',
           'PolygonArray',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Rock_Feet',
           'E_GEOMETRY_INVALIDCONSTRUCTION',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaStLouisCentral',
           'esriSRProjCS_WGS1972UTM_19S',
           'esriSRProjCS_WGS1972UTM_2N', 'esriSRParameter_Azimuth',
           'esriSRVertDatum_Helsinki1960',
           'esriSRProjCS_JGD2000_Japan_Zone_3',
           'esriPatchTypeTriangleFan', 'esriSRProjCS_WGS1972UTM_19N',
           'esriSRProjCS_WGS1972UTM_2S',
           'esriSRProjCS_JGD2000_Japan_Zone_1',
           'esriSRGeoCS_UranusBianca', 'esriSRGeoCS_RGPF',
           'esriSRVertCS_MooreaSAU1981', 'esriSRDatum_Serindung',
           'esriSRProjCS_NAD1983HARN_StatePlane_New_Mexico_East_FIPS_3001_Ft',
           'esriSRDatum_Pulkovo1942_adj58',
           'esriSRProjCS_NAD1983HARNSPCS_ILWestFT',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaStLouisSouth',
           'E_GEOMETRY_PARAMETER_TOO_SMALL',
           'esriSRProjCS_Barbados1938BritishWIndies',
           'esriSRProjCS_Xian1980_GK_Zone_16',
           'esriSRProjCS_NAD1983SPCS_CAIIFT',
           'esriSRProjCS_Pulkovo1995GK_11N', 'esriSRGeoCS_Datum73',
           'esriSRGeoTransformation_Luxembourg_1930_To_WGS_1984_1',
           'esriSRGeoTransformation_Luxembourg_1930_To_WGS_1984_2',
           'esriSRGeoTransformation_IRENET95_To_ETRS_1989',
           'BezierCurve', 'esriSRProjCS_Xian1980_GK_Zone_13',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_42E',
           'esriSRProjCS_ETRS1989_Poland_CS2000_Zone_5',
           'esriSRProjCS_ETRS1989_Poland_CS2000_Zone_7',
           'esriSRProjCS_ETRS1989_Poland_CS2000_Zone_6',
           'esriSRGeoTransformation_ETRF1989_To_WGS1984',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaBeltramiSouth',
           'esriSRDatum_EuropeanDatum1987',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaOttertail',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaKittson',
           'esriSRProjCS_SierraLeone1968_UTM_Zone_28N',
           'esriSRProjCS_ETRF1989UTM_38N',
           'esriSRGeoTransformation_NAD_1927_To_WGS_1984_34',
           'E_SPATIALREFERENCE_NOTAUNIT',
           'esriSRGeoTransformation_NAD_1927_To_WGS_1984_32',
           'esriSRGeoTransformation_NAD_1927_To_WGS_1984_33',
           'esriSRGeoTransformation_NAD_1927_To_WGS_1984_30',
           'esriSRGeoTransformation_ITRF_1993_To_ITRF_2000_1',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_50',
           'esriSRProjCS_WGS1984AsiaLambert',
           'esriSRDatum_Lisbon1890', 'esriSRProjCS_WGS1984UTM_13S',
           'esriSRDatum_Grenada1953',
           'esriSRDatum_NAD1983HARNAdj_WisconsinPolk',
           'esriCurveDensifyByDeviation', 'esriSRVertDatum_BlackSea',
           'esriSRProjCS_LKS1992_Latvia_TM',
           'esriSRVertCS_HonDau1992',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Jefferson_Feet',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Nobles_Feet',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Grant_Meters',
           'esriSRDatum_NAD1983HARNAdj_WisconsinVernon',
           'esriSRProjCS_NAD1983HARN_StatePlane_Florida_North_FIPS_0903_Ft',
           'esriSRProjCS_WGS1984UTM_13N',
           'esriSRGeoCS_JupiterAdrastea',
           'esriSRDatum_SapperHill1943', 'esriSRDatum_NADMichigan',
           'esriSRSpheroid_GRS1980Adj_MinnesotaWright',
           'esriSRProjCS_NAD1983HARN_WISCRSSheboyganM',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinLincoln',
           'esriSRDatum_Rauenberg1983', 'esriSRGeoCS_MarsDeimos',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Dane_Feet',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Goodhue_Feet',
           'esriSRGeoCS_ST87Ouvea',
           'esriSRProjCS_NEA74_Noumea_UTM_58S',
           'esriSRSpheroid_GRS1980Adj_WIKenoshaMilwaukeeOzaukeeRacine',
           'esriEnvelopeVertexLL', 'esriSRGeoCS_NAD1983_NSRS2007',
           'esriSRProjCS_NAD1983OntarioMNRLambert',
           'esriEnvelopeVertexLR', 'esriSRVertDatum_BandarAbbas',
           'esriSRDatum_Naparima1955', 'esriShapePoint',
           'esriSRVertDatum_Lagos1955', 'esriShapePolygon',
           'esriSRProjCS_NAD1983SPCS_LANorthFT',
           'esriSRProjCS_NAD1983HARN_WISCRSMarquetteM',
           'esriSRDatum_NAD1983HARNAdj_WisconsinSauk',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Shawano_Meters',
           'esriCurveIteratorStopAtPartEndPoints',
           'esriSRGeoCS_Accra',
           'esriSRProjCS_NAD1983HARN_UTM_Zone_11N',
           'esriProjectionHintCheckGCSHorizon',
           'esriSRSpheroid_UranusAriel',
           'esriGeometryEmbeddingDimension', 'esriSRGeoCS_ETRS1989',
           'esriSRProjCS_Accra_TM_1_NW', 'esriMonotinicityEnum',
           'esriSRProjCS_Barbados1938BarbadosGrid',
           'esriSRGeoCS_NADMichigan',
           'esriSRGeoTransformation_ED_1950_To_WGS_1984_41_NTv2_Spain_v2',
           'esriSRDatum_SaturnPrometheus', 'esriSRVertCS_Fao',
           'esriSRDatum_VoirolUnifie1960',
           'esriSRProjCS_ED1950_ED77_UTM_41N',
           'esriSRProjCS_NAD1983SPCS_FLNorth',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Washington_Meters',
           'esriSRDatum_Conakry1905',
           'esriSRProjCS_NAD1927_UTM_Zone_59N',
           'esriSRProjCS_ETRS1989AustriaLambert',
           'esriSRGeoTransformation_Aratu_To_WGS_1984_7',
           'esriSRProjCS_NAD1983HARNSPCS_IDEast',
           'esriSRDatum_Israel',
           'esriSRProjCS_NAD1983HARNCaliforniaTealeAlbers',
           'esriSRProjCS_NAD1927SPCS_MICentral', 'esriSRGeoCS_Tete',
           'esriSRProjCS_Xian1980_3_Degree_GK_CM_81E',
           'esriSRProjCS_Pulkovo1995GK_8N',
           'esriSRGeoTransformation_Belge_1950_Brussels_To_Belge_1950',
           'esriSRProjCS_NAD1983SPCS_AKNorth', 'IEnumVertex',
           'esriSRProjCS_NAD1927SPCS_MOCentral',
           'esriSRProjCS_ObservatorioMeteorologico1965_Macau_Grid',
           'IMolodenskyTransformation',
           'esriSRProjCS_Palestine1923IsraelCSGrid',
           'esriSRVertDatum_FlannanIsles',
           'esriSRProjCS_PRS1992PhilippinesZoneIII',
           'esriSRProjCS_NAD1927SPCS_OKNorth', 'esriSRDatum_DOS1968',
           'esriSRVertDatum_Landeshohennetz1995',
           'esriSRProjCS_NAD1983UTM_16N',
           'esriSRGeoTransformation_PDO_1993_To_WGS_1972',
           'esriSRProjCS_NAD1983HARN_WISCRSChippewaM',
           'esriSRGeoCS_Maupiti1983',
           'esriSRProjCS_World_TwoPointEquidistant',
           'esriSRProjCS_NZGD2000_Amuri_Circuit',
           'esriSRProjCS_WGS1984WorldMercator',
           'esriSRProjCS_WGS1984BLMZone17NftUS',
           'esriSRProjCS_Xian1980_3_Degree_GK_Zone_26',
           'esriSRProjCS_Kalianpur1975_UTM42N',
           'esriSRDatum_NAD1983HARNAdj_WisconsinShawano',
           'esriSRProjCS_NAD1983SPCS_UTSouthFT',
           'esriSRProjCS_Pulkovo1942GK_11N',
           'esriSRProjCS_Arc1950_UTM_Zone_36S',
           'esriSRProjCS_WGS1984UPS_South', 'esriShapeTypeLast',
           'esriSRProjCS_NAD1927SPCS_NYLongIsland',
           'esriSRGeoCS_OSU1986F', 'esriSRProjCS_WGS1972UTM_38N',
           'esriSRProjCS_WGS1972UTM_38S',
           'esriSRProjCS_VoirolDegreeNAlgerieAncienne',
           'esriSRGeoTransformation_AGD_1984_To_GDA_1994_3',
           'esriSRProjCS_NAD1983CSRSNWTLambert',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Menominee_Feet',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Jackson_Meters',
           'esriSRProjCS_NAD1927SPCS_OKSouth',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaStLouisNorth',
           'esriSRGeoTransformation_IGN63_Hiva_Oa_To_WGS_1984_1',
           'esriSRProjCS_MGIAustriaGKWest',
           'esriSRGeoTransformation_IGN63_Hiva_Oa_To_WGS_1984_2',
           'esriSRGeoCS_TernIsland1961',
           'esriSRSpheroid_GRS1980Adj_MinnesotaIsanti',
           'esriSRProjCS_SaintPierre_et_Miquelon_1950_UTM_21N',
           'esriSRGeoTransformation_Chatham_Islands_1979_To_WGS_1984_1',
           'esriSRProjCS_NAD1983HARNSPCS_ORNorth',
           'esriSRProjCS_WGS1984UPS_North',
           'esriSRProjCS_NAD1983USA_EquiConic',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinMonroe',
           'esriSRProjCS_PeruEast',
           'esriSRProjCS_NAD1983SPCS_CONorth',
           'esriSRDatum_NAD1983HARNAdj_WisconsinBrown',
           'esriSRProjCS_NAD1983BLMZone14NftUS',
           'esriSRProjCS_NAD1983SPCS_LASouthFT',
           'esriSRProjCS_NAD1927Def1976UTM_17N',
           'esriSRProjCS_NAD1983HARN_WISCRSWaukeshaFtUS',
           'esriSRGeoTransformation_Tahaa_1954_To_WGS_1984_2',
           'IParameter', 'esriSRProjCS_Sphere_Times',
           'esriSRDatum_NAD1983HARNAdj_WisconsinWood',
           'ISpatialReference4',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaNicollet',
           'ISpatialReference2', 'ISpatialReference3',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaMeeker',
           'esriSRDatum_KoreanDatum1985', 'esriSRProjCS_ColombiaEast',
           'esriSRProjCS_NAD1983HARN_Adj_WI_EauClaire_Meters',
           'esriGeometryTriangleStrip',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaScott',
           'esriSRGeoTransformation_Batavia_To_WGS_1984_2',
           'esriSRGeoTransformation_Batavia_To_WGS_1984_3',
           'esriSRProjCS_NordSahara1959VoirolUnifieSud',
           'esriSRProjCS_NAD1983HARNSPCS_WYEastFT',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinTaylor',
           'esriSRProjCS_Hjorsey1955_UTM_Zone_28N',
           'esriSRProjCS_NZGD1949SouthIsland',
           'esriSRGeoTransformation_StLucia1955_To_WGS1984',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Wright_Meters',
           'esriSRProjCS_NAD1983SPCS_MINorthFT', 'esriShapeHasZs',
           'esriSRSpheroid_GRS1980Adj_MinnesotaSwift',
           'esriSRProjCS_NAD1927SPCS_NJ',
           'esriSRProjCS_NAD1927SPCS_NH', 'esriSRVertDatum_DHHN1992',
           'esriSRProjCS_NAD1927SPCS_NC',
           'esriSRParameter_ScaleFactor',
           'esriSRProjCS_NAD1983HARNSPCS_ILWest',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Beltrami_South_Feet',
           'esriSRGeoTransformation_Graciosa1948_To_WGS1984_1',
           'esriSRGeoCS_Katanga1955',
           'esriSRVertDatum_Newlyn_OrkneyIsles',
           'esriSRGeoTransformation_Palestine_1923_To_WGS_1984_2x',
           'esriSRProjCS_WGS1972UTM_60S',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaDodge',
           'E_SPATIALREFERENCE_NOTAGCS', 'esriSRProjCS_ETRS1989_LAEA',
           'esriSRProjCS_NAD1983HARN_StatePlane_California_IV_FIPS_0404_Ft',
           'PointArray', 'E_GEOMETRY_FILLET_FAILED',
           'esriSRProjCS_WGS1972UTM_60N',
           'esriSRProjCS_NZGD1949_UTM_Zone_58S',
           'esriSRProjCS_MPoralokoUTM_32S',
           'esriSRProjCS_REGVEN_UTM_Zone_18',
           'esriSRProjCS_REGVEN_UTM_Zone_19',
           'E_GEOMETRY_CANT_QUERY_ON_VERTEX_ATTRIBUTES',
           'esriSRProjCS_NAD1983SPCS_NVEast', 'esriSRGeoCS_Venus2000',
           'esriSRProjCS_MPoralokoUTM_32N',
           'esriSRProjCS_WGS1984UTM_30N', 'esriSRDatum_Trinidad1903',
           'esriSRSpheroid_GRS1980Adj_MinnesotaRenville',
           'esriSRSpheroid_GRS1980Adj_MinnesotaJackson',
           'esriSRProjection_Mercator', 'esriGeometryType',
           'esriSRProjCS_WGS1984UTM_30S',
           'esriSRProjCS_NAD1983HARNSPCS_LANorth',
           'esriSRProjCS_NAD1983SPCS_NYCentral',
           'esriSRGeoCS_Kousseri', 'esriSRProjCS_NAD1927SPCS_WANorth',
           'esriSRProjCS_Pulkovo1942GK_28N',
           'esriSRProjCS_Beijing1954_3_Degree_GK_CM_81E',
           'IFunctionalSurface2', 'esriSRProjCS_NAD1927UTM_18N',
           'esriSRDatum_JupiterMetis',
           'esriSRGeoTransformation_D48_To_WGS_1984_Primorska',
           'esriSRGeoTransformation_NAD_1983_TO_HARN_IN',
           'esriSRGeoTransformation_NAD_1983_TO_HARN_IL',
           'esriSRSpheroid_Clarke1880_IntlFt',
           'esriSRGeoTransformation_NTF_Paris_To_RGF_1993_1',
           'esriSRSpheroid_NeptuneProteus',
           'esriSRProjCS_IGC1962CongoTMZone30',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_54E',
           'esriSRSpheroid_UranusBelinda', 'esriSRGeoCS_UranusPortia',
           'esriSRProjCS_NAD1983HARN_WISCRSOzaukeeFtUS',
           'esriSRProjCS_NAD1927SPCS_NYWest',
           'esriSRProjCS_SudanUTM_36N',
           'esriSRGeoTransformation_Garoua_To_WGS_1972_BE_1',
           'esriSRProjCS_NAD1983SPCS_MOWestFT',
           'esriSRGeoTransformation_Guam_1963_To_HARN_Rota',
           'esriSRGeoCS_NorddeGuerreParis',
           'esriSRProjCS_NAD1983HARN_WISCRSAshlandFtUS',
           'esriSRProjCS_NAD1983SPCS_GAEast',
           'esriSRProjCS_NAD1983SPCS_ALEast', 'esriSRDatum_Datum73',
           'esriSRDatum_NZGD_2000',
           'esriSRProjCS_Beijing1954_3_Degree_GK_Zone_36',
           'esriSRProjCS_Beijing1954_3_Degree_GK_Zone_37',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaRice',
           'esriSRProjCS_Beijing1954_3_Degree_GK_Zone_35',
           'esriSRProjCS_Beijing1954_3_Degree_GK_Zone_32',
           'esriSRProjCS_Beijing1954_3_Degree_GK_Zone_33',
           'esriSRProjCS_Beijing1954_3_Degree_GK_Zone_30',
           'esriSRProjCS_Beijing1954_3_Degree_GK_Zone_31',
           'esriSRProjCS_NAD1983HARN_WISCRSLaCrosseFtUS',
           'esriSRProjCS_Beijing1954_3_Degree_GK_Zone_38',
           'esriSRProjCS_Beijing1954_3_Degree_GK_Zone_39',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Lafayette_Feet',
           'esriGeometryServerMessageCode_Project',
           'esriSRVertCS_GHA',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaSwift',
           'esriSRGeoTransformation_ITRF_1997_To_ITRF_2000_1',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Calumet_Feet',
           'esriSRDatum_SIRGAS', 'esriSRPole_None',
           'esriSRGeoTransformation_Amersfoort_To_WGS1984',
           'esriSRDatum_JohnstonIsland1961',
           'esriSRGeoCS_Trinidad1903', 'esriSRGeoCS_Carthage_Degrees',
           'esriSRProjCS_Zanderij_Suriname_TM', 'esriSRGeoCS_Tahiti',
           'esriSRSpheroid_GRS1980Adj_MinnesotaItascaNorth',
           'esriSRGeoTransformation_NZGDd_1949_To_WGS_1984_2',
           'esriSRGeoTransformation_PD83_To_WGS_1984_1_NTv2',
           'esriSRProjCS_ED_1950_UTM_33N', 'esriSRDatum_Samoa1962',
           'esriSRGeoTransformation_Tokyo_To_JGD_2000_1',
           'esriSRProjCS_S_JTSK_Ferro_Krovak_East_North', 'ICurve3D',
           'ISegmentGraphCursor', 'esriSRPole_OutsideBoundary',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinJefferson',
           'esriSRGeoTransformation_Pulkovo1942_To_WGS1984_8',
           'esriSRGeoTransformation_Pulkovo1942_To_WGS1984_9',
           'esriSRSpheroid_ModifiedEverest',
           'esriSRProjCS_Argentina_4', 'esriSRProjCS_Argentina_5',
           'esriSRProjCS_Argentina_6', 'esriSRDatum_POSGAR94',
           'esriSRProjCS_Argentina_1', 'esriSRProjCS_Argentina_2',
           'esriSRProjCS_Argentina_3',
           'esriSRGeoTransformation_AGD_1966_To_WGS_1984_16',
           'esriSRProjCS_NAD1983HARN_Adj_MN_McLeod_Feet',
           'esriSRGeoTransformation_Reunion_1947_To_WGS_1984_2',
           'esriSRGeoTransformation_ED1987_To_WGS1984_1',
           'IAffineTransformation3D',
           'esriSRVertCS_NormaalAmsterdamsPeil',
           'esriSRProjCS_RT38_75_gon_V', 'ISegmentID',
           'esriSRProjection_MillerCylindrical',
           'esriSRProjCS_NZGD2000_Jacksons_Bay_Circuit',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaDakota',
           'esriSRProjCS_Sphere_Stereographic',
           'esriSRVertCS_Baltic1980', 'esriSRVertCS_Baltic1982',
           'esriSRGeoTransformation_AGD_1984_To_WGS_1984_9_NTv2',
           'esriSRDatum_NAD1983HARNAdj_WisconsinDoor',
           'esriSRProjCS_LaCanoaUTM_21N', 'esriSRGeoCS_AinElAbd1970',
           'esriSRProjCS_NAD1983HARN_UTM_Zone_13N',
           'esriSRGeoTransformation_NAD_1983_TO_HARN_TN',
           'UnitChangeTransformation', 'esriSRDatum_Reykjavik1900',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_117E',
           'esriSRGeoTransformation_Pohnpei_To_WGS_1984',
           'esriSRGeoTransformation_AGD1966_To_GDA1994',
           'esriSRDatum_Maupiti1983', 'esriSRGeoCS_Qatar',
           'esriSRProjCS_World_PlateCarree', 'esriMRelationBasicMask',
           'esriSRDatum_Mauritania1999', 'esriSRDatum_Albanian1987',
           'esriSRDatum_AlaskanIslands',
           'esriSRDatum_SelvagemGrande1938',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Iron_Meters',
           'esriSRVertDatum_HongKongPrincipalDatum',
           'esriSRGeoCS_Hjorsey1955', 'esriSRDatum_AmersFoort',
           'esriSRProjCS_SWEREF99_15_00',
           'esriSRProjCS_WGS1984UTM_51S',
           'esriSRProjCS_WGS1984UTM_9S', 'esriSRVerticalDatumType',
           'esriSRProjCS_Pulkovo1942GK_2N',
           'esriSRProjCS_WGS1984UTM_51N',
           'esriSRGeoTransformation_D48_To_ETRS_1989_Zahodna_Slovenia',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Winnebago_Meters',
           'esriGeometryLine', 'esriSRParameter_ZShift',
           'esriSRUnit_British1936Foot',
           'esriSRSpheroid_GRS1980Adj_MinnesotaOttertail',
           'esriSRProjCS_NAD1983SPCS_WYWestCentralFT',
           'AffineTransformation3D', 'esriSRProjCS_SWEREF99_21_45',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_39E',
           'esriSRProjCS_NAD1983SPCS_VANorth',
           'esriSRProjCS_Pulkovo1942GK_28',
           'esriSRProjCS_Pulkovo1942GK_29',
           'esriSRProjCS_Pulkovo1942GK_24',
           'esriSRProjCS_Pulkovo1942GK_25',
           'esriSRProjCS_Pulkovo1942GK_26',
           'esriSRProjCS_Pulkovo1942GK_27',
           'esriSRProjCS_Pulkovo1942GK_20',
           'esriSRProjCS_Pulkovo1942GK_21',
           'esriSRProjCS_Pulkovo1942GK_22',
           'esriSRProjCS_Pulkovo1942GK_23',
           'esriSRProjection_GoodeHomolosine',
           'esriSRParameter_ZAxisRotation', 'esriSRGeoCS_Dabola',
           'esriNonSimpleUnclosedRing',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaWinona',
           'esriSRProjCS_Kalianpur1975India_III',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Monroe_Meters',
           'esriSRDatum_ChathamIsland1971',
           'esriSRDatum_NAD1983HARNAdj_WisconsinLanglade',
           'esriSRGeoTransformation_NZGD1949_To_NZGD2000_7Parm',
           'esriSRProjCS_Kalianpur1975India_IIb',
           'esriSRProjCS_Kalianpur1975India_IIa',
           'esriSRGeoTransformation_NGO1948_To_WGS1984_1',
           'esriSRProjCS_Arc1950_UTM_Zone_34S',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Wadena_Meters',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Itasca_South_Feet',
           'IEnumCurve', 'esriSRProjCS_ColombiaWestWestZone',
           'esriSRProjCS_AratuUTM_23S',
           'esriSRProjCS_Mhast_onshore_UTMZone32S',
           'E_GEOMETRY_NO_CURVES_IN_JSON',
           'esriSRProjCS_NAD1983SPCS_NMEast',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Cook_South_Feet',
           'esriSRSpheroid_Jupiter', 'esriSRVertDatum_Oostende',
           'esriSRProjCS_NAD1983HARN_StatePlane_Arizona_Central_FIPS_0202_Feet_Intl',
           'esriSRProjCS_EstonianCS1992', 'esriSRVertCS_KuwaitPWD',
           'esriSRProjCS_Pulkovo1942GK_13N',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_168W',
           'esriSRProjCS_NAD1927CGQ77MTM_9SCoPQ',
           'esriSRProjCS_WGS1984NSIDC_SeaIcePolarStereoN',
           'esriSRSpheroid_SphereEMEP',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_168E',
           'esriSRGeoTransformation_POSGAR_To_WGS_1984_1',
           'esriSRGeoTransformation_D48_To_WGS_1984_Severovzhodna_Slovenia',
           'esriSpatialRelationExBoundary',
           'esriSRGeoTransformation_Piton_des_Neiges_To_RGR_1992_1',
           'esriSRProjCS_NAD1983HARN_WISCRSMilwaukeeM',
           'esriSRGeoCS_Reseau_de_Reference_des_AntillesFrancaises1991',
           'esriSRProjCS_AinElAbd1970UTM_39N',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Grant_Feet',
           'esriSRProjCS_SapperHill1943UTM_20S',
           'esriSRDatum_MarsPhobos', 'esriSRDatum_UranusCordelia',
           'esriSRGeoCS_KOC', 'esriSRDatum_GrandCayman1959',
           'esriSRGeoCS_Helmert1906', 'esriSRGeoCS_SIRGAS',
           'IProjectedCoordinateSystem',
           'esriSRSpheroid_GRS1980Adj_WisconsinBarron',
           'esriSRGeoCS_Qatar1948',
           'esriSRProjCS_NAD1983HARN_Guam_Map_Grid',
           'esriSRGeoCS_CentreSpatialGuyanais1967',
           'esriSRVertDatum_NGF_IGN78', 'esriSRDatum_ChosMalal1914',
           'esriSRDatum_PointeGeologiePerroud1950',
           'esriGeometryNoDimension', 'esriSRDatum_Makassar',
           'esriSRProjCS_DGN1995IndonesiaTM3Zone54_1',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_30E',
           'esriSRGeoCS_Samboja', 'E_GEOMETRY_WKT_TOO_LONG',
           'esriSRProjCS_WGS1984BLMZone15NftUS',
           'esriSRProjCS_NAD1983SPCS_HI_1',
           'esriSRProjCS_NAD1983SPCS_HI_3',
           'esriSRProjCS_NAD1983SPCS_HI_2',
           'esriSRProjCS_NAD1983SPCS_HI_5',
           'esriSRProjCS_NAD1983SPCS_HI_4',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaKanabec',
           'esriSRVertDatum_Nelson',
           'esriSRProjCS_NAD1983HARN_WISCRSManitowocM',
           'esriSRProjCS_NAD1983HARN_WISCRSMarquetteFtUS',
           'esriGeometryNetworkVertexInfo',
           'esriSRSpheroid_GRS1980Adj_WisconsinBayfield',
           'esriSRProjCS_Xian1980_GK_CM_135E',
           'esriSRSpheroid_GRS1980Adj_MinnesotaBecker',
           'esriGeometryTriangles', 'esriSRVertDatum_Lyttleton',
           'esriSRProjCS_NAD1983SPCS_MOEast',
           'esriSRProjCS_NAD1983HARNSPCS_WYEastCentral',
           'esriSRGeoCS_Tananarive1925Paris', 'esriSRUnit_ClarkeYard',
           'esriSRProjCS_ETRS1989_UTM_Zone_39N',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Big_Stone_Feet',
           'esriSRGeoTransformation_Jouik_1961_To_WGS_1984_1',
           'esriSRGeoCS_Beduaram', 'esriSRSpheroid_UranusOberon',
           'esriSRProjCS_Xian1980_3_Degree_GK_Zone_29',
           'esriSRProjCS_Xian1980_3_Degree_GK_Zone_28',
           'esriSRProjCS_Trinidad1903_Trinidad_Grid_Feet_Clarke',
           'esriSRProjCS_Xian1980_3_Degree_GK_Zone_25',
           'esriSRProjCS_Xian1980_3_Degree_GK_Zone_27',
           'esriSRGeoTransformation_Campo_Inchauspe_To_POSGAR_1994_1',
           'wkbPolygon', 'esriSRProjCS_AmericanSamoa1962SPCS_AS',
           'esriSRProjCS_RT90_5_gon_V',
           'esriSRProjCS_NAD1983HARNSPCS_FLNorth',
           'esriSRProjCS_RT90_5_gon_O', 'esriSRVertCS_Lyttleton',
           'esriSRGeoTransformation_NAD_1983_To_HARN_Iowa',
           'esriSRVertCS_Newlyn_OrkneyIsles',
           'esriSRGeoTransformation_OSNI_1952_To_WGS_1984_1',
           'esriSRProjCS_LGD2006_UTMZone34N',
           'esriSRProjCS_NAD1983HARN_StatePlane_California_III_FIPS_0403_Ft',
           'esriSRGeoTransformation_Hungarian_1972_To_ETRS_1989_1',
           'esriSRProjCS_Bissau_UTM_Zone_28N', 'esriSRDatum_NAD1927',
           'esriSRGeoTransformation_NAD_1983_TO_HARN_KY',
           'esriSRProjCS_WGS1984_Australian_Antarctic_Lambert',
           'esriSRGeoTransformation_Ain_El_Abd_To_WGS_1984_5',
           'esriSRGeoTransformation_Ain_El_Abd_To_WGS_1984_4',
           'esriSRGeoTransformation_NAD_1983_TO_HARN_KS',
           'esriSRGeoTransformation_Ain_El_Abd_To_WGS_1984_6',
           'IProjectedCoordinateSystem5',
           'IProjectedCoordinateSystem4',
           'esriSRProjCS_WGS1972UTM_48N',
           'IProjectedCoordinateSystem3',
           'IProjectedCoordinateSystem2',
           'esriSRProjCS_WGS1972UTM_6N', 'esriSRParameter3Type',
           'esriSRSpheroid_GRS1980Adj_MinnesotaCarlton',
           'esriSRProjCS_FranceI', 'esriSRProjCS_WGS1972UTM_6S',
           'esriSRProjCS_UWPP_2000_PAS_6', 'esriSRGeoCS_CH1903',
           'esriSRProjCS_WGS1972UTM_48S',
           'esriSRGeoTransformation_Antigua_1943_To_WGS_1984_NGA',
           'esriSRParameter_FalseEasting',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Richland_Feet',
           'esriSRGeoTransformation_Hong_Kong_1980_To_WGS_1984_1',
           'esriSRGeoTransformation_RT90_To_ETRS_1989_2',
           'esriSRGeoTransformation_Bogota_To_MAGNA_Region_2_MB',
           'esriSRGeoCS_UranusBelinda',
           'esriSRSpheroid_SaturnEnceladus', 'ITopologicalSegment2',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_9',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_8',
           'esriSRSpheroid_SaturnPandora',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaSherburne',
           'esriSRGeoCS_Mahe1971',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_7',
           'esriSRGeoCS_Korea2000',
           'esriSRProjCS_NAD1983HARNSPCS_WYWestCentral',
           'esriSRProjCS_RT90_25GonWest',
           'esriSRProjCS_Kasai1953CongoTMZone24',
           'esriSRProjCS_Kasai1953CongoTMZone22',
           'esriSRProjCS_NAD1983HARNSPCS_AZCentral',
           'esriSRGeoCS_ReseauGeodesique_de_la_Reunion1992',
           'esriSRGeoTransformation_Reykjavik_1900_To_WGS_1984_1',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Florence_Meters',
           'wkbXDR',
           'esriSRGeoTransformation_NAD_1983_HARN_To_WGS_1984_Saipan',
           'esriSRGeoTransformation_RGNC_1991_To_WGS_1984_1',
           'esriSRProjCS_ETRF1989UTM_34N',
           'esriSRProjCS_WGS1972UTM_22S',
           'esriSRProjCS_VoirolUnifieDegreeNAlgerie',
           'esriSRProjCS_WGS1972UTM_22N',
           'esriSRProjCS_UWPP_2000_PAS_8',
           'esriSRProjCS_UWPP_2000_PAS_7',
           'esriSRGeoTransformation_IGN72_Nuku_Hiva_To_RGPF_1',
           'esriSRProjCS_UWPP_2000_PAS_5',
           'esriSRGeoTransformation_Johnston_Island_1961_To_WGS_1984',
           'esriSRGeoTransformation_RT90_To_ETRS_1989_1',
           'esriSRGeoCS_Graciosa1948',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Le_Sueur_Feet',
           'esriSRProjCS_ED_1950_UTM_31N',
           'esriSRProjCS_NAD1983HARN_StatePlane_California_II_FIPS_0402_Ft',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_114E',
           'esriDivideIntoParts', 'esriSRGeoCS_SainteAnne',
           'esriSRProjCS_MerchichDegreeNordMaroc',
           'esriSRVertDatum_JapaneseStandardLevellingDatum1949',
           'esriSRProjCS_NAD1983HARN_WISCRSShawanoFtUS',
           'esriSRDatum_NeptuneTriton',
           'esriSRParameter_LongitudeOfOrigin',
           'esriSRDatum_DatumGeodesiNasional1995',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaWadena',
           'esriSRGeoCS_IGN63HivaOa', 'esriSRProjection_Robinson',
           'E_GEOMETRY_NOT_Z_AWARE', 'esriSRGeoCS_Reykjavik1900',
           'esriSRGeoCS_EuropeanDatum1950',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Freeborn_Meters',
           'esriSRGeoCS_Estonia1992', 'esriSRGeoCS_Estonia1997',
           'IVector', 'esriSRProjCS_Pulkovo1995GK_15N',
           'esriSRVertCS_IGLD1955',
           'esriSRSpheroid_GRS1980Adj_MinnesotaCassNorth',
           'esriSRGeoTransformation_AGD84_TO_GDA94_NTV2_Queensland',
           'esriSRGeoCS_Struve1860', 'esriSRGeoCS_Clarke1880SGA',
           'esriSRDatum_Arc1950', 'esriSRProjCS_Indonesia1974UTM_52N',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Juneau_Meters',
           'esriSRGeoTransformation_Bogota_To_WGS_1984_region_4_CF',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Sawyer_Feet',
           'esriSRGeoCS_AssumedGeographic1',
           'esriSRProjCS_Indonesia1974UTM_52S',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_84E',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_51E',
           'esriSRProjCS_NAD1983SPCS_MISouth',
           'esriSRSpheroid_Hughes1980',
           'esriSRProjCS_WGS1984S_AsiaLambert',
           'esriSRSpheroid_GRS1980Adj_MinnesotaFaribault',
           'esriSRGeoTransformation_NAD_1983_TO_HARN_VA',
           'esriSRProjCS_SelvagemGrande1938_UTM28N',
           'esriSRProjCS_NAD1983HARN_StatePlane_North_Dakota_North_FIPS_3301_Ft_Intl',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Nobles_Meters',
           'IAffineTransformation2D2', 'esriSRProjCS_SaoBraz_UTM26N',
           'esriSRVertDatum_NGF_IGN69',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Barron_Meters',
           'esriSRProjCS_NAD1983SPCS_AK8FT',
           'esriSRSpheroid_AuthalicSphere',
           'esriSRProjCS_NZGD2000_Mount_Eden_Circuit',
           'esriMRelationCurveEmpty',
           'esriSRGeoTransformation_Moznet_To_WGS1984',
           'esriSRProjCS_NAD1983HARN_WISCRSLincolnM',
           'esriSRGeoTransformation_NAD1927_CGQ77_To_NAD1983_CSRS',
           'esriSRDatum_NAD1983HARNAdj_WICalumetFondduLacOutagamieWinnebago',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Clearwater_Feet',
           'esriSRProjCS_WGS1984UTM_53S',
           'esriSRProjCS_WGS1984UTM_53N',
           'esriSRProjCS_Pulkovo1942GK_4N',
           'esriSRProjCS_NAD1927SPCS_NYCentral',
           'esriSRProjCS_WGS1984NPoleLAEAEurope',
           'esriSRGeoTransformation_Azores_Oriental_1940_To_WGS_1984_1',
           'esriSRVertCS_PDOHeightDatum1993', 'esriSRVertCS_Piraeus',
           'esriSRProjCS_NAD1983SPCS_AK1FT', 'esriSRGeoCS_POSGAR94',
           'esriSRDatum_NAD1983HARNAdj_WisconsinIron',
           'esriSRProjCS_StKitts1955BritishWIndies',
           'esriGeometryNull', 'esriSRProjCS_NAD1983MTM_11',
           'esriSRProjCS_Pampa_del_Castillo_Argentina_2',
           'esriSRProjCS_Indonesia1974UTM_48S',
           'esriSRGeoTransformation_Datum_73_To_ETRS_1989_1',
           'esriSRProjCS_WGS1984AfricaLambert',
           'esriSRProjCS_NAD1983HARNSPCS_TN',
           'esriSRProjCS_NAD1983SPCS_KSNorth',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_165E',
           'esriSRProjCS_NZGD2000_Chatham_Island_Circuit',
           'esriSRProjCS_Xian1980_3_Degree_GK_CM_111E',
           'esriSRProjCS_NTFParis_LambertCorse',
           'esriSRDatum_PortoSanto1936', 'Point',
           'esriSRGeoCS_Helle1954', 'esriSRSpheroid_UranusUmbriel',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaJackson',
           'esriSRProjCS_CarthageNordTunisie',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Waseca_Feet',
           'esriSRProjCS_Pulkovo1942_58_3DegGKZone7',
           'esriSRProjCS_Pulkovo1942_58_3DegGKZone6',
           'esriSRProjCS_Pulkovo1942_58_3DegGKZone5',
           'esriSRVertDatum_Maputo',
           'esriSRProjCS_NAD1983HARN_WISCRSIowaFtUS',
           'esriSRProjCS_Xian1980_GK_CM_81E',
           'esriSRSpheroid_Clarke1880Benoit',
           'esriSRSpheroid_GRS1980Adj_WisconsinLaCrosse',
           'esriSRProjCS_NAD1983SPCS_OKSouthFT',
           'esriSRProjCS_Indian1975UTM_48N',
           'esriSRProjCS_CH1903_LV03', 'esriSRDatum_Xian1980',
           'esriSRProjCS_CorregoAlegreUTMZone22S', 'esriAttributeAll',
           'esriSRProjCS_NZGD1949_UTM_Zone_59S',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Wood_Feet',
           'esriSRProjCS_NAD1983HARN_WISCRSMarinetteFtUS',
           'esriSRProjCS_NAD1983HARN_StatePlane_Michigan_South_FIPS_2113_Feet_Intl',
           'esriSRGeoCS_WGS1972', 'esriSRProjCS_Pulkovo1942GK_15N',
           'esriSRGeoTransformation_AGD1984_To_GDA1994',
           'esriSRProjCS_NAD1983HARN_WISCRSMenomineeFtUS',
           'esriSRProjCS_NAD1983SPCS_VANorthFT',
           'esriSRProjCS_NAD1983HARN_WISCRSCrawfordFtUS',
           'esriSRDatum_EasterIsland1967',
           'esriSRProjCS_South_Yemen_GK_Zone_9',
           'esriSRProjCS_Pulkovo1942_58GUGiK80',
           'esriTurnDirectionEnum', 'esriSRDatum_Bogota',
           'esriSRDatum_NAD1983HARNAdj_WisconsinWashburn',
           'esriSRDatum_Indonesian1974',
           'esriSRGeoTransformation_PZ1990_To_WGS1984_GOST',
           'esriSRDatum_NAD1983HARNAdj_WisconsinMenominee',
           'esriSRGeoCS_AuthalicSphere_Intl1924',
           'esriSRGeoCS_GunungSegara',
           'esriSRProjCS_NAD1983SPCS_AKSouth',
           'esriSRProjCS_NAD1927BLM_15N',
           'esriSRGeoTransformation_Azores_Occidental_1939_To_WGS_1984_2',
           'esriSRGeoTransformation_Azores_Occidental_1939_To_WGS_1984_1',
           'esriSRGeoTransformation_OldHawaiian_To_WGS1984_5',
           'esriSRGeoTransformation_OldHawaiian_To_WGS1984_4',
           'esriSRGeoTransformation_OldHawaiian_To_WGS1984_3',
           'esriSRGeoTransformation_OldHawaiian_To_WGS1984_2',
           'IConstructDomainExtent',
           'esriConstructOffsetAccurateSimplify',
           'esriSRGeoTransformation_Voirol_1875_Paris_To_Voirol_1875',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Swift_Meters',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Roseau_Feet',
           'esriSRProjCS_MONREF1997UTMZone46N',
           'esriSRGeoTransformation_Qatar1974_To_WGS1984_1',
           'esriSRProjCS_MinnaUTM_32N', 'esriSRDatum_PSAD1956',
           'esriShapeMultiPatchM', 'IPolyline3', 'IPolyline2',
           'IPolyline5', 'IPolyline4', 'IPolyline6',
           'esriSRProjCS_NZGD2000_UTM_Zone_58S',
           'esriSRProjCS_MonteMarioItaly1', 'esriSRGeoCS_WGS1972BE',
           'esriSRProjCS_MonteMarioItaly2',
           'esriSRProjCS_AfgooyeUTM_38N',
           'esriSRProjCS_NAD1983HARN_WISCRSCrawfordM',
           'esriSRDatum_DeirEzZor',
           'esriSRProjCS_ATS1977PrinceEdwardIs',
           'IConversionNotation',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaChippewa', 'IRay',
           'esriSRGeoTransformation_Beduaram_To_WGS_1972_BE_1',
           'esriSRProjCS_NAD1927SPCS_ILEast',
           'esriSRGeoCS_IGC1962_6th_Parallel_S',
           'esriSRDatum_Clarke1880', 'esriSRGeoCS_NeptuneThalassa',
           'esriSRProjCS_NAD1983HARNSPCS_TXSouth',
           'esriSRProjCS_NAD1927SPCS_RI',
           'esriSRSpheroid_GRS1980Adj_WisconsinWashington',
           'esriSRProjCS_NAD1983HARNSPCS_KSNorth',
           'esriSRProjection_TransverseMercator',
           'esriSRProjCS_Pulkovo1995GK_21N',
           'esriSRGeoTransformation_ATS_1977_To_WGS_1984_1',
           'esriSRGeoTransformation_ATS_1977_To_WGS_1984_2',
           'esriSRGeoTransformation_ATS_1977_To_WGS_1984_3',
           'IGeometryBridge2', 'esriSRProjection_EckertII',
           'esriSRProjection_EckertIV',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Pierce_Meters',
           'esriSRProjCS_Philippines_V',
           'esriSRProjCS_PDO1993UTM_39N',
           'esriSRProjCS_Beijing1954_3_Degree_GK_CM_93E',
           'esriSRProjCS_NAD1927CGQ77MTM_6SCoPQ',
           'esriSRVertCS_AHD_Tasmania',
           'esriSRGeoTransformation_SAD1969_To_WGS1984_13',
           'esriSRGeoTransformation_SAD1969_To_WGS1984_12',
           'esriSRGeoTransformation_SAD1969_To_WGS1984_11',
           'esriSRGeoTransformation_SAD1969_To_WGS1984_10',
           'esriSRProjCS_Philippines_I',
           'esriSRGeoTransformation_Bogota_To_MAGNA_region_4_CF',
           'esriSRProjCS_Cape_UTM_Zone_35S',
           'esriSRProjCS_Indian1960UTM_49N',
           'esriSRProjCS_NAD1983SPCS_GAEastFT',
           'esriSRGeoTransformation_Hjorsey_1955_To_WGS_1984',
           'E_GEOMETRY_CANT_EVALUATE_RELATION_MATRIX',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Lincoln_Feet', 'IRing',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Jackson_Meters',
           'esriSRDatum_IERSTerrestrialReferenceFrame2000',
           'esriSRProjCS_NAD1983HARNSPCS_NDNorth',
           'esriSRProjCS_NGO1948UTM35N', 'BufferConstruction',
           'esriSRProjCS_Graciosa1948_UTM26N',
           'esriSRProjCS_SouthAmerican1969UTM_25S',
           'esriSRVertCS_DHHN1992',
           'esriSRGeoCS_QatarNationalDatum1995',
           'esriSRProjCS_CarthageSudTunisie',
           'esriSRProjCS_NAD1983HARNSPCS_MAMainland', 'IWin32Shape2',
           'esriSRPrimeM_Rome',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Anoka_Feet',
           'esriSRProjCS_Greenland1996_UTMZone22N',
           'esriSRGeoCS_ST84_Ile_des_Pins',
           'esriSRGeoTransformation_NAD_1983_TO_HARN_ME',
           'esriSRGeoTransformation_NAD_1983_TO_HARN_MD',
           'esriSRProjCS_NAD1983SPCS_AZEastFT',
           'esriSRGeoTransformation_NAD_1983_TO_HARN_MO',
           'esriSRGeoTransformation_NAD_1983_TO_HARN_MN',
           'esriSRGeoTransformation_NAD_1983_TO_HARN_MI',
           'esriSRProjCS_GreekGrid',
           'esriSRGeoTransformation_NAD_1983_TO_HARN_MS',
           'esriSRProjCS_NGO1948_Bergenhalvoen',
           'esriSRVertCS_HaTien1960',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinRusk',
           'esriSRGeoCS_MPoraloko', 'esriSRDatum_ISTS073_1969',
           'esriSRGeoTransformation_Chos_Malal_1914_To_Campo_Inchauspe',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaHennepin',
           'esriSRProjCS_NAD1983SPCS_Guam',
           'esriSRProjCS_WGS1972UTM_4S',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinRacine',
           'esriSRProjCS_WGS1972UTM_4N',
           'esriGeometryServerMessageCode_Difference',
           'E_GEOMETRY_PROJECTDATUM', 'esriShapeImportNonTrusted',
           'esriSRProjCS_AzoresOriental1940_UTMZone26N',
           'esriSRDatum_Helle1954', 'esriSRDatum_Vientiane1982',
           'GeographicCoordinateSystem',
           'esriSRGeoCS_UranusDesdemona', '_esriSegmentInfo',
           'esriSRGeoCSType', 'IConstructCircularArc2',
           'esriSRProjCS_Tahaa_UTM_5S',
           'esriSRProjCS_Kalianpur1975India_I',
           'esriSRProjCS_NAD1983SPCS_TXNorthCentFT',
           'esriSRProjCS_Gulshan303BangladeshTM',
           'esriSRProjCS_NAD1983UTM_12N', 'ICompareCoordinateSystems',
           'esriSRUnit_50KilometerLength',
           'esriSRProjCS_WGS1972UTM_20S',
           'esriSRProjCS_NAD1983HARN_WISCRSPepinFtUS',
           'E_GEOMETRY_Z_OUT_OF_BOUNDS',
           'esriSRProjCS_ETRF1989UTM_36N',
           'esriSRProjCS_NAD83_CSRS98_UTM_15N',
           'esriSRGeoTransformation_ED_1950_ED77_To_WGS_1984_6',
           'esriSRGeoTransformation_ED_1950_ED77_To_WGS_1984_4',
           'esriSRGeoTransformation_ED_1950_ED77_To_WGS_1984_5',
           'esriSRGeoTransformation_ED_1950_ED77_To_WGS_1984_2',
           'esriSRGeoTransformation_ED_1950_ED77_To_WGS_1984_3',
           'esriValueLevel',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Walworth_Feet',
           'esriSRProjCS_WGS1972UTM_20N',
           'esriSRProjCS_NAD1983HARN_StatePlane_Wisconsin_North_FIPS_4801_Feet',
           'esriSRProjCS_DGN1995_UTMZone51N',
           'esriSRGeoTransformation_Ascension_Island_1958_To_WGS_1984',
           'esriSRProjCS_NAD1983HARNSPCS_GAEast',
           'esriGeometryNetworkVertexInfo3D',
           'esriSRGeoTransformation_ITRF_2000_To_NAD_1983_HARN',
           'esriSRProjCS_DGN1995_UTMZone51S', 'esriShapeHasNormals',
           'esriSRProjCS_Philippines_II',
           'esriSRSpheroid_GRS1980Adj_MinnesotaLincoln',
           'esriSRGeoTransformation_DHDN_To_WGS_1984_4_NTv2',
           'esriSRGeoCS_Luzon1911', 'esriSRDatum_CH1903',
           'esriSRGeoCS_Plessis1817',
           'esriSRProjCS_ProvSAmerDatumUTMZone21S',
           'esriSRVertCS_TahaaSAU2001',
           'esriSRGeoTransformation_Astro_1952_To_WGS_1984',
           'IControlPrecision2', 'IControlPrecision3',
           'esriSRProjCS_Pulkovo1995GK_17N', 'esriSRPrimeM_Stockholm',
           'esriSRProjCS_NAD1983SPCS_AZCentralFT',
           'esriSRProjCS_ETRS1989_UTM_Zone_27N', 'ITransform3D',
           'esriSRProjCS_Indonesia1974UTM_50S',
           'esriSRProjection_Orthographic',
           'esriSRVertDatum_Stornoway', 'esriSRGeoCS_SVY21',
           'E_SPATIALREFERENCE_BADVCSID',
           'esriSRProjCS_NZGD1949_Mount_York_Circuit',
           'esriSRProjCS_NAD1983SPCS_NMCentral',
           'esriSRProjCS_Indonesia1974UTM_50N',
           'esriSRProjCS_Sphere_MillerCylindrical',
           'esriSRGeoCS_Indonesian1974', 'SegmentOverlapMask',
           'esriSRUnit_Meter', 'esriSRProjCS_NAD1983HARNSPCS_WASouth',
           'esriSRProjCS_Sphere_EckertI',
           'esriSRProjCS_SWEREF99_15_45', 'esriMCurveRelationEnum',
           'esriSRDatum_SaturnEpimetheus',
           'esriSRProjCS_Sphere_EckertV',
           'esriSRGeoTransformation_IGN53_Mare_To_RGNC_1991_93_2',
           'esriSRGeoTransformation_IGN53_Mare_To_RGNC_1991_93_1',
           'esriSRDatum_SantoDOS1965',
           'esriSRProjCS_NAD1983SPCS_CAIV',
           'esriSRGeoTransformation_Guam_1963_To_WGS_1984_Saipan',
           'IParameterEdit', 'esriSRProjCS_NAD1927CGQ77UTM_18N',
           'esriSRProjCS_NAD1983SPCS_CAII',
           'esriGeometryServerMessageCode_GetDistance',
           'esriSRSpheroid_OSU1991A', 'esriGeometryExtrapolateBefore',
           'esriSRProjCS_WGS84ARC_SystemZone15',
           'esriSRProjCS_WGS1984UTM_55S', 'esriSRVertCS_ETRS1989',
           'esriSRProjCS_WGS1984UTM_55N',
           'esriSRProjCS_AustriaFerroCentral',
           'esriSRProjCS_Pulkovo1942GK_6N',
           'esriSRUnit_InternationalLink',
           'esriSRGeoTransformation_Bermuda1957_To_WGS1984',
           'esriSRGeoCS_Point58', 'esriEnvelopeVertex',
           'esriSRDatum_Egypt1907',
           'esriSRGeoTransformation_MGI_To_WGS1984',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinBurnett',
           'esriSRProjCS_IGNAstro1960_UTMZone28N',
           'esriSRProjCS_NAD1983HARNSPCS_VT',
           'esriSRDatum_FaroeDatum1954',
           'esriSpatialRelationExClementini',
           'esriSRProjCS_ETRS1989ETRS_GK28FIN',
           'esriSRGeoTransformation_WGS_1984_To_Observ_Meteor_1965_2',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_102E',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinDane',
           'esriSRProjCS_NAD1983HARNSPCS_OHNorthFT',
           'esriSRProjCS_Xian1980_3_Degree_GK_Zone_38',
           'esriSRDatum_Massawa',
           'esriSRGeoTransformation_Hungarian_1972_To_WGS_1984_1',
           'esriSRGeoTransformation_Hungarian_1972_To_WGS_1984_2',
           'esriSRProjCS_WGS84ARC_SystemZone11',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_153E',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_61',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Cottonwood_Feet',
           'esriSRProjCS_NZGD1949_Amuri_Circuit',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Ottertail_Feet',
           'esriSRProjCS_NAD1983HARN_StatePlane_Texas_South_Central_FIPS_4204_Ft',
           'esriSRGeoCS_MONREF1997',
           'esriSRProjCS_Xian1980_GK_CM_87E',
           'esriSRProjCS_MonteMarioRomeItaly2',
           'esriSRProjCS_MonteMarioRomeItaly1',
           'esriSRProjCS_NAD1983SPCS_CAIFT', 'esriSRVertCS_Gisborne',
           'esriSRGeoTransformation_Datum73_To_WGS1984_1',
           'esriSRGeoTransformation_Datum73_To_WGS1984_2',
           'esriSRDatum_Fischer1960', 'esriSRDatum_Fischer1968',
           'ProjectiveTransformation2D',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaDakota',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_24E',
           'esriGeometryServerMessageCode_FindSRByWKID',
           'esriSRProjCS_Pulkovo1995GK_5',
           'esriSRProjCS_Pulkovo1995GK_4',
           'esriSRProjCS_NAD1983SPCS_HI_3FT',
           'esriSRProjCS_Pulkovo1995GK_6',
           'esriSRGeoCS_UranusCressida', 'esriSegmentEllipticArc',
           'esriSRProjCS_Pulkovo1995GK_3',
           'esriSRProjCS_Pulkovo1995GK_2',
           'esriSRProjCS_NAD1983SPCS_NHFT',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaJackson',
           'IEnumCurve2', 'esriSRProjCS_Pulkovo1995GK_8',
           'IProjectiveTransformation2DGEN',
           'esriSRGeoTransformation_Lisbon_To_WGS_1984_4',
           'esriSRGeoTransformation_Saint_Pierre_et_Miquelon_1950_To_WGS_1984_1',
           'esriSRGeoTransformation_Lisbon_To_WGS_1984_2',
           'esriSRGeoTransformation_Lisbon_To_WGS_1984_3',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Mille_Lacs_Meters',
           'esriSRProjCS_Pulkovo1942GK_17N',
           'esriSRGeoTransformation_Makassar_To_WGS_1984_1',
           'esriSRProjCS_NAD1983HARN_WISCRSWoodM',
           'esriSRDatum_Clarke1866AuthalicSphere',
           'esriSRGeoCS_ObservMeteor1939',
           'esriSRProjCS_MhastUTM_32S',
           'esriSRProjCS_NAD1927SPCS_AZCentral',
           'esriSRProjCS_NAD1927SPCS_OHSouth',
           'E_GEOMETRY_INVALIDRINGTYPE',
           'esriSRProjCS_MONREF1997UTMZone48N',
           'esriSRSpheroid_NWL9D', 'esriProjectionHintDefault',
           'esriSRProjCS_NAD1927CaliforniaTealeAlbers',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaYellowMedicine',
           'esriSRPrimeM_Bogota', 'esriSRDatum_JupiterThebe',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinBarron',
           'esriSRProjCS_NAD1983SPCS_COCentral',
           'esriSRProjCS_NAD1983SPCS_CAVI',
           'esriSRVertDatum_Alicante', 'esriSRProjCS_NAD1983_3TM_120',
           'esriSRDatum_Clarke1880Benoit',
           'esriSRProjCS_NSIDC_EASEGridNorth',
           'esriSRProjCS_NTFParis_LambertZoneIII',
           'esriSRGeoCS_WarOffice',
           'esriSRProjCS_NAD1983HARN_WISCRSWaukeshaM',
           'esriSRGeoTransformation_Combani_1950_To_WGS_1984_1',
           'esriSRGeoCS_FortMarigot', 'esriSRGeoCS3Type',
           'esriSRDatum_NAD1983HARNAdj_WisconsinWaushara',
           'esriSRProjCS_NAD1983SPCS_ILEast', 'esriSRDatum_Sudan',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Winona_Meters',
           'GeometryArray', 'esriSRProjCS_Kalianpur1937_UTM45N',
           'esriSRProjCS_WGS1984BLMZone16NftUS',
           'esriSRProjCS_NordSahara1959VoirolUnifieNord',
           'esriSRGeoTransformation_IGN72_Grande_Terre_To_WGS_1984_1',
           'esriSRProjCS_NAD1983SPCS_WYWestCentral',
           'IProjectedCoordinateSystem4GEN',
           'esriSRGeoTransformation_Datum_73_To_ETRS_1989_3',
           'esriSRProjCS_GarouaUTM_33N',
           'esriSRProjCS_NAD1927BLM_17N',
           'esriSRGeoCS_GunungSegara_Jakarta',
           'esriSRSpheroid_Venus1985',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Houston_Meters',
           'esriSRProjCS_Pulkovo1995GK_23N', 'IConstructCurve',
           'esriSRGeoTransformation_Carthage_To_WGS_1984_2',
           'esriSRProjCS_ED_1950_UTM_29N',
           'esriSRProjCS_NAD1927SPCS_FLWest',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_54',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaLincoln',
           'esriSRDatum_SWEREF99', 'esriSRDatum_Batavia',
           'esriSRProjCS_NAD1927SPCS_WICentral',
           'esriSRProjCS_MAGNAColombiaBogota',
           'esriSRGeoTransformation_Pico_de_Las_Nieves_To_WGS_1984',
           'esriSRProjCS_NAD1927SPCS_AZEast',
           'esriSRProjCS_MerchichDegreeSahara',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Douglas_Feet',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Redwood_Meters',
           'esriSRProjCS_CSG1967UTMZone21N',
           'esriSRGeoTransformation_JGD_2000_To_WGS_1984',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaPennington',
           'esriSRDatum_SaoBraz', 'esriSRGeoCS_Moorea1987',
           'esriSRProjection_StereographicNorthPole',
           'esriSRGeoTransformation_RGF_1993_To_NTF_NTv2',
           'esriSRToleranceEnum', 'esriSRDatum_FD1958',
           'esriSRProjCS_NAD1983HARN_StatePlane_Michigan_Central_FIPS_2112_Feet_Intl',
           'esriSRProjCS_Beijing1954_3_Degree_GK_CM_87E',
           'PolylineArray', 'esriSRProjCS_SouthAmerican1969UTM_23S',
           'esriSRProjCS_NAD1983HARN_WISCRSWaupacaFtUS',
           'esriSRSpheroid_JupiterElara',
           'esriSRProjCS_NAD1983_10TM_AEP_Forest',
           'NTv2Transformation',
           'esriSRProjCS_WGS1984_Complex_UTM_Zone_29N',
           'esriSRProjCS_NAD1983SPCS_FLEastFT',
           'esriSRProjCS_NAD1983HARN_StatePlane_Massachusetts_Mainland_FIPS_2001_Ft',
           'esriSRDatum_NAD1983HARNAdj_WisconsinWaukesha',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Hubbard_Meters',
           'esriSRUnit_Degree', 'esriSRGeoCS_Venus1985',
           'esriSRSpheroid_Bessel1841', 'E_GEOMETRY_UNDEFINEDRING',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Trempealeau_Feet',
           'IGeometryBag', 'esriSRGeoCS_Garoua',
           'esriSRProjCS_NAD1927UTM_3N',
           'esriSRProjCS_Greenland1996_UTMZone20N',
           'esriSRProjCS_NAD1927SPCS_FLNorth',
           'esriSRGeoTransformation_Midway_1961_To_WGS_1984_old',
           'esriSRGeoTransformation_NAD27_DEF1976_TO_NAD83_NTV2_Ontario',
           'esriSRGeoTransformation_NAD_1983_TO_HARN_OH',
           'esriSRGeoTransformation_NAD_1983_TO_HARN_OK',
           'esriSRProjCS_Pulkovo1942_58_3DegGKZone8',
           'esriNonSimpleEmptyPart', 'esriSRVertDatum_SuleSkerry',
           'IPoint', 'esriSRProjCS_NAD1983CSRS_UTMZone7N',
           'esriShapeModifiers',
           'esriSRGeoCS_AzoresOrientalIslands1940',
           'esriSRProjCS_Xian1980_3_Degree_GK_CM_132E',
           'esriSRDatum_QatarNationalDatum1995',
           'esriSRProjCS_NAD1983HARN_Adj_WI_GreenLake_Feet',
           'esriSRDatum_GunungSegara',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Manitowoc_Meters',
           'esriSRDatum_VanuaLevu1915', 'Sphere',
           'esriSRDatum_SouthAsiaSingapore',
           'E_SPATIALREFERENCE_WRONG_UNIT_TYPE',
           'esriSRVertDatum_Napier', 'esriSRDatum_Douala',
           'esriSRSpheroid_NeptuneLarissa',
           'esriSRProjCS_Sphere_EckertIII',
           'esriSRProjCS_NAD1983SPCS_SDNorthFT',
           'esriSRProjCS_IGN56_Lifou_UTM_58S',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaMurray',
           'esriSRProjCS_ETRF1989UTM_30N',
           'IVerticalCoordinateSystem', 'esriSRVertCS_Stornoway',
           'esriSRSpheroid_Saturn',
           'esriSRProjCS_Zanderij1972UTM_21N',
           'esriSRGeoCS_NAD1983_CSRS',
           'esriSRSpheroid_GRS1980Adj_WisconsinForest',
           'esriSRGeoTransformation_StLawrence_TO_NAD_1983',
           'esriSRProjCS_NAD1983HARN_StatePlane_Iowa_South_FIPS_1402',
           'esriAttributeID', 'esriSRDatum_Neptune',
           'esriSRProjCS_NAD1983HARNSPCS_MT',
           'IAffineTransformation3DGEN', 'esriSRSpheroid_GRS1980',
           'esriSRProjCS_NAD1983UTM_10N',
           'esriSRProjCS_NAD1983HARNSPCS_MD', 'esriSRProjCS4Type',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Portage_Meters',
           'esriSRProjCS_WGS1972UTM_26S', 'esriSRDatum_OSGB1936',
           'esriSRProjCS_NAD1983HARNSPCS_CONorth',
           'esriSRDatum_S42Hungary',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaRedLake',
           'esriSRProjCS_WGS1972UTM_26N',
           'esriSRProjCS_NAD1983SPCS_LAOffshoreFT', 'LONG_PTR',
           'esriSRProjCS_Kertau_RSO_Malaya_Chains',
           'esriSRProjCS_KOC_Lambert',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Yellow_Medicine_Feet',
           'esriSRProjCS_ED_1950_UTM_35N',
           'esriSRProjCS_DGN1995_UTMZone53S',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Renville_Meters',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinStCroix',
           'E_GEOMETRY_PARTNOTFOUND',
           'esriSRGeoTransformation_TM75_To_ETRS_1989_2',
           'esriSRGeoTransformation_IRENET95_To_WGS_1984_1',
           'esriSRGeoTransformation_Tananarive_1925_Paris_To_Tananarive_1925',
           'LinearUnit', 'esriSRProjCS_WGS1984UTM_14N',
           'esriSRProjCS_NAD1983SPCS_NVCentralFT',
           'esriSRProjectionType',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Outagamie_Meters',
           'esriSRProjCS_RGPFUTMZone7S',
           'esriSRProjCS_Xian1980_GK_Zone_14',
           'esriSRVertCS_BlackSea',
           'esriSRProjCS_NAD1983SPCS_KYNorthFT',
           'esriSRProjCS_IRENET95_Irish_Transverse_Mercator',
           'esriSRGeoTransformation_IKBD_1992_To_WGS_1984_1',
           'esriSRDatum_HuTzuShan',
           'esriSRProjCS_NAD1983_BC_Environment_Albers',
           'esriSRGeoCS_ChathamIslands1979',
           'esriSRProjCS_NAD1983SPCS_INWestFT',
           'esriSRSpheroid_Indonesian',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Wright_Feet',
           'esriSRProjCS_Pulkovo1942_58GKZone3',
           'esriSRProjCS_Pulkovo1942_58GKZone4',
           'esriSRProjCS_Pulkovo1942_58GKZone5', 'esriMBetweenMinMax',
           'GeocentricTranslation',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaItascaNorth',
           'esriSRSpheroid_GRS1980Adj_MinnesotaLeSueur',
           'esriSRGeoTransformation_Camp_Area_To_WGS_1984',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaPine',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Hubbard_Feet',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Lyon_Feet',
           'esriSRGeoCS_CH1903Plus', 'esriSRDatum_Hanoi1972',
           'esriSRProjCS_NAD1983N_AmericaEquiConic',
           'esriSRProjCS_NAD1983HARN_WISCRSBrownM',
           'esriSRDatum_LomaQuintana', 'IESRISpatialReferenceGEN',
           'esriSRProjCS_NAD1983HARN_Adj_MN_McLeod_Meters',
           'esriSRProjCS_NAD1927SPCS_INEast',
           'esriSRDatum_NAD1983HARNAdj_WisconsinJackson',
           'esriSRProjCS_WGS1984UTM_57N', 'IEnvelopeGEN',
           'esriSRGeoCS_Jouik1961', 'esriMultiPatchInnerRing',
           'esriSRProjCS_WGS1984UTM_57S',
           'esriSRProjCS_NAD1983HARN_WISCRSJeffersonFtUS',
           'esriSRDatum_Montserrat1958',
           'esriSRProjCS_NAD1983HARN_Adj_WI_LaCrosse_Feet',
           'esriSRProjCS_NAD1983HARN_WISCRSDaneFtUS', 'ISegmentGraph',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaMcLeod',
           'esriSRGeoCS_WakeIsland1952',
           'esriSRProjCS_NAD1927SPCS_PuertoRico',
           'esriSRGeoCS_Anguilla1957',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Ozaukee_Feet',
           'esriSRGeoCS_Moznet', 'E_GEOMETRY_INTERIORPART',
           'esriSRVertDatum_CaspianSea',
           'E_GEOMETRY_NOT_BEZIERCURVES',
           'esriSRProjCS_NAD1983SPCS_WVSouth',
           'esriGeometry3DEmbeddingDimension',
           'esriSRProjCS_PSADUTM_18N', 'esriSRProjCS_PSADUTM_18S',
           'IEnumPointAndDistance',
           'esriSRProjCS_AzoresCentral1948_UTMZone26N',
           'esriSRDatum_Indian1954',
           'esriSRProjCS_Timbalai1948UTM_50N',
           'esriSRGeoTransformation_ED_1950_To_ETRS_1989_12_NTv2_Spain_v2',
           'esriMGRSMode_USNG', 'ISpheroidEdit',
           'SegmentOverlapLeftAtBeginning',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Koochiching_Feet',
           'esriSRProjCS_NAD1983SPCS_WISouth',
           'esriSRProjCS_NAD1983SPCS_MAIsland',
           'esriPatchTypeFirstRing',
           'esriSRSpheroid_GRS1980Adj_MinnesotaFreeborn',
           'esriSRProjCS_NAD1927SPCS_PANorth',
           'esriSRUnit_Indian1962Foot',
           'esriSRVertDatum_WGS1984Geoid',
           'esriSRSpheroid_GRS1980Adj_WisconsinChippewa',
           'esriSRVertDatum_MeanSeaLevel',
           'esriSRVertDatum_Landesnivellement1902',
           'esriSRProjCS_NordSahara1959UTM_30N',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Becker_Meters',
           'esriSRDatum_SaturnDione',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaGrant',
           'esriSRProjCS_NAD1983SPCS_WVNorthFT',
           'esriSRVertDatum_AIOC1995', 'esriSRDatum_Kusaie1951',
           'esriSRDatum_AinElAbd1970',
           'esriSRProjCS_MAGNAColombiaOesteOeste',
           'esriSRProjCS_NAD1983SPCS_OKSouth',
           'esriSRDatum_Graciosa1948', 'esriSRGeoCS_Samoa1962',
           'esriSRSpheroid_JupiterLysithea', 'esriSRDatum_LaCanoa',
           'esriSRUnit_USsurveyRod', 'esriSRGeoCS_IGN72NukuHiva',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Marinette_Feet',
           'esriSRDatum_Combani1950', 'esriSRProjCS_Germany_4',
           'esriSRProjCS_Germany_5',
           'esriSRProjCS_NAD1983HARN_WISCRSRacineM',
           'esriSRProjCS_Germany_3', 'esriSRProjCS_Germany_1',
           'esriSRProjCS_NAD1983HARNSPCS_NYCentral',
           'esriSRProjCS_NAD1983MichiganGeoRef',
           'esriSRDatum_Hartebeesthoek94',
           'esriSRVertDatum_NorthRona', 'esriSRGeoCS_DOS71_4',
           'esriSRGeoTransformation_Aratu_To_WGS_1984_11',
           'esriSRGeoTransformation_Aratu_To_WGS_1984_10',
           'esriSRToleranceIsTooSmall',
           'esriSRProjCS_NAD1983HARNSPCSNorthCarolinaUSFt',
           'esriSRProjCS_Beijing1954_3_Degree_GK_CM_123E',
           'esriSRProjCS_SIRGAS2000UTMZone18N',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Douglas_Meters',
           'esriSRProjCS_SIRGAS2000UTMZone18S',
           'esriSRGeoCS_Malongo1987',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinWashington',
           'esriSRGeoCS_KoreanDatum1995',
           'esriSRGeoTransformation_FD1958_To_WGS1984',
           'esriSRProjCS_SouthAmerican1969UTM_17S',
           'esriSRProjCS_MountDillon_Tobago_Grid',
           'esriSRProjCS_Xian1980_3_Degree_GK_CM_78E',
           'esriSRGeoCS_Pluto', 'esriSRProjCS_WGS1984N_PoleAziEqui',
           'esriSRProjCS_NAD1983HARN_StatePlane_Texas_Central_FIPS_4203_Ft',
           'esriMRelationUndeterminedDetailsMask',
           'esriSRSpheroid_GRS1980Adj_MinnesotaChippewa',
           'esriShapeType', 'esriSRProjCS_NAD1983HARNSPCS_NVWest',
           'esriSRProjCS_NAD1927SPCS_VT',
           'esriSRProjCS_Pulkovo1995GK_25N',
           'esriSRProjCS_ETRS1989_TM_Baltic_1993',
           'esriSRDatum_Greek',
           'esriSRProjCS_StLucia1955BritishWIndies',
           'esriSRProjCS_NAD1927SPCS_SCSouth',
           'esriSRGeoTransformation_St_Paul_To_WGS_1984_1',
           'esriSRGeoTransformation_Cape_Canaveral_To_WGS_1984',
           'IPositionVectorTransformation',
           'esriSpatialReferenceError', 'esriGeometrySphere',
           'esriSRProjCS_ETRS1989_UTM_Zone_33N',
           'AffineTransformation2D',
           'esriSRProjCS_SouthAmerican1969UTM_21N',
           'esriSRDatum_JupiterSinope',
           'esriSRGeoTransformation_PSAD_1956_To_REGVEN_1',
           'esriSRProjCS_Xian1980_3_Degree_GK_Zone_43',
           'esriSRProjCS_Xian1980_3_Degree_GK_Zone_42',
           'esriSRProjCS_Xian1980_3_Degree_GK_Zone_41',
           'IConstructCurve4', 'IConstructCurve3', 'IConstructCurve2',
           'esriSRProjCS_Xian1980_3_Degree_GK_Zone_45',
           'esriSRProjCS_Xian1980_3_Degree_GK_Zone_44',
           'esriSRProjCS_NAD1983SPCS_MAIslandFT',
           'esriSRGeoCS_StKitts1955', 'esriSRDatum_WGS1966',
           'esriSRProjCS_SouthAmerican1969UTM_21S',
           'esriSRVertDatum_EGM96Geoid',
           'esriSRProjCS_WGS1984UTM_38S',
           'esriSRProjCS_SierraLeone1924_New_War_Office_Grid',
           'esriSRGeoCS_PosicionesGeodesicasArgentinas',
           'esriSRGeoTransformation_D48_To_WGS_1984_Juzna_Slovenia',
           'esriSRVertCS_Douglas', 'esriSRProjCS_WGS1984UTM_38N',
           'esriSRProjCS_NAD1927UTM_5N',
           'esriSRProjCS_DGN1995IndonesiaTM3Zone53_1',
           'esriSRProjCS_DGN1995IndonesiaTM3Zone53_2',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Washington_Feet',
           'esriSRProjCS_LGD2006_UTMZone32N',
           'esriSRProjCS_WGS1984UTM_36N', 'IPointCollection2',
           'IPointCollection3', 'IPointCollection4',
           'IPointCollection5',
           'esriSRProjCS_Greenland1996_UTMZone26N',
           'esriSRGeoTransformation_NAD_1983_TO_HARN_AR',
           'IConstructGeometryCollection',
           'esriSRGeoTransformation_NAD_1983_TO_HARN_AZ',
           'esriSRGeoTransformation_Campo_Inchauspe_To_WGS_1984_2',
           'IEnvelope3D', 'esriSRGeoCS_UranusTitania',
           'esriMRelationCurveHasNoMs', 'esriSRProjCS_NAD1927UTM_10N',
           'esriSRGeoTransformation_NAD_1983_TO_HARN_AL',
           'esriSRGeoTransformation_OldHawaiian_To_WGS1984_1',
           'esriSRProjCS_WGS1984UTM_6S',
           'esriSRProjCS_NAD1983HARN_StatePlane_Oregon_South_FIPS_3602_Feet_Intl',
           'esriSRDatum_RGPF', 'esriSRProjCS_NAD1927SPCS_MISouth',
           'esriSRProjCS_StVincent1945BritishWIndies',
           'esriSRProjCS_WGS1972UTM_8N',
           'esriSRGeoCS_Clarke1880Benoit',
           'esriSRProjCS_WGS1972UTM_8S', 'esriSRGeoCS_NeptuneNereid',
           'esriSRGeoTransformation_OSGB1936_To_WGS1984_2',
           'esriSRProjCS_NZGD2000_UTM_Zone_60S',
           'esriSRGeoTransformation_OSGB1936_To_WGS1984_1',
           'ISegmentZ', 'esriSRProjCS_NAD1983HARN_WISCRSSt_CroixFtUS',
           'esriSRDatum_Indonesian', 'ISegmentM',
           'esriSRGeoTransformation_ED_1950_To_WGS_1984_28',
           'esriSRGeoTransformation_ED_1950_To_WGS_1984_29',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinDunn',
           'esriSRSpheroid_GRS1980Adj_MinnesotaGoodhue',
           'esriSRProjCS_WGS1984NPoleLAEACanada',
           'esriSRDatum_WarOffice',
           'esriSRGeoTransformation_ED_1950_To_WGS_1984_26',
           'esriSRGeoTransformation_ED_1950_To_WGS_1984_27',
           'esriSRGeoTransformation_ED_1950_To_WGS_1984_24',
           'esriSRGeoTransformation_ED_1950_To_WGS_1984_25',
           'esriSRSpheroid_Mercury', 'esriSRDatum_NeptuneThalassa',
           'esriSRProjection_TransverseMercatorComplex',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaNorman',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaBrown',
           'esriMRelationUndetermined', 'esriSRVertCS_Napier',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Washburn_Meters',
           'IBufferConstructionProperties', 'esriSRGeoCS_SaturnPan',
           'esriSRSpheroid_GRS1980Adj_WisconsinClark',
           'esriSRProjCS_Guam1963TNet', 'esriSRGeoCS_OSGB1936',
           'esriSRVertDatum_KuwaitPWD', 'esriSRDatum_K0_1949',
           'esriSRSpheroid_GRS1980Adj_MinnesotaCrowWing',
           'IWin32Shape', 'IGeometryFactory2',
           'esriSRProjCS_NAD1983HARNSPCS_UTNorth',
           'PositionVectorTransformation',
           'esriSRProjCS_WGS1972UTM_24N',
           'esriSRProjCS_NAD1983HARN_WISCRSOzaukeeM',
           'esriSRProjCS_WGS1972UTM_53N',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Lac_Qui_Parle_Feet',
           'esriSRDatum_Pluto',
           'esriSRProjCS_ETRS1989_Kp2000_Bornholm',
           'esriSRProjCS_NAD1983SPCS_ARSouthFT', 'IVerticalDatumEdit',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Lincoln_Meters',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_144E',
           'esriSRProjCS_WGS1972UTM_53S',
           'esriSRProjCS_WGS1972UTM_24S', 'esriSRProjCS_FahudUTM_39N',
           'esriSRProjCS_RGPFUTMZone5S',
           'ITexturePersistenceProperties', 'esriSRPrimeMType',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaRoseau',
           'esriSRProjCS_Sphere_EckertVI',
           'esriSRProjCS_RGNC1991_93_UTMZone57S',
           'esriSRProjCS_NAD1983HARN_StatePlane_California_I_FIPS_0401_Ft',
           'esriExtendEmbedded',
           'esriSRGeoTransformation_Minna_To_WGS_1984_11',
           'esriSRGeoTransformation_Minna_To_WGS_1984_10',
           'esriSRGeoTransformation_Locodjo1965_To_WGS1984',
           'esriSRGeoTransformation_Minna_To_WGS_1984_12',
           'esriSRGeoTransformation_Minna_To_WGS_1984_14',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_174E',
           'esriSRGeoTransformation_NTF_To_RGF1993_1',
           'esriSRDatum_Kandawala', 'esriSRVertCS_NAVD1988',
           'esriSRDatum_Tete',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_174W',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaPennington',
           'esriSRProjCS_NAD1983SPCS_TXNorthFT',
           'esriSRDatum_IslandsNetwork1993', 'esriSRDatum_Tokyo',
           'esriSRSpheroid_GRS1980Adj_MinnesotaPipestone',
           'esriSRGeoTransformation_CH1903_To_ETRS_1989_1',
           'esriSRProjCS_Tahiti1979UTMZone6S',
           'esriSRGeoTransformation_Qatar_1974_To_WGS_1984_3',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Beltrami_South_Meters',
           'esriSRGeoCS_Belge1950', 'esriSRDatumType',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Clay_Feet',
           'esriShapeHasTextures',
           'esriSRGeoTransformation_Moorea_1987_To_RGPF_1',
           'esriSRGeoTransformation_NZGD1949_To_NZGD2000_3Parm',
           'esriSRProjCS_Indonesia1974UTM_54S',
           'esriSRProjCS_NAD1983HARN_WISCRSKewauneeFtUS',
           'esriSRProjCS_ATS1977MTM_4NS',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaWaseca',
           'esriShapeBasicTypeMask', 'esriSRGeoCS_SaturnPrometheus',
           'esriSRDatum_LisboaBessel',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinKewaunee',
           'esriSRVertDatum_BoraBoraSAU2001', 'esriSRGeoCS_IGN53Mare',
           'esriSRProjCS_NAD1927SPCS_WASouth',
           'esriSRGeoCS_IERSTerrestrialReferenceFrame1989',
           'esriSRGeoCS_IERSTerrestrialReferenceFrame1988',
           'esriSRSpheroid_GRS1980Adj_WisconsinRichland',
           'esriSRGeoTransformation_Naparima1972_To_WGS1984',
           'esriSRSpheroid_UranusRosalind',
           'esriSRSpheroid_GRS1980Adj_WisconsinBurnett',
           'E_GEOMETRY_TRANSFORMENVELOPE',
           'esriSRGeoTransformation_Fatu_Iva_1972_To_WGS_1984_1',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_84E',
           'E_GEOMETRY_NONMULTIPATCH',
           'esriSRProjCS_NAD1983SPCS_NYWest', 'esriSRGeoCS_Kandawala',
           'esriSRProjCS_Pulkovo1995GK_28',
           'esriSRProjCS_NAD1983FloridaGDLAlbers',
           'esriSRProjCS_Pulkovo1995GK_24',
           'esriSRProjCS_WGS1984N_PoleLambertAzi',
           'esriSRProjCS_Pulkovo1995GK_26',
           'esriSRProjCS_Pulkovo1995GK_27',
           'esriSRProjCS_Pulkovo1995GK_20',
           'esriSRProjCS_WGS1984UTM_59N',
           'esriSRProjCS_Pulkovo1995GK_22',
           'esriSRProjCS_Pulkovo1995GK_23',
           'esriSRProjCS_WGS1984UTM_59S', 'esriSRDatum_StPaulIsland',
           'esriSRProjCS_GunungSegaraUTMZone50S',
           'esriSRProjCS_NAD1927CGQ77MTM_10SCoPQ',
           'esriSRProjCS_NAD1983HARNSPCS_CAVI',
           'esriSRProjCS_NAD1927SPCS_SCNorth',
           'esriSRProjCS_NAD1983HARN_StatePlane_New_York_West_FIPS_3103_Ft',
           'esriSRGeoTransformation_NAD_1983_To_HARN_PA',
           'esriSRProjCS_NAD1983HARNSPCS_RI',
           'esriSRProjCS_Pulkovo1942_58_PolandZone2',
           'esriSRProjCS_Pulkovo1942_58_PolandZone3',
           'esriSRProjCS_Pulkovo1942_58_PolandZone1',
           'esriSRProjCS_Pulkovo1942_58_PolandZone4',
           'esriSRProjCS_Pulkovo1942_58_PolandZone5',
           'esriSRGeoTransformation_REGVEN_To_SIRGAS_1',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_57E',
           'esriSRProjCS_NAD1983_StatePlane_Oregon_North_FIPS_3601_Feet_Intl',
           'ISpatialReferenceTolerance',
           'esriSRProjCS_Pulkovo1995GK_2N', 'esriSRDatum_Astro1952',
           'esriSRGeoTransformation_LittleCayman1961_To_WGS1984_2',
           'esriSRDatum_Indian1975',
           'esriSRGeoTransformation_Bogota_To_MAGNA_region_7_CF',
           'esriSRGeoCS_K0_1949', 'esriSRDatum_Saturn',
           'IGeometryFactory',
           'esriSRGeoTransformation_KUDAMS_To_WGS_1984_2',
           'esriSRGeoTransformation_KUDAMS_To_WGS_1984_1',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinJackson',
           'esriSRVertCS_St_Marys',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Langlade_Meters',
           'esriSRProjCS_NordSahara1959UTM_32N',
           'esriSRProjCS_FahudUTM_40N',
           'esriSRGeoTransformation_Pampa_del_Castillo_To_WGS_1984_1',
           'esriSRGeoCS_Gulshan303',
           'esriSRProjCS_NAD1983HARN_StatePlane_Oregon_North_FIPS_3601_Feet_Intl',
           'esriMDescending', 'esriSRProjCS_NAD1983SPCS_NEFT',
           'esriSRProjCS_NAD1983SPCS_PANorthFT',
           'esriSRProjCS_NAD1983HARN_Adj_MN_St_Louis_North_Feet',
           'esriSRSpheroid_GRS1980Adj_WisconsinSauk',
           'esriSRSpheroid_GRS1980Adj_MinnesotaLyon',
           'esriSRDatum_IERSTerrestrialReferenceFrame1989',
           'esriSRDatum_IERSTerrestrialReferenceFrame1988',
           'esriSRVertDatum_DanskNormalNul',
           'esriSRProjection_LambertConformalConic',
           'esriSRSpheroid_GRS1980Adj_MinnesotaAnoka',
           'esriSRGeoCS_Jamaica1969',
           'esriSRGeoTransformation_IGN53_Mare_To_WGS_1984_3',
           'esriSRGeoTransformation_IGN53_Mare_To_WGS_1984_2',
           'esriSRGeoTransformation_IGN53_Mare_To_WGS_1984_1',
           'esriSRUnit_ArcSecondCentesimal',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_135E',
           'esriSRVertDatum_Antalya', 'esriSRDatum_NAD1983CSRS98',
           'esriSRProjCS_NZGD1949_UTM_Zone_60S', 'esriSRGeoCS_Segora',
           'esriSRGeoCS_IGNAstro1960',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaKittson',
           'esriSRProjCS_NAD1983UTM_8N',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Winona_Feet',
           'esriSRSpheroid_GRS1980Adj_MinnesotaKanabec',
           'esriSRGeoTransformation_Graciosa1948_To_WGS1984_2',
           'esriSRDatum_NeptuneProteus',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaChisago',
           'esriGeodeticType',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Stevens_Meters',
           'esriSRGeoTransformation_Guam_1963_To_HARN_Saipan',
           'esriSRProjCS_Pulkovo1995GK_27N',
           'esriSRSpheroid_GRS1980Adj_MinnesotaLake_of_theWoodsNorth',
           'esriGeometryMultiPatch', 'esriSRProjCS_Carthage_TM_11_NE',
           'esriSRProjCS_World_EckertIV',
           'esriSRProjCS_TrucialCoast1948UTM_40N',
           'esriSRProjCS_NAD1983SPCS_OHSouth',
           'esriSRProjCS_World_EckertII',
           'esriSRProjCS_NAD1983_Idaho_TM',
           'esriSRProjCS_NZGD2000_Bay_of_Plenty_Circuit',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaStearns',
           'esriSRProjCS_NAD1983HARN_WISCRSPortageM',
           'esriSRProjCS_WGS1984_TM_132_SE',
           'esriSRGeoTransformation_Lisboa_Hayford_To_Lisboa_Bessel_1',
           'esriSRGeoTransformation_Lisboa_Hayford_To_Lisboa_Bessel_2',
           'esriSRDatum_JupiterLeda', 'esriSRProjCS_NAD1927SPCS_TN',
           'E_GEOMETRY_EDITS_OVERLAP',
           'esriSRDatum_AuthalicSphere_Intl1924',
           'esriSRProjCS_NAD1983SPCS_LAOffshore',
           'esriSRDatum_AGD1966', 'esriSRProjCS_NSIDC_EASEGridSouth',
           'esriSRGeoTransformation_AGD66_TO_GDA94_NTV2_Victoria',
           'esriSRSpheroid_Airy1830', 'esriGARSModeEnum',
           'esriSRGeoTransformation_Ammassalik_1958_To_Greenland_1996_1',
           'IGeneralMultiPatchInfo',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaMarshall',
           'esriSRProjCS_NAD1983HARNSPCS_WYECFT',
           'esriSRGeoCS_ModifiedBessel',
           'esriSRProjCS_HongKong1980_UTM49N',
           'E_GEOMETRY_GEODESIC_BUFFER_COORD_OUT_OF_RANGE',
           'esriSRProjCS_ETRS1989_UTM_Zone_31N',
           'esriSRSpheroid_UranusTitania', 'esriSRGeoCS_FatuIva1972',
           'esriSRDatum_NAD1983HARNAdj_WisconsinSawyer',
           'esriGeometryServerMessageCode_Generalize',
           'esriSRProjCS_NAD1983HARNSPCS_UTCentral',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Sibley_Meters',
           'esriSRProjCS_World_EckertV',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Benton_Feet',
           'esriSRProjCS_NGO1948UTM33N',
           'esriSRProjCS_NAD1983_StatePlane_Utah_Central_FIPS_4302_Feet_Intl',
           'esriSRProjCS_World_EckertI',
           'esriSRProjCS_LaCanoaUTM_19N',
           'esriSRProjCS_NAD1983TexasStatewide',
           'E_GEOMETRY_NONSEGMENT',
           'esriSRProjection_HotineAzimuthCenter',
           'esriSRGeoTransformation_Fiji_1986_To_WGS_1984_1',
           'esriSRGeoTransformation_Fiji_1986_To_WGS_1984_2',
           'esriSRGeoTransformation_NTF_To_ETRS_1989_1',
           'esriSRGeoCS_REGVEN', 'esriSRProjCS_NAD1927UTM_7N',
           'esriSRProjCS_NAD1983HARN_StatePlane_North_Dakota_South_FIPS_3302_Ft_Intl',
           'esriSRGeoCS_CampoInchauspe',
           'esriSRGeoTransformation_WGS_1972_BE_To_WGS_1972_1',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Crow_Wing_Meters',
           'esriShapeHasCurves',
           'esriSRGeoTransformation_NAD_1983_TO_HARN_CS',
           'esriSRDatum_AzoresOrientalIslands1940',
           'esriSRSpheroid_GRS1980Adj_MinnesotaLake_of_theWoodsSouth',
           'esriSRProjCS_Douala_1948_AOF_West', 'esriSRGeoCS_LGD2006',
           'esriSRProjCS_NAD1927UTM_12N', 'esriNonSimpleOK',
           'esriSRGeoCS_Serindung', 'esriSRVertCS_NVN1999',
           'esriSRDatum_IGC1962_6th_Parallel_S',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Sheboygan_Feet',
           'esriSRProjCS_WGS1984UTM_26N', 'esriSRDatum_DHDN',
           'esriSRSpheroid_JupiterCarme', 'esriSRDatum_Everest1830',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaFreeborn',
           'esriSRDatum_EverestBangladesh',
           'esriSRGeoTransformation_Bogota_To_MAGNA_Region_8_MB',
           'esriSRProjCS_PD1983_GKZone3',
           'esriSRProjCS_PD1983_GKZone4',
           'esriSRDatum_IraqKuwaitBoundaryDatum1992',
           'esriSRGeoCS_LittleCayman1961', 'esriSRDatum_REGVEN',
           'esriSRProjCS_NAD1983_Maine_2000_West_Zone',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaCassNorth',
           'esriSRProjCS_NAD1983UTM_14N', 'esriSRVertCS_Tararu',
           'esriSRGeoCS_SaturnRhea', 'esriSRVertDatum_Gisborne',
           'esriSRUnit_Foot1865', 'esriSRGeoCS_RGF1993',
           'esriSRGeoTransformation_Jamaica_1969_To_JAD_2001_1',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaMorrison',
           'esriSRGeoTransformation_ED1950_ED77_To_WGS1984',
           'esriSRProjCS_Greenland1996_UTMZone24N',
           'AbridgedMolodenskyTransformation',
           'esriSRProjCS_WGS1972UTM_51N', 'esriSRUnit_USNauticalMile',
           'esriSRProjCS_WGS1972UTM_51S',
           'esriSRProjCS_NAD1983SPCS_GAWestFT', 'esriShapePolylineZM',
           'esriSRSpheroid_GRS1980Adj_MinnesotaOlmsted',
           'esriSRGeoCS_UranusCordelia', 'esriSRGeoCS_NWL9D',
           'esriSRProjCS_IGM1995_UTM_Zone_32N',
           'esriSRProjCS_NAD1927MichiganGeoRef_m',
           'esriSRVertCS_Moturiki', 'IMultipoint',
           'esriGeometryAttributes', 'E_GEOMETRY_CONSTRUCTPOINTUNION',
           'esriSRProjCS_Sphere_Bonne',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Chisago_Feet',
           'esriSRGeoTransformation_AGD1966_To_GDA1994_2',
           'esriSRGeoTransformation_AGD1966_To_GDA1994_3',
           'esriSRGeoTransformation_AGD1966_To_GDA1994_4',
           'esriSRProjCS_NAD1983HARN_Adj_MN_St_Louis_Central_Feet',
           'esriSRGeoTransformation_ITRF_2000_To_WGS_1984',
           'esriSRProjCS_Tahiti1952_UTMZone6S',
           'esriSRSpheroid_GRS1980Adj_WisconsinDunn',
           'esriSRDatum_SVY21', 'S_GEOMETRY_GEOMETRY_NOT_PROJECTED',
           'esriSRGeoCS_Belge1972',
           'esriSRProjCS_ED1950_3_Degree_GK_Zone_12',
           'esriSRProjCS_ED1950_3_Degree_GK_Zone_13',
           'esriSRGeoCS_Qornoq',
           'esriSRProjCS_ED1950_3_Degree_GK_Zone_11',
           'esriSRProjCS_ED1950_3_Degree_GK_Zone_14',
           'esriSRProjCS_Beijing1954GK_21N',
           'esriSRProjCS_NAD1983SPCS_OHSouthFT',
           'esriSRSpheroid_JupiterLeda',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_171W',
           'esriSRProjCS_GrandCayman1959UTMZone17N',
           'esriSRProjCS_IGN53Mare_UTMzone59S',
           'esriSRGeoTransformation_AGD1984_To_GDA1994_2',
           'esriSRProjCS_NAD1983SPCS_RIFT',
           'esriSRProjection_EquidistantConic',
           'esriSRGeoTransformation_Deception_Island_To_WGS_1984',
           'esriSRProjCS_NZGD2000_Mount_York_Circuit',
           'esriSRVertCS_Mayotte1950', 'esriSRUnit_GoldCoastFoot',
           'esriSRProjCS_NAD1983SPCS_MOCentral',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaMeeker',
           'E_GEOMETRY_CANT_RESHAPE',
           'esriSRSpheroid_GRS1980Adj_WisconsinTrempealeau',
           'esriSRGeoTransformation_Korean_1995_To_WGS_1984_1',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Sauk_Meters',
           'esriSRProjCS_NordAlgerie_Ancienne_Degree',
           'esriSRParameter_ZAxisTranslation',
           'esriSRProjCS_NAD1983_Maine_2000_Central_Zone',
           'esriSRDatum_SaturnRhea',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinIowa',
           'esriSRProjCS_RRAF1991_UTM_20N', 'esriSRGeoCS_Mars1979',
           'esriSRGeoCS_Padang1884',
           'esriSRGeoTransformation_Bogota_To_WGS_1984_region_6_CF',
           'esriSRProjCS_NAD1983HARN_WISCRSLangladeFtUS',
           'esriSRGeoTransformation_ITRF_1989_To_ITRF_2000_1',
           'esriSRSpheroid_Plessis1817', 'IGeometricBufferSourceSink',
           'esriSRProjCS_NZGD1949_Okarito_Circuit',
           'esriSRProjCS_ETRS1989_UTM_Zone_26N',
           'esriSRProjCS_NAD1983HARN_StatePlane_Georgia_East_FIPS_1001_Ft',
           'esriSRProjCS_NAD1983HARN_WISCRSOcontoFtUS',
           'esriSRGeoTransformation_TM65_To_WGS_1984_2',
           'esriSRProjCS_VoirolNordAlgerieAncienne',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinJuneau',
           'E_GEOMETRY_NONPATH', 'esriSRDatum_OSU1991A',
           'esriSRGeoTransformation_DHDN_To_WGS_1984_4x',
           'esriSRProjCS_Petrels1972_Terre_Adelie_Polar_Stereographic',
           'esriSRProjCS_NAD1983SPCS_NYLongIsland',
           'esriSRGeoTransformation_NAD_1927_TO_NAD_1983_AK',
           'esriSRProjCS_NZGD1949_Buller_Circuit',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaFaribault',
           'esriSRPrimeM_Oslo', 'IESRIShape',
           'esriSRGeoCS_JupiterAnanke',
           'esriSRProjCS_EverestModified1969_RSO_Malaya_Meters',
           'esriSRProjCS_Pulkovo1995GK_4N', 'esriSRToleranceOK',
           'esriSRProjCS_AGD1966_ISG_55_3',
           'esriSRProjCS_AGD1966_ISG_55_2',
           'esriSRProjCS_AGD1966_ISG_55_1',
           'esriSRVertDatum_EVRF2000',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Rice_Feet',
           'esriSRPrimeM2Type', 'esriSRProjCS_ETRS1989PortugalTM06',
           'E_GEOMETRY_OUT_OF_BOUNDS',
           'esriSRGeoTransformation_Kandawala_To_WGS1984',
           'esriSRProjCS_NAD1983HARN_MS_TM',
           'esriSRVertDatum_HuahineSAU2001',
           'esriSRProjCS_NAD1927SPCS_SDSouth',
           'esriSRProjCS_NAD1983MTM_6', 'esriSRProjCS_NAD1983MTM_7',
           'esriSRProjCS_NAD1983MTM_4', 'esriSRProjCS_NAD1983MTM_5',
           'esriSRProjCS_NAD1983MTM_2', 'esriSRProjCS_NAD1983MTM_3',
           'esriSRProjCS_NAD1983MTM_1', 'esriSRProjCS_NAD1983MTM_8',
           'esriSRSpheroid_GRS1980Adj_WisconsinWashburn',
           'esriSRDatum_Nahrwan1967',
           'esriSRProjCS_Kandawala_Ceylon_Belt_Indian_Yards_1937',
           'esriSRGeoTransformation_Tokyo_To_WGS1984_1',
           'esriSRGeoTransformation_Tokyo_To_WGS1984_2',
           'esriSRGeoTransformation_Tokyo_To_WGS1984_3',
           'esriSRGeoTransformation_Tokyo_To_WGS1984_4',
           'esriSRGeoTransformation_Tokyo_To_WGS1984_5',
           'esriSRGeoTransformation_Manoca_To_WGS1984_1',
           'esriSRProjCS_NAD1983HARN_Maine_2000_Central_Zone',
           'esriSRGeoTransformation_NTF_To_WGS1984',
           'IFunctionalSurface', 'IPolycurve3D',
           'esriSRVertCS_NorthRona',
           'esriSRProjCS_NAD1983HARN_WISCRSBarronFtUS',
           'esriSRGeoCS_JupiterSinope',
           'esriSRProjCS_NAD1927_Quebec_Lambert',
           'esriSRGeoCS_BataviaJakarta',
           'esriSRGeoTransformation_Aratu_To_WGS_1984_9',
           'esriSRGeoTransformation_Aratu_To_WGS_1984_8',
           'esriSRGeoTransformation_Aratu_To_WGS_1984_5',
           'esriSRGeoTransformation_Aratu_To_WGS_1984_4',
           'esriSRProjCS_ATS1977UTM_20N',
           'esriSRGeoTransformation_Aratu_To_WGS_1984_6',
           'esriSRGeoTransformation_Aratu_To_WGS_1984_1',
           'esriSRGeoTransformation_Aratu_To_WGS_1984_3',
           'esriSRGeoTransformation_Aratu_To_WGS_1984_2',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Pine_Feet',
           'esriSRSpheroid_GRS1980Adj_WisconsinMenominee',
           'IPolycurve',
           'esriSRProjCS_NAD1983HARN_StatePlane_Maryland_FIPS_1900_Ft',
           'esriSRVertCS_AIOC95_heights', 'esriMultiPatchRing',
           'esriSRDatum_NAD1983HARNAdj_WisconsinCrawford',
           'esriSRProjCS_Datum73HayfordGaussIGEOE', 'ITriangleStrip',
           'SegmentOverlapVertical',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaLacQuiParle',
           'esriSRProjCS_ETRF1989UTM_28N',
           'esriSRProjCS_WGS1972UTM_16S',
           'esriSRGeoTransformation_GDA1994_To_WGS1984',
           'esriSRDatum_HongKong1963_67',
           'esriSRProjCS_WGS1972UTM_16N',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Stearns_Feet',
           'esriSRUnit_Benoit1895B_Chain',
           'esriSRProjCS_Pulkovo1995GK_29N',
           'esriSRDatum_NeptuneGalatea', 'esriUTurn',
           'esriSRProjCS_NAD1927WisconsinTM',
           'esriSRSpheroid_Clarke1858', 'esriSRGeoCS_JupiterCarme',
           'esriSRSpheroid_GRS1980Adj_MinnesotaRoseau',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaLeSueur',
           'esriSRProjCS_Bermuda_2000_National_Grid',
           'esriSRVertCS_StewartIsland',
           'esriSRProjCS_Maupiti1983UTMZone5S',
           'esriSegmentExtension',
           'esriSRGeoCS_PointeGeologiePerroud1950',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Polk_Meters',
           'esriSRProjCS_CorregoAlegreUTMZone25S', 'IBezierCurve',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_90E',
           'esriSRProjCS_NAD1927SPCS_VANorth',
           'esriSRProjCS_ETRS1989_UTM_Zone_37N',
           'esriSRProjCS_NAD1983HARN_WISCRSWaupacaM',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Nicollet_Feet',
           'esriGeodeticTypeGreatElliptic', 'IBezierCurveGEN',
           'esriSRSpheroid_PZ1990', 'esriSRProjCS_CamacupaUTM_32S',
           'esriSRProjCS_GDM2000Selangor',
           'esriSRGeoTransformation_St_Kitts_1955_To_WGS_1984_2',
           'esriSRSpheroid_UranusPortia', 'esriCurveIteratorEnum',
           'esriSRProjCS_NAD1983SPCS_AK4',
           'esriSRProjCS_NAD1983SPCS_AK5',
           'esriSRProjCS_NAD1983SPCS_AK6',
           'esriSRProjCS_NAD1983SPCS_AK7',
           'esriSRProjCS_NAD1983SPCS_AK1',
           'esriSRProjCS_NAD1983SPCS_AK2',
           'esriSRProjCS_NAD1983SPCS_AK3',
           'esriSRProjCS_NAD1983SPCS_AK8',
           'esriSRProjCS_NAD1983SPCS_AK9', 'IPolygon2', 'IPolygon3',
           'IPolygon4', 'IPolygon5', 'esriSRGeoCS_Reunion',
           'esriExtendAtTo', 'esriSRProjCS_BogotaCiudadBogota',
           'esriSRGeoTransformation_Bogota_To_WGS_1984_2',
           'esriRelationPair', 'IVertexAttribute',
           'esriSRGeoTransformation_NAD_1983_TO_HARN_EM',
           'esriSRUnit_SearsLink', 'esriSRProjCS_WGS1984UTM_25S',
           'esriSRGeoTransformation_Cape_To_Hartebeesthoek94',
           'esriSRProjCS_WGS1984UTM_25N',
           'esriSRProjection_AzimuthalEquidistant',
           'esriSRGeoTransformation_NAD_1983_TO_HARN_ET',
           'esriSRGeoTransformation_EUREF_FIN_To_WGS_1984',
           'esriSRProjCS_NAD1983MTM_10',
           'esriSRProjCS_NAD1927UTM_14N',
           'esriSRProjCS_NAD1983MTM_12', 'esriSRProjCS_NAD1983MTM_13',
           'esriSRProjCS_NAD1983MTM_14', 'esriSRProjCS_NAD1983MTM_15',
           'esriSRProjCS_NAD1983MTM_16', 'esriSRProjCS_NAD1983MTM_17',
           'IPolycurveGeodetic', 'esriSRProjCS_RT38_5_gon_O',
           'esriCurveIteratorNoStop', 'esriSRProjCS_RT38_5_gon_V',
           'esriSRProjCS_NAD1983YukonAlbers',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Kandiyohi_Meters',
           'esriSRProjCS_NGO1948OsloNorway6',
           'esriSRProjCS_NGO1948OsloNorway7',
           'esriSRProjCS_NGO1948OsloNorway4',
           'esriSRProjCS_NGO1948OsloNorway5',
           'esriSRProjCS_NGO1948OsloNorway2',
           'esriSRProjCS_NGO1948OsloNorway3',
           'esriSRProjCS_NGO1948OsloNorway1',
           'esriSRProjCS_WGS1984N_AsiaLambert',
           'esriSRProjCS_NGO1948OsloNorway8',
           'IGeographicCoordinateSystem2',
           'esriSRProjCS_NAD1983CSRSYukonAlbers',
           'esriSRSpheroid_GRS1980Adj_WisconsinLanglade',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_138E',
           'esriSRProjCS_NAD1983HARNSPCS_WANorth',
           'esriSRProjCS_SIRGAS2000UTMZone23S', 'esriArcOrientation',
           'esriSRGeoTransformation_Rassadiran_To_WGS1984',
           'esriSRProjCS_NAD1983SPCS_CT',
           'esriSRProjCS_GDA1994_South_Australia_Lambert',
           'esriSRGeoTransformation_Fort_Desaix_To_WGS_1984_1',
           'esriSRGeoTransformation_Fort_Desaix_To_WGS_1984_2',
           'esriSRGeoTransformation_Bab_South_To_NAD_1983',
           'esriSRProjCS_WGS1972UTM_28S',
           'esriSpatialRelationPointTouch',
           'E_GEOMETRY_INVALID_ANGLE',
           'esriSRProjCS_Hjorsey1955_UTM_Zone_27N',
           'esriSRProjCS_WGS1972UTM_28N', 'esriSRVertDatum_St_Marys',
           'esriSRGeoTransformation_Amersfoort_To_ETRS_1989_4',
           'esriSRGeoTransformation_Amersfoort_To_ETRS_1989_3',
           'esriSRProjCS_NAD1927SPCS_ALEast',
           'esriSRGeoTransformation_La_Canoa_To_SIRGAS',
           'esriSRSpheroid_NeptuneGalatea',
           'esriSR_MaxParameterCount',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinIron',
           'esriSRGeoTransformation_Amersfoort_To_WGS_1984_2',
           'esriSRProjCS_SAD1969S_AmericaEquiConic',
           'esriSRProjCS_Xian1980_GK_CM_129E',
           'esriSRGeoTransformation_POSGAR_1998_To_SIRGAS_1',
           'esriSRProjCS_NAD1983HARN_StatePlane_Tennessee_FIPS_4100_Ft',
           'esriSRProjCS_Beijing1954_3_Degree_GK_CM_75E',
           'esriSRProjCS_WGS1972UTM_57N', 'esriExtrapolateAfter',
           'esriSRProjCS_WGS1972UTM_57S', 'esriShapePolylineM',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinVilas',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Sherburne_Feet',
           'esriSRProjCS_BabSouth_PalauAziEquidist',
           'esriSRProjCS_World_EquidistantCylindrical',
           'esriSRGeoTransformation_D48_To_ETRS_1989_Gorenjska',
           'esriShapePolylineZ', 'ISpatialReference',
           'esriSRProjCS_MerchichSaharaSud',
           'esriSRGeoTransformation_RT38_Stockholm_TO_RT38',
           'esriSRProjCS_QatarNationalGrid',
           'esriSRProjCS_Voirol1879SudAlgerieAncienne',
           'esriSRProjCS_NAD1983HARNSPCS_WVSouth',
           'esriSRProjCS_NZGD2000_Collingwood_Circuit',
           'esriSRProjCS_NAD1983_StatePlane_Arizona_East_FIPS_0201_Feet_Intl',
           'esriSRProjection_DoubleStereographic',
           'esriSRProjCS_NAD1983HARN_Adj_WI_LaCrosse_Meters',
           'esriSRProjCS_EgyptPurpleBelt', 'esriSRGeoCS_SaturnHelene',
           'esriSRVertCS_Antalya', 'esriSRProjCS_DGN1995_UTMZone48N',
           'esriSRProjCS_World_QuarticAuthalic',
           'esriSRProjCS_NAD1983HARN_WISCRSLafayetteM',
           'esriSRGeoCS_CHUA', 'esriSRProjCS_Beijing1954GK_23N',
           'esriSRProjCS_Beijing1954_3_Degree_GK_CM_135E',
           'esriSRProjCS_Sphere_PlateCarree',
           'esriSRProjCS_DGN1995_UTMZone48S',
           'esriSRDatum_Pitcairn1967',
           'esriSRProjCS_Beijing1954GK_18N', 'esriSRGeoCS_Carthage',
           'IPolycurve3', 'IPolycurve2', 'IPolycurve4',
           'esriSRProjCS_NAD1983HARNSPCS_UTSouth',
           'esriSpatialRelationLineTouch',
           'esriSRProjCS_NAD1983HARN_WISCRSSheboyganFtUS',
           'esriSRGeoCS_UranusUmbriel',
           'esriSRGeoTransformation_SAD1969_To_WGS1984_7',
           'esriSRProjCS_NAD1927SPCS_OHNorth', 'esriBufferFull',
           'esriSRGeoCS_WakeEniwetok1960',
           'esriSRProjCS_NAD1927_UTM_Zone_2N',
           'IConstructEllipticArc',
           'esriSRGeoTransformation_SAD1969_To_WGS1984_3',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinWashburn',
           'esriSRSpheroid_GRS1980Adj_MinnesotaWabasha',
           'esriSRGeoTransformation_SWEREF99_To_ETRS_1989_1',
           'esriSRProjCS_NAD1983HARN_StatePlane_Kentucky_North_FIPS_1601_Ft',
           'esriSRProjCS_NAD1983_UTM_Zone_2N',
           'esriSRProjCS_NAD1983HARNSPCS_WYWestFT',
           'esriSRProjCS_Merchich_degrees_UTMZone28N',
           'SegmentOverlapEnum',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinOutagamie',
           'esriSpatialRelationExProper', 'esriGeometryPolygon',
           'esriSRGeoTransformation_Makassar_Jakarta_To_Makassar',
           'esriSRDatum_UranusPortia',
           'esriSRProjCS_NAD1983SPCS_IDEastFT',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinSauk',
           'esriSRDatum_ST84_Ile_des_Pins',
           'esriSRDatum_NAD1983_NSRS2007',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Rock_Meters',
           'E_GEOMETRY_NONPART', 'esriSRProjCS_Abidjan1987_TM_5_NW',
           'esriGeometryCircularArc',
           'esriSRProjCS_NAD1983SPCS_FLWest',
           'esriSRVertCS_Guadeloupe1951',
           'esriSRGeoTransformation_Voirol1875Paris_To_WGS1984',
           'esriSRDatum_Madrid1870',
           'esriSRGeoTransformation_DHDN_To_WGS_1984_6x',
           'esriSRProjCS_MGI_M28',
           'esriSRDatum_NAD1983HARNAdj_WisconsinWaupaca',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_15',
           'esriSRProjCS_Pulkovo1995GK_6N',
           'esriSRDatum_ModifiedAiry', 'esriNonSimpleDuplicateVertex',
           'esriSRGeoCS_JupiterEuropa',
           'esriSRProjCS_Xian1980_3_Degree_GK_CM_102E',
           'E_GEOMETRY_INVALID_RADIUS',
           'esriSRDatum_NAD1983HARNAdj_WisconsinDodgeJefferson',
           'esriSRProjCS_Beijing1954GK_21',
           'esriSRProjCS_Beijing1954GK_20',
           'esriSRProjCS_Beijing1954GK_23',
           'esriSRProjCS_Beijing1954GK_22',
           'esriSRDatum_Hermannskogel', 'esriSRGeoCS_StLucia1955',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Menominee_Meters',
           'esriSRProjCS_NAD1983HARNSPCS_UTSouthFT',
           'esriSRDatum_IGN53Mare', 'esriSRGeoCS_Solomon1968',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Faribault_Meters',
           'esriSRProjCS_Indonesia1974UTM_49S', 'esriSRGeoCS_fk89',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Brown_Meters',
           'esriSRProjCS_Indonesia1974UTM_49N',
           'esriSRProjCS_MOP78_UTM_1S', 'LinePolygonHelper',
           'esriSRProjCS_EgyptGulfOfSuez_S650TLRedBelt',
           'esriSRGeoTransformation_Luzon1911_To_WGS1984_1',
           'esriSRProjCS_NAD1927SPCS_CAIII',
           'esriSRGeoCS_Authalicsphere',
           'esriSRProjCS_WGS1984_TM_116_SE', 'esriAttributeNone',
           'esriSRProjection_Behrmann',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Polk_Feet',
           'esriSRGeoTransformation_Beacon_E_1945_To_WGS_1984',
           'E_GEOMETRY_BADRELATION',
           'esriSRProjCS_NAD1983HARN_WISCRSTaylorFtUS',
           'esriSRSpheroid_GRS1980Adj_MinnesotaSteele',
           'esriSRProjCS_ED1950TM0_N',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaWatonwan',
           'esriSRGeoTransformation_AGD_1984_To_GDA_1994_5_NTv2',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaBeltramiNorth',
           'esriSRProjCS_NZGD1949_Taranaki_Circuit',
           'esriSRProjCS_WGS1972UTM_14S',
           'esriSRProjCS_WGS1972UTM_14N',
           'esriSRGeoTransformation_ST87_Ouvea_To_RGNC_1991_93_1',
           'esriSRGeoTransformation_ST87_Ouvea_To_RGNC_1991_93_2',
           'esriSRGeoTransformation_Bogota_To_MAGNA_region_2_CF',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaFaribault',
           'esriSRProjCS_NAD1983CSRS98UTM_19N',
           'esriSRProjCS_SouthAmerican1969UTM_19S',
           'esriSRProjCS_NAD1983SPCS_AZEast',
           'esriSRProjCS_Karbala1979Polsvc_UTMZone38N',
           'esriSRSpheroid_GRS1980Adj_WisconsinMarinette',
           'esriSRProjCS_SouthAmerican1969UTM_19N',
           'esriSRProjCS_TeteUTM_37S',
           'esriSRGeoTransformation_Lisbon_To_ETRS_1989_1',
           'esriSRGeoTransformation_Lisbon_To_ETRS_1989_2',
           'esriSRDatum_AzoresOccidentalIslands1939',
           'esriSRGeoCS_CarthageDegrees', 'esriSRGeoCS_UranusAriel',
           'E_SPATIALREFERENCE_PRECISIONTOOHIGH',
           'esriSRProjCS_DealulPisculuiStereo1970',
           'esriSRGeoTransformation_Nord_sahara_1959_To_WGS_1984_4',
           'esriSRGeoTransformation_Nord_sahara_1959_To_WGS_1984_5',
           'esriSRDatum_MHAST_Onshore',
           'esriSRSpheroid_GRS1980Adj_WisconsinPrice',
           'esriSRSpheroid_GRS1980Adj_MinnesotaWinona',
           'esriSRProjCS_Locodjo1965UTM_29N',
           'esriSRDatum_Pulkovo1942_adj83',
           'esriSRProjCS_VN2000_UTMZone49N', 'esriShapePointZM',
           'IConstructGeodetic', 'esriSRDatum_Australian',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Watonwan_Meters',
           'esriSRProjCS_ETRS1989_UTM_Zone_35N',
           'esriSRProjCS_WGS1984_Complex_UTM_Zone_27N', 'ISegmentZ2',
           'esriSRGeoTransformation_ITRF_1994_To_ITRF_2000_1',
           'esriSRProjCS_NAD1983_CSRS98_UTM_Zone_13N',
           'esriSRVertCS_RaiateaSAU2001',
           'esriSRProjCS_NAD1983HARNSPCS_PRStCroix',
           'esriSRGeoTransformation_Palestine_1923_To_WGS_1984_1',
           'esriSRGeoTransformation_Palestine_1923_To_WGS_1984_2',
           'esriSRDatum_JupiterCarme',
           'esriSRProjCS_NAD1983HARNSPCS_INEast',
           'esriSRDatum_IGN72NukuHiva',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaNicollet',
           'esriSRProjCS_ColombiaWest', 'esriSRDatum_SierraLeone1960',
           'E_GEOMETRY_BUFFER_DISTANCES', 'esriSRDatum_CHTRF1995',
           'E_GEOMETRY_INVALID_CHORD',
           'esriSRProjCS_WGS1984N_AsiaAlbers',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_129E',
           'esriSRProjCS_NAD1983HARNSPCS_IDCentral',
           'esriBufferRight', 'esriSRDatum_Katanga1955',
           'esriSRGeoCS_GEM10C',
           'esriSRProjCS_NAD1983HARN_Adj_MN_St_Louis_South_Feet',
           'esriSRGeoTransformation_NAD_1983_TO_HARN_GA',
           'esriSRProjCS_WGS1984UTM_27S',
           'esriSRProjCS_NAD1983HARN_StatePlane_Michigan_North_FIPS_2111_Feet_Intl',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaMartin',
           'esriSRProjCS_WGS1984UTM_27N', 'esriSRProjCS_ED1950_TM45',
           'esriSRProjCS_ED1950_TM42', 'esriSRProjCS_NAD1927UTM_16N',
           'esriSRProjCS_AdindanUTM_38N',
           'esriSRDatum_NAD1983HARNAdj_WisconsinFlorence',
           'esriSRProjCS_WGS1984_Complex_UTM_Zone_30N',
           'GeoTransformation', 'esriSRProjCS_WGS1984UTM_49S',
           'esriSRProjCS_WGS1984UTM_49N', 'IEnumIntersection',
           'esriSRDatum_SierraLeone1968',
           'esriSRGeoTransformation_SapperHill1943_To_WGS1984',
           'esriSRProjCS_HongKong1963GridSystem',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Beltrami_North_Meters',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_141E',
           'esriConstructOffsetRounded', 'esriSRDatum_Belge1950',
           'esriSRProjCS_NZGD2000_Wellington_Circuit',
           'esriShapeImportDefaults',
           'esriSRGeoTransformation_NAD1927_To_WGS1984_8',
           'esriSRGeoTransformation_NAD1927_To_WGS1984_9',
           'esriSRProjCS_SIRGAS2000UTMZone21S',
           'esriSRGeoTransformation_NAD1927_To_WGS1984_2',
           'esriSRGeoTransformation_NAD1927_To_WGS1984_3',
           'esriSRGeoTransformation_NAD1927_To_WGS1984_1',
           'esriSRGeoTransformation_NAD1927_To_WGS1984_6',
           'esriSRGeoTransformation_NAD1927_To_WGS1984_7',
           'esriSRGeoTransformation_NAD1927_To_WGS1984_4',
           'esriSRGeoTransformation_NAD1927_To_WGS1984_5',
           'esriSRVertDatum_AHD',
           'esriSRGeoTransformation_Indonesian1974_To_WGS1984',
           'IConstructCircularArc', 'esriSRProjCS_Indian1960TM_106NE',
           'esriSRProjCS_WGS1972UTM_55S',
           'esriSRProjCS_WGS1972UTM_55N', 'esriSRSpheroid_WGS1972',
           'esriSRProjCS_ED_1950_UTM_37N', 'esriValueDecreases',
           'esriSRProjCS_LomeUTM_31N', 'esriSRDatum_SaturnTitan',
           'esriUTMUseNS', 'esriSRProjCS_NAD1983UTM_18N',
           'esriSRProjection_EckertI',
           'esriNonSimpleSegmentOrientation',
           'esriSRProjCS_NAD1983HARNSPCS_IDWest',
           'esriSRProjCS_Greenland1996_UTMZone28N',
           'esriSRProjCS_NAD1983HARN_StatePlane_Utah_Central_FIPS_4302_Ft_Intl',
           'esriSRProjCS_Kalianpur1962_UTM41N',
           'esriSRProjCS_NZGD1949_Hokitika_Circuit',
           'esriSRProjCS_NAD1983SPCS_UTNorth',
           'esriSRProjCS_NAD1983HARN_WISCRSAshlandM',
           'esriSRDatum_NGO1948', 'esriSRDatum_StLucia1955',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinSawyer',
           'esriSRGeoTransformation_Scoresbysund_1952_To_Greenland_1996_1',
           'esriSRProjCS_NAD1983HARNSPCS_NVEast',
           'esriSRProjCS_NAD1983HARNSPCS_AZWest',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaPope',
           'esriSRSpheroid_Xian1980', 'esriSRVertDatum_Baltic1980',
           'esriSRProjCS_NAD1927SPCS_NDSouth',
           'esriSRGeoTransformation_Bellevue_IGN_To_WGS_1984',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Rock_Meters',
           'esriSRProjCS_NAD1983CSRS10TM_AEPResource',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaStLouisSouth',
           'esriSRGeoTransformation_Segora_To_WGS1984',
           'esriSRUnit_Microradian', 'esriSRDatum_DealulPiscului1933',
           'esriSRProjCS_NAD1983SPCS_AK10', 'esriSRUnit_GermanMeter',
           'esriSRProjCS_CampoInchauspe_UTM_Zone_19S',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Pipestone_Feet',
           'esriSRGeoTransformation_Nahrwan1967_To_WGS1984_2',
           'esriSRGeoTransformation_Nahrwan1967_To_WGS1984_3',
           'esriSRGeoTransformation_Nahrwan1967_To_WGS1984_1',
           'esriSRProjCS_NAD1983HARN_WISCRSForestM',
           'esriMGRSMode_Automatic',
           'esriSRProjCS_Conakry1905_UTM_Zone_29N',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Cass_North_Feet',
           'AngularUnit', 'esriSRProjCS_ChosMalal1914_Argentina_2',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_22',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_23',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_20',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_21',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_26',
           'esriSRProjCS_MGIFerro_AustriaGKEast',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_24',
           'E_GEOMETRY_ROTATEENVELOPE',
           'esriSRProjCS_NAD1983SPCS_ARNorthFT',
           'esriSRDatum_Guam1963',
           'esriSRGeoTransformation_MAGNA_To_SIRGAS',
           'esriSRVertCS_EVRS2000', 'IESRISegment',
           'esriSRGeoCS_SaturnDione',
           'esriSRProjCS_NAD1983WisconsinTM',
           'esriSRProjCS_NAD1983HARN_WISCRSClarkFtUS',
           'esriSRProjCS_NAD1983HARN_SPCSKentucky_USFeet',
           'esriSRProjCS_World_Hotine',
           'esriSRProjCS_NAD1983SPCS_OHNorthFT', 'esriSRVertCS_Bluff',
           'esriSRGeoTransformation_Guam_1963_To_NAD_1983_HARN_Saipan',
           'esriSRDatum_Kertau',
           'esriGeometryServerMessageCode_BufferGeodesic',
           'esriSRDatum_S_JTSK', 'SpatialReferenceEnvironment',
           'esriSRProjCS_CH1903Plus_LV95',
           'esriSRProjCS_NAD1983HARN_WISCRSTaylorM',
           'esriSRGeoTransformation_Little_Cayman_1961_To_WGS_1984_1',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_108E',
           'esriSRVertDatum_PDOHeightDatum1993',
           'esriSRProjCS_NAD1927GuatemalaSur',
           'esriSRGeoTransformationType',
           'esriSRGeoTransformation_PZ_1990_To_WGS_1984_1',
           'esriBufferFlat', 'esriSRProjCS_Mauritania1999UTMZone29N',
           'esriSRSpheroid_GRS1980Adj_WisconsinStCroix',
           'esriSRProjCS_IGCB1955CongoTMZone16',
           'E_GEOMETRY_NONPOLYGON', 'esriSRDatum_NeptuneNereid',
           'esriSRGeoCS_Indian1960', 'esriFilterHCS',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaChisago',
           'esriSRGeoTransformation_Santo_DOS_1965_To_WGS_1984',
           'esriSRVertCS_Landeshohennetz1995',
           'esriSRSpheroid_International1924', 'S_GEOMETRY_OK',
           'esriSRGeoCS_Israel',
           'esriSRGeoTransformation_Nord_Sahara_1959_To_WGS_1984_6',
           'esriSRGeoTransformation_Nord_Sahara_1959_To_WGS_1984_7',
           'esriSRGeoTransformation_Nord_Sahara_1959_To_WGS_1984_2',
           'esriSRGeoTransformation_Nord_Sahara_1959_To_WGS_1984_3',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Bayfield_Feet',
           'esriSRGeoTransformation_Grenada1953_To_WGS1984',
           'esriSRProjCS_Sphere_Mollweide',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaMartin',
           'esriSRGeoCS_Dominica1945', 'IArea3D',
           'esriSRGeoCS_NAD1927',
           'esriSRProjCS_ProvSAmerDatumUTMZone17N', 'wkbMultiPolygon',
           'esriSRGeoCS_Oman',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_21E',
           'esriSRGeoCS_NeptuneNaiad',
           'esriSRProjCS_NAD1983SPCS_MSWest', 'esriShapeImportAttach',
           'esriSRDatum_Mars2000',
           'esriSRGeoTransformation_Monte_Mario_To_ETRS_1989_1',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinOzaukee',
           'esriSRGeoTransformation_Monte_Mario_To_ETRS_1989_3',
           'esriSRGeoTransformation_Monte_Mario_To_ETRS_1989_2',
           'esriSRGeoTransformation_ST84_Ile_des_Pins_To_RGNC_1991_93_1',
           'esriSRProjCS_Sphere_FlatPolarQuartic',
           'esriSRGeoCS_Combani1950', 'ICurve',
           'esriSRProjCS_NAD1983_StatePlane_North_Dakota_South_FIPS_3302_Feet_Intl',
           'esriSRUnit_IndianFoot',
           'esriSRGeoTransformation_ELD_1979_To_WGS_1984_7',
           'esriSRGeoTransformation_ELD_1979_To_WGS_1984_6',
           'esriSRGeoTransformation_ELD_1979_To_WGS_1984_5',
           'esriSRGeoTransformation_ELD_1979_To_WGS_1984_4',
           'esriSRProjCS_WGS1972UTM_12S',
           'esriSRGeoTransformation_ELD_1979_To_WGS_1984_2',
           'esriSRGeoTransformation_ELD_1979_To_WGS_1984_1',
           'esriSRProjCS_CarthageUTM_32N',
           'E_GEOMETRY_BEZIER_EXTEND_EMBEDDED',
           'esriSRGeoTransformation_ELD_1979_To_WGS_1984_9',
           'esriSRProjCS_NAD1983SPCS_OKNorth',
           'esriSRProjCS_NAD1927UTM_20N',
           'esriSRProjCS_WGS1972UTM_12N',
           'esriSRProjCS_NAD1983_USGS_USA_Albers',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaRock',
           'esriSRProjCS_NZGD2000_Observation_Point_Circuit',
           'esriSRVerticalCSType',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaSibley',
           'esriSegmentLine', 'esriSRProjCS_GDM2000Perak',
           'esriSRDatum_NSWC9Z_2', 'esriSRProjCS_AmersfoortRD_New',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaRenville', 'ICurve2',
           'esriSRProjCS_NAD1927SPCS_NDNorth',
           'esriSRProjCS_NAD83_CSRS_UTM_16N',
           'esriSRGeoCS_FortDesaix',
           'esriSRProjCS_WGS1972_BE_TM_106_NE',
           'esriSRProjCS_RT90_0_gon',
           'esriSRProjCS_WGS1984_SPoleOrthographic',
           'IVerticalCoordinateSystemEdit',
           'esriSRGeoTransformation_NTFParis_To_WGS1972',
           'esriSRProjCS_NigeriaWestBelt',
           'esriSRProjCS_MerchichDegreeSudMaroc', 'esriSRDatum_MAGNA',
           'esriSRProjCS_SIRGAS2000UTMZone21N',
           'esriSRGeoTransformation_Jordan_To_WGS_1984',
           'esriShapeMultiPatch',
           'esriSRProjection_NewZealandMapGrid',
           'esriSRProjCS_NAD1983_CSRS98_UTM_Zone_11N',
           'esriSRGeoTransformation_D48_To_WGS_1984_Dolenjska',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Iron_Feet',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Adams_Meters',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Crawford_Meters',
           'esriSRDatum_Douala1948',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Waushara_Feet',
           'esriSRDatum_PampadelCastillo',
           'esriSRProjCS_NZGD1949_Grey_Circuit',
           'esriSRDatum_Tananarive1925',
           'esriSRGeoTransformation_NAD_1927_To_WGS_1984_87',
           'esriSRGeoTransformation_NAD_1927_To_WGS_1984_86',
           'esriSRGeoTransformation_NAD_1927_To_WGS_1984_85',
           'esriSRUnit2Type',
           'esriSRGeoTransformation_NAD_1927_To_WGS_1984_83',
           'esriSRProjCS_NAD1927SPCS_NVWest',
           'esriSRProjCS_DGN1995IndonesiaTM3Zone52_1',
           'esriSRProjCS_DGN1995IndonesiaTM3Zone52_2',
           'E_GEOMETRY_BUFFER_INVALID_END_OPTION',
           'esriSRDatum_Gandajika1970', 'esriSRVertDatum_RH2000',
           'esriSRProjCS_NAD1983HARNSPCS_KYSouth',
           'esriSRProjCS_Zanderij_TM_54_NW',
           'esriSRProjCS_NAD1983SPCS_FLEast',
           'esriSRProjCS_Finland_1', 'esriSRProjCS_Finland_0',
           'esriSRProjCS_Finland_3', 'esriSRProjCS_Finland_2',
           'esriSRProjCS_Finland_5', 'esriSRProjCS_Finland_4',
           'esriSRGeoCS_GuyaneFrancaise',
           'esriSRProjCS_CorregoAlegreUTM_23S',
           'esriSRProjCS_NAD1983HawaiiAlbers',
           'esriSRGeoTransformation_Timbalai_1948_To_WGS_1984_4',
           'esriSRGeoTransformation_Timbalai_1948_To_WGS_1984_2',
           'esriSRGeoTransformation_Timbalai_1948_To_WGS_1984_3',
           'esriSRProjCS_NAD1983HARN_WISCRSDodgeFtUS', 'IAngularUnit',
           'esriSRDatum_Jupiter', 'esriSRProjCS_Luxembourg1930_Gauss',
           'esriSRGeoCS_Yacare', 'esriSRPole_InsideBoundary',
           'esriSRProjCS_WGS1984UTM_21S', 'esriSRDatum_Helmert1906',
           'esriSRProjCS_EgyptBlueBelt',
           'esriSRProjCS_AdindanUTMZone35N',
           'esriSRProjCS_NAD1983SPCS_ALWest',
           'esriSRGeoTransformation_Hong_Kong_1963_67_To_WGS_1984_1',
           'esriSRVertDatum_Taranaki',
           'esriSRProjCS_NZGD1949_Tuhirangi_Circuit',
           'esriSRProjCS_NAD1983HARNSPCS_CAIII',
           'esriSRSpheroid_GRS1980Adj_WisconsinPolk',
           'esriSRSpheroid_Clarke1880RGS',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Pierce_Feet',
           'esriSRProjCS_ED1950_TM27', 'esriSRProjection_PlateCarree',
           'esriSRProjCS_Beijing1954_3_Degree_GK_CM_84E',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinOneida',
           'esriSRGeoCS_FD1958',
           'esriSRGeoTransformation_Minna_To_WGS1984_2',
           'esriSRGeoTransformation_Minna_To_WGS1984_1',
           'esriSRGeoTransformation_Monte_Mario_Rome_To_Monte_Mario',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinEauClaire',
           'esriSRGeoTransformation_Fiji_1956_To_WGS_1984_1',
           'esriSRProjCS_WGS1984UTM_47S',
           'esriSRProjCS_NAD1983HARN_StatePlane_Oklahoma_South_FIPS_3502_Ft',
           'esriSRDatum_JupiterHimalia',
           'esriSRProjCS_Anguilla1957BritishWIndies',
           'esriSRProjCS_WGS1972UTM_34S',
           'esriSRProjCS_WGS1984UTM_47N',
           'esriSRGeoTransformation_NAD1927_To_WGS1984_21',
           'esriSRUnit_ClarkeChain',
           'esriSRGeoTransformation_NAD1927_To_WGS1984_22',
           'esriSRProjCS_World_FlatPolarQuartic',
           'esriSRSpheroid_GRS1980Adj_MinnesotaNicollet',
           'esriSRDatum_Belge1972',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_147E',
           'esriSRDatum_Scoresbysund1952',
           'esriCoordinateSystemFilter',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Manitowoc_Feet',
           'esriGeometryPartBoundary',
           'esriSRProjCS_Hito_XVIII_1963_UTM_19S',
           'esriSRProjCS_SJTSK_FERRO_KROVAK_EN', 'esriMGRSModeEnum',
           'esriSRGeoTransformation_AGD66_TO_GDA94_NTV2_Northern_Territory',
           'esriSRGeoCS_AzoresCentralIslands1995',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Fond_du_Lac_Meters',
           'esriSRDatum_NAD1983HARNAdj_WisconsinTaylor',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_36E',
           'esriSRProjCS_Beijing1954_3_Degree_GK_Zone_42',
           'esriSRDatum_ISTS061_1968',
           'esriSRProjCS_Beijing1954_3_Degree_GK_CM_78E',
           'esriSRSpheroid_GRS1980Adj_WisconsinSawyer',
           'esriSRGeoTransformation_D48_To_ETRS_1989_Stajerska',
           'esriSRProjCS_NAD1927SPCS_FLEast',
           'esriSRProjCS_Kalianpur1962_UTM43N',
           'esriSRGeoTransformation_Tristan_1968_To_WGS_1984',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Marathon_Feet',
           'esriSRGeoTransformation_Bogota_To_MAGNA_region_5_CF',
           'esriSRProjCS_NAD1983SPCS_TXSouthFT',
           'esriSRProjection_EquidistantCylindrical',
           'esriSRGeoTransformation_Bogota_To_MAGNA_region_3_CF',
           'esriSRDatum_Tahiti1979', 'esriSRProjCS_NAD1927SPCS_AK8',
           'esriSRProjCS_NAD1927SPCS_AK9', 'esriSRUnit_SearsFoot',
           'esriSRProjCS_NAD1927SPCS_AK2',
           'esriSRProjCS_NAD1927SPCS_AK3',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinPierce',
           'esriSRProjCS_NAD1927SPCS_AK1',
           'esriSRProjCS_NAD1927SPCS_AK6',
           'esriSRProjCS_NAD1927SPCS_AK7',
           'esriSRProjCS_MerchichNordMaroc',
           'esriSRProjCS_NAD1927SPCS_AK5',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Steele_Meters',
           'esriSRProjCS_PeruCentral', 'wkbMultiPoint',
           'esriSRSpheroid_GRS1980Adj_MinnesotaKittson',
           'esriSRProjCS_Nahrwan1967UTM_38N',
           'esriSRDatum_Karbala1979Polservice',
           'esriSRProjCS_ED1950JordanTM',
           'esriSRProjCS_IsraelIsraelTMGrid',
           'esriSRProjCS_NAD1927UTM_21N',
           'E_GEOMETRY_EQUAL_VERTEX_ATTRIBUTES',
           'esriSRGeoTransformation_Ocotepeque_1935_To_WGS_1984_3PAR',
           'esriSRPole_IsStraightLine', 'esriSRProjection_Gnomonic',
           'esriSRDatum_Adindan',
           'esriSRProjCS_WGS1984S_PoleStereographic',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Todd_Meters',
           'esriSRProjCS_VoirolSudAlgerie',
           'esriSRDatum_JupiterElara',
           'esriSRProjCS_NAD1983_Oregon_Statewide_Lambert',
           'esriSRGeoTransformation_Reunion_To_WGS_1984_NGA',
           'esriSRProjCS_NAD1927SPCS_TXSouth',
           'esriSRProjCS_NAD1983SPCS_MEWest',
           'esriGeometryPartCentroid',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Lake_Meters',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Rice_Meters',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_40',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_41',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_42',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Crawford_Feet',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_44',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_45',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_46',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_47',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_48',
           'esriSRGeoCS_UranusJuliet',
           'esriSRProjCS_NAD1983CanadaLambert',
           'esriSRProjCS_NAD1927SPCS_NMEast', 'INullTransformation',
           'esriSRVertCS_Caspian',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_9',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_8',
           'esriSRVertCS_RH2000',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_7',
           'esriSRGeoTransformation_Egypt_1907_To_WGS_1984_3',
           'esriShapeMultipointZ',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_19',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_18',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_17',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_16',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_15',
           'esriSRProjCS_NAD1983HARNSPCS_MNCentral',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_13',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_12',
           'esriSRProjCS_NAD1927SPCS_MTNorth',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_10',
           'esriShapeMultipointM', 'esriSRDatum_European1979',
           'esriSRDatum_TM65',
           'esriSRGeoTransformation_Adindan_To_WGS1984_1',
           'esriSRProjCS_JAD2001_UTMZone18N',
           'esriSRGeoTransformation_Adindan_To_WGS1984_3',
           'esriSRGeoTransformation_Adindan_To_WGS1984_2',
           'esriSRGeoTransformation_Adindan_To_WGS1984_5',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinRichland',
           'esriSRGeoTransformation_Adindan_To_WGS1984_7',
           'esriSRGeoTransformation_Adindan_To_WGS1984_6',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Dunn_Feet',
           'esriSRVertCS_Belfast',
           'esriSRSpheroid_GRS1980Adj_WisconsinVilas',
           'esriSRProjCS_Beijing1954GK_14N',
           'esriSRProjCS_NAD1983HARN_WISCRSGreenM',
           'esriSRGeoCS_FortThomas1955',
           'esriSRProjCS_NSIDC_SeaIcePolarStereoS',
           'LongitudeRotationTransformation',
           'esriSRProjCS_NSIDC_SeaIcePolarStereoN',
           'esriSRProjCS_DoualaUTM_32N',
           'esriSRGeoTransformation_Trinidad1903_To_WGS1984',
           'E_SPATIALREFERENCE_CANTDEFINESR',
           'esriSRVertDatum_YellowSea1985', 'wkbLinestring',
           'esriExtrapolationEnum',
           'esriSRGeoTransformation_Maupiti_1983_To_RGPF_1',
           'esriSRGeoCS_Palestine1923',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Jackson_Feet',
           'esriSRDatum_OldHawaiian', 'esriSRProjection_Aitoff',
           'esriSRProjCS_NAD1927UTM_13N',
           'esriSRProjCS_SIRGAS_UTM_Zone_20N',
           'esriSRProjCS_EMEP_150KM_Grid',
           'esriSRProjCS_SIRGAS_UTM_Zone_20S',
           'esriSRGeoCS_IraqKuwaitBoundaryDatum1992',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Oconto_Meters',
           'esriSRDatum_Madeira1936', 'esriSRProjCS_SWEREF99_17_15',
           'esriSRProjCS_NAD1927SPCS_CT',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaMcLeod',
           'esriSRSpheroid_JupiterIo', 'ISpatialReferenceAuthority',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaRamsey',
           'esriGeometryExtrapolateAfter',
           'esriSRProjCS_MerchichSudMaroc',
           'esriSRGeoTransformation_La_Canoa_To_REGVEN_1',
           'esriSRGeoCS_Everest1967', 'esriSRGeoCS_Everest1962',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaKoochiching',
           'esriSRProjCS_Xian1980_3_Degree_GK_CM_120E',
           'esriSRVertDatum_Dunedin', 'esriSRGeoCS_Australian',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Forest_Meters',
           'esriSRParameter_XAxisRotation',
           'E_GEOMETRY_BUFFER_INVALID_SIDE_OPTION',
           'esriSRGeoTransformation_Bogota_To_MAGNA_Region_6_MB',
           'esriSRProjCS_Greenland1996_UTMZone18N',
           'esriSRProjCS_SWEREF99_13_30',
           'esriSRProjCS_Sphere_EquidistantCylindrical',
           'esriSRDatum_ST71Belep', 'esriSRProjCS_AmersfoortRD_Old',
           'esriSRDatum_NAD1927CGQ77',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Traverse_Meters',
           'esriSRProjCS_TWD1967TMPenghu',
           'esriSRSpheroid_GRS1980Adj_MinnesotaStLouisNorth',
           'esriSRProjCS_WGS1984SphereWebMercator',
           'esriSRProjCS_NigeriaEastBelt',
           'esriSRProjCS_NAD1983HARNSPCS_OHNorth',
           'esriSRProjCS_NAD1983_StatePlane_Michigan_Central_FIPS_2112_Feet_Intl',
           'esriSRProjCS_MGIAustriaGKCentral',
           'esriSRGeoTransformation_Samoa_1962_To_HARN_WestSamoa',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Aitkin_Feet',
           'esriSRGeoCS_OSU1991A',
           'esriSRProjCS_NAD1983HARN_WISCRSSawyerM',
           'esriSRGeoCS_Lisbon1890',
           'esriSRProjCS_World_AzimuthalEquidistant',
           'esriSRProjCS_NAD1983HARN_WISCRSIowaM',
           'ICoordinateFrameTransformation',
           'esriSRDatum_Liberia1964', 'esriSRUnit_SurveyLink',
           'esriSRDatum_BabSouthAstro',
           'esriSRProjCS_NAD1983HARN_StatePlane_Hawaii_3_FIPS_5103_Feet',
           'esriSRProjCS_WGS1972UTM_45N',
           'esriSRProjCS_NZGD1949_Karamea_Circuit',
           'esriSRProjCS_WGS1972UTM_10N',
           'esriSRProjCS_NAD1927CGQ77MTM_5SCoPQ',
           'esriSRDatum_ReseauGeodesique_de_la_Reunion1992',
           'esriSRVertCS_SNN76', 'esriSRProjCS_WGS1972UTM_45S',
           'esriSRProjCS_WGS1972UTM_10S',
           'esriSRProjCS_NAD1927UTM_22N', 'esriSRDatum_NAD19271976',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_102E',
           'esriSRProjCS_POSGAR98ArgentinaZone1',
           'esriSRProjCS_POSGAR98ArgentinaZone3',
           'esriSRProjCS_POSGAR98ArgentinaZone2',
           'esriSRProjCS_POSGAR98ArgentinaZone5',
           'esriSRProjCS_POSGAR98ArgentinaZone4',
           'esriSRProjCS_POSGAR98ArgentinaZone7',
           'esriSRProjCS_POSGAR98ArgentinaZone6',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_153E',
           'esriSRProjCS_NAD1983HARN_StatePlane_Texas_South_FIPS_4205_Ft',
           'esriGARSModeLL', 'esriSRProjCS_DealulPisculuiStereo1933',
           'esriSRDatum_NeptuneNaiad',
           'esriSRProjCS_Estonia1997_Estonia_National_Grid',
           'esriSRProjection_TwoPointEquidistant',
           'esriSRGeoTransformation_ST71_Belep_To_WGS_1984_1',
           'esriSRDatum_NAD1983HARNAdj_WIKewauneeManitowocSheboygan',
           'esriSRGeoTransformation_NGO_1948_To_WGS_1984',
           'esriSRProjCS_NAD1927SPCS_LAOffshore', 'Vector3D',
           'esriSRGeoTransformation_MONREF_1997_To_Pulkovo_1942_2',
           'esriSRGeoTransformation_MONREF_1997_To_Pulkovo_1942_1',
           'esriSRProjCS_NAD1983HARN_Adj_WI_St_Croix_Meters',
           'esriGeometryServerMessageCode_Intersect',
           'esriSRProjCS_LisboaBesselBonne',
           'esriSRProjCS_AGD1966AMG_49',
           'esriSRDatum_NAD1983HARNAdj_WisconsinBurnett',
           'esriSRUnit_ArcSecond', 'esriSRDatum_UranusOberon',
           'esriSRGeoTransformation_AGD1984_To_GDA1994_4_NTv2_WestAus',
           'esriGeometryHitPartType',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinLanglade',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_21E',
           'esriSRProjCS_NAD1983N_AmericaLambert',
           'esriSRProjCS_NAD1983_CSRS98_UTM_Zone_17N',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaWright',
           'esriSRProjCS_NAD1983HARNSPCS_ORSouth',
           'esriSRGeoTransformation_IGN56_Lifou_To_RGNC_1991_93_2',
           'esriSRGeoTransformation_IGN56_Lifou_To_RGNC_1991_93_1',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinDoor',
           'esriSRProjCS_SWEREF99_14_15',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_90E',
           'esriSRProjCS_Pulkovo1995GK_18N',
           'esriSRProjCS_NAD1983_UTM_Zone_59N',
           'esriSRVertCS_YellowSea1985',
           'esriSRProjCS_WGS1984UTM_23N',
           'esriSRProjCS_NZGD1949_Observation_Point_Circuit',
           'esriSRProjCS_WGS1984SouthGeorgiaLambert',
           'esriSRDatum_GDM2000', 'esriSRDatum_Piton_des_Neiges',
           'ISpatialReference2GEN', 'esriSRProjCS_WGS1984UTM_23S',
           'esriSRDatum_ObservatorioMeteorologico1965',
           'esriSRProjCS_NAD1983HARN_WISCRSKewauneeM',
           'esriSRProjection_HotineTwoPointerCenter',
           'esriSRProjCS_ELD1979_UTM_Zone_35N',
           'esriSRProjCS_SAD1969PalestineGrid',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Steele_Feet',
           'esriSRGeoCS_NordSahara1959', 'esriSRGeoCS_Ammassalik1958',
           'esriSRProjCS_WGS1984UTM_45N', 'esriSRGeoCS_Clarke1858',
           'esriSRProjCS_WGS1984UTM_18S',
           'esriSRProjection_VanDerGrintenI',
           'esriSRProjCS_FortMarigot_UTM_20N',
           'S_GEOMETRY_DATUMCONVERSIONATTEMPTED',
           'esriSRProjCS_JGD2000_UTM_Zone_55N',
           'esriSRProjCS_WGS1984UTM_45S',
           'esriSRProjCS_WGS1984UTM_18N',
           'esriSRProjCS_SIRGAS2000UTMZone25S',
           'esriSRProjCS_NAD1983HARN_StatePlane_Idaho_East_FIPS_1101_Ft',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_132E',
           'esriSRGeoTransformation3Type',
           'esriSRProjCS_Datum73HayfordGaussIPCC',
           'E_GEOMETRY_BUFFER_INVALID_BUFFER_DISTANCE',
           'esriSRDatum_Kasai1953',
           'esriSRProjCS_NAD1983_StatePlane_North_Dakota_North_FIPS_3301_Feet_Intl',
           'esriSRProjCS_WGS1972UTM_59N',
           'esriSRProjCS_NAD1983HARN_WISCRSRacineFtUS',
           'esriGeometryMultipoint',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinWaukesha',
           'esriSRProjCS_WGS1972UTM_59S',
           'esriSRVertCS_MaupitiSAU2001', 'esriSRDatum_Jamaica1875',
           'esriSRGeoTransformation_ED1950_To_WGS1984_13',
           'esriSRGeoTransformation_Gunung_Segara_Jakarta_To_Gunung_Segara',
           'esriSRGeoTransformation_ED1950_To_WGS1984_11',
           'esriSRGeoTransformation_ED1950_To_WGS1984_10',
           'esriSRProjCS_WGS1984NPoleLAEARussia',
           'esriSRGeoTransformation_ED1950_To_WGS1984_16',
           'esriSRGeoTransformation_ED1950_To_WGS1984_19',
           'esriSRGeoTransformation_ED1950_To_WGS1984_18',
           'esriSRGeoCS_Anna1_1965',
           'esriSRDatum_AzoresOrientalIslands1995',
           'esriSRProjCS_Pulkovo1942GK_9N',
           'esriSRGeoTransformation_Pitcairn_1967_To_WGS_1984',
           'esriSRProjCS_MGIFerro_AustriaGKCentral',
           'esriShapeMultiPatchModifierMask',
           'esriSRProjCS_NAD1927SPCS_NYEast',
           'esriSRSpheroid_GRS1980Adj_WisconsinTaylor',
           'esriSRProjCS_NAD1983HARN_UTM_Zone_5N',
           'esriSRGeoTransformation_St_George_To_WGS_1984_1',
           'esriSRProjCS_NAD1927SPCS_LANorth',
           'esriSRProjCS_NAD1983HARNSPCS_MNSouth',
           'esriSRProjCS_ETRS1989_UTM_Zone_28N',
           'esriSRGeoTransformation_Tahiti_1979_To_RGPF_1',
           'esriSRProjCS_Pulkovo1995GK_32',
           'esriSRGeoTransformation_Ammassalik_1958_To_WGS_1984_1',
           'E_GEOMETRY_BUFFER_DISTANCE_ZERO',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_75E', 'Polygon',
           'esriSRProjCS_Pulkovo1942GK_18N',
           'esriSRGeoTransformation_Deir_ez_Zor_To_WGS_1984_6',
           'esriSRGeoTransformation_Deir_ez_Zor_To_WGS_1984_5',
           'esriSRDatum_Everest1967',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_123E',
           'esriSRDatum_Everest1962', 'esriSRProjCS_Sphere_WinkelI',
           'esriSRSpheroid_GRS1980Adj_WisconsinFlorence',
           'esriSRProjCS_NAD1927SPCS_CAIV',
           'esriSRProjCS_NAD1983SPCS_CTFT', 'esriSRUnit_Kilometer',
           'esriSRProjCS_NAD1983SPCS_MNNorth',
           'esriSRGeoTransformation_AGD_1966_To_GDA_1994_9',
           'esriSRSpheroid_GRS1980Adj_MinnesotaScott',
           'esriSRProjCS_NAD1927SPCS_CAII',
           'esriSRProjCS_Dabola1981_UTMZone28N',
           'esriSRProjCS_NAD1983SPCS_NMWestFT',
           'GeoTransformationOperationSet',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinAshland',
           'esriSRGeoCS_Pitcairn1967', 'IMultiPatch2',
           'esriSRDatum_DealulPiscului1970',
           'esriSRGeoTransformation_Mauritania_1999_To_WGS_1984_1',
           'esriSRDatum_Stockholm1938', 'esriConstructOffsetBevelled',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Mahnomen_Feet',
           'esriSRProjCS_SIRGAS_UTM_Zone_19N',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinGreenLake',
           'esriSRGeoCS_Kalianpur1975',
           'esriSRProjCS_SIRGAS_UTM_Zone_19S',
           'esriSRProjCS_Kalianpur1962India_IIa',
           'esriSRProjCS_NAD1983HARN_StatePlane_Oklahoma_North_FIPS_3501_Ft',
           'esriSRProjCS_SierraLeone1924_New_Colony_Grid',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_36E',
           'IEnvelope2',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_35',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_34',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_37',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_36',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_31',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_30',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_33',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_32',
           'E_GEOMETRY_SIMPLIFYFAILED',
           'esriSRSpheroid_SaturnTelesto',
           'esriSRProjCS_Beijing1954_3_Degree_GK_CM_105E',
           'esriShapeExportNoSwap', 'esriSRVertCS_Auckland',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_64',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_62',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_63',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_60',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_61',
           'esriSRProjCS_Beijing1954GK_16N', 'esriSRGeoCS_Lome',
           'ISegmentCollection', 'esriSRDatum_SaturnAtlas',
           'esriSRProjCS_NAD1983HARN_WISCRSOneidaFtUS',
           'esriSRGeoCS_Adindan',
           'esriSRProjCS_NAD1983HARNSPCS_MEWest',
           'esriSRProjCS_BataviaUTM_49S',
           'esriSRProjCS_AGD1966_ISG_54_2',
           'esriSRProjCS_AGD1966_ISG_54_3',
           'esriSRGeoTransformation_SIRGAS_2000_To_WGS_1984_1',
           'esriSRDatum_Clarke1858', 'esriSRDatum_Schwarzeck',
           'esriSRVertDatum_Mayotte1950', 'esriShapeHasMs',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_48E',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Iowa_Feet',
           'esriSRVertDatum_IGN1987', 'esriSRVertCS_OneTreePoint',
           'esriSRProjCS_SIRGAS_UTM_Zone_22N', 'E_GEOMETRY_NULL',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_28',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_29',
           'esriSRGeoTransformation_PortoSanto1936_To_WGS1984_1',
           'esriSRProjCS_SIRGAS_UTM_Zone_22S',
           'esriSRGeoTransformation_PortoSanto1936_To_WGS1984_2',
           'esriSRProjCS_NAD1927SPCS_MEEast',
           'esriSRProjCS_MGIFerro_GKM31',
           'esriSRProjCS_MGIFerro_GKM34',
           'esriSRGeoTransformation_Indian_1960_To_WGS_1972_BE',
           'esriSRProjCS_NAD1927CGQ77UTM_21N',
           'esriSRProjCS_Pulkovo1995GK_7',
           'esriSRGeoTransformation_Bissau_To_WGS_1984',
           'esriSRSpheroid_Mars1979',
           'esriSRProjCS_Pulkovo1942GK_21N',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Beltrami_North_Feet',
           'esriSRProjCS_NAD1983HARN_WISCRSVilasFtUS',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_27',
           'esriSRProjCS_Zanderij_Suriname_Old_TM',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaLincoln',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_25',
           'esriSRProjCS_NAD1983HARNSPCS_SDSouthFT',
           'esriSRProjCS_NAD1927SPCS_MNSouth',
           'esriSRProjCS_Xian1980_3_Degree_GK_CM_126E',
           'esriSRProjCS_IGN72_GrandeTerre_UTM_58S',
           'esriSRDatum_HitoXVIII1963',
           'E_SPATIALREFERENCE_NOPRECISION',
           'esriSRGeoCS_ReseauGeodesiqueFrancaisGuyane1995',
           'esriSRSpheroid_GRS1980Adj_MinnesotaCottonwood',
           'esriSRVertDatum_CVD1928',
           'esriSRGeoTransformation_Scoresbysund_1952_To_WGS_1984_1',
           'esriSRProjCS_BogotaUTM_17N', 'esriSRVertDatum_FairIsle',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Cass_South_Feet',
           'esriSRGeoTransformation_Bogota_To_WGS_1984_region_5_CF',
           'esriSRSpheroid_International1967', 'esriSRVertCS_NGNC',
           'esriSRGeoTransformation_Point58_To_WGS_1984_1',
           'esriSRProjCS_SAD1969S_AmericaLambert',
           'esriSRGeoTransformation_MGI_Ferro_TO_MGI',
           'esriSRGeoTransformation_RT90_To_WGS1984',
           'esriSRProjCS_NAD1927SPCS_IDCentral',
           'esriSRProjCS_NAD1927SPCS_IANorth',
           'esriSRGeoTransformation_Hanoi_1972_To_WGS_1984',
           'esriSRSpheroid_NeptuneNaiad', 'esriGeometryPartVertex',
           'esriSRProjCS_Accra_Ghana_Grid',
           'esriSRProjCS_NAD1983_CRS98_MTM_3',
           'esriSRGeoCS_NeptuneLarissa',
           'esriSRProjCS_NAD1983_CRS98_MTM_6', 'esriSRGeoCS_AGD1984',
           'esriSRProjCS_NAD1983_CRS98_MTM_4',
           'esriSRProjCS_NAD1983_CRS98_MTM_5', 'esriSRVertCS_Newlyn',
           'esriSRProjCS_NAD1983_CRS98_MTM_9', 'esriSRGeoCS_TWD1967',
           'esriSRVertDatum_Constanta',
           'esriSRGeoTransformation_StGeorge_TO_NAD_1983',
           'esriSRProjCS_TWD1967TM_Taiwan',
           'esriSRProjCS_WGS1972UTM_47N',
           'esriSRProjCS_Xian1980_3_Degree_GK_CM_108E',
           'esriSRSpheroid_UranusBianca',
           'esriSRSpheroid_UranusCressida', 'esriSRDatum_Qatar1948',
           'esriSRProjCS_WGS1972UTM_47S', 'esriSRSpheroid_Danish1876',
           'esriSRProjCS_NAD1983SPCS_TXSouthCentFT',
           'esriSRGeoTransformation_D48_To_ETRS_1989_Dolenjska',
           'esriSRProjCS_DHDN_SoldnerBerlin', 'esriSRGeoCS_KUDAMS',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Mahnomen_Meters',
           'esriSRProjCS_NAD1983SPCS_IASouth',
           'esriSRProjCS_NAD1983CSRS98NewBrunswick',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Green_Meters',
           'NADCONTransformation',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Walworth_Meters',
           'esriSRProjCS_NAD1983BCEnvAlbers',
           'esriSRProjCS_NAD1983_UTM_Zone_60N',
           'esriSRGeoTransformation_D48_To_ETRS_1989_Severovzhodna_Slovenia',
           'esriSRSpheroid_NeptuneDespina',
           'esriSRDatum_NAD1983HARNAdj_WisconsinPortage',
           'IEnumSplitPoint', 'esriSRProjection_RSO_NaturalOrigin',
           'esriSRProjCS_ETRS1989ETRS_GK21FIN',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_63E',
           'esriSRDatum_WakeIsland1952',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Marquette_Feet',
           'esriSRGeoTransformation_BogotaBogota_To_WGS1984',
           'IConstructPoint2', 'E_GEOMETRY_NONPOINT',
           'esriSRDatum_TrucialCoast1948',
           'esriSRProjCS_SudAlgerie_Ancienne_Degree',
           'esriSRDatum_PuertoRico',
           'esriSRGeoCS_ModifiedEverest1969',
           'esriSRProjCS_NZGD1949_Nelson_Circuit',
           'esriSRGeoTransformation_D48_To_ETRS_1989_2007',
           'esriSRProjCS_NAD1983HARNSPCSPennsylvaniaSouthUSFt',
           'esriSRProjCS_Arc1960_UTM_Zone_36S',
           'esriSRGeoTransformation_S_JTSK_To_ETRS_1989_1',
           'esriSRGeoTransformation_S_JTSK_To_ETRS_1989_2',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_45E',
           'esriSRProjCS_Arc1960_UTM_Zone_36N',
           'esriSRDatum_NeptuneDespina',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_75E',
           'esriSRProjCS_NAD1983SPCS_ILWestFT',
           'esriSRVertDatum_Durres', 'esriSRProjCS_PeruWest',
           'IESRIShape2', 'esriSRProjCS_Pulkovo1942GK_24N',
           'esriSRGeoCS_LePouce1934',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Oconto_Feet',
           'esriSRProjCS_WGS1984N_PoleStereographic',
           'esriSRProjCS_NAD1927SPCS_PASouth', 'esriSRGeoCS_TheMoon',
           'esriSRGeoTransformation_MGI_To_ETRS_1989_1',
           'esriSRGeoTransformation_MGI_To_ETRS_1989_2',
           'esriSRGeoTransformation_MGI_To_ETRS_1989_3',
           'esriSRGeoTransformation_Tete_To_Moznet_2',
           'esriSRGeoTransformation_Tete_To_Moznet_3',
           'esriSRGeoTransformation_Tete_To_Moznet_1',
           'esriSRGeoTransformation_Tete_To_Moznet_4',
           'esriSRGeoTransformation_Tete_To_Moznet_5',
           'esriSRProjCS_WGS1984UTM_46S',
           'esriSRGeoTransformation_Chos_Malal_1914_To_WGS_1984',
           'esriSRVertDatum_HonDau1992',
           'esriSRGeoTransformation_Gulshan_303_To_WGS_1984_1',
           'esriSRProjCS_NAD1983HARN_UTM_Zone_18N',
           'esriSRDatum_Qornoq1927',
           'esriSRGeoTransformation_Mahe1971_To_WGS1984',
           'esriSRGeoCS_CoteDIvoire',
           'esriSRParameter_LongitudeOfCenter',
           'esriSRVertDatum_Lerwick', 'esriSRGeoCS_SIRGAS2000',
           'esriSRGeoCS_CampArea', 'esriSRProjCS_NAD1983SPCS_HI_4FT',
           'esriSRProjCS_WGS1984UTM_43N',
           'esriSRProjCS_WGS1984N_AsiaEquiConic',
           'esriSRDatum_Latvia1992', 'esriRelocateEnds',
           'esriSRProjCS_NAD1983SPCS_CONorthFT',
           'esriSRProjCS_NAD1983SPCS_AZCentral',
           'esriSRGeoCS_Kusaie1951', 'esriSRDatum_WGS1972BE',
           'esriSRProjCS_WGS1984UTM_43S',
           'esriSRSpheroid_GRS1980Adj_MinnesotaPolk',
           'esriSRProjCS_SWEREF99_16_30',
           'esriSRProjCS_NAD1983CSRS98UTM_20N',
           'esriSRGeoCS_Potsdam1983',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaPipestone',
           'esriGeometry2DEmbeddingDimension',
           'esriSRProjCS_NAD1983SPCS_PRStCroixFT',
           'esriSRGeoCS_Clarke1880IGN',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaLake_of_theWoodsNorth',
           'esriSRProjCS_NAD1983HARN_WISCRSPolkM',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Douglas_Feet',
           'esriSRProjCS_NAD1983HARNSPCS_GAWest',
           'E_GEOMETRY_UNDERCONSTRAINED',
           'esriSRProjCS_OldHawaiianUTM4N', 'esriSRGeoCS_Mhast',
           'esriSRDatum_UranusAriel',
           'esriCurveIteratorStopAtPartFrom',
           'esriSRProjCS_WGS1984UTM_46N', 'esriShapeIsCompressed',
           'esriSRProjCS_WGS1984AfricaEquiConic',
           'esriSRGeoCS_MGIFerro',
           'esriSRGeoTransformation_RGR_1992_To_WGS_1984_1',
           'esriSRSpheroid_GRS1980Adj_WisconsinVernon',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaCarlton',
           'esriSRProjCS_NAD1983HARNSPCS_CT',
           'esriSRProjCS_Yemen_NGN_1996_UTM_Zone_38N',
           'esriSRGeoTransformation_Voirol1875_To_WGS1984',
           'esriSRProjCS_FranceIII', 'esriSRProjCS_Tokyo_UTM54N',
           'esriArcMinor', 'esriSpatialRelationIn', 'IHVDatum',
           'IArea', 'esriSRProjCS_NAD1983HARNSPCS_INWest',
           'esriSRProjCS_Xian1980_3_Degree_GK_CM_93E',
           'esriGeometry3Dimension', 'esriSRProjCS_WGS1972UTM_31S',
           'esriSRProjCS_NAD1983HARN_WISCRSFlorenceM',
           'SegmentOverlapRightInMiddle',
           'esriSRProjCS_NAD1983HARN_WISCRSGreenFtUS', 'Path',
           'esriSRProjCS_NAD1983HARN_StatePlane_New_Mexico_West_FIPS_3003_Ft',
           'esriSRUnit_StatuteMile',
           'esriSRGeoTransformation_ITRF_1992_To_ITRF_2000_1',
           'esriSRGeoTransformation_KKJ_To_EUREF_FIN',
           'esriSRProjCS_NAD1927SPCS_WVNorth',
           'esriSRGeoTransformation_ITRF_1991_To_ITRF_2000_1',
           'esriSRProjCS_NAD1983SPCS_GAWest',
           'esriSRGeoTransformation_Hermannskogel_To_WGS_1984',
           'esriSRGeoCS_NTF', 'esriSRProjCS_NADMichSPCS_MIWestOld',
           'esriSRProjCS_NAD1983HARN_WISCRSManitowocFtUS',
           'esriSRGeoCS_PSAD1956', 'esriSRDatum_Timbalai1948',
           'esriSRVertDatum_NGC1948',
           'esriSRGeoTransformation_MONREF_1997_To_MSK_1942_2',
           'esriSRSpheroid_JupiterAmalthea',
           'esriSRGeoTransformation_MONREF_1997_To_MSK_1942_1',
           'ISegment', 'E_GEOMETRY_SR_Z_MISMATCH',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaPolk',
           'esriSRProjCS_NAD1927Def1976UTM_18N',
           'esriSRProjCS_Xian1980_GK_Zone_17',
           'esriSRGeoTransformation_GGRS1987_To_WGS1984',
           'esriSRProjCS_Xian1980_GK_Zone_15',
           'esriSRGeoCS_JupiterGanymede',
           'esriSRGeoTransformation_Viti_Levu_1916_To_WGS_1984',
           'esriSRProjCS_Samoa1962_Samoa_Lambert',
           'esriSRProjCS_Xian1980_GK_Zone_18',
           'esriSRProjCS_Xian1980_GK_Zone_19',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_53',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_52',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_51',
           'esriConstructOffsetMitered',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_57',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_56',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_55',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_54',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_59',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_58',
           'esriSRProjCS_MGI_Balkans_5', 'esriSRProjCS_MGI_Balkans_7',
           'esriSRProjCS_MGI_Balkans_6', 'esriSRProjCS_MGI_Balkans_8',
           'esriSRSpheroid_GRS1980Adj_MinnesotaBeltramiSouth',
           'esriSRGeoTransformation_Ocotepeque_1935_To_WGS_1984_RN',
           'esriSRProjCS_Beijing1954_3_Degree_GK_Zone_29',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaLake_of_theWoodsNorth',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_180E',
           'esriSRGeoCS_Mauritania1999', 'esriSRProjection_EckertVI',
           'esriSRProjCS_ChathamIslands1979_Map_Grid',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_123E',
           'esriSRGeoTransformation_Pulkovo1942_To_Estonia1992',
           'esriSRProjCS_Xian1980_GK_CM_105E', 'esriSRGeoCS_LaCanoa',
           'esriSRProjCS_NAD1983HARN_StatePlane_Washington_North_FIPS_4601_Ft',
           'esriSRDatum_Hjorsey1955', 'esriSRDatum_KUDAMS',
           'esriSRGeoCS_Pulkovo1995',
           'esriSRProjCS_SAD1969_Brazil_Polyconic',
           'esriSRDatum_International1924', 'IRelationalOperatorNxM',
           'esriExtendTangentAtFrom',
           'esriSRProjCS_PuertoRicoSPCS_PR', 'esriSRDatum_EMEP',
           'esriSRProjCS_NAD1983SPCS_AK7FT',
           'esriSRProjCS_SIRGAS_UTM_Zone_24S',
           'esriSRProjCS_NAD1983CSRS_StatsCanadaLambert',
           'esriSRDatum_NAD1983HARNAdj_WisconsinLincoln',
           'esriSRProjCS_NAD1927SPCS_UTNorth',
           'esriSRProjCS_NAD1983SPCS_LASouth',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaBecker',
           'SegmentOverlapRightAtBeginning',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinMilwaukee',
           'esriSRDatum_NAD1983HARNAdj_WisconsinMarinette',
           'esriSRVertCS_NorwayNormalNul1954',
           'esriSRProjCS_Pulkovo1942GK_23N',
           'esriSRProjCS_NAD1927SPCS_TXSouthCentral',
           'esriSRProjCS_WGS1984UTM_37S',
           'esriSRProjCS_NAD1983HARNSPCS_ARSouthFT',
           'esriSRGeoCS_Voirol1875', 'esriSRProjCS_WGS1984UTM_37N',
           'esriSRGeoTransformation_WGS_1984_To_NTF_NTV2',
           'esriSRGeoCS_Voirol1879',
           'esriSRGeoTransformation_RGFG_1995_To_WGS_1984_1',
           'esriSRProjCS_NZGD2000_Marlborough_Circuit',
           'esriSRProjCS2Type',
           'esriSRProjCS_NAD1983HARNSPCS_TXNorth',
           'esriSRProjCS_Pulkovo1942CS63ZoneC0',
           'esriSRProjCS_Pulkovo1942CS63ZoneC1',
           'esriSRProjCS_Pulkovo1942CS63ZoneC2',
           'esriSRProjCS_WGS1984UTM_9N',
           'esriSRProjCS_WGS1984_Complex_UTM_Zone_26N',
           'esriSRProjCS_NAD1983HARNSPCS_IASouthFT',
           'esriSRGeoCS_Amersfoort', 'E_GEOMETRY_INVALID_AXES',
           'IConstructMerge', 'esriSRSpheroid_SaturnAtlas',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaSteele',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Swift_Feet',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_99E',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Chisago_Meters',
           'esriSRUnit_Indian1975Foot',
           'esriSRGeoCS_Scoresbysund1952',
           'esriSRGeoTransformation_Kousseri_To_WGS_1972_BE_1',
           'esriSRVertCS_NG_L', 'wkbNDR',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaSteele',
           'esriSRProjCS_NZGD2000_Poverty_Bay_Circuit',
           'esriSRSpheroid_GRS1980Adj_WisconsinShawano',
           'esriSRDatum_EverestIndiaNepal',
           'esriGeometryServerMessageCode_Offset',
           'esriSRGeoCS_NAD1983', 'IHitTest', 'esriSRDatum_Mhast',
           'esriSRGeoCS_SaturnTitan', 'esriSRGeoCS_AGD1966',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Olmsted_Meters',
           'esriSRDatum_CorregoAlegre', 'esriSRGeoCS_GDM2000',
           'esriSRDatum_EuropeanTerrestrialRefSystem1989',
           'esriSRProjCS_SingaporeGrid',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaWright',
           'esriSRDatum_AyabelleLighthouse',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaMurray',
           'esriSRProjCS_WGS1972UTM_41N', 'esriSRUnit_SurveyChain',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Burnett_Meters',
           'esriSRGeoTransformation_Indian_1960_To_WGS_1984_1',
           'esriSRGeoTransformation_Indian_1960_To_WGS_1984_2',
           'esriSRGeoTransformation_Indian_1960_To_WGS_1984_3',
           'esriSRProjCS_WGS1972UTM_41S', 'esriSRGeoCS_Bern1938',
           'esriSRGeoTransformation_Luxembourg_1930_To_ETRS_1989_2',
           'esriSRGeoTransformation_Luxembourg_1930_To_ETRS_1989_1',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaWaseca',
           'esriSRGeoTransformation_Amersfoort_To_ETRS_1989',
           'esriSRProjCS_DGN1995_UTMZone50N',
           'esriSRDatum_Barbados1938', 'esriSRGeoCS_Nahrwan1934',
           'esriSRProjCS_Sphere_HammerAitoff',
           'esriSRProjCS_Grenada1953BritishWIndies',
           'esriSRProjCS_NAD1927_3TM_114', 'esriExtendAtFrom',
           'esriSRGeoCS_MonteMarioRome',
           'esriSRGeoTransformation_Azores_Oriental_1995_To_WGS_1984_3',
           'esriSRGeoTransformation_Azores_Oriental_1995_To_WGS_1984_2',
           'esriSRGeoTransformation_Azores_Oriental_1995_To_WGS_1984_5',
           'esriSRGeoTransformation_Azores_Oriental_1995_To_WGS_1984_4',
           'esriSRGeoTransformation_Solomon_1968_To_WGS_1984_1',
           'esriPatchType',
           'esriSRGeoTransformation_Solomon_1968_To_WGS_1984_2',
           'esriSRUnit_SurveyMile',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Taylor_Meters',
           'esriSRVertDatum_KOCConstructionDatum',
           'esriSRSpheroid_GRS1980Adj_MinnesotaChisago',
           'esriSRGeoTransformation_MonteMarioRome_To_WGS1984',
           'esriSRDatum_SaturnIapetus',
           'esriSRProjCS_NAD1983HARNSPCS_OHSouth',
           'esriSRProjCS_Philippines_IV', 'esriSRGeoCS_Egypt1907',
           'esriSRProjCS_ED_1950_UTM_38N',
           'esriSRUnit_Benoit1895A_Yard',
           'esriSRGeoCS_NeptuneDespina',
           'esriSRProjCS_FranceIIDegrees',
           'esriProjectionHintSetEmpty',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Racine_Meters',
           'esriSRProjCS_NAD1927SPCS_KYNorth',
           'esriSRSpheroid_GRS1980Adj_WisconsinOneida',
           'UnknownCoordinateSystem',
           'esriSRProjection_CylindricalEqualArea',
           'esriSRProjCS_FatuIva1972UTMZone7S',
           'esriSRGeoTransformation_Arc1950_To_WGS1984_7',
           'esriSRGeoCS_Tananarive1925',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_138E',
           'esriSRGeoCS_Krasovsky1940', 'esriMultiPatchUndefinedRing',
           'esriSRGeoTransformation_IGN72_Grande_Terre_To_WGS_1984_3',
           'esriSRGeoTransformation_IGN72_Grande_Terre_To_WGS_1984_2',
           'esriSRProjCS_NAD1927SPCS_WYEast',
           'esriSRProjCS_NAD1983SPCS_MD', 'esriSRDatum_Greenland1996',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaBigStone',
           'esriSRProjCS_NAD1983SPCS_MT',
           'esriSRProjCS_ST84_Ile_des_Pins_UTM_58S',
           'esriShapeExportStripMs',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaBlueEarth',
           'esriSRGeoTransformation_Merchich_degrees_To_WGS_1984',
           'esriSRProjCS_JGD2000_UTM_Zone_51N',
           'esriSRVertCS_NGF_IGN69', 'esriSRDatum_Yoff',
           'esriSRGeoTransformation_CampoInchauspe_To_WGS1984',
           'esriSRSpheroid_Everest1830', 'esriSRDatum_Lome',
           'esriSRProjCS_Roma1940_Gauss_Boaga_Ovest',
           'esriSRProjCS_Sphere_Cassini',
           'esriSRProjCS_WGS1984UTM_41N',
           'esriSRProjCS_NZGD1949_Gawler_Circuit',
           'esriSRGeoTransformation_NTF_Paris_To_NTF',
           'esriSRProjCS_NAD1983SPCS_KSSouthFT',
           'esriSRProjCS_WGS1984UTM_14S', 'esriSRDatum_Tahaa',
           'esriSRProjCS_WGS1984UTM_41S', 'IGeometryServer',
           'esriSRGeoCS_StPaulIsland',
           'esriSRGeoTransformation_SaoBraz_To_WGS1984_2',
           'esriSRGeoTransformation_SaoBraz_To_WGS1984_1',
           'esriSRGeoTransformation_Kalianpur1937_To_WGS1984_1',
           'E_GEOMETRY_ZM_OUT_OF_BOUNDS',
           'esriSRUnit_Benoit1895A_Foot', 'esriSRDatum_Bermuda1957',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Carver_Feet',
           'esriSRProjCS_NAD1983SPCS_UTNorthFT',
           'esriSRDatum_Bessel1841',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_30E',
           'esriSRProjCS_PSADUTM_17S',
           'esriSRProjCS_DGN1995IndonesiaTM3Zone51_2',
           'esriSRProjCS_DGN1995IndonesiaTM3Zone51_1',
           'esriSRProjCS_GDM2000Johor',
           'esriSRProjCS_NAD1983HARNSPCS_CAIV',
           'esriSRProjCS_NAD1983HARNSPCS_CAII',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaBenton',
           'esriSRGeoCS_PointeNoire', 'esriSRDatum_Kalianpur1962',
           'esriSRGeoCS_DeceptionIsland',
           'esriSRVertDatum_MooreaSAU1981',
           'esriSRDatum_Clarke1880Arc',
           'E_SPATIALREFERENCE_NOMPRECISION',
           'esriSRProjCS_NAD1927SPCS_COSouth',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinAdams',
           'esriSRGeoTransformation_Arc1960_To_WGS1984',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinCrawford',
           'esriDivideIntoPolylines', 'esriSRProjCS_WGS1972UTM_33S',
           'esriSRProjCS_NAD1983HARNSPCS_UTCentralFT',
           'esriSRGeoCS_Latvia1992',
           'esriSRProjCS_Jamaica1875OldGrid',
           'esriSRProjCS_NAD1983HARNSPCS_FLWest',
           'esriSRUnit_ArcMinuteCentesimal',
           'esriSRProjCS_WGS1972UTM_33N', 'IGeoTransformation',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Marshall_Meters',
           'esriSRGeoCS_AuthalicSphere_GRS1980',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaCarver',
           'esriSRVertCS_DVR90', 'esriSRProjection_Polyconic',
           'esriSRProjCS_RGR1992_UTM_40S',
           'esriSRGeoCS_NAD1983CSRS98',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Dakota_Feet',
           'esriSRProjCS_NAD1983HARN_WISCRSDodgeM',
           'esriSRProjCS_NAD1983HARN_WISCRSOneidaM',
           'esriSRProjCS_MGI_Slovenia_Grid',
           'esriSRDatum_Clarke1880IGN', 'esriShapeExportNewArcFormat',
           'esriSRGeoCS_JupiterAmalthea',
           'esriGeometryServerMessageCode_FindSRByWKT',
           'esriSRGeoCS_LisboaHayford',
           'esriSRProjCS_Montserrat1958BritishWIndies',
           'esriSRDatum_Padang1884',
           'esriSRProjCS_AzoresCentral1995_UTM_Zone_26N',
           'esriSRGeoCS_EgyptGulfSuez_S650TL',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Lake_of_the_Woods_North_Meters',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Ashland_Meters',
           'esriGeometryBag',
           'esriSRGeoTransformation_BukitRimpah_To_WGS1984',
           'esriSRUnit_ClarkeLink',
           'esriSRProjCS_NZGD2000_Buller_Circuit',
           'esriSRProjection_Cassini',
           'esriSRGeoTransformation_AGD1966_To_WGS1984',
           'esriSRGeoCS_PicodeLasNieves',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Kenosha_Meters',
           'esriSRGeoCS_Kalianpur1937',
           'esriSRProjCS_Kalianpur1975_UTM45N',
           'esriSRProjCS_NAD1983HARNSPCS_SDNorth',
           'esriSRProjCS_NAD1983UTM_7N', 'esriSRGeoCS_Bissau',
           'esriSRGeoTransformation_Ayabelle_To_WGS_1984',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaCarver',
           'HARNTransformation', 'esriSRProjCS_NAD1983SPCS_AK2FT',
           'esriSRProjCS_Sphere_VerticalPerspective',
           'esriSRVertCS_WGS1984Geoid', 'esriSRPrimeM_Paris',
           'esriSRSpheroid_Clarke1866', 'Envelope',
           'esriSRSpheroid_NeptuneThalassa',
           'esriSRProjCS_NAD1927SPCS_CAI', 'IGeocentricTranslation',
           'IMCollection', 'esriSRSpheroid_OSU1986F',
           'esriSRGeoCS_SAD1969', 'esriPrecisionExImplHandle',
           'esriSRProjCS_DGN1995_UTMZone46N',
           'esriSRProjCS_NAD1983HARNSPCS_VASouth', 'CircularArc',
           'esriSRVertDatum_RaiateaSAU2001',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Cook_South_Meters',
           'esriSRGeoTransformation_Conakry_1905_To_WGS_1984',
           'esriSRProjCS_World_CrasterParabolic',
           'esriSRProjCS_PuertoRicoSPCS_VI',
           'esriSRProjCS_World_Robinson',
           'esriSRProjCS_SJTSK_KROVAK_EN',
           'esriSRSpheroid_GRS1980Adj_MinnesotaKandiyohi',
           'esriSRProjCS_WGS1984UTM_60S',
           'esriSRProjCS_NAD1983UTM_22N',
           'esriSRProjCS_NAD1983HARN_WISCRSAdamsFtUS',
           'E_GEOMETRY_NO_VALID_VERTEX_ATTRIBUTES',
           'esriSRProjCS_Pulkovo1942GK_25N',
           'esriSRProjCS_WGS1984UTM_35S',
           'esriSRProjCS_WGS1984UTM_35N',
           'esriSRSpheroid_GRS1980Adj_MinnesotaKoochiching',
           'esriSRProjCS_WGS1984UTM_60N',
           'esriSRProjCS_WGS1984UTM_7S',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_111E', 'IRay2',
           'esriSRProjCS_WGS1984_Complex_UTM_Zone_24N',
           'esriSRProjCS_WGS1984UTM_7N',
           'esriSRProjCS_DeirEzZorLevant',
           'esriSRSpheroid_ModifiedBessel',
           'esriSRGeoTransformation_D48_To_WGS_1984_Pomurje',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_177E',
           'esriGeometryPolyline',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_180E',
           'esriSRProjCS_NAD1983SPCS_MNCentralFT',
           'esriSRProjCS_SIRGAS2000UTMZone17N',
           'esriSRGeoTransformation_NGO_1948_Oslo_To_NGO_1948',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_177W',
           'esriSRProjCS_SIRGAS2000UTMZone17S',
           'esriSRDatum_GrandComoros',
           'esriSRSpheroid_GRS1980Adj_MinnesotaGrant',
           'esriSRProjCS_WGS1984UTM_1N',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_60E',
           'esriSRGeoCS_IGCB1955', 'esriSRProjCS_WGS1972UTM_43S',
           'esriConstructOffsetFastSimplify',
           'esriSRProjCS_NAD1983SPCS_PASouthFT',
           'esriSRProjCS_NAD1983SPCS_RI',
           'esriSRProjCS_WGS1972UTM_43N', 'esriSRGeoCS_SaturnPhoebe',
           'esriSRProjCS_NAD1983SPCS_WANorthFT',
           'esriSRGeoCS_PortoSanto1936', 'esriProjectionHintExplore',
           'esriSRProjCS_NAD1983CSRS_UTMZone8N',
           'esriSRDatum_Egypt1930',
           'esriSRSpheroid_GRS1980Adj_MinnesotaYellowMedicine',
           'esriSRDatum_Venus1985',
           'esriSRProjCS_Fiji1956_UTMZone60S',
           'esriSRProjCS_Tahiti_UTM_6S', 'esriSRProjection_Krovak',
           'esriSRProjCS_Pulkovo1995GK_12',
           'esriShapeBasicModifierMask',
           'esriSRGeoTransformation_Bogota_To_WGS_1984_region_7_CF',
           'esriSRParameter_ZPositiveDirection',
           'esriSRProjCS_NAD1983HARN_WISCRSLaCrosseM',
           'esriSRGeoCS_AzoresOrientalIslands1995',
           'esriSRProjCS_WGS1984AfricaAlbers',
           'esriSRProjCS_NAD1927SPCS_ARSouth',
           'esriSRSpheroid_GRS1980Adj_WisconsinDoor',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Waushara_Meters',
           'esriSRProjCS_NAD1983BLMZone15NftUS',
           'esriSRProjCS_NAD1983HARN_StatePlane_Mississippi_East_FIPS_2301_Ft',
           'ISegmentGraph2', 'esriSRDatum_JupiterEuropa',
           'E_GEOMETRY_NONGEOMETRY',
           'esriSRDatum_SaintPierre_et_Miquelon1950',
           'esriSRProjCS_Korean1985_Korea_Central_Belt',
           'esriSRProjCS_NAD1983HARNSPCS_WYEast',
           'esriSRProjCS_NZGD2000_New_Zealand_Transverse_Mercator',
           'esriSRDatum_Clarke1866Michigan',
           'esriSRProjCS_NAD1983HARN_WISCRSIronFtUS',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaChippewa',
           'esriSRDatum_CH1903Plus', 'esriSRDatum_TWD1997',
           'esriSRGeoTransformation_D48_To_WGS_1984_Gorenjska',
           'esriSRProjCS_NAD1983HARN_WISCRSLafayetteFtUS',
           'esriSRProjCS_NAD1983HARNSPCS_COCentral',
           'esriSRGeoCS_MGI', 'esriSRGeoCS_FD1954',
           'esriSRGeoTransformation_ELD_1979_To_WGS_1984_3',
           'esriSRProjCS_NAD1983SPCS_NVWestFT',
           'esriSRGeoTransformation_Hito_XVIII_1963_To_WGS_1984',
           'esriGeometryPartNone',
           'esriSRGeoTransformation_Nord_Sahara_1959_Paris_To_Nord_Sahara_1959',
           'IGeographic2DOffsetTransformation',
           'esriSRProjCS_Mauritania1999UTMZone30N',
           'esriSRGeoTransformation_Fort_Marigot_To_WGS_1984_1',
           'esriSRProjCS_NAD1983HARN_WISCRSWausharaFtUS',
           'esriSRGeoTransformation_NAD_1927_To_WGS_1984_79_CONUS',
           'esriSRProjCS_Beijing1954_3_Degree_GK_Zone_45',
           'esriSRProjCS_Beijing1954_3_Degree_GK_Zone_44',
           'esriSRProjCS_Beijing1954_3_Degree_GK_Zone_43',
           'esriSRVertCS_FlannanIsles',
           'esriSRProjCS_Beijing1954_3_Degree_GK_Zone_41',
           'esriSRProjCS_Beijing1954_3_Degree_GK_Zone_40',
           'esriSRProjCS_NAD1927CGQ77MTM_2SCoPQ',
           'ILinePolygonHelper',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_51E',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaFreeborn',
           'esriSRDatum_JupiterAnanke', 'esriGeometry2Dimension',
           'esriSRGeoTransformation_ELD_1979_To_WGS_1984_8',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_165E',
           'esriSRParameter4Type', 'IBezierCurve2', 'IBezierCurve3',
           'E_GEOMETRY_BAD_SPLIT_DISTANCE', 'esriSRGeoCS_Gan1970',
           'esriSRGeoTransformation_Puerto_Rico_To_NAD_1983',
           'esriSRGeoCS_Walbeck', 'esriSRPrimeM_Madrid',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Milwaukee_Feet',
           'esriSRGeoTransformation_Batavia_Jakarta_To_Batavia',
           'esriSRProjCS_ETRS1989JerseyTM',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Vernon_Feet',
           'esriSRProjCS_NAD1983GreatLakesStLawrenceAlbers',
           'esriSRGeoTransformation_Gunung_Segara_To_WGS_1984_4',
           'esriSRGeoTransformation_Gunung_Segara_To_WGS_1984_1',
           'esriSRGeoTransformation_Gunung_Segara_To_WGS_1984_2',
           'esriSRGeoTransformation_Gunung_Segara_To_WGS_1984_3',
           'ITransformationGEN', 'esriSRDatum_AGD1984',
           'esriSRGeoTransformation_RGNC_1991_To_IGN72_Grande_Terre_NTv2',
           'esriSRGeoCS_Abidjan1987', 'IESRISpatialReference',
           'esriSRProjCS_NAD1983SPCS_TXNorth',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaLake_of_theWoodsSouth',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaCottonwood',
           'esriSRProjCS_Beijing1954_3_Degree_GK_CM_117E',
           'esriSRGeoCS_Madzansua', 'esriSRDatum_PicoDeLasNieves',
           'IVerticalCoordinateSystemGEN', 'esriSpatialRelationEnum',
           'wkbPoint', 'esriSRProjCS_World_Stereographic',
           'esriSRProjCS_JGD2000_UTM_Zone_53N',
           'esriSRProjCS_WGS1984UTM_29S',
           'esriSRProjCS_WGS1984UTM_29N',
           'esriSRGeoCS_SierraLeone1924',
           'esriSRProjCS_ELD1979_UTM_Zone_33N', 'esriSRDatum_Leigon',
           'esriSRUnit_Benoit1895B_Yard', 'esriSRGeoCS_Majuro',
           'IEnvelope4', 'esriSRProjCS_CentreFrance',
           'esriSRGeoTransformation_Piton_des_Neiges_To_WGS_1984_1',
           'esriSRUnit_NauticalMile',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Door_Meters',
           'esriSRGeoTransformation_NAD_1983_harn_To_WGS_1984',
           'esriSRProjCS_WGS1984UTM_16S', 'esriSRGeoCS_Fiji1956',
           'esriSRProjCS_WGS1984UTM_16N', 'esriSRProjCS_SVY21',
           'esriSRSpheroid_GRS1980Adj_WisconsinPepinPierce',
           'IUnknownCoordinateSystem',
           'esriSRSpheroid_GRS1980Adj_MinnesotaBigStone',
           'esriCurveDensifyByLength', 'esriSRProjCS_WGS1972UTM_40S',
           'esriSRGeoCS_Estonia1937',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Le_Sueur_Meters',
           'esriGeometryServerMessageCode_Relation',
           'E_GEOMETRY_NONENVELOPE',
           'E_GEOMETRY_BUFFER_INVOLVES_BOTH_POLES',
           'esriSRProjCS_GDA1994MGA_49', 'esriSRProjCS_GDA1994MGA_48',
           'esriSRProjCS_JAD2001_UTMZone17N',
           'esriSRProjCS_NAD1983HARNSPCS_ARSouth',
           'E_GEOMETRY_AUTHORITY_TOO_LONG',
           'esriSRGeoTransformation_Estonia1992_To_ETRS1989',
           'esriSRGeoTransformation_Minna_To_WGS_1984_13',
           'esriSRGeoCS_Manoca', 'esriSRDatum_Midway1961',
           'esriSRGeoTransformation_RGF_1993_To_ETRF_1989_1',
           'esriSRGeoCS_SouthYemen',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaCassSouth',
           'esriSRProjCS_NZGD2000_Nelson_Circuit',
           'esriSRProjCS_WGS1972UTM_35S', 'esriSRGeoCS_Lisbon',
           'IBufferProgress', 'esriSRProjCS_WGS1972UTM_35N',
           'esriSRProjCS_NGO1948_Baerum_Kommune',
           'esriSRSpheroid_JupiterAdrastea',
           'esriSRDatum_SaturnJanus', 'esriConstructOffsetEnum',
           'esriSRHorizon_Point',
           'esriSRProjCS_NAD1983HARN_StatePlane_Arizona_West_FIPS_0203_Feet_Intl',
           'esriSRGeoTransformation_Egypt_Gulf_Suez_S_650_TL_To_WGS_1972_BE_1',
           'esriSRProjCS_FD1954_UTMZone29N',
           'esriSRProjCS_NAD1927SPCS_MSWest',
           'esriSRGeoCS_RGNC1991_93', 'esriSRVertCS_N60',
           'esriSRGeoTransformation_Arc1950_To_WGS1984_9',
           'esriSRGeoTransformation_Arc1950_To_WGS1984_8',
           'esriSRGeoTransformation_Arc1950_To_WGS1984_3',
           'esriSRGeoTransformation_Arc1950_To_WGS1984_2',
           'esriSRGeoTransformation_Arc1950_To_WGS1984_1',
           'esriSRProjCS_REGVEN_UTM_Zone_20',
           'esriSRProjCS_Sphere_WinkelII',
           'esriSRGeoTransformation_Arc1950_To_WGS1984_6',
           'esriSRGeoTransformation_Arc1950_To_WGS1984_5',
           'esriSRGeoTransformation_Arc1950_To_WGS1984_4',
           'esriSRDatum_FortThomas1955', 'esriSRProjCS_KertauUTM_47N',
           'esriSRGeoTransformation_LKS1994_To_WGS1984',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Dodge_Meters',
           'esriSRDatum_UranusBelinda', 'esriSRVertCS_Constanta',
           'esriSRProjCS_SWEREF99_23_15',
           'esriSRGeoTransformation_ITRF_1996_To_ITRF_2000_1',
           'esriSRProjCS_NAD1983HARNSPCS_HI_4',
           'esriSRProjCS_NAD1983HARNSPCS_HI_5',
           'esriSRProjCS_NAD1983HARNSPCS_HI_2',
           'esriSRProjCS_NAD1983HARNSPCS_HI_3',
           'esriSRProjCS_NAD1983HARNSPCS_HI_1',
           'esriSRProjCS_NZGD2000_Okarito_Circuit',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaPope',
           'esriSRGeoCS_POSGAR1998',
           'esriSRSpheroid_GRS1980Adj_MinnesotaMeeker',
           'esriSRProjCS_Pulkovo1995GK_31N',
           'esriSRProjCS_NAD1983HARN_WISCRSLincolnFtUS',
           'esriSRProjCS_AinElAbd1970UTMZone36N',
           'esriSRProjCS_Kalianpur1975_UTM47N',
           'esriSRProjCS_NAD1983UTM_5N',
           'esriSRGeoTransformation_Sainte_Anne_To_WGS_1984_1',
           'esriSRGeoTransformation_Sainte_Anne_To_WGS_1984_2',
           'esriSRProjCS_NAD1983SPCS_VASouth',
           'esriSRProjCS_NAD83_CSRS_UTM_15N',
           'esriSRVertCS_EGM84Geoid',
           'esriSRProjCS_NAD1983SPCS_MICentralFT',
           'esriSRDatum_Majuro', 'esriSRProjCS_MoznetUTM_36S',
           'esriSRDatum_NAD1983HARNAdj_WisconsinForest',
           'esriSRProjCS_NAD1983HARN_StatePlane_Hawaii_4_FIPS_5104_Feet',
           'esriSRSpheroid_GRS1980Adj_WisconsinRock',
           'esriSRProjCS_NAD1927SPCS_KYSouth',
           'esriSRProjCS_AzoresOccidental1939_UTMZone25N',
           'esriSRGeoTransformation_ITRF_1990_To_ITRF_2000_1',
           'esriSRProjCS_Korean1985_Korea_West_Belt', 'ITriangles',
           'esriSRDatum_Palestine1923', 'ICircularArc',
           'esriSRProjCS_NAD1983HARN_WISCRSVernonFtUS',
           'esriSRGeoTransformation_Grand_Cayman_1959_To_WGS_1984_1',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_34',
           'esriSRGeoTransformation_Bogota_To_MAGNA_Region_1_MB',
           'esriSRProjCS_WGS1984UTM_5S',
           'esriSRGeoTransformation_DHDN_To_WGS_1984_3',
           'esriSRGeoTransformation_DHDN_To_WGS_1984_2',
           'esriSRGeoTransformation_DHDN_To_WGS_1984_1',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Brown_Feet',
           'esriSRDatum_International1967',
           'esriSRProjCS_NZGD1949_Bluff_Circuit',
           'esriSRProjCS_NZGD2000_Gawler_Circuit',
           'esriSRProjCS_Tananarive1925UTM_39S',
           'esriSRProjCS_NZGD2000_Mount_Pleasant_Circuit',
           'IBufferConstructionProperties2',
           'esriSRProjCS_NAD1983SPCS_LANorth',
           'esriSRVertCS_HuahineSAU2001',
           'esriSRProjCS_NAD1983HARN_StatePlane_Iowa_North_FIPS_1401',
           'esriSRProjCS_WGS1984UTM_33S',
           'esriSRProjCS_Nahrwan1934IraqZone',
           'esriSRProjCS_NAD1983HARN_WISCRSJacksonM',
           'esriSRProjCS_NAD1983UTM_20N',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_39', 'IMAware',
           'esriSRProjCS_NAD1927SPCS_ALWest',
           'esriSRProjCS_WGS1984UTM_33N',
           'esriSRSpheroid_GRS1980Adj_WisconsinLincoln',
           'esriSRPoleGeometry', 'esriSRProjCS_NAD1983SPCS_VASouthFT',
           'esriSRSpheroid_Everest1975',
           'esriSRProjCS_Pulkovo1942GK_27N',
           'esriSRProjCS_World_Aitoff', 'ITopologicalSegment',
           'esriSRGeoTransformation_Dominica1945_To_WGS1984',
           'esriSRProjCS_Pulkovo1942_CS63zoneK2',
           'esriSRProjCS_Pulkovo1942_CS63zoneK3',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaMahnomen',
           'esriSRProjCS_Pulkovo1942_CS63zoneK4',
           'esriSRDatum_SaturnPan',
           'esriSRProjCS_NAD1983HARNSPCS_NYWest',
           'esriSRGeoCS_Rauenberg1983',
           'S_GEOMETRY_PROJECTION_HINT_CLIP_PCS_ONLY',
           'E_GEOMETRY_DEGENERATEGEOMETRY', 'IMSegmentation4',
           'IMSegmentation3', 'IMSegmentation2',
           'esriSRProjCS_WGS1972UTM_18S',
           'esriSRProjCS_WGS1972UTM_3N',
           'esriSRProjCS_NAD1983HARN_WISCRSPriceM',
           'esriSRGeoTransformation_Jamaica_1969_To_WGS_1984_2',
           'esriSRVertCS_ChathamIsland', 'E_GEOMETRY_NOT_Z_SIMPLE',
           'esriSRProjCS_NAD1983SPCS_TN', 'esriSRProjCS_SudanUTM_35N',
           'esriSRProjCS_WGS1972UTM_18N',
           'esriSRProjection_WinkelTripel',
           'CompositeGeoTransformation',
           'esriSRProjCS_NAD1983HARNSPCS_MICentral',
           'esriSRProjCS_Pulkovo1942_Adj_1983_3_Degree_GK_Zone_4',
           'esriSRProjCS_Pulkovo1942_Adj_1983_3_Degree_GK_Zone_5',
           'esriSRProjCS_Pulkovo1942_Adj_1983_3_Degree_GK_Zone_3',
           'esriSRProjCS_AGD1984AMG_48', 'esriSRProjCS_AGD1984AMG_49',
           'esriSRGeoTransformation_AGD66_TO_GDA94_NTV2_SEAustralia',
           'esriGeometryPartEndpoint', 'esriSRUnit_Mil6400',
           'esriSRDatum_Krasovksy1940',
           'esriSRProjCS_ELD1979_Libya_5',
           'esriSRGeoTransformation_Helle_1954_To_WGS_1984_1',
           'esriSRProjCS_Pulkovo1942GK_31N',
           'esriSRSpheroid_UranusOphelia',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_27E',
           'esriMMonotonicEnum',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_45E',
           'esriSRProjCS_LisboaHayfordGaussIPCC',
           'esriSRDatum_DOS71_4',
           'esriSRProjCS_NAD1983HARN_WISCRSKenoshaFtUS',
           'esriSRGeoCS_NEA74Noumea',
           'esriNonSimpleSelfIntersections',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaWadena',
           'esriSRProjCS_NAD1927SPCS_MTCentral',
           'esriSRSpheroid_GRS1980Adj_WisconsinColumbia',
           'esriSRProjCS_FranceIDegrees',
           'esriSRGeoTransformation_Majuro_To_NAD_1983',
           'esriSRProjCS_Tokyo_UTM55N',
           'esriSRProjCS_SaipanAzimEquidist1969',
           'E_GEOMETRY_INSUFFICIENT_CONTROLPOINTS',
           'esriSRParameter_CentralMeridian',
           'esriSRDatum_GuyaneFrancaise',
           'esriSRProjCS_RT90_75_gon_V',
           'esriSRProjCS_NAD1983SPCS_IDCentral',
           'esriSRProjCS_NAD1983SPCS_COCentFT',
           'esriSRProjCS_ATS1977UTM_19N',
           'esriSRProjCS_NAD1983SPCS_NMEastFT',
           'esriSRGeoTransformation_ST84_Ile_des_Pins_To_WGS_1984_2',
           'esriSRGeoTransformation_ST84_Ile_des_Pins_To_WGS_1984_1',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaGoodhue',
           'esriSRProjCS_NAD1983SPCS_SCFT', 'esriSRGeoCS_Massawa',
           'esriSRGeoCS_ISTS061_1968',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Milwaukee_Meters',
           'esriSpatialRelationCross', 'esriSRDatum_Zanderij',
           'esriSRGeoTransformation_Puerto_Rico_To_WGS_1984_4',
           'esriSRGeoTransformation_Puerto_Rico_To_WGS_1984_3',
           'ISpatialReferenceResolution',
           'esriSRGeoCS_IslandsNetwork1993',
           'esriSRVertCS_Wellington',
           'esriSRDatum_NAD1983HARNAdj_WisconsinDane',
           'esriSRDatum_NAD1983HARNAdj_WisconsinWalworth',
           'esriSRProjCS_NAD1983SPCS_MSEastFT',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Kanabec_Meters',
           'esriSRProjCS_MAGNAColombiaEste',
           'IConstructUnknownCoordinateSystem',
           'ISpatialReferenceFactory',
           'esriSRVertDatum_OrdnanceDatumNewlyn',
           'esriSRProjCS_Pulkovo1995GK_10N',
           'esriSRSpheroid_GRS1980Adj_MinnesotaNobles',
           'esriSRSpheroid_GRS1980Adj_MinnesotaSherburne',
           'esriSRProjCS_NZGD2000_Taranaki_Circuit',
           'esriSRProjCS_Beijing1954_3_Degree_GK_CM_111E',
           'esriSRGeoTransformation_St_Lawrence_To_WGS_1984_1',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Clark_Meters',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaBecker',
           'esriSRGeoTransformation_Easter_Island_1967_To_WGS_1984',
           'esriSRProjCS_World_WinkelTripelNGS',
           'esriSRProjCS_WGS1972UTM_3S',
           'esriGeometryServerMessageCodeEnum',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Yellow_Medicine_Meters',
           'esriSRProjCS_IGNAstro1960_UTMZone30N',
           'esriSRSpheroid_GRS1980Adj_WisconsinIowa',
           'esriSRProjCS_NAD1983HARN_StatePlane_Indiana_West_FIPS_1302_Ft',
           'esriSRProjCS_ED1950_ED77_UTM_40N',
           'esriSRGeoCS_Voirol1875Degree',
           'esriSRGeoTransformation_Old_Hawaiian_To_NAD_1983_HARN_HI',
           'esriSRProjCS_NZGD2000_Timaru_Circuit',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Ramsey_Feet',
           'esriSRProjCS_Beijing1954_3_Degree_GK_CM_132E',
           'esriSRGeoTransformation_NZGD1949_To_NZGD2000_1_3PAR',
           'esriSRProjCS_TWD1997TMPenghu',
           'esriSRProjCS_NAD1927UTM_8N',
           'esriSRProjCS_WGS1984UTM_10S',
           'esriSRProjCS_WGS1984UTM_10N',
           'esriSRProjCS_Nakhl_e_GhanemUTMZone39N',
           'esriSRVertCS_Lerwick',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinChippewa',
           'E_SPATIALREFERENCE_NOTAPRJFILE',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Mower_Meters',
           'esriSRProjCS_Conakry1905_UTM_Zone_28N',
           'esriSRProjCS_Pulkovo1995GK_9N',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Racine_Feet',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Benton_Meters',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaYellowMedicine',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaTodd',
           'esriSRGeoTransformation_Arc1960_To_WGS1984_2',
           'esriSRGeoTransformation_Arc1960_To_WGS1984_3',
           'esriSRSpheroid_GRS1980Adj_MinnesotaCookNorth',
           'IConstructBezierCurve', 'esriSRProjCS_Yoff1972UTM_28N',
           'esriSRDatum_CampArea', 'esriSRProjCS_Pulkovo1942GK_14',
           'esriSRProjCS_Pulkovo1942GK_17',
           'esriSRProjCS_Pulkovo1942GK_16',
           'esriSRProjCS_Pulkovo1942GK_11',
           'esriSRProjCS_Pulkovo1942GK_10',
           'esriSRProjCS_Pulkovo1942GK_13',
           'esriSRProjCS_Pulkovo1942GK_12',
           'esriSRProjCS_Pulkovo1942GK_19',
           'esriSRProjCS_Pulkovo1942GK_18',
           'esriSRGeoTransformation_NAD_1983_TO_HARN_SD',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Taylor_Feet',
           'esriSRProjCS_Nahrwan1967_UTMZone37N',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_96E',
           'esriSRProjCS_RT38_25_gon_V', 'esriSRProjCS_NGNUTM_38N',
           'esriSRUnit_Fathom', 'TexturePersistenceProperties',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Sawyer_Meters',
           'esriSRGeoCS_ATS1977',
           'esriGeometryServerMessageCode_Buffer',
           'esriSRProjCS_NAD1983SPCS_IDEast',
           'esriSRProjCS_Pulkovo1942GK_10N',
           'esriSRProjCS_NAD1983HARN_SPCSMinnesotaCentral_USFeet',
           'esriSRSpheroid_GRS1980Adj_MinnesotaMarshall',
           'esriSRDatum_NAD1983HARNAdj_WisconsinIowa',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaHouston',
           'esriSRProjCS_WGS1972UTM_37N', 'esriSRVertDatum_Douglas',
           'esriSRDatum_Luzon1911', 'esriSRGeoCS_Mercury',
           'esriSRProjCS_ETRS1989KosovoGrid', 'IPolylineArray',
           'esriSRProjCS_NAD1983HARN_WISCRSWausharaM',
           'esriSRProjCS_NZGD1949_Wanganui_Circuit',
           'esriSRProjCS_NAD1983SPCS_WYEastCentral',
           'esriSRProjCS_WGS1972UTM_37S', 'esriSRDatum_BeaconE1945',
           'esriNonSimpleEmptyZValues',
           'esriSRProjCS_NAD1983HARN_StatePlane_Wisconsin_South_FIPS_4803_Feet',
           'esriSRGeoCS_ModifiedAiry',
           'esriSRSpheroid_Clarke1866Michigan',
           'esriSRGeoCS_Grenada1953',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinBuffalo',
           'esriSRProjCS_NAD1983HARN_Oregon_Statewide_Lambert',
           'esriSRProjCS_LKS1992LatviaTM_FN_0',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Olmsted_Feet',
           'esriSRProjCS_NAD1983_StatePlane_Michigan_South_FIPS_2113_Feet_Intl',
           'esriSRProjCS_NAD1983SPCS_MOWest',
           'esriSRGeoCS_StVincent1945',
           'esriSRProjCS_ETRS1989ETRS_GK24FIN',
           'esriSRProjCS_Sphere_QuarticAuthalic',
           'esriSRProjCS_NAD1927Def1976UTM_16N',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_141E',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Norman_Feet',
           'esriSRGeoCS_PampadelCastillo',
           'esriSRProjCS_MGIAustriaGKM28',
           'esriSRProjCS_ED_1950_UTM_28N',
           'esriSRProjCS_Xian1980_GK_CM_75E',
           'esriSRGeoTransformation_Tahiti_1979_To_WGS_1984_1',
           'esriSRGeoTransformation_NAD_1927_def_1976_To_WGS_1984_1',
           'esriSRProjCS_Rassadiran_Nakhl_e_Taqi',
           'esriSRSpheroid_JupiterGanymede', 'esriSRUnit_Radian',
           'esriSRGeoCS_VoirolUnifie1960Degree',
           'esriGeometryServerMessageCode_Simplify',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinMenominee',
           'esriSRVertDatum_FahudHeightDatum', 'esriFilterPCS',
           'esriSRProjCS_NAD1983HARN_StatePlane_Mississippi_West_FIPS_2302_Ft',
           'esriSRProjCS_Indian1975UTM_47N',
           'esriSRProjCS_NAD1983SPCS_AK9FT',
           'esriSRProjCS_Batavia_TM_109_SE',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Florence_Feet',
           'esriSRProjCS_NAD1983SPCS_AK6FT',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaPolk',
           'esriSRProjCS_MAGNAColombiaOeste',
           'esriSRGeoTransformation_Nahrwan_1967_To_WGS_1984_10',
           'esriSRVertDatum_Guadeloupe1951',
           'esriSRProjCS_NAD1983UTM_3N',
           'esriSRGeoTransformation_Canton_1966_To_WGS_1984', 'Ring',
           'esriSRProjCS_ETRS1989ETRS_GK23FIN',
           'esriSRGeoTransformation_Montserrat1958_To_WGS1984',
           'esriSRProjCS_QND1995QatarNationalGrid',
           'esriSRGeoCS_GreekAthens',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_33E',
           'esriSRHorizon', 'esriShapeExportAngularDensify',
           'esriSRProjCS_WGS1984UTM_21N', 'esriSRSpheroid_Clarke1880',
           'esriNoTurn', 'esriSRGeoCS_VN2000',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Crow_Wing_Feet',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinWaupaca',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Redwood_Feet',
           'esriSRUnit_Indian1937Yard',
           'esriSRGeoTransformation_FD_1958_To_WGS_1984_2',
           'esriSRSpheroid_GRS1980Adj_MinnesotaMower',
           'esriSRProjCS_NAD1983WisconsinTM_USFt',
           'esriSRGeoTransformation_Monte_Mario_To_WGS_1984_6',
           'esriSRGeoTransformation_Monte_Mario_To_WGS_1984_7',
           'esriSRGeoTransformation_Monte_Mario_To_WGS_1984_4',
           'esriSRGeoTransformation_Monte_Mario_To_WGS_1984_5',
           'esriPatchTypeOuterRing',
           'esriSRGeoTransformation_Monte_Mario_To_WGS_1984_3',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaMorrison',
           'esriSRDatum_UranusDesdemona',
           'esriSRGeoTransformation_Monte_Mario_To_WGS_1984_8',
           'esriSRGeoTransformation_Monte_Mario_To_WGS_1984_9',
           'esriSRProjCS_NZGD1949_Wellington_Circuit',
           'esriSRGeoTransformation_NAD1983_To_HARN_OR_WA',
           'esriSRSpheroid_GRS1980Adj_MinnesotaHouston',
           'esriSRGeoTransformation_DOS_1968_To_WGS_1984',
           'esriSRProjCS_WGS1984_Complex_UTM_Zone_20N',
           'esriSRProjCS_NAD1983_10TM_AEP_Resource',
           'esriSRProjCS_WGS1984UTM_31N',
           'esriSRSpheroid_Clarke1880IGN',
           'esriSRParameter_XYPlaneRotation', 'esriSRGeoCS_NGO1948',
           'esriSRProjCS_NAD1983USA_Albers',
           'esriSRProjCS_WGS1984UTM_31S',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaGoodhue',
           'esriSRProjCS_Voirol1879NordAlgerieAncienne',
           'esriSRProjCS_WGS1984UTM_3N',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Sauk_Feet',
           'esriSRProjCS_BataviaUTM_50S',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinCalumet',
           'esriSRProjCS_Pulkovo1942GK_29N',
           'esriSRProjCS_WGS1984UTM_3S',
           'esriSRGeoTransformation_NAD_1927_CGQ77_To_NAD_1983_2',
           'esriSRProjCS_NAD1927SPCS_MAMainland',
           'esriSRGeoTransformation_Monte_Mario_To_WGS_1984_2',
           'esriSRProjCS_NAD1983HARN_Maine_2000_East_Zone',
           'esriSRGeoCS_ETRF1989',
           'esriSRProjCS_Indonesia1974UTM_47S',
           'esriSRProjCS_Indonesia1974UTM_47N',
           'esriSRGeoTransformation_Jamaica1969_To_WGS1984_1',
           'esriSRProjCS_NAD1983HARN_WISCRSJacksonFtUS',
           'esriSRGeoCS_Madeira1936', 'esriSRProjCS_NAD1927MTM_2',
           'esriSRProjCS_NAD1927MTM_3',
           'esriSRProjCS_WGS84ARC_SystemZone10',
           'esriSRProjCS_NAD1927MTM_5', 'esriSRProjCS_NAD1927MTM_6',
           'esriSRProjCS_WGS84ARC_SystemZone13',
           'esriSRGeoCS_LisboaBessel',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Green_Feet',
           'esriSRSpheroid_Walbeck', 'esriSRGeoCS_CarthageParis',
           'esriSRProjCS_VoirolNordAlgerie', 'esriSRPoleLocation',
           'esriSRSpheroid_SaturnPrometheus',
           'esriSRProjCS_NSIDC_EASEGridGlobal',
           'esriSRGeoCS_KerguelenIsland1949',
           'esriSRProjCS_NAD1983HARN_WISCRSWashburnM',
           'esriSRProjCS_World_MillerCylindrical',
           'esriPatchTypeTriangleStrip',
           'esriSRGeoTransformation_TM75_To_WGS_1984_2',
           'esriSRGeoTransformation_TM75_To_WGS_1984_3',
           'GeometryBag', 'esriSRProjCS_NAD1927SPCS_INWest',
           'esriSRProjCS_SambojaUTM_50S',
           'esriSRProjCS_NAD1983HARNSPCS_MOCentral',
           'esriSRProjCS_NAD1983SPCS_NYWestFT',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaLyon',
           'esriSRGeoTransformation_Beijing_1954_To_WGS_1984_5',
           'esriSRGeoTransformation_Beijing_1954_To_WGS_1984_4',
           'esriSRGeoTransformation_Beijing_1954_To_WGS_1984_6',
           'esriSRGeoTransformation_Beijing_1954_To_WGS_1984_1',
           'esriSRGeoTransformation_Beijing_1954_To_WGS_1984_3',
           'esriSRGeoTransformation_Beijing_1954_To_WGS_1984_2',
           'esriSRGeoTransformation_MPoraloko_To_WGS_1984_2',
           'esriSRGeoCS_AuthalicsphereARCINFO',
           'esriSRGeoCS_JupiterElara', 'esriSRProjCS_WGS1984UTM_5N',
           'esriSRUnit_Benoit1895B_Link',
           'esriSRGeoTransformation_Palestine_1923_To_WGS_1984_1x',
           'esriSRProjCS_IGC1962CongoTMZone28',
           'esriSRProjCS_IGC1962CongoTMZone26',
           'esriSRProjCS_IGC1962CongoTMZone24',
           'esriSRGeoTransformation_Datum_73_To_WGS_1984_3',
           'esriSRProjCS_IGC1962CongoTMZone22',
           'esriSRProjCS_IGC1962CongoTMZone20',
           'esriSRProjCS_MalaysiaGDM2000MRSO',
           'esriSRProjCS_LittleCayman1961UTMZone17N',
           'IPointCollection',
           'esriSRProjCS_WGS1984_Antarctic_Polar_Stereographic',
           'esriSRGeoTransformation_Voirol_Unifie_1960_Paris_To_Voirol_Unifie_1960',
           'ITopologicalOperator',
           'esriSRProjCS_Beijing1954_3_Degree_GK_CM_96E',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Carver_Meters',
           'esriSRProjection_QuarticAuthalic',
           'esriSRProjCS_NAD1927_3TM_120', 'IGeometryCollection',
           'esriSRProjCS_Naparima_1955_UTM_Zone_20N',
           'esriSRDatum_JAD2001', 'esriSRProjCS_Jordan_JTM',
           'esriSRProjCS_Reunion1947_TM', 'esriSRGeoCS_Arc1950',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Iowa_Meters',
           'esriSRGeoCS_Pulkovo1942_adj83',
           'esriSRSpheroid_GRS1980Adj_WisconsinIron',
           'esriSRProjCS_SierraLeone1968_UTM_Zone_29N',
           'esriSRSpheroid_GRS1980Adj_WisconsinBrown',
           'esriSRDatum_NAD1983HARNAdj_WisconsinBuffalo',
           'esriSRProjCS_ETRS1989_TM_30_NE',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Waupaca_Feet',
           'esriSRSpheroid_ModifiedAiry', 'esriSRDatum_HongKong1980',
           'esriSRProjCS_Tokyo_UTM53N',
           'esriSRProjCS_SouthAmerican1969UTM_22N',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Itasca_North_Meters',
           'esriSRSpheroid_SaturnDione',
           'esriSRGeoTransformation_OSGB1936_To_WGS1984Petrol',
           'esriSRProjCS_AdindanUTM_37N',
           'esriSRUnit_150KilometerLength',
           'esriSRProjCS_ETRS1989_Poland_CS92',
           'esriSRGeoCS_Fischer1968',
           'esriSRProjCS_NAD1983HARN_WISCRSWashingtonM',
           'esriSRProjCS_NAD1983HARNSPCS_TXSouthCentral',
           'esriSRProjCS_NAD1983UTM_4N',
           'esriSRProjCS_NAD1983HARN_WISCRSDouglasFtUS',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Houston_Feet',
           'esriSRDatum_ModifiedFischer', 'esriGeometry0Dimension',
           'esriSRProjCS_NAD1983HARNSPCS_MOEast',
           'IGeometryEnvironment2',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaStLouisCentral',
           'esriSRParameter_Height',
           'esriSRGeoTransformation_NAD1983_To_WGS1984_1',
           'esriSRGeoTransformation_NAD1983_To_WGS1984_2',
           'esriSRGeoTransformation_NAD1983_To_WGS1984_3',
           'esriSRGeoTransformation_NAD1983_To_WGS1984_4',
           'esriSRGeoTransformation_NAD1983_To_WGS1984_5',
           'esriSRGeoCS_Greenland1996',
           'esriSRProjCS_NAD1983HARNSPCS_NMCentral',
           'esriSRProjCS_NAD1983HARN_WISCRSMarathonM',
           'esriSRDatum_CapeCanaveral', 'esriSRGeoCS_Yoff',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinPortage',
           'esriValuesEmpty',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinWood',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaFillmore',
           'esriSRSpheroid_GRS1980Adj_WisconsinAshland',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaStearns',
           'esriSRProjCS_NAD1983SPCS_NYEast',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Hennepin_Feet',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_108E',
           'esriSRDatum_MarsDeimos', 'esriSRProjCS_Pulkovo1995GK_12N',
           'esriGeometryServerMessageCode_Union',
           'esriSRDatum_Segora',
           'esriSRGeoTransformation_Pulkovo_1942_adj_1983_To_WGS_1984_1',
           'esriSRGeoCS_ChosMalal1914',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Anoka_Meters',
           'esriSRGeoCS_Bermuda1957', 'esriSRGeoCS_SierraLeone1968',
           'esriSRGeoCS_SierraLeone1960',
           'esriSRProjCS_Xian1980_GK_CM_111E',
           'esriSRVertDatum_HaTien1960',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Chippewa_Meters',
           'E_GEOMETRY_SR_M_MISMATCH', 'esriSRProjCS_WGS1984TM36_SE',
           'esriSRProjCS_Batavia_NEIEZ',
           'esriSRSpheroid_GRS1980Adj_MinnesotaMurray',
           'esriSRDatum_Oman', 'esriSRSpheroid_SaturnHyperion',
           'esriSRProjCS_IGN72_NukuHiva_UTM_7S',
           'esriSRVertDatum_SeaLevel', 'esriSRProjCS_ED_1950_UTM_32N',
           'esriSRSpheroid_Clarke1880Arc', 'esriSRDatum_Venus2000',
           'esriSRProjCS_WGS1984UTM_12S', 'esriSRProjCS_CostaRicaSur',
           'esriSRProjCS_Dabola_UTM_Zone_28N',
           'esriSRProjCS_NAD1983HARNSPCS_VANorth',
           'esriSRSpheroid_UranusJuliet',
           'esriSRProjCS_WGS1984UTM_12N',
           'esriSRProjCS_SAD1969S_AmericaAlbers',
           'esriSRDatum_Arc1960', 'esriMultiPatchBeginningRingMask',
           'esriSRDatum_ModifiedEverest1969',
           'esriSRDatum_UranusCressida',
           'esriSRSpheroid_Krasovsky1940',
           'esriSRProjCS_NZGD2000_Wanganui_Circuit',
           'esriGeometryBezier3Curve',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Kittson_Feet',
           'esriSRGeoTransformation_Chatham_Islands_1979_To_NZGD_2000_1',
           'esriSRGeoTransformation_TM65_To_WGS1984',
           'esriSRGeoTransformation_Bogota_to_WGS1984',
           'esriSRProjCS_Pulkovo1942GK_3N',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinWaushara',
           'esriSRProjCS_NAD1983HARN_StatePlane_Colorado_Central_FIPS_0502_Ft',
           'esriSRSpheroid_MarsDeimos', 'esriNonSimpleShortSegments',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_81E',
           'esriSRGeoTransformation_NAD_1927_CGQ77_To_NAD_1983_CSRS98',
           'esriSRProjCS_NAD1927SPCS_IDWest',
           'esriSRProjCS_Pulkovo1942GK_32',
           'esriSRProjCS_Pulkovo1942GK_31',
           'esriSRProjCS_LaCanoaUTM_20N',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Morrison_Meters',
           'esriSRGeoTransformation_Tete_To_WGS_1984_5',
           'esriSRGeoTransformation_Tete_To_WGS_1984_4',
           'esriSRGeoTransformation_Tete_To_WGS_1984_1',
           'esriSRGeoTransformation_Tete_To_WGS_1984_3',
           'esriSRGeoTransformation_Tete_To_WGS_1984_2',
           'esriSRGeoTransformation_ATS_1977_To_NAD_1983_CSRS98_2',
           'esriSRGeoCS_Zanderij',
           'esriSRGeoTransformation_NAD_1983_TO_HARN_UT',
           'esriSRProjCS_NAD1983HARN_WISCRSForestFtUS',
           'esriSRProjCS_NAD1983HARNSPCS_ALWest',
           'esriSRProjCS_TrucialCoast1948UTM_39N',
           'esriSRGeoTransformation_Monte_Mario_To_WGS_1984_10',
           'esriSRGeoTransformation_Monte_Mario_To_WGS_1984_11',
           'esriSRProjCS_Philippines_III',
           'esriSRGeoCS_SapperHill1943',
           'esriSRGeoTransformation_REGVEN_To_WGS_1984_1',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaBigStone',
           'esriSRProjCS_Pulkovo1942GK_12N',
           'esriSRProjCS_NAD1983HARN_WISCRSBuffaloM',
           'esriSRSpheroid_GRS1980Adj_WisconsinBuffalo',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Rusk_Meters',
           'esriSRGeoTransformation_Kalianpur1962_To_WGS1984_1',
           'esriSRProjCS_WGS1972UTM_39N',
           'esriSRProjCS_CorregoAlegreUTMZone21S',
           'esriSRProjCS_WGS1972UTM_39S',
           'esriSRProjCS_NAD1983SPCS_NYLongIslFT',
           'esriSRProjCS_SchwarzeckUTM_33S', 'esriSRPrimeM_Bern',
           'esriSRProjCS_GDA1994GeoscienceAustraliaLambert',
           'esriGeometryServerMessageCode_GetAreasAndLengths',
           'esriSRDatum_LisboaHayford', 'esriSRProjCS_AratuUTM_22S',
           'esriSRGeoCS_ObservatorioMeteorologico1965',
           'esriSRSpheroid_PlutoCharon', 'E_GEOMETRY_NOT_M_AWARE',
           'esriSRGeoTransformation_Camacupa_To_WGS1984_8',
           'esriSRGeoTransformation_Camacupa_To_WGS1984_9',
           'esriSRGeoTransformation_Camacupa_To_WGS1984_2',
           'esriSRGeoTransformation_Camacupa_To_WGS1984_3',
           'esriSRGeoTransformation_Camacupa_To_WGS1984_1',
           'esriSRGeoTransformation_Camacupa_To_WGS1984_6',
           'esriSRGeoTransformation_Camacupa_To_WGS1984_7',
           'esriSRGeoTransformation_Camacupa_To_WGS1984_4',
           'esriSRGeoTransformation_Camacupa_To_WGS1984_5',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Grant_Feet',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_147E',
           'esriSRSpheroid_GRS1980Adj_MinnesotaCookSouth',
           'esriSRProjCS_NAD1983SPCS_KYSouth',
           'esriSRProjCS_ETRS1989_LCC',
           'esriSRProjCS_Pulkovo1995GK_9',
           'esriSRGeoTransformation_Chua_To_WGS1984',
           'esriSRProjection2Type',
           'esriSRDatum_AzoresCentralIslands1995',
           'esriSRGeoTransformation_Tahaa_To_WGS_1984_1',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaAnoka',
           'esriSRProjCS_Arc1950_UTM_Zone_35S',
           'esriSRProjCS_Kalianpur1975_UTM43N',
           'esriSRProjCS_NAD1983HARN_WISCRSOcontoM',
           'esriSRProjCS_NAD1983SPCS_CAIVFT',
           'esriSRGeoTransformation_Dealul_Piscului_1933_To_WGS_1984_1',
           'IEnumGeometry', 'esriSRVertDatum_NGF_Lalle',
           'esriSRProjCS_World_Times',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Isanti_Meters',
           'esriExtendTangentAtTo', 'esriSRProjCS_Indian1954UTM_48N',
           'esriSRVertDatum_Bluff', 'esriSRVertDatum_BalticSea',
           'E_GEOMETRY_NOT_SINGLEPART', 'esriSRGeoCS_JupiterLeda',
           'esriSRGeoTransformation_Carthage_Paris_To_Carthage',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Wabasha_Feet',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinPolk',
           'esriSRPole_OnBoundary',
           'esriSRGeoTransformation_Guam_1963_To_NAD_1983_HARN_Rota',
           'esriSRVertCS_NGVD1929', 'esriSRGeoCS_Kalianpur1880',
           'esriSRGeoCS_Jordan', 'esriSRDatum_GGRS1987',
           'esriSRGeoTransformation_Tananarive1925Paris_To_WGS1984',
           'esriSRDatum_Garoua',
           'esriSRProjCS_NZGD1949_Mount_Nicholas_Circuit',
           'esriSRProjCS_NAD1983HARNSPCS_MNNorth',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Freeborn_Feet',
           'esriSRVertDatum_DHHN1985',
           'esriSRProjCS_ED1950_ED77_UTM_38N',
           'esriSRGeoTransformation_Samboja_To_WGS1984',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Oneida_Feet',
           'esriSRSpheroid_Everest1937',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Becker_Feet',
           'esriSRGeoTransformation_Dealul_Piscului_1970_To_WGS_1984_2',
           'esriSRGeoTransformation_Dealul_Piscului_1970_To_WGS_1984_1',
           'esriSRProjCS_Katanga1955KatangaLambert',
           'esriSRGeoTransformation_KKJ_To_ETRS_1989_2',
           'esriSRGeoTransformation_KKJ_To_ETRS_1989_1',
           'esriSRProjCS_WGS1984UTM_1S',
           'esriSRDatum_NAD1983HARNAdj_WisconsinOneida',
           'esriSRProjCS_NAD1927_Texas_Statewide_Mapping_System',
           'esriSRProjCS_NAD1983HARNSPCS_NVWestFT',
           'IPRJSpatialReferenceGEN', 'GeometryEnvironment',
           'esriSRProjCS_NTFParis_LambertZoneIV',
           'esriSRGeoTransformation_Azores_Central_1995_To_WGS_1984_9',
           'esriSRGeoTransformation_Azores_Central_1995_To_WGS_1984_8',
           'esriSRGeoTransformation_Azores_Central_1995_To_WGS_1984_3',
           'esriSRGeoTransformation_Azores_Central_1995_To_WGS_1984_2',
           'esriSRGeoTransformation_Azores_Central_1995_To_WGS_1984_7',
           'esriSRGeoTransformation_Azores_Central_1995_To_WGS_1984_6',
           'esriSRGeoTransformation_Azores_Central_1995_To_WGS_1984_5',
           'esriSRGeoTransformation_Azores_Central_1995_To_WGS_1984_4',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_171W',
           'esriSRGeoTransformation_D48_To_WGS_1984_Stajerska',
           'esriSRGeoTransformation_RRAF_1991_To_WGS_1984_1',
           'esriSRSpheroid_SaturnRhea',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_171E',
           'esriSRProjCS_WGS1972UTM_49N',
           'esriSRProjCS_NAD1927SPCS_IDEast',
           'esriSRProjCS_WGS1972UTM_7N', 'esriSRProjCS_WGS1972UTM_7S',
           'esriSRProjCS_WGS1972UTM_49S', 'esriSRDatum_Lao1997',
           'esriSRDatum_Lao1993', 'esriSRVertDatum_Poolbeg',
           'esriSRProjCS_PointeNoireUTM_32S',
           'esriSRGeoTransformation_Belge_1972_To_ETRS_1989_1',
           'esriSRGeoTransformation_Pulkovo1942_To_PZ1990_1',
           'esriSRGeoTransformation_Belge_1972_To_ETRS_1989_2',
           'esriSRVertCS_Durres', 'esriSRProjCS_NAD1927SPCS_AK4',
           'esriSRDatum_Fiji1986',
           'esriSRProjCS_NAD1983HARN_StatePlane_Utah_North_FIPS_4301_Ft_Intl',
           'esriSRGeoCS_PortoSanto1995', 'esriSRGeoCS_BellevueIGN',
           'esriSRDatum_GUX1', 'esriSRVertDatum_OneTreePoint',
           'esriSRGeoCS_MajorAuxSphere_WGS1984',
           'esriSRSpheroid_JupiterPasiphae',
           'esriSRProjCS_ColombiaECentral',
           'esriSRProjCS_WGS1972UTM_23S',
           'esriSRProjCS_WGS1972UTM_23N',
           'esriSRGeoTransformation_Guam_1963_To_WGS_1984_1',
           'esriSRGeoTransformation_Guam_1963_To_WGS_1984_2',
           'esriSRSpheroid_GRS1980Adj_MinnesotaDodge',
           'esriSRProjCS_NAD1927UTM_19N',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_57E',
           'esriSRProjCS_LGD2006_UTMZone35N',
           'esriSRGeoCS_ModifiedFischer',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Blue_Earth_Meters',
           'esriSRProjCS_NAD83_CSRS98_UTM_16N',
           'esriSRDatum_Clarke1880RGS',
           'esriSRGeoTransformation_NAD_1983_TO_HARN_HI',
           'esriSRProjCS_Beijing1954_3_Degree_GK_Zone_25',
           'esriSRGeoTransformation_ED_1950_To_ETRS_1989_8',
           'esriSRGeoTransformation_ED_1950_To_ETRS_1989_9',
           'esriSRGeoTransformation_ED_1950_To_ETRS_1989_6',
           'esriSRGeoTransformation_ED_1950_To_ETRS_1989_7',
           'esriSRGeoTransformation_ED_1950_To_ETRS_1989_4',
           'esriSRGeoTransformation_ED_1950_To_ETRS_1989_5',
           'esriSRGeoTransformation_ED_1950_To_ETRS_1989_1',
           'esriSRProjCS_Tokyo_UTM51N',
           'esriSRProjCS_NAD1983HARNSPCS_CAV',
           'esriSRGeoTransformation_Manoca_1962_To_WGS_1984_1',
           'esriSRProjCS_Pulkovo1995GK_14N', 'esriSRGeoCS_GGRS1987',
           'esriSRProjCS_NAD1983SPCS_WINorth',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaAnoka',
           'esriSRProjCS_NZGD1949_Timaru_Circuit',
           'esriSRGeoCS_AscensionIsland1958',
           'esriSRProjCS_WGS1972BE_SouthChinaSeaLambert',
           'IEnumSegment', 'esriSRGeoCS_TrucialCoast1948',
           'esriSRProjCS_PohnpeiAzimEquidist1971',
           'IProjectedCoordinateSystemEdit',
           'esriSRProjCS_NAD1983HARNSPCS_LASouth',
           'esriSRVertCS_AustralianHeightDatum',
           'esriSRProjCS_NAD1983SPCS_ORNorthFT',
           'esriSRProjCS_NAD1983SPCS_IANorthFT',
           'esriSRProjCS_NAD1927SPCS_CAVII',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaBlueEarth',
           'esriSRGeoTransformation_European_1979_To_WGS_1984',
           'esriShapeGeneralPolyline', 'IMultiPatch',
           'esriSRGeoCS_MerchichDegree',
           'esriSRSpheroid_MajorAuxiliarySphere_WGS1984',
           'esriSRProjCS_NAD1983SPCS_TXSouth',
           'esriSRProjCS_NAD1983HARN_WISCRSClarkM',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Douglas_Meters',
           'esriSRProjCS_NAD1983HARN_StatePlane_Florida_West_FIPS_0902_Ft',
           'IGridTransformation',
           'esriSRProjCS_NAD1983_Oregon_Statewide_Lambert_Feet_Intl',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_78E',
           'esriSRVertDatum_Auckland',
           'esriSRProjCS_DGN1995IndonesiaTM3Zone50_2',
           'esriSRProjCS_DGN1995IndonesiaTM3Zone50_1',
           'esriSRProjCS_Xian1980_GK_CM_117E', 'IConstructPath',
           'esriSRGeoTransformation_NGO_1948_To_ETRS_1989_1',
           'esriSRProjCS_SWEREF99_TM', 'esriSRGeoCS_IGN56Lifou',
           'esriSRDatum_Dabola', 'esriSRProjCS_BahrainStateGrid',
           'esriSRProjCS_NAD1983HARN_WISCRSSaukFtUS',
           'esriShapeHasPartIDs', 'esriSRProjCS_NAD1983SPCS_OHNorth',
           'esriSRProjCS_NAD1927CGQ77UTM_17N',
           'esriSRGeoCS_SaturnAtlas', 'IExtrude',
           'esriSRProjCS_DGN1995_UTMZone54S', 'esriSRProjection_Cube',
           'esriSRProjCS_GDA1994_VICGRID94',
           'esriSRProjCS_Sphere_TwoPointEquidistant',
           'esriSRProjCS_ED_1950_UTM_30N',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaOttertail',
           'esriGeometryPartSurface',
           'esriSRProjCS_JGD2000_Japan_Zone_9',
           'esriSRProjCS_JGD2000_Japan_Zone_8',
           'esriSRGeoCS_ChathamIsland1971',
           'esriSRProjCS_JGD2000_Japan_Zone_2',
           'esriSRGeoTransformation_Beduaram_To_WGS_1984_2',
           'esriSRProjCS_WGS1984_Complex_UTM_Zone_22N',
           'esriSRProjCS_JGD2000_Japan_Zone_7',
           'esriSRProjCS_JGD2000_Japan_Zone_6',
           'esriSRProjCS_JGD2000_Japan_Zone_5',
           'esriSRProjCS_JGD2000_Japan_Zone_4',
           'esriSRSpheroid_GRS1980Adj_WisconsinGreenLakeMarquette',
           'esriSRProjCS_Sphere_WinkelTripelNGS',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_150E',
           'esriSRDatum_Minna', 'esriSRDatum_POSGAR1998',
           'esriSRProjCS_NAD1927SPCS_NESouth',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_105E',
           'E_GEOMETRY_INPUT_TYPE_MISMATCH',
           'esriSRSpheroid_SaturnTethys',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Price_Meters',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_87E',
           'esriSRProjCS_Indonesia1974UTM_53N',
           'esriSRProjCS_LisbonPortugueseGrid',
           'esriSRProjCS_Indonesia1974UTM_53S',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaLyon',
           'esriSRGeoTransformation_NAD_1983_TO_HARN_WT',
           'esriSRProjCS_WGS1984AfricaSinusoidal',
           'esriSRGeoTransformation_NAD_1983_TO_HARN_WV',
           'esriSRGeoTransformation_NAD_1983_TO_HARN_WY',
           'esriSRProjCS_NAD1983HARNWisconsinTM',
           'esriSRGeoCS_YemenNGN1996',
           'esriSRProjCS_NAD1983HARN_WISCRSRockFtUS',
           'IProximityOperator3D',
           'esriSRProjCS_NAD1983HARN_UTM_Zone_12N',
           'esriSRGeoTransformation_NAD_1983_TO_HARN_WI',
           'esriSRGeoTransformation_NAD_1983_TO_HARN_WM',
           'esriSRGeoTransformation_NAD_1983_TO_HARN_WO',
           'esriSRUnit_Benoit1895B_Foot', 'EllipticArc',
           'IAffineTransformation2D3',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Red_Lake_Meters',
           'esriSRProjCS_AratuUTM_24S',
           'esriSRSpheroid_GRS1980Adj_MinnesotaWaseca',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaWabasha',
           'IConstructLine',
           'esriGeometryServerMessageCode_GetAreasAndLengthsGeodesic',
           'esriSRProjCS_NAD1983SPCS_TXSouthCentral',
           'esriSRDatum_UranusPuck', 'esriSRGeoCS_Clarke1880',
           'esriSRDatum_StGeorgeIsland', 'esriSRGeoCS_MHAST_Onshore',
           'esriSRDatum_Qatar', 'esriSRProjCS_Pulkovo1942GK_14N',
           'esriSRProjCS_WGS1984UTM_50S',
           'esriSRProjCS_WGS1984_NPoleGnomonic',
           'esriSRGeoTransformation_AinElAbd_To_WGS1984_1',
           'esriSRGeoTransformation_AinElAbd_To_WGS1984_2',
           'esriSRProjCS_WGS1984UTM_50N',
           'esriSRProjCS_Pulkovo1942GK_5N',
           'esriSRDatum_NAD1983_CSRS',
           'esriSRGeoTransformation_AGD_1966_To_WGS_1984_14',
           'esriSRGeoTransformation_AGD_1966_To_WGS_1984_15',
           'esriSRGeoTransformation_AGD_1966_To_WGS_1984_12',
           'esriSRGeoTransformation_AGD_1966_To_WGS_1984_13',
           'esriSRProjCS_NAD1983SPCS_MEWestFT',
           'esriSRVertCS_FahudHeightDatum1993',
           'esriSRGeoTransformation_CSG_1967_To_RGFG_1995_1',
           'esriProjectionHintDoNotProject',
           'esriSRProjCS_NAD1927SPCS_Guam', 'esriSRGeoCS_Liberia1964',
           'esriSRProjCS_Sphere_Robinson',
           'esriSRProjCS_MONREF1997UTMZone47N',
           'MolodenskyBadekasTransformation',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_132E',
           'esriSRGeoCS_Montserrat1958',
           'esriSRProjCS_NAD1983HARN_StatePlane_Indiana_East_FIPS_1301_Ft',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaKandiyohi',
           'esriSRProjCS_ETRS1989BelgeLambert2008',
           'esriSRProjCS_ETRS1989BelgeLambert2005',
           'esriSRDatum_VitiLevu1916',
           'esriSRProjCS_Tahaa1954_UTMZone5S', 'IProjectionGEN',
           'esriSRProjCS_ETRS1989_UWPP_1992',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaRock',
           'esriSRProjCS_NZGD2000_UTM_Zone_59S',
           'esriSRProjCS_WGS1972UTM_52S',
           'esriSRProjCS_Xian1980_3_Degree_GK_CM_99E',
           'esriSRGeoTransformation_ED_1987_To_WGS_1984_2',
           'esriSRGeoTransformation_RT90_To_WGS_1984_2',
           'esriSRProjCS_NAD1983SPCS_AZWestFT',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinRock', 'IEnumVertex2',
           'esriSRProjection_WinkelI',
           'esriSRProjCS_NAD1983SPCS_WICentralFT',
           'esriSRProjCS_Antigua1943BritishWIndies',
           'esriSRGeoCS_HongKong1963',
           'esriSRProjCS_DGN1995IndonesiaTM3Zone46_2',
           'esriSRGeoTransformation_NTF_To_ED1950',
           'esriSRGeoCS_Luxembourg1930',
           'esriSRGeoTransformation_LKS_1992_To_WGS_1984_1',
           'esriSRProjCS_NAD1927SPCS_MD',
           'esriSRProjCS_NAD1983HARN_WISCRSBayfieldFtUS',
           'esriSRGeoTransformation_IGN72_Nuku_Hiva_To_RGPF_3',
           'esriSRGeoTransformation_IGN72_Nuku_Hiva_To_RGPF_2',
           'esriSRProjCS_NAD1927SPCS_ARNorth',
           'esriSRProjCS_ColombiaBogota', 'esriSRGeoCS_OSGB1970SN',
           'esriSRProjCS_Sphere_AzimuthalEquidistant',
           'esriSRProjCS_NAD1983SPCS_MAMainlandFT',
           'esriSRGeoTransformation_Tahiti_To_WGS_1984_1',
           'esriSRPole_IsCurvedLine', 'esriSRGeoCS_RT38Stockholm',
           'esriSRProjCS_GDM2000Terengganu', 'esriSRDatum_IGM1995',
           'esriSRProjCS_Beijing1954_3_Degree_GK_Zone_26',
           'esriSRProjCS_SapperHill1943UTM_21S',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_43',
           'esriSRParameter_PseudoStandardParallel1',
           'IConstructMultipoint',
           'esriSRGeoTransformation_S_JTSK_To_WGS_1984_NGA',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Kittson_Meters',
           'esriSRProjCS_NAD1983SPCS_NDSouth',
           'esriSRProjCS_AinElAbd1970UTM_38N', 'esriGeometryPath',
           'esriSRDatum_Vietnam2000',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_60E',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_49',
           'esriSRProjCS_NAD1983SPCS_MSEast',
           'esriSRGeoTransformation_PDF1993_To_WGS1984',
           'esriSRDatum_Anna1_1965', 'esriSRDatum_IGN72GrandeTerre',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinMarinette',
           'E_GEOMETRY_NONPOLYLINE',
           'esriSRProjCS_Pulkovo1942_CS63zoneA1',
           'esriSRProjCS_Pulkovo1942_CS63zoneA2',
           'esriSRProjCS_Pulkovo1942_CS63zoneA3',
           'esriSRProjCS_Pulkovo1942_CS63zoneA4',
           'esriSRSpheroid_GRS1980Adj_MinnesotaBeltramiNorth',
           'esriSRSpheroid_GRS1980Adj_WisconsinWalworth',
           'esriSRGeoTransformation_ED1950_To_WGS1984_PT7',
           'esriSRGeoTransformation_ED1950_To_WGS1984_PT3',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_126E',
           'esriSRVertCS_EGM96Geoid',
           'esriSRGeoTransformation_Malongo1987_To_Mhast_1',
           'esriShapeModifierMask',
           'esriSRGeoTransformation_Pulkovo1942_To_ETRF1989',
           'esriSRGeoCS_Padang1884Jakarta',
           'esriSRGeoTransformation_NAD_1927_TO_NAD_1983_PRVI',
           'esriSRGeoCS_Kertau',
           'esriSRProjCS_NAD1983_CSRS98_UTM_Zone_21N',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_66E',
           'esriSRProjCS_SWEREF99_18_00',
           'esriSRProjCS_Kalianpur1937_UTM46N',
           'esriSRProjCS_Beijing1954_3_Degree_GK_CM_126E',
           'esriSRGeoTransformation_SWEREF99_To_WGS_1984_1',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Lake_of_the_Woods_North_Feet',
           'esriSRProjCS_NAD1983SPCS_IASouthFT',
           'esriSRSpheroid_GRS1980Adj_MinnesotaStevens',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Pennington_Feet',
           'esriSRProjCS_Xian1980_3_Degree_GK_Zone_39',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Waupaca_Meters',
           'esriSRProjCS_Xian1980_3_Degree_GK_Zone_32',
           'esriSRProjCS_Xian1980_3_Degree_GK_Zone_33',
           'esriSRProjCS_Xian1980_3_Degree_GK_Zone_30',
           'esriSRProjCS_Xian1980_3_Degree_GK_Zone_31',
           'esriSRProjCS_Xian1980_3_Degree_GK_Zone_36',
           'esriSRProjCS_Xian1980_3_Degree_GK_Zone_37',
           'esriSRProjCS_Xian1980_3_Degree_GK_Zone_34',
           'esriSRProjCS_Xian1980_3_Degree_GK_Zone_35',
           'esriSRProjCS_Dominica1945BritishWIndies',
           'esriSRDatum_SaturnTethys', 'esriSRVertCS_DHHN1985',
           'esriSRProjCS_WGS1972UTM_5S',
           'esriSRProjCS_NAD1927SPCS_ORSouth',
           'esriSRVertDatum_NGG1977', 'esriSRProjCS_WGS1972UTM_5N',
           'esriSRProjCS_DeirEzZorSyria', 'esriSRGeoCS_Bessel1841',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_14',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinClark',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaBeltramiNorth',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Cottonwood_Meters',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Meeker_Feet',
           'esriSRDatum_Pulkovo1942',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_11',
           'esriSRParameter_LatitudeOfOrigin',
           'esriSRGeoTransformation_NAD_1983_TO_HARN_NE',
           'esriSRProjCS_ETRS1989_UTM_Zone_38N',
           'esriSRSpheroid_ATS1977', 'esriSRGeoCS_DealulPiscului1933',
           'esriSRProjCS_Cape_UTM_Zone_36S',
           'esriSRProjCS_IrishNationalGrid',
           'esriSRProjCS_Indian1960UTM_48N',
           'esriSRDatum_NAD1983HARNAdj_WisconsinAdamsJuneau',
           'esriSRPrimeM_Greenwich',
           'E_GEOMETRY_UNDEFINED_SPATIAL_REFERENCE',
           'esriSRGeoCS_MHAST1951', 'esriSRDatum_SIRGAS2000',
           'esriSRProjCS_FranceIIIDegrees',
           'esriGeodeticTypeNormalSection',
           'esriSRGeoTransformation_Schwarzeck_To_WGS1984_2',
           'esriSRProjCS_ETRF1989UTM_35N',
           'esriSRProjCS_WGS1972UTM_21S',
           'esriSRProjCS_NAD1983SPCS_HI_1FT',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaWatonwan',
           'esriSRProjCS_WGS1972UTM_21N',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Murray_Feet',
           'esriSRProjection_EckertV',
           'esriSRProjCS_NAD1983HARN_Adj_MN_St_Louis_Central_Meters',
           'esriSRProjCS_NAD83_CSRS98_UTM_14N',
           'esriSRProjCS_NAD1983HARNSPCS_ARNorthFT',
           'esriSRGeoTransformation_PointeNoire_To_WGS1984',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_177W',
           'esriSRProjCS_Beijing1954_3_Degree_GK_CM_99E',
           'esriSRProjCS_NAD1983HARN_StatePlane_Montana_FIPS_2500_Feet_Intl',
           'esriSRProjCS_SWEREF99_18_45', 'esriSRGeoCS_Hungarian1972',
           'esriSRProjCS_NAD1983_CSRS98_Prince_Edward_Island',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinBayfield',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaRamsey',
           'esriSRProjCS_NordSahara1959UTM_29N',
           'esriSRGeoTransformation_MAGNA_To_WGS_1984_1',
           'esriSRProjCS_World_Sinusoidal',
           'esriSRGeoTransformation_Pulkovo1942_To_LKS1994',
           'esriSRProjCS_WorldAzimuthalEquidistant',
           'esriSRGeoTransformation_Adindan_To_WGS1984_4',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaNobles',
           'esriSRProjCS_World_Behrmann',
           'esriSRProjCS_Pulkovo1995GK_16N', 'IUnit',
           'esriSRProjCS_WGS1984_Complex_UTM_Zone_21N',
           'esriSRProjCS_Sphere_Cylindrical_Equal_Area',
           'esriSRGeoTransformation2Type',
           'esriSRGeoTransformation_ATS_1977_To_NAD_1983_CSRS98_NTv2_NovaScotia',
           'JSONConverterGeometry', 'esriSRProjCS_TokyoJapan8',
           'esriSRProjCS_TokyoJapan9',
           'E_GEOMETRY_CANNOT_EXTRAPOLATE_BY_SEGMENT',
           'esriSRProjCS_TokyoJapan1', 'esriSRProjCS_TokyoJapan2',
           'esriSRProjCS_TokyoJapan3', 'esriSRProjCS_TokyoJapan4',
           'esriSRProjCS_TokyoJapan5', 'esriSRProjCS_TokyoJapan6',
           'esriSRProjCS_TokyoJapan7',
           'esriSRGeoTransformation_MGI_To_WGS_1984_3',
           'esriSRGeoTransformation_MGI_To_WGS_1984_5',
           'esriSRGeoTransformation_MGI_To_WGS_1984_4',
           'esriSRGeoTransformation_MGI_To_WGS_1984_7',
           'esriSRGeoTransformation_MGI_To_WGS_1984_6',
           'esriSRProjCS_Pulkovo1942GK_15',
           'esriSRDatum_StLawrenceIsland',
           'esriSRProjCS_Xian1980_3_Degree_GK_CM_114E',
           'esriSRGeoCS_NGN', 'IHitTest3D',
           'esriSRProjCS_NAD1927SPCS_VASouth',
           'esriSRProjCS_WorldCylindricalEqualArea',
           'esriSRProjCS_RGFG1995UTMZone21N',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Itasca_South_Meters',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaScott',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Stearns_Meters',
           'esriSRProjCS_NAD1983HARN_WISCRSWoodFtUS',
           'esriSRGeoTransformation_Manoca_1962_To_WGS_1972_BE_1',
           'esriCurveIteratorStopAtPartTo',
           'esriSRProjCS_NAD1983SPCS_CAV',
           'esriSRProjCS_NAD1983MississippiTM',
           'esriSRProjCS_Pulkovo1995GK_13N', 'GeometryServerImpl',
           'esriSRDatum_NAD1983HARNAdj_WisconsinBarron',
           'esriSRProjCS_NAD1927CGQ77UTM_19N',
           'esriSRProjCS_NAD1983SPCS_CAI', 'esriShapeImportFlags',
           'esriSRProjCS_ED_1950_UTM_36N',
           'esriSRProjCS_Nahrwan1967UTM_40N',
           'esriSRGeoCS_MHAST_Offshore', '_WKSPointVA',
           'ProjectedCoordinateSystem', 'esriSRVertCS_NGG1977',
           'esriSRGeoTransformation_Pulkovo1942_To_WGS1984_12',
           'esriSRGeoTransformation_Pulkovo1942_To_WGS1984_10',
           'esriSRGeoCS_JAD2001',
           'esriSRGeoTransformation_TM65_To_ETRS_1989_1',
           'esriSegmentArc',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaStevens',
           'esriSRGeoCS_Agadez', 'esriTransformDirection',
           'esriSRProjection_HammerAitoff',
           'esriSRProjCS_GoodeHomolosineLand',
           'esriSRDatum_JupiterIo',
           'esriSRProjCS_NAD1983HARNSPCS_MEEast',
           'esriSRProjection4Type',
           'esriSRProjCS_NAD1983BLMZone16NftUS',
           'esriSRSpheroid_SphereGRS1980_Authalic',
           'esriSRDatum_Anguilla1957',
           'esriSRProjCS_Timbalai1948_RSO_Borneo_Meters',
           'esriSRProjCS_Indonesia1974UTM_51N',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaIsanti',
           'esriSRProjCS_RT38_25_gon_O',
           'esriSRSpheroid_GRS1980Adj_WICalumetFondduLacOutagamieWinnebago',
           'esriSRProjCS_NAD1927SPCS_TXCentral',
           'esriSRProjCS_Germany_2',
           'esriSRProjCS_NAD1983HARNSPCS_ARNorth',
           'esriSRDatum_Nakhl_e_Ghanem', 'ITopologicalOperator3',
           'ITopologicalOperator2', 'esriSRGeoCS_GRS1980',
           'ITopologicalOperator6', 'ITopologicalOperator5',
           'ITopologicalOperator4',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Lyon_Meters',
           'esriSRProjCS_Indonesia1974UTM_51S',
           'esriShapeExportStripMaterials',
           'esriSRProjCS_SWEREF99_12_00',
           'esriSRProjCS_NAD1983SPCS_MSWestFT',
           'esriSRParameter_LatitudeOf1st',
           'esriSRProjCS_LakeMaracaibo_Grid',
           'esriSRGeoTransformation_D48_To_ETRS_1989_Pomurje',
           'esriSRProjCS_NAD1983HARN_WISCRSWalworthFtUS',
           'esriSRSpheroid_GRS1980Adj_MinnesotaMcLeod',
           'esriSRProjCS_Indian1954UTMZone46N',
           'esriSRGeoCS_OldHawaiian',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Jefferson_Meters',
           'esriSRProjCS_World_GallStereographic',
           'esriSRGeoCS_Manoca1962', 'IGeometry3', 'IGeometry2',
           'IGeometry5', 'IGeometry4', 'esriSRGeoCS_S_JTSK_FERRO',
           'E_GEOMETRY_EXTERIORPART',
           'esriSRProjCS_Pulkovo1942GK_16N',
           'esriSRProjCS_GDA1994AustraliaAlbers',
           'esriSRProjCS_WGS1984UTM_52S', 'esriSRGeoCS_Fischer1960',
           'esriSRProjCS_Hanoi1972_GK_106_NE',
           'esriSRProjCS_AustriaFerroEast',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Lincoln_Meters',
           'esriSRProjCS_Pulkovo1942GK_7N',
           'esriSRProjCS_WGS1984UTM_52N',
           'esriSRProjCS_NAD1927SPCS_NVEast',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Carlton_Feet',
           'esriSRProjCS_Timbalai1948UTM_49N',
           'esriGeometryServerMessageCode_FindUnitsByWKID', 'IZShift',
           'esriSRProjCS_MONREF1997UTMZone49N',
           'esriSRGeoTransformation_NTF_To_WGS1972',
           'esriSRProjection_LambertAzimuthal', 'IWkb',
           'esriSRProjCS_MinnaUTM_31N', 'esriSRSpheroid_MarsPhobos',
           'esriShapeHasIDs', 'esriSRProjCS_SudFrance',
           'esriSRGeoCS_EverestIndiaNepal',
           'esriSRProjection_GaussKruger',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Vilas_Meters',
           'esriSRGeoCS_WGS1966',
           'esriSRGeoTransformation_Kalianpur_1962_To_WGS_1984_3',
           'esriSRGeoTransformation_Kalianpur_1962_To_WGS_1984_2',
           'esriSRGeoTransformation_Kalianpur_1962_To_WGS_1984_5',
           'esriSRGeoTransformation_Kalianpur_1962_To_WGS_1984_4',
           'esriSRProjCS_AfgooyeUTM_39N',
           'esriSRProjCS_NAD1927SPCS_MSEast',
           'esriSRProjCS_NAD1983HARN_WISCRSDouglasM',
           'S_GEOMETRY_PROJECTION_HINT_CLIP_PCS_AND_GCS',
           'esriSRDatum_NGN',
           'esriSRProjCS_NAD1983HARN_WISCRSBurnettFtUS',
           'esriSRVertCS_KOCWellDatum',
           'esriSRProjCS_NAD1983SPCS_UTSouth',
           'esriSRProjCS_Sphere_CrasterParabolic',
           'esriSRGeoTransformation_MGI_To_WGS1984_2',
           'esriSRGeoTransformation_Aratu_To_WGS_1984_12',
           'esriSRProjCS_NAD1983HARNSPCS_WICentral',
           'esriSRProjCS_NZGD2000_Mount_Nicholas_Circuit',
           'esriSRVertCS_RH70', 'esriSRVertCS_Nelson',
           'esriSRUnit_InternationalChain',
           'esriSRProjCS_FranceIVDegrees',
           'esriSRGeoTransformation_QND_1995_To_WGS_1984_1',
           'esriSRSpheroid_GRS1980Adj_WisconsinWaupaca',
           'esriNonSimpleRingOrientation',
           'esriSRProjCS_Kalianpur1937India_IIb',
           'esriSRProjCS_Pulkovo1995GK_20N',
           'esriSRProjCS_WGS1984S_AsiaAlbers',
           'esriSRGeoCS_Qornoq1927',
           'esriSRProjCS_NAD1983HARN_WISCRSTrempealeauFtUS',
           'esriSRGeoCS_Voirol1879Paris',
           'esriSRProjCS_NAD1983SPCS_KSSouth',
           'esriSRGeoTransformation_Afgooye_To_WGS1984',
           'esriGeometryServerMessageCode_TrimExtend',
           'esriSRDatum_NAD1983HARNAdj_WisconsinAshland',
           'esriSRProjCS_AzoresOriental1995_UTM_Zone_26N',
           'esriSRProjCS_NAD1983USA_Lambert',
           'esriSRProjCS_ED1950_TM33',
           'esriSRProjCS_NAD1983HARN_StatePlane_Virginia_North_FIPS_4501_Ft',
           'esriSRProjCS_SIRGAS_UTM_Zone_17N',
           'esriSRSpheroid_TheMoon', 'esriSRProjCS_NAD1927BLM_14N',
           'esriSRGeoCS_Afgooye', 'esriSRProjCS_SIRGAS_UTM_Zone_17S',
           'esriGeometryServerMessageCode_GetLabelPoints',
           'esriSRGeoTransformation_Egypt_Gulf_Suez_S_650_TL_To_WGS_1984_2',
           'esriSRProjCS_SouthAmerican1969UTM_24S',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Kenosha_Feet',
           'esriSRSpheroid_Helmert1906', 'esriSRProjCS_NGO1948UTM34N',
           'esriSRSpheroid_GRS1980Adj_MinnesotaBenton',
           'IESRISpatialReferenceGEN2',
           'esriSRProjCS_JAD1969JamaicaGrid',
           'esriSRProjection_EckertIII',
           'esriSRDatum_ModifiedEverest',
           'esriSRProjCS_NAD1983SPCS_KYNorth',
           'esriSRProjCS_Beijing1954_3_Degree_GK_CM_120E',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_120E',
           'esriSRProjCS_ETRF1989TM_Baltic1993', 'esriNoExtension',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Lake_of_the_Woods_South_Feet',
           'esriSRDatum_RGNC1991_93', 'IAffineTransformation2D3GEN',
           'esriSRDatum_UranusTitania',
           'esriSRProjCS_NAD1983SPCS_NDSouthFT', 'IProjection',
           'esriSRProjCS_NAD1983HARN_Maine_2000_West_Zone',
           'esriSRProjCS_NAD1927SPCS_KSNorth',
           'esriSRProjCS_OldHawaiian_HI5',
           'esriSRProjCS_OldHawaiian_HI4',
           'esriSRProjCS_Qornoq1927_UTM_Zone_23',
           'esriSRProjCS_Qornoq1927_UTM_Zone_22',
           'esriSRProjCS_OldHawaiian_HI1',
           'esriSRUnit_Indian1937Foot',
           'esriSRProjCS_OldHawaiian_HI3',
           'esriSRProjCS_OldHawaiian_HI2', 'IESRISegment2',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Nicollet_Meters',
           'esriSRGeoTransformation_WGS_1984_To_Observ_Meteor_1965',
           'esriSRUnit_InternationalInch', 'esriExtrapolateBoth',
           'esriSRProjCS_NAD1927SPCS_AK10', 'esriSRDatum_MHAST1951',
           'esriSRProjCS_NAD1983SPCS_MISouthFT',
           'esriSRProjCS_NAD1983SPCS_MDFT',
           'esriSRGeoTransformation_Nakhl_e_Ghanem_To_WGS_1984_6',
           'esriSRDatum_NAD1983HARNAdj_WisconsinMonroe',
           'esriSRProjCS_Beijing1954_3_Degree_GK_CM_90E',
           'esriSRGeoTransformation_Cape_To_WGS1984_1',
           'esriSRGeoTransformation_Cape_To_WGS1984_2',
           'esriExtendEmbeddedAtTo', 'IVector3D',
           'esriSRProjCS_NAD1983SPCS_AK3FT',
           'esriSRProjCS_NAD1927SPCS_TXNorthCentral',
           'esriSRDatum_Beijing1954',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_159E',
           'esriSRDatum_AscensionIsland1958', 'S_SPATIALREFERENCE_OK',
           'esriSRProjCS_Cape_UTM_Zone_34S',
           'esriGeometryEllipticArc',
           'esriSRGeoTransformation_PAdang_1884_Jakarta_To_Padang_1884',
           'esriSRProjCS_ST71_Belep_UTM_58S',
           'esriSRProjCS_GDM2000Kelantan',
           'esriSRGeoTransformation_Bern_1898_Bern_To_CH1903',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Polk_Feet',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Dodge_Meters',
           'esriSRGeoCS_Everest1830', 'esriSRProjCS_NAD1983UTM_13N',
           'esriSRGeoTransformation_Bogota_To_WGS_1984_region_2_CF',
           'esriSRProjCS_Sphere_Polyconic',
           'esriSRProjCS_NAD1983SPCS_MAMainland',
           'E_GEOMETRY_TOOMANYPOINTS', 'esriSRProjCS_WGS1972UTM_27S',
           'esriSRGeoTransformation_Jamaica_1969_To_WGS_1984_3',
           'esriSRProjCS_PuertoRicoUTM_20N',
           'esriSRProjCS_NAD1983HARN_WISCRSDoorFtUS',
           'esriSRProjCS_NAD1983SPCS_WYEast',
           'esriSRProjCS_WGS1972UTM_27N', 'esriShapeExportStripIDs',
           'esriSRGeoCS_Albanian1987',
           'esriSRProjCS_WGS1984S_PoleAziEqui',
           'esriSRGeoTransformation_JGD_2000_To_WGS_1984_1',
           'esriSRSpheroid_GRS1980Adj_MinnesotaRamsey',
           'esriSRProjCS_Greenland1996_UTMZone23N',
           'esriSRProjCS_NAD1983HARN_StatePlane_Texas_North_FIPS_4201_Ft',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Lafayette_Meters',
           'esriSRGeoTransformation_NAD_1983_TO_HARN_LA',
           'esriSRDatum_RT90', 'esriSRProjection_RobinsonArcInfo',
           'IGeometryServer3',
           'esriSRDatum_NAD1983HARNAdj_WisconsinVilas',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaTraverse',
           'esriSRProjCS_World_EquidistantConic', 'esriSRDatum_Cape',
           'esriSRProjCS_NAD1983HARNSPCS_MISouth',
           'esriSRGeoCS_European1979', 'esriSegmentBezier3Curve',
           'esriSRProjCS_MGI_3_Degree_Gauss_Zone_5',
           'esriSRProjCS_MGI_3_Degree_Gauss_Zone_6',
           'esriSRProjCS_MGI_3_Degree_Gauss_Zone_7',
           'esriSRHorizon_Envelope',
           'esriSRProjCS_NAD1983HARN_WISCRSFond_du_LacM',
           'esriSRProjCS_NAD1927SPCS_UTSouth',
           'esriSRPrimeM_Brussels', 'esriSRVertDatum_MaupitiSAU2001',
           'esriSRDatum_Beduaram', 'esriSRDatum_GEM10C',
           'esriSRDatum_HongKong1963', 'esriSRVertCS_Martinique1955',
           'esriSRDatum_Roma1940', 'esriSRProjCS_World_Polyconic',
           'esriSRGeoCS_JupiterIo', 'esriSRProjCS_ETRF1989UTM_37N',
           'esriSRProjCS_NAD1983HARNSPCS_KSSouthFT',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Dodge_Feet',
           'esriSRGeoCS_MSK1942',
           'esriSRSpheroid_GRS1980Adj_WisconsinWaushara',
           'esriMGRSMode_OldStyle', 'esriSRGeoCS_Nouakchott1965',
           'esriSRParameter_LongitudeOf2nd',
           'esriSRGeoCS_EuropeanDatum1987', 'esriGeometryAny',
           'esriSRVertDatum_Cascais',
           'esriSRProjection_Stereographic',
           'esriSRProjCS_NAD1983_StatePlane_Montana_FIPS_2500_Feet_Intl',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaCassSouth',
           'esriSRGeoTransformation_Lisbon_1890_To_WGS_1984_1',
           'esriSRGeoTransformation_Lisbon_1890_To_WGS_1984_2',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Dodge_Feet',
           'IGeographicCoordinateSystemEdit',
           'IConstructDomainExtent2',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_81E',
           'esriSRDatum_IGCB1955',
           'E_GEOMETRY_BUFFER_NEGATIVE_DISTANCE',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_117E',
           'esriSRGeoCS_SaturnEnceladus',
           'esriSRProjCS_SainteAnne_UTM_20N',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Marathon_Meters',
           'esriSRGeoCS_Indonesian', 'esriSRProjCS_ED_1950_UTM_34N',
           'esriSRProjCS_WGS1984_Australian_Antarctic_Polar_Stereographic',
           'esriSRDatum_Luxembourg1930',
           'esriSRProjCS_DGN1995_UTMZone50S',
           'esriSRParameter_XScale',
           'esriSRProjCS_World_VerticalPerspective',
           'esriSRDatum_CoteDIvoire',
           'esriSRGeoTransformation_StPaul_TO_NAD_1983',
           'esriSRProjCS_ED1950EuropeEquiConic',
           'esriSRDatum_Gan1970', 'esriSRProjCS_NAD1983SPCS_NVWest',
           'esriSRProjCS_IGNAstro1960_UTMZone29N',
           'esriSRProjCS_NAD1983HARNSPCS_OKNorth', 'esriSRDatum_ATF',
           'esriSRProjCS_Palestine1923PalestineGrid',
           'esriSRGeoCS_Nakhl_e_Ghanem', 'MultiPatch',
           'esriSRGeoTransformation_Bogota_To_MAGNA_Region_3_MB',
           'esriSRSpheroid_GRS1980Adj_MinnesotaWadena',
           'ITransform2D',
           'esriSRProjCS_Datum73ModifiedPortugueseGrid',
           'esriSRDatum_NAD1983HARNAdj_WisconsinGreenLakeMarquette',
           'esriSRProjCS_NAD1983_StatePlane_Michigan_North_FIPS_2111_Feet_Intl',
           'esriSRProjCS_NAD1983_Georgia_Statewide_Lambert',
           'esriSRGeoCS_AlaskanIslands',
           'esriSRGeoTransformation_Wake_Island_1952_To_WGS_1984',
           'esriSRSpheroid2Type', 'esriNonSimpleReasonEnum',
           'esriSRProjCS_QND1995UTMZone39N',
           'esriSRProjCS_Pulkovo1995GK_15',
           'esriSRProjCS_Pulkovo1995GK_14',
           'esriSRProjCS_Pulkovo1995GK_17',
           'esriSRProjCS_Pulkovo1995GK_16',
           'esriSRProjCS_Pulkovo1995GK_11',
           'esriSRProjCS_Pulkovo1995GK_10',
           'esriSRProjCS_Pulkovo1995GK_13', 'esriSRGeoCS_D48',
           'esriSRProjCS_Pulkovo1995GK_19',
           'esriSRProjCS_Pulkovo1995GK_18',
           'esriSRDatum_MajorAuxSphere_WGS1984',
           'esriSRDatum_NAD1983HARNAdj_WisconsinWashington',
           'esriSRProjCS_MAGNACiudadBogota',
           'esriSRProjCS_NordSahara1959UTM_31N',
           'esriSRProjCS_GrandComoros_UTM_38S',
           'esriGeometry1Dimension',
           'esriSRGeoTransformation_Bogota_Bogota_To_Bogota',
           'esriSRProjCS_KuwaitUtilityKTM',
           'esriSRGeoTransformation_D48_To_WGS_1984_2007',
           'esriSRProjCS_WGS1984UTM_54S',
           'esriSRProjCS_WGS1984UTM_54N',
           'esriSRProjection_RSO_Center',
           'esriSRDatum_NAD1983HARNAdj_WisconsinEauClaire',
           'esriSRDatum_Estonia1992', 'esriSRDatum_Estonia1997',
           'esriSRDatum_Pohnpei', 'esriSRVertCS_Cascais',
           'esriSRProjCS_Roma1940_Gauss_Boaga_Est',
           'esriSRProjCS_NAD1983HARN_WISCRSChippewaFtUS',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinForest',
           'esriSRProjCS_Makassar_NEIEZ', 'esriSRVertDatum_NAVD1988',
           'esriSRProjCS_ETRS1989_Poland_CS2000_Zone_8',
           'esriSRProjCS_NAD1983SPCS_NVEastFT', 'IVertexAttribute2',
           'esriSRGeoCS2Type',
           'esriSRProjCS_ED1950_3_Degree_GK_Zone_9',
           'esriSRProjCS_NAD1983HARN_WISCRSKenoshaM',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Winnebago_Feet',
           'esriSRDatum_NAD1983HARNAdj_WisconsinChippewa',
           'esriSRGeoCS_WGS1984', 'esriSRGeoCS_SaturnHyperion',
           'esriSRProjCS_WGS1984NPoleLAEAAlaska',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinMarquette',
           'IConstructAngle', 'esriCurveDensifyByAngle', 'IZAware',
           'esriSRProjCS_CostaRicaTM90', 'esriSRGeoCS_GUX1',
           'esriSRGeoTransformation_Qornoq_1927_To_WGS_1984_1',
           'esriSRGeoTransformation_Qornoq_1927_To_WGS_1984_2',
           'IPolyline', 'esriSRProjCS_Sphere_Loximuthal',
           'esriSRGeoTransformation_Carthage_To_WGS1984',
           'esriSRGeoTransformation_HeratNorth_To_WGS1984',
           'esriSRProjCS_NAD1927BLM_16N',
           'esriSRProjCS_Dabola1981_UTMZone29N',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaRedwood',
           'esriSRGeoTransformation_PD83_To_ETRS_1989_1',
           'esriSRProjCS_Hungarian1972_EOV',
           'E_GEOMETRY_DUPLICATESEGMENTPOINTER',
           'esriSRProjCS_Pulkovo1995GK_22N',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Mower_Feet',
           'esriSRParameter_YAxisRotation',
           'esriSRProjCS_NAD1983_3TM_111',
           'esriSRProjCS_NAD1983_3TM_117',
           'esriSRProjCS_NAD1983_3TM_114',
           'esriSRProjCS_ETRS1989ETRS_GK30FIN',
           'esriSRProjCS_Xian1980_3_Degree_GK_Zone_40',
           'esriSRGeoTransformation_BataviaJakarta_To_WGS1984',
           'esriSRGeoTransformation_Pulkovo_1942_adj_1958_To_ETRS_1989_1',
           'esriGeometryDimension', 'IConstructPoint',
           'esriSRProjCS_ETRS1989_Kp2000_Jutland',
           'esriSRProjCS_NAD1983SPCS_MICentral',
           'esriSRProjCS_LGD2006LibyaTM',
           'esriSRGeoTransformation_Moorea_1987_To_WGS_1984_1',
           'esriGeometryServerMessageCode_ConstructEnd',
           'esriSRParameter_ScaleDifference',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaCottonwood',
           'esriSRGeoTransformation_Pulkovo_1942_adj_1983_To_ETRS_1989_2',
           'esriSRGeoTransformation_Pulkovo_1942_adj_1983_To_ETRS_1989_1',
           'esriGeodeticTypeGeodesic',
           'esriSRProjCS_SwedishNationalGrid',
           'esriSRProjCS_SouthAmerican1969UTM_22S',
           'esriSRProjCS_WGS1984_Complex_UTM_Zone_28N',
           'E_GEOMETRY_JSON_SYNTAX', 'esriSRProjCS_WGS1984UTM_39S',
           'esriSRGeoTransformation_Porto_santo_1995_To_WGS_1984_2',
           'esriSRGeoTransformation_Porto_santo_1995_To_WGS_1984_3',
           'esriSRDatum_AutralianAntarctic1998',
           'esriSRDatum_SaturnMimas', 'esriSRProjCS_GDM2000Pahang',
           'esriSRProjCS_NAD1983SPCS_WANorth', 'esriSegmentInfo',
           'esriSRProjCS_WGS1984UTM_39N',
           'esriSRGeoTransformation_NAD_1983_TO_HARN_CN',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaRoseau',
           'esriAttributeZ', 'esriSRGeoCS_MonteMario',
           'esriAttributeM', 'esriSRProjCS_NADMichSPCS_MIEastOld',
           'esriKeepEndAttributes',
           'esriSRDatum_NAD1983HARNAdj_WisconsinLaCrosse',
           'esriSRDatum_YemenNGN1996', 'esriSRGeoCS_RT90',
           'esriSRGeoTransformation_Liberia1964_To_WGS1984',
           'esriSRProjCS_Fiji1956_UTMZone1S', 'esriSRGeoCS_EMEP',
           'esriSRProjCS_NZGD2000_Hawkes_Bay_Circuit',
           'esriSRGeoTransformation_NAD_1927_To_NAD_1983_6',
           'esriSRProjCS_NAD1983HARN_WISCRSPortageFtUS',
           'esriSRDatum_WGS1972',
           'esriSRGeoTransformation_D48_To_WGS_1984_Jugovzhodna_Slovenia',
           'esriSRGeoCS_Batavia', 'esriSRGeoCS_Jamaica1875',
           'IConstructClothoid', 'esriSRProjCS_WGS1972UTM_9S',
           'esriSRGeoTransformation_Minna_To_WGS_1984_7',
           'esriSRGeoCS_OSSN1980',
           'esriSRGeoTransformation_Minna_To_WGS_1984_6',
           'esriSRProjCS_NAD1983SPCS_VTFT',
           'esriSRProjCS_WGS1972UTM_9N', 'esriGeometryEnvelope',
           'esriSRProjCS_NAD1983SPCS_SDSouthFT',
           'esriSRHorizon_Polyline',
           'esriSRSpheroid_GRS1980Adj_WIKewauneeManitowocSheboygan',
           'esriSRGeoCS_DealulPiscului1970',
           'esriSRDatum_PosicionesGeodesicasArgentinas',
           'esriValueIncreases',
           'esriSRGeoTransformation_D48_To_ETRS_1989_Primorska',
           'esriSRGeoTransformation_IGN72_Nuku_Hiva_To_WGS_1984_4',
           'esriSRProjCS_NAD1983HARNFloridaGDLAlbers',
           'esriSRGeoTransformation_IGN72_Nuku_Hiva_To_WGS_1984_1',
           'esriSRGeoTransformation_IGN72_Nuku_Hiva_To_WGS_1984_2',
           'esriSRGeoTransformation_IGN72_Nuku_Hiva_To_WGS_1984_3',
           'esriSRProjCS_CamacupaTM12_SE', 'IEllipticArc',
           'esriSRGeoCS_Voirol1875Paris', 'RelationResult',
           'esriSRGeoTransformation_Old_Hawaiian_To_WGS_1984_8',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Brown_Feet',
           'esriSRProjCS_NAD1983HARN_WISCRSBuffaloFtUS',
           'esriSRProjCS_NAD1983UTM_11N',
           'esriSRDatum_EuropeanLibyanDatum1979',
           'esriGeometryServerMessageCode_GetDistanceGeodesic',
           'esriSRProjCS_WGS1972UTM_52N', 'wkbMultiPatch',
           'esriSRProjCS_WGS1972UTM_25N',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Juneau_Feet',
           'esriSRProjCS_NAD1983AlaskaAlbers',
           'esriSRProjCS_WGS1972UTM_25S',
           'esriSRProjCS_LGD2006_UTMZone33N',
           'esriSRGeoTransformation_WGS1972_To_WGS1984_1',
           'esriSRGeoTransformation_WGS1972_To_WGS1984_2',
           'esriSRProjCS_Greenland1996_UTMZone21N',
           'E_SPATIALREFERENCE_NOZPRECISION', 'esriSRDatum_Kousseri',
           'esriSRProjCS_NAD1983CSRSOntarioMNRLambert',
           'esriSRGeoTransformation_NAD_1983_TO_HARN_NY',
           'esriSRGeoTransformation_NAD_1983_TO_HARN_NV',
           'esriSRDatum_Uranus',
           'esriSRGeoTransformation_NAD_1983_TO_HARN_NM',
           'esriSRGeoTransformation_NAD_1983_TO_HARN_NJ',
           'esriNonSimpleMismatchedAttributes',
           'esriGeometryPartMidpoint',
           'esriSRGeoTransformation_NAD_1983_TO_HARN_ND',
           'esriSRProjCS_NAD1927SPCS_NMWest',
           'esriSRGeoTransformation_NAD_1983_TO_HARN_NB',
           'esriSRProjCS_Locodjo1965_TM_5_NW',
           'esriSRGeoTransformation_DGN_1995_To_WGS_1984_1',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_177E',
           'esriSRGeoTransformation_D48_To_ETRS_1989',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Bayfield_Meters',
           'esriSRProjCS_NAD1927SPCS_MTSouth',
           'esriSRGeoTransformation_Pointe_Geologie_Perroud_1950_To_WGS_1984_1',
           'esriSRGeoCS_BesselNamibia',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Buffalo_Meters',
           'WKSPointVA', 'esriSRSpheroid_AuthalicSphereArcInfo',
           'esriSRProjCS_NTFParis_LambertCentreFrance',
           'esriSRGeoTransformation_DHDN_To_ETRS_1989_8_NTv2',
           'esriSRDatum_Lisbon',
           'esriSRDatum_NAD1983HARNAdj_WisconsinPepinPierce',
           'esriSRProjCS_RGPFUTMZone6S',
           'esriSRProjCS_NAD1983HARN_WISCRSOutagamieM',
           'esriSRGeoTransformation_LC5_1961_To_WGS_1984',
           'esriSRProjCS_ETRF1989UTM_31N',
           'esriSRVertDatum_NorwayNormalNul1954', 'Datum',
           'IGeometryFactory3', 'E_GEOMETRY_OUTOFMEMORY',
           'esriSRProjCS_LGD2006LibyaTMZone13',
           'esriSRProjCS_LGD2006LibyaTMZone12',
           'esriSRProjCS_LGD2006LibyaTMZone11',
           'esriSRProjCS_LGD2006LibyaTMZone10',
           'esriSRGeoTransformation_Indonesian_1974_To_DGN_1995_1',
           'esriSRProjCS_NAD1983SPCS_ORSouthFT',
           'esriSRProjCS_NAD1927SPCS_IASouth',
           'esriSRDatum_Ocotepeque1935',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Washburn_Feet',
           'esriSRProjCS_NAD1983SPCS_INEast',
           'esriSRGeoCS_Madrid1870Madrid',
           'esriSRGeoTransformation_Bogota_Bogota_To_WGS_1984',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_72E',
           'esriSRProjCS_NAD1983HARN_StatePlane_Massachusetts_Island_FIPS_2002_Ft',
           'esriSRDatum_AuthalicSphere',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_87E',
           'esriSRSpheroid_GRS1980Adj_MinnesotaSibley',
           'esriSRProjCS_NAD1983HARN_WISCRSGrantM',
           'esriSRDatum_Hungarian1972',
           'esriSRGeoTransformation_OSGB1936_To_ED1950UKOOA',
           'esriSRProjCS_GunungSegara_NEIEZ',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Chippewa_Feet',
           'esriSRProjCS_NAD1983HARN_StatePlane_Georgia_West_FIPS_1002_Ft',
           'esriSRToleranceIsNaN',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_111E',
           'esriSRProjection_GallStereographic',
           'esriSRProjCS_Sphere_Hotine',
           'esriSRProjCS_DGN1995_UTMZone52N',
           'esriSRProjCS_NAD1983HARN_WISCRSShawanoM',
           'esriSRProjCS_DGN1995_UTMZone52S', 'IGeometryServer2',
           'esriSRVertCS_BandarAbbas',
           'esriSRParameter_XAxisTranslation',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_78E',
           'esriSRGeoTransformation_RGR_1992_To_Piton_des_Neiges_1',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinPrice',
           'esriSRProjCS_ETRS1989_Kp2000_Zealand',
           'esriSRGeoTransformation_Pulkovo1942_To_WGS1984',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Stevens_Feet',
           'esriSRProjCS_NAD1983HARNSPCS_ILEast',
           'esriSRGeoTransformation_DHDN_To_WGS_1984_3x',
           'esriSRProjCS_Pulkovo1995GK_3N',
           'esriSRGeoTransformation_Pulkovo_1942_To_WGS_1984_2',
           'esriSRGeoCS_PlutoCharon', 'esriSRDatum_Abidjan1987',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Clark_Feet',
           'ISRPersistStream', 'esriSRProjCS_PSADUTM_19N',
           'esriSRProjCS_IGCB1955CongoUTMZone33S',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_156E',
           'esriSRProjCS_PSADUTM_19S', 'S_GEOMETRY_HAS_NL_SEGMENTS',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaCassNorth',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_54E',
           'esriSRProjCS_Bern_1898_Bern_LV03C', 'RelationResultArray',
           'esriSRProjCS_POSGAR94ArgentinaZone5',
           'esriSRProjCS_POSGAR94ArgentinaZone4',
           'esriSRProjCS_POSGAR94ArgentinaZone7',
           'esriSRProjCS_POSGAR94ArgentinaZone6',
           'esriSRProjCS_POSGAR94ArgentinaZone1',
           'esriSRProjCS_POSGAR94ArgentinaZone3',
           'esriSRProjCS_POSGAR94ArgentinaZone2',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaNobles',
           'esriSRGeoTransformation_Minna_To_WGS_1984_4',
           'esriSRProjCS_Pulkovo1995GK_31',
           'esriSRProjCS_Pulkovo1995GK_30',
           'esriSRGeoTransformation_Minna_To_WGS_1984_3',
           'esriSRProjCS_DeirEzZorLevantStereographic',
           'esriSRGeoTransformation_Minna_To_WGS_1984_9',
           'esriSRGeoTransformation_Minna_To_WGS_1984_8',
           'esriSRGeoCS_Clarke1866',
           'esriSRProjCS_Xian1980_3_Degree_GK_CM_129E',
           'esriSRProjCS_NAD1983SPCS_KYSouthFT',
           'esriSRGeoTransformation_KKJ_To_WGS_1984_1',
           'esriSRGeoTransformation_KKJ_To_WGS_1984_2',
           'esriSRDatum_EgyptGulfSuez_S650TL',
           'esriSRGeoTransformation_Wake_Eniwetok_1960_To_WGS_1984',
           'esriGeometry25Dimension', 'esriBufferLeft',
           'esriSRProjCS_NAD1983HARN_StatePlane_Colorado_South_FIPS_0503_Ft',
           'esriSRProjCS_WGS1984UTM_56N', 'IMSegmentationInternal',
           'esriSRProjCS_NAD1927SPCS_HI1',
           'esriSRProjCS_NAD1927SPCS_HI3',
           'esriSRProjCS_NAD1927SPCS_HI2',
           'esriSRProjCS_NAD1927SPCS_HI5',
           'esriSRProjCS_NAD1927SPCS_HI4',
           'esriSRGeoTransformation_Trinidad_1903_To_WGS_1984_2',
           'esriSRProjCS_NAD1983SPCS_AZWest',
           'esriSRProjCS_WGS1984UTM_56S',
           'IProjectiveTransformation2D',
           'esriSRGeoTransformation_WGS_1984_ITRF00_To_NAD_1983_HARN',
           'esriSRProjCS_NAD1983CSRS10TM_AEPForest',
           'esriSRVertDatum_Moturiki',
           'esriSRGeoTransformation_PSAD1956_To_WGS1984_8',
           'esriSRGeoTransformation_PSAD1956_To_WGS1984_9',
           'esriSRGeoTransformation_PSAD1956_To_WGS1984_6',
           'esriSRGeoTransformation_PSAD1956_To_WGS1984_7',
           'esriSRGeoTransformation_PSAD1956_To_WGS1984_4',
           'esriSRGeoTransformation_PSAD1956_To_WGS1984_5',
           'esriSRGeoTransformation_PSAD1956_To_WGS1984_2',
           'esriSRGeoTransformation_PSAD1956_To_WGS1984_3',
           'esriSRGeoTransformation_PSAD1956_To_WGS1984_1',
           'esriSRProjCS_NAD1983SPCS_SDNorth',
           'esriSRProjCS_NAD1983UTM_9N',
           'esriSRProjCS_CampoInchauspe_UTM_Zone_20S',
           'esriSRVertDatum_DVR90',
           'esriSRProjCS_NAD1983HARNSPCS_FLEast',
           'esriSRProjCS_NAD1983HARN_StatePlane_New_Mexico_Central_FIPS_3002_Ft',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_27E',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinTrempealeau',
           'esriSRGeoTransformation_CH1903_Plus_To_WGS_1984_1',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Scott_Meters',
           'esriSRGeoCS_BeaconE1945',
           'esriSRSpheroid_Clarke1866AuthalicSphere',
           'esriSRProjCS_NAD1983HARN_WISCRSSawyerFtUS',
           'esriSRProjCS_NAD1983BLMZone17NftUS',
           'esriSRProjCS_Pulkovo1995GK_24N',
           'esriSRProjCS_Pulkovo1942GK_5',
           'esriSRProjCS_Pulkovo1942GK_4',
           'esriSRProjCS_Pulkovo1942GK_7',
           'esriSRProjCS_Pulkovo1942GK_6',
           'esriSRProjCS_Pulkovo1942GK_3', 'wkbGeometryCollection',
           'esriSRGeoCS_Beijing1954',
           'esriSRProjCS_Kalianpur1962India_I',
           'esriSRProjCS_Pulkovo1942GK_9',
           'esriSRProjCS_Pulkovo1942GK_8',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_66E',
           'esriSRGeoTransformation_NZGD1949_To_WGS1984',
           'esriSRProjCS_NAD1983SPCS_ALEastFT',
           'esriSRProjCS_NAD1983HARN_WISCRSBurnettM',
           'esriSRProjCS_Timbalai1948_RSO_Borneo_Feet',
           'esriSRGeoCS_KoreanDatum1985',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_56',
           'esriSRProjCS_NAD1983HARNSPCS_MAIsland',
           'esriSRProjCS_Xian1980_3_Degree_GK_CM_87E',
           'esriSRProjCS_NAD1983SPCS_MINorth',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaIsanti',
           'esriSRVertCS_BoraBoraSAU2001',
           'esriSRProjCS_ED1950EuropeAlbers',
           'esriSRProjCS_SouthAmerican1969UTM_20N',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Grant_Meters',
           'esriSRProjCS_ETRF1989UTM_32N', 'IMSegmentation',
           'esriSRGeoTransformation_ED_1950_To_WGS_1984_23',
           'esriSRGeoTransformation_Abidjan1987_To_WGS1984',
           'esriSRDatum_UranusRosalind',
           'esriSRProjCS_NZGD2000_Wairarapa_Circuit',
           'esriSRProjCS_NAD1983HARN_Oregon_Statewide_Lambert_Feet_Intl',
           'esriSRProjCS_WGS84ARC_SystemZone8',
           'esriSRProjCS_WGS84ARC_SystemZone9',
           'esriSRProjCS_NAD1983SPCS_IDWestFT',
           'esriSRProjCS_NZGD1949NorthIsland',
           'esriSRProjCS_WGS84ARC_SystemZone2',
           'esriSRProjCS_WGS84ARC_SystemZone3',
           'esriSRGeoTransformation_Tahaa1954_To_WGS1984_1',
           'esriSRProjCS_WGS84ARC_SystemZone6',
           'esriSRProjCS_WGS84ARC_SystemZone7',
           'esriSRProjCS_WGS84ARC_SystemZone4',
           'esriSRProjCS_WGS84ARC_SystemZone5',
           'esriSRProjCS_SIRGAS2000UTMZone19N',
           'esriSRProjCS_ISN1993_Lambert_1993',
           'esriSRProjCS_AGD1966AMG_48',
           'esriSRGeoTransformation_Bogota_To_MAGNA_region_1_CF',
           'esriSRProjection_Loximuthal',
           'esriSRProjCS_NAD1983HARN_WISCRSLangladeM',
           'esriSRProjCS_NAD1983HARN_WISCRSPepinM',
           'esriSpatialReferenceImplHandle',
           'esriSRProjCS_SIRGAS2000UTMZone19S',
           'esriSRGeoTransformation_Bogota_To_WGS_1984_region_8_CF',
           'esriShapePointM', 'esriSRProjCS_NAD1983SPCS_AK10FT',
           'esriShapePointZ',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_39E',
           'esriSRPrimeM_Lisbon',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Norman_Meters',
           'esriSRGeoTransformation_Kertau_To_WGS1984',
           'esriSRProjCS_NAD1927SPCS_MEWest',
           'esriSRProjCS_NAD1983_Texas_Centric_Mapping_System_Lambert',
           'esriSRGeoTransformation_RGNC_1991_To_NEA74_Noumea_NTv2',
           'esriSRDatum_NAD1983HARNAdj_WisconsinColumbia',
           'esriSRProjCS_WGS84ARC_SystemZone14',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_29',
           'esriSRProjCS_NAD1927MTM_1', 'IRing2',
           'SegmentOverlapEqual', 'esriSpatialRelationTouch',
           'esriSRProjCS_NAD1927MTM_4',
           'esriSRGeoTransformation_Guam_1963_To_HARN_Tinian_Sguijan',
           'esriSRProjCS_RD1983_GKZone5',
           'esriSRProjCS_RD1983_GKZone4',
           'esriSRProjCS_NAD1983HARN_WISCRSWalworthM',
           'esriSRProjCS_WGS84ARC_SystemZone12',
           'esriSRVertDatum_MalinHead',
           'esriSRProjCS_NAD1927SPCS_NMCentral',
           'esriSRSpheroid_GRS1980Adj_MinnesotaRice',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_21',
           'esriSRDatum_Clarke1880SGA',
           'esriSRProjCS_NAD1983HARN_WISCRSVernonM',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaPine',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_27', 'IMSnap',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_24',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaStLouisNorth',
           'esriSRDatum_AzoresCentralIslands1948',
           'esriSRProjCS_NAD1983HARN_WISCRSJuneauFtUS',
           'esriSRUnit_SurveyYard', 'esriSRDatum_OSGB1970SN',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Rusk_Feet',
           'esriSRProjCS_LePouce1934MauritiusGrid',
           'esriSRProjCS_ETRS1989_UTM_Zone_32N', 'esriSRGeoCS_Aratu',
           'E_GEOMETRY_SEGMENTGRAPH_CANTLOAD',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaItascaNorth',
           'esriSRGeoTransformation_Yemen_NGN_1996_To_WGS_1984',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Martin_Meters',
           'esriSRGeoTransformation_D48_To_WGS_1984',
           'esriSRProjCS_NAD1983HARN_WISCRSMarinetteM',
           'esriSRProjCS_NAD1983HARNSPCS_NE',
           'esriSRProjCS_NAD1983SPCS_MNSouth',
           'esriSRGeoCS_International1924',
           'esriSRProjCS_NAD1983UTM_17N',
           'esriSRProjCS_NAD1983HARNSPCS_NJ',
           'esriSRProjCS_NAD1983HARNSPCS_NH',
           'esriSRProjCS_WGS1972UTM_50N',
           'esriSRDatum_JupiterAdrastea', 'esriSRGeoCS_Minna',
           'esriSRDatum_Merchich',
           'esriSRGeoTransformation_LaCanoa_To_WGS1984',
           'esriSRProjCS_WGS1972UTM_50S',
           'esriSRProjCS_NAD1927UTM_4N',
           'esriSRProjCS_NAD1983HARN_WISCRSFond_du_LacFtUS',
           'E_SPATIALREFERENCE_CANTDEFINEAUTH',
           'esriSRGeoTransformation_ED_1950_To_WGS_1984_39',
           'esriSRGeoTransformation_ED_1950_To_WGS_1984_38',
           'esriSRProjCS_Greenland1996_UTMZone27N',
           'esriSRGeoTransformation_ED_1950_To_WGS_1984_31',
           'esriSRGeoTransformation_ED_1950_To_WGS_1984_30',
           'esriSRGeoTransformation_ED_1950_To_WGS_1984_33',
           'esriSRGeoTransformation_ED_1950_To_WGS_1984_32',
           'esriSRGeoTransformation_ED_1950_To_WGS_1984_34',
           'esriSRGeoTransformation_ED_1950_To_WGS_1984_37',
           'esriSRGeoTransformation_ED_1950_To_WGS_1984_36',
           'esriSRProjCS_Xian1980_3_Degree_GK_CM_135E',
           'esriSRProjCS_NAD1927SPCS_MAIsland',
           'esriSRGeoCS_ISTS073_1969',
           'esriSRProjCS_NAD1983HARNSPCS_WVNorth',
           'esriSRProjCS_NAD1927UTM_11N',
           'esriSRSpheroid_GRS1980Adj_MinnesotaPennington',
           'esriSRProjCS_ED1950_France_EuroLambert',
           'esriSRProjCS_NZGD1949_Mount_Eden_Circuit',
           'esriSRProjCS_WGS1972UTM_1N',
           'esriSRDatum_JapanGeodeticDatum2000',
           'esriSRVertDatum_NGPF',
           'esriSRProjCS_NAD1983HARNMichiganGeoRef_Meters',
           'esriSRProjCS_WGS1984NPoleLAEABeringSea',
           'esriSRProjCS_NAD1983HARN_WISCRSMarathonFtUS',
           'esriSRDatum_NordDeGuerre',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Koochiching_Meters',
           'esriSRProjCS_NAD1983_CRS98_MTM_7',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Sheboygan_Meters',
           'esriSRProjCS_NAD1983_StatePlane_Utah_South_FIPS_4303_Feet_Intl',
           'esriSRProjCS_NAD1927SPCS_MOEast', 'esriLeftTurn',
           'esriSRProjCS_Kertau_RSO_Malaya_Meters',
           'esriSRProjCS_ETRF1989UTM_33N',
           'esriSRDatum_CentreSpatialGuyanais1967', 'IPath',
           'esriSRProjCS_Trinidad1903TrinidadGrid',
           'esriSRProjCS_NAD1983HARN_StatePlane_Idaho_Central_FIPS_1102_Ft',
           'esriSRSpheroid_Clarke1880SGA',
           'esriSRProjCS_TokyoJapan18', 'esriSRProjCS_TokyoJapan19',
           'esriSRGeoTransformation_MOP78_To_WGS_1984_2',
           'esriSRGeoTransformation_MOP78_To_WGS_1984_1',
           'esriSRProjCS_TokyoJapan12', 'esriSRProjCS_TokyoJapan13',
           'esriSRProjCS_TokyoJapan10', 'esriSRProjCS_TokyoJapan11',
           'esriSRProjCS_TokyoJapan16', 'esriSRProjCS_TokyoJapan17',
           'esriSRProjCS_TokyoJapan14', 'esriSRProjCS_TokyoJapan15',
           'esriSRVertDatum_Riketshoghtsystem1970',
           'esriSRProjCS_NAD1983SPCS_VT',
           'esriSRProjCS_WGS1972UTM_1S', 'esriArcMajor',
           'esriSRSpheroid_GRS1980Adj_WisconsinDodgeJefferson',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Cook_North_Meters',
           'esriSRParameter_Y_CoordinateOfRotationOrigin',
           'esriSRGeoTransformation_RGF_1993_To_ETRS_1989_1',
           'esriSRDatum_LibyanGeodeticDatum2006',
           'esriSRProjCS_NAD1983CanadaAlbers',
           'esriBufferConstructionEndEnum',
           'esriSRDatum_ChathamIslands1979',
           'esriSRProjCS_NAD1983HARN_WISCRSEauClaireM',
           'esriCurveIteratorStopAtCurveEnd',
           'esriSRProjCS_NAD1983SPCS_FLNorthFT',
           'esriSRGeoCS_ModifiedEverest',
           'esriSRProjCS_IGM1995_UTM_Zone_33N',
           'esriSRVertCS_Taranaki',
           'esriSRProjCS_Kousseri_UTM_Zone_33N',
           'esriSRGeoCS_BabSouthAstro',
           'esriSRGeoTransformation_NAD_1983_To_HARN_SC',
           'esriSRUnit_SearsChain',
           'esriSRGeoTransformation_Egypt_1907_To_WGS_1972',
           'esriSRGeoTransformation_DHDN_To_WGS_1984_5x',
           'esriSRProjCS_NAD1983_StatePlane_Utah_North_FIPS_4301_Feet_Intl',
           'esriSRProjCS_Kalianpur1880India_I',
           'esriSRGeoTransformation_Barbados_1938_To_WGS_1984_1',
           'esriShapeGeneralPoint',
           'esriSRDatum_NAD1983HARNAdj_WisconsinTrempealeau',
           'esriSRGeoCS_IERSTerrestrialReferenceFrame1990',
           'esriSRGeoCS_IERSTerrestrialReferenceFrame1991',
           'esriSRGeoCS_IERSTerrestrialReferenceFrame1992',
           'esriSRGeoCS_IERSTerrestrialReferenceFrame1993',
           'esriSRGeoCS_IERSTerrestrialReferenceFrame1994',
           'esriSRGeoCS_IERSTerrestrialReferenceFrame1996',
           'esriSRGeoCS_IERSTerrestrialReferenceFrame1997',
           'esriSRProjCS_Kalianpur1975India_IV',
           'esriSRProjCS_Pulkovo1995GK_5N',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinManitowoc',
           'esriSRProjCS_Sphere_EquidistantConic',
           'esriSRProjection_Sinusoidal',
           'esriSRProjCS_Beijing1954GK_20N',
           'esriSRGeoTransformation_CH1903Plus_To_CHTRF_1995',
           'esriSRSpheroid_JupiterAnanke',
           'esriSRGeoTransformation_CSG_1967_To_WGS_1984_1',
           'esriSRProjCS_RGFG1995_UTM_22N',
           'esriSRDatum_Nouakchott1965',
           'esriSRSpheroid_ModifiedEverest1969',
           'esriSRProjCS_Kalianpur1880India_0',
           'esriSRDatum_Hough1960',
           'esriSRGeoTransformation_Estonia1992_To_WGS1984',
           'esriSRGeoTransformation_Indian1954_To_WGS1984',
           'esriSRProjCS_ED1950TM5_NE',
           'esriSRProjCS_NAD1983NWTLambert', 'esriSegmentSpiral',
           'esriSRGeoTransformation_Indonesian_1974_To_WGS_1984_2',
           'esriSRGeoTransformation_Indonesian_1974_To_WGS_1984_3',
           'esriSRProjCS_NAD1927SPCS_AZWest',
           'esriSRGeoTransformation_CH1903_To_WGS1984_1',
           'esriSRDatum_Walbeck', 'E_GEOMETRY_INPUT_TYPE_INCORRECT',
           'esriSRDatum_Indian1960',
           'esriSRProjCS_NAD1983SPCS_WVSouthFT',
           'esriSRDatum_AuthalicSphere_GRS1980',
           'esriSRGeoTransformation_Datum_73_To_WGS_1984_4',
           'esriSRProjCS_NAD1927SPCS_StCroix',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Langlade_Feet',
           'esriSRProjCS_Abidjan1987UTM_29N',
           'esriSRProjCS_WGS1984UTM_58N',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaHouston',
           'esriSRProjCS_WGS1984UTM_58S',
           'esriSRGeoTransformation_VoirolUnifieParis_To_WGS1984',
           'esriSRProjCS_NAD1983HARN_StatePlane_Delaware_FIPS_0700_Ft',
           'esriSRGeoCS_IGN72GrandeTerre',
           'esriSRProjCS_NAD1983_UTM_Zone_1N',
           'esriSRProjCS_AinElAbd1970UTMZone40N',
           'esriSRProjCS_Albanian1987_GK_Zone_4',
           'esriSRSpheroid_GRS1980Adj_WisconsinDane',
           'esriSRProjCS_NAD1983HARN_StatePlane_New_York_Central_FIPS_3102_Ft',
           'esriSRGeoTransformation_Zanderij_To_WGS1984',
           'esriSRGeoTransformation_DOS_71_4_To_WGS_1984',
           'E_GEOMETRY_BUFFEROUTOFBOUNDS',
           'esriSRProjCS_ETRF1989UTM_29N', 'esriSRGeoCS_Lake',
           'esriSRDatum_IERSTerrestrialReferenceFrame1992',
           'esriSRDatum_IERSTerrestrialReferenceFrame1993',
           'esriSRDatum_IERSTerrestrialReferenceFrame1994',
           'esriSRDatum_IERSTerrestrialReferenceFrame1996',
           'esriSRDatum_IERSTerrestrialReferenceFrame1997',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaHennepin',
           'esriSRDatum_Jamaica1969', 'esriCurveExtension',
           'esriSRProjCS_NTFParis_LambertNordFrance',
           'esriSRSpheroid_SaturnJanus',
           'esriSRProjCS_NAD1983MTM_2SCoPQ',
           'esriSRProjCS_DGN1995IndonesiaTM3Zone47_1',
           'esriSRDatum_Voirol1879', 'esriSRDatum_Malongo1987',
           'esriSRProjCS_WGS1984NPoleLAEAAtlantic',
           'esriSRProjCS_Pulkovo1942GK_2', 'esriSRDatum_Voirol1875',
           'esriSRGeoTransformation_ETRS_1989_To_WGS_1984',
           'E_GEOMETRY_INVALIDRINGORDER', 'esriSRProjCS_World_Bonne',
           'esriSRGeoTransformation_Estonia_1997_To_ETRS_1989_1',
           'esriSRProjCS_NAD1983SPCS_CAIII',
           'esriSRProjCS_ELD1979_Libya_10',
           'esriSRProjCS_ELD1979_Libya_11',
           'esriSRProjCS_ELD1979_Libya_12',
           'esriSRProjCS_ELD1979_Libya_13',
           'esriSRGeoCS_LomaQuintana',
           'esriSpatialRelationInteriorIntersection',
           'E_SPATIALREFERENCE_INVALID_PARAMETER',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinWalworth',
           'esriSRProjCS_NAD1927SPCS_WISouth',
           'esriSRVertDatum_NationalVerticalNetwork1999',
           'esriSRDatum_RGF1993', 'esriSRSpheroid_GRS1967Truncated',
           'esriGeometryServerMessageCode_GetLengthsGeodesic',
           'esriSRDatum_KerguelenIsland1949', 'esriSRGeoCS_GDA1994',
           'esriSRUnit_IndianYard',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Carlton_Meters',
           'esriSRProjCS_NAD1983HARN_StatePlane_Texas_North_Central_FIPS_4202_Ft',
           'esriSRDatum_Yacare', 'esriSRUnit_UKNauticalMile',
           'esriSRGeoTransformation_AGD84_TO_GDA94_NTV2_Western_Australia',
           'IPrimeMeridian', 'esriSRProjCS_NAD1983HARNSPCS_ALEast',
           'esriSRGeoCS_HeratNorth', 'esriSRDatum_fk89',
           'esriSRProjCS_OSNI1952_Irish_National_Grid',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Chippewa_Meters',
           'esriSRGeoTransformation_NAD_1927_TO_NAD_1983_NADCON',
           'esriSRProjCS_Qatar1948_Qatar_Grid', 'Polyline',
           'esriSRGeoTransformation_NAD_1983_NSRS2007_To_WGS_1984_1',
           'esriSRProjCS_NGO1948UTM32N',
           'esriSRProjCS_LaCanoaUTM_18N', 'esriSRDatum_Samboja',
           'IRelationalOperator3D', 'esriSRProjCS_HongKong1980Grid',
           'IControlPrecision',
           'esriSRGeoTransformation_Luzon1911_To_WGS1984_2',
           'esriSRProjCS_World_Mercator',
           'esriSRUnit_InternationalYard',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaGrant',
           'esriSRGeoTransformation_Naparima_1955_To_WGS_1984_2',
           'esriSRGeoTransformation_Naparima_1955_To_WGS_1984_3',
           'esriSRGeoCS_Rassadiran',
           'esriSRProjCS_Xian1980_3_Degree_GK_CM_75E',
           'esriSRDatum_Pulkovo1995',
           'esriSRProjCS_Pulkovo1995GK_26N',
           'E_SPATIALREFERENCE_CANTLOADXFORMFILE',
           'esriSRGeoTransformation_NordSahara1959_To_WGS1984',
           'esriFilterGCS', 'SegmentOverlapRightAtEnd',
           'esriSRDatum_Accra', 'esriSRDatum_Aratu',
           'esriSRGeoTransformation_Naparima1972_To_WGS1984_2',
           'esriMGRSMode_OldWith180InZone01', 'esriBufferRound',
           'esriSRGeoTransformation_Pohnpei_To_NAD_1983',
           'esriSRGeoCS_Barbados1938',
           'esriSRGeoTransformation_Qatar_1974_To_WGS_1984_2',
           'esriSRGeoTransformation_GUX_1_To_WGS_1984',
           'esriSRProjCS_Korean1985_Korea_East_Belt',
           'esriSRDatum_PlutoCharon',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaTodd',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Big_Stone_Meters',
           'IGeographicCoordinateSystem', 'esriSRGeoCS_Saturn',
           'esriSRGeoCS_SWEREF99', 'esriSRParameter2Type',
           'esriSRGeoCS_NeptuneProteus',
           'esriSRProjCS_NAD1983HARNSPCS_NMEast',
           'esriSRDatum_NAD1983HARNAdj_WisconsinBayfield',
           'esriSRGeoCS_LisbonLisbon',
           'esriGeometryServerMessageCode_Densify',
           'esriSRProjCS_ETRS1989_UTM_Zone_30N',
           'esriSRProjCS_ETRS1989ETRS_GK29FIN',
           'E_GEOMETRY_JSON_BAD_SHORTFORM_POINTS',
           'esriSRGeoTransformation_AGD1984_To_WGS1984_2',
           'esriSRVertCS_St_Kilda',
           'esriSRGeoTransformation_AGD1984_To_WGS1984_1',
           'esriSRDatum_Mercury',
           'esriSRProjCS_IRENET95_UTM_Zone_29N',
           'esriSRProjCS_CamacupaUTM_33S',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaCookSouth',
           'esriSRProjCS_NAD1983UTM_15N',
           'esriSRProjCS_JAD2001JamaicaGrid',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Clay_Meters',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Scott_Feet',
           'esriSRDatum_SainteAnne',
           'esriSRProjCS_NAD1983HARNSPCSSouthCarolina',
           'esriSRGeoCS_HongKong1963_67',
           'esriSRGeoTransformation_Hartebeesthoek94_To_WGS1984',
           'esriSRProjCS_WGS1972UTM_56N',
           'esriSRProjCS_NAD1983USFS_R6Albers',
           'esriSRProjCS_WGS1972UTM_29N',
           'esriSRProjCS_TWD1997TM_Taiwan',
           'esriSRProjCS_Greenland1996_UTMZone25N',
           'esriSRProjCS_WGS1972UTM_56S',
           'esriSRProjCS_WGS1972UTM_29S', 'esriSRDatum_Madzansua',
           'esriSRProjCS_CamacupaTM11_30SE',
           'esriSRProjCS_NAD1983HARN_StatePlane_Arizona_East_FIPS_0201_Feet_Intl',
           'esriSRGeoCS_Bermuda2000',
           'esriSRProjCS_NZGD2000_Grey_Circuit',
           'esriSRProjCS_WGS1984UTM_24S',
           'esriSRProjCS_NAD1927UTM_6N',
           'esriSRGeoTransformation_D48_To_ETRS_1989_Jugovzhodna_Slovenia',
           'esriSRProjCS_WGS1984UTM_24N',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_162E',
           'esriSRGeoTransformation_Gan_1970_To_WGS_1984_1',
           'esriSRProjCS_NAD1983SPCS_WYEastCentralFT',
           'esriSRGeoTransformation_PRS_1992_To_WGS_1984_1',
           'esriSRGeoTransformation_Indian_1975_To_WGS_1984_3',
           'esriSRGeoTransformation_Indian_1975_To_WGS_1984_4',
           'esriSRDatum_EuropeanDatum1950',
           'esriSRProjection_CrasterParabolic',
           'esriSRGeoTransformation_RD83_To_WGS_1984_1_NTv2',
           'esriSRSpheroid_GRS1980Adj_MinnesotaRedLake',
           'esriSRGeoTransformation_NAD_1983_To_WGS_1984_6',
           'esriSRGeoTransformation_NAD_1983_To_WGS_1984_7',
           'esriSRGeoTransformation_NAD_1983_To_WGS_1984_8',
           'esriSRGeoCS_Airy1830',
           'esriProjectionHintFindGeoTransformation',
           'esriSRSpheroid_GRS1980Adj_MinnesotaPine',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaPipestone',
           'esriSRProjCS_SouthAmerican1969UTM_20S',
           'esriSRGeoTransformation_St_Vincent_1945_To_WGS_1984_1',
           'esriSRProjCS_NAD1983SPCS_WVNorth',
           'esriSRSpheroid_GRS1980Adj_MinnesotaStLouisSouth',
           'esriSRUnit_Decimeter',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinSheboygan',
           'esriSRProjCS_WGS1984S_AsiaEquiConic',
           'esriSRGeoTransformation_Greek_Athens_To_Greek', 'IZ',
           'esriSRGeoTransformation_AGD_1966_To_GDA_1994_11_NTv2',
           'esriSRProjCS_ED1950_Turkey_9',
           'esriSRGeoTransformation_Amersfoort_To_WGS1984_4X',
           'esriSRGeoCS_Leigon', 'esriSRProjCS_World_WinkelII',
           'esriSRProjCS_NAD1983HARNSPCS_ILEastFT',
           'esriSRProjCS_NAD1983SPCS_PASouth', 'esriSRDatum2Type',
           'esriSRGeoCS_Hughes1980',
           'esriSRGeoTransformation_Midway_1961_To_WGS_1984',
           'esriSRUnitType', 'esriAttributeTexture',
           'esriSRProjCS_Beijing1954GK_19N',
           'esriSRProjCS_VoirolUnifieDegreeSAlgerie',
           'esriSRProjCS_EgyptRedBelt', 'esriUTMAddSpaces',
           'esriSRProjCS_NAD1983HARNSPCS_OKSouth',
           'esriSRVertDatum_ChathamIsland',
           'esriSRDatum_SaturnCalypso',
           'esriSRSpheroid_GRS1980Adj_MinnesotaPope',
           'esriSRProjCS_ELD1979_Libya_6',
           'esriSRProjCS_ELD1979_Libya_7', 'esriShapeGeneralPolygon',
           'esriSRSpheroid_JupiterCallisto',
           'esriSRProjCS_KertauUTM_48N',
           'esriSRProjCS_Beijing1954_3_Degree_GK_CM_102E',
           'esriShapeExportStripNormals',
           'esriSRProjCS_ELD1979_Libya_8',
           'esriSRProjCS_ELD1979_Libya_9',
           'E_GEOMETRY_SEGMENTGRAPH_CONSTRUCTERROR', 'IDatumEdit',
           'esriSRDatum_Struve1860', 'esriSRSpheroid_JupiterThebe',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Lake_of_the_Woods_South_Meters',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaLacQuiParle',
           'ICompositeGeoTransformation',
           'esriSRProjCS_WGS84ARC_SystemZone1',
           'esriSRGeoCS_Astro1952', 'esriSRParameter_LongitudeOf1st',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaCookNorth',
           'esriSRProjCS_World_Cassini',
           'esriSRProjCS_NAD1983HARNSPCS_WINorth',
           'esriSRGeoTransformation_Lisbon_Lisbon_To_Lisbon',
           'esriCurveDensifyMethod',
           'esriSRProjCS_NAD1983SPCS_TXNorthCentral',
           'esriSRVertCS_NGF_Lallemand',
           'esriSRSpheroid_GRS1980Adj_MinnesotaStLouisCentral',
           'esriSRGeoTransformation_DHDN_To_WGS_1984_7x',
           'esriSRGeoCS_EverestBangladesh',
           'esriDefaultCurveExtension',
           'esriSRProjCS_Pulkovo1995GK_7N',
           'esriConstructOffsetSimplifyEnum',
           'esriSRSpheroid_JupiterSinope', 'esriSRDatum_GRS1967',
           'esriSRGeoTransformation_ED1950_To_WGS1984_12',
           'esriSRGeoCS_Lao1997', 'esriSRGeoCS_Lao1993',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Rock_Feet',
           'esriSRProjCS_NAD1927SPCS_NENorth',
           'esriSRGeoTransformation_ED1950_To_WGS1984_17',
           'esriSRGeoTransformation_NZGD1949_To_NZGD2000_3_NTv2',
           'esriSRProjCS_NAD1983HARN_WISCRSJuneauM',
           'esriSRProjCS_NAD1983SPCS_NYCentralFT',
           'esriSRProjCS_Beijing1954GK_22N', 'esriSRDatum_Korea2000',
           'esriSRDatum_JupiterLysithea',
           'esriSRGeoTransformation_Korea_2000_To_WGS_1984_1',
           'ILinearUnit', 'esriSRGeoCS_Indian1954',
           'esriSRProjCS_NAD1927SPCS_MNCentral',
           'esriSRVertCS_Baltic', 'esriSRProjCS_MGI_M34',
           'esriSRProjCS_NAD1983SPCS_ORSouth', 'esriSRProjCS_MGI_M31',
           'esriSRGeoTransformation_Pulkovo_1942_To_WGS_1984_13',
           'esriSRGeoTransformation_Pulkovo_1942_To_WGS_1984_14',
           'esriSRGeoTransformation_Pulkovo_1942_To_WGS_1984_15',
           'esriSRGeoTransformation_Pulkovo_1942_To_WGS_1984_16',
           'esriSRProjCS_Indonesia1974UTM_48N',
           'esriSRDatum_IGNAstro1960',
           'esriSRGeoTransformation_Australian_Antarctic_1998_To_WGS_1984_1',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaLake_of_theWoodsSouth',
           'esriSRSpheroid_Neptune', 'esriSRUnit_ArcMinute',
           'esriSRProjCS_NAD1983HARNSPCS_MSWest',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Wood_Meters',
           'esriShapeExportTrueNaNs',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Waukesha_Meters',
           'esriSRVertDatum_NGVD1929',
           'esriSRSpheroid_UranusDesdemona',
           'esriSRGeoTransformation_ObservMeteor1939_To_WGS1984_1',
           'esriSRSpheroid_GRS1980Adj_MinnesotaBrown',
           'esriSRProjCS_NAD1983SPCS_TXCentral',
           'esriSRProjCS_NZGD1949_Bay_of_Plenty_Circuit',
           'esriSRGeoCS_Clarke1866Michigan',
           'esriSRGeoCS_JupiterThebe', 'esriShapeExportNoCompress',
           'esriSRGeoTransformation_S_JTSK_Ferro_To_S_JTSK',
           'esriSRProjCS_WGS1972UTM_17S',
           'esriSRProjCS_WGS1972UTM_17N',
           'esriSRProjCS_NAD1927SPCS_LASouth',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Faribault_Feet',
           'esriSRProjCS_PSADUTM_22S',
           'esriSRProjCS_NAD1983HARNSPCS_NDSouth',
           'esriShapeExportDistanceDensify', 'esriShapePolyline',
           'esriSRSpheroid_Mars2000', 'esriSRProjCS_SWEREF99_20_15',
           'esriSRGeoTransformation_Lisboa_Hayford_To_Datum_73_1',
           'esriSRGeoTransformation_Lisboa_Hayford_To_Datum_73_2',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaTraverse',
           'esriSRGeoCS_Bern1898Bern', 'esriOriginalSegmentMapping',
           'esriSRGeoTransformation_NGO1948_To_WGS1984',
           'esriSRGeoTransformation_Amersfoort_To_ETRS_1989_mb',
           'esriSRVertCS_NGC1948',
           'esriSRGeoTransformation_NAD_1983_HARN_To_NAD_1983_NSRS2007_1',
           'esriSpatialRelationExEnum', 'esriSRDatum_NEA74Noumea',
           'esriSRGeoCS_NAD1983HARN',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaMower',
           'esriSRProjCS_Pulkovo1995GK_29', 'ISpatialIndex',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Barron_Feet',
           'esriSRProjCS_Pulkovo1995GK_25',
           'esriSRVertDatum_St_Kilda',
           'esriSRGeoTransformation_Malongo_1987_To_WGS_1984_2',
           'esriSRGeoTransformation_Malongo_1987_To_WGS_1984_3',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaItascaSouth',
           'esriSRProjCS_Pulkovo1995GK_21',
           'esriSRGeoCS_JupiterCallisto',
           'esriSRProjCS_NAD1983_StatePlane_Kentucky_FIPS_1600_Feet',
           'esriSpatialRelationLineCoincidence',
           'esriSRProjCS_Xian1980_GK_CM_99E',
           'esriSRProjCS_EUREF_FIN_TM35FIN',
           'esriSRGeoCS_HongKong1980', 'esriSRProjCS_RT90_25_gon_O',
           'esriSRProjCS_NAD1983HARN_SPCSMinnesotaSouth_USFeet',
           'esriGeometryUpdateMEnum',
           'esriSRProjCS_NAD1983_StatePlane_Arizona_Central_FIPS_0202_Feet_Intl',
           'esriSRSpheroid_GRS1980Adj_MinnesotaBlueEarth',
           'IProximityOperator',
           'esriSRGeoTransformation_POSGAR_1994_To_WGS_1984_1',
           'esriSRSpheroid_SaturnCalypso',
           'esriSRGeoTransformation_ATS_1977_To_NAD_1983_CSRS98_NTv2_NewBrunswick',
           'esriSRProjCS_Xian1980_GK_CM_123E',
           'esriSRGeoTransformation_OldHawaiian_TO_NAD_1983',
           'esriSRProjCS_CSG1967_UTM_22N', 'esriSRGeoCS_Hanoi1972',
           'SegmentGraph', 'esriNoExtendAtTo', 'esriSRDatum_GDA1994',
           'esriSRProjCS_SouthAmerican1969UTM_18N',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Forest_Feet',
           'esriSRGeoCS_RT38',
           'esriSRProjCS_Karbala1979Polsvc_UTMZone39N',
           'esriSRProjCS_SouthAmerican1969UTM_18S',
           'esriSRProjCS_TeteUTM_36S',
           'esriSRProjCS_Pulkovo1995GK_28N',
           'esriSRGeoCS_AutralianAntarctic1998',
           'esriSRGeoCS_StLawrenceIsland',
           'esriSRDatum_NordSahara1959', 'esriSRHorizon_Polygon',
           'esriSRGeoCS_Roma1940',
           'esriSRProjCS_NAD1983SPCS_ILEastFT',
           'esriSRProjCS_WGS1984UTM_48S',
           'esriSRProjCS_NAD1983HARN_WISCRSRuskFtUS',
           'esriSRVertDatum_HongKongChartDatum',
           'esriSRGeoTransformation_OSGB1936_To_WGS1984_5',
           'esriSRGeoTransformation_OSGB1936_To_WGS1984_4',
           'esriSRGeoTransformation_OSGB1936_To_WGS1984_3',
           'esriSRGeoTransformation_NEA74_Noumea_To_WGS_1984_1',
           'esriSRGeoTransformation_NEA74_Noumea_To_WGS_1984_2',
           'esriSRProjCS_WGS1984UTM_48N', 'esriSRUnit_Gon',
           'esriSRProjCS_NAD1983SPCS_DE',
           'esriSRProjCS_NAD1983TexasCentricMappingSystemLambert',
           'esriSRProjection_Mollweide',
           'esriSRProjCS_SIRGAS2000UTMZone22N',
           'esriSRProjCS_SIRGAS2000UTMZone22S',
           'esriSRGeoCS_SaturnEpimetheus',
           'esriSRSpheroid_GRS1980Adj_MinnesotaFillmore',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Murray_Meters',
           'esriSRProjCS_ETRS1989_UTM_Zone_36N',
           'esriSRProjCS_NAD1983HARN_WISCRSRichlandFtUS',
           'esriSRProjCS_NAD1983StatsCanadaLambert',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Hennepin_Meters',
           'esriSRProjCS_NAD1983HARNSPCS_NVCentral',
           'esriSRProjCS_IGN53_Mare_UTM_58S', 'esriSRDatum_Bissau',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_93E',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_24E',
           'esriSRDatum_UranusUmbriel',
           'esriSRProjCS_RGNC1991_93_UTMZone59S',
           'esriSRProjCS_NAD1983SPCS_MEEast',
           'esriSRProjCS_NAD1983HARN_WISCRSMonroeFtUS',
           'esriSRProjCS_MerchichSaharaNord',
           'esriSRProjCS_NAD1983SPCS_UTCentral',
           'esriSRGeoTransformation_Porto_Santo_1936_To_WGS_1984_1',
           'IConversionMGRS', 'E_SPATIALREFERENCE_INVALID_JSON_SR',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Mille_Lacs_Feet',
           'esriSRGeoCS_International1967',
           'esriSRSpheroid_GRS1980Adj_WisconsinCrawford',
           'S_GEOMETRY_PROJECTION_HINT_CLIP_GCS_ONLY',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Dunn_Meters',
           'esriSRDatum_SouthYemen',
           'esriSRProjCS_NAD1983SPCS_MNCentral',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaSwift', 'IDatum',
           'esriSRProjCS_ATS1977MTM_5NS',
           'esriSRGeoTransformation_POSGAR_1998_To_WGS_1984_1',
           'esriSRGeoTransformation_MGIFerro_To_WGS1984',
           'esriSRGeoTransformation_petrels_1972_To_WGS_1984_1',
           'esriSRGeoTransformation_Amersfoort_To_WGS1984_3',
           'esriSRProjCS_WGS1984UTM_26S',
           'esriSRProjCS_NAD1983CSRS_UTMZone22N',
           'esriSRSpheroid_WGS1966',
           'esriSRGeoTransformation_Douala_1948_To_WGS_1984_1',
           'ISpatialReferenceInfo', 'esriSRProjCS_NAD1927UTM_15N',
           'esriSRProjCS_MerchichSahara', 'esriSRVertCS_Foula',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaOlmsted', 'Spheroid',
           'esriSRLimitsEnum', 'esriSRDatum_JupiterCallisto',
           'esriSRProjCS_Kalianpur1880India_IIa',
           'esriSRProjCS_Kalianpur1880India_IIb',
           'esriSRGeoCS_CHTRF1995',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaStevens',
           'esriSRProjCS_NAD1983HARN_StatePlane_Colorado_North_FIPS_0501_Ft',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_171E',
           'esriSRGeoCS_PDO1993', 'esriSRGeoCS_Makassar',
           'esriPatchTypeRing', 'esriSRProjCS_Kalianpur1880India_III',
           'esriSRDatum_Jordan',
           'esriSRGeoTransformation_Estonia_1937_To_ETRS_1989',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinMarathon',
           'esriSRProjCS_WGS1972UTM_54S',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Wilkin_Feet',
           'esriSRProjCS_Hjorsey1955_UTM_Zone_26N',
           'esriSRGeoCS_Douala', 'esriSRProjCS_WGS1972UTM_54N',
           'esriSRProjCS_AustriaFerroWest', 'esriGeometryError',
           'IBufferConstruction', 'esriSRSpheroid_WarOffice',
           'esriSRProjCS_S_JTSK_Krovak_East_North', 'Ray',
           'esriSRDatum_ETRF1989', 'esriSRVertCS_IGLD1985',
           'esriSRProjCS_NAD1983HARNSPCS_NYEast',
           'esriProjectionHint', 'esriSRGeoCS_NeptuneGalatea',
           'esriSRGeoTransformation_RGNC_1991_93_To_WGS_1984_1',
           'esriSRGeoCS_VoirolUnifie1960Paris', 'IPointArray',
           'esriSRProjCS_NAD1983_Maine_2000_East_Zone',
           'esriShapeExtendedModifierMask',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Pine_Meters',
           'esriSRGeoTransformation_AGD_1966_To_GDA_1994_8',
           'esriSRProjCS_RGPFUTMZone8S', 'esriConstructDivideEnum',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_19',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_18',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_17',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_16',
           'esriSRProjCS_ETRS1989ETRS_GK20FIN',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_14',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_13',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_12',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_11',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_10',
           'esriSRVertCS_DangerIsland1950',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_72E',
           'esriSRDatum_Potsdam1983', 'E_GEOMETRY_UNIT_CONVERSION',
           'esriSRDatum_Lake', 'esriSRDatum_MHAST_Offshore',
           'esriSRVertDatum_YellowSea1956', 'esriSRDatum_LC5_1961',
           'esriSRProjCS_HongKong1980_UTM50N',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_63E',
           'esriSRProjCS_MGIAustriaLambert',
           'esriSRProjCS_NAD1983HARNSPCS_SDNorthFT',
           'esriSRGeoCS_ST71Belep', 'esriSRParameter_FalseNorthing',
           'esriSRGeoCS_TM75', 'esriSRDatum_GRS1980',
           'esriSRGeoTransformation_NAD_1983_To_NAD_1983_CSRS98_3',
           'esriSRGeoTransformation_NAD_1983_To_NAD_1983_CSRS98_2',
           'esriSRGeoTransformation_NAD_1983_To_NAD_1983_CSRS98_1',
           'esriSRPrimeM_Athens',
           'esriSRGeoTransformation_NAD_1983_To_NAD_1983_CSRS98_4',
           'esriSRSpheroid_GRS1980Adj_WisconsinDouglas',
           'esriSRGeoTransformation_FD_1958_To_WGS_1984_3',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Isanti_Feet',
           'esriGeoTransformationImplHandle',
           'esriSRProjCS_DGN1995_UTMZone49N',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaRice',
           'esriSRGeoTransformation_Camacupa_To_WGS1984_10',
           'E_GEOMETRY_TRANSFORMATION_UNDEFINED',
           'esriSRProjCS_DGN1995_UTMZone49S',
           'esriSRSpheroid_Struve1860', 'esriSRProjCS_BeduaramTM13NE',
           'esriSRProjCS_Kandawala_Ceylon_Belt_Meters',
           'esriSRProjCS_NZGD2000_North_Taieri_Circuit',
           'esriSRProjCS_Xian1980_3_Degree_GK_CM_123E',
           'esriSRProjCS_NAD1983SPCS_SDSouth',
           'esriSRProjCS_IGCB1955CongoTMZone12',
           'esriSRSpheroid_SaturnMimas',
           'esriSRProjCS_IGCB1955CongoTMZone14',
           'esriSpatialRelationWithin',
           'esriSpatialRelationIntersection',
           'esriSRGeoTransformation_Estonia_1937_To_WGS_1984_NGA',
           'esriSRProjCS_NAD1983HARN_WISCRSDaneM',
           'esriSRDatum_SaturnEnceladus',
           'esriSRProjCS_NZGD1949_Jacksons_Bay_Circuit',
           'esriSRGeoTransformation_ISN_1993_To_WGS_1984_1',
           'esriSRProjCS_NAD1927_UTM_Zone_60N',
           'esriSRProjCS_NAD1927_UTM_Zone_1N',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Renville_Feet', 'ICurve3',
           'esriSRParameter_YAxisTranslation',
           'esriSRGeoCS_Indian1975',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinShawano',
           'esriSRProjCS_GDA1994NSW_Lambert',
           'VerticalCoordinateSystem', 'IRelationResult',
           'esriSRGeoTransformation_ED1950_To_WGS1984_8',
           'esriSRProjCS_NGO1948Norway8',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaKanabec',
           'esriSRProjCS_NGO1948Norway5',
           'esriSRProjCS_NGO1948Norway4',
           'esriSRProjCS_NGO1948Norway7',
           'esriSRProjCS_NGO1948Norway6',
           'esriSRProjCS_NGO1948Norway1',
           'esriSRProjCS_NGO1948Norway3',
           'esriSRProjCS_NGO1948Norway2', 'esriSRDatum3Type',
           'esriSRDatum_Nahrwan1934',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Monroe_Feet',
           'esriSRProjCS_NZGD2000_Tuhirangi_Circuit',
           'ITransformation', 'esriSRProjCS_NAD1927_Cuba_Sur',
           'esriSRProjCS_WGS1972UTM_15S', 'esriSRGeoCS_CapeCanaveral',
           'esriSRProjCS_LakeMaracaibo_Grid_M1',
           'esriSRProjCS_LakeMaracaibo_Grid_M3',
           'esriSRGeoTransformation_Accra_To_WGS_1972_BE',
           'esriGeometryServerMessageCode_GetLengths2',
           'esriSRProjCS_Guernsey_Grid',
           'esriSRProjCS_WGS1972UTM_15N',
           'esriSRProjCS_JGD2000_Japan_Zone_13',
           'esriSRProjCS_JGD2000_Japan_Zone_12',
           'esriSRProjCS_JGD2000_Japan_Zone_11',
           'esriSRProjCS_JGD2000_Japan_Zone_10',
           'esriSRProjCS_JGD2000_Japan_Zone_17',
           'esriSRProjCS_JGD2000_Japan_Zone_16',
           'esriSRProjCS_JGD2000_Japan_Zone_15',
           'esriSRProjCS_JGD2000_Japan_Zone_14',
           'esriSRProjCS_EgyptExtendedPurpleBelt',
           'esriSRProjCS_JGD2000_Japan_Zone_19',
           'esriSRProjCS_JGD2000_Japan_Zone_18',
           'esriSRProjCS_PSADUTM_20N',
           'esriSRProjCS_Xian1980_3_Degree_GK_CM_105E',
           'esriSRProjCS_PSADUTM_20S',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinDodge',
           'esriSRGeoCS_Merchich', 'esriSRSpheroid_Venus2000',
           'esriSRProjCS_NigeriaMidBelt',
           'esriSRGeoTransformation_Fahud_To_WGS1984_2',
           'esriSRDatum_StVincent1945',
           'esriSRProjCS_ED1950EuropeLambert', 'esriSRDatum_Carthage',
           'esriSRGeoTransformation_NZGD_1949_To_WGS_1984_3_NTv2',
           'esriSRProjCS_NAD1983SPCS_PANorth',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Todd_Feet',
           'esriSRProjCS_RT38_0_gon',
           'esriSRProjCS_VN2000_UTMZone48N',
           'esriSRProjCS_NAD1983HARN_StatePlane_California_VI_FIPS_0406_Ft',
           'esriSRProjCS_NZGD1949_Wairarapa_Circuit',
           'esriSRProjCS_NAD1927SPCS_TXNorth',
           'CoordinateFrameTransformation', 'esriSRPrimeM_Jakarta',
           'esriSRGeoTransformation_Yoff_To_WGS_1972_1',
           'E_GEOMETRY_INCONSISTANT_DIMENSIONS',
           'esriSRGeoCS_PuertoRico', 'esriSRGeoCS_OSNI_1952',
           'esriSRProjCS_Xian1980_3_Degree_GK_CM_84E',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaMower',
           'esriSRProjCS_NAD1983HARN_Adj_WI_GreenLake_Meters',
           'esriSRGeoCS_Jupiter',
           'esriSRGeoTransformation_IGN63_Hiva_Oa_To_RGPF_1',
           'esriSRGeoTransformation_IGN63_Hiva_Oa_To_RGPF_2',
           'esriSRProjCS_KerguelanIsland1949UTMZone42S',
           'esriSRUnit_USsurveyInch',
           'esriSRProjCS_ED1950_ED77_UTM_39N',
           'esriSRGeoTransformation_LisaboaBessel_To_WGS1984_2',
           'esriSRGeoTransformation_LisaboaBessel_To_WGS1984_1',
           'esriSRProjCS_NAD1983_StatePlane_Arizona_West_FIPS_0203_Feet_Intl',
           'esriSRProjCS_NAD1983HARN_StatePlane_Idaho_West_FIPS_1103_Ft',
           'esriSRDatum_MonteMario',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Vernon_Meters',
           'esriSRSpheroid_GRS1980Adj_MinnesotaCassSouth',
           'esriSRVertDatum_IGN1988', 'esriSRVertDatum_IGN1989',
           'esriMNotMonotonic',
           'esriSRProjCS_Perroud1950_Terre_Adelie_Polar_Stereographic',
           'esriSRProjCS_NAD1927_Alaska_Albers_Meters',
           'IConstructMultiPatch',
           'esriSRGeoTransformation_Merchich_To_WGS1984',
           'esriGeometryServerMessageCode_ConstructBegin',
           'esriSRGeoCS_ATFParis',
           'esriSRDatum_NAD1983HARNAdj_WisconsinOconto',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_150E',
           'esriSRDatum_SaturnHelene', 'esriTransformForward',
           'esriSRGeoTransformation_NAD_1927_TO_NAD_1983_NTV2_Canada',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_105E',
           'esriSRProjCS_UWPP_1992', 'esriSRProjCS_WorldFuller',
           'esriSRProjCS_NAD1983SPCS_WYWestFT',
           'esriSRProjCS_Karbala1979Polsvc_UTMZone37N',
           'IMolodenskyBadekasTransformation',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaWinona',
           'esriSRProjCS_AGD1966AMG_53',
           'esriSRProjCS_NADMichSPCS_MINorth',
           'E_GEOMETRY_WRONG_RELATION_AND_TYPE',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Door_Feet',
           'esriSRDatum_SaturnTelesto',
           'esriSRSpheroid_GRS1980Adj_MinnesotaMartin',
           'esriSRProjCS_WGS84ARCSystemZone16',
           'esriSRProjCS_WGS84ARCSystemZone17',
           'esriSRVertDatum_IGLD1985',
           'esriSRProjCS_WGS84ARCSystemZone18',
           'esriSRVertCS_MalinHead',
           'esriSRProjCS_SIRGAS2000UTMZone20N',
           'esriSRGeoTransformation_NZGD1949_TO_NZGD2000_NTV2',
           'esriSRProjCS_Kalianpur1880India_IV',
           'esriSRGeoTransformation_Accra_To_WGS_1984',
           'esriShapeImportNoSwap',
           'esriSRProjCS_NAD1983HARN_WISCRSTrempealeauM',
           'esriSRProjCS_NAD1983HARNSPCS_MSEast',
           'esriSRProjCS_SIRGAS2000UTMZone20S', 'wkbMultiLinestring',
           'esriSRProjCS_EMEP_50KM_Grid',
           'esriSRProjCS_ETRS1989_UTM_Zone_34N',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_39',
           'esriSRProjCS_NAD1983HARN_StatePlane_New_York_East_FIPS_3101_Ft',
           'esriSRVertCS_HongKongPrincipalDatum',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_38',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Aitkin_Meters',
           'esriSRProjCS_NAD1983_CSRS98_UTM_Zone_12N',
           'esriSRSpheroid_NeptuneNereid', 'esriSRGeoCS_Midway1961',
           'esriSRProjCS_NAD1983HARN_StatePlane_Wisconsin_Central_FIPS_4802_Feet',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaRenville',
           'wkbByteOrder',
           'esriSRProjection_VerticalNearSidePerspective',
           'esriSRGeoCS_ITRF2005', 'esriSRParameter_Option',
           'IPartIDAware',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaCookNorth',
           'ISpatialIndex2', 'esriSRProjCS_NAD1983HARNSPCS_DE',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Buffalo_Feet',
           'esriSRDatum_NAD1983HARNAdj_MinnesotaMarshall',
           'IPointIDAware', 'esriShapeGeneralMultipoint',
           'esriSRSpheroid_GRS1980Adj_MinnesotaCarver',
           'E_GEOMETRY_NOPENDINGMOVETO',
           'esriSRSpheroid_SaturnEpimetheus',
           'esriSRProjCS_Kalianpur1962_UTM42N',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Burnett_Feet',
           'esriSRProjCS_NAD1983UTM_19N',
           'esriSRProjCS_NAD1983SPCS_MEEastFT',
           'esriSRProjCS_Greenland1996_UTMZone29N',
           'esriSRParameter_Z_CoordinateOfRotationOrigin',
           'esriSRProjCS_WGS1984UTM_20S',
           'esriSRGeoTransformation_NAD_1983_TO_HARN_FL',
           'esriSRParameter_LatitudeOfCenter', 'esriSRGeoCS_Greek',
           'esriSRProjCS_WGS1984UTM_20N', 'esriSRVertDatum_Foula',
           'esriSRVertCS_JapaneseStandardLevellingDatum',
           'esriSRGeoTransformation_HuTzuShan_To_WGS1984',
           'esriSRProjCS_NAD1927UTM_17N',
           'esriSRProjCS_Katanga1955KatangaTM', 'esriSRGeoCS_Uranus',
           'esriSRVertDatum_NGNC',
           'esriSRGeoTransformation_Malongo1987_To_WGS1984_1',
           'esriSRGeoTransformation_Estonia_1997_To_WGS_1984_1',
           'esriSRProjCS_Timbalai1948_RSO_Borneo_Chains',
           'esriSRProjCS_NAD1983HARNSPCS_TXCentral',
           'esriSRGeoTransformation_ED_1950_To_ETRS_1989_10',
           'esriSRProjCS_NAD1983SPCS_INEastFT', 'esriSRDatum_Point58',
           'esriSRProjCS_NAD1983SPCS_TNFT',
           'esriShapeGeneralMultiPatch',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Kandiyohi_Feet',
           'esriSRGeoCS_SelvagemGrande1938', 'ITextureAware',
           'esriSRSpheroid_GRS1980Adj_MinnesotaDakota',
           'esriSRProjCS_Corse', 'esriProjectionHintCheckPCSHorizon',
           'esriSRDatum_Rassadiran', 'esriSRProjection_Local',
           'esriSRProjCS_Pulkovo1942GK_30',
           'esriSRProjCS_NAD1983HARN_WISCRSSt_CroixM',
           'esriSRProjCS_NZGD1949_North_Taieri_Circuit',
           'esriSRSpheroid_GRS1980Adj_MinnesotaLacQuiParle',
           'esriExtendTangents', 'esriSRProjCS_WGS1984_SPoleGnomonic',
           'esriSRProjCS_ATS1977NewBrunswick',
           'esriSRProjCS_NAD1983SPCS_HI_5FT',
           'esriSRGeoTransformation_D48_To_WGS_1984_Zahodna_Slovenia',
           'esriSRGeoTransformation_Pulkovo1942_To_ETRS1989',
           'esriSRProjCS_NTFParis_LambertSudFrance',
           'esriSRProjCS_Beijing1954GK_15N',
           'esriSRProjCS_Fiji1986MapGrid',
           'esriSRDatum_ModifiedBessel',
           'esriSRDatum_NAD1983HARNAdj_WisconsinRock',
           'esriSRProjCS_Malongo1987UTM_32S',
           'esriProjectionImplHandle', 'esriTransformReverse',
           'esriSRGeoCS_SaturnMimas',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Vilas_Feet',
           'esriSRDatum_PDO1993',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_35',
           'esriSRProjCS_NAD1983HARNSPCS_MOWest',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_37',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_36',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_31',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_30',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_33',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_32',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_126E',
           'esriSRProjCS_Sphere_EckertII',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_38',
           'esriSRGeoCS_NZGD_2000', 'esriSRProjCS_Sphere_EckertIV',
           'esriSRProjCS_MalaysiaGDM2000BRS0',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinDouglas',
           'esriSRProjCS_NAD1983HARNSPCSNorthCarolina',
           'esriGeometryInterpolate',
           'esriSRSpheroid_AuthalicSphere_Intl1924',
           'esriSRProjCS_NAD1927_Georgia_Statewide_Albers',
           'esriSRDatum_TM75',
           'esriGeometryServerMessageCode_GetLengths',
           'esriNonSimpleDiscontinuousParts', 'esriSRDatum_TheMoon',
           'esriSRUnit_Indian1975Yard',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Chippewa_Feet',
           'esriSRVertCS_FairIsle',
           'esriSRGeoTransformation_NAD_1983_CSRS98_To_WGS_1984_1',
           'esriSRGeoTransformation_NAD_1983_CSRS98_To_WGS_1984_2',
           'esriSRGeoTransformation_AGD66_TO_GDA94_NTV2_Tasmania',
           'IRelationalOperator2',
           'esriGeometryServerMessageCode_GetAreasAndLengths2',
           'esriSRProjCS_IGN63HivaOaUTMZone7S',
           'esriSRGeoTransformation_Lao_1993_To_Lao_1997_1',
           'esriSRProjCS_NAD1983HARNSPCSPennsylvaniaNorthUSFt',
           'esriSRProjCS_NAD1983HARNSPCS_WYWest',
           'esriSRProjCS_NAD1983HARN_StatePlane_Connecticut_FIPS_0600_Ft',
           'esriSRProjCS_Ain_el_Abd_Aramco_Lambert',
           'esriSRGeoTransformation_Schwarzeck_To_WGS1984',
           'esriSRSpheroid_GRS1980Adj_MinnesotaWatonwan',
           'esriSRProjCS_NAD1983SPCS_UTCentralFT',
           'esriGeodeticTypeLoxodrome',
           'esriSRGeoTransformation_IGN56_Lifou_To_WGS_1984_3',
           'esriSRGeoTransformation_IGN56_Lifou_To_WGS_1984_2',
           'esriSRGeoTransformation_IGN56_Lifou_To_WGS_1984_1',
           'esriSRProjCS_TM75_Irish_Grid',
           'esriSRGeoCS_Hermannskogel',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Outagamie_Feet',
           'esriSRProjCS_AGD1966_ACT_Grid_AGC_Zone',
           'esriSRProjCS_NZGD2000_Karamea_Circuit',
           'esriSRProjCS_Sphere_GallStereographic',
           'esriSRGeoTransformation_Nouakchott_1965_To_WGS_1984',
           'esriSRSpheroid_GRS1980Adj_MinnesotaMahnomen',
           'esriSRVertDatum_Martinique1955',
           'esriSRProjCS_Greenland1996_UTMZone19N',
           'IFunctionalSurface3',
           'esriSRGeoTransformation_Batavia_To_WGS1984',
           'esriSRDatum_MountDillon', 'esriSRDatum_Reunion',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Pepin_Feet',
           'esriSRGeoCS_IERSTerrestrialReferenceFrame2000',
           'esriSRProjCS_BritishNationalGrid',
           'esriSRProjCS_NAD1983SPCS_CAVFT',
           'esriSRGeoTransformation_JAD_2001_To_WGS_1984',
           'esriSRDatum_Estonia1937', 'esriSRSpheroid_SaturnHelene',
           'esriSRProjCS_WGS1984BLMZone14NftUS',
           'esriSRSpheroid_GRS1980Adj_MinnesotaDouglas',
           'esriSRProjCS_Beijing1954GK_13',
           'esriSRProjCS_Beijing1954GK_14',
           'esriSRProjCS_Beijing1954GK_15',
           'esriSRProjCS_Beijing1954GK_16',
           'esriSRProjCS_Beijing1954GK_17',
           'esriSRProjCS_Beijing1954GK_18',
           'esriSRProjCS_Beijing1954GK_19', 'IGeometryEnvironment3',
           'esriSRDatum_KKJ', 'IGeometryEnvironment4',
           'esriSRDatum_Moznet',
           'esriSRGeoTransformation_Hungarian1972_To_ETRF1989_1',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinGrant',
           'esriSRProjCS_NAD1983HARN_StatePlane_Florida_East_FIPS_0901_Ft',
           'ITransformation3D',
           'esriSRProjCS_Palestine1923PalestineBelt',
           'esriSRProjCS_WGS1972UTM_13S', 'Line',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaBenton',
           'esriSRVertDatum_Belfast',
           'esriSRProjCS_NAD1983HARN_WISCRSPolkFtUS',
           'esriSRProjCS_Mauritania1999UTMZone28N',
           'esriSRParameterType',
           'esriSRProjCS_NAD1983HARNSPCS_NMWest',
           'esriSRGeoTransformation_AGD_1984_To_WGS_1984_8',
           'esriSRGeoTransformation_AGD_1984_To_WGS_1984_7',
           'E_GEOMETRY_NOT_ID_AWARE',
           'esriSRProjCS_NAD1983SPCS_MNSouthFT',
           'esriSRProjCS_NAD1983HARNSPCS_LANorthFT',
           'esriSRDatum_Airy1830', 'esriSRUnit_SearsYard',
           'esriSRParameter_LatitudeOf2nd', 'esriSRGeoCS_Pohnpei',
           'esriShapeHasMaterials', 'ISpheroid',
           'esriSRVertCS_MSL_depth',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Lake_Feet',
           'esriSRSpheroid_NeptuneTriton',
           'esriSRGeoCS_NAD1983HARNAdj_WisconsinPepin',
           'esriSRGeoCS_MAGNA', 'esriSRDatum_NAD1983HARN',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Dakota_Meters',
           'esriSRProjCS_SJTSK_KROVAK', 'esriSRHorizonType',
           'esriSRProjCS_ETRS1989ETRS_GK25FIN',
           'esriSRProjCS_NAD1983SPCS_COSouthFT', 'esriSRVertCS_NGPF',
           'esriSRProjCS_NAD1927MichiganGeoRef',
           'esriSRProjCS_ETRS1989_UWPP_2000_PAS_8',
           'esriPatchTypeInnerRing',
           'esriSRProjCS_ETRS1989_UWPP_2000_PAS_6',
           'esriSRProjCS_DGN1995IndonesiaTM3Zone48_1',
           'esriSRProjCS_DGN1995IndonesiaTM3Zone48_2',
           'esriSRProjCS_ETRS1989_UWPP_2000_PAS_7',
           'esriSRProjCS_ETRS1989_UWPP_2000_PAS_5',
           'esriSRGeoCS_Piton_des_Neiges', 'esriSRPrimeM_Ferro',
           'esriSRProjCS_NAD1927Def1976MTM_9',
           'esriSRProjCS_NAD1927Def1976MTM_8',
           'esriSRProjCS_TheWorldFromSpace',
           'esriSRGeoCS_Clarke1866AuthalicSphere',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Shawano_Feet',
           'esriSRDatum_Tristan1968',
           'esriSRGeoTransformation_Tahiti1952_To_WGS1984_1',
           'esriSRGeoCS_NAD1927Def1976',
           'esriSRGeoCS_SouthAsiaSingapore',
           'esriSRGeoTransformation_SWEREF99_To_RT90',
           'esriSRProjCS_World_Loximuthal',
           'esriSRGeoTransformation_Palestine_1923_To_Israel_1',
           'esriSRProjCS_World_EckertVI', 'esriSRDatum_ST87Ouvea',
           'esriSRProjCS_NAD1983SPCS_INWest',
           'esriSRDatum_NAD1983HARNAdj_WisconsinGreenLafayette',
           'esriSRDatum_Manoca1962', 'SegmentOverlapStaggered',
           'esriSRProjCS_FranceIV', 'esriSRProjCS_WGS1984UTM_19S',
           'esriSRProjCS_WGS1984UTM_44S', 'esriSRProjCS_NordFrance',
           'esriSRDatum_NAD1983HARNAdj_WisconsinDunn',
           'esriSRProjCS_NAD1983HARNSPCS_NYLongIsland',
           'esriSRProjCS_WGS1984UTM_19N',
           'esriSRProjCS_WGS1984UTM_44N', 'esriSRProjCS_FranceII',
           'esriSRProjCS_NAD1983HARNSPCS_SDSouth',
           'esriSRProjCS_NAD1983SPCS_WINorthFT',
           'esriSRProjCS_PRS1992PhilippinesZoneI', 'IPolygon',
           'esriSRProjCS_NEA74NoumeaLambert2',
           'esriSRProjCS_PRS1992PhilippinesZoneV',
           'esriSRSpheroid_GRS1980Adj_WisconsinJackson',
           'esriAttributeNormal', 'esriSRProjCS_ED1950_TM36',
           'esriSRProjCS_WGS1984PDCMercator',
           'esriSRProjCS_ED1950_TM30', 'S_GEOMETRY_DEGENERATE',
           'esriSRProjCS_ED1950_TM39',
           'esriSRProjCS_NAD1983HARN_WISCRSRockM',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaKandiyohi',
           'esriSRVertCS_MSL_height',
           'esriSRProjCS_NAD1983HARN_WISCRSWashburnFtUS',
           'esriSegmentType',
           'esriSRGeoTransformation_Nahrwan_1967_To_WGS_1984_8',
           'esriSRGeoTransformation_Nahrwan_1967_To_WGS_1984_9',
           'esriSRGeoTransformation_Nahrwan_1967_To_WGS_1984_6',
           'esriSRGeoTransformation_Nahrwan_1967_To_WGS_1984_7',
           'esriSRGeoTransformation_Nahrwan_1967_To_WGS_1984_4',
           'esriSRGeoTransformation_Nahrwan_1967_To_WGS_1984_5',
           'esriSRProjCS_PSADUTM_21N', 'Parameter',
           'esriSRProjCS_NAD1983HARN_StatePlane_Hawaii_2_FIPS_5102_Feet',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Columbia_Feet',
           'esriSRGeoCS_S_JTSK', 'esriSRGeoCS_CorregoAlegre',
           'esriSRGeoTransformation_DHDN_To_ETRS_1989_7',
           'esriSRParameter_X_CoordinateOfRotationOrigin',
           'esriSRProjCS_NAD1983HARN_UTM_Zone_4N',
           'esriSRParameter_CentralParallel',
           'esriSRSpheroid_SaturnIapetus',
           'E_GEOMETRY_PART_ZS_ARE_NAN',
           'esriSRProjCS_ELD1979_TM_12_NE',
           'esriSRProjCS_NAD1927SPCS_WVSouth',
           'E_SPATIALREFERENCE_INSUFFICIENTPRECISION',
           'esriSRProjCS_WGS1984UTM_22N',
           'esriSRProjCS_NAD1983SPCS_OKNorthFT',
           'esriSRProjCS_AdindanUTMZone36N',
           'esriSRProjCS_ST87_Ouvea_UTM_58S', 'esriArcClockwise',
           'esriSRProjCS_WGS1984UTM_22S',
           'esriGeometryServerMessageCode_InvalidLicense',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_168W',
           'esriSRDatum_SaturnPandora', 'ILine3', 'ILine2',
           'esriShapePolygonM', 'ISpatialReferenceFactory3',
           'ISpatialReferenceFactory2', 'ISpatialReferenceFactory5',
           'ISpatialReferenceFactory4',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Kewaunee_Feet',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_168E',
           'esriSRProjCS_LakeMaracaibo_La_Rosa_Grid',
           'esriShapePolygonZ', 'esriSRGeoCS_Camacupa',
           'esriSRProjCS_NAD1983SPCS_HI_2FT',
           'esriSRGeoTransformation_ATS_1977_To_NAD_1983_CSRS98_NTv2_Maritimes',
           'esriSRGeoCS_UranusRosalind', 'E_GEOMETRY_INVALIDCOUNT',
           'esriSRVertDatum_DangerIsland1950',
           'esriSRSpheroid_GRS1980Adj_MinnesotaTraverse',
           'esriSRProjCS_WGS1984S_PoleLambertAzi',
           'esriSRProjCS_WGS1972UTM_58S',
           'esriSRProjCS_NAD1983HARN_WISCRSColumbiaFtUS',
           'E_GEOMETRY_INCONSISTANT_PARAMS', 'IGeometryArray',
           'esriSRProjCS_WGS1972UTM_58N',
           'esriSRGeoCS_JupiterPasiphae',
           'esriSRGeoTransformation_ISTS_061_1968_To_WGS_1984',
           'esriSRProjCS_NAD1927_10TM_AEP_Forest', 'PrimeMeridian',
           'esriSRGeoTransformation_StKitts1955_To_WGS1984',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaCrowWing',
           'esriSRProjCS_NZGD2000_Lindis_Peak_Circuit',
           'esriSRVertDatum_KOCWellDatum', 'esriSRSpheroid_NWL10D',
           'esriSRGeoCS_EverestAdj1937',
           'esriSRProjCS_South_Yemen_GK_Zone_8',
           'esriSRProjCS_Nahrwan1967UTM_39N',
           'esriSRProjCS_ETRS1989GuernseyGrid',
           'esriSRProjCS_NAD1983HARN_WISCRSDoorM',
           'esriSRGeoTransformation_Karbala_1979_Polservice_To_WGS_1984_1',
           'esriSRGeoTransformation_NAD_1927_To_NAD_1983_CSRS98_1',
           'esriSRGeoTransformation_NAD_1927_To_NAD_1983_CSRS98_2',
           'esriExtrapolateBefore', 'IGeometry',
           'esriSRGeoCS_Vientiane1982', 'esriSRDatum_JupiterGanymede',
           'E_GEOMETRY_WRONGTYPE',
           'esriSRGeoTransformation_Jamaica_1969_To_WGS_1972_2',
           'IZ2',
           'esriSRGeoTransformation_Jamaica_1969_To_WGS_1972_1',
           'esriSRProjCS_Locodjo1965UTM_30N',
           'esriSRProjCS_Beijing1954GK_17N',
           'esriSRProjCS_NAD1983HARN_WISCRSWinnebagoFtUS',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Price_Feet',
           'esriSRProjCS_Beijing1954_3_Degree_GK_Zone_34',
           'esriNoExtendAtFrom', 'IRelationResultArray',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_53',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_52',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_51',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_50',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_57',
           'esriSRGeoTransformation_Bogota_To_WGS_1984_region_3_CF',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_55',
           'E_SPATIALREFERENCE_EMPTYUNIT',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_59',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_58',
           'esriSRGeoCS_BogotaBogota',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_120E',
           'esriSRGeoTransformation_Tern_Island_1961_To_WGS_1984',
           'esriSRVertDatum_SNN76', 'esriSRGeoCS_MountDillon',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Watonwan_Feet',
           'esriSRProjCS_NAD1983SPCS_NDNorthFT',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_28',
           'esriSRSpheroid_UranusPuck',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_22',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_23',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_20',
           'esriSRDatum_Kalianpur1880',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_26',
           'esriSRProjCS_NAD1983HARN_WISCRSWinnebagoM',
           'esriSRGeoCS_NZGD1949',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_25',
           'esriSRProjCS_SIRGAS_UTM_Zone_21S',
           'esriSRProjCS_Sphere_Mercator',
           'esriSRGeoTransformation_NAD1927_To_WGS1984_12',
           'esriSRGeoCS_IRENET95', 'IVolume',
           'esriSRProjCS_NAD1927CGQ77UTM_20N',
           'esriSRDatum_UranusMiranda',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_96E',
           'esriSRGeoTransformation_NAD1927_To_WGS1984_15',
           'esriSRProjCS_NAD1927SPCS_COCentral',
           'esriSRProjCS_NAD1983HARN_WISCRSEauClaireFtUS',
           'esriSRGeoTransformation_FD_1954_To_ED_1950_1',
           'ISpatialReferenceSingletonManager',
           'esriSRProjCS_NAD1927SPCS_WYWest',
           'esriSRProjCS_S_JTSK_Krovak',
           'esriSRProjCS_NAD1983HARN_WISCRSMenomineeM',
           'esriSRProjCS_MGIFerro_AustriaGKWest',
           'esriSRProjCS_NAD1983HARNSPCS_TXNorthCentral',
           'esriSRProjCS_NAD1983HARN_WISCRSFlorenceFtUS',
           'esriSRGeoCS_Fahud',
           'esriSRProjCS_ObservMeteor1939_UTM25N',
           'esriSRProjCS_GDM2000Kedah_Perlis',
           'esriSRProjCS_PSAD1956_ICN_Regional',
           'esriSRVertDatum_NormaalAmsterdamsPeil',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaItascaSouth',
           'esriSRProjCS_K0_1949_UTM_42S',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Clearwater_Meters',
           'esriSRGeoCS_Tokyo', 'esriSRPole_IsPoint',
           'esriSRGeoCS_GRS1967', 'esriSRProjCS_Indian1954UTM_47N',
           'esriPatchTypeTriangles',
           'esriSRProjCS_WGS1984WebMercatorMajorAuxSphere',
           'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_69E',
           'esriSRProjCS_NAD1983HARN_WISCRSJeffersonM',
           'esriSRGeoTransformation_RGPF_To_WGS_1984_2',
           'esriSRGeoCS_EUREF_FIN',
           'esriSRGeoTransformation_RGPF_To_WGS_1984_1',
           'esriSRGeoCS_Everest1975', 'esriSRGeoCS_UranusOphelia',
           'esriSRProjCS_Naparima1972UTM_20N',
           'esriSRGeoTransformation_ED1950_To_WGS1984_4',
           'esriSRSpheroidType', 'S_GEOMETRY_EMPTY_GEOMETRY',
           'esriShapeExportFlags', 'esriSRDatum_ObservMeteor1939',
           'esriSRDatum_NAD1983HARNAdj_WisconsinGrant',
           'esriSRGeoCS_Bogota',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaBrown',
           'esriSRGeoCS_S_42Hungary',
           'esriSRDatum_NAD1983HARNAdj_WisconsinRusk',
           'esriSRProjCS_NAD1983SPCS_WISouthFT',
           'esriSRProjCS_World_HammerAitoff', 'esriSRDatum_SAD1969',
           'esriSRProjCS_NAD1983CSRS_UTMZone10N',
           'esriSRProjCS_WGS1972UTM_11N',
           'esriSRProjCS_WGS1972UTM_44N',
           'esriSRProjCS_RGF1993_Lambert93',
           'esriSRProjCS_WGS1972UTM_44S',
           'esriSRProjCS_WGS1972UTM_11S',
           'esriSRGeoTransformation_NAD_1983_HARN_PACP00_MARP00_To_WGS_1984',
           'esriGeometryServerMessageCode_Cut',
           'esriSRProjCS_Helle1954_Jan_Mayen_Grid',
           'esriSRProjection_Times', 'esriSRDatum_KoreanDatum1995',
           'esriSRGeoCS_HuTzuShan',
           'esriSRProjCS_NZGD2000_Hokitika_Circuit',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_114E',
           'esriSRGeoCS_JupiterHimalia',
           'esriSRProjCS_Abidjan1987UTM_30N',
           'esriSRGeoTransformation_Le_Pouce_1934_To_WGS_1984_1',
           'esriSRProjCS_RT90_25_gon_W', 'esriSRProjCS_RT90_25_gon_V',
           'esriSRGeoCS_Cape',
           'esriSRGeoTransformation_ED1950_To_ED1987_2',
           'esriSRProjCS_NAD1983HARNSPCS_COSouth',
           'esriSRProjCS_NAD1983HARN_WISCRSOutagamieFtUS',
           'esriSRVertDatum_IGLD1955', 'esriSRVertCS_IGN1987',
           'esriSRGeoTransformation_Pulkovo1942_To_WGS1984_7',
           'esriSRProjCS_NAD1983SPCS_IDWest', 'esriSRVertCS_IGN1988',
           'esriSRVertCS_IGN1989',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Wadena_Feet',
           'esriShapeExportStripTextures',
           'esriSRProjCS_LKS1994LithuaniaTM',
           'esriSRSpheroid_JupiterEuropa',
           'esriSRProjCS_NAD1983HARNSPCS_NHFT',
           'esriSRDatum_Fiji1956',
           'esriSRGeoTransformation_Mhast_To_WGS1984_1',
           'esriSRDatum_MPoraloko', 'esriSRProjCS_NorddeGuerre',
           'esriSRDatum_FortMarigot',
           'esriSRGeoTransformation_Camacupa_To_WGS1972BE_1',
           'esriSRGeoTransformation_Pulkovo_1942_adj_1958_To_WGS_1984_1',
           'esriSRProjCS_NAD1983SPCS_KSNorthFT',
           'esriSRDatum_SierraLeone1924',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Pepin_Meters',
           'esriSRProjCS_D48SloveniaTM',
           'esriSRGeoTransformation_Monte_Mario_Rome_To_WGS_1984',
           'esriSRGeoCS_Nahrwan1967',
           'E_GEOMETRY_RELATIONSYNTAXERROR',
           'esriSRProjCS_NAD1927SPCS_WINorth',
           'esriSRProjCS_NAD1983HARN_WISCRSMonroeM', 'IZCollection',
           'E_GEOMETRY_EMPTYGEOMETRY',
           'esriSRProjCS_NAD1983HARNSPCSPennsylvaniaNorth',
           'esriSRUnit_Benoit1895A_Chain', 'esriSRDatum_Chua',
           'esriSRParameter_NameDataset', 'IAreaGeodetic',
           'E_GEOMETRY_BUFFERCONSTRUCTION_INUSE',
           'esriSRGeoCS_VanuaLevu1915', 'esriSRVertCS_AIOC95depths',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Sherburne_Meters',
           'esriSRProjCS_Hanoi1972GK_19',
           'esriSRProjCS_Hanoi1972GK_18',
           'esriSRProjCS_Pulkovo1995GK_19N',
           'esriSRProjCS_AGD1966AMG_58', 'esriSRProjCS_AGD1966AMG_55',
           'esriSRProjCS_AGD1966AMG_54', 'esriSRProjCS_AGD1966AMG_57',
           'esriSRProjCS_AGD1966AMG_56', 'esriSRProjCS_AGD1966AMG_51',
           'esriSRProjCS_AGD1966AMG_50', 'esriSRUnit_Grad',
           'esriSRProjCS_AGD1966AMG_52',
           'esriSRDatum_NAD1983HARNAdj_WisconsinRichland',
           'MolodenskyTransformation',
           'esriSRSpheroid_GRS1980Adj_WisconsinGreenLafayette',
           'esriSRDatum_Antigua1943',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Columbia_Meters',
           'esriSRProjCS_NAD1983_CRS98_MTM_8',
           'esriSRGeoCS_Belge1950Brussels', 'esriSRDatum_LePouce1934',
           'E_GEOMETRY_INCONSISTANT_SPATIAL_REFERENCE',
           'E_GEOMETRY_NOTSIMPLE', 'Triangles',
           'esriSRProjCS_WGS1984UTM_42N',
           'esriSRProjCS_World_VanderGrintenI',
           'esriPrecisionImplHandle',
           'esriSRProjCS_JGD2000_UTM_Zone_54N',
           'esriSRGeoCS_Ayabelle', 'esriSRProjCS_WGS1984UTM_42S',
           'esriShapeNonBasicModifierMask',
           'esriSRProjCS_SIRGAS2000UTMZone24S',
           'esriSRProjCS_CorregoAlegreUTM_24S',
           'esriSRProjCS_NAD1983HARN_WISCRSVilasM',
           'esriSRGeoTransformation_PDO_1993_To_WGS_1984_3',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_144E',
           'esriSRProjCS_NAD1983SPCS_AK5FT',
           'esriSRGeoTransformation_Samoa_1962_To_WGS_1984',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Calumet_Meters',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Blue_Earth_Feet',
           'esriSRDatum_ReseauGeodesiqueNouvelleCaledonie1991',
           'IClassFactory',
           'esriSRSpheroid_GRS1980Adj_MinnesotaStearns',
           'esriSRDatum_NAD1983HARNAdj_WisconsinDouglas',
           'esriGeometryServerMessageCode_DensifyGeodesic',
           'esriSRDatum_NAD1983HARNAdj_WisconsinClark',
           'esriSRProjCS_NZGD1949NewZealandMapGrid',
           'esriSRProjCS_NAD1983HARN_SPCSMinnesotaNorth_USFeet',
           'esriSRProjCS_AGD1966_VICGRID',
           'esriSRGeoTransformation_Kalianpur1975_To_WGS1984_1',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Kanabec_Feet',
           'esriSRDatum_JupiterAmalthea',
           'esriSRProjCS_MGI_3_Degree_Gauss_Zone_8',
           'esriSRProjCS_NADMichSPCS_MISouth',
           'esriSRProjCS_Dabola_UTM_Zone_29N',
           'esriSRGeoTransformation_Greenland_1996_To_WGS_1984_1',
           'esriSRProjCS_NAD1983HARN_UTM_Zone_2S',
           'esriSRGeoTransformation_DHDN_To_ETRS_1989_2',
           'esriSRGeoTransformation_DHDN_To_ETRS_1989_3',
           'esriSRGeoTransformation_DHDN_To_ETRS_1989_6',
           'esriSRGeoTransformation_NAD_1983_To_HARN_NC',
           'esriSRGeoTransformation_DHDN_To_ETRS_1989_4',
           'esriSRGeoTransformation_DHDN_To_ETRS_1989_5',
           'esriSRGeoCS_Fiji1986',
           'esriSRGeoTransformation_Lao_1997_To_WGS_1984_1',
           'esriSRProjCS_ETRS1989_UTM_Zone_29N',
           'esriSRDatum_IGN56Lifou',
           'esriSRParameter_StandardParallel2',
           'esriSRProjCS_NAD1983HARN_Adj_MN_Goodhue_Meters',
           'esriSRParameter_StandardParallel1',
           'esriSRProjCS_NAD1983HARN_WISCRSIronM',
           'esriSRGeoTransformation_NAD1927_To_WGS1984_18',
           'esriSRGeoTransformation_Pulkovo1942_To_WGS1984_4',
           'esriSRGeoTransformation_Pulkovo1942_To_WGS1984_5',
           'esriSRGeoTransformation_NAD1927_To_WGS1984_10',
           'esriSRGeoTransformation_NAD1927_To_WGS1984_11',
           'esriSRUnit_Benoit1895A_Link',
           'esriSRGeoTransformation_NAD1927_To_WGS1984_13',
           'esriSRGeoTransformation_NAD1927_To_WGS1984_14',
           'esriSRGeoTransformation_Pulkovo1942_To_WGS1984_6',
           'esriSRGeoTransformation_NAD1927_To_WGS1984_16',
           'esriSRGeoTransformation_NAD1927_To_WGS1984_17',
           'esriSRProjCS_Argentina_7', 'Projection',
           'esriSRPrimeM_ReferenceMeridian',
           'esriSRProjCS_ELD1979_UTM_Zone_34N',
           'esriSRProjCS_AmericanSamoa1962_UTM_Zone_2S',
           'esriSRGeoTransformation_ED1950_To_WGS1984_9',
           'esriSRProjCS_NAD1983HARNSPCS_NVEastFT',
           'esriSRGeoTransformation_ED1950_To_WGS1984_7',
           'esriSRGeoTransformation_ED1950_To_WGS1984_6',
           'esriSRGeoTransformation_ED1950_To_WGS1984_5',
           'esriSRGeoTransformation_Pulkovo1942_To_WGS1984_3',
           'esriSRGeoTransformation_ED1950_To_WGS1984_3',
           'esriSRGeoTransformation_ED1950_To_WGS1984_2',
           'esriSRGeoTransformation_ED1950_To_WGS1984_1',
           'esriSRProjCS_NAD1983HARN_Adj_MN_St_Louis_South_Meters',
           'esriSRProjCS_NAD1927SPCS_CAVI',
           'esriSRProjCS_NAD1983N_AmericaAlbers',
           'esriSRProjCS_NAD1927SPCS_KSSouth', 'esriSRGeoCS_Tahaa',
           'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_33E',
           'esriSRVertDatum_Wellington',
           'esriSRSpheroid_GRS1980Adj_MinnesotaTodd',
           'esriSRSpheroid_SaturnPhoebe',
           'esriSRGeoTransformation_D48_To_ETRS_1989_Juzna_Slovenia',
           'esriSRProjCS_NAD1983HARN_Adj_WI_Ashland_Feet',
           'IGeometryEnvironment', 'esriSRProjCS_OldHawaiianUTM5N',
           'esriSRProjCS_NAD1983HARN_WISCRSPierceFtUS',
           'E_GEOMETRY_EDITED_REGIONS_OVERLAP',
           'esriSRGeoCS_NAD1983HARNAdj_MinnesotaOlmsted',
           'esriSRProjCS_SIRGAS_UTM_Zone_21N',
           'Geographic2DOffsetTransformation',
           'esriSRDatum_Everest1975',
           'esriSRProjCS_Moorea1987UTMZone6S',
           'esriSRDatum_BukitRimpah', 'esriSRProjCS_NAD1983SPCS_NJFT',
           'esriSRProjCS_Pulkovo1942GK_8N', 'esriGeometryRay',
           'esriSRProjCS_NAD1983SPCS_ORNorth', 'esriSRDatum_OSSN1980',
           'esriSRGeoCS_SaturnJanus']
from comtypes import _check_version; _check_version('501')
