import QtQuick.tooling 1.1

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -noinstantiate -nonrelocatable ArcGIS.Runtime 10.26'

Module {
    Component {
        name: "QmlAggregateFeatureIterator"
        prototype: "QmlFeatureIterator"
        exports: ["ArcGIS.Runtime/AggregateFeatureIterator 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "size"; type: "string"; isReadonly: true }
        Method { name: "next"; type: "QVariantMap" }
        Method { name: "hasNext"; type: "bool" }
        Method { name: "first"; type: "QVariantMap" }
        Method { name: "reset" }
        Method {
            name: "each"
            Parameter { name: "function"; type: "QJSValue" }
        }
    }
    Component {
        name: "QmlAngularUnit"
        prototype: "QmlUnit"
        exports: ["ArcGIS.Runtime/AngularUnit 10.26"]
        exportMetaObjectRevisions: [0]
        Method {
            name: "convertFromRadians"
            type: "double"
            Parameter { name: "radians"; type: "double" }
        }
        Method {
            name: "convertToRadians"
            type: "double"
            Parameter { name: "unitValue"; type: "double" }
        }
    }
    Component {
        name: "QmlArcGISDynamicMapServiceLayer"
        prototype: "QmlDynamicLayer"
        exports: ["ArcGIS.Runtime/ArcGISDynamicMapServiceLayer 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "url"; type: "string" }
        Property { name: "dynamicLayersSupported"; type: "bool"; isReadonly: true }
        Property { name: "isTimeAware"; type: "bool"; isReadonly: true }
        Property { name: "layers"; type: "QmlMapServiceLayerInfo"; isList: true; isReadonly: true }
        Property {
            name: "dynamicLayerInfos"
            type: "QmlDynamicLayerInfo"
            isList: true
            isReadonly: true
        }
        Property { name: "layerTimeOptions"; type: "QmlLayerTimeOptions"; isList: true; isReadonly: true }
        Property { name: "timeInfo"; type: "QmlTimeInfo"; isReadonly: true; isPointer: true }
        Property { name: "timeExtent"; type: "QmlTimeExtent"; isReadonly: true; isPointer: true }
        Property { name: "timeInterval"; type: "QmlTimeExtent"; isPointer: true }
        Method {
            name: "subLayerById"
            type: "QmlMapServiceLayerInfo*"
            Parameter { name: "layerId"; type: "int" }
        }
        Method {
            name: "subLayerByName"
            type: "QmlMapServiceLayerInfo*"
            Parameter { name: "layerName"; type: "string" }
        }
    }
    Component {
        name: "QmlArcGISFeatureLayer"
        defaultProperty: "graphics"
        prototype: "QmlGraphicsLayer"
        exports: ["ArcGIS.Runtime/ArcGISFeatureLayer 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "url"; type: "string" }
        Property { name: "layerDefinition"; type: "string" }
        Property { name: "credentials"; type: "QmlUserCredentials"; isPointer: true }
        Property { name: "featureCollection"; type: "QmlFeatureSet"; isPointer: true }
        Property { name: "renderingMode"; type: "QmlEnums::RenderingMode" }
        Property { name: "useAdvancedSymbology"; type: "bool" }
        Property { name: "bufferFactor"; type: "int" }
        Property { name: "definitionExpression"; type: "string" }
        Property { name: "isDefaultZEnabled"; type: "bool"; isReadonly: true }
        Property { name: "hasM"; type: "bool"; isReadonly: true }
        Property { name: "defaultZ"; type: "double"; isReadonly: true }
        Property { name: "isTable"; type: "bool"; isReadonly: true }
        Property { name: "isEditable"; type: "bool"; isReadonly: true }
        Property { name: "isAllowGeometryUpdates"; type: "bool"; isReadonly: true }
        Property { name: "isTimeAware"; type: "bool"; isReadonly: true }
        Property { name: "maxAllowableOffset"; type: "double" }
        Property { name: "timeInterval"; type: "QmlTimeExtent"; isPointer: true }
        Property { name: "timeExtent"; type: "QmlTimeExtent"; isReadonly: true; isPointer: true }
        Property { name: "timeInfo"; type: "QmlTimeInfo"; isReadonly: true; isPointer: true }
        Property { name: "outFields"; type: "QStringList" }
        Property { name: "geometryType"; type: "QmlEnums::GeometryType"; isReadonly: true }
        Property { name: "operationMode"; type: "QmlEnums::QueryMode" }
        Property { name: "displayField"; type: "string"; isReadonly: true }
        Property { name: "objectIdField"; type: "string"; isReadonly: true }
        Property { name: "typeIdField"; type: "string"; isReadonly: true }
        Property { name: "capabilities"; type: "string"; isReadonly: true }
        Property {
            name: "ownershipBasedAccessControlForFeatures"
            type: "QmlOwnershipBasedAccessControlForFeatures"
            isReadonly: true
            isPointer: true
        }
        Property { name: "fields"; type: "QmlField"; isList: true; isReadonly: true }
        Property { name: "types"; type: "QmlFeatureType"; isList: true; isReadonly: true }
        Property { name: "templates"; type: "QmlFeatureTemplate"; isList: true; isReadonly: true }
        Property { name: "relationships"; type: "QmlLayerRelationship"; isList: true; isReadonly: true }
        Property {
            name: "selectFeaturesStatus"
            type: "QmlEnums::SelectFeaturesStatus"
            isReadonly: true
        }
        Property {
            name: "queryFeaturesStatus"
            type: "QmlEnums::QueryFeaturesStatus"
            isReadonly: true
        }
        Property {
            name: "queryRelatedRecordsStatus"
            type: "QmlEnums::QueryRelatedRecordsStatus"
            isReadonly: true
        }
        Property {
            name: "selectFeaturesResult"
            type: "QmlFeatureSet"
            isReadonly: true
            isPointer: true
        }
        Property { name: "queryFeaturesResult"; type: "QmlFeatureSet"; isReadonly: true; isPointer: true }
        Property {
            name: "queryRelatedRecordsResult"
            type: "QmlRelatedRecordSet"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "selectFeaturesError"
            type: "QmlServiceError"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "queryFeaturesError"
            type: "QmlServiceError"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "queryRelatedRecordsError"
            type: "QmlServiceError"
            isReadonly: true
            isPointer: true
        }
        Method { name: "refresh" }
        Method { name: "requery" }
        Method { name: "clearSelection" }
        Method { name: "clearFeatures" }
        Method {
            name: "setDynamicLayerInfo"
            Parameter { name: "dynamicLayerInfo"; type: "QmlDynamicLayerInfo"; isPointer: true }
        }
        Method {
            name: "createFeatureWithTemplate"
            type: "QmlGraphic*"
            Parameter { name: "featureTemplate"; type: "QmlFeatureTemplate"; isPointer: true }
            Parameter { name: "geometry"; type: "QmlGeometry"; isPointer: true }
        }
        Method {
            name: "createFeatureWithType"
            type: "QmlGraphic*"
            Parameter { name: "featureType"; type: "QmlFeatureType"; isPointer: true }
            Parameter { name: "geometry"; type: "QmlGeometry"; isPointer: true }
        }
        Method {
            name: "editCapabilities"
            type: "QmlEditCapabilities*"
            Parameter { name: "graphic"; type: "QVariant" }
        }
        Method { name: "editFieldsInfo"; type: "QmlEditFieldsInfo*" }
        Method {
            name: "editInfo"
            type: "QmlEditInfo*"
            Parameter { name: "graphic"; type: "QVariant" }
            Parameter { name: "actionType"; type: "QmlEnums::ActionType" }
        }
        Method { name: "selectedFeatures"; type: "QQmlListProperty<QmlGraphic>" }
        Method {
            name: "selectFeatures"
            Parameter { name: "query"; type: "QVariant" }
            Parameter { name: "selectionMethod"; type: "QmlEnums::SelectionMethod" }
        }
        Method {
            name: "queryFeatures"
            Parameter { name: "query"; type: "QVariant" }
        }
        Method {
            name: "queryRelatedRecords"
            Parameter { name: "objectIds"; type: "QList<int>" }
            Parameter { name: "relationshipId"; type: "int" }
            Parameter { name: "outFields"; type: "QStringList" }
            Parameter { name: "returnGeometry"; type: "bool" }
        }
        Method {
            name: "addSelectedGraphic"
            type: "int"
            Parameter { name: "graphic"; type: "QVariant" }
        }
    }
    Component {
        name: "QmlArcGISImageServiceLayer"
        prototype: "QmlDynamicLayer"
        exports: ["ArcGIS.Runtime/ArcGISImageServiceLayer 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "url"; type: "string" }
    }
    Component {
        name: "QmlArcGISLocalTiledLayer"
        prototype: "QmlLayer"
        exports: ["ArcGIS.Runtime/ArcGISLocalTiledLayer 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "path"; type: "string" }
        Property { name: "url"; type: "string" }
        Property { name: "brightness"; type: "float" }
        Property { name: "contrast"; type: "float" }
        Property { name: "gamma"; type: "float" }
    }
    Component {
        name: "QmlArcGISRuntime"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/ArcGISRuntime 10.26"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Property { name: "isInstallOK"; type: "bool"; isReadonly: true }
        Property { name: "doPost"; type: "bool" }
        Property { name: "installDirectory"; type: "string" }
        Property { name: "license"; type: "QmlLicense"; isReadonly: true; isPointer: true }
        Property {
            name: "identityManager"
            type: "QmlIdentityManager"
            isReadonly: true
            isPointer: true
        }
        Property { name: "geometryEngine"; type: "QmlGeometryEngine"; isReadonly: true; isPointer: true }
        Property {
            name: "coordinateConversion"
            type: "QmlCoordinateConversion"
            isReadonly: true
            isPointer: true
        }
        Property { name: "error"; type: "string"; isReadonly: true }
        Property { name: "loggingEnabled"; type: "bool" }
        Property { name: "version"; type: "string"; isReadonly: true }
        Method { name: "clearError" }
        Method {
            name: "createObject"
            type: "QObject*"
            Parameter { name: "typeName"; type: "string" }
            Parameter { name: "parameters"; type: "QVariant" }
        }
        Method {
            name: "createObject"
            type: "QObject*"
            Parameter { name: "typeName"; type: "string" }
        }
        Method {
            name: "setLoggingFilterRules"
            Parameter { name: "rules"; type: "string" }
        }
        Method {
            name: "setupProxy"
            Parameter { name: "proxyUrl"; type: "QUrl" }
        }
    }
    Component {
        name: "QmlArcGISTiledMapServiceLayer"
        prototype: "QmlTiledMapServiceLayer"
        exports: ["ArcGIS.Runtime/ArcGISTiledMapServiceLayer 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "tileInfo"; type: "QmlTileInfo"; isReadonly: true; isPointer: true }
        Property { name: "fullExtent"; type: "QmlEnvelope"; isReadonly: true; isPointer: true }
        Property {
            name: "defaultSpatialReference"
            type: "QmlSpatialReference"
            isReadonly: true
            isPointer: true
        }
    }
    Component {
        name: "QmlAreaUnit"
        prototype: "QmlUnit"
        exports: ["ArcGIS.Runtime/AreaUnit 10.26"]
        exportMetaObjectRevisions: [0]
        Method {
            name: "convertFromSquareMeters"
            type: "double"
            Parameter { name: "squareMeters"; type: "double" }
        }
        Method {
            name: "convertToSquareMeters"
            type: "double"
            Parameter { name: "unitValue"; type: "double" }
        }
    }
    Component {
        name: "QmlAttachmentEditResult"
        prototype: "QmlGeodatabaseEditError"
        exports: ["ArcGIS.Runtime/AttachmentEditResult 10.26"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "isSuccess"; type: "bool"; isReadonly: true }
    }
    Component {
        name: "QmlAttributeParameter"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/AttributeParameter 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "name"; type: "string"; isReadonly: true }
        Property { name: "defaultValue"; type: "string"; isReadonly: true }
    }
    Component {
        name: "QmlAttributeParameterValue"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/AttributeParameterValue 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "attributeName"; type: "string" }
        Property { name: "parameterName"; type: "string" }
        Property { name: "value"; type: "string" }
        Property { name: "json"; type: "QVariantMap" }
    }
    Component {
        name: "QmlBatchGeocodeResult"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/BatchGeocodeResult 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "locations"; type: "QmlLocatorGeocodeResult"; isList: true; isReadonly: true }
        Property {
            name: "spatialReference"
            type: "QmlSpatialReference"
            isReadonly: true
            isPointer: true
        }
        Property { name: "json"; type: "QVariantMap" }
    }
    Component {
        name: "QmlClassBreakInfo"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/ClassBreakInfo 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "minimum"; type: "double" }
        Property { name: "maximum"; type: "double" }
        Property { name: "label"; type: "string" }
        Property { name: "description"; type: "string" }
        Property { name: "symbol"; type: "QmlSymbol"; isPointer: true }
        Property { name: "json"; type: "QVariantMap" }
    }
    Component {
        name: "QmlClassBreaksRenderer"
        defaultProperty: "classBreaks"
        prototype: "QmlRenderer"
        exports: ["ArcGIS.Runtime/ClassBreaksRenderer 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "attributeName"; type: "string" }
        Property { name: "defaultLabel"; type: "string" }
        Property { name: "minimumValue"; type: "double" }
        Property { name: "normalizationField"; type: "string" }
        Property { name: "normalizationTotal"; type: "double" }
        Property { name: "normalizationType"; type: "QmlEnums::NormalizationType" }
        Property { name: "defaultSymbol"; type: "QmlSymbol"; isPointer: true }
        Property { name: "hasOverlaps"; type: "bool"; isReadonly: true }
        Property { name: "classBreaks"; type: "QmlClassBreakInfo"; isList: true; isReadonly: true }
        Method {
            name: "addBreak"
            Parameter { name: "classBreak"; type: "QmlClassBreakInfo"; isPointer: true }
        }
        Method {
            name: "removeBreak"
            Parameter { name: "classBreak"; type: "QmlClassBreakInfo"; isPointer: true }
        }
        Method { name: "removeAll" }
    }
    Component {
        name: "QmlClosestFacilityResult"
        prototype: "QmlNAResult"
        exports: ["ArcGIS.Runtime/ClosestFacilityResult 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "routes"; type: "QmlRoute"; isList: true; isReadonly: true }
        Property { name: "facilities"; type: "QmlFeatureSet"; isReadonly: true; isPointer: true }
        Property { name: "incidents"; type: "QmlFeatureSet"; isReadonly: true; isPointer: true }
        Property { name: "json"; type: "QVariantMap" }
    }
    Component {
        name: "QmlClosestFacilityTask"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/ClosestFacilityTask 10.26"]
        exportMetaObjectRevisions: [0]
        Property {
            name: "defaultParameters"
            type: "QmlClosestFacilityTaskParameters"
            isReadonly: true
            isPointer: true
        }
        Property { name: "url"; type: "string" }
        Property { name: "credentials"; type: "QmlUserCredentials"; isPointer: true }
        Property {
            name: "solveResult"
            type: "QmlClosestFacilityResult"
            isReadonly: true
            isPointer: true
        }
        Property { name: "solveError"; type: "QmlServiceError"; isReadonly: true; isPointer: true }
        Property { name: "solveStatus"; type: "QmlEnums::SolveStatus"; isReadonly: true }
        Method {
            name: "solve"
            Parameter { name: "parameters"; type: "QmlClosestFacilityTaskParameters"; isPointer: true }
        }
    }
    Component {
        name: "QmlClosestFacilityTaskParameters"
        prototype: "QmlNATaskParameters"
        exports: ["ArcGIS.Runtime/ClosestFacilityTaskParameters 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "facilities"; type: "QmlNAFeatures"; isPointer: true }
        Property { name: "incidents"; type: "QmlNAFeatures"; isPointer: true }
        Property { name: "returnDirections"; type: "bool" }
        Property { name: "directionsLanguage"; type: "string" }
        Property { name: "directionsOutputType"; type: "QmlEnums::DirectionsOutputType" }
        Property { name: "directionsOutputTypeString"; type: "string"; isReadonly: true }
        Property { name: "directionsStyleName"; type: "string" }
        Property { name: "directionsLengthUnit"; type: "QmlEnums::DirectionsLengthUnit" }
        Property { name: "directionsLengthUnitString"; type: "string"; isReadonly: true }
        Property { name: "directionsTimeAttributeName"; type: "string" }
        Property { name: "returnCFRoutes"; type: "bool" }
        Property { name: "returnFacilities"; type: "bool" }
        Property { name: "returnIncidents"; type: "bool" }
        Property { name: "defaultCutoff"; type: "double" }
        Property { name: "defaultTargetFacilityCount"; type: "int" }
        Property { name: "travelDirection"; type: "QmlEnums::NATravelDirection" }
        Property { name: "travelDirectionString"; type: "string"; isReadonly: true }
        Property { name: "timeOfDay"; type: "string" }
        Property { name: "timeOfDayUsage"; type: "QmlEnums::NATimeOfDayUsage" }
        Property { name: "timeOfDayUsageString"; type: "string"; isReadonly: true }
        Property { name: "json"; type: "QVariantMap" }
    }
    Component {
        name: "QmlCodedValueDomain"
        prototype: "QmlDomain"
        exports: ["ArcGIS.Runtime/CodedValueDomain 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "codedValues"; type: "QVariantList"; isReadonly: true }
    }
    Component {
        name: "QmlCoordinateConversion"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/CoordinateConversion 10.26"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Method {
            name: "decimalDegreesToPoint"
            type: "QmlPoint*"
            Parameter { name: "coordinate"; type: "string" }
            Parameter { name: "spatialReference"; type: "QmlSpatialReference"; isPointer: true }
        }
        Method {
            name: "degreesDecimalMinutesToPoint"
            type: "QmlPoint*"
            Parameter { name: "coordinate"; type: "string" }
            Parameter { name: "spatialReference"; type: "QmlSpatialReference"; isPointer: true }
        }
        Method {
            name: "degreesMinutesSecondsToPoint"
            type: "QmlPoint*"
            Parameter { name: "coordinate"; type: "string" }
            Parameter { name: "spatialReference"; type: "QmlSpatialReference"; isPointer: true }
        }
        Method {
            name: "garsToPoint"
            type: "QmlPoint*"
            Parameter { name: "coordinate"; type: "string" }
            Parameter { name: "spatialReference"; type: "QmlSpatialReference"; isPointer: true }
            Parameter { name: "conversionMode"; type: "QmlEnums::GarsConversionMode" }
        }
        Method {
            name: "georefToPoint"
            type: "QmlPoint*"
            Parameter { name: "coordinate"; type: "string" }
            Parameter { name: "spatialReference"; type: "QmlSpatialReference"; isPointer: true }
        }
        Method {
            name: "mgrsToPoint"
            type: "QmlPoint*"
            Parameter { name: "coordinate"; type: "string" }
            Parameter { name: "spatialReference"; type: "QmlSpatialReference"; isPointer: true }
            Parameter { name: "conversionMode"; type: "QmlEnums::MgrsConversionMode" }
        }
        Method {
            name: "usngToPoint"
            type: "QmlPoint*"
            Parameter { name: "coordinate"; type: "string" }
            Parameter { name: "spatialReference"; type: "QmlSpatialReference"; isPointer: true }
        }
        Method {
            name: "utmToPoint"
            type: "QmlPoint*"
            Parameter { name: "coordinate"; type: "string" }
            Parameter { name: "spatialReference"; type: "QmlSpatialReference"; isPointer: true }
            Parameter { name: "conversionMode"; type: "QmlEnums::UtmConversionMode" }
        }
    }
    Component {
        name: "QmlCostAttribute"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/CostAttribute 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "name"; type: "string"; isReadonly: true }
        Property { name: "units"; type: "QmlEnums::AttributeUnits"; isReadonly: true }
        Property { name: "unitsString"; type: "string"; isReadonly: true }
        Property { name: "parameters"; type: "QmlAttributeParameter"; isList: true; isReadonly: true }
    }
    Component {
        name: "QmlDataSource"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/DataSource 10.26"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "json"; type: "QVariantMap" }
        Property { name: "dataSourceType"; type: "QmlEnums::DataSourceType"; isReadonly: true }
    }
    Component {
        name: "QmlDirectionsEvent"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/DirectionsEvent 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "eta"; type: "string"; isReadonly: true }
        Property { name: "geometry"; type: "QmlGeometry"; isReadonly: true; isPointer: true }
        Property {
            name: "directionsStrings"
            type: "QmlDirectionsString"
            isList: true
            isReadonly: true
        }
    }
    Component {
        name: "QmlDirectionsString"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/DirectionsString 10.26"]
        exportMetaObjectRevisions: [0]
        Property {
            name: "directionsStringType"
            type: "QmlEnums::DirectionsStringType"
            isReadonly: true
        }
        Property { name: "typeString"; type: "string"; isReadonly: true }
        Property { name: "value"; type: "string"; isReadonly: true }
    }
    Component {
        name: "QmlDomain"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/Domain 10.26"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "json"; type: "QVariantMap" }
        Property { name: "domainType"; type: "QmlEnums::DomainType"; isReadonly: true }
        Property { name: "domainName"; type: "string" }
    }
    Component {
        name: "QmlDrawingInfo"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/DrawingInfo 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "json"; type: "QVariantMap" }
        Property { name: "renderer"; type: "QmlRenderer"; isPointer: true }
        Property { name: "scaleSymbols"; type: "bool" }
        Property { name: "showLabels"; type: "bool" }
        Property { name: "opacity"; type: "double" }
        Property { name: "labelingInfo"; type: "QmlLabelingInfo"; isList: true; isReadonly: true }
    }
    Component {
        name: "QmlDynamicLayer"
        prototype: "QmlLayer"
        exports: ["ArcGIS.Runtime/DynamicLayer 10.26"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "brightness"; type: "float" }
        Property { name: "contrast"; type: "float" }
        Property { name: "gamma"; type: "float" }
        Method { name: "refresh" }
    }
    Component {
        name: "QmlDynamicLayerInfo"
        prototype: "QmlLayerInfo"
        exports: ["ArcGIS.Runtime/DynamicLayerInfo 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "timeOptions"; type: "QmlTimeOptions"; isPointer: true }
        Property { name: "drawingInfo"; type: "QmlDrawingInfo"; isPointer: true }
        Property { name: "visible"; type: "bool" }
        Method { name: "resetToDefault" }
    }
    Component {
        name: "QmlEditCapabilities"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/EditCapabilities 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "isCreate"; type: "bool"; isReadonly: true }
        Property { name: "isDelete"; type: "bool"; isReadonly: true }
        Property { name: "isUpdate"; type: "bool"; isReadonly: true }
    }
    Component {
        name: "QmlEditFieldsInfo"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/EditFieldsInfo 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "creationDateField"; type: "string"; isReadonly: true }
        Property { name: "creatorField"; type: "string"; isReadonly: true }
        Property { name: "editDateField"; type: "string"; isReadonly: true }
        Property { name: "editorField"; type: "string"; isReadonly: true }
        Property { name: "realm"; type: "string"; isReadonly: true }
        Property { name: "json"; type: "QVariantMap" }
    }
    Component {
        name: "QmlEditInfo"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/EditInfo 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "action"; type: "QmlEnums::ActionType"; isReadonly: true }
        Property { name: "dateValue"; type: "string"; isReadonly: true }
        Property { name: "displayPattern"; type: "QmlEnums::DateDisplayPattern"; isReadonly: true }
        Property { name: "userId"; type: "string"; isReadonly: true }
    }
    Component {
        name: "QmlEditorTrackingInfo"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/EditorTrackingInfo 10.26"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "enableEditorTracking"; type: "bool"; isReadonly: true }
        Property { name: "enableOwnershipAccessControl"; type: "bool"; isReadonly: true }
        Property { name: "allowOthersToUpdate"; type: "bool"; isReadonly: true }
        Property { name: "allowOthersToDelete"; type: "bool"; isReadonly: true }
        Property { name: "json"; type: "QVariantMap" }
    }
    Component {
        name: "QmlEnums"
        exports: ["ArcGIS.Runtime/Enums 10.26"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ActionType"
            values: {
                "ActionTypeCreation": 0,
                "ActionTypeEdit": 1
            }
        }
        Enum {
            name: "ApplyEditsStatus"
            values: {
                "ApplyEditsStatusReady": 0,
                "ApplyEditsStatusInProgress": 1,
                "ApplyEditsStatusCompleted": 2,
                "ApplyEditsStatusErrored": 3
            }
        }
        Enum {
            name: "AngularUnitCode"
            values: {
                "AngularUnitCodeRadian": 9101,
                "AngularUnitCodeDegree": 9102,
                "AngularUnitCodeMinute": 9103,
                "AngularUnitCodeSecond": 9104,
                "AngularUnitCodeGrad": 9105,
                "AngularUnitCodeGon": 9106,
                "AngularUnitCodeMicroradian": 9109,
                "AngularUnitCodeMinuteCentesimal": 9112,
                "AngularUnitCodeSecondCentesimal": 9113,
                "AngularUnitCodeMil6400": 9114
            }
        }
        Enum {
            name: "AnimationMode"
            values: {
                "AnimationModeNoAnimation": 0,
                "AnimationModeAnimate": 1
            }
        }
        Enum {
            name: "AreaUnitCode"
            values: {
                "AreaUnitCodeHectare": 109401,
                "AreaUnitCodeAcre": 109402,
                "AreaUnitCodeAcreUS": 109403,
                "AreaUnitCodeSquareMeter": 109404,
                "AreaUnitCodeSquareFoot": 109405,
                "AreaUnitCodeSquareFootUS": 109406,
                "AreaUnitCodeSquareFootClarke": 109407,
                "AreaUnitCodeSquareFathom": 109408,
                "AreaUnitCodeSquareNauticalMile": 109409,
                "AreaUnitCodeSquareMeterGerman": 109410,
                "AreaUnitCodeSquareChain_US": 109411,
                "AreaUnitCodeSquareLinkUS": 109412,
                "AreaUnitCodeSquareMileUS": 109413,
                "AreaUnitCodeSquareKilometer": 109414,
                "AreaUnitCodeSquareYardClarke": 109415,
                "AreaUnitCodeSquareChainClarke": 109416,
                "AreaUnitCodeSquareLinkClarke": 109417,
                "AreaUnitCodeSquareYardSears": 109418,
                "AreaUnitCodeSquareFootSears": 109419,
                "AreaUnitCodeSquareChainSears": 109420,
                "AreaUnitCodeSquareLinkSears": 109421,
                "AreaUnitCodeSquareYardBenoitA": 109422,
                "AreaUnitCodeSquareFootBenoitA": 109423,
                "AreaUnitCodeSquareChainBenoitA": 109424,
                "AreaUnitCodeSquareLinkBenoitA": 109425,
                "AreaUnitCodeSquareYardBenoitB": 109426,
                "AreaUnitCodeSquareFootBenoitB": 109427,
                "AreaUnitCodeSquareChainBenoitB": 109428,
                "AreaUnitCodeSquareLinkBenoitB": 109429,
                "AreaUnitCodeSquareFoot1865": 109430,
                "AreaUnitCodeSquareFootIndian": 109431,
                "AreaUnitCodeSquareFootIndian1937": 109432,
                "AreaUnitCodeSquareFootIndian1962": 109433,
                "AreaUnitCodeSquareFootIndian1975": 109434,
                "AreaUnitCodeSquareYardIndian": 109435,
                "AreaUnitCodeSquareYardIndian1937": 109436,
                "AreaUnitCodeSquareYardIndian1962": 109437,
                "AreaUnitCodeSquareYardIndian1975": 109438,
                "AreaUnitCodeSquareMileStatute": 109439,
                "AreaUnitCodeSquareFootGoldCoast": 109440,
                "AreaUnitCodeSquareFootBritish1936": 109441,
                "AreaUnitCodeSquareYard": 109442,
                "AreaUnitCodeSquareYardUS": 109443,
                "AreaUnitCodeSquareChain": 109444,
                "AreaUnitCodeSquareLink": 109445,
                "AreaUnitCodeSquareYardSears1922Trunc": 109446,
                "AreaUnitCodeSquareFootSears1922Trunc": 109447,
                "AreaUnitCodeSquareChainSears1922Trunc": 109448,
                "AreaUnitCodeSquareLinkSears1922Trunc": 109449,
                "AreaUnitCodeSquareDecimeter": 109450,
                "AreaUnitCodeSquareCentimeter": 109451,
                "AreaUnitCodeSquareMillimeter": 109452,
                "AreaUnitCodeSquareInch": 109453,
                "AreaUnitCodeSquareInchUS": 109454,
                "AreaUnitCodeSquareRod": 109455,
                "AreaUnitCodeSquareRodUS": 109456,
                "AreaUnitCodeSquareNauticalMileUS": 109457,
                "AreaUnitCodeSquareNauticalMileUK": 109458,
                "AreaUnitCodeSquareSmoot": 109459,
                "AreaUnitCodeSquareKm50": 109460,
                "AreaUnitCodeSquareKm150": 109461
            }
        }
        Enum {
            name: "AttachmentEditStatus"
            values: {
                "AttachmentEditStatusReady": 0,
                "AttachmentEditStatusInProgress": 1,
                "AttachmentEditStatusCompleted": 2,
                "AttachmentEditStatusErrored": 3
            }
        }
        Enum {
            name: "AttributeUnits"
            values: {
                "AttributeUnitsUnknown": 0,
                "AttributeUnitsFeet": 1,
                "AttributeUnitsMiles": 2,
                "AttributeUnitsMeters": 3,
                "AttributeUnitsKilometers": 4,
                "AttributeUnitsNauticalMiles": 5,
                "AttributeUnitsDecimalDegrees": 6,
                "AttributeUnitsMinutes": 7,
                "AttributeUnitsHours": 8
            }
        }
        Enum {
            name: "AuthenticationType"
            values: {
                "AuthenticationTypeNoType": 0,
                "AuthenticationTypeToken": 1,
                "AuthenticationTypeHTTP": 2
            }
        }
        Enum {
            name: "AutoPanMode"
            values: {
                "AutoPanModeOff": 0,
                "AutoPanModeDefault": 1,
                "AutoPanModeNavigation": 2,
                "AutoPanModeCompass": 3
            }
        }
        Enum {
            name: "BatchGeocodeStatus"
            values: {
                "BatchGeocodeStatusReady": 0,
                "BatchGeocodeStatusInProgress": 1,
                "BatchGeocodeStatusCompleted": 2,
                "BatchGeocodeStatusErrored": 3
            }
        }
        Enum {
            name: "Category"
            values: {
                "CategoryUnknown": 0,
                "CategoryProperty": 1,
                "CategoryParameter": 2
            }
        }
        Enum {
            name: "DataSourceType"
            values: {
                "DataSourceTypeNoType": 0,
                "DataSourceTypeJoinTable": 1,
                "DataSourceTypeQueryTable": 2,
                "DataSourceTypeRaster": 3,
                "DataSourceTypeTable": 4
            }
        }
        Enum {
            name: "DateDisplayPattern"
            values: {
                "DateDisplayPatternFull": 0,
                "DateDisplayPatternHour": 1,
                "DateDisplayPatternHours": 2,
                "DateDisplayPatternMinute": 3,
                "DateDisplayPatternMinutes": 4,
                "DateDisplayPatternSeconds": 5,
                "DateDisplayPatternWeekday": 6
            }
        }
        Enum {
            name: "DirectionsLengthUnit"
            values: {
                "DirectionsLengthUnitFeet": 0,
                "DirectionsLengthUnitKilometers": 1,
                "DirectionsLengthUnitMeters": 2,
                "DirectionsLengthUnitMiles": 3,
                "DirectionsLengthUnitNauticalMiles": 4,
                "DirectionsLengthUnitYards": 5,
                "DirectionsLengthUnitServerDefault": 6
            }
        }
        Enum {
            name: "DirectionsOutputType"
            values: {
                "DirectionsOutputTypeComplete": 0,
                "DirectionsOutputTypeCompleteNoEvents": 1,
                "DirectionsOutputTypeInstructionsOnly": 2,
                "DirectionsOutputTypeStandard": 3,
                "DirectionsOutputTypeSummaryOnly": 4
            }
        }
        Enum {
            name: "DirectionsStringType"
            values: {
                "DirectionsStringTypeGeneral": 0,
                "DirectionsStringTypeDepart": 1,
                "DirectionsStringTypeArrive": 2,
                "DirectionsStringTypeLength": 3,
                "DirectionsStringTypeTime": 4,
                "DirectionsStringTypeSummary": 5,
                "DirectionsStringTypeTimeWindow": 6,
                "DirectionsStringTypeViolationTime": 7,
                "DirectionsStringTypeWaitTime": 8,
                "DirectionsStringTypeServiceTime": 9,
                "DirectionsStringTypeEstimatedArrivalTime": 10,
                "DirectionsStringTypeCumulativeLength": 11,
                "DirectionsStringTypeStreetName": 12,
                "DirectionsStringTypeAltName": 13,
                "DirectionsStringTypeBranch": 14,
                "DirectionsStringTypeToward": 15,
                "DirectionsStringTypeCrossStreet": 16,
                "DirectionsStringTypeExit": 17
            }
        }
        Enum {
            name: "DomainType"
            values: {
                "DomainTypeNoType": 0,
                "DomainTypeRange": 1,
                "DomainTypeInherited": 2,
                "DomainTypeCodedValue": 3
            }
        }
        Enum {
            name: "DrawingTool"
            values: {
                "DrawingToolAutoCompletePolygon": 0,
                "DrawingToolCircle": 1,
                "DrawingToolDownArrow": 2,
                "DrawingToolEllipse": 3,
                "DrawingToolFreehand": 4,
                "DrawingToolLeftArrow": 5,
                "DrawingToolLine": 6,
                "DrawingToolNoTool": 7,
                "DrawingToolPoint": 8,
                "DrawingToolPolygon": 9,
                "DrawingToolRectangle": 10,
                "DrawingToolRightArrow": 11,
                "DrawingToolText": 12,
                "DrawingToolTriangle": 13,
                "DrawingToolUpArrow": 14
            }
        }
        Enum {
            name: "EditOperation"
            values: {
                "EditOperationNoType": 0,
                "EditOperationAdd": 1,
                "EditOperationUpdate": 2,
                "EditOperationDelete": 3
            }
        }
        Enum {
            name: "EsriUnit"
            values: {
                "EsriUnitUnknown": 0,
                "EsriUnitInches": 1,
                "EsriUnitPoints": 2,
                "EsriUnitFeet": 3,
                "EsriUnitYards": 4,
                "EsriUnitMiles": 5,
                "EsriUnitNauticalMiles": 6,
                "EsriUnitMillimeters": 7,
                "EsriUnitCentimeters": 8,
                "EsriUnitMeters": 9,
                "EsriUnitKilometers": 10,
                "EsriUnitDecimalDegrees": 11,
                "EsriUnitDecimeters": 12
            }
        }
        Enum {
            name: "ExecutionType"
            values: {
                "ExecutionTypeAsynchronous": 0,
                "ExecutionTypeSynchronous": 1
            }
        }
        Enum {
            name: "FeatureIteratorType"
            values: {
                "FeatureIteratorTypeNoType": 0,
                "FeatureIteratorTypeFeatureQuery": 1,
                "FeatureIteratorTypeGeodatabaseFeatureTable": 2,
                "FeatureIteratorTypeAggregateFeature": 3
            }
        }
        Enum {
            name: "FeatureResultType"
            values: {
                "FeatureResultTypeNoType": 0,
                "FeatureResultTypeFeatureQuery": 1,
                "FeatureResultTypeGeodatabaseFeatureTableQuery": 2,
                "FeatureResultTypeAggregateFeatureQuery": 3
            }
        }
        Enum {
            name: "FeatureServiceInfoStatus"
            values: {
                "FeatureServiceInfoStatusReady": 0,
                "FeatureServiceInfoStatusInProgress": 1,
                "FeatureServiceInfoStatusCompleted": 2,
                "FeatureServiceInfoStatusErrored": 3
            }
        }
        Enum {
            name: "FeatureTableStatus"
            values: {
                "FeatureTableStatusUninitialized": 0,
                "FeatureTableStatusInitialized": 1,
                "FeatureTableStatusErrored": 2
            }
        }
        Enum {
            name: "FeatureTableType"
            values: {
                "FeatureTableTypeNoType": 0,
                "FeatureTableTypeGeodatabaseFeatureTable": 1,
                "FeatureTableTypeGeodatabaseFeatureServiceTable": 2
            }
        }
        Enum {
            name: "FieldType"
            values: {
                "FieldTypeNoType": 0,
                "FieldTypeInteger": 1,
                "FieldTypeSmallInteger": 2,
                "FieldTypeDouble": 3,
                "FieldTypeSingle": 4,
                "FieldTypeDate": 5,
                "FieldTypeString": 6,
                "FieldTypeGeometry": 7,
                "FieldTypeObjectId": 8,
                "FieldTypeBlob": 9,
                "FieldTypeGlobalId": 10,
                "FieldTypeGuid": 11,
                "FieldTypeRaster": 12,
                "FieldTypeXML": 13
            }
        }
        Enum {
            name: "FindStatus"
            values: {
                "FindStatusReady": 0,
                "FindStatusInProgress": 1,
                "FindStatusCompleted": 2,
                "FindStatusErrored": 3
            }
        }
        Enum {
            name: "FindTaskStatus"
            values: {
                "FindTaskStatusReady": 0,
                "FindTaskStatusInProgress": 1,
                "FindTaskStatusCompleted": 2,
                "FindTaskStatusErrored": 3
            }
        }
        Enum {
            name: "GarsConversionMode"
            values: {
                "GarsConversionModeCenter": 0,
                "GarsConversionModeLowerLeft": 1
            }
        }
        Enum {
            name: "GenerateStatus"
            values: {
                "GenerateStatusReady": 0,
                "GenerateStatusInProgress": 1,
                "GenerateStatusCompleted": 2,
                "GenerateStatusErrored": 3
            }
        }
        Enum {
            name: "GeocodeStatus"
            values: {
                "GeocodeStatusReady": 0,
                "GeocodeStatusInProgress": 1,
                "GeocodeStatusCompleted": 2,
                "GeocodeStatusErrored": 3
            }
        }
        Enum {
            name: "GeodatabaseResponseType"
            values: {
                "GeodatabaseResponseTypeData": 0,
                "GeodatabaseResponseTypeInfo": 1,
                "GeodatabaseResponseTypeEdits": 2,
                "GeodatabaseResponseTypeNoEdits": 3
            }
        }
        Enum {
            name: "GeodatabaseStatus"
            values: {
                "GeodatabaseStatusPending": 0,
                "GeodatabaseStatusInProgress": 1,
                "GeodatabaseStatusUploadingDelta": 2,
                "GeodatabaseStatusCompleted": 3,
                "GeodatabaseStatusCancelled": 4,
                "GeodatabaseStatusFailed": 5,
                "GeodatabaseStatusFailedImportChanges": 6,
                "GeodatabaseStatusExportChanges": 7,
                "GeodatabaseStatusExportingData": 8,
                "GeodatabaseStatusExportingSnapshot": 9,
                "GeodatabaseStatusExportAttachments": 10,
                "GeodatabaseStatusImportAttachments": 11,
                "GeodatabaseStatusProvisioningReplica": 12,
                "GeodatabaseStatusUnregisteringReplica": 13,
                "GeodatabaseStatusCompletedWithErrors": 14
            }
        }
        Enum {
            name: "GeometryEngineJoinType"
            values: {
                "GeometryEngineJoinTypeRound": 0,
                "GeometryEngineJoinTypeBevel": 1,
                "GeometryEngineJoinTypeMiter": 2,
                "GeometryEngineJoinTypeSquare": 3
            }
        }
        Enum {
            name: "GeometryType"
            values: {
                "GeometryTypeGeometry": 0,
                "GeometryTypePoint": 1,
                "GeometryTypeLine": 2,
                "GeometryTypeEnvelope": 3,
                "GeometryTypeMultiPoint": 4,
                "GeometryTypePolyline": 5,
                "GeometryTypePolygon": 6
            }
        }
        Enum {
            name: "GridType"
            values: {
                "GridTypeNoType": 0,
                "GridTypeUtm": 1,
                "GridTypeMgrs": 2,
                "GridTypeUsng": 3
            }
        }
        Enum {
            name: "HorizontalAlignment"
            values: {
                "HorizontalAlignmentLeft": 0,
                "HorizontalAlignmentCenter": 1,
                "HorizontalAlignmentRight": 2,
                "HorizontalAlignmentJustify": 3
            }
        }
        Enum {
            name: "IdentifyTaskStatus"
            values: {
                "IdentifyTaskStatusReady": 0,
                "IdentifyTaskStatusInProgress": 1,
                "IdentifyTaskStatusCompleted": 2,
                "IdentifyTaskStatusErrored": 3
            }
        }
        Enum {
            name: "ImageFormat"
            values: {
                "ImageFormatBmp": 0,
                "ImageFormatGif": 1,
                "ImageFormatJpg": 2,
                "ImageFormatJpgPng": 3,
                "ImageFormatPng": 4,
                "ImageFormatPng24": 5,
                "ImageFormatPng8": 6,
                "ImageFormatTiff": 7
            }
        }
        Enum {
            name: "JobStatus"
            values: {
                "JobStatusCancelled": 0,
                "JobStatusCancelling": 1,
                "JobStatusDeleted": 2,
                "JobStatusDeleting": 3,
                "JobStatusExecuting": 4,
                "JobStatusFailed": 5,
                "JobStatusNewJob": 6,
                "JobStatusSubmitted": 7,
                "JobStatusSucceeded": 8,
                "JobStatusTimedOut": 9,
                "JobStatusWaiting": 10
            }
        }
        Enum {
            name: "JoinTableDataSourceJoinType"
            values: {
                "JoinTableDataSourceJoinTypeLeftInner": 0,
                "JoinTableDataSourceJoinTypeLeftOuter": 1
            }
        }
        Enum {
            name: "LayerMode"
            values: {
                "LayerModeAllLayers": 0,
                "LayerModeVisibleLayers": 1,
                "LayerModeTopMostLayer": 2
            }
        }
        Enum {
            name: "LabelPlacement"
            values: {
                "LabelPlacementPointAboveCenter": 0,
                "LabelPlacementPointAboveLeft": 1,
                "LabelPlacementPointAboveRight": 2,
                "LabelPlacementPointBelowCenter": 3,
                "LabelPlacementPointBelowLeft": 4,
                "LabelPlacementPointBelowRight": 5,
                "LabelPlacementPointCenterCenter": 6,
                "LabelPlacementPointCenterLeft": 7,
                "LabelPlacementPointCenterRight": 8,
                "LabelPlacementLineAboveAfter": 9,
                "LabelPlacementLineAboveAlong": 10,
                "LabelPlacementLineAboveBefore": 11,
                "LabelPlacementLineAboveStart": 12,
                "LabelPlacementLineAboveEnd": 13,
                "LabelPlacementLineBelowAfter": 14,
                "LabelPlacementLineBelowAlong": 15,
                "LabelPlacementLineBelowBefore": 16,
                "LabelPlacementLineBelowStart": 17,
                "LabelPlacementLineBelowEnd": 18,
                "LabelPlacementLineCenterAfter": 19,
                "LabelPlacementLineCenterAlong": 20,
                "LabelPlacementLineCenterBefore": 21,
                "LabelPlacementLineCenterStart": 22,
                "LabelPlacementLineCenterEnd": 23,
                "LabelPlacementPolygonAboveCenter": 24,
                "LabelPlacementUnknown": 25
            }
        }
        Enum {
            name: "LayerSourceType"
            values: {
                "LayerSourceTypeNoType": 0,
                "LayerSourceTypeDataLayer": 1,
                "LayerSourceTypeMapLayer": 2
            }
        }
        Enum {
            name: "LayerStatus"
            values: {
                "LayerStatusUninitialized": 3,
                "LayerStatusInitializing": 1,
                "LayerStatusInitialized": 2,
                "LayerStatusErrored": 0
            }
        }
        Enum {
            name: "LayerType"
            values: {
                "LayerTypeNoType": 0,
                "LayerTypeArcGISLocalTiled": 1,
                "LayerTypeArcGISTiledMapService": 2,
                "LayerTypeArcGISDynamicMapService": 3,
                "LayerTypeArcGISFeatureService": 4,
                "LayerTypeFeature": 5,
                "LayerTypeArcGISImageService": 6,
                "LayerTypeGraphics": 7,
                "LayerTypeGroup": 8,
                "LayerTypeWmsDynamicMapService": 10,
                "LayerTypePosition": 13,
                "LayerTypeOpenStreetMap": 14
            }
        }
        Enum {
            name: "LicenseLevel"
            values: {
                "LicenseLevelDeveloper": 0,
                "LicenseLevelBasic": 1,
                "LicenseLevelStandard": 2
            }
        }
        Enum {
            name: "LicenseStatus"
            values: {
                "LicenseStatusNoStatus": 0,
                "LicenseStatusInvalid": 1,
                "LicenseStatusExpired": 2,
                "LicenseStatusLoginRequired": 3,
                "LicenseStatusValid": 4
            }
        }
        Enum {
            name: "LinearUnitCode"
            values: {
                "LinearUnitCodeMeter": 9001,
                "LinearUnitCodeFoot": 9002,
                "LinearUnitCodeFootUS": 9003,
                "LinearUnitCodeFootClarke": 9005,
                "LinearUnitCodeFathom": 9014,
                "LinearUnitCodeNauticalMile": 9030,
                "LinearUnitCodeMeterGerman": 9031,
                "LinearUnitCodeChainUS": 9033,
                "LinearUnitCodeLinkUS": 9034,
                "LinearUnitCodeMileUS": 9035,
                "LinearUnitCodeKilometer": 9036,
                "LinearUnitCodeYardClarke": 9037,
                "LinearUnitCodeChainClarke": 9038,
                "LinearUnitCodeLinkClarke": 9039,
                "LinearUnitCodeYardSears": 9040,
                "LinearUnitCodeFootSears": 9041,
                "LinearUnitCodeChainSears": 9042,
                "LinearUnitCodeLinkSears": 9043,
                "LinearUnitCodeYardBenoitA": 9050,
                "LinearUnitCodeFootBenoitA": 9051,
                "LinearUnitCodeChainBenoitA": 9052,
                "LinearUnitCodeLinkBenoitA": 9053,
                "LinearUnitCodeYardBenoitB": 9060,
                "LinearUnitCodeFootBenoitB": 9061,
                "LinearUnitCodeChainBenoitB": 9062,
                "LinearUnitCodeLinkBenoitB": 9063,
                "LinearUnitCodeFoot1865": 9070,
                "LinearUnitCodeFootIndian": 9080,
                "LinearUnitCodeFootIndian1937": 9081,
                "LinearUnitCodeFootIndian1962": 9082,
                "LinearUnitCodeFootIndian1975": 9083,
                "LinearUnitCodeYardIndian": 9084,
                "LinearUnitCodeYardIndian1937": 9085,
                "LinearUnitCodeYardIndian1962": 9086,
                "LinearUnitCodeYardIndian1975": 9087,
                "LinearUnitCodeMileStatute": 9093,
                "LinearUnitCodeFootGoldCoast": 9094,
                "LinearUnitCodeFootBritish1936": 9095,
                "LinearUnitCodeYard": 9096,
                "LinearUnitCodeYardUS": 109002,
                "LinearUnitCodeChain": 9097,
                "LinearUnitCodeLink": 9098,
                "LinearUnitCodeYardSears1922Trunc": 9099,
                "LinearUnitCodeFootSears1922Trunc": 9300,
                "LinearUnitCodeChainSears1922Trunc": 9301,
                "LinearUnitCodeLinkSears1922Trunc": 9302,
                "LinearUnitCodeDecimeter": 109005,
                "LinearUnitCodeCentimeter": 109006,
                "LinearUnitCodeMillimeter": 109007,
                "LinearUnitCodeInch": 109008,
                "LinearUnitCodeInchUS": 109009,
                "LinearUnitCodeRod": 109010,
                "LinearUnitCodeRodUS": 109011,
                "LinearUnitCodeNauticalMileUS": 109012,
                "LinearUnitCodeNauticalMileUK": 109013,
                "LinearUnitCodeKm50": 109030,
                "LinearUnitCodeKm150": 109031
            }
        }
        Enum {
            name: "MapServiceInfoStatus"
            values: {
                "MapServiceInfoStatusReady": 0,
                "MapServiceInfoStatusInProgress": 1,
                "MapServiceInfoStatusCompleted": 2,
                "MapServiceInfoStatusErrored": 3
            }
        }
        Enum {
            name: "MapStatus"
            values: {
                "MapStatusUninitialized": 0,
                "MapStatusInitializing": 1,
                "MapStatusReady": 2
            }
        }
        Enum {
            name: "MarkerAngleAlignment"
            values: {
                "MarkerAngleAlignmentScreen": 0,
                "MarkerAngleAlignmentNorth": 1
            }
        }
        Enum {
            name: "MgrsConversionMode"
            values: {
                "MgrsConversionModeAutomatic": 0,
                "MgrsConversionModeNewStyle": 1,
                "MgrsConversionModeOldStyle": 2,
                "MgrsConversionModeNewWith180InZone01": 3,
                "MgrsConversionModeOldWith180InZone01": 4
            }
        }
        Enum {
            name: "MouseWheelZoomDirection"
            values: {
                "MouseWheelZoomDirectionForwardZoomIn": 0,
                "MouseWheelZoomDirectionForwardZoomOut": 1
            }
        }
        Enum {
            name: "MoveOperation"
            values: {
                "MoveOperationUp": 0,
                "MoveOperationDown": 1,
                "MoveOperationToTop": 2,
                "MoveOperationToBottom": 3
            }
        }
        Enum {
            name: "NAOutputLine"
            values: {
                "NAOutputLineNoLine": 0,
                "NAOutputLineStraight": 1,
                "NAOutputLineTrueShape": 2,
                "NAOutputLineTrueShapeWithMeasure": 3,
                "NAOutputLineServerDefault": 4
            }
        }
        Enum {
            name: "NAOutputPolygon"
            values: {
                "NAOutputPolygonNoOutput": 0,
                "NAOutputPolygonSimplified": 1,
                "NAOutputPolygonDetailed": 2,
                "NAOutputPolygonServerDefault": 3
            }
        }
        Enum {
            name: "NATimeOfDayUsage"
            values: {
                "NATimeOfDayUsageStartTime": 0,
                "NATimeOfDayUsageEndTime": 1,
                "NATimeOfDayUsageNotUsed": 2,
                "NATimeOfDayUsageServerDefault": 3
            }
        }
        Enum {
            name: "NATravelDirection"
            values: {
                "NATravelDirectionFromFacility": 0,
                "NATravelDirectionToFacility": 1,
                "NATravelDirectionServerDefault": 2
            }
        }
        Enum {
            name: "NormalizationType"
            values: {
                "NormalizationTypeNoType": 0,
                "NormalizationTypeNormalizeByField": 1,
                "NormalizationTypeNormalizeByLog": 2,
                "NormalizationTypeNormalizeByPercentOfTotal": 3
            }
        }
        Enum {
            name: "OAuthMode"
            values: {
                "OAuthModeNoType": 0,
                "OAuthModeUser": 1,
                "OAuthModeApp": 2
            }
        }
        Enum {
            name: "OrderByFields"
            values: {
                "OrderByFieldsAscending": 0,
                "OrderByFieldsDescending": 1
            }
        }
        Enum {
            name: "ParamDirection"
            values: {
                "ParamDirectionInput": 0,
                "ParamDirectionOutput": 1
            }
        }
        Enum {
            name: "ParamType"
            values: {
                "ParamTypeRequired": 0,
                "ParamTypeOptional": 1,
                "ParamTypeDerived": 2
            }
        }
        Enum {
            name: "PortalAccess"
            values: {
                "PortalAccessOrganization": 0,
                "PortalAccessPrivate": 1,
                "PortalAccessPublic": 2,
                "PortalAccessShared": 3
            }
        }
        Enum {
            name: "PortalFileType"
            values: {
                "PortalFileTypeUnknown": -1,
                "PortalFileTypeCSV": 0,
                "PortalFileTypeShapefile": 1,
                "PortalFileTypeTilePackage": 2,
                "PortalFileTypeFeatureService": 3,
                "PortalFileTypeFeatureCollection": 4,
                "PortalFileTypeServiceDefinition": 5
            }
        }
        Enum {
            name: "PortalItemType"
            values: {
                "PortalItemTypeUnknown": -1,
                "PortalItemTypeArcPadPackage": 0,
                "PortalItemTypeBasemapPackage": 1,
                "PortalItemTypeCityEngineWebScene": 2,
                "PortalItemTypeCSV": 3,
                "PortalItemTypeCodeSample": 4,
                "PortalItemTypeCodeAttachment": 5,
                "PortalItemTypeColorSet": 6,
                "PortalItemTypeDesktopAddIn": 7,
                "PortalItemTypeDesktopApplication": 8,
                "PortalItemTypeDesktopApplicationTemplate": 9,
                "PortalItemTypeDocumentLink": 10,
                "PortalItemTypeExplorerAddIn": 11,
                "PortalItemTypeExplorerLayer": 12,
                "PortalItemTypeExplorerMap": 13,
                "PortalItemTypeFeatureCollection": 14,
                "PortalItemTypeFeatureCollectionTemplate": 15,
                "PortalItemTypeFeatureService": 16,
                "PortalItemTypeGeocodingService": 17,
                "PortalItemTypeGeodataService": 18,
                "PortalItemTypeGeometryService": 19,
                "PortalItemTypeGeoprocessingPackage": 20,
                "PortalItemTypeGeoprocessingSample": 21,
                "PortalItemTypeGeoprocessingService": 22,
                "PortalItemTypeGlobeDocument": 23,
                "PortalItemTypeGlobeService": 24,
                "PortalItemTypeImage": 25,
                "PortalItemTypeImageService": 26,
                "PortalItemTypeKML": 27,
                "PortalItemTypeLayer": 28,
                "PortalItemTypeLayerPackage": 29,
                "PortalItemTypeLocatorPackage": 30,
                "PortalItemTypeMapDocument": 31,
                "PortalItemTypeMapPackage": 32,
                "PortalItemTypeMapService": 33,
                "PortalItemTypeMapTemplate": 34,
                "PortalItemTypeMicrosoftExcel": 35,
                "PortalItemTypeMicrosoftPowerPoint": 36,
                "PortalItemTypeMicrosoftWord": 37,
                "PortalItemTypeMobileApplication": 38,
                "PortalItemTypeNetworkAnalysisService": 39,
                "PortalItemTypeOperationsDashboardAddIn": 40,
                "PortalItemTypeOperationView": 41,
                "PortalItemTypePDF": 42,
                "PortalItemTypeProjectPackage": 43,
                "PortalItemTypePublishedMap": 44,
                "PortalItemTypeRulePackage": 45,
                "PortalItemTypeSceneDocument": 46,
                "PortalItemTypeServiceDefinition": 47,
                "PortalItemTypeShapefile": 48,
                "PortalItemTypeSymbolSet": 49,
                "PortalItemTypeTaskFile": 50,
                "PortalItemTypeTilePackage": 51,
                "PortalItemTypeVisioDocument": 52,
                "PortalItemTypeWebMap": 53,
                "PortalItemTypeWebMappingApplication": 54,
                "PortalItemTypeWebScene": 55,
                "PortalItemTypeWMS": 56,
                "PortalItemTypeWindowsMobilePackage": 57,
                "PortalItemTypeWorkflowManagerPackage": 58,
                "PortalItemTypeWorkflowManagerService": 59
            }
        }
        Enum {
            name: "PortalMode"
            values: {
                "PortalModeUnknown": -1,
                "PortalModeMultiTenant": 0,
                "PortalModeSingleTenant": 1
            }
        }
        Enum {
            name: "PortalReadyState"
            values: {
                "PortalReadyStateUninitialized": 0,
                "PortalReadyStateLoading": 1,
                "PortalReadyStateError": 2,
                "PortalReadyStateComplete": 3,
                "PortalReadyStateAborting": 4
            }
        }
        Enum {
            name: "PortalRequestMethod"
            values: {
                "PortalRequestMethodGet": 0,
                "PortalRequestMethodPost": 1
            }
        }
        Enum {
            name: "PortalRequestStatus"
            values: {
                "PortalRequestStatusReady": 0,
                "PortalRequestStatusInProgress": 1,
                "PortalRequestStatusCompleted": 2,
                "PortalRequestStatusErrored": 3
            }
        }
        Enum {
            name: "PortalSortOrder"
            values: {
                "PortalSortOrderAscending": 0,
                "PortalSortOrderDescending": 1
            }
        }
        Enum {
            name: "PortalStatus"
            values: {
                "PortalStatusUnknown": -1,
                "PortalStatusPartial": 0,
                "PortalStatusProcessing": 1,
                "PortalStatusFailed": 2,
                "PortalStatusCompleted": 3
            }
        }
        Enum {
            name: "PositionChangeType"
            values: {
                "PositionChangeTypeNoChange": 0,
                "PositionChangeTypePosition": 1,
                "PositionChangeTypeAltitude": 2,
                "PositionChangeTypeCourseOrSpeed": 4,
                "PositionChangeTypeSatellites": 8,
                "PositionChangeTypeQuality": 16,
                "PositionChangeTypeFixStatus": 32
            }
        }
        Enum {
            name: "QueryAttachmentInfosStatus"
            values: {
                "QueryAttachmentInfosStatusReady": 0,
                "QueryAttachmentInfosStatusInProgress": 1,
                "QueryAttachmentInfosStatusCompleted": 2,
                "QueryAttachmentInfosStatusErrored": 3
            }
        }
        Enum {
            name: "QueryFeaturesStatus"
            values: {
                "QueryFeaturesStatusReady": 0,
                "QueryFeaturesStatusInProgress": 1,
                "QueryFeaturesStatusCompleted": 2,
                "QueryFeaturesStatusErrored": 3
            }
        }
        Enum {
            name: "QueryIdsStatus"
            values: {
                "QueryIdsStatusReady": 0,
                "QueryIdsStatusInProgress": 1,
                "QueryIdsStatusCompleted": 2,
                "QueryIdsStatusErrored": 3
            }
        }
        Enum {
            name: "QueryMode"
            values: {
                "QueryModeOnDemand": 0,
                "QueryModeSelectionOnly": 1,
                "QueryModeSnapshot": 2
            }
        }
        Enum {
            name: "QueryOption"
            values: {
                "QueryOptionUseFilter": 0,
                "QueryOptionNone": 1,
                "QueryOptionAll": 2
            }
        }
        Enum {
            name: "QueryRelatedRecordsStatus"
            values: {
                "QueryRelatedRecordsStatusReady": 0,
                "QueryRelatedRecordsStatusInProgress": 1,
                "QueryRelatedRecordsStatusCompleted": 2,
                "QueryRelatedRecordsStatusErrored": 3
            }
        }
        Enum {
            name: "QueryRelatedStatus"
            values: {
                "QueryRelatedStatusReady": 0,
                "QueryRelatedStatusInProgress": 1,
                "QueryRelatedStatusCompleted": 2,
                "QueryRelatedStatusErrored": 3
            }
        }
        Enum {
            name: "QueryTaskStatus"
            values: {
                "QueryTaskStatusReady": 0,
                "QueryTaskStatusInProgress": 1,
                "QueryTaskStatusCompleted": 2,
                "QueryTaskStatusErrored": 3
            }
        }
        Enum {
            name: "RelationshipQueryTaskStatus"
            values: {
                "RelationshipQueryTaskStatusReady": 0,
                "RelationshipQueryTaskStatusInProgress": 1,
                "RelationshipQueryTaskStatusCompleted": 2,
                "RelationshipQueryTaskStatusErrored": 3
            }
        }
        Enum {
            name: "RelationshipCardinality"
            values: {
                "RelationshipCardinalityNoCardinality": 0,
                "RelationshipCardinalityOneToOne": 1,
                "RelationshipCardinalityOneToMany": 2,
                "RelationshipCardinalityManyToMany": 3
            }
        }
        Enum {
            name: "RelationshipRole"
            values: {
                "RelationshipRoleNoRole": 0,
                "RelationshipRoleOrigin": 1,
                "RelationshipRoleDestination": 2
            }
        }
        Enum {
            name: "RendererType"
            values: {
                "RendererTypeNoType": 0,
                "RendererTypeSimple": 1,
                "RendererTypeUniqueValue": 2,
                "RendererTypeClassBreak": 3
            }
        }
        Enum {
            name: "RenderingMode"
            values: {
                "RenderingModeStatic": 0,
                "RenderingModeDynamic": 1
            }
        }
        Enum {
            name: "RetrieveAttachmentStatus"
            values: {
                "RetrieveAttachmentStatusReady": 0,
                "RetrieveAttachmentStatusInProgress": 1,
                "RetrieveAttachmentStatusCompleted": 2,
                "RetrieveAttachmentStatusErrored": 3
            }
        }
        Enum {
            name: "ReverseGeocodeStatus"
            values: {
                "ReverseGeocodeStatusReady": 0,
                "ReverseGeocodeStatusInProgress": 1,
                "ReverseGeocodeStatusCompleted": 2,
                "ReverseGeocodeStatusErrored": 3
            }
        }
        Enum {
            name: "RoutingManeuver"
            values: {
                "RoutingManeuverUnknown": 0,
                "RoutingManeuverStop": 1,
                "RoutingManeuverStraight": 2,
                "RoutingManeuverBearLeft": 3,
                "RoutingManeuverBearRight": 4,
                "RoutingManeuverTurnLeft": 5,
                "RoutingManeuverTurnRight": 6,
                "RoutingManeuverSharpLeft": 7,
                "RoutingManeuverSharpRight": 8,
                "RoutingManeuverUTurn": 9,
                "RoutingManeuverFerry": 10,
                "RoutingManeuverRoundabout": 11,
                "RoutingManeuverHighwayMerge": 12,
                "RoutingManeuverHighwayExit": 13,
                "RoutingManeuverHighwayChange": 14,
                "RoutingManeuverForkCenter": 15,
                "RoutingManeuverForkLeft": 16,
                "RoutingManeuverForkRight": 17,
                "RoutingManeuverDepart": 18,
                "RoutingManeuverTripItem": 19,
                "RoutingManeuverEndOfFerry": 20,
                "RoutingManeuverRampRight": 21,
                "RoutingManeuverRampLeft": 22,
                "RoutingManeuverTurnLeftRight": 23,
                "RoutingManeuverTurnRightLeft": 24,
                "RoutingManeuverTurnRightRight": 25,
                "RoutingManeuverTurnLeftLeft": 26,
                "RoutingManeuverPedestrianRamp": 27,
                "RoutingManeuverElevator": 28,
                "RoutingManeuverEscalator": 29,
                "RoutingManeuverStairs": 30,
                "RoutingManeuverDoorPassage": 31
            }
        }
        Enum {
            name: "SatelliteSystem"
            values: {
                "SatelliteSystemGpg": 0,
                "SatelliteSystemSbas": 1,
                "SatelliteSystemGlonass": 2
            }
        }
        Enum {
            name: "SelectFeaturesStatus"
            values: {
                "SelectFeaturesStatusReady": 0,
                "SelectFeaturesStatusInProgress": 1,
                "SelectFeaturesStatusCompleted": 2,
                "SelectFeaturesStatusErrored": 3
            }
        }
        Enum {
            name: "SelectionMethod"
            values: {
                "SelectionMethodAdd": 0,
                "SelectionMethodNew": 1,
                "SelectionMethodSubtract": 2
            }
        }
        Enum {
            name: "SimpleFillSymbolStyle"
            values: {
                "SimpleFillSymbolStyleBackwardDiagonal": 0,
                "SimpleFillSymbolStyleCross": 1,
                "SimpleFillSymbolStyleDiagonalCross": 2,
                "SimpleFillSymbolStyleForwardDiagonal": 3,
                "SimpleFillSymbolStyleHorizontal": 4,
                "SimpleFillSymbolStyleNull": 5,
                "SimpleFillSymbolStyleSolid": 6,
                "SimpleFillSymbolStyleVertical": 7
            }
        }
        Enum {
            name: "SimpleLineSymbolStyle"
            values: {
                "SimpleLineSymbolStyleDash": 0,
                "SimpleLineSymbolStyleDashDot": 1,
                "SimpleLineSymbolStyleDashDotDot": 2,
                "SimpleLineSymbolStyleDot": 3,
                "SimpleLineSymbolStyleNull": 4,
                "SimpleLineSymbolStyleSolid": 5
            }
        }
        Enum {
            name: "SimpleMarkerSymbolStyle"
            values: {
                "SimpleMarkerSymbolStyleCircle": 0,
                "SimpleMarkerSymbolStyleCross": 1,
                "SimpleMarkerSymbolStyleDiamond": 2,
                "SimpleMarkerSymbolStyleSquare": 3,
                "SimpleMarkerSymbolStyleX": 4,
                "SimpleMarkerSymbolStyleTriangle": 5
            }
        }
        Enum {
            name: "SolveCode"
            values: {
                "SolveCodeInsufficientNumberOfStops": 0,
                "SolveCodeStopUnlocated": 1,
                "SolveCodeStopLocatedOnNonTraversableElement": 2,
                "SolveCodeStopLocatedOnSoftRestrictedElement": 3,
                "SolveCodePointBarrierUnlocated": 4,
                "SolveCodePointBarrierInvalidAddedCostAttributeName": 5,
                "SolveCodeLineBarrierInvalidScaledCostAttributeName": 6,
                "SolveCodeLineBarrierDoesNotCoverAnyNetworkElements": 7,
                "SolveCodePolygonBarrierInvalidScaledCostAttributeName": 8,
                "SolveCodePolygonBarrierDoesNotCoverAnyNetworkElements": 9,
                "SolveCodeInvalidImpedanceAttribute": 10,
                "SolveCodeInvalidRestrictionAttribute": 11,
                "SolveCodeInvalidAccumulateAttribute": 12,
                "SolveCodeInvalidDirectionsTimeAttribute": 13,
                "SolveCodeInvalidDirectionsDistanceAttribute": 14,
                "SolveCodeInvalidAttributeParametersAttributeName": 15,
                "SolveCodeInvalidAttributeParametersParameterName": 16,
                "SolveCodeInvalidAttributeParametersValueType": 17,
                "SolveCodeInvalidAttributeParametersRestrictionUsage": 18,
                "SolveCodeNuetralAttributeParametersRestrictionUsageValue": 19,
                "SolveCodeTraversedSoftRestrictionElement": 20,
                "SolveCodeNetworkHasNoHierarchyAttributes": 21,
                "SolveCodeNoPathFoundBetweenStops": 22,
                "SolveCodeUndefinedInputSpatialReference": 23,
                "SolveCodeUndefinedOuputSpatialReference": 24,
                "SolveCodeInvalidDirectionsStyle": 25,
                "SolveCodeInvalidDirectionsLanguage": 26,
                "SolveCodeDirectionsTimeAndImpedanceAttributeMismatch": 27,
                "SolveCodeInvalidDirectionsRoadClassAttribute": 28,
                "SolveCodeLocalStartTimeInvalid": 29,
                "SolveCodeUTCStartTimeAtStopsInvalid": 30,
                "SolveCodeStopsLocalTimeWindowInvalid": 31,
                "SolveCodeStopsUTCTimeWindowInvalid": 32,
                "SolveCodeStopsTimeWindowInverted": 33,
                "SolveCodeUnknownError": 34
            }
        }
        Enum {
            name: "SolveStatus"
            values: {
                "SolveStatusReady": 0,
                "SolveStatusInProgress": 1,
                "SolveStatusCompleted": 2,
                "SolveStatusErrored": 3
            }
        }
        Enum {
            name: "SpatialReferenceType"
            values: {
                "SpatialReferenceTypeGeographic": 0,
                "SpatialReferenceTypeLocal": 1,
                "SpatialReferenceTypeProjected": 2
            }
        }
        Enum {
            name: "SpatialRelationship"
            values: {
                "SpatialRelationshipContains": 0,
                "SpatialRelationshipCrosses": 1,
                "SpatialRelationshipEnvelopeIntersects": 2,
                "SpatialRelationshipIndexIntersects": 3,
                "SpatialRelationshipIntersects": 4,
                "SpatialRelationshipOverlaps": 5,
                "SpatialRelationshipTouches": 6,
                "SpatialRelationshipWithin": 7
            }
        }
        Enum {
            name: "StatisticsType"
            values: {
                "StatisticsTypeCount": 0,
                "StatisticsTypeSum": 1,
                "StatisticsTypeMin": 2,
                "StatisticsTypeMax": 3,
                "StatisticsTypeAverage": 4,
                "StatisticsTypeStandardDeviation": 5,
                "StatisticsTypeVariance": 6,
                "StatisticsTypeNoType": 7
            }
        }
        Enum {
            name: "SymbolDictionaryType"
            values: {
                "SymbolDictionaryTypeMil2525C": 0,
                "SymbolDictionaryTypeApp6B": 1
            }
        }
        Enum {
            name: "SymbolType"
            values: {
                "SymbolTypeSymbol": 0,
                "SymbolTypeMarkerSymbol": 1,
                "SymbolTypeLineSymbol": 2,
                "SymbolTypeFillSymbol": 3,
                "SymbolTypeCompositeSymbol": 6,
                "SymbolTypeSimpleMarkerSymbol": 7,
                "SymbolTypePictureMarkerSymbol": 8,
                "SymbolTypeTextureFontMarkerSymbol": 9,
                "SymbolTypeTextSymbol": 10,
                "SymbolTypeSimpleLineSymbol": 11,
                "SymbolTypeSimpleFillSymbol": 12,
                "SymbolTypePictureFillSymbol": 13
            }
        }
        Enum {
            name: "SyncDirection"
            values: {
                "SyncDirectionDownload": 0,
                "SyncDirectionUpload": 1,
                "SyncDirectionBidirectional": 2
            }
        }
        Enum {
            name: "SyncModel"
            values: {
                "SyncModelGeodatabase": 0,
                "SyncModelLayer": 1
            }
        }
        Enum {
            name: "SyncStatus"
            values: {
                "SyncStatusReady": 0,
                "SyncStatusInProgress": 1,
                "SyncStatusCompleted": 2,
                "SyncStatusErrored": 3
            }
        }
        Enum {
            name: "TimeOptionsUnits"
            values: {
                "TimeOptionsUnitsUnknown": 0,
                "TimeOptionsUnitsCenturies": 1,
                "TimeOptionsUnitsDecades": 2,
                "TimeOptionsUnitsYears": 3,
                "TimeOptionsUnitsMonths": 4,
                "TimeOptionsUnitsWeeks": 5,
                "TimeOptionsUnitsDays": 6,
                "TimeOptionsUnitsHours": 7,
                "TimeOptionsUnitsMinutes": 8,
                "TimeOptionsUnitsSeconds": 9,
                "TimeOptionsUnitsMilliseconds": 10
            }
        }
        Enum {
            name: "ExportStatus"
            values: {
                "ExportStatusReady": 0,
                "ExportStatusInProgress": 1,
                "ExportStatusCompleted": 2,
                "ExportStatusErrored": 3
            }
        }
        Enum {
            name: "EstimateStatus"
            values: {
                "EstimateStatusReady": 0,
                "EstimateStatusInProgress": 1,
                "EstimateStatusCompleted": 2,
                "EstimateStatusErrored": 3
            }
        }
        Enum {
            name: "UnitType"
            values: {
                "UnitTypeLinear": 0,
                "UnitTypeAngular": 1,
                "UnitTypeArea": 2,
                "UnitTypeNoType": 3
            }
        }
        Enum {
            name: "UtmConversionMode"
            values: {
                "UtmConversionModeNoMode": 0,
                "UtmConversionModeUseNorthSouthLatitudeIndicators": 1
            }
        }
        Enum {
            name: "UTurnRestriction"
            values: {
                "UTurnRestrictionAllowBacktrack": 0,
                "UTurnRestrictionAtDeadEndsOnly": 1,
                "UTurnRestrictionNoBackTrack": 2,
                "UTurnRestrictionAtDeadEndsAndIntersections": 3,
                "UTurnRestrictionServerDefault": 4
            }
        }
        Enum {
            name: "VerticalAlignment"
            values: {
                "VerticalAlignmentBottom": 0,
                "VerticalAlignmentMiddle": 1,
                "VerticalAlignmentTop": 2,
                "VerticalAlignmentBaseLine": 3
            }
        }
        Enum {
            name: "WorkspaceFactoryType"
            values: {
                "WorkspaceFactoryTypeSde": 0,
                "WorkspaceFactoryTypeShapeFile": 1,
                "WorkspaceFactoryTypeFileGeodatabase": 2,
                "WorkspaceFactoryTypeRaster": 3,
                "WorkspaceFactoryTypeNoType": 4
            }
        }
    }
    Component {
        name: "QmlEnvelope"
        prototype: "QmlGeometry"
        exports: ["ArcGIS.Runtime/Envelope 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "xMin"; type: "double" }
        Property { name: "xMax"; type: "double" }
        Property { name: "yMin"; type: "double" }
        Property { name: "yMax"; type: "double" }
        Property { name: "width"; type: "double"; isReadonly: true }
        Property { name: "height"; type: "double"; isReadonly: true }
        Property { name: "center"; type: "QmlPoint"; isReadonly: true; isPointer: true }
        Property { name: "centerX"; type: "double"; isReadonly: true }
        Property { name: "centerY"; type: "double"; isReadonly: true }
        Property { name: "lowerLeft"; type: "QmlPoint"; isReadonly: true; isPointer: true }
        Property { name: "upperLeft"; type: "QmlPoint"; isReadonly: true; isPointer: true }
        Property { name: "lowerRight"; type: "QmlPoint"; isReadonly: true; isPointer: true }
        Property { name: "upperRight"; type: "QmlPoint"; isReadonly: true; isPointer: true }
        Property { name: "size"; type: "QSizeF"; isReadonly: true }
        Property { name: "rect"; type: "QRectF" }
        Signal { name: "geometryChanged" }
        Method {
            name: "setCoords"
            type: "QmlEnvelope*"
            Parameter { name: "xMin"; type: "double" }
            Parameter { name: "yMin"; type: "double" }
            Parameter { name: "xMax"; type: "double" }
            Parameter { name: "yMax"; type: "double" }
        }
        Method { name: "normalize"; type: "QmlEnvelope*" }
        Method {
            name: "inflate"
            type: "QmlEnvelope*"
            Parameter { name: "dx"; type: "double" }
            Parameter { name: "dy"; type: "double" }
        }
        Method {
            name: "offset"
            type: "QmlEnvelope*"
            Parameter { name: "dx"; type: "double" }
            Parameter { name: "dy"; type: "double" }
        }
        Method {
            name: "isIntersecting"
            type: "bool"
            Parameter { name: "envelope"; type: "QmlEnvelope"; isPointer: true }
        }
        Method {
            name: "intersect"
            type: "bool"
            Parameter { name: "envelope"; type: "QmlEnvelope"; isPointer: true }
        }
        Method {
            name: "mergeEnvelope"
            type: "QmlEnvelope*"
            Parameter { name: "envelope"; type: "QmlEnvelope"; isPointer: true }
        }
        Method {
            name: "mergePoint"
            type: "QmlEnvelope*"
            Parameter { name: "point"; type: "QmlPoint"; isPointer: true }
        }
        Method {
            name: "centerAt"
            type: "QmlEnvelope*"
            Parameter { name: "center"; type: "QmlPoint"; isPointer: true }
        }
        Method {
            name: "centerAt"
            type: "QmlEnvelope*"
            Parameter { name: "center"; type: "QmlPoint"; isPointer: true }
            Parameter { name: "width"; type: "double" }
            Parameter { name: "height"; type: "double" }
        }
        Method {
            name: "queryCornerByVal"
            type: "QmlPoint*"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "scale"
            type: "QmlEnvelope*"
            Parameter { name: "scaleFactor"; type: "double" }
        }
        Method {
            name: "toPolygon"
            type: "QmlPolygon*"
            Parameter { name: "reverse"; type: "bool" }
        }
        Method { name: "toPolygon"; type: "QmlPolygon*" }
    }
    Component {
        name: "QmlError"
        prototype: "QObject"
        exports: ["ArcGIS.Runtime/RuntimeError 10.26"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "category"; type: "QmlEnums::Category"; isReadonly: true }
        Property { name: "description"; type: "string"; isReadonly: true }
    }
    Component {
        name: "QmlExportTileCacheParameters"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/ExportTileCacheParameters 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "createAsTilePackage"; type: "bool" }
        Property { name: "extent"; type: "QmlGeometry"; isPointer: true }
        Property { name: "minScale"; type: "double" }
        Property { name: "maxScale"; type: "double" }
        Property { name: "minLevelOfDetail"; type: "int" }
        Property { name: "maxLevelOfDetail"; type: "int" }
        Property { name: "recompressTileCache"; type: "bool" }
        Property { name: "recompressionQuality"; type: "int" }
        Property { name: "json"; type: "QVariantMap" }
        Signal { name: "levelsChanged" }
        Method {
            name: "initialize"
            Parameter { name: "mapServiceInfo"; type: "QmlMapServiceInfo"; isPointer: true }
        }
    }
    Component {
        name: "QmlExportTileCacheStatus"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/ExportTileCacheStatus 10.26"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "jobId"; type: "string"; isReadonly: true }
        Property { name: "url"; type: "string"; isReadonly: true }
        Property { name: "status"; type: "QmlEnums::JobStatus"; isReadonly: true }
        Property { name: "statusString"; type: "string"; isReadonly: true }
        Property { name: "json"; type: "QVariantMap" }
    }
    Component {
        name: "QmlExportTileCacheTask"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/ExportTileCacheTask 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "url"; type: "string" }
        Property { name: "credentials"; type: "QmlUserCredentials"; isPointer: true }
        Property { name: "recoveryDir"; type: "string" }
        Property { name: "tileCachePath"; type: "string"; isReadonly: true }
        Property { name: "tileCacheErrors"; type: "QStringList"; isReadonly: true }
        Property { name: "estimatedSize"; type: "string"; isReadonly: true }
        Property { name: "exportStatus"; type: "QmlEnums::ExportStatus"; isReadonly: true }
        Property { name: "estimateStatus"; type: "QmlEnums::EstimateStatus"; isReadonly: true }
        Property {
            name: "tileCacheJobStatus"
            type: "QmlExportTileCacheStatus"
            isReadonly: true
            isPointer: true
        }
        Method {
            name: "estimateTileCacheSize"
            Parameter { name: "parameters"; type: "QVariant" }
        }
        Method {
            name: "exportTileCache"
            Parameter { name: "parameters"; type: "QVariant" }
            Parameter { name: "path"; type: "string" }
        }
    }
    Component {
        name: "QmlFeature"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/Feature 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "uniqueId"; type: "string"; isReadonly: true }
        Property { name: "attributeNames"; type: "QStringList"; isReadonly: true }
        Property { name: "attributes"; type: "QVariantMap" }
        Property { name: "typedAttributes"; type: "QVariantMap" }
        Property { name: "geometry"; type: "QmlGeometry"; isPointer: true }
        Property { name: "json"; type: "QVariantMap" }
        Method {
            name: "attributeValue"
            type: "QVariant"
            Parameter { name: "fieldName"; type: "string" }
        }
        Method {
            name: "setAttributeValue"
            Parameter { name: "fieldName"; type: "string" }
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "removeAttribute"
            Parameter { name: "fieldName"; type: "string" }
        }
        Method {
            name: "typedAttributeValue"
            type: "QVariant"
            Parameter { name: "fieldName"; type: "string" }
        }
    }
    Component {
        name: "QmlFeatureEditError"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/FeatureEditError 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "code"; type: "int"; isReadonly: true }
        Property { name: "description"; type: "string"; isReadonly: true }
        Property { name: "json"; type: "QVariantMap" }
    }
    Component {
        name: "QmlFeatureIterator"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/FeatureIterator 10.26"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "iteratorType"; type: "QmlEnums::FeatureIteratorType"; isReadonly: true }
    }
    Component {
        name: "QmlFeatureLayer"
        prototype: "QmlLayer"
        exports: ["ArcGIS.Runtime/FeatureLayer 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "featureTable"; type: "QmlFeatureTable"; isPointer: true }
        Property { name: "definitionExpression"; type: "string" }
        Property { name: "selectedFeatures"; type: "QmlFeature"; isList: true; isReadonly: true }
        Property { name: "selectionIds"; type: "QStringList"; isReadonly: true }
        Property { name: "selectionColor"; type: "QColor" }
        Property { name: "renderer"; type: "QmlRenderer"; isPointer: true }
        Property { name: "enableLabels"; type: "bool" }
        Property { name: "geometryType"; type: "QmlEnums::GeometryType"; isReadonly: true }
        Property { name: "geometryTypeString"; type: "string"; isReadonly: true }
        Signal { name: "selectionChanged" }
        Method {
            name: "isFeatureSelected"
            type: "bool"
            Parameter { name: "id"; type: "string" }
        }
        Method {
            name: "selectFeature"
            Parameter { name: "id"; type: "string" }
        }
        Method {
            name: "selectFeaturesByQuery"
            Parameter { name: "query"; type: "QVariant" }
            Parameter { name: "selectionMethod"; type: "QmlEnums::SelectionMethod" }
        }
        Method {
            name: "selectFeaturesByQuery"
            Parameter { name: "query"; type: "QVariant" }
        }
        Method {
            name: "selectFeaturesFromIterator"
            Parameter { name: "iterator"; type: "QmlFeatureQueryIterator"; isPointer: true }
        }
        Method {
            name: "selectFeaturesByIds"
            Parameter { name: "ids"; type: "QStringList" }
            Parameter { name: "inclusive"; type: "bool" }
        }
        Method {
            name: "unselectFeature"
            Parameter { name: "id"; type: "string" }
        }
        Method {
            name: "unselectFeaturesFromIterator"
            Parameter { name: "iterator"; type: "QmlFeatureQueryIterator"; isPointer: true }
        }
        Method {
            name: "unselectFeaturesByIds"
            Parameter { name: "ids"; type: "QStringList" }
        }
        Method { name: "clearSelection" }
        Method {
            name: "featureVisible"
            type: "bool"
            Parameter { name: "oid"; type: "string" }
        }
        Method {
            name: "setFeatureVisible"
            Parameter { name: "oid"; type: "string" }
            Parameter { name: "visible"; type: "bool" }
        }
        Method {
            name: "findFeatures"
            type: "QStringList"
            Parameter { name: "xPixel"; type: "float" }
            Parameter { name: "yPixel"; type: "float" }
            Parameter { name: "tolerance"; type: "int" }
            Parameter { name: "numberOfResults"; type: "int" }
        }
    }
    Component {
        name: "QmlFeatureLayerInfo"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/FeatureLayerInfo 10.26"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "featureLayerId"; type: "int"; isReadonly: true }
        Property { name: "name"; type: "string"; isReadonly: true }
        Property { name: "url"; type: "string" }
        Property { name: "type"; type: "string"; isReadonly: true }
        Property { name: "definitionExpression"; type: "string"; isReadonly: true }
        Property { name: "minScale"; type: "double"; isReadonly: true }
        Property { name: "maxScale"; type: "double"; isReadonly: true }
        Property { name: "defaultVisible"; type: "bool"; isReadonly: true }
        Property { name: "parentLayerId"; type: "int"; isReadonly: true }
        Property { name: "subLayerIds"; type: "QList<int>"; isReadonly: true }
        Property { name: "geometryType"; type: "QmlEnums::GeometryType"; isReadonly: true }
        Property { name: "geometryTypeString"; type: "string"; isReadonly: true }
        Property { name: "extent"; type: "QmlEnvelope"; isReadonly: true; isPointer: true }
        Property { name: "fields"; type: "QmlField"; isList: true; isReadonly: true }
        Property { name: "objectIdField"; type: "string"; isReadonly: true }
        Property { name: "globalIdField"; type: "string"; isReadonly: true }
        Property { name: "typeIdField"; type: "string"; isReadonly: true }
        Property { name: "displayField"; type: "string"; isReadonly: true }
        Property { name: "editFieldInfo"; type: "QmlEditFieldsInfo"; isReadonly: true; isPointer: true }
        Property { name: "subTypes"; type: "QmlFeatureType"; isList: true; isReadonly: true }
        Property { name: "json"; type: "QVariantMap" }
        Property { name: "allowGeometryUpdates"; type: "bool"; isReadonly: true }
        Property { name: "dataVersioned"; type: "bool"; isReadonly: true }
        Property { name: "supportsRollbackOnFailureParameter"; type: "bool"; isReadonly: true }
        Property { name: "supportsStatistics"; type: "bool"; isReadonly: true }
        Property { name: "supportsAdvancedQueries"; type: "bool"; isReadonly: true }
        Property { name: "hasAttachments"; type: "bool"; isReadonly: true }
        Property { name: "capabilities"; type: "string"; isReadonly: true }
        Property { name: "hasZ"; type: "bool"; isReadonly: true }
        Property { name: "hasM"; type: "bool"; isReadonly: true }
        Property { name: "defaultZ"; type: "double"; isReadonly: true }
        Property { name: "defaultZEnabled"; type: "bool"; isReadonly: true }
        Property { name: "renderer"; type: "QmlRenderer"; isReadonly: true; isPointer: true }
        Property { name: "drawingInfo"; type: "QmlDrawingInfo"; isReadonly: true; isPointer: true }
        Property { name: "relationships"; type: "QmlLayerRelationship"; isList: true; isReadonly: true }
        Property { name: "timeInfo"; type: "QmlTimeInfo"; isReadonly: true; isPointer: true }
        Property {
            name: "ownershipBasedAccessControlForFeatures"
            type: "QmlOwnershipBasedAccessControlForFeatures"
            isReadonly: true
            isPointer: true
        }
        Signal { name: "layerInfoChanged" }
    }
    Component {
        name: "QmlFeatureQueryIterator"
        prototype: "QmlFeatureIterator"
        exports: ["ArcGIS.Runtime/FeatureQueryIterator 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "size"; type: "string"; isReadonly: true }
        Method { name: "hasNext"; type: "bool" }
        Method { name: "next"; type: "QmlFeature*" }
        Method { name: "first"; type: "QmlFeature*" }
        Method { name: "reset" }
        Method {
            name: "each"
            Parameter { name: "function"; type: "QJSValue" }
        }
    }
    Component {
        name: "QmlFeatureResult"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/FeatureResult 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "featureResultType"; type: "QmlEnums::FeatureResultType"; isReadonly: true }
        Property { name: "objectIdFieldName"; type: "string"; isReadonly: true }
        Property { name: "displayFieldName"; type: "string"; isReadonly: true }
        Property { name: "fields"; type: "QmlField"; isList: true; isReadonly: true }
        Property { name: "featureCount"; type: "string"; isReadonly: true }
        Property { name: "iterator"; type: "QmlFeatureIterator"; isReadonly: true; isPointer: true }
    }
    Component {
        name: "QmlFeatureServiceInfo"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/FeatureServiceInfo 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "url"; type: "string"; isReadonly: true }
        Property { name: "version"; type: "string"; isReadonly: true }
        Property { name: "copyrightText"; type: "string"; isReadonly: true }
        Property { name: "description"; type: "string"; isReadonly: true }
        Property { name: "serviceDescription"; type: "string"; isReadonly: true }
        Property { name: "capabilities"; type: "string"; isReadonly: true }
        Property { name: "supportedQueryFormats"; type: "string"; isReadonly: true }
        Property { name: "layers"; type: "QmlFeatureLayerInfo"; isList: true; isReadonly: true }
        Property { name: "tables"; type: "QmlTable"; isList: true; isReadonly: true }
        Property { name: "maximumRecordCount"; type: "int"; isReadonly: true }
        Property {
            name: "spatialReference"
            type: "QmlSpatialReference"
            isReadonly: true
            isPointer: true
        }
        Property { name: "units"; type: "string"; isReadonly: true }
        Property { name: "fullExtent"; type: "QmlEnvelope"; isReadonly: true; isPointer: true }
        Property { name: "initialExtent"; type: "QmlEnvelope"; isReadonly: true; isPointer: true }
        Property { name: "hasVersionedData"; type: "bool"; isReadonly: true }
        Property { name: "isDisconnectedEditingSupported"; type: "bool"; isReadonly: true }
        Property { name: "hasStaticData"; type: "bool"; isReadonly: true }
        Property { name: "allowGeometryUpdates"; type: "bool"; isReadonly: true }
        Property { name: "isSyncEnabled"; type: "bool"; isReadonly: true }
        Property { name: "defaultZ"; type: "double"; isReadonly: true }
        Property { name: "isDefaultZEnabled"; type: "bool"; isReadonly: true }
        Property {
            name: "syncCapabilities"
            type: "QmlSyncCapabilities"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "editorTrackingInfo"
            type: "QmlEditorTrackingInfo"
            isReadonly: true
            isPointer: true
        }
        Property { name: "json"; type: "QVariantMap" }
        Signal { name: "changed" }
    }
    Component {
        name: "QmlFeatureSet"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/FeatureSet 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "json"; type: "QVariantMap" }
        Property { name: "objectIdFieldName"; type: "string"; isReadonly: true }
        Property { name: "displayFieldName"; type: "string"; isReadonly: true }
        Property { name: "fields"; type: "QmlField"; isList: true; isReadonly: true }
        Property { name: "fieldAliases"; type: "QVariantMap"; isReadonly: true }
        Property { name: "geometryType"; type: "QmlEnums::GeometryType"; isReadonly: true }
        Property { name: "geometryTypeString"; type: "string"; isReadonly: true }
        Property {
            name: "spatialReference"
            type: "QmlSpatialReference"
            isReadonly: true
            isPointer: true
        }
        Property { name: "graphics"; type: "QmlGraphic"; isList: true; isReadonly: true }
        Property { name: "objectIds"; type: "QStringList"; isReadonly: true }
        Property { name: "count"; type: "int"; isReadonly: true }
    }
    Component {
        name: "QmlFeatureTable"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/FeatureTable 10.26"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "featureTableStatus"; type: "QmlEnums::FeatureTableStatus"; isReadonly: true }
        Property { name: "initializationError"; type: "string"; isReadonly: true }
        Property { name: "featureTableType"; type: "QmlEnums::FeatureTableType"; isReadonly: true }
        Property { name: "tableName"; type: "string"; isReadonly: true }
        Property { name: "description"; type: "string"; isReadonly: true }
        Property { name: "copyright"; type: "string"; isReadonly: true }
        Property { name: "serviceDescription"; type: "string"; isReadonly: true }
        Property { name: "hasGeometry"; type: "bool"; isReadonly: true }
        Property { name: "isEditable"; type: "bool"; isReadonly: true }
        Property { name: "fields"; type: "QmlField"; isList: true; isReadonly: true }
        Property { name: "queryIdsResults"; type: "QVariantList"; isReadonly: true }
        Property { name: "queryIdsStatus"; type: "QmlEnums::QueryIdsStatus"; isReadonly: true }
        Property { name: "queryIdsError"; type: "string"; isReadonly: true }
        Property {
            name: "queryFeaturesResult"
            type: "QmlFeatureResult"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "queryFeaturesStatus"
            type: "QmlEnums::QueryFeaturesStatus"
            isReadonly: true
        }
        Property { name: "queryFeaturesError"; type: "string"; isReadonly: true }
        Method {
            name: "onInitializeComplete"
            Parameter { name: "error"; type: "string" }
        }
        Method {
            name: "field"
            type: "QmlField*"
            Parameter { name: "fieldName"; type: "string" }
        }
        Method {
            name: "queryIds"
            Parameter { name: "query"; type: "QVariant" }
        }
        Method {
            name: "queryFeatures"
            Parameter { name: "query"; type: "QVariant" }
        }
        Method {
            name: "addFeature"
            type: "string"
            Parameter { name: "feature"; type: "QVariant" }
        }
        Method {
            name: "addFeatures"
            type: "QStringList"
            Parameter { name: "features"; type: "QVariantList" }
        }
        Method {
            name: "deleteFeature"
            type: "bool"
            Parameter { name: "featureId"; type: "string" }
        }
        Method {
            name: "deleteFeatures"
            type: "bool"
            Parameter { name: "featureIds"; type: "QStringList" }
        }
        Method {
            name: "updateFeature"
            type: "bool"
            Parameter { name: "featureId"; type: "string" }
            Parameter { name: "feature"; type: "QVariant" }
        }
        Method {
            name: "updateFeatures"
            type: "bool"
            Parameter { name: "featureIds"; type: "QStringList" }
            Parameter { name: "features"; type: "QVariantList" }
        }
        Method {
            name: "feature"
            type: "QmlFeature*"
            Parameter { name: "featureId"; type: "string" }
        }
        Method {
            name: "features"
            type: "QVariantList"
            Parameter { name: "featureIds"; type: "QStringList" }
        }
    }
    Component {
        name: "QmlFeatureTableIterator"
        prototype: "QmlFeatureQueryIterator"
        exports: ["ArcGIS.Runtime/FeatureTableIterator 10.26"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "featureTable"; type: "QmlFeatureTable"; isReadonly: true; isPointer: true }
        Property { name: "featureIds"; type: "QStringList"; isReadonly: true }
    }
    Component {
        name: "QmlFeatureTemplate"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/FeatureTemplate 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "name"; type: "string"; isReadonly: true }
        Property { name: "description"; type: "string"; isReadonly: true }
        Property { name: "drawingTool"; type: "QmlEnums::DrawingTool"; isReadonly: true }
        Property { name: "prototype"; type: "QVariantMap"; isReadonly: true }
        Property { name: "json"; type: "QVariantMap" }
    }
    Component {
        name: "QmlFeatureType"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/FeatureType 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "featureTypeId"; type: "string"; isReadonly: true }
        Property { name: "name"; type: "string"; isReadonly: true }
        Property { name: "domains"; type: "QVariantMap"; isReadonly: true }
        Property { name: "templates"; type: "QmlFeatureTemplate"; isList: true; isReadonly: true }
        Property { name: "json"; type: "QVariantMap" }
    }
    Component {
        name: "QmlField"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/Field 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "json"; type: "QVariantMap" }
        Property { name: "fieldType"; type: "QmlEnums::FieldType"; isReadonly: true }
        Property { name: "fieldTypeString"; type: "string"; isReadonly: true }
        Property { name: "name"; type: "string"; isReadonly: true }
        Property { name: "alias"; type: "string"; isReadonly: true }
        Property { name: "length"; type: "int"; isReadonly: true }
        Property { name: "isEditable"; type: "bool"; isReadonly: true }
        Property { name: "domain"; type: "QmlDomain"; isReadonly: true; isPointer: true }
    }
    Component {
        name: "QmlFillSymbol"
        defaultProperty: "outline"
        prototype: "QmlSymbol"
        exports: ["ArcGIS.Runtime/FillSymbol 10.26"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "color"; type: "QColor" }
        Property { name: "outline"; type: "QmlLineSymbol"; isPointer: true }
    }
    Component {
        name: "QmlFindParameters"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/FindParameters 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "searchText"; type: "string" }
        Property { name: "containsSearchText"; type: "bool" }
        Property { name: "searchFields"; type: "QStringList" }
        Property { name: "outputSpatialRef"; type: "QmlSpatialReference"; isPointer: true }
        Property { name: "layerDefinitions"; type: "QVariantMap" }
        Property { name: "layerIds"; type: "QList<int>" }
        Property { name: "returnGeometry"; type: "bool" }
        Property { name: "maxAllowableOffset"; type: "double" }
        Property { name: "geometryPrecision"; type: "int" }
        Property { name: "dynamicLayers"; type: "QmlLayerInfo"; isList: true; isReadonly: true }
        Property { name: "returnZ"; type: "bool" }
        Property { name: "returnM"; type: "bool" }
        Property { name: "geodatabaseVersion"; type: "string" }
        Property { name: "json"; type: "QVariantMap"; isReadonly: true }
    }
    Component {
        name: "QmlFindResult"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/FindResult 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "layerId"; type: "int"; isReadonly: true }
        Property { name: "layerName"; type: "string"; isReadonly: true }
        Property { name: "displayFieldName"; type: "string"; isReadonly: true }
        Property { name: "foundFieldName"; type: "string"; isReadonly: true }
        Property { name: "value"; type: "QVariant"; isReadonly: true }
        Property { name: "feature"; type: "QmlFeature"; isReadonly: true; isPointer: true }
        Property { name: "json"; type: "QVariantMap" }
    }
    Component {
        name: "QmlFindTask"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/FindTask 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "url"; type: "string" }
        Property { name: "credentials"; type: "QmlUserCredentials"; isPointer: true }
        Property { name: "findResults"; type: "QVariantList"; isReadonly: true }
        Property { name: "findError"; type: "QmlServiceError"; isReadonly: true; isPointer: true }
        Property { name: "findTaskStatus"; type: "QmlEnums::FindTaskStatus"; isReadonly: true }
        Method {
            name: "execute"
            Parameter { name: "parameters"; type: "QVariant" }
        }
    }
    Component {
        name: "QmlGenerateGeodatabaseParameters"
        defaultProperty: "layerQueries"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/GenerateGeodatabaseParameters 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "layerIds"; type: "QList<int>" }
        Property { name: "layerQueries"; type: "QmlLayerQuery"; isList: true; isReadonly: true }
        Property { name: "extent"; type: "QmlGeometry"; isPointer: true }
        Property { name: "outSpatialReference"; type: "QmlSpatialReference"; isPointer: true }
        Property { name: "returnAttachments"; type: "bool" }
        Property { name: "syncModel"; type: "QmlEnums::SyncModel" }
        Property { name: "json"; type: "QVariantMap" }
        Method {
            name: "initialize"
            Parameter { name: "featureServiceInfo"; type: "QmlFeatureServiceInfo"; isPointer: true }
        }
    }
    Component {
        name: "QmlGeodatabase"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/Geodatabase 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "valid"; type: "bool"; isReadonly: true }
        Property { name: "path"; type: "string" }
        Property {
            name: "geodatabaseFeatureTables"
            type: "QmlGeodatabaseFeatureTable"
            isList: true
            isReadonly: true
        }
        Property { name: "hasLocalEdits"; type: "bool"; isReadonly: true }
        Property { name: "syncModel"; type: "QmlEnums::SyncModel"; isReadonly: true }
        Property { name: "isSyncEnabled"; type: "bool"; isReadonly: true }
        Property {
            name: "syncGeodatabaseParameters"
            type: "QmlSyncGeodatabaseParameters"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "registerParameters"
            type: "QmlGenerateGeodatabaseParameters"
            isReadonly: true
            isPointer: true
        }
        Property { name: "serviceUrl"; type: "string"; isReadonly: true }
        Property { name: "useAdvancedSymbology"; type: "bool" }
        Method {
            name: "geodatabaseFeatureTableByLayerId"
            type: "QmlGeodatabaseFeatureTable*"
            Parameter { name: "layerId"; type: "int" }
        }
        Method {
            name: "geodatabaseFeatureTable"
            type: "QmlGeodatabaseFeatureTable*"
            Parameter { name: "name"; type: "string" }
        }
    }
    Component {
        name: "QmlGeodatabaseAttachment"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/GeodatabaseAttachment 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "name"; type: "string" }
        Property { name: "contentType"; type: "string" }
        Property { name: "size"; type: "int"; isReadonly: true }
        Property { name: "isDataLocal"; type: "bool"; isReadonly: true }
        Property { name: "attachmentId"; type: "string"; isReadonly: true }
        Property { name: "attachmentUrl"; type: "QUrl"; isReadonly: true }
        Method {
            name: "loadFromFile"
            type: "bool"
            Parameter { name: "url"; type: "QUrl" }
            Parameter { name: "contentType"; type: "string" }
        }
        Method {
            name: "saveToFile"
            type: "string"
            Parameter { name: "url"; type: "QUrl" }
            Parameter { name: "overWrite"; type: "bool" }
        }
    }
    Component {
        name: "QmlGeodatabaseAttachmentModel"
        prototype: "QAbstractListModel"
        exports: ["ArcGIS.Runtime/GeodatabaseAttachmentModel 10.26"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "count"; type: "int"; isReadonly: true }
        Method {
            name: "append"
            Parameter { name: "attachment"; type: "QmlGeodatabaseAttachment"; isPointer: true }
        }
        Method { name: "clear" }
        Method {
            name: "getInfo"
            type: "QVariantMap"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "get"
            type: "QmlGeodatabaseAttachment*"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "remove"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "count"; type: "int" }
        }
        Method {
            name: "remove"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "set"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "attachment"; type: "QmlGeodatabaseAttachment"; isPointer: true }
        }
        Method { name: "refresh" }
        Method {
            name: "isDataLocal"
            type: "bool"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "fetchData"
            Parameter { name: "index"; type: "int" }
        }
    }
    Component {
        name: "QmlGeodatabaseEditError"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/GeodatabaseEditError 10.26"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "layerId"; type: "int"; isReadonly: true }
        Property { name: "objectId"; type: "string"; isReadonly: true }
        Property { name: "globalId"; type: "string"; isReadonly: true }
        Property { name: "attachmentObjectId"; type: "string"; isReadonly: true }
        Property { name: "attachmentGlobalId"; type: "string"; isReadonly: true }
        Property { name: "error"; type: "QmlFeatureEditError"; isReadonly: true; isPointer: true }
        Property { name: "editOperation"; type: "QmlEnums::EditOperation"; isReadonly: true }
        Property { name: "editOperationString"; type: "string"; isReadonly: true }
        Property { name: "isAttachment"; type: "bool"; isReadonly: true }
    }
    Component {
        name: "QmlGeodatabaseFeature"
        prototype: "QmlFeature"
        exports: ["ArcGIS.Runtime/GeodatabaseFeature 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "symbol"; type: "QmlSymbol"; isReadonly: true; isPointer: true }
        Property { name: "table"; type: "QmlGeodatabaseFeatureTable"; isReadonly: true; isPointer: true }
        Property {
            name: "attachmentModel"
            type: "QmlGeodatabaseAttachmentModel"
            isReadonly: true
            isPointer: true
        }
    }
    Component {
        name: "QmlGeodatabaseFeatureServiceTable"
        prototype: "QmlGeodatabaseFeatureTable"
        exports: ["ArcGIS.Runtime/GeodatabaseFeatureServiceTable 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "valid"; type: "bool"; isReadonly: true }
        Property { name: "url"; type: "QUrl" }
        Property { name: "credentials"; type: "QmlUserCredentials"; isPointer: true }
        Property { name: "spatialReference"; type: "QmlSpatialReference"; isPointer: true }
        Property { name: "extent"; type: "QmlEnvelope"; isReadonly: true; isPointer: true }
        Property { name: "definitionExpression"; type: "string" }
        Property { name: "bufferFactor"; type: "double" }
        Property { name: "useAdvancedSymbology"; type: "bool" }
        Property {
            name: "queryServiceFeaturesStatus"
            type: "QmlEnums::QueryFeaturesStatus"
            isReadonly: true
        }
        Property {
            name: "queryServiceFeaturesResult"
            type: "QmlFeatureResult"
            isReadonly: true
            isPointer: true
        }
        Property { name: "queryServiceFeaturesError"; type: "string"; isReadonly: true }
        Property {
            name: "applyFeatureEditsStatus"
            type: "QmlEnums::ApplyEditsStatus"
            isReadonly: true
        }
        Property {
            name: "applyFeatureEditsErrors"
            type: "QmlGeodatabaseEditError"
            isList: true
            isReadonly: true
        }
        Property {
            name: "applyAttachmentEditsStatus"
            type: "QmlEnums::ApplyEditsStatus"
            isReadonly: true
        }
        Property {
            name: "applyAttachmentEditsErrors"
            type: "QmlGeodatabaseEditError"
            isList: true
            isReadonly: true
        }
        Method { name: "initialize" }
        Method {
            name: "lookupObjectId"
            type: "string"
            Parameter { name: "objectId"; type: "string" }
        }
        Method {
            name: "refreshFeatures"
            Parameter { name: "preserveEdits"; type: "bool" }
        }
        Method { name: "refreshFeatures" }
        Method {
            name: "queryServiceFeatures"
            Parameter { name: "query"; type: "QVariant" }
        }
        Method { name: "applyFeatureEdits" }
        Method { name: "applyAttachmentEdits" }
    }
    Component {
        name: "QmlGeodatabaseFeatureTable"
        prototype: "QmlFeatureTable"
        exports: ["ArcGIS.Runtime/GeodatabaseFeatureTable 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "geodatabase"; type: "QmlGeodatabase"; isPointer: true }
        Property { name: "featureServiceLayerId"; type: "int" }
        Property { name: "featureServiceLayerName"; type: "string" }
        Property { name: "extent"; type: "QmlEnvelope"; isReadonly: true; isPointer: true }
        Property { name: "geometryType"; type: "QmlEnums::GeometryType"; isReadonly: true }
        Property { name: "geometryTypeString"; type: "string"; isReadonly: true }
        Property { name: "numberOfFeatures"; type: "string"; isReadonly: true }
        Property {
            name: "spatialReference"
            type: "QmlSpatialReference"
            isReadonly: true
            isPointer: true
        }
        Property { name: "isTable"; type: "bool"; isReadonly: true }
        Property { name: "isTimeAware"; type: "bool"; isReadonly: true }
        Property { name: "defaultDefinitionExpression"; type: "string"; isReadonly: true }
        Property { name: "objectIdField"; type: "string"; isReadonly: true }
        Property { name: "displayField"; type: "string"; isReadonly: true }
        Property { name: "globalIdField"; type: "string"; isReadonly: true }
        Property { name: "typeIdField"; type: "string"; isReadonly: true }
        Property { name: "isAllowGeometryUpdates"; type: "bool"; isReadonly: true }
        Property { name: "capabilities"; type: "string"; isReadonly: true }
        Property { name: "editFieldsInfo"; type: "QmlEditFieldsInfo"; isReadonly: true; isPointer: true }
        Property { name: "editableAttributeFields"; type: "QmlField"; isList: true; isReadonly: true }
        Property { name: "featureTypes"; type: "QmlFeatureType"; isList: true; isReadonly: true }
        Property { name: "relationships"; type: "QmlRelationship"; isList: true; isReadonly: true }
        Property { name: "featureTemplates"; type: "QmlFeatureTemplate"; isList: true; isReadonly: true }
        Property { name: "addedFeatures"; type: "QVariantList"; isReadonly: true }
        Property { name: "deletedFeatures"; type: "QStringList"; isReadonly: true }
        Property { name: "updatedFeatures"; type: "QVariantList"; isReadonly: true }
        Property { name: "hasAttachments"; type: "bool"; isReadonly: true }
        Property { name: "attachmentInfos"; type: "QVariantList"; isReadonly: true }
        Property { name: "queryAttachmentInfosError"; type: "string"; isReadonly: true }
        Property {
            name: "queryAttachmentInfosStatus"
            type: "QmlEnums::QueryAttachmentInfosStatus"
            isReadonly: true
        }
        Property {
            name: "addAttachmentResult"
            type: "QmlAttachmentEditResult"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "addAttachmentStatus"
            type: "QmlEnums::AttachmentEditStatus"
            isReadonly: true
        }
        Property {
            name: "updateAttachmentResult"
            type: "QmlAttachmentEditResult"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "updateAttachmentStatus"
            type: "QmlEnums::AttachmentEditStatus"
            isReadonly: true
        }
        Property {
            name: "deleteAttachmentResult"
            type: "QmlAttachmentEditResult"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "deleteAttachmentStatus"
            type: "QmlEnums::AttachmentEditStatus"
            isReadonly: true
        }
        Property {
            name: "retrieveAttachmentResult"
            type: "QmlGeodatabaseAttachment"
            isReadonly: true
            isPointer: true
        }
        Property { name: "retrieveAttachmentError"; type: "string"; isReadonly: true }
        Property {
            name: "retrieveAttachmentStatus"
            type: "QmlEnums::RetrieveAttachmentStatus"
            isReadonly: true
        }
        Property {
            name: "ownershipBasedAccessControlForFeatures"
            type: "QmlOwnershipBasedAccessControlForFeatures"
            isReadonly: true
            isPointer: true
        }
        Property { name: "relatedResults"; type: "QVariantMap"; isReadonly: true }
        Property { name: "relatedError"; type: "string"; isReadonly: true }
        Property { name: "queryRelatedStatus"; type: "QmlEnums::QueryRelatedStatus"; isReadonly: true }
        Property { name: "geodatabaseFeatureTableValid"; type: "bool"; isReadonly: true }
        Property { name: "json"; type: "QVariantMap" }
        Method {
            name: "checkFeatureExists"
            type: "bool"
            Parameter { name: "featureId"; type: "qulonglong" }
        }
        Method {
            name: "featureType"
            type: "QmlFeatureType*"
            Parameter { name: "type"; type: "string" }
        }
        Method {
            name: "createFeatureWithTemplate"
            type: "QmlGeodatabaseFeature*"
            Parameter { name: "featureTemplate"; type: "QmlFeatureTemplate"; isPointer: true }
            Parameter { name: "geometry"; type: "QVariant" }
        }
        Method {
            name: "createFeatureWithType"
            type: "QmlGeodatabaseFeature*"
            Parameter { name: "featureType"; type: "QmlFeatureType"; isPointer: true }
            Parameter { name: "geometry"; type: "QVariant" }
        }
        Method {
            name: "editInfo"
            type: "QmlEditInfo*"
            Parameter { name: "geodatabaseFeature"; type: "QVariant" }
            Parameter { name: "action"; type: "QmlEnums::ActionType" }
        }
        Method { name: "clearEdits" }
        Method {
            name: "queryAttachmentInfos"
            Parameter { name: "featureId"; type: "string" }
        }
        Method {
            name: "addAttachment"
            Parameter { name: "featureId"; type: "string" }
            Parameter { name: "attachment"; type: "QmlGeodatabaseAttachment"; isPointer: true }
        }
        Method {
            name: "updateAttachment"
            Parameter { name: "featureId"; type: "string" }
            Parameter { name: "attachmentId"; type: "string" }
            Parameter { name: "attachment"; type: "QmlGeodatabaseAttachment"; isPointer: true }
        }
        Method {
            name: "deleteAttachment"
            Parameter { name: "featureId"; type: "string" }
            Parameter { name: "attachmentId"; type: "string" }
        }
        Method {
            name: "retrieveAttachment"
            Parameter { name: "featureId"; type: "string" }
            Parameter { name: "attachmentId"; type: "string" }
        }
        Method {
            name: "editCapabilities"
            type: "QmlEditCapabilities*"
            Parameter { name: "geodatabaseFeature"; type: "QVariant" }
        }
        Method {
            name: "queryRelated"
            Parameter { name: "query"; type: "QVariant" }
        }
        Method {
            name: "createNewFeature"
            type: "QmlGeodatabaseFeature*"
            Parameter { name: "parent"; type: "QObject"; isPointer: true }
        }
        Method { name: "createNewFeature"; type: "QmlGeodatabaseFeature*" }
        Method {
            name: "createNewFeature"
            type: "QmlGeodatabaseFeature*"
            Parameter { name: "attributes"; type: "QVariantMap" }
            Parameter { name: "geometry"; type: "QVariant" }
            Parameter { name: "parent"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "createNewFeature"
            type: "QmlGeodatabaseFeature*"
            Parameter { name: "attributes"; type: "QVariantMap" }
            Parameter { name: "geometry"; type: "QVariant" }
        }
    }
    Component {
        name: "QmlGeodatabaseFeatureTableEditErrors"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/GeodatabaseFeatureTableEditErrors 10.26"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property {
            name: "featureEditErrors"
            type: "QmlGeodatabaseEditError"
            isList: true
            isReadonly: true
        }
        Property {
            name: "attachmentEditErrors"
            type: "QmlGeodatabaseEditError"
            isList: true
            isReadonly: true
        }
        Property { name: "json"; type: "QVariantMap" }
    }
    Component {
        name: "QmlGeodatabaseFeatureTableIterator"
        prototype: "QmlFeatureTableIterator"
        exports: ["ArcGIS.Runtime/GeodatabaseFeatureTableIterator 10.26"]
        exportMetaObjectRevisions: [0]
        Property {
            name: "featureTable"
            type: "QmlGeodatabaseFeatureTable"
            isReadonly: true
            isPointer: true
        }
        Method { name: "next"; type: "QmlGeodatabaseFeature*" }
        Method { name: "first"; type: "QmlGeodatabaseFeature*" }
        Method {
            name: "each"
            Parameter { name: "function"; type: "QJSValue" }
        }
    }
    Component {
        name: "QmlGeodatabaseSyncStatusInfo"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/GeodatabaseSyncStatusInfo 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "geodatabaseName"; type: "string"; isReadonly: true }
        Property { name: "jobId"; type: "string"; isReadonly: true }
        Property { name: "replicaServerGen"; type: "string"; isReadonly: true }
        Property { name: "submissionTime"; type: "QDateTime"; isReadonly: true }
        Property { name: "lastUpdatedTime"; type: "QDateTime"; isReadonly: true }
        Property { name: "resultsUrl"; type: "string"; isReadonly: true }
        Property { name: "updateUrl"; type: "string"; isReadonly: true }
        Property { name: "status"; type: "QmlEnums::GeodatabaseStatus"; isReadonly: true }
        Property { name: "responseType"; type: "QmlEnums::GeodatabaseResponseType"; isReadonly: true }
        Property { name: "deltaSize"; type: "string"; isReadonly: true }
        Property { name: "deltaUploadProgress"; type: "string"; isReadonly: true }
        Property { name: "statusString"; type: "string"; isReadonly: true }
        Property { name: "responseTypeString"; type: "string"; isReadonly: true }
        Property { name: "json"; type: "QVariantMap" }
    }
    Component {
        name: "QmlGeodatabaseSyncTask"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/GeodatabaseSyncTask 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "url"; type: "string" }
        Property { name: "credentials"; type: "QmlUserCredentials"; isPointer: true }
        Property { name: "recoveryDir"; type: "string" }
        Property {
            name: "syncErrors"
            type: "QmlGeodatabaseFeatureTableEditErrors"
            isReadonly: true
            isPointer: true
        }
        Property { name: "geodatabasePath"; type: "string"; isReadonly: true }
        Property { name: "syncStatus"; type: "QmlEnums::SyncStatus"; isReadonly: true }
        Property { name: "generateStatus"; type: "QmlEnums::GenerateStatus"; isReadonly: true }
        Property {
            name: "geodatabaseSyncStatusInfo"
            type: "QmlGeodatabaseSyncStatusInfo"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "generateGeodatabaseError"
            type: "QmlServiceError"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "syncGeodatabaseError"
            type: "QmlServiceError"
            isReadonly: true
            isPointer: true
        }
        Method {
            name: "generateGeodatabase"
            Parameter { name: "parameters"; type: "QVariant" }
            Parameter { name: "filename"; type: "string" }
            Parameter { name: "useCachedJob"; type: "bool" }
        }
        Method {
            name: "generateGeodatabase"
            Parameter { name: "parameters"; type: "QVariant" }
            Parameter { name: "filename"; type: "string" }
        }
        Method {
            name: "syncGeodatabase"
            Parameter { name: "parameters"; type: "QVariant" }
            Parameter { name: "geodatabase"; type: "QmlGeodatabase"; isPointer: true }
        }
        Method {
            name: "registerGeodatabase"
            Parameter { name: "geodatabase"; type: "QmlGeodatabase"; isPointer: true }
        }
        Method {
            name: "unregisterGeodatabase"
            Parameter { name: "geodatabase"; type: "QmlGeodatabase"; isPointer: true }
        }
        Method {
            name: "cancelJob"
            Parameter { name: "status"; type: "QmlGeodatabaseSyncStatusInfo"; isPointer: true }
        }
    }
    Component {
        name: "QmlGeodesicDistanceResult"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/GeodesicDistanceResult 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "distance"; type: "double"; isReadonly: true }
        Property { name: "unit"; type: "QmlUnit"; isReadonly: true; isPointer: true }
        Property { name: "azimuthFrom1To2"; type: "double"; isReadonly: true }
        Property { name: "azimuthFrom2To1"; type: "double"; isReadonly: true }
    }
    Component {
        name: "QmlGeodesicEllipseParameters"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/GeodesicEllipseParameters 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "center"; type: "QmlPoint"; isPointer: true }
        Property { name: "semiAxis1Length"; type: "double" }
        Property { name: "semiAxis2Length"; type: "double" }
        Property { name: "axisDirection"; type: "double" }
        Property { name: "maxSegmentLength"; type: "double" }
        Property { name: "geometryType"; type: "QmlEnums::GeometryType" }
        Property { name: "unit"; type: "QmlLinearUnit"; isPointer: true }
    }
    Component {
        name: "QmlGeodesicSectorParameters"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/GeodesicSectorParameters 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "center"; type: "QmlPoint"; isPointer: true }
        Property { name: "semiAxis1Length"; type: "double" }
        Property { name: "semiAxis2Length"; type: "double" }
        Property { name: "axisDirection"; type: "double" }
        Property { name: "startDirection"; type: "double" }
        Property { name: "sectorAngle"; type: "double" }
        Property { name: "maxSegmentLength"; type: "double" }
        Property { name: "geometryType"; type: "QmlEnums::GeometryType" }
        Property { name: "unit"; type: "QmlLinearUnit"; isPointer: true }
    }
    Component {
        name: "QmlGeometry"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/Geometry 10.26"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "json"; type: "QVariantMap" }
        Property { name: "geometryType"; type: "QmlEnums::GeometryType"; isReadonly: true }
        Property { name: "geometryTypeString"; type: "string"; isReadonly: true }
        Property { name: "dimension"; type: "int"; isReadonly: true }
        Property { name: "hasZ"; type: "bool"; isReadonly: true }
        Property { name: "hasM"; type: "bool"; isReadonly: true }
        Property { name: "spatialReference"; type: "QmlSpatialReference"; isPointer: true }
        Property { name: "valid"; type: "bool"; isReadonly: true }
        Signal { name: "geometryChanged" }
        Method { name: "clone"; type: "QmlGeometry*" }
        Method { name: "queryEnvelope"; type: "QmlEnvelope*" }
        Method { name: "calculateArea2D"; type: "double" }
        Method { name: "calculateLength2D"; type: "double" }
        Method {
            name: "geodesicLength"
            type: "double"
            Parameter { name: "linearUnit"; type: "QmlLinearUnit"; isPointer: true }
        }
        Method { name: "geodesicLength"; type: "double" }
        Method {
            name: "geodesicArea"
            type: "double"
            Parameter { name: "areaUnit"; type: "QmlAreaUnit"; isPointer: true }
        }
        Method { name: "geodesicArea"; type: "double" }
        Method { name: "normalizeCentralMeridianOfGeometry"; type: "QmlGeometry*" }
        Method {
            name: "project"
            type: "QmlGeometry*"
            Parameter { name: "spatialReference"; type: "QmlSpatialReference"; isPointer: true }
        }
        Method {
            name: "buffer"
            type: "QmlPolygon*"
            Parameter { name: "distance"; type: "double" }
            Parameter { name: "unit"; type: "QmlUnit"; isPointer: true }
        }
        Method {
            name: "buffer"
            type: "QmlPolygon*"
            Parameter { name: "distance"; type: "double" }
        }
        Method {
            name: "clip"
            type: "QmlGeometry*"
            Parameter { name: "envelope"; type: "QmlEnvelope"; isPointer: true }
        }
        Method {
            name: "join"
            type: "QmlGeometry*"
            Parameter { name: "geometry"; type: "QmlGeometry"; isPointer: true }
        }
        Method {
            name: "difference"
            type: "QmlGeometry*"
            Parameter { name: "subtractor"; type: "QmlGeometry"; isPointer: true }
        }
        Method {
            name: "intersect"
            type: "QmlGeometry*"
            Parameter { name: "intersector"; type: "QmlGeometry"; isPointer: true }
        }
        Method {
            name: "offset"
            type: "QmlGeometry*"
            Parameter { name: "distance"; type: "double" }
            Parameter { name: "unit"; type: "QmlUnit"; isPointer: true }
        }
        Method {
            name: "offset"
            type: "QmlGeometry*"
            Parameter { name: "distance"; type: "double" }
        }
        Method { name: "simplify"; type: "QmlGeometry*" }
        Method {
            name: "densify"
            type: "QmlGeometry*"
            Parameter { name: "maxSegmentLength"; type: "double" }
        }
        Method {
            name: "geodesicDensify"
            type: "QmlGeometry*"
            Parameter { name: "maxSegmentLength"; type: "double" }
            Parameter { name: "linearUnit"; type: "QmlLinearUnit"; isPointer: true }
        }
        Method {
            name: "geodesicDensify"
            type: "QmlGeometry*"
            Parameter { name: "maxSegmentLength"; type: "double" }
        }
        Method {
            name: "disjoint"
            type: "bool"
            Parameter { name: "geometry"; type: "QmlGeometry"; isPointer: true }
        }
        Method {
            name: "contains"
            type: "bool"
            Parameter { name: "geometry"; type: "QmlGeometry"; isPointer: true }
        }
        Method {
            name: "crosses"
            type: "bool"
            Parameter { name: "geometry"; type: "QmlGeometry"; isPointer: true }
        }
        Method {
            name: "equals"
            type: "bool"
            Parameter { name: "geometry"; type: "QmlGeometry"; isPointer: true }
        }
        Method {
            name: "touches"
            type: "bool"
            Parameter { name: "geometry"; type: "QmlGeometry"; isPointer: true }
        }
        Method {
            name: "within"
            type: "bool"
            Parameter { name: "geometry"; type: "QmlGeometry"; isPointer: true }
        }
        Method {
            name: "distance"
            type: "double"
            Parameter { name: "geometry"; type: "QmlGeometry"; isPointer: true }
        }
        Method {
            name: "nearestCoordinate"
            type: "QmlProximity2DResult*"
            Parameter { name: "inputPoint"; type: "QmlPoint"; isPointer: true }
            Parameter { name: "testPolygonInterior"; type: "bool" }
        }
        Method {
            name: "nearestVertex"
            type: "QmlProximity2DResult*"
            Parameter { name: "inputPoint"; type: "QmlPoint"; isPointer: true }
        }
        Method {
            name: "nearestVertices"
            type: "QVariantList"
            Parameter { name: "inputPoint"; type: "QmlPoint"; isPointer: true }
            Parameter { name: "searchRadius"; type: "double" }
            Parameter { name: "maxVertexCountToReturn"; type: "int" }
        }
    }
    Component {
        name: "QmlGeometryEngine"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/GeometryEngine 10.26"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "error"; type: "string"; isReadonly: true }
        Property { name: "angularUnits"; type: "QmlAngularUnit"; isList: true; isReadonly: true }
        Property { name: "areaUnits"; type: "QmlAreaUnit"; isList: true; isReadonly: true }
        Property { name: "linearUnits"; type: "QmlLinearUnit"; isList: true; isReadonly: true }
        Method { name: "clearError" }
        Method {
            name: "project"
            type: "QmlPoint*"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
            Parameter { name: "spatialReference"; type: "QmlSpatialReference"; isPointer: true }
        }
        Method {
            name: "createGeodesicEllipse"
            type: "QmlGeometry*"
            Parameter { name: "parameters"; type: "QmlGeodesicEllipseParameters"; isPointer: true }
        }
        Method {
            name: "createGeodesicSector"
            type: "QmlGeometry*"
            Parameter { name: "parameters"; type: "QmlGeodesicSectorParameters"; isPointer: true }
        }
        Method {
            name: "stringToEsriUnit"
            type: "QmlEnums::EsriUnit"
            Parameter { name: "string"; type: "string" }
        }
        Method {
            name: "esriUnitToString"
            type: "string"
            Parameter { name: "esriUnit"; type: "QmlEnums::EsriUnit" }
        }
        Method {
            name: "intToMgrsConversionMode"
            type: "QmlEnums::MgrsConversionMode"
            Parameter { name: "value"; type: "int" }
        }
        Method {
            name: "mgrsConversionModeToInt"
            type: "int"
            Parameter { name: "mode"; type: "QmlEnums::MgrsConversionMode" }
        }
    }
    Component {
        name: "QmlGraphic"
        prototype: "QmlFeature"
        exports: ["ArcGIS.Runtime/Graphic 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "json"; type: "QVariantMap" }
        Property { name: "uniqueId"; type: "string"; isReadonly: true }
        Property { name: "geometry"; type: "QmlGeometry"; isPointer: true }
        Property { name: "symbol"; type: "QmlSymbol"; isPointer: true }
        Property { name: "attributes"; type: "QVariantMap" }
        Property { name: "drawOrder"; type: "int" }
        Property { name: "layer"; type: "QmlGraphicsLayer"; isReadonly: true; isPointer: true }
        Property { name: "visible"; type: "bool" }
        Property { name: "selected"; type: "bool" }
        Method { name: "clone"; type: "QmlGraphic*" }
        Method { name: "bringToFront" }
        Method { name: "sendToBack" }
        Method {
            name: "moveTo"
            Parameter { name: "point"; type: "QVariant" }
        }
    }
    Component {
        name: "QmlGraphicsLayer"
        defaultProperty: "graphics"
        prototype: "QmlLayer"
        exports: ["ArcGIS.Runtime/GraphicsLayer 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "renderingMode"; type: "QmlEnums::RenderingMode" }
        Property { name: "numberOfGraphics"; type: "int"; isReadonly: true }
        Property { name: "minDrawOrder"; type: "int"; isReadonly: true }
        Property { name: "maxDrawOrder"; type: "int"; isReadonly: true }
        Property { name: "selectionIds"; type: "QStringList"; isReadonly: true }
        Property { name: "selectionColor"; type: "QColor" }
        Property { name: "selectionSymbol"; type: "QmlSymbol"; isPointer: true }
        Property { name: "hasRenderer"; type: "bool"; isReadonly: true }
        Property { name: "renderer"; type: "QmlRenderer"; isPointer: true }
        Property { name: "graphics"; type: "QmlGraphic"; isList: true; isReadonly: true }
        Property { name: "graphicIds"; type: "QStringList"; isReadonly: true }
        Signal {
            name: "findGraphicsComplete"
            Parameter { name: "graphicIDs"; type: "QStringList" }
        }
        Method {
            name: "addGraphic"
            type: "string"
            Parameter { name: "graphic"; type: "QVariant" }
        }
        Method {
            name: "updateGraphic"
            type: "bool"
            Parameter { name: "id"; type: "string" }
            Parameter { name: "graphic"; type: "QVariant" }
        }
        Method {
            name: "graphic"
            type: "QmlGraphic*"
            Parameter { name: "id"; type: "string" }
        }
        Method {
            name: "removeGraphic"
            Parameter { name: "id"; type: "string" }
        }
        Method { name: "removeAllGraphics" }
        Method {
            name: "findGraphics"
            Parameter { name: "xPixel"; type: "float" }
            Parameter { name: "yPixel"; type: "float" }
            Parameter { name: "tolerance"; type: "int" }
            Parameter { name: "numberOfResults"; type: "int" }
        }
        Method {
            name: "findGraphic"
            Parameter { name: "xPixel"; type: "float" }
            Parameter { name: "yPixel"; type: "float" }
            Parameter { name: "tolerance"; type: "int" }
        }
        Method {
            name: "bringGraphicToFront"
            Parameter { name: "id"; type: "string" }
        }
        Method {
            name: "sendGraphicToBack"
            Parameter { name: "id"; type: "string" }
        }
        Method {
            name: "updateGraphicDrawOrder"
            type: "bool"
            Parameter { name: "id"; type: "string" }
            Parameter { name: "drawOrder"; type: "int" }
        }
        Method {
            name: "isGraphicVisible"
            type: "bool"
            Parameter { name: "id"; type: "string" }
        }
        Method {
            name: "setGraphicVisible"
            Parameter { name: "id"; type: "string" }
            Parameter { name: "visible"; type: "bool" }
        }
        Method {
            name: "selectGraphic"
            Parameter { name: "id"; type: "string" }
        }
        Method {
            name: "unselectGraphic"
            Parameter { name: "id"; type: "string" }
        }
        Method { name: "clearSelection" }
        Method {
            name: "isGraphicSelected"
            type: "bool"
            Parameter { name: "id"; type: "string" }
        }
    }
    Component {
        name: "QmlGrid"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/MapGrid 10.26"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "visible"; type: "bool" }
        Property { name: "labelVisible"; type: "bool" }
        Property { name: "gridType"; type: "QmlEnums::GridType" }
        Property { name: "levelCount"; type: "int"; isReadonly: true }
        Method {
            name: "lineWidth"
            type: "int"
            Parameter { name: "gridLevel"; type: "int" }
        }
        Method {
            name: "setLineWidth"
            Parameter { name: "gridLevel"; type: "int" }
            Parameter { name: "width"; type: "int" }
        }
        Method {
            name: "lineColor"
            type: "QColor"
            Parameter { name: "gridLevel"; type: "int" }
        }
        Method {
            name: "setLineColor"
            Parameter { name: "gridLevel"; type: "int" }
            Parameter { name: "color"; type: "QColor" }
        }
        Method {
            name: "labelColor"
            type: "QColor"
            Parameter { name: "gridLevel"; type: "int" }
        }
        Method {
            name: "setLabelColor"
            Parameter { name: "gridLevel"; type: "int" }
            Parameter { name: "color"; type: "QColor" }
        }
    }
    Component {
        name: "QmlGroupLayer"
        defaultProperty: "layers"
        prototype: "QmlGroupLayerBase"
        exports: ["ArcGIS.Runtime/GroupLayer 10.26"]
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "QmlGroupLayerBase"
        defaultProperty: "layers"
        prototype: "QmlLayer"
        exports: ["ArcGIS.Runtime/GroupLayerBase 10.26"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "layers"; type: "QmlLayer"; isList: true; isReadonly: true }
        Property { name: "opacity"; type: "float" }
        Property { name: "minScale"; type: "double"; isReadonly: true }
        Property { name: "maxScale"; type: "double"; isReadonly: true }
        Property { name: "fullExtent"; type: "QmlEnvelope"; isReadonly: true; isPointer: true }
        Property {
            name: "defaultSpatialReference"
            type: "QmlSpatialReference"
            isReadonly: true
            isPointer: true
        }
        Property { name: "size"; type: "int"; isReadonly: true }
        Property { name: "groupLayerId"; type: "int"; isReadonly: true }
        Method {
            name: "contains"
            type: "bool"
            Parameter { name: "layer"; type: "QmlLayer"; isPointer: true }
        }
        Method {
            name: "add"
            type: "int"
            Parameter { name: "layer"; type: "QmlLayer"; isPointer: true }
        }
        Method {
            name: "addLayerByIndex"
            type: "bool"
            Parameter { name: "layer"; type: "QmlLayer"; isPointer: true }
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "layerByIndex"
            type: "QmlLayer*"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "layerByName"
            type: "QmlLayer*"
            Parameter { name: "layerName"; type: "string" }
        }
        Method {
            name: "removeLayerByIndex"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "removeLayerByName"
            Parameter { name: "layerName"; type: "string" }
        }
        Method { name: "removeAllLayers" }
    }
    Component {
        name: "QmlIdentifyParameters"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/IdentifyParameters 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "geometry"; type: "QmlGeometry"; isPointer: true }
        Property { name: "mapExtent"; type: "QmlEnvelope"; isPointer: true }
        Property { name: "layerMode"; type: "QmlEnums::LayerMode" }
        Property { name: "layers"; type: "QList<int>" }
        Property { name: "mapWidth"; type: "int" }
        Property { name: "mapHeight"; type: "int" }
        Property { name: "DPI"; type: "int" }
        Property { name: "tolerance"; type: "double" }
        Property { name: "geometryPrecision"; type: "int" }
        Property { name: "returnGeometry"; type: "bool" }
        Property { name: "returnZ"; type: "bool" }
        Property { name: "returnM"; type: "bool" }
        Property { name: "layerDefinitions"; type: "QVariantMap" }
        Property { name: "timeExtent"; type: "QmlTimeExtent"; isPointer: true }
        Property { name: "layerTimeOptions"; type: "QmlLayerTimeOptions"; isList: true }
        Property { name: "dynamicLayers"; type: "QmlLayerInfo"; isList: true }
        Property { name: "geodatabaseVersion"; type: "string" }
        Property { name: "json"; type: "QVariantMap" }
    }
    Component {
        name: "QmlIdentifyResult"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/IdentifyResult 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "layerId"; type: "int"; isReadonly: true }
        Property { name: "layerName"; type: "string"; isReadonly: true }
        Property { name: "displayFieldName"; type: "string"; isReadonly: true }
        Property { name: "value"; type: "QVariant"; isReadonly: true }
        Property { name: "feature"; type: "QmlFeature"; isReadonly: true; isPointer: true }
        Property { name: "json"; type: "QVariantMap" }
    }
    Component {
        name: "QmlIdentifyTask"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/IdentifyTask 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "url"; type: "string" }
        Property { name: "credentials"; type: "QmlUserCredentials"; isPointer: true }
        Property { name: "identifyResult"; type: "QVariantList"; isReadonly: true }
        Property { name: "identifyError"; type: "QmlServiceError"; isReadonly: true; isPointer: true }
        Property { name: "identifyTaskStatus"; type: "QmlEnums::IdentifyTaskStatus"; isReadonly: true }
        Method {
            name: "execute"
            Parameter { name: "parameters"; type: "QVariant" }
        }
    }
    Component {
        name: "QmlIdentityManager"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/IdentityManager 10.26"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "ignoreSslErrors"; type: "bool" }
        Property { name: "autoCacheCredentials"; type: "bool" }
        Property { name: "challengeTimeoutSeconds"; type: "int" }
        Signal {
            name: "userCredentialsRequired"
            Parameter { name: "url"; type: "QUrl" }
            Parameter { name: "credentials"; type: "QmlUserCredentials"; isPointer: true }
        }
        Signal {
            name: "oAuthCodeRequired"
            Parameter { name: "authorizationUrl"; type: "QUrl" }
        }
        Method {
            name: "credential"
            type: "QmlUserCredentials*"
            Parameter { name: "url"; type: "QUrl" }
        }
        Method { name: "removeAllCredentials" }
        Method {
            name: "removeCredential"
            type: "bool"
            Parameter { name: "url"; type: "QUrl" }
        }
        Method {
            name: "removeCredential"
            type: "bool"
            Parameter { name: "credential"; type: "QmlUserCredentials"; isPointer: true }
        }
        Method {
            name: "setCredential"
            type: "bool"
            Parameter { name: "credential"; type: "QmlUserCredentials"; isPointer: true }
            Parameter { name: "url"; type: "QUrl" }
        }
        Method {
            name: "setOAuthCodeForUrl"
            Parameter { name: "authorizationUrl"; type: "QUrl" }
            Parameter { name: "authorizationCode"; type: "string" }
        }
    }
    Component {
        name: "QmlInheritedDomain"
        prototype: "QmlDomain"
        exports: ["ArcGIS.Runtime/InheritedDomain 10.26"]
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "QmlInputEvent"
        prototype: "QObject"
        exports: ["ArcGIS.Runtime/InputEvent 10.26"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "accepted"; type: "bool" }
        Property { name: "modifiers"; type: "int"; isReadonly: true }
    }
    Component {
        name: "QmlJoinTableDataSource"
        prototype: "QmlDataSource"
        exports: ["ArcGIS.Runtime/JoinTableDataSource 10.26"]
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "QmlKeyEvent"
        prototype: "QmlInputEvent"
        exports: ["ArcGIS.Runtime/KeyEvent 10.26"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "key"; type: "int"; isReadonly: true }
        Property { name: "text"; type: "string"; isReadonly: true }
        Property { name: "isAutoRepeat"; type: "bool"; isReadonly: true }
        Property { name: "count"; type: "int"; isReadonly: true }
    }
    Component {
        name: "QmlLOD"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/LOD 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "level"; type: "int" }
        Property { name: "resolution"; type: "double" }
        Property { name: "scale"; type: "double" }
        Property { name: "json"; type: "QVariantMap" }
    }
    Component {
        name: "QmlLabelingInfo"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/LabelingInfo 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "json"; type: "QVariantMap" }
        Property { name: "labelPlacement"; type: "QmlEnums::LabelPlacement" }
        Property { name: "labelPlacementString"; type: "string"; isReadonly: true }
        Property { name: "labelExpression"; type: "string" }
        Property { name: "useCodedValues"; type: "bool" }
        Property { name: "symbol"; type: "QmlSymbol"; isPointer: true }
        Property { name: "minScale"; type: "double" }
        Property { name: "maxScale"; type: "double" }
        Property { name: "where"; type: "string" }
    }
    Component {
        name: "QmlLayer"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/Layer 10.26"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "layerType"; type: "QmlEnums::LayerType"; isReadonly: true }
        Property { name: "layerTypeString"; type: "string"; isReadonly: true }
        Property { name: "error"; type: "string"; isReadonly: true }
        Property { name: "layerId"; type: "int"; isReadonly: true }
        Property { name: "status"; type: "QmlEnums::LayerStatus"; isReadonly: true }
        Property { name: "statusString"; type: "string"; isReadonly: true }
        Property { name: "name"; type: "string" }
        Property { name: "description"; type: "string" }
        Property { name: "copyrightText"; type: "string" }
        Property { name: "opacity"; type: "double" }
        Property { name: "visible"; type: "bool" }
        Property { name: "minScale"; type: "double" }
        Property { name: "maxScale"; type: "double" }
        Property { name: "resolution"; type: "double"; isReadonly: true }
        Property { name: "progress"; type: "double"; isReadonly: true }
        Property { name: "resolutionList"; type: "QList<double>"; isReadonly: true }
        Property { name: "serviceDescription"; type: "string" }
        Property { name: "url"; type: "string"; isReadonly: true }
        Property { name: "extent"; type: "QmlEnvelope"; isReadonly: true; isPointer: true }
        Property { name: "fullExtent"; type: "QmlEnvelope"; isReadonly: true; isPointer: true }
        Property {
            name: "spatialReference"
            type: "QmlSpatialReference"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "defaultSpatialReference"
            type: "QmlSpatialReference"
            isReadonly: true
            isPointer: true
        }
        Property { name: "map"; type: "QmlMap"; isReadonly: true; isPointer: true }
        Property { name: "thumbnail"; type: "QUrl" }
        Property { name: "credentials"; type: "QmlUserCredentials"; isPointer: true }
        Property { name: "legend"; type: "QmlLayerLegendInfo"; isList: true; isReadonly: true }
        Signal { name: "thumbnailUrlChanged" }
        Method { name: "initialize" }
        Method { name: "moveUp"; type: "bool" }
        Method { name: "moveDown"; type: "bool" }
        Method { name: "moveToTop"; type: "bool" }
        Method { name: "moveToBottom"; type: "bool" }
    }
    Component {
        name: "QmlLayerDataSource"
        prototype: "QmlLayerSource"
        exports: ["ArcGIS.Runtime/LayerDataSource 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "dataSource"; type: "QmlDataSource"; isPointer: true }
    }
    Component {
        name: "QmlLayerInfo"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/LayerInfo 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "layerId"; type: "int" }
        Property { name: "layerSource"; type: "QmlLayerSource"; isPointer: true }
        Property { name: "definitionExpression"; type: "string" }
        Property { name: "json"; type: "QVariantMap" }
    }
    Component {
        name: "QmlLayerLegendInfo"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/LayerLegendInfo 10.26"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "layerId"; type: "int"; isReadonly: true }
        Property { name: "layerName"; type: "string"; isReadonly: true }
        Property { name: "layerType"; type: "string"; isReadonly: true }
        Property { name: "minScale"; type: "double"; isReadonly: true }
        Property { name: "maxScale"; type: "double"; isReadonly: true }
        Property { name: "legendItems"; type: "QmlLegendItemInfo"; isList: true; isReadonly: true }
        Property { name: "json"; type: "QVariantMap" }
    }
    Component {
        name: "QmlLayerMapSource"
        prototype: "QmlLayerSource"
        exports: ["ArcGIS.Runtime/LayerMapSource 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "layerId"; type: "int" }
        Property { name: "versionName"; type: "string" }
    }
    Component {
        name: "QmlLayerQuery"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/LayerQuery 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "layerId"; type: "int" }
        Property { name: "queryOption"; type: "QmlEnums::QueryOption" }
        Property { name: "where"; type: "string" }
        Property { name: "useGeometry"; type: "bool" }
        Property { name: "includeRelatedFeatures"; type: "bool" }
        Property { name: "json"; type: "QVariantMap" }
    }
    Component {
        name: "QmlLayerRelationship"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/LayerRelationship 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "json"; type: "QVariantMap" }
        Property { name: "layerId"; type: "int"; isReadonly: true }
        Property { name: "name"; type: "string"; isReadonly: true }
        Property { name: "relatedTableId"; type: "int"; isReadonly: true }
    }
    Component {
        name: "QmlLayerSource"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/LayerSource 10.26"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "layerSourceType"; type: "QmlEnums::LayerSourceType"; isReadonly: true }
        Property { name: "json"; type: "QVariantMap" }
    }
    Component {
        name: "QmlLayerSyncInfo"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/LayerSyncInfo 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "layerId"; type: "int" }
        Property { name: "syncDirection"; type: "QmlEnums::SyncDirection" }
        Property { name: "json"; type: "QVariantMap" }
    }
    Component {
        name: "QmlLayerTimeOptions"
        prototype: "QmlLayerInfo"
        exports: ["ArcGIS.Runtime/LayerTimeOptions 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "timeOptions"; type: "QmlTimeOptions"; isPointer: true }
    }
    Component {
        name: "QmlLegendItemInfo"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/LegendItemInfo 10.26"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "contentType"; type: "string"; isReadonly: true }
        Property { name: "label"; type: "string"; isReadonly: true }
        Property { name: "values"; type: "QStringList"; isReadonly: true }
        Property { name: "image"; type: "QUrl"; isReadonly: true }
        Property { name: "json"; type: "QVariantMap" }
    }
    Component {
        name: "QmlLicense"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/License 10.26"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "licenseLevel"; type: "QmlEnums::LicenseLevel"; isReadonly: true }
        Property { name: "expiry"; type: "QDateTime"; isReadonly: true }
        Method {
            name: "setLicense"
            type: "QmlEnums::LicenseStatus"
            Parameter { name: "license"; type: "QVariant" }
        }
    }
    Component {
        name: "QmlLicenseInfo"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/LicenseInfo 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "json"; type: "QVariantMap" }
    }
    Component {
        name: "QmlLine"
        prototype: "QmlSegment"
        exports: ["ArcGIS.Runtime/Line 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "isCurve"; type: "bool"; isReadonly: true }
    }
    Component {
        name: "QmlLineSymbol"
        prototype: "QmlSymbol"
        exports: ["ArcGIS.Runtime/LineSymbol 10.26"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "width"; type: "float" }
        Property { name: "color"; type: "QColor" }
    }
    Component {
        name: "QmlLinearUnit"
        prototype: "QmlUnit"
        exports: ["ArcGIS.Runtime/LinearUnit 10.26"]
        exportMetaObjectRevisions: [0]
        Method {
            name: "convertFromMeters"
            type: "double"
            Parameter { name: "meters"; type: "double" }
        }
        Method {
            name: "convertToMeters"
            type: "double"
            Parameter { name: "unitValue"; type: "double" }
        }
    }
    Component {
        name: "QmlLocalLocator"
        prototype: "QmlLocator"
        exports: ["ArcGIS.Runtime/LocalLocator 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "path"; type: "string" }
        Property { name: "settings"; type: "QmlLocatorSettings"; isPointer: true }
    }
    Component {
        name: "QmlLocalRouteTask"
        prototype: "QmlRouteTask"
        exports: ["ArcGIS.Runtime/LocalRouteTask 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "network"; type: "string" }
        Property { name: "database"; type: "string" }
        Property {
            name: "defaultParameters"
            type: "QmlLocalRouteTaskParameters"
            isReadonly: true
            isPointer: true
        }
        Method {
            name: "solve"
            Parameter { name: "routeTaskParameters"; type: "QmlLocalRouteTaskParameters"; isPointer: true }
        }
    }
    Component {
        name: "QmlLocalRouteTaskParameters"
        prototype: "QmlRouteTaskParameters"
        exports: ["ArcGIS.Runtime/LocalRouteTaskParameters 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "task"; type: "QmlLocalRouteTask"; isPointer: true }
    }
    Component {
        name: "QmlLocator"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/Locator 10.26"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property {
            name: "locatorServiceInfo"
            type: "QmlLocatorServiceInfo"
            isReadonly: true
            isPointer: true
        }
        Property { name: "findResults"; type: "QVariantList"; isReadonly: true }
        Property { name: "findError"; type: "QmlServiceError"; isReadonly: true; isPointer: true }
        Property { name: "findStatus"; type: "QmlEnums::FindStatus"; isReadonly: true }
        Property { name: "geocodeResults"; type: "QVariantList"; isReadonly: true }
        Property { name: "geocodeError"; type: "QmlServiceError"; isReadonly: true; isPointer: true }
        Property { name: "geocodeStatus"; type: "QmlEnums::GeocodeStatus"; isReadonly: true }
        Property {
            name: "reverseGeocodeResult"
            type: "QmlLocatorReverseGeocodeResult"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "reverseGeocodeError"
            type: "QmlServiceError"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "reverseGeocodeStatus"
            type: "QmlEnums::ReverseGeocodeStatus"
            isReadonly: true
        }
        Property {
            name: "batchGeocodeResult"
            type: "QmlBatchGeocodeResult"
            isReadonly: true
            isPointer: true
        }
        Property { name: "batchGeocodeError"; type: "QmlServiceError"; isReadonly: true; isPointer: true }
        Property { name: "batchGeocodeStatus"; type: "QmlEnums::BatchGeocodeStatus"; isReadonly: true }
        Method {
            name: "find"
            Parameter { name: "findParams"; type: "QmlLocatorFindParameters"; isPointer: true }
        }
        Method {
            name: "geocode"
            Parameter { name: "addressFields"; type: "QVariantMap" }
            Parameter { name: "outFields"; type: "QStringList" }
            Parameter { name: "outSR"; type: "QmlSpatialReference"; isPointer: true }
        }
        Method {
            name: "batchGeocode"
            Parameter { name: "addresses"; type: "QVariantList" }
            Parameter { name: "outSR"; type: "QmlSpatialReference"; isPointer: true }
        }
        Method {
            name: "reverseGeocode"
            Parameter { name: "point"; type: "QmlPoint"; isPointer: true }
            Parameter { name: "distance"; type: "double" }
            Parameter { name: "outSR"; type: "QmlSpatialReference"; isPointer: true }
        }
    }
    Component {
        name: "QmlLocatorFieldInfo"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/LocatorFieldInfo 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "alias"; type: "string"; isReadonly: true }
        Property { name: "name"; type: "string"; isReadonly: true }
        Property { name: "type"; type: "string"; isReadonly: true }
        Property { name: "isRequired"; type: "bool"; isReadonly: true }
        Property { name: "json"; type: "QVariantMap" }
    }
    Component {
        name: "QmlLocatorFindParameters"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/LocatorFindParameters 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "distance"; type: "double" }
        Property { name: "outSR"; type: "QmlSpatialReference"; isPointer: true }
        Property { name: "location"; type: "QmlPoint"; isPointer: true }
        Property { name: "maxLocations"; type: "int" }
        Property { name: "outFields"; type: "QStringList" }
        Property { name: "searchExtent"; type: "QmlEnvelope"; isPointer: true }
        Property { name: "sourceCountry"; type: "string" }
        Property { name: "text"; type: "string" }
        Property { name: "json"; type: "QVariantMap"; isReadonly: true }
    }
    Component {
        name: "QmlLocatorGeocodeResult"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/LocatorGeocodeResult 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "address"; type: "string"; isReadonly: true }
        Property { name: "attributes"; type: "QVariantMap"; isReadonly: true }
        Property { name: "extent"; type: "QmlEnvelope"; isReadonly: true; isPointer: true }
        Property { name: "location"; type: "QmlPoint"; isReadonly: true; isPointer: true }
        Property { name: "score"; type: "int"; isReadonly: true }
        Property {
            name: "spatialReference"
            type: "QmlSpatialReference"
            isReadonly: true
            isPointer: true
        }
        Property { name: "json"; type: "QVariantMap" }
    }
    Component {
        name: "QmlLocatorReverseGeocodeResult"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/LocatorReverseGeocodeResult 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "addressFields"; type: "QVariantMap"; isReadonly: true }
        Property { name: "location"; type: "QmlPoint"; isReadonly: true; isPointer: true }
        Property {
            name: "spatialReference"
            type: "QmlSpatialReference"
            isReadonly: true
            isPointer: true
        }
        Property { name: "json"; type: "QVariantMap" }
    }
    Component {
        name: "QmlLocatorServiceInfo"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/LocatorServiceInfo 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "addressFields"; type: "QmlLocatorFieldInfo"; isList: true; isReadonly: true }
        Property { name: "candidateFields"; type: "QmlLocatorFieldInfo"; isList: true; isReadonly: true }
        Property {
            name: "intersectionCandidateFields"
            type: "QmlLocatorFieldInfo"
            isList: true
            isReadonly: true
        }
        Property { name: "locatorProperties"; type: "QVariantMap"; isReadonly: true }
        Property { name: "serviceDescription"; type: "string"; isReadonly: true }
        Property {
            name: "singleLineAddressField"
            type: "QmlLocatorFieldInfo"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "spatialReference"
            type: "QmlSpatialReference"
            isReadonly: true
            isPointer: true
        }
        Property { name: "json"; type: "QVariantMap" }
    }
    Component {
        name: "QmlLocatorSettings"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/LocatorSettings 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "preloadDictionaries"; type: "bool" }
        Property { name: "cacheRelations"; type: "bool" }
        Property { name: "excludeRedundantRelations"; type: "bool" }
        Property { name: "memoryLimit"; type: "int" }
    }
    Component {
        name: "QmlMap"
        defaultProperty: "objects"
        prototype: "QQuickItem"
        exports: ["ArcGIS.Runtime/Map 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "objectType"; type: "string"; isReadonly: true }
        Property { name: "status"; type: "QmlEnums::MapStatus"; isReadonly: true }
        Property { name: "extent"; type: "QmlEnvelope"; isPointer: true }
        Property { name: "fullExtent"; type: "QmlEnvelope"; isPointer: true }
        Property { name: "mapScale"; type: "double" }
        Property { name: "minMapScale"; type: "double" }
        Property { name: "maxMapScale"; type: "double" }
        Property { name: "visibleExtent"; type: "QmlPolygon"; isReadonly: true; isPointer: true }
        Property { name: "wrapAroundEnabled"; type: "bool" }
        Property { name: "esriLogoVisible"; type: "bool" }
        Property { name: "hidingNoDataTiles"; type: "bool" }
        Property { name: "mapRotation"; type: "double" }
        Property { name: "panAnimationEnabled"; type: "bool" }
        Property { name: "animationDuration"; type: "double" }
        Property { name: "animationMode"; type: "QmlEnums::AnimationMode" }
        Property { name: "panTolerance"; type: "int" }
        Property { name: "panToleranceEnabled"; type: "bool" }
        Property { name: "zoomSnapEnabled"; type: "bool" }
        Property { name: "rotationByPinchingEnabled"; type: "bool" }
        Property { name: "zoomByPinchingEnabled"; type: "bool" }
        Property { name: "wheelZoomDirection"; type: "QmlEnums::MouseWheelZoomDirection" }
        Property { name: "magnifierOnPressAndHoldEnabled"; type: "bool" }
        Property { name: "mapPanningByMagnifierEnabled"; type: "bool" }
        Property { name: "layerCount"; type: "int"; isReadonly: true }
        Property { name: "layerNames"; type: "QStringList"; isReadonly: true }
        Property { name: "layers"; type: "QmlLayer"; isList: true; isReadonly: true }
        Property { name: "keyboardEnabled"; type: "bool" }
        Property { name: "mapUnits"; type: "string"; isReadonly: true }
        Property {
            name: "spatialReference"
            type: "QmlSpatialReference"
            isReadonly: true
            isPointer: true
        }
        Property { name: "grid"; type: "QmlGrid"; isReadonly: true; isPointer: true }
        Property { name: "resolution"; type: "double"; isReadonly: true }
        Property { name: "resolutionList"; type: "QmlResolutionList"; isReadonly: true; isPointer: true }
        Property { name: "timeInterval"; type: "QmlTimeExtent"; isPointer: true }
        Property {
            name: "positionDisplay"
            type: "QmlPositionDisplay"
            isReadonly: true
            isPointer: true
        }
        Property { name: "objects"; type: "QObject"; isList: true; isReadonly: true }
        Signal { name: "progressChanged" }
        Signal {
            name: "mousePressed"
            Parameter { name: "mouse"; type: "QmlMouseEvent"; isPointer: true }
        }
        Signal {
            name: "mousePositionChanged"
            Parameter { name: "mouse"; type: "QmlMouseEvent"; isPointer: true }
        }
        Signal {
            name: "mouseReleased"
            Parameter { name: "mouse"; type: "QmlMouseEvent"; isPointer: true }
        }
        Signal {
            name: "mouseClicked"
            Parameter { name: "mouse"; type: "QmlMouseEvent"; isPointer: true }
        }
        Signal {
            name: "mouseDoubleClicked"
            Parameter { name: "mouse"; type: "QmlMouseEvent"; isPointer: true }
        }
        Signal {
            name: "mousePressAndHold"
            Parameter { name: "mouse"; type: "QmlMouseEvent"; isPointer: true }
        }
        Signal {
            name: "mouseWheel"
            Parameter { name: "wheel"; type: "QmlWheelEvent"; isPointer: true }
        }
        Signal {
            name: "keyPressed"
            Parameter { name: "key"; type: "QmlKeyEvent"; isPointer: true }
        }
        Signal {
            name: "keyReleased"
            Parameter { name: "key"; type: "QmlKeyEvent"; isPointer: true }
        }
        Method { name: "reset" }
        Method { name: "refresh" }
        Method {
            name: "setMapRotation"
            Parameter { name: "degrees"; type: "double" }
            Parameter { name: "x"; type: "float" }
            Parameter { name: "y"; type: "float" }
        }
        Method {
            name: "addLayer"
            type: "bool"
            Parameter { name: "layer"; type: "QmlLayer"; isPointer: true }
        }
        Method {
            name: "insertLayer"
            type: "bool"
            Parameter { name: "layer"; type: "QmlLayer"; isPointer: true }
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "containsLayer"
            type: "bool"
            Parameter { name: "layer"; type: "QmlLayer"; isPointer: true }
        }
        Method {
            name: "layerByIndex"
            type: "QmlLayer*"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "layerByName"
            type: "QmlLayer*"
            Parameter { name: "layerName"; type: "string" }
        }
        Method {
            name: "removeLayer"
            Parameter { name: "layer"; type: "QmlLayer"; isPointer: true }
        }
        Method {
            name: "removeLayerByIndex"
            Parameter { name: "index"; type: "int" }
        }
        Method { name: "removeAll" }
        Method {
            name: "moveLayer"
            type: "bool"
            Parameter { name: "currentIndex"; type: "int" }
            Parameter { name: "newIndex"; type: "int" }
        }
        Method {
            name: "toMapPoint"
            type: "QmlPoint*"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
        Method {
            name: "toMapPoint"
            type: "QmlPoint*"
            Parameter { name: "object"; type: "QVariant" }
        }
        Method {
            name: "toScreenPoint"
            type: "QPointF"
            Parameter { name: "point"; type: "QVariant" }
        }
        Method {
            name: "toMapGeometry"
            type: "QmlGeometry*"
            Parameter { name: "geometry"; type: "QVariant" }
        }
        Method {
            name: "fromMapGeometry"
            type: "QVariant"
            Parameter { name: "geometry"; type: "QVariant" }
        }
        Method {
            name: "zoom"
            Parameter { name: "factor"; type: "double" }
        }
        Method {
            name: "zoom"
            Parameter { name: "factor"; type: "double" }
            Parameter { name: "point"; type: "QVariant" }
        }
        Method {
            name: "zoomToScale"
            Parameter { name: "scale"; type: "double" }
        }
        Method {
            name: "zoomToScale"
            Parameter { name: "scale"; type: "double" }
            Parameter { name: "point"; type: "QVariant" }
        }
        Method {
            name: "zoomToResolution"
            Parameter { name: "resolution"; type: "double" }
        }
        Method {
            name: "zoomToResolution"
            Parameter { name: "resolution"; type: "double" }
            Parameter { name: "point"; type: "QVariant" }
        }
        Method {
            name: "zoomTo"
            Parameter { name: "geometry"; type: "QVariant" }
        }
        Method {
            name: "panTo"
            Parameter { name: "geometry"; type: "QVariant" }
        }
    }
    Component {
        name: "QmlMapServiceInfo"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/MapServiceInfo 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "url"; type: "string"; isReadonly: true }
        Property { name: "capabilities"; type: "string"; isReadonly: true }
        Property { name: "copyrightText"; type: "string"; isReadonly: true }
        Property { name: "description"; type: "string"; isReadonly: true }
        Property { name: "serviceDescription"; type: "string"; isReadonly: true }
        Property { name: "supportedImageFormatTypes"; type: "string"; isReadonly: true }
        Property { name: "mapName"; type: "string"; isReadonly: true }
        Property { name: "maximumRecordCount"; type: "int"; isReadonly: true }
        Property { name: "minScale"; type: "double"; isReadonly: true }
        Property { name: "maxScale"; type: "double"; isReadonly: true }
        Property { name: "isDynamicLayersSupported"; type: "bool"; isReadonly: true }
        Property { name: "isSingleFusedMapCache"; type: "bool"; isReadonly: true }
        Property { name: "units"; type: "string"; isReadonly: true }
        Property { name: "fullExtent"; type: "QmlEnvelope"; isReadonly: true; isPointer: true }
        Property { name: "initialExtent"; type: "QmlEnvelope"; isReadonly: true; isPointer: true }
        Property { name: "tileInfo"; type: "QmlTileInfo"; isReadonly: true; isPointer: true }
        Property { name: "timeInfo"; type: "QmlTimeInfo"; isReadonly: true; isPointer: true }
        Property { name: "layers"; type: "QmlMapServiceLayerInfo"; isList: true; isReadonly: true }
        Property { name: "tables"; type: "QmlTable"; isList: true; isReadonly: true }
        Property { name: "exportTilesAllowed"; type: "bool"; isReadonly: true }
        Property { name: "maxExportTilesCount"; type: "int"; isReadonly: true }
        Property {
            name: "spatialReference"
            type: "QmlSpatialReference"
            isReadonly: true
            isPointer: true
        }
        Property { name: "json"; type: "QVariantMap" }
        Signal { name: "changed" }
    }
    Component {
        name: "QmlMapServiceLayerInfo"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/MapServiceLayerInfo 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "name"; type: "string"; isReadonly: true }
        Property { name: "url"; type: "string" }
        Property { name: "parentLayer"; type: "QmlMapServiceLayerInfo"; isPointer: true }
        Property { name: "subLayerInfos"; type: "QmlMapServiceLayerInfo"; isList: true; isReadonly: true }
        Property { name: "layerId"; type: "int"; isReadonly: true }
        Property { name: "subLayerIds"; type: "QList<int>"; isReadonly: true }
        Property { name: "minScale"; type: "double"; isReadonly: true }
        Property { name: "maxScale"; type: "double"; isReadonly: true }
        Property { name: "visible"; type: "bool" }
        Property { name: "geometryType"; type: "QmlEnums::GeometryType"; isReadonly: true }
        Property { name: "geometryTypeString"; type: "string"; isReadonly: true }
        Method {
            name: "childLayer"
            type: "QmlMapServiceLayerInfo*"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "childLayerIndex"
            type: "int"
            Parameter { name: "child"; type: "QmlMapServiceLayerInfo"; isPointer: true }
        }
        Method {
            name: "addLayer"
            Parameter { name: "layer"; type: "QmlMapServiceLayerInfo"; isPointer: true }
        }
    }
    Component {
        name: "QmlMarkerSymbol"
        prototype: "QmlSymbol"
        exports: ["ArcGIS.Runtime/MarkerSymbol 10.26"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "angle"; type: "float" }
        Property { name: "width"; type: "float" }
        Property { name: "height"; type: "float" }
        Property { name: "xOffset"; type: "float" }
        Property { name: "yOffset"; type: "float" }
        Property { name: "xAnchor"; type: "float" }
        Property { name: "yAnchor"; type: "float" }
        Property { name: "alignment"; type: "QmlEnums::MarkerAngleAlignment" }
    }
    Component {
        name: "QmlMouseEvent"
        prototype: "QmlInputEvent"
        exports: ["ArcGIS.Runtime/MouseEvent 10.26"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "x"; type: "int"; isReadonly: true }
        Property { name: "y"; type: "int"; isReadonly: true }
        Property { name: "button"; type: "int"; isReadonly: true }
        Property { name: "buttons"; type: "int"; isReadonly: true }
        Property { name: "mapX"; type: "double"; isReadonly: true }
        Property { name: "mapY"; type: "double"; isReadonly: true }
        Property { name: "mapPoint"; type: "QmlPoint"; isReadonly: true; isPointer: true }
    }
    Component {
        name: "QmlMultiPath"
        prototype: "QmlGeometry"
        exports: ["ArcGIS.Runtime/MultiPath 10.26"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "pointCount"; type: "int"; isReadonly: true }
        Property { name: "segmentCount"; type: "int"; isReadonly: true }
        Property { name: "pathCount"; type: "int"; isReadonly: true }
        Method {
            name: "point"
            type: "QmlPoint*"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "qpoint"
            type: "QPointF"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "setPoint"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "point"; type: "QmlPoint"; isPointer: true }
        }
        Method {
            name: "xy"
            type: "QmlPoint*"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "qxy"
            type: "QPointF"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "xyz"
            type: "QmlPoint*"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "setXYZ"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "point"; type: "QmlPoint"; isPointer: true }
        }
        Method {
            name: "add"
            Parameter { name: "sourcePath"; type: "QmlMultiPath"; isPointer: true }
            Parameter { name: "reversePaths"; type: "bool" }
        }
        Method {
            name: "addPath"
            Parameter { name: "sourcePath"; type: "QmlMultiPath"; isPointer: true }
            Parameter { name: "sourcePathIndex"; type: "int" }
            Parameter { name: "forward"; type: "bool" }
        }
        Method {
            name: "addEnvelope"
            Parameter { name: "envelope"; type: "QmlEnvelope"; isPointer: true }
            Parameter { name: "reverse"; type: "bool" }
        }
        Method {
            name: "addSegment"
            Parameter { name: "segment"; type: "QmlSegment"; isPointer: true }
            Parameter { name: "startNewPath"; type: "bool" }
        }
        Method {
            name: "reversePath"
            Parameter { name: "pathIndex"; type: "int" }
        }
        Method { name: "reverseAllPaths" }
        Method {
            name: "removePath"
            Parameter { name: "pathIndex"; type: "int" }
        }
        Method {
            name: "removePoint"
            Parameter { name: "pathIndex"; type: "int" }
            Parameter { name: "pointIndex"; type: "int" }
        }
        Method {
            name: "startPath"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
        Method {
            name: "startPath"
            Parameter { name: "point"; type: "QmlPoint"; isPointer: true }
        }
        Method {
            name: "lineTo"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
        Method {
            name: "lineTo"
            Parameter { name: "point"; type: "QmlPoint"; isPointer: true }
        }
        Method {
            name: "isClosedPath"
            type: "bool"
            Parameter { name: "pathIndex"; type: "int" }
        }
        Method { name: "closeAllPaths" }
        Method { name: "closePathWithLine" }
        Method {
            name: "insertPath"
            Parameter { name: "pathIndex"; type: "int" }
            Parameter { name: "sourcePath"; type: "QmlMultiPath"; isPointer: true }
            Parameter { name: "sourcePathIndex"; type: "int" }
            Parameter { name: "forward"; type: "bool" }
        }
        Method {
            name: "insertPoints"
            Parameter { name: "pathIndex"; type: "int" }
            Parameter { name: "beforePointIndex"; type: "int" }
            Parameter { name: "sourcePath"; type: "QmlMultiPath"; isPointer: true }
            Parameter { name: "sourcePathIndex"; type: "int" }
            Parameter { name: "sourcePointIndexFrom"; type: "int" }
            Parameter { name: "sourcePointCount"; type: "int" }
            Parameter { name: "forward"; type: "bool" }
        }
        Method {
            name: "insertPoint"
            Parameter { name: "pathIndex"; type: "int" }
            Parameter { name: "beforePointIndex"; type: "int" }
            Parameter { name: "point"; type: "QmlPoint"; isPointer: true }
        }
        Method {
            name: "pathSegmentCount"
            type: "int"
            Parameter { name: "pathIndex"; type: "int" }
        }
        Method {
            name: "pathSize"
            type: "int"
            Parameter { name: "pathIndex"; type: "int" }
        }
        Method {
            name: "pathStart"
            type: "int"
            Parameter { name: "pathIndex"; type: "int" }
        }
        Method {
            name: "pathEnd"
            type: "int"
            Parameter { name: "pathIndex"; type: "int" }
        }
        Method {
            name: "pathIndexFromPointIndex"
            type: "int"
            Parameter { name: "pointIndex"; type: "int" }
        }
    }
    Component {
        name: "QmlMultiPoint"
        prototype: "QmlGeometry"
        exports: ["ArcGIS.Runtime/MultiPoint 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "pointCount"; type: "int"; isReadonly: true }
        Method {
            name: "point"
            type: "QmlPoint*"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "setPoint"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "point"; type: "QmlPoint"; isPointer: true }
        }
        Method {
            name: "setXY"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
        Method {
            name: "add"
            Parameter { name: "point"; type: "QmlPoint"; isPointer: true }
        }
        Method {
            name: "add"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
        Method {
            name: "add"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
            Parameter { name: "z"; type: "double" }
        }
        Method {
            name: "addMultipoint"
            Parameter { name: "multiPoint"; type: "QmlMultiPoint"; isPointer: true }
            Parameter { name: "fromPointIndex"; type: "int" }
            Parameter { name: "toPointIndex"; type: "int" }
        }
        Method {
            name: "insertPoint"
            Parameter { name: "beforePointIndex"; type: "int" }
            Parameter { name: "point"; type: "QmlPoint"; isPointer: true }
        }
        Method {
            name: "removePoint"
            Parameter { name: "pointIndex"; type: "int" }
        }
    }
    Component {
        name: "QmlNAFeatures"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/NAFeatures 10.26"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "json"; type: "QVariantMap"; isReadonly: true }
    }
    Component {
        name: "QmlNAFeaturesAsFeature"
        prototype: "QmlNAFeatures"
        exports: ["ArcGIS.Runtime/NAFeaturesAsFeature 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "features"; type: "QmlGraphic"; isList: true; isReadonly: true }
        Property { name: "url"; type: "string" }
        Property { name: "hasZ"; type: "bool" }
        Property { name: "doNotLocateOnRestrictedElements"; type: "bool" }
        Property { name: "compressedRequest"; type: "bool" }
        Method {
            name: "addFeature"
            Parameter { name: "feature"; type: "QVariant" }
        }
        Method {
            name: "addFeatures"
            Parameter { name: "features"; type: "QVariant" }
        }
        Method {
            name: "setFeatures"
            Parameter { name: "features"; type: "QVariant" }
        }
        Method { name: "clearFeatures" }
    }
    Component {
        name: "QmlNAFeaturesAsLayer"
        prototype: "QmlNAFeatures"
        exports: ["ArcGIS.Runtime/NAFeaturesAsLayer 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "layerName"; type: "string" }
        Property { name: "where"; type: "string" }
        Property { name: "spatialFilter"; type: "QmlSpatialFilter"; isPointer: true }
        Property { name: "doNotLocateOnRestrictedElements"; type: "bool" }
    }
    Component {
        name: "QmlNAMessage"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/NAMessage 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "type"; type: "int"; isReadonly: true }
        Property { name: "description"; type: "string"; isReadonly: true }
        Property { name: "json"; type: "QVariantMap" }
    }
    Component {
        name: "QmlNAResult"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/NAResult 10.26"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "barriers"; type: "QmlFeatureSet"; isReadonly: true; isPointer: true }
        Property { name: "pointBarriers"; type: "QmlFeatureSet"; isReadonly: true; isPointer: true }
        Property { name: "polylineBarriers"; type: "QmlFeatureSet"; isReadonly: true; isPointer: true }
        Property { name: "polygonBarriers"; type: "QmlFeatureSet"; isReadonly: true; isPointer: true }
        Property { name: "messages"; type: "QmlNAMessage"; isList: true; isReadonly: true }
    }
    Component {
        name: "QmlNATaskParameters"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/NATaskParameters 10.26"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "returnZ"; type: "bool" }
        Property { name: "useHierarchy"; type: "bool" }
        Property { name: "outputGeometryPrecision"; type: "double" }
        Property { name: "outputGeometryPrecisionUnits"; type: "QmlEnums::EsriUnit" }
        Property { name: "outputGeometryPrecisionUnitsString"; type: "string"; isReadonly: true }
        Property { name: "restrictUTurns"; type: "QmlEnums::UTurnRestriction" }
        Property { name: "restrictUTurnsString"; type: "string"; isReadonly: true }
        Property { name: "restrictionAttributeNames"; type: "QStringList" }
        Property { name: "impedanceAttributeName"; type: "string" }
        Property { name: "accumulateAttributeNames"; type: "QStringList" }
        Property { name: "outputLines"; type: "QmlEnums::NAOutputLine" }
        Property { name: "outputLinesString"; type: "string"; isReadonly: true }
        Property { name: "outSpatialReference"; type: "QmlSpatialReference"; isPointer: true }
        Property { name: "returnPointBarriers"; type: "bool" }
        Property { name: "returnPolylineBarriers"; type: "bool" }
        Property { name: "returnPolygonBarriers"; type: "bool" }
        Property {
            name: "attributeParameterValues"
            type: "QmlAttributeParameterValue"
            isList: true
            isReadonly: true
        }
        Property { name: "pointBarriers"; type: "QmlNAFeatures"; isPointer: true }
        Property { name: "polylineBarriers"; type: "QmlNAFeatures"; isPointer: true }
        Property { name: "polygonBarriers"; type: "QmlNAFeatures"; isPointer: true }
    }
    Component {
        name: "QmlNetworkDescription"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/NetworkDescription 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "name"; type: "string"; isReadonly: true }
        Property { name: "costAttributes"; type: "QmlCostAttribute"; isList: true; isReadonly: true }
        Property {
            name: "restrictionAttributes"
            type: "QmlRestrictionAttribute"
            isList: true
            isReadonly: true
        }
        Property { name: "supportedDirectionsLanguages"; type: "QStringList"; isReadonly: true }
        Property { name: "supportedDirectionsStyles"; type: "QStringList"; isReadonly: true }
        Property { name: "restrictionUsageParameterValues"; type: "QStringList"; isReadonly: true }
        Property { name: "json"; type: "QVariantMap" }
    }
    Component {
        name: "QmlOAuthClientInfo"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/OAuthClientInfo 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "oAuthMode"; type: "QmlEnums::OAuthMode" }
        Property { name: "clientId"; type: "string" }
        Property { name: "clientSecret"; type: "string" }
        Property { name: "redirectUri"; type: "string" }
        Property { name: "json"; type: "QVariantMap" }
    }
    Component {
        name: "QmlObject"
        prototype: "QObject"
        exports: ["ArcGIS.Runtime/RuntimeObject 10.26"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "objectType"; type: "string"; isReadonly: true }
        Signal { name: "objectChanged" }
        Signal {
            name: "error"
            Parameter { name: "error"; type: "QmlError"; isPointer: true }
        }
        Method { name: "toText"; type: "string" }
        Method { name: "dump" }
    }
    Component {
        name: "QmlOnlineRouteTask"
        prototype: "QmlRouteTask"
        exports: ["ArcGIS.Runtime/OnlineRouteTask 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "url"; type: "string" }
        Property { name: "credentials"; type: "QmlUserCredentials"; isPointer: true }
        Property {
            name: "defaultParameters"
            type: "QmlOnlineRouteTaskParameters"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "networkDescription"
            type: "QmlNetworkDescription"
            isReadonly: true
            isPointer: true
        }
        Method {
            name: "solve"
            Parameter { name: "routeTaskParameters"; type: "QmlOnlineRouteTaskParameters"; isPointer: true }
        }
    }
    Component {
        name: "QmlOnlineRouteTaskParameters"
        prototype: "QmlRouteTaskParameters"
        exports: ["ArcGIS.Runtime/OnlineRouteTaskParameters 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "directionsOutputType"; type: "QmlEnums::DirectionsOutputType" }
        Property { name: "directionsOutputTypeString"; type: "string"; isReadonly: true }
        Property { name: "json"; type: "QVariantMap" }
    }
    Component {
        name: "QmlOpenStreetMapLayer"
        prototype: "QmlTiledMapServiceLayer"
        exports: ["ArcGIS.Runtime/OpenStreetMapLayer 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "tileInfo"; type: "QmlTileInfo"; isReadonly: true; isPointer: true }
        Property { name: "fullExtent"; type: "QmlEnvelope"; isReadonly: true; isPointer: true }
        Property {
            name: "defaultSpatialReference"
            type: "QmlSpatialReference"
            isReadonly: true
            isPointer: true
        }
        Property { name: "tileServerUrls"; type: "QStringList" }
        Property { name: "attributionText"; type: "string" }
        Property { name: "minZoomLevel"; type: "int" }
        Property { name: "maxZoomLevel"; type: "int" }
        Method { name: "refresh" }
        Method {
            name: "setKey"
            Parameter { name: "key"; type: "string" }
        }
    }
    Component {
        name: "QmlOutStatistics"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/OutStatistics 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "statisticsType"; type: "QmlEnums::StatisticsType" }
        Property { name: "statisticsTypeString"; type: "string"; isReadonly: true }
        Property { name: "onStatisticField"; type: "string" }
        Property { name: "outStatisticFieldName"; type: "string" }
    }
    Component {
        name: "QmlOwnershipBasedAccessControlForFeatures"
        prototype: "QmlObject"
        exports: [
            "ArcGIS.Runtime/OwnershipBasedAccessControlForFeatures 10.26"
        ]
        exportMetaObjectRevisions: [0]
        Property { name: "isAllowOthersToDelete"; type: "bool"; isReadonly: true }
        Property { name: "isAllowOthersToUpdate"; type: "bool"; isReadonly: true }
        Property { name: "json"; type: "QVariantMap" }
    }
    Component {
        name: "QmlPictureMarkerSymbol"
        prototype: "QmlMarkerSymbol"
        exports: ["ArcGIS.Runtime/PictureMarkerSymbol 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "opacity"; type: "double" }
        Property { name: "image"; type: "QUrl" }
        Signal { name: "widthChanged" }
        Signal { name: "heightChanged" }
    }
    Component {
        name: "QmlPoint"
        prototype: "QmlGeometry"
        exports: ["ArcGIS.Runtime/Point 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "x"; type: "double" }
        Property { name: "y"; type: "double" }
        Property { name: "z"; type: "double" }
        Property { name: "m"; type: "double" }
        Property { name: "point"; type: "QPointF" }
        Property { name: "vector2D"; type: "QVector2D" }
        Property { name: "vector3D"; type: "QVector3D" }
        Property { name: "vector4D"; type: "QVector4D" }
        Signal { name: "geometryChanged" }
        Method {
            name: "setXY"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
        Method {
            name: "setXYZ"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
            Parameter { name: "z"; type: "double" }
        }
        Method {
            name: "setXYZM"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
            Parameter { name: "z"; type: "double" }
            Parameter { name: "m"; type: "double" }
        }
        Method {
            name: "project"
            type: "QmlPoint*"
            Parameter { name: "spatialReference"; type: "QmlSpatialReference"; isPointer: true }
        }
        Method {
            name: "geodesicDistance"
            type: "QmlGeodesicDistanceResult*"
            Parameter { name: "point"; type: "QmlPoint"; isPointer: true }
            Parameter { name: "unit"; type: "QmlUnit"; isPointer: true }
        }
        Method {
            name: "geodesicDistance"
            type: "QmlGeodesicDistanceResult*"
            Parameter { name: "point"; type: "QmlPoint"; isPointer: true }
        }
        Method {
            name: "geodesicMove"
            type: "QmlPoint*"
            Parameter { name: "distance"; type: "double" }
            Parameter { name: "degrees"; type: "double" }
            Parameter { name: "unit"; type: "QmlLinearUnit"; isPointer: true }
        }
        Method {
            name: "geodesicMove"
            type: "QmlPoint*"
            Parameter { name: "distance"; type: "double" }
            Parameter { name: "degrees"; type: "double" }
        }
        Method {
            name: "toDecimalDegrees"
            type: "string"
            Parameter { name: "numberOfDigits"; type: "int" }
        }
        Method {
            name: "toDegreesDecimalMinutes"
            type: "string"
            Parameter { name: "numberOfDigits"; type: "int" }
        }
        Method {
            name: "toDegreesMinutesSeconds"
            type: "string"
            Parameter { name: "numberOfDigits"; type: "int" }
        }
        Method { name: "toGars"; type: "string" }
        Method {
            name: "toGeoref"
            type: "string"
            Parameter { name: "numberOfDigits"; type: "int" }
            Parameter { name: "roundToNearestWholeNumber"; type: "bool" }
        }
        Method {
            name: "toMgrs"
            type: "string"
            Parameter { name: "conversionMode"; type: "QmlEnums::MgrsConversionMode" }
            Parameter { name: "numberOfDigits"; type: "int" }
            Parameter { name: "roundToNearestWholeNumber"; type: "bool" }
            Parameter { name: "addSpaces"; type: "bool" }
        }
        Method {
            name: "toUsng"
            type: "string"
            Parameter { name: "numberOfDigits"; type: "int" }
            Parameter { name: "roundToNearestWholeNumber"; type: "bool" }
            Parameter { name: "addSpaces"; type: "bool" }
        }
        Method {
            name: "toUtm"
            type: "string"
            Parameter { name: "conversionMode"; type: "QmlEnums::UtmConversionMode" }
            Parameter { name: "addSpaces"; type: "bool" }
        }
    }
    Component {
        name: "QmlPolygon"
        prototype: "QmlMultiPath"
        exports: ["ArcGIS.Runtime/Polygon 10.26"]
        exportMetaObjectRevisions: [0]
        Method {
            name: "setXY"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
        Method {
            name: "calculateRingArea2D"
            type: "double"
            Parameter { name: "ringIndex"; type: "int" }
        }
    }
    Component {
        name: "QmlPolyline"
        prototype: "QmlMultiPath"
        exports: ["ArcGIS.Runtime/Polyline 10.26"]
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "QmlPortal"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/Portal 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "json"; type: "QVariantMap" }
        Property { name: "currentVersion"; type: "string"; isReadonly: true }
        Property { name: "credentials"; type: "QmlUserCredentials"; isPointer: true }
        Property { name: "expires"; type: "QDateTime" }
        Property { name: "portalInfo"; type: "QmlPortalInfo"; isReadonly: true; isPointer: true }
        Property { name: "signedIn"; type: "bool"; isReadonly: true }
        Property { name: "token"; type: "string" }
        Property { name: "url"; type: "QUrl" }
        Property { name: "user"; type: "QmlPortalUserInfo"; isReadonly: true; isPointer: true }
        Property { name: "_internalObject"; type: "QObject"; isReadonly: true; isPointer: true }
        Signal { name: "infoChanged" }
        Signal { name: "signInComplete" }
        Signal {
            name: "signInError"
            Parameter { name: "error"; type: "QmlServiceError"; isPointer: true }
        }
        Method { name: "signIn" }
        Method { name: "signOut" }
    }
    Component {
        name: "QmlPortalAddItem"
        prototype: "QmlPortalTask"
        exports: ["ArcGIS.Runtime/PortalAddItem 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "folder"; type: "string" }
        Property { name: "itemId"; type: "string" }
        Property { name: "success"; type: "bool" }
        Method {
            name: "addItem"
            Parameter { name: "itemInfo"; type: "QmlPortalItemInfo"; isPointer: true }
        }
    }
    Component {
        name: "QmlPortalAddResource"
        prototype: "QmlPortalTask"
        exports: ["ArcGIS.Runtime/PortalAddResource 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "success"; type: "bool" }
        Method {
            name: "addResource"
            Parameter { name: "parameters"; type: "QmlPortalAddResourceParameters"; isPointer: true }
        }
    }
    Component {
        name: "QmlPortalAddResourceParameters"
        prototype: "QmlPortalRestValue"
        exports: ["ArcGIS.Runtime/PortalAddResourceParameters 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "file"; type: "string" }
        Property { name: "fileContentPath"; type: "QUrl" }
        Property { name: "fileContentText"; type: "string" }
        Property { name: "key"; type: "string" }
        Property { name: "text"; type: "string" }
    }
    Component {
        name: "QmlPortalAnalyze"
        prototype: "QmlPortalTask"
        exports: ["ArcGIS.Runtime/PortalAnalyze 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "publishParameters"; type: "QVariantMap" }
        Method {
            name: "analyze"
            Parameter { name: "parameters"; type: "QmlPortalAnalyzeParameters"; isPointer: true }
        }
    }
    Component {
        name: "QmlPortalAnalyzeParameters"
        prototype: "QmlPortalRestValue"
        exports: ["ArcGIS.Runtime/PortalAnalyzeParameters 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "fileType"; type: "QmlEnums::PortalFileType" }
        Property { name: "itemId"; type: "string" }
    }
    Component {
        name: "QmlPortalDeleteItem"
        prototype: "QmlPortalTask"
        exports: ["ArcGIS.Runtime/PortalDeleteItem 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "itemId"; type: "string" }
        Property { name: "success"; type: "bool" }
        Method {
            name: "deleteItem"
            Parameter { name: "itemInfo"; type: "QmlPortalItemInfo"; isPointer: true }
        }
    }
    Component {
        name: "QmlPortalDownloadGroupInfo"
        prototype: "QmlPortalTask"
        exports: ["ArcGIS.Runtime/PortalDownloadGroupInfo 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "groupInfo"; type: "QmlPortalGroupInfo"; isPointer: true }
        Method {
            name: "downloadGroupInfo"
            Parameter { name: "id"; type: "string" }
        }
        Method { name: "downloadGroupInfo" }
    }
    Component {
        name: "QmlPortalDownloadInfo"
        prototype: "QmlPortalTask"
        exports: ["ArcGIS.Runtime/PortalDownloadInfo 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "info"; type: "QmlPortalInfo"; isPointer: true }
        Method {
            name: "downloadInfo"
            Parameter { name: "id"; type: "string" }
            Parameter { name: "culture"; type: "string" }
            Parameter { name: "region"; type: "string" }
        }
        Method {
            name: "downloadInfo"
            Parameter { name: "id"; type: "string" }
            Parameter { name: "culture"; type: "string" }
        }
        Method {
            name: "downloadInfo"
            Parameter { name: "id"; type: "string" }
        }
        Method { name: "downloadInfo" }
    }
    Component {
        name: "QmlPortalDownloadItemData"
        prototype: "QmlPortalTask"
        exports: ["ArcGIS.Runtime/PortalDownloadItemData 10.26"]
        exportMetaObjectRevisions: [0]
        Method {
            name: "downloadItemData"
            Parameter { name: "itemInfo"; type: "QmlPortalItemInfo"; isPointer: true }
        }
    }
    Component {
        name: "QmlPortalDownloadItemInfo"
        prototype: "QmlPortalTask"
        exports: ["ArcGIS.Runtime/PortalDownloadItemInfo 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "itemInfo"; type: "QmlPortalItemInfo"; isPointer: true }
        Method {
            name: "downloadItemInfo"
            Parameter { name: "itemId"; type: "string" }
        }
    }
    Component {
        name: "QmlPortalDownloadItemThumbnail"
        prototype: "QmlPortalTask"
        exports: ["ArcGIS.Runtime/PortalDownloadItemThumbnail 10.26"]
        exportMetaObjectRevisions: [0]
        Signal { name: "itemThumbnailChanged" }
        Method {
            name: "downloadItemThumbnail"
            Parameter { name: "itemInfo"; type: "QmlPortalItemInfo"; isPointer: true }
        }
    }
    Component {
        name: "QmlPortalDownloadResourceData"
        prototype: "QmlPortalTask"
        exports: ["ArcGIS.Runtime/PortalDownloadResourceData 10.26"]
        exportMetaObjectRevisions: [0]
        Method {
            name: "downloadResourceData"
            Parameter { name: "key"; type: "string" }
        }
    }
    Component {
        name: "QmlPortalDownloadResources"
        prototype: "QmlPortalTask"
        exports: ["ArcGIS.Runtime/PortalDownloadResources 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "limit"; type: "int" }
        Property { name: "nextStart"; type: "int" }
        Property { name: "resources"; type: "QmlPortalResourceInfo"; isList: true; isReadonly: true }
        Property { name: "start"; type: "int" }
        Property { name: "total"; type: "int" }
        Method { name: "downloadNextResources" }
        Method { name: "downloadPreviousResources" }
        Method {
            name: "downloadResources"
            Parameter { name: "start"; type: "int" }
            Parameter { name: "num"; type: "int" }
        }
        Method {
            name: "downloadResources"
            Parameter { name: "start"; type: "int" }
        }
        Method { name: "downloadResources" }
    }
    Component {
        name: "QmlPortalDownloadUserContent"
        prototype: "QmlPortalTask"
        exports: ["ArcGIS.Runtime/PortalDownloadUserContent 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "currentFolder"; type: "QmlPortalFolderInfo"; isReadonly: true; isPointer: true }
        Property { name: "folders"; type: "QmlPortalFolderInfo"; isList: true; isReadonly: true }
        Property { name: "items"; type: "QmlPortalItemInfo"; isList: true; isReadonly: true }
        Property { name: "username"; type: "string" }
        Method {
            name: "downloadUserContent"
            Parameter { name: "folder"; type: "string" }
        }
        Method { name: "downloadUserContent" }
    }
    Component {
        name: "QmlPortalDownloadUserInfo"
        prototype: "QmlPortalTask"
        exports: ["ArcGIS.Runtime/PortalDownloadUserInfo 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "userInfo"; type: "QmlPortalUserInfo"; isPointer: true }
        Method {
            name: "downloadUserInfo"
            Parameter { name: "username"; type: "string" }
        }
        Method { name: "downloadUserInfo" }
    }
    Component {
        name: "QmlPortalDownloadUserThumbnail"
        prototype: "QmlPortalTask"
        exports: ["ArcGIS.Runtime/PortalDownloadUserThumbnail 10.26"]
        exportMetaObjectRevisions: [0]
        Method {
            name: "downloadUserThumbnail"
            Parameter { name: "userInfo"; type: "QmlPortalUserInfo"; isPointer: true }
        }
    }
    Component {
        name: "QmlPortalFolderInfo"
        prototype: "QmlPortalRestValue"
        exports: ["ArcGIS.Runtime/PortalFolderInfo 10.26"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "created"; type: "QDateTime" }
        Property { name: "folderId"; type: "string" }
        Property { name: "title"; type: "string" }
        Property { name: "username"; type: "string" }
    }
    Component {
        name: "QmlPortalGroupInfo"
        prototype: "QmlPortalRestValue"
        exports: ["ArcGIS.Runtime/PortalGroupInfo 10.26"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "access"; type: "QmlEnums::PortalAccess" }
        Property { name: "created"; type: "QDateTime" }
        Property { name: "description"; type: "string" }
        Property { name: "groupId"; type: "string" }
        Property { name: "isInvitationOnly"; type: "bool" }
        Property { name: "modified"; type: "QDateTime" }
        Property { name: "owner"; type: "string" }
        Property { name: "phone"; type: "string" }
        Property { name: "snippet"; type: "string" }
        Property { name: "tags"; type: "QStringList" }
        Property { name: "thumbnail"; type: "string" }
        Property { name: "thumbnailUrl"; type: "QUrl" }
        Property { name: "title"; type: "string" }
        Property { name: "userMembership"; type: "QVariant" }
        Method {
            name: "setPortal"
            Parameter { name: "portal"; type: "QmlPortal"; isPointer: true }
        }
    }
    Component {
        name: "QmlPortalInfo"
        prototype: "QmlPortalRestValue"
        exports: ["ArcGIS.Runtime/PortalInfo 10.26"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "access"; type: "QmlEnums::PortalAccess" }
        Property { name: "allSSL"; type: "bool" }
        Property { name: "availableCredits"; type: "double" }
        Property { name: "basemapGalleryGroupQuery"; type: "string" }
        Property { name: "canSearchPublic"; type: "bool" }
        Property { name: "canSharePublic"; type: "bool" }
        Property { name: "colorSetsGroupQuery"; type: "string" }
        Property { name: "commentsEnabled"; type: "bool" }
        Property { name: "created"; type: "QDateTime" }
        Property { name: "culture"; type: "string" }
        Property { name: "customBaseUrl"; type: "string" }
        Property { name: "description"; type: "string" }
        Property { name: "featuredItemsGroupQuery"; type: "string" }
        Property { name: "homePageFeaturedContent"; type: "string" }
        Property { name: "homePageFeaturedContentCount"; type: "int" }
        Property { name: "organizationId"; type: "string" }
        Property { name: "isPortal"; type: "bool" }
        Property { name: "ipCntryCode"; type: "string" }
        Property { name: "layerTemplatesGroupQuery"; type: "string" }
        Property { name: "licenseInfo"; type: "QmlLicenseInfo"; isReadonly: true; isPointer: true }
        Property { name: "maxTokenExpirationMinutes"; type: "int" }
        Property { name: "modified"; type: "QDateTime" }
        Property { name: "name"; type: "string" }
        Property { name: "portalHostname"; type: "string" }
        Property { name: "portalMode"; type: "QmlEnums::PortalMode" }
        Property { name: "portalName"; type: "string" }
        Property { name: "portalThumbnail"; type: "string" }
        Property { name: "portalThumbnailUrl"; type: "QUrl" }
        Property { name: "region"; type: "string" }
        Property { name: "showHomePageDescription"; type: "bool" }
        Property { name: "storageQuota"; type: "string" }
        Property { name: "storageUsage"; type: "string" }
        Property { name: "supportsOAuth"; type: "bool" }
        Property { name: "symbolSetsGroupQuery"; type: "string" }
        Property { name: "templatesGroupQuery"; type: "string" }
        Property { name: "thumbnail"; type: "string" }
        Property { name: "thumbnailUrl"; type: "QUrl" }
        Property { name: "urlKey"; type: "string" }
        Property { name: "user"; type: "QmlPortalUserInfo"; isReadonly: true; isPointer: true }
        Signal { name: "defaultExtentChanged" }
        Method {
            name: "setPortal"
            Parameter { name: "portal"; type: "QmlPortal"; isPointer: true }
        }
    }
    Component {
        name: "QmlPortalItemInfo"
        prototype: "QmlPortalRestValue"
        exports: ["ArcGIS.Runtime/PortalItemInfo 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "access"; type: "QmlEnums::PortalAccess" }
        Property { name: "accessInformation"; type: "string" }
        Property { name: "avgRating"; type: "int" }
        Property { name: "commentsEnabled"; type: "bool" }
        Property { name: "created"; type: "QDateTime" }
        Property { name: "culture"; type: "string" }
        Property { name: "description"; type: "string" }
        Property { name: "extent"; type: "QmlEnvelope"; isPointer: true }
        Property { name: "file"; type: "string" }
        Property { name: "fileContentPath"; type: "QUrl" }
        Property { name: "fileContentText"; type: "string" }
        Property { name: "itemId"; type: "string" }
        Property { name: "itemType"; type: "QmlEnums::PortalItemType" }
        Property { name: "licenseInfo"; type: "string" }
        Property { name: "modified"; type: "QDateTime" }
        Property { name: "name"; type: "string" }
        Property { name: "numComments"; type: "int" }
        Property { name: "numRatings"; type: "int" }
        Property { name: "numViews"; type: "int" }
        Property { name: "owner"; type: "string" }
        Property { name: "ownerFolder"; type: "string" }
        Property { name: "size"; type: "int" }
        Property { name: "snippet"; type: "string" }
        Property { name: "spatialReference"; type: "QmlSpatialReference"; isPointer: true }
        Property { name: "tags"; type: "QStringList" }
        Property { name: "thumbnail"; type: "string" }
        Property { name: "thumbnailContentPath"; type: "QUrl" }
        Property { name: "thumbnailUrl"; type: "QUrl" }
        Property { name: "title"; type: "string" }
        Property { name: "typeKeywords"; type: "QStringList" }
        Property { name: "url"; type: "string" }
        Method {
            name: "setPortal"
            Parameter { name: "portal"; type: "QmlPortal"; isPointer: true }
        }
    }
    Component {
        name: "QmlPortalProgressInfo"
        prototype: "QmlPortalRestValue"
        exports: ["ArcGIS.Runtime/PortalProgressInfo 10.26"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "bytesReceived"; type: "int" }
        Property { name: "bytesSent"; type: "int" }
        Property { name: "estimatedFinishTime"; type: "QDateTime" }
        Property { name: "progressPercentage"; type: "int" }
        Property { name: "startTime"; type: "QDateTime" }
        Property { name: "totalBytesToReceive"; type: "int" }
        Property { name: "totalBytesToSend"; type: "int" }
    }
    Component {
        name: "QmlPortalPublishItem"
        prototype: "QmlPortalTask"
        exports: ["ArcGIS.Runtime/PortalPublishItem 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "services"; type: "QmlPortalServiceInfo"; isList: true; isReadonly: true }
        Method {
            name: "publishItem"
            Parameter { name: "parameters"; type: "QmlPortalPublishItemParameters"; isPointer: true }
        }
    }
    Component {
        name: "QmlPortalPublishItemParameters"
        prototype: "QmlPortalRestValue"
        exports: ["ArcGIS.Runtime/PortalPublishItemParameters 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "fileType"; type: "QmlEnums::PortalFileType" }
        Property { name: "itemId"; type: "string" }
        Property { name: "outputType"; type: "string" }
        Property { name: "publishParameters"; type: "QVariantMap" }
    }
    Component {
        name: "QmlPortalRemoveResource"
        prototype: "QmlPortalTask"
        exports: ["ArcGIS.Runtime/PortalRemoveResource 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "success"; type: "bool" }
        Method {
            name: "removeResource"
            Parameter { name: "key"; type: "string" }
        }
    }
    Component {
        name: "QmlPortalResourceInfo"
        prototype: "QmlPortalRestValue"
        exports: ["ArcGIS.Runtime/PortalResourceInfo 10.26"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "created"; type: "QDateTime" }
        Property { name: "key"; type: "string" }
        Property { name: "size"; type: "string" }
    }
    Component {
        name: "QmlPortalRestValue"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/PortalRestValue 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "isEmpty"; type: "bool"; isReadonly: true }
        Property { name: "json"; type: "QVariantMap" }
        Property { name: "toString"; type: "string" }
        Method { name: "clear" }
        Method {
            name: "item"
            type: "QmlPortalRestValue*"
            Parameter { name: "key"; type: "string" }
        }
    }
    Component {
        name: "QmlPortalSearchGroups"
        prototype: "QmlPortalTask"
        exports: ["ArcGIS.Runtime/PortalSearchGroups 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "nextStart"; type: "int" }
        Property { name: "limit"; type: "int" }
        Property { name: "query"; type: "string" }
        Property { name: "start"; type: "int" }
        Property { name: "totalResults"; type: "int" }
        Property { name: "results"; type: "QmlPortalGroupInfo"; isList: true; isReadonly: true }
        Signal { name: "requestComplete" }
        Signal {
            name: "requestError"
            Parameter { name: "code"; type: "int" }
            Parameter { name: "message"; type: "string" }
        }
        Method {
            name: "searchGroups"
            Parameter { name: "searchParameters"; type: "QmlPortalSearchParameters"; isPointer: true }
        }
        Method { name: "searchNextGroups" }
        Method { name: "searchPreviousGroups" }
    }
    Component {
        name: "QmlPortalSearchItems"
        prototype: "QmlPortalTask"
        exports: ["ArcGIS.Runtime/PortalSearchItems 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "nextStart"; type: "int" }
        Property { name: "limit"; type: "int" }
        Property { name: "query"; type: "string" }
        Property { name: "start"; type: "int" }
        Property { name: "totalResults"; type: "int" }
        Property { name: "results"; type: "QmlPortalItemInfo"; isList: true; isReadonly: true }
        Method {
            name: "searchItems"
            Parameter { name: "searchParameters"; type: "QmlPortalSearchParameters"; isPointer: true }
        }
        Method { name: "searchNextItems" }
        Method { name: "searchPreviousItems" }
    }
    Component {
        name: "QmlPortalSearchParameters"
        prototype: "QmlPortalRestValue"
        exports: ["ArcGIS.Runtime/PortalSearchParameters 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "limit"; type: "int" }
        Property { name: "query"; type: "string" }
        Property { name: "sortField"; type: "string" }
        Property { name: "start"; type: "int" }
        Signal { name: "sortOrderChanged" }
    }
    Component {
        name: "QmlPortalSearchUsers"
        prototype: "QmlPortalTask"
        exports: ["ArcGIS.Runtime/PortalSearchUsers 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "nextStart"; type: "int" }
        Property { name: "limit"; type: "int" }
        Property { name: "query"; type: "string" }
        Property { name: "start"; type: "int" }
        Property { name: "totalResults"; type: "int" }
        Property { name: "results"; type: "QmlPortalUserInfo"; isList: true; isReadonly: true }
        Method {
            name: "searchUsers"
            Parameter { name: "searchParameters"; type: "QmlPortalSearchParameters"; isPointer: true }
        }
        Method { name: "searchNextUsers" }
        Method { name: "searchPreviousUsers" }
    }
    Component {
        name: "QmlPortalServiceInfo"
        prototype: "QmlPortalRestValue"
        exports: ["ArcGIS.Runtime/PortalServiceInfo 10.26"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "encodedServiceUrl"; type: "QUrl" }
        Property { name: "jobId"; type: "string" }
        Property { name: "serviceItemId"; type: "string" }
        Property { name: "serviceType"; type: "string" }
        Property { name: "serviceUrl"; type: "QUrl" }
        Property { name: "size"; type: "int" }
    }
    Component {
        name: "QmlPortalShareItem"
        prototype: "QmlPortalTask"
        exports: ["ArcGIS.Runtime/PortalShareItem 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "itemId"; type: "string" }
        Method {
            name: "shareItem"
            Parameter { name: "itemInfo"; type: "QmlPortalItemInfo"; isPointer: true }
            Parameter { name: "parameters"; type: "QmlPortalShareItemParameters"; isPointer: true }
        }
    }
    Component {
        name: "QmlPortalShareItemParameters"
        prototype: "QmlPortalRestValue"
        exports: ["ArcGIS.Runtime/PortalShareItemParameters 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "everyone"; type: "bool" }
        Property { name: "groups"; type: "QStringList" }
        Property { name: "org"; type: "bool" }
    }
    Component {
        name: "QmlPortalTask"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/PortalTask 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "json"; type: "QVariantMap" }
        Property { name: "portal"; type: "QmlPortal"; isPointer: true }
        Property { name: "requestPath"; type: "string" }
        Property { name: "responseFilename"; type: "QUrl" }
        Property { name: "responseContentType"; type: "string" }
        Property { name: "responseText"; type: "string" }
        Property { name: "requestError"; type: "QmlServiceError"; isReadonly: true; isPointer: true }
        Property { name: "requestStatus"; type: "QmlEnums::PortalRequestStatus"; isReadonly: true }
        Property {
            name: "requestProgress"
            type: "QmlPortalProgressInfo"
            isReadonly: true
            isPointer: true
        }
    }
    Component {
        name: "QmlPortalUpdateItem"
        prototype: "QmlPortalTask"
        exports: ["ArcGIS.Runtime/PortalUpdateItem 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "itemId"; type: "string" }
        Property { name: "success"; type: "bool" }
        Method {
            name: "updateItem"
            Parameter { name: "itemInfo"; type: "QmlPortalItemInfo"; isPointer: true }
        }
    }
    Component {
        name: "QmlPortalUserInfo"
        prototype: "QmlPortalRestValue"
        exports: ["ArcGIS.Runtime/PortalUserInfo 10.26"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "access"; type: "QmlEnums::PortalAccess" }
        Property { name: "created"; type: "QDateTime" }
        Property { name: "culture"; type: "string" }
        Property { name: "description"; type: "string" }
        Property { name: "email"; type: "string" }
        Property { name: "fullName"; type: "string" }
        Property { name: "modified"; type: "QDateTime" }
        Property { name: "orgId"; type: "string" }
        Property { name: "preferredView"; type: "string" }
        Property { name: "region"; type: "string" }
        Property { name: "role"; type: "string" }
        Property { name: "storageQuota"; type: "string" }
        Property { name: "storageUsage"; type: "string" }
        Property { name: "tags"; type: "QStringList" }
        Property { name: "thumbnail"; type: "string" }
        Property { name: "thumbnailUrl"; type: "QUrl" }
        Property { name: "username"; type: "string" }
        Method {
            name: "setPortal"
            Parameter { name: "portal"; type: "QmlPortal"; isPointer: true }
        }
    }
    Component {
        name: "QmlPositionDisplay"
        defaultProperty: "positionSource"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/PositionDisplay 10.26"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "positionSource"; type: "QObject"; isPointer: true }
        Property { name: "compass"; type: "QObject"; isPointer: true }
        Property { name: "mode"; type: "QmlEnums::AutoPanMode" }
        Property { name: "showAccuracy"; type: "bool" }
        Property { name: "showPing"; type: "bool" }
        Property { name: "showPosition"; type: "bool" }
        Property { name: "navigationPointHeightFactor"; type: "float" }
        Property { name: "opacity"; type: "float" }
        Property { name: "wanderExtentFactor"; type: "float" }
        Property { name: "zoomScale"; type: "float" }
        Property { name: "courseSymbol"; type: "QmlMarkerSymbol"; isPointer: true }
        Property { name: "defaultSymbol"; type: "QmlMarkerSymbol"; isPointer: true }
        Property { name: "headingSymbol"; type: "QmlMarkerSymbol"; isPointer: true }
        Property { name: "accuracySymbol"; type: "QmlFillSymbol"; isPointer: true }
        Property { name: "pingSymbol"; type: "QmlMarkerSymbol"; isPointer: true }
        Property { name: "geoPoint"; type: "QmlPoint"; isReadonly: true; isPointer: true }
        Property { name: "mapPoint"; type: "QmlPoint"; isReadonly: true; isPointer: true }
        Signal {
            name: "positionDisplayError"
            Parameter { name: "error"; type: "string" }
        }
    }
    Component {
        name: "QmlPositionLayer"
        defaultProperty: "positionSource"
        prototype: "QmlGraphicsLayer"
        exports: ["ArcGIS.Runtime/PositionLayer 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "positionSource"; type: "QObject"; isPointer: true }
        Property { name: "showTrackPoints"; type: "bool" }
        Property { name: "showTrail"; type: "bool" }
        Property { name: "showCourseSymbol"; type: "bool" }
        Property { name: "trailSymbol"; type: "QmlLineSymbol"; isPointer: true }
        Property { name: "defaultSymbol"; type: "QmlMarkerSymbol"; isPointer: true }
        Property { name: "courseSymbol"; type: "QmlMarkerSymbol"; isPointer: true }
        Property { name: "trackPointSymbol"; type: "QmlMarkerSymbol"; isPointer: true }
        Signal { name: "modeChanged" }
        Signal { name: "autoFocusBoundaryChanged" }
    }
    Component {
        name: "QmlProximity2DResult"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/Proximity2DResult 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "coordinate"; type: "QmlPoint"; isReadonly: true; isPointer: true }
        Property { name: "vertexIndex"; type: "int"; isReadonly: true }
        Property { name: "distance"; type: "double"; isReadonly: true }
    }
    Component {
        name: "QmlQuery"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/Query 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "json"; type: "QVariantMap" }
        Property { name: "text"; type: "string" }
        Property { name: "where"; type: "string" }
        Property { name: "returnGeometry"; type: "bool" }
        Property { name: "returnZ"; type: "bool" }
        Property { name: "returnM"; type: "bool" }
        Property { name: "returnIdsOnly"; type: "bool" }
        Property { name: "returnCountOnly"; type: "bool" }
        Property { name: "returnDistinctValues"; type: "bool" }
        Property { name: "maxFeatures"; type: "int" }
        Property { name: "maxAllowableOffset"; type: "double" }
        Property { name: "objectIds"; type: "QStringList" }
        Property { name: "outFields"; type: "QStringList" }
        Property { name: "geometry"; type: "QmlGeometry"; isPointer: true }
        Property { name: "geometryPrecision"; type: "int" }
        Property { name: "outSpatialReference"; type: "QmlSpatialReference"; isPointer: true }
        Property { name: "spatialRelationship"; type: "QmlEnums::SpatialRelationship" }
        Property { name: "spatialRelationshipString"; type: "string"; isReadonly: true }
        Property { name: "dynamicLayerInfo"; type: "QmlDynamicLayerInfo"; isPointer: true }
        Property { name: "timeExtent"; type: "QmlTimeExtent"; isPointer: true }
        Property { name: "geodatabaseVersion"; type: "string" }
        Property { name: "outStatistics"; type: "QmlOutStatistics"; isList: true; isReadonly: true }
        Property { name: "groupByFieldsForStatistics"; type: "QStringList" }
        Property { name: "orderByFields"; type: "QVariantList" }
    }
    Component {
        name: "QmlQueryRelatedRecordsParameters"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/QueryRelatedRecordsParameters 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "definitionExpression"; type: "string" }
        Property { name: "maxAllowableOffset"; type: "double" }
        Property { name: "objectIds"; type: "QStringList" }
        Property { name: "outFields"; type: "QStringList" }
        Property { name: "outSpatialReference"; type: "QmlSpatialReference"; isPointer: true }
        Property { name: "relationshipId"; type: "int" }
        Property { name: "returnGeometry"; type: "bool" }
        Property { name: "returnZ"; type: "bool" }
        Property { name: "returnM"; type: "bool" }
        Property { name: "geometryPrecision"; type: "int" }
        Property { name: "geodatabaseVersion"; type: "string" }
        Property { name: "json"; type: "QVariantMap" }
    }
    Component {
        name: "QmlQueryTableDataSource"
        prototype: "QmlDataSource"
        exports: ["ArcGIS.Runtime/QueryTableDataSource 10.26"]
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "QmlQueryTask"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/QueryTask 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "url"; type: "string" }
        Property { name: "credentials"; type: "QmlUserCredentials"; isPointer: true }
        Property { name: "queryResult"; type: "QmlFeatureSet"; isReadonly: true; isPointer: true }
        Property { name: "queryError"; type: "QmlServiceError"; isReadonly: true; isPointer: true }
        Property { name: "queryTaskStatus"; type: "QmlEnums::QueryTaskStatus"; isReadonly: true }
        Property {
            name: "relationshipQueryResult"
            type: "QmlRelatedRecordSet"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "relationshipQueryError"
            type: "QmlServiceError"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "relationshipQueryTaskStatus"
            type: "QmlEnums::RelationshipQueryTaskStatus"
            isReadonly: true
        }
        Method {
            name: "execute"
            Parameter { name: "query"; type: "QVariant" }
        }
        Method {
            name: "executeRelationshipQuery"
            Parameter { name: "query"; type: "QVariant" }
        }
    }
    Component {
        name: "QmlRangeDomain"
        prototype: "QmlDomain"
        exports: ["ArcGIS.Runtime/RangeDomain 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "minValue"; type: "double"; isReadonly: true }
        Property { name: "maxValue"; type: "double"; isReadonly: true }
    }
    Component {
        name: "QmlRelatedRecordGroup"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/RelatedRecordGroup 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "graphics"; type: "QmlGraphic"; isList: true; isReadonly: true }
        Property { name: "objectId"; type: "string"; isReadonly: true }
        Property { name: "json"; type: "QVariantMap" }
    }
    Component {
        name: "QmlRelatedRecordSet"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/RelatedRecordSet 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "fields"; type: "QmlField"; isList: true; isReadonly: true }
        Property { name: "geometryType"; type: "string"; isReadonly: true }
        Property {
            name: "relatedRecordGroups"
            type: "QmlRelatedRecordGroup"
            isList: true
            isReadonly: true
        }
        Property {
            name: "spatialReference"
            type: "QmlSpatialReference"
            isReadonly: true
            isPointer: true
        }
        Property { name: "json"; type: "QVariantMap" }
    }
    Component {
        name: "QmlRelationship"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/Relationship 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "relationshipId"; type: "int"; isReadonly: true }
        Property { name: "name"; type: "string"; isReadonly: true }
        Property { name: "cardinality"; type: "QmlEnums::RelationshipCardinality"; isReadonly: true }
        Property { name: "isComposite"; type: "bool"; isReadonly: true }
        Property { name: "keyField"; type: "string"; isReadonly: true }
        Property { name: "role"; type: "QmlEnums::RelationshipRole"; isReadonly: true }
        Property {
            name: "relatedTable"
            type: "QmlGeodatabaseFeatureTable"
            isReadonly: true
            isPointer: true
        }
        Property { name: "jsonGeodatabase"; type: "QmlGeodatabase"; isPointer: true }
        Property { name: "json"; type: "QVariantMap" }
    }
    Component {
        name: "QmlRenderer"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/Renderer 10.26"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "json"; type: "QVariantMap" }
        Property { name: "rendererType"; type: "QmlEnums::RendererType"; isReadonly: true }
        Method {
            name: "featureSymbol"
            type: "QmlSymbol*"
            Parameter { name: "feature"; type: "QmlFeature"; isPointer: true }
        }
    }
    Component {
        name: "QmlResolutionList"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/ResolutionList 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "highest"; type: "double"; isReadonly: true }
        Property { name: "lowest"; type: "double"; isReadonly: true }
        Property { name: "resolutions"; type: "QList<double>"; isReadonly: true }
        Signal { name: "valuesChanged" }
        Method {
            name: "addFromLayer"
            Parameter { name: "layer"; type: "QmlLayer"; isPointer: true }
        }
        Method {
            name: "append"
            Parameter { name: "res"; type: "QVariant" }
        }
        Method {
            name: "insert"
            Parameter { name: "i"; type: "int" }
            Parameter { name: "value"; type: "double" }
        }
        Method {
            name: "removeOne"
            type: "bool"
            Parameter { name: "res"; type: "double" }
        }
        Method {
            name: "removeAt"
            Parameter { name: "i"; type: "int" }
        }
        Method { name: "removeFirst" }
        Method { name: "removeLast" }
        Method {
            name: "replace"
            Parameter { name: "i"; type: "int" }
            Parameter { name: "value"; type: "double" }
        }
        Method { name: "clear" }
        Method {
            name: "higher"
            type: "double"
            Parameter { name: "resolution"; type: "double" }
        }
        Method {
            name: "lower"
            type: "double"
            Parameter { name: "resolution"; type: "double" }
        }
    }
    Component {
        name: "QmlRestrictionAttribute"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/RestrictionAttribute 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "name"; type: "string"; isReadonly: true }
        Property { name: "restrictionUsageName"; type: "string"; isReadonly: true }
        Property { name: "parameters"; type: "QmlAttributeParameter"; isList: true; isReadonly: true }
    }
    Component {
        name: "QmlRoute"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/Route 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "route"; type: "QmlGraphic"; isReadonly: true; isPointer: true }
        Property { name: "routeId"; type: "int"; isReadonly: true }
        Property { name: "routeName"; type: "string"; isReadonly: true }
        Property { name: "totalMinutes"; type: "double"; isReadonly: true }
        Property { name: "totalDriveMinutes"; type: "double"; isReadonly: true }
        Property { name: "totalMiles"; type: "double"; isReadonly: true }
        Property { name: "totalKilometers"; type: "double"; isReadonly: true }
        Property { name: "totalWaitMinutes"; type: "double"; isReadonly: true }
        Property { name: "totalViolationMinutes"; type: "double"; isReadonly: true }
        Property { name: "totalStopMinutes"; type: "double"; isReadonly: true }
        Property { name: "envelope"; type: "QmlEnvelope"; isReadonly: true; isPointer: true }
        Property {
            name: "routingDirections"
            type: "QmlRoutingDirection"
            isList: true
            isReadonly: true
        }
        Method {
            name: "totalCost"
            type: "double"
            Parameter { name: "name"; type: "string" }
        }
    }
    Component {
        name: "QmlRouteTask"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/RouteTask 10.26"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property {
            name: "networkDescription"
            type: "QmlNetworkDescription"
            isReadonly: true
            isPointer: true
        }
        Property { name: "solveResult"; type: "QmlRoutingResult"; isReadonly: true; isPointer: true }
        Property { name: "solveError"; type: "QmlServiceError"; isReadonly: true; isPointer: true }
        Property { name: "solveStatus"; type: "QmlEnums::SolveStatus"; isReadonly: true }
    }
    Component {
        name: "QmlRouteTaskParameters"
        prototype: "QmlNATaskParameters"
        exports: ["ArcGIS.Runtime/RouteTaskParameters 10.26"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "returnDirections"; type: "bool" }
        Property { name: "returnRoutes"; type: "bool" }
        Property { name: "returnStops"; type: "bool" }
        Property { name: "ignoreInvalidLocations"; type: "bool" }
        Property { name: "findBestSequence"; type: "bool" }
        Property { name: "preserveFirstStop"; type: "bool" }
        Property { name: "preserveLastStop"; type: "bool" }
        Property { name: "useTimeWindows"; type: "bool" }
        Property { name: "stops"; type: "QmlNAFeatures"; isPointer: true }
        Property { name: "startTime"; type: "QDateTime" }
        Property { name: "directionsLanguage"; type: "string" }
        Property { name: "directionsStyleName"; type: "string" }
        Property { name: "directionsLengthUnit"; type: "QmlEnums::DirectionsLengthUnit" }
        Property { name: "directionsLengthUnitString"; type: "string"; isReadonly: true }
        Property { name: "directionsTimeAttributeName"; type: "string" }
    }
    Component {
        name: "QmlRoutingDirection"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/RoutingDirection 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "length"; type: "double"; isReadonly: true }
        Property { name: "time"; type: "double"; isReadonly: true }
        Property { name: "text"; type: "string"; isReadonly: true }
        Property { name: "eta"; type: "string"; isReadonly: true }
        Property { name: "geometry"; type: "QmlGeometry"; isReadonly: true; isPointer: true }
        Property { name: "maneuver"; type: "QmlEnums::RoutingManeuver"; isReadonly: true }
        Property { name: "maneuverString"; type: "string"; isReadonly: true }
        Property {
            name: "directionsStrings"
            type: "QmlDirectionsString"
            isList: true
            isReadonly: true
        }
        Property { name: "directionsEvents"; type: "QmlDirectionsEvent"; isList: true; isReadonly: true }
        Property { name: "json"; type: "QVariantMap" }
    }
    Component {
        name: "QmlRoutingResult"
        prototype: "QmlNAResult"
        exports: ["ArcGIS.Runtime/RoutingResult 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "routes"; type: "QmlRoute"; isList: true; isReadonly: true }
        Property { name: "stops"; type: "QmlFeatureSet"; isReadonly: true; isPointer: true }
        Property { name: "json"; type: "QVariantMap" }
    }
    Component {
        name: "QmlSegment"
        prototype: "QmlGeometry"
        exports: ["ArcGIS.Runtime/Segment 10.26"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "startXY"; type: "QmlPoint"; isPointer: true }
        Property { name: "startXYZ"; type: "QmlPoint"; isPointer: true }
        Property { name: "startX"; type: "double"; isReadonly: true }
        Property { name: "startY"; type: "double"; isReadonly: true }
        Property { name: "endXY"; type: "QmlPoint"; isPointer: true }
        Property { name: "endX"; type: "double"; isReadonly: true }
        Property { name: "endY"; type: "double"; isReadonly: true }
        Method { name: "queryStart"; type: "QmlPoint*" }
        Method { name: "queryEnd"; type: "QmlPoint*" }
    }
    Component {
        name: "QmlServiceAreaResult"
        prototype: "QmlNAResult"
        exports: ["ArcGIS.Runtime/ServiceAreaResult 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "serviceAreaPolygons"; type: "QmlFeatureSet"; isReadonly: true; isPointer: true }
        Property {
            name: "serviceAreaPolylines"
            type: "QmlFeatureSet"
            isReadonly: true
            isPointer: true
        }
        Property { name: "facilities"; type: "QmlFeatureSet"; isReadonly: true; isPointer: true }
        Property { name: "json"; type: "QVariantMap" }
    }
    Component {
        name: "QmlServiceAreaTask"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/ServiceAreaTask 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "url"; type: "string" }
        Property { name: "credentials"; type: "QmlUserCredentials"; isPointer: true }
        Property {
            name: "defaultParameters"
            type: "QmlServiceAreaTaskParameters"
            isReadonly: true
            isPointer: true
        }
        Property { name: "solveResult"; type: "QmlServiceAreaResult"; isReadonly: true; isPointer: true }
        Property { name: "solveError"; type: "QmlServiceError"; isReadonly: true; isPointer: true }
        Property { name: "solveStatus"; type: "QmlEnums::SolveStatus"; isReadonly: true }
        Method {
            name: "solve"
            Parameter { name: "parameters"; type: "QmlServiceAreaTaskParameters"; isPointer: true }
        }
    }
    Component {
        name: "QmlServiceAreaTaskParameters"
        prototype: "QmlNATaskParameters"
        exports: ["ArcGIS.Runtime/ServiceAreaTaskParameters 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "facilities"; type: "QmlNAFeatures"; isPointer: true }
        Property { name: "defaultBreaks"; type: "QList<double>" }
        Property { name: "excludeSourcesFromPolygons"; type: "QStringList" }
        Property { name: "mergeSimilarPolygonRanges"; type: "bool" }
        Property { name: "outputPolygons"; type: "QmlEnums::NAOutputPolygon" }
        Property { name: "outputPolygonsString"; type: "string"; isReadonly: true }
        Property { name: "overlapLines"; type: "bool" }
        Property { name: "overlapPolygons"; type: "bool" }
        Property { name: "splitLinesAtBreaks"; type: "bool" }
        Property { name: "splitPolygonsAtBreaks"; type: "bool" }
        Property { name: "trimOuterPolygon"; type: "bool" }
        Property { name: "trimPolygonDistance"; type: "double" }
        Property { name: "trimPolygonDistanceUnits"; type: "QmlEnums::EsriUnit" }
        Property { name: "trimPolygonDistanceUnitsString"; type: "string"; isReadonly: true }
        Property { name: "isReturnFacilities"; type: "bool" }
        Property { name: "timeOfDay"; type: "string" }
        Property { name: "travelDirection"; type: "QmlEnums::NATravelDirection" }
        Property { name: "travelDirectionString"; type: "string"; isReadonly: true }
        Property { name: "json"; type: "QVariantMap" }
    }
    Component {
        name: "QmlServiceError"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/ServiceError 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "code"; type: "int"; isReadonly: true }
        Property { name: "message"; type: "string"; isReadonly: true }
        Property { name: "details"; type: "string"; isReadonly: true }
        Property { name: "json"; type: "QVariantMap" }
    }
    Component {
        name: "QmlServiceInfoTask"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/ServiceInfoTask 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "url"; type: "string" }
        Property { name: "credentials"; type: "QmlUserCredentials"; isPointer: true }
        Property {
            name: "featureServiceInfo"
            type: "QmlFeatureServiceInfo"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "featureServiceInfoStatus"
            type: "QmlEnums::FeatureServiceInfoStatus"
            isReadonly: true
        }
        Property {
            name: "featureServiceInfoError"
            type: "QmlServiceError"
            isReadonly: true
            isPointer: true
        }
        Property { name: "mapServiceInfo"; type: "QmlMapServiceInfo"; isReadonly: true; isPointer: true }
        Property {
            name: "mapServiceInfoStatus"
            type: "QmlEnums::MapServiceInfoStatus"
            isReadonly: true
        }
        Property {
            name: "mapServiceInfoError"
            type: "QmlServiceError"
            isReadonly: true
            isPointer: true
        }
        Method { name: "fetchFeatureServiceInfo" }
        Method { name: "fetchMapServiceInfo" }
    }
    Component {
        name: "QmlServiceLocator"
        prototype: "QmlLocator"
        exports: ["ArcGIS.Runtime/ServiceLocator 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "url"; type: "string" }
        Property { name: "credentials"; type: "QmlUserCredentials"; isPointer: true }
    }
    Component {
        name: "QmlSimpleFillSymbol"
        defaultProperty: "outline"
        prototype: "QmlFillSymbol"
        exports: ["ArcGIS.Runtime/SimpleFillSymbol 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "style"; type: "QmlEnums::SimpleFillSymbolStyle" }
    }
    Component {
        name: "QmlSimpleLineSymbol"
        prototype: "QmlLineSymbol"
        exports: ["ArcGIS.Runtime/SimpleLineSymbol 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "style"; type: "QmlEnums::SimpleLineSymbolStyle" }
    }
    Component {
        name: "QmlSimpleMarkerSymbol"
        defaultProperty: "outline"
        prototype: "QmlMarkerSymbol"
        exports: ["ArcGIS.Runtime/SimpleMarkerSymbol 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "style"; type: "QmlEnums::SimpleMarkerSymbolStyle" }
        Property { name: "size"; type: "int" }
        Property { name: "color"; type: "QColor" }
        Property { name: "outline"; type: "QmlSimpleLineSymbol"; isPointer: true }
    }
    Component {
        name: "QmlSimpleRenderer"
        defaultProperty: "symbol"
        prototype: "QmlRenderer"
        exports: ["ArcGIS.Runtime/SimpleRenderer 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "symbol"; type: "QmlSymbol"; isPointer: true }
    }
    Component {
        name: "QmlSolveCondition"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/SolveCondition 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "solveCode"; type: "QmlEnums::SolveCode"; isReadonly: true }
        Property { name: "details"; type: "QList<int>"; isReadonly: true }
        Method {
            name: "messagesForCondition"
            type: "QStringList"
            Parameter { name: "routeTaskParameters"; type: "QmlRouteTaskParameters"; isPointer: true }
        }
    }
    Component {
        name: "QmlSpatialFilter"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/SpatialFilter 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "geometry"; type: "QmlGeometry"; isPointer: true }
        Property { name: "spatialRelationship"; type: "QmlEnums::SpatialRelationship" }
        Property { name: "spatialRelationshipString"; type: "string"; isReadonly: true }
    }
    Component {
        name: "QmlSpatialReference"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/SpatialReference 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "json"; type: "QVariantMap" }
        Property { name: "wkid"; type: "int" }
        Property { name: "wkt"; type: "string" }
        Property { name: "unit"; type: "QmlUnit"; isPointer: true }
        Property {
            name: "coordinateSystemType"
            type: "QmlEnums::SpatialReferenceType"
            isReadonly: true
        }
        Property { name: "gcs"; type: "QmlSpatialReference"; isReadonly: true; isPointer: true }
        Property { name: "latestWkid"; type: "int"; isReadonly: true }
        Property { name: "oldWkid"; type: "int"; isReadonly: true }
        Property { name: "tolerance"; type: "double"; isReadonly: true }
        Property { name: "pannableExtent"; type: "QmlEnvelope"; isReadonly: true; isPointer: true }
        Property { name: "isPannable"; type: "bool"; isReadonly: true }
        Property { name: "isWgs84"; type: "bool"; isReadonly: true }
        Property { name: "isAnyWebMercator"; type: "bool"; isReadonly: true }
        Signal { name: "spatialReferenceChanged" }
        Method {
            name: "toMilitaryGrid"
            type: "string"
            Parameter { name: "mgrsConversionMode"; type: "QmlEnums::MgrsConversionMode" }
            Parameter { name: "numOfDigits"; type: "int" }
            Parameter { name: "rounding"; type: "bool" }
            Parameter { name: "addSpaces"; type: "bool" }
            Parameter { name: "point"; type: "QmlPoint"; isPointer: true }
        }
        Method {
            name: "fromMilitaryGrid"
            type: "QmlPoint*"
            Parameter { name: "mgrs"; type: "string" }
            Parameter { name: "mgrsConversionMode"; type: "QmlEnums::MgrsConversionMode" }
        }
        Method {
            name: "extendedWkt"
            type: "string"
            Parameter { name: "verbosity"; type: "int" }
        }
    }
    Component {
        name: "QmlStopGraphic"
        prototype: "QmlGraphic"
        exports: ["ArcGIS.Runtime/StopGraphic 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "name"; type: "string" }
        Property { name: "routeName"; type: "string" }
        Property { name: "sequence"; type: "int" }
        Property { name: "timeWindowStart"; type: "string" }
        Property { name: "timeWindowEnd"; type: "string" }
        Method { name: "clone"; type: "QmlGraphic*" }
    }
    Component {
        name: "QmlSymbol"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/Symbol 10.26"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "json"; type: "QVariantMap" }
        Property { name: "symbolType"; type: "QmlEnums::SymbolType"; isReadonly: true }
        Property { name: "symbolTypeString"; type: "string"; isReadonly: true }
        Method {
            name: "symbolImage"
            type: "QmlSymbolImage*"
            Parameter { name: "geometry"; type: "QmlGeometry"; isPointer: true }
            Parameter { name: "backgroundColor"; type: "QColor" }
        }
        Method {
            name: "symbolImage"
            type: "QmlSymbolImage*"
            Parameter { name: "backgroundColor"; type: "QColor" }
        }
        Method { name: "symbolImage"; type: "QmlSymbolImage*" }
    }
    Component {
        name: "QmlSymbolImage"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/SymbolImage 10.26"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "url"; type: "QUrl"; isReadonly: true }
        Property { name: "symbol"; type: "QmlSymbol"; isPointer: true }
        Property { name: "geometry"; type: "QmlGeometry"; isPointer: true }
        Property { name: "backgroundColor"; type: "QColor" }
        Property { name: "defaultSize"; type: "QSize" }
        Signal { name: "imageChanged" }
    }
    Component {
        name: "QmlSyncCapabilities"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/SyncCapabilities 10.26"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "supportsAsync"; type: "bool"; isReadonly: true }
        Property { name: "supportsRegisteringExistingData"; type: "bool"; isReadonly: true }
        Property { name: "supportsSyncDirectionControl"; type: "bool"; isReadonly: true }
        Property { name: "supportsPerLayerSync"; type: "bool"; isReadonly: true }
        Property { name: "supportsPerGeodatabaseSync"; type: "bool"; isReadonly: true }
        Property { name: "json"; type: "QVariantMap" }
    }
    Component {
        name: "QmlSyncGeodatabaseParameters"
        defaultProperty: "layerSyncInfos"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/SyncGeodatabaseParameters 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "json"; type: "QVariantMap" }
        Property { name: "syncDirection"; type: "QmlEnums::SyncDirection" }
        Property { name: "layerSyncInfos"; type: "QmlLayerSyncInfo"; isList: true; isReadonly: true }
    }
    Component {
        name: "QmlTable"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/Table 10.26"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "tableId"; type: "int"; isReadonly: true }
        Property { name: "tableName"; type: "string"; isReadonly: true }
        Property { name: "json"; type: "QVariantMap" }
    }
    Component {
        name: "QmlTableDataSource"
        prototype: "QmlDataSource"
        exports: ["ArcGIS.Runtime/TableDataSource 10.26"]
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "QmlTextSymbol"
        prototype: "QmlMarkerSymbol"
        exports: ["ArcGIS.Runtime/TextSymbol 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "text"; type: "string" }
        Property { name: "size"; type: "float" }
        Property { name: "textColor"; type: "QColor" }
        Property { name: "fontFamily"; type: "string" }
        Property { name: "bold"; type: "bool" }
        Property { name: "italic"; type: "bool" }
        Property { name: "underline"; type: "bool" }
        Property { name: "strikeThrough"; type: "bool" }
        Property { name: "antiAliased"; type: "bool" }
        Property { name: "textOutlineWidth"; type: "float" }
        Property { name: "textOutlineColor"; type: "QColor" }
        Property { name: "backgroundColor"; type: "QColor" }
        Property { name: "rightToLeft"; type: "bool" }
        Property { name: "horizontalAlignment"; type: "QmlEnums::HorizontalAlignment" }
        Property { name: "verticalAlignment"; type: "QmlEnums::VerticalAlignment" }
    }
    Component {
        name: "QmlTileInfo"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/TileInfo 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "cols"; type: "int" }
        Property { name: "rows"; type: "int" }
        Property { name: "dpi"; type: "int" }
        Property { name: "origin"; type: "QmlPoint"; isPointer: true }
        Property { name: "lods"; type: "QmlLOD"; isList: true; isReadonly: true }
        Property { name: "json"; type: "QVariantMap" }
    }
    Component {
        name: "QmlTiledMapServiceLayer"
        prototype: "QmlLayer"
        exports: ["ArcGIS.Runtime/TiledMapServiceLayer 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "url"; type: "string" }
        Property { name: "brightness"; type: "float" }
        Property { name: "contrast"; type: "float" }
        Property { name: "gamma"; type: "float" }
        Property { name: "tileInfo"; type: "QmlTileInfo"; isPointer: true }
        Property { name: "fullExtent"; type: "QmlEnvelope"; isPointer: true }
        Property { name: "initialExtent"; type: "QmlEnvelope"; isPointer: true }
        Property { name: "defaultSpatialReference"; type: "QmlSpatialReference"; isPointer: true }
        Signal {
            name: "requestTile"
            Parameter { name: "level"; type: "int" }
            Parameter { name: "col"; type: "int" }
            Parameter { name: "row"; type: "int" }
        }
        Signal {
            name: "cancelTile"
            Parameter { name: "level"; type: "int" }
            Parameter { name: "col"; type: "int" }
            Parameter { name: "row"; type: "int" }
        }
        Method { name: "clearTiles" }
        Method {
            name: "setTile"
            Parameter { name: "level"; type: "int" }
            Parameter { name: "col"; type: "int" }
            Parameter { name: "row"; type: "int" }
            Parameter { name: "url"; type: "QUrl" }
        }
    }
    Component {
        name: "QmlTimeExtent"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/TimeExtent 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "endDate"; type: "QDateTime" }
        Property { name: "startDate"; type: "QDateTime" }
        Method {
            name: "intersects"
            type: "bool"
            Parameter { name: "dateTime"; type: "QDateTime" }
        }
        Method {
            name: "intersects"
            type: "bool"
            Parameter { name: "timeExtent"; type: "QmlTimeExtent"; isPointer: true }
        }
        Method {
            name: "offset"
            type: "QmlTimeExtent*"
            Parameter { name: "years"; type: "int" }
            Parameter { name: "months"; type: "int" }
            Parameter { name: "days"; type: "int" }
        }
        Method {
            name: "offset"
            type: "QmlTimeExtent*"
            Parameter { name: "hours"; type: "int" }
            Parameter { name: "minutes"; type: "int" }
            Parameter { name: "seconds"; type: "int" }
            Parameter { name: "milliseconds"; type: "int" }
        }
        Method {
            name: "offset"
            type: "QmlTimeExtent*"
            Parameter { name: "years"; type: "int" }
            Parameter { name: "months"; type: "int" }
            Parameter { name: "days"; type: "int" }
            Parameter { name: "hours"; type: "int" }
            Parameter { name: "minutes"; type: "int" }
            Parameter { name: "seconds"; type: "int" }
            Parameter { name: "milliseconds"; type: "int" }
        }
    }
    Component {
        name: "QmlTimeInfo"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/TimeInfo 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "startTimeField"; type: "string"; isReadonly: true }
        Property { name: "endTimeField"; type: "string"; isReadonly: true }
        Property { name: "trackIdField"; type: "string"; isReadonly: true }
        Property { name: "timeInterval"; type: "int"; isReadonly: true }
        Property { name: "timeIntervalUnits"; type: "QmlEnums::TimeOptionsUnits"; isReadonly: true }
        Property { name: "timeExtent"; type: "QmlTimeExtent"; isReadonly: true; isPointer: true }
        Property { name: "timeReference"; type: "QmlTimeReference"; isReadonly: true; isPointer: true }
        Property { name: "exportOptions"; type: "QmlTimeOptions"; isReadonly: true; isPointer: true }
        Property { name: "json"; type: "QVariantMap" }
    }
    Component {
        name: "QmlTimeOptions"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/TimeOptions 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "timeOffset"; type: "int" }
        Property { name: "timeOffsetUnits"; type: "QmlEnums::TimeOptionsUnits" }
        Property { name: "timeDataCumulative"; type: "bool" }
        Property { name: "useTime"; type: "bool" }
        Property { name: "json"; type: "QVariantMap" }
    }
    Component {
        name: "QmlTimeReference"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/TimeReference 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "timeZone"; type: "string"; isReadonly: true }
        Property { name: "respectsDaylightSaving"; type: "bool"; isReadonly: true }
        Property { name: "json"; type: "QVariantMap" }
        Signal { name: "timeReferenceChanged" }
    }
    Component {
        name: "QmlUniqueValueInfo"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/UniqueValueInfo 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "value"; type: "QVariantList" }
        Property { name: "label"; type: "string" }
        Property { name: "description"; type: "string" }
        Property { name: "symbol"; type: "QmlSymbol"; isPointer: true }
        Property { name: "jsonDelimiter"; type: "string" }
        Property { name: "json"; type: "QVariantMap"; isReadonly: true }
    }
    Component {
        name: "QmlUniqueValueRenderer"
        defaultProperty: "uniqueValues"
        prototype: "QmlRenderer"
        exports: ["ArcGIS.Runtime/UniqueValueRenderer 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "attributeNames"; type: "QStringList" }
        Property { name: "defaultLabel"; type: "string" }
        Property { name: "defaultSymbol"; type: "QmlSymbol"; isPointer: true }
        Property { name: "uniqueValues"; type: "QmlUniqueValueInfo"; isList: true; isReadonly: true }
        Method {
            name: "addValue"
            Parameter { name: "uniqueValue"; type: "QmlUniqueValueInfo"; isPointer: true }
        }
        Method {
            name: "removeValue"
            Parameter { name: "uniqueValue"; type: "QmlUniqueValueInfo"; isPointer: true }
        }
        Method { name: "removeAll" }
    }
    Component {
        name: "QmlUnit"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/Unit 10.26"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "wkid"; type: "int" }
        Property { name: "unitType"; type: "QmlEnums::UnitType"; isReadonly: true }
        Property { name: "name"; type: "string"; isReadonly: true }
        Property { name: "displayName"; type: "string"; isReadonly: true }
        Property { name: "pluralDisplayName"; type: "string"; isReadonly: true }
        Property { name: "abbreviation"; type: "string"; isReadonly: true }
        Property { name: "baseFactor"; type: "double"; isReadonly: true }
        Method {
            name: "conversionFactor"
            type: "double"
            Parameter { name: "destinationUnit"; type: "QmlUnit"; isPointer: true }
        }
        Method { name: "unitToBaseFactor"; type: "double" }
        Method {
            name: "convertUnits"
            type: "double"
            Parameter { name: "valueIn"; type: "double" }
            Parameter { name: "fromUnit"; type: "QmlUnit"; isPointer: true }
        }
    }
    Component {
        name: "QmlUserCredentials"
        prototype: "QmlObject"
        exports: ["ArcGIS.Runtime/UserCredentials 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "userName"; type: "string" }
        Property { name: "password"; type: "string" }
        Property { name: "type"; type: "QmlEnums::AuthenticationType"; isReadonly: true }
        Property { name: "referer"; type: "string" }
        Property { name: "token"; type: "string" }
        Property { name: "tokenExpiry"; type: "QDateTime" }
        Property { name: "tokenServiceUrl"; type: "string" }
        Property { name: "oAuthClientInfo"; type: "QmlOAuthClientInfo"; isPointer: true }
        Property { name: "sslRequired"; type: "bool"; isReadonly: true }
        Property { name: "authenticatingHost"; type: "string"; isReadonly: true }
        Method {
            name: "equals"
            type: "bool"
            Parameter { name: "credentials"; type: "QmlUserCredentials"; isPointer: true }
        }
    }
    Component {
        name: "QmlWheelEvent"
        prototype: "QmlInputEvent"
        exports: ["ArcGIS.Runtime/WheelEvent 10.26"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "x"; type: "int"; isReadonly: true }
        Property { name: "y"; type: "int"; isReadonly: true }
        Property { name: "pixelDelta"; type: "QPoint"; isReadonly: true }
        Property { name: "angleDelta"; type: "QPoint"; isReadonly: true }
        Property { name: "buttons"; type: "int"; isReadonly: true }
        Property { name: "mapX"; type: "double"; isReadonly: true }
        Property { name: "mapY"; type: "double"; isReadonly: true }
        Property { name: "mapPoint"; type: "QmlPoint"; isReadonly: true; isPointer: true }
    }
    Component {
        name: "QmlWmsDynamicMapServiceLayer"
        prototype: "QmlDynamicLayer"
        exports: ["ArcGIS.Runtime/WmsDynamicMapServiceLayer 10.26"]
        exportMetaObjectRevisions: [0]
        Property { name: "url"; type: "string" }
    }
}
