import QtQuick.tooling 1.1

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -noinstantiate -nonrelocatable ArcGIS.Extras 1.0'

Module {
    Component { name: "QSettings"; prototype: "QObject" }
    Component {
        name: "TkExifInfo"
        prototype: "TkFileInfo"
        exports: ["ArcGIS.Extras/ExifInfo 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "isExifValid"; type: "bool"; isReadonly: true }
        Property { name: "imageTags"; type: "QList<int>"; isReadonly: true }
        Property { name: "extendedTags"; type: "QList<int>"; isReadonly: true }
        Property { name: "gpsTags"; type: "QList<int>"; isReadonly: true }
        Property { name: "gpsLongitude"; type: "double"; isReadonly: true }
        Property { name: "gpsLatitude"; type: "double"; isReadonly: true }
        Property { name: "gpsAltitude"; type: "double"; isReadonly: true }
        Signal { name: "exifChanged" }
        Method {
            name: "imageValue"
            type: "QVariant"
            Parameter { name: "imageTag"; type: "int" }
        }
        Method {
            name: "extendedValue"
            type: "QVariant"
            Parameter { name: "extendedTag"; type: "int" }
        }
        Method {
            name: "gpsValue"
            type: "QVariant"
            Parameter { name: "gpsTag"; type: "int" }
        }
    }
    Component {
        name: "TkFileFolder"
        prototype: "QObject"
        exports: ["ArcGIS.Extras/FileFolder 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "path"; type: "string" }
        Property { name: "url"; type: "QUrl" }
        Property { name: "exists"; type: "bool"; isReadonly: true }
        Property { name: "folderName"; type: "string"; isReadonly: true }
        Method { name: "cdUp"; type: "bool" }
        Method {
            name: "cd"
            type: "bool"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "fileNames"
            type: "QStringList"
            Parameter { name: "nameFilter"; type: "QVariant" }
            Parameter { name: "subFolders"; type: "bool" }
        }
        Method {
            name: "fileNames"
            type: "QStringList"
            Parameter { name: "nameFilter"; type: "QVariant" }
        }
        Method { name: "fileNames"; type: "QStringList" }
        Method {
            name: "folderNames"
            type: "QStringList"
            Parameter { name: "nameFilter"; type: "QVariant" }
            Parameter { name: "subFolders"; type: "bool" }
        }
        Method {
            name: "folderNames"
            type: "QStringList"
            Parameter { name: "nameFilter"; type: "QVariant" }
        }
        Method { name: "folderNames"; type: "QStringList" }
        Method { name: "makeFolder"; type: "bool" }
        Method { name: "removeFolder"; type: "bool" }
        Method {
            name: "removeFolder"
            type: "bool"
            Parameter { name: "folderName"; type: "string" }
            Parameter { name: "recursive"; type: "bool" }
        }
        Method {
            name: "removeFolder"
            type: "bool"
            Parameter { name: "folderName"; type: "string" }
        }
        Method {
            name: "makePath"
            type: "bool"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "removePath"
            type: "bool"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "filePath"
            type: "string"
            Parameter { name: "fileName"; type: "string" }
        }
        Method {
            name: "relativeFilePath"
            type: "string"
            Parameter { name: "fileName"; type: "string" }
        }
        Method {
            name: "fileUrl"
            type: "QUrl"
            Parameter { name: "fileName"; type: "string" }
        }
        Method {
            name: "fileExists"
            type: "bool"
            Parameter { name: "fileName"; type: "string" }
        }
        Method {
            name: "removeFile"
            type: "bool"
            Parameter { name: "fileName"; type: "string" }
        }
        Method {
            name: "renameFile"
            type: "bool"
            Parameter { name: "oldFileName"; type: "string" }
            Parameter { name: "newFileName"; type: "string" }
        }
        Method {
            name: "copyFile"
            type: "bool"
            Parameter { name: "fileName"; type: "string" }
            Parameter { name: "filePath"; type: "string" }
        }
        Method {
            name: "fileInfo"
            type: "TkFileInfo*"
            Parameter { name: "fileName"; type: "string" }
        }
        Method {
            name: "folder"
            type: "TkFileFolder*"
            Parameter { name: "folderName"; type: "string" }
        }
        Method {
            name: "readFile"
            type: "QVariant"
            Parameter { name: "fileName"; type: "string" }
            Parameter { name: "options"; type: "QVariantMap" }
        }
        Method {
            name: "readFile"
            type: "QVariant"
            Parameter { name: "fileName"; type: "string" }
        }
        Method {
            name: "writeFile"
            type: "bool"
            Parameter { name: "fileName"; type: "string" }
            Parameter { name: "content"; type: "QVariant" }
            Parameter { name: "options"; type: "QVariantMap" }
        }
        Method {
            name: "writeFile"
            type: "bool"
            Parameter { name: "fileName"; type: "string" }
            Parameter { name: "content"; type: "QVariant" }
        }
        Method {
            name: "readJsonFile"
            type: "QVariantMap"
            Parameter { name: "fileName"; type: "string" }
        }
        Method {
            name: "writeJsonFile"
            type: "bool"
            Parameter { name: "fileName"; type: "string" }
            Parameter { name: "json"; type: "QVariantMap" }
        }
        Method {
            name: "readTextFile"
            type: "string"
            Parameter { name: "fileName"; type: "string" }
        }
        Method {
            name: "writeTextFile"
            type: "bool"
            Parameter { name: "fileName"; type: "string" }
            Parameter { name: "text"; type: "string" }
        }
        Method {
            name: "settingsFile"
            type: "TkSettings*"
            Parameter { name: "fileName"; type: "string" }
        }
    }
    Component {
        name: "TkFileInfo"
        prototype: "QObject"
        exports: ["ArcGIS.Extras/FileInfo 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Permission"
            values: {
                "ExeOther": 1,
                "WriteOther": 2,
                "ReadOther": 4,
                "ExeGroup": 16,
                "WriteGroup": 32,
                "ReadGroup": 64,
                "ExeUser": 256,
                "WriteUser": 512,
                "ReadUser": 1024,
                "ExeOwner": 4096,
                "WriteOwner": 8192,
                "ReadOwner": 16384
            }
        }
        Enum {
            name: "Permissions"
            values: {
                "ExeOther": 1,
                "WriteOther": 2,
                "ReadOther": 4,
                "ExeGroup": 16,
                "WriteGroup": 32,
                "ReadGroup": 64,
                "ExeUser": 256,
                "WriteUser": 512,
                "ReadUser": 1024,
                "ExeOwner": 4096,
                "WriteOwner": 8192,
                "ReadOwner": 16384
            }
        }
        Property { name: "filePath"; type: "string" }
        Property { name: "url"; type: "QUrl" }
        Property { name: "exists"; type: "bool"; isReadonly: true }
        Property { name: "size"; type: "string"; isReadonly: true }
        Property { name: "path"; type: "string"; isReadonly: true }
        Property { name: "fileName"; type: "string"; isReadonly: true }
        Property { name: "baseName"; type: "string"; isReadonly: true }
        Property { name: "suffix"; type: "string"; isReadonly: true }
        Property { name: "created"; type: "QDateTime"; isReadonly: true }
        Property { name: "lastModified"; type: "QDateTime"; isReadonly: true }
        Property { name: "isFile"; type: "bool"; isReadonly: true }
        Property { name: "isFolder"; type: "bool"; isReadonly: true }
        Property { name: "isReadable"; type: "bool"; isReadonly: true }
        Property { name: "isWritable"; type: "bool"; isReadonly: true }
        Property { name: "isNativePath"; type: "bool"; isReadonly: true }
        Property { name: "isSymLink"; type: "bool"; isReadonly: true }
        Property { name: "symLinkTarget"; type: "string"; isReadonly: true }
        Property { name: "folder"; type: "TkFileFolder"; isReadonly: true; isPointer: true }
        Property { name: "permissions"; type: "Permissions" }
        Method { name: "refresh" }
        Method {
            name: "setPermissions"
            type: "bool"
            Parameter { name: "permission"; type: "Permissions" }
        }
    }
    Component {
        name: "TkSettings"
        prototype: "QSettings"
        exports: ["ArcGIS.Extras/Settings 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "path"; type: "string"; isReadonly: true }
        Property { name: "fallbacksEnabled"; type: "bool" }
        Signal {
            name: "valueChanged"
            Parameter { name: "key"; type: "string" }
        }
        Method { name: "synchronize" }
        Method {
            name: "value"
            type: "QVariant"
            Parameter { name: "key"; type: "string" }
            Parameter { name: "defaultValue"; type: "QVariant" }
        }
        Method {
            name: "value"
            type: "QVariant"
            Parameter { name: "key"; type: "string" }
        }
        Method {
            name: "setValue"
            Parameter { name: "key"; type: "string" }
            Parameter { name: "value"; type: "QVariant" }
            Parameter { name: "defaultValue"; type: "QVariant" }
        }
        Method {
            name: "setValue"
            Parameter { name: "key"; type: "string" }
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "colorValue"
            type: "QColor"
            Parameter { name: "key"; type: "string" }
            Parameter { name: "defaultValue"; type: "QColor" }
        }
        Method {
            name: "colorValue"
            type: "QColor"
            Parameter { name: "key"; type: "string" }
        }
        Method {
            name: "setColorValue"
            Parameter { name: "key"; type: "string" }
            Parameter { name: "value"; type: "QColor" }
        }
        Method {
            name: "boolValue"
            type: "bool"
            Parameter { name: "key"; type: "string" }
            Parameter { name: "defaultValue"; type: "bool" }
        }
        Method {
            name: "boolValue"
            type: "bool"
            Parameter { name: "key"; type: "string" }
        }
        Method {
            name: "numberValue"
            type: "double"
            Parameter { name: "key"; type: "string" }
            Parameter { name: "defaultValue"; type: "double" }
        }
        Method {
            name: "numberValue"
            type: "double"
            Parameter { name: "key"; type: "string" }
        }
        Method {
            name: "remove"
            Parameter { name: "key"; type: "string" }
        }
        Method {
            name: "contains"
            type: "bool"
            Parameter { name: "key"; type: "string" }
        }
    }
    Component {
        name: "TkSystem"
        prototype: "QObject"
        exports: ["ArcGIS.Extras/System 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Property { name: "userHomePath"; type: "string" }
        Property { name: "userHomeFolder"; type: "TkFileFolder"; isReadonly: true; isPointer: true }
        Property { name: "temporaryFolder"; type: "TkFileFolder"; isReadonly: true; isPointer: true }
        Property { name: "settings"; type: "TkSettings"; isReadonly: true; isPointer: true }
        Property { name: "displayScaleFactor"; type: "double" }
        Property { name: "isOnline"; type: "bool"; isReadonly: true }
        Property { name: "loggingEnabled"; type: "bool" }
        Signal {
            name: "onlineStateChanged"
            Parameter { name: "online"; type: "bool" }
        }
        Method {
            name: "resolvedPath"
            type: "string"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "resolvedPath"
            type: "string"
            Parameter { name: "pathUrl"; type: "QUrl" }
        }
        Method {
            name: "resolvedPathUrl"
            type: "QUrl"
            Parameter { name: "pathUrl"; type: "string" }
        }
        Method {
            name: "pathVariable"
            type: "string"
            Parameter { name: "name"; type: "string" }
        }
        Method {
            name: "setPathVariable"
            Parameter { name: "name"; type: "string" }
            Parameter { name: "value"; type: "string" }
        }
        Method {
            name: "setLoggingFilterRules"
            Parameter { name: "rules"; type: "string" }
        }
        Method {
            name: "wait"
            Parameter { name: "msecs"; type: "uint" }
        }
    }
    Component {
        name: "TkZipArchive"
        prototype: "QObject"
        exports: ["ArcGIS.Extras/ZipArchive 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Result"
            values: {
                "EndOfListOfFile": -100,
                "ErrNo": -1,
                "EndOfFile": 0,
                "ParameterError": -102,
                "BadZipFile": -103,
                "InternalError": -104,
                "CrcError": -105
            }
        }
        Property { name: "path"; type: "string" }
        Property { name: "caseSensitive"; type: "bool" }
        Property { name: "isOpen"; type: "string"; isReadonly: true }
        Property { name: "fileNames"; type: "QStringList"; isReadonly: true }
        Property { name: "folderNames"; type: "QStringList"; isReadonly: true }
        Signal {
            name: "extractError"
            Parameter { name: "fileName"; type: "string" }
            Parameter { name: "outputFileName"; type: "string" }
            Parameter { name: "result"; type: "Result" }
        }
        Signal {
            name: "extractProgress"
            Parameter { name: "fileName"; type: "string" }
            Parameter { name: "outputFileName"; type: "string" }
            Parameter { name: "percent"; type: "double" }
        }
        Signal { name: "extractCompleted" }
        Method { name: "close" }
        Method {
            name: "exists"
            type: "bool"
            Parameter { name: "fileName"; type: "string" }
        }
        Method {
            name: "fileInfo"
            type: "TkZipFileInfo*"
            Parameter { name: "fileName"; type: "string" }
        }
        Method {
            name: "extractFile"
            type: "bool"
            Parameter { name: "fileName"; type: "string" }
            Parameter { name: "outputFilePath"; type: "string" }
        }
        Method {
            name: "extractAll"
            type: "bool"
            Parameter { name: "outputPath"; type: "string" }
        }
    }
    Component {
        name: "TkZipFileInfo"
        prototype: "QObject"
        exports: ["ArcGIS.Extras/ZipFileInfo 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "filePath"; type: "string"; isReadonly: true }
        Property { name: "size"; type: "string"; isReadonly: true }
        Property { name: "compressedSize"; type: "string"; isReadonly: true }
        Property { name: "path"; type: "string"; isReadonly: true }
        Property { name: "fileName"; type: "string"; isReadonly: true }
        Property { name: "suffix"; type: "string"; isReadonly: true }
        Property { name: "lastModified"; type: "QDateTime"; isReadonly: true }
        Property { name: "crc"; type: "ulong"; isReadonly: true }
    }
}
